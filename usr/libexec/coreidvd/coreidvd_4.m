uint64_t sub_10021AD68()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(uint64_t **)(v0 + 3032);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 272);
  if (v3)
  {
    swift_retain(*(_QWORD *)(*v1 + 272));
    sub_100004828((uint64_t *)&unk_100633430);
    Task.cancel()();
    swift_release(v3);
  }
  v4 = *(_QWORD *)(v0 + 2376);
  v5 = *(_QWORD *)(v0 + 2240);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0 + 2872))(v4, 1, 1, *(_QWORD *)(v0 + 2864));
  v6 = sub_100004790(&qword_100639058, (uint64_t (*)(uint64_t))type metadata accessor for DigitalPresentmentCredentialValidator, (uint64_t)&unk_100526894);
  v7 = (_QWORD *)swift_allocObject(&unk_10060BB50, 40, 7);
  v7[2] = v2;
  v7[3] = v6;
  v7[4] = v2;
  swift_retain_n(v2, 2);
  v8 = sub_10012E2A8(v4, (uint64_t)&unk_100639060, (uint64_t)v7);
  v9 = *(_QWORD *)(v2 + 272);
  *(_QWORD *)(v2 + 272) = v8;
  swift_release(v9);
  return swift_task_switch(sub_10021AE84, v5, 0);
}

uint64_t sub_10021AE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  id v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  void (*v82)(uint64_t);
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  objc_class *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::String v130;
  Swift::String v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v136;
  void (*v137)(uint64_t);
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t (*v159)(uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(uint64_t, uint64_t);
  uint64_t v221;
  uint64_t (*v222)(uint64_t);

  v1 = *(_QWORD *)(v0 + 3000);
  sub_1002227CC(v0 + 2152);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1104));
  sub_100008030(v0 + 1064, &qword_100639050);
  sub_10002581C(v0 + 1184, v0 + 1064);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1184));
  v2 = *(_QWORD *)(v0 + 3024);
  v3 = *(_QWORD *)(v0 + 3016);
  v4 = *(_QWORD *)(v0 + 3008);
  *(_QWORD *)(v0 + 3040) = v1;
  v5 = *(_QWORD *)(v0 + 544);
  *(_QWORD *)(v0 + 3048) = v5;
  v6 = *(_QWORD *)(v0 + 552);
  *(_QWORD *)(v0 + 3056) = v6;
  v214 = v0 + 1064;
  v217 = (_QWORD *)(v0 + 984);
  v208 = v0 + 1024;
  v211 = v1;
  if (v6 >> 60 == 15)
  {
    v7 = *(_QWORD *)(v0 + 2888);
    v8 = *(_QWORD *)(v0 + 2880);
    v204 = *(_QWORD *)(v0 + 2832);
    v187 = *(_QWORD *)(v0 + 2560);
    v191 = *(_QWORD *)(v0 + 2608);
    v9 = *(_QWORD *)(v0 + 2432);
    v10 = *(_QWORD *)(v0 + 2424);
    v11 = *(_QWORD *)(v0 + 2416);
    v194 = *(_QWORD *)(v0 + 2368);
    v196 = *(_QWORD *)(v0 + 2504);
    v178 = *(_QWORD *)(v0 + 2568);
    v183 = *(_QWORD *)(v0 + 2360);
    v12 = *(_QWORD *)(v0 + 2248);
    v201 = *(_QWORD *)(v0 + 2240);
    swift_bridgeObjectRelease(v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v9, enum case for DIPError.Code.dpAccesssControlRefNil(_:), v11);
    v13 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v14 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v15 = swift_allocError(v12, v14, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x8000000100555B30, 0, v9, 0, v13, 0xD00000000000006DLL, 0x8000000100555820, 0xD000000000000019, 0x8000000100555960, 349);
    v218 = v15;
    swift_willThrow(v16);
    sub_100222630((_QWORD *)(v0 + 736), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10022268C);
    sub_100007F8C(v8, v7);
    swift_release(v211);
    (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v191, v187);
    sub_100035DAC(v183, type metadata accessor for DigitalPresentmentSessionManager.Request);
    sub_100008030(v208, &qword_100639040);
    sub_100035DAC(v194, type metadata accessor for DigitalPresentmentISOBuilder);
    sub_100035DAC(v196, type metadata accessor for ValidatedDigitalPresentmentRequest);
    sub_100008030(v214, &qword_100639050);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v217);
    *(_BYTE *)(v201 + v204) = 0;
LABEL_11:
    v107 = *(int *)(v0 + 3220);
    v212 = *(_QWORD *)(v0 + 2616);
    v215 = *(_QWORD *)(v0 + 2624);
    v206 = *(_QWORD *)(v0 + 2568);
    v209 = *(_QWORD *)(v0 + 2560);
    v108 = *(_QWORD *)(v0 + 2520);
    v109 = *(_QWORD *)(v0 + 2432);
    v110 = *(_QWORD *)(v0 + 2264);
    v111 = *(_QWORD *)(v0 + 2256);
    v112 = *(_QWORD *)(v0 + 2248);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 2424) + 104))(v109, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 2416));
    swift_errorRetain(v218);
    v113 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v218, v109, 0, v113, 0xD00000000000006DLL, 0x8000000100555820, 0xD000000000000019, 0x8000000100555960, 439);
    v114 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v115 = swift_allocError(v112, v114, 0, 0);
    v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16);
    v116(v117, v110, v112);
    swift_errorRelease(*(_QWORD *)(v108 + v107));
    *(_QWORD *)(v108 + v107) = v115;
    swift_allocError(v112, v114, 0, 0);
    v119 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v116)(v118, v110, v112);
    swift_willThrow(v119);
    swift_errorRelease(v218);
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v110, v112);
    sub_100035E2C();
    v120 = *(void (**)(uint64_t, uint64_t))(v206 + 8);
    v120(v212, v209);
    v120(v215, v209);
    sub_100035DAC(v108, type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder);
    v121 = *(_QWORD *)(v0 + 2784);
    v122 = *(_QWORD *)(v0 + 2776);
    v123 = *(_QWORD *)(v0 + 2768);
    v124 = *(_QWORD *)(v0 + 2760);
    v125 = *(_QWORD *)(v0 + 2752);
    v126 = *(_QWORD *)(v0 + 2744);
    v127 = *(_QWORD *)(v0 + 2736);
    v128 = *(_QWORD *)(v0 + 2728);
    v129 = *(_QWORD *)(v0 + 2720);
    v142 = *(_QWORD *)(v0 + 2712);
    v143 = *(_QWORD *)(v0 + 2704);
    v144 = *(_QWORD *)(v0 + 2680);
    v145 = *(_QWORD *)(v0 + 2672);
    v146 = *(_QWORD *)(v0 + 2664);
    v147 = *(_QWORD *)(v0 + 2656);
    v148 = *(_QWORD *)(v0 + 2648);
    v150 = *(_QWORD *)(v0 + 2624);
    v152 = *(_QWORD *)(v0 + 2616);
    v154 = *(_QWORD *)(v0 + 2608);
    v156 = *(_QWORD *)(v0 + 2600);
    v158 = *(_QWORD *)(v0 + 2592);
    v160 = *(_QWORD *)(v0 + 2584);
    v161 = *(_QWORD *)(v0 + 2576);
    v162 = *(_QWORD *)(v0 + 2552);
    v163 = *(_QWORD *)(v0 + 2544);
    v164 = *(_QWORD *)(v0 + 2520);
    v166 = *(_QWORD *)(v0 + 2504);
    v168 = *(_QWORD *)(v0 + 2496);
    v170 = *(_QWORD *)(v0 + 2472);
    v174 = *(_QWORD *)(v0 + 2464);
    v177 = *(_QWORD *)(v0 + 2440);
    v182 = *(_QWORD *)(v0 + 2432);
    v186 = *(_QWORD *)(v0 + 2408);
    v190 = *(_QWORD *)(v0 + 2400);
    v193 = *(_QWORD *)(v0 + 2376);
    v195 = *(_QWORD *)(v0 + 2368);
    v200 = *(_QWORD *)(v0 + 2360);
    v203 = *(_QWORD *)(v0 + 2344);
    v207 = *(_QWORD *)(v0 + 2320);
    v210 = *(_QWORD *)(v0 + 2312);
    v213 = *(_QWORD *)(v0 + 2304);
    v216 = *(_QWORD *)(v0 + 2288);
    v221 = *(_QWORD *)(v0 + 2264);
    swift_task_dealloc(*(_QWORD *)(v0 + 2792));
    swift_task_dealloc(v121);
    swift_task_dealloc(v122);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v142);
    swift_task_dealloc(v143);
    swift_task_dealloc(v144);
    swift_task_dealloc(v145);
    swift_task_dealloc(v146);
    swift_task_dealloc(v147);
    swift_task_dealloc(v148);
    swift_task_dealloc(v150);
    swift_task_dealloc(v152);
    swift_task_dealloc(v154);
    swift_task_dealloc(v156);
    swift_task_dealloc(v158);
    swift_task_dealloc(v160);
    swift_task_dealloc(v161);
    swift_task_dealloc(v162);
    swift_task_dealloc(v163);
    swift_task_dealloc(v164);
    swift_task_dealloc(v166);
    swift_task_dealloc(v168);
    swift_task_dealloc(v170);
    swift_task_dealloc(v174);
    swift_task_dealloc(v177);
    swift_task_dealloc(v182);
    swift_task_dealloc(v186);
    swift_task_dealloc(v190);
    swift_task_dealloc(v193);
    swift_task_dealloc(v195);
    swift_task_dealloc(v200);
    swift_task_dealloc(v203);
    swift_task_dealloc(v207);
    swift_task_dealloc(v210);
    swift_task_dealloc(v213);
    swift_task_dealloc(v216);
    swift_task_dealloc(v221);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v197 = v3;
  v202 = v2;
  v205 = (_QWORD *)(v0 + 736);
  type metadata accessor for SecAccessControl(0);
  sub_100022948(v5, v6);
  v17 = (void *)static SecAccessControlRef.fromData(_:)(v5, v6);
  *(_QWORD *)(v0 + 3064) = v17;
  v18 = v6;
  v19 = v5;
  v218 = v4;
  if (v4)
  {
    v20 = *(_QWORD *)(v0 + 2888);
    v21 = *(_QWORD *)(v0 + 2880);
    v198 = *(_QWORD *)(v0 + 2832);
    v22 = *(_QWORD *)(v0 + 2608);
    v23 = *(_QWORD *)(v0 + 2568);
    v24 = *(_QWORD *)(v0 + 2560);
    v25 = *(_QWORD *)(v0 + 2504);
    v26 = *(_QWORD *)(v0 + 2368);
    v27 = *(_QWORD *)(v0 + 2360);
    v28 = *(_QWORD *)(v0 + 2240);
    sub_100007F78(v19, v18);
    sub_100222630(v205, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10022268C);
    sub_100007F8C(v21, v20);
    swift_bridgeObjectRelease(v202);
    swift_release(v211);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    sub_100035DAC(v27, type metadata accessor for DigitalPresentmentSessionManager.Request);
    sub_100008030(v208, &qword_100639040);
    sub_100035DAC(v26, type metadata accessor for DigitalPresentmentISOBuilder);
    sub_100035DAC(v25, type metadata accessor for ValidatedDigitalPresentmentRequest);
    sub_100008030(v214, &qword_100639050);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v217);
    *(_BYTE *)(v28 + v198) = 0;
    goto LABEL_11;
  }
  v29 = *(_QWORD *)(v0 + 2552);
  v30 = *(_QWORD *)(v0 + 2504);
  v179 = *(_QWORD *)(v0 + 2480);
  v31 = *(_QWORD *)(v0 + 2464);
  v165 = v31;
  v192 = *(_QWORD *)(v0 + 2400);
  v171 = *(_QWORD *)(v0 + 2392);
  v175 = *(_QWORD *)(v0 + 2384);
  v32 = *(_QWORD *)(v0 + 2240);
  v169 = v32 + *(_QWORD *)(v0 + 2824);
  static DaemonSignposts.requestDocumentLocalAuthentication.getter();
  DIPSignpost.init(_:)(v29);
  v33 = objc_msgSend(objc_allocWithZone((Class)LAContext), "init");
  *(_QWORD *)(v0 + 1368) = sub_10004BBDC();
  *(_QWORD *)(v0 + 1376) = &off_100619EF0;
  *(_QWORD *)(v0 + 1344) = v33;
  sub_10002581C(v0 + 1344, v0 + 1384);
  v34 = type metadata accessor for DigitalPresentmentLocalAuthenticationManager();
  v35 = swift_allocObject(v34, 80, 7);
  *(_QWORD *)(v0 + 3072) = v35;
  *(_BYTE *)(v35 + 64) = 4;
  *(_QWORD *)(v35 + 72) = 0;
  sub_100008018((__int128 *)(v0 + 1384), v35 + 16);
  *(_QWORD *)(v35 + 56) = v17;
  v17;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1344));
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  static DaemonSignposts.requestDocumentBuildUIConfiguration.getter();
  DIPSignpost.init(_:)(v29);
  v36 = *(_QWORD *)(v32 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_displayConfigurationBuilder);
  v37 = *(_QWORD *)(v32 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_displayConfigurationBuilder + 8);
  v38 = *(_QWORD *)(v0 + 576);
  v167 = v38;
  sub_100035DE8(v169, v31, type metadata accessor for DigitalPresentmentCallingClientConfig);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v171 + 16))(v192, v30, v175);
  v39 = *(_QWORD *)(v30 + *(int *)(v179 + 20));
  v40 = (uint64_t *)(v30 + *(int *)(v179 + 44));
  v41 = v40[1];
  v180 = *v40;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v38);
  v42 = swift_bridgeObjectRetain(v39);
  v43 = DigitalPresentmentRequest.merchantNameOverride.getter(v42);
  v45 = v44;
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 16);
  *(_QWORD *)(v0 + 1448) = v36;
  *(_QWORD *)(v0 + 1456) = v37;
  sub_100022234((_QWORD *)(v0 + 1424));
  v46(v167, v165, v197, v202, v192, v39, v180, v41, v43, v45, v36, v37);
  (*(void (**)(uint64_t, uint64_t))(v37 + 24))(v36, v37);
  v47 = *(_QWORD *)(v0 + 2552);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  static DaemonSignposts.requestDocumentCheckBiometricsStatus.getter();
  DIPSignpost.init(_:)(v47);
  v48 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v49._countAndFlagsBits = 0xD000000000000031;
  v49._object = (void *)0x8000000100555B50;
  LOBYTE(v45) = NSUserDefaults.internalBool(forKey:)(v49);

  if ((v45 & 1) != 0 || (sub_10046654C() & 1) != 0)
  {
    v219 = *(_QWORD *)(v0 + 2896);
    v155 = *(_BYTE *)(v0 + 3229);
    v149 = v0 + 1784;
    v199 = v0 + 1824;
    v151 = v0 + 2048;
    v157 = *(_QWORD *)(v0 + 2504);
    v50 = *(_QWORD *)(v0 + 2464);
    v172 = v50;
    v176 = *(_QWORD *)(v0 + 2368);
    v181 = *(_QWORD *)(v0 + 2336);
    v184 = *(_QWORD *)(v0 + 2328);
    v188 = *(_QWORD *)(v0 + 2344);
    v51 = *(_QWORD *)(v0 + 2320);
    v52 = *(_OWORD **)(v0 + 2240);
    v153 = (uint64_t)v52 + *(_QWORD *)(v0 + 2824);
    v53 = *(int **)(v0 + 2296);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_10002581C((uint64_t)v217, v0 + 1584);
    sub_100038B24(v214, v0 + 1624, &qword_100639050);
    sub_100035DE8(v153, v50, type metadata accessor for DigitalPresentmentCallingClientConfig);
    v54 = *(_QWORD *)(v35 + 40);
    v55 = *(_QWORD *)(v35 + 48);
    sub_10000806C((_QWORD *)(v35 + 16), v54);
    v159 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8);
    sub_100222630(v205, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10022258C);
    swift_retain(v211);
    swift_retain(v219);
    v56 = v159(v54, v55);
    v58 = v57;
    *(_BYTE *)v51 = v155;
    *(_QWORD *)(v51 + 8) = v211;
    v59 = (uint64_t *)(v0 + 176);
    sub_100035DE8(v157, v51 + v53[6], type metadata accessor for ValidatedDigitalPresentmentRequest);
    v60 = v51 + v53[7];
    v61 = *(_QWORD *)(v0 + 608);
    v63 = *(_OWORD *)(v0 + 576);
    v62 = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v60 + 64) = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v60 + 80) = v63;
    *(_OWORD *)(v60 + 96) = v62;
    *(_QWORD *)(v60 + 112) = v61;
    v65 = *(_OWORD *)(v0 + 528);
    v64 = *(_OWORD *)(v0 + 544);
    v66 = *(_OWORD *)(v0 + 512);
    *(_OWORD *)v60 = *(_OWORD *)(v0 + 496);
    *(_OWORD *)(v60 + 16) = v66;
    *(_OWORD *)(v60 + 32) = v65;
    *(_OWORD *)(v60 + 48) = v64;
    sub_100008018((__int128 *)(v0 + 1584), v51 + v53[8]);
    sub_1000A1F54(v0 + 1624, v51 + v53[9], &qword_100639050);
    sub_100035DE8(v176, v51 + v53[10], type metadata accessor for DigitalPresentmentISOBuilder);
    *(_QWORD *)(v51 + v53[11]) = v219;
    sub_100038AE0(v172, v51 + v53[12], type metadata accessor for DigitalPresentmentCallingClientConfig);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 16))(v51 + v53[13], v188, v184);
    sub_10002581C(v0 + 1424, v51 + v53[14]);
    v67 = (uint64_t *)(v51 + v53[15]);
    *v67 = v56;
    v67[1] = v58;
    *(_QWORD *)(v51 + v53[16]) = v35;
    v68 = v52[13];
    v69 = v52[14];
    v70 = v52[16];
    *(_OWORD *)(v0 + 304) = v52[15];
    *(_OWORD *)(v0 + 320) = v70;
    *(_OWORD *)(v0 + 272) = v68;
    *(_OWORD *)(v0 + 288) = v69;
    v71 = v52[9];
    v72 = v52[10];
    v73 = v52[12];
    *(_OWORD *)(v0 + 240) = v52[11];
    *(_OWORD *)(v0 + 256) = v73;
    *(_OWORD *)(v0 + 208) = v71;
    *(_OWORD *)(v0 + 224) = v72;
    v74 = v52[8];
    *(_OWORD *)(v0 + 176) = v52[7];
    *(_OWORD *)(v0 + 192) = v74;
    v75 = v52[8];
    *(_OWORD *)(v0 + 16) = v52[7];
    *(_OWORD *)(v0 + 32) = v75;
    v76 = v52[12];
    v78 = v52[9];
    v77 = v52[10];
    *(_OWORD *)(v0 + 80) = v52[11];
    *(_OWORD *)(v0 + 96) = v76;
    *(_OWORD *)(v0 + 48) = v78;
    *(_OWORD *)(v0 + 64) = v77;
    v79 = v52[16];
    v81 = v52[13];
    v80 = v52[14];
    *(_OWORD *)(v0 + 144) = v52[15];
    *(_OWORD *)(v0 + 160) = v79;
    *(_OWORD *)(v0 + 112) = v81;
    *(_OWORD *)(v0 + 128) = v80;
    nullsub_7(v0 + 16);
    sub_1000A1F54(v0 + 16, v0 + 336, &qword_1006310A8);
    v82 = *(void (**)(uint64_t))(v0 + 224);
    if (v82)
    {
      v83 = *(_QWORD *)(v0 + 232);
      swift_retain(v35);
      v84 = sub_10002EF2C((uint64_t)v82, v83);
      v85 = (_QWORD *)(v0 + 1664);
      v82(v84);
      sub_10002F034((uint64_t)v82, v83);
    }
    else
    {
      v86 = *(_QWORD *)(v0 + 2312);
      v173 = *(_QWORD *)(v0 + 2304);
      v87 = *(_QWORD *)(v0 + 2288);
      v88 = *(_QWORD *)(v0 + 2280);
      v89 = *(_QWORD *)(v0 + 2272);
      v185 = v89;
      sub_100035DE8(*(_QWORD *)(v0 + 2320), v86, type metadata accessor for DigitalPresentmentFlow.Context);
      swift_retain(v35);
      v90 = sub_10002EE34(v59);
      v91 = v87;
      v189 = v87;
      DeviceInformationProvider.init()(v90);
      v92 = (objc_class *)type metadata accessor for DigitalPresentmentUIPresenter(0);
      v93 = (char *)objc_allocWithZone(v92);
      *(_QWORD *)(v0 + 1728) = v89;
      *(_QWORD *)(v0 + 1736) = &protocol witness table for DeviceInformationProvider;
      v94 = sub_100022234((_QWORD *)(v0 + 1704));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v88 + 16))(v94, v91, v89);
      *(_QWORD *)&v93[OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator] = 0;
      sub_100004828(&qword_1006312D0);
      v95 = v93;
      v96 = AsyncPromise.__allocating_init()();
      *(_QWORD *)&v95[OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_uiResultPromise] = v96;
      sub_100035DE8(v86, (uint64_t)&v95[OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_context], type metadata accessor for DigitalPresentmentFlow.Context);
      sub_100035DE8(v86, v173, type metadata accessor for DigitalPresentmentFlow.Context);
      v97 = type metadata accessor for DaemonAnalytics(0);
      objc_allocWithZone((Class)type metadata accessor for DigitalPresentmentAuthorizationCoordinatorPrivateDelegate(0));
      sub_10002EE34(v59);
      swift_retain(v96);
      v98 = sub_1000C7700(v0 + 336, v173, v96, v97, (uint64_t)&off_10060AA40);
      swift_release(v96);
      sub_10002EF3C(v59);
      *(_QWORD *)&v95[OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_privateDelegate] = v98;
      sub_10002581C(v0 + 1704, (uint64_t)&v95[OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_deviceInformationProvider]);

      *(_QWORD *)(v0 + 2136) = v95;
      *(_QWORD *)(v0 + 2144) = v92;
      v99 = objc_msgSendSuper2((objc_super *)(v0 + 2136), "init");
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1704));
      sub_100035DAC(v86, type metadata accessor for DigitalPresentmentFlow.Context);
      sub_10002EF3C(v59);
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v189, v185);
      *(_QWORD *)(v0 + 1688) = v92;
      *(_QWORD *)(v0 + 1696) = &off_100605098;
      *(_QWORD *)(v0 + 1664) = v99;
      v85 = (_QWORD *)(v0 + 1664);
    }
    v220 = *(void (**)(uint64_t, uint64_t))(v0 + 2816);
    v100 = *(_QWORD *)(v0 + 2552);
    v101 = *(_QWORD *)(v0 + 2544);
    v102 = *(_QWORD *)(v0 + 2528);
    v103 = *(_QWORD *)(v0 + 2240);
    sub_10002581C((uint64_t)v85, v149);
    sub_1000A1F54(v149, v199, &qword_100639038);
    v103 += 280;
    swift_beginAccess(v103, v151, 33, 0);
    sub_100184E1C(v199, v103, &qword_100639038);
    v104 = swift_endAccess(v151);
    static DaemonSignposts.requestDocumentUI.getter(v104);
    v105 = DIPSignpost.init(_:)(v100);
    v106 = Date.init()(v105);
    *(double *)(v0 + 3096) = Date.timeIntervalSince1970.getter(v106);
    v220(v101, v102);
    sub_10000806C(v85, *(_QWORD *)(v0 + 1688));
    sub_10004EB18();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v130._countAndFlagsBits = 0xD00000000000002ELL;
    v130._object = (void *)0x8000000100555BE0;
    v131._countAndFlagsBits = 0x3434623438303861;
    v131._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v131, v130);
    v132 = *(_QWORD *)(*sub_10000806C(v85, *(_QWORD *)(v0 + 1688))
                     + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_uiResultPromise);
    *(_QWORD *)(v0 + 3104) = v132;
    v133 = *((unsigned int *)&async function pointer to dispatch thunk of AsyncPromise.value.getter + 1);
    v222 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of AsyncPromise.value.getter
                                           + async function pointer to dispatch thunk of AsyncPromise.value.getter);
    swift_retain(v132);
    v134 = (_QWORD *)swift_task_alloc(v133);
    *(_QWORD *)(v0 + 3112) = v134;
    *v134 = v0;
    v134[1] = sub_10021C9D8;
    return v222(v0 + 2176);
  }
  else
  {
    v136 = *(_QWORD *)(v0 + 2240);
    v137 = *(void (**)(uint64_t))(v136 + 224);
    if (v137)
    {
      v138 = *(_QWORD *)(v136 + 232);
      v139 = swift_retain(v138);
      v137(v139);
      sub_10002F034((uint64_t)v137, v138);
    }
    else
    {
      *(_QWORD *)(v0 + 1488) = *(_QWORD *)(v0 + 2272);
      *(_QWORD *)(v0 + 1496) = &protocol witness table for DeviceInformationProvider;
      v140 = sub_100022234((_QWORD *)(v0 + 1464));
      DeviceInformationProvider.init()(v140);
    }
    v141 = (_QWORD *)swift_task_alloc(dword_10063FF2C);
    *(_QWORD *)(v0 + 3080) = v141;
    *v141 = v0;
    v141[1] = sub_10021C2C4;
    return sub_1003FF3E8(v0 + 1464);
  }
}

uint64_t sub_10021C2C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = (_QWORD *)(*v1 + 1464);
  v4 = *(_QWORD *)(*v1 + 3080);
  *(_QWORD *)(*v1 + 3088) = v0;
  swift_task_dealloc(v4);
  v5 = *(_QWORD *)(v2 + 2240);
  sub_1002220A0(v3);
  if (v0)
    v6 = sub_10021E254;
  else
    v6 = sub_10021C340;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10021C340()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v46 = *(_QWORD *)(v0 + 3072);
  v1 = *(void **)(v0 + 3064);
  v2 = *(_QWORD *)(v0 + 3056);
  v3 = *(_QWORD *)(v0 + 3048);
  v63 = *(_QWORD *)(v0 + 3040);
  v59 = *(_QWORD *)(v0 + 2888);
  v50 = *(_QWORD *)(v0 + 2880);
  v90 = *(_QWORD *)(v0 + 2832);
  v71 = *(_QWORD *)(v0 + 2608);
  v67 = *(_QWORD *)(v0 + 2600);
  v65 = *(_QWORD *)(v0 + 2592);
  v61 = *(_QWORD *)(v0 + 2584);
  v57 = *(_QWORD *)(v0 + 2568);
  v4 = *(_QWORD *)(v0 + 2560);
  v77 = *(_QWORD *)(v0 + 2504);
  v5 = *(_QWORD *)(v0 + 2432);
  v73 = *(_QWORD *)(v0 + 2368);
  v69 = *(_QWORD *)(v0 + 2360);
  v48 = *(_QWORD *)(v0 + 2336);
  v53 = *(_QWORD *)(v0 + 2328);
  v55 = *(_QWORD *)(v0 + 2344);
  v6 = *(_QWORD *)(v0 + 2248);
  v81 = *(_QWORD *)(v0 + 2240);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 2424) + 104))(v5, enum case for DIPError.Code.digitalPresentmentBiometricsPermissionDenied(_:), *(_QWORD *)(v0 + 2416));
  v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v84 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v8 = swift_allocError(v6, v84, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000049, 0x8000000100555B90, 0, v5, 0, v7, 0xD00000000000006DLL, 0x8000000100555820, 0xD000000000000019, 0x8000000100555960, 375);
  swift_willThrow(v9);

  sub_100007F78(v3, v2);
  swift_release(v46);
  sub_100222630((_QWORD *)(v0 + 736), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10022268C);
  sub_100007F8C(v50, v59);
  swift_release(v63);
  v10 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  v10(v61, v4);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v55, v53);
  v10(v65, v4);
  v10(v67, v4);
  v10(v71, v4);
  sub_100035DAC(v69, type metadata accessor for DigitalPresentmentSessionManager.Request);
  sub_100008030(v0 + 1024, &qword_100639040);
  sub_100035DAC(v73, type metadata accessor for DigitalPresentmentISOBuilder);
  sub_100035DAC(v77, type metadata accessor for ValidatedDigitalPresentmentRequest);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1424));
  sub_100008030(v0 + 1064, &qword_100639050);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 984));
  *(_BYTE *)(v81 + v90) = 0;
  v11 = *(int *)(v0 + 3220);
  v86 = *(_QWORD *)(v0 + 2616);
  v88 = *(_QWORD *)(v0 + 2624);
  v79 = *(_QWORD *)(v0 + 2568);
  v82 = *(_QWORD *)(v0 + 2560);
  v12 = *(_QWORD *)(v0 + 2520);
  v13 = *(_QWORD *)(v0 + 2432);
  v14 = *(_QWORD *)(v0 + 2264);
  v15 = *(_QWORD *)(v0 + 2256);
  v16 = *(_QWORD *)(v0 + 2248);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 2424) + 104))(v13, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 2416));
  v17 = v8;
  swift_errorRetain(v8);
  v18 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v8, v13, 0, v18, 0xD00000000000006DLL, 0x8000000100555820, 0xD000000000000019, 0x8000000100555960, 439);
  v19 = swift_allocError(v16, v84, 0, 0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v20(v21, v14, v16);
  swift_errorRelease(*(_QWORD *)(v12 + v11));
  *(_QWORD *)(v12 + v11) = v19;
  swift_allocError(v16, v84, 0, 0);
  v23 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v22, v14, v16);
  swift_willThrow(v23);
  swift_errorRelease(v17);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  sub_100035E2C();
  v24 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
  v24(v86, v82);
  v24(v88, v82);
  sub_100035DAC(v12, type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder);
  v25 = *(_QWORD *)(v0 + 2784);
  v26 = *(_QWORD *)(v0 + 2776);
  v27 = *(_QWORD *)(v0 + 2768);
  v28 = *(_QWORD *)(v0 + 2760);
  v29 = *(_QWORD *)(v0 + 2752);
  v30 = *(_QWORD *)(v0 + 2744);
  v31 = *(_QWORD *)(v0 + 2736);
  v32 = *(_QWORD *)(v0 + 2728);
  v33 = *(_QWORD *)(v0 + 2720);
  v35 = *(_QWORD *)(v0 + 2712);
  v36 = *(_QWORD *)(v0 + 2704);
  v37 = *(_QWORD *)(v0 + 2680);
  v38 = *(_QWORD *)(v0 + 2672);
  v39 = *(_QWORD *)(v0 + 2664);
  v40 = *(_QWORD *)(v0 + 2656);
  v41 = *(_QWORD *)(v0 + 2648);
  v42 = *(_QWORD *)(v0 + 2624);
  v43 = *(_QWORD *)(v0 + 2616);
  v44 = *(_QWORD *)(v0 + 2608);
  v45 = *(_QWORD *)(v0 + 2600);
  v47 = *(_QWORD *)(v0 + 2592);
  v49 = *(_QWORD *)(v0 + 2584);
  v51 = *(_QWORD *)(v0 + 2576);
  v52 = *(_QWORD *)(v0 + 2552);
  v54 = *(_QWORD *)(v0 + 2544);
  v56 = *(_QWORD *)(v0 + 2520);
  v58 = *(_QWORD *)(v0 + 2504);
  v60 = *(_QWORD *)(v0 + 2496);
  v62 = *(_QWORD *)(v0 + 2472);
  v64 = *(_QWORD *)(v0 + 2464);
  v66 = *(_QWORD *)(v0 + 2440);
  v68 = *(_QWORD *)(v0 + 2432);
  v70 = *(_QWORD *)(v0 + 2408);
  v72 = *(_QWORD *)(v0 + 2400);
  v74 = *(_QWORD *)(v0 + 2376);
  v75 = *(_QWORD *)(v0 + 2368);
  v76 = *(_QWORD *)(v0 + 2360);
  v78 = *(_QWORD *)(v0 + 2344);
  v80 = *(_QWORD *)(v0 + 2320);
  v83 = *(_QWORD *)(v0 + 2312);
  v85 = *(_QWORD *)(v0 + 2304);
  v87 = *(_QWORD *)(v0 + 2288);
  v89 = *(_QWORD *)(v0 + 2264);
  swift_task_dealloc(*(_QWORD *)(v0 + 2792));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v78);
  swift_task_dealloc(v80);
  swift_task_dealloc(v83);
  swift_task_dealloc(v85);
  swift_task_dealloc(v87);
  swift_task_dealloc(v89);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10021C9D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 3112);
  *(_QWORD *)(*v1 + 3120) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 3104);
  v5 = *(_QWORD *)(v2 + 2240);
  swift_release(v4);
  if (v0)
    v6 = sub_10021E800;
  else
    v6 = sub_10021CA48;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10021CA48()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  Swift::String v13;
  Swift::String v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v1 = *(_BYTE *)(v0 + 3228);
  v2 = *(int *)(v0 + 3216);
  v3 = *(_QWORD *)(v0 + 2520);
  *(_QWORD *)(v0 + 3128) = *(_QWORD *)(v0 + 2176);
  *(_BYTE *)(v3 + v2) = 1;
  if ((v1 & 1) != 0)
    goto LABEL_4;
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 2816);
  v5 = *(_QWORD *)(v0 + 2544);
  v6 = *(_QWORD *)(v0 + 2528);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v8 = Date.init()(v7);
  *(double *)(v0 + 3136) = Date.timeIntervalSince1970.getter(v8);
  v4(v5, v6);
  v9 = *(_QWORD *)(v0 + 1088);
  *(_QWORD *)(v0 + 3144) = v9;
  if (!v9)
  {
LABEL_4:
    v13._object = (void *)0x8000000100555C10;
    v14._countAndFlagsBits = 0x6161303838616331;
    v14._object = (void *)0xE800000000000000;
    v13._countAndFlagsBits = 0xD000000000000018;
    logMilestone(tag:description:)(v14, v13);
    v15 = (void *)*sub_10000806C((_QWORD *)(v0 + 1664), *(_QWORD *)(v0 + 1688));
    v16 = type metadata accessor for DigitalPresentmentUIPresenter(0);
    *(_QWORD *)(v0 + 1768) = v16;
    *(_QWORD *)(v0 + 1776) = &off_100605098;
    *(_QWORD *)(v0 + 1744) = v15;
    v17 = *sub_10000806C((_QWORD *)(v0 + 1744), v16);
    v18 = defaultLogger()(v15);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.debug.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "DigitalPresentmentUIPresenter dismiss invoked.", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }
    v22 = *(void (**)(uint64_t, uint64_t))(v0 + 2800);
    v23 = *(_QWORD *)(v0 + 2728);
    v24 = *(_QWORD *)(v0 + 2688);

    v22(v23, v24);
    v25 = *(void **)(v17 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator);
    if (v25)
      objc_msgSend(v25, "dismissWithCompletion:", 0);
    v35 = *(_QWORD *)(v0 + 3056);
    v36 = *(_QWORD *)(v0 + 3072);
    v33 = *(void **)(v0 + 3064);
    v34 = *(_QWORD *)(v0 + 3048);
    v40 = *(_QWORD *)(v0 + 3040);
    v38 = *(_QWORD *)(v0 + 2888);
    v37 = *(_QWORD *)(v0 + 2880);
    v48 = *(_QWORD *)(v0 + 2832);
    v49 = *(_QWORD *)(v0 + 2792);
    v50 = *(_QWORD *)(v0 + 2784);
    v51 = *(_QWORD *)(v0 + 2776);
    v52 = *(_QWORD *)(v0 + 2768);
    v53 = *(_QWORD *)(v0 + 2760);
    v54 = *(_QWORD *)(v0 + 2752);
    v55 = *(_QWORD *)(v0 + 2744);
    v56 = *(_QWORD *)(v0 + 2736);
    v57 = *(_QWORD *)(v0 + 2728);
    v58 = *(_QWORD *)(v0 + 2720);
    v59 = *(_QWORD *)(v0 + 2712);
    v60 = *(_QWORD *)(v0 + 2704);
    v61 = *(_QWORD *)(v0 + 2680);
    v62 = *(_QWORD *)(v0 + 2672);
    v63 = *(_QWORD *)(v0 + 2664);
    v64 = *(_QWORD *)(v0 + 2656);
    v65 = *(_QWORD *)(v0 + 2648);
    v46 = *(_QWORD *)(v0 + 2616);
    v47 = *(_QWORD *)(v0 + 2624);
    v41 = *(_QWORD *)(v0 + 2600);
    v42 = *(_QWORD *)(v0 + 2608);
    v39 = *(_QWORD *)(v0 + 2592);
    v80 = *(_QWORD *)(v0 + 2584);
    v26 = *(_QWORD *)(v0 + 2576);
    v27 = *(_QWORD *)(v0 + 2568);
    v28 = *(_QWORD *)(v0 + 2560);
    v66 = *(_QWORD *)(v0 + 2552);
    v67 = *(_QWORD *)(v0 + 2544);
    v45 = *(_QWORD *)(v0 + 2520);
    v43 = *(_QWORD *)(v0 + 2504);
    v68 = *(_QWORD *)(v0 + 2496);
    v69 = *(_QWORD *)(v0 + 2472);
    v70 = *(_QWORD *)(v0 + 2464);
    v71 = *(_QWORD *)(v0 + 2440);
    v72 = *(_QWORD *)(v0 + 2432);
    v73 = *(_QWORD *)(v0 + 2408);
    v74 = *(_QWORD *)(v0 + 2400);
    v75 = *(_QWORD *)(v0 + 2376);
    v81 = *(_QWORD *)(v0 + 2368);
    v82 = *(_QWORD *)(v0 + 2360);
    v83 = *(_QWORD *)(v0 + 2344);
    v29 = *(_QWORD *)(v0 + 2336);
    v30 = *(_QWORD *)(v0 + 2328);
    v31 = *(_QWORD *)(v0 + 2320);
    v76 = *(_QWORD *)(v0 + 2312);
    v77 = *(_QWORD *)(v0 + 2304);
    v78 = *(_QWORD *)(v0 + 2288);
    v44 = *(_QWORD *)(v0 + 2240);
    v79 = *(_QWORD *)(v0 + 2264);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1744));
    v32 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v32(v26, v28);
    *(_QWORD *)(v0 + 2016) = 0;
    *(_OWORD *)(v0 + 2000) = 0u;
    *(_OWORD *)(v0 + 1984) = 0u;
    swift_beginAccess(v44 + 280, v0 + 2096, 33, 0);
    sub_100184E1C(v0 + 1984, v44 + 280, &qword_100639038);
    swift_endAccess(v0 + 2096);

    sub_100007F78(v34, v35);
    swift_release(v36);
    sub_100222630((_QWORD *)(v0 + 736), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10022268C);
    sub_100007F8C(v37, v38);
    swift_release(v40);
    sub_100035DAC(v31, type metadata accessor for DigitalPresentmentFlow.Context);
    v32(v80, v28);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v83, v30);
    v32(v39, v28);
    v32(v41, v28);
    v32(v42, v28);
    sub_100035DAC(v82, type metadata accessor for DigitalPresentmentSessionManager.Request);
    sub_100008030(v0 + 1024, &qword_100639040);
    sub_100035DAC(v81, type metadata accessor for DigitalPresentmentISOBuilder);
    sub_100035DAC(v43, type metadata accessor for ValidatedDigitalPresentmentRequest);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1664));
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1424));
    sub_100008030(v0 + 1064, &qword_100639050);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 984));
    *(_BYTE *)(v44 + v48) = 0;
    sub_100035E2C();
    v32(v46, v28);
    v32(v47, v28);
    sub_100035DAC(v45, type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v47);
    swift_task_dealloc(v46);
    swift_task_dealloc(v42);
    swift_task_dealloc(v41);
    swift_task_dealloc(v39);
    swift_task_dealloc(v80);
    swift_task_dealloc(v26);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v45);
    swift_task_dealloc(v43);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v31);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 3128));
  }
  else
  {
    sub_10000806C((_QWORD *)(v0 + 1064), v9);
    v10 = *(_QWORD *)(v9 - 8);
    *(_QWORD *)(v0 + 3152) = v10;
    v11 = (_QWORD *)swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(v0 + 3160) = v11;
    (*(void (**)(void))(v10 + 16))();
    return swift_task_switch(sub_10021D15C, *v11, 0);
  }
}

uint64_t sub_10021D15C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, __n128);
  __n128 v8;

  v1 = v0[395];
  v2 = v0[394];
  v3 = v0[393];
  v4 = v0[280];
  v5 = *(_QWORD **)v1;
  v0[396] = *(_QWORD *)(*(_QWORD *)v1 + 280);
  v0[397] = v5[36];
  v0[398] = v5[37];
  v0[399] = v5[38];
  v0[400] = v5[39];
  v6 = v5[40];
  v0[401] = v6;
  v7 = *(void (**)(uint64_t, uint64_t, __n128))(v2 + 8);
  v8 = swift_bridgeObjectRetain(v6);
  v7(v1, v3, v8);
  return swift_task_switch(sub_10021D1F0, v4, 0);
}

uint64_t sub_10021D1F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSString v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v1 = *(_QWORD *)(v0 + 3208);
  swift_task_dealloc(*(_QWORD *)(v0 + 3160));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 3208);
    v3 = *(_QWORD *)(v0 + 3200);
    v4 = *(_QWORD *)(v0 + 3192);
    v5 = *(_QWORD *)(v0 + 3184);
    v6 = *(_BYTE *)(v0 + 3176);
    v7 = *(_QWORD *)(v0 + 3168);
    v8 = *(double *)(v0 + 3136);
    v9 = v8 - *(double *)(v0 + 3096);
    v10 = v8 - *(double *)(v0 + 2808);
    swift_bridgeObjectRetain(v2);
    v11 = String._bridgeToObjectiveC()();
    v12 = swift_allocObject(&unk_10060BB78, 80, 7);
    *(_QWORD *)(v12 + 16) = v7;
    *(_BYTE *)(v12 + 24) = v6 & 1;
    *(_QWORD *)(v12 + 32) = v5;
    *(_QWORD *)(v12 + 40) = v4;
    *(double *)(v12 + 48) = v9;
    *(double *)(v12 + 56) = v10;
    *(_QWORD *)(v12 + 64) = v3;
    *(_QWORD *)(v12 + 72) = v2;
    *(_QWORD *)(v0 + 968) = sub_10022281C;
    *(_QWORD *)(v0 + 976) = v12;
    *(_QWORD *)(v0 + 936) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 944) = 1107296256;
    *(_QWORD *)(v0 + 952) = sub_100479C24;
    *(_QWORD *)(v0 + 960) = &unk_10060BB90;
    v13 = _Block_copy((const void *)(v0 + 936));
    v14 = *(_QWORD *)(v0 + 976);
    swift_bridgeObjectRetain(v2);
    swift_release(v14);
    AnalyticsSendEventLazy(v11, v13);
    _Block_release(v13);
    swift_bridgeObjectRelease_n(v2, 2);

  }
  v15._object = (void *)0x8000000100555C10;
  v16._countAndFlagsBits = 0x6161303838616331;
  v16._object = (void *)0xE800000000000000;
  v15._countAndFlagsBits = 0xD000000000000018;
  logMilestone(tag:description:)(v16, v15);
  v17 = (void *)*sub_10000806C((_QWORD *)(v0 + 1664), *(_QWORD *)(v0 + 1688));
  v18 = type metadata accessor for DigitalPresentmentUIPresenter(0);
  *(_QWORD *)(v0 + 1768) = v18;
  *(_QWORD *)(v0 + 1776) = &off_100605098;
  *(_QWORD *)(v0 + 1744) = v17;
  v19 = *sub_10000806C((_QWORD *)(v0 + 1744), v18);
  v20 = defaultLogger()(v17);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "DigitalPresentmentUIPresenter dismiss invoked.", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }
  v24 = *(void (**)(uint64_t, uint64_t))(v0 + 2800);
  v25 = *(_QWORD *)(v0 + 2728);
  v26 = *(_QWORD *)(v0 + 2688);

  v24(v25, v26);
  v27 = *(void **)(v19 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator);
  if (v27)
    objc_msgSend(v27, "dismissWithCompletion:", 0);
  v38 = *(_QWORD *)(v0 + 3056);
  v39 = *(_QWORD *)(v0 + 3072);
  v36 = *(void **)(v0 + 3064);
  v37 = *(_QWORD *)(v0 + 3048);
  v43 = *(_QWORD *)(v0 + 3040);
  v41 = *(_QWORD *)(v0 + 2888);
  v40 = *(_QWORD *)(v0 + 2880);
  v51 = *(_QWORD *)(v0 + 2832);
  v52 = *(_QWORD *)(v0 + 2792);
  v53 = *(_QWORD *)(v0 + 2784);
  v54 = *(_QWORD *)(v0 + 2776);
  v55 = *(_QWORD *)(v0 + 2768);
  v56 = *(_QWORD *)(v0 + 2760);
  v57 = *(_QWORD *)(v0 + 2752);
  v58 = *(_QWORD *)(v0 + 2744);
  v59 = *(_QWORD *)(v0 + 2736);
  v60 = *(_QWORD *)(v0 + 2728);
  v61 = *(_QWORD *)(v0 + 2720);
  v62 = *(_QWORD *)(v0 + 2712);
  v63 = *(_QWORD *)(v0 + 2704);
  v64 = *(_QWORD *)(v0 + 2680);
  v65 = *(_QWORD *)(v0 + 2672);
  v66 = *(_QWORD *)(v0 + 2664);
  v67 = *(_QWORD *)(v0 + 2656);
  v68 = *(_QWORD *)(v0 + 2648);
  v49 = *(_QWORD *)(v0 + 2616);
  v50 = *(_QWORD *)(v0 + 2624);
  v44 = *(_QWORD *)(v0 + 2600);
  v45 = *(_QWORD *)(v0 + 2608);
  v42 = *(_QWORD *)(v0 + 2592);
  v83 = *(_QWORD *)(v0 + 2584);
  v28 = *(_QWORD *)(v0 + 2576);
  v29 = *(_QWORD *)(v0 + 2568);
  v30 = *(_QWORD *)(v0 + 2560);
  v69 = *(_QWORD *)(v0 + 2552);
  v70 = *(_QWORD *)(v0 + 2544);
  v48 = *(_QWORD *)(v0 + 2520);
  v46 = *(_QWORD *)(v0 + 2504);
  v71 = *(_QWORD *)(v0 + 2496);
  v72 = *(_QWORD *)(v0 + 2472);
  v73 = *(_QWORD *)(v0 + 2464);
  v74 = *(_QWORD *)(v0 + 2440);
  v75 = *(_QWORD *)(v0 + 2432);
  v76 = *(_QWORD *)(v0 + 2408);
  v77 = *(_QWORD *)(v0 + 2400);
  v78 = *(_QWORD *)(v0 + 2376);
  v84 = *(_QWORD *)(v0 + 2368);
  v85 = *(_QWORD *)(v0 + 2360);
  v86 = *(_QWORD *)(v0 + 2344);
  v31 = *(_QWORD *)(v0 + 2336);
  v32 = *(_QWORD *)(v0 + 2328);
  v33 = *(_QWORD *)(v0 + 2320);
  v79 = *(_QWORD *)(v0 + 2312);
  v80 = *(_QWORD *)(v0 + 2304);
  v81 = *(_QWORD *)(v0 + 2288);
  v47 = *(_QWORD *)(v0 + 2240);
  v82 = *(_QWORD *)(v0 + 2264);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1744));
  v34 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v34(v28, v30);
  *(_QWORD *)(v0 + 2016) = 0;
  *(_OWORD *)(v0 + 2000) = 0u;
  *(_OWORD *)(v0 + 1984) = 0u;
  swift_beginAccess(v47 + 280, v0 + 2096, 33, 0);
  sub_100184E1C(v0 + 1984, v47 + 280, &qword_100639038);
  swift_endAccess(v0 + 2096);

  sub_100007F78(v37, v38);
  swift_release(v39);
  sub_100222630((_QWORD *)(v0 + 736), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10022268C);
  sub_100007F8C(v40, v41);
  swift_release(v43);
  sub_100035DAC(v33, type metadata accessor for DigitalPresentmentFlow.Context);
  v34(v83, v30);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v86, v32);
  v34(v42, v30);
  v34(v44, v30);
  v34(v45, v30);
  sub_100035DAC(v85, type metadata accessor for DigitalPresentmentSessionManager.Request);
  sub_100008030(v0 + 1024, &qword_100639040);
  sub_100035DAC(v84, type metadata accessor for DigitalPresentmentISOBuilder);
  sub_100035DAC(v46, type metadata accessor for ValidatedDigitalPresentmentRequest);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1664));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1424));
  sub_100008030(v0 + 1064, &qword_100639050);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 984));
  *(_BYTE *)(v47 + v51) = 0;
  sub_100035E2C();
  v34(v49, v30);
  v34(v50, v30);
  sub_100035DAC(v48, type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v50);
  swift_task_dealloc(v49);
  swift_task_dealloc(v45);
  swift_task_dealloc(v44);
  swift_task_dealloc(v42);
  swift_task_dealloc(v83);
  swift_task_dealloc(v28);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v48);
  swift_task_dealloc(v46);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v33);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 3128));
}

uint64_t sub_10021D934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v1 = *(_QWORD *)(v0 + 2832);
  v2 = *(_QWORD *)(v0 + 2504);
  v3 = *(_QWORD *)(v0 + 2240);
  swift_release(*(_QWORD *)(v0 + 2840));
  sub_100035DAC(v2, type metadata accessor for ValidatedDigitalPresentmentRequest);
  *(_BYTE *)(v3 + v1) = 0;
  v4 = *(_QWORD *)(v0 + 2856);
  v5 = *(int *)(v0 + 3220);
  v63 = *(_QWORD *)(v0 + 2616);
  v65 = *(_QWORD *)(v0 + 2624);
  v59 = *(_QWORD *)(v0 + 2568);
  v61 = *(_QWORD *)(v0 + 2560);
  v6 = *(_QWORD *)(v0 + 2520);
  v7 = *(_QWORD *)(v0 + 2432);
  v8 = *(_QWORD *)(v0 + 2264);
  v9 = *(_QWORD *)(v0 + 2256);
  v10 = *(_QWORD *)(v0 + 2248);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 2424) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 2416));
  swift_errorRetain(v4);
  v11 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v7, 0, v11, 0xD00000000000006DLL, 0x8000000100555820, 0xD000000000000019, 0x8000000100555960, 439);
  v12 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v13 = swift_allocError(v10, v12, 0, 0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v14(v15, v8, v10);
  swift_errorRelease(*(_QWORD *)(v6 + v5));
  *(_QWORD *)(v6 + v5) = v13;
  swift_allocError(v10, v12, 0, 0);
  v17 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v16, v8, v10);
  swift_willThrow(v17);
  swift_errorRelease(v4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  sub_100035E2C();
  v18 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
  v18(v63, v61);
  v18(v65, v61);
  sub_100035DAC(v6, type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder);
  v19 = *(_QWORD *)(v0 + 2784);
  v20 = *(_QWORD *)(v0 + 2776);
  v21 = *(_QWORD *)(v0 + 2768);
  v22 = *(_QWORD *)(v0 + 2760);
  v23 = *(_QWORD *)(v0 + 2752);
  v24 = *(_QWORD *)(v0 + 2744);
  v25 = *(_QWORD *)(v0 + 2736);
  v26 = *(_QWORD *)(v0 + 2728);
  v27 = *(_QWORD *)(v0 + 2720);
  v29 = *(_QWORD *)(v0 + 2712);
  v30 = *(_QWORD *)(v0 + 2704);
  v31 = *(_QWORD *)(v0 + 2680);
  v32 = *(_QWORD *)(v0 + 2672);
  v33 = *(_QWORD *)(v0 + 2664);
  v34 = *(_QWORD *)(v0 + 2656);
  v35 = *(_QWORD *)(v0 + 2648);
  v36 = *(_QWORD *)(v0 + 2624);
  v37 = *(_QWORD *)(v0 + 2616);
  v38 = *(_QWORD *)(v0 + 2608);
  v39 = *(_QWORD *)(v0 + 2600);
  v40 = *(_QWORD *)(v0 + 2592);
  v41 = *(_QWORD *)(v0 + 2584);
  v42 = *(_QWORD *)(v0 + 2576);
  v43 = *(_QWORD *)(v0 + 2552);
  v44 = *(_QWORD *)(v0 + 2544);
  v45 = *(_QWORD *)(v0 + 2520);
  v46 = *(_QWORD *)(v0 + 2504);
  v47 = *(_QWORD *)(v0 + 2496);
  v48 = *(_QWORD *)(v0 + 2472);
  v49 = *(_QWORD *)(v0 + 2464);
  v50 = *(_QWORD *)(v0 + 2440);
  v51 = *(_QWORD *)(v0 + 2432);
  v52 = *(_QWORD *)(v0 + 2408);
  v53 = *(_QWORD *)(v0 + 2400);
  v54 = *(_QWORD *)(v0 + 2376);
  v55 = *(_QWORD *)(v0 + 2368);
  v56 = *(_QWORD *)(v0 + 2360);
  v57 = *(_QWORD *)(v0 + 2344);
  v58 = *(_QWORD *)(v0 + 2320);
  v60 = *(_QWORD *)(v0 + 2312);
  v62 = *(_QWORD *)(v0 + 2304);
  v64 = *(_QWORD *)(v0 + 2288);
  v66 = *(_QWORD *)(v0 + 2264);
  swift_task_dealloc(*(_QWORD *)(v0 + 2792));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10021DD8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *(_QWORD *)(v0 + 2832);
  v1 = *(_QWORD *)(v0 + 2608);
  v2 = *(_QWORD *)(v0 + 2568);
  v3 = *(_QWORD *)(v0 + 2560);
  v4 = *(_QWORD *)(v0 + 2504);
  v5 = *(_QWORD *)(v0 + 2368);
  v6 = *(_QWORD *)(v0 + 2360);
  v7 = *(_QWORD *)(v0 + 2240);
  sub_100007F8C(*(_QWORD *)(v0 + 2880), *(_QWORD *)(v0 + 2888));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100035DAC(v6, type metadata accessor for DigitalPresentmentSessionManager.Request);
  sub_100008030(v0 + 1024, &qword_100639040);
  sub_100035DAC(v5, type metadata accessor for DigitalPresentmentISOBuilder);
  sub_100035DAC(v4, type metadata accessor for ValidatedDigitalPresentmentRequest);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 984));
  *(_BYTE *)(v7 + v71) = 0;
  v8 = *(_QWORD *)(v0 + 2912);
  v9 = *(int *)(v0 + 3220);
  v67 = *(_QWORD *)(v0 + 2616);
  v69 = *(_QWORD *)(v0 + 2624);
  v63 = *(_QWORD *)(v0 + 2568);
  v65 = *(_QWORD *)(v0 + 2560);
  v10 = *(_QWORD *)(v0 + 2520);
  v11 = *(_QWORD *)(v0 + 2432);
  v12 = *(_QWORD *)(v0 + 2264);
  v13 = *(_QWORD *)(v0 + 2256);
  v14 = *(_QWORD *)(v0 + 2248);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 2424) + 104))(v11, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 2416));
  swift_errorRetain(v8);
  v15 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v8, v11, 0, v15, 0xD00000000000006DLL, 0x8000000100555820, 0xD000000000000019, 0x8000000100555960, 439);
  v16 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v17 = swift_allocError(v14, v16, 0, 0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v18(v19, v12, v14);
  swift_errorRelease(*(_QWORD *)(v10 + v9));
  *(_QWORD *)(v10 + v9) = v17;
  swift_allocError(v14, v16, 0, 0);
  v21 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v20, v12, v14);
  swift_willThrow(v21);
  swift_errorRelease(v8);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  sub_100035E2C();
  v22 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  v22(v67, v65);
  v22(v69, v65);
  sub_100035DAC(v10, type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder);
  v23 = *(_QWORD *)(v0 + 2784);
  v24 = *(_QWORD *)(v0 + 2776);
  v25 = *(_QWORD *)(v0 + 2768);
  v26 = *(_QWORD *)(v0 + 2760);
  v27 = *(_QWORD *)(v0 + 2752);
  v28 = *(_QWORD *)(v0 + 2744);
  v29 = *(_QWORD *)(v0 + 2736);
  v30 = *(_QWORD *)(v0 + 2728);
  v31 = *(_QWORD *)(v0 + 2720);
  v33 = *(_QWORD *)(v0 + 2712);
  v34 = *(_QWORD *)(v0 + 2704);
  v35 = *(_QWORD *)(v0 + 2680);
  v36 = *(_QWORD *)(v0 + 2672);
  v37 = *(_QWORD *)(v0 + 2664);
  v38 = *(_QWORD *)(v0 + 2656);
  v39 = *(_QWORD *)(v0 + 2648);
  v40 = *(_QWORD *)(v0 + 2624);
  v41 = *(_QWORD *)(v0 + 2616);
  v42 = *(_QWORD *)(v0 + 2608);
  v43 = *(_QWORD *)(v0 + 2600);
  v44 = *(_QWORD *)(v0 + 2592);
  v45 = *(_QWORD *)(v0 + 2584);
  v46 = *(_QWORD *)(v0 + 2576);
  v47 = *(_QWORD *)(v0 + 2552);
  v48 = *(_QWORD *)(v0 + 2544);
  v49 = *(_QWORD *)(v0 + 2520);
  v50 = *(_QWORD *)(v0 + 2504);
  v51 = *(_QWORD *)(v0 + 2496);
  v52 = *(_QWORD *)(v0 + 2472);
  v53 = *(_QWORD *)(v0 + 2464);
  v54 = *(_QWORD *)(v0 + 2440);
  v55 = *(_QWORD *)(v0 + 2432);
  v56 = *(_QWORD *)(v0 + 2408);
  v57 = *(_QWORD *)(v0 + 2400);
  v58 = *(_QWORD *)(v0 + 2376);
  v59 = *(_QWORD *)(v0 + 2368);
  v60 = *(_QWORD *)(v0 + 2360);
  v61 = *(_QWORD *)(v0 + 2344);
  v62 = *(_QWORD *)(v0 + 2320);
  v64 = *(_QWORD *)(v0 + 2312);
  v66 = *(_QWORD *)(v0 + 2304);
  v68 = *(_QWORD *)(v0 + 2288);
  v70 = *(_QWORD *)(v0 + 2264);
  swift_task_dealloc(*(_QWORD *)(v0 + 2792));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10021E254()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v1 = *(_QWORD *)(v0 + 3072);
  v2 = *(_QWORD *)(v0 + 3056);
  v3 = *(_QWORD *)(v0 + 3048);
  v4 = *(_QWORD *)(v0 + 2888);
  v5 = *(_QWORD *)(v0 + 2880);
  v82 = *(_QWORD *)(v0 + 2832);
  v68 = *(_QWORD *)(v0 + 2608);
  v64 = *(_QWORD *)(v0 + 2600);
  v60 = *(_QWORD *)(v0 + 3040);
  v62 = *(_QWORD *)(v0 + 2592);
  v58 = *(_QWORD *)(v0 + 2584);
  v6 = *(_QWORD *)(v0 + 2568);
  v7 = *(_QWORD *)(v0 + 2560);
  v70 = *(_QWORD *)(v0 + 2368);
  v72 = *(_QWORD *)(v0 + 2504);
  v66 = *(_QWORD *)(v0 + 2360);
  v8 = *(_QWORD *)(v0 + 2336);
  v54 = *(_QWORD *)(v0 + 2328);
  v56 = *(_QWORD *)(v0 + 2344);
  v75 = *(_QWORD *)(v0 + 2240);

  sub_100007F78(v3, v2);
  swift_release(v1);
  sub_100222630((_QWORD *)(v0 + 736), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10022268C);
  sub_100007F8C(v5, v4);
  swift_release(v60);
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v58, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v56, v54);
  v9(v62, v7);
  v9(v64, v7);
  v9(v68, v7);
  sub_100035DAC(v66, type metadata accessor for DigitalPresentmentSessionManager.Request);
  sub_100008030(v0 + 1024, &qword_100639040);
  sub_100035DAC(v70, type metadata accessor for DigitalPresentmentISOBuilder);
  sub_100035DAC(v72, type metadata accessor for ValidatedDigitalPresentmentRequest);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1424));
  sub_100008030(v0 + 1064, &qword_100639050);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 984));
  *(_BYTE *)(v75 + v82) = 0;
  v10 = *(_QWORD *)(v0 + 3088);
  v11 = *(int *)(v0 + 3220);
  v80 = *(_QWORD *)(v0 + 2616);
  v83 = *(_QWORD *)(v0 + 2624);
  v76 = *(_QWORD *)(v0 + 2568);
  v78 = *(_QWORD *)(v0 + 2560);
  v12 = *(_QWORD *)(v0 + 2520);
  v13 = *(_QWORD *)(v0 + 2432);
  v14 = *(_QWORD *)(v0 + 2264);
  v15 = *(_QWORD *)(v0 + 2256);
  v16 = *(_QWORD *)(v0 + 2248);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 2424) + 104))(v13, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 2416));
  swift_errorRetain(v10);
  v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v10, v13, 0, v17, 0xD00000000000006DLL, 0x8000000100555820, 0xD000000000000019, 0x8000000100555960, 439);
  v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v19 = swift_allocError(v16, v18, 0, 0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v20(v21, v14, v16);
  swift_errorRelease(*(_QWORD *)(v12 + v11));
  *(_QWORD *)(v12 + v11) = v19;
  swift_allocError(v16, v18, 0, 0);
  v23 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v22, v14, v16);
  swift_willThrow(v23);
  swift_errorRelease(v10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  sub_100035E2C();
  v24 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
  v24(v80, v78);
  v24(v83, v78);
  sub_100035DAC(v12, type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder);
  v25 = *(_QWORD *)(v0 + 2784);
  v26 = *(_QWORD *)(v0 + 2776);
  v27 = *(_QWORD *)(v0 + 2768);
  v28 = *(_QWORD *)(v0 + 2760);
  v29 = *(_QWORD *)(v0 + 2752);
  v30 = *(_QWORD *)(v0 + 2744);
  v31 = *(_QWORD *)(v0 + 2736);
  v32 = *(_QWORD *)(v0 + 2728);
  v33 = *(_QWORD *)(v0 + 2720);
  v35 = *(_QWORD *)(v0 + 2712);
  v36 = *(_QWORD *)(v0 + 2704);
  v37 = *(_QWORD *)(v0 + 2680);
  v38 = *(_QWORD *)(v0 + 2672);
  v39 = *(_QWORD *)(v0 + 2664);
  v40 = *(_QWORD *)(v0 + 2656);
  v41 = *(_QWORD *)(v0 + 2648);
  v42 = *(_QWORD *)(v0 + 2624);
  v43 = *(_QWORD *)(v0 + 2616);
  v44 = *(_QWORD *)(v0 + 2608);
  v45 = *(_QWORD *)(v0 + 2600);
  v46 = *(_QWORD *)(v0 + 2592);
  v47 = *(_QWORD *)(v0 + 2584);
  v48 = *(_QWORD *)(v0 + 2576);
  v49 = *(_QWORD *)(v0 + 2552);
  v50 = *(_QWORD *)(v0 + 2544);
  v51 = *(_QWORD *)(v0 + 2520);
  v52 = *(_QWORD *)(v0 + 2504);
  v53 = *(_QWORD *)(v0 + 2496);
  v55 = *(_QWORD *)(v0 + 2472);
  v57 = *(_QWORD *)(v0 + 2464);
  v59 = *(_QWORD *)(v0 + 2440);
  v61 = *(_QWORD *)(v0 + 2432);
  v63 = *(_QWORD *)(v0 + 2408);
  v65 = *(_QWORD *)(v0 + 2400);
  v67 = *(_QWORD *)(v0 + 2376);
  v69 = *(_QWORD *)(v0 + 2368);
  v71 = *(_QWORD *)(v0 + 2360);
  v73 = *(_QWORD *)(v0 + 2344);
  v74 = *(_QWORD *)(v0 + 2320);
  v77 = *(_QWORD *)(v0 + 2312);
  v79 = *(_QWORD *)(v0 + 2304);
  v81 = *(_QWORD *)(v0 + 2288);
  v84 = *(_QWORD *)(v0 + 2264);
  swift_task_dealloc(*(_QWORD *)(v0 + 2792));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  swift_task_dealloc(v65);
  swift_task_dealloc(v67);
  swift_task_dealloc(v69);
  swift_task_dealloc(v71);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v77);
  swift_task_dealloc(v79);
  swift_task_dealloc(v81);
  swift_task_dealloc(v84);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10021E800()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v1 = (void *)*sub_10000806C((_QWORD *)(v0 + 1664), *(_QWORD *)(v0 + 1688));
  v2 = type metadata accessor for DigitalPresentmentUIPresenter(0);
  *(_QWORD *)(v0 + 1968) = v2;
  *(_QWORD *)(v0 + 1976) = &off_100605098;
  *(_QWORD *)(v0 + 1944) = v1;
  v3 = *sub_10000806C((_QWORD *)(v0 + 1944), v2);
  v4 = defaultLogger()(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "DigitalPresentmentUIPresenter dismiss invoked.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 2800);
  v9 = *(_QWORD *)(v0 + 2704);
  v10 = *(_QWORD *)(v0 + 2688);

  v8(v9, v10);
  v11 = *(void **)(v3 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator);
  if (v11)
    objc_msgSend(v11, "dismissWithCompletion:", 0);
  v57 = *(_QWORD *)(v0 + 3072);
  v12 = *(void **)(v0 + 3064);
  v13 = *(_QWORD *)(v0 + 3056);
  v14 = *(_QWORD *)(v0 + 3048);
  v66 = *(_QWORD *)(v0 + 3040);
  v62 = *(_QWORD *)(v0 + 2888);
  v60 = *(_QWORD *)(v0 + 2880);
  v94 = *(_QWORD *)(v0 + 2832);
  v80 = *(_QWORD *)(v0 + 2608);
  v76 = *(_QWORD *)(v0 + 2600);
  v72 = *(_QWORD *)(v0 + 2584);
  v74 = *(_QWORD *)(v0 + 2592);
  v15 = *(_QWORD *)(v0 + 2576);
  v16 = *(_QWORD *)(v0 + 2568);
  v17 = *(_QWORD *)(v0 + 2560);
  v82 = *(_QWORD *)(v0 + 2368);
  v84 = *(_QWORD *)(v0 + 2504);
  v78 = *(_QWORD *)(v0 + 2360);
  v64 = *(_QWORD *)(v0 + 2336);
  v68 = *(_QWORD *)(v0 + 2328);
  v70 = *(_QWORD *)(v0 + 2344);
  v87 = *(_QWORD *)(v0 + 2240);
  v55 = *(_QWORD *)(v0 + 2320);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1944));
  v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v18(v15, v17);
  *(_QWORD *)(v0 + 1896) = 0;
  *(_OWORD *)(v0 + 1864) = 0u;
  *(_OWORD *)(v0 + 1880) = 0u;
  swift_beginAccess(v87 + 280, v0 + 2072, 33, 0);
  sub_100184E1C(v0 + 1864, v87 + 280, &qword_100639038);
  swift_endAccess(v0 + 2072);

  sub_100007F78(v14, v13);
  swift_release(v57);
  sub_100222630((_QWORD *)(v0 + 736), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10022268C);
  sub_100007F8C(v60, v62);
  swift_release(v66);
  sub_100035DAC(v55, type metadata accessor for DigitalPresentmentFlow.Context);
  v18(v72, v17);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v70, v68);
  v18(v74, v17);
  v18(v76, v17);
  v18(v80, v17);
  sub_100035DAC(v78, type metadata accessor for DigitalPresentmentSessionManager.Request);
  sub_100008030(v0 + 1024, &qword_100639040);
  sub_100035DAC(v82, type metadata accessor for DigitalPresentmentISOBuilder);
  sub_100035DAC(v84, type metadata accessor for ValidatedDigitalPresentmentRequest);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1664));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1424));
  sub_100008030(v0 + 1064, &qword_100639050);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 984));
  *(_BYTE *)(v87 + v94) = 0;
  v19 = *(_QWORD *)(v0 + 3120);
  v20 = *(int *)(v0 + 3220);
  v95 = *(_QWORD *)(v0 + 2616);
  v97 = *(_QWORD *)(v0 + 2624);
  v90 = *(_QWORD *)(v0 + 2568);
  v92 = *(_QWORD *)(v0 + 2560);
  v21 = *(_QWORD *)(v0 + 2520);
  v22 = *(_QWORD *)(v0 + 2432);
  v23 = *(_QWORD *)(v0 + 2264);
  v24 = *(_QWORD *)(v0 + 2256);
  v25 = *(_QWORD *)(v0 + 2248);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 2424) + 104))(v22, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 2416));
  swift_errorRetain(v19);
  v26 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v19, v22, 0, v26, 0xD00000000000006DLL, 0x8000000100555820, 0xD000000000000019, 0x8000000100555960, 439);
  v27 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v28 = swift_allocError(v25, v27, 0, 0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  v29(v30, v23, v25);
  swift_errorRelease(*(_QWORD *)(v21 + v20));
  *(_QWORD *)(v21 + v20) = v28;
  swift_allocError(v25, v27, 0, 0);
  v32 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v29)(v31, v23, v25);
  swift_willThrow(v32);
  swift_errorRelease(v19);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  sub_100035E2C();
  v33 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
  v33(v95, v92);
  v33(v97, v92);
  sub_100035DAC(v21, type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder);
  v34 = *(_QWORD *)(v0 + 2784);
  v35 = *(_QWORD *)(v0 + 2776);
  v36 = *(_QWORD *)(v0 + 2768);
  v37 = *(_QWORD *)(v0 + 2760);
  v38 = *(_QWORD *)(v0 + 2752);
  v39 = *(_QWORD *)(v0 + 2744);
  v40 = *(_QWORD *)(v0 + 2736);
  v41 = *(_QWORD *)(v0 + 2728);
  v42 = *(_QWORD *)(v0 + 2720);
  v44 = *(_QWORD *)(v0 + 2712);
  v45 = *(_QWORD *)(v0 + 2704);
  v46 = *(_QWORD *)(v0 + 2680);
  v47 = *(_QWORD *)(v0 + 2672);
  v48 = *(_QWORD *)(v0 + 2664);
  v49 = *(_QWORD *)(v0 + 2656);
  v50 = *(_QWORD *)(v0 + 2648);
  v51 = *(_QWORD *)(v0 + 2624);
  v52 = *(_QWORD *)(v0 + 2616);
  v53 = *(_QWORD *)(v0 + 2608);
  v54 = *(_QWORD *)(v0 + 2600);
  v56 = *(_QWORD *)(v0 + 2592);
  v58 = *(_QWORD *)(v0 + 2584);
  v59 = *(_QWORD *)(v0 + 2576);
  v61 = *(_QWORD *)(v0 + 2552);
  v63 = *(_QWORD *)(v0 + 2544);
  v65 = *(_QWORD *)(v0 + 2520);
  v67 = *(_QWORD *)(v0 + 2504);
  v69 = *(_QWORD *)(v0 + 2496);
  v71 = *(_QWORD *)(v0 + 2472);
  v73 = *(_QWORD *)(v0 + 2464);
  v75 = *(_QWORD *)(v0 + 2440);
  v77 = *(_QWORD *)(v0 + 2432);
  v79 = *(_QWORD *)(v0 + 2408);
  v81 = *(_QWORD *)(v0 + 2400);
  v83 = *(_QWORD *)(v0 + 2376);
  v85 = *(_QWORD *)(v0 + 2368);
  v86 = *(_QWORD *)(v0 + 2360);
  v88 = *(_QWORD *)(v0 + 2344);
  v89 = *(_QWORD *)(v0 + 2320);
  v91 = *(_QWORD *)(v0 + 2312);
  v93 = *(_QWORD *)(v0 + 2304);
  v96 = *(_QWORD *)(v0 + 2288);
  v98 = *(_QWORD *)(v0 + 2264);
  swift_task_dealloc(*(_QWORD *)(v0 + 2792));
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  swift_task_dealloc(v65);
  swift_task_dealloc(v67);
  swift_task_dealloc(v69);
  swift_task_dealloc(v71);
  swift_task_dealloc(v73);
  swift_task_dealloc(v75);
  swift_task_dealloc(v77);
  swift_task_dealloc(v79);
  swift_task_dealloc(v81);
  swift_task_dealloc(v83);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v91);
  swift_task_dealloc(v93);
  swift_task_dealloc(v96);
  swift_task_dealloc(v98);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10021EF40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v17[24];
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;
  _OWORD v24[2];
  uint64_t v25;

  v2 = type metadata accessor for KRLConfigurationProvider(0);
  v3 = __chkstk_darwin(v2);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  FeatureFlagProvider.init()(v3);
  v22 = v2;
  v23 = &off_100615568;
  v6 = sub_100022234(v21);
  sub_100035DE8((uint64_t)v5, (uint64_t)v6, type metadata accessor for KRLConfigurationProvider);
  v7 = type metadata accessor for PresentmentKeyRevocationValidator();
  v8 = swift_allocObject(v7, 192, 15);
  v9 = sub_10001E624((uint64_t)v21, v22);
  __chkstk_darwin(v9);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *))(v12 + 16))(v11);
  v19 = v2;
  v20 = &off_100615568;
  v13 = sub_100022234(&v18);
  sub_100038AE0((uint64_t)v11, (uint64_t)v13, type metadata accessor for KRLConfigurationProvider);
  swift_defaultActor_initialize(v8, v14);
  *(_QWORD *)(v8 + 144) = 0;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  swift_beginAccess(v8 + 112, v17, 33, 0);
  sub_100184E1C((uint64_t)v24, v8 + 112, &qword_100639080);
  swift_endAccess(v17);
  sub_100008018(&v18, v8 + 152);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v21);
  result = sub_100035DAC((uint64_t)v5, type metadata accessor for KRLConfigurationProvider);
  a1[3] = v7;
  a1[4] = (uint64_t)&off_100618FA0;
  *a1 = v8;
  return result;
}

uint64_t sub_10021F100()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[15] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[16] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[17] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[18] = swift_task_alloc(v4);
  v1[19] = swift_task_alloc(v4);
  return swift_task_switch(sub_10021F170, v0, 0);
}

uint64_t sub_10021F170(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DigitalPresentmentFlow cancelRequest called", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 152);
  v7 = *(_QWORD *)(v1 + 128);
  v8 = *(_QWORD *)(v1 + 136);
  v9 = *(_QWORD *)(v1 + 120);

  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v11 = v10(v6, v7);
  if (*(_BYTE *)(v9 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_requestInProgress) == 1)
  {
    v12 = *(_QWORD *)(v1 + 120) + 280;
    swift_beginAccess(v12, v1 + 96, 0, 0);
    sub_100038B24(v12, v1 + 16, &qword_100639038);
    if (*(_QWORD *)(v1 + 40))
    {
      sub_10002581C(v1 + 16, v1 + 56);
      sub_100008030(v1 + 16, &qword_100639038);
      sub_10000806C((_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 80));
      sub_10004FBE0();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + 56));
    }
    else
    {
      sub_100008030(v1 + 16, &qword_100639038);
    }
  }
  else
  {
    v13 = defaultLogger()(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Can't cancel request because no request is in progress", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v17 = *(_QWORD *)(v1 + 144);
    v18 = *(_QWORD *)(v1 + 128);

    v10(v17, v18);
  }
  v19 = *(_QWORD *)(v1 + 144);
  swift_task_dealloc(*(_QWORD *)(v1 + 152));
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

id sub_10021F380(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  unint64_t v24;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(uint64_t (**)(uint64_t))(v1 + 112);
  if (v7)
  {
    v8 = *(_QWORD *)(v1 + 120);
    v9 = swift_retain(v8);
    v10 = v7(v9);
    sub_10002F034((uint64_t)v7, v8);
  }
  else
  {
    v11 = type metadata accessor for PassManager();
    v10 = swift_allocObject(v11, 16, 7);
  }
  v13 = *a1;
  v12 = (void *)a1[1];
  v14 = sub_1001A4CC0(v13, (unint64_t)v12);
  swift_release(v10);
  if (!v14)
  {
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(v24);
    v14 = (id)0xD00000000000001DLL;
    v23 = 0xD00000000000001DLL;
    v24 = 0x80000001005558F0;
    swift_bridgeObjectRetain(v12);
    v15._countAndFlagsBits = v13;
    v15._object = v12;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v12);
    v16 = v23;
    v17 = v24;
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.digitalPresentmentNoPassFound(_:), v3);
    v18 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v19 = type metadata accessor for DIPError(0);
    v20 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v19, v20, 0, 0);
    v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v16, v17, 0, v6, 0, v18, 0xD00000000000006DLL, 0x8000000100555820, 0xD00000000000001DLL, 0x8000000100555910, 460);
    swift_willThrow(v21);
  }
  return v14;
}

BOOL sub_10021F58C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  Swift::String v14;
  Swift::Bool v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  os_log_type_t v33;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v0;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v36[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v36[-1] - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v36[-1] - v11;
  v13 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v14._object = (void *)0x80000001005558B0;
  v14._countAndFlagsBits = 0xD000000000000038;
  v15 = NSUserDefaults.internalBool(forKey:)(v14);

  if (v15)
  {
    v17 = defaultLogger()(v16);
    v18 = Logger.logObject.getter(v17);
    v20 = static os_log_type_t.info.getter(v18, v19);
    if (os_log_type_enabled(v18, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v20, "Skipping logged in with passcode check due to user defaults setting", v21, 2u);
LABEL_16:
      swift_slowDealloc(v21, -1, -1);
      goto LABEL_17;
    }
    v15 = 1;
LABEL_17:

    (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
    return v15;
  }
  v39 = v3;
  v22 = type metadata accessor for DIPAccountManager(0);
  static DIPAccountManager.sharedInstance.getter(v36, v22);
  v23 = v37;
  v24 = v38;
  sub_10000806C(v36, v37);
  v25 = (void *)dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccount()(v23, v24);

  v26 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(v36);
  if (!v25)
  {
    v30 = defaultLogger()(v26);
    v18 = Logger.logObject.getter(v30);
    v31 = static os_log_type_t.error.getter(v18);
    if (!os_log_type_enabled(v18, v31))
    {
      v15 = 0;
      v12 = v10;
      v3 = v39;
      goto LABEL_17;
    }
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v31, "Device is not logged into iCloud", v21, 2u);
    v12 = v10;
LABEL_15:
    v3 = v39;
    goto LABEL_16;
  }
  v27 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_localAuthenticationManager + 24);
  v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_localAuthenticationManager + 32);
  sub_10000806C((_QWORD *)(v2 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_localAuthenticationManager), v27);
  v29 = dispatch thunk of LocalAuthenticationManaging.isPasscodeSet.getter(v27, v28);
  if (v1)
    return v15;
  if ((v29 & 1) == 0)
  {
    v32 = defaultLogger()(v29);
    v18 = Logger.logObject.getter(v32);
    v33 = static os_log_type_t.error.getter(v18);
    if (!os_log_type_enabled(v18, v33))
    {
      v15 = 0;
      v12 = v7;
      v3 = v39;
      goto LABEL_17;
    }
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v33, "Device does not have passcode set", v21, 2u);
    v12 = v7;
    goto LABEL_15;
  }
  return 1;
}

_QWORD *sub_10021F8BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  char v17;
  void (*v18)(char *, uint64_t);
  Swift::String v19;
  Swift::String v20;
  void (*v21)(char *, _QWORD, uint64_t);
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v29[3];
  uint64_t v30;
  void *v31;
  char *v32;

  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v32 = (char *)&v29[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DeviceClass(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v29[-1] - v9;
  v11 = *(void (**)(_QWORD *__return_ptr, uint64_t))(v0 + 224);
  if (v11)
  {
    v12 = *(_QWORD *)(v0 + 232);
    v13 = swift_retain(v12);
    v11(v29, v13);
    sub_10002F034((uint64_t)v11, v12);
  }
  else
  {
    v30 = type metadata accessor for DeviceInformationProvider(0);
    v31 = &protocol witness table for DeviceInformationProvider;
    v14 = sub_100022234(v29);
    DeviceInformationProvider.init()(v14);
  }
  v15 = v30;
  v16 = v31;
  sub_10000806C(v29, v30);
  dispatch thunk of DeviceInformationProviding.deviceClass.getter(v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DeviceClass.iPad(_:), v4);
  v17 = static DeviceClass.== infix(_:_:)(v10, v8);
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v8, v4);
  v18(v10, v4);
  if ((v17 & 1) != 0)
  {
    v19._countAndFlagsBits = 0xD000000000000044;
    v19._object = (void *)0x80000001005557A0;
    v20._countAndFlagsBits = 0x3966653033656339;
    v20._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v20, v19);
    v21 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
    v22 = v32;
    v21(v32, enum case for DIPError.Code.digitalPresentmentNotAvailableOnIPad(_:), v1);
    v23 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v24 = type metadata accessor for DIPError(0);
    v25 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v24, v25, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x80000001005557F0, 0, v22, 0, v23, 0xD00000000000006DLL, 0x8000000100555820, 0xD00000000000001BLL, 0x8000000100555890, 490);
    swift_willThrow(v26);
  }
  return sub_1002220A0(v29);
}

uint64_t sub_10021FB80()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[10];

  v1 = *(_OWORD *)(v0 + 224);
  v7[6] = *(_OWORD *)(v0 + 208);
  v7[7] = v1;
  v2 = *(_OWORD *)(v0 + 256);
  v7[8] = *(_OWORD *)(v0 + 240);
  v7[9] = v2;
  v3 = *(_OWORD *)(v0 + 160);
  v7[2] = *(_OWORD *)(v0 + 144);
  v7[3] = v3;
  v4 = *(_OWORD *)(v0 + 192);
  v7[4] = *(_OWORD *)(v0 + 176);
  v7[5] = v4;
  v5 = *(_OWORD *)(v0 + 128);
  v7[0] = *(_OWORD *)(v0 + 112);
  v7[1] = v5;
  sub_10002EF3C((uint64_t *)v7);
  swift_release(*(_QWORD *)(v0 + 272));
  sub_100008030(v0 + 280, &qword_100639038);
  sub_100035DAC(v0 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_callingClientConfig, type metadata accessor for DigitalPresentmentCallingClientConfig);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_mockPassID + 8));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0
                                                       + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_localAuthenticationManager));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0
                                                       + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_featureFlagProvider));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0
                                                       + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_requestValidator));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10021FC4C()
{
  return type metadata accessor for DigitalPresentmentFlow(0);
}

uint64_t type metadata accessor for DigitalPresentmentFlow(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_100638DF8, (uint64_t)&nominal type descriptor for DigitalPresentmentFlow);
}

uint64_t sub_10021FC68(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[1] = &unk_100526270;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = &unk_100526288;
  result = type metadata accessor for DigitalPresentmentCallingClientConfig(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_1005262A0;
    v4[6] = &unk_1005262A0;
    v4[7] = &unk_1005262B8;
    v4[8] = &unk_1005262D0;
    v4[9] = &unk_1005262D0;
    v4[10] = &unk_1005262D0;
    v4[11] = &unk_1005262E8;
    result = swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

char *sub_10021FD2C(char *a1, _QWORD *a2, int *a3)
{
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t, __n128);
  __n128 v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  __n128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  void (*v125)(char *, char *, uint64_t, __n128);
  __n128 v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  char *v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v136;
  char *__dst;
  unsigned int (*v138)(char *, uint64_t, uint64_t, __n128);
  void (*v139)(char *, char *, uint64_t, __n128);
  uint64_t v140;
  void (*v141)(char *, char *, uint64_t);
  uint64_t v142;
  uint64_t v143;

  v3 = a1;
  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v40 = *a2;
    *(_QWORD *)v3 = *a2;
    v3 = (char *)(v40 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v5 = a2[1];
    *((_QWORD *)a1 + 1) = v5;
    v6 = a3[6];
    v7 = &a1[v6];
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for ISO18013KnownDocTypes(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_retain(v5);
    v141 = v10;
    v142 = v9;
    v10(v7, v8, v9);
    v11 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
    v12 = v11[5];
    v13 = *(_QWORD *)&v8[v12];
    *(_QWORD *)&v7[v12] = v13;
    v14 = v11[6];
    v15 = &v7[v14];
    v16 = &v8[v14];
    v17 = type metadata accessor for Locale.Region(0);
    v18 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
    v19 = swift_bridgeObjectRetain(v13);
    v139 = v18;
    v140 = v17;
    v18(v15, v16, v17, v19);
    v20 = v11[7];
    v21 = (uint64_t *)&v7[v20];
    v22 = (uint64_t *)&v8[v20];
    v23 = *v22;
    v24 = v22[1];
    sub_100022948(*v22, v24);
    *v21 = v23;
    v21[1] = v24;
    v25 = v11[8];
    v26 = &v7[v25];
    v27 = &v8[v25];
    v28 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v28;
    v29 = v11[9];
    v30 = &v7[v29];
    v31 = &v8[v29];
    v32 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = v11[10];
    __dst = &v7[v33];
    v34 = &v8[v33];
    v35 = type metadata accessor for URL(0);
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v36 + 48);
    swift_bridgeObjectRetain(v28);
    v38 = swift_bridgeObjectRetain(v32);
    v138 = v37;
    v136 = v36;
    if (v37(v34, 1, v35, v38))
    {
      v39 = sub_100004828(&qword_100630A48);
      memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(__dst, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
    }
    v41 = v11[11];
    v42 = &v7[v41];
    v43 = &v8[v41];
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = a2;
    v46 = a3[7];
    v47 = &v3[v46];
    v48 = (_QWORD *)((char *)a2 + v46);
    v49 = *(_QWORD *)((char *)a2 + v46 + 8);
    *(_QWORD *)v47 = *(_QWORD *)((char *)a2 + v46);
    *((_QWORD *)v47 + 1) = v49;
    v50 = *(_QWORD *)((char *)a2 + v46 + 24);
    *((_QWORD *)v47 + 2) = *(_QWORD *)((char *)a2 + v46 + 16);
    *((_QWORD *)v47 + 3) = v50;
    v51 = (_QWORD *)((char *)a2 + v46 + 32);
    v52 = *(_QWORD *)((char *)a2 + v46 + 40);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
    v143 = v35;
    if (v52 >> 60 == 15)
    {
      *((_OWORD *)v47 + 2) = *(_OWORD *)v51;
    }
    else
    {
      v53 = *v51;
      sub_100022948(*v51, v52);
      *((_QWORD *)v47 + 4) = v53;
      *((_QWORD *)v47 + 5) = v52;
    }
    v54 = (uint64_t *)(v48 + 6);
    v55 = v48[7];
    if (v55 >> 60 == 15)
    {
      *((_OWORD *)v47 + 3) = *(_OWORD *)v54;
    }
    else
    {
      v56 = *v54;
      sub_100022948(*v54, v48[7]);
      *((_QWORD *)v47 + 6) = v56;
      *((_QWORD *)v47 + 7) = v55;
    }
    v57 = v48[9];
    *((_QWORD *)v47 + 8) = v48[8];
    *((_QWORD *)v47 + 9) = v57;
    v59 = v48[10];
    v58 = v48[11];
    *((_QWORD *)v47 + 10) = v59;
    *((_QWORD *)v47 + 11) = v58;
    v61 = v48[12];
    v60 = v48[13];
    *((_QWORD *)v47 + 12) = v61;
    *((_QWORD *)v47 + 13) = v60;
    v62 = v48[14];
    *((_QWORD *)v47 + 14) = v62;
    v63 = a3[8];
    v64 = &v3[v63];
    v65 = (char *)a2 + v63;
    v66 = *(_OWORD *)((char *)a2 + v63 + 24);
    *(_OWORD *)&v3[v63 + 24] = v66;
    v67 = v66;
    v68 = **(void (***)(char *, char *, uint64_t, __n128))(v66 - 8);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v61);
    v69 = swift_bridgeObjectRetain(v62);
    v68(v64, v65, v67, v69);
    v70 = a3[9];
    v71 = &v3[v70];
    v72 = (char *)a2 + v70;
    v73 = *(_QWORD *)((char *)a2 + v70 + 24);
    if (v73)
    {
      v74 = *((_QWORD *)v72 + 4);
      *((_QWORD *)v71 + 3) = v73;
      *((_QWORD *)v71 + 4) = v74;
      (**(void (***)(void))(v73 - 8))();
    }
    else
    {
      v75 = *((_OWORD *)v72 + 1);
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *((_OWORD *)v71 + 1) = v75;
      *((_QWORD *)v71 + 4) = *((_QWORD *)v72 + 4);
    }
    v76 = a3[10];
    v77 = &v3[v76];
    v78 = (char *)a2 + v76;
    v141(&v3[v76], (char *)a2 + v76, v142);
    v79 = v11[5];
    v80 = *(_QWORD *)&v78[v79];
    *(_QWORD *)&v77[v79] = v80;
    v81 = v11[6];
    v82 = &v77[v81];
    v83 = &v78[v81];
    v84 = swift_bridgeObjectRetain(v80);
    v139(v82, v83, v140, v84);
    v85 = v11[7];
    v86 = (uint64_t *)&v77[v85];
    v87 = (uint64_t *)&v78[v85];
    v88 = *v87;
    v89 = v87[1];
    sub_100022948(*v87, v89);
    *v86 = v88;
    v86[1] = v89;
    v90 = v11[8];
    v91 = &v77[v90];
    v92 = &v78[v90];
    v93 = *((_QWORD *)v92 + 1);
    *(_QWORD *)v91 = *(_QWORD *)v92;
    *((_QWORD *)v91 + 1) = v93;
    v94 = v11[9];
    v95 = &v77[v94];
    v96 = &v78[v94];
    v97 = *((_QWORD *)v96 + 1);
    *(_QWORD *)v95 = *(_QWORD *)v96;
    *((_QWORD *)v95 + 1) = v97;
    v98 = v11[10];
    v99 = &v77[v98];
    v100 = &v78[v98];
    swift_bridgeObjectRetain(v93);
    v101 = swift_bridgeObjectRetain(v97);
    if (v138(v100, 1, v143, v101))
    {
      v102 = sub_100004828(&qword_100630A48);
      memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v99, v100, v143);
      v45 = a2;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v99, 0, 1, v143);
    }
    v103 = v11[11];
    v104 = &v77[v103];
    v105 = &v78[v103];
    v106 = *((_QWORD *)v105 + 1);
    *(_QWORD *)v104 = *(_QWORD *)v105;
    *((_QWORD *)v104 + 1) = v106;
    v107 = a3[11];
    v108 = a3[12];
    v109 = *(_QWORD *)((char *)v45 + v107);
    *(_QWORD *)&v3[v107] = v109;
    v110 = &v3[v108];
    v111 = (char *)v45 + v108;
    v112 = type metadata accessor for AuditToken(0);
    v113 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 16);
    swift_bridgeObjectRetain(v106);
    swift_retain(v109);
    v113(v110, v111, v112);
    v114 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
    v110[*(int *)(v114 + 20)] = v111[*(int *)(v114 + 20)];
    v115 = *(int *)(v114 + 24);
    v116 = &v110[v115];
    v117 = &v111[v115];
    v118 = *(_QWORD *)v117;
    v119 = *((_QWORD *)v117 + 1);
    *(_QWORD *)v116 = *(_QWORD *)v117;
    *((_QWORD *)v116 + 1) = v119;
    v120 = *((_QWORD *)v117 + 2);
    *((_QWORD *)v116 + 2) = v120;
    v121 = a3[13];
    v122 = &v3[v121];
    v123 = (char *)v45 + v121;
    v124 = type metadata accessor for DigitalPresentmentDisplayConfiguration(0);
    v125 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v124 - 8) + 16);
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRetain(v119);
    v126 = swift_bridgeObjectRetain(v120);
    v125(v122, v123, v124, v126);
    v127 = a3[14];
    v128 = *(_OWORD *)((char *)v45 + v127 + 24);
    *(_OWORD *)&v3[v127 + 24] = v128;
    (**(void (***)(void))(v128 - 8))();
    v129 = a3[15];
    v130 = &v3[v129];
    v131 = (char *)v45 + v129;
    v132 = *((_QWORD *)v131 + 1);
    if (v132 >> 60 == 15)
    {
      *(_OWORD *)v130 = *(_OWORD *)v131;
    }
    else
    {
      v133 = *(_QWORD *)v131;
      sub_100022948(*(_QWORD *)v131, *((_QWORD *)v131 + 1));
      *(_QWORD *)v130 = v133;
      *((_QWORD *)v130 + 1) = v132;
    }
    v134 = a3[16];
    v40 = *(_QWORD *)((char *)v45 + v134);
    *(_QWORD *)&v3[v134] = v40;
  }
  swift_retain(v40);
  return v3;
}

uint64_t sub_1002202F8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for ISO18013KnownDocTypes(0);
  v28 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v28(v4, v5);
  v6 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v6[5]));
  v7 = v4 + v6[6];
  v8 = type metadata accessor for Locale.Region(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  sub_100007F8C(*(_QWORD *)(v4 + v6[7]), *(_QWORD *)(v4 + v6[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v6[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v6[9] + 8));
  v10 = v4 + v6[10];
  v11 = type metadata accessor for URL(0);
  v27 = *(_QWORD *)(v11 - 8);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (!v12(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v6[11] + 8));
  v13 = (_QWORD *)(a1 + a2[7]);
  swift_bridgeObjectRelease(v13[1]);
  swift_bridgeObjectRelease(v13[3]);
  v14 = v13[5];
  if (v14 >> 60 != 15)
    sub_100007F8C(v13[4], v14);
  v15 = v13[7];
  if (v15 >> 60 != 15)
    sub_100007F8C(v13[6], v15);
  swift_bridgeObjectRelease(v13[9]);
  swift_bridgeObjectRelease(v13[10]);
  swift_bridgeObjectRelease(v13[12]);
  swift_bridgeObjectRelease(v13[14]);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(a1 + a2[8]));
  v16 = (_QWORD *)(a1 + a2[9]);
  if (v16[3])
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v16);
  v17 = a1 + a2[10];
  v28(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v6[5]));
  v9(v17 + v6[6], v8);
  sub_100007F8C(*(_QWORD *)(v17 + v6[7]), *(_QWORD *)(v17 + v6[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v6[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v6[9] + 8));
  v18 = v17 + v6[10];
  if (!v12(v18, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v18, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v6[11] + 8));
  swift_release(*(_QWORD *)(a1 + a2[11]));
  v19 = a1 + a2[12];
  v20 = type metadata accessor for AuditToken(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = (_QWORD *)(v19 + *(int *)(type metadata accessor for DigitalPresentmentCallingClientConfig(0) + 24));
  swift_bridgeObjectRelease(*v21);
  swift_bridgeObjectRelease(v21[1]);
  swift_bridgeObjectRelease(v21[2]);
  v22 = a1 + a2[13];
  v23 = type metadata accessor for DigitalPresentmentDisplayConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(a1 + a2[14]));
  v24 = (uint64_t *)(a1 + a2[15]);
  v25 = v24[1];
  if (v25 >> 60 != 15)
    sub_100007F8C(*v24, v25);
  return swift_release(*(_QWORD *)(a1 + a2[16]));
}

uint64_t sub_100220618(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(const void *, uint64_t, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const void *v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v135;
  void (*v137)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  uint64_t v141;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a3[6];
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for ISO18013KnownDocTypes(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_retain(v3);
  v139 = v8;
  v140 = v7;
  v8(v5, v6, v7);
  v9 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v10 = v9[5];
  v11 = *(_QWORD *)(v6 + v10);
  *(_QWORD *)(v5 + v10) = v11;
  v12 = v9[6];
  v13 = v5 + v12;
  v14 = v6 + v12;
  v15 = type metadata accessor for Locale.Region(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
  v17 = swift_bridgeObjectRetain(v11);
  v137 = v16;
  v138 = v15;
  v16(v13, v14, v15, v17);
  v18 = v9[7];
  v19 = (uint64_t *)(v5 + v18);
  v20 = (uint64_t *)(v6 + v18);
  v21 = *v20;
  v22 = v20[1];
  sub_100022948(*v20, v22);
  *v19 = v21;
  v19[1] = v22;
  v23 = v9[8];
  v24 = (_QWORD *)(v5 + v23);
  v25 = (_QWORD *)(v6 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = v9[9];
  v28 = (_QWORD *)(v5 + v27);
  v29 = (_QWORD *)(v6 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = v9[10];
  v32 = (void *)(v5 + v31);
  v33 = (const void *)(v6 + v31);
  v34 = type metadata accessor for URL(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v35 + 48);
  swift_bridgeObjectRetain(v26);
  v37 = swift_bridgeObjectRetain(v30);
  v135 = v35;
  if (v36(v33, 1, v34, v37))
  {
    v38 = sub_100004828(&qword_100630A48);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  v39 = v9[11];
  v40 = (_QWORD *)(v5 + v39);
  v41 = (_QWORD *)(v6 + v39);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  v43 = a2;
  v44 = a3[7];
  v45 = a1 + v44;
  v46 = (unint64_t *)(a2 + v44);
  v47 = *(_QWORD *)(a2 + v44 + 8);
  *(_QWORD *)v45 = *(_QWORD *)(a2 + v44);
  *(_QWORD *)(v45 + 8) = v47;
  v48 = *(_QWORD *)(a2 + v44 + 24);
  *(_QWORD *)(v45 + 16) = *(_QWORD *)(a2 + v44 + 16);
  *(_QWORD *)(v45 + 24) = v48;
  v49 = (uint64_t *)(a2 + v44 + 32);
  v50 = *(_QWORD *)(a2 + v44 + 40);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v48);
  v141 = v34;
  if (v50 >> 60 == 15)
  {
    *(_OWORD *)(v45 + 32) = *(_OWORD *)v49;
  }
  else
  {
    v51 = *v49;
    sub_100022948(*v49, v50);
    *(_QWORD *)(v45 + 32) = v51;
    *(_QWORD *)(v45 + 40) = v50;
  }
  v52 = (uint64_t *)(v46 + 6);
  v53 = v46[7];
  if (v53 >> 60 == 15)
  {
    *(_OWORD *)(v45 + 48) = *(_OWORD *)v52;
  }
  else
  {
    v54 = *v52;
    sub_100022948(*v52, v46[7]);
    *(_QWORD *)(v45 + 48) = v54;
    *(_QWORD *)(v45 + 56) = v53;
  }
  v55 = v46[9];
  *(_QWORD *)(v45 + 64) = v46[8];
  *(_QWORD *)(v45 + 72) = v55;
  v57 = v46[10];
  v56 = v46[11];
  *(_QWORD *)(v45 + 80) = v57;
  *(_QWORD *)(v45 + 88) = v56;
  v59 = v46[12];
  v58 = v46[13];
  *(_QWORD *)(v45 + 96) = v59;
  *(_QWORD *)(v45 + 104) = v58;
  v60 = v46[14];
  *(_QWORD *)(v45 + 112) = v60;
  v61 = a3[8];
  v62 = a1 + v61;
  v63 = a2 + v61;
  v64 = *(_OWORD *)(a2 + v61 + 24);
  *(_OWORD *)(a1 + v61 + 24) = v64;
  v65 = v64;
  v66 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v64 - 8);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v59);
  v67 = swift_bridgeObjectRetain(v60);
  v66(v62, v63, v65, v67);
  v68 = a3[9];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = *(_QWORD *)(a2 + v68 + 24);
  if (v71)
  {
    v72 = *(_QWORD *)(v70 + 32);
    *(_QWORD *)(v69 + 24) = v71;
    *(_QWORD *)(v69 + 32) = v72;
    (**(void (***)(void))(v71 - 8))();
  }
  else
  {
    v73 = *(_OWORD *)(v70 + 16);
    *(_OWORD *)v69 = *(_OWORD *)v70;
    *(_OWORD *)(v69 + 16) = v73;
    *(_QWORD *)(v69 + 32) = *(_QWORD *)(v70 + 32);
  }
  v74 = a3[10];
  v75 = a1 + v74;
  v76 = a2 + v74;
  v139(a1 + v74, a2 + v74, v140);
  v77 = v9[5];
  v78 = *(_QWORD *)(v76 + v77);
  *(_QWORD *)(v75 + v77) = v78;
  v79 = v9[6];
  v80 = v75 + v79;
  v81 = v76 + v79;
  v82 = swift_bridgeObjectRetain(v78);
  v137(v80, v81, v138, v82);
  v83 = v9[7];
  v84 = (uint64_t *)(v75 + v83);
  v85 = (uint64_t *)(v76 + v83);
  v86 = *v85;
  v87 = v85[1];
  sub_100022948(*v85, v87);
  *v84 = v86;
  v84[1] = v87;
  v88 = v9[8];
  v89 = (_QWORD *)(v75 + v88);
  v90 = (_QWORD *)(v76 + v88);
  v91 = v90[1];
  *v89 = *v90;
  v89[1] = v91;
  v92 = v9[9];
  v93 = (_QWORD *)(v75 + v92);
  v94 = (_QWORD *)(v76 + v92);
  v95 = v94[1];
  *v93 = *v94;
  v93[1] = v95;
  v96 = v9[10];
  v97 = (void *)(v75 + v96);
  v98 = (const void *)(v76 + v96);
  swift_bridgeObjectRetain(v91);
  v99 = swift_bridgeObjectRetain(v95);
  if (v36(v98, 1, v141, v99))
  {
    v100 = sub_100004828(&qword_100630A48);
    memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v135 + 16))(v97, v98, v141);
    v43 = a2;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v97, 0, 1, v141);
  }
  v101 = v9[11];
  v102 = (_QWORD *)(v75 + v101);
  v103 = (_QWORD *)(v76 + v101);
  v104 = v103[1];
  *v102 = *v103;
  v102[1] = v104;
  v105 = a3[11];
  v106 = a3[12];
  v107 = *(_QWORD *)(v43 + v105);
  *(_QWORD *)(a1 + v105) = v107;
  v108 = a1 + v106;
  v109 = v43 + v106;
  v110 = type metadata accessor for AuditToken(0);
  v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 16);
  swift_bridgeObjectRetain(v104);
  swift_retain(v107);
  v111(v108, v109, v110);
  v112 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  *(_BYTE *)(v108 + *(int *)(v112 + 20)) = *(_BYTE *)(v109 + *(int *)(v112 + 20));
  v113 = *(int *)(v112 + 24);
  v114 = (uint64_t *)(v108 + v113);
  v115 = (uint64_t *)(v109 + v113);
  v116 = *v115;
  v117 = v115[1];
  *v114 = *v115;
  v114[1] = v117;
  v118 = v115[2];
  v114[2] = v118;
  v119 = a3[13];
  v120 = a1 + v119;
  v121 = v43 + v119;
  v122 = type metadata accessor for DigitalPresentmentDisplayConfiguration(0);
  v123 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v122 - 8) + 16);
  swift_bridgeObjectRetain(v116);
  swift_bridgeObjectRetain(v117);
  v124 = swift_bridgeObjectRetain(v118);
  v123(v120, v121, v122, v124);
  v125 = a3[14];
  v126 = *(_OWORD *)(v43 + v125 + 24);
  *(_OWORD *)(a1 + v125 + 24) = v126;
  (**(void (***)(void))(v126 - 8))();
  v127 = a3[15];
  v128 = a1 + v127;
  v129 = (uint64_t *)(v43 + v127);
  v130 = v129[1];
  if (v130 >> 60 == 15)
  {
    *(_OWORD *)v128 = *(_OWORD *)v129;
  }
  else
  {
    v131 = *v129;
    sub_100022948(*v129, v129[1]);
    *(_QWORD *)v128 = v131;
    *(_QWORD *)(v128 + 8) = v130;
  }
  v132 = a3[16];
  v133 = *(_QWORD *)(v43 + v132);
  *(_QWORD *)(a1 + v132) = v133;
  swift_retain(v133);
  return a1;
}

uint64_t sub_100220BB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t (*v41)(void *, uint64_t, uint64_t);
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v148)(uint64_t, uint64_t);
  uint64_t v149;
  void (*v150)(uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  int *v153;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v6);
  v153 = a3;
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for ISO18013KnownDocTypes(0);
  v150 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24);
  v151 = v11;
  v150(v9, v10);
  v12 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v13 = v12[5];
  v14 = *(_QWORD *)(v10 + v13);
  v15 = *(_QWORD *)(v9 + v13);
  *(_QWORD *)(v9 + v13) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = v12[6];
  v17 = v9 + v16;
  v18 = v10 + v16;
  v19 = type metadata accessor for Locale.Region(0);
  v148 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24);
  v149 = v19;
  v148(v17, v18);
  v20 = v12[7];
  v21 = (uint64_t *)(v9 + v20);
  v22 = (uint64_t *)(v10 + v20);
  v23 = *v22;
  v24 = v22[1];
  sub_100022948(*v22, v24);
  v25 = *v21;
  v26 = v21[1];
  *v21 = v23;
  v21[1] = v24;
  sub_100007F8C(v25, v26);
  v27 = v12[8];
  v28 = (_QWORD *)(v9 + v27);
  v29 = (_QWORD *)(v10 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = v12[9];
  v33 = (_QWORD *)(v9 + v32);
  v34 = (_QWORD *)(v10 + v32);
  *v33 = *v34;
  v35 = v34[1];
  v36 = v33[1];
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = v12[10];
  v38 = (void *)(v9 + v37);
  v39 = (void *)(v10 + v37);
  v40 = type metadata accessor for URL(0);
  v152 = *(_QWORD *)(v40 - 8);
  v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v152 + 48);
  LODWORD(v21) = v41(v38, 1, v40);
  v42 = v41(v39, 1, v40);
  if ((_DWORD)v21)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v152 + 16))(v38, v39, v40);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v38, 0, 1, v40);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v152 + 8))(v38, v40);
LABEL_6:
    v43 = sub_100004828(&qword_100630A48);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v152 + 24))(v38, v39, v40);
LABEL_7:
  v44 = v12[11];
  v45 = (_QWORD *)(v9 + v44);
  v46 = (_QWORD *)(v10 + v44);
  *v45 = *v46;
  v47 = v46[1];
  v48 = v45[1];
  v45[1] = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  v49 = v153[7];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (_QWORD *)(a2 + v49);
  *v50 = *(_QWORD *)(a2 + v49);
  v52 = *(_QWORD *)(a2 + v49 + 8);
  v53 = *(_QWORD *)(a1 + v49 + 8);
  v50[1] = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  v50[2] = v51[2];
  v54 = v51[3];
  v55 = v50[3];
  v50[3] = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v56 = v51 + 4;
  v57 = v51[5];
  if (v50[5] >> 60 == 15)
  {
    if (v57 >> 60 != 15)
    {
      v58 = *v56;
      sub_100022948(v58, v51[5]);
      v50[4] = v58;
      v50[5] = v57;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v57 >> 60 == 15)
  {
    sub_10003BAAC((uint64_t)(v50 + 4));
LABEL_12:
    *((_OWORD *)v50 + 2) = *(_OWORD *)v56;
    goto LABEL_14;
  }
  v59 = *v56;
  sub_100022948(v59, v51[5]);
  v60 = v50[4];
  v61 = v50[5];
  v50[4] = v59;
  v50[5] = v57;
  sub_100007F8C(v60, v61);
LABEL_14:
  v62 = v51 + 6;
  v63 = v51[7];
  if (v50[7] >> 60 == 15)
  {
    if (v63 >> 60 != 15)
    {
      v64 = *v62;
      sub_100022948(v64, v51[7]);
      v50[6] = v64;
      v50[7] = v63;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v63 >> 60 == 15)
  {
    sub_10003BAAC((uint64_t)(v50 + 6));
LABEL_19:
    *((_OWORD *)v50 + 3) = *(_OWORD *)v62;
    goto LABEL_21;
  }
  v65 = *v62;
  sub_100022948(v65, v51[7]);
  v66 = v50[6];
  v67 = v50[7];
  v50[6] = v65;
  v50[7] = v63;
  sub_100007F8C(v66, v67);
LABEL_21:
  v50[8] = v51[8];
  v68 = v51[9];
  v69 = v50[9];
  v50[9] = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease(v69);
  v70 = v51[10];
  v71 = v50[10];
  v50[10] = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease(v71);
  v50[11] = v51[11];
  v72 = v51[12];
  v73 = v50[12];
  v50[12] = v72;
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRelease(v73);
  v50[13] = v51[13];
  v74 = v51[14];
  v75 = v50[14];
  v50[14] = v74;
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRelease(v75);
  sub_10000660C((_QWORD *)(a1 + v153[8]), (_QWORD *)(a2 + v153[8]));
  v76 = v153[9];
  v77 = a1 + v76;
  v78 = (__int128 *)(a2 + v76);
  v79 = *(_QWORD *)(a2 + v76 + 24);
  if (*(_QWORD *)(a1 + v76 + 24))
  {
    if (v79)
    {
      sub_10000660C((_QWORD *)v77, v78);
      goto LABEL_28;
    }
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)v77);
  }
  else if (v79)
  {
    *(_QWORD *)(v77 + 24) = v79;
    *(_QWORD *)(v77 + 32) = *((_QWORD *)v78 + 4);
    (**(void (***)(uint64_t, __int128 *))(v79 - 8))(v77, v78);
    goto LABEL_28;
  }
  v80 = *v78;
  v81 = v78[1];
  *(_QWORD *)(v77 + 32) = *((_QWORD *)v78 + 4);
  *(_OWORD *)v77 = v80;
  *(_OWORD *)(v77 + 16) = v81;
LABEL_28:
  v82 = v153[10];
  v83 = a1 + v82;
  v84 = a2 + v82;
  ((void (*)(uint64_t, uint64_t, uint64_t))v150)(a1 + v82, a2 + v82, v151);
  v85 = v12[5];
  v86 = *(_QWORD *)(v84 + v85);
  v87 = *(_QWORD *)(v83 + v85);
  *(_QWORD *)(v83 + v85) = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  ((void (*)(uint64_t, uint64_t, uint64_t))v148)(v83 + v12[6], v84 + v12[6], v149);
  v88 = v12[7];
  v89 = (uint64_t *)(v83 + v88);
  v90 = (uint64_t *)(v84 + v88);
  v91 = *v90;
  v92 = v90[1];
  sub_100022948(*v90, v92);
  v93 = *v89;
  v94 = v89[1];
  *v89 = v91;
  v89[1] = v92;
  sub_100007F8C(v93, v94);
  v95 = v12[8];
  v96 = (_QWORD *)(v83 + v95);
  v97 = (_QWORD *)(v84 + v95);
  *v96 = *v97;
  v98 = v97[1];
  v99 = v96[1];
  v96[1] = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = v12[9];
  v101 = (_QWORD *)(v83 + v100);
  v102 = (_QWORD *)(v84 + v100);
  *v101 = *v102;
  v103 = v102[1];
  v104 = v101[1];
  v101[1] = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  v105 = v12[10];
  v106 = (void *)(v83 + v105);
  v107 = (void *)(v84 + v105);
  LODWORD(v89) = v41((void *)(v83 + v105), 1, v40);
  v108 = v41(v107, 1, v40);
  if ((_DWORD)v89)
  {
    if (!v108)
    {
      (*(void (**)(void *, void *, uint64_t))(v152 + 16))(v106, v107, v40);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v106, 0, 1, v40);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v108)
  {
    (*(void (**)(void *, uint64_t))(v152 + 8))(v106, v40);
LABEL_33:
    v109 = sub_100004828(&qword_100630A48);
    memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, void *, uint64_t))(v152 + 24))(v106, v107, v40);
LABEL_34:
  v110 = v12[11];
  v111 = (_QWORD *)(v83 + v110);
  v112 = (_QWORD *)(v84 + v110);
  *v111 = *v112;
  v113 = v112[1];
  v114 = v111[1];
  v111[1] = v113;
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRelease(v114);
  v115 = v153[11];
  v116 = *(_QWORD *)(a2 + v115);
  v117 = *(_QWORD *)(a1 + v115);
  *(_QWORD *)(a1 + v115) = v116;
  swift_retain(v116);
  swift_release(v117);
  v118 = v153[12];
  v119 = a1 + v118;
  v120 = a2 + v118;
  v121 = type metadata accessor for AuditToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 24))(v119, v120, v121);
  v122 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  *(_BYTE *)(v119 + *(int *)(v122 + 20)) = *(_BYTE *)(v120 + *(int *)(v122 + 20));
  v123 = *(int *)(v122 + 24);
  v124 = (uint64_t *)(v119 + v123);
  v125 = (uint64_t *)(v120 + v123);
  v126 = *v125;
  v127 = *(_QWORD *)(v119 + v123);
  *v124 = *v125;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  v128 = v125[1];
  v129 = v124[1];
  v124[1] = v128;
  swift_bridgeObjectRetain(v128);
  swift_bridgeObjectRelease(v129);
  v130 = v125[2];
  v131 = v124[2];
  v124[2] = v130;
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRelease(v131);
  v132 = v153[13];
  v133 = a1 + v132;
  v134 = a2 + v132;
  v135 = type metadata accessor for DigitalPresentmentDisplayConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 24))(v133, v134, v135);
  sub_10000660C((_QWORD *)(a1 + v153[14]), (_QWORD *)(a2 + v153[14]));
  v136 = v153[15];
  v137 = (uint64_t *)(a1 + v136);
  v138 = (uint64_t *)(a2 + v136);
  v139 = *(_QWORD *)(a2 + v136 + 8);
  if (*(_QWORD *)(a1 + v136 + 8) >> 60 != 15)
  {
    if (v139 >> 60 != 15)
    {
      v141 = *v138;
      sub_100022948(v141, v139);
      v142 = *v137;
      v143 = v137[1];
      *v137 = v141;
      v137[1] = v139;
      sub_100007F8C(v142, v143);
      goto LABEL_41;
    }
    sub_10003BAAC((uint64_t)v137);
    goto LABEL_39;
  }
  if (v139 >> 60 == 15)
  {
LABEL_39:
    *(_OWORD *)v137 = *(_OWORD *)v138;
    goto LABEL_41;
  }
  v140 = *v138;
  sub_100022948(v140, v139);
  *v137 = v140;
  v137[1] = v139;
LABEL_41:
  v144 = v153[16];
  v145 = *(_QWORD *)(a2 + v144);
  v146 = *(_QWORD *)(a1 + v144);
  *(_QWORD *)(a1 + v144) = v145;
  swift_retain(v145);
  swift_release(v146);
  return a1;
}

uint64_t sub_1002213BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v63;
  unsigned int (*v64)(const void *, uint64_t, uint64_t);
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for ISO18013KnownDocTypes(0);
  v67 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v68 = v9;
  v67(v7, v8);
  v10 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  *(_QWORD *)(v7 + v10[5]) = *(_QWORD *)(v8 + v10[5]);
  v11 = v10[6];
  v12 = v7 + v11;
  v13 = v8 + v11;
  v14 = type metadata accessor for Locale.Region(0);
  v65 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v66 = v14;
  v65(v12, v13);
  *(_OWORD *)(v7 + v10[7]) = *(_OWORD *)(v8 + v10[7]);
  *(_OWORD *)(v7 + v10[8]) = *(_OWORD *)(v8 + v10[8]);
  *(_OWORD *)(v7 + v10[9]) = *(_OWORD *)(v8 + v10[9]);
  v15 = v10[10];
  v16 = (void *)(v7 + v15);
  v17 = (const void *)(v8 + v15);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v64 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
  v63 = v19;
  if (v64(v17, 1, v18))
  {
    v20 = sub_100004828(&qword_100630A48);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  *(_OWORD *)(v7 + v10[11]) = *(_OWORD *)(v8 + v10[11]);
  v21 = a3[7];
  v22 = a3[8];
  v23 = a1 + v21;
  v24 = a2 + v21;
  *(_QWORD *)(v23 + 112) = *(_QWORD *)(v24 + 112);
  v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  v26 = *(_OWORD *)(v24 + 48);
  *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
  *(_OWORD *)(v23 + 48) = v26;
  v27 = *(_OWORD *)(v24 + 96);
  v28 = *(_OWORD *)(v24 + 64);
  *(_OWORD *)(v23 + 80) = *(_OWORD *)(v24 + 80);
  *(_OWORD *)(v23 + 96) = v27;
  *(_OWORD *)(v23 + 64) = v28;
  v29 = a1 + v22;
  v30 = a2 + v22;
  *(_QWORD *)(v29 + 32) = *(_QWORD *)(v30 + 32);
  v31 = *(_OWORD *)(v30 + 16);
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *(_OWORD *)(v29 + 16) = v31;
  v32 = a3[9];
  v33 = a3[10];
  v34 = a1 + v32;
  v35 = (__int128 *)(a2 + v32);
  v36 = *v35;
  v37 = v35[1];
  *(_QWORD *)(v34 + 32) = *((_QWORD *)v35 + 4);
  v38 = a1 + v33;
  v39 = a2 + v33;
  *(_OWORD *)v34 = v36;
  *(_OWORD *)(v34 + 16) = v37;
  ((void (*)(uint64_t, uint64_t, uint64_t))v67)(a1 + v33, a2 + v33, v68);
  *(_QWORD *)(v38 + v10[5]) = *(_QWORD *)(v39 + v10[5]);
  ((void (*)(uint64_t, uint64_t, uint64_t))v65)(v38 + v10[6], v39 + v10[6], v66);
  *(_OWORD *)(v38 + v10[7]) = *(_OWORD *)(v39 + v10[7]);
  *(_OWORD *)(v38 + v10[8]) = *(_OWORD *)(v39 + v10[8]);
  *(_OWORD *)(v38 + v10[9]) = *(_OWORD *)(v39 + v10[9]);
  v40 = v10[10];
  v41 = (void *)(v38 + v40);
  v42 = (const void *)(v39 + v40);
  if (v64((const void *)(v39 + v40), 1, v18))
  {
    v43 = sub_100004828(&qword_100630A48);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v63 + 32))(v41, v42, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v41, 0, 1, v18);
  }
  *(_OWORD *)(v38 + v10[11]) = *(_OWORD *)(v39 + v10[11]);
  v44 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v45 = a1 + v44;
  v46 = a2 + v44;
  v47 = type metadata accessor for AuditToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v45, v46, v47);
  v48 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  *(_BYTE *)(v45 + *(int *)(v48 + 20)) = *(_BYTE *)(v46 + *(int *)(v48 + 20));
  v49 = *(int *)(v48 + 24);
  v50 = v45 + v49;
  v51 = v46 + v49;
  *(_QWORD *)(v50 + 16) = *(_QWORD *)(v51 + 16);
  *(_OWORD *)v50 = *(_OWORD *)v51;
  v52 = a3[13];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for DigitalPresentmentDisplayConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  v56 = a3[14];
  v57 = a3[15];
  v58 = a1 + v56;
  v59 = (__int128 *)(a2 + v56);
  v60 = *v59;
  v61 = v59[1];
  *(_QWORD *)(v58 + 32) = *((_QWORD *)v59 + 4);
  *(_OWORD *)v58 = v60;
  *(_OWORD *)(v58 + 16) = v61;
  *(_OWORD *)(a1 + v57) = *(_OWORD *)(a2 + v57);
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_100221758(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v139)(uint64_t, uint64_t);
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  int *v144;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v6);
  v144 = a3;
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ISO18013KnownDocTypes(0);
  v141 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v142 = v10;
  v141(v8, v9);
  v11 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v12 = v11[5];
  v13 = *(_QWORD *)(v8 + v12);
  *(_QWORD *)(v8 + v12) = *(_QWORD *)(v9 + v12);
  swift_bridgeObjectRelease(v13);
  v14 = v11[6];
  v15 = v8 + v14;
  v16 = v9 + v14;
  v17 = type metadata accessor for Locale.Region(0);
  v139 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40);
  v140 = v17;
  v139(v15, v16);
  v18 = v11[7];
  v19 = *(_QWORD *)(v8 + v18);
  v20 = *(_QWORD *)(v8 + v18 + 8);
  *(_OWORD *)(v8 + v18) = *(_OWORD *)(v9 + v18);
  sub_100007F8C(v19, v20);
  v21 = v11[8];
  v22 = (_QWORD *)(v8 + v21);
  v23 = (uint64_t *)(v9 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = v11[9];
  v28 = (_QWORD *)(v8 + v27);
  v29 = (uint64_t *)(v9 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v11[10];
  v34 = (void *)(v8 + v33);
  v35 = (void *)(v9 + v33);
  v36 = type metadata accessor for URL(0);
  v143 = *(_QWORD *)(v36 - 8);
  v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v143 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37(v35, 1, v36);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v143 + 32))(v34, v35, v36);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v143 + 56))(v34, 0, 1, v36);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v39)
  {
    (*(void (**)(void *, uint64_t))(v143 + 8))(v34, v36);
LABEL_6:
    v40 = sub_100004828(&qword_100630A48);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v143 + 40))(v34, v35, v36);
LABEL_7:
  v41 = v11[11];
  v42 = (_QWORD *)(v8 + v41);
  v43 = (uint64_t *)(v9 + v41);
  v45 = *v43;
  v44 = v43[1];
  v46 = v42[1];
  *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease(v46);
  v47 = v144[7];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (_QWORD *)(a2 + v47);
  v50 = *(_QWORD *)(a2 + v47 + 8);
  v51 = *(_QWORD *)(a1 + v47 + 8);
  *v48 = *(_QWORD *)(a2 + v47);
  v48[1] = v50;
  swift_bridgeObjectRelease(v51);
  v52 = v49[3];
  v53 = v48[3];
  v48[2] = v49[2];
  v48[3] = v52;
  swift_bridgeObjectRelease(v53);
  v54 = v49 + 4;
  v55 = v48[5];
  if (v55 >> 60 == 15)
  {
LABEL_10:
    *((_OWORD *)v48 + 2) = *v54;
    goto LABEL_12;
  }
  v56 = v49[5];
  if (v56 >> 60 == 15)
  {
    sub_10003BAAC((uint64_t)(v48 + 4));
    goto LABEL_10;
  }
  v57 = v48[4];
  v48[4] = *(_QWORD *)v54;
  v48[5] = v56;
  sub_100007F8C(v57, v55);
LABEL_12:
  v58 = v49 + 6;
  v59 = v48[7];
  if (v59 >> 60 == 15)
  {
LABEL_15:
    *((_OWORD *)v48 + 3) = *v58;
    goto LABEL_17;
  }
  v60 = v49[7];
  if (v60 >> 60 == 15)
  {
    sub_10003BAAC((uint64_t)(v48 + 6));
    goto LABEL_15;
  }
  v61 = v48[6];
  v48[6] = *(_QWORD *)v58;
  v48[7] = v60;
  sub_100007F8C(v61, v59);
LABEL_17:
  v62 = v49[9];
  v63 = v48[9];
  v48[8] = v49[8];
  v48[9] = v62;
  swift_bridgeObjectRelease(v63);
  v64 = v48[10];
  v48[10] = v49[10];
  swift_bridgeObjectRelease(v64);
  v65 = v49[12];
  v66 = v48[12];
  v48[11] = v49[11];
  v48[12] = v65;
  swift_bridgeObjectRelease(v66);
  v67 = v49[14];
  v68 = v48[14];
  v48[13] = v49[13];
  v48[14] = v67;
  swift_bridgeObjectRelease(v68);
  v69 = v144[8];
  v70 = a1 + v69;
  v71 = a2 + v69;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(a1 + v69));
  *(_QWORD *)(v70 + 32) = *(_QWORD *)(v71 + 32);
  v72 = *(_OWORD *)(v71 + 16);
  *(_OWORD *)v70 = *(_OWORD *)v71;
  *(_OWORD *)(v70 + 16) = v72;
  v73 = v144[9];
  v74 = a1 + v73;
  v75 = a2 + v73;
  if (*(_QWORD *)(a1 + v73 + 24))
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)v74);
  v76 = *(_OWORD *)(v75 + 16);
  *(_OWORD *)v74 = *(_OWORD *)v75;
  *(_OWORD *)(v74 + 16) = v76;
  *(_QWORD *)(v74 + 32) = *(_QWORD *)(v75 + 32);
  v77 = v144[10];
  v78 = a1 + v77;
  v79 = a2 + v77;
  ((void (*)(uint64_t, uint64_t, uint64_t))v141)(a1 + v77, a2 + v77, v142);
  v80 = v11[5];
  v81 = *(_QWORD *)(v78 + v80);
  *(_QWORD *)(v78 + v80) = *(_QWORD *)(v79 + v80);
  swift_bridgeObjectRelease(v81);
  ((void (*)(uint64_t, uint64_t, uint64_t))v139)(v78 + v11[6], v79 + v11[6], v140);
  v82 = v11[7];
  v83 = *(_QWORD *)(v78 + v82);
  v84 = *(_QWORD *)(v78 + v82 + 8);
  *(_OWORD *)(v78 + v82) = *(_OWORD *)(v79 + v82);
  sub_100007F8C(v83, v84);
  v85 = v11[8];
  v86 = (_QWORD *)(v78 + v85);
  v87 = (uint64_t *)(v79 + v85);
  v89 = *v87;
  v88 = v87[1];
  v90 = v86[1];
  *v86 = v89;
  v86[1] = v88;
  swift_bridgeObjectRelease(v90);
  v91 = v11[9];
  v92 = (_QWORD *)(v78 + v91);
  v93 = (uint64_t *)(v79 + v91);
  v95 = *v93;
  v94 = v93[1];
  v96 = v92[1];
  *v92 = v95;
  v92[1] = v94;
  swift_bridgeObjectRelease(v96);
  v97 = v11[10];
  v98 = (void *)(v78 + v97);
  v99 = (void *)(v79 + v97);
  v100 = v37((void *)(v78 + v97), 1, v36);
  v101 = v37(v99, 1, v36);
  if (v100)
  {
    if (!v101)
    {
      (*(void (**)(void *, void *, uint64_t))(v143 + 32))(v98, v99, v36);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v143 + 56))(v98, 0, 1, v36);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v101)
  {
    (*(void (**)(void *, uint64_t))(v143 + 8))(v98, v36);
LABEL_24:
    v102 = sub_100004828(&qword_100630A48);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v143 + 40))(v98, v99, v36);
LABEL_25:
  v103 = v11[11];
  v104 = (_QWORD *)(v78 + v103);
  v105 = (uint64_t *)(v79 + v103);
  v107 = *v105;
  v106 = v105[1];
  v108 = v104[1];
  *v104 = v107;
  v104[1] = v106;
  swift_bridgeObjectRelease(v108);
  v109 = v144[11];
  v110 = *(_QWORD *)(a1 + v109);
  *(_QWORD *)(a1 + v109) = *(_QWORD *)(a2 + v109);
  swift_release(v110);
  v111 = v144[12];
  v112 = a1 + v111;
  v113 = a2 + v111;
  v114 = type metadata accessor for AuditToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 40))(v112, v113, v114);
  v115 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  *(_BYTE *)(v112 + *(int *)(v115 + 20)) = *(_BYTE *)(v113 + *(int *)(v115 + 20));
  v116 = *(int *)(v115 + 24);
  v117 = (uint64_t *)(v112 + v116);
  v118 = (uint64_t *)(v113 + v116);
  v119 = *v117;
  *v117 = *v118;
  swift_bridgeObjectRelease(v119);
  v120 = v117[1];
  v117[1] = v118[1];
  swift_bridgeObjectRelease(v120);
  v121 = v117[2];
  v117[2] = v118[2];
  swift_bridgeObjectRelease(v121);
  v122 = v144[13];
  v123 = a1 + v122;
  v124 = a2 + v122;
  v125 = type metadata accessor for DigitalPresentmentDisplayConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 40))(v123, v124, v125);
  v126 = v144[14];
  v127 = a1 + v126;
  v128 = a2 + v126;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(a1 + v126));
  *(_QWORD *)(v127 + 32) = *(_QWORD *)(v128 + 32);
  v129 = *(_OWORD *)(v128 + 16);
  *(_OWORD *)v127 = *(_OWORD *)v128;
  *(_OWORD *)(v127 + 16) = v129;
  v130 = v144[15];
  v131 = (uint64_t *)(a1 + v130);
  v132 = (uint64_t *)(a2 + v130);
  v133 = *(_QWORD *)(a1 + v130 + 8);
  if (v133 >> 60 != 15)
  {
    v134 = v132[1];
    if (v134 >> 60 != 15)
    {
      v135 = *v131;
      *v131 = *v132;
      v131[1] = v134;
      sub_100007F8C(v135, v133);
      goto LABEL_30;
    }
    sub_10003BAAC((uint64_t)v131);
  }
  *(_OWORD *)v131 = *(_OWORD *)v132;
LABEL_30:
  v136 = v144[16];
  v137 = *(_QWORD *)(a1 + v136);
  *(_QWORD *)(a1 + v136) = *(_QWORD *)(a2 + v136);
  swift_release(v137);
  return a1;
}

uint64_t sub_100221DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100221DAC);
}

uint64_t sub_100221DAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v12 = type metadata accessor for DigitalPresentmentISOBuilder(0);
    v7 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v12;
      v9 = a3[10];
    }
    else
    {
      v13 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
      v7 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
      {
        v8 = v13;
        v9 = a3[12];
      }
      else
      {
        v8 = type metadata accessor for DigitalPresentmentDisplayConfiguration(0);
        v7 = *(_QWORD *)(v8 - 8);
        v9 = a3[13];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[7] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_100221E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100221EA8);
}

uint64_t sub_100221EA8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[7] + 8) = (a2 - 1);
      return result;
    }
    v12 = type metadata accessor for DigitalPresentmentISOBuilder(0);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[10];
    }
    else
    {
      v13 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
      v9 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v13;
        v11 = a4[12];
      }
      else
      {
        v10 = type metadata accessor for DigitalPresentmentDisplayConfiguration(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[13];
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for DigitalPresentmentFlow.Context(uint64_t a1)
{
  return sub_100038B7C(a1, qword_100638FD0, (uint64_t)&nominal type descriptor for DigitalPresentmentFlow.Context);
}

uint64_t sub_100221FA8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char *v17;

  v6[0] = &unk_1005262A0;
  v6[1] = "\b";
  result = type metadata accessor for ValidatedDigitalPresentmentRequest(319);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(result - 8) + 64;
    v8 = &unk_100526320;
    v9 = &unk_1005262D0;
    v10 = &unk_100526288;
    v11 = v7;
    v12 = (char *)&value witness table for Builtin.NativeObject + 64;
    result = type metadata accessor for DigitalPresentmentCallingClientConfig(319);
    if (v4 <= 0x3F)
    {
      v13 = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for DigitalPresentmentDisplayConfiguration(319);
      if (v5 <= 0x3F)
      {
        v14 = *(_QWORD *)(result - 8) + 64;
        v15 = &unk_1005262D0;
        v16 = &unk_100526338;
        v17 = (char *)&value witness table for Builtin.NativeObject + 64;
        swift_initStructMetadata(a1, 256, 13, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

_QWORD *sub_1002220A0(_QWORD *a1)
{
  destroy for DigitalPresentmentHelper(a1);
  return a1;
}

_QWORD *sub_1002220D4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _UNKNOWN **v21;
  _QWORD *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void (*v31)(uint64_t, uint64_t);
  _QWORD *v32;
  NSObject *v34;
  _QWORD v35[5];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ISO18013KnownDocTypes(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v35[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[3] = &type metadata for IDCredCredentialStore;
  v35[4] = &off_1006070F8;
  v35[0] = a1;
  sub_10002581C((uint64_t)v35, (uint64_t)(a3 + 2));
  v14 = (char *)a3 + OBJC_IVAR____TtC8coreidvd23DeveloperTestMDLManager_iso18013DocType;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v15((char *)a3 + OBJC_IVAR____TtC8coreidvd23DeveloperTestMDLManager_iso18013DocType, a2, v10);
  v15(v13, (uint64_t)v14, v10);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  v17 = v16;
  v18 = enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:);
  if ((_DWORD)v16 == enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v35);
    v19 = a3 + 7;
    v20 = type metadata accessor for DeveloperTestMDLPayloadBuilder(0);
    v21 = &off_1006148F8;
LABEL_5:
    a3[10] = v20;
    a3[11] = v21;
    v22 = sub_100022234(v19);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 104))(v22, v17, v10);
    return a3;
  }
  if ((_DWORD)v16 == enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v35);
    v19 = a3 + 7;
    v20 = type metadata accessor for DeveloperTestJapanNationalIDCardPayloadBuilder(0);
    v21 = &off_10060C2E8;
    goto LABEL_5;
  }
  v23 = defaultLogger()(v16);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter();
  v34 = v24;
  v26 = v24;
  v27 = v25;
  if (os_log_type_enabled(v26, v25))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    v29 = v27;
    v30 = v28;
    _os_log_impl((void *)&_mh_execute_header, v34, v29, "DeveloperTestMDLManager: unknown document type", v28, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  v31 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v31(a2, v10);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v35);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  a3[10] = type metadata accessor for DeveloperTestMDLPayloadBuilder(0);
  a3[11] = &off_1006148F8;
  v32 = sub_100022234(a3 + 7);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 104))(v32, v18, v10);
  v31((uint64_t)v13, v10);
  return a3;
}

uint64_t sub_100222384(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v12;
  uint64_t v13;
  _UNKNOWN **v14;
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;

  v16 = type metadata accessor for CVBackgroundActivity();
  v17 = &off_100617610;
  *(_QWORD *)&v15 = a1;
  v13 = type metadata accessor for PresentmentKeyRevocationValidator();
  v14 = &off_100618FA0;
  *(_QWORD *)&v12 = a2;
  swift_defaultActor_initialize(a4, v8);
  *(_QWORD *)(a4 + 320) = 0;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 304) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  sub_100008018(&v15, a4 + 112);
  sub_100008018(&v12, a4 + 152);
  v9 = a3[3];
  *(_OWORD *)(a4 + 224) = a3[2];
  *(_OWORD *)(a4 + 240) = v9;
  *(_OWORD *)(a4 + 256) = a3[4];
  v10 = a3[1];
  *(_OWORD *)(a4 + 192) = *a3;
  *(_OWORD *)(a4 + 208) = v10;
  return a4;
}

uint64_t sub_100222438(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  _UNKNOWN **v20;
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v22 = type metadata accessor for CVBackgroundActivity();
  v23 = &off_100617610;
  v21[0] = a1;
  v19 = type metadata accessor for PresentmentKeyRevocationValidator();
  v20 = &off_100618FA0;
  v18[0] = a2;
  v6 = type metadata accessor for DigitalPresentmentCredentialValidator();
  v7 = swift_allocObject(v6, 328, 15);
  v8 = sub_10001E624((uint64_t)v21, v22);
  __chkstk_darwin(v8);
  v10 = (_QWORD *)((char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  v12 = sub_10001E624((uint64_t)v18, v19);
  __chkstk_darwin(v12);
  v14 = (_QWORD *)((char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = sub_100222384(*v10, *v14, a3, v7);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v18);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v21);
  return v16;
}

double sub_10022258C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  double result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    sub_100028034(a5, a6);
    sub_100028034(a7, a8);
    swift_bridgeObjectRetain(a15);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a13).n128_u64[0];
  }
  return result;
}

_QWORD *sub_100222630(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
  return a1;
}

uint64_t sub_10022268C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    sub_100007F78(a5, a6);
    sub_100007F78(a7, a8);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a13);
    return swift_bridgeObjectRelease(a15);
  }
  return result;
}

uint64_t sub_100222730(uint64_t a1)
{
  sub_100028034(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100222760(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100639564);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100007EE8;
  return sub_10022EBC0(a1, v4, v5, v6);
}

uint64_t sub_1002227CC(uint64_t a1)
{
  sub_100007F78(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1002227F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

unint64_t sub_10022281C()
{
  return sub_10022B32C();
}

uint64_t sub_100222834(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100222844(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10022284C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_QWORD *)(v5 + 264) = a4;
  *(_QWORD *)(v5 + 272) = v4;
  *(_BYTE *)(v5 + 412) = a3;
  *(_QWORD *)(v5 + 248) = a1;
  *(_QWORD *)(v5 + 256) = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  *(_QWORD *)(v5 + 280) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 288) = v7;
  *(_QWORD *)(v5 + 296) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  *(_QWORD *)(v5 + 304) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 312) = v9;
  *(_QWORD *)(v5 + 320) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 328) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 336) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 344) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 352) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 360) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 368) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 376) = swift_task_alloc(v12);
  return swift_task_switch(sub_100222938, 0, 0);
}

uint64_t sub_100222938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *aBlock;
  uint64_t v57;

  v51 = (__int128 *)(v1 + 112);
  v46 = v1 + 192;
  v47 = v1 + 64;
  v45 = v1 + 216;
  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ProducedAssetManager warmup start", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 376);
  v8 = *(_QWORD *)(v1 + 328);
  v7 = *(_QWORD *)(v1 + 336);
  v53 = *(_QWORD *)(v1 + 312);
  v54 = *(_QWORD *)(v1 + 304);
  v48 = *(_QWORD *)(v1 + 320);
  v49 = *(_QWORD *)(v1 + 296);
  v52 = *(_QWORD *)(v1 + 288);
  v9 = *(_QWORD *)(v1 + 272);
  v50 = *(_QWORD *)(v1 + 280);
  v11 = *(_QWORD *)(v1 + 256);
  v10 = *(_QWORD *)(v1 + 264);
  v55 = *(unsigned __int8 *)(v1 + 412);
  v12 = *(_QWORD *)(v1 + 248);

  v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(_QWORD *)(v1 + 384) = v13;
  v14 = v6;
  v15 = v13;
  v13(v14, v8);
  sub_10002581C(v12, v1 + 152);
  swift_beginAccess(v9 + 112, v45, 33, 0);
  sub_100184E1C(v1 + 152, v9 + 112, &qword_1006384C8);
  swift_endAccess(v45);
  sub_1001FB2F4(v11, v47);
  swift_beginAccess(v9 + 160, v46, 33, 0);
  sub_100184E1C(v47, v9 + 160, &qword_100637FA8);
  swift_endAccess(v46);
  v16 = *(_QWORD *)(v9 + 104);
  *(_QWORD *)(v9 + 104) = v10;
  swift_retain(v10);
  swift_release(v16);
  dispatch_group_enter(*(dispatch_group_t *)(v9 + 56));
  sub_10002581C(v12, (uint64_t)v51);
  v17 = swift_allocObject(&unk_10060BCA0, 64, 7);
  *(_QWORD *)(v17 + 16) = v9;
  sub_100008018(v51, v17 + 24);
  *(_QWORD *)(v1 + 48) = sub_100227F9C;
  *(_QWORD *)(v1 + 56) = v17;
  *(_QWORD *)(v1 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v1 + 24) = 1107296256;
  *(_QWORD *)(v1 + 32) = sub_1004AB190;
  *(_QWORD *)(v1 + 40) = &unk_10060BCB8;
  v18 = _Block_copy((const void *)(v1 + 16));
  v19 = swift_retain(v9);
  static DispatchQoS.unspecified.getter(v19);
  *(_QWORD *)(v1 + 240) = _swiftEmptyArrayStorage;
  v20 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100004828((uint64_t *)&unk_1006308D0);
  v22 = sub_100107078();
  dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 240, v21, v22, v50, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v48, v49, v18);
  _Block_release(v18);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v49, v50);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v48, v54);
  v23 = swift_release(*(_QWORD *)(v1 + 56));
  if (v55 == 1)
  {
    v24 = defaultLogger()(v23);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.debug.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 67109120;
      *(_DWORD *)(v1 + 408) = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 408, v1 + 412, v27 + 4);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "isAttemptingWorkflowRefetch: %{BOOL}d will attempt to upload the video", v27, 8u);
      swift_slowDealloc(v27, -1, -1);
    }
    v28 = *(_QWORD *)(v1 + 368);
    v29 = *(_QWORD *)(v1 + 328);

    v15(v28, v29);
    v30 = (_QWORD *)swift_task_alloc(dword_1006391D4);
    *(_QWORD *)(v1 + 392) = v30;
    *v30 = v1;
    v30[1] = sub_100222E64;
    return sub_100223F08();
  }
  else
  {
    v32 = defaultLogger()(v23);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter(v33);
    v35 = os_log_type_enabled(v33, v34);
    v36 = *(_QWORD *)(v1 + 352);
    v37 = v36;
    if (v35)
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "ProducedAssetManager warmup end", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
      v37 = *(_QWORD *)(v1 + 352);
    }
    v39 = *(_QWORD *)(v1 + 376);
    v40 = *(void (**)(uint64_t, uint64_t))(v1 + 384);
    v42 = *(_QWORD *)(v1 + 360);
    v41 = *(_QWORD *)(v1 + 368);
    v43 = *(_QWORD *)(v1 + 344);
    v44 = *(_QWORD *)(v1 + 328);
    aBlock = *(void **)(v1 + 320);
    v57 = *(_QWORD *)(v1 + 296);

    v40(v36, v44);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v37);
    swift_task_dealloc(v43);
    swift_task_dealloc(aBlock);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100222E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100222FF4;
  else
    v3 = sub_100222EC8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100222EC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v1 + 360);
  v7 = v6;
  if (v5)
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ProducedAssetManager warmup end", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
    v7 = *(_QWORD *)(v1 + 360);
  }
  v9 = *(_QWORD *)(v1 + 376);
  v10 = *(void (**)(uint64_t, uint64_t))(v1 + 384);
  v11 = *(_QWORD *)(v1 + 368);
  v13 = *(_QWORD *)(v1 + 344);
  v12 = *(_QWORD *)(v1 + 352);
  v14 = *(_QWORD *)(v1 + 328);
  v16 = *(_QWORD *)(v1 + 320);
  v17 = *(_QWORD *)(v1 + 296);

  v10(v6, v14);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v7);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100222FF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ProducedAssetManager warmup end", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 376);
  v7 = *(void (**)(uint64_t, uint64_t))(v1 + 384);
  v9 = *(_QWORD *)(v1 + 360);
  v8 = *(_QWORD *)(v1 + 368);
  v11 = *(_QWORD *)(v1 + 344);
  v10 = *(_QWORD *)(v1 + 352);
  v13 = *(_QWORD *)(v1 + 320);
  v12 = *(_QWORD *)(v1 + 328);
  v15 = *(_QWORD *)(v1 + 296);

  v7(v11, v12);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100223114(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  id v27;
  Swift::String v28;
  Swift::Bool v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  int v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE v125[24];
  unint64_t v126;

  v121 = a2;
  v114 = a3;
  v4 = type metadata accessor for DIPError.Code(0);
  v117 = *(_QWORD *)(v4 - 8);
  v118 = v4;
  __chkstk_darwin(v4);
  v119 = (char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v6);
  v113 = (char *)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v123 - 8);
  v9 = __chkstk_darwin(v123);
  v115 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v116 = (char *)&v112 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v112 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v112 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v112 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v112 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v112 - v25;
  v27 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v28._object = (void *)0x80000001005563D0;
  v28._countAndFlagsBits = 0xD00000000000001ALL;
  v29 = NSUserDefaults.internalBool(forKey:)(v28);

  if (!v29)
  {
    v126 = (unint64_t)_swiftEmptyArrayStorage;
    v36 = IdentityProofingDocuments.selfie.getter();
    v112 = a1;
    if (v36)
    {
      v37 = (void *)v36;
      v38 = defaultLogger()(v36);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.debug.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "create upload asset for selfie", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      v42 = *(void (**)(char *, uint64_t))(v8 + 8);
      v42(v24, v123);
      v43 = v120;
      v44 = v122;
      v45 = sub_1000444A0((uint64_t)v37, 2, v121);
      v46 = v44;
      if (v44)
        goto LABEL_29;
      v47 = v45;
      v48 = (_QWORD *)(v43 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets);
      swift_beginAccess(v43 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets, v125, 33, 0);
      swift_retain(v47);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v48);
      v124 = *v48;
      *v48 = 0x8000000000000000;
      sub_100480EEC(v47, 0x6569666C6573, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
      v50 = *v48;
      *v48 = v124;
      swift_bridgeObjectRelease(v50);
      swift_endAccess(v125);
      v51 = swift_retain(v47);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
      v53 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v52 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v53 >= v52 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
      v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v47);
      specialized Array._endMutation()(v54);

      v55 = v123;
    }
    else
    {
      v56 = defaultLogger()(0);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.debug.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v59 = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "reset upload asset for selfie", v59, 2u);
        swift_slowDealloc(v59, -1, -1);
      }

      v42 = *(void (**)(char *, uint64_t))(v8 + 8);
      v55 = v123;
      v42(v21, v123);
      v43 = v120;
      swift_beginAccess(v120 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets, v125, 33, 0);
      v47 = sub_10047EAC4(0x6569666C6573, 0xE600000000000000);
      swift_endAccess(v125);
      v46 = v122;
    }
    v60 = swift_release(v47);
    v61 = IdentityProofingDocuments.frontID.getter(v60);
    if (v61)
    {
      v37 = (void *)v61;
      v62 = defaultLogger()(v61);
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.debug.getter(v63);
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v65 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "create upload asset for ID front", v65, 2u);
        swift_slowDealloc(v65, -1, -1);
      }

      v42(v18, v55);
      v66 = sub_1000444A0((uint64_t)v37, 0, v121);
      if (v46)
        goto LABEL_29;
      v67 = v66;
      v68 = (_QWORD *)(v43 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets);
      swift_beginAccess(v43 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets, v125, 33, 0);
      swift_retain(v67);
      v69 = swift_isUniquelyReferenced_nonNull_native(*v68);
      v124 = *v68;
      *v68 = 0x8000000000000000;
      sub_100480EEC(v67, 0xD00000000000001ALL, 0x80000001005472C0, v69);
      v70 = *v68;
      *v68 = v124;
      swift_bridgeObjectRelease(v70);
      swift_endAccess(v125);
      v71 = swift_retain(v67);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v71);
      v73 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v72 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v73 >= v72 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1);
      v74 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v67);
      specialized Array._endMutation()(v74);

    }
    else
    {
      v75 = defaultLogger()(0);
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.debug.getter(v76);
      if (os_log_type_enabled(v76, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v78 = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "reset upload asset for frontID", v78, 2u);
        swift_slowDealloc(v78, -1, -1);
      }

      v42(v15, v55);
      swift_beginAccess(v43 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets, v125, 33, 0);
      v67 = sub_10047EAC4(0xD00000000000001ALL, 0x80000001005472C0);
      swift_endAccess(v125);
    }
    v79 = v116;
    v80 = swift_release(v67);
    v81 = IdentityProofingDocuments.backID.getter(v80);
    if (v81)
    {
      v37 = (void *)v81;
      v82 = defaultLogger()(v81);
      v83 = Logger.logObject.getter(v82);
      v84 = static os_log_type_t.debug.getter(v83);
      if (os_log_type_enabled(v83, v84))
      {
        v85 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v85 = 0;
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "create upload asset for ID back", v85, 2u);
        swift_slowDealloc(v85, -1, -1);
      }

      v42(v79, v55);
      v86 = sub_1000444A0((uint64_t)v37, 1, v121);
      if (v46)
      {
LABEL_29:
        v87 = v46;
        v88 = v126;

        swift_bridgeObjectRelease(v88);
        v89 = v119;
        (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(v119, enum case for DIPError.Code.internalError(_:), v118);
        swift_errorRetain(v87);
        v90 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v91 = type metadata accessor for DIPError(0);
        v92 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v91, v92, 0, 0);
        v93 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v87, v89, 0, v90, 0xD000000000000082, 0x80000001005560F0, 0xD000000000000043, 0x80000001005563F0, 181);
        swift_willThrow(v93);
        return swift_errorRelease(v87);
      }
      v99 = v86;
      v100 = (_QWORD *)(v43 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets);
      swift_beginAccess(v43 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets, v125, 33, 0);
      swift_retain(v99);
      v101 = swift_isUniquelyReferenced_nonNull_native(*v100);
      v124 = *v100;
      *v100 = 0x8000000000000000;
      sub_100480EEC(v99, 0xD000000000000019, 0x8000000100547250, v101);
      v102 = *v100;
      *v100 = v124;
      swift_bridgeObjectRelease(v102);
      v103 = swift_endAccess(v125);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v103);
      v105 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v104 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v105 >= v104 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v104 > 1, v105 + 1, 1);
      v106 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v105, v99);
      specialized Array._endMutation()(v106);

    }
    else
    {
      v94 = defaultLogger()(0);
      v95 = Logger.logObject.getter(v94);
      v96 = static os_log_type_t.debug.getter(v95);
      if (os_log_type_enabled(v95, v96))
      {
        v97 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v97 = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "reset upload asset for backID", v97, 2u);
        swift_slowDealloc(v97, -1, -1);
      }

      v42(v115, v55);
      swift_beginAccess(v43 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets, v125, 33, 0);
      v98 = sub_10047EAC4(0xD000000000000019, 0x8000000100547250);
      swift_endAccess(v125);
      swift_release(v98);
    }
    v107 = type metadata accessor for TaskPriority(0);
    v108 = (uint64_t)v113;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 56))(v113, 1, 1, v107);
    v109 = v126;
    v110 = swift_allocObject(&unk_10060BCF0, 49, 7);
    *(_QWORD *)(v110 + 16) = 0;
    *(_QWORD *)(v110 + 24) = 0;
    *(_QWORD *)(v110 + 32) = v43;
    *(_QWORD *)(v110 + 40) = v109;
    *(_BYTE *)(v110 + 48) = v114 & 1;
    swift_retain(v43);
    v111 = sub_1001075D4(v108, (uint64_t)&unk_1006391E0, v110);
    return swift_release(v111);
  }
  v31 = defaultLogger()(v30);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.debug.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "SKIPPING CloudKit upload", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v26, v123);
}

uint64_t sub_100223C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v7 = v6;
  v27 = a6;
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 48) = 0;
  sub_1000257E0();
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
  v17 = static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  *(_QWORD *)(v7 + 88) = v17;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 137) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  v18 = v7 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_pdf417Data;
  v19 = type metadata accessor for PDF417Data(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets;
  *(_QWORD *)(v7 + v20) = sub_10011D880((uint64_t)_swiftEmptyArrayStorage);
  v21 = type metadata accessor for IdentityProofingAssetUploadManager(0);
  v22 = (_QWORD *)swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22[2] = &_swiftEmptyDictionarySingleton;
  v22[3] = &_swiftEmptyDictionarySingleton;
  v22[4] = &_swiftEmptyDictionarySingleton;
  v22[5] = 0;
  v23 = (char *)v22
      + OBJC_IVAR____TtC8coreidvd34IdentityProofingAssetUploadManager_livenessFlowInternalDiagnosticsVideoURL;
  v24 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(_QWORD *)(v7 + 56) = a2;
  *(_QWORD *)(v7 + 64) = a3;
  *(_QWORD *)(v7 + 72) = a4;
  *(_QWORD *)(v7 + 80) = a5;
  *(_QWORD *)(v7 + 16) = v22;
  *(_QWORD *)(v7 + 24) = v27;
  *(_QWORD *)(v7 + 32) = a1;
  return v7;
}

void sub_100223E14(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, __n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (uint64_t *)(*(_QWORD *)(a1 + 32) + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v4 = *v3;
  v5 = v3[1];
  v6 = a2[3];
  v7 = a2[4];
  sub_10000806C(a2, v6);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v8 + 8);
  v10 = swift_bridgeObjectRetain(v5);
  v11 = v9(v6, v8, v10);
  v13 = v12;
  v14 = type metadata accessor for AssessDuringProofingODNator(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = sub_100271618(v4, v5, 0x61746E6567616DLL, 0xE700000000000000, v11, v13, 0, 0, 3u, 1u);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v15;
  swift_release(v16);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_100223F08()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  v1[10] = swift_task_alloc(v6);
  v1[11] = swift_task_alloc(v6);
  return swift_task_switch(sub_100223FB8, 0, 0);
}

uint64_t sub_100223FB8()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2._countAndFlagsBits = 0xD000000000000030;
  v2._object = (void *)0x8000000100556300;
  v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    v5 = defaultLogger()(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Will throw an error as the internal settings to force liveness video upload is enabled", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 56);
    v13 = *(_QWORD *)(v0 + 32);
    v12 = *(_QWORD *)(v0 + 40);
    v14 = *(_QWORD *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v12, enum case for DIPError.Code.livenessFileURLDoesntExist(_:), v14);
    v15 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v16 = type metadata accessor for DIPError(0);
    v17 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v16, v17, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x80000001005563A0, 0, v12, 0, v15, 0xD000000000000082, 0x80000001005560F0, 0xD000000000000033, 0x8000000100556360, 244);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 16);
    v20 = *(void **)(v19 + 40);
    *(_QWORD *)(v0 + 96) = v20;
    if (v20)
    {
      v21 = *(_BYTE *)(v19 + 48);
      v22 = dword_1006391C4;
      v23 = v20;
      v24 = (_QWORD *)swift_task_alloc(v22);
      *(_QWORD *)(v0 + 104) = v24;
      *v24 = v0;
      v24[1] = sub_10022438C;
      return sub_1002258A0((uint64_t)v23, v21);
    }
    v26 = defaultLogger()(v4);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "The liveness video URL doesn't exist. Cannot upload video", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }
    v30 = *(_QWORD *)(v0 + 72);
    v31 = *(_QWORD *)(v0 + 48);
    v32 = *(_QWORD *)(v0 + 56);
    v34 = *(_QWORD *)(v0 + 32);
    v33 = *(_QWORD *)(v0 + 40);
    v35 = *(_QWORD *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104))(v33, enum case for DIPError.Code.livenessFileURLDoesntExist(_:), v35);
    v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v37 = type metadata accessor for DIPError(0);
    v38 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v37, v38, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100556340, 0, v33, 0, v36, 0xD000000000000082, 0x80000001005560F0, 0xD000000000000033, 0x8000000100556360, 249);
  }
  swift_willThrow(v18);
  v39 = *(_QWORD *)(v0 + 80);
  v41 = *(_QWORD *)(v0 + 64);
  v40 = *(_QWORD *)(v0 + 72);
  v42 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022438C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100224500;
  else
    v3 = sub_1002243F0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002243F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully uploaded liveness video after workflow refetch", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 88);
  v7 = *(void **)(v1 + 96);
  v9 = *(_QWORD *)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 80);
  v11 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 64);
  v13 = *(_QWORD *)(v1 + 40);
  v12 = *(_QWORD *)(v1 + 48);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v12);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100224500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 112);
  v3 = *(void **)(v1 + 96);
  v5 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  v6 = *(_QWORD *)(v1 + 48);
  defaultLogger()(a1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v4);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_willThrow(v7);

  v8 = *(_QWORD *)(v1 + 80);
  v10 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 72);
  v11 = *(_QWORD *)(v1 + 40);
  swift_task_dealloc(*(_QWORD *)(v1 + 88));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1002245B0(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_enter(*(dispatch_group_t *)(v1 + 56));
  v17 = *(_QWORD *)(v1 + 64);
  v11 = swift_allocObject(&unk_10060BBD8, 32, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_10022776C;
  v20 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_10060BBF0;
  v12 = _Block_copy(aBlock);
  swift_retain(v1);
  static DispatchQoS.unspecified.getter(a1);
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_100004828((uint64_t *)&unk_1006308D0);
  v15 = sub_100107078();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v3, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v20);
}

void sub_100224794(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  _BYTE v43[24];

  v2 = sub_100004828(&qword_100633978);
  __chkstk_darwin(v2);
  v42 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_100636690);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_1006385A8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v40 - v11;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = defaultLogger()(v15);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    v41 = v12;
    v22 = v21;
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "prepareForProofingIdentity: performing proofing preparation", v21, 2u);
    v12 = v41;
    swift_slowDealloc(v22, -1, -1);
  }

  v23 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v24 = IdentityProofingDocuments.backID.getter(v23);
  if (v24)
  {
    v25 = (void *)v24;
    v26 = IdentityDocument.pdf417Data.getter();
    v28 = v27;

  }
  else
  {
    v26 = 0;
    v28 = 0xF000000000000000;
  }
  v29 = (uint64_t)v42;
  sub_100224B70(v26, v28, (uint64_t)v12);
  sub_100007F78(v26, v28);
  v30 = a1 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_pdf417Data;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_pdf417Data, v43, 33, 0);
  sub_10022778C((uint64_t)v12, v30);
  swift_endAccess(v43);
  v31 = *(_QWORD *)(a1 + 96);
  if (v31)
  {
    sub_100038B24((uint64_t)v12, (uint64_t)v10, &qword_1006385A8);
    v32 = type metadata accessor for PDF417Data(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v10, 1, v32);
    v35 = swift_retain(v31);
    if (v34 == 1)
    {
      sub_100008030((uint64_t)v10, &qword_1006385A8);
      v36 = type metadata accessor for PDF417ParsedData(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v29, 1, 1, v36);
    }
    else
    {
      PDF417Data.parsedData.getter(v35);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v32);
    }
    v38 = *(_QWORD *)(a1 + 104);
    swift_retain(v38);
    sub_100274350(v29, v38, (uint64_t)v6);
    swift_release(v31);
    swift_release(v38);
    sub_100008030(v29, &qword_100633978);
    sub_100008030((uint64_t)v12, &qword_1006385A8);
    v39 = type metadata accessor for ODNAssessmentResult(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v6, 0, 1, v39);
  }
  else
  {
    sub_100008030((uint64_t)v12, &qword_1006385A8);
    v37 = type metadata accessor for ODNAssessmentResult(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v6, 1, 1, v37);
  }
  sub_100008030((uint64_t)v6, &qword_100636690);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_100224B70@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for Logger(0);
  v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  if (a2 >> 60 == 15)
  {
    v8 = type metadata accessor for PDF417Data(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a3, 1, 1, v8);
  }
  else
  {
    v10 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v11 = sub_100022948(a1, a2);
    v12 = JSONDecoder.init()(v11);
    v13 = type metadata accessor for PDF417Data(0);
    v14 = sub_100004790(&qword_1006391B8, (uint64_t (*)(uint64_t))&type metadata accessor for PDF417Data, (uint64_t)&protocol conformance descriptor for PDF417Data);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v13, a1, a2, v13, v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a3, 0, 1, v13);
    swift_release(v12);
    return sub_100007F78(a1, a2);
  }
}

uint64_t sub_100224E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_BYTE *)(v6 + 120) = a6;
  *(_QWORD *)(v6 + 56) = a4;
  *(_QWORD *)(v6 + 64) = a5;
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v6 + 72) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 80) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 96) = swift_task_alloc(v9);
  return swift_task_switch(sub_100224E80, 0, 0);
}

uint64_t sub_100224E80()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_BYTE *)(v0 + 120);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 72);
  v3 = (_QWORD *)swift_task_alloc(dword_100630E34);
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_100224EF4;
  return sub_100048848(*(_QWORD *)(v0 + 64), (v1 & 1) == 0, *(_BYTE *)(v0 + 120), v2);
}

uint64_t sub_100224EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100225028;
  else
    v3 = sub_100224F58;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100224F58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Assets uploaded to cloudkit successfully", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 96);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 80);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = *(_QWORD *)(v1 + 88);
  swift_task_dealloc(*(_QWORD *)(v1 + 96));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100225028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(v1 + 112);
  defaultLogger()(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 112);
    v18 = *(_QWORD *)(v1 + 80);
    v19 = *(_QWORD *)(v1 + 72);
    v20 = *(_QWORD *)(v1 + 88);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v21 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v6, v1 + 40, v1 + 16);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
    v11 = v10;
    *(_QWORD *)(v1 + 48) = sub_1000E3AC8(v9, v10, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "received an error from uploads %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v6);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 112);
    v14 = *(_QWORD *)(v1 + 80);
    v13 = *(_QWORD *)(v1 + 88);
    v15 = *(_QWORD *)(v1 + 72);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  v16 = *(_QWORD *)(v1 + 88);
  swift_task_dealloc(*(_QWORD *)(v1 + 96));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10022522C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, void (*a6)(_QWORD), uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_QWORD);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int64_optional v51;

  v45 = a6;
  v46 = a8;
  v44 = a7;
  LODWORD(v47) = a5;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4 == 2)
    v16 = 2;
  else
    v16 = 1;
  sub_1000D6B28(a2, a3, v16);
  if (!v8)
  {
    v18 = v17;
    v40 = a2;
    v41 = v13;
    v19 = v47;
    v42 = v12;
    v43 = v16;
    if (v17)
    {
      v51.value = IdentityProofingActionStatus.rawValue.getter(1);
      v51.is_nil = 0;
      StoredProofingSession.update(proofingActionStatus:)(v51);
      StoredProofingSession.update(canUploadOnExpensiveNetwork:)(v19 & 1);
      sub_1000D6288();
      v29 = type metadata accessor for IdentityManagementSessionDelegate();
      v30 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      v31 = String._bridgeToObjectiveC()();
      v50 = v29;
      v32 = sub_100004828((uint64_t *)&unk_10063E570);
      v33 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v50, v32);
      objc_msgSend(v30, "postNotificationName:object:", v31, v33);

      swift_unknownObjectRelease(v33);
      v45(0);
      v34 = objc_msgSend(v18, "proofingSessionID");
      if (v34)
      {
        v35 = v34;
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        v38 = v37;

      }
      else
      {
        v36 = 0;
        v38 = 0;
      }
      sub_100023380(v36, v38, 0, 0, v43, 1, v19 & 1, (uint64_t)sub_100225600, 0);

      swift_bridgeObjectRelease(v38);
    }
    else
    {
      v47 = 0;
      defaultLogger()(0);
      v20 = swift_bridgeObjectRetain_n(a3, 2);
      v21 = Logger.logObject.getter(v20);
      v23 = static os_log_type_t.info.getter(v21, v22);
      if (os_log_type_enabled(v21, v23))
      {
        v24 = swift_slowAlloc(22, -1);
        v25 = swift_slowAlloc(64, -1);
        v50 = v25;
        *(_DWORD *)v24 = 136446466;
        swift_bridgeObjectRetain(a3);
        v48 = sub_1000E3AC8(v40, a3, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v24 + 4);
        swift_bridgeObjectRelease_n(a3, 3);
        *(_WORD *)(v24 + 12) = 2082;
        v26 = IdentityTarget.debugDescription.getter(v43);
        v28 = v27;
        v48 = sub_1000E3AC8(v26, v27, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v24 + 14);
        swift_bridgeObjectRelease(v28);
        _os_log_impl((void *)&_mh_execute_header, v21, v23, "proofing session for state %{public}s and %{public}s doesn't exist ", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v24, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v42);
    }
  }
}

uint64_t sub_100225600(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  char v31[8];
  uint64_t v32;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v27 - v8;
  if (a1)
  {
    v10 = swift_errorRetain(a1);
    defaultLogger()(v10);
    swift_errorRetain(a1);
    v11 = swift_errorRetain(a1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(12, -1);
      v28 = v2;
      v15 = (uint8_t *)v14;
      v16 = swift_slowAlloc(32, -1);
      v32 = v16;
      *(_DWORD *)v15 = 136315138;
      swift_getErrorValue(a1, v31, v30);
      v17 = Error.localizedDescription.getter(v30[1], v30[2]);
      v19 = v18;
      v29 = sub_1000E3AC8(v17, v18, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v15 + 4);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "received an error during opportunistic uploads %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      swift_errorRelease(a1);
      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v28);
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    v25 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    v26 = v6;
  }
  else
  {
    v21 = defaultLogger()(v7);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Opportunistic Uploads complete", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    v26 = v9;
  }
  return v25(v26, v2);
}

uint64_t sub_1002258A0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_BYTE *)(v3 + 576) = a2;
  *(_QWORD *)(v3 + 344) = a1;
  *(_QWORD *)(v3 + 352) = v2;
  v4 = type metadata accessor for DIPError(0);
  *(_QWORD *)(v3 + 360) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 368) = v5;
  *(_QWORD *)(v3 + 376) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v3 + 384) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 392) = v7;
  *(_QWORD *)(v3 + 400) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 408) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 416) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 424) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 432) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 440) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 448) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 456) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 464) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 472) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 480) = swift_task_alloc(v10);
  return swift_task_switch(sub_1002259AC, 0, 0);
}

uint64_t sub_1002259AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(void);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v74 = *(_QWORD *)(v1 + 480);
    v6 = *(_QWORD *)(v1 + 408);
    v5 = *(_QWORD *)(v1 + 416);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v76 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v1 + 336) = sub_1000E3AC8(0xD00000000000003CLL, 0x8000000100556250, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 336, v1 + 344, v7 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s start", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v9(v74, v6);
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 480);
    v11 = *(_QWORD *)(v1 + 408);
    v12 = *(_QWORD *)(v1 + 416);

    v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  *(_QWORD *)(v1 + 488) = v9;
  v13 = *(_BYTE *)(v1 + 576);
  v14 = *(void **)(v1 + 344);
  v15 = *(_QWORD *)(v1 + 352);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v14;

  *(_BYTE *)(v15 + 48) = v13;
  v17 = *(NSObject **)(v15 + 72);
  *(_QWORD *)(v1 + 496) = v17;
  v18 = v14;
  dispatch_group_enter(v17);
  v19 = *(NSObject **)(v15 + 80);
  *(_QWORD *)(v1 + 504) = v19;
  dispatch_group_enter(v19);
  if ((*(_BYTE *)(v15 + 152) & 1) == 0)
  {
    v27 = *(_QWORD *)(v1 + 352) + 112;
    swift_beginAccess(v27, v1 + 216, 0, 0);
    sub_100038B24(v27, v1 + 112, &qword_1006384C8);
    if (*(_QWORD *)(v1 + 136))
    {
      sub_100008018((__int128 *)(v1 + 112), v1 + 152);
      v28 = *(_QWORD *)(v1 + 176);
      v29 = *(_QWORD *)(v1 + 184);
      sub_10000806C((_QWORD *)(v1 + 152), v28);
      v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 112))(v28, v29);
      v31 = v30;
      v32 = *(_QWORD *)(v30 + 16);
      if (v32)
      {
        v33 = (uint64_t *)(v30 + 40);
        while (1)
        {
          v34 = *(v33 - 1);
          v35 = *v33;
          v36 = v34 == 0x69566569666C6573 && v35 == 0xEB000000006F6564;
          if (v36
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, 0x69566569666C6573, 0xEB000000006F6564, 0) & 1) != 0)
          {
            break;
          }
          v33 += 19;
          if (!--v32)
            goto LABEL_17;
        }
        swift_bridgeObjectRelease(v31);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + 152));
        goto LABEL_23;
      }
LABEL_17:
      v37 = swift_bridgeObjectRelease(v31);
      v38 = defaultLogger()(v37);
      v39 = Logger.logObject.getter(v38);
      v41 = static os_log_type_t.info.getter(v39, v40);
      if (os_log_type_enabled(v39, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v41, "skipped video upload based on workflow settings", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
      }
      v43 = *(_QWORD *)(v1 + 472);
      v44 = *(_QWORD *)(v1 + 408);

      v9(v43, v44);
      dispatch_group_leave(v17);
      dispatch_group_leave(v19);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + 152));
      v45 = *(_QWORD *)(v1 + 472);
      v46 = *(_QWORD *)(v1 + 480);
      v48 = *(_QWORD *)(v1 + 456);
      v47 = *(_QWORD *)(v1 + 464);
      v50 = *(_QWORD *)(v1 + 440);
      v49 = *(_QWORD *)(v1 + 448);
      v52 = *(_QWORD *)(v1 + 424);
      v51 = *(_QWORD *)(v1 + 432);
      v53 = *(_QWORD *)(v1 + 400);
      v75 = *(_QWORD *)(v1 + 376);
      sub_1002271DC();
      swift_task_dealloc(v46);
      swift_task_dealloc(v45);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v75);
      v54 = *(uint64_t (**)(void))(v1 + 8);
    }
    else
    {
      v56 = *(_QWORD *)(v1 + 392);
      v55 = *(_QWORD *)(v1 + 400);
      v57 = *(_QWORD *)(v1 + 384);
      v58 = *(_QWORD *)(v1 + 360);
      sub_100008030(v1 + 112, &qword_1006384C8);
      dispatch_group_leave(v19);
      dispatch_group_leave(v17);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v56 + 104))(v55, enum case for DIPError.Code.missingIdentityWorkFlow(_:), v57);
      v59 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v60 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v58, v60, 0, 0);
      v61 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x8000000100556210, 0, v55, 0, v59, 0xD000000000000082, 0x80000001005560F0, 0xD00000000000003CLL, 0x8000000100556250, 285);
      swift_willThrow(v61);
      v63 = *(_QWORD *)(v1 + 472);
      v62 = *(_QWORD *)(v1 + 480);
      v65 = *(_QWORD *)(v1 + 456);
      v64 = *(_QWORD *)(v1 + 464);
      v67 = *(_QWORD *)(v1 + 440);
      v66 = *(_QWORD *)(v1 + 448);
      v69 = *(_QWORD *)(v1 + 424);
      v68 = *(_QWORD *)(v1 + 432);
      v70 = *(_QWORD *)(v1 + 400);
      v73 = *(_QWORD *)(v1 + 376);
      sub_1002271DC();
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v73);
      v54 = *(uint64_t (**)(void))(v1 + 8);
    }
    return v54();
  }
  v21 = defaultLogger()(v20);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "LivenessStepUp upload video called", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }
  v25 = *(_QWORD *)(v1 + 464);
  v26 = *(_QWORD *)(v1 + 408);

  v9(v25, v26);
LABEL_23:
  *(_QWORD *)(v1 + 328) = _swiftEmptyArrayStorage;
  v72 = (_QWORD *)swift_task_alloc(async function pointer to OS_dispatch_group.wait()[1]);
  *(_QWORD *)(v1 + 512) = v72;
  *v72 = v1;
  v72[1] = sub_100225FE4;
  return OS_dispatch_group.wait()();
}

uint64_t sub_100225FE4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 512));
  return swift_task_switch(sub_100226038, 0, 0);
}

uint64_t sub_100226038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  id v51;
  Swift::String v52;
  Swift::Bool v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  NSObject *v58;
  uint8_t *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char v70;
  char v71;
  NSObject *v72;
  NSObject *v73;
  NSObject *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  NSObject *group;
  dispatch_group_t groupa;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;

  v1 = *(_QWORD *)(v0 + 352) + 160;
  swift_beginAccess(v1, v0 + 240, 0, 0);
  v2 = sub_100038B24(v1, v0 + 16, &qword_100637FA8);
  if (!*(_QWORD *)(v0 + 40))
  {
    v7 = *(_QWORD *)(v0 + 392);
    v6 = *(_QWORD *)(v0 + 400);
    v8 = *(_QWORD *)(v0 + 384);
    v9 = *(_QWORD *)(v0 + 360);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    sub_100008030(v0 + 16, &qword_100637FA8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.baaCertificateDoesntExist(_:), v8);
    v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v12 = swift_allocError(v9, v11, 0, 0);
    v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x8000000100556290, 0, v6, 0, v10, 0xD000000000000082, 0x80000001005560F0, 0xD00000000000003CLL, 0x8000000100556250, 309);
    swift_willThrow(v13);
    group = *(NSObject **)(v0 + 496);
    v90 = *(NSObject **)(v0 + 504);
    v14 = *(_QWORD *)(v0 + 432);
    v15 = *(_QWORD *)(v0 + 400);
    v86 = *(_QWORD *)(v0 + 408);
    v87 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
    v16 = *(_QWORD *)(v0 + 384);
    v17 = *(_QWORD *)(v0 + 392);
    v18 = *(_QWORD *)(v0 + 376);
    v85 = *(_QWORD *)(v0 + 368);
    v19 = *(_QWORD *)(v0 + 360);
    swift_errorRetain(v12);
    swift_errorRetain(v12);
    v20 = sub_100227364();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v15, enum case for DIPError.Code.internalError(_:), v16);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v12, v15, 0, v20, 0xD000000000000082, 0x80000001005560F0, 0xD00000000000003CLL, 0x8000000100556250, 360);
    v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v22 = swift_allocError(v19, v21, 0, 0);
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 16);
    v25 = v23(v24, v18, v19);
    defaultLogger()(v25);
    DIPRecordError(_:message:log:)(v22, 0, 0xE000000000000000, v14);
    v87(v14, v86);
    swift_errorRelease(v22);
    dispatch_group_leave(group);
    dispatch_group_leave(v90);
    swift_allocError(v19, v21, 0, 0);
    v27 = v23(v26, v18, v19);
    swift_willThrow(v27);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v18, v19);
    v29 = *(_QWORD *)(v0 + 472);
    v28 = *(_QWORD *)(v0 + 480);
    v31 = *(_QWORD *)(v0 + 456);
    v30 = *(_QWORD *)(v0 + 464);
    v33 = *(_QWORD *)(v0 + 440);
    v32 = *(_QWORD *)(v0 + 448);
    v35 = *(_QWORD *)(v0 + 424);
    v34 = *(_QWORD *)(v0 + 432);
    v36 = *(_QWORD *)(v0 + 400);
    groupa = *(dispatch_group_t *)(v0 + 376);
    sub_1002271DC();
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(groupa);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 80) = v3;
  *(_OWORD *)(v0 + 96) = *(_OWORD *)(v0 + 48);
  v4 = (void *)IdentityProofingLivenessVideoURL.fileHandle.getter(v2);
  v5 = sub_10004621C(v4, 3, (_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 520) = v5;
  v38 = v5;
  v39 = (_QWORD *)(v0 + 328);
  v40 = *(_QWORD *)(v0 + 352);

  v41 = (_QWORD *)(v40 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets);
  swift_beginAccess(v40 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets, v0 + 264, 33, 0);
  swift_retain(v38);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v41);
  v91 = *v41;
  *v41 = 0x8000000000000000;
  sub_100480EEC(v38, 0xD000000000000011, 0x8000000100554440, isUniquelyReferenced_nonNull_native);
  v43 = *v41;
  *v41 = v91;
  swift_bridgeObjectRelease(v43);
  swift_endAccess(v0 + 264);
  v44 = swift_retain(v38);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
  v46 = *(_QWORD *)((*(_QWORD *)(v0 + 328) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v45 = *(_QWORD *)((*(_QWORD *)(v0 + 328) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v46 >= v45 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
  v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v38);
  v48 = specialized Array._endMutation()(v47);
  v49 = IdentityProofingLivenessVideoURL.auxiliaryFileHandle.getter(v48);
  if (v49)
  {
    v50 = v49;
    v51 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v52._countAndFlagsBits = 0xD00000000000002ALL;
    v52._object = (void *)0x80000001005562D0;
    v53 = NSUserDefaults.internalBool(forKey:)(v52);

    if (!v53)
    {
      v72 = v50;
      v73 = v50;
      v74 = v72;
      v75 = sub_10004621C(v73, 4, (_QWORD *)(v0 + 64));

      swift_beginAccess(v41, v0 + 192, 33, 0);
      swift_retain(v75);
      v76 = swift_isUniquelyReferenced_nonNull_native(*v41);
      v92 = *v41;
      *v41 = 0x8000000000000000;
      sub_100480EEC(v75, 0xD000000000000014, 0x8000000100554460, v76);
      v77 = *v41;
      *v41 = v92;
      swift_bridgeObjectRelease(v77);
      swift_endAccess(v0 + 192);
      v78 = swift_retain(v75);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
      v80 = *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v79 = *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v80 >= v79 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
      v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v75);
      specialized Array._endMutation()(v81);

      v49 = swift_release(v75);
      if ((*(_BYTE *)(v0 + 576) & 1) != 0)
        goto LABEL_12;
      goto LABEL_18;
    }
    v55 = defaultLogger()(v54);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.debug.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = v50;
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Internal setting enabled, will skip uploading ILSU auxiliary video to cloudkit", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
      v50 = v56;
      v56 = v58;
    }

    v49 = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 488))(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 408));
  }
  if ((*(_BYTE *)(v0 + 576) & 1) != 0)
  {
LABEL_12:
    v60 = defaultLogger()(v49);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.debug.getter(v61);
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "User has opted out of uploading liveness video on cellular network. Will attempt to upload in the background when the device connects to WIFI.", v63, 2u);
      swift_slowDealloc(v63, -1, -1);
    }
    v64 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
    v65 = *(_QWORD *)(v0 + 448);
    v66 = *(_QWORD *)(v0 + 408);

    v64(v65, v66);
    v67 = *(_QWORD *)(v0 + 328);
    *(_QWORD *)(v0 + 552) = v67;
    v68 = (_QWORD *)swift_task_alloc(dword_100630E34);
    *(_QWORD *)(v0 + 560) = v68;
    *v68 = v0;
    v68[1] = sub_1002269A8;
    v69 = v67;
    v70 = 0;
    v71 = 1;
    return sub_100048848(v69, v70, v71, 0);
  }
LABEL_18:
  v82 = *(NSObject **)(v0 + 504);
  sub_1001A496C((_QWORD *)(v0 + 64));
  swift_release(v38);
  dispatch_group_leave(v82);
  v83 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 528) = v83;
  v84 = (_QWORD *)swift_task_alloc(dword_100630E34);
  *(_QWORD *)(v0 + 536) = v84;
  *v84 = v0;
  v84[1] = sub_100226878;
  v69 = v83;
  v70 = 1;
  v71 = 0;
  return sub_100048848(v69, v70, v71, 0);
}

uint64_t sub_100226878()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 536);
  *(_QWORD *)(*v1 + 544) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100226FA0;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 528));
    v4 = sub_1002268E4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002268E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 496));
  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 480);
  v4 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 464);
  v6 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 424);
  v7 = *(_QWORD *)(v0 + 432);
  v9 = *(_QWORD *)(v0 + 400);
  v11 = *(_QWORD *)(v0 + 376);
  sub_1002271DC();
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002269A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 560);
  *(_QWORD *)(*v1 + 568) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100226B8C;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 552));
    v4 = sub_100226A14;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100226A14()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *(NSObject **)(v0 + 496);
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 504));
  dispatch_group_leave(v1);
  v3 = defaultLogger()(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Upload assets saved to disk for scheduled upload to CloudKit", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 520);
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
  v9 = *(_QWORD *)(v0 + 440);
  v10 = *(_QWORD *)(v0 + 408);

  swift_release(v7);
  v8(v9, v10);
  sub_1001A496C((_QWORD *)(v0 + 64));
  v11 = *(_QWORD *)(v0 + 472);
  v12 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 464);
  v16 = *(_QWORD *)(v0 + 440);
  v15 = *(_QWORD *)(v0 + 448);
  v18 = *(_QWORD *)(v0 + 424);
  v17 = *(_QWORD *)(v0 + 432);
  v19 = *(_QWORD *)(v0 + 400);
  v21 = *(_QWORD *)(v0 + 376);
  sub_1002271DC();
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100226B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  dispatch_group_t group;
  NSObject *groupa;
  dispatch_group_t groupb;
  dispatch_group_t v50;
  NSObject *v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 568);
  v2 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  defaultLogger()(v2);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 568);
    group = *(dispatch_group_t *)(v0 + 424);
    v50 = *(dispatch_group_t *)(v0 + 488);
    v45 = *(_QWORD *)(v0 + 408);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v52 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v6, v0 + 312, v0 + 288);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
    v11 = v10;
    *(_QWORD *)(v0 + 320) = sub_1000E3AC8(v9, v10, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received an error during saving the uploads to disk for scheduled upload to CloudKit %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v12 = ((uint64_t (*)(dispatch_group_t, uint64_t))v50)(group, v45);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 568);
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 488);
    v15 = *(_QWORD *)(v0 + 424);
    v16 = *(_QWORD *)(v0 + 408);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

    v12 = v14(v15, v16);
  }
  v17 = *(_QWORD *)(v0 + 520);
  swift_willThrow(v12);
  swift_release(v17);
  sub_1001A496C((_QWORD *)(v0 + 64));
  v18 = *(_QWORD *)(v0 + 568);
  groupa = *(NSObject **)(v0 + 496);
  v51 = *(NSObject **)(v0 + 504);
  v19 = *(_QWORD *)(v0 + 432);
  v20 = *(_QWORD *)(v0 + 400);
  v44 = *(_QWORD *)(v0 + 408);
  v46 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
  v21 = *(_QWORD *)(v0 + 384);
  v22 = *(_QWORD *)(v0 + 392);
  v24 = *(_QWORD *)(v0 + 368);
  v23 = *(_QWORD *)(v0 + 376);
  v25 = *(_QWORD *)(v0 + 360);
  swift_errorRetain(v18);
  swift_errorRetain(v18);
  v26 = sub_100227364();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v20, enum case for DIPError.Code.internalError(_:), v21);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v18, v20, 0, v26, 0xD000000000000082, 0x80000001005560F0, 0xD00000000000003CLL, 0x8000000100556250, 360);
  v27 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v28 = swift_allocError(v25, v27, 0, 0);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  v31 = v29(v30, v23, v25);
  defaultLogger()(v31);
  DIPRecordError(_:message:log:)(v28, 0, 0xE000000000000000, v19);
  v46(v19, v44);
  swift_errorRelease(v28);
  dispatch_group_leave(groupa);
  dispatch_group_leave(v51);
  swift_allocError(v25, v27, 0, 0);
  v33 = v29(v32, v23, v25);
  swift_willThrow(v33);
  swift_errorRelease(v18);
  swift_errorRelease(v18);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  v35 = *(_QWORD *)(v0 + 472);
  v34 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 456);
  v36 = *(_QWORD *)(v0 + 464);
  v39 = *(_QWORD *)(v0 + 440);
  v38 = *(_QWORD *)(v0 + 448);
  v41 = *(_QWORD *)(v0 + 424);
  v40 = *(_QWORD *)(v0 + 432);
  v42 = *(_QWORD *)(v0 + 400);
  groupb = *(dispatch_group_t *)(v0 + 376);
  sub_1002271DC();
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(groupb);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100226FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  NSObject *group;
  dispatch_group_t groupa;

  v1 = *(_QWORD *)(v0 + 544);
  v28 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
  group = *(NSObject **)(v0 + 496);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 400);
  v27 = *(_QWORD *)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 376);
  v8 = *(_QWORD *)(v0 + 360);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 528));
  swift_errorRetain(v1);
  v9 = sub_100227364();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v9, 0xD000000000000082, 0x80000001005560F0, 0xD00000000000003CLL, 0x8000000100556250, 380);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v8, v10, 0, 0);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v14 = v12(v13, v7, v8);
  defaultLogger()(v14);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v2);
  v28(v2, v27);
  swift_errorRelease(v11);
  swift_allocError(v8, v10, 0, 0);
  v16 = v12(v15, v7, v8);
  swift_willThrow(v16);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  dispatch_group_leave(group);
  v18 = *(_QWORD *)(v0 + 472);
  v17 = *(_QWORD *)(v0 + 480);
  v20 = *(_QWORD *)(v0 + 456);
  v19 = *(_QWORD *)(v0 + 464);
  v22 = *(_QWORD *)(v0 + 440);
  v21 = *(_QWORD *)(v0 + 448);
  v24 = *(_QWORD *)(v0 + 424);
  v23 = *(_QWORD *)(v0 + 432);
  v25 = *(_QWORD *)(v0 + 400);
  groupa = *(dispatch_group_t *)(v0 + 376);
  sub_1002271DC();
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(groupa);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002271DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = defaultLogger()(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v12 = v9;
    *(_DWORD *)v8 = 136315138;
    v11 = sub_1000E3AC8(0xD00000000000003CLL, 0x8000000100556250, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8 + 4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s end", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100227364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  void (*v7)(char *, _QWORD, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  _OWORD v18[2];
  __int128 v19;
  void *v20;
  _BYTE v21[24];
  __int128 v22;
  void *v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for DIPError.PropertyKey(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10011D314((uint64_t)_swiftEmptyArrayStorage);
  v7 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v7(v5, enum case for DIPError.PropertyKey.inoProviderID(_:), v2);
  v23 = &type metadata for String;
  *(_QWORD *)&v22 = 0x61746E6567616DLL;
  *((_QWORD *)&v22 + 1) = 0xE700000000000000;
  sub_10000491C(&v22, &v19);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
  *(_QWORD *)&v18[0] = v6;
  sub_1004811C4(&v19, (uint64_t)v5, isUniquelyReferenced_nonNull_native);
  v9 = *(_QWORD *)&v18[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  swift_beginAccess(v1 + 112, v21, 0, 0);
  sub_100038B24(v1 + 112, (uint64_t)&v19, &qword_1006384C8);
  if (v20)
  {
    sub_100008018(&v19, (uint64_t)&v22);
    v7(v5, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v2);
    v12 = v23;
    v11 = v24;
    sub_10000806C(&v22, (uint64_t)v23);
    v13 = (*(uint64_t (**)(void *))(*(_QWORD *)(v11 + 8) + 8))(v12);
    v20 = &type metadata for String;
    *(_QWORD *)&v19 = v13;
    *((_QWORD *)&v19 + 1) = v14;
    sub_10000491C(&v19, v18);
    v15 = swift_isUniquelyReferenced_nonNull_native(v9);
    v17 = v9;
    sub_1004811C4(v18, (uint64_t)v5, v15);
    v9 = v17;
    swift_bridgeObjectRelease(0x8000000000000000);
    v10(v5, v2);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v22);
  }
  else
  {
    sub_100008030((uint64_t)&v19, &qword_1006384C8);
  }
  return v9;
}

uint64_t sub_100227558()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  sub_100008030(v0 + 112, &qword_1006384C8);
  sub_100008030(v0 + 160, &qword_100637FA8);
  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_pdf417Data, &qword_1006385A8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets));
  return v0;
}

uint64_t sub_10022760C()
{
  uint64_t v0;

  sub_100227558();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100227630()
{
  return type metadata accessor for IdentityProofingProducedAssetManager(0);
}

uint64_t type metadata accessor for IdentityProofingProducedAssetManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1006390B0;
  if (!qword_1006390B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IdentityProofingProducedAssetManager);
  return result;
}

void sub_100227674(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[17];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = "\b";
  v4[4] = &unk_100526440;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[10] = "\b";
  v4[11] = "\b";
  v4[12] = &unk_100526458;
  v4[13] = &unk_100526440;
  v4[14] = &unk_100526470;
  sub_1001F3418(319);
  if (v3 <= 0x3F)
  {
    v4[15] = *(_QWORD *)(v2 - 8) + 64;
    v4[16] = &value witness table for Builtin.BridgeObject[8];
    swift_updateClassMetadata2(a1, 256, 17, v4, a1 + 80);
  }
}

uint64_t sub_100227740()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_10022776C()
{
  uint64_t v0;

  sub_100224794(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100227774(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100227784(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10022778C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_1006385A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_1002277D4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  char *v24;
  const void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  id v59;

  v53 = a4;
  v51 = a3;
  v52 = a2;
  v9 = type metadata accessor for DIPError(0);
  v55 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v54 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError.Code(0);
  v56 = *(_QWORD *)(v11 - 8);
  v57 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)type metadata accessor for Logger(0);
  v58 = (char *)*(v14 - 1);
  v59 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject(&unk_10060BC28, 24, 7);
  *(_QWORD *)(v17 + 16) = a6;
  v18 = (_QWORD *)swift_allocObject(&unk_10060BC50, 40, 7);
  v18[2] = a5;
  v18[3] = sub_1001BA098;
  v18[4] = v17;
  _Block_copy(a6);
  _Block_copy(a6);
  _Block_copy(a6);
  swift_retain(a5);
  v19 = swift_retain(v17);
  v20 = defaultLogger()(v19);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    v50 = a1;
    v24 = v13;
    v25 = a6;
    v26 = v9;
    v27 = v18;
    v28 = v17;
    v29 = a5;
    v30 = v23;
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Starting opportunistic uploads flow", v23, 2u);
    v31 = v30;
    a5 = v29;
    v17 = v28;
    v18 = v27;
    v9 = v26;
    a6 = v25;
    v13 = v24;
    a1 = v50;
    swift_slowDealloc(v31, -1, -1);
  }

  (*((void (**)(char *, id))v58 + 1))(v16, v59);
  if (qword_10062F4A0 != -1)
    swift_once(&qword_10062F4A0, sub_10019C540);
  sub_10019CEF0(3);
  if (a1)
  {
    v32 = a1;
    v33 = IdentityProofingConfiguration.state.getter(v32);
    if (v34)
    {
      v35 = v33;
      v36 = v34;
      v59 = v32;
      v37 = type metadata accessor for IdentityProofingDataContext();
      swift_allocObject(v37, 24, 7);
      sub_1000D6044();
      v45 = v44;
      v58 = v13;
      v46 = swift_allocObject(&unk_10060BC78, 80, 7);
      *(_QWORD *)(v46 + 16) = v45;
      *(_QWORD *)(v46 + 24) = v35;
      v47 = v51;
      *(_QWORD *)(v46 + 32) = v36;
      *(_QWORD *)(v46 + 40) = v47;
      *(_BYTE *)(v46 + 48) = v52 & 1;
      *(_QWORD *)(v46 + 56) = sub_100227F00;
      *(_QWORD *)(v46 + 64) = v18;
      v48 = v53;
      *(_QWORD *)(v46 + 72) = v53;
      swift_retain(v45);
      swift_retain(v18);
      swift_retain(v48);
      sub_1000D6570((uint64_t)sub_100227F48, v46);
      swift_release(v17);
      swift_release(a5);
      swift_release(v18);
      swift_release(v45);
      swift_release(v46);

    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v13, enum case for DIPError.Code.idStateUnavailable(_:), v57);
      v41 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v42 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v43 = swift_allocError(v9, v42, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x80000001005561F0, 0, v13, 0, v41, 0xD000000000000082, 0x80000001005560F0, 0xD000000000000062, 0x8000000100556180, 201);
      _Block_copy(a6);
      sub_1004B6C44(v43, (uint64_t)a6);
      _Block_release(a6);
      swift_errorRelease(v43);
      swift_release(v17);
      swift_release(a5);
      swift_release(v18);

    }
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v13, enum case for DIPError.Code.proofingConfigurationUnavailable(_:), v57);
    v38 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v40 = swift_allocError(v9, v39, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x80000001005560C0, 0, v13, 0, v38, 0xD000000000000082, 0x80000001005560F0, 0xD000000000000062, 0x8000000100556180, 196);
    _Block_copy(a6);
    sub_1004B6C44(v40, (uint64_t)a6);
    _Block_release(a6);
    swift_errorRelease(v40);
    swift_release(v17);
    swift_release(a5);
    swift_release(v18);
  }
  _Block_release(a6);
  _Block_release(a6);
}

uint64_t sub_100227EB0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100227ED4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100227F00(uint64_t a1)
{
  uint64_t v1;

  return sub_1004AC634(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100227F0C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

void sub_100227F48()
{
  uint64_t v0;

  sub_10022522C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(void (**)(_QWORD))(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_100227F70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100227F9C()
{
  uint64_t v0;

  sub_100223E14(*(_QWORD *)(v0 + 16), (_QWORD *)(v0 + 24));
}

uint64_t sub_100227FA8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100227FDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v9 = (_QWORD *)swift_task_alloc(dword_1006391DC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100007EE8;
  return sub_100224E0C(a1, v4, v5, v6, v7, v8);
}

uint64_t type metadata accessor for DigitalPresentmentRequestValidator()
{
  return objc_opt_self(_TtC8coreidvd34DigitalPresentmentRequestValidator);
}

void sub_100228084(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002280D0(uint64_t a1)
{
  String.hash(into:)(a1, 0x776F6C666B726F77, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_100228168(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002281AC(uint64_t a1)
{
  String.hash(into:)(a1, 0x65636E6F6ELL, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_100228204(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100228250(uint64_t a1, uint64_t a2)
{
  String.hash(into:)(a1, a2, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

uint64_t sub_100228310(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = 0xD000000000000010;
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD00000000000001CLL;
    else
      v3 = 0xD000000000000014;
    if (a2 == 1)
      v4 = 0x800000010053AC30;
    else
      v4 = 0x800000010053AC50;
  }
  else
  {
    v4 = 0x800000010053AC10;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_100228390(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002283D0(uint64_t a1)
{
  String.hash(into:)(a1, 25705, 0xE200000000000000);
  return swift_bridgeObjectRelease(0xE200000000000000);
}

void sub_1002284A0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002284D8(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 7890291, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_10022859C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002285D4(uint64_t a1)
{
  String.hash(into:)(a1, 0x72656B636970, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

uint64_t sub_10022865C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100228688 + 4 * byte_10052652B[a1]))(6645601, 0xE300000000000000);
}

uint64_t sub_100228688()
{
  return 7890291;
}

uint64_t sub_100228694()
{
  return 0x6574617473;
}

uint64_t sub_1002286A8()
{
  return 1701011826;
}

uint64_t sub_1002286B8()
{
  return 0x656E6F546E696B73;
}

unint64_t sub_1002286D0()
{
  return 0xD000000000000010;
}

unint64_t sub_1002286EC()
{
  return 0xD000000000000012;
}

uint64_t sub_10022870C()
{
  return 0x6E69747465537861;
}

uint64_t sub_100228728()
{
  return 1701736302;
}

void sub_100228738(char *a1)
{
  sub_1003C109C(*a1);
}

Swift::Int sub_100228744()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  sub_1002284A0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_100228788(uint64_t a1)
{
  char *v1;

  sub_1002284A0(a1, *v1);
}

Swift::Int sub_100228790(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_1002284A0((uint64_t)v4, v2);
  return Hasher._finalize()();
}

unint64_t sub_1002287D0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10022AF34(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002287FC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10022865C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void *sub_100228824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unsigned __int8 v35;
  _QWORD v36[2];
  void *v37;

  v2 = v1;
  v4 = sub_100004828(&qword_100639370);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100639378);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v32 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_100639380);
  v30 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = &_swiftEmptySetSingleton;
  v37 = &_swiftEmptySetSingleton;
  v14 = sub_100004828(&qword_100639388);
  v15 = sub_100099FFC(&qword_100639390, &qword_100639380, (uint64_t)&protocol conformance descriptor for Regex<A>);
  v33 = v12;
  v34 = v10;
  Regex.init<A>(_:)(sub_10022AF7C, v2, v14, v10, v15);
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v17 = sub_100099FB8();
    v18 = swift_bridgeObjectRetain(a1);
    v29 = a1;
    v19 = (uint64_t *)(a1 + 40);
    v20 = &type metadata for String;
    v31 = v8;
    v21 = v32;
    do
    {
      v22 = *v19;
      v36[0] = *(v19 - 1);
      v36[1] = v22;
      BidirectionalCollection<>.wholeMatch<A>(of:)(v33, v20, v34, v17, v15, v18);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        sub_100008030((uint64_t)v6, &qword_100639370);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v21, v6, v7);
        v23 = v17;
        v24 = v15;
        v25 = v20;
        KeyPath = swift_getKeyPath(&unk_100526648);
        Regex.Match.subscript.getter(&v35, KeyPath, v7);
        v27 = KeyPath;
        v20 = v25;
        v15 = v24;
        v17 = v23;
        v8 = v31;
        swift_release(v27);
        sub_1004E665C(v36, v35);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v21, v7);
      }
      v19 += 2;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease(v29);
    v13 = v37;
  }
  (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v34);
  return v13;
}

uint64_t sub_100228AB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  uint64_t (*v94)(char *, uint64_t);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t (*v104)(_QWORD *, uint64_t);
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t (*v109)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  void (*v115)(char *, uint64_t);
  unint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v130 = a2;
  v120 = sub_100004828(&qword_100639398);
  v121 = *(_QWORD *)(v120 - 8);
  v3 = __chkstk_darwin(v120);
  v118 = (char *)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v119 = (char *)&v106 - v5;
  v6 = sub_100004828(&qword_100639380);
  v7 = *(_QWORD *)(v6 - 8);
  v128 = v6;
  v129 = v7;
  __chkstk_darwin(v6);
  v137 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100004828(&qword_1006393A0);
  v125 = *(_QWORD *)(v142 - 8);
  v9 = __chkstk_darwin(v142);
  v124 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v143 = (uint64_t *)((char *)&v106 - v11);
  v135 = sub_100004828(&qword_1006393A8);
  v117 = *(_QWORD *)(v135 - 8);
  v12 = __chkstk_darwin(v135);
  v127 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v126 = (char *)&v106 - v15;
  v16 = __chkstk_darwin(v14);
  v140 = (char *)&v106 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v106 - v18;
  v138 = type metadata accessor for _RegexFactory(0);
  v20 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v22 = (char *)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100004828(&qword_1006393B0);
  __chkstk_darwin(v23);
  v25 = (char *)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for CharacterClass(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100004828(&qword_1006393B8);
  v31 = *(_QWORD *)(v30 - 8);
  v133 = v30;
  v134 = v31;
  __chkstk_darwin(v30);
  v132 = (char *)&v106 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100004828(&qword_1006393C0);
  v136 = *(_QWORD *)(v139 - 8);
  v33 = __chkstk_darwin(v139);
  v123 = (char *)&v106 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v144 = (uint64_t *)((char *)&v106 - v36);
  __chkstk_darwin(v35);
  v141 = (uint64_t *)((char *)&v106 - v37);
  v108 = a1;
  v38 = *(_QWORD *)(a1 + 32);
  v145 = *(_QWORD *)(a1 + 24);
  v146 = v38;
  v122 = sub_100183D54();
  v39 = static RegexComponentBuilder.buildExpression<A>(_:)(&v147, &v145, &type metadata for String, v122);
  static RegexComponent<>.any.getter(v39);
  v40 = type metadata accessor for RegexRepetitionBehavior(0);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56);
  v110 = v40;
  v42 = v41(v25, 1, 1, v40);
  v109 = v41;
  makeFactory()(v42);
  v116 = sub_10022AF84();
  v111 = v29;
  v112 = v26;
  _RegexFactory.oneOrMore<A, B>(_:_:)(v29, v25, &type metadata for Substring, v26, v116);
  sub_100008030((uint64_t)v25, &qword_1006393B0);
  v115 = *(void (**)(char *, uint64_t))(v27 + 8);
  v115(v29, v26);
  v43 = *(void (**)(char *, uint64_t))(v20 + 8);
  v44 = v138;
  v43(v22, v138);
  v131 = v43;
  v45 = v132;
  OneOrMore.init(_:)(v19, &type metadata for Substring);
  v46 = v41(v25, 1, 1, v40);
  makeFactory()(v46);
  v114 = sub_100099FFC(&qword_1006393D0, &qword_1006393B8, (uint64_t)&protocol conformance descriptor for OneOrMore<A>);
  v47 = v133;
  _RegexFactory.zeroOrOne<A, B>(_:_:)(v45, v25, &type metadata for Substring, v133, v114);
  sub_100008030((uint64_t)v25, &qword_1006393B0);
  v113 = *(void (**)(char *, uint64_t))(v134 + 8);
  v113(v45, v47);
  v48 = v44;
  v43(v22, v44);
  v49 = v144;
  Optionally.init(_:)(v19, &type metadata for Substring);
  v134 = sub_100099FFC(&qword_1006393D8, &qword_1006393C0, (uint64_t)&protocol conformance descriptor for Optionally<A>);
  v50 = v139;
  static RegexComponentBuilder.buildExpression<A>(_:)(v141, v49, v139, v134);
  v136 = *(_QWORD *)(v136 + 8);
  ((void (*)(_QWORD *, uint64_t))v136)(v49, v50);
  v51 = v108;
  v52 = swift_retain(v108);
  makeFactory()(v52);
  v53 = v118;
  ChoiceOf.init(_:)(sub_10022AFE4, v51, &type metadata for Substring);
  v54 = sub_100099FFC(&qword_1006393E0, &qword_100639398, (uint64_t)&protocol conformance descriptor for ChoiceOf<A>);
  v55 = v119;
  v56 = v120;
  static RegexComponentBuilder.buildExpression<A>(_:)(v119, v53, v120, v54);
  v57 = *(void (**)(char *, uint64_t))(v121 + 8);
  v57(v53, v56);
  v58 = v140;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(v55, v56, v54);
  v57(v55, v56);
  v59 = v117;
  v60 = v135;
  (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v19, v58, v135);
  v61 = sub_100004828(&qword_100639388);
  v118 = (char *)sub_100099FFC(&qword_1006393E8, &qword_1006393A8, (uint64_t)&protocol conformance descriptor for Regex<A>);
  v62 = v137;
  v121 = v61;
  _RegexFactory.capture<A, B, C, D>(_:_:_:)(v19, 0, 1, sub_10022AFCC, v51, v61, &type metadata for Substring, &type metadata for BiomeFedStatsField, v60, v118);
  swift_release(v51);
  v119 = *(char **)(v59 + 8);
  ((void (*)(char *, uint64_t))v119)(v19, v60);
  v63 = v48;
  v64 = v131;
  v131(v22, v63);
  v65 = v124;
  Capture.init(_:)(v62, v61);
  v120 = sub_100099FFC(&qword_1006393F0, &qword_1006393A0, (uint64_t)&protocol conformance descriptor for Capture<A>);
  v66 = v142;
  static RegexComponentBuilder.buildExpression<A>(_:)(v143, v65, v142, v120);
  v125 = *(_QWORD *)(v125 + 8);
  v67 = ((uint64_t (*)(char *, uint64_t))v125)(v65, v66);
  v68 = v111;
  static RegexComponent<>.any.getter(v67);
  v69 = v110;
  v70 = v109;
  v71 = v109(v25, 1, 1, v110);
  makeFactory()(v71);
  v72 = v112;
  _RegexFactory.oneOrMore<A, B>(_:_:)(v68, v25, &type metadata for Substring, v112, v116);
  sub_100008030((uint64_t)v25, &qword_1006393B0);
  v115(v68, v72);
  v73 = v138;
  v74 = v64;
  v64(v22, v138);
  v75 = v132;
  OneOrMore.init(_:)(v19, &type metadata for Substring);
  v76 = v70(v25, 1, 1, v69);
  makeFactory()(v76);
  v77 = v133;
  _RegexFactory.zeroOrOne<A, B>(_:_:)(v75, v25, &type metadata for Substring, v133, v114);
  sub_100008030((uint64_t)v25, &qword_1006393B0);
  v113(v75, v77);
  v78 = v73;
  v74(v22, v73);
  v79 = v123;
  Optionally.init(_:)(v19, &type metadata for Substring);
  v80 = v139;
  v81 = v134;
  static RegexComponentBuilder.buildExpression<A>(_:)(v144, v79, v139, v134);
  ((void (*)(char *, uint64_t))v136)(v79, v80);
  v82 = v148;
  v145 = v147;
  v146 = v148;
  v107 = v19;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(&v145, &type metadata for String, v122);
  v83 = swift_bridgeObjectRelease(v82);
  makeFactory()(v83);
  v84 = v126;
  v85 = v135;
  v86 = v118;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v19, v135, v118);
  v87 = v127;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v141, v80, v81);
  v88 = v140;
  v89 = v85;
  v90 = v85;
  v91 = v85;
  v92 = v86;
  _RegexFactory.accumulate<A, B, C>(_:_:)(v84, v87, &type metadata for Substring, v89, v90, v86, v86);
  v93 = (void (*)(char *, uint64_t))v119;
  ((void (*)(char *, uint64_t))v119)(v87, v91);
  v93(v84, v91);
  v94 = (uint64_t (*)(char *, uint64_t))v131;
  v95 = ((uint64_t (*)(char *, uint64_t))v131)(v22, v78);
  makeFactory()(v95);
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v88, v91, v92);
  v96 = v137;
  v97 = v121;
  _RegexFactory.accumulate<A, B, C>(_:_:)(v84, v143, v121, v91, v142, v92, v120);
  v93(v84, v91);
  v98 = v94(v22, v78);
  makeFactory()(v98);
  v99 = v139;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v144, v139, v134);
  v100 = sub_100099FFC(&qword_100639390, &qword_100639380, (uint64_t)&protocol conformance descriptor for Regex<A>);
  v101 = v96;
  v102 = v96;
  v103 = v128;
  _RegexFactory.accumulate<A, B, C>(_:_:)(v101, v84, v97, v128, v91, v100, v92);
  v93(v84, v91);
  v94(v22, v138);
  (*(void (**)(char *, uint64_t))(v129 + 8))(v102, v103);
  v93(v140, v91);
  v93(v107, v91);
  v104 = (uint64_t (*)(_QWORD *, uint64_t))v136;
  ((void (*)(_QWORD *, uint64_t))v136)(v144, v99);
  ((void (*)(_QWORD *, uint64_t))v125)(v143, v142);
  return v104(v141, v99);
}

uint64_t sub_1002295D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;

  v59 = a2;
  v3 = sub_100004828(&qword_1006393A8);
  __chkstk_darwin(v3);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for _RegexFactory(0);
  v6 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_100639398);
  v58 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v57 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v63 = (char *)&v53 - v13;
  v14 = __chkstk_darwin(v12);
  v62 = (char *)&v53 - v15;
  v16 = __chkstk_darwin(v14);
  v61 = (char *)&v53 - v17;
  v18 = __chkstk_darwin(v16);
  v60 = (char *)&v53 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v53 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v53 - v23;
  v78 = 6645601;
  v79 = 0xE300000000000000;
  v25 = sub_100183D54();
  static AlternationBuilder.buildExpression<A>(_:)(&v80, &v78, &type metadata for String, v25);
  v76 = 7890291;
  v77 = 0xE300000000000000;
  static AlternationBuilder.buildExpression<A>(_:)(&v78, &v76, &type metadata for String, v25);
  v74 = 0x6574617473;
  v75 = 0xE500000000000000;
  static AlternationBuilder.buildExpression<A>(_:)(&v76, &v74, &type metadata for String, v25);
  v72 = 1701011826;
  v73 = 0xE400000000000000;
  static AlternationBuilder.buildExpression<A>(_:)(&v74, &v72, &type metadata for String, v25);
  v70 = 0xD000000000000012;
  v71 = 0x800000010053A1D0;
  static AlternationBuilder.buildExpression<A>(_:)(&v72, &v70, &type metadata for String, v25);
  v68 = 0x6E69747465537861;
  v69 = 0xEA00000000007367;
  static AlternationBuilder.buildExpression<A>(_:)(&v70, &v68, &type metadata for String, v25);
  v26 = a1[6];
  v66 = a1[5];
  v67 = v26;
  static AlternationBuilder.buildExpression<A>(_:)(&v68, &v66, &type metadata for String, v25);
  v27 = a1[8];
  v64 = a1[7];
  v65 = v27;
  static AlternationBuilder.buildExpression<A>(_:)(&v66, &v64, &type metadata for String, v25);
  v28 = v81;
  v64 = v80;
  v65 = v81;
  v56 = v24;
  static AlternationBuilder.buildPartialBlock<A>(first:)(&v64, &type metadata for String, v25);
  v29 = swift_bridgeObjectRelease(v28);
  v30 = v79;
  v64 = v78;
  v65 = v79;
  makeFactory()(v29);
  sub_100099FFC(&qword_1006393E0, &qword_100639398, (uint64_t)&protocol conformance descriptor for ChoiceOf<A>);
  _RegexFactory.accumulateAlternation<A, B, C>(_:_:)(v24, &v64);
  v31 = *(void (**)(char *, uint64_t))(v6 + 8);
  v32 = v55;
  v31(v8, v55);
  v54 = v22;
  ChoiceOf.init(_:)(v5, &type metadata for Substring);
  v33 = swift_bridgeObjectRelease(v30);
  v34 = v77;
  v64 = v76;
  v65 = v77;
  makeFactory()(v33);
  _RegexFactory.accumulateAlternation<A, B, C>(_:_:)(v22, &v64);
  v35 = v32;
  v31(v8, v32);
  v36 = v60;
  ChoiceOf.init(_:)(v5, &type metadata for Substring);
  v37 = swift_bridgeObjectRelease(v34);
  v38 = v75;
  v64 = v74;
  v65 = v75;
  makeFactory()(v37);
  _RegexFactory.accumulateAlternation<A, B, C>(_:_:)(v36, &v64);
  v31(v8, v35);
  v39 = v61;
  ChoiceOf.init(_:)(v5, &type metadata for Substring);
  v40 = swift_bridgeObjectRelease(v38);
  v41 = v73;
  v64 = v72;
  v65 = v73;
  makeFactory()(v40);
  _RegexFactory.accumulateAlternation<A, B, C>(_:_:)(v39, &v64);
  v31(v8, v35);
  v42 = v62;
  ChoiceOf.init(_:)(v5, &type metadata for Substring);
  v43 = swift_bridgeObjectRelease(v41);
  v44 = v71;
  v64 = v70;
  v65 = v71;
  makeFactory()(v43);
  _RegexFactory.accumulateAlternation<A, B, C>(_:_:)(v42, &v64);
  v31(v8, v35);
  v45 = v63;
  ChoiceOf.init(_:)(v5, &type metadata for Substring);
  v46 = swift_bridgeObjectRelease(v44);
  v47 = v69;
  v64 = v68;
  v65 = v69;
  makeFactory()(v46);
  _RegexFactory.accumulateAlternation<A, B, C>(_:_:)(v45, &v64);
  v31(v8, v35);
  v48 = v57;
  ChoiceOf.init(_:)(v5, &type metadata for Substring);
  v49 = swift_bridgeObjectRelease(v47);
  v50 = v67;
  v64 = v66;
  v65 = v67;
  makeFactory()(v49);
  _RegexFactory.accumulateAlternation<A, B, C>(_:_:)(v48, &v64);
  v31(v8, v35);
  ChoiceOf.init(_:)(v5, &type metadata for Substring);
  swift_bridgeObjectRelease(v50);
  v51 = *(void (**)(char *, uint64_t))(v58 + 8);
  v51(v48, v9);
  v51(v63, v9);
  v51(v62, v9);
  v51(v61, v9);
  v51(v60, v9);
  v51(v54, v9);
  return ((uint64_t (*)(char *, uint64_t))v51)(v56, v9);
}

unint64_t sub_100229C4C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  unint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  char v24;
  Swift::String v25;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = static String._fromSubstring(_:)(*a1, v6, v7, v8);
  v11 = v10;
  v12 = a2[5];
  v13 = a2[6];
  if (v9 == v12 && v10 == v13)
  {
    result = swift_bridgeObjectRelease(v10);
    goto LABEL_13;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v12, v13, 0);
  result = swift_bridgeObjectRelease(v11);
  if ((v15 & 1) != 0)
  {
LABEL_13:
    v24 = 4;
    goto LABEL_14;
  }
  v17 = static String._fromSubstring(_:)(v5, v6, v7, v8);
  v19 = v18;
  v20 = a2[7];
  v21 = a2[8];
  if (v17 == v20 && v18 == v21)
  {
    result = swift_bridgeObjectRelease(v18);
    v24 = 5;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v20, v21, 0);
    result = swift_bridgeObjectRelease(v19);
    if ((v23 & 1) != 0)
    {
      v24 = 5;
    }
    else
    {
      v25._countAndFlagsBits = static String._fromSubstring(_:)(v5, v6, v7, v8);
      result = sub_10022AF34(v25);
      if (result == 9)
        v24 = 8;
      else
        v24 = result;
    }
  }
LABEL_14:
  *a3 = v24;
  return result;
}

uint64_t sub_100229D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __objc2_prop *v9;
  id v10;
  Swift::String v11;
  Swift::Bool v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  id v18;
  Swift::String v19;
  Swift::Bool v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  id v24;
  Swift::String v25;
  Swift::Bool v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  const char *attr;
  id v31;
  Swift::String v32;
  Swift::Bool v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  id v37;
  id v38;
  Swift::String v39;
  Swift::Bool v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  id v44;
  Swift::String v45;
  Swift::Bool v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  id v50;
  Swift::String v51;
  Swift::Bool v52;
  id v53;
  Swift::String v54;
  Swift::Bool v55;
  _QWORD *v56;
  objc_class *v57;
  id v58;
  __n128 v59;
  uint64_t v60;
  objc_class *v61;
  id v62;
  __n128 v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  char *name;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  uint64_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint8_t *v95;
  void (*v96)(char *, uint64_t);
  char *v97;
  id v98;
  Swift::String v99;
  Swift::Bool v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  void *v111;
  BOOL v112;
  id v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  id v123;
  char *v124;
  uint64_t v125;
  char *v126;
  id v127;
  uint64_t v128;
  uint64_t v129[3];
  uint64_t v130[4];

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v116 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v124 = (char *)&v116 - v6;
  __chkstk_darwin(v5);
  v126 = (char *)&v116 - v7;
  v8 = (void *)objc_opt_self(NSUserDefaults);
  v9 = &stru_10062A000;
  v10 = objc_msgSend(v8, "standardUserDefaults");
  v11._object = (void *)0x80000001005565E0;
  v11._countAndFlagsBits = 0xD00000000000002FLL;
  v12 = NSUserDefaults.internalBool(forKey:)(v11);

  v13 = _swiftEmptyArrayStorage;
  if (v12)
    goto LABEL_4;
  v13 = sub_1000E2358(0, 1, 1, _swiftEmptyArrayStorage);
  v15 = v13[2];
  v14 = v13[3];
  v16 = v15 + 1;
  if (v15 >= v14 >> 1)
    goto LABEL_70;
  while (1)
  {
    v13[2] = v16;
    v17 = &v13[2 * v15];
    v17[4] = 0xD000000000000029;
    v17[5] = 0x8000000100556610;
LABEL_4:
    v18 = objc_msgSend(v8, v9[130].attr);
    v19._countAndFlagsBits = 0xD000000000000032;
    v19._object = (void *)0x8000000100556640;
    v20 = NSUserDefaults.internalBool(forKey:)(v19);

    if (!v20)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        v13 = sub_1000E2358(0, v13[2] + 1, 1, v13);
      v22 = v13[2];
      v21 = v13[3];
      if (v22 >= v21 >> 1)
        v13 = sub_1000E2358((_QWORD *)(v21 > 1), v22 + 1, 1, v13);
      v13[2] = v22 + 1;
      v23 = &v13[2 * v22];
      v23[4] = 0xD000000000000023;
      v23[5] = 0x8000000100556680;
    }
    v24 = objc_msgSend(v8, v9[130].attr);
    v25._countAndFlagsBits = 0xD000000000000031;
    v25._object = (void *)0x80000001005566B0;
    v26 = NSUserDefaults.internalBool(forKey:)(v25);

    if (!v26)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        v13 = sub_1000E2358(0, v13[2] + 1, 1, v13);
      v28 = v13[2];
      v27 = v13[3];
      if (v28 >= v27 >> 1)
        v13 = sub_1000E2358((_QWORD *)(v27 > 1), v28 + 1, 1, v13);
      v13[2] = v28 + 1;
      v29 = &v13[2 * v28];
      v29[4] = 0xD000000000000025;
      v29[5] = 0x80000001005566F0;
    }
    attr = v9[130].attr;
    v127 = v8;
    v31 = objc_msgSend(v8, attr);
    v32._object = (void *)0x8000000100556720;
    v32._countAndFlagsBits = 0xD000000000000035;
    v33 = NSUserDefaults.internalBool(forKey:)(v32);

    if (!v33)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        v13 = sub_1000E2358(0, v13[2] + 1, 1, v13);
      v35 = v13[2];
      v34 = v13[3];
      if (v35 >= v34 >> 1)
        v13 = sub_1000E2358((_QWORD *)(v34 > 1), v35 + 1, 1, v13);
      v13[2] = v35 + 1;
      v36 = &v13[2 * v35];
      v36[4] = 0xD000000000000024;
      v36[5] = 0x8000000100556760;
    }
    v37 = v127;
    v38 = objc_msgSend(v127, v9[130].attr);
    v39._object = (void *)0x8000000100556790;
    v39._countAndFlagsBits = 0xD000000000000035;
    v40 = NSUserDefaults.internalBool(forKey:)(v39);

    if (!v40)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        v13 = sub_1000E2358(0, v13[2] + 1, 1, v13);
      v42 = v13[2];
      v41 = v13[3];
      if (v42 >= v41 >> 1)
        v13 = sub_1000E2358((_QWORD *)(v41 > 1), v42 + 1, 1, v13);
      v13[2] = v42 + 1;
      v43 = &v13[2 * v42];
      v43[4] = 0xD000000000000029;
      v43[5] = 0x80000001005567D0;
    }
    v44 = objc_msgSend(v37, v9[130].attr);
    v45._countAndFlagsBits = 0xD00000000000003DLL;
    v45._object = (void *)0x8000000100556800;
    v46 = NSUserDefaults.internalBool(forKey:)(v45);

    if (!v46)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        v13 = sub_1000E2358(0, v13[2] + 1, 1, v13);
      v48 = v13[2];
      v47 = v13[3];
      if (v48 >= v47 >> 1)
        v13 = sub_1000E2358((_QWORD *)(v47 > 1), v48 + 1, 1, v13);
      v13[2] = v48 + 1;
      v49 = &v13[2 * v48];
      v49[4] = 0xD00000000000002FLL;
      v49[5] = 0x8000000100556840;
    }
    v50 = objc_msgSend(v37, v9[130].attr);
    v51._countAndFlagsBits = 0xD000000000000024;
    v51._object = (void *)0x8000000100556870;
    v52 = NSUserDefaults.internalBool(forKey:)(v51);

    v9 = v52 ? (__objc2_prop *)&_swiftEmptyDictionarySingleton : (__objc2_prop *)sub_10011DC20((uint64_t)&off_100601590);
    v53 = objc_msgSend(v37, "standardUserDefaults");
    v54._countAndFlagsBits = 0xD00000000000002DLL;
    v54._object = (void *)0x80000001005568A0;
    v121 = 0xD00000000000002DLL;
    v55 = NSUserDefaults.internalBool(forKey:)(v54);

    v56 = v55 ? &_swiftEmptyDictionarySingleton : (_QWORD *)sub_10011DC20((uint64_t)&off_1006015D0);
    v57 = (objc_class *)type metadata accessor for IdentityProofingUnorderedUIElementOption(0);
    v58 = objc_allocWithZone(v57);
    swift_bridgeObjectRetain(v13);
    v59 = swift_bridgeObjectRetain(v9);
    v60 = IdentityProofingUnorderedUIElementOption.init(title:subtitle:bullets:assessments:accessibility:)(0xD000000000000030, 0x80000001005568D0, 0xD000000000000033, 0x8000000100556910, v13, v56, v9, v59);
    v61 = v57;
    v8 = (void *)v60;
    v62 = objc_allocWithZone(v61);
    v64 = (void *)IdentityProofingUnorderedUIElementOption.init(title:subtitle:bullets:assessments:accessibility:)(0xD00000000000002FLL, 0x8000000100556950, 0, 0, 0, 0, 0, v63);
    v65 = sub_100004828(&qword_100640C30);
    v66 = swift_allocObject(v65, 48, 7);
    *(_OWORD *)(v66 + 16) = xmmword_100524030;
    *(_QWORD *)(v66 + 32) = v8;
    *(_QWORD *)(v66 + 40) = v64;
    v130[0] = v66;
    specialized Array._endMutation()(v66);
    v15 = v130[0];
    if ((unint64_t)v130[0] >> 62)
    {
      if (v130[0] < 0)
        v74 = v130[0];
      else
        v74 = v130[0] & 0xFFFFFFFFFFFFFF8;
      v75 = v8;
      v76 = v64;
      swift_bridgeObjectRetain(v15);
      v16 = _CocoaArrayWrapper.endIndex.getter(v74);
      v122 = v15;
      v123 = v64;
      if (!v16)
      {
LABEL_52:
        swift_bridgeObjectRelease(v15);
        v73 = _swiftEmptyArrayStorage;
        goto LABEL_53;
      }
    }
    else
    {
      v16 = *(_QWORD *)((v130[0] & 0xFFFFFFFFFFFFF8) + 0x10);
      v67 = v8;
      v68 = v64;
      swift_bridgeObjectRetain(v15);
      v122 = v15;
      v123 = v64;
      if (!v16)
        goto LABEL_52;
    }
    if ((v15 & 0xC000000000000001) != 0)
      break;
    v14 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
    {
      v69 = *(id *)(v15 + 32);
      goto LABEL_45;
    }
    __break(1u);
LABEL_70:
    v13 = sub_1000E2358((_QWORD *)(v14 > 1), v16, 1, v13);
  }
  v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
LABEL_45:
  v70 = v15;
  v71 = v69;
  v72 = swift_bridgeObjectRelease(v70);
  v73 = (_QWORD *)IdentityProofingUnorderedUIElementOption.bullets.getter(v72);

  if (!v73)
    v73 = _swiftEmptyArrayStorage;
LABEL_53:
  v119 = v1;
  v120 = v4;
  v77 = v125;
  v78 = sub_100228824((uint64_t)v73);
  swift_bridgeObjectRelease(v73);
  swift_beginAccess(v77 + 16, v130, 1, 0);
  v79 = *(_QWORD *)(v77 + 16);
  *(_QWORD *)(v77 + 16) = v78;
  swift_bridgeObjectRelease(v79);
  name = v9[1].name;
  v81 = swift_bridgeObjectRelease(v9);
  if (name)
  {
    swift_beginAccess(v77 + 16, v129, 33, 0);
    sub_1004E665C(&v128, 7);
    v81 = swift_endAccess(v129);
  }
  v82 = v126;
  defaultLogger()(v81);
  v83 = swift_retain_n(v77, 2);
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.debug.getter(v84);
  v86 = os_log_type_enabled(v84, v85);
  v117 = v77 + 16;
  v118 = v8;
  if (v86)
  {
    v87 = swift_slowAlloc(12, -1);
    v116 = v0;
    v88 = (uint8_t *)v87;
    v89 = swift_slowAlloc(32, -1);
    v129[0] = v89;
    *(_DWORD *)v88 = 136315138;
    v90 = *(_QWORD *)(v77 + 16);
    sub_1000D5208();
    v91 = swift_bridgeObjectRetain(v90);
    v92 = Set.description.getter(v91);
    v94 = v93;
    swift_bridgeObjectRelease(v90);
    v128 = sub_1000E3AC8(v92, v94, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v88 + 4);
    swift_release_n(v125, 2);
    swift_bridgeObjectRelease(v94);
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Biome fedstats - Attempting to collect %s", v88, 0xCu);
    swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1, -1);
    v95 = v88;
    v0 = v116;
    swift_slowDealloc(v95, -1, -1);

    v96 = *(void (**)(char *, uint64_t))(v119 + 8);
    v96(v126, v0);
  }
  else
  {

    swift_release_n(v77, 2);
    v96 = *(void (**)(char *, uint64_t))(v119 + 8);
    v96(v82, v0);
  }
  v97 = v120;
  v98 = objc_msgSend(v127, "standardUserDefaults");
  v99._object = (void *)0x8000000100556980;
  v99._countAndFlagsBits = v121;
  v100 = NSUserDefaults.internalBool(forKey:)(v99);

  if (v100)
  {
    v102 = defaultLogger()(v101);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.debug.getter(v103);
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v105 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Disabling Biome Fed Stats using the dynamic workflow", v105, 2u);
      swift_slowDealloc(v105, -1, -1);
    }

    v101 = ((uint64_t (*)(char *, uint64_t))v96)(v124, v0);
  }
  v106 = defaultLogger()(v101);
  v107 = Logger.logObject.getter(v106);
  v108 = static os_log_type_t.debug.getter(v107);
  if (!os_log_type_enabled(v107, v108))
  {

    v96(v97, v0);
    swift_bridgeObjectRelease(v13);
    v110 = v117;
    v111 = v118;
    if (!v100)
      goto LABEL_64;
LABEL_66:
    v112 = 0;
    goto LABEL_67;
  }
  v109 = (uint8_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v109 = 67109120;
  LODWORD(v129[0]) = !v100;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v129, (char *)v129 + 4, v109 + 4);
  swift_bridgeObjectRelease(v13);
  _os_log_impl((void *)&_mh_execute_header, v107, v108, "is biome fed stats feature enabled by the state %{BOOL}d", v109, 8u);
  swift_slowDealloc(v109, -1, -1);

  v96(v97, v0);
  v110 = v117;
  v111 = v118;
  if (v100)
    goto LABEL_66;
LABEL_64:
  v112 = *(_QWORD *)(*(_QWORD *)v110 + 16) != 0;
LABEL_67:
  v113 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingUIConfig(0));
  v114 = IdentityProofingUIConfig.init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)(0x7374617453646566, 0xED00006E4974704FLL, 0xD00000000000001ELL, 0x8000000100556530, 0xD000000000000023, 0x8000000100556550, 0xD00000000000002BLL, 0x80000001005565B0, 0xD000000000000021, 0x8000000100556580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
           1,
           0,
           1,
           0,
           0,
           0,
           0,
           0,
           v122,
           v112);

  return v114;
}

void sub_10022A9A8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v46;
  _BYTE v47[31];
  char v48;
  _BYTE v49[32];

  v3 = v2;
  v44 = IdentityProofingUnorderedUIElement.title.getter(a1);
  v5 = v4;
  v6 = (_QWORD *)IdentityProofingUnorderedUIElement.messages.getter();
  if (v6)
  {
    v7 = v6;
    if (v6[2])
    {
      v8 = v6[5];
      v46 = v6[4];
      swift_bridgeObjectRetain(v8);
      v6 = (_QWORD *)swift_bridgeObjectRelease(v7);
      goto LABEL_6;
    }
    v6 = (_QWORD *)swift_bridgeObjectRelease(v6);
  }
  v46 = 0;
  v8 = 0;
LABEL_6:
  v9 = (_QWORD *)IdentityProofingUnorderedUIElement.actions.getter(v6);
  if (v9)
  {
    v10 = v9;
    if (v9[2])
    {
      v11 = v9[4];
      v12 = v9[5];
      swift_bridgeObjectRetain(v12);
      v9 = (_QWORD *)swift_bridgeObjectRelease(v10);
      goto LABEL_11;
    }
    v9 = (_QWORD *)swift_bridgeObjectRelease(v9);
  }
  v11 = 0;
  v12 = 0;
LABEL_11:
  v13 = IdentityProofingUnorderedUIElement.options.getter(v9);
  v14 = v13;
  v15 = (unint64_t)v13 >> 62;
  if (!v13)
  {
LABEL_25:
    v21 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  v16 = v13 & 0xFFFFFFFFFFFFFF8;
  if (!v15)
  {
    v17 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v13);
    if (v17)
      goto LABEL_14;
LABEL_23:
    swift_bridgeObjectRelease(v14);
LABEL_24:
    swift_bridgeObjectRelease(0);
    goto LABEL_25;
  }
  if (v13 >= 0)
    v22 = v13 & 0xFFFFFFFFFFFFFF8;
  else
    v22 = v13;
  swift_bridgeObjectRetain(v13);
  if (!_CocoaArrayWrapper.endIndex.getter(v22))
    goto LABEL_23;
LABEL_14:
  if ((v14 & 0xC000000000000001) != 0)
  {
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
  }
  else
  {
    if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_60;
    }
    v18 = *(id *)(v14 + 32);
  }
  v19 = v18;
  v20 = swift_bridgeObjectRelease(v14);
  v21 = (_QWORD *)IdentityProofingUnorderedUIElementOption.bullets.getter(v20);

  if (!v21)
    goto LABEL_24;
LABEL_26:
  v23 = sub_100228824((uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  v16 = v3 + 16;
  swift_beginAccess(v3 + 16, v49, 1, 0);
  v24 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v23;
  v25 = swift_bridgeObjectRelease(v24);
  if (v14)
  {
    if (v15)
    {
      if (v14 < 0)
        v36 = v14;
      else
        v36 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      if (_CocoaArrayWrapper.endIndex.getter(v36))
      {
LABEL_29:
        if ((v14 & 0xC000000000000001) == 0)
        {
          if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_62;
          }
          v27 = *(id *)(v14 + 32);
LABEL_32:
          v28 = v27;
          v29 = swift_bridgeObjectRelease(v14);
          v30 = IdentityProofingUnorderedUIElementOption.assessments.getter(v29);

          if (v30)
          {
            swift_bridgeObjectRelease(v30);
            swift_beginAccess(v16, v47, 33, 0);
            sub_1004E665C(&v48, 6);
            swift_endAccess(v47);
          }
          if (!v15)
          {
LABEL_35:
            v31 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain(v14);
            if (v31)
              goto LABEL_36;
LABEL_50:
            v25 = swift_bridgeObjectRelease(v14);
            goto LABEL_51;
          }
LABEL_46:
          if (v14 < 0)
            v37 = v14;
          else
            v37 = v14 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v14);
          if (_CocoaArrayWrapper.endIndex.getter(v37))
          {
LABEL_36:
            if ((v14 & 0xC000000000000001) == 0)
            {
              if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                return;
              }
              v32 = *(id *)(v14 + 32);
              goto LABEL_39;
            }
LABEL_62:
            v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
LABEL_39:
            v33 = v32;
            v34 = swift_bridgeObjectRelease(v14);
            v35 = IdentityProofingUnorderedUIElementOption.accessibility.getter(v34);

            if (v35)
            {
              swift_bridgeObjectRelease(v35);
              swift_beginAccess(v16, v47, 33, 0);
              sub_1004E665C(&v48, 7);
              v25 = swift_endAccess(v47);
            }
            goto LABEL_51;
          }
          goto LABEL_50;
        }
LABEL_60:
        v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
        goto LABEL_32;
      }
    }
    else
    {
      v26 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v14);
      if (v26)
        goto LABEL_29;
    }
    swift_bridgeObjectRelease(v14);
    if (!v15)
      goto LABEL_35;
    goto LABEL_46;
  }
LABEL_51:
  v38 = IdentityProofingUnorderedUIElement.learnMoreURL.getter(v25);
  v40 = v39;
  v41 = (a2 & 1) != 0 && *(_QWORD *)(*(_QWORD *)v16 + 16) != 0;
  if (v5)
    v42 = v44;
  else
    v42 = 0;
  v43 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingUIConfig(0));
  IdentityProofingUIConfig.init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)(0x7374617453646566, 0xED00006E4974704FLL, v42, v5, v46, v8, v38, v40, v11, v12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    v14,
    v41);
}

uint64_t sub_10022ADC4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for IdentityProofingBiomeFedStatsUIConfigProvider()
{
  return objc_opt_self(_TtC8coreidvd45IdentityProofingBiomeFedStatsUIConfigProvider);
}

uint64_t storeEnumTagSinglePayload for BiomeFedStatsField(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_10022AE6C + 4 * byte_100526539[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10022AEA0 + 4 * byte_100526534[v4]))();
}

uint64_t sub_10022AEA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022AEA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10022AEB0);
  return result;
}

uint64_t sub_10022AEBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10022AEC4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_10022AEC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022AED0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BiomeFedStatsField()
{
  return &type metadata for BiomeFedStatsField;
}

unint64_t sub_10022AEF0()
{
  unint64_t result;

  result = qword_100639368;
  if (!qword_100639368)
  {
    result = swift_getWitnessTable(&unk_10052661C, &type metadata for BiomeFedStatsField);
    atomic_store(result, (unint64_t *)&qword_100639368);
  }
  return result;
}

unint64_t sub_10022AF34(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100601498, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

uint64_t sub_10022AF7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100228AB0(v1, a1);
}

unint64_t sub_10022AF84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1006393C8;
  if (!qword_1006393C8)
  {
    v1 = type metadata accessor for CharacterClass(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacterClass, v1);
    atomic_store(result, (unint64_t *)&qword_1006393C8);
  }
  return result;
}

unint64_t sub_10022AFCC@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  _QWORD *v2;

  return sub_100229C4C(a1, v2, a2);
}

uint64_t sub_10022AFE4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1002295D0(v1, a1);
}

uint64_t _s15PerformanceDataVwxx(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t _s15PerformanceDataVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s15PerformanceDataVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s15PerformanceDataVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s15PerformanceDataVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s15PerformanceDataVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s15PerformanceDataVMa()
{
  return &_s15PerformanceDataVN;
}

Swift::Int sub_10022B184()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10022B1D0()
{
  _BYTE *v0;
  Swift::UInt v1;

  if (*v0)
    v1 = 2;
  else
    v1 = 1;
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10022B204(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 2;
  else
    v3 = 1;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

_QWORD *sub_10022B24C@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 2)
    v2 = 1;
  else
    v2 = 2;
  if (*result == 1)
    v3 = 0;
  else
    v3 = v2;
  *a2 = v3;
  return result;
}

void sub_10022B26C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 1;
  if (*v1)
    v2 = 2;
  *a1 = v2;
}

uint64_t sub_10022B284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10022BB14();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10022B2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10022BB14();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_10022B32C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t inited;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[208];

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_1006393F8);
  inited = swift_initStackObject(v4, v23);
  *(_OWORD *)(inited + 16) = xmmword_100526670;
  strcpy((char *)(inited + 32), "numberOfKeys");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0x74654D6863746566;
  *(_QWORD *)(inited + 64) = 0xEB00000000646F68;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  strcpy((char *)(inited + 80), "fetchDuration");
  *(_WORD *)(inited + 94) = -4864;
  *(NSNumber *)(inited + 96) = Double._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0xD000000000000012;
  *(_QWORD *)(inited + 112) = 0x80000001005569D0;
  *(NSNumber *)(inited + 120) = Double._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 128) = 0xD000000000000021;
  *(_QWORD *)(inited + 136) = 0x80000001005569F0;
  *(NSNumber *)(inited + 144) = Double._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 152) = 0xD000000000000018;
  *(_QWORD *)(inited + 160) = 0x8000000100556A20;
  *(NSNumber *)(inited + 168) = Double._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 176) = 0xD000000000000013;
  *(_QWORD *)(inited + 184) = 0x80000001005569B0;
  *(_QWORD *)(inited + 192) = String._bridgeToObjectiveC()();
  v6 = sub_10011F104(inited);
  defaultLogger()(v6);
  v7 = swift_bridgeObjectRetain_n(v6, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v20 = v0;
    v12 = v11;
    v22 = v11;
    v19 = v1;
    *(_DWORD *)v10 = 136315138;
    v13 = sub_10022B9C4();
    swift_bridgeObjectRetain(v6);
    v15 = Dictionary.description.getter(v14, &type metadata for String, v13, &protocol witness table for String);
    v17 = v16;
    swift_bridgeObjectRelease(v6);
    v21 = sub_1000E3AC8(v15, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v10 + 4);
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "KRL.Analytics sendDigitalPresentmentPerformanceEvent: fields = %s", v10, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(char *, uint64_t))(v19 + 8))(v3, v20);
  }
  else
  {

    swift_bridgeObjectRelease_n(v6, 2);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return v6;
}

uint64_t sub_10022B6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t inited;
  unint64_t v12;
  uint64_t v13;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  uint64_t v33[3];
  _BYTE v34[80];
  _QWORD v35[2];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_1006393F8);
  inited = swift_initStackObject(v10, v34);
  *(_OWORD *)(inited + 16) = xmmword_1005208D0;
  *(_QWORD *)(inited + 32) = 0x656D6F6374756FLL;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0xD000000000000013;
  *(_QWORD *)(inited + 64) = 0x80000001005569B0;
  *(_QWORD *)(inited + 72) = String._bridgeToObjectiveC()();
  v12 = sub_10011F104(inited);
  v35[0] = v12;
  if ((a5 & 1) == 0)
  {
    v13 = v12;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    v33[0] = v13;
    sub_1004825A8((uint64_t)isa, 0x646F43726F727265, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
    v35[0] = v33[0];
    v12 = swift_bridgeObjectRelease(0x8000000000000000);
  }
  v16 = defaultLogger()(v12);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v30 = v6;
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v33[0] = v20;
    *(_DWORD *)v19 = 136315138;
    swift_beginAccess(v35, v32, 0, 0);
    v29 = v7;
    v21 = v35[0];
    v22 = sub_10022B9C4();
    swift_bridgeObjectRetain(v21);
    v24 = Dictionary.description.getter(v23, &type metadata for String, v22, &protocol witness table for String);
    v26 = v25;
    swift_bridgeObjectRelease(v21);
    v31 = sub_1000E3AC8(v24, v26, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v19 + 4);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "KRL.Analytics sendOutcomeEvent: fields = %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_beginAccess(v35, v33, 0, 0);
  return v35[0];
}

unint64_t sub_10022B9C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100640C20;
  if (!qword_100640C20)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100640C20);
  }
  return result;
}

uint64_t _s11FetchMethodOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10022BA4C + 4 * byte_100526685[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10022BA80 + 4 * byte_100526680[v4]))();
}

uint64_t sub_10022BA80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022BA88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10022BA90);
  return result;
}

uint64_t sub_10022BA9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10022BAA4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10022BAA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022BAB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s11FetchMethodOMa()
{
  return &_s11FetchMethodON;
}

unint64_t sub_10022BAD0()
{
  unint64_t result;

  result = qword_100639400;
  if (!qword_100639400)
  {
    result = swift_getWitnessTable(&unk_100526778, &_s11FetchMethodON);
    atomic_store(result, (unint64_t *)&qword_100639400);
  }
  return result;
}

unint64_t sub_10022BB14()
{
  unint64_t result;

  result = qword_100639408;
  if (!qword_100639408)
  {
    result = swift_getWitnessTable(&unk_100526700, &_s11FetchMethodON);
    atomic_store(result, &qword_100639408);
  }
  return result;
}

unint64_t sub_10022BB58(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  Swift::String v31;
  unint64_t v32;
  Swift::String v33;
  unint64_t v34;
  Swift::String v35;
  unint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v50 = a2;
  v49 = a1;
  v3 = type metadata accessor for DIPError.Code(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  __chkstk_darwin(v3);
  v46 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for SHA256(0);
  v5 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v6 = type metadata accessor for SHA256Digest(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v2[3];
  v11 = v2[4];
  v12 = (unint64_t)sub_10000806C(v2, v10);
  v13 = v51;
  v14 = dispatch thunk of DIPAccountManagerProtocol.primaryiCloudAccountAltDSID()(v10, v11);
  if (!v13)
  {
    v16 = v15;
    v41[1] = v9;
    v42 = v14;
    v17 = v46;
    v51 = 0;
    v41[0] = v5;
    v43 = v7;
    v44 = v6;
    v18 = sub_10041FFC0();
    v20 = v19;
    sub_1001070C4(v18, v19);
    if (v20 == 1)
      sub_1004218D4();
    v22 = sub_10041FFC0();
    v23 = v17;
    v25 = v47;
    v24 = v48;
    if (v21 >= 2)
    {
      v30 = (void *)v21;
      v52 = v49;
      v53 = v50;
      swift_bridgeObjectRetain(v50);
      v31._countAndFlagsBits = 124;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      v32 = v53;
      swift_bridgeObjectRetain(v53);
      v33._countAndFlagsBits = v42;
      v33._object = v16;
      String.append(_:)(v33);
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v16);
      v34 = v53;
      swift_bridgeObjectRetain(v53);
      v35._countAndFlagsBits = 124;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(v34);
      v36 = v53;
      swift_bridgeObjectRetain(v53);
      v37._countAndFlagsBits = v22;
      v37._object = v30;
      String.append(_:)(v37);
      sub_1001070C4(v22, (uint64_t)v30);
      swift_bridgeObjectRelease(v36);
      sub_10010BE44(v52, v53);
      v39 = v38;
      v40 = sub_100004790(&qword_100632DD8, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
      dispatch thunk of HashFunction.init()(v45, v40);
      __asm { BR              X10 }
    }
    swift_bridgeObjectRelease(v16);
    (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v23, enum case for DIPError.Code.documentReaderUnableToGetSEID(_:), v24);
    v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v26, v27, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100556A60, 0, v23, 0, v12, 0xD000000000000056, 0x8000000100556A80, 0xD000000000000014, 0x8000000100556AE0, 41);
    swift_willThrow(v28);
  }
  return v12;
}

uint64_t sub_10022C158(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v5);
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  v6 = type metadata accessor for UUID(0);
  v2[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[12] = v7;
  v2[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10022C1FC, 0, 0);
}

uint64_t sub_10022C1FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v3 = v1[12];
  v2 = v1[13];
  v4 = v1[11];
  v5 = UUID.init()(a1);
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  v1[14] = v6;
  v1[15] = v7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v9 = sub_10022BB58(v6, v8);
  v1[16] = v9;
  v1[17] = v10;
  v11 = v9;
  v12 = v10;
  v13 = defaultLogger()(v9);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, (os_log_type_t)v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v15, "Getting FairPlay provisioning info", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
  v17 = v1[10];
  v18 = v1[6];
  v19 = v1[7];

  v20 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
  v1[18] = v20;
  v21 = v20(v17, v18);
  v22 = AuditToken.wrapped.getter(v21);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v29 = (_QWORD *)swift_task_alloc(async function pointer to static FairPlayPassbookProvisioning.getProvisioningInfo(auditToken:nonce:)[1]);
  v1[19] = v29;
  *v29 = v1;
  v29[1] = sub_10022C57C;
  return static FairPlayPassbookProvisioning.getProvisioningInfo(auditToken:nonce:)(v22, v24, v26, v28, v11, v12);
}

uint64_t sub_10022C57C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 152);
  *(_QWORD *)(*v3 + 160) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_10022C6D8;
  }
  else
  {
    *(_QWORD *)(v6 + 168) = a2;
    *(_QWORD *)(v6 + 176) = a1;
    v8 = sub_10022C5F4;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10022C5F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(v1 + 168);
  v2 = *(_QWORD *)(v1 + 176);
  v4 = *(_QWORD *)(v1 + 136);
  v5 = *(void (**)(uint64_t, uint64_t))(v1 + 144);
  v6 = *(_QWORD *)(v1 + 120);
  v7 = *(_QWORD *)(v1 + 128);
  v8 = *(_QWORD *)(v1 + 72);
  v9 = *(_QWORD *)(v1 + 48);
  defaultLogger()(a1);
  v10 = (_QWORD *)swift_task_alloc(48);
  v10[2] = v2;
  v10[3] = v3;
  v10[4] = v7;
  v10[5] = v4;
  Logger.cryptoParam(_:)(sub_10022C9E0, v10);
  swift_task_dealloc(v10);
  v5(v8, v9);
  sub_100007F8C(v7, v4);
  v12 = *(_QWORD *)(v1 + 168);
  v11 = *(_QWORD *)(v1 + 176);
  v13 = *(_QWORD *)(v1 + 112);
  v15 = *(_QWORD *)(v1 + 72);
  v14 = *(_QWORD *)(v1 + 80);
  v16 = *(_QWORD *)(v1 + 64);
  swift_task_dealloc(*(_QWORD *)(v1 + 104));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 8))(v11, v12, v13, v6);
}

uint64_t sub_10022C6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_100007F8C(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 160);
  v2 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  defaultLogger()(v2);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.info.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = *(_QWORD *)(v0 + 56);
    v21 = *(_QWORD *)(v0 + 48);
    v22 = *(_QWORD *)(v0 + 64);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_DWORD *)v8 = 136315138;
    v23 = v9;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v10 = sub_100004828((uint64_t *)&unk_100633430);
    v11 = String.init<A>(describing:)(v0 + 16, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 24) = sub_1000E3AC8(v11, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "Unable to get FairPlay provisioning info (app likely does not come from App Store, TestFlight or third party marketplace): %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v22, v21);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 64);
    v16 = *(_QWORD *)(v0 + 48);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  v17 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 80);
  v19 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v0 + 8))(0, 0, 0, 0);
}

unint64_t sub_10022C900()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  Swift::String v3;
  void *v4;

  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base64EncodedString(options:)(0);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 0x3D65636E6F6E203BLL;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  v3 = Data.base64EncodedString(options:)(0);
  v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  return 0xD000000000000012;
}

unint64_t sub_10022C9E0()
{
  return sub_10022C900();
}

void destroy for FairPlayProvisioner(uint64_t a1)
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)a1);

}

uint64_t initializeWithCopy for FairPlayProvisioner(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  id v6;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = v5;
  return a1;
}

_QWORD *assignWithCopy for FairPlayProvisioner(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  sub_10000660C(a1, a2);
  v4 = (void *)a2[5];
  v5 = (void *)a1[5];
  a1[5] = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for FairPlayProvisioner(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;

  return a1;
}

ValueMetadata *type metadata accessor for FairPlayProvisioner()
{
  return &type metadata for FairPlayProvisioner;
}

uint64_t sub_10022CAE4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  Swift::String v57;
  void *object;
  Swift::String v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  Swift::String v69;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  void (*v91)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  void (*v103)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v104;
  unsigned int *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  unsigned int *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  void (*v126)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v127;
  uint64_t v128;
  int64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t DynamicType;
  uint64_t v134;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  Swift::String v148;
  void *v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  void (*v162)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  unsigned int *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  _QWORD v203[5];
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;

  v188 = a2;
  v187 = type metadata accessor for MobileDocumentElement(0);
  v186 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v185 = (char *)&v185 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = type metadata accessor for MobileDocumentType(0);
  v193 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v192 = (char *)&v185 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError.Code(0);
  v200 = *(_QWORD *)(v5 - 8);
  v201 = v5;
  __chkstk_darwin(v5);
  v202 = (char *)&v185 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale.Region(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v196 = (char *)&v185 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v185 - v11;
  v191 = type metadata accessor for ISO18013KnownNamespaces(0);
  v190 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v189 = (char *)&v185 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MobileDocumentElement.Element(0);
  v197 = *(_QWORD *)(v14 - 8);
  v198 = v14;
  v15 = __chkstk_darwin(v14);
  v195 = (char *)&v185 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v185 - v17);
  v19 = type metadata accessor for MobileDocumentType.Identifier(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v185 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1;
  MobileDocumentType.storage.getter(v21);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v23, v19);
  if ((_DWORD)v25 == enum case for MobileDocumentType.Identifier.nationalIDCard(_:))
  {
    (*(void (**)(char *, uint64_t))(v20 + 96))(v23, v19);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v23, v7);
    v24 = (uint64_t)v196;
    Locale.Region.init(stringLiteral:)(20554, 0xE200000000000000);
    v26 = sub_100004790((unint64_t *)&unk_100633500, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.Region, (uint64_t)&protocol conformance descriptor for Locale.Region);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)(v24, v12, v7, v26);
    v28 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v28(v24, v7);
    v29 = ((uint64_t (*)(char *, uint64_t))v28)(v12, v7);
    v30 = v7;
    if ((v27 & 1) == 0)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v24, v23, v7);
      v204 = 0;
      v205 = 0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v56._countAndFlagsBits = 0xD000000000000026;
      v56._object = (void *)0x800000010054C140;
      String.append(_:)(v56);
      v57._countAndFlagsBits = Locale.Region.identifier.getter();
      object = v57._object;
      String.append(_:)(v57);
      swift_bridgeObjectRelease(object);
      v59._countAndFlagsBits = 0xD000000000000013;
      v59._object = (void *)0x800000010054C170;
      String.append(_:)(v59);
      v60 = v204;
      v61 = v205;
      v62 = v202;
      (*(void (**)(char *, _QWORD, uint64_t))(v200 + 104))(v202, enum case for DIPError.Code.documentReaderUnsupportedNationalIDCardRegion(_:), v201);
      v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v64 = type metadata accessor for DIPError(0);
      v65 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v64, v65, 0, 0);
      v66 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v60, v61, 0, v62, 0, v63, 0xD000000000000082, 0x8000000100556B20, 0xD00000000000002BLL, 0x8000000100556BB0, 189);
      swift_willThrow(v66);
      v28(v24, v7);
      return v24;
    }
    v31 = (uint64_t *)v195;
    v32 = v199;
    MobileDocumentElement.storage.getter(v29);
    v34 = v197;
    v33 = v198;
    v35 = (*(uint64_t (**)(uint64_t *, uint64_t))(v197 + 88))(v31, v198);
    if (v35 == enum case for MobileDocumentElement.Element.ageAtLeast(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v34 + 96))(v31, v33);
      v36 = *v31;
      v37 = sub_100004828(&qword_100634038);
      v24 = swift_allocObject(v37, 64, 7);
      *(_OWORD *)(v24 + 16) = xmmword_10051FFB0;
      v38 = v189;
      v39 = static ISO23220_1_ElementIdentifier.namespaceIdentifier.getter();
      v40 = ISO18013KnownNamespaces.rawValue.getter(v39);
      v41 = v30;
      v43 = v42;
      (*(void (**)(char *, uint64_t))(v190 + 8))(v38, v191);
      *(_QWORD *)(v24 + 32) = v40;
      *(_QWORD *)(v24 + 40) = v43;
      *(_QWORD *)(v24 + 48) = static ISO23220_1_ElementIdentifier.ageOver(nn:)(v36);
      *(_QWORD *)(v24 + 56) = v44;
      v28((uint64_t)v23, v41);
      return v24;
    }
    if (v35 == enum case for MobileDocumentElement.Element.givenName(_:)
      || v35 == enum case for MobileDocumentElement.Element.familyName(_:))
    {
      v96 = sub_100004828(&qword_100634A78);
      v79 = (_QWORD *)swift_allocObject(v96, 72, 7);
      *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
      v82 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
      v79[7] = v82;
      v79[8] = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
      v83 = sub_100022234(v79 + 4);
      v84 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.fullName(_:);
    }
    else if (v35 == enum case for MobileDocumentElement.Element.sex(_:))
    {
      v78 = sub_100004828(&qword_100634A78);
      if ((v188 & 1) != 0)
      {
        v79 = (_QWORD *)swift_allocObject(v78, 112, 7);
        *((_OWORD *)v79 + 1) = xmmword_1005208D0;
        v80 = type metadata accessor for ISO23220_1_ElementIdentifier(0);
        v79[7] = v80;
        v79[8] = sub_100004790(&qword_100634A80, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_ElementIdentifier);
        v81 = sub_100022234(v79 + 4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v80 - 8) + 104))(v81, enum case for ISO23220_1_ElementIdentifier.sex(_:), v80);
        v82 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
        v79[12] = v82;
        v79[13] = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
        v83 = sub_100022234(v79 + 9);
        v84 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.sex(_:);
      }
      else
      {
        v79 = (_QWORD *)swift_allocObject(v78, 72, 7);
        *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
        v82 = type metadata accessor for ISO23220_1_ElementIdentifier(0);
        v79[7] = v82;
        v79[8] = sub_100004790(&qword_100634A80, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_ElementIdentifier);
        v83 = sub_100022234(v79 + 4);
        v84 = (unsigned int *)&enum case for ISO23220_1_ElementIdentifier.sex(_:);
      }
    }
    else if (v35 == enum case for MobileDocumentElement.Element.portrait(_:))
    {
      v106 = sub_100004828(&qword_100634A78);
      v79 = (_QWORD *)swift_allocObject(v106, 72, 7);
      *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
      v82 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
      v79[7] = v82;
      v79[8] = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
      v83 = sub_100022234(v79 + 4);
      v84 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.portrait(_:);
    }
    else if (v35 == enum case for MobileDocumentElement.Element.age(_:))
    {
      v115 = sub_100004828(&qword_100634A78);
      v79 = (_QWORD *)swift_allocObject(v115, 72, 7);
      *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
      v82 = type metadata accessor for ISO23220_1_ElementIdentifier(0);
      v79[7] = v82;
      v79[8] = sub_100004790(&qword_100634A80, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_ElementIdentifier);
      v83 = sub_100022234(v79 + 4);
      v84 = (unsigned int *)&enum case for ISO23220_1_ElementIdentifier.ageInYears(_:);
    }
    else
    {
      if (v35 != enum case for MobileDocumentElement.Element.dateOfBirth(_:))
      {
        if (v35 == enum case for MobileDocumentElement.Element.address(_:))
        {
          if ((v188 & 1) != 0)
          {
            v121 = sub_100004828(&qword_100634A78);
            v79 = (_QWORD *)swift_allocObject(v121, 112, 7);
            *((_OWORD *)v79 + 1) = xmmword_1005208D0;
            v122 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
            v79[7] = v122;
            v123 = v30;
            v124 = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
            v79[8] = v124;
            v125 = sub_100022234(v79 + 4);
            v126 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v122 - 8) + 104);
            v126(v125, enum case for ISO23220_1_Japan_ElementIdentifier.localGovCode(_:), v122);
            v79[12] = v122;
            v79[13] = v124;
            v30 = v123;
            v127 = sub_100022234(v79 + 9);
            v126(v127, enum case for ISO23220_1_Japan_ElementIdentifier.residentAddress(_:), v122);
          }
          else
          {
            v79 = _swiftEmptyArrayStorage;
          }
        }
        else
        {
          v79 = _swiftEmptyArrayStorage;
          if (v35 != enum case for MobileDocumentElement.Element.nationality(_:)
            && v35 != enum case for MobileDocumentElement.Element.issuingAuthority(_:)
            && v35 != enum case for MobileDocumentElement.Element.drivingPrivileges(_:)
            && v35 != enum case for MobileDocumentElement.Element.documentDHSComplianceStatus(_:)
            && v35 != enum case for MobileDocumentElement.Element.documentNumber(_:)
            && v35 != enum case for MobileDocumentElement.Element.documentIssueDate(_:)
            && v35 != enum case for MobileDocumentElement.Element.documentExpirationDate(_:))
          {
            (*(void (**)(uint64_t *, uint64_t))(v34 + 8))(v31, v33);
          }
        }
        goto LABEL_21;
      }
      v117 = sub_100004828(&qword_100634A78);
      if ((v188 & 1) != 0)
      {
        v79 = (_QWORD *)swift_allocObject(v117, 112, 7);
        *((_OWORD *)v79 + 1) = xmmword_1005208D0;
        v118 = type metadata accessor for ISO23220_1_ElementIdentifier(0);
        v79[7] = v118;
        v79[8] = sub_100004790(&qword_100634A80, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_ElementIdentifier);
        v119 = sub_100022234(v79 + 4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v118 - 8) + 104))(v119, enum case for ISO23220_1_ElementIdentifier.birthDate(_:), v118);
        v82 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
        v79[12] = v82;
        v79[13] = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
        v83 = sub_100022234(v79 + 9);
        v84 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.birthDate(_:);
      }
      else
      {
        v79 = (_QWORD *)swift_allocObject(v117, 72, 7);
        *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
        v82 = type metadata accessor for ISO23220_1_ElementIdentifier(0);
        v79[7] = v82;
        v79[8] = sub_100004790(&qword_100634A80, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_ElementIdentifier);
        v83 = sub_100022234(v79 + 4);
        v84 = (unsigned int *)&enum case for ISO23220_1_ElementIdentifier.birthDate(_:);
      }
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v82 - 8) + 104))(v83, *v84, v82);
LABEL_21:
    v28((uint64_t)v23, v30);
    goto LABEL_48;
  }
  if ((_DWORD)v25 != enum case for MobileDocumentType.Identifier.driversLicense(_:))
  {
    v204 = 0;
    v205 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease(v205);
    v204 = 0xD00000000000001CLL;
    v205 = 0x8000000100556B00;
    v67 = v192;
    v68 = v194;
    (*(void (**)(char *, uint64_t, uint64_t))(v193 + 16))(v192, v24, v194);
    v69._countAndFlagsBits = String.init<A>(describing:)(v67, v68);
    v70 = v69._object;
    String.append(_:)(v69);
    swift_bridgeObjectRelease(v70);
    v71 = v204;
    v72 = v205;
    v73 = v202;
    (*(void (**)(char *, _QWORD, uint64_t))(v200 + 104))(v202, enum case for DIPError.Code.documentReaderUnknownDocumentType(_:), v201);
    v74 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v75 = type metadata accessor for DIPError(0);
    v76 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v75, v76, 0, 0);
    v77 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v71, v72, 0, v73, 0, v74, 0xD000000000000082, 0x8000000100556B20, 0xD00000000000002BLL, 0x8000000100556BB0, 191);
    swift_willThrow(v77);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    return v24;
  }
  v32 = v199;
  MobileDocumentElement.storage.getter(v25);
  v46 = v197;
  v45 = v198;
  v47 = (*(uint64_t (**)(uint64_t *, uint64_t))(v197 + 88))(v18, v198);
  if (v47 == enum case for MobileDocumentElement.Element.ageAtLeast(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v46 + 96))(v18, v45);
    v48 = *v18;
    v49 = sub_100004828(&qword_100634038);
    v24 = swift_allocObject(v49, 64, 7);
    *(_OWORD *)(v24 + 16) = xmmword_10051FFB0;
    v50 = v189;
    v51 = static ISO18013_5_1_ElementIdentifier.namespaceIdentifier.getter();
    v52 = ISO18013KnownNamespaces.rawValue.getter(v51);
    v54 = v53;
    (*(void (**)(char *, uint64_t))(v190 + 8))(v50, v191);
    *(_QWORD *)(v24 + 32) = v52;
    *(_QWORD *)(v24 + 40) = v54;
    *(_QWORD *)(v24 + 48) = static ISO18013_5_1_ElementIdentifier.ageOver(nn:)(v48);
    *(_QWORD *)(v24 + 56) = v55;
    return v24;
  }
  if (v47 == enum case for MobileDocumentElement.Element.givenName(_:))
  {
    v85 = sub_100004828(&qword_100634A78);
    if ((v188 & 1) != 0)
    {
      v79 = (_QWORD *)swift_allocObject(v85, 232, 7);
      *((_OWORD *)v79 + 1) = xmmword_1005208C0;
      v86 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
      v79[7] = v86;
      v79[8] = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
      v87 = sub_100022234(v79 + 4);
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v86 - 8) + 104))(v87, enum case for ISO18013_5_1_ElementIdentifier.givenName(_:), v86);
      v88 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier(0);
      v79[12] = v88;
      v89 = sub_100004790(&qword_100639420, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier);
      v79[13] = v89;
      v90 = sub_100022234(v79 + 9);
      v91 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v88 - 8) + 104);
      v91(v90, enum case for ISO18013_AAMVA_ElementIdentifier.givenNameTruncation(_:), v88);
      v79[17] = v88;
      v79[18] = v89;
      v92 = sub_100022234(v79 + 14);
      v91(v92, enum case for ISO18013_AAMVA_ElementIdentifier.akaGivenName(_:), v88);
      v79[22] = v88;
      v79[23] = v89;
      v93 = sub_100022234(v79 + 19);
      v91(v93, enum case for ISO18013_AAMVA_ElementIdentifier.nameSuffix(_:), v88);
      v79[27] = v88;
      v79[28] = v89;
      v94 = sub_100022234(v79 + 24);
      v95 = (unsigned int *)&enum case for ISO18013_AAMVA_ElementIdentifier.akaSuffix(_:);
LABEL_18:
      v91(v94, *v95, v88);
      goto LABEL_48;
    }
    v79 = (_QWORD *)swift_allocObject(v85, 112, 7);
    *((_OWORD *)v79 + 1) = xmmword_1005208D0;
    v107 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v79[7] = v107;
    v79[8] = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
    v108 = sub_100022234(v79 + 4);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v107 - 8) + 104))(v108, enum case for ISO18013_5_1_ElementIdentifier.givenName(_:), v107);
    v109 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier(0);
    v79[12] = v109;
    v79[13] = sub_100004790(&qword_100639420, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier);
    v110 = sub_100022234(v79 + 9);
    v111 = (unsigned int *)&enum case for ISO18013_AAMVA_ElementIdentifier.nameSuffix(_:);
    goto LABEL_47;
  }
  if (v47 == enum case for MobileDocumentElement.Element.familyName(_:))
  {
    v97 = sub_100004828(&qword_100634A78);
    if ((v188 & 1) != 0)
    {
      v79 = (_QWORD *)swift_allocObject(v97, 152, 7);
      *((_OWORD *)v79 + 1) = xmmword_100524440;
      v98 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
      v79[7] = v98;
      v79[8] = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
      v99 = sub_100022234(v79 + 4);
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v98 - 8) + 104))(v99, enum case for ISO18013_5_1_ElementIdentifier.familyName(_:), v98);
      v100 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier(0);
      v79[12] = v100;
      v101 = sub_100004790(&qword_100639420, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier);
      v79[13] = v101;
      v102 = sub_100022234(v79 + 9);
      v103 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v100 - 8) + 104);
      v103(v102, enum case for ISO18013_AAMVA_ElementIdentifier.familyNameTruncation(_:), v100);
      v79[17] = v100;
      v79[18] = v101;
      v104 = sub_100022234(v79 + 14);
      v105 = (unsigned int *)&enum case for ISO18013_AAMVA_ElementIdentifier.akaFamilyName(_:);
LABEL_25:
      v103(v104, *v105, v100);
      goto LABEL_48;
    }
    v79 = (_QWORD *)swift_allocObject(v97, 72, 7);
    *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
    v109 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v79[7] = v109;
    v79[8] = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
    v110 = sub_100022234(v79 + 4);
    v111 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.familyName(_:);
LABEL_47:
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v109 - 8) + 104))(v110, *v111, v109);
    goto LABEL_48;
  }
  if (v47 == enum case for MobileDocumentElement.Element.sex(_:))
  {
    v112 = sub_100004828(&qword_100634A78);
    v79 = (_QWORD *)swift_allocObject(v112, 112, 7);
    *((_OWORD *)v79 + 1) = xmmword_1005208D0;
    v113 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v79[7] = v113;
    v79[8] = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
    v114 = sub_100022234(v79 + 4);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v113 - 8) + 104))(v114, enum case for ISO18013_5_1_ElementIdentifier.sex(_:), v113);
    v109 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier(0);
    v79[12] = v109;
    v79[13] = sub_100004790(&qword_100639420, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier);
    v110 = sub_100022234(v79 + 9);
    v111 = (unsigned int *)&enum case for ISO18013_AAMVA_ElementIdentifier.sex(_:);
    goto LABEL_47;
  }
  if (v47 == enum case for MobileDocumentElement.Element.portrait(_:))
  {
    v116 = sub_100004828(&qword_100634A78);
    v79 = (_QWORD *)swift_allocObject(v116, 72, 7);
    *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
    v109 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v79[7] = v109;
    v79[8] = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
    v110 = sub_100022234(v79 + 4);
    v111 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.portrait(_:);
    goto LABEL_47;
  }
  if (v47 == enum case for MobileDocumentElement.Element.age(_:))
  {
    v120 = sub_100004828(&qword_100634A78);
    v79 = (_QWORD *)swift_allocObject(v120, 72, 7);
    *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
    v109 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v79[7] = v109;
    v79[8] = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
    v110 = sub_100022234(v79 + 4);
    v111 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:);
    goto LABEL_47;
  }
  if (v47 == enum case for MobileDocumentElement.Element.dateOfBirth(_:))
  {
    v128 = sub_100004828(&qword_100634A78);
    v79 = (_QWORD *)swift_allocObject(v128, 72, 7);
    *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
    v109 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v79[7] = v109;
    v79[8] = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
    v110 = sub_100022234(v79 + 4);
    v111 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.birthDate(_:);
    goto LABEL_47;
  }
  if (v47 == enum case for MobileDocumentElement.Element.address(_:))
  {
    v158 = sub_100004828(&qword_100634A78);
    v79 = (_QWORD *)swift_allocObject(v158, 232, 7);
    *((_OWORD *)v79 + 1) = xmmword_1005208C0;
    v159 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v79[7] = v159;
    v160 = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
    v79[8] = v160;
    v161 = sub_100022234(v79 + 4);
    v162 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v159 - 8) + 104);
    v162(v161, enum case for ISO18013_5_1_ElementIdentifier.residentAddress(_:), v159);
    v79[12] = v159;
    v79[13] = v160;
    v163 = sub_100022234(v79 + 9);
    v162(v163, enum case for ISO18013_5_1_ElementIdentifier.residentCity(_:), v159);
    v79[17] = v159;
    v79[18] = v160;
    v164 = sub_100022234(v79 + 14);
    v162(v164, enum case for ISO18013_5_1_ElementIdentifier.residentState(_:), v159);
    v79[22] = v159;
    v79[23] = v160;
    v165 = sub_100022234(v79 + 19);
    v162(v165, enum case for ISO18013_5_1_ElementIdentifier.residentPostalCode(_:), v159);
    v79[27] = v159;
    v79[28] = v160;
    v166 = sub_100022234(v79 + 24);
    v162(v166, enum case for ISO18013_5_1_ElementIdentifier.residentCountry(_:), v159);
    goto LABEL_48;
  }
  if (v47 == enum case for MobileDocumentElement.Element.nationality(_:))
  {
    v79 = _swiftEmptyArrayStorage;
    goto LABEL_48;
  }
  if (v47 == enum case for MobileDocumentElement.Element.issuingAuthority(_:))
  {
    v167 = sub_100004828(&qword_100634A78);
    if ((v188 & 1) != 0)
    {
      v79 = (_QWORD *)swift_allocObject(v167, 192, 7);
      *((_OWORD *)v79 + 1) = xmmword_1005208B0;
      v88 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
      v79[7] = v88;
      v168 = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
      v79[8] = v168;
      v169 = sub_100022234(v79 + 4);
      v91 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v88 - 8) + 104);
      v91(v169, enum case for ISO18013_5_1_ElementIdentifier.issuingAuthority(_:), v88);
      v79[12] = v88;
      v79[13] = v168;
      v170 = sub_100022234(v79 + 9);
      v91(v170, enum case for ISO18013_5_1_ElementIdentifier.issuingJurisdiction(_:), v88);
      v79[17] = v88;
      v79[18] = v168;
      v171 = sub_100022234(v79 + 14);
      v91(v171, enum case for ISO18013_5_1_ElementIdentifier.issuingCountry(_:), v88);
      v79[22] = v88;
      v79[23] = v168;
      v94 = sub_100022234(v79 + 19);
      v95 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.unDistinguishingSign(_:);
      goto LABEL_18;
    }
    v79 = (_QWORD *)swift_allocObject(v167, 152, 7);
    *((_OWORD *)v79 + 1) = xmmword_100524440;
    v100 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v79[7] = v100;
    v175 = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
    v79[8] = v175;
    v176 = sub_100022234(v79 + 4);
    v103 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v100 - 8) + 104);
    v103(v176, enum case for ISO18013_5_1_ElementIdentifier.issuingAuthority(_:), v100);
    v79[12] = v100;
    v79[13] = v175;
    v177 = sub_100022234(v79 + 9);
    v103(v177, enum case for ISO18013_5_1_ElementIdentifier.issuingJurisdiction(_:), v100);
    v79[17] = v100;
    v79[18] = v175;
    v104 = sub_100022234(v79 + 14);
    v105 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.issuingCountry(_:);
    goto LABEL_25;
  }
  if (v47 == enum case for MobileDocumentElement.Element.drivingPrivileges(_:))
  {
    v172 = sub_100004828(&qword_100634A78);
    v79 = (_QWORD *)swift_allocObject(v172, 112, 7);
    *((_OWORD *)v79 + 1) = xmmword_1005208D0;
    v173 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v79[7] = v173;
    v79[8] = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
    v174 = sub_100022234(v79 + 4);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v173 - 8) + 104))(v174, enum case for ISO18013_5_1_ElementIdentifier.drivingPrivileges(_:), v173);
    v109 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier(0);
    v79[12] = v109;
    v79[13] = sub_100004790(&qword_100639420, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier);
    v110 = sub_100022234(v79 + 9);
    v111 = (unsigned int *)&enum case for ISO18013_AAMVA_ElementIdentifier.domesticDrivingPrivileges(_:);
    goto LABEL_47;
  }
  if (v47 == enum case for MobileDocumentElement.Element.documentDHSComplianceStatus(_:))
  {
    v178 = sub_100004828(&qword_100634A78);
    v79 = (_QWORD *)swift_allocObject(v178, 72, 7);
    *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
    v109 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier(0);
    v79[7] = v109;
    v79[8] = sub_100004790(&qword_100639420, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier);
    v110 = sub_100022234(v79 + 4);
    v111 = (unsigned int *)&enum case for ISO18013_AAMVA_ElementIdentifier.dhsCompliance(_:);
    goto LABEL_47;
  }
  if (v47 == enum case for MobileDocumentElement.Element.documentNumber(_:))
  {
    v179 = sub_100004828(&qword_100634A78);
    v79 = (_QWORD *)swift_allocObject(v179, 72, 7);
    *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
    v180 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v79[7] = v180;
    v79[8] = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
    v181 = sub_100022234(v79 + 4);
    v182 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.documentNumber(_:);
LABEL_86:
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v180 - 8) + 104))(v181, *v182, v180);
    v32 = v199;
    goto LABEL_48;
  }
  if (v47 == enum case for MobileDocumentElement.Element.documentIssueDate(_:))
  {
    v183 = sub_100004828(&qword_100634A78);
    v79 = (_QWORD *)swift_allocObject(v183, 72, 7);
    *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
    v180 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v79[7] = v180;
    v79[8] = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
    v181 = sub_100022234(v79 + 4);
    v182 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.issueDate(_:);
    goto LABEL_86;
  }
  if (v47 == enum case for MobileDocumentElement.Element.documentExpirationDate(_:))
  {
    v184 = sub_100004828(&qword_100634A78);
    v79 = (_QWORD *)swift_allocObject(v184, 72, 7);
    *((_OWORD *)v79 + 1) = xmmword_10051FFB0;
    v180 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v79[7] = v180;
    v79[8] = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
    v181 = sub_100022234(v79 + 4);
    v182 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.expiryDate(_:);
    goto LABEL_86;
  }
  (*(void (**)(uint64_t *, uint64_t))(v197 + 8))(v18, v198);
  v79 = _swiftEmptyArrayStorage;
  v32 = v199;
LABEL_48:
  v129 = v79[2];
  if (v129)
  {
    v212 = _swiftEmptyArrayStorage;
    sub_1000E4258(0, v129, 0);
    v202 = (char *)v79;
    v130 = (uint64_t)(v79 + 4);
    do
    {
      sub_10002581C(v130, (uint64_t)&v204);
      v131 = v206;
      v132 = sub_10000806C(&v204, v206);
      DynamicType = swift_getDynamicType(v132, v131, 1);
      v134 = v207;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v207, DynamicType, &protocol requirements base descriptor for MobileDocumentElementIdentifier, &associated type descriptor for MobileDocumentElementIdentifier.NamespaceIdentifier);
      v203[3] = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v134, DynamicType, AssociatedTypeWitness, &protocol requirements base descriptor for MobileDocumentElementIdentifier, &associated conformance descriptor for MobileDocumentElementIdentifier.MobileDocumentElementIdentifier.NamespaceIdentifier: RawRepresentable);
      v203[4] = AssociatedConformanceWitness;
      sub_100022234(v203);
      dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(DynamicType, v134);
      dispatch thunk of RawRepresentable.rawValue.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
      v138 = v206;
      v137 = v207;
      sub_10000806C(&v204, v206);
      dispatch thunk of RawRepresentable.rawValue.getter(v138, *(_QWORD *)(v137 + 16));
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v203);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v204);
      v139 = v210;
      v140 = v211;
      v142 = v208;
      v141 = v209;
      v24 = (uint64_t)v212;
      if ((swift_isUniquelyReferenced_nonNull_native(v212) & 1) == 0)
      {
        sub_1000E4258(0, *(_QWORD *)(v24 + 16) + 1, 1);
        v24 = (uint64_t)v212;
      }
      v144 = *(_QWORD *)(v24 + 16);
      v143 = *(_QWORD *)(v24 + 24);
      if (v144 >= v143 >> 1)
      {
        sub_1000E4258(v143 > 1, v144 + 1, 1);
        v24 = (uint64_t)v212;
      }
      *(_QWORD *)(v24 + 16) = v144 + 1;
      v145 = (_QWORD *)(v24 + 32 * v144);
      v145[4] = v139;
      v145[5] = v140;
      v145[6] = v142;
      v145[7] = v141;
      v130 += 40;
      --v129;
    }
    while (v129);
    swift_bridgeObjectRelease(v202);
  }
  else
  {
    swift_bridgeObjectRelease(v79);
    v204 = 0;
    v205 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease(v205);
    v204 = 0xD00000000000001ALL;
    v205 = 0x8000000100556BE0;
    v146 = v185;
    v147 = v187;
    (*(void (**)(char *, uint64_t, uint64_t))(v186 + 16))(v185, v32, v187);
    v148._countAndFlagsBits = String.init<A>(describing:)(v146, v147);
    v149 = v148._object;
    String.append(_:)(v148);
    swift_bridgeObjectRelease(v149);
    v150 = v204;
    v151 = v205;
    v152 = v202;
    (*(void (**)(char *, _QWORD, uint64_t))(v200 + 104))(v202, enum case for DIPError.Code.documentReaderUnknownDocumentElement(_:), v201);
    v153 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v154 = type metadata accessor for DIPError(0);
    v155 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v154, v155, 0, 0);
    v156 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v150, v151, 0, v152, 0, v153, 0xD000000000000082, 0x8000000100556B20, 0xD00000000000002BLL, 0x8000000100556BB0, 195);
    swift_willThrow(v156);
  }
  return v24;
}

uint64_t sub_10022E7CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10022E82C, v0, 0);
}

uint64_t sub_10022E82C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 272);
  *(_QWORD *)(v0 + 48) = v1;
  if (v1)
  {
    v2 = async function pointer to Task.value.getter[1];
    swift_retain(v1);
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 56) = v3;
    v4 = sub_100004828((uint64_t *)&unk_100633430);
    *v3 = v0;
    v3[1] = sub_10022E9E4;
    return Task.value.getter(v0 + 72, v1, &type metadata for Bool, v4, &protocol self-conformance witness table for Error);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 24));
    v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v8 = type metadata accessor for DIPError(0);
    v9 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v8, v9, 0, 0);
    v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000046, 0x8000000100556D40, 0, v6, 0, v7, 0xD00000000000007CLL, 0x8000000100556CA0, 0x64696C61567369, 0xE700000000000000, 43);
    swift_willThrow(v10);
    swift_task_dealloc(*(_QWORD *)(v0 + 40));
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_10022E9E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10022EA8C;
  else
    v4 = sub_10022EA48;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 16), 0);
}

uint64_t sub_10022EA48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  v2 = *(unsigned __int8 *)(v0 + 72);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_10022EA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 24));
  swift_errorRetain(v1);
  v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v4, 0xD00000000000007CLL, 0x8000000100556CA0, 0x64696C61567369, 0xE700000000000000, 48);
  swift_willThrow(v7);
  swift_errorRelease(v1);
  swift_release(v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10022EBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4[11] = a1;
  v4[12] = a4;
  v6 = type metadata accessor for DIPError.Code(0);
  v4[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[14] = v7;
  v4[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v4[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[17] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[18] = swift_task_alloc(v10);
  v4[19] = swift_task_alloc(v10);
  v4[20] = swift_task_alloc(v10);
  return swift_task_switch(sub_10022EC68, a4, 0);
}

uint64_t sub_10022EC68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1[12];
  defaultLogger()(a1);
  v3 = swift_retain(v2);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.info.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v19 = v1[17];
    v20 = v1[16];
    v21 = v1[20];
    v7 = v1[12];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v22 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = *(_QWORD *)(v7 + 192);
    v11 = *(_QWORD *)(v7 + 200);
    swift_bridgeObjectRetain(v11);
    v1[10] = sub_1000E3AC8(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 10, v1 + 11, v8 + 4);
    swift_bridgeObjectRelease(v11);
    swift_release(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "Validating credential for %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v12 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v12(v21, v20);
  }
  else
  {
    v13 = v1[20];
    v14 = v1[16];
    v15 = v1[17];
    swift_release(v1[12]);

    v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  v1[21] = v12;
  v16 = sub_10000806C((_QWORD *)(v1[12] + 152), *(_QWORD *)(v1[12] + 176));
  v17 = *v16;
  v1[22] = *v16;
  return swift_task_switch(sub_10022EE3C, v17, 0);
}

uint64_t sub_10022EE3C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10000806C((_QWORD *)(*(_QWORD *)(v0 + 176) + 152), *(_QWORD *)(*(_QWORD *)(v0 + 176) + 176));
  v1 = (_QWORD *)swift_task_alloc(dword_10063EA64);
  *(_QWORD *)(v0 + 184) = v1;
  *v1 = v0;
  v1[1] = sub_10022EE94;
  return sub_1003A0F34();
}

uint64_t sub_10022EE94(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_BYTE *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10022EEF4, v3, 0);
}

uint64_t sub_10022EEF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;

  v2 = *(_QWORD *)(v1 + 96);
  if (*(_BYTE *)(v1 + 224) == 1)
  {
    defaultLogger()(a1);
    v3 = swift_retain(v2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(void (**)(uint64_t, uint64_t))(v1 + 168);
    v8 = *(_QWORD *)(v1 + 152);
    v9 = *(_QWORD *)(v1 + 128);
    v10 = *(_QWORD *)(v1 + 96);
    if (v6)
    {
      v33 = *(void (**)(uint64_t, uint64_t))(v1 + 168);
      v31 = *(_QWORD *)(v1 + 128);
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v35 = v12;
      *(_DWORD *)v11 = 136315138;
      v14 = *(_QWORD *)(v10 + 192);
      v13 = *(_QWORD *)(v10 + 200);
      swift_bridgeObjectRetain(v13);
      *(_QWORD *)(v1 + 72) = sub_1000E3AC8(v14, v13, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v11 + 4);
      swift_bridgeObjectRelease(v13);
      swift_release(v10);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Validating credential %s using KRL", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      v33(v8, v31);
    }
    else
    {
      swift_release(*(_QWORD *)(v1 + 96));

      v7(v8, v9);
    }
    v27 = (_QWORD *)swift_task_alloc(dword_100639464);
    *(_QWORD *)(v1 + 192) = v27;
    *v27 = v1;
    v27[1] = sub_10022F2C4;
    return sub_1002303D8();
  }
  else
  {
    defaultLogger()(a1);
    v15 = swift_retain(v2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(void (**)(uint64_t, uint64_t))(v1 + 168);
    v20 = *(_QWORD *)(v1 + 144);
    v21 = *(_QWORD *)(v1 + 128);
    v22 = *(_QWORD *)(v1 + 96);
    if (v18)
    {
      v34 = *(void (**)(uint64_t, uint64_t))(v1 + 168);
      v32 = *(_QWORD *)(v1 + 128);
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v35 = v24;
      *(_DWORD *)v23 = 136315138;
      v26 = *(_QWORD *)(v22 + 192);
      v25 = *(_QWORD *)(v22 + 200);
      swift_bridgeObjectRetain(v25);
      *(_QWORD *)(v1 + 64) = sub_1000E3AC8(v26, v25, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v23 + 4);
      swift_bridgeObjectRelease(v25);
      swift_release(v22);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "KRL is disabled; falling back to claim validity to validate %s",
        v23,
        0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      v34(v20, v32);
    }
    else
    {
      swift_release(*(_QWORD *)(v1 + 96));

      v19(v20, v21);
    }
    if (qword_10062F628 != -1)
      swift_once(&qword_10062F628, sub_1004FE0D0);
    v29 = type metadata accessor for Milestone(0);
    sub_1000352C0(v29, (uint64_t)qword_100670950);
    Milestone.log()();
    v30 = (_QWORD *)swift_task_alloc(dword_10063945C);
    *(_QWORD *)(v1 + 208) = v30;
    *v30 = v1;
    v30[1] = sub_10022F39C;
    return sub_10022F734();
  }
}

uint64_t sub_10022F2C4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  *(_QWORD *)(v3 + 32) = v1;
  *(_BYTE *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 16) = v2;
  v4 = *(_QWORD *)(v3 + 192);
  *(_QWORD *)(v3 + 200) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10022F5D4;
  else
    v5 = sub_10022F334;
  return swift_task_switch(v5, *(_QWORD *)(v3 + 96), 0);
}

uint64_t sub_10022F334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  **(_BYTE **)(v0 + 88) = *(_BYTE *)(v0 + 24);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022F39C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  *(_QWORD *)(v3 + 56) = v1;
  *(_BYTE *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 40) = v2;
  v4 = *(_QWORD *)(v3 + 208);
  *(_QWORD *)(v3 + 216) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10022F474;
  else
    v5 = sub_10022F40C;
  return swift_task_switch(v5, *(_QWORD *)(v3 + 96), 0);
}

uint64_t sub_10022F40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  **(_BYTE **)(v0 + 88) = *(_BYTE *)(v0 + 48);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022F474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 104));
  swift_errorRetain(v1);
  v6 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000028, 0x8000000100556D90, v1, v5, 0, v6, 0xD00000000000007CLL, 0x8000000100556CA0, 0xD00000000000001BLL, 0x8000000100556DC0, 81);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022F5D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 104));
  swift_errorRetain(v1);
  v6 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000028, 0x8000000100556D90, v1, v5, 0, v6, 0xD00000000000007CLL, 0x8000000100556CA0, 0xD00000000000001BLL, 0x8000000100556DC0, 81);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022F734()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[6] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v4);
  v1[10] = swift_task_alloc(v4);
  v1[11] = swift_task_alloc(v4);
  v1[12] = swift_task_alloc(v4);
  v1[13] = swift_task_alloc(v4);
  return swift_task_switch(sub_10022F7C8, v0, 0);
}

uint64_t sub_10022F7C8()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10000806C((_QWORD *)(*(_QWORD *)(v0 + 48) + 112), *(_QWORD *)(*(_QWORD *)(v0 + 48) + 136));
  v1 = (_QWORD *)swift_task_alloc(dword_100640DB4);
  *(_QWORD *)(v0 + 112) = v1;
  *v1 = v0;
  v1[1] = sub_10022F820;
  return sub_100427EB0();
}

uint64_t sub_10022F820(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    v8 = *(_QWORD *)(v4 + 96);
    v7 = *(_QWORD *)(v4 + 104);
    v10 = *(_QWORD *)(v4 + 80);
    v9 = *(_QWORD *)(v4 + 88);
    v11 = *(_QWORD *)(v4 + 72);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(_QWORD))(v6 + 8))(0);
  }
  else
  {
    v13 = *(_QWORD *)(v4 + 48);
    *(_BYTE *)(v4 + 168) = a1 & 1;
    return swift_task_switch(sub_10022F8E0, v13, 0);
  }
}

uint64_t sub_10022F8E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_BYTE *)(v1 + 168) == 1)
  {
    v2 = *(_QWORD **)(v1 + 48);
    sub_10000806C(v2 + 14, v2[17]);
    v3 = v2[24];
    *(_QWORD *)(v1 + 120) = v3;
    v4 = v2[25];
    *(_QWORD *)(v1 + 128) = v4;
    v5 = (_QWORD *)swift_task_alloc(dword_100640DD4);
    *(_QWORD *)(v1 + 136) = v5;
    *v5 = v1;
    v5[1] = sub_10022FA44;
    return sub_10042C4C4(v3, v4);
  }
  else
  {
    v7 = defaultLogger()(a1);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "CV is not enabled; not performing check", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }
    v12 = *(_QWORD *)(v1 + 64);
    v11 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 56);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    v14 = *(_QWORD *)(v1 + 96);
    v16 = *(_QWORD *)(v1 + 80);
    v15 = *(_QWORD *)(v1 + 88);
    v17 = *(_QWORD *)(v1 + 72);
    swift_task_dealloc(*(_QWORD *)(v1 + 104));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(1);
  }
}

uint64_t sub_10022FA44(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 136);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    v8 = *(_QWORD *)(v4 + 96);
    v7 = *(_QWORD *)(v4 + 104);
    v10 = *(_QWORD *)(v4 + 80);
    v9 = *(_QWORD *)(v4 + 88);
    v11 = *(_QWORD *)(v4 + 72);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(_QWORD))(v6 + 8))(0);
  }
  else
  {
    v13 = *(_QWORD *)(v4 + 48);
    *(_BYTE *)(v4 + 169) = a1 & 1;
    return swift_task_switch(sub_10022FB04, v13, 0);
  }
}

uint64_t sub_10022FB04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  unint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)(v1 + 48);
  if (*(_BYTE *)(v1 + 169) == 1)
  {
    defaultLogger()(a1);
    v3 = swift_retain(v2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = *(_QWORD *)(v1 + 128);
      v32 = *(_QWORD *)(v1 + 64);
      v34 = *(_QWORD *)(v1 + 56);
      v36 = *(_QWORD *)(v1 + 104);
      v29 = *(_QWORD *)(v1 + 120);
      v30 = *(_QWORD *)(v1 + 48);
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v38 = v8;
      *(_DWORD *)v7 = 136315138;
      swift_bridgeObjectRetain(v6);
      *(_QWORD *)(v1 + 40) = sub_1000E3AC8(v29, v6, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v7 + 4);
      swift_bridgeObjectRelease(v6);
      swift_release(v30);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Credential %s has a recent cv success", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v36, v34);
    }
    else
    {
      v17 = *(_QWORD *)(v1 + 104);
      v18 = *(_QWORD *)(v1 + 56);
      v19 = *(_QWORD *)(v1 + 64);
      swift_release(*(_QWORD *)(v1 + 48));

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    }
    v20 = *(_QWORD *)(v1 + 96);
    v22 = *(_QWORD *)(v1 + 80);
    v21 = *(_QWORD *)(v1 + 88);
    v23 = *(_QWORD *)(v1 + 72);
    swift_task_dealloc(*(_QWORD *)(v1 + 104));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(1);
  }
  else
  {
    defaultLogger()(a1);
    v9 = swift_retain(v2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v13 = *(_QWORD *)(v1 + 120);
      v12 = *(_QWORD *)(v1 + 128);
      v33 = *(_QWORD *)(v1 + 64);
      v35 = *(_QWORD *)(v1 + 56);
      v37 = *(_QWORD *)(v1 + 96);
      v31 = *(_QWORD *)(v1 + 48);
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v38 = v15;
      *(_DWORD *)v14 = 136315138;
      swift_bridgeObjectRetain(v12);
      *(_QWORD *)(v1 + 32) = sub_1000E3AC8(v13, v12, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v14 + 4);
      swift_bridgeObjectRelease(v12);
      swift_release(v31);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No recent cv calls for credential %s, triggering cv activity", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      v16 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v16(v37, v35);
    }
    else
    {
      v25 = *(_QWORD *)(v1 + 96);
      v26 = *(_QWORD *)(v1 + 56);
      v27 = *(_QWORD *)(v1 + 64);
      swift_release(*(_QWORD *)(v1 + 48));

      v16 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v16(v25, v26);
    }
    *(_QWORD *)(v1 + 144) = v16;
    sub_10000806C((_QWORD *)(*(_QWORD *)(v1 + 48) + 112), *(_QWORD *)(*(_QWORD *)(v1 + 48) + 136));
    v28 = (_QWORD *)swift_task_alloc(dword_100640DC4);
    *(_QWORD *)(v1 + 152) = v28;
    *v28 = v1;
    v28[1] = sub_10022FED0;
    return sub_100429894(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128));
  }
}

uint64_t sub_10022FED0()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 152);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_10022FF84, v2[6], 0);
  v6 = v2[12];
  v5 = v2[13];
  v8 = v2[10];
  v7 = v2[11];
  v9 = v2[9];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(_QWORD))(v4 + 8))(0);
}

uint64_t sub_10022FF84()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10000806C((_QWORD *)(v0[6] + 112), *(_QWORD *)(v0[6] + 136));
  v1 = (_QWORD *)swift_task_alloc(dword_100640DD4);
  v0[20] = v1;
  *v1 = v0;
  v1[1] = sub_10022FFE4;
  return sub_10042C4C4(v0[15], v0[16]);
}

uint64_t sub_10022FFE4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 160);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    v8 = *(_QWORD *)(v4 + 96);
    v7 = *(_QWORD *)(v4 + 104);
    v10 = *(_QWORD *)(v4 + 80);
    v9 = *(_QWORD *)(v4 + 88);
    v11 = *(_QWORD *)(v4 + 72);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(_QWORD))(v6 + 8))(0);
  }
  else
  {
    v13 = *(_QWORD *)(v4 + 48);
    *(_BYTE *)(v4 + 170) = a1 & 1;
    return swift_task_switch(sub_1002300A4, v13, 0);
  }
}

uint64_t sub_1002300A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void (*v8)(uint64_t, uint64_t);
  unint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  os_log_type_t v14;
  _BOOL4 v15;
  unint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = *(unsigned __int8 *)(v1 + 170);
  v3 = *(_QWORD *)(v1 + 48);
  if ((_DWORD)v2 != 1)
  {
    defaultLogger()(a1);
    v13 = swift_retain(v3);
    v5 = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.debug.getter(v5);
    v15 = os_log_type_enabled(v5, v14);
    v8 = *(void (**)(uint64_t, uint64_t))(v1 + 144);
    if (v15)
    {
      v16 = *(_QWORD *)(v1 + 128);
      v26 = *(_QWORD *)(v1 + 120);
      v31 = *(_QWORD *)(v1 + 56);
      v32 = *(_QWORD *)(v1 + 80);
      v29 = *(_QWORD *)(v1 + 48);
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v33 = v18;
      v30 = v8;
      *(_DWORD *)v17 = 136315138;
      swift_bridgeObjectRetain(v16);
      *(_QWORD *)(v1 + 16) = sub_1000E3AC8(v26, v16, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v17 + 4);
      swift_bridgeObjectRelease(v16);
      swift_release(v29);
      _os_log_impl((void *)&_mh_execute_header, v5, v14, "Credential %s does not have a success after activity", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      v12 = v17;
      goto LABEL_6;
    }
    v19 = *(_QWORD *)(v1 + 80);
LABEL_9:
    v20 = *(_QWORD *)(v1 + 56);
    swift_release(*(_QWORD *)(v1 + 48));

    v8(v19, v20);
    goto LABEL_10;
  }
  defaultLogger()(a1);
  v4 = swift_retain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void (**)(uint64_t, uint64_t))(v1 + 144);
  if (!v7)
  {
    v19 = *(_QWORD *)(v1 + 88);
    goto LABEL_9;
  }
  v9 = *(_QWORD *)(v1 + 128);
  v31 = *(_QWORD *)(v1 + 56);
  v32 = *(_QWORD *)(v1 + 88);
  v27 = *(_QWORD *)(v1 + 120);
  v28 = *(_QWORD *)(v1 + 48);
  v10 = (uint8_t *)swift_slowAlloc(12, -1);
  v11 = swift_slowAlloc(32, -1);
  v33 = v11;
  v30 = v8;
  *(_DWORD *)v10 = 136315138;
  swift_bridgeObjectRetain(v9);
  *(_QWORD *)(v1 + 24) = sub_1000E3AC8(v27, v9, &v33);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v10 + 4);
  swift_bridgeObjectRelease(v9);
  swift_release(v28);
  _os_log_impl((void *)&_mh_execute_header, v5, v6, "Credential %s has a success after activity", v10, 0xCu);
  swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v11, -1, -1);
  v12 = v10;
LABEL_6:
  swift_slowDealloc(v12, -1, -1);

  v30(v32, v31);
LABEL_10:
  v21 = *(_QWORD *)(v1 + 96);
  v23 = *(_QWORD *)(v1 + 80);
  v22 = *(_QWORD *)(v1 + 88);
  v24 = *(_QWORD *)(v1 + 72);
  swift_task_dealloc(*(_QWORD *)(v1 + 104));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v2);
}

uint64_t sub_1002303D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1[12] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[13] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[14] = v3;
  v1[15] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError.Code(0);
  v1[16] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[17] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[18] = swift_task_alloc(v6);
  v1[19] = swift_task_alloc(v6);
  v7 = type metadata accessor for DIPError(0);
  v1[20] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[21] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[22] = swift_task_alloc(v9);
  v1[23] = swift_task_alloc(v9);
  return swift_task_switch(sub_1002304A8, v0, 0);
}

uint64_t sub_1002304A8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD **)(v0 + 96);
  sub_10000806C(v1 + 19, v1[22]);
  v2 = v1[26];
  v3 = v1[27];
  v4 = v1[28];
  v5 = v1[29];
  v6 = v1[30];
  v7 = v1[31];
  v8 = v1[32];
  v9 = (_QWORD *)swift_task_alloc(dword_100642D54);
  *(_QWORD *)(v0 + 192) = v9;
  *v9 = v0;
  v9[1] = sub_100230560;
  return sub_100479E84(v0 + 16, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100230560()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100230650;
  else
    v4 = sub_1002305C4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), 0);
}

uint64_t sub_1002305C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v1 + 320);
  sub_100230E1C(v0 + 16, v1 + 280);
  swift_bridgeObjectRelease(v2);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 200) == 0);
}

uint64_t sub_100230650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *log;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t type;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 64) = v1;
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  swift_errorRetain(v1);
  v4 = sub_100004828((uint64_t *)&unk_100633430);
  if (!swift_dynamicCast(v2, v0 + 64, v4, v3, 0))
  {
    v30 = *(_QWORD *)(v0 + 136);
    swift_errorRelease(*(_QWORD *)(v0 + 64));
    v10 = *(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104);
LABEL_7:
    v31 = *(_QWORD *)(v0 + 200);
    v32 = *(_QWORD *)(v0 + 176);
    v33 = *(_QWORD *)(v0 + 184);
    v35 = *(_QWORD *)(v0 + 152);
    v34 = *(_QWORD *)(v0 + 160);
    v36 = *(_QWORD *)(v0 + 144);
    v37 = *(_QWORD *)(v0 + 120);
    v10(v35, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 128));
    swift_errorRetain(v31);
    v38 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v34, v39, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v31, v35, 0, v38, 0xD00000000000007CLL, 0x8000000100556CA0, 0xD000000000000011, 0x8000000100556D20, 129);
    swift_willThrow(v40);
    swift_errorRelease(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v32);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 136);
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 32))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
  DIPError.code.getter(v9);
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104);
  v10(v6, enum case for DIPError.Code.krlMatchedRevokedKey(_:), v8);
  v11 = sub_100004790(&qword_1006343F0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.Code, (uint64_t)&protocol conformance descriptor for DIPError.Code);
  dispatch thunk of RawRepresentable.rawValue.getter(v8, v11);
  dispatch thunk of RawRepresentable.rawValue.getter(v8, v11);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v14 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v14(v6, v8);
  v14(v5, v8);
  if (v12 != v13)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
    swift_errorRelease(*(_QWORD *)(v0 + 64));
    goto LABEL_7;
  }
  v15 = *(_QWORD *)(v0 + 96);
  v16 = swift_errorRelease(*(_QWORD *)(v0 + 200));
  defaultLogger()(v16);
  v17 = swift_retain_n(v15, 2);
  v18 = Logger.logObject.getter(v17);
  type = static os_log_type_t.debug.getter(v18);
  v19 = os_log_type_enabled(v18, type);
  v21 = *(_QWORD *)(v0 + 168);
  v20 = *(_QWORD *)(v0 + 176);
  v22 = *(_QWORD *)(v0 + 160);
  v23 = *(_QWORD *)(v0 + 120);
  v51 = *(_QWORD *)(v0 + 112);
  v25 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 104);
  if (v19)
  {
    v49 = *(_QWORD *)(v0 + 168);
    log = v18;
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = v20;
    v27 = swift_slowAlloc(32, -1);
    v52 = v27;
    *(_DWORD *)v26 = 136315138;
    v47 = v24;
    v29 = *(_QWORD *)(v25 + 192);
    v28 = *(_QWORD *)(v25 + 200);
    swift_bridgeObjectRetain(v28);
    *(_QWORD *)(v0 + 88) = sub_1000E3AC8(v29, v28, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v26 + 4);
    swift_bridgeObjectRelease(v28);
    swift_release_n(v25, 2);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Matched %s key with key in revocation list.", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v23, v47);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v22);
  }
  else
  {

    swift_release_n(v25, 2);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  swift_errorRelease(*(_QWORD *)(v0 + 64));
  v42 = *(_QWORD *)(v0 + 176);
  v44 = *(_QWORD *)(v0 + 144);
  v43 = *(_QWORD *)(v0 + 152);
  v45 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 200) == 0);
}

uint64_t sub_100230ACC()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 14);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 19);
  v1 = v0[26];
  v2 = v0[27];
  v3 = v0[29];
  v4 = v0[31];
  v5 = v0[33];
  swift_bridgeObjectRelease(v0[25]);
  sub_100007F8C(v1, v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_release(v0[34]);
  swift_bridgeObjectRelease(v0[40]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for DigitalPresentmentCredentialValidator()
{
  return objc_opt_self(_TtC8coreidvd37DigitalPresentmentCredentialValidator);
}

uint64_t destroy for DigitalPresentmentCredentialValidator.CredentialMetadata(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  sub_100007F8C(a1[2], a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[9]);
}

_QWORD *initializeWithCopy for DigitalPresentmentCredentialValidator.CredentialMetadata(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  swift_bridgeObjectRetain(v4);
  sub_100022948(v5, v6);
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  v9 = a2[8];
  v10 = a2[9];
  a1[8] = v9;
  a1[9] = v10;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  return a1;
}

_QWORD *assignWithCopy for DigitalPresentmentCredentialValidator.CredentialMetadata(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a2[3];
  sub_100022948(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  sub_100007F8C(v8, v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[6] = a2[6];
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[8] = a2[8];
  v14 = a2[9];
  v15 = a1[9];
  a1[9] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

_QWORD *assignWithTake for DigitalPresentmentCredentialValidator.CredentialMetadata(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_100007F8C(v6, v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = a1[7];
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = a1[9];
  a1[8] = *(_QWORD *)(a2 + 64);
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalPresentmentCredentialValidator.CredentialMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitalPresentmentCredentialValidator.CredentialMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentCredentialValidator.CredentialMetadata()
{
  return &type metadata for DigitalPresentmentCredentialValidator.CredentialMetadata;
}

uint64_t sub_100230E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100639558);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for IdentityWatchProvisioningManagerFactory()
{
  return objc_opt_self(_TtC8coreidvd39IdentityWatchProvisioningManagerFactory);
}

uint64_t sub_100230E84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v26 = a1;
  v27 = a2;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v25 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v9 = __chkstk_darwin(v8);
  v10 = __chkstk_darwin(v9);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v25 - v12;
  v14 = defaultLogger()(v11);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Attempting to provision on watch", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
  v18 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v18, 24, 7);
  sub_1000D6044();
  v20 = v19;
  v21 = (_QWORD *)swift_allocObject(&unk_10060C110, 48, 7);
  v22 = v26;
  v23 = v27;
  v21[2] = v20;
  v21[3] = v22;
  v21[4] = v23;
  v21[5] = v3;
  swift_retain(v20);
  swift_bridgeObjectRetain(v23);
  swift_retain(v3);
  sub_1000D6570((uint64_t)sub_100232A34, (uint64_t)v21);
  swift_release(v20);
  return swift_release(v21);
}

void sub_1002312D0(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  char *v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  void (**v39)(NSObject *, uint64_t);
  char v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  void (*v47)(NSObject *, uint64_t);
  NSObject *v48;
  uint64_t v49;
  NSObject *v50;
  Class v51;
  objc_class *v52;
  NSObject *v53;
  char *v54;
  NSObject *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  void (*v60)(NSObject *, uint64_t);
  id v61;
  uint64_t v62;
  char *v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  Class isa;
  NSObject *v69;
  unint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  NSObject *v85;
  NSObject *v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  id v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  NSObject *v97;
  Class v98;
  NSObject *v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  void *v120;
  char *v121;
  id v122;
  void *v123;
  unint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint8_t *v128;
  uint8_t *v129;
  NSObject *v130;
  NSObject *v131;
  uint64_t v132;
  os_log_type_t v133;
  uint8_t *v134;
  uint8_t *v135;
  NSObject *v136;
  NSObject *v137;
  char *v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  _BOOL4 v142;
  uint64_t v143;
  uint8_t *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  uint8_t *v153;
  NSObject *v154;
  NSObject *v155;
  NSObject *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  NSObject *v161;
  os_log_type_t v162;
  uint8_t *v163;
  NSObject *v164;
  NSObject *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  NSObject *v169;
  os_log_type_t v170;
  uint8_t *v171;
  const char *v172;
  void (**v173)(NSObject *, uint64_t);
  uint64_t v174;
  uint64_t v175;
  NSObject *v176;
  NSObject *v177;
  uint64_t v178;
  void (**v179)(NSObject *, uint64_t);
  NSObject *v180;
  id v181;
  void *v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  NSObject *v189;
  NSObject *v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  NSObject *v197;
  char *v198;
  NSObject *v199;
  os_log_type_t v200;
  uint8_t *v201;
  uint64_t v202;
  id v203;
  void *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  NSObject *v208;
  char *v209;
  NSObject *v210;
  uint64_t v211;
  NSObject *v212;
  void *v213;
  char *v214;
  objc_class *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  NSObject *v220;
  NSObject *v221;
  uint64_t v222;
  uint64_t v223;
  NSObject *v224;
  char *v225;
  NSObject *v226;
  void (**v227)(NSObject *, uint64_t);
  uint64_t v228;
  NSObject *v229;
  uint64_t v230;
  _QWORD v231[4];
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  NSObject *v240;
  uint64_t v241;
  uint64_t v242;

  v226 = a4;
  v223 = type metadata accessor for DIPError.Code(0);
  v222 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v225 = (char *)&v209 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = type metadata accessor for Logger(0);
  v227 = *(void (***)(NSObject *, uint64_t))(v228 - 8);
  v8 = __chkstk_darwin(v228);
  v218 = (char *)&v209 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v216 = (char *)&v209 - v11;
  v12 = __chkstk_darwin(v10);
  v217 = (char *)&v209 - v13;
  v14 = __chkstk_darwin(v12);
  v219 = (char *)&v209 - v15;
  v16 = __chkstk_darwin(v14);
  v220 = ((char *)&v209 - v17);
  v18 = __chkstk_darwin(v16);
  v224 = ((char *)&v209 - v19);
  v20 = __chkstk_darwin(v18);
  v221 = ((char *)&v209 - v21);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v209 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v209 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = ((char *)&v209 - v29);
  v31 = __chkstk_darwin(v28);
  v33 = ((char *)&v209 - v32);
  __chkstk_darwin(v31);
  v35 = (char *)&v209 - v34;
  v36 = v229;
  v37 = sub_1000D73A8(a2, a3);
  if (v36)
    return;
  v210 = v33;
  v212 = v30;
  v211 = a1;
  v209 = v27;
  v215 = (objc_class *)a2;
  v213 = (void *)a3;
  v214 = v24;
  if (!v37)
  {
    defaultLogger()(0);
    v70 = (unint64_t)v213;
    v71 = swift_bridgeObjectRetain_n(v213, 2);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(12, -1);
      v75 = swift_slowAlloc(32, -1);
      v229 = v35;
      v76 = v75;
      *(_QWORD *)&v232 = v75;
      *(_DWORD *)v74 = 136315138;
      swift_bridgeObjectRetain(v70);
      v230 = sub_1000E3AC8((uint64_t)v215, v70, (uint64_t *)&v232);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, v231, v74 + 4);
      swift_bridgeObjectRelease_n(v70, 3);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Proofing Session doesn't exist for Credential ID %s", v74, 0xCu);
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v74, -1, -1);

      v227[1](v229, v228);
    }
    else
    {

      swift_bridgeObjectRelease_n(v70, 2);
      v227[1](v35, v228);
    }
    return;
  }
  v229 = v37;
  v38 = IdentityTarget.init(rawValue:)(-[NSObject target](v37, "target"));
  v39 = v227;
  if ((v40 & 1) != 0
    || (v41 = IdentityTarget.rawValue.getter(v38), v38 = IdentityTarget.rawValue.getter(2), v41 != v38))
  {
    v55 = v212;
    v56 = defaultLogger()(v38);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "The retrieved proofing session is from the phone. Will attempt to get the watch proofing session.", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
    }

    v60 = v39[1];
    v60(v55, v228);
    v61 = -[NSObject proofingSessionID](v229, "proofingSessionID");
    v50 = v226;
    v54 = v214;
    v62 = (uint64_t)v215;
    v63 = v225;
    if (!v61)
    {
      *(_QWORD *)&v232 = 0;
      *((_QWORD *)&v232 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v77._countAndFlagsBits = 0xD00000000000002BLL;
      v77._object = (void *)0x8000000100556E70;
      String.append(_:)(v77);
      v78._countAndFlagsBits = v62;
      v78._object = v213;
      String.append(_:)(v78);
      v79._countAndFlagsBits = 0x74276E73656F6420;
      v79._object = (void *)0xEE00747369786520;
      String.append(_:)(v79);
      v80 = v232;
      (*(void (**)(char *, _QWORD, uint64_t))(v222 + 104))(v63, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v223);
      v81 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v82 = type metadata accessor for DIPError(0);
      v83 = sub_100007F30();
      swift_allocError(v82, v83, 0, 0);
      v84 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v80, *((_QWORD *)&v80 + 1), 0, v63, 0, v81, 0xD000000000000082, 0x8000000100556EA0, 0xD000000000000027, 0x8000000100556F30, 58);
      swift_willThrow(v84);

      return;
    }
    v64 = v61;
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v67 = v66;

    isa = v50[5].isa;
    v50[4].isa = (Class)v65;
    v50[5].isa = (Class)v67;
    swift_bridgeObjectRetain(v67);
    swift_bridgeObjectRelease(isa);
    sub_1000D7010(v65, v67, 2);
    v53 = v69;
    v225 = 0;
    if (!v69)
    {
      v138 = v209;
      defaultLogger()(0);
      v139 = swift_bridgeObjectRetain(v67);
      v140 = Logger.logObject.getter(v139);
      v141 = static os_log_type_t.debug.getter();
      v142 = os_log_type_enabled(v140, v141);
      v143 = v228;
      if (v142)
      {
        v144 = (uint8_t *)swift_slowAlloc(12, -1);
        v145 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v232 = v145;
        *(_DWORD *)v144 = 136315138;
        swift_bridgeObjectRetain(v67);
        v230 = sub_1000E3AC8(v65, v67, (uint64_t *)&v232);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, v231, v144 + 4);
        swift_bridgeObjectRelease_n(v67, 3);
        _os_log_impl((void *)&_mh_execute_header, v140, v141, "Proofing Session doesn't exist for proofingSessionID %s", v144, 0xCu);
        swift_arrayDestroy(v145, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v145, -1, -1);
        swift_slowDealloc(v144, -1, -1);

        v146 = v209;
        v147 = v228;
      }
      else
      {

        swift_bridgeObjectRelease_n(v67, 2);
        v146 = v138;
        v147 = v143;
      }
      v60(v146, v147);
      return;
    }
    swift_bridgeObjectRelease(v67);
    v49 = v228;
    v47 = v60;
  }
  else
  {
    v225 = 0;
    v42 = v210;
    v43 = defaultLogger()(v38);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "The retrieved proofing session is from the Watch. Use the retrieved proofing session.", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    v47 = v39[1];
    v48 = v42;
    v49 = v228;
    v47(v48, v228);
    v50 = v226;
    v51 = v226[7].isa;
    v52 = (objc_class *)v213;
    v226[6].isa = v215;
    v50[7].isa = v52;
    swift_bridgeObjectRetain(v52);
    v53 = v229;
    swift_bridgeObjectRelease(v51);
    v54 = v214;
  }
  v85 = v53;
  defaultLogger()(v85);
  v86 = v85;
  v87 = Logger.logObject.getter(v86);
  v88 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v87, v88))
  {
    v89 = (uint8_t *)swift_slowAlloc(12, -1);
    v90 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v232 = v90;
    *(_DWORD *)v89 = 136315138;
    v91 = -[NSObject proofingSessionID](v86, "proofingSessionID");
    if (v91)
    {
      v92 = v91;
      v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
      v95 = v94;

    }
    else
    {
      v93 = 0;
      v95 = 0xE000000000000000;
    }
    v230 = sub_1000E3AC8(v93, v95, (uint64_t *)&v232);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, v231, v89 + 4);

    swift_bridgeObjectRelease(v95);
    _os_log_impl((void *)&_mh_execute_header, v87, v88, "Proofing Session exists for watch with %s. Will attempt provisioning.", v89, 0xCu);
    swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1, -1);
    swift_slowDealloc(v89, -1, -1);

    v49 = v228;
    v96 = ((uint64_t (*)(char *, uint64_t))v47)(v214, v228);
    v97 = v224;
    v98 = v226[3].isa;
    if (!v98)
      goto LABEL_33;
  }
  else
  {

    v96 = ((uint64_t (*)(char *, uint64_t))v47)(v54, v49);
    v97 = v224;
    v98 = v50[3].isa;
    if (!v98)
    {
LABEL_33:
      v97 = v221;
      v132 = defaultLogger()(v96);
      v126 = Logger.logObject.getter(v132);
      v133 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v126, v133))
      {
        v134 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v134 = 0;
        _os_log_impl((void *)&_mh_execute_header, v126, v133, "The watch listener doesn't exist, will not be able to provision on the watch", v134, 2u);
        v135 = v134;
        v97 = v221;
        swift_slowDealloc(v135, -1, -1);
        v136 = v86;
        v137 = v229;
      }
      else
      {
        v136 = v126;
        v137 = v86;
        v126 = v229;
      }

LABEL_43:
      v156 = v97;
LABEL_44:
      v47(v156, v49);
      return;
    }
  }
  v99 = v98;
  v100 = -[NSObject credentialIdentifier](v86, "credentialIdentifier");
  if (!v100)
  {
    v125 = defaultLogger()(0);
    v126 = Logger.logObject.getter(v125);
    v127 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v126, v127))
    {
      v128 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v128 = 0;
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "The watch credentialIdentifier doesn't exist, will not be able to provision on the watch", v128, 2u);
      v129 = v128;
      v97 = v224;
      swift_slowDealloc(v129, -1, -1);
      v130 = v86;
      v131 = v86;
      v86 = v229;
    }
    else
    {
      v130 = v126;
      v131 = v99;
      v99 = v86;
      v126 = v229;
    }

    goto LABEL_43;
  }
  v101 = v100;
  v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
  v104 = v103;

  v105 = -[NSObject provisioningCredentialID](v86, "provisioningCredentialID");
  if (!v105)
  {
    v148 = swift_bridgeObjectRelease(v104);
    v149 = v220;
    v150 = defaultLogger()(v148);
    v151 = Logger.logObject.getter(v150);
    v152 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v151, v152))
    {
      v153 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v153 = 0;
      _os_log_impl((void *)&_mh_execute_header, v151, v152, "The watch provisioningCredentialID doesn't exist, will not be able to provision on the watch", v153, 2u);
      swift_slowDealloc(v153, -1, -1);
      v154 = v86;
      v155 = v86;
      v86 = v229;
    }
    else
    {
      v154 = v151;
      v155 = v99;
      v99 = v86;
      v151 = v229;
    }

    v156 = v149;
    goto LABEL_44;
  }
  v106 = v105;
  v227 = (void (**)(NSObject *, uint64_t))v47;
  v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
  v109 = v108;

  v110 = -[NSObject partnerSchemeID](v86, "partnerSchemeID");
  if (v110)
  {
    v111 = v110;
    v226 = v99;
    v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
    v114 = v113;

    v115 = -[NSObject provisioningTargetInstanceID](v86, "provisioningTargetInstanceID");
    if (v115)
    {
      v116 = v115;
      v222 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
      v118 = v117;

      v119 = -[NSObject pairingID](v86, "pairingID");
      if (v119)
      {
        v120 = v119;
        v219 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
        v217 = v121;

        v216 = (char *)-[NSObject issuerCurrentCredentialCapacity](v86, "issuerCurrentCredentialCapacity");
        v224 = v86;
        v122 = -[NSObject serverAttestedProvisioningData](v86, "serverAttestedProvisioningData");
        if (v122)
        {
          v123 = v122;
          v221 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v122);
          v223 = v124;

        }
        else
        {
          v221 = 0;
          v223 = 0xF000000000000000;
        }
        v181 = -[NSObject supplementalProvisioningData](v224, "supplementalProvisioningData", v209);
        if (v181)
        {
          v182 = v181;
          v220 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v181);
          v184 = v183;

        }
        else
        {
          v220 = 0;
          v184 = 0xF000000000000000;
        }
        v185 = v218;
        *(_QWORD *)&v232 = v102;
        *((_QWORD *)&v232 + 1) = v104;
        *(_QWORD *)&v233 = v107;
        *((_QWORD *)&v233 + 1) = v109;
        *(_QWORD *)&v234 = v112;
        *((_QWORD *)&v234 + 1) = v114;
        *(_QWORD *)&v235 = v222;
        *((_QWORD *)&v235 + 1) = v118;
        *(_QWORD *)&v236 = v219;
        *((_QWORD *)&v236 + 1) = v217;
        *(_QWORD *)&v237 = v216;
        BYTE8(v237) = 0;
        v186 = (uint64_t)v221;
        v187 = v223;
        *(_QWORD *)&v238 = v221;
        *((_QWORD *)&v238 + 1) = v223;
        v188 = (uint64_t)v220;
        *(_QWORD *)&v239 = v220;
        *((_QWORD *)&v239 + 1) = v184;
        v189 = v184;
        v190 = v226;
        v240 = v226;
        v231[2] = &type metadata for IdentityWatchProvisioningProvider;
        v231[3] = &off_100604EF0;
        v191 = swift_allocObject(&unk_10060C138, 152, 7);
        v230 = v191;
        v192 = v239;
        *(_OWORD *)(v191 + 112) = v238;
        *(_OWORD *)(v191 + 128) = v192;
        *(_QWORD *)(v191 + 144) = v240;
        v193 = v235;
        *(_OWORD *)(v191 + 48) = v234;
        *(_OWORD *)(v191 + 64) = v193;
        v194 = v237;
        *(_OWORD *)(v191 + 80) = v236;
        *(_OWORD *)(v191 + 96) = v194;
        v195 = v233;
        *(_OWORD *)(v191 + 16) = v232;
        *(_OWORD *)(v191 + 32) = v195;
        v196 = type metadata accessor for IdentityProvisioningManager();
        swift_allocObject(v196, 56, 7);
        v197 = v190;
        sub_100028034(v186, v187);
        sub_100028034(v188, (unint64_t)v189);
        sub_100232ACC(&v232);
        v226 = sub_1004187E8((uint64_t)&v230);
        defaultLogger()(v226);
        v198 = v224;
        v199 = Logger.logObject.getter(v198);
        v200 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v199, v200))
        {
          v222 = (uint64_t)v197;
          v224 = v189;
          v201 = (uint8_t *)swift_slowAlloc(12, -1);
          v202 = swift_slowAlloc(32, -1);
          v230 = v202;
          *(_DWORD *)v201 = 136315138;
          v203 = objc_msgSend(v198, "proofingSessionID");
          if (v203)
          {
            v204 = v203;
            v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(v203);
            v207 = v206;

          }
          else
          {
            v205 = 0;
            v207 = 0xE000000000000000;
          }
          v241 = sub_1000E3AC8(v205, v207, &v230);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, &v242, v201 + 4);

          swift_bridgeObjectRelease(v207);
          _os_log_impl((void *)&_mh_execute_header, v199, v200, "Trying to provision watch with proofingSessionID: %s", v201, 0xCu);
          swift_arrayDestroy(v202, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v202, -1, -1);
          swift_slowDealloc(v201, -1, -1);

          ((void (*)(char *, uint64_t))v227)(v218, v228);
          v186 = (uint64_t)v221;
          v188 = (uint64_t)v220;
          v189 = v224;
          v197 = v222;
        }
        else
        {

          ((void (*)(char *, uint64_t))v227)(v185, v228);
        }
        v208 = v226;
        swift_retain(v226);
        runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000002FLL, 0x8000000100556F60, 0xD000000000000027, 0x8000000100556F30, 126, &unk_100639718, v208, (char *)&type metadata for () + 8);

        sub_100007F78(v186, v223);
        sub_100007F78(v188, (unint64_t)v189);
        sub_100232BD0(&v232);
        swift_release_n(v208, 2);
        return;
      }
      swift_bridgeObjectRelease(v118);
      swift_bridgeObjectRelease(v114);
      swift_bridgeObjectRelease(v109);
      v174 = swift_bridgeObjectRelease(v104);
      v167 = v216;
      v175 = defaultLogger()(v174);
      v169 = Logger.logObject.getter(v175);
      v170 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v169, v170))
      {
        v171 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v171 = 0;
        v172 = "The watch pairingID doesn't exist, will not be able to provision on the watch";
        goto LABEL_57;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v114);
      swift_bridgeObjectRelease(v109);
      v166 = swift_bridgeObjectRelease(v104);
      v167 = v217;
      v168 = defaultLogger()(v166);
      v169 = Logger.logObject.getter(v168);
      v170 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v169, v170))
      {
        v171 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v171 = 0;
        v172 = "The watch provisioningTargetInstanceID doesn't exist, will not be able to provision on the watch";
LABEL_57:
        _os_log_impl((void *)&_mh_execute_header, v169, v170, v172, v171, 2u);
        swift_slowDealloc(v171, -1, -1);
        v176 = v86;
        v177 = v86;
        v86 = v229;
        v178 = v228;
        v179 = v227;
        v180 = v226;
LABEL_59:

        ((void (*)(char *, uint64_t))v179)(v167, v178);
        return;
      }
    }
    v176 = v169;
    v177 = v226;
    v180 = v86;
    v169 = v229;
    v178 = v228;
    v179 = v227;
    goto LABEL_59;
  }
  v157 = v49;
  swift_bridgeObjectRelease(v109);
  v158 = swift_bridgeObjectRelease(v104);
  v159 = v219;
  v160 = defaultLogger()(v158);
  v161 = Logger.logObject.getter(v160);
  v162 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v161, v162))
  {
    v163 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v163 = 0;
    _os_log_impl((void *)&_mh_execute_header, v161, v162, "The watch partnerSchemeID doesn't exist, will not be able to provision on the watch", v163, 2u);
    swift_slowDealloc(v163, -1, -1);
    v164 = v86;
    v165 = v86;
    v86 = v229;
  }
  else
  {
    v164 = v161;
    v165 = v99;
    v99 = v86;
    v161 = v229;
  }
  v173 = v227;

  ((void (*)(char *, uint64_t))v173)(v159, v157);
}

uint64_t sub_10023281C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1006409BC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100007EE8;
  return sub_100418A1C();
}

uint64_t sub_100232864()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for IdentityWatchProvisioningManager()
{
  return objc_opt_self(_TtC8coreidvd32IdentityWatchProvisioningManager);
}

uint64_t sub_1002328C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v14;

  v0 = type metadata accessor for DispatchQoS.QoSClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for IdentityProofingActionNotificationFlow();
  v5 = swift_allocObject(v4, 24, 7);
  *(_QWORD *)(v5 + 16) = 0;
  sub_1000257E0();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DispatchQoS.QoSClass.default(_:), v0);
  v6 = static OS_dispatch_queue.global(qos:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7 = sub_1004F5D80(0, v5, v6);
  v8 = type metadata accessor for IdentityWatchProvisioningManager();
  v9 = swift_allocObject(v8, 64, 7);
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_QWORD *)(v9 + 16) = v7;
  v10 = qword_100670080;
  if (qword_100670080)
  {
    swift_retain(v7);
    swift_retain(v10);
    v11 = (void *)sub_10002D984();
    v12 = v11;
    swift_release(v10);
    swift_release(v7);
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(v9 + 24) = v11;
  return v9;
}

uint64_t sub_100232A00()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_100232A34()
{
  uint64_t v0;

  sub_1002312D0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(NSObject **)(v0 + 40));
}

uint64_t sub_100232A50()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 120);
  if (v1 >> 60 != 15)
    sub_100007F8C(*(_QWORD *)(v0 + 112), v1);
  v2 = *(_QWORD *)(v0 + 136);
  if (v2 >> 60 != 15)
    sub_100007F8C(*(_QWORD *)(v0 + 128), v2);

  return swift_deallocObject(v0, 152, 7);
}

_QWORD *sub_100232ACC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[12];
  v7 = a1[13];
  v8 = a1[14];
  v9 = a1[15];
  v10 = (void *)a1[16];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_100028034(v6, v7);
  sub_100028034(v8, v9);
  v11 = v10;
  return a1;
}

uint64_t sub_100232B6C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100639714);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100007EE8;
  v2 = (_QWORD *)swift_task_alloc(dword_1006409BC);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_100007EE8;
  return sub_100418A1C();
}

_QWORD *sub_100232BD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[9];
  v6 = a1[12];
  v7 = a1[13];
  v8 = a1[14];
  v9 = a1[15];
  v10 = (void *)a1[16];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  sub_100007F78(v6, v7);
  sub_100007F78(v8, v9);

  return a1;
}

uint64_t sub_100232C70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));

  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for Noncer()
{
  return objc_opt_self(_TtC8coreidvd6Noncer);
}

const char *StoredBiomeMetadata.entityName.unsafeMutableAddressor()
{
  return "BiomeMetadata";
}

Swift::Void __swiftcall StoredBiomeMetadata.update(livenessAssessment:gestureAssessment:facVersion:facePoseVersion:prdVersion:padtoolVersion:didStepUp:passiveLivenessAssessment:passiveGestureAssessment:passiveLivenessFacVersion:passiveLivenessFacePoseVersion:passiveLivenessPrdVersion:passiveLivenessPadtoolVersion:)(Swift::Int64 livenessAssessment, Swift::Int64 gestureAssessment, Swift::String_optional facVersion, Swift::String_optional facePoseVersion, Swift::String_optional prdVersion, Swift::String_optional padtoolVersion, Swift::Bool didStepUp, Swift::Int64 passiveLivenessAssessment, Swift::Int64 passiveGestureAssessment, Swift::String_optional passiveLivenessFacVersion, Swift::String_optional passiveLivenessFacePoseVersion, Swift::String_optional passiveLivenessPrdVersion, Swift::String_optional passiveLivenessPadtoolVersion)
{
  sub_100233720(livenessAssessment, gestureAssessment, facePoseVersion.value._countAndFlagsBits, (uint64_t)facePoseVersion.value._object, prdVersion.value._countAndFlagsBits, (uint64_t)prdVersion.value._object, padtoolVersion.value._countAndFlagsBits, (uint64_t)padtoolVersion.value._object, didStepUp, passiveLivenessAssessment, passiveGestureAssessment, passiveLivenessFacVersion.value._countAndFlagsBits, (uint64_t)passiveLivenessFacVersion.value._object, passiveLivenessFacePoseVersion.value._countAndFlagsBits, (uint64_t)passiveLivenessFacePoseVersion.value._object, passiveLivenessPrdVersion.value._countAndFlagsBits, (uint64_t)passiveLivenessPrdVersion.value._object, passiveLivenessPadtoolVersion.value._countAndFlagsBits, (uint64_t)passiveLivenessPadtoolVersion.value._object);
}

Swift::Void __swiftcall StoredBiomeMetadata.update(proofingSessionID:dob:gender:skinTone:ethnicity:deviceLanguage:issuer:shouldDonateProofingDecision:axSettings:)(Swift::String proofingSessionID, Swift::String_optional dob, Swift::String_optional gender, Swift::Int64_optional skinTone, Swift::String_optional ethnicity, Swift::String_optional deviceLanguage, Swift::String_optional issuer, Swift::Bool shouldDonateProofingDecision, Swift::OpaquePointer_optional axSettings)
{
  void *v9;
  void *v10;
  Swift::Bool is_nil;
  Swift::Int64 value;
  uint64_t countAndFlagsBits;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  char isEscapingClosureAtFileLocation;
  Swift::Bool v25;
  id v26;
  void *object;
  _QWORD aBlock[5];
  uint64_t v29;

  v10 = v9;
  is_nil = skinTone.is_nil;
  value = skinTone.value;
  object = gender.value._object;
  countAndFlagsBits = gender.value._countAndFlagsBits;
  v14 = dob.value._object;
  v15 = dob.value._countAndFlagsBits;
  v16 = proofingSessionID._object;
  v17 = proofingSessionID._countAndFlagsBits;
  v18 = objc_msgSend(v10, "managedObjectContext");
  if (v18)
  {
    v25 = is_nil;
    v26 = v18;
    v19 = swift_allocObject(&unk_10060C160, 152, 7);
    *(_QWORD *)(v19 + 16) = v10;
    *(_QWORD *)(v19 + 24) = v17;
    *(_QWORD *)(v19 + 32) = v16;
    *(_QWORD *)(v19 + 40) = v15;
    *(_QWORD *)(v19 + 48) = v14;
    *(_QWORD *)(v19 + 56) = countAndFlagsBits;
    *(_QWORD *)(v19 + 64) = object;
    *(Swift::String_optional *)(v19 + 72) = ethnicity;
    *(_QWORD *)(v19 + 88) = value;
    *(_BYTE *)(v19 + 96) = v25;
    *(Swift::String_optional *)(v19 + 104) = deviceLanguage;
    *(Swift::String_optional *)(v19 + 120) = issuer;
    *(_BYTE *)(v19 + 136) = shouldDonateProofingDecision;
    *(_QWORD *)(v19 + 144) = axSettings.value._rawValue;
    v20 = swift_allocObject(&unk_10060C188, 32, 7);
    *(_QWORD *)(v20 + 16) = sub_1002339E4;
    *(_QWORD *)(v20 + 24) = v19;
    aBlock[4] = sub_1000C00CC;
    v29 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100026DC8;
    aBlock[3] = &unk_10060C1A0;
    v21 = _Block_copy(aBlock);
    v22 = v29;
    swift_bridgeObjectRetain(axSettings.value._rawValue);
    swift_retain(v20);
    v23 = v10;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(object);
    swift_bridgeObjectRetain(ethnicity.value._object);
    swift_bridgeObjectRetain(deviceLanguage.value._object);
    swift_bridgeObjectRetain(issuer.value._object);
    swift_release(v22);
    objc_msgSend(v26, "performBlockAndWait:", v21);

    _Block_release(v21);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v20, "", 90, 24, 51, 1);
    swift_release(v19);
    swift_release(v20);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

uint64_t static StoredBiomeMetadata.entityName.getter()
{
  return 0x74654D656D6F6942;
}

void sub_100232FA8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, NSString a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  NSString v20;
  NSString v21;
  NSString v22;
  uint64_t v23;
  NSString v24;
  uint64_t v25;
  NSString v26;
  NSString v27;
  NSArray v28;
  Class isa;

  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setProofingSessionID:", v20);

  if (a5)
    a5 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setDob:", a5, a12);

  if (a7)
    v21 = String._bridgeToObjectiveC()();
  else
    v21 = 0;
  objc_msgSend(a1, "setGender:", v21);

  if (a9)
  {
    v22 = String._bridgeToObjectiveC()();
    objc_msgSend(a1, "setEthnicity:", v22);

    if ((a11 & 1) != 0)
      v23 = 0;
    else
      v23 = a10;
    objc_msgSend(a1, "setSkinTone:", v23);
    v24 = String._bridgeToObjectiveC()();
  }
  else
  {
    objc_msgSend(a1, "setEthnicity:", 0);
    if ((a11 & 1) != 0)
      v25 = 0;
    else
      v25 = a10;
    objc_msgSend(a1, "setSkinTone:", v25);
    v24 = 0;
  }
  objc_msgSend(a1, "setEthnicity:", v24);

  if (a13)
    v26 = String._bridgeToObjectiveC()();
  else
    v26 = 0;
  objc_msgSend(a1, "setDeviceLanguage:", v26);

  if (a15)
    v27 = String._bridgeToObjectiveC()();
  else
    v27 = 0;
  objc_msgSend(a1, "setIssuer:", v27);

  objc_msgSend(a1, "setShouldDonateProofingDecision:", a16 & 1);
  if (a17)
    v28.super.isa = Array._bridgeToObjectiveC()().super.isa;
  else
    v28.super.isa = 0;
  isa = v28.super.isa;
  objc_msgSend(a1, "setAxSettings:");

}

id sub_100233210(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, NSString a5, uint64_t a6, NSString a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  NSString v24;
  NSString v25;
  NSString v26;
  NSString v27;
  NSString v28;

  objc_msgSend(a1, "setLivenessAssessment:", a2);
  objc_msgSend(a1, "setGestureAssessment:", a3);
  if (a5)
    a5 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setPadtoolVersion:", a5);

  if (a7)
    a7 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setPrdVersion:", a7);

  if (a9)
    v24 = String._bridgeToObjectiveC()();
  else
    v24 = 0;
  objc_msgSend(a1, "setFacePoseVersion:", v24);

  objc_msgSend(a1, "setPassiveLivenessAssessment:", a10);
  objc_msgSend(a1, "setPassiveGestureAssessment:", a11);
  if (a13)
    v25 = String._bridgeToObjectiveC()();
  else
    v25 = 0;
  objc_msgSend(a1, "setPassiveLivenessFacVersion:", v25);

  if (a15)
    v26 = String._bridgeToObjectiveC()();
  else
    v26 = 0;
  objc_msgSend(a1, "setPassiveLivenessFacePoseVersion:", v26);

  if (a17)
    v27 = String._bridgeToObjectiveC()();
  else
    v27 = 0;
  objc_msgSend(a1, "setPassiveLivenessPrdVersion:", v27);

  if (a19)
    v28 = String._bridgeToObjectiveC()();
  else
    v28 = 0;
  objc_msgSend(a1, "setPassiveLivenessPadtoolVersion:", v28);

  return objc_msgSend(a1, "setDidStepUp:", a20 & 1);
}

Swift::Void __swiftcall StoredBiomeMetadata.update(livenessAssessment:gestureAssessment:facVersion:facePoseVersion:prdVersion:padtoolVersion:)(Swift::Int64 livenessAssessment, Swift::Int64 gestureAssessment, Swift::String_optional facVersion, Swift::String_optional facePoseVersion, Swift::String_optional prdVersion, Swift::String_optional padtoolVersion)
{
  void *v6;
  void *object;
  uint64_t countAndFlagsBits;
  void *v9;
  uint64_t v10;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  char isEscapingClosureAtFileLocation;
  _QWORD v25[5];
  uint64_t v26;

  object = prdVersion.value._object;
  countAndFlagsBits = prdVersion.value._countAndFlagsBits;
  v9 = facePoseVersion.value._object;
  v10 = facePoseVersion.value._countAndFlagsBits;
  v13 = objc_msgSend(v6, "managedObjectContext", facVersion.value._countAndFlagsBits, facVersion.value._object);
  if (v13)
  {
    v14 = v13;
    v15 = swift_allocObject(&unk_10060C1D8, 88, 7);
    v16 = object;
    v17 = v9;
    v18 = v15;
    *(_QWORD *)(v15 + 16) = v6;
    *(_QWORD *)(v15 + 24) = livenessAssessment;
    *(_QWORD *)(v15 + 32) = gestureAssessment;
    *(Swift::String_optional *)(v15 + 40) = padtoolVersion;
    *(_QWORD *)(v15 + 56) = countAndFlagsBits;
    *(_QWORD *)(v15 + 64) = v16;
    *(_QWORD *)(v15 + 72) = v10;
    v19 = v16;
    *(_QWORD *)(v15 + 80) = v17;
    v20 = swift_allocObject(&unk_10060C200, 32, 7);
    *(_QWORD *)(v20 + 16) = sub_100233AA4;
    *(_QWORD *)(v20 + 24) = v18;
    v25[4] = sub_1001AEFEC;
    v26 = v20;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 1107296256;
    v25[2] = sub_100026DC8;
    v25[3] = &unk_10060C218;
    v21 = _Block_copy(v25);
    v22 = v26;
    swift_bridgeObjectRetain(v17);
    swift_retain(v20);
    v23 = v6;
    swift_bridgeObjectRetain(padtoolVersion.value._object);
    swift_bridgeObjectRetain(v19);
    swift_release(v22);
    objc_msgSend(v14, "performBlockAndWait:", v21);

    _Block_release(v21);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v20, "", 90, 73, 51, 1);
    swift_release(v18);
    swift_release(v20);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

void sub_100233618(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, NSString a5, uint64_t a6, NSString a7, uint64_t a8, uint64_t a9)
{
  NSString v13;
  id v14;

  objc_msgSend(a1, "setLivenessAssessment:", a2);
  objc_msgSend(a1, "setGestureAssessment:", a3);
  if (a5)
    a5 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setPadtoolVersion:", a5);

  if (a7)
    a7 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setPrdVersion:", a7);

  if (a9)
    v13 = String._bridgeToObjectiveC()();
  else
    v13 = 0;
  v14 = v13;
  objc_msgSend(a1, "setFacePoseVersion:");

}

id sub_100233720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;
  id result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  char isEscapingClosureAtFileLocation;
  uint64_t v39;
  id v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v20 = v19;
  result = objc_msgSend(v20, "managedObjectContext");
  if (result)
  {
    v39 = a8;
    v40 = result;
    v30 = swift_allocObject(&unk_10060C250, 169, 7);
    v31 = a6;
    v32 = v30;
    *(_QWORD *)(v30 + 16) = v20;
    *(_QWORD *)(v30 + 24) = a1;
    *(_QWORD *)(v30 + 32) = a2;
    *(_QWORD *)(v30 + 40) = a7;
    *(_QWORD *)(v30 + 48) = a8;
    *(_QWORD *)(v30 + 56) = a5;
    *(_QWORD *)(v30 + 64) = v31;
    v33 = v31;
    *(_QWORD *)(v30 + 72) = a3;
    *(_QWORD *)(v30 + 80) = a4;
    *(_QWORD *)(v30 + 88) = a10;
    *(_QWORD *)(v30 + 96) = a11;
    *(_QWORD *)(v30 + 104) = a12;
    *(_QWORD *)(v30 + 112) = a13;
    *(_QWORD *)(v30 + 120) = a14;
    *(_QWORD *)(v30 + 128) = a15;
    *(_QWORD *)(v30 + 136) = a16;
    *(_QWORD *)(v30 + 144) = a17;
    *(_QWORD *)(v30 + 152) = a18;
    *(_QWORD *)(v30 + 160) = a19;
    *(_BYTE *)(v30 + 168) = a9 & 1;
    v34 = swift_allocObject(&unk_10060C278, 32, 7);
    *(_QWORD *)(v34 + 16) = sub_100233B44;
    *(_QWORD *)(v34 + 24) = v32;
    aBlock[4] = sub_1001AEFEC;
    v42 = v34;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100026DC8;
    aBlock[3] = &unk_10060C290;
    v35 = _Block_copy(aBlock);
    v36 = v42;
    swift_bridgeObjectRetain(a19);
    swift_retain(v34);
    v37 = v20;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a13);
    swift_bridgeObjectRetain(a15);
    swift_bridgeObjectRetain(a17);
    swift_release(v36);
    objc_msgSend(v40, "performBlockAndWait:", v35);

    _Block_release(v35);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v34, "", 90, 51, 51, 1);
    swift_release(v32);
    result = (id)swift_release(v34);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_100233988()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  return swift_deallocObject(v0, 152, 7);
}

void sub_1002339E4()
{
  uint64_t v0;

  sub_100232FA8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(NSString *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_BYTE *)(v0 + 136), *(_QWORD *)(v0 + 144));
}

uint64_t sub_100233A40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100233A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100233A60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100233A68()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

void sub_100233AA4()
{
  uint64_t v0;

  sub_100233618(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(NSString *)(v0 + 48), *(_QWORD *)(v0 + 56), *(NSString *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_100233AD8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100233AE8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  return swift_deallocObject(v0, 169, 7);
}

id sub_100233B44()
{
  uint64_t v0;

  return sub_100233210(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(NSString *)(v0 + 48), *(_QWORD *)(v0 + 56), *(NSString *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
           *(_BYTE *)(v0 + 168));
}

uint64_t sub_100233B98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100233BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v6 + 16088) = v5;
  *(_QWORD *)(v6 + 16080) = a4;
  *(_QWORD *)(v6 + 16072) = a3;
  *(_BYTE *)(v6 + 16184) = a5;
  *(_QWORD *)(v6 + 16064) = a2;
  *(_QWORD *)(v6 + 16056) = a1;
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v6 + 16096) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 16104) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 16112) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 16120) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 16128) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 16136) = swift_task_alloc(v9);
  return swift_task_switch(sub_100233C58, 0, 0);
}

uint64_t sub_100233C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  _BOOL4 v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[2];

  v1 = v0 + 5632;
  v76 = v0 + 6064;
  v2 = v0 + 6496;
  v75 = v0 + 16048;
  v3 = (char *)(v0 + 16184);
  v4 = *(unsigned __int8 *)(v0 + 16184);
  *(_OWORD *)(v0 + 16024) = 0u;
  if (v4 == 1)
  {
    v5 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 16088) + 56);
    v6 = (uint64_t)&v5[4];
    v7 = v5 + 112;
    os_unfair_lock_lock(v5 + 112);
    sub_1000A1F54(v6, v0 + 1744, &qword_100632330);
    sub_1000A1F54(v0 + 1744, v0 + 15136, &qword_100632330);
    sub_10023DFA4(v0 + 1744, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
    os_unfair_lock_unlock(v7);
    sub_1000A1F54(v0 + 15136, v0 + 12544, &qword_100632330);
    sub_1000A1F54(v0 + 12544, v0 + 15568, &qword_100632330);
    sub_1000A1F54(v0 + 12544, v0 + 14704, &qword_100632330);
    if (sub_100035A5C(v0 + 14704) == 1)
    {
      v8 = 1;
    }
    else
    {
      v9 = *(_QWORD *)(v0 + 15968);
      sub_1000A1F54(v0 + 15568, v0 + 5200, &qword_100632330);
      swift_bridgeObjectRetain(v9);
      sub_10023DFA4(v0 + 5200, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035BBC);
      v8 = v9 == 0;
      if (v9)
        swift_bridgeObjectRelease(v9);
    }
    v1 = v0 + 5632;
    v3 = (char *)(v0 + 16184);
    v2 = v0 + 6496;
  }
  else
  {
    v8 = 0;
  }
  v10 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 16088) + 56);
  *(_QWORD *)(v0 + 16144) = v10;
  v11 = (uint64_t)&v10[4];
  v12 = v10 + 112;
  os_unfair_lock_lock(v10 + 112);
  v79 = v11;
  sub_1000A1F54(v11, v0 + 1312, &qword_100632330);
  sub_1000A1F54(v0 + 1312, v76, &qword_100632330);
  sub_10023DFA4(v0 + 1312, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
  os_unfair_lock_unlock(v12);
  sub_1000A1F54(v76, v0 + 6928, &qword_100632330);
  sub_1000A1F54(v0 + 6928, v1, &qword_100632330);
  sub_1000A1F54(v0 + 6928, v2, &qword_100632330);
  v13 = sub_100035A5C(v2);
  v14 = *v3;
  if (v13 == 1)
  {
    if ((v14 & 1) == 0)
    {
      v15 = 0;
LABEL_16:
      v18 = swift_bridgeObjectRelease(v15);
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  v16 = *(_QWORD *)(v0 + 5648);
  v15 = *(_QWORD *)(v0 + 5656);
  sub_1000A1F54(v1, v0 + 7360, &qword_100632330);
  swift_bridgeObjectRetain(v15);
  sub_10023DFA4(v0 + 7360, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035BBC);
  if ((v14 & 1) == 0)
    goto LABEL_16;
  if (!v15
    || (v17 = sub_1001B2720(v16, v15, *(_QWORD **)(v0 + 16080)), v18 = swift_bridgeObjectRelease(v15), (v17 & 1) == 0))
  {
LABEL_14:
    v19 = *(_QWORD **)(v0 + 16080);
    if (v19[2])
    {
      v20 = v19[4];
      v21 = v19[5];
      swift_bridgeObjectRetain(v21);
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    *(_QWORD *)(v0 + 16024) = v20;
    *(_QWORD *)(v0 + 16032) = v21;
    swift_bridgeObjectRetain(v21);
    defaultLogger()(v29);
    swift_bridgeObjectRetain(v21);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(_QWORD *)(v0 + 16136);
    v35 = *(_QWORD *)(v0 + 16104);
    v36 = *(_QWORD *)(v0 + 16096);
    if (v33)
    {
      v71 = (uint64_t *)(v0 + 16040);
      v77 = *(_QWORD *)(v0 + 16136);
      v74 = *(_QWORD *)(v0 + 16096);
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v72 = swift_slowAlloc(32, -1);
      v80[0] = v72;
      *(_DWORD *)v37 = 136446210;
      if (v21)
      {
        v38 = v21;
      }
      else
      {
        v20 = 7104878;
        v38 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain(v21);
      *v71 = sub_1000E3AC8(v20, v38, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v75, v37 + 4);
      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease_n(v21, 2);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "setting requiredLanguage to the 1st in the list = %{public}s", v37, 0xCu);
      swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v37, -1, -1);

      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v77, v74);
    }
    else
    {
      swift_bridgeObjectRelease_n(v21, 2);

      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    }
    goto LABEL_26;
  }
LABEL_17:
  if (!v8)
  {
    v22 = *(os_unfair_lock_s **)(v0 + 16144);
    v23 = (uint64_t)&v22[4];
    os_unfair_lock_lock(v22 + 112);
    sub_1000A1F54(v23, v0 + 16, &qword_100632330);
    sub_1000A1F54(v0 + 16, v0 + 8224, &qword_100632330);
    sub_10023DFA4(v0 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(v0 + 16144) + 448));
    sub_1000A1F54(v0 + 8224, v0 + 8656, &qword_100632330);
    sub_1000A1F54(v0 + 8656, v0 + 7792, &qword_100632330);
    v24 = *(_QWORD *)(v0 + 16136);
    v25 = *(_QWORD *)(v0 + 16128);
    v26 = *(_QWORD *)(v0 + 16120);
    v27 = *(_QWORD *)(v0 + 16112);
    sub_1000A1F54(v0 + 7792, *(_QWORD *)(v0 + 16056), &qword_100632330);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
LABEL_26:
  v39 = v0 + 2608;
  v40 = v0 + 3472;
  v41 = v0 + 9088;
  v78 = v0 + 9520;
  v73 = v0 + 880;
  defaultLogger()(v18);
  v42 = *(_QWORD *)(v0 + 16024);
  v43 = *(_QWORD *)(v0 + 16032);
  v44 = swift_bridgeObjectRetain_n(v43, 2);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.default.getter();
  v47 = os_log_type_enabled(v45, v46);
  v48 = *(_QWORD *)(v0 + 16128);
  if (v47)
  {
    v70 = *(_QWORD *)(v0 + 16096);
    v69 = *(_QWORD *)(v0 + 16104);
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = swift_slowAlloc(32, -1);
    v80[0] = v50;
    *(_DWORD *)v49 = 136446210;
    if (v43)
      v51 = v42;
    else
      v51 = 7104878;
    v68 = v48;
    if (v43)
      v52 = v43;
    else
      v52 = 0xE300000000000000;
    swift_bridgeObjectRetain(v43);
    v53 = v51;
    v39 = v0 + 2608;
    *(_QWORD *)(v0 + 16048) = sub_1000E3AC8(v53, v52, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, v0 + 16056, v49 + 4);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease_n(v43, 2);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "require new attributeConfig for %{public}s", v49, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    v54 = v50;
    v41 = v0 + 9088;
    swift_slowDealloc(v54, -1, -1);
    v55 = v49;
    v40 = v0 + 3472;
    swift_slowDealloc(v55, -1, -1);

    v56 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    v56(v68, v70);
  }
  else
  {
    v57 = *(_QWORD *)(v0 + 16096);
    v58 = *(_QWORD *)(v0 + 16104);
    swift_bridgeObjectRelease_n(v43, 2);

    v56 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    v56(v48, v57);
  }
  *(_QWORD *)(v0 + 16152) = v56;
  os_unfair_lock_lock(v12);
  sub_1000A1F54(v79, v73, &qword_100632330);
  sub_1000A1F54(v73, v78, &qword_100632330);
  sub_10023DFA4(v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
  os_unfair_lock_unlock(v12);
  sub_1000A1F54(v78, v40, &qword_100632330);
  sub_1000A1F54(v78, v0 + 9952, &qword_100632330);
  sub_1000A1F54(v40, v41, &qword_100632330);
  sub_1000A1F54(v40, v39, &qword_100632330);
  if (sub_100035A5C(v39) == 1)
  {
    v59 = swift_task_alloc(32);
    *(_QWORD *)(v59 + 16) = v40;
    os_unfair_lock_lock(v12);
    sub_100235640(v79, *(_QWORD *)(v59 + 16));
    os_unfair_lock_unlock(v12);
    sub_1000A1F54(v41, v0 + 14272, &qword_100632330);
    sub_10023DFA4(v0 + 14272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035BBC);
    v60 = v59;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 9488));
    *(_QWORD *)(v0 + 9488) = 0;
    sub_1000A1F54(v41, v0 + 3040, &qword_100632330);
    sub_1000A1F54(v41, v0 + 10384, &qword_100632330);
    v61 = swift_task_alloc(32);
    *(_QWORD *)(v61 + 16) = v0 + 3040;
    os_unfair_lock_lock(v12);
    sub_100235640(v79, *(_QWORD *)(v61 + 16));
    os_unfair_lock_unlock(v12);
    sub_10023DFA4(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035BBC);
    v60 = v61;
  }
  swift_task_dealloc(v60);
  os_unfair_lock_lock(v12);
  sub_1000A1F54(v79, v0 + 448, &qword_100632330);
  sub_1000A1F54(v0 + 448, v0 + 11248, &qword_100632330);
  sub_10023DFA4(v0 + 448, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
  os_unfair_lock_unlock(v12);
  sub_1000A1F54(v0 + 11248, v0 + 4336, &qword_100632330);
  sub_1000A1F54(v0 + 11248, v0 + 11680, &qword_100632330);
  sub_1000A1F54(v0 + 4336, v0 + 10816, &qword_100632330);
  sub_1000A1F54(v0 + 4336, v0 + 2176, &qword_100632330);
  if (sub_100035A5C(v0 + 2176) == 1)
  {
    v62 = swift_task_alloc(32);
    *(_QWORD *)(v62 + 16) = v0 + 4336;
    os_unfair_lock_lock(v12);
    sub_100235640(v79, *(_QWORD *)(v62 + 16));
    os_unfair_lock_unlock(v12);
    sub_1000A1F54(v0 + 10816, v0 + 13840, &qword_100632330);
    sub_10023DFA4(v0 + 13840, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035BBC);
    v63 = v62;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 11224));
    *(_QWORD *)(v0 + 11224) = 0;
    sub_1000A1F54(v0 + 10816, v0 + 3904, &qword_100632330);
    sub_1000A1F54(v0 + 10816, v0 + 12112, &qword_100632330);
    v64 = swift_task_alloc(32);
    *(_QWORD *)(v64 + 16) = v0 + 3904;
    os_unfair_lock_lock(v12);
    sub_100235640(v79, *(_QWORD *)(v64 + 16));
    os_unfair_lock_unlock(v12);
    sub_10023DFA4(v0 + 3904, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035BBC);
    v63 = v64;
  }
  swift_task_dealloc(v63);
  swift_beginAccess(v0 + 16024, v0 + 16000, 0, 0);
  v65 = *(_QWORD *)(v0 + 16024);
  v66 = *(_QWORD *)(v0 + 16032);
  *(_QWORD *)(v0 + 16160) = v66;
  v67 = (_QWORD *)swift_task_alloc(dword_10063992C);
  *(_QWORD *)(v0 + 16168) = v67;
  *v67 = v0;
  v67[1] = sub_1002347C0;
  return sub_1002356C4(v0 + 4768, v65, v66, 0, 1, *(_QWORD *)(v0 + 16064), *(_QWORD *)(v0 + 16072));
}

uint64_t sub_1002347C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16168);
  *(_QWORD *)(*(_QWORD *)v1 + 16176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100234904;
  }
  else
  {
    v5 = v2[2020];
    memcpy(v2 + 1676, v2 + 596, 0x1B0uLL);
    swift_bridgeObjectRelease(v5);
    v4 = sub_100234848;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100234848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  memcpy((void *)(v0 + 12976), (const void *)(v0 + 13408), 0x1B0uLL);
  nullsub_7(v0 + 12976);
  sub_1000A1F54(v0 + 12976, v0 + 7792, &qword_100632330);
  v1 = *(_QWORD *)(v0 + 16136);
  v2 = *(_QWORD *)(v0 + 16128);
  v3 = *(_QWORD *)(v0 + 16120);
  v4 = *(_QWORD *)(v0 + 16112);
  sub_1000A1F54(v0 + 7792, *(_QWORD *)(v0 + 16056), &qword_100632330);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100234904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16160));
  v2 = defaultLogger()(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ignore error retrieving attributeConfig", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 16176);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 16152);
  v8 = *(_QWORD *)(v0 + 16120);
  v9 = *(_QWORD *)(v0 + 16112);
  v10 = *(_QWORD *)(v0 + 16096);

  v11 = v7(v8, v10);
  defaultLogger()(v11);
  DIPRecordError(_:message:log:)(v6, 0, 0xE000000000000000, v9);
  swift_errorRelease(v6);
  v7(v9, v10);
  v12 = *(os_unfair_lock_s **)(v0 + 16144);
  v13 = (uint64_t)&v12[4];
  os_unfair_lock_lock(v12 + 112);
  sub_1000A1F54(v13, v0 + 16, &qword_100632330);
  sub_1000A1F54(v0 + 16, v0 + 8224, &qword_100632330);
  sub_10023DFA4(v0 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(v0 + 16144) + 448));
  sub_1000A1F54(v0 + 8224, v0 + 8656, &qword_100632330);
  sub_1000A1F54(v0 + 8656, v0 + 7792, &qword_100632330);
  v14 = *(_QWORD *)(v0 + 16136);
  v15 = *(_QWORD *)(v0 + 16128);
  v16 = *(_QWORD *)(v0 + 16120);
  v17 = *(_QWORD *)(v0 + 16112);
  sub_1000A1F54(v0 + 7792, *(_QWORD *)(v0 + 16056), &qword_100632330);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100234AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  _BYTE *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[432];
  _BYTE v20[408];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[432];
  _BYTE v24[400];
  uint64_t v25;
  _BYTE v26[432];
  _BYTE v27[432];
  _BYTE v28[432];
  _BYTE v29[432];
  _BYTE v30[432];
  _BYTE v31[432];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "resetting attributeConfigs", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v11 = *(os_unfair_lock_s **)(v1 + 56);
  v12 = (uint64_t)&v11[4];
  v13 = v11 + 112;
  os_unfair_lock_lock(v11 + 112);
  sub_1000A1F54(v12, (uint64_t)v31, &qword_100632330);
  sub_1000A1F54((uint64_t)v31, (uint64_t)v23, &qword_100632330);
  sub_10023DFA4((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
  os_unfair_lock_unlock(v13);
  sub_1000A1F54((uint64_t)v23, (uint64_t)v28, &qword_100632330);
  sub_1000A1F54((uint64_t)v23, (uint64_t)&v22, &qword_100632330);
  sub_1000A1F54((uint64_t)v28, (uint64_t)v24, &qword_100632330);
  sub_1000A1F54((uint64_t)v28, (uint64_t)v30, &qword_100632330);
  if (sub_100035A5C((uint64_t)v30) == 1)
  {
    os_unfair_lock_lock(v13);
    sub_100235640(v12, (uint64_t)v28);
    os_unfair_lock_unlock(v13);
    sub_1000A1F54((uint64_t)v24, (uint64_t)v31, &qword_100632330);
    v14 = v31;
  }
  else
  {
    swift_bridgeObjectRelease(v25);
    v25 = 0;
    sub_1000A1F54((uint64_t)v24, (uint64_t)v29, &qword_100632330);
    sub_1000A1F54((uint64_t)v24, (uint64_t)v31, &qword_100632330);
    os_unfair_lock_lock(v13);
    sub_100235640(v12, (uint64_t)v29);
    os_unfair_lock_unlock(v13);
    v14 = v29;
  }
  sub_10023DFA4((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035BBC);
  os_unfair_lock_lock(v13);
  sub_1000A1F54(v12, (uint64_t)v31, &qword_100632330);
  sub_1000A1F54((uint64_t)v31, (uint64_t)v19, &qword_100632330);
  sub_10023DFA4((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
  os_unfair_lock_unlock(v13);
  sub_1000A1F54((uint64_t)v19, (uint64_t)v26, &qword_100632330);
  sub_1000A1F54((uint64_t)v19, (uint64_t)&v18, &qword_100632330);
  sub_1000A1F54((uint64_t)v26, (uint64_t)v20, &qword_100632330);
  sub_1000A1F54((uint64_t)v26, (uint64_t)v31, &qword_100632330);
  if (sub_100035A5C((uint64_t)v31) == 1)
  {
    os_unfair_lock_lock(v13);
    sub_100235640(v12, (uint64_t)v26);
    os_unfair_lock_unlock(v13);
    sub_1000A1F54((uint64_t)v20, (uint64_t)v27, &qword_100632330);
  }
  else
  {
    swift_bridgeObjectRelease(v21);
    v21 = 0;
    sub_1000A1F54((uint64_t)v20, (uint64_t)v27, &qword_100632330);
    sub_1000A1F54((uint64_t)v20, (uint64_t)&v17, &qword_100632330);
    os_unfair_lock_lock(v13);
    sub_100235640(v12, (uint64_t)v27);
    os_unfair_lock_unlock(v13);
  }
  return sub_10023DFA4((uint64_t)v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035BBC);
}

uint64_t sub_100234EE4()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1[7] = v0;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100633990) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v2);
  v1[9] = swift_task_alloc(v2);
  v3 = type metadata accessor for URL(0);
  v1[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[11] = v4;
  v1[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v1[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[14] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[15] = swift_task_alloc(v7);
  v1[16] = swift_task_alloc(v7);
  v1[17] = swift_task_alloc(v7);
  return swift_task_switch(sub_100234FBC, 0, 0);
}

uint64_t sub_100234FBC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  void (*v20)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  char *v24;

  v2 = v1[16];
  v3 = v1[14];
  v4 = v1[12];
  v5 = v1[13];
  v6 = v1[7];
  Date.init()(a1);
  static Date.- infix(_:_:)(v2, 80000.0);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  v1[18] = v7;
  v8 = v7(v2, v5);
  Date.init()(v8);
  static Date.+ infix(_:_:)(v2, 120000.0);
  v7(v2, v5);
  v9 = *(os_unfair_lock_s **)(v6 + 16);
  v10 = (uint64_t)&v9[4];
  v11 = v9 + 14;
  os_unfair_lock_lock(v9 + 14);
  sub_10002581C(v10, (uint64_t)(v1 + 2));
  os_unfair_lock_unlock(v11);
  sub_10000806C(v1 + 2, v1[5]);
  sub_10042DAE8(v4);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v1 + 2);
  if (qword_10062F580 != -1)
    swift_once(&qword_10062F580, sub_10044C284);
  v13 = v1[14];
  v12 = v1[15];
  v14 = v1[13];
  v16 = v1[8];
  v15 = v1[9];
  v17 = v1[7];
  v18 = qword_100670810;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v19(v15, v1[17], v14);
  v20 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56);
  v20(v15, 0, 1, v14);
  v19(v16, v12, v14);
  v20(v16, 0, 1, v14);
  v21 = unk_100641F9C;
  v24 = (char *)&dword_100641F98 + dword_100641F98;
  swift_retain(v17);
  v22 = (_QWORD *)swift_task_alloc(v21);
  v1[19] = v22;
  *v22 = v1;
  v22[1] = sub_10023519C;
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))v24)(v1[12], 1, v1[9], v1[8], v18, v1[7]);
}

uint64_t sub_10023519C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_release(v3);
  sub_100008030(v1, &qword_100633990);
  sub_100008030(v2, &qword_100633990);
  return swift_task_switch(sub_100235228, 0, 0);
}

uint64_t sub_100235228()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v6, *(_QWORD *)(v0 + 80));
  v2(v4, v5);
  v2(v1, v5);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002352D0()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v5;
  int v6;
  _BYTE v7[432];
  _BYTE v8[432];
  _BYTE v9[432];
  _BYTE v10[432];
  _BYTE v11[144];
  uint64_t v12;
  unsigned __int8 v13;

  v1 = *(os_unfair_lock_s **)(v0 + 56);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 112;
  os_unfair_lock_lock(v1 + 112);
  sub_1000A1F54(v2, (uint64_t)v11, &qword_100632330);
  sub_1000A1F54((uint64_t)v11, (uint64_t)v10, &qword_100632330);
  sub_10023DFA4((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
  os_unfair_lock_unlock(v3);
  sub_1000A1F54((uint64_t)v10, (uint64_t)v8, &qword_100632330);
  sub_1000A1F54((uint64_t)v8, (uint64_t)v11, &qword_100632330);
  sub_1000A1F54((uint64_t)v8, (uint64_t)v9, &qword_100632330);
  if (sub_100035A5C((uint64_t)v9) == 1)
    return 3;
  v5 = v12;
  v6 = v13;
  sub_1000A1F54((uint64_t)v11, (uint64_t)v7, &qword_100632330);
  sub_10023DFA4((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035BBC);
  if (v6)
    return 3;
  else
    return v5;
}

uint64_t sub_1002353CC()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t result;
  _BYTE v5[432];
  _BYTE v6[432];
  _BYTE v7[432];
  _BYTE v8[432];
  _BYTE v9[160];

  v1 = *(os_unfair_lock_s **)(v0 + 56);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 112;
  os_unfair_lock_lock(v1 + 112);
  sub_1000A1F54(v2, (uint64_t)v9, &qword_100632330);
  sub_1000A1F54((uint64_t)v9, (uint64_t)v8, &qword_100632330);
  sub_10023DFA4((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
  os_unfair_lock_unlock(v3);
  sub_1000A1F54((uint64_t)v8, (uint64_t)v6, &qword_100632330);
  sub_1000A1F54((uint64_t)v6, (uint64_t)v9, &qword_100632330);
  sub_1000A1F54((uint64_t)v6, (uint64_t)v7, &qword_100632330);
  result = sub_100035A5C((uint64_t)v7);
  if ((_DWORD)result != 1)
  {
    sub_1000A1F54((uint64_t)v9, (uint64_t)v5, &qword_100632330);
    return sub_10023DFA4((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035BBC);
  }
  return result;
}

uint64_t sub_1002354CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[5];

  v6[3] = &type metadata for BootstrapURLManager;
  v6[4] = &off_1006176C0;
  v0 = type metadata accessor for DIPConfigWebService();
  v1 = (_QWORD *)swift_allocObject(v0, 64, 7);
  v2 = sub_10001E624((uint64_t)v6, (uint64_t)&type metadata for BootstrapURLManager);
  __chkstk_darwin(v2);
  (*(void (**)(void))(v3 + 16))();
  v4 = sub_1000EED38(v1);
  result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6);
  qword_100670320 = (uint64_t)v4;
  return result;
}

uint64_t *sub_100235578(uint64_t *a1, uint64_t *a2)
{
  sub_10023E098(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  sub_1000A1F54((uint64_t)a2, (uint64_t)a1, &qword_100639958);
  return sub_10023E0E4(a2);
}

uint64_t sub_1002355D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[432];

  sub_1000A1F54(a1, (uint64_t)v4, &qword_100632330);
  sub_1000A1F54((uint64_t)v4, a2, &qword_100632330);
  return sub_10023DFA4((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
}

uint64_t sub_100235640(uint64_t a1, uint64_t a2)
{
  _BYTE v5[432];

  sub_1000A1F54(a1, (uint64_t)v5, &qword_100632330);
  sub_10023DFA4((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035BBC);
  sub_1000A1F54(a2, a1, &qword_100632330);
  return sub_10023DFA4(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
}

uint64_t sub_1002356C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v8 + 5264) = v7;
  *(_QWORD *)(v8 + 5256) = a7;
  *(_QWORD *)(v8 + 5248) = a6;
  *(_BYTE *)(v8 + 5953) = a5;
  *(_BYTE *)(v8 + 5945) = a4;
  *(_QWORD *)(v8 + 5240) = a3;
  *(_QWORD *)(v8 + 5232) = a2;
  *(_QWORD *)(v8 + 5224) = a1;
  v9 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v8 + 5272) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 5280) = v10;
  *(_QWORD *)(v8 + 5288) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100630A48) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 5296) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 5304) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 5312) = swift_task_alloc(v11);
  v12 = type metadata accessor for URL(0);
  *(_QWORD *)(v8 + 5320) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 5328) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 5336) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 5344) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 5352) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 5360) = swift_task_alloc(v14);
  v15 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 5368) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v8 + 5376) = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 5384) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 5392) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 5400) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 5408) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 5416) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 5424) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 5432) = swift_task_alloc(v17);
  v18 = type metadata accessor for Locale.Language(0);
  *(_QWORD *)(v8 + 5440) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v8 + 5448) = v19;
  *(_QWORD *)(v8 + 5456) = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100004828(&qword_100639930);
  *(_QWORD *)(v8 + 5464) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Locale(0);
  *(_QWORD *)(v8 + 5472) = v21;
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v8 + 5480) = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 5488) = swift_task_alloc(v23);
  *(_QWORD *)(v8 + 5496) = swift_task_alloc(v23);
  v24 = sub_100004828(&qword_1006308F0);
  *(_QWORD *)(v8 + 5504) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v24 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002358F4, 0, 0);
}

uint64_t sub_1002358F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  const void *v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  const void *v80;
  char v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Swift::String v88;
  Swift::String v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(void);
  id v126;
  void *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  Swift::String v151;
  Swift::String v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  NSObject *v156;
  os_log_type_t v157;
  _BOOL4 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t (*v164)(uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  NSObject *v167;
  os_log_type_t v168;
  _BOOL4 v169;
  uint64_t v170;
  uint64_t v171;
  uint8_t *v172;
  uint64_t v173;
  void (*v174)(uint64_t, uint64_t);
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int (*v180)(uint64_t, uint64_t, uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  NSObject *v192;
  os_log_type_t v193;
  _BOOL4 v194;
  uint64_t v195;
  uint64_t v196;
  uint8_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void (*v216)(uint64_t, uint64_t, uint64_t);
  _QWORD *v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  os_unfair_lock_s *v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  NSObject *v229;
  os_log_type_t v230;
  _BOOL4 v231;
  void (*v232)(uint64_t, uint64_t);
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint8_t *v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  char v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  char v269;
  char v270;
  char v271;
  char v272;
  char v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  char v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void (*v299)(uint64_t, _QWORD, uint64_t);
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  uint64_t v306;
  char v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  uint64_t *v327;
  uint64_t *v328;
  uint64_t *v329;
  char v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void (*v337)(uint64_t, uint64_t);
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void (*v362)(uint64_t, uint64_t);
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371[4];

  v2 = *(_QWORD *)(v1 + 5504);
  v3 = *(_QWORD *)(v1 + 5496);
  v4 = *(_QWORD *)(v1 + 5480);
  v5 = *(_QWORD *)(v1 + 5472);
  v6 = static Locale.current.getter(a1);
  Locale.region.getter(v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v1 + 5512) = v7;
  v7(v3, v5);
  v8 = type metadata accessor for Locale.Region(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v2, 1, v8);
  v11 = *(_QWORD *)(v1 + 5504);
  v12 = (_OWORD *)&unk_10051F000;
  if (v10 == 1)
  {
    v13 = *(_QWORD *)(v1 + 5288);
    v14 = *(_QWORD *)(v1 + 5280);
    v15 = *(_QWORD *)(v1 + 5272);
    sub_100008030(*(_QWORD *)(v1 + 5504), &qword_1006308F0);
    v299 = *(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104);
    v299(v13, enum case for DIPError.Code.unexpectedDeviceState(_:), v15);
    v16 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v17 = type metadata accessor for DIPError(0);
    v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v297 = v17;
    v19 = swift_allocError(v17, v18, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x8000000100557150, 0, v13, 0, v16, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 237);
LABEL_28:
    swift_willThrow(v20);
    goto LABEL_29;
  }
  v21 = *(_QWORD *)(v1 + 5264);
  v22 = Locale.Region.identifier.getter();
  v24 = v23;
  v359 = v22;
  *(_QWORD *)(v1 + 5520) = v22;
  *(_QWORD *)(v1 + 5528) = v23;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  v25 = *(_QWORD *)(v21 + 48);
  os_unfair_lock_lock((os_unfair_lock_t)(v25 + 64));
  v26 = *(_QWORD *)(v25 + 16);
  v27 = *(_QWORD *)(v25 + 32);
  v28 = *(_QWORD *)(v25 + 56);
  v350 = *(_QWORD **)(v25 + 24);
  v365 = *(_QWORD *)(v25 + 40);
  sub_10023E048(v26, (uint64_t)v350, v27, v365, *(_QWORD *)(v25 + 48), v28);
  v29 = v26;
  os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 64));
  if (!v26)
  {
    v33 = *(_QWORD *)(v1 + 5288);
    v34 = *(_QWORD *)(v1 + 5280);
    v35 = *(_QWORD *)(v1 + 5272);
    swift_bridgeObjectRelease(v24);
    v299 = *(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104);
    v299(v33, enum case for DIPError.Code.unexpectedDaemonState(_:), v35);
    v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v37 = type metadata accessor for DIPError(0);
    v38 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v297 = v37;
    v19 = swift_allocError(v37, v38, 0, 0);
    v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x80000001005571F0, 0, v33, 0, v36, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 240);
    swift_willThrow(v39);
LABEL_8:
    v12 = (_OWORD *)&unk_10051F000;
LABEL_29:
    v302 = *(_QWORD *)(v1 + 5504);
    v304 = *(_QWORD *)(v1 + 5496);
    v306 = *(_QWORD *)(v1 + 5488);
    v308 = *(_QWORD *)(v1 + 5464);
    v310 = *(_QWORD *)(v1 + 5456);
    v313 = *(_QWORD *)(v1 + 5432);
    v315 = *(_QWORD *)(v1 + 5424);
    v318 = *(_QWORD *)(v1 + 5416);
    v323 = *(_QWORD *)(v1 + 5408);
    v327 = *(uint64_t **)(v1 + 5400);
    v331 = *(_QWORD *)(v1 + 5392);
    v335 = *(_QWORD *)(v1 + 5384);
    v338 = *(_QWORD *)(v1 + 5360);
    v342 = *(_QWORD *)(v1 + 5352);
    v347 = *(_QWORD *)(v1 + 5344);
    v352 = *(_QWORD *)(v1 + 5336);
    v356 = *(_QWORD *)(v1 + 5312);
    v360 = *(_QWORD *)(v1 + 5304);
    v367 = *(_QWORD *)(v1 + 5296);
    v105 = *(_QWORD *)(v1 + 5288);
    v106 = *(_QWORD *)(v1 + 5272);
    v107 = *(_QWORD *)(v1 + 5264);
    v108 = sub_100004828((uint64_t *)&unk_1006325A0);
    v109 = sub_100004828((uint64_t *)&unk_100633440);
    v110 = *(_QWORD *)(v109 - 8);
    v111 = *(_QWORD *)(v110 + 72);
    v112 = *(unsigned __int8 *)(v110 + 80);
    v113 = (v112 + 32) & ~v112;
    v114 = swift_allocObject(v108, v113 + v111, v112 | 7);
    *(_OWORD *)(v114 + 16) = v12[251];
    v115 = v114 + v113;
    v116 = (_QWORD *)(v115 + *(int *)(v109 + 48));
    v117 = enum case for DIPError.PropertyKey.conversationID(_:);
    v118 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 104))(v115, v117, v118);
    v119 = *(_QWORD *)(v107 + 24);
    v120 = *(_QWORD *)(v107 + 32);
    v116[3] = &type metadata for String;
    *v116 = v119;
    v116[1] = v120;
    swift_errorRetain(v19);
    swift_bridgeObjectRetain(v120);
    v121 = sub_10011D314(v114);
    v299(v105, enum case for DIPError.Code.internalError(_:), v106);
    type metadata accessor for DIPError(0);
    v122 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v297, v122, 0, 0);
    v123 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x80000001005571D0, v19, v105, 0, v121, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 318);
    swift_willThrow(v123);
    swift_errorRelease(v19);
    swift_task_dealloc(v302);
    swift_task_dealloc(v304);
    swift_task_dealloc(v306);
    swift_task_dealloc(v308);
    swift_task_dealloc(v310);
    swift_task_dealloc(v313);
    swift_task_dealloc(v315);
    swift_task_dealloc(v318);
    swift_task_dealloc(v323);
    swift_task_dealloc(v327);
    swift_task_dealloc(v331);
    swift_task_dealloc(v335);
    swift_task_dealloc(v338);
    swift_task_dealloc(v342);
    swift_task_dealloc(v347);
    swift_task_dealloc(v352);
    swift_task_dealloc(v356);
    swift_task_dealloc(v360);
    swift_task_dealloc(v367);
    swift_task_dealloc(v105);
    v124 = *(uint64_t (**)(void))(v1 + 8);
    return v124();
  }
  v355 = (void *)v24;
  v341 = v1 + 2112;
  if (!*(_QWORD *)(v26 + 16))
  {
    v40 = v365;
    if (v365)
      v41 = v365;
    else
      v41 = 0xE700000000000000;
LABEL_21:
    swift_bridgeObjectRetain(v40);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain(v24);
  v30 = sub_1004A8604(v359, v24);
  if ((v31 & 1) != 0)
  {
    v293 = v28;
    v337 = v7;
    v32 = v1 + 2848;
    v345 = v26;
    memcpy((void *)(v1 + 3952), (const void *)(*(_QWORD *)(v26 + 56) + 368 * v30), 0x169uLL);
    sub_100035A74((_QWORD *)(v1 + 3952));
    swift_bridgeObjectRelease(v24);
    memcpy((void *)(v1 + 2848), (const void *)(v1 + 3952), 0x169uLL);
    nullsub_7(v1 + 2848);
LABEL_20:
    sub_1000A1F54(v32, v1 + 2480, &qword_100639938);
    sub_1000A1F54(v1 + 2480, v1 + 3584, &qword_100639938);
    v290 = *(_QWORD *)(v1 + 3936);
    v330 = *(_BYTE *)(v1 + 3944);
    v287 = *(_BYTE *)(v1 + 3929);
    v282 = *(_QWORD *)(v1 + 3920);
    v326 = *(_BYTE *)(v1 + 3928);
    v280 = *(_QWORD *)(v1 + 3904);
    v322 = *(_BYTE *)(v1 + 3912);
    v284 = *(_QWORD *)(v1 + 3888);
    v276 = *(_BYTE *)(v1 + 3896);
    v274 = *(_QWORD *)(v1 + 3872);
    v270 = *(_BYTE *)(v1 + 3880);
    v272 = *(_BYTE *)(v1 + 3881);
    v278 = *(_QWORD *)(v1 + 3856);
    v314 = *(_QWORD *)(v1 + 3840);
    v317 = *(_QWORD *)(v1 + 3864);
    v309 = *(_QWORD *)(v1 + 3832);
    v312 = *(_QWORD *)(v1 + 3848);
    v266 = *(_QWORD *)(v1 + 3808);
    v268 = *(_BYTE *)(v1 + 3816);
    v262 = *(_QWORD *)(v1 + 3792);
    v264 = *(_BYTE *)(v1 + 3800);
    v260 = *(_BYTE *)(v1 + 3784);
    v45 = *(_BYTE *)(v1 + 3768);
    v46 = *(_QWORD *)(v1 + 3744);
    v47 = *(_BYTE *)(v1 + 3752);
    v257 = *(_QWORD *)(v1 + 3728);
    v258 = *(_QWORD *)(v1 + 3776);
    v254 = *(_QWORD *)(v1 + 3736);
    v255 = *(_QWORD *)(v1 + 3760);
    v48 = *(_QWORD *)(v1 + 3712);
    v49 = *(_QWORD *)(v1 + 3608);
    v50 = *(_QWORD *)(v1 + 3592);
    v51 = *(_QWORD *)(v1 + 3584);
    v307 = *(_BYTE *)(v1 + 3720);
    v253 = v1 + 1864;
    v305 = *(_BYTE *)(v1 + 3704);
    v296 = *(_QWORD *)(v1 + 3696);
    v298 = *(_QWORD *)(v1 + 3680);
    v294 = *(_QWORD *)(v1 + 3688);
    v52 = *(_QWORD *)(v1 + 3664);
    v334 = *(_QWORD *)(v1 + 3672);
    v53 = *(_QWORD *)(v1 + 3648);
    v54 = *(_QWORD *)(v1 + 3656);
    v55 = *(_QWORD *)(v1 + 3640);
    v300 = *(_QWORD *)(v1 + 3632);
    v301 = *(_QWORD *)(v1 + 3616);
    v295 = *(_QWORD *)(v1 + 3624);
    v303 = *(_QWORD *)(v1 + 3600);
    v56 = *(_QWORD *)(v1 + 3824);
    sub_1000A1F54(v1 + 2480, v341, &qword_100639938);
    v57 = v282;
    v58 = v284;
    v59 = v258;
    v60 = v47;
    v61 = v274;
    v62 = v262;
    v63 = v290;
    v64 = v45;
    v66 = v278;
    v65 = v280;
    v67 = v266;
    v68 = v260;
    v69 = v264;
    v71 = v268;
    v70 = v270;
    v72 = v272;
    v73 = v287;
    v74 = v276;
    v75 = v54;
    v77 = v254;
    v76 = v255;
    goto LABEL_25;
  }
  swift_bridgeObjectRelease(v24);
  v40 = v365;
  if (v365)
    v41 = v365;
  else
    v41 = 0xE700000000000000;
  if (!*(_QWORD *)(v29 + 16))
    goto LABEL_21;
  if (!v365)
    v27 = 0x746C7561666564;
  swift_bridgeObjectRetain(v365);
  v42 = sub_1004A8604(v27, v41);
  if ((v43 & 1) != 0)
  {
    v293 = v28;
    v337 = v7;
    v32 = v1 + 4688;
    v345 = v29;
    v44 = (const void *)(*(_QWORD *)(v29 + 56) + 368 * v42);
    memcpy((void *)(v1 + 4320), v44, 0x169uLL);
    memmove((void *)(v1 + 4688), v44, 0x169uLL);
    nullsub_7(v1 + 4688);
    sub_100035A74((_QWORD *)(v1 + 4320));
    swift_bridgeObjectRelease(v41);
    goto LABEL_20;
  }
LABEL_22:
  swift_bridgeObjectRelease(v41);
  if (!*(_QWORD *)(v29 + 16) || (v345 = v29, v78 = sub_1004A8604(21333, 0xE200000000000000), (v79 & 1) == 0))
  {
    v85 = *(_QWORD *)(v1 + 5288);
    v346 = v85;
    v86 = *(_QWORD *)(v1 + 5280);
    v87 = *(_QWORD *)(v1 + 5272);
    swift_bridgeObjectRelease(v350);
    swift_bridgeObjectRelease(v365);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v28);
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease(0xE000000000000000);
    strcpy((char *)v371, "device region ");
    HIBYTE(v371[1]) = -18;
    v88._countAndFlagsBits = v359;
    v88._object = v355;
    String.append(_:)(v88);
    v89._countAndFlagsBits = 0x70757320746F6E20;
    v89._object = (void *)0xEE00646574726F70;
    String.append(_:)(v89);
    v366 = v371[0];
    v351 = v371[1];
    v299 = *(void (**)(uint64_t, _QWORD, uint64_t))(v86 + 104);
    v299(v85, enum case for DIPError.Code.regionNotSupported(_:), v87);
    v90 = sub_100004828((uint64_t *)&unk_1006325A0);
    v91 = sub_100004828((uint64_t *)&unk_100633440);
    v92 = *(_QWORD *)(v91 - 8);
    v93 = *(_QWORD *)(v92 + 72);
    v94 = *(unsigned __int8 *)(v92 + 80);
    v95 = (v94 + 32) & ~v94;
    v96 = swift_allocObject(v90, v95 + v93, v94 | 7);
    *(_OWORD *)(v96 + 16) = xmmword_10051FFB0;
    v97 = v96 + v95;
    v98 = (uint64_t *)(v97 + *(int *)(v91 + 48));
    v99 = enum case for DIPError.PropertyKey.deviceRegion(_:);
    v100 = type metadata accessor for DIPError.PropertyKey(0);
    v101 = v97;
    v12 = &unk_10051F000;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 104))(v101, v99, v100);
    v98[3] = (uint64_t)&type metadata for String;
    *v98 = v359;
    v98[1] = (uint64_t)v355;
    v102 = sub_10011D314(v96);
    v103 = type metadata accessor for DIPError(0);
    v104 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v297 = v103;
    v19 = swift_allocError(v103, v104, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v366, v351, 0, v346, 0, v102, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 244);
    goto LABEL_28;
  }
  v293 = v28;
  v337 = v7;
  v80 = (const void *)(*(_QWORD *)(v29 + 56) + 368 * v78);
  memcpy((void *)(v1 + 1744), v80, 0x169uLL);
  memmove((void *)(v1 + 3216), v80, 0x169uLL);
  nullsub_7(v1 + 3216);
  v291 = *(_QWORD *)(v1 + 2096);
  v330 = *(_BYTE *)(v1 + 2104);
  v288 = *(_BYTE *)(v1 + 2089);
  v283 = *(_QWORD *)(v1 + 2080);
  v326 = *(_BYTE *)(v1 + 2088);
  v281 = *(_QWORD *)(v1 + 2064);
  v322 = *(_BYTE *)(v1 + 2072);
  v285 = *(_QWORD *)(v1 + 2048);
  v277 = *(_BYTE *)(v1 + 2056);
  v275 = *(_QWORD *)(v1 + 2032);
  v271 = *(_BYTE *)(v1 + 2040);
  v273 = *(_BYTE *)(v1 + 2041);
  v279 = *(_QWORD *)(v1 + 2016);
  v314 = *(_QWORD *)(v1 + 2000);
  v317 = *(_QWORD *)(v1 + 2024);
  v312 = *(_QWORD *)(v1 + 2008);
  v252 = *(_QWORD *)(v1 + 1984);
  v309 = *(_QWORD *)(v1 + 1992);
  v267 = *(_QWORD *)(v1 + 1968);
  v269 = *(_BYTE *)(v1 + 1976);
  v263 = *(_QWORD *)(v1 + 1952);
  v265 = *(_BYTE *)(v1 + 1960);
  v261 = *(_BYTE *)(v1 + 1944);
  v256 = *(_QWORD *)(v1 + 1920);
  LOBYTE(v80) = *(_BYTE *)(v1 + 1928);
  v251 = *(_QWORD *)(v1 + 1904);
  v81 = *(_BYTE *)(v1 + 1912);
  v257 = *(_QWORD *)(v1 + 1888);
  v259 = *(_QWORD *)(v1 + 1936);
  v77 = *(_QWORD *)(v1 + 1896);
  v48 = *(_QWORD *)(v1 + 1872);
  v49 = *(_QWORD *)(v1 + 1768);
  v50 = *(_QWORD *)(v1 + 1752);
  v51 = *(_QWORD *)(v1 + 1744);
  v307 = *(_BYTE *)(v1 + 1880);
  v253 = v1 + 1864;
  v305 = *(_BYTE *)(v1 + 1864);
  v296 = *(_QWORD *)(v1 + 1856);
  v298 = *(_QWORD *)(v1 + 1840);
  v294 = *(_QWORD *)(v1 + 1848);
  v52 = *(_QWORD *)(v1 + 1824);
  v334 = *(_QWORD *)(v1 + 1832);
  v53 = *(_QWORD *)(v1 + 1808);
  v82 = *(_QWORD *)(v1 + 1816);
  v55 = *(_QWORD *)(v1 + 1800);
  v300 = *(_QWORD *)(v1 + 1792);
  v301 = *(_QWORD *)(v1 + 1776);
  v295 = *(_QWORD *)(v1 + 1784);
  v303 = *(_QWORD *)(v1 + 1760);
  sub_100035A74((_QWORD *)(v1 + 1744));
  v56 = v252;
  sub_1000A1F54(v1 + 3216, v341, &qword_100639938);
  v76 = v256;
  v65 = v281;
  v57 = v283;
  v59 = v259;
  v60 = v81;
  v62 = v263;
  v63 = v291;
  v64 = (char)v80;
  v46 = v251;
  v61 = v275;
  v67 = v267;
  v68 = v261;
  v69 = v265;
  v71 = v269;
  v70 = v271;
  v72 = v273;
  v73 = v288;
  v74 = v277;
  v75 = v82;
  v66 = v279;
  v58 = v285;
LABEL_25:
  *(_QWORD *)(v1 + 5800) = v63;
  *(_QWORD *)(v1 + 5792) = v57;
  *(_QWORD *)(v1 + 5784) = v65;
  *(_QWORD *)(v1 + 5776) = v58;
  *(_QWORD *)(v1 + 5768) = v61;
  *(_QWORD *)(v1 + 5760) = v317;
  *(_QWORD *)(v1 + 5752) = v66;
  *(_QWORD *)(v1 + 5744) = v312;
  *(_QWORD *)(v1 + 5736) = v314;
  *(_QWORD *)(v1 + 5728) = v309;
  *(_BYTE *)(v1 + 5962) = v73;
  *(_BYTE *)(v1 + 5961) = v72;
  *(_QWORD *)(v1 + 5720) = v56;
  *(_QWORD *)(v1 + 5712) = v67;
  *(_QWORD *)(v1 + 5704) = v62;
  *(_QWORD *)(v1 + 5696) = v59;
  *(_QWORD *)(v1 + 5688) = v76;
  *(_QWORD *)(v1 + 5680) = v46;
  *(_QWORD *)(v1 + 5672) = v77;
  *(_QWORD *)(v1 + 5664) = v257;
  *(_QWORD *)(v1 + 5656) = v48;
  *(_QWORD *)(v1 + 5648) = v296;
  *(_QWORD *)(v1 + 5640) = v294;
  *(_QWORD *)(v1 + 5632) = v298;
  *(_QWORD *)(v1 + 5624) = v334;
  *(_QWORD *)(v1 + 5616) = v52;
  *(_QWORD *)(v1 + 5608) = v75;
  *(_QWORD *)(v1 + 5600) = v53;
  *(_QWORD *)(v1 + 5592) = v55;
  *(_QWORD *)(v1 + 5584) = v300;
  *(_QWORD *)(v1 + 5576) = v295;
  *(_QWORD *)(v1 + 5568) = v301;
  *(_QWORD *)(v1 + 5560) = v49;
  *(_QWORD *)(v1 + 5552) = v303;
  *(_QWORD *)(v1 + 5544) = v50;
  *(_QWORD *)(v1 + 5536) = v51;
  v83 = *(void **)(v1 + 5240);
  *(_BYTE *)(v1 + 5960) = v305;
  *(_BYTE *)(v1 + 6024) = v307;
  *(_BYTE *)(v1 + 6016) = v60;
  *(_BYTE *)(v1 + 6008) = v64;
  *(_BYTE *)(v1 + 6000) = v68;
  *(_BYTE *)(v1 + 5992) = v69;
  *(_BYTE *)(v1 + 5984) = v71;
  *(_BYTE *)(v1 + 5976) = v70;
  *(_BYTE *)(v1 + 6032) = v74;
  *(_BYTE *)(v1 + 5968) = v322;
  *(_BYTE *)(v1 + 5952) = v326;
  *(_BYTE *)(v1 + 5944) = v330;
  v286 = v52;
  v289 = v75;
  v292 = v53;
  if (v83)
  {
    v84 = *(_QWORD *)(v1 + 5232);
  }
  else
  {
    v126 = objc_msgSend((id)objc_opt_self(NSLocale), "_deviceLanguage");
    if (v126)
    {
      v127 = v126;
      v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
      v83 = v128;

    }
    else
    {
      v84 = 0;
      v83 = (void *)0xE000000000000000;
    }
  }
  *(_QWORD *)(v1 + 5816) = v83;
  *(_QWORD *)(v1 + 5808) = v84;
  v129 = *(_QWORD *)(v1 + 5464);
  v130 = *(_QWORD *)(v1 + 5456);
  v131 = *(_QWORD *)(v1 + 5448);
  v132 = *(_QWORD *)(v1 + 5440);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 5240));
  swift_bridgeObjectRetain(v83);
  v133 = Locale.init(identifier:)(v84, v83);
  v134 = Locale.language.getter(v133);
  Locale.Language.languageCode.getter(v134);
  (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
  v135 = type metadata accessor for Locale.LanguageCode(0);
  v136 = *(_QWORD *)(v135 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v129, 1, v135) == 1)
  {
    v137 = *(_QWORD *)(v1 + 5488);
    v138 = *(_QWORD *)(v1 + 5472);
    v139 = *(_QWORD *)(v1 + 5464);
    v140 = *(_QWORD *)(v1 + 5288);
    v141 = *(_QWORD *)(v1 + 5280);
    v142 = *(_QWORD *)(v1 + 5272);
    sub_10023DD1C(v341);
    swift_bridgeObjectRelease(v345);
    swift_bridgeObjectRelease(v350);
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v355);
    swift_bridgeObjectRelease(v365);
    swift_bridgeObjectRelease(v293);
    sub_100008030(v139, &qword_100639930);
    v299 = *(void (**)(uint64_t, _QWORD, uint64_t))(v141 + 104);
    v299(v140, enum case for DIPError.Code.unexpectedDeviceState(_:), v142);
    v143 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v144 = type metadata accessor for DIPError(0);
    v145 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v297 = v144;
    v19 = swift_allocError(v144, v145, 0, 0);
    v146 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100557220, 0, v140, 0, v143, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 250);
    swift_willThrow(v146);
    v337(v137, v138);
    v12 = (_OWORD *)&unk_10051F000;
    goto LABEL_29;
  }
  v328 = (uint64_t *)(v1 + 5208);
  v147 = *(_QWORD *)(v1 + 5464);
  v148 = Locale.LanguageCode.identifier.getter();
  v150 = v149;
  (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v147, v135);
  v371[0] = v148;
  v371[1] = v150;
  swift_bridgeObjectRetain(v150);
  v151._countAndFlagsBits = 45;
  v151._object = (void *)0xE100000000000000;
  String.append(_:)(v151);
  swift_bridgeObjectRelease(v150);
  swift_bridgeObjectRetain(v150);
  v152._object = v355;
  v152._countAndFlagsBits = v359;
  String.append(_:)(v152);
  v153 = swift_bridgeObjectRelease(v150);
  v154 = v150;
  v324 = v148;
  defaultLogger()(v153);
  v155 = swift_bridgeObjectRetain_n(v83, 2);
  v156 = Logger.logObject.getter(v155);
  v157 = static os_log_type_t.default.getter();
  v158 = os_log_type_enabled(v156, v157);
  v159 = *(_QWORD *)(v1 + 5432);
  v160 = *(_QWORD *)(v1 + 5376);
  v161 = *(_QWORD *)(v1 + 5368);
  v332 = v84;
  if (v158)
  {
    v361 = *(_QWORD *)(v1 + 5432);
    v162 = (uint8_t *)swift_slowAlloc(12, -1);
    v319 = v161;
    v163 = swift_slowAlloc(32, -1);
    v371[0] = v163;
    *(_DWORD *)v162 = 136446210;
    swift_bridgeObjectRetain(v83);
    *(_QWORD *)(v1 + 5184) = sub_1000E3AC8(v84, (unint64_t)v83, v371);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5184, v1 + 5192, v162 + 4);
    swift_bridgeObjectRelease_n(v83, 3);
    _os_log_impl((void *)&_mh_execute_header, v156, v157, "deviceLanguage = %{public}s", v162, 0xCu);
    swift_arrayDestroy(v163, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v163, -1, -1);
    swift_slowDealloc(v162, -1, -1);

    v164 = *(uint64_t (**)(uint64_t, uint64_t))(v160 + 8);
    v165 = v164(v361, v319);
  }
  else
  {
    swift_bridgeObjectRelease_n(v83, 2);

    v164 = *(uint64_t (**)(uint64_t, uint64_t))(v160 + 8);
    v165 = v164(v159, v161);
  }
  v320 = v1 + 5216;
  *(_QWORD *)(v1 + 5824) = v164;
  defaultLogger()(v165);
  swift_bridgeObjectRetain(v154);
  v167 = Logger.logObject.getter(v166);
  v168 = static os_log_type_t.default.getter();
  v169 = os_log_type_enabled(v167, v168);
  v170 = *(_QWORD *)(v1 + 5424);
  v171 = *(_QWORD *)(v1 + 5368);
  v362 = (void (*)(uint64_t, uint64_t))v164;
  if (v169)
  {
    v172 = (uint8_t *)swift_slowAlloc(12, -1);
    v311 = v170;
    v173 = swift_slowAlloc(32, -1);
    v371[0] = v173;
    *(_DWORD *)v172 = 136446210;
    swift_bridgeObjectRetain(v154);
    *(_QWORD *)(v1 + 5200) = sub_1000E3AC8(v324, v154, v371);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5200, v328, v172 + 4);
    swift_bridgeObjectRelease_n(v154, 3);
    _os_log_impl((void *)&_mh_execute_header, v167, v168, "languageRegion = %{public}s", v172, 0xCu);
    swift_arrayDestroy(v173, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v173, -1, -1);
    swift_slowDealloc(v172, -1, -1);

    v164(v311, v171);
  }
  else
  {
    swift_bridgeObjectRelease_n(v154, 2);

    v164(v170, v171);
  }
  v174 = v337;
  v175 = sub_1001B2720(v332, (uint64_t)v83, v350);
  swift_bridgeObjectRelease(v345);
  swift_bridgeObjectRelease(v350);
  swift_bridgeObjectRelease(v365);
  v176 = swift_bridgeObjectRelease(v293);
  if ((v175 & 1) != 0)
  {
    v177 = *(_QWORD *)(v1 + 5328);
    v178 = *(_QWORD *)(v1 + 5320);
    v179 = *(_QWORD *)(v1 + 5312);
    sub_10023C2E0(v292, v289, v332, v83, *(_QWORD *)(v1 + 5248), *(_QWORD *)(v1 + 5256), v179);
    v180 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48);
    if (v180(v179, 1, v178) == 1)
    {
      v181 = *(_QWORD *)(v1 + 5488);
      v182 = *(_QWORD *)(v1 + 5472);
      v183 = *(_QWORD *)(v1 + 5312);
      v184 = *(_QWORD *)(v1 + 5288);
      v185 = *(_QWORD *)(v1 + 5280);
      v186 = *(_QWORD *)(v1 + 5272);
      swift_bridgeObjectRelease(v355);
      swift_bridgeObjectRelease(v83);
      sub_10023DD1C(v341);
      sub_100008030(v183, &qword_100630A48);
      v299 = *(void (**)(uint64_t, _QWORD, uint64_t))(v185 + 104);
      v299(v184, enum case for DIPError.Code.serverResponseInconsistent(_:), v186);
      v187 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v188 = type metadata accessor for DIPError(0);
      v189 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v297 = v188;
      v19 = swift_allocError(v188, v189, 0, 0);
      v190 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x80000001005572E0, 0, v184, 0, v187, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 260);
LABEL_51:
      swift_willThrow(v190);
      v174(v181, v182);
      goto LABEL_8;
    }
    v201 = *(_QWORD *)(v1 + 5360);
    v202 = *(_QWORD *)(v1 + 5352);
    v203 = *(_QWORD *)(v1 + 5328);
    v204 = *(_QWORD *)(v1 + 5320);
    v205 = *(_QWORD *)(v1 + 5312);
  }
  else
  {
    defaultLogger()(v176);
    v191 = swift_bridgeObjectRetain_n(v83, 2);
    v192 = Logger.logObject.getter(v191);
    v193 = static os_log_type_t.default.getter();
    v194 = os_log_type_enabled(v192, v193);
    v195 = *(_QWORD *)(v1 + 5416);
    v196 = *(_QWORD *)(v1 + 5368);
    if (v194)
    {
      v368 = *(_QWORD *)(v1 + 5368);
      v197 = (uint8_t *)swift_slowAlloc(12, -1);
      v198 = swift_slowAlloc(32, -1);
      v371[0] = v198;
      *(_DWORD *)v197 = 136446210;
      swift_bridgeObjectRetain(v83);
      *(_QWORD *)(v1 + 5216) = sub_1000E3AC8(v332, (unint64_t)v83, v371);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v320, v1 + 5224, v197 + 4);
      swift_bridgeObjectRelease_n(v83, 3);
      _os_log_impl((void *)&_mh_execute_header, v192, v193, "Doesn't contain deviceLanguage = %{public}s fetching default attribute config", v197, 0xCu);
      swift_arrayDestroy(v198, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v198, -1, -1);
      swift_slowDealloc(v197, -1, -1);

      v199 = v195;
      v200 = v368;
    }
    else
    {
      swift_bridgeObjectRelease_n(v83, 2);

      v199 = v195;
      v200 = v196;
    }
    v362(v199, v200);
    v174 = v337;
    v206 = *(_QWORD *)(v1 + 5328);
    v207 = *(_QWORD *)(v1 + 5320);
    v208 = *(_QWORD *)(v1 + 5304);
    URL.init(string:)(v286, v334);
    v180 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v206 + 48);
    if (v180(v208, 1, v207) == 1)
    {
      v181 = *(_QWORD *)(v1 + 5488);
      v182 = *(_QWORD *)(v1 + 5472);
      v209 = *(_QWORD *)(v1 + 5304);
      v210 = *(_QWORD *)(v1 + 5288);
      v211 = *(_QWORD *)(v1 + 5280);
      v212 = *(_QWORD *)(v1 + 5272);
      swift_bridgeObjectRelease(v355);
      swift_bridgeObjectRelease(v83);
      sub_10023DD1C(v341);
      sub_100008030(v209, &qword_100630A48);
      v299 = *(void (**)(uint64_t, _QWORD, uint64_t))(v211 + 104);
      v299(v210, enum case for DIPError.Code.serverResponseInconsistent(_:), v212);
      v213 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v214 = type metadata accessor for DIPError(0);
      v215 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v297 = v214;
      v19 = swift_allocError(v214, v215, 0, 0);
      v190 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100557240, 0, v210, 0, v213, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 266);
      goto LABEL_51;
    }
    v201 = *(_QWORD *)(v1 + 5360);
    v202 = *(_QWORD *)(v1 + 5344);
    v203 = *(_QWORD *)(v1 + 5328);
    v204 = *(_QWORD *)(v1 + 5320);
    v205 = *(_QWORD *)(v1 + 5304);
  }
  v216 = *(void (**)(uint64_t, uint64_t, uint64_t))(v203 + 32);
  v216(v202, v205, v204);
  v216(v201, v202, v204);
  *(_QWORD *)(v1 + 5840) = v180;
  *(_QWORD *)(v1 + 5832) = v216;
  if (*(_BYTE *)(v253 + 4089) != 1)
  {
    *(_DWORD *)(v1 + 1033) = *(_DWORD *)(v1 + 4313);
    *(_DWORD *)(v1 + 1049) = *(_DWORD *)(v1 + 5049);
    *(_DWORD *)(v1 + 1084) = *(_DWORD *)(v1 + 4684);
    *(_DWORD *)(v1 + 1081) = *(_DWORD *)(v1 + 4681);
    *(_DWORD *)(v1 + 1100) = *(_DWORD *)(v1 + 3948);
    *(_DWORD *)(v1 + 1097) = *(_DWORD *)(v1 + 3945);
    *(_DWORD *)(v1 + 1116) = *(_DWORD *)(v1 + 3580);
    *(_DWORD *)(v1 + 1113) = *(_DWORD *)(v1 + 3577);
    *(_DWORD *)(v1 + 1132) = *(_DWORD *)(v1 + 3212);
    *(_DWORD *)(v1 + 1129) = *(_DWORD *)(v1 + 3209);
    *(_DWORD *)(v1 + 1148) = *(_DWORD *)(v1 + 2476);
    *(_DWORD *)(v1 + 1145) = *(_DWORD *)(v1 + 2473);
    *(_DWORD *)(v1 + 1210) = *(_DWORD *)(v1 + 5946);
    *(_DWORD *)(v1 + 1228) = *(_DWORD *)(v1 + 2844);
    *(_DWORD *)(v1 + 1225) = *(_DWORD *)(v1 + 2841);
    *(_DWORD *)(v1 + 1244) = *(_DWORD *)(v1 + 2108);
    *(_DWORD *)(v1 + 1241) = *(_DWORD *)(v1 + 2105);
    *(_DWORD *)(v1 + 1258) = *(_DWORD *)(v1 + 5954);
    *(_QWORD *)(v1 + 896) = *(_QWORD *)(v1 + 5808);
    *(_QWORD *)(v1 + 904) = *(_QWORD *)(v1 + 5816);
    *(_QWORD *)(v1 + 928) = *(_QWORD *)(v1 + 5552);
    *(_QWORD *)(v1 + 944) = *(_QWORD *)(v1 + 5568);
    *(_QWORD *)(v1 + 952) = *(_QWORD *)(v1 + 5576);
    *(_QWORD *)(v1 + 992) = *(_QWORD *)(v1 + 5616);
    *(_QWORD *)(v1 + 1000) = *(_QWORD *)(v1 + 5624);
    *(_QWORD *)(v1 + 1024) = *(_QWORD *)(v1 + 5648);
    *(_BYTE *)(v1 + 1032) = *(_BYTE *)(v1 + 5960);
    *(_DWORD *)(v1 + 1036) = *(_DWORD *)(v1 + 4316);
    *(_QWORD *)(v1 + 1040) = *(_QWORD *)(v1 + 5656);
    *(_BYTE *)(v1 + 1048) = *(_BYTE *)(v1 + 6024);
    *(_DWORD *)(v1 + 1052) = *(_DWORD *)(v1 + 5052);
    *(_QWORD *)(v1 + 1072) = *(_QWORD *)(v1 + 5680);
    *(_BYTE *)(v1 + 1080) = *(_BYTE *)(v1 + 6016);
    *(_QWORD *)(v1 + 1088) = *(_QWORD *)(v1 + 5688);
    *(_BYTE *)(v1 + 1096) = *(_BYTE *)(v1 + 6008);
    *(_QWORD *)(v1 + 1104) = *(_QWORD *)(v1 + 5696);
    *(_BYTE *)(v1 + 1112) = *(_BYTE *)(v1 + 6000);
    *(_QWORD *)(v1 + 1120) = *(_QWORD *)(v1 + 5704);
    *(_BYTE *)(v1 + 1128) = *(_BYTE *)(v1 + 5992);
    *(_QWORD *)(v1 + 1136) = *(_QWORD *)(v1 + 5712);
    *(_BYTE *)(v1 + 1144) = *(_BYTE *)(v1 + 5984);
    *(_QWORD *)(v1 + 1200) = *(_QWORD *)(v1 + 5768);
    *(_BYTE *)(v1 + 1208) = *(_BYTE *)(v1 + 5976);
    *(_BYTE *)(v1 + 1209) = *(_BYTE *)(v1 + 5961);
    *(_WORD *)(v1 + 1214) = *(_WORD *)(v1 + 5950);
    *(_QWORD *)(v1 + 1216) = *(_QWORD *)(v1 + 5776);
    *(_BYTE *)(v1 + 1224) = *(_BYTE *)(v1 + 6032);
    *(_QWORD *)(v1 + 1232) = *(_QWORD *)(v1 + 5784);
    *(_BYTE *)(v1 + 1240) = *(_BYTE *)(v1 + 5968);
    *(_QWORD *)(v1 + 1248) = *(_QWORD *)(v1 + 5792);
    *(_BYTE *)(v1 + 1256) = *(_BYTE *)(v253 + 4088);
    *(_BYTE *)(v1 + 1257) = *(_BYTE *)(v1 + 5962);
    *(_WORD *)(v1 + 1262) = *(_WORD *)(v1 + 5958);
    *(_QWORD *)(v1 + 1264) = *(_QWORD *)(v1 + 5800);
    v218 = *(_OWORD *)(v1 + 5664);
    v219 = *(_OWORD *)(v1 + 5600);
    v220 = *(_QWORD *)(v1 + 5560);
    *(_OWORD *)(v1 + 880) = *(_OWORD *)(v1 + 5520);
    *(_OWORD *)(v1 + 912) = *(_OWORD *)(v1 + 5536);
    *(_QWORD *)(v1 + 936) = v220;
    *(_OWORD *)(v1 + 960) = *(_OWORD *)(v1 + 5584);
    *(_OWORD *)(v1 + 976) = v219;
    *(_OWORD *)(v1 + 1008) = *(_OWORD *)(v1 + 5632);
    v221 = *(_OWORD *)(v253 + 3856);
    v222 = *(_OWORD *)(v253 + 3872);
    v223 = *(_OWORD *)(v253 + 3888);
    *(_BYTE *)(v1 + 1272) = *(_BYTE *)(v253 + 4080);
    v224 = *(_QWORD *)(v1 + 5264);
    *(_OWORD *)(v1 + 1056) = v218;
    *(_OWORD *)(v1 + 1152) = v221;
    *(_OWORD *)(v1 + 1168) = v222;
    *(_OWORD *)(v1 + 1184) = v223;
    *(_OWORD *)(v1 + 1296) = 0u;
    *(_OWORD *)(v1 + 1280) = 0u;
    memcpy((void *)(v1 + 1312), (const void *)(v1 + 880), 0x1B0uLL);
    nullsub_7(v1 + 1312);
    sub_1000A1F54(v1 + 1312, v1 + 16, &qword_100632330);
    v225 = *(os_unfair_lock_s **)(v224 + 56);
    v226 = swift_task_alloc(32);
    *(_QWORD *)(v226 + 16) = v1 + 16;
    sub_10023DE58((_QWORD *)(v1 + 880));
    os_unfair_lock_lock(v225 + 112);
    sub_100235640((uint64_t)&v225[4], *(_QWORD *)(v226 + 16));
    os_unfair_lock_unlock(v225 + 112);
    sub_1000A7F60((_QWORD *)(v1 + 880));
    v227 = swift_task_dealloc(v226);
    defaultLogger()(v227);
    sub_10023DE58((_QWORD *)(v1 + 880));
    v228 = sub_10023DE58((_QWORD *)(v1 + 880));
    v229 = Logger.logObject.getter(v228);
    v230 = static os_log_type_t.debug.getter(v229);
    v231 = os_log_type_enabled(v229, v230);
    v232 = *(void (**)(uint64_t, uint64_t))(v1 + 5512);
    v233 = *(_QWORD *)(v1 + 5488);
    v234 = *(_QWORD *)(v1 + 5472);
    v235 = *(_QWORD *)(v1 + 5376);
    v357 = *(_QWORD *)(v1 + 5368);
    v236 = *(_QWORD *)(v1 + 5360);
    v363 = *(_QWORD *)(v1 + 5328);
    v369 = *(_QWORD *)(v1 + 5408);
    v237 = *(_QWORD *)(v1 + 5320);
    if (v231)
    {
      v348 = *(_QWORD *)(v1 + 5320);
      v353 = *(_QWORD *)(v1 + 5472);
      v343 = *(_QWORD *)(v1 + 5360);
      v238 = (uint8_t *)swift_slowAlloc(12, -1);
      v339 = v233;
      v239 = swift_slowAlloc(32, -1);
      v371[0] = v239;
      *(_DWORD *)v238 = 136315138;
      memcpy((void *)(v1 + 448), (const void *)(v1 + 880), 0x1B0uLL);
      sub_10023DE58((_QWORD *)(v1 + 880));
      v240 = String.init<A>(describing:)(v1 + 448, &type metadata for ActiveConfig);
      v242 = v241;
      *v328 = sub_1000E3AC8(v240, v241, v371);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v328, v320, v238 + 4);
      swift_bridgeObjectRelease(v242);
      sub_1000A7F60((_QWORD *)(v1 + 880));
      sub_1000A7F60((_QWORD *)(v1 + 880));
      _os_log_impl((void *)&_mh_execute_header, v229, v230, "active config file: \n %s", v238, 0xCu);
      swift_arrayDestroy(v239, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v239, -1, -1);
      swift_slowDealloc(v238, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v235 + 8))(v369, v357);
      (*(void (**)(uint64_t, uint64_t))(v363 + 8))(v343, v348);
      v232(v339, v353);
    }
    else
    {

      sub_1000A7F60((_QWORD *)(v1 + 880));
      sub_1000A7F60((_QWORD *)(v1 + 880));
      (*(void (**)(uint64_t, uint64_t))(v235 + 8))(v369, v357);
      (*(void (**)(uint64_t, uint64_t))(v363 + 8))(v236, v237);
      v232(v233, v234);
    }
    v243 = *(_QWORD *)(v1 + 5504);
    v244 = *(_QWORD *)(v1 + 5496);
    v245 = *(_QWORD *)(v1 + 5488);
    v246 = *(_QWORD *)(v1 + 5464);
    v247 = *(_QWORD *)(v1 + 5456);
    v248 = *(_QWORD *)(v1 + 5432);
    v249 = *(_QWORD *)(v1 + 5424);
    v316 = *(_QWORD *)(v1 + 5416);
    v321 = *(_QWORD *)(v1 + 5408);
    v325 = *(_QWORD *)(v1 + 5400);
    v329 = *(uint64_t **)(v1 + 5392);
    v333 = *(_QWORD *)(v1 + 5384);
    v336 = *(_QWORD *)(v1 + 5360);
    v340 = *(_QWORD *)(v1 + 5352);
    v344 = *(_QWORD *)(v1 + 5344);
    v349 = *(_QWORD *)(v1 + 5336);
    v354 = *(_QWORD *)(v1 + 5312);
    v358 = *(_QWORD *)(v1 + 5304);
    v364 = *(_QWORD *)(v1 + 5296);
    v370 = *(_QWORD *)(v1 + 5288);
    v250 = *(void **)(v1 + 5224);
    sub_10023DF58(0, 0, 0, 0);
    memcpy(v250, (const void *)(v1 + 880), 0x1B0uLL);
    swift_task_dealloc(v243);
    swift_task_dealloc(v244);
    swift_task_dealloc(v245);
    swift_task_dealloc(v246);
    swift_task_dealloc(v247);
    swift_task_dealloc(v248);
    swift_task_dealloc(v249);
    swift_task_dealloc(v316);
    swift_task_dealloc(v321);
    swift_task_dealloc(v325);
    swift_task_dealloc(v329);
    swift_task_dealloc(v333);
    swift_task_dealloc(v336);
    swift_task_dealloc(v340);
    swift_task_dealloc(v344);
    swift_task_dealloc(v349);
    swift_task_dealloc(v354);
    swift_task_dealloc(v358);
    swift_task_dealloc(v364);
    swift_task_dealloc(v370);
    v124 = *(uint64_t (**)(void))(v1 + 8);
    return v124();
  }
  v217 = (_QWORD *)swift_task_alloc(dword_100639944);
  *(_QWORD *)(v1 + 5848) = v217;
  *v217 = v1;
  v217[1] = sub_100237858;
  return sub_10023C49C(*(_QWORD *)(v1 + 5360), *(_BYTE *)(v253 + 4081));
}

uint64_t sub_100237858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;

  v6 = (_QWORD *)*v5;
  v6[632] = v5;
  v6[633] = a1;
  v6[634] = a2;
  v6[635] = a3;
  v6[636] = a4;
  v6[637] = v4;
  v7 = v6[731];
  v6[732] = v4;
  swift_task_dealloc(v7);
  if (v4)
    v8 = sub_100238524;
  else
    v8 = sub_1002378D4;
  return swift_task_switch(v8, 0, 0);
}

void sub_1002378D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, _QWORD, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  void (*v142)(uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144[3];

  v1 = *(_QWORD *)(v0 + 5856);
  v2 = *(_QWORD *)(v0 + 5064);
  v3 = *(_QWORD *)(v0 + 5072);
  v4 = *(_QWORD *)(v0 + 5080);
  v5 = *(_QWORD *)(v0 + 5088);
  sub_10023DF58(0, 0, 0, 0);
  if (!v2)
  {
    v135 = v4;
    v138 = v5;
    v12 = *(_QWORD *)(v0 + 5816);
    v142 = *(void (**)(uint64_t, uint64_t))(v0 + 5512);
    v124 = *(_QWORD *)(v0 + 5488);
    v13 = *(_QWORD *)(v0 + 5472);
    v14 = *(_QWORD *)(v0 + 5360);
    v15 = *(_QWORD *)(v0 + 5328);
    v16 = *(_QWORD *)(v0 + 5320);
    v132 = v3;
    v17 = *(_QWORD *)(v0 + 5288);
    v18 = *(_QWORD *)(v0 + 5280);
    v19 = *(_QWORD *)(v0 + 5272);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 5528));
    swift_bridgeObjectRelease(v12);
    sub_10023DD1C(v0 + 2112);
    v129 = *(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104);
    v129(v17, enum case for DIPError.Code.unexpectedDaemonState(_:), v19);
    v20 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v97 = type metadata accessor for DIPError(0);
    v94 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v21 = swift_allocError(v97, v94, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000036, 0x80000001005572A0, 0, v17, 0, v20, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 299);
    swift_willThrow(v22);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    v142(v124, v13);
    sub_10023DF58(0, v132, v135, v138);
    v76 = *(_QWORD *)(v0 + 5504);
    v78 = *(_QWORD *)(v0 + 5496);
    v80 = *(_QWORD *)(v0 + 5488);
    v82 = *(_QWORD *)(v0 + 5464);
    v84 = *(_QWORD *)(v0 + 5456);
    v88 = *(_QWORD *)(v0 + 5432);
    v91 = *(_QWORD *)(v0 + 5424);
    v100 = *(_QWORD *)(v0 + 5416);
    v103 = *(_QWORD *)(v0 + 5408);
    v106 = *(_QWORD *)(v0 + 5400);
    v110 = *(_QWORD *)(v0 + 5392);
    v114 = *(_QWORD *)(v0 + 5384);
    v117 = *(_QWORD *)(v0 + 5360);
    v120 = *(_QWORD *)(v0 + 5352);
    v125 = *(_QWORD *)(v0 + 5344);
    v133 = *(_QWORD *)(v0 + 5336);
    v136 = *(_QWORD *)(v0 + 5312);
    v139 = *(_QWORD *)(v0 + 5304);
    v143 = *(_QWORD *)(v0 + 5296);
    v23 = *(_QWORD *)(v0 + 5288);
    v24 = *(_QWORD *)(v0 + 5272);
    v25 = *(_QWORD *)(v0 + 5264);
    v26 = sub_100004828((uint64_t *)&unk_1006325A0);
    v27 = sub_100004828((uint64_t *)&unk_100633440);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(_QWORD *)(v28 + 72);
    v30 = *(unsigned __int8 *)(v28 + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = swift_allocObject(v26, v31 + v29, v30 | 7);
    *(_OWORD *)(v32 + 16) = xmmword_10051FFB0;
    v33 = v32 + v31;
    v34 = (_QWORD *)(v33 + *(int *)(v27 + 48));
    v35 = enum case for DIPError.PropertyKey.conversationID(_:);
    v36 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v33, v35, v36);
    v37 = *(_QWORD *)(v25 + 24);
    v38 = *(_QWORD *)(v25 + 32);
    v34[3] = &type metadata for String;
    *v34 = v37;
    v34[1] = v38;
    swift_errorRetain(v21);
    swift_bridgeObjectRetain(v38);
    v39 = sub_10011D314(v32);
    v129(v23, enum case for DIPError.Code.internalError(_:), v24);
    swift_allocError(v97, v94, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x80000001005571D0, v21, v23, 0, v39, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 318);
    swift_willThrow(v40);
    swift_errorRelease(v21);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v88);
    swift_task_dealloc(v91);
    swift_task_dealloc(v100);
    swift_task_dealloc(v103);
    swift_task_dealloc(v106);
    swift_task_dealloc(v110);
    swift_task_dealloc(v114);
    swift_task_dealloc(v117);
    swift_task_dealloc(v120);
    swift_task_dealloc(v125);
    swift_task_dealloc(v133);
    swift_task_dealloc(v136);
    swift_task_dealloc(v139);
    swift_task_dealloc(v143);
    swift_task_dealloc(v23);
    v41 = *(void (**)(void))(v0 + 8);
LABEL_9:
    v41();
    return;
  }
  v85 = *(_QWORD *)(v0 + 5816);
  v81 = *(_QWORD *)(v0 + 5808);
  v141 = (_QWORD *)(v0 + 880);
  v128 = *(_QWORD *)(v0 + 5800);
  v119 = *(_BYTE *)(v0 + 5962);
  v116 = *(_QWORD *)(v0 + 5792);
  v109 = *(_QWORD *)(v0 + 5784);
  v123 = *(_OWORD *)(v0 + 5752);
  v96 = *(_QWORD *)(v0 + 5776);
  v113 = *(_OWORD *)(v0 + 5736);
  v87 = *(_BYTE *)(v0 + 5961);
  v105 = *(_OWORD *)(v0 + 5720);
  v75 = *(_QWORD *)(v0 + 5712);
  v77 = *(_QWORD *)(v0 + 5768);
  v72 = *(_QWORD *)(v0 + 5696);
  v73 = *(_QWORD *)(v0 + 5704);
  v71 = *(_QWORD *)(v0 + 5688);
  v99 = *(_OWORD *)(v0 + 5664);
  v69 = *(_QWORD *)(v0 + 5656);
  v70 = *(_QWORD *)(v0 + 5680);
  v68 = *(_QWORD *)(v0 + 5648);
  v90 = *(_OWORD *)(v0 + 5616);
  v93 = *(_OWORD *)(v0 + 5632);
  v86 = *(_OWORD *)(v0 + 5600);
  v83 = *(_OWORD *)(v0 + 5584);
  v79 = *(_OWORD *)(v0 + 5568);
  v6 = *(_QWORD *)(v0 + 5560);
  v7 = *(_QWORD *)(v0 + 5544);
  v8 = *(_QWORD *)(v0 + 5536);
  v74 = *(_OWORD *)(v0 + 5520);
  v67 = *(_QWORD *)(v0 + 5552);
  v102 = *(_QWORD *)(v0 + 5264);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  *(_DWORD *)(v0 + 1033) = *(_DWORD *)(v0 + 4313);
  *(_DWORD *)(v0 + 1049) = *(_DWORD *)(v0 + 5049);
  *(_DWORD *)(v0 + 1081) = *(_DWORD *)(v0 + 4681);
  *(_DWORD *)(v0 + 1100) = *(_DWORD *)(v0 + 3948);
  *(_DWORD *)(v0 + 1097) = *(_DWORD *)(v0 + 3945);
  *(_DWORD *)(v0 + 1116) = *(_DWORD *)(v0 + 3580);
  v9 = v3;
  *(_DWORD *)(v0 + 1113) = *(_DWORD *)(v0 + 3577);
  *(_DWORD *)(v0 + 1129) = *(_DWORD *)(v0 + 3209);
  *(_DWORD *)(v0 + 1148) = *(_DWORD *)(v0 + 2476);
  *(_DWORD *)(v0 + 1145) = *(_DWORD *)(v0 + 2473);
  *(_DWORD *)(v0 + 1210) = *(_DWORD *)(v0 + 5946);
  *(_DWORD *)(v0 + 1228) = *(_DWORD *)(v0 + 2844);
  *(_DWORD *)(v0 + 1225) = *(_DWORD *)(v0 + 2841);
  *(_DWORD *)(v0 + 1244) = *(_DWORD *)(v0 + 2108);
  *(_DWORD *)(v0 + 1241) = *(_DWORD *)(v0 + 2105);
  *(_DWORD *)(v0 + 1258) = *(_DWORD *)(v0 + 5954);
  *(_QWORD *)(v0 + 896) = v81;
  *(_QWORD *)(v0 + 904) = v85;
  *(_QWORD *)(v0 + 928) = v67;
  *(_QWORD *)(v0 + 1024) = v68;
  *(_BYTE *)(v0 + 1032) = *(_BYTE *)(v0 + 5960);
  *(_DWORD *)(v0 + 1036) = *(_DWORD *)(v0 + 4316);
  *(_QWORD *)(v0 + 1040) = v69;
  *(_BYTE *)(v0 + 1048) = *(_BYTE *)(v0 + 6024);
  *(_DWORD *)(v0 + 1052) = *(_DWORD *)(v0 + 5052);
  *(_QWORD *)(v0 + 1072) = v70;
  *(_BYTE *)(v0 + 1080) = *(_BYTE *)(v0 + 6016);
  *(_DWORD *)(v0 + 1084) = *(_DWORD *)(v0 + 4684);
  *(_QWORD *)(v0 + 1088) = v71;
  *(_BYTE *)(v0 + 1096) = *(_BYTE *)(v0 + 6008);
  *(_QWORD *)(v0 + 1104) = v72;
  *(_BYTE *)(v0 + 1112) = *(_BYTE *)(v0 + 6000);
  *(_QWORD *)(v0 + 1120) = v73;
  *(_BYTE *)(v0 + 1128) = *(_BYTE *)(v0 + 5992);
  *(_DWORD *)(v0 + 1132) = *(_DWORD *)(v0 + 3212);
  *(_QWORD *)(v0 + 1136) = v75;
  *(_BYTE *)(v0 + 1144) = *(_BYTE *)(v0 + 5984);
  *(_QWORD *)(v0 + 1200) = v77;
  *(_BYTE *)(v0 + 1208) = *(_BYTE *)(v0 + 5976);
  *(_BYTE *)(v0 + 1209) = v87;
  *(_WORD *)(v0 + 1214) = *(_WORD *)(v0 + 5950);
  *(_QWORD *)(v0 + 1216) = v96;
  *(_BYTE *)(v0 + 1224) = *(_BYTE *)(v0 + 6032);
  *(_QWORD *)(v0 + 1232) = v109;
  *(_BYTE *)(v0 + 1240) = *(_BYTE *)(v0 + 5968);
  *(_QWORD *)(v0 + 1248) = v116;
  *(_BYTE *)(v0 + 1256) = *(_BYTE *)(v0 + 5952);
  *(_BYTE *)(v0 + 1257) = v119;
  *(_WORD *)(v0 + 1262) = *(_WORD *)(v0 + 5958);
  *(_QWORD *)(v0 + 1264) = v128;
  *(_BYTE *)(v0 + 1272) = *(_BYTE *)(v0 + 5944);
  *(_OWORD *)(v0 + 880) = v74;
  *(_QWORD *)(v0 + 912) = v8;
  *(_QWORD *)(v0 + 920) = v7;
  *(_QWORD *)(v0 + 936) = v6;
  *(_OWORD *)(v0 + 944) = v79;
  *(_OWORD *)(v0 + 960) = v83;
  *(_OWORD *)(v0 + 976) = v86;
  *(_OWORD *)(v0 + 992) = v90;
  *(_OWORD *)(v0 + 1008) = v93;
  *(_OWORD *)(v0 + 1056) = v99;
  *(_OWORD *)(v0 + 1152) = v105;
  *(_OWORD *)(v0 + 1168) = v113;
  *(_OWORD *)(v0 + 1184) = v123;
  *(_QWORD *)(v0 + 1280) = v2;
  *(_QWORD *)(v0 + 1288) = v3;
  *(_QWORD *)(v0 + 1296) = v4;
  *(_QWORD *)(v0 + 1304) = v5;
  memcpy((void *)(v0 + 1312), (const void *)(v0 + 880), 0x1B0uLL);
  nullsub_7(v0 + 1312);
  sub_1000A1F54(v0 + 1312, v0 + 16, &qword_100632330);
  v10 = *(os_unfair_lock_s **)(v102 + 56);
  v11 = swift_task_alloc(32);
  *(_QWORD *)(v11 + 16) = v0 + 16;
  sub_10023DE58((_QWORD *)(v0 + 880));
  os_unfair_lock_lock(v10 + 112);
  sub_100235640((uint64_t)&v10[4], *(_QWORD *)(v11 + 16));
  os_unfair_lock_unlock(v10 + 112);
  if (!v1)
  {
    v118 = v2;
    v134 = v9;
    v137 = v4;
    v140 = v5;
    sub_1000A7F60(v141);
    v42 = swift_task_dealloc(v11);
    defaultLogger()(v42);
    sub_10023DE58(v141);
    v43 = sub_10023DE58(v141);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.debug.getter(v44);
    v46 = os_log_type_enabled(v44, v45);
    v47 = *(void (**)(uint64_t, uint64_t))(v0 + 5512);
    v48 = *(_QWORD *)(v0 + 5488);
    v49 = *(_QWORD *)(v0 + 5472);
    v130 = *(_QWORD *)(v0 + 5408);
    v50 = *(_QWORD *)(v0 + 5376);
    v51 = *(_QWORD *)(v0 + 5360);
    v121 = *(_QWORD *)(v0 + 5368);
    v126 = *(_QWORD *)(v0 + 5328);
    v52 = *(_QWORD *)(v0 + 5320);
    if (v46)
    {
      v111 = *(void (**)(uint64_t, uint64_t))(v0 + 5512);
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v107 = v49;
      v54 = swift_slowAlloc(32, -1);
      v144[0] = v54;
      *(_DWORD *)v53 = 136315138;
      memcpy((void *)(v0 + 448), v141, 0x1B0uLL);
      sub_10023DE58(v141);
      v55 = String.init<A>(describing:)(v0 + 448, &type metadata for ActiveConfig);
      v57 = v56;
      *(_QWORD *)(v0 + 5208) = sub_1000E3AC8(v55, v56, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5208, v0 + 5216, v53 + 4);
      swift_bridgeObjectRelease(v57);
      sub_1000A7F60(v141);
      sub_1000A7F60(v141);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "active config file: \n %s", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v130, v121);
      (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v51, v52);
      v111(v48, v107);
    }
    else
    {

      sub_1000A7F60(v141);
      sub_1000A7F60(v141);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v130, v121);
      (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v51, v52);
      v47(v48, v49);
    }
    v58 = *(_QWORD *)(v0 + 5504);
    v59 = *(_QWORD *)(v0 + 5496);
    v60 = *(_QWORD *)(v0 + 5488);
    v61 = *(_QWORD *)(v0 + 5464);
    v62 = *(_QWORD *)(v0 + 5456);
    v63 = *(_QWORD *)(v0 + 5432);
    v89 = *(_QWORD *)(v0 + 5424);
    v92 = *(_QWORD *)(v0 + 5416);
    v95 = *(_QWORD *)(v0 + 5408);
    v98 = *(_QWORD *)(v0 + 5400);
    v101 = *(_QWORD *)(v0 + 5392);
    v104 = *(_QWORD *)(v0 + 5384);
    v108 = *(_QWORD *)(v0 + 5360);
    v112 = *(_QWORD *)(v0 + 5352);
    v115 = *(_QWORD *)(v0 + 5344);
    v122 = *(_QWORD *)(v0 + 5336);
    v127 = *(_QWORD *)(v0 + 5312);
    v131 = *(_QWORD *)(v0 + 5304);
    v64 = *(_QWORD *)(v0 + 5296);
    v65 = *(_QWORD *)(v0 + 5288);
    v66 = *(void **)(v0 + 5224);
    sub_10023DF58(v118, v134, v137, v140);
    memcpy(v66, v141, 0x1B0uLL);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v89);
    swift_task_dealloc(v92);
    swift_task_dealloc(v95);
    swift_task_dealloc(v98);
    swift_task_dealloc(v101);
    swift_task_dealloc(v104);
    swift_task_dealloc(v108);
    swift_task_dealloc(v112);
    swift_task_dealloc(v115);
    swift_task_dealloc(v122);
    swift_task_dealloc(v127);
    swift_task_dealloc(v131);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    v41 = *(void (**)(void))(v0 + 8);
    goto LABEL_9;
  }
}

uint64_t sub_100238524(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t);
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t);
  uint64_t v135;
  void (*v136)(uint64_t, _QWORD, uint64_t);
  uint64_t v137[3];

  v135 = v1 + 2112;
  v2 = *(_QWORD *)(v1 + 5856);
  defaultLogger()(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 5856);
    v128 = *(_QWORD *)(v1 + 5400);
    v132 = *(void (**)(uint64_t, uint64_t))(v1 + 5824);
    v125 = *(_QWORD *)(v1 + 5368);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v137[0] = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v6, v1 + 5176, v1 + 5152);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 5160), *(_QWORD *)(v1 + 5168));
    v11 = v10;
    *(_QWORD *)(v1 + 5192) = sub_1000E3AC8(v9, v10, v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5192, v1 + 5200, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "The error received is %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v132(v128, v125);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 5856);
    v13 = *(void (**)(uint64_t, uint64_t))(v1 + 5824);
    v14 = *(_QWORD *)(v1 + 5400);
    v15 = *(_QWORD *)(v1 + 5368);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

    v13(v14, v15);
  }
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 5840);
  v17 = *(_QWORD *)(v1 + 5320);
  v18 = *(_QWORD *)(v1 + 5296);
  URL.init(string:)(*(_QWORD *)(v1 + 5616), *(_QWORD *)(v1 + 5624));
  if (v16(v18, 1, v17) == 1)
  {
    v121 = *(_QWORD *)(v1 + 5856);
    v19 = *(_QWORD *)(v1 + 5816);
    v126 = *(_QWORD *)(v1 + 5488);
    v129 = *(void (**)(uint64_t, uint64_t))(v1 + 5512);
    v123 = *(_QWORD *)(v1 + 5472);
    v20 = *(_QWORD *)(v1 + 5360);
    v21 = *(_QWORD *)(v1 + 5328);
    v22 = *(_QWORD *)(v1 + 5320);
    v23 = *(_QWORD *)(v1 + 5296);
    v24 = *(_QWORD *)(v1 + 5288);
    v25 = *(_QWORD *)(v1 + 5280);
    v26 = *(_QWORD *)(v1 + 5272);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 5528));
    swift_bridgeObjectRelease(v19);
    sub_10023DD1C(v135);
    sub_100008030(v23, &qword_100630A48);
    v136 = *(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 104);
    v136(v24, enum case for DIPError.Code.serverResponseInconsistent(_:), v26);
    v27 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v28 = type metadata accessor for DIPError(0);
    v29 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v133 = v28;
    v30 = swift_allocError(v28, v29, 0, 0);
    v31 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100557270, 0, v24, 0, v27, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 281);
    swift_willThrow(v31);
    swift_errorRelease(v121);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    v33 = v123;
    v32 = v126;
LABEL_8:
    v129(v32, v33);
    sub_10023DF58(0, 0, 0, 0);
    v106 = *(_QWORD *)(v1 + 5504);
    v107 = *(_QWORD *)(v1 + 5496);
    v108 = *(_QWORD *)(v1 + 5488);
    v109 = *(_QWORD *)(v1 + 5464);
    v110 = *(_QWORD *)(v1 + 5456);
    v111 = *(_QWORD *)(v1 + 5432);
    v112 = *(_QWORD *)(v1 + 5424);
    v113 = *(_QWORD *)(v1 + 5416);
    v114 = *(_QWORD *)(v1 + 5408);
    v115 = *(_QWORD *)(v1 + 5400);
    v116 = *(_QWORD *)(v1 + 5392);
    v117 = *(_QWORD *)(v1 + 5384);
    v118 = *(_QWORD *)(v1 + 5360);
    v119 = *(_QWORD *)(v1 + 5352);
    v120 = *(_QWORD *)(v1 + 5344);
    v122 = *(_QWORD *)(v1 + 5336);
    v124 = *(_QWORD *)(v1 + 5312);
    v127 = *(_QWORD *)(v1 + 5304);
    v130 = *(_QWORD *)(v1 + 5296);
    v52 = *(_QWORD *)(v1 + 5288);
    v53 = *(_QWORD *)(v1 + 5272);
    v54 = *(_QWORD *)(v1 + 5264);
    v55 = sub_100004828((uint64_t *)&unk_1006325A0);
    v56 = sub_100004828((uint64_t *)&unk_100633440);
    v57 = *(_QWORD *)(v56 - 8);
    v58 = *(_QWORD *)(v57 + 72);
    v59 = *(unsigned __int8 *)(v57 + 80);
    v60 = (v59 + 32) & ~v59;
    v61 = swift_allocObject(v55, v60 + v58, v59 | 7);
    *(_OWORD *)(v61 + 16) = xmmword_10051FFB0;
    v62 = v61 + v60;
    v63 = (_QWORD *)(v62 + *(int *)(v56 + 48));
    v64 = enum case for DIPError.PropertyKey.conversationID(_:);
    v65 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v62, v64, v65);
    v66 = *(_QWORD *)(v54 + 24);
    v67 = *(_QWORD *)(v54 + 32);
    v63[3] = &type metadata for String;
    *v63 = v66;
    v63[1] = v67;
    swift_errorRetain(v30);
    swift_bridgeObjectRetain(v67);
    v68 = sub_10011D314(v61);
    v136(v52, enum case for DIPError.Code.internalError(_:), v53);
    type metadata accessor for DIPError(0);
    v69 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v133, v69, 0, 0);
    v70 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x80000001005571D0, v30, v52, 0, v68, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 318);
    swift_willThrow(v70);
    swift_errorRelease(v30);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v124);
    swift_task_dealloc(v127);
    swift_task_dealloc(v130);
    swift_task_dealloc(v52);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v34 = *(_QWORD *)(v1 + 5360);
  v35 = *(_QWORD *)(v1 + 5336);
  v36 = *(_QWORD *)(v1 + 5320);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 5832))(v35, *(_QWORD *)(v1 + 5296), v36);
  v37 = sub_100004790((unint64_t *)&unk_10063E580, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v35, v34, v36, v37) & 1) != 0)
  {
    v38 = *(_QWORD *)(v1 + 5856);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 5328) + 8))(*(_QWORD *)(v1 + 5336), *(_QWORD *)(v1 + 5320));
    swift_errorRelease(v38);
    v39 = *(_QWORD *)(v1 + 5816);
    v129 = *(void (**)(uint64_t, uint64_t))(v1 + 5512);
    v40 = *(_QWORD *)(v1 + 5488);
    v41 = *(_QWORD *)(v1 + 5472);
    v42 = *(_QWORD *)(v1 + 5360);
    v43 = *(_QWORD *)(v1 + 5328);
    v44 = *(_QWORD *)(v1 + 5320);
    v45 = *(_QWORD *)(v1 + 5288);
    v46 = *(_QWORD *)(v1 + 5280);
    v47 = *(_QWORD *)(v1 + 5272);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 5528));
    swift_bridgeObjectRelease(v39);
    sub_10023DD1C(v135);
    v136 = *(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104);
    v136(v45, enum case for DIPError.Code.unexpectedDaemonState(_:), v47);
    v48 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v49 = type metadata accessor for DIPError(0);
    v50 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v133 = v49;
    v30 = swift_allocError(v49, v50, 0, 0);
    v51 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000036, 0x80000001005572A0, 0, v45, 0, v48, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 299);
    swift_willThrow(v51);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    v32 = v40;
    v33 = v41;
    goto LABEL_8;
  }
  v72 = *(_QWORD *)(v1 + 5392);
  v134 = *(void (**)(uint64_t, uint64_t))(v1 + 5824);
  v131 = *(_QWORD *)(v1 + 5368);
  v73 = *(_QWORD *)(v1 + 5360);
  v74 = *(_QWORD *)(v1 + 5328);
  v75 = *(_QWORD *)(v1 + 5320);
  v76 = *(_QWORD *)(v1 + 5288);
  v77 = *(_QWORD *)(v1 + 5272);
  v78 = enum case for DIPError.Code.switchedToDefaultAttributeConfig(_:);
  v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 5280) + 104);
  *(_QWORD *)(v1 + 5864) = v79;
  v79(v76, v78, v77);
  v80 = sub_100004828((uint64_t *)&unk_1006325A0);
  *(_QWORD *)(v1 + 5872) = v80;
  v81 = sub_100004828((uint64_t *)&unk_100633440);
  *(_QWORD *)(v1 + 5880) = v81;
  v82 = *(_QWORD *)(v81 - 8);
  v83 = *(_QWORD *)(v82 + 72);
  *(_QWORD *)(v1 + 5888) = v83;
  LODWORD(v82) = *(_DWORD *)(v82 + 80);
  *(_DWORD *)(v1 + 5964) = v82;
  v82 = v82;
  v84 = (v82 + 32) & ~v82;
  v85 = swift_allocObject(v80, v84 + v83, v82 | 7);
  *(_OWORD *)(v85 + 16) = xmmword_10051FFB0;
  v86 = v85 + v84;
  v87 = (_QWORD *)(v85 + v84 + *(int *)(v81 + 48));
  v88 = enum case for DIPError.PropertyKey.serverURL(_:);
  *(_DWORD *)(v1 + 5972) = enum case for DIPError.PropertyKey.serverURL(_:);
  v89 = type metadata accessor for DIPError.PropertyKey(0);
  *(_QWORD *)(v1 + 5896) = v89;
  v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 104);
  *(_QWORD *)(v1 + 5904) = v90;
  v90(v86, v88, v89);
  v87[3] = v75;
  v91 = sub_100022234(v87);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v74 + 16))(v91, v73, v75);
  v92 = sub_10011D314(v85);
  v93 = type metadata accessor for DIPError(0);
  *(_QWORD *)(v1 + 5912) = v93;
  v94 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  *(_QWORD *)(v1 + 5920) = v94;
  v95 = swift_allocError(v93, v94, 0, 0);
  v96 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v76, 0, v92, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 285);
  defaultLogger()(v96);
  DIPRecordError(_:message:log:)(v95, 0, 0xE000000000000000, v72);
  v134(v72, v131);
  v97 = swift_errorRelease(v95);
  v98 = defaultLogger()(v97);
  v99 = Logger.logObject.getter(v98);
  v100 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v99, v100))
  {
    v101 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v101 = 0;
    _os_log_impl((void *)&_mh_execute_header, v99, v100, "Retrying default urls", v101, 2u);
    swift_slowDealloc(v101, -1, -1);
  }
  v102 = *(void (**)(uint64_t, uint64_t))(v1 + 5824);
  v103 = *(_QWORD *)(v1 + 5384);
  v104 = *(_QWORD *)(v1 + 5368);

  v102(v103, v104);
  v105 = (_QWORD *)swift_task_alloc(dword_100639944);
  *(_QWORD *)(v1 + 5928) = v105;
  *v105 = v1;
  v105[1] = sub_100239014;
  return sub_10023C49C(*(_QWORD *)(v1 + 5336), *(_BYTE *)(v1 + 5945));
}

uint64_t sub_100239014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = (_QWORD *)*v5;
  v6[638] = v5;
  v6[639] = a1;
  v6[640] = a2;
  v6[641] = a3;
  v6[642] = a4;
  v6[643] = v4;
  v7 = v6[741];
  v6[742] = v4;
  swift_task_dealloc(v7);
  if (v4)
  {
    v8 = v6[727];
    swift_bridgeObjectRelease(v6[691]);
    swift_bridgeObjectRelease(v8);
    v9 = sub_100239D18;
  }
  else
  {
    v9 = sub_1002390A4;
  }
  return swift_task_switch(v9, 0, 0);
}

void sub_1002390A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(void);
  uint64_t v45;
  _QWORD *v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, _QWORD, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147[3];

  v1 = *(_QWORD *)(v0 + 5336);
  v2 = *(_QWORD *)(v0 + 5328);
  v3 = *(_QWORD *)(v0 + 5320);
  swift_errorRelease(*(_QWORD *)(v0 + 5856));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 5936);
  v5 = *(_QWORD *)(v0 + 5112);
  v6 = *(_QWORD *)(v0 + 5120);
  v7 = *(_QWORD *)(v0 + 5128);
  v8 = *(_QWORD *)(v0 + 5136);
  sub_10023DF58(0, 0, 0, 0);
  if (!v5)
  {
    v138 = v7;
    v141 = v8;
    v15 = *(_QWORD *)(v0 + 5816);
    v145 = *(void (**)(uint64_t, uint64_t))(v0 + 5512);
    v127 = *(_QWORD *)(v0 + 5488);
    v16 = *(_QWORD *)(v0 + 5472);
    v17 = *(_QWORD *)(v0 + 5360);
    v18 = *(_QWORD *)(v0 + 5328);
    v19 = *(_QWORD *)(v0 + 5320);
    v135 = v6;
    v20 = *(_QWORD *)(v0 + 5288);
    v21 = *(_QWORD *)(v0 + 5280);
    v22 = *(_QWORD *)(v0 + 5272);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 5528));
    swift_bridgeObjectRelease(v15);
    sub_10023DD1C(v0 + 2112);
    v132 = *(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104);
    v132(v20, enum case for DIPError.Code.unexpectedDaemonState(_:), v22);
    v23 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v100 = type metadata accessor for DIPError(0);
    v97 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v24 = swift_allocError(v100, v97, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000036, 0x80000001005572A0, 0, v20, 0, v23, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 299);
    swift_willThrow(v25);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    v145(v127, v16);
    sub_10023DF58(0, v135, v138, v141);
    v79 = *(_QWORD *)(v0 + 5504);
    v81 = *(_QWORD *)(v0 + 5496);
    v83 = *(_QWORD *)(v0 + 5488);
    v85 = *(_QWORD *)(v0 + 5464);
    v87 = *(_QWORD *)(v0 + 5456);
    v91 = *(_QWORD *)(v0 + 5432);
    v94 = *(_QWORD *)(v0 + 5424);
    v103 = *(_QWORD *)(v0 + 5416);
    v106 = *(_QWORD *)(v0 + 5408);
    v109 = *(_QWORD *)(v0 + 5400);
    v113 = *(_QWORD *)(v0 + 5392);
    v117 = *(_QWORD *)(v0 + 5384);
    v120 = *(_QWORD *)(v0 + 5360);
    v123 = *(_QWORD *)(v0 + 5352);
    v128 = *(_QWORD *)(v0 + 5344);
    v136 = *(_QWORD *)(v0 + 5336);
    v139 = *(_QWORD *)(v0 + 5312);
    v142 = *(_QWORD *)(v0 + 5304);
    v146 = *(_QWORD *)(v0 + 5296);
    v26 = *(_QWORD *)(v0 + 5288);
    v27 = *(_QWORD *)(v0 + 5272);
    v28 = *(_QWORD *)(v0 + 5264);
    v29 = sub_100004828((uint64_t *)&unk_1006325A0);
    v30 = sub_100004828((uint64_t *)&unk_100633440);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(_QWORD *)(v31 + 72);
    v33 = *(unsigned __int8 *)(v31 + 80);
    v34 = (v33 + 32) & ~v33;
    v35 = swift_allocObject(v29, v34 + v32, v33 | 7);
    *(_OWORD *)(v35 + 16) = xmmword_10051FFB0;
    v36 = v35 + v34;
    v37 = (_QWORD *)(v36 + *(int *)(v30 + 48));
    v38 = enum case for DIPError.PropertyKey.conversationID(_:);
    v39 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v36, v38, v39);
    v40 = *(_QWORD *)(v28 + 24);
    v41 = *(_QWORD *)(v28 + 32);
    v37[3] = &type metadata for String;
    *v37 = v40;
    v37[1] = v41;
    swift_errorRetain(v24);
    swift_bridgeObjectRetain(v41);
    v42 = sub_10011D314(v35);
    v132(v26, enum case for DIPError.Code.internalError(_:), v27);
    swift_allocError(v100, v97, 0, 0);
    v43 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x80000001005571D0, v24, v26, 0, v42, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 318);
    swift_willThrow(v43);
    swift_errorRelease(v24);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v91);
    swift_task_dealloc(v94);
    swift_task_dealloc(v103);
    swift_task_dealloc(v106);
    swift_task_dealloc(v109);
    swift_task_dealloc(v113);
    swift_task_dealloc(v117);
    swift_task_dealloc(v120);
    swift_task_dealloc(v123);
    swift_task_dealloc(v128);
    swift_task_dealloc(v136);
    swift_task_dealloc(v139);
    swift_task_dealloc(v142);
    swift_task_dealloc(v146);
    swift_task_dealloc(v26);
    v44 = *(void (**)(void))(v0 + 8);
LABEL_9:
    v44();
    return;
  }
  v88 = *(_QWORD *)(v0 + 5816);
  v84 = *(_QWORD *)(v0 + 5808);
  v144 = (_QWORD *)(v0 + 880);
  v131 = *(_QWORD *)(v0 + 5800);
  v122 = *(_BYTE *)(v0 + 5962);
  v119 = *(_QWORD *)(v0 + 5792);
  v112 = *(_QWORD *)(v0 + 5784);
  v126 = *(_OWORD *)(v0 + 5752);
  v99 = *(_QWORD *)(v0 + 5776);
  v116 = *(_OWORD *)(v0 + 5736);
  v90 = *(_BYTE *)(v0 + 5961);
  v108 = *(_OWORD *)(v0 + 5720);
  v78 = *(_QWORD *)(v0 + 5712);
  v80 = *(_QWORD *)(v0 + 5768);
  v75 = *(_QWORD *)(v0 + 5696);
  v76 = *(_QWORD *)(v0 + 5704);
  v74 = *(_QWORD *)(v0 + 5688);
  v102 = *(_OWORD *)(v0 + 5664);
  v72 = *(_QWORD *)(v0 + 5656);
  v73 = *(_QWORD *)(v0 + 5680);
  v71 = *(_QWORD *)(v0 + 5648);
  v93 = *(_OWORD *)(v0 + 5616);
  v96 = *(_OWORD *)(v0 + 5632);
  v89 = *(_OWORD *)(v0 + 5600);
  v86 = *(_OWORD *)(v0 + 5584);
  v82 = *(_OWORD *)(v0 + 5568);
  v9 = *(_QWORD *)(v0 + 5560);
  v10 = *(_QWORD *)(v0 + 5544);
  v11 = *(_QWORD *)(v0 + 5536);
  v77 = *(_OWORD *)(v0 + 5520);
  v70 = *(_QWORD *)(v0 + 5552);
  v105 = *(_QWORD *)(v0 + 5264);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  *(_DWORD *)(v0 + 1033) = *(_DWORD *)(v0 + 4313);
  *(_DWORD *)(v0 + 1049) = *(_DWORD *)(v0 + 5049);
  *(_DWORD *)(v0 + 1081) = *(_DWORD *)(v0 + 4681);
  *(_DWORD *)(v0 + 1100) = *(_DWORD *)(v0 + 3948);
  *(_DWORD *)(v0 + 1097) = *(_DWORD *)(v0 + 3945);
  *(_DWORD *)(v0 + 1116) = *(_DWORD *)(v0 + 3580);
  v12 = v6;
  *(_DWORD *)(v0 + 1113) = *(_DWORD *)(v0 + 3577);
  *(_DWORD *)(v0 + 1129) = *(_DWORD *)(v0 + 3209);
  *(_DWORD *)(v0 + 1148) = *(_DWORD *)(v0 + 2476);
  *(_DWORD *)(v0 + 1145) = *(_DWORD *)(v0 + 2473);
  *(_DWORD *)(v0 + 1210) = *(_DWORD *)(v0 + 5946);
  *(_DWORD *)(v0 + 1228) = *(_DWORD *)(v0 + 2844);
  *(_DWORD *)(v0 + 1225) = *(_DWORD *)(v0 + 2841);
  *(_DWORD *)(v0 + 1244) = *(_DWORD *)(v0 + 2108);
  *(_DWORD *)(v0 + 1241) = *(_DWORD *)(v0 + 2105);
  *(_DWORD *)(v0 + 1258) = *(_DWORD *)(v0 + 5954);
  *(_QWORD *)(v0 + 896) = v84;
  *(_QWORD *)(v0 + 904) = v88;
  *(_QWORD *)(v0 + 928) = v70;
  *(_QWORD *)(v0 + 1024) = v71;
  *(_BYTE *)(v0 + 1032) = *(_BYTE *)(v0 + 5960);
  *(_DWORD *)(v0 + 1036) = *(_DWORD *)(v0 + 4316);
  *(_QWORD *)(v0 + 1040) = v72;
  *(_BYTE *)(v0 + 1048) = *(_BYTE *)(v0 + 6024);
  *(_DWORD *)(v0 + 1052) = *(_DWORD *)(v0 + 5052);
  *(_QWORD *)(v0 + 1072) = v73;
  *(_BYTE *)(v0 + 1080) = *(_BYTE *)(v0 + 6016);
  *(_DWORD *)(v0 + 1084) = *(_DWORD *)(v0 + 4684);
  *(_QWORD *)(v0 + 1088) = v74;
  *(_BYTE *)(v0 + 1096) = *(_BYTE *)(v0 + 6008);
  *(_QWORD *)(v0 + 1104) = v75;
  *(_BYTE *)(v0 + 1112) = *(_BYTE *)(v0 + 6000);
  *(_QWORD *)(v0 + 1120) = v76;
  *(_BYTE *)(v0 + 1128) = *(_BYTE *)(v0 + 5992);
  *(_DWORD *)(v0 + 1132) = *(_DWORD *)(v0 + 3212);
  *(_QWORD *)(v0 + 1136) = v78;
  *(_BYTE *)(v0 + 1144) = *(_BYTE *)(v0 + 5984);
  *(_QWORD *)(v0 + 1200) = v80;
  *(_BYTE *)(v0 + 1208) = *(_BYTE *)(v0 + 5976);
  *(_BYTE *)(v0 + 1209) = v90;
  *(_WORD *)(v0 + 1214) = *(_WORD *)(v0 + 5950);
  *(_QWORD *)(v0 + 1216) = v99;
  *(_BYTE *)(v0 + 1224) = *(_BYTE *)(v0 + 6032);
  *(_QWORD *)(v0 + 1232) = v112;
  *(_BYTE *)(v0 + 1240) = *(_BYTE *)(v0 + 5968);
  *(_QWORD *)(v0 + 1248) = v119;
  *(_BYTE *)(v0 + 1256) = *(_BYTE *)(v0 + 5952);
  *(_BYTE *)(v0 + 1257) = v122;
  *(_WORD *)(v0 + 1262) = *(_WORD *)(v0 + 5958);
  *(_QWORD *)(v0 + 1264) = v131;
  *(_BYTE *)(v0 + 1272) = *(_BYTE *)(v0 + 5944);
  *(_OWORD *)(v0 + 880) = v77;
  *(_QWORD *)(v0 + 912) = v11;
  *(_QWORD *)(v0 + 920) = v10;
  *(_QWORD *)(v0 + 936) = v9;
  *(_OWORD *)(v0 + 944) = v82;
  *(_OWORD *)(v0 + 960) = v86;
  *(_OWORD *)(v0 + 976) = v89;
  *(_OWORD *)(v0 + 992) = v93;
  *(_OWORD *)(v0 + 1008) = v96;
  *(_OWORD *)(v0 + 1056) = v102;
  *(_OWORD *)(v0 + 1152) = v108;
  *(_OWORD *)(v0 + 1168) = v116;
  *(_OWORD *)(v0 + 1184) = v126;
  *(_QWORD *)(v0 + 1280) = v5;
  *(_QWORD *)(v0 + 1288) = v6;
  *(_QWORD *)(v0 + 1296) = v7;
  *(_QWORD *)(v0 + 1304) = v8;
  memcpy((void *)(v0 + 1312), (const void *)(v0 + 880), 0x1B0uLL);
  nullsub_7(v0 + 1312);
  sub_1000A1F54(v0 + 1312, v0 + 16, &qword_100632330);
  v13 = *(os_unfair_lock_s **)(v105 + 56);
  v14 = swift_task_alloc(32);
  *(_QWORD *)(v14 + 16) = v0 + 16;
  sub_10023DE58((_QWORD *)(v0 + 880));
  os_unfair_lock_lock(v13 + 112);
  sub_100235640((uint64_t)&v13[4], *(_QWORD *)(v14 + 16));
  os_unfair_lock_unlock(v13 + 112);
  if (!v4)
  {
    v121 = v5;
    v137 = v12;
    v140 = v7;
    v143 = v8;
    sub_1000A7F60(v144);
    v45 = swift_task_dealloc(v14);
    defaultLogger()(v45);
    sub_10023DE58(v144);
    v46 = sub_10023DE58(v144);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter(v47);
    v49 = os_log_type_enabled(v47, v48);
    v50 = *(void (**)(uint64_t, uint64_t))(v0 + 5512);
    v51 = *(_QWORD *)(v0 + 5488);
    v52 = *(_QWORD *)(v0 + 5472);
    v133 = *(_QWORD *)(v0 + 5408);
    v53 = *(_QWORD *)(v0 + 5376);
    v54 = *(_QWORD *)(v0 + 5360);
    v124 = *(_QWORD *)(v0 + 5368);
    v129 = *(_QWORD *)(v0 + 5328);
    v55 = *(_QWORD *)(v0 + 5320);
    if (v49)
    {
      v114 = *(void (**)(uint64_t, uint64_t))(v0 + 5512);
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v110 = v52;
      v57 = swift_slowAlloc(32, -1);
      v147[0] = v57;
      *(_DWORD *)v56 = 136315138;
      memcpy((void *)(v0 + 448), v144, 0x1B0uLL);
      sub_10023DE58(v144);
      v58 = String.init<A>(describing:)(v0 + 448, &type metadata for ActiveConfig);
      v60 = v59;
      *(_QWORD *)(v0 + 5208) = sub_1000E3AC8(v58, v59, v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5208, v0 + 5216, v56 + 4);
      swift_bridgeObjectRelease(v60);
      sub_1000A7F60(v144);
      sub_1000A7F60(v144);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "active config file: \n %s", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v133, v124);
      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v54, v55);
      v114(v51, v110);
    }
    else
    {

      sub_1000A7F60(v144);
      sub_1000A7F60(v144);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v133, v124);
      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v54, v55);
      v50(v51, v52);
    }
    v61 = *(_QWORD *)(v0 + 5504);
    v62 = *(_QWORD *)(v0 + 5496);
    v63 = *(_QWORD *)(v0 + 5488);
    v64 = *(_QWORD *)(v0 + 5464);
    v65 = *(_QWORD *)(v0 + 5456);
    v66 = *(_QWORD *)(v0 + 5432);
    v92 = *(_QWORD *)(v0 + 5424);
    v95 = *(_QWORD *)(v0 + 5416);
    v98 = *(_QWORD *)(v0 + 5408);
    v101 = *(_QWORD *)(v0 + 5400);
    v104 = *(_QWORD *)(v0 + 5392);
    v107 = *(_QWORD *)(v0 + 5384);
    v111 = *(_QWORD *)(v0 + 5360);
    v115 = *(_QWORD *)(v0 + 5352);
    v118 = *(_QWORD *)(v0 + 5344);
    v125 = *(_QWORD *)(v0 + 5336);
    v130 = *(_QWORD *)(v0 + 5312);
    v134 = *(_QWORD *)(v0 + 5304);
    v67 = *(_QWORD *)(v0 + 5296);
    v68 = *(_QWORD *)(v0 + 5288);
    v69 = *(void **)(v0 + 5224);
    sub_10023DF58(v121, v137, v140, v143);
    memcpy(v69, v144, 0x1B0uLL);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v92);
    swift_task_dealloc(v95);
    swift_task_dealloc(v98);
    swift_task_dealloc(v101);
    swift_task_dealloc(v104);
    swift_task_dealloc(v107);
    swift_task_dealloc(v111);
    swift_task_dealloc(v115);
    swift_task_dealloc(v118);
    swift_task_dealloc(v125);
    swift_task_dealloc(v130);
    swift_task_dealloc(v134);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    v44 = *(void (**)(void))(v0 + 8);
    goto LABEL_9;
  }
}

uint64_t sub_100239D18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t, _QWORD, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  void (*v52)(_QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(void);
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;

  v59 = *(_QWORD *)(v0 + 5936);
  v1 = *(_QWORD *)(v0 + 5920);
  v48 = *(_QWORD *)(v0 + 5912);
  v56 = *(void (**)(void))(v0 + 5904);
  v2 = *(unsigned __int8 *)(v0 + 5964);
  v3 = *(_QWORD *)(v0 + 5880);
  v4 = *(_QWORD *)(v0 + 5872);
  v52 = *(void (**)(_QWORD))(v0 + 5864);
  v67 = *(_QWORD *)(v0 + 5856);
  v57 = *(void (**)(uint64_t, uint64_t))(v0 + 5824);
  v5 = *(_QWORD *)(v0 + 5624);
  v46 = *(_QWORD *)(v0 + 5616);
  v75 = *(void (**)(uint64_t, uint64_t))(v0 + 5512);
  v73 = *(_QWORD *)(v0 + 5488);
  v71 = *(_QWORD *)(v0 + 5472);
  v6 = *(_QWORD *)(v0 + 5392);
  v54 = *(_QWORD *)(v0 + 5368);
  v69 = *(_QWORD *)(v0 + 5360);
  v65 = *(_QWORD *)(v0 + 5336);
  v61 = *(_QWORD *)(v0 + 5328);
  v63 = *(_QWORD *)(v0 + 5320);
  v7 = *(_QWORD *)(v0 + 5288);
  v8 = (v2 + 32) & ~v2;
  v9 = v8 + *(_QWORD *)(v0 + 5888);
  v10 = v2 | 7;
  ((void (*)(uint64_t, _QWORD))v52)(v7, enum case for DIPError.Code.defaultAttributeConfigFailed(_:));
  v11 = swift_allocObject(v4, v9, v10);
  *(_OWORD *)(v11 + 16) = xmmword_10051FFB0;
  v12 = (_QWORD *)(v11 + v8 + *(int *)(v3 + 48));
  v56();
  v12[3] = &type metadata for String;
  *v12 = v46;
  v12[1] = v5;
  swift_bridgeObjectRetain(v5);
  sub_10023DD1C(v0 + 2112);
  v13 = sub_10011D314(v11);
  v14 = swift_allocError(v48, v1, 0, 0);
  v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v7, 0, v13, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 291);
  defaultLogger()(v15);
  DIPRecordError(_:message:log:)(v14, 0, 0xE000000000000000, v6);
  v57(v6, v54);
  swift_errorRelease(v14);
  v50 = enum case for DIPError.Code.internalError(_:);
  v52(v7);
  swift_errorRetain(v59);
  v16 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v17 = swift_allocError(v48, v1, 0, 0);
  v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v59, v7, 0, v16, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 293);
  swift_willThrow(v18);
  swift_errorRelease(v59);
  swift_errorRelease(v67);
  v19 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
  v19(v65, v63);
  v19(v69, v63);
  v75(v73, v71);
  sub_10023DF58(0, 0, 0, 0);
  v20 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 5864);
  v42 = *(_QWORD *)(v0 + 5504);
  v43 = *(_QWORD *)(v0 + 5496);
  v44 = *(_QWORD *)(v0 + 5488);
  v45 = *(_QWORD *)(v0 + 5464);
  v47 = *(_QWORD *)(v0 + 5456);
  v49 = *(_QWORD *)(v0 + 5432);
  v51 = *(_QWORD *)(v0 + 5424);
  v53 = *(_QWORD *)(v0 + 5416);
  v55 = *(_QWORD *)(v0 + 5408);
  v58 = *(_QWORD *)(v0 + 5400);
  v60 = *(_QWORD *)(v0 + 5392);
  v62 = *(_QWORD *)(v0 + 5384);
  v64 = *(_QWORD *)(v0 + 5360);
  v66 = *(_QWORD *)(v0 + 5352);
  v68 = *(_QWORD *)(v0 + 5344);
  v70 = *(_QWORD *)(v0 + 5336);
  v72 = *(_QWORD *)(v0 + 5312);
  v74 = *(_QWORD *)(v0 + 5304);
  v76 = *(_QWORD *)(v0 + 5296);
  v21 = *(_QWORD *)(v0 + 5288);
  v22 = *(_QWORD *)(v0 + 5272);
  v23 = *(_QWORD *)(v0 + 5264);
  v24 = sub_100004828((uint64_t *)&unk_1006325A0);
  v25 = sub_100004828((uint64_t *)&unk_100633440);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_QWORD *)(v26 + 72);
  v28 = *(unsigned __int8 *)(v26 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = swift_allocObject(v24, v29 + v27, v28 | 7);
  *(_OWORD *)(v30 + 16) = xmmword_10051FFB0;
  v31 = v30 + v29;
  v32 = (_QWORD *)(v31 + *(int *)(v25 + 48));
  v33 = enum case for DIPError.PropertyKey.conversationID(_:);
  v34 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v31, v33, v34);
  v35 = *(_QWORD *)(v23 + 24);
  v36 = *(_QWORD *)(v23 + 32);
  v32[3] = &type metadata for String;
  *v32 = v35;
  v32[1] = v36;
  swift_errorRetain(v17);
  swift_bridgeObjectRetain(v36);
  v37 = sub_10011D314(v30);
  v20(v21, v50, v22);
  v38 = type metadata accessor for DIPError(0);
  v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v38, v39, 0, 0);
  v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x80000001005571D0, v17, v21, 0, v37, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000053, 0x8000000100557170, 318);
  swift_willThrow(v40);
  swift_errorRelease(v17);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v74);
  swift_task_dealloc(v76);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023A2E4()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[432];
  _BYTE v14[432];
  _BYTE v15[432];

  v1 = *(os_unfair_lock_s **)(v0 + 56);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 112;
  os_unfair_lock_lock(v1 + 112);
  sub_1000A1F54(v2, (uint64_t)v15, &qword_100632330);
  sub_1000A1F54((uint64_t)v15, (uint64_t)v14, &qword_100632330);
  sub_10023DFA4((uint64_t)v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023DB8C);
  os_unfair_lock_unlock(v3);
  sub_1000A1F54((uint64_t)v14, (uint64_t)v13, &qword_100632330);
  sub_10023DFA4((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035BBC);
  sub_1000A1F54((uint64_t)v13, (uint64_t)v15, &qword_100632330);
  if (sub_100035A5C((uint64_t)v15) == 1)
    return 0;
  v4 = *(_QWORD *)(v0 + 48);
  v5 = (os_unfair_lock_s *)(v4 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 64));
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(v4 + 32);
  v9 = *(_QWORD *)(v4 + 40);
  v10 = *(_QWORD *)(v4 + 48);
  v11 = *(_QWORD *)(v4 + 56);
  sub_10023E048(v6, v7, v8, v9, v10, v11);
  os_unfair_lock_unlock(v5);
  if (!v6)
    return 0;
  sub_10023E098(v6, v7, v8, v9, v10, v11);
  return 1;
}

uint64_t sub_10023A41C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_QWORD *)(v3 + 560) = v2;
  *(_BYTE *)(v3 + 497) = a2;
  *(_QWORD *)(v3 + 552) = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v3 + 568) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 576) = v5;
  *(_QWORD *)(v3 + 584) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPBackoffStrategy(0);
  *(_QWORD *)(v3 + 592) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 600) = v7;
  *(_QWORD *)(v3 + 608) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPRetrier(0);
  *(_QWORD *)(v3 + 616) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 624) = v9;
  *(_QWORD *)(v3 + 632) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost.Config(0);
  *(_QWORD *)(v3 + 640) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost(0);
  *(_QWORD *)(v3 + 648) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v3 + 656) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 664) = swift_task_alloc(v13);
  *(_QWORD *)(v3 + 672) = swift_task_alloc(v13);
  return swift_task_switch(sub_10023A52C, 0, 0);
}

uint64_t sub_10023A52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v14;

  v1 = *(_QWORD *)(v0 + 640);
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(_QWORD *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD **)(v0 + 560);
  v14 = *(_BYTE *)(v0 + 497);
  static DaemonSignposts.configurationRequest.getter();
  v6 = DIPSignpost.init(_:)(v1);
  static DaemonSignposts.configureLoadBootstrapConfig.getter(v6);
  DIPSignpost.init(_:)(v1);
  v8 = v5[4];
  v7 = v5[5];
  v9 = v5[3];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for DIPBackoffStrategy.noBackoff(_:), v4);
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)(3, v2, 0, 1);
  v10 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 680) = v10;
  *(_QWORD *)(v10 + 16) = v5;
  *(_QWORD *)(v10 + 24) = v7;
  *(_QWORD *)(v10 + 32) = 301;
  *(_BYTE *)(v10 + 40) = v14;
  *(_QWORD *)(v10 + 48) = v9;
  *(_QWORD *)(v10 + 56) = v8;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to DIPRetrier.retry<A>(operation:)[1]);
  *(_QWORD *)(v0 + 688) = v11;
  v12 = sub_100004828(&qword_100639920);
  *v11 = v0;
  v11[1] = sub_10023A678;
  return DIPRetrier.retry<A>(operation:)(v0 + 448, &unk_100639918, v10, v12);
}

uint64_t sub_10023A678()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 688);
  *(_QWORD *)(*v1 + 696) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10023AE28;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 680));
    v4 = sub_10023A6E4;
  }
  return swift_task_switch(v4, 0, 0);
}

void sub_10023A6E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 696);
  v2 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 456);
  *(_QWORD *)(v0 + 704) = v4;
  *(_QWORD *)(v0 + 712) = v3;
  v5 = *(_QWORD *)(v0 + 464);
  v6 = *(_QWORD *)(v0 + 472);
  *(_QWORD *)(v0 + 720) = v5;
  *(_QWORD *)(v0 + 728) = v6;
  v7 = *(_QWORD *)(v0 + 480);
  v8 = *(_QWORD *)(v0 + 488);
  *(_QWORD *)(v0 + 736) = v7;
  *(_QWORD *)(v0 + 744) = v8;
  v9 = *(_BYTE *)(v0 + 496);
  *(_QWORD *)(v0 + 504) = v4;
  *(_QWORD *)(v0 + 512) = v3;
  *(_QWORD *)(v0 + 520) = v5;
  *(_QWORD *)(v0 + 528) = v6;
  *(_QWORD *)(v0 + 536) = v7;
  *(_QWORD *)(v0 + 544) = v8;
  v10 = *(os_unfair_lock_s **)(v2 + 48);
  v11 = swift_task_alloc(32);
  *(_QWORD *)(v11 + 16) = v0 + 504;
  v12 = (uint64_t *)&v10[4];
  v10 += 16;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  os_unfair_lock_lock(v10);
  sub_100235578(v12, *(uint64_t **)(v11 + 16));
  os_unfair_lock_unlock(v10);
  if (!v1)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    swift_task_dealloc(v11);
    if ((v9 & 1) == 0)
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v13 = (_QWORD *)swift_task_alloc(dword_10063992C);
    *(_QWORD *)(v0 + 752) = v13;
    *v13 = v0;
    v13[1] = sub_10023A88C;
    sub_1002356C4(v0 + 16, 0, 0, *(_BYTE *)(v0 + 497), 0, 0, 0);
  }
}

uint64_t sub_10023A88C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 752);
  *(_QWORD *)(*v1 + 760) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10023B030;
  }
  else
  {
    *(_OWORD *)(v2 + 776) = *(_OWORD *)(v2 + 24);
    *(_OWORD *)(v2 + 800) = *(_OWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 824) = *(_QWORD *)(v2 + 72);
    *(_OWORD *)(v2 + 848) = *(_OWORD *)(v2 + 96);
    *(_OWORD *)(v2 + 872) = *(_OWORD *)(v2 + 120);
    *(_OWORD *)(v2 + 896) = *(_OWORD *)(v2 + 144);
    *(_OWORD *)(v2 + 936) = *(_OWORD *)(v2 + 200);
    v5 = *(_OWORD *)(v2 + 304);
    *(_OWORD *)(v2 + 984) = *(_OWORD *)(v2 + 288);
    *(_OWORD *)(v2 + 1000) = v5;
    *(_OWORD *)(v2 + 1016) = *(_OWORD *)(v2 + 320);
    v6 = *(_OWORD *)(v2 + 432);
    *(_OWORD *)(v2 + 1072) = *(_OWORD *)(v2 + 416);
    *(_QWORD *)(v2 + 768) = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 792) = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 816) = *(_QWORD *)(v2 + 64);
    v7 = *(_QWORD *)(v2 + 88);
    *(_QWORD *)(v2 + 832) = *(_QWORD *)(v2 + 80);
    *(_QWORD *)(v2 + 840) = v7;
    *(_QWORD *)(v2 + 864) = *(_QWORD *)(v2 + 112);
    *(_QWORD *)(v2 + 888) = *(_QWORD *)(v2 + 136);
    *(_QWORD *)(v2 + 912) = *(_QWORD *)(v2 + 160);
    *(_BYTE *)(v2 + 498) = *(_BYTE *)(v2 + 168);
    *(_QWORD *)(v2 + 920) = *(_QWORD *)(v2 + 176);
    *(_BYTE *)(v2 + 499) = *(_BYTE *)(v2 + 184);
    *(_QWORD *)(v2 + 928) = *(_QWORD *)(v2 + 192);
    *(_BYTE *)(v2 + 500) = *(_BYTE *)(v2 + 216);
    *(_QWORD *)(v2 + 952) = *(_QWORD *)(v2 + 224);
    *(_BYTE *)(v2 + 501) = *(_BYTE *)(v2 + 232);
    *(_QWORD *)(v2 + 960) = *(_QWORD *)(v2 + 240);
    *(_BYTE *)(v2 + 502) = *(_BYTE *)(v2 + 248);
    *(_QWORD *)(v2 + 968) = *(_QWORD *)(v2 + 256);
    *(_BYTE *)(v2 + 503) = *(_BYTE *)(v2 + 264);
    *(_QWORD *)(v2 + 976) = *(_QWORD *)(v2 + 272);
    *(_BYTE *)(v2 + 1104) = *(_BYTE *)(v2 + 280);
    *(_QWORD *)(v2 + 1032) = *(_QWORD *)(v2 + 336);
    *(_BYTE *)(v2 + 1105) = *(_BYTE *)(v2 + 344);
    *(_BYTE *)(v2 + 1106) = *(_BYTE *)(v2 + 345);
    *(_QWORD *)(v2 + 1040) = *(_QWORD *)(v2 + 352);
    *(_BYTE *)(v2 + 1107) = *(_BYTE *)(v2 + 360);
    *(_QWORD *)(v2 + 1048) = *(_QWORD *)(v2 + 368);
    *(_BYTE *)(v2 + 1108) = *(_BYTE *)(v2 + 376);
    *(_QWORD *)(v2 + 1056) = *(_QWORD *)(v2 + 384);
    *(_BYTE *)(v2 + 1109) = *(_BYTE *)(v2 + 392);
    *(_BYTE *)(v2 + 1110) = *(_BYTE *)(v2 + 393);
    *(_QWORD *)(v2 + 1064) = *(_QWORD *)(v2 + 400);
    *(_BYTE *)(v2 + 1111) = *(_BYTE *)(v2 + 408);
    *(_OWORD *)(v2 + 1088) = v6;
    v4 = sub_10023AA58;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10023AA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v59 = *(_QWORD *)(v0 + 1088);
  v60 = *(_QWORD *)(v0 + 1096);
  v58 = *(_OWORD *)(v0 + 1072);
  v57 = *(_BYTE *)(v0 + 1111);
  v56 = *(_QWORD *)(v0 + 1064);
  v54 = *(_BYTE *)(v0 + 1109);
  v55 = *(_BYTE *)(v0 + 1110);
  v53 = *(_QWORD *)(v0 + 1056);
  v52 = *(_BYTE *)(v0 + 1108);
  v51 = *(_QWORD *)(v0 + 1048);
  v50 = *(_BYTE *)(v0 + 1107);
  v49 = *(_QWORD *)(v0 + 1040);
  v47 = *(_BYTE *)(v0 + 1105);
  v48 = *(_BYTE *)(v0 + 1106);
  v46 = *(_QWORD *)(v0 + 1032);
  v44 = *(_OWORD *)(v0 + 1000);
  v45 = *(_OWORD *)(v0 + 1016);
  v43 = *(_OWORD *)(v0 + 984);
  v42 = *(_BYTE *)(v0 + 1104);
  v41 = *(_QWORD *)(v0 + 976);
  v40 = *(_BYTE *)(v0 + 503);
  v39 = *(_QWORD *)(v0 + 968);
  v38 = *(_BYTE *)(v0 + 502);
  v37 = *(_QWORD *)(v0 + 960);
  v34 = *(_BYTE *)(v0 + 501);
  v31 = *(_QWORD *)(v0 + 952);
  v30 = *(_BYTE *)(v0 + 500);
  v29 = *(_QWORD *)(v0 + 944);
  v28 = *(_OWORD *)(v0 + 928);
  v27 = *(_BYTE *)(v0 + 499);
  v26 = *(_QWORD *)(v0 + 920);
  v25 = *(_BYTE *)(v0 + 498);
  v24 = *(_QWORD *)(v0 + 912);
  v22 = *(_OWORD *)(v0 + 880);
  v23 = *(_OWORD *)(v0 + 896);
  v20 = *(_OWORD *)(v0 + 848);
  v21 = *(_OWORD *)(v0 + 864);
  v19 = *(_OWORD *)(v0 + 832);
  v1 = *(_QWORD *)(v0 + 824);
  v18 = *(_QWORD *)(v0 + 816);
  v2 = *(_QWORD *)(v0 + 808);
  v3 = *(_QWORD *)(v0 + 800);
  v17 = *(_OWORD *)(v0 + 768);
  v35 = *(_OWORD *)(v0 + 704);
  v36 = *(_OWORD *)(v0 + 720);
  v15 = *(_QWORD *)(v0 + 784);
  v16 = *(_QWORD *)(v0 + 792);
  v32 = *(_QWORD *)(v0 + 736);
  v33 = *(_QWORD *)(v0 + 744);
  v4 = *(_QWORD *)(v0 + 672);
  v5 = *(_QWORD *)(v0 + 664);
  v6 = *(_QWORD *)(v0 + 656);
  v7 = *(_QWORD *)(v0 + 648);
  v8 = *(_QWORD *)(v0 + 640);
  v9 = *(_QWORD *)(v0 + 632);
  v10 = *(_QWORD *)(v0 + 608);
  v11 = *(_QWORD *)(v0 + 584);
  v12 = *(_QWORD *)(v0 + 552);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 624) + 8))(v9, *(_QWORD *)(v0 + 616));
  v13 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v13(v5, v7);
  v13(v4, v7);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  *(_QWORD *)(v12 + 16) = v15;
  *(_QWORD *)(v12 + 24) = v16;
  *(_QWORD *)(v12 + 48) = v18;
  *(_OWORD *)v12 = v17;
  *(_QWORD *)(v12 + 32) = v3;
  *(_QWORD *)(v12 + 40) = v2;
  *(_QWORD *)(v12 + 56) = v1;
  *(_OWORD *)(v12 + 64) = v19;
  *(_OWORD *)(v12 + 80) = v20;
  *(_OWORD *)(v12 + 96) = v21;
  *(_OWORD *)(v12 + 112) = v22;
  *(_OWORD *)(v12 + 128) = v23;
  *(_QWORD *)(v12 + 144) = v24;
  *(_BYTE *)(v12 + 152) = v25 & 1;
  *(_QWORD *)(v12 + 160) = v26;
  *(_BYTE *)(v12 + 168) = v27 & 1;
  *(_OWORD *)(v12 + 176) = v28;
  *(_QWORD *)(v12 + 192) = v29;
  *(_BYTE *)(v12 + 200) = v30 & 1;
  *(_QWORD *)(v12 + 208) = v31;
  *(_BYTE *)(v12 + 216) = v34 & 1;
  *(_QWORD *)(v12 + 224) = v37;
  *(_BYTE *)(v12 + 232) = v38 & 1;
  *(_QWORD *)(v12 + 240) = v39;
  *(_BYTE *)(v12 + 248) = v40 & 1;
  *(_QWORD *)(v12 + 256) = v41;
  *(_BYTE *)(v12 + 264) = v42 & 1;
  *(_OWORD *)(v12 + 272) = v43;
  *(_OWORD *)(v12 + 288) = v44;
  *(_OWORD *)(v12 + 304) = v45;
  *(_QWORD *)(v12 + 320) = v46;
  *(_BYTE *)(v12 + 328) = v47 & 1;
  *(_BYTE *)(v12 + 329) = v48;
  *(_QWORD *)(v12 + 336) = v49;
  *(_BYTE *)(v12 + 344) = v50 & 1;
  *(_QWORD *)(v12 + 352) = v51;
  *(_BYTE *)(v12 + 360) = v52 & 1;
  *(_QWORD *)(v12 + 368) = v53;
  *(_BYTE *)(v12 + 376) = v54 & 1;
  *(_BYTE *)(v12 + 377) = v55;
  *(_QWORD *)(v12 + 384) = v56;
  *(_BYTE *)(v12 + 392) = v57 & 1;
  *(_OWORD *)(v12 + 400) = v58;
  *(_QWORD *)(v12 + 416) = v59;
  *(_QWORD *)(v12 + 424) = v60;
  *(_QWORD *)(v12 + 464) = v32;
  *(_QWORD *)(v12 + 472) = v33;
  *(_OWORD *)(v12 + 432) = v35;
  *(_OWORD *)(v12 + 448) = v36;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023AE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_task_dealloc(*(_QWORD *)(v0 + 680));
  v1 = *(_QWORD *)(v0 + 696);
  v2 = *(_QWORD *)(v0 + 672);
  v3 = *(_QWORD *)(v0 + 664);
  v4 = *(_QWORD *)(v0 + 648);
  v17 = *(_QWORD *)(v0 + 656);
  v18 = *(_QWORD *)(v0 + 640);
  v5 = *(_QWORD *)(v0 + 632);
  v15 = *(_QWORD *)(v0 + 624);
  v16 = *(_QWORD *)(v0 + 616);
  v19 = *(_QWORD *)(v0 + 608);
  v6 = *(_QWORD *)(v0 + 584);
  v7 = *(_QWORD *)(v0 + 576);
  v8 = *(_QWORD *)(v0 + 568);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.internalError(_:), v8);
  swift_errorRetain(v1);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000033, 0x8000000100557080, v1, v6, 0, v9, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000020, 0x8000000100557120, 218);
  swift_willThrow(v12);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v5, v16);
  v13 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v13(v3, v4);
  v13(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v18);
  swift_task_dealloc(v5);
  swift_task_dealloc(v19);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023B030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 744);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 712);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 704));
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  v4 = *(_QWORD *)(v0 + 760);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 664);
  v7 = *(_QWORD *)(v0 + 648);
  v20 = *(_QWORD *)(v0 + 656);
  v21 = *(_QWORD *)(v0 + 640);
  v8 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 624);
  v19 = *(_QWORD *)(v0 + 616);
  v22 = *(_QWORD *)(v0 + 608);
  v9 = *(_QWORD *)(v0 + 584);
  v10 = *(_QWORD *)(v0 + 576);
  v11 = *(_QWORD *)(v0 + 568);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v9, enum case for DIPError.Code.internalError(_:), v11);
  swift_errorRetain(v4);
  v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v13 = type metadata accessor for DIPError(0);
  v14 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v13, v14, 0, 0);
  v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000033, 0x8000000100557080, v4, v9, 0, v12, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000020, 0x8000000100557120, 218);
  swift_willThrow(v15);
  swift_errorRelease(v4);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v8, v19);
  v16 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v16(v6, v7);
  v16(v5, v7);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v21);
  swift_task_dealloc(v8);
  swift_task_dealloc(v22);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023B25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  *(_QWORD *)(v7 + 312) = a6;
  *(_QWORD *)(v7 + 320) = a7;
  *(_BYTE *)(v7 + 544) = a5;
  *(_QWORD *)(v7 + 296) = a3;
  *(_QWORD *)(v7 + 304) = a4;
  *(_QWORD *)(v7 + 280) = a1;
  *(_QWORD *)(v7 + 288) = a2;
  v8 = type metadata accessor for DIPError(0);
  *(_QWORD *)(v7 + 328) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 336) = v9;
  *(_QWORD *)(v7 + 344) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_100639960);
  *(_QWORD *)(v7 + 352) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 + 360) = v11;
  *(_QWORD *)(v7 + 368) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v7 + 376) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v7 + 384) = v13;
  *(_QWORD *)(v7 + 392) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  *(_QWORD *)(v7 + 400) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v7 + 408) = v15;
  *(_QWORD *)(v7 + 416) = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v7 + 424) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v7 + 432) = v17;
  *(_QWORD *)(v7 + 440) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL(0);
  *(_QWORD *)(v7 + 448) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v7 + 456) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 464) = swift_task_alloc(v20);
  *(_QWORD *)(v7 + 472) = swift_task_alloc(v20);
  return swift_task_switch(sub_10023B3D0, 0, 0);
}

uint64_t sub_10023B3D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 464);
  v1 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 456);
  v14 = *(_QWORD *)(v0 + 304);
  v5 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 288) + 16);
  *(_QWORD *)(v0 + 480) = v5;
  v6 = (uint64_t)&v5[4];
  v7 = v5 + 14;
  os_unfair_lock_lock(v5 + 14);
  sub_10002581C(v6, v0 + 64);
  os_unfair_lock_unlock(v7);
  sub_10000806C((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
  sub_10042DAE8(v1);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 64));
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 488) = v8;
  v8(v2, v1, v3);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v2, 0, 60.0);
  URLRequest.cachePolicy.setter(1);
  URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v9 = sub_100004828(&qword_100633FF0);
  inited = swift_initStackObject(v9, v0 + 104);
  *(_QWORD *)(v0 + 496) = inited;
  *(_OWORD *)(inited + 16) = xmmword_10051FFB0;
  *(_QWORD *)(inited + 32) = v14;
  v11 = dword_100643F70;
  v12 = (_QWORD *)swift_task_alloc(unk_100643F74);
  *(_QWORD *)(v0 + 504) = v12;
  *v12 = v0;
  v12[1] = sub_10023B564;
  return ((uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + v11))(*(_QWORD *)(v0 + 440), inited, *(_BYTE *)(v0 + 544), 0);
}

uint64_t sub_10023B564(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 504);
  *(_QWORD *)(v6 + 512) = a1;
  *(_QWORD *)(v6 + 520) = a2;
  *(_QWORD *)(v6 + 528) = a3;
  *(_BYTE *)(v6 + 545) = a4;
  *(_QWORD *)(v6 + 536) = v4;
  swift_task_dealloc(v7);
  swift_setDeallocating(*(_QWORD *)(v6 + 496));
  if (v4)
    v8 = sub_10023C1B4;
  else
    v8 = sub_10023B634;
  return swift_task_switch(v8, 0, 0);
}

void sub_10023B634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  Class v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(void);
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  Class isa;
  Class v68;
  id v69;
  void *v70;
  Class v71;
  uint64_t v72;
  void *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  os_unfair_lock_s *v85;
  os_unfair_lock_s *v86;
  uint64_t v87;
  uint64_t v88;
  os_unfair_lock_s *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(_QWORD *, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152[3];

  v1 = *(_QWORD *)(v0 + 528);
  v2 = objc_opt_self(NSHTTPURLResponse);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  if (!v3)
    goto LABEL_8;
  v4 = (void *)v3;
  v5 = *(id *)(v0 + 304);
  v6 = *(id *)(v0 + 528);
  if (objc_msgSend(v4, "statusCode") != v5)
  {

LABEL_8:
    v26 = *(_QWORD *)(v0 + 536);
    v27 = *(_QWORD *)(v0 + 520);
    v28 = *(_QWORD *)(v0 + 512);
    v29 = *(_QWORD *)(v0 + 352);
    v30 = type metadata accessor for JSONDecoder(0);
    v31 = swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    v32 = JSONDecoder.init()(v31);
    v33 = sub_10011C280(&qword_100639970, &qword_100639960);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v29, v28, v27, v29, v33);
    if (!v26)
    {
      v54 = *(_BYTE *)(v0 + 545);
      v56 = *(_QWORD *)(v0 + 360);
      v55 = *(_QWORD *)(v0 + 368);
      v57 = *(_QWORD *)(v0 + 352);
      swift_release(v32);
      JWSSignedJSON.payload.getter(v57);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
      v150 = *(_OWORD *)(v0 + 16);
      v144 = *(_QWORD *)(v0 + 40);
      v147 = *(_QWORD *)(v0 + 32);
      v137 = *(_QWORD *)(v0 + 56);
      v140 = *(_QWORD *)(v0 + 48);
      if ((v54 & 1) != 0)
      {
        v58 = 0xD000000000000022;
        v59 = 0x8000000100557440;
        v60 = 0x3032386462623231;
      }
      else
      {
        if (qword_10062F580 != -1)
          swift_once(&qword_10062F580, sub_10044C284);
        v61 = *(void **)(v0 + 528);
        v62 = *(_QWORD *)(v0 + 520);
        v63 = *(_QWORD *)(v0 + 512);
        v64 = qword_100670810;
        v65 = objc_allocWithZone((Class)NSCachedURLResponse);
        v66 = v61;
        sub_100022948(v63, v62);
        isa = Data._bridgeToObjectiveC()().super.isa;
        v68 = (Class)objc_msgSend(v65, "initWithResponse:data:", v66, isa);
        sub_100007F8C(v63, v62);

        v69 = sub_10044D3C8(v68, 0);
        if (v69)
        {
          v70 = v69;
          v71 = URLRequest._bridgeToObjectiveC()().super.isa;
          v72 = type metadata accessor for DIPURLCache();
          *(_QWORD *)(v0 + 256) = v64;
          *(_QWORD *)(v0 + 264) = v72;
          objc_msgSendSuper2((objc_super *)(v0 + 256), "storeCachedResponse:forRequest:", v70, v71);

          v68 = v71;
        }

        v58 = 0xD000000000000024;
        v59 = 0x8000000100557410;
        v60 = 0x3834303663393031;
      }
      v135 = *(_BYTE *)(v0 + 545);
      v73 = *(void **)(v0 + 528);
      v74 = *(_QWORD *)(v0 + 520);
      v75 = *(_QWORD *)(v0 + 512);
      v133 = *(_QWORD *)(v0 + 472);
      v76 = *(_QWORD *)(v0 + 448);
      v77 = *(_QWORD *)(v0 + 456);
      v79 = *(_QWORD *)(v0 + 432);
      v78 = *(_QWORD *)(v0 + 440);
      v80 = *(_QWORD *)(v0 + 424);
      v81 = *(_QWORD *)(v0 + 280);
      v82 = 0xE800000000000000;
      logMilestone(tag:description:)(*(Swift::String *)&v60, *(Swift::String *)&v58);
      sub_100007F8C(v75, v74);

      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v133, v76);
      *(_OWORD *)v81 = v150;
      *(_QWORD *)(v81 + 16) = v147;
      *(_QWORD *)(v81 + 24) = v144;
      *(_QWORD *)(v81 + 32) = v140;
      *(_QWORD *)(v81 + 40) = v137;
      *(_BYTE *)(v81 + 48) = v135;
      v83 = (unsigned int *)&enum case for DIPRetrier.RetryResult.success<A>(_:);
      goto LABEL_25;
    }
    swift_release(v32);
    if (qword_10062F580 != -1)
      swift_once(&qword_10062F580, sub_10044C284);
    v146 = *(void **)(v0 + 528);
    v132 = *(_QWORD *)(v0 + 512);
    v134 = *(_QWORD *)(v0 + 520);
    v123 = *(_QWORD *)(v0 + 472);
    v124 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v0 + 488);
    v149 = *(_QWORD *)(v0 + 456);
    v122 = *(_QWORD *)(v0 + 448);
    v131 = *(_QWORD *)(v0 + 440);
    v136 = *(_QWORD *)(v0 + 432);
    v143 = *(_QWORD *)(v0 + 424);
    v125 = *(_QWORD *)(v0 + 384);
    v126 = *(_QWORD *)(v0 + 392);
    v127 = *(_QWORD *)(v0 + 376);
    v128 = *(_QWORD *)(v0 + 344);
    v129 = *(_QWORD *)(v0 + 328);
    v130 = *(_QWORD *)(v0 + 336);
    v120 = *(_QWORD *)(v0 + 312);
    v121 = *(_QWORD *)(v0 + 320);
    v139 = *(_QWORD *)(v0 + 280);
    v34 = (void *)qword_100670810;
    v35 = URLRequest._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v34, "removeCachedResponseForRequest:", v35);

    v36 = sub_100004828((uint64_t *)&unk_1006325A0);
    v37 = sub_100004828((uint64_t *)&unk_100633440);
    v38 = *(_QWORD *)(v37 - 8);
    v39 = *(_QWORD *)(v38 + 72);
    v40 = *(unsigned __int8 *)(v38 + 80);
    v41 = (v40 + 32) & ~v40;
    v42 = swift_allocObject(v36, v41 + 2 * v39, v40 | 7);
    *(_OWORD *)(v42 + 16) = xmmword_1005208D0;
    v43 = v42 + v41;
    v44 = (_QWORD *)(v43 + *(int *)(v37 + 48));
    v45 = enum case for DIPError.PropertyKey.conversationID(_:);
    v46 = type metadata accessor for DIPError.PropertyKey(0);
    v47 = *(void (**)(void))(*(_QWORD *)(v46 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v47)(v43, v45, v46);
    v44[3] = &type metadata for String;
    *v44 = v120;
    v44[1] = v121;
    v48 = (_QWORD *)(v43 + v39 + *(int *)(v37 + 48));
    v47();
    v48[3] = v122;
    v49 = sub_100022234(v48);
    v124(v49, v123, v122);
    swift_bridgeObjectRetain(v121);
    v50 = sub_10011D314(v42);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v125 + 104))(v126, enum case for DIPError.Code.serverResponseInconsistent(_:), v127);
    swift_errorRetain(v26);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x80000001005573E0, v26, v126, 0, v50, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000020, 0x8000000100557120, 195);
    v51 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v52 = swift_allocError(v129, v51, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 32))(v53, v128, v129);
    sub_100007F8C(v132, v134);
    swift_errorRelease(v26);

    (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v131, v143);
    (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v123, v122);
    *(_QWORD *)v139 = v52;
    *(_QWORD *)(v139 + 8) = 0;
    *(_BYTE *)(v139 + 16) = 1;
LABEL_24:
    v83 = (unsigned int *)&enum case for DIPRetrier.RetryResult.retry<A>(_:);
LABEL_25:
    v110 = *(_QWORD *)(v0 + 464);
    v111 = *(_QWORD *)(v0 + 472);
    v112 = *(_QWORD *)(v0 + 440);
    v113 = *(_QWORD *)(v0 + 416);
    v114 = *(_QWORD *)(v0 + 392);
    v115 = *(_QWORD *)(v0 + 368);
    v116 = *(_QWORD *)(v0 + 344);
    v117 = *(_QWORD *)(v0 + 280);
    v118 = *v83;
    v119 = sub_100004828(&qword_100639968);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 104))(v117, v118, v119);
    swift_task_dealloc(v111);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v4, "valueForHTTPHeaderField:", v7);

  if (!v8)
    goto LABEL_23;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  *(_QWORD *)(v0 + 224) = v9;
  *(_QWORD *)(v0 + 232) = v11;
  v12 = sub_1000B3C38();
  Collection.nilIfEmpty.getter((_QWORD *)(v0 + 240), &type metadata for String, v12);
  v13 = swift_bridgeObjectRelease(v11);
  v14 = *(_QWORD *)(v0 + 248);
  if (!v14)
    goto LABEL_23;
  v15 = *(_QWORD *)(v0 + 240);
  defaultLogger()(v13);
  v16 = swift_bridgeObjectRetain_n(v14, 2);
  v17 = Logger.logObject.getter(v16);
  v19 = static os_log_type_t.info.getter(v17, v18);
  v20 = os_log_type_enabled(v17, v19);
  v22 = *(_QWORD *)(v0 + 408);
  v21 = *(_QWORD *)(v0 + 416);
  v23 = *(_QWORD *)(v0 + 400);
  if (v20)
  {
    v142 = *(_QWORD *)(v0 + 416);
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v138 = v23;
    v25 = swift_slowAlloc(32, -1);
    v152[0] = v25;
    *(_DWORD *)v24 = 136446210;
    swift_bridgeObjectRetain(v14);
    *(_QWORD *)(v0 + 272) = sub_1000E3AC8(v15, v14, v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v24 + 4);
    swift_bridgeObjectRelease_n(v14, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v19, "Bootstrap URL redirected to %{public}s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v142, v138);
  }
  else
  {
    swift_bridgeObjectRelease_n(v14, 2);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }
  v84 = *(_QWORD *)(v0 + 536);
  v85 = *(os_unfair_lock_s **)(v0 + 480);
  v86 = v85 + 14;
  v87 = (uint64_t)&v85[4];
  os_unfair_lock_lock(v85 + 14);
  sub_10002581C(v87, v0 + 184);
  os_unfair_lock_unlock(v86);
  if (!v84)
  {
    v88 = *(_QWORD *)(v0 + 480);
    v89 = (os_unfair_lock_s *)(v88 + 56);
    v90 = (_QWORD *)(v88 + 16);
    v91 = *(_QWORD *)(v0 + 208);
    v92 = *(_QWORD *)(v0 + 216);
    sub_10001E624(v0 + 184, v91);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v92 + 24))(v15, v14, v91, v92);
    v93 = *(_QWORD *)(v0 + 208);
    v94 = sub_10001E624(v0 + 184, v93);
    v95 = *(_QWORD *)(v93 - 8);
    v96 = swift_task_alloc((*(_QWORD *)(v95 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v96, v94, v93);
    *(_QWORD *)(v0 + 168) = &type metadata for BootstrapURLManager;
    *(_QWORD *)(v0 + 176) = &off_1006176C0;
    v97 = swift_task_alloc(32);
    *(_QWORD *)(v97 + 16) = v0 + 144;
    os_unfair_lock_lock(v89);
    v98 = *(_QWORD *)(v97 + 16);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v90);
    sub_10002581C(v98, (uint64_t)v90);
    os_unfair_lock_unlock(v89);
    swift_task_dealloc(v97);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 144));
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 184));
    swift_task_dealloc(v96);
LABEL_23:
    v99 = *(void **)(v0 + 528);
    v100 = *(_QWORD *)(v0 + 520);
    v101 = *(_QWORD *)(v0 + 512);
    v145 = *(_QWORD *)(v0 + 456);
    v148 = *(_QWORD *)(v0 + 448);
    v151 = *(_QWORD *)(v0 + 472);
    v102 = *(_QWORD *)(v0 + 432);
    v141 = *(_QWORD *)(v0 + 440);
    v103 = *(_QWORD *)(v0 + 424);
    v104 = *(_QWORD *)(v0 + 392);
    v105 = *(_QWORD *)(v0 + 328);
    v106 = *(_QWORD *)(v0 + 280);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 384) + 104))(v104, enum case for DIPError.Code.httpMovedPermanently(_:), *(_QWORD *)(v0 + 376));
    v107 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v108 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v109 = swift_allocError(v105, v108, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100557470, 0, v104, 0, v107, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000020, 0x8000000100557120, 167);

    sub_100007F8C(v101, v100);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v141, v103);
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v151, v148);
    *(_QWORD *)v106 = v109;
    *(_QWORD *)(v106 + 8) = 0;
    *(_BYTE *)(v106 + 16) = 1;
    goto LABEL_24;
  }
}

uint64_t sub_10023C1B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 456);
  v5 = *(_QWORD **)(v0 + 280);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 432) + 8))(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 424));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  *v5 = v1;
  v6 = *(_QWORD *)(v0 + 464);
  v7 = *(_QWORD *)(v0 + 472);
  v8 = *(_QWORD *)(v0 + 440);
  v9 = *(_QWORD *)(v0 + 416);
  v10 = *(_QWORD *)(v0 + 392);
  v11 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 280);
  v14 = enum case for DIPRetrier.RetryResult.failure<A>(_:);
  v15 = sub_100004828(&qword_100639968);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023C2E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;

  v27 = a4;
  v13 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_100008030((uint64_t)v15, &qword_100630A48);
    v20 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
    if (a6)
    {
      v28 = a5;
      v29 = a6;
      swift_bridgeObjectRetain(a6);
      v21._countAndFlagsBits = 47;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
    }
    else
    {
      v28 = 47;
      v29 = 0xE100000000000000;
    }
    v22._countAndFlagsBits = a3;
    v22._object = v27;
    String.append(_:)(v22);
    v23._countAndFlagsBits = 0x6E6F736A2ELL;
    v23._object = (void *)0xE500000000000000;
    String.append(_:)(v23);
    v24 = v29;
    URL.appendingPathComponent(_:)(v28, v29);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v20 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a7, v20, 1, v16);
}

uint64_t sub_10023C49C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *(_BYTE *)(v3 + 320) = a2;
  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v2;
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 120) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 128) = v5;
  *(_QWORD *)(v3 + 136) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v3 + 144) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 152) = v7;
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100639948);
  *(_QWORD *)(v3 + 168) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 176) = v9;
  *(_QWORD *)(v3 + 184) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  *(_QWORD *)(v3 + 192) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v3 + 200) = v11;
  *(_QWORD *)(v3 + 208) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v3 + 216) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v3 + 224) = v13;
  *(_QWORD *)(v3 + 232) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DIPSignpost.Config(0);
  *(_QWORD *)(v3 + 240) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DIPSignpost(0);
  *(_QWORD *)(v3 + 248) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v3 + 256) = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 264) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 272) = swift_task_alloc(v17);
  return swift_task_switch(sub_10023C5FC, 0, 0);
}

uint64_t sub_10023C5FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, char, char);

  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 104);
  static DaemonSignposts.configureLoadAttributeConfig.getter();
  v6 = DIPSignpost.init(_:)(v1);
  static DaemonSignposts.attributeConfigRequest.getter(v6);
  DIPSignpost.init(_:)(v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v2, 0, 60.0);
  URLRequest.cachePolicy.setter(1);
  URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v9 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + dword_100643F70);
  v7 = (_QWORD *)swift_task_alloc(unk_100643F74);
  *(_QWORD *)(v0 + 280) = v7;
  *v7 = v0;
  v7[1] = sub_10023C710;
  return v9(*(_QWORD *)(v0 + 232), (uint64_t)_swiftEmptyArrayStorage, *(_BYTE *)(v0 + 320), 0);
}

uint64_t sub_10023C710(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 280);
  *(_QWORD *)(v6 + 288) = a1;
  *(_QWORD *)(v6 + 296) = a2;
  *(_BYTE *)(v6 + 321) = a4;
  *(_QWORD *)(v6 + 304) = a3;
  *(_QWORD *)(v6 + 312) = v4;
  swift_task_dealloc(v7);
  if (v4)
    v8 = sub_10023D014;
  else
    v8 = sub_10023C784;
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10023C784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  Class isa;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  Swift::String v60;
  Swift::String v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  Class v68;
  Class v69;
  id v70;
  void *v71;
  Class v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = JSONDecoder.init()();
  v7 = sub_10011C280(&qword_100639950, &qword_100639948);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v4, v3, v2, v4, v7);
  if (v1)
  {
    v8 = v1;
    v9 = swift_release(v6);
    defaultLogger()(v9);
    swift_errorRetain(v1);
    v10 = swift_errorRetain(v1);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.debug.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v15 = *(_QWORD *)(v0 + 128);
    v14 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 120);
    if (v13)
    {
      v106 = *(_QWORD *)(v0 + 136);
      v102 = *(_QWORD *)(v0 + 128);
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v109 = v18;
      *(_DWORD *)v17 = 136315138;
      swift_getErrorValue(v8, v0 + 88, v0 + 48);
      v19 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
      v21 = v20;
      *(_QWORD *)(v0 + 96) = sub_1000E3AC8(v19, v20, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v17 + 4);
      swift_bridgeObjectRelease(v21);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "^^^^^ %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v106, v16);
    }
    else
    {
      swift_errorRelease(v8);
      swift_errorRelease(v8);

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
    if (qword_10062F580 != -1)
      swift_once(&qword_10062F580, sub_10044C284);
    v28 = *(_QWORD *)(v0 + 296);
    v29 = *(_QWORD *)(v0 + 288);
    v95 = *(_QWORD *)(v0 + 264);
    v88 = *(void **)(v0 + 304);
    v90 = *(_QWORD *)(v0 + 256);
    v92 = *(_QWORD *)(v0 + 248);
    v30 = *(_QWORD *)(v0 + 232);
    v84 = *(_QWORD *)(v0 + 224);
    v86 = *(_QWORD *)(v0 + 216);
    v32 = *(_QWORD *)(v0 + 152);
    v31 = *(_QWORD *)(v0 + 160);
    v33 = *(_QWORD *)(v0 + 144);
    v34 = (void *)qword_100670810;
    isa = URLRequest._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v34, "removeCachedResponseForRequest:", isa);

    (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v31, enum case for DIPError.Code.serverResponseInconsistent(_:), v33);
    swift_errorRetain(v8);
    v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v108 = type metadata accessor for DIPError(0);
    v105 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v37 = swift_allocError(v108, v105, 0, 0);
    v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x8000000100557350, v8, v31, 0, v36, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000024, 0x8000000100557320, 347);
    swift_willThrow(v38);
    sub_100007F8C(v29, v28);

    swift_errorRelease(v8);
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v30, v86);
    v39 = *(void (**)(void))(v90 + 8);
    ((void (*)(uint64_t, uint64_t))v39)(v95, v92);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v85 = *(_QWORD *)(v0 + 272);
    v87 = *(_QWORD *)(v0 + 264);
    v89 = *(_QWORD *)(v0 + 240);
    v91 = *(_QWORD *)(v0 + 232);
    v93 = *(_QWORD *)(v0 + 208);
    v96 = *(_QWORD *)(v0 + 184);
    v41 = *(_QWORD *)(v0 + 152);
    v40 = *(_QWORD *)(v0 + 160);
    v42 = *(_QWORD *)(v0 + 144);
    v98 = *(_QWORD *)(v0 + 136);
    v43 = *(_QWORD *)(v0 + 112);
    v39();
    v44 = sub_100004828((uint64_t *)&unk_1006325A0);
    v45 = sub_100004828((uint64_t *)&unk_100633440);
    v46 = *(_QWORD *)(v45 - 8);
    v47 = *(_QWORD *)(v46 + 72);
    v48 = *(unsigned __int8 *)(v46 + 80);
    v49 = (v48 + 32) & ~v48;
    v50 = swift_allocObject(v44, v49 + v47, v48 | 7);
    *(_OWORD *)(v50 + 16) = xmmword_10051FFB0;
    v51 = v50 + v49;
    v52 = (_QWORD *)(v51 + *(int *)(v45 + 48));
    v53 = enum case for DIPError.PropertyKey.conversationID(_:);
    v54 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 104))(v51, v53, v54);
    v55 = *(_QWORD *)(v43 + 24);
    v56 = *(_QWORD *)(v43 + 32);
    v52[3] = &type metadata for String;
    *v52 = v55;
    v52[1] = v56;
    swift_errorRetain(v37);
    swift_bridgeObjectRetain(v56);
    v57 = sub_10011D314(v50);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 104))(v40, enum case for DIPError.Code.internalError(_:), v42);
    swift_allocError(v108, v105, 0, 0);
    v58 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100557300, v37, v40, 0, v57, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000024, 0x8000000100557320, 350);
    swift_willThrow(v58);
    swift_errorRelease(v37);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v96);
    swift_task_dealloc(v40);
    swift_task_dealloc(v98);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v22 = *(unsigned __int8 *)(v0 + 321);
    v24 = *(_QWORD *)(v0 + 176);
    v23 = *(_QWORD *)(v0 + 184);
    v25 = *(_QWORD *)(v0 + 168);
    swift_release(v6);
    JWSSignedJSON.payload.getter(v25);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    v107 = *(_QWORD *)(v0 + 16);
    v103 = *(_QWORD *)(v0 + 32);
    v104 = *(_QWORD *)(v0 + 24);
    v101 = *(_QWORD *)(v0 + 40);
    if (v22 == 1)
    {
      v26._countAndFlagsBits = 0xD000000000000022;
      v26._object = (void *)0x80000001005573B0;
      v27._countAndFlagsBits = 0x3765386431393336;
      v27._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v27, v26);
    }
    else
    {
      v60._object = (void *)0x8000000100557380;
      v61._countAndFlagsBits = 0x3963393462323332;
      v61._object = (void *)0xE800000000000000;
      v60._countAndFlagsBits = 0xD000000000000024;
      logMilestone(tag:description:)(v61, v60);
      if (qword_10062F580 != -1)
        swift_once(&qword_10062F580, sub_10044C284);
      v62 = *(_QWORD *)(v0 + 296);
      v63 = *(void **)(v0 + 304);
      v64 = *(_QWORD *)(v0 + 288);
      v65 = qword_100670810;
      v66 = objc_allocWithZone((Class)NSCachedURLResponse);
      v67 = v63;
      sub_100022948(v64, v62);
      v68 = Data._bridgeToObjectiveC()().super.isa;
      v69 = (Class)objc_msgSend(v66, "initWithResponse:data:", v67, v68);
      sub_100007F8C(v64, v62);

      v70 = sub_10044D3C8(v69, 0);
      if (v70)
      {
        v71 = v70;
        v72 = URLRequest._bridgeToObjectiveC()().super.isa;
        v73 = type metadata accessor for DIPURLCache();
        *(_QWORD *)(v0 + 72) = v65;
        *(_QWORD *)(v0 + 80) = v73;
        objc_msgSendSuper2((objc_super *)(v0 + 72), "storeCachedResponse:forRequest:", v71, v72);

        v69 = v72;
      }

      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    }
    v74 = *(void **)(v0 + 304);
    v76 = *(_QWORD *)(v0 + 264);
    v75 = *(_QWORD *)(v0 + 272);
    v77 = *(_QWORD *)(v0 + 248);
    v78 = *(_QWORD *)(v0 + 256);
    v80 = *(_QWORD *)(v0 + 232);
    v79 = *(_QWORD *)(v0 + 240);
    v81 = *(_QWORD *)(v0 + 216);
    v82 = *(_QWORD *)(v0 + 224);
    v94 = *(_QWORD *)(v0 + 208);
    v97 = *(_QWORD *)(v0 + 184);
    v99 = *(_QWORD *)(v0 + 160);
    v100 = *(_QWORD *)(v0 + 136);
    sub_100007F8C(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));

    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v80, v81);
    v83 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
    v83(v76, v77);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v83(v75, v77);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v94);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v107, v104, v103, v101);
  }
}

uint64_t sub_10023D014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
  v4 = *(void (**)(void))(v3 + 8);
  ((void (*)(uint64_t, uint64_t))v4)(v1, v2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v5 = *(_QWORD *)(v0 + 312);
  v28 = *(_QWORD *)(v0 + 272);
  v29 = *(_QWORD *)(v0 + 264);
  v30 = *(_QWORD *)(v0 + 240);
  v31 = *(_QWORD *)(v0 + 232);
  v32 = *(_QWORD *)(v0 + 208);
  v33 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 144);
  v34 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 112);
  v4();
  v10 = sub_100004828((uint64_t *)&unk_1006325A0);
  v11 = sub_100004828((uint64_t *)&unk_100633440);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_10051FFB0;
  v17 = v16 + v15;
  v18 = (_QWORD *)(v17 + *(int *)(v11 + 48));
  v19 = enum case for DIPError.PropertyKey.conversationID(_:);
  v20 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v17, v19, v20);
  v21 = *(_QWORD *)(v9 + 24);
  v22 = *(_QWORD *)(v9 + 32);
  v18[3] = &type metadata for String;
  *v18 = v21;
  v18[1] = v22;
  swift_errorRetain(v5);
  swift_bridgeObjectRetain(v22);
  v23 = sub_10011D314(v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.internalError(_:), v8);
  v24 = type metadata accessor for DIPError(0);
  v25 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v24, v25, 0, 0);
  v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100557300, v5, v6, 0, v23, 0xD000000000000054, 0x80000001005570C0, 0xD000000000000024, 0x8000000100557320, 350);
  swift_willThrow(v26);
  swift_errorRelease(v5);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v6);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023D2A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1[122] = a1;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[123] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[124] = v3;
  v1[125] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError(0);
  v1[126] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[127] = v5;
  v1[128] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v1[129] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[130] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[131] = swift_task_alloc(v8);
  v1[132] = swift_task_alloc(v8);
  v1[133] = swift_task_alloc(v8);
  return swift_task_switch(sub_10023D370, 0, 0);
}

uint64_t sub_10023D370(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.info.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Refreshing configuration cache", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = v1[133];
  v8 = v1[130];
  v9 = v1[129];

  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[134] = v10;
  v10(v7, v9);
  v11 = (_QWORD *)swift_task_alloc(dword_10063990C);
  v1[135] = v11;
  *v11 = v1;
  v11[1] = sub_10023D470;
  return sub_10023A41C((uint64_t)(v1 + 2), 1);
}

uint64_t sub_10023D470()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v2 = *v1;
  v3 = (_BYTE *)(*v1 + 264);
  v4 = *(_QWORD *)(*v1 + 1080);
  *(_QWORD *)(v2 + 1088) = v0;
  v67 = *(_QWORD *)(v2 + 16);
  v65 = *(_QWORD *)(v2 + 32);
  v66 = *(_QWORD *)(v2 + 24);
  v64 = *(_QWORD *)(v2 + 40);
  v5 = *(_QWORD *)(v2 + 48);
  v6 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v2 + 72);
  v61 = *(_QWORD *)(v2 + 80);
  v62 = *(_QWORD *)(v2 + 64);
  v59 = *(_QWORD *)(v2 + 96);
  v60 = *(_QWORD *)(v2 + 88);
  v57 = *(_QWORD *)(v2 + 112);
  v58 = *(_QWORD *)(v2 + 104);
  v55 = *(_QWORD *)(v2 + 128);
  v56 = *(_QWORD *)(v2 + 120);
  v53 = *(_QWORD *)(v2 + 144);
  v54 = *(_QWORD *)(v2 + 136);
  v52 = *(_QWORD *)(v2 + 152);
  v51 = *(_QWORD *)(v2 + 160);
  v50 = *(_BYTE *)(v2 + 168);
  v49 = *(_QWORD *)(v2 + 176);
  v48 = *(_BYTE *)(v2 + 184);
  v46 = *(_QWORD *)(v2 + 200);
  v47 = *(_QWORD *)(v2 + 192);
  v44 = *(_QWORD *)(v2 + 208);
  v42 = *(_BYTE *)(v2 + 216);
  v40 = *(_QWORD *)(v2 + 224);
  v38 = *(_BYTE *)(v2 + 232);
  v37 = *(_QWORD *)(v2 + 240);
  v63 = *(_OWORD *)(v2 + 448);
  v8 = *(_BYTE *)(v2 + 248);
  v9 = *(_QWORD *)(v2 + 256);
  v10 = *(_BYTE *)(v2 + 264);
  v11 = *(_QWORD *)(v2 + 272);
  v18 = *(_BYTE *)(v2 + 280);
  v12 = *(_QWORD *)(v2 + 296);
  v17 = *(_QWORD *)(v2 + 288);
  v13 = *(_QWORD *)(v2 + 304);
  v14 = *(_QWORD *)(v2 + 312);
  v19 = *(_QWORD *)(v2 + 320);
  v20 = *(_QWORD *)(v2 + 328);
  v21 = *(_QWORD *)(v2 + 336);
  v22 = *(_BYTE *)(v2 + 344);
  v23 = *(_BYTE *)(v2 + 345);
  v24 = *(_QWORD *)(v2 + 352);
  v25 = *(_BYTE *)(v2 + 360);
  v26 = *(_QWORD *)(v2 + 368);
  v27 = *(_BYTE *)(v2 + 376);
  v28 = *(_QWORD *)(v2 + 384);
  v29 = *(_BYTE *)(v2 + 392);
  v30 = *(_BYTE *)(v2 + 393);
  v31 = *(_QWORD *)(v2 + 400);
  v32 = *(_BYTE *)(v2 + 408);
  v33 = *(_QWORD *)(v2 + 416);
  v34 = *(_QWORD *)(v2 + 424);
  v35 = *(_QWORD *)(v2 + 432);
  v36 = *(_QWORD *)(v2 + 440);
  v39 = *(_QWORD *)(v2 + 464);
  v41 = *(_QWORD *)(v2 + 472);
  v43 = *(_QWORD *)(v2 + 480);
  v45 = *(_QWORD *)(v2 + 488);
  swift_task_dealloc(v4);
  if (v0)
  {
    v15 = sub_10023D94C;
  }
  else
  {
    *(_QWORD *)(v2 + 496) = v67;
    *(_QWORD *)(v2 + 504) = v66;
    *(_QWORD *)(v2 + 512) = v65;
    *(_QWORD *)(v2 + 520) = v64;
    *(_QWORD *)(v2 + 544) = v62;
    *(_QWORD *)(v2 + 560) = v61;
    *(_QWORD *)(v2 + 568) = v60;
    *(_QWORD *)(v2 + 576) = v59;
    *(_QWORD *)(v2 + 584) = v58;
    *(_QWORD *)(v2 + 592) = v57;
    *(_QWORD *)(v2 + 600) = v56;
    *(_QWORD *)(v2 + 608) = v55;
    *(_QWORD *)(v2 + 616) = v54;
    *(_QWORD *)(v2 + 624) = v53;
    *(_QWORD *)(v2 + 632) = v52;
    *(_QWORD *)(v2 + 640) = v51;
    v3[384] = v50;
    *(_QWORD *)(v2 + 656) = v49;
    v3[400] = v48;
    *(_QWORD *)(v2 + 672) = v47;
    *(_QWORD *)(v2 + 680) = v46;
    *(_QWORD *)(v2 + 688) = v44;
    v3[432] = v42;
    *(_QWORD *)(v2 + 704) = v40;
    v3[448] = v38;
    *(_QWORD *)(v2 + 720) = v37;
    v3[464] = v8;
    *(_QWORD *)(v2 + 736) = v9;
    v3[480] = v10;
    *(_QWORD *)(v2 + 528) = v5;
    *(_QWORD *)(v2 + 536) = v6;
    *(_QWORD *)(v2 + 552) = v7;
    *(_QWORD *)(v2 + 752) = v11;
    v3[496] = v18;
    *(_QWORD *)(v2 + 768) = v17;
    *(_QWORD *)(v2 + 776) = v12;
    *(_QWORD *)(v2 + 784) = v13;
    *(_QWORD *)(v2 + 792) = v14;
    *(_QWORD *)(v2 + 800) = v19;
    *(_QWORD *)(v2 + 808) = v20;
    *(_QWORD *)(v2 + 816) = v21;
    v3[560] = v22;
    *(_BYTE *)(v2 + 825) = v23;
    *(_QWORD *)(v2 + 832) = v24;
    v3[576] = v25;
    *(_QWORD *)(v2 + 848) = v26;
    v3[592] = v27;
    *(_QWORD *)(v2 + 864) = v28;
    v3[608] = v29;
    *(_BYTE *)(v2 + 873) = v30;
    *(_QWORD *)(v2 + 880) = v31;
    v3[624] = v32;
    *(_QWORD *)(v2 + 896) = v33;
    *(_QWORD *)(v2 + 904) = v34;
    *(_QWORD *)(v2 + 912) = v35;
    *(_QWORD *)(v2 + 920) = v36;
    *(_OWORD *)(v2 + 928) = v63;
    *(_QWORD *)(v2 + 944) = v39;
    *(_QWORD *)(v2 + 952) = v41;
    *(_QWORD *)(v2 + 960) = v43;
    *(_QWORD *)(v2 + 968) = v45;
    sub_10023E118((_QWORD *)(v2 + 496));
    v15 = sub_10023D854;
  }
  return swift_task_switch(v15, 0, 0);
}

uint64_t sub_10023D854(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Done refreshing configuration cache", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 1072);
  v7 = *(_QWORD *)(v1 + 1056);
  v8 = *(_QWORD *)(v1 + 1032);

  v6(v7, v8);
  v9 = *(_QWORD *)(v1 + 1056);
  v10 = *(_QWORD *)(v1 + 1048);
  v11 = *(_QWORD *)(v1 + 1024);
  v12 = *(_QWORD *)(v1 + 1000);
  swift_task_dealloc(*(_QWORD *)(v1 + 1064));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10023D94C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 1088);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 1072);
  v3 = *(_QWORD *)(v0 + 1048);
  v4 = *(_QWORD *)(v0 + 1032);
  v5 = *(_QWORD *)(v0 + 1024);
  v6 = *(_QWORD *)(v0 + 1016);
  v7 = *(_QWORD *)(v0 + 1008);
  v8 = *(_QWORD *)(v0 + 1000);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 992) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 984));
  swift_errorRetain(v1);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100557490, v1, v8, 0, v9, 0xD000000000000054, 0x80000001005570C0, 0x4368736572666572, 0xEE00292865686361, 369);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v7, v10, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v12, v5, v7);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v3);
  swift_errorRelease(v1);
  v2(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_errorRelease(v11);
  v14 = *(_QWORD *)(v0 + 1056);
  v15 = *(_QWORD *)(v0 + 1048);
  v16 = *(_QWORD *)(v0 + 1024);
  v17 = *(_QWORD *)(v0 + 1000);
  swift_task_dealloc(*(_QWORD *)(v0 + 1064));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023DB28()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for DIPConfigWebService()
{
  return objc_opt_self(_TtC8coreidvd19DIPConfigWebService);
}

uint64_t sub_10023DB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a54);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a14);
    swift_bridgeObjectRetain(a16);
    swift_bridgeObjectRetain(a18);
    swift_bridgeObjectRetain(a24);
    swift_bridgeObjectRetain(a36);
    swift_bridgeObjectRetain(a38);
    swift_bridgeObjectRetain(a40);
    swift_bridgeObjectRetain(a51);
    swift_bridgeObjectRetain(a52);
    return swift_bridgeObjectRetain(a53);
  }
  return result;
}

uint64_t sub_10023DC8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v10 = (_QWORD *)swift_task_alloc(dword_100639914);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100007EE8;
  return sub_10023B25C(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_10023DD1C(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  sub_10023DDB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1));
  return a1;
}

uint64_t sub_10023DDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a12);
    swift_bridgeObjectRelease(a20);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a14);
    swift_bridgeObjectRelease(a32);
    swift_bridgeObjectRelease(a34);
    return swift_bridgeObjectRelease(a36);
  }
  return result;
}

_QWORD *sub_10023DE58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[9];
  v5 = a1[11];
  v6 = a1[13];
  v7 = a1[15];
  v8 = a1[17];
  v9 = a1[23];
  v10 = a1[35];
  v12 = a1[37];
  v13 = a1[39];
  v14 = a1[50];
  v15 = a1[51];
  v16 = a1[52];
  swift_bridgeObjectRetain(a1[53]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t sub_10023DF58(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_10023DFA4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v14 = *(_OWORD *)(a1 + 384);
  v15 = *(_OWORD *)(a1 + 400);
  v12 = *(_OWORD *)(a1 + 352);
  v13 = *(_OWORD *)(a1 + 368);
  v10 = *(_OWORD *)(a1 + 320);
  v11 = *(_OWORD *)(a1 + 336);
  v8 = *(_OWORD *)(a1 + 288);
  v9 = *(_OWORD *)(a1 + 304);
  v6 = *(_OWORD *)(a1 + 256);
  v7 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 240);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    v8,
    *((_QWORD *)&v8 + 1),
    v9,
    *((_QWORD *)&v9 + 1),
    v10,
    *((_QWORD *)&v10 + 1),
    v11,
    *((_QWORD *)&v11 + 1),
    v12,
    *((_QWORD *)&v12 + 1),
    v13,
    *((_QWORD *)&v13 + 1),
    v14,
    *((_QWORD *)&v14 + 1),
    v15,
    *((_QWORD *)&v15 + 1),
    *(_QWORD *)(a1 + 416),
    *(_QWORD *)(a1 + 424));
  return a1;
}

uint64_t sub_10023E048(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  if (result)
  {
    v8 = result;
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_10023E098(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

uint64_t *sub_10023E0E4(uint64_t *a1)
{
  sub_10023E048(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

_QWORD *sub_10023E118(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[9];
  v5 = a1[11];
  v6 = a1[13];
  v7 = a1[15];
  v8 = a1[17];
  v9 = a1[23];
  v12 = a1[35];
  v13 = a1[37];
  v14 = a1[39];
  v15 = a1[50];
  v16 = a1[51];
  v17 = a1[52];
  v10 = a1[54];
  v18 = a1[53];
  v19 = a1[57];
  v20 = a1[59];
  swift_bridgeObjectRelease(a1[55]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_10023E250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10023E28C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ISO18013KnownDocTypes(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10023E2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10023E304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10023E348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10023E38C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10023E3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10023E3DC);
}

uint64_t sub_10023E3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10023E418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10023E424);
}

uint64_t sub_10023E424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DeveloperTestJapanNationalIDCardPayloadBuilder(uint64_t a1)
{
  uint64_t result;

  result = qword_1006399E8;
  if (!qword_1006399E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeveloperTestJapanNationalIDCardPayloadBuilder);
  return result;
}

uint64_t sub_10023E4A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ISO18013KnownDocTypes(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10023E508(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for CredentialBuilderPayloadDetails(0);
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10023E568, 0, 0);
}

uint64_t sub_10023E568()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD);

  sub_100397368(v0[7], v0[8], v0[11]);
  v1 = v0[8];
  v0[5] = type metadata accessor for DeveloperTestJapanNationalIDCardPayloadBuilder(0);
  v0[6] = sub_10023E91C();
  v2 = sub_100022234(v0 + 2);
  sub_10023E964(v1, (uint64_t)v2);
  v3 = type metadata accessor for Date(0);
  v4 = objc_allocWithZone((Class)type metadata accessor for IdentityCredentialPayloadBuilder(0));
  v0[12] = IdentityCredentialPayloadBuilder.init(with:dateProvider:)(v0 + 2, v3, &protocol witness table for Date);
  v7 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of IdentityCredentialPayloadBuilder.buildPayload(with:)
                                      + async function pointer to dispatch thunk of IdentityCredentialPayloadBuilder.buildPayload(with:));
  v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of IdentityCredentialPayloadBuilder.buildPayload(with:)
                                  + 1));
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_10023E674;
  return v7(v0[11]);
}

uint64_t sub_10023E674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 104);
  *(_QWORD *)(*v3 + 112) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_10023E748;
  }
  else
  {
    *(_QWORD *)(v6 + 120) = a2;
    *(_QWORD *)(v6 + 128) = a1;
    v8 = sub_10023E6EC;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10023E6EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 120));
}

uint64_t sub_10023E748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023E7A0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100639A34);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10023E7EC;
  return sub_10023E508(a1);
}

uint64_t sub_10023E7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *v3;
  v8 = swift_task_dealloc(v6);
  if (!v2)
  {
    v8 = a1;
    v9 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t sub_10023E850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for CredentialBuilderSignatureAlgorithm(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = __DataStorage.init(length:)(64) | 0x4000000000000000;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v3, enum case for CredentialBuilderSignatureAlgorithm.ES256(_:), v1);
  CredentialBuilderSignatureDetails.init(signingAlgorithm:issuerCertificate:signature:)(v3, _swiftEmptyArrayStorage, 0x4000000000, v5);
  swift_task_dealloc(v3);
  return sub_10012CFC8(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_10023E91C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100639A38;
  if (!qword_100639A38)
  {
    v1 = type metadata accessor for DeveloperTestJapanNationalIDCardPayloadBuilder(255);
    result = swift_getWitnessTable(&unk_100526A50, v1);
    atomic_store(result, (unint64_t *)&qword_100639A38);
  }
  return result;
}

uint64_t sub_10023E964(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeveloperTestJapanNationalIDCardPayloadBuilder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10023E9A8(unint64_t a1, unint64_t a2, uint64_t a3, void *a4, _QWORD *a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  void (*v25)(void);
  _QWORD *v26;
  void *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t object;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  id v54;
  Swift::String v55;
  Swift::String_optional v56;
  uint64_t countAndFlagsBits;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  char v75;
  uint64_t v76;
  Swift::String v77;
  Swift::String v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  Swift::String v85;
  Swift::String v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, _QWORD, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  const char *v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned int v116;
  uint64_t v117;
  char v118;
  char v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  unint64_t v143;
  _OWORD v144[2];
  __int128 v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v130 = a6;
  v136 = a5;
  v141 = a4;
  v142 = a3;
  v143 = a1;
  v133 = type metadata accessor for DIPError.Code(0);
  v131 = *(_QWORD *)(v133 - 8);
  v7 = __chkstk_darwin(v133);
  v126 = (char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v135 = (char *)&v123 - v9;
  v139 = type metadata accessor for Logger(0);
  v137 = *(_QWORD *)(v139 - 8);
  v10 = __chkstk_darwin(v139);
  v124 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v134 = (char *)&v123 - v12;
  v13 = type metadata accessor for DIPError.PropertyKey(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v128 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004828((uint64_t *)&unk_1006325A0);
  v17 = sub_100004828((uint64_t *)&unk_100633440);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = 2 * v19;
  v23 = swift_allocObject(v16, v21 + 3 * v19, v20 | 7);
  *(_OWORD *)(v23 + 16) = xmmword_100524440;
  v24 = (unint64_t *)(v23 + v21 + *(int *)(v17 + 48));
  v129 = v14;
  v25 = *(void (**)(void))(v14 + 104);
  ((void (*)(uint64_t, _QWORD, uint64_t))v25)(v23 + v21, enum case for DIPError.PropertyKey.conversationID(_:), v13);
  v24[3] = (unint64_t)&type metadata for String;
  *v24 = v143;
  v24[1] = a2;
  v26 = (_QWORD *)(v23 + v21 + v19 + *(int *)(v17 + 48));
  v25();
  v26[3] = &type metadata for String;
  v27 = v141;
  *v26 = v142;
  v26[1] = v27;
  v28 = (uint64_t *)(v23 + v21 + v22 + *(int *)(v17 + 48));
  v25();
  v29 = v136;
  v30 = v136[6];
  object = v136[7];
  v28[3] = (uint64_t)&type metadata for String;
  v138 = v30;
  *v28 = v30;
  v28[1] = object;
  v132 = a2;
  swift_bridgeObjectRetain(a2);
  v32 = v29;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(object);
  v33 = sub_10011D314(v23);
  v140 = v33;
  v34 = v29[8];
  v35 = v29[9];
  v125 = v34;
  v127 = v35;
  if (v35)
  {
    v36 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000) == 0)
      v36 = v34 & 0xFFFFFFFFFFFFLL;
    if (v36)
    {
      v37 = (uint64_t)v128;
      ((void (*)(char *, _QWORD, uint64_t))v25)(v128, enum case for DIPError.PropertyKey.serverSubStatusCode(_:), v13);
      v146 = &type metadata for String;
      *(_QWORD *)&v145 = v34;
      *((_QWORD *)&v145 + 1) = v35;
      sub_10000491C(&v145, v144);
      swift_bridgeObjectRetain(v35);
      v38 = v140;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v140);
      v149 = v38;
      sub_1004811C4(v144, v37, isUniquelyReferenced_nonNull_native);
      v140 = v149;
      swift_bridgeObjectRelease(0x8000000000000000);
      v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v129 + 8))(v37, v13);
    }
  }
  v40 = v139;
  v41 = v134;
  defaultLogger()(v33);
  v42 = sub_10023FE18(v32);
  v43 = Logger.logObject.getter(v42);
  v45 = static os_log_type_t.info.getter(v43, v44);
  if (os_log_type_enabled(v43, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v145 = v47;
    *(_DWORD *)v46 = 136446210;
    swift_bridgeObjectRetain(object);
    *(_QWORD *)&v144[0] = sub_1000E3AC8(v138, object, (uint64_t *)&v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v144, (char *)v144 + 8, v46 + 4);
    swift_bridgeObjectRelease(object);
    sub_10023FE8C(v32);
    _os_log_impl((void *)&_mh_execute_header, v43, v45, "Server returned status %{public}s", v46, 0xCu);
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);
  }
  else
  {
    sub_10023FE8C(v32);
  }

  v48 = *(void (**)(char *, uint64_t))(v137 + 8);
  v48(v41, v40);
  sub_10023FF00((uint64_t)v32, (uint64_t)v144);
  sub_10023FF00((uint64_t)v144, (uint64_t)&v145);
  v49 = (void *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v50 = v145;
    if (v145 != __PAIR128__(v132, v143)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v145, *((_QWORD *)&v145 + 1), v143, v132, 0) & 1) == 0)
    {
      v149 = 0;
      v150 = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease(v150);
      v149 = 0xD00000000000001BLL;
      v150 = 0x8000000100557620;
      v85._countAndFlagsBits = v50;
      v85._object = v49;
      String.append(_:)(v85);
      v86._countAndFlagsBits = 0xD000000000000013;
      v86._object = (void *)0x8000000100557520;
      String.append(_:)(v86);
      v79 = v149;
      v80 = v150;
      v81 = v135;
      (*(void (**)(char *, _QWORD, uint64_t))(v131 + 104))(v135, enum case for DIPError.Code.serverResponseInconsistent(_:), v133);
      v87 = type metadata accessor for DIPError(0);
      v88 = sub_100007F30();
      swift_allocError(v87, v88, 0, 0);
      v84 = 64;
      goto LABEL_43;
    }
  }
  v52 = v32[2];
  v51 = (void *)v32[3];
  if ((v52 != v142 || v51 != v141)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v32[2], v32[3], v142, v141, 0) & 1) == 0)
  {
    v149 = 0;
    v150 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(v150);
    v149 = 0xD000000000000016;
    v150 = 0x8000000100557500;
    swift_bridgeObjectRetain(v51);
    v77._countAndFlagsBits = v52;
    v77._object = v51;
    String.append(_:)(v77);
    swift_bridgeObjectRelease(v51);
    v78._countAndFlagsBits = 0xD000000000000013;
    v78._object = (void *)0x8000000100557520;
    String.append(_:)(v78);
    v79 = v149;
    v80 = v150;
    v81 = v135;
    (*(void (**)(char *, _QWORD, uint64_t))(v131 + 104))(v135, enum case for DIPError.Code.serverResponseInconsistent(_:), v133);
    v82 = type metadata accessor for DIPError(0);
    v83 = sub_100007F30();
    swift_allocError(v82, v83, 0, 0);
    v84 = 67;
LABEL_43:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v79, v80, 0, v81, 0, v140, 0xD00000000000004ELL, 0x8000000100557540, 0xD00000000000002DLL, 0x8000000100557590, v84);
    return;
  }
  if ((v130 & 1) == 0)
  {
    swift_bridgeObjectRetain(object);
    goto LABEL_23;
  }
  v53 = (void *)objc_opt_self(NSUserDefaults);
  v54 = objc_msgSend(v53, "standardUserDefaults", swift_bridgeObjectRetain(object).n128_f64[0]);
  v55._countAndFlagsBits = 0xD00000000000001DLL;
  v55._object = (void *)0x8000000100557600;
  v56 = NSUserDefaults.internalString(forKey:)(v55);
  countAndFlagsBits = v56.value._countAndFlagsBits;

  if (!v56.value._object)
  {
LABEL_23:
    countAndFlagsBits = v138;
    goto LABEL_24;
  }
  v58 = ((unint64_t)v56.value._object >> 56) & 0xF;
  if (((uint64_t)v56.value._object & 0x2000000000000000) == 0)
    v58 = v56.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v58)
  {
    swift_bridgeObjectRelease(v56.value._object);
    goto LABEL_23;
  }
  v59 = swift_bridgeObjectRelease(object);
  v60 = v124;
  defaultLogger()(v59);
  v61 = swift_bridgeObjectRetain_n(v56.value._object, 2);
  v62 = Logger.logObject.getter(v61);
  v64 = static os_log_type_t.info.getter(v62, v63);
  if (os_log_type_enabled(v62, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc(12, -1);
    v66 = swift_slowAlloc(32, -1);
    v149 = v66;
    *(_DWORD *)v65 = 136446210;
    swift_bridgeObjectRetain(v56.value._object);
    v147 = sub_1000E3AC8(v56.value._countAndFlagsBits, (unint64_t)v56.value._object, &v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v65 + 4);
    swift_bridgeObjectRelease_n(v56.value._object, 3);
    _os_log_impl((void *)&_mh_execute_header, v62, v64, "Forcing response header status code to %{public}s due to user setting", v65, 0xCu);
    swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v65, -1, -1);

    v67 = v60;
    v68 = v139;
  }
  else
  {

    swift_bridgeObjectRelease_n(v56.value._object, 2);
    v67 = v60;
    v68 = v40;
  }
  v48(v67, v68);
  object = (unint64_t)v56.value._object;
LABEL_24:
  v69 = HIBYTE(object) & 0xF;
  v70 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if ((object & 0x2000000000000000) != 0)
    v71 = HIBYTE(object) & 0xF;
  else
    v71 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  v72 = (uint64_t)v135;
  if (!v71)
    goto LABEL_92;
  if ((object & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(object);
    v76 = (uint64_t)sub_1004E5510(countAndFlagsBits, object, 10);
    v119 = v118;
    swift_bridgeObjectRelease(object);
    if ((v119 & 1) != 0)
      goto LABEL_92;
    goto LABEL_65;
  }
  if ((object & 0x2000000000000000) == 0)
  {
    if ((countAndFlagsBits & 0x1000000000000000) != 0)
      v73 = (unsigned __int8 *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v73 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(countAndFlagsBits, object);
    v74 = sub_1004E54FC(v73, v70, 10);
    if ((v75 & 1) != 0)
      goto LABEL_92;
    v76 = (uint64_t)v74;
LABEL_65:
    v93 = v131;
    v94 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v131 + 104);
    v95 = v133;
    v96 = v94(v72, enum case for DIPError.Code.topekaOK(_:), v133);
    v97 = DIPError.Code.rawValue.getter(v96);
    v98 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
    v98(v72, v95);
    if (v76 == v97)
      goto LABEL_69;
    v99 = v133;
    v100 = v94(v72, enum case for DIPError.Code.topekaOKToContinueWithErrorMin(_:), v133);
    v101 = DIPError.Code.rawValue.getter(v100);
    v98(v72, v99);
    v102 = v126;
    v103 = v94((uint64_t)v126, enum case for DIPError.Code.topekaOKToContinueWithErrorMax(_:), v99);
    v104 = DIPError.Code.rawValue.getter(v103);
    v98((uint64_t)v102, v99);
    if (v104 >= v101)
    {
      if (v76 >= v101 && v104 >= v76)
      {
LABEL_69:
        swift_bridgeObjectRelease(object);
        if (!v127)
          goto LABEL_74;
        v105 = HIBYTE(v127) & 0xF;
        if ((v127 & 0x2000000000000000) == 0)
          v105 = v125 & 0xFFFFFFFFFFFFLL;
        if (!v105)
        {
LABEL_74:
          swift_bridgeObjectRelease(v140);
          return;
        }
        sub_10023F760(v125, v127, v72);
        v106 = type metadata accessor for DIPError(0);
        v107 = sub_100007F30();
        swift_allocError(v106, v107, 0, 0);
        v108 = 0xD00000000000001DLL;
        v122 = 84;
        v109 = "server returned subStatusCode";
        goto LABEL_93;
      }
LABEL_92:
      sub_10023F760(countAndFlagsBits, object, v72);
      swift_bridgeObjectRelease(object);
      v120 = type metadata accessor for DIPError(0);
      v121 = sub_100007F30();
      swift_allocError(v120, v121, 0, 0);
      v108 = 0xD00000000000001ELL;
      v122 = 79;
      v109 = "server returned non-200 status";
LABEL_93:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v108, (unint64_t)(v109 - 32) | 0x8000000000000000, 0, v72, 0, v140, 0xD00000000000004ELL, 0x8000000100557540, 0xD00000000000002DLL, 0x8000000100557590, v122);
      return;
    }
    __break(1u);
    goto LABEL_97;
  }
  v149 = countAndFlagsBits;
  v150 = object & 0xFFFFFFFFFFFFFFLL;
  if (countAndFlagsBits != 43)
  {
    if (countAndFlagsBits == 45)
    {
      if (!v69)
      {
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
      if (v69 != 1)
      {
        if ((BYTE1(countAndFlagsBits) - 48) > 9u)
          goto LABEL_58;
        if (v69 == 2)
        {
          LOBYTE(v69) = 0;
          v76 = -(uint64_t)(BYTE1(countAndFlagsBits) - 48);
          goto LABEL_64;
        }
        if ((BYTE2(countAndFlagsBits) - 48) > 9u)
          goto LABEL_58;
        v76 = -10 * (BYTE1(countAndFlagsBits) - 48)
            - (BYTE2(countAndFlagsBits) - 48);
        v114 = v69 - 3;
        if (v69 != 3)
        {
          v115 = (unsigned __int8 *)&v149 + 3;
          while (1)
          {
            v116 = *v115 - 48;
            if (v116 > 9)
              goto LABEL_58;
            v117 = 10 * v76;
            if ((unsigned __int128)(v76 * (__int128)10) >> 64 != (10 * v76) >> 63)
              goto LABEL_58;
            v76 = v117 - v116;
            if (__OFSUB__(v117, v116))
              goto LABEL_58;
            LOBYTE(v69) = 0;
            ++v115;
            if (!--v114)
              goto LABEL_64;
          }
        }
        goto LABEL_63;
      }
LABEL_95:
      v76 = 0;
LABEL_64:
      if ((v69 & 1) != 0)
        goto LABEL_92;
      goto LABEL_65;
    }
    if (!v69 || (countAndFlagsBits - 48) > 9u)
    {
LABEL_58:
      v76 = 0;
      LOBYTE(v69) = 1;
      goto LABEL_64;
    }
    v76 = (countAndFlagsBits - 48);
    if (v69 != 1)
    {
      if ((BYTE1(countAndFlagsBits) - 48) > 9u)
        goto LABEL_58;
      v76 = 10 * (countAndFlagsBits - 48) + (BYTE1(countAndFlagsBits) - 48);
      v110 = v69 - 2;
      if (v69 != 2)
      {
        v111 = (unsigned __int8 *)&v149 + 2;
        while (1)
        {
          v112 = *v111 - 48;
          if (v112 > 9)
            goto LABEL_58;
          v113 = 10 * v76;
          if ((unsigned __int128)(v76 * (__int128)10) >> 64 != (10 * v76) >> 63)
            goto LABEL_58;
          v76 = v113 + v112;
          if (__OFADD__(v113, v112))
            goto LABEL_58;
          LOBYTE(v69) = 0;
          ++v111;
          if (!--v110)
            goto LABEL_64;
        }
      }
    }
LABEL_63:
    LOBYTE(v69) = 0;
    goto LABEL_64;
  }
  if (v69)
  {
    if (v69 == 1)
      goto LABEL_95;
    if ((BYTE1(countAndFlagsBits) - 48) > 9u)
      goto LABEL_58;
    v76 = (BYTE1(countAndFlagsBits) - 48);
    if (v69 != 2)
    {
      if ((BYTE2(countAndFlagsBits) - 48) > 9u)
        goto LABEL_58;
      v76 = 10 * (BYTE1(countAndFlagsBits) - 48) + (BYTE2(countAndFlagsBits) - 48);
      v89 = v69 - 3;
      if (v69 != 3)
      {
        v90 = (unsigned __int8 *)&v149 + 3;
        while (1)
        {
          v91 = *v90 - 48;
          if (v91 > 9)
            goto LABEL_58;
          v92 = 10 * v76;
          if ((unsigned __int128)(v76 * (__int128)10) >> 64 != (10 * v76) >> 63)
            goto LABEL_58;
          v76 = v92 + v91;
          if (__OFADD__(v92, v91))
            goto LABEL_58;
          LOBYTE(v69) = 0;
          ++v90;
          if (!--v89)
            goto LABEL_64;
        }
      }
    }
    goto LABEL_63;
  }
LABEL_98:
  __break(1u);
}

unsigned __int8 *sub_10023F760@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t, _QWORD, uint64_t);
  unsigned __int8 *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  char v35;
  _QWORD v37[3];

  v6 = sub_100004828(&qword_1006335E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v37[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v37[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 104);
  result = (unsigned __int8 *)v13(a3, enum case for DIPError.Code.internalError(_:), v9);
  v15 = HIBYTE(a2) & 0xF;
  v16 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v17 = HIBYTE(a2) & 0xF;
  else
    v17 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v17)
    return result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(a2);
    v20 = (uint64_t)sub_1004E5510(a1, a2, 10);
    v35 = v34;
    result = (unsigned __int8 *)swift_bridgeObjectRelease(a2);
    if ((v35 & 1) != 0)
      return result;
    goto LABEL_36;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v37[0] = a1;
    v37[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (!v15)
        goto LABEL_61;
      if (v15 == 1)
        goto LABEL_59;
      if ((BYTE1(a1) - 48) > 9u)
        goto LABEL_32;
      v20 = (BYTE1(a1) - 48);
      if (v15 != 2)
      {
        if ((BYTE2(a1) - 48) > 9u)
          goto LABEL_32;
        v20 = 10 * (BYTE1(a1) - 48) + (BYTE2(a1) - 48);
        v21 = v15 - 3;
        if (v15 != 3)
        {
          v22 = (unsigned __int8 *)v37 + 3;
          while (1)
          {
            v23 = *v22 - 48;
            if (v23 > 9)
              goto LABEL_32;
            v24 = 10 * v20;
            if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63)
              goto LABEL_32;
            v20 = v24 + v23;
            if (__OFADD__(v24, v23))
              goto LABEL_32;
            LOBYTE(v15) = 0;
            ++v22;
            if (!--v21)
              goto LABEL_35;
          }
        }
      }
    }
    else
    {
      if (a1 == 45)
      {
        if (v15)
        {
          if (v15 != 1)
          {
            if ((BYTE1(a1) - 48) > 9u)
              goto LABEL_32;
            if (v15 == 2)
            {
              LOBYTE(v15) = 0;
              v20 = -(uint64_t)(BYTE1(a1) - 48);
              goto LABEL_35;
            }
            if ((BYTE2(a1) - 48) > 9u)
              goto LABEL_32;
            v20 = -10 * (BYTE1(a1) - 48) - (BYTE2(a1) - 48);
            v30 = v15 - 3;
            if (v15 != 3)
            {
              v31 = (unsigned __int8 *)v37 + 3;
              while (1)
              {
                v32 = *v31 - 48;
                if (v32 > 9)
                  goto LABEL_32;
                v33 = 10 * v20;
                if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63)
                  goto LABEL_32;
                v20 = v33 - v32;
                if (__OFSUB__(v33, v32))
                  goto LABEL_32;
                LOBYTE(v15) = 0;
                ++v31;
                if (!--v30)
                  goto LABEL_35;
              }
            }
            goto LABEL_34;
          }
LABEL_59:
          v20 = 0;
LABEL_35:
          if ((v15 & 1) != 0)
            return result;
          goto LABEL_36;
        }
        __break(1u);
LABEL_61:
        __break(1u);
        return result;
      }
      if (!v15 || (a1 - 48) > 9u)
      {
LABEL_32:
        v20 = 0;
        LOBYTE(v15) = 1;
        goto LABEL_35;
      }
      v20 = (a1 - 48);
      if (v15 != 1)
      {
        if ((BYTE1(a1) - 48) > 9u)
          goto LABEL_32;
        v20 = 10 * (a1 - 48) + (BYTE1(a1) - 48);
        v26 = v15 - 2;
        if (v15 != 2)
        {
          v27 = (unsigned __int8 *)v37 + 2;
          while (1)
          {
            v28 = *v27 - 48;
            if (v28 > 9)
              goto LABEL_32;
            v29 = 10 * v20;
            if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63)
              goto LABEL_32;
            v20 = v29 + v28;
            if (__OFADD__(v29, v28))
              goto LABEL_32;
            LOBYTE(v15) = 0;
            ++v27;
            if (!--v26)
              goto LABEL_35;
          }
        }
      }
    }
LABEL_34:
    LOBYTE(v15) = 0;
    goto LABEL_35;
  }
  if ((a1 & 0x1000000000000000) != 0)
    v18 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
  result = sub_1004E54FC(v18, v16, 10);
  if ((v19 & 1) == 0)
  {
    v20 = (uint64_t)result;
LABEL_36:
    DIPError.Code.init(rawValue:)(v20);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      v13((uint64_t)v12, enum case for DIPError.Code.serverUnavailable(_:), v9);
      sub_100131DB4((uint64_t)v8);
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v12, v9);
    }
    else
    {
      v25 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v25(v12, v8, v9);
      return (unsigned __int8 *)((uint64_t (*)(uint64_t, char *, uint64_t))v25)(a3, v12, v9);
    }
  }
  return result;
}

id sub_10023FB60()
{
  char *v0;
  uint64_t v1;
  void *v2;
  objc_super v4;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd13DIPWebService_httpSession];
  v2 = *(void **)(v1 + 16);
  swift_retain(v1);
  objc_msgSend(v2, "invalidateAndCancel");
  objc_msgSend(*(id *)(v1 + 24), "invalidateAndCancel");
  swift_release(v1);
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for DIPWebService();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for DIPWebService()
{
  return objc_opt_self(_TtC8coreidvd13DIPWebService);
}

_QWORD *initializeBufferWithCopyOfBuffer for DIPConversation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for DIPConversation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for DIPConversation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DIPConversation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPConversation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPConversation()
{
  return &type metadata for DIPConversation;
}

_QWORD *sub_10023FE18(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  swift_bridgeObjectRetain(a1[11]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *sub_10023FE8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[9];
  v6 = a1[11];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_10023FF00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828((uint64_t *)&unk_100632610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10023FF4C()
{
  uint64_t result;

  _StringGuts.grow(_:)(24);
  result = swift_bridgeObjectRelease(0xE000000000000000);
  qword_100639A78 = 0xD000000000000016;
  unk_100639A80 = 0x8000000100558080;
  return result;
}

uint64_t sub_10023FFAC()
{
  uint64_t result;

  _StringGuts.grow(_:)(27);
  result = swift_bridgeObjectRelease(0xE000000000000000);
  qword_100639A88 = 0xD000000000000019;
  unk_100639A90 = 0x8000000100558000;
  return result;
}

id sub_10024000C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  os_unfair_lock_s *v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  objc_class *v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  objc_super v47;
  _BYTE v48[432];
  _QWORD v49[33];
  char v50;
  _BYTE v51[440];

  v42 = a1;
  v43 = a2;
  v46 = type metadata accessor for DIPHTTPSession.Configuration(0);
  v5 = __chkstk_darwin(v46);
  v44 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v45 = (uint64_t)&v41 - v7;
  v8 = type metadata accessor for DIPBackoffStrategy(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPRetrier(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = &v3[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer];
  *((_QWORD *)v16 + 1) = 0;
  swift_unknownObjectWeakInit(v16, 0);
  v17 = *(_QWORD *)(a3 + 8);
  v18 = *(int *)(v46 + 24);
  v46 = a3;
  v19 = a3 + v18;
  v41 = v9;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v21 = v12;
  v22 = v8;
  v20(v11, v19, v8);
  v23 = v3;
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)(v17, v11, 0, 1);
  v24 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v24(&v23[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_retrier], v15, v21);
  if (qword_10062F4C0 != -1)
    swift_once(&qword_10062F4C0, sub_1002354CC);
  v25 = *(os_unfair_lock_s **)(qword_100670320 + 56);
  v26 = (uint64_t)&v25[4];
  v27 = v25 + 112;
  os_unfair_lock_lock(v25 + 112);
  sub_1002355D8(v26, (uint64_t)v51);
  os_unfair_lock_unlock(v27);
  sub_1000A1F54((uint64_t)v51, (uint64_t)v48, &qword_100632330);
  sub_1000A1F54((uint64_t)v48, (uint64_t)v49, &qword_100632330);
  if (sub_100035A5C((uint64_t)v49) == 1 || (sub_100035B1C((uint64_t)v48), v50 == 1))
    v28 = 5;
  else
    v28 = v49[32];
  v29 = enum case for DIPBackoffStrategy.noBackoff(_:);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 104);
  v30(v11, enum case for DIPBackoffStrategy.noBackoff(_:), v22);
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)(v28, v11, 0, 1);
  v24(&v23[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_redirectRetrier], v15, v21);
  v30(v11, v29, v22);
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)(2, v11, 0, 1);
  v24(&v23[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_authRetrier], v15, v21);

  v32 = v45;
  v31 = v46;
  sub_100035DE8(v46, v45, type metadata accessor for DIPHTTPSession.Configuration);
  v33 = &v23[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  v34 = v43;
  v35 = (uint64_t)v44;
  *(_QWORD *)v33 = v42;
  *((_QWORD *)v33 + 1) = v34;
  sub_100035DE8(v32, v35, type metadata accessor for DIPHTTPSession.Configuration);
  v36 = type metadata accessor for DIPHTTPSession(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v37 = v23;
  *(_QWORD *)&v37[OBJC_IVAR____TtC8coreidvd13DIPWebService_httpSession] = sub_1004E0CF4(v35);

  v38 = (objc_class *)type metadata accessor for DIPWebService();
  v47.receiver = v37;
  v47.super_class = v38;
  v39 = objc_msgSendSuper2(&v47, "init");
  sub_100035DAC(v32, type metadata accessor for DIPHTTPSession.Configuration);
  sub_100035DAC(v31, type metadata accessor for DIPHTTPSession.Configuration);
  return v39;
}

uint64_t sub_1002403C4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *(_BYTE *)(v6 + 617) = a5;
  *(_QWORD *)(v6 + 328) = a4;
  *(_QWORD *)(v6 + 336) = v5;
  *(_BYTE *)(v6 + 616) = a3;
  *(_QWORD *)(v6 + 312) = a1;
  *(_QWORD *)(v6 + 320) = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v6 + 344) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 352) = v8;
  *(_QWORD *)(v6 + 360) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_1006354A8);
  *(_QWORD *)(v6 + 368) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100004828((uint64_t *)&unk_1006335F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 376) = swift_task_alloc(v10);
  *(_QWORD *)(v6 + 384) = swift_task_alloc(v10);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  *(_QWORD *)(v6 + 392) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v6 + 400) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 408) = swift_task_alloc(v13);
  *(_QWORD *)(v6 + 416) = swift_task_alloc(v13);
  v14 = type metadata accessor for DIPSignpost(0);
  *(_QWORD *)(v6 + 424) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v6 + 432) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 440) = swift_task_alloc(v16);
  *(_QWORD *)(v6 + 448) = swift_task_alloc(v16);
  return swift_task_switch(sub_1002404F8, 0, 0);
}

uint64_t sub_1002404F8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  Swift::String v9;
  Swift::String_optional v10;
  char isUniquelyReferenced_nonNull_native;
  id v12;
  Swift::String v13;
  Swift::String_optional v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(unsigned __int8 *)(v0 + 616);
  static DaemonSignposts.workflowRecommendationRequest.getter();
  DIPSignpost.init(_:)(v1);
  if (v2)
  {
    if (v2 == 1)
      v3 = 0xEB00000000305F32;
    else
      v3 = 0xEB00000000305F33;
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x5F6E6F6973726576, v3, 0x5F6E6F6973726576, 0xEB00000000315F31, 0);
    swift_bridgeObjectRelease(v3);
    if ((v4 & 1) != 0)
      v5 = 0x726F772F312F312FLL;
    else
      v5 = 0xD000000000000016;
    if ((v4 & 1) != 0)
      v6 = 0xED0000776F6C666BLL;
    else
      v6 = 0x80000001005582D0;
  }
  else
  {
    v5 = 0x726F772F312F312FLL;
    swift_bridgeObjectRelease(0xEB00000000315F31);
    v6 = 0xED0000776F6C666BLL;
  }
  *(_QWORD *)(v0 + 456) = v5;
  *(_QWORD *)(v0 + 464) = v6;
  v7 = (void *)objc_opt_self(NSUserDefaults);
  v8 = objc_msgSend(v7, "standardUserDefaults");
  v9._object = (void *)0x80000001005580F0;
  v9._countAndFlagsBits = 0xD000000000000010;
  v10 = NSUserDefaults.internalString(forKey:)(v9);

  if (v10.value._object)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_100481050(v10.value._countAndFlagsBits, (uint64_t)v10.value._object, 0x6567412D72657355, 0xEA0000000000746ELL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v12 = objc_msgSend(v7, "standardUserDefaults");
  v13._countAndFlagsBits = 0xD000000000000029;
  v13._object = (void *)0x8000000100558110;
  v14 = NSUserDefaults.internalString(forKey:)(v13);

  if (v14.value._object)
  {
    v15 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_100481050(v14.value._countAndFlagsBits, (uint64_t)v14.value._object, 0x564F2D564E452D58, 0xEE00454449525245, v15);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  *(_QWORD *)(v0 + 472) = &_swiftEmptyDictionarySingleton;
  v16 = *(_QWORD *)(v0 + 392);
  v17 = *(_QWORD *)(v0 + 400);
  v18 = *(_QWORD *)(v0 + 368);
  v19 = *(_QWORD *)(v0 + 328);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 432) + 56);
  v20(*(_QWORD *)(v0 + 384), 1, 1, *(_QWORD *)(v0 + 424));
  sub_100038B24(v19, v18, &qword_1006354A8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16) == 1)
  {
    sub_100008030(*(_QWORD *)(v0 + 368), &qword_1006354A8);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 416);
    v22 = v5;
    v23 = *(_QWORD *)(v0 + 400);
    v24 = *(_QWORD *)(v0 + 408);
    v25 = *(_QWORD *)(v0 + 392);
    v42 = *(_QWORD *)(v0 + 384);
    v43 = *(_QWORD *)(v0 + 424);
    v26 = v6;
    v27 = *(_QWORD *)(v0 + 376);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 32))(v24, *(_QWORD *)(v0 + 368), v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, v24, v25);
    DIPSignpost.init(_:)(v21);
    v28 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v5 = v22;
    v28(v24, v25);
    v20(v27, 0, 1, v43);
    v29 = v27;
    v6 = v26;
    sub_1000C8D8C(v29, v42);
  }
  v30 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 288) = &type metadata for WorkflowRecommendationRequest;
  v31 = swift_allocObject(&unk_10060C418, 184, 7);
  *(_QWORD *)(v0 + 264) = v31;
  v33 = *(_OWORD *)(v30 + 16);
  v32 = *(_OWORD *)(v30 + 32);
  *(_OWORD *)(v31 + 16) = *(_OWORD *)v30;
  *(_OWORD *)(v31 + 32) = v33;
  *(_OWORD *)(v31 + 48) = v32;
  v34 = *(_OWORD *)(v30 + 96);
  v36 = *(_OWORD *)(v30 + 48);
  v35 = *(_OWORD *)(v30 + 64);
  *(_OWORD *)(v31 + 96) = *(_OWORD *)(v30 + 80);
  *(_OWORD *)(v31 + 112) = v34;
  *(_OWORD *)(v31 + 64) = v36;
  *(_OWORD *)(v31 + 80) = v35;
  v38 = *(_OWORD *)(v30 + 128);
  v37 = *(_OWORD *)(v30 + 144);
  v39 = *(_OWORD *)(v30 + 112);
  *(_QWORD *)(v31 + 176) = *(_QWORD *)(v30 + 160);
  *(_OWORD *)(v31 + 144) = v38;
  *(_OWORD *)(v31 + 160) = v37;
  *(_OWORD *)(v31 + 128) = v39;
  sub_100184C7C((_QWORD *)v30);
  v40 = (_QWORD *)swift_task_alloc(dword_100639B4C);
  *(_QWORD *)(v0 + 480) = v40;
  *v40 = v0;
  v40[1] = sub_1002408F8;
  return sub_100250C38(v0 + 264, v5, v6, (uint64_t)&_swiftEmptyDictionarySingleton, *(_BYTE *)(v0 + 617));
}

uint64_t sub_1002408F8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 480);
  v6[61] = a1;
  v6[62] = a2;
  v6[63] = v3;
  swift_task_dealloc(v7);
  swift_bridgeObjectRelease(v6[59]);
  if (v3)
  {
    v8 = sub_100241CAC;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 33);

    v8 = sub_100240994;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100240994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, _QWORD, uint64_t);

  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 384);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v6 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 496);
  if (v4)
  {
    sub_100022948(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496));
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 440);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v7, v3, v1);
    sub_100022948(v6, v5);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v1);
  }
  v9 = *(_QWORD *)(v0 + 496);
  v8 = *(_QWORD *)(v0 + 504);
  v10 = *(_QWORD *)(v0 + 488);
  v11 = type metadata accessor for JSONDecoder(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v13 = JSONDecoder.init()(v12);
  v14 = sub_100256534();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for LegacyWorkflowRecommendationResponse, v10, v9, &type metadata for LegacyWorkflowRecommendationResponse, v14);
  if (v8)
  {
    v15 = v8;
    sub_100007F8C(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496));
    swift_release(v13);
    v17 = *(_QWORD *)(v0 + 488);
    v16 = *(_QWORD *)(v0 + 496);
    v18 = *(_QWORD *)(v0 + 360);
    v78 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 352) + 104);
    v78(v18, enum case for DIPError.Code.serverResponseInconsistent(_:), *(_QWORD *)(v0 + 344));
    swift_errorRetain(v15);
    v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v74 = type metadata accessor for DIPError(0);
    v73 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v65 = swift_allocError(v74, v73, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x8000000100558250, v15, v18, 0, v19, 0xD000000000000054, 0x8000000100557710, 0xD00000000000005ELL, 0x80000001005582F0, 198);
    swift_willThrow(v20);
    sub_100007F8C(v17, v16);
    swift_errorRelease(v15);
    v66 = enum case for DIPError.Code.internalError(_:);
    v61 = *(_QWORD *)(v0 + 456);
    v62 = *(_QWORD *)(v0 + 464);
    v67 = *(_QWORD *)(v0 + 432);
    v68 = *(_QWORD *)(v0 + 424);
    v69 = *(_QWORD *)(v0 + 448);
    v71 = *(_QWORD *)(v0 + 440);
    v72 = *(_QWORD *)(v0 + 416);
    v75 = *(_QWORD *)(v0 + 408);
    v70 = *(_QWORD *)(v0 + 384);
    v76 = *(_QWORD *)(v0 + 376);
    v77 = *(_QWORD *)(v0 + 368);
    v63 = *(_QWORD *)(v0 + 360);
    v64 = *(_QWORD *)(v0 + 344);
    v59 = *(_QWORD *)(v0 + 336);
    v60 = *(__int128 **)(v0 + 312);
    v21 = sub_100004828((uint64_t *)&unk_1006325A0);
    v22 = sub_100004828((uint64_t *)&unk_100633440);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(_QWORD *)(v23 + 72);
    v25 = *(unsigned __int8 *)(v23 + 80);
    v26 = (v25 + 32) & ~v25;
    v27 = 2 * v24;
    v28 = swift_allocObject(v21, v26 + 3 * v24, v25 | 7);
    *(_OWORD *)(v28 + 16) = xmmword_100524440;
    v29 = (_QWORD *)(v28 + v26 + *(int *)(v22 + 48));
    v30 = enum case for DIPError.PropertyKey.conversationID(_:);
    v31 = type metadata accessor for DIPError.PropertyKey(0);
    v32 = *(void (**)(void))(*(_QWORD *)(v31 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v32)(v28 + v26, v30, v31);
    v33 = *(_QWORD *)(v59 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v34 = *(_QWORD *)(v59 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v29[3] = &type metadata for String;
    *v29 = v33;
    v29[1] = v34;
    v35 = v28 + v26 + v24 + *(int *)(v22 + 48);
    v32();
    v36 = *v60;
    *(_OWORD *)(v0 + 248) = v60[1];
    *(_OWORD *)(v0 + 232) = v36;
    v37 = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 296) = v37;
    *(_QWORD *)(v35 + 24) = &type metadata for String;
    *(_OWORD *)v35 = v37;
    v38 = (_QWORD *)(v28 + v26 + v27 + *(int *)(v22 + 48));
    v32();
    v38[3] = &type metadata for String;
    *v38 = v61;
    v38[1] = v62;
    swift_errorRetain(v65);
    swift_bridgeObjectRetain(v34);
    sub_1000DB7AC(v0 + 296);
    v39 = sub_10011D314(v28);
    v78(v63, v66, v64);
    swift_allocError(v74, v73, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100558220, v65, v63, 0, v39, 0xD000000000000054, 0x8000000100557710, 0xD00000000000005ELL, 0x80000001005582F0, 201);
    swift_willThrow(v40);
    swift_errorRelease(v65);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v69, v68);
    sub_100008030(v70, (uint64_t *)&unk_1006335F0);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v75);
    swift_task_dealloc(v70);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v63);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v42 = *(uint64_t **)(v0 + 312);
    sub_100007F8C(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496));
    swift_release(v13);
    v43 = *(_QWORD *)(v0 + 16);
    v44 = *(_QWORD *)(v0 + 40);
    v45 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 520) = v44;
    v46 = *(_QWORD *)(v0 + 56);
    v47 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 528) = v46;
    v48 = *(_QWORD *)(v0 + 72);
    v49 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 536) = v48;
    v50 = *(_QWORD *)(v0 + 104);
    *(_QWORD *)(v0 + 552) = v50;
    v51 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v0 + 560) = *(_QWORD *)(v0 + 120);
    *(_QWORD *)(v0 + 568) = v51;
    v52 = *(_OWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 512) = v52;
    v53 = *(_OWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 544) = v53;
    v54 = *v42;
    v55 = v42[1];
    v56 = v42[2];
    v57 = v42[3];
    *(_QWORD *)(v0 + 136) = v43;
    *(_OWORD *)(v0 + 144) = v52;
    *(_QWORD *)(v0 + 160) = v44;
    *(_QWORD *)(v0 + 168) = v45;
    *(_QWORD *)(v0 + 176) = v46;
    *(_QWORD *)(v0 + 184) = v47;
    *(_QWORD *)(v0 + 192) = v48;
    *(_QWORD *)(v0 + 200) = v49;
    *(_OWORD *)(v0 + 208) = v53;
    *(_QWORD *)(v0 + 224) = v50;
    v58 = (_QWORD *)swift_task_alloc(dword_100639B54);
    *(_QWORD *)(v0 + 576) = v58;
    *v58 = v0;
    v58[1] = sub_100240F94;
    return sub_100253650(v54, v55, v56, v57, v0 + 136);
  }
}

uint64_t sub_100240F94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 576);
  *(_QWORD *)(*(_QWORD *)v1 + 584) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100240FF0, 0, 0);
}

uint64_t sub_100240FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;

  v1 = *(_QWORD *)(v0 + 584);
  if (v1)
  {
    v61 = *(_QWORD *)(v0 + 560);
    v59 = *(_QWORD *)(v0 + 552);
    v55 = *(_QWORD *)(v0 + 568);
    v57 = *(_QWORD *)(v0 + 544);
    v2 = *(_QWORD *)(v0 + 528);
    v3 = *(_QWORD *)(v0 + 520);
    v51 = *(_QWORD *)(v0 + 536);
    v53 = *(_QWORD *)(v0 + 512);
    v4 = *(_QWORD *)(v0 + 360);
    v63 = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(uint64_t))(*(_QWORD *)(v0 + 352) + 104))(v4);
    swift_errorRetain(v1);
    v5 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v64 = type metadata accessor for DIPError(0);
    v50 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v6 = swift_allocError(v64, v50, 0, 0);
    v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v5, 0xD000000000000054, 0x8000000100557710, 0xD00000000000005ELL, 0x80000001005582F0, 190);
    swift_willThrow(v7);
    swift_errorRelease(v1);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v51);
    swift_release(v55);
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease(v61);
    v8 = *(_QWORD *)(v0 + 488);
    v9 = *(_QWORD *)(v0 + 496);
    v10 = *(_QWORD *)(v0 + 360);
    v52 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 352) + 104);
    v52(v10, enum case for DIPError.Code.serverResponseInconsistent(_:), *(_QWORD *)(v0 + 344));
    swift_errorRetain(v6);
    v11 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v45 = swift_allocError(v64, v50, 0, 0);
    v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x8000000100558250, v6, v10, 0, v11, 0xD000000000000054, 0x8000000100557710, 0xD00000000000005ELL, 0x80000001005582F0, 198);
    swift_willThrow(v12);
    sub_100007F8C(v8, v9);
    swift_errorRelease(v6);
    v41 = *(_QWORD *)(v0 + 456);
    v42 = *(_QWORD *)(v0 + 464);
    v54 = *(_QWORD *)(v0 + 440);
    v46 = *(_QWORD *)(v0 + 432);
    v47 = *(_QWORD *)(v0 + 424);
    v48 = *(_QWORD *)(v0 + 448);
    v56 = *(_QWORD *)(v0 + 416);
    v58 = *(_QWORD *)(v0 + 408);
    v49 = *(_QWORD *)(v0 + 384);
    v60 = *(_QWORD *)(v0 + 376);
    v62 = *(_QWORD *)(v0 + 368);
    v43 = *(_QWORD *)(v0 + 360);
    v44 = *(_QWORD *)(v0 + 344);
    v39 = *(_QWORD *)(v0 + 336);
    v40 = *(__int128 **)(v0 + 312);
    v13 = sub_100004828((uint64_t *)&unk_1006325A0);
    v14 = sub_100004828((uint64_t *)&unk_100633440);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(_QWORD *)(v15 + 72);
    v17 = *(unsigned __int8 *)(v15 + 80);
    v18 = (v17 + 32) & ~v17;
    v19 = 2 * v16;
    v20 = swift_allocObject(v13, v18 + 3 * v16, v17 | 7);
    *(_OWORD *)(v20 + 16) = xmmword_100524440;
    v21 = (_QWORD *)(v20 + v18 + *(int *)(v14 + 48));
    v22 = enum case for DIPError.PropertyKey.conversationID(_:);
    v23 = type metadata accessor for DIPError.PropertyKey(0);
    v24 = *(void (**)(void))(*(_QWORD *)(v23 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v24)(v20 + v18, v22, v23);
    v25 = *(_QWORD *)(v39 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v26 = *(_QWORD *)(v39 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v21[3] = &type metadata for String;
    *v21 = v25;
    v21[1] = v26;
    v27 = v20 + v18 + v16 + *(int *)(v14 + 48);
    v24();
    v28 = *v40;
    *(_OWORD *)(v0 + 248) = v40[1];
    *(_OWORD *)(v0 + 232) = v28;
    v29 = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 296) = v29;
    *(_QWORD *)(v27 + 24) = &type metadata for String;
    *(_OWORD *)v27 = v29;
    v30 = (_QWORD *)(v20 + v18 + v19 + *(int *)(v14 + 48));
    v24();
    v30[3] = &type metadata for String;
    *v30 = v41;
    v30[1] = v42;
    swift_errorRetain(v45);
    swift_bridgeObjectRetain(v26);
    sub_1000DB7AC(v0 + 296);
    v31 = sub_10011D314(v20);
    v52(v43, v63, v44);
    swift_allocError(v64, v50, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100558220, v45, v43, 0, v31, 0xD000000000000054, 0x8000000100557710, 0xD00000000000005ELL, 0x80000001005582F0, 201);
    swift_willThrow(v32);
    swift_errorRelease(v45);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
    sub_100008030(v49, (uint64_t *)&unk_1006335F0);
    swift_task_dealloc(v48);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v49);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v34 = *(_QWORD *)(v0 + 568);
    v35 = *(_QWORD *)(v0 + 320);
    v36 = type metadata accessor for LegacySynthesizedWorkflows();
    swift_allocObject(v36, 6096, 7);
    v37 = dword_1006322FC;
    swift_retain(v34);
    swift_bridgeObjectRetain(v35);
    v38 = (_QWORD *)swift_task_alloc(v37);
    *(_QWORD *)(v0 + 592) = v38;
    *v38 = v0;
    v38[1] = sub_1002415D0;
    return sub_1000509A4(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 320));
  }
}

uint64_t sub_1002415D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 592);
  *(_QWORD *)(*v2 + 600) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100241804;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 464));
    *(_QWORD *)(v4 + 608) = a1;
    v6 = sub_10024164C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10024164C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String_optional v8;
  void *object;
  Swift::String v10;
  Swift::String v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 568);
  v13 = *(_QWORD *)(v0 + 544);
  v14 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 536);
  v3 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 520);
  v5 = *(_QWORD *)(v0 + 512);
  v15 = *(_QWORD *)(v0 + 488);
  v6 = *(_QWORD *)(v0 + 448);
  v19 = *(_QWORD *)(v0 + 560);
  v20 = *(_QWORD *)(v0 + 440);
  v16 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 496);
  v18 = *(_QWORD *)(v0 + 424);
  v21 = *(_QWORD *)(v0 + 416);
  v22 = *(_QWORD *)(v0 + 408);
  v7 = *(_QWORD *)(v0 + 384);
  v23 = *(_QWORD *)(v0 + 376);
  v24 = *(_QWORD *)(v0 + 368);
  v25 = *(_QWORD *)(v0 + 360);
  v8.value._countAndFlagsBits = sub_1000549DC();
  object = v8.value._object;
  DIPSignpost.end(workflowID:isBackground:)(v8, (Swift::Bool_optional)2);
  swift_bridgeObjectRelease(object);
  v10._object = (void *)0x80000001005582B0;
  v11._countAndFlagsBits = 0x3462386632356263;
  v11._object = (void *)0xE800000000000000;
  v10._countAndFlagsBits = 0xD000000000000019;
  logMilestone(tag:description:)(v11, v10);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v1);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v19);
  sub_100007F8C(v15, v17);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v6, v18);
  sub_100008030(v7, (uint64_t *)&unk_1006335F0);
  swift_task_dealloc(v6);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v7);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 608));
}

uint64_t sub_100241804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, _QWORD, uint64_t);

  v1 = *(_QWORD *)(v0 + 568);
  v2 = *(_QWORD *)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 552);
  v4 = *(_QWORD *)(v0 + 544);
  v5 = *(_QWORD *)(v0 + 536);
  v6 = *(_QWORD *)(v0 + 528);
  v7 = *(_QWORD *)(v0 + 512);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 520));
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_release(v1);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  v8 = *(_QWORD *)(v0 + 600);
  v10 = *(_QWORD *)(v0 + 488);
  v9 = *(_QWORD *)(v0 + 496);
  v11 = *(_QWORD *)(v0 + 360);
  v54 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 352) + 104);
  v54(v11, enum case for DIPError.Code.serverResponseInconsistent(_:), *(_QWORD *)(v0 + 344));
  swift_errorRetain(v8);
  v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v50 = type metadata accessor for DIPError(0);
  v49 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v41 = swift_allocError(v50, v49, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x8000000100558250, v8, v11, 0, v12, 0xD000000000000054, 0x8000000100557710, 0xD00000000000005ELL, 0x80000001005582F0, 198);
  swift_willThrow(v13);
  sub_100007F8C(v10, v9);
  swift_errorRelease(v8);
  v42 = enum case for DIPError.Code.internalError(_:);
  v37 = *(_QWORD *)(v0 + 456);
  v38 = *(_QWORD *)(v0 + 464);
  v47 = *(_QWORD *)(v0 + 440);
  v43 = *(_QWORD *)(v0 + 432);
  v44 = *(_QWORD *)(v0 + 424);
  v45 = *(_QWORD *)(v0 + 448);
  v48 = *(_QWORD *)(v0 + 416);
  v51 = *(_QWORD *)(v0 + 408);
  v46 = *(_QWORD *)(v0 + 384);
  v52 = *(_QWORD *)(v0 + 376);
  v53 = *(_QWORD *)(v0 + 368);
  v39 = *(_QWORD *)(v0 + 360);
  v40 = *(_QWORD *)(v0 + 344);
  v35 = *(_QWORD *)(v0 + 336);
  v36 = *(__int128 **)(v0 + 312);
  v14 = sub_100004828((uint64_t *)&unk_1006325A0);
  v15 = sub_100004828((uint64_t *)&unk_100633440);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 72);
  v18 = *(unsigned __int8 *)(v16 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = 2 * v17;
  v21 = swift_allocObject(v14, v19 + 3 * v17, v18 | 7);
  *(_OWORD *)(v21 + 16) = xmmword_100524440;
  v22 = (_QWORD *)(v21 + v19 + *(int *)(v15 + 48));
  v23 = enum case for DIPError.PropertyKey.conversationID(_:);
  v24 = type metadata accessor for DIPError.PropertyKey(0);
  v25 = *(void (**)(void))(*(_QWORD *)(v24 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v25)(v21 + v19, v23, v24);
  v26 = *(_QWORD *)(v35 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v27 = *(_QWORD *)(v35 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v22[3] = &type metadata for String;
  *v22 = v26;
  v22[1] = v27;
  v28 = v21 + v19 + v17 + *(int *)(v15 + 48);
  v25();
  v29 = *v36;
  *(_OWORD *)(v0 + 248) = v36[1];
  *(_OWORD *)(v0 + 232) = v29;
  v30 = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 296) = v30;
  *(_QWORD *)(v28 + 24) = &type metadata for String;
  *(_OWORD *)v28 = v30;
  v31 = (_QWORD *)(v21 + v19 + v20 + *(int *)(v15 + 48));
  v25();
  v31[3] = &type metadata for String;
  *v31 = v37;
  v31[1] = v38;
  swift_errorRetain(v41);
  swift_bridgeObjectRetain(v27);
  sub_1000DB7AC(v0 + 296);
  v32 = sub_10011D314(v21);
  v54(v39, v42, v40);
  swift_allocError(v50, v49, 0, 0);
  v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100558220, v41, v39, 0, v32, 0xD000000000000054, 0x8000000100557710, 0xD00000000000005ELL, 0x80000001005582F0, 201);
  swift_willThrow(v33);
  swift_errorRelease(v41);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v44);
  sub_100008030(v46, (uint64_t *)&unk_1006335F0);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v51);
  swift_task_dealloc(v46);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100241CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  void (*v47)(uint64_t);

  v1 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 360);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 264));
  v46 = enum case for DIPError.Code.internalError(_:);
  v47 = *(void (**)(uint64_t))(v2 + 104);
  v47(v3);
  swift_errorRetain(v1);
  v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v40 = type metadata accessor for DIPError(0);
  v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v33 = swift_allocError(v40, v39, 0, 0);
  v5 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x80000001005581B0, v1, v3, 0, v4, 0xD000000000000054, 0x8000000100557710, 0xD00000000000005ELL, 0x80000001005582F0, 184);
  swift_willThrow(v5);
  swift_errorRelease(v1);
  v30 = *(_QWORD *)(v0 + 456);
  v31 = *(_QWORD *)(v0 + 464);
  v37 = *(_QWORD *)(v0 + 448);
  v41 = *(_QWORD *)(v0 + 440);
  v35 = *(_QWORD *)(v0 + 432);
  v36 = *(_QWORD *)(v0 + 424);
  v42 = *(_QWORD *)(v0 + 416);
  v43 = *(_QWORD *)(v0 + 408);
  v38 = *(_QWORD *)(v0 + 384);
  v44 = *(_QWORD *)(v0 + 376);
  v45 = *(_QWORD *)(v0 + 368);
  v32 = *(_QWORD *)(v0 + 360);
  v34 = *(_QWORD *)(v0 + 344);
  v28 = *(_QWORD *)(v0 + 336);
  v29 = *(__int128 **)(v0 + 312);
  v6 = sub_100004828((uint64_t *)&unk_1006325A0);
  v7 = sub_100004828((uint64_t *)&unk_100633440);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = 2 * v9;
  v13 = swift_allocObject(v6, v11 + 3 * v9, v10 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_100524440;
  v14 = v13 + v11;
  v15 = (_QWORD *)(v13 + v11 + *(int *)(v7 + 48));
  v16 = enum case for DIPError.PropertyKey.conversationID(_:);
  v17 = type metadata accessor for DIPError.PropertyKey(0);
  v18 = *(void (**)(void))(*(_QWORD *)(v17 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v14, v16, v17);
  v19 = *(_QWORD *)(v28 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v20 = *(_QWORD *)(v28 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v15[3] = &type metadata for String;
  *v15 = v19;
  v15[1] = v20;
  v21 = v14 + v9 + *(int *)(v7 + 48);
  v18();
  v22 = *v29;
  *(_OWORD *)(v0 + 248) = v29[1];
  *(_OWORD *)(v0 + 232) = v22;
  v23 = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 296) = v23;
  *(_QWORD *)(v21 + 24) = &type metadata for String;
  *(_OWORD *)v21 = v23;
  v24 = (_QWORD *)(v14 + v12 + *(int *)(v7 + 48));
  v18();
  v24[3] = &type metadata for String;
  *v24 = v30;
  v24[1] = v31;
  swift_errorRetain(v33);
  swift_bridgeObjectRetain(v20);
  sub_1000DB7AC(v0 + 296);
  v25 = sub_10011D314(v13);
  ((void (*)(uint64_t, _QWORD, uint64_t))v47)(v32, v46, v34);
  swift_allocError(v40, v39, 0, 0);
  v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100558220, v33, v32, 0, v25, 0xD000000000000054, 0x8000000100557710, 0xD00000000000005ELL, 0x80000001005582F0, 201);
  swift_willThrow(v26);
  swift_errorRelease(v33);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
  sub_100008030(v38, (uint64_t *)&unk_1006335F0);
  swift_task_dealloc(v37);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v38);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002420F4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  *(_BYTE *)(v6 + 657) = a5;
  *(_QWORD *)(v6 + 336) = a4;
  *(_QWORD *)(v6 + 344) = v5;
  *(_BYTE *)(v6 + 656) = a3;
  *(_QWORD *)(v6 + 320) = a1;
  *(_QWORD *)(v6 + 328) = a2;
  v7 = type metadata accessor for Workflow(0);
  *(_QWORD *)(v6 + 352) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v6 + 360) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 368) = v9;
  *(_QWORD *)(v6 + 376) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WorkflowRecommendationResponse(0);
  *(_QWORD *)(v6 + 384) = v10;
  *(_QWORD *)(v6 + 392) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_1006354A8);
  *(_QWORD *)(v6 + 400) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100004828((uint64_t *)&unk_1006335F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 408) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 416) = swift_task_alloc(v12);
  v13 = type metadata accessor for DIPSignpost.Config(0);
  *(_QWORD *)(v6 + 424) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v6 + 432) = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 440) = swift_task_alloc(v15);
  *(_QWORD *)(v6 + 448) = swift_task_alloc(v15);
  v16 = type metadata accessor for DIPSignpost(0);
  *(_QWORD *)(v6 + 456) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v6 + 464) = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 472) = swift_task_alloc(v18);
  *(_QWORD *)(v6 + 480) = swift_task_alloc(v18);
  return swift_task_switch(sub_10024226C, 0, 0);
}

uint64_t sub_10024226C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  void *v10;
  id v11;
  Swift::String v12;
  Swift::String_optional v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  id v17;
  Swift::String v18;
  Swift::String_optional v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = 0xED0000776F6C666BLL;
  v2 = *(_QWORD *)(v0 + 448);
  v3 = *(unsigned __int8 *)(v0 + 656);
  static DaemonSignposts.workflowRecommendationRequest.getter();
  DIPSignpost.init(_:)(v2);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = 0xD000000000000016;
      v1 = 0x80000001005582D0;
      goto LABEL_7;
    }
    v5 = 808399663;
  }
  else
  {
    v5 = 825176367;
  }
  v4 = v5 | 0x726F772F00000000;
LABEL_7:
  v48 = v4;
  v49 = v1;
  *(_QWORD *)(v0 + 488) = v4;
  *(_QWORD *)(v0 + 496) = v1;
  v45 = *(_QWORD *)(v0 + 456);
  v46 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 416);
  v47 = *(_QWORD *)(v0 + 424);
  v7 = *(_QWORD *)(v0 + 400);
  v43 = *(_QWORD *)(v0 + 464);
  v44 = *(_QWORD *)(v0 + 336);
  v8 = sub_100004828(&qword_100639C58);
  inited = swift_initStackObject(v8, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100524440;
  *(_QWORD *)(inited + 32) = 0x6567412D72657355;
  *(_QWORD *)(inited + 40) = 0xEA0000000000746ELL;
  v10 = (void *)objc_opt_self(NSUserDefaults);
  v11 = objc_msgSend(v10, "standardUserDefaults");
  v12._object = (void *)0x80000001005580F0;
  v12._countAndFlagsBits = 0xD000000000000010;
  v13 = NSUserDefaults.internalString(forKey:)(v12);

  *(Swift::String_optional *)(inited + 48) = v13;
  strcpy((char *)(inited + 64), "X-ENV-OVERRIDE");
  *(_BYTE *)(inited + 79) = -18;
  v14 = objc_msgSend(v10, "standardUserDefaults");
  v15._countAndFlagsBits = 0xD000000000000029;
  v15._object = (void *)0x8000000100558110;
  v16 = NSUserDefaults.internalString(forKey:)(v15);

  *(Swift::String_optional *)(inited + 80) = v16;
  *(_QWORD *)(inited + 96) = 0xD000000000000024;
  *(_QWORD *)(inited + 104) = 0x8000000100558140;
  v17 = objc_msgSend(v10, "standardUserDefaults");
  v18._countAndFlagsBits = 0xD00000000000003ELL;
  v18._object = (void *)0x8000000100558170;
  v19 = NSUserDefaults.internalString(forKey:)(v18);

  *(Swift::String_optional *)(inited + 112) = v19;
  v20 = sub_10011F224(inited);
  sub_1002439F0(v20);
  v22 = v21;
  *(_QWORD *)(v0 + 504) = v21;
  swift_bridgeObjectRelease(v20);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
  v23(v6, 1, 1, v45);
  sub_100038B24(v44, v7, &qword_1006354A8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v7, 1, v47) == 1)
  {
    sub_100008030(*(_QWORD *)(v0 + 400), &qword_1006354A8);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 448);
    v24 = *(_QWORD *)(v0 + 456);
    v27 = *(_QWORD *)(v0 + 432);
    v26 = *(_QWORD *)(v0 + 440);
    v29 = *(_QWORD *)(v0 + 416);
    v28 = *(_QWORD *)(v0 + 424);
    v30 = *(_QWORD *)(v0 + 408);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 32))(v26, *(_QWORD *)(v0 + 400), v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v25, v26, v28);
    DIPSignpost.init(_:)(v25);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    v23(v30, 0, 1, v24);
    sub_1000C8D8C(v30, v29);
  }
  v31 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 296) = &type metadata for WorkflowRecommendationRequest;
  v32 = swift_allocObject(&unk_10060C418, 184, 7);
  *(_QWORD *)(v0 + 272) = v32;
  v34 = *(_OWORD *)(v31 + 16);
  v33 = *(_OWORD *)(v31 + 32);
  *(_OWORD *)(v32 + 16) = *(_OWORD *)v31;
  *(_OWORD *)(v32 + 32) = v34;
  *(_OWORD *)(v32 + 48) = v33;
  v35 = *(_OWORD *)(v31 + 96);
  v37 = *(_OWORD *)(v31 + 48);
  v36 = *(_OWORD *)(v31 + 64);
  *(_OWORD *)(v32 + 96) = *(_OWORD *)(v31 + 80);
  *(_OWORD *)(v32 + 112) = v35;
  *(_OWORD *)(v32 + 64) = v37;
  *(_OWORD *)(v32 + 80) = v36;
  v39 = *(_OWORD *)(v31 + 128);
  v38 = *(_OWORD *)(v31 + 144);
  v40 = *(_OWORD *)(v31 + 112);
  *(_QWORD *)(v32 + 176) = *(_QWORD *)(v31 + 160);
  *(_OWORD *)(v32 + 144) = v39;
  *(_OWORD *)(v32 + 160) = v38;
  *(_OWORD *)(v32 + 128) = v40;
  sub_100184C7C((_QWORD *)v31);
  v41 = (_QWORD *)swift_task_alloc(dword_100639B4C);
  *(_QWORD *)(v0 + 512) = v41;
  *v41 = v0;
  v41[1] = sub_10024263C;
  return sub_100250C38(v0 + 272, v48, v49, v22, *(_BYTE *)(v0 + 657));
}

uint64_t sub_10024263C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 512);
  v6[65] = a1;
  v6[66] = a2;
  v6[67] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = sub_1002435A0;
  }
  else
  {
    swift_bridgeObjectRelease(v6[63]);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 34);

    v8 = sub_1002426D4;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1002426D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, uint64_t);
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, _QWORD, uint64_t);
  uint64_t v93;
  uint64_t v94;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 416);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v5 = *(_QWORD *)(v0 + 528);
  v6 = *(_QWORD *)(v0 + 520);
  if (v4)
  {
    sub_100022948(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 528));
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 472);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v7, v3, v1);
    sub_100022948(v6, v5);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v1);
  }
  v8 = *(_QWORD *)(v0 + 536);
  v9 = *(_QWORD *)(v0 + 528);
  v10 = *(_QWORD *)(v0 + 520);
  v11 = *(_QWORD *)(v0 + 384);
  v12 = type metadata accessor for JSONDecoder(0);
  v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v14 = JSONDecoder.init()(v13);
  v15 = sub_100004790(&qword_100639C60, type metadata accessor for WorkflowRecommendationResponse, (uint64_t)&unk_1005259E0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v11, v10, v9, v11, v15);
  v16 = *(_QWORD *)(v0 + 528);
  v17 = *(_QWORD *)(v0 + 520);
  if (v8)
  {
    v18 = v8;
    v19 = *(_QWORD *)(v0 + 368);
    sub_100007F8C(v17, v16);
    swift_release(v14);
    v20 = *(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104);
LABEL_6:
    v92 = v20;
    v21 = *(_QWORD *)(v0 + 528);
    v22 = *(_QWORD *)(v0 + 520);
    v23 = *(_QWORD *)(v0 + 376);
    v20(v23, enum case for DIPError.Code.serverResponseInconsistent(_:), *(_QWORD *)(v0 + 360));
    swift_errorRetain(v18);
    v24 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v86 = type metadata accessor for DIPError(0);
    v85 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v78 = swift_allocError(v86, v85, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x8000000100558250, v18, v23, 0, v24, 0xD000000000000054, 0x8000000100557710, 0xD000000000000038, 0x80000001005581E0, 271);
    swift_willThrow(v25);
    sub_100007F8C(v22, v21);
    swift_errorRelease(v18);
    v79 = enum case for DIPError.Code.internalError(_:);
    v74 = *(_QWORD *)(v0 + 488);
    v75 = *(_QWORD *)(v0 + 496);
    v84 = *(_QWORD *)(v0 + 472);
    v80 = *(_QWORD *)(v0 + 464);
    v81 = *(_QWORD *)(v0 + 456);
    v82 = *(_QWORD *)(v0 + 480);
    v87 = *(_QWORD *)(v0 + 448);
    v88 = *(_QWORD *)(v0 + 440);
    v83 = *(_QWORD *)(v0 + 416);
    v89 = *(_QWORD *)(v0 + 408);
    v90 = *(_QWORD *)(v0 + 400);
    v91 = *(_QWORD *)(v0 + 392);
    v76 = *(_QWORD *)(v0 + 376);
    v77 = *(_QWORD *)(v0 + 360);
    v93 = *(_QWORD *)(v0 + 352);
    v72 = *(_QWORD *)(v0 + 344);
    v73 = *(_OWORD **)(v0 + 328);
    v26 = sub_100004828((uint64_t *)&unk_1006325A0);
    v27 = sub_100004828((uint64_t *)&unk_100633440);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(_QWORD *)(v28 + 72);
    v30 = *(unsigned __int8 *)(v28 + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = 2 * v29;
    v33 = swift_allocObject(v26, v31 + 3 * v29, v30 | 7);
    *(_OWORD *)(v33 + 16) = xmmword_100524440;
    v34 = (_QWORD *)(v33 + v31 + *(int *)(v27 + 48));
    v35 = enum case for DIPError.PropertyKey.conversationID(_:);
    v36 = type metadata accessor for DIPError.PropertyKey(0);
    v37 = *(void (**)(void))(*(_QWORD *)(v36 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v37)(v33 + v31, v35, v36);
    v38 = *(_QWORD *)(v72 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v39 = *(_QWORD *)(v72 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v34[3] = &type metadata for String;
    *v34 = v38;
    v34[1] = v39;
    v40 = v33 + v31 + v29 + *(int *)(v27 + 48);
    v37();
    v41 = v73[1];
    *(_OWORD *)(v0 + 240) = *v73;
    *(_OWORD *)(v0 + 256) = v41;
    v42 = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 304) = v42;
    *(_QWORD *)(v40 + 24) = &type metadata for String;
    *(_OWORD *)v40 = v42;
    v43 = (_QWORD *)(v33 + v31 + v32 + *(int *)(v27 + 48));
    v37();
    v43[3] = &type metadata for String;
    *v43 = v74;
    v43[1] = v75;
    swift_errorRetain(v78);
    swift_bridgeObjectRetain(v39);
    sub_1000DB7AC(v0 + 304);
    v44 = sub_10011D314(v33);
    v92(v76, v79, v77);
    swift_allocError(v86, v85, 0, 0);
    v45 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100558220, v78, v76, 0, v44, 0xD000000000000054, 0x8000000100557710, 0xD000000000000038, 0x80000001005581E0, 274);
    swift_willThrow(v45);
    swift_errorRelease(v78);
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v82, v81);
    sub_100008030(v83, (uint64_t *)&unk_1006335F0);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v83);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v76);
    swift_task_dealloc(v93);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v47 = *(_QWORD *)(v0 + 392);
  sub_100007F8C(v17, v16);
  swift_release(v14);
  v48 = *(_QWORD *)(v47 + 24);
  *(_QWORD *)(v0 + 544) = v48;
  v49 = *(uint64_t **)(v0 + 392);
  if (!v48)
  {
    v67 = *(_QWORD *)(v0 + 376);
    v20 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 368) + 104);
    v20(v67, enum case for DIPError.Code.topekaInternalServerError(_:), *(_QWORD *)(v0 + 360));
    v68 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v69 = type metadata accessor for DIPError(0);
    v70 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v18 = swift_allocError(v69, v70, 0, 0);
    v71 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100558290, 0, v67, 0, v68, 0xD000000000000054, 0x8000000100557710, 0xD000000000000038, 0x80000001005581E0, 260);
    swift_willThrow(v71);
    sub_100035DAC((uint64_t)v49, type metadata accessor for WorkflowRecommendationResponse);
    goto LABEL_6;
  }
  v50 = *(uint64_t **)(v0 + 328);
  v51 = v49[11];
  *(_QWORD *)(v0 + 552) = v51;
  v52 = v49[10];
  *(_QWORD *)(v0 + 560) = v52;
  v53 = v49[9];
  *(_QWORD *)(v0 + 568) = v53;
  v54 = v49[8];
  *(_QWORD *)(v0 + 576) = v54;
  v55 = v49[7];
  *(_QWORD *)(v0 + 584) = v55;
  v56 = v49[6];
  *(_QWORD *)(v0 + 592) = v56;
  v57 = v49[5];
  *(_QWORD *)(v0 + 600) = v57;
  v58 = v49[4];
  *(_QWORD *)(v0 + 608) = v58;
  v59 = v49[2];
  *(_QWORD *)(v0 + 616) = v59;
  v60 = v49[1];
  *(_QWORD *)(v0 + 624) = v60;
  v61 = *v49;
  *(_QWORD *)(v0 + 632) = *v49;
  *(_QWORD *)(v0 + 144) = v61;
  *(_QWORD *)(v0 + 152) = v60;
  *(_QWORD *)(v0 + 160) = v59;
  *(_QWORD *)(v0 + 168) = v48;
  *(_QWORD *)(v0 + 176) = v58;
  *(_QWORD *)(v0 + 184) = v57;
  *(_QWORD *)(v0 + 192) = v56;
  *(_QWORD *)(v0 + 200) = v55;
  *(_QWORD *)(v0 + 208) = v54;
  *(_QWORD *)(v0 + 216) = v53;
  *(_QWORD *)(v0 + 224) = v52;
  *(_QWORD *)(v0 + 232) = v51;
  v62 = v50[1];
  v94 = *v50;
  v64 = v50[2];
  v63 = v50[3];
  v65 = dword_100639B54;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v51);
  v66 = (_QWORD *)swift_task_alloc(v65);
  *(_QWORD *)(v0 + 640) = v66;
  *v66 = v0;
  v66[1] = sub_100242E4C;
  return sub_100253650(v94, v62, v64, v63, v0 + 144);
}

uint64_t sub_100242E4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 640);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 632);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 624);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 616);
  v14 = *(_QWORD *)(*(_QWORD *)v1 + 600);
  v15 = *(_QWORD *)(*(_QWORD *)v1 + 608);
  v13 = *(_QWORD *)(*(_QWORD *)v1 + 592);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 584);
  v7 = *(_QWORD *)(*(_QWORD *)v1 + 576);
  v8 = *(_QWORD *)(*(_QWORD *)v1 + 568);
  v9 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  v10 = *(_QWORD *)(*(_QWORD *)v1 + 552);
  v11 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  *(_QWORD *)(*(_QWORD *)v1 + 648) = a1;
  swift_task_dealloc(v2);
  sub_1001D9860(v3, v4, v5, v11, v15, v14, v13, v6, v7, v8, v9, v10);
  return swift_task_switch(sub_100242F28, 0, 0);
}

uint64_t sub_100242F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  Swift::String_optional v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;

  v1 = *(_QWORD *)(v0 + 648);
  if (v1)
  {
    v71 = *(_QWORD *)(v0 + 392);
    v2 = *(_QWORD *)(v0 + 376);
    v77 = enum case for DIPError.Code.internalError(_:);
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(v0 + 368) + 104);
    v3(v2);
    v59 = v3;
    swift_errorRetain(v1);
    v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v5 = type metadata accessor for DIPError(0);
    v57 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v58 = v5;
    v6 = swift_allocError(v5, v57, 0, 0);
    v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v4, 0xD000000000000054, 0x8000000100557710, 0xD000000000000038, 0x80000001005581E0, 263);
    swift_willThrow(v7);
    swift_errorRelease(v1);
    sub_100035DAC(v71, type metadata accessor for WorkflowRecommendationResponse);
    v72 = *(_QWORD *)(v0 + 528);
    v8 = *(_QWORD *)(v0 + 520);
    v9 = *(_QWORD *)(v0 + 376);
    ((void (*)(uint64_t, _QWORD, _QWORD))v3)(v9, enum case for DIPError.Code.serverResponseInconsistent(_:), *(_QWORD *)(v0 + 360));
    swift_errorRetain(v6);
    v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v52 = swift_allocError(v5, v57, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x8000000100558250, v6, v9, 0, v10, 0xD000000000000054, 0x8000000100557710, 0xD000000000000038, 0x80000001005581E0, 271);
    swift_willThrow(v11);
    sub_100007F8C(v8, v72);
    swift_errorRelease(v6);
    v48 = *(_QWORD *)(v0 + 488);
    v49 = *(_QWORD *)(v0 + 496);
    v60 = *(_QWORD *)(v0 + 472);
    v53 = *(_QWORD *)(v0 + 464);
    v54 = *(_QWORD *)(v0 + 456);
    v55 = *(_QWORD *)(v0 + 480);
    v61 = *(_QWORD *)(v0 + 448);
    v63 = *(_QWORD *)(v0 + 440);
    v56 = *(_QWORD *)(v0 + 416);
    v65 = *(_QWORD *)(v0 + 408);
    v67 = *(_QWORD *)(v0 + 400);
    v69 = *(_QWORD *)(v0 + 392);
    v50 = *(_QWORD *)(v0 + 376);
    v51 = *(_QWORD *)(v0 + 360);
    v73 = *(_QWORD *)(v0 + 352);
    v46 = *(_QWORD *)(v0 + 344);
    v47 = *(_OWORD **)(v0 + 328);
    v12 = sub_100004828((uint64_t *)&unk_1006325A0);
    v13 = sub_100004828((uint64_t *)&unk_100633440);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(_QWORD *)(v14 + 72);
    v16 = *(unsigned __int8 *)(v14 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = 2 * v15;
    v19 = swift_allocObject(v12, v17 + 3 * v15, v16 | 7);
    *(_OWORD *)(v19 + 16) = xmmword_100524440;
    v20 = v19 + v17;
    v21 = (_QWORD *)(v19 + v17 + *(int *)(v13 + 48));
    v22 = enum case for DIPError.PropertyKey.conversationID(_:);
    v23 = type metadata accessor for DIPError.PropertyKey(0);
    v24 = *(void (**)(void))(*(_QWORD *)(v23 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v24)(v20, v22, v23);
    v25 = *(_QWORD *)(v46 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v26 = *(_QWORD *)(v46 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v21[3] = &type metadata for String;
    *v21 = v25;
    v21[1] = v26;
    v27 = v20 + v15 + *(int *)(v13 + 48);
    v24();
    v28 = v47[1];
    *(_OWORD *)(v0 + 240) = *v47;
    *(_OWORD *)(v0 + 256) = v28;
    v29 = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 304) = v29;
    *(_QWORD *)(v27 + 24) = &type metadata for String;
    *(_OWORD *)v27 = v29;
    v30 = (_QWORD *)(v20 + v18 + *(int *)(v13 + 48));
    v24();
    v30[3] = &type metadata for String;
    *v30 = v48;
    v30[1] = v49;
    swift_errorRetain(v52);
    swift_bridgeObjectRetain(v26);
    sub_1000DB7AC(v0 + 304);
    v31 = sub_10011D314(v19);
    ((void (*)(uint64_t, _QWORD, uint64_t))v59)(v50, v77, v51);
    swift_allocError(v58, v57, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100558220, v52, v50, 0, v31, 0xD000000000000054, 0x8000000100557710, 0xD000000000000038, 0x80000001005581E0, 274);
    swift_willThrow(v32);
    swift_errorRelease(v52);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v55, v54);
    sub_100008030(v56, (uint64_t *)&unk_1006335F0);
    swift_task_dealloc(v55);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v56);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v50);
    swift_task_dealloc(v73);
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 528);
    v34 = *(_QWORD *)(v0 + 520);
    v35 = *(_QWORD *)(v0 + 480);
    v66 = *(_QWORD *)(v0 + 456);
    v68 = *(_QWORD *)(v0 + 472);
    v70 = *(_QWORD *)(v0 + 448);
    v74 = *(_QWORD *)(v0 + 440);
    v36 = *(_QWORD *)(v0 + 416);
    v37 = *(_QWORD *)(v0 + 392);
    v75 = *(_QWORD *)(v0 + 408);
    v76 = *(_QWORD *)(v0 + 400);
    v38 = *(_QWORD *)(v0 + 384);
    v78 = *(_QWORD *)(v0 + 376);
    v39 = *(uint64_t **)(v0 + 352);
    v62 = *(_QWORD *)(v0 + 320);
    v64 = *(_QWORD *)(v0 + 464);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 496));
    sub_100035DE8(v37 + *(int *)(v38 + 20), (uint64_t)v39, type metadata accessor for Workflow);
    v40 = *v39;
    v41 = (void *)v39[1];
    swift_bridgeObjectRetain(v41);
    v42.value._countAndFlagsBits = v40;
    v42.value._object = v41;
    DIPSignpost.end(workflowID:isBackground:)(v42, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease(v41);
    v43._countAndFlagsBits = 0xD000000000000019;
    v43._object = (void *)0x80000001005582B0;
    v44._countAndFlagsBits = 0x3462386632356263;
    v44._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v44, v43);
    sub_100007F8C(v34, v33);
    sub_100035DAC(v37, type metadata accessor for WorkflowRecommendationResponse);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v35, v66);
    sub_1001D9960((uint64_t)v39, v62);
    sub_100008030(v36, (uint64_t *)&unk_1006335F0);
    swift_task_dealloc(v35);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v74);
    swift_task_dealloc(v36);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v37);
    swift_task_dealloc(v78);
    swift_task_dealloc(v39);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002435A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  void (*v47)(uint64_t);
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 536);
  v3 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 376);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 504));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 272));
  v46 = enum case for DIPError.Code.internalError(_:);
  v47 = *(void (**)(uint64_t))(v3 + 104);
  v47(v2);
  swift_errorRetain(v1);
  v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v39 = type metadata accessor for DIPError(0);
  v38 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v32 = swift_allocError(v39, v38, 0, 0);
  v5 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x80000001005581B0, v1, v2, 0, v4, 0xD000000000000054, 0x8000000100557710, 0xD000000000000038, 0x80000001005581E0, 254);
  swift_willThrow(v5);
  swift_errorRelease(v1);
  v29 = *(_QWORD *)(v0 + 488);
  v30 = *(_QWORD *)(v0 + 496);
  v36 = *(_QWORD *)(v0 + 480);
  v40 = *(_QWORD *)(v0 + 472);
  v34 = *(_QWORD *)(v0 + 464);
  v35 = *(_QWORD *)(v0 + 456);
  v41 = *(_QWORD *)(v0 + 448);
  v42 = *(_QWORD *)(v0 + 440);
  v37 = *(_QWORD *)(v0 + 416);
  v43 = *(_QWORD *)(v0 + 408);
  v44 = *(_QWORD *)(v0 + 400);
  v45 = *(_QWORD *)(v0 + 392);
  v31 = *(_QWORD *)(v0 + 376);
  v33 = *(_QWORD *)(v0 + 360);
  v48 = *(_QWORD *)(v0 + 352);
  v27 = *(_QWORD *)(v0 + 344);
  v28 = *(_OWORD **)(v0 + 328);
  v6 = sub_100004828((uint64_t *)&unk_1006325A0);
  v7 = sub_100004828((uint64_t *)&unk_100633440);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = 2 * v9;
  v13 = swift_allocObject(v6, v11 + 3 * v9, v10 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_100524440;
  v14 = (_QWORD *)(v13 + v11 + *(int *)(v7 + 48));
  v15 = enum case for DIPError.PropertyKey.conversationID(_:);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  v17 = *(void (**)(void))(*(_QWORD *)(v16 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v17)(v13 + v11, v15, v16);
  v18 = *(_QWORD *)(v27 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v19 = *(_QWORD *)(v27 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v14[3] = &type metadata for String;
  *v14 = v18;
  v14[1] = v19;
  v20 = v13 + v11 + v9 + *(int *)(v7 + 48);
  v17();
  v21 = v28[1];
  *(_OWORD *)(v0 + 240) = *v28;
  *(_OWORD *)(v0 + 256) = v21;
  v22 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 304) = v22;
  *(_QWORD *)(v20 + 24) = &type metadata for String;
  *(_OWORD *)v20 = v22;
  v23 = (_QWORD *)(v13 + v11 + v12 + *(int *)(v7 + 48));
  v17();
  v23[3] = &type metadata for String;
  *v23 = v29;
  v23[1] = v30;
  swift_errorRetain(v32);
  swift_bridgeObjectRetain(v19);
  sub_1000DB7AC(v0 + 304);
  v24 = sub_10011D314(v13);
  ((void (*)(uint64_t, _QWORD, uint64_t))v47)(v31, v46, v33);
  swift_allocError(v39, v38, 0, 0);
  v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100558220, v32, v31, 0, v24, 0xD000000000000054, 0x8000000100557710, 0xD000000000000038, 0x80000001005581E0, 274);
  swift_willThrow(v25);
  swift_errorRelease(v32);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v35);
  sub_100008030(v37, (uint64_t *)&unk_1006335F0);
  swift_task_dealloc(v36);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v37);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v31);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1002439F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[9];
  _QWORD *v43;

  v2 = v1;
  v4 = &_swiftEmptyDictionarySingleton;
  v6 = a1 + 64;
  v5 = *(_QWORD *)(a1 + 64);
  v43 = &_swiftEmptyDictionarySingleton;
  v7 = -1 << *(_BYTE *)(a1 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  v10 = (unint64_t)(63 - v7) >> 6;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_23;
    }
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v14 >= v10)
      goto LABEL_41;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    v16 = v11 + 1;
    if (!v15)
    {
      v16 = v11 + 2;
      if (v11 + 2 >= v10)
        goto LABEL_41;
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (!v15)
      {
        v16 = v11 + 3;
        if (v11 + 3 >= v10)
          goto LABEL_41;
        v15 = *(_QWORD *)(v6 + 8 * v16);
        if (!v15)
        {
          v16 = v11 + 4;
          if (v11 + 4 >= v10)
            goto LABEL_41;
          v15 = *(_QWORD *)(v6 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v11 = v16;
LABEL_23:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v13);
    v19 = v18[1];
    if (v19)
    {
      v20 = *v18;
      v21 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000) == 0)
        v21 = v20 & 0xFFFFFFFFFFFFLL;
      if (v21)
      {
        v39 = v2;
        v22 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
        v23 = v22[1];
        v40 = v23;
        v41 = *v22;
        v24 = v4[2];
        if (v4[3] <= v24)
        {
          v25 = v24 + 1;
          swift_bridgeObjectRetain_n(v19, 2);
          swift_bridgeObjectRetain(v23);
          sub_100123948(v25, 1);
          v4 = v43;
        }
        else
        {
          swift_bridgeObjectRetain_n(v19, 2);
          swift_bridgeObjectRetain(v23);
        }
        Hasher.init(_seed:)(v42, v4[5]);
        String.hash(into:)(v42, v41, v23);
        v26 = Hasher._finalize()();
        v27 = v4 + 8;
        v28 = -1 << *((_BYTE *)v4 + 32);
        v29 = v26 & ~v28;
        v30 = v29 >> 6;
        if (((-1 << v29) & ~v4[(v29 >> 6) + 8]) == 0)
        {
          v32 = 0;
          v33 = (unint64_t)(63 - v28) >> 6;
          v2 = v39;
          while (++v30 != v33 || (v32 & 1) == 0)
          {
            v34 = v30 == v33;
            if (v30 == v33)
              v30 = 0;
            v32 |= v34;
            v35 = v27[v30];
            if (v35 != -1)
            {
              v31 = __clz(__rbit64(~v35)) + (v30 << 6);
              goto LABEL_40;
            }
          }
          goto LABEL_43;
        }
        v31 = __clz(__rbit64((-1 << v29) & ~v4[(v29 >> 6) + 8])) | v29 & 0x7FFFFFFFFFFFFFC0;
        v2 = v39;
LABEL_40:
        *(_QWORD *)((char *)v27 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
        v36 = 16 * v31;
        v37 = (_QWORD *)(v4[6] + v36);
        *v37 = v41;
        v37[1] = v40;
        v38 = (_QWORD *)(v4[7] + v36);
        *v38 = v20;
        v38[1] = v19;
        ++v4[2];
        swift_bridgeObjectRelease(v19);
      }
    }
  }
  v17 = v11 + 5;
  if (v11 + 5 >= v10)
  {
LABEL_41:
    sub_1000FBE78(a1);
    return;
  }
  v15 = *(_QWORD *)(v6 + 8 * v17);
  if (v15)
  {
    v16 = v11 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v10)
      goto LABEL_41;
    v15 = *(_QWORD *)(v6 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_22;
  }
LABEL_44:
  __break(1u);
}

uint64_t sub_100243D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[21] = a5;
  v6[22] = v5;
  v6[19] = a3;
  v6[20] = a4;
  v6[17] = a1;
  v6[18] = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[23] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[24] = v8;
  v6[25] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPSignpost.Config(0);
  v6[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost(0);
  v6[27] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[28] = v11;
  v6[29] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100243DC8, 0, 0);
}

uint64_t sub_100243DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 176);
  v8 = *(_OWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  static DaemonSignposts.topekaNonceRequest.getter();
  DIPSignpost.init(_:)(v1);
  v5 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 240) = v5;
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v2;
  *(_OWORD *)(v5 + 32) = v8;
  *(_QWORD *)(v5 + 48) = v3;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to DIPRetrier.retry<A>(operation:)[1]);
  *(_QWORD *)(v0 + 248) = v6;
  *v6 = v0;
  v6[1] = sub_100243EA0;
  return DIPRetrier.retry<A>(operation:)(v0 + 16, &unk_100639C40, v5, &type metadata for NonceResponse);
}

uint64_t sub_100243EA0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100243FF4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 240));
    v4 = sub_100243F0C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100243F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 200);
  v15 = *(_OWORD *)(v0 + 16);
  v13 = *(_OWORD *)(v0 + 48);
  v14 = *(_OWORD *)(v0 + 32);
  v11 = *(_OWORD *)(v0 + 80);
  v12 = *(_OWORD *)(v0 + 64);
  v9 = *(_OWORD *)(v0 + 112);
  v10 = *(_OWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  *(_OWORD *)v6 = v15;
  *(_OWORD *)(v6 + 16) = v14;
  *(_OWORD *)(v6 + 32) = v13;
  *(_OWORD *)(v6 + 48) = v12;
  *(_OWORD *)(v6 + 64) = v11;
  *(_OWORD *)(v6 + 80) = v10;
  *(_OWORD *)(v6 + 96) = v9;
  *(_QWORD *)(v6 + 112) = v7;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100243FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v6, enum case for DIPError.Code.internalError(_:), v7);
  swift_errorRetain(v1);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000010, 0x800000010054CAF0, v1, v6, 0, v9, 0xD000000000000054, 0x8000000100557710, 0x6F662865636E6F6ELL, 0xEF293A5F3A5F3A72, 322);
  swift_willThrow(v12);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100244184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[63] = a5;
  v6[64] = a6;
  v6[61] = a3;
  v6[62] = a4;
  v6[59] = a1;
  v6[60] = a2;
  v7 = type metadata accessor for DIPError(0);
  v6[65] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[66] = v8;
  v6[67] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006335E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[68] = swift_task_alloc(v9);
  v6[69] = swift_task_alloc(v9);
  v10 = type metadata accessor for DIPError.Code(0);
  v6[70] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[71] = v11;
  v6[72] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100244248, 0, 0);
}

uint64_t sub_100244248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 504);
  v23 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD **)(v0 + 480);
  *(_OWORD *)(v0 + 400) = *(_OWORD *)v4;
  v22 = v4[2];
  *(_QWORD *)(v0 + 584) = v22;
  v18 = v4[3];
  *(_QWORD *)(v0 + 592) = v18;
  v5 = v4[6];
  v20 = v4[5];
  v21 = v4[4];
  *(_QWORD *)(v0 + 600) = v5;
  sub_1000A1F54((uint64_t)(v4 + 7), v0 + 280, &qword_100639C48);
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 400);
  v6 = v3 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation;
  v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  *(_QWORD *)(v0 + 608) = v19;
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(v0 + 616) = v7;
  sub_1002563B0(v4);
  swift_bridgeObjectRetain(v7);
  sub_1000E6CF0(v0 + 384);
  sub_1002555A4(v2, v1, (uint64_t *)(v0 + 232));
  v8 = *(_QWORD *)(v0 + 232);
  v9 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 624) = v8;
  v11 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 632) = v9;
  *(_QWORD *)(v0 + 640) = v11;
  v17 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 648) = v10;
  *(_QWORD *)(v0 + 656) = v17;
  v16 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v0 + 664) = v16;
  v12 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 432) = v12;
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 264);
  sub_1000DB7AC(v0 + 432);
  sub_1000DB7AC(v0 + 416);
  sub_1000DB7AC(v0 + 448);
  sub_100256438((uint64_t *)(v0 + 280));
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v18);
  sub_10008F020(v8, v9, v11, v10, v17, v16);
  sub_1000E6CF0(v0 + 432);
  sub_1000E6CF0(v0 + 416);
  sub_1000E6CF0(v0 + 448);
  *(_QWORD *)(v0 + 352) = &type metadata for NonceRequest;
  v13 = (_QWORD *)swift_allocObject(&unk_10060C3F0, 120, 7);
  *(_QWORD *)(v0 + 328) = v13;
  v13[2] = v19;
  v13[3] = v7;
  v13[4] = v22;
  v13[5] = v18;
  v13[6] = v21;
  v13[7] = v20;
  v13[8] = v5;
  v13[9] = v8;
  v13[10] = v9;
  v13[11] = v11;
  v13[12] = v10;
  v13[13] = v17;
  v13[14] = v16;
  v14 = (_QWORD *)swift_task_alloc(dword_100639B4C);
  *(_QWORD *)(v0 + 672) = v14;
  *v14 = v0;
  v14[1] = sub_1002444C4;
  return sub_100250C38(v0 + 328, 0x6E6F6E2F312F312FLL, 0xEA00000000006563, v23, 0);
}

uint64_t sub_1002444C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 672);
  v6[85] = a1;
  v6[86] = a2;
  v6[87] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = sub_100244E38;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 41);

    v8 = sub_100244550;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100244550()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;

  v1 = *(_QWORD *)(v0 + 696);
  v2 = *(_QWORD *)(v0 + 688);
  v3 = *(_QWORD *)(v0 + 680);
  v4 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_100022948(v3, v2);
  v6 = JSONDecoder.init()(v5);
  v7 = sub_100139500();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for NonceResponse, v3, v2, &type metadata for NonceResponse, v7);
  if (v1)
  {
    v58 = *(_QWORD *)(v0 + 680);
    v60 = *(_QWORD *)(v0 + 688);
    v8 = *(_QWORD *)(v0 + 576);
    v9 = *(_QWORD *)(v0 + 568);
    v10 = *(_QWORD *)(v0 + 536);
    v56 = *(_QWORD *)(v0 + 560);
    v57 = *(_QWORD *)(v0 + 528);
    v11 = *(_QWORD *)(v0 + 520);
    v62 = *(uint64_t **)(v0 + 472);
    sub_100007F8C(v58, v60);
    swift_release(v6);
    v12 = sub_100004828((uint64_t *)&unk_1006325A0);
    v13 = sub_100004828((uint64_t *)&unk_100633440);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(_QWORD *)(v14 + 72);
    v16 = *(unsigned __int8 *)(v14 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = swift_allocObject(v12, v17 + v15, v16 | 7);
    *(_OWORD *)(v18 + 16) = xmmword_10051FFB0;
    v19 = v18 + v17;
    v20 = (_QWORD *)(v19 + *(int *)(v13 + 48));
    v21 = enum case for DIPError.PropertyKey.serverURL(_:);
    v22 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v19, v21, v22);
    v20[3] = &type metadata for String;
    *v20 = 0x6E6F6E2F312F312FLL;
    v20[1] = 0xEA00000000006563;
    swift_errorRetain(v1);
    v23 = sub_10011D314(v18);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v8, enum case for DIPError.Code.internalError(_:), v56);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x80000001005580A0, v1, v8, 0, v23, 0xD000000000000054, 0x8000000100557710, 0x6F662865636E6F6ELL, 0xEF293A5F3A5F3A72, 315);
    v24 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v25 = swift_allocError(v11, v24, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v26, v10, v11);
    sub_100007F8C(v58, v60);
    swift_errorRelease(v1);
    *v62 = v25;
    v27 = enum case for DIPRetrier.RetryResult.failure<A>(_:);
    v28 = sub_100004828(&qword_100639C50);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v62, v27, v28);
    v29 = *(_QWORD *)(v0 + 656);
    v30 = *(_QWORD *)(v0 + 648);
    v31 = *(_QWORD *)(v0 + 640);
    v32 = *(_QWORD *)(v0 + 632);
    v33 = *(_QWORD *)(v0 + 624);
    v34 = *(_QWORD *)(v0 + 600);
    v35 = *(_QWORD *)(v0 + 592);
    v36 = *(_QWORD *)(v0 + 576);
    v37 = *(_QWORD *)(v0 + 552);
    v59 = *(_QWORD *)(v0 + 664);
    v61 = *(_QWORD *)(v0 + 544);
    v63 = *(_QWORD *)(v0 + 536);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 616));
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v34);
    sub_10008EF5C(v33, v32, v31, v30, v29, v59);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v39 = *(_QWORD *)(v0 + 616);
    v40 = *(_QWORD *)(v0 + 592);
    sub_100007F8C(*(_QWORD *)(v0 + 680), *(_QWORD *)(v0 + 688));
    swift_release(v6);
    v41 = *(_QWORD *)(v0 + 16);
    v42 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 704) = v41;
    *(_QWORD *)(v0 + 712) = v42;
    v43 = *(_QWORD *)(v0 + 32);
    v44 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 720) = v43;
    *(_QWORD *)(v0 + 728) = v44;
    v45 = *(_QWORD *)(v0 + 48);
    v46 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 736) = v45;
    *(_QWORD *)(v0 + 744) = v46;
    v47 = *(_QWORD *)(v0 + 64);
    v48 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 752) = v47;
    *(_QWORD *)(v0 + 760) = v48;
    v49 = *(_QWORD *)(v0 + 80);
    v50 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 768) = v49;
    *(_QWORD *)(v0 + 776) = v50;
    v51 = *(_QWORD *)(v0 + 96);
    *(_QWORD *)(v0 + 784) = v51;
    v52 = *(_OWORD *)(v0 + 104);
    v53 = *(_OWORD *)(v0 + 120);
    *(_OWORD *)(v0 + 792) = v52;
    *(_OWORD *)(v0 + 808) = v53;
    *(_QWORD *)(v0 + 136) = v41;
    *(_QWORD *)(v0 + 144) = v42;
    *(_QWORD *)(v0 + 152) = v43;
    *(_QWORD *)(v0 + 160) = v44;
    *(_QWORD *)(v0 + 168) = v45;
    *(_QWORD *)(v0 + 176) = v46;
    *(_QWORD *)(v0 + 184) = v47;
    *(_QWORD *)(v0 + 192) = v48;
    *(_QWORD *)(v0 + 200) = v49;
    *(_QWORD *)(v0 + 208) = v50;
    *(_QWORD *)(v0 + 216) = v51;
    *(_QWORD *)(v0 + 224) = v52;
    v54 = dword_100639B54;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    v55 = (_QWORD *)swift_task_alloc(v54);
    *(_QWORD *)(v0 + 824) = v55;
    *v55 = v0;
    v55[1] = sub_1002449B8;
    return sub_100253650(*(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 616), *(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 592), v0 + 136);
  }
}

uint64_t sub_1002449B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 824);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 616);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 592);
  *(_QWORD *)(*(_QWORD *)v1 + 832) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return swift_task_switch(sub_100244A2C, 0, 0);
}

uint64_t sub_100244A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  __int128 v57;
  uint64_t v58;

  v1 = *(_QWORD *)(v0 + 832);
  v2 = *(_QWORD *)(v0 + 816);
  v3 = *(_QWORD *)(v0 + 808);
  if (v1)
  {
    v4 = *(_QWORD *)(v0 + 792);
    v5 = *(_QWORD *)(v0 + 776);
    v6 = *(_QWORD *)(v0 + 760);
    v7 = *(_QWORD *)(v0 + 744);
    v8 = *(_QWORD *)(v0 + 712);
    v53 = *(_QWORD *)(v0 + 688);
    v50 = *(_QWORD *)(v0 + 680);
    v9 = *(_QWORD *)(v0 + 576);
    v44 = *(_QWORD *)(v0 + 568);
    v46 = *(_QWORD *)(v0 + 560);
    v48 = *(_QWORD *)(v0 + 520);
    v56 = *(uint64_t **)(v0 + 472);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 728));
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v2);
    v10 = sub_100004828((uint64_t *)&unk_1006325A0);
    v11 = sub_100004828((uint64_t *)&unk_100633440);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 72);
    v14 = *(unsigned __int8 *)(v12 + 80);
    v15 = (v14 + 32) & ~v14;
    v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
    *(_OWORD *)(v16 + 16) = xmmword_10051FFB0;
    v17 = v16 + v15;
    v18 = (_QWORD *)(v17 + *(int *)(v11 + 48));
    v19 = enum case for DIPError.PropertyKey.serverURL(_:);
    v20 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v17, v19, v20);
    v18[3] = &type metadata for String;
    *v18 = 0x6E6F6E2F312F312FLL;
    v18[1] = 0xEA00000000006563;
    swift_errorRetain(v1);
    v21 = sub_10011D314(v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 104))(v9, enum case for DIPError.Code.internalError(_:), v46);
    v22 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v23 = swift_allocError(v48, v22, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v9, 0, v21, 0xD000000000000054, 0x8000000100557710, 0x6F662865636E6F6ELL, 0xEF293A5F3A5F3A72, 310);
    sub_100007F8C(v50, v53);
    swift_errorRelease(v1);
    *v56 = v23;
    v24 = enum case for DIPRetrier.RetryResult.failure<A>(_:);
    v25 = sub_100004828(&qword_100639C50);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v56, v24, v25);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 800);
    v57 = *(_OWORD *)(v0 + 784);
    v51 = *(_OWORD *)(v0 + 752);
    v54 = *(_OWORD *)(v0 + 768);
    v47 = *(_OWORD *)(v0 + 720);
    v49 = *(_OWORD *)(v0 + 736);
    v45 = *(_OWORD *)(v0 + 704);
    v27 = *(_QWORD *)(v0 + 688);
    v28 = *(_QWORD *)(v0 + 680);
    v29 = *(_QWORD *)(v0 + 472);
    v30._object = (void *)0x80000001005580D0;
    v31._countAndFlagsBits = 0x3063363334336237;
    v31._object = (void *)0xE800000000000000;
    v30._countAndFlagsBits = 0xD000000000000016;
    logMilestone(tag:description:)(v31, v30);
    sub_100007F8C(v28, v27);
    *(_OWORD *)v29 = v45;
    *(_OWORD *)(v29 + 16) = v47;
    *(_OWORD *)(v29 + 32) = v49;
    *(_OWORD *)(v29 + 48) = v51;
    *(_OWORD *)(v29 + 64) = v54;
    *(_OWORD *)(v29 + 80) = v57;
    *(_QWORD *)(v29 + 96) = v26;
    *(_QWORD *)(v29 + 104) = v3;
    *(_QWORD *)(v29 + 112) = v2;
    v32 = enum case for DIPRetrier.RetryResult.success<A>(_:);
    v33 = sub_100004828(&qword_100639C50);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v29, v32, v33);
  }
  v52 = *(_QWORD *)(v0 + 664);
  v34 = *(_QWORD *)(v0 + 656);
  v35 = *(_QWORD *)(v0 + 648);
  v36 = *(_QWORD *)(v0 + 640);
  v37 = *(_QWORD *)(v0 + 632);
  v38 = *(_QWORD *)(v0 + 624);
  v39 = *(_QWORD *)(v0 + 600);
  v40 = *(_QWORD *)(v0 + 592);
  v41 = *(_QWORD *)(v0 + 576);
  v42 = *(_QWORD *)(v0 + 552);
  v55 = *(_QWORD *)(v0 + 544);
  v58 = *(_QWORD *)(v0 + 536);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 616));
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v39);
  sub_10008EF5C(v38, v37, v36, v35, v34, v52);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v55);
  swift_task_dealloc(v58);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100244E38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 696);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 544);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 328));
  swift_getErrorValue(v1, v0 + 464, v0 + 360);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) == 1)
    goto LABEL_11;
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 560);
  v7 = *(_QWORD *)(v0 + 552);
  sub_100038B24(*(_QWORD *)(v0 + 544), v7, &qword_1006335E0);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v7, v6);
  if (v8 != enum case for DIPError.Code.httpUnauthorized(_:)
    && v8 != enum case for DIPError.Code.httpAuthKitReprovision(_:)
    && v8 != enum case for DIPError.Code.httpAuthKitResync(_:))
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 568) + 8))(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 560));
LABEL_11:
    v15 = *(_QWORD *)(v0 + 544);
    v16 = *(_QWORD **)(v0 + 472);
    *v16 = *(_QWORD *)(v0 + 696);
    v17 = enum case for DIPRetrier.RetryResult.failure<A>(_:);
    v18 = sub_100004828(&qword_100639C50);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v16, v17, v18);
    sub_100008030(v15, &qword_1006335E0);
    goto LABEL_12;
  }
  v11 = *(_QWORD *)(v0 + 696);
  v12 = *(_QWORD *)(v0 + 472);
  sub_100008030(*(_QWORD *)(v0 + 544), &qword_1006335E0);
  *(_QWORD *)v12 = v11;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 16) = 1;
  v13 = enum case for DIPRetrier.RetryResult.retry<A>(_:);
  v14 = sub_100004828(&qword_100639C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
LABEL_12:
  v19 = *(_QWORD *)(v0 + 656);
  v20 = *(_QWORD *)(v0 + 648);
  v21 = *(_QWORD *)(v0 + 640);
  v22 = *(_QWORD *)(v0 + 632);
  v23 = *(_QWORD *)(v0 + 624);
  v24 = *(_QWORD *)(v0 + 600);
  v25 = *(_QWORD *)(v0 + 592);
  v26 = *(_QWORD *)(v0 + 576);
  v27 = *(_QWORD *)(v0 + 552);
  v29 = *(_QWORD *)(v0 + 664);
  v30 = *(_QWORD *)(v0 + 544);
  v31 = *(_QWORD *)(v0 + 536);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 616));
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v24);
  sub_10008EF5C(v23, v22, v21, v20, v19, v29);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100245088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[21] = a3;
  v4[22] = v3;
  v4[19] = a1;
  v4[20] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[23] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[24] = v6;
  v4[25] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[27] = v8;
  v4[28] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for IdentityProofingResponse(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[29] = swift_task_alloc(v9);
  v4[30] = swift_task_alloc(v9);
  v10 = type metadata accessor for IdentityProofingRequest(0);
  v4[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  v4[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost(0);
  v4[33] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[34] = v13;
  v4[35] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002451AC, 0, 0);
}

uint64_t sub_1002451AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[32];
  v2 = v0[20];
  static DaemonSignposts.identityProofingRequest.getter();
  DIPSignpost.init(_:)(v1);
  v3 = sub_100004828(&qword_100636770);
  v0[36] = v3;
  v0[17] = v3;
  v4 = sub_100022234(v0 + 14);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v2, v3);
  if (qword_10062F4C8 != -1)
    swift_once(&qword_10062F4C8, sub_10023FF4C);
  v5 = qword_100639A78;
  v6 = unk_100639A80;
  v7 = (_QWORD *)swift_task_alloc(dword_100639B4C);
  v0[37] = v7;
  *v7 = v0;
  v7[1] = sub_1002452A4;
  return sub_100250C38((uint64_t)(v0 + 14), v5, v6, 0, 0);
}

uint64_t sub_1002452A4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 296);
  v6[38] = a1;
  v6[39] = a2;
  v6[40] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = sub_100246090;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 14);

    v8 = sub_10024532C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10024532C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(void);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  _OWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  void (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_100022948(v3, v1);
  v6 = JSONDecoder.init()(v5);
  v7 = sub_100004828(&qword_1006367A8);
  *(_QWORD *)(v0 + 328) = v7;
  v8 = sub_100099FFC(&qword_100639C30, &qword_1006367A8, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v3, v1, v7, v8);
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 312);
  if (v2)
  {
    v11 = v2;
    v12 = *(_QWORD *)(v0 + 192);
    sub_100007F8C(v9, v10);
    swift_release(v6);
    v67 = enum case for DIPError.Code.internalError(_:);
    v68 = *(void (**)(uint64_t))(v12 + 104);
    v14 = *(_QWORD *)(v0 + 304);
    v13 = *(_QWORD *)(v0 + 312);
    v15 = *(_QWORD *)(v0 + 200);
    v68(v15);
    swift_errorRetain(v11);
    v16 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v63 = type metadata accessor for DIPError(0);
    v62 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v69 = swift_allocError(v63, v62, 0, 0);
    v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000038, 0x8000000100557C20, v11, v15, 0, v16, 0xD000000000000054, 0x8000000100557710, 0xD000000000000017, 0x8000000100558020, 348);
    swift_willThrow(v17);
    sub_100007F8C(v14, v13);
    swift_errorRelease(v11);
    v55 = *(_QWORD *)(v0 + 288);
    v58 = *(_QWORD *)(v0 + 272);
    v59 = *(_QWORD *)(v0 + 264);
    v60 = *(_QWORD *)(v0 + 280);
    v18 = *(_QWORD *)(v0 + 248);
    v61 = *(_QWORD *)(v0 + 256);
    v64 = *(_QWORD *)(v0 + 240);
    v65 = *(_QWORD *)(v0 + 232);
    v66 = *(_QWORD *)(v0 + 224);
    v56 = *(_QWORD *)(v0 + 200);
    v57 = *(_QWORD *)(v0 + 184);
    v53 = *(_QWORD *)(v0 + 176);
    v19 = sub_100004828((uint64_t *)&unk_1006325A0);
    v20 = sub_100004828((uint64_t *)&unk_100633440);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(_QWORD *)(v21 + 72);
    v23 = *(unsigned __int8 *)(v21 + 80);
    v24 = (v23 + 32) & ~v23;
    v54 = 2 * v22;
    v25 = swift_allocObject(v19, v24 + 3 * v22, v23 | 7);
    *(_OWORD *)(v25 + 16) = xmmword_100524440;
    v26 = v25 + v24;
    v27 = (_QWORD *)(v25 + v24 + *(int *)(v20 + 48));
    v28 = enum case for DIPError.PropertyKey.conversationID(_:);
    v29 = type metadata accessor for DIPError.PropertyKey(0);
    v30 = *(void (**)(void))(*(_QWORD *)(v29 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v30)(v26, v28, v29);
    v31 = *(_QWORD *)(v53 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v32 = *(_QWORD *)(v53 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v27[3] = &type metadata for String;
    *v27 = v31;
    v27[1] = v32;
    v33 = (_QWORD *)(v26 + v22 + *(int *)(v20 + 48));
    v30();
    swift_errorRetain(v69);
    swift_bridgeObjectRetain(v32);
    JWSSignedJSON.payload.getter(v55);
    v35 = *(_QWORD *)(v18 + 16);
    v34 = *(_QWORD *)(v18 + 24);
    swift_bridgeObjectRetain(v34);
    sub_100035DAC(v18, type metadata accessor for IdentityProofingRequest);
    v33[3] = &type metadata for String;
    *v33 = v35;
    v33[1] = v34;
    v36 = (uint64_t *)(v26 + v54 + *(int *)(v20 + 48));
    v30();
    v38 = qword_100639A78;
    v37 = unk_100639A80;
    v36[3] = (uint64_t)&type metadata for String;
    *v36 = v38;
    v36[1] = v37;
    swift_bridgeObjectRetain(v37);
    v39 = sub_10011D314(v25);
    ((void (*)(uint64_t, _QWORD, uint64_t))v68)(v56, v67, v57);
    swift_allocError(v63, v62, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100558040, v69, v56, 0, v39, 0xD000000000000054, 0x8000000100557710, 0xD000000000000017, 0x8000000100558020, 351);
    swift_willThrow(v40);
    swift_errorRelease(v69);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v60, v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v18);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v56);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v42 = *(_QWORD *)(v0 + 288);
    v43 = *(_OWORD **)(v0 + 240);
    v44 = *(uint64_t **)(v0 + 248);
    sub_100007F8C(v9, v10);
    swift_release(v6);
    JWSSignedJSON.payload.getter(v42);
    v45 = v44[1];
    v70 = *v44;
    *(_QWORD *)(v0 + 336) = v45;
    v46 = v44[2];
    v47 = v44[3];
    *(_QWORD *)(v0 + 344) = v47;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v47);
    sub_100035DAC((uint64_t)v44, type metadata accessor for IdentityProofingRequest);
    JWSSignedJSON.payload.getter(v7);
    v48 = v43[1];
    *(_OWORD *)(v0 + 16) = *v43;
    *(_OWORD *)(v0 + 32) = v48;
    v49 = v43[2];
    v50 = v43[3];
    v51 = v43[5];
    *(_OWORD *)(v0 + 80) = v43[4];
    *(_OWORD *)(v0 + 96) = v51;
    *(_OWORD *)(v0 + 48) = v49;
    *(_OWORD *)(v0 + 64) = v50;
    sub_10023FE18((_QWORD *)(v0 + 16));
    sub_100035DAC((uint64_t)v43, type metadata accessor for IdentityProofingResponse);
    v52 = (_QWORD *)swift_task_alloc(dword_100639B54);
    *(_QWORD *)(v0 + 352) = v52;
    *v52 = v0;
    v52[1] = sub_1002458D0;
    return sub_100253650(v70, v45, v46, v47, v0 + 16);
  }
}

uint64_t sub_1002458D0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)(*(_QWORD *)v1 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 360) = a1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  sub_10023FE8C(v2);
  return swift_task_switch(sub_100245954, 0, 0);
}

uint64_t sub_100245954()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String_optional v21;
  void *object;
  Swift::String v23;
  Swift::String v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(void);
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87[3];

  if (v0[45])
  {
    v82 = v0[45];
    v1 = v0[29];
    JWSSignedJSON.payload.getter(v0[41]);
    v3 = *(_QWORD *)(v1 + 96);
    v2 = *(_QWORD *)(v1 + 104);
    swift_bridgeObjectRetain(v2);
    v4 = sub_100035DAC(v1, type metadata accessor for IdentityProofingResponse);
    if (v2)
    {
      defaultLogger()(v4);
      swift_bridgeObjectRetain(v2);
      v6 = Logger.logObject.getter(v5);
      v7 = static os_log_type_t.error.getter();
      v8 = os_log_type_enabled(v6, v7);
      v9 = v0[27];
      v10 = v0[28];
      v11 = v0[26];
      if (v8)
      {
        v77 = v0[28];
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v73 = v9;
        v13 = swift_slowAlloc(32, -1);
        v87[0] = v13;
        *(_DWORD *)v12 = 136315138;
        swift_bridgeObjectRetain(v2);
        v0[18] = sub_1000E3AC8(v3, v2, v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v12 + 4);
        swift_bridgeObjectRelease_n(v2, 3);
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Server runtime error: %s", v12, 0xCu);
        swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v77, v11);
      }
      else
      {
        swift_bridgeObjectRelease_n(v2, 2);

        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
      }
    }
    v26 = v0[45];
    v27 = v0[25];
    v75 = v0[19];
    v79 = v0[41];
    v86 = enum case for DIPError.Code.internalError(_:);
    v28 = *(void (**)(uint64_t))(v0[24] + 104);
    v28(v27);
    v72 = v28;
    swift_errorRetain(v82);
    v29 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v30 = type metadata accessor for DIPError(0);
    v68 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v69 = v30;
    v31 = swift_allocError(v30, v68, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v26, v27, 0, v29, 0xD000000000000054, 0x8000000100557710, 0xD000000000000017, 0x8000000100558020, 342);
    swift_willThrow(v32);
    swift_errorRelease(v82);
    (*(void (**)(uint64_t))(*(_QWORD *)(v79 - 8) + 8))(v75);
    v33 = v0[38];
    v80 = v0[39];
    v34 = v0[25];
    ((void (*)(uint64_t, _QWORD, _QWORD))v28)(v34, v86, v0[23]);
    swift_errorRetain(v31);
    v35 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v84 = swift_allocError(v30, v68, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000038, 0x8000000100557C20, v31, v34, 0, v35, 0xD000000000000054, 0x8000000100557710, 0xD000000000000017, 0x8000000100558020, 348);
    swift_willThrow(v36);
    sub_100007F8C(v33, v80);
    swift_errorRelease(v31);
    v62 = v0[36];
    v65 = v0[34];
    v66 = v0[33];
    v67 = v0[35];
    v37 = v0[31];
    v70 = v0[32];
    v71 = v0[30];
    v76 = v0[29];
    v81 = v0[28];
    v63 = v0[25];
    v64 = v0[23];
    v60 = v0[22];
    v38 = sub_100004828((uint64_t *)&unk_1006325A0);
    v39 = sub_100004828((uint64_t *)&unk_100633440);
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(_QWORD *)(v40 + 72);
    v42 = *(unsigned __int8 *)(v40 + 80);
    v43 = (v42 + 32) & ~v42;
    v61 = 2 * v41;
    v44 = swift_allocObject(v38, v43 + 3 * v41, v42 | 7);
    *(_OWORD *)(v44 + 16) = xmmword_100524440;
    v45 = (_QWORD *)(v44 + v43 + *(int *)(v39 + 48));
    v46 = enum case for DIPError.PropertyKey.conversationID(_:);
    v47 = type metadata accessor for DIPError.PropertyKey(0);
    v48 = *(void (**)(void))(*(_QWORD *)(v47 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v48)(v44 + v43, v46, v47);
    v49 = *(_QWORD *)(v60 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v50 = *(_QWORD *)(v60 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v45[3] = &type metadata for String;
    *v45 = v49;
    v45[1] = v50;
    v51 = (_QWORD *)(v44 + v43 + v41 + *(int *)(v39 + 48));
    v48();
    swift_errorRetain(v84);
    swift_bridgeObjectRetain(v50);
    JWSSignedJSON.payload.getter(v62);
    v53 = *(_QWORD *)(v37 + 16);
    v52 = *(_QWORD *)(v37 + 24);
    swift_bridgeObjectRetain(v52);
    sub_100035DAC(v37, type metadata accessor for IdentityProofingRequest);
    v51[3] = &type metadata for String;
    *v51 = v53;
    v51[1] = v52;
    v54 = (uint64_t *)(v44 + v43 + v61 + *(int *)(v39 + 48));
    v48();
    v56 = qword_100639A78;
    v55 = unk_100639A80;
    v54[3] = (uint64_t)&type metadata for String;
    *v54 = v56;
    v54[1] = v55;
    swift_bridgeObjectRetain(v55);
    v57 = sub_10011D314(v44);
    ((void (*)(uint64_t, _QWORD, uint64_t))v72)(v63, v86, v64);
    swift_allocError(v69, v68, 0, 0);
    v58 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100558040, v84, v63, 0, v57, 0xD000000000000054, 0x8000000100557710, 0xD000000000000017, 0x8000000100558020, 351);
    swift_willThrow(v58);
    swift_errorRelease(v84);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v67, v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v70);
    swift_task_dealloc(v37);
    swift_task_dealloc(v71);
    swift_task_dealloc(v76);
    swift_task_dealloc(v81);
    swift_task_dealloc(v63);
    v25 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v15 = v0[38];
    v14 = v0[39];
    v16 = v0[34];
    v17 = v0[35];
    v18 = v0[32];
    v19 = v0[33];
    v20 = v0[31];
    v74 = v0[30];
    v78 = v0[29];
    v83 = v0[28];
    v85 = v0[25];
    v21.value._countAndFlagsBits = sub_1000549DC();
    object = v21.value._object;
    DIPSignpost.end(workflowID:isBackground:)(v21, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease(object);
    v23._countAndFlagsBits = 0xD000000000000019;
    v23._object = (void *)0x8000000100558060;
    v24._countAndFlagsBits = 0x3566376339346663;
    v24._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v24, v23);
    sub_100007F8C(v15, v14);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v19);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v20);
    swift_task_dealloc(v74);
    swift_task_dealloc(v78);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    v25 = (uint64_t (*)(void))v0[1];
  }
  return v25();
}

uint64_t sub_100246090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  void (*v45)(uint64_t);
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 112));
  v44 = enum case for DIPError.Code.internalError(_:);
  v45 = *(void (**)(uint64_t))(v3 + 104);
  v45(v2);
  swift_errorRetain(v1);
  v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v39 = type metadata accessor for DIPError(0);
  v38 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v46 = swift_allocError(v39, v38, 0, 0);
  v5 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v4, 0xD000000000000054, 0x8000000100557710, 0xD000000000000017, 0x8000000100558020, 334);
  swift_willThrow(v5);
  swift_errorRelease(v1);
  v32 = *(_QWORD *)(v0 + 288);
  v37 = *(_QWORD *)(v0 + 280);
  v35 = *(_QWORD *)(v0 + 272);
  v36 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 248);
  v40 = *(_QWORD *)(v0 + 256);
  v41 = *(_QWORD *)(v0 + 240);
  v42 = *(_QWORD *)(v0 + 232);
  v43 = *(_QWORD *)(v0 + 224);
  v33 = *(_QWORD *)(v0 + 200);
  v34 = *(_QWORD *)(v0 + 184);
  v30 = *(_QWORD *)(v0 + 176);
  v7 = sub_100004828((uint64_t *)&unk_1006325A0);
  v8 = sub_100004828((uint64_t *)&unk_100633440);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v31 = 2 * v10;
  v13 = swift_allocObject(v7, v12 + 3 * v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_100524440;
  v14 = v13 + v12;
  v15 = (_QWORD *)(v13 + v12 + *(int *)(v8 + 48));
  v16 = enum case for DIPError.PropertyKey.conversationID(_:);
  v17 = type metadata accessor for DIPError.PropertyKey(0);
  v18 = *(void (**)(void))(*(_QWORD *)(v17 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v14, v16, v17);
  v19 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v20 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v15[3] = &type metadata for String;
  *v15 = v19;
  v15[1] = v20;
  v21 = (_QWORD *)(v14 + v10 + *(int *)(v8 + 48));
  v18();
  swift_errorRetain(v46);
  swift_bridgeObjectRetain(v20);
  JWSSignedJSON.payload.getter(v32);
  v23 = *(_QWORD *)(v6 + 16);
  v22 = *(_QWORD *)(v6 + 24);
  swift_bridgeObjectRetain(v22);
  sub_100035DAC(v6, type metadata accessor for IdentityProofingRequest);
  v21[3] = &type metadata for String;
  *v21 = v23;
  v21[1] = v22;
  v24 = (uint64_t *)(v14 + v31 + *(int *)(v8 + 48));
  v18();
  v26 = qword_100639A78;
  v25 = unk_100639A80;
  v24[3] = (uint64_t)&type metadata for String;
  *v24 = v26;
  v24[1] = v25;
  swift_bridgeObjectRetain(v25);
  v27 = sub_10011D314(v13);
  ((void (*)(uint64_t, _QWORD, uint64_t))v45)(v33, v44, v34);
  swift_allocError(v39, v38, 0, 0);
  v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100558040, v46, v33, 0, v27, 0xD000000000000054, 0x8000000100557710, 0xD000000000000017, 0x8000000100558020, 351);
  swift_willThrow(v28);
  swift_errorRelease(v46);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v40);
  swift_task_dealloc(v6);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100246490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[22] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[23] = v6;
  v4[24] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SharingRegistrationResponse(0);
  v4[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SharingRegistrationRequest(0);
  v4[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPSignpost.Config(0);
  v4[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost(0);
  v4[28] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[29] = v11;
  v4[30] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10024657C, 0, 0);
}

uint64_t sub_10024657C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[27];
  v2 = v0[19];
  static DaemonSignposts.sharingRegistrationRequest.getter();
  DIPSignpost.init(_:)(v1);
  v3 = sub_100004828(&qword_100636628);
  v0[31] = v3;
  v0[17] = v3;
  v4 = sub_100022234(v0 + 14);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v2, v3);
  if (qword_10062F4D0 != -1)
    swift_once(&qword_10062F4D0, sub_10023FFAC);
  v5 = qword_100639A88;
  v6 = unk_100639A90;
  v7 = (_QWORD *)swift_task_alloc(dword_100639B4C);
  v0[32] = v7;
  *v7 = v0;
  v7[1] = sub_100246674;
  return sub_100250C38((uint64_t)(v0 + 14), v5, v6, 0, 0);
}

uint64_t sub_100246674(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 256);
  v6[33] = a1;
  v6[34] = a2;
  v6[35] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = sub_100247270;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 14);

    v8 = sub_1002466FC;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1002466FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = type metadata accessor for JSONDecoder(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v6 = JSONDecoder.init()(v5);
  v7 = sub_100004828(&qword_1006365B8);
  *(_QWORD *)(v0 + 288) = v7;
  v8 = sub_100099FFC(&qword_100639C28, &qword_1006365B8, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v3, v1, v7, v8);
  if (v2)
  {
    v9 = v2;
    v10 = *(_QWORD *)(v0 + 184);
    swift_release(v6);
    v65 = enum case for DIPError.Code.internalError(_:);
    v11 = *(void (**)(uint64_t))(v10 + 104);
    v13 = *(_QWORD *)(v0 + 264);
    v12 = *(_QWORD *)(v0 + 272);
    v14 = *(_QWORD *)(v0 + 192);
    v11(v14);
    swift_errorRetain(v9);
    v15 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v64 = type metadata accessor for DIPError(0);
    v63 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v66 = swift_allocError(v64, v63, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003BLL, 0x8000000100557F90, v9, v14, 0, v15, 0xD000000000000054, 0x8000000100557710, 0xD000000000000022, 0x8000000100557F60, 373);
    swift_willThrow(v16);
    swift_errorRelease(v9);
    sub_100007F8C(v13, v12);
    v54 = *(_QWORD *)(v0 + 248);
    v58 = *(_QWORD *)(v0 + 232);
    v59 = *(_QWORD *)(v0 + 224);
    v60 = *(_QWORD *)(v0 + 240);
    v17 = *(_QWORD *)(v0 + 208);
    v61 = *(_QWORD *)(v0 + 216);
    v62 = *(_QWORD *)(v0 + 200);
    v55 = *(_QWORD *)(v0 + 184);
    v56 = *(_QWORD *)(v0 + 192);
    v57 = *(_QWORD *)(v0 + 176);
    v52 = *(_QWORD *)(v0 + 168);
    v18 = sub_100004828((uint64_t *)&unk_1006325A0);
    v19 = sub_100004828((uint64_t *)&unk_100633440);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(_QWORD *)(v20 + 72);
    v22 = *(unsigned __int8 *)(v20 + 80);
    v23 = (v22 + 32) & ~v22;
    v53 = 2 * v21;
    v24 = swift_allocObject(v18, v23 + 3 * v21, v22 | 7);
    *(_OWORD *)(v24 + 16) = xmmword_100524440;
    v25 = v24 + v23;
    v26 = (_QWORD *)(v24 + v23 + *(int *)(v19 + 48));
    v27 = enum case for DIPError.PropertyKey.conversationID(_:);
    v28 = type metadata accessor for DIPError.PropertyKey(0);
    v29 = *(void (**)(void))(*(_QWORD *)(v28 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v29)(v25, v27, v28);
    v30 = *(_QWORD *)(v52 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v31 = *(_QWORD *)(v52 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v26[3] = &type metadata for String;
    *v26 = v30;
    v26[1] = v31;
    v32 = (_QWORD *)(v25 + v21 + *(int *)(v19 + 48));
    v29();
    swift_errorRetain(v66);
    swift_bridgeObjectRetain(v31);
    JWSSignedJSON.payload.getter(v54);
    v34 = *(_QWORD *)(v17 + 16);
    v33 = *(_QWORD *)(v17 + 24);
    swift_bridgeObjectRetain(v33);
    sub_100035DAC(v17, type metadata accessor for SharingRegistrationRequest);
    v32[3] = &type metadata for String;
    *v32 = v34;
    v32[1] = v33;
    v35 = (uint64_t *)(v25 + v53 + *(int *)(v19 + 48));
    v29();
    v37 = qword_100639A88;
    v36 = unk_100639A90;
    v35[3] = (uint64_t)&type metadata for String;
    *v35 = v37;
    v35[1] = v36;
    swift_bridgeObjectRetain(v36);
    v38 = sub_10011D314(v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v55 + 104))(v56, v65, v57);
    swift_allocError(v64, v63, 0, 0);
    v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100557F40, v66, v56, 0, v38, 0xD000000000000054, 0x8000000100557710, 0xD000000000000022, 0x8000000100557F60, 376);
    swift_willThrow(v39);
    swift_errorRelease(v66);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v60, v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v17);
    swift_task_dealloc(v62);
    swift_task_dealloc(v56);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v41 = *(_QWORD *)(v0 + 248);
    v43 = *(_OWORD **)(v0 + 200);
    v42 = *(uint64_t **)(v0 + 208);
    swift_release(v6);
    JWSSignedJSON.payload.getter(v41);
    v44 = v42[1];
    v67 = *v42;
    *(_QWORD *)(v0 + 296) = v44;
    v45 = v42[2];
    v46 = v42[3];
    *(_QWORD *)(v0 + 304) = v46;
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v46);
    sub_100035DAC((uint64_t)v42, type metadata accessor for SharingRegistrationRequest);
    JWSSignedJSON.payload.getter(v7);
    v47 = v43[1];
    *(_OWORD *)(v0 + 16) = *v43;
    *(_OWORD *)(v0 + 32) = v47;
    v48 = v43[2];
    v49 = v43[3];
    v50 = v43[5];
    *(_OWORD *)(v0 + 80) = v43[4];
    *(_OWORD *)(v0 + 96) = v50;
    *(_OWORD *)(v0 + 48) = v48;
    *(_OWORD *)(v0 + 64) = v49;
    sub_10023FE18((_QWORD *)(v0 + 16));
    sub_100035DAC((uint64_t)v43, type metadata accessor for SharingRegistrationResponse);
    v51 = (_QWORD *)swift_task_alloc(dword_100639B54);
    *(_QWORD *)(v0 + 312) = v51;
    *v51 = v0;
    v51[1] = sub_100246C70;
    return sub_100253650(v67, v44, v45, v46, v0 + 16);
  }
}

uint64_t sub_100246C70(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)(*(_QWORD *)v1 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = a1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  sub_10023FE8C(v2);
  return swift_task_switch(sub_100246CF4, 0, 0);
}

uint64_t sub_100246CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String_optional v40;
  void *object;
  Swift::String v42;
  Swift::String v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, _QWORD);
  uint64_t v64;
  uint64_t v65;

  v1 = *(_QWORD *)(v0 + 320);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 192);
    v56 = *(_QWORD *)(v0 + 144);
    v58 = *(_QWORD *)(v0 + 288);
    v3 = enum case for DIPError.Code.internalError(_:);
    v63 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 104);
    v61 = enum case for DIPError.Code.internalError(_:);
    v63(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 176));
    swift_errorRetain(v1);
    v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v55 = type metadata accessor for DIPError(0);
    v54 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v5 = swift_allocError(v55, v54, 0, 0);
    v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v4, 0xD000000000000054, 0x8000000100557710, 0xD000000000000022, 0x8000000100557F60, 367);
    swift_willThrow(v6);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v56);
    v7 = *(_QWORD *)(v0 + 264);
    v59 = *(_QWORD *)(v0 + 272);
    v8 = *(_QWORD *)(v0 + 192);
    v63(v8, v3, *(_QWORD *)(v0 + 176));
    swift_errorRetain(v5);
    v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v64 = swift_allocError(v55, v54, 0, 0);
    v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003BLL, 0x8000000100557F90, v5, v8, 0, v9, 0xD000000000000054, 0x8000000100557710, 0xD000000000000022, 0x8000000100557F60, 373);
    swift_willThrow(v10);
    swift_errorRelease(v5);
    sub_100007F8C(v7, v59);
    v47 = *(_QWORD *)(v0 + 248);
    v51 = *(_QWORD *)(v0 + 232);
    v52 = *(_QWORD *)(v0 + 224);
    v53 = *(_QWORD *)(v0 + 240);
    v11 = *(_QWORD *)(v0 + 208);
    v57 = *(_QWORD *)(v0 + 216);
    v60 = *(_QWORD *)(v0 + 200);
    v48 = *(_QWORD *)(v0 + 184);
    v49 = *(_QWORD *)(v0 + 192);
    v50 = *(_QWORD *)(v0 + 176);
    v45 = *(_QWORD *)(v0 + 168);
    v12 = sub_100004828((uint64_t *)&unk_1006325A0);
    v13 = sub_100004828((uint64_t *)&unk_100633440);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(_QWORD *)(v14 + 72);
    v16 = *(unsigned __int8 *)(v14 + 80);
    v17 = (v16 + 32) & ~v16;
    v46 = 2 * v15;
    v18 = swift_allocObject(v12, v17 + 3 * v15, v16 | 7);
    *(_OWORD *)(v18 + 16) = xmmword_100524440;
    v19 = (_QWORD *)(v18 + v17 + *(int *)(v13 + 48));
    v20 = enum case for DIPError.PropertyKey.conversationID(_:);
    v21 = type metadata accessor for DIPError.PropertyKey(0);
    v22 = *(void (**)(void))(*(_QWORD *)(v21 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v18 + v17, v20, v21);
    v23 = *(_QWORD *)(v45 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v24 = *(_QWORD *)(v45 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v19[3] = &type metadata for String;
    *v19 = v23;
    v19[1] = v24;
    v25 = (_QWORD *)(v18 + v17 + v15 + *(int *)(v13 + 48));
    v22();
    swift_errorRetain(v64);
    swift_bridgeObjectRetain(v24);
    JWSSignedJSON.payload.getter(v47);
    v27 = *(_QWORD *)(v11 + 16);
    v26 = *(_QWORD *)(v11 + 24);
    swift_bridgeObjectRetain(v26);
    sub_100035DAC(v11, type metadata accessor for SharingRegistrationRequest);
    v25[3] = &type metadata for String;
    *v25 = v27;
    v25[1] = v26;
    v28 = (uint64_t *)(v18 + v17 + v46 + *(int *)(v13 + 48));
    v22();
    v30 = qword_100639A88;
    v29 = unk_100639A90;
    v28[3] = (uint64_t)&type metadata for String;
    *v28 = v30;
    v28[1] = v29;
    swift_bridgeObjectRetain(v29);
    v31 = sub_10011D314(v18);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v48 + 104))(v49, v61, v50);
    swift_allocError(v55, v54, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100557F40, v64, v49, 0, v31, 0xD000000000000054, 0x8000000100557710, 0xD000000000000022, 0x8000000100557F60, 376);
    swift_willThrow(v32);
    swift_errorRelease(v64);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v53, v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v57);
    swift_task_dealloc(v11);
    swift_task_dealloc(v60);
    swift_task_dealloc(v49);
  }
  else
  {
    v34 = *(_QWORD *)(v0 + 264);
    v33 = *(_QWORD *)(v0 + 272);
    v36 = *(_QWORD *)(v0 + 232);
    v35 = *(_QWORD *)(v0 + 240);
    v38 = *(_QWORD *)(v0 + 216);
    v37 = *(_QWORD *)(v0 + 224);
    v39 = *(_QWORD *)(v0 + 208);
    v62 = *(_QWORD *)(v0 + 200);
    v65 = *(_QWORD *)(v0 + 192);
    v40.value._countAndFlagsBits = sub_1000549DC();
    object = v40.value._object;
    DIPSignpost.end(workflowID:isBackground:)(v40, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease(object);
    v42._countAndFlagsBits = 0xD000000000000025;
    v42._object = (void *)0x8000000100557FD0;
    v43._countAndFlagsBits = 0x3634363065363139;
    v43._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v43, v42);
    sub_100007F8C(v34, v33);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    swift_task_dealloc(v35);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v62);
    swift_task_dealloc(v65);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100247270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 112));
  v33 = enum case for DIPError.Code.internalError(_:);
  v39 = *(_QWORD *)(v0 + 280);
  v29 = *(_QWORD *)(v0 + 248);
  v34 = *(_QWORD *)(v0 + 232);
  v35 = *(_QWORD *)(v0 + 224);
  v36 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 208);
  v37 = *(_QWORD *)(v0 + 216);
  v38 = *(_QWORD *)(v0 + 200);
  v30 = *(_QWORD *)(v0 + 184);
  v31 = *(_QWORD *)(v0 + 192);
  v32 = *(_QWORD *)(v0 + 176);
  v27 = *(_QWORD *)(v0 + 168);
  v2 = sub_100004828((uint64_t *)&unk_1006325A0);
  v3 = sub_100004828((uint64_t *)&unk_100633440);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v28 = 2 * v5;
  v8 = swift_allocObject(v2, v7 + 3 * v5, v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_100524440;
  v9 = v8 + v7;
  v10 = (_QWORD *)(v8 + v7 + *(int *)(v3 + 48));
  v11 = enum case for DIPError.PropertyKey.conversationID(_:);
  v12 = type metadata accessor for DIPError.PropertyKey(0);
  v13 = *(void (**)(void))(*(_QWORD *)(v12 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(v9, v11, v12);
  v14 = *(_QWORD *)(v27 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v15 = *(_QWORD *)(v27 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v10[3] = &type metadata for String;
  *v10 = v14;
  v10[1] = v15;
  v16 = (_QWORD *)(v9 + v5 + *(int *)(v3 + 48));
  v13();
  swift_errorRetain(v39);
  swift_bridgeObjectRetain(v15);
  JWSSignedJSON.payload.getter(v29);
  v17 = *(_QWORD *)(v1 + 16);
  v18 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain(v18);
  sub_100035DAC(v1, type metadata accessor for SharingRegistrationRequest);
  v16[3] = &type metadata for String;
  *v16 = v17;
  v16[1] = v18;
  v19 = (uint64_t *)(v9 + v28 + *(int *)(v3 + 48));
  v13();
  v21 = qword_100639A88;
  v20 = unk_100639A90;
  v19[3] = (uint64_t)&type metadata for String;
  *v19 = v21;
  v19[1] = v20;
  swift_bridgeObjectRetain(v20);
  v22 = sub_10011D314(v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104))(v31, v33, v32);
  v23 = type metadata accessor for DIPError(0);
  v24 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v23, v24, 0, 0);
  v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100557F40, v39, v31, 0, v22, 0xD000000000000054, 0x8000000100557710, 0xD000000000000022, 0x8000000100557F60, 376);
  swift_willThrow(v25);
  swift_errorRelease(v39);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v1);
  swift_task_dealloc(v38);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002475B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[132] = v2;
  v3[131] = a2;
  v3[130] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[133] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[134] = v5;
  v3[135] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPSignpost.Config(0);
  v3[136] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPSignpost(0);
  v3[137] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[138] = v8;
  v3[139] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100247664, 0, 0);
}

uint64_t sub_100247664()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[136];
  v2 = v0[131];
  static DaemonSignposts.identityPendingActionRequest.getter();
  DIPSignpost.init(_:)(v1);
  v3 = sub_1002556F4();
  v0[140] = v3;
  v4 = sub_100004828(&qword_100639B60);
  v0[141] = v4;
  v0[129] = v4;
  v5 = sub_100022234(v0 + 126);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v5, v2, v4);
  v6 = (_QWORD *)swift_task_alloc(dword_100639B4C);
  v0[142] = v6;
  *v6 = v0;
  v6[1] = sub_100247744;
  return sub_100250C38((uint64_t)(v0 + 126), 0xD000000000000014, 0x8000000100557E70, v3, 0);
}

uint64_t sub_100247744(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 1136);
  v6[143] = a1;
  v6[144] = a2;
  v6[145] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = sub_100248468;
  }
  else
  {
    swift_bridgeObjectRelease(v6[140]);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 126);

    v8 = sub_1002477DC;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1002477DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;

  v1 = *(_QWORD *)(v0 + 1160);
  v2 = *(_QWORD *)(v0 + 1152);
  v3 = *(_QWORD *)(v0 + 1144);
  v4 = type metadata accessor for JSONDecoder(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v6 = JSONDecoder.init()(v5);
  v7 = sub_100004828(&qword_100639C18);
  *(_QWORD *)(v0 + 1168) = v7;
  v8 = sub_100099FFC(&qword_100639C20, &qword_100639C18, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v3, v2, v7, v8);
  if (v1)
  {
    v9 = v1;
    v10 = *(_QWORD *)(v0 + 1072);
    swift_release(v6);
    v80 = enum case for DIPError.Code.internalError(_:);
    v11 = *(void (**)(uint64_t))(v10 + 104);
    v12 = *(_QWORD *)(v0 + 1152);
    v13 = *(_QWORD *)(v0 + 1144);
    v14 = *(_QWORD *)(v0 + 1080);
    v11(v14);
    swift_errorRetain(v9);
    v15 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v78 = type metadata accessor for DIPError(0);
    v77 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v81 = swift_allocError(v78, v77, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000048, 0x8000000100557EF0, v9, v14, 0, v15, 0xD000000000000054, 0x8000000100557710, 0xD000000000000024, 0x8000000100557EC0, 403);
    swift_willThrow(v16);
    swift_errorRelease(v9);
    sub_100007F8C(v13, v12);
    v73 = *(_QWORD *)(v0 + 1104);
    v74 = *(_QWORD *)(v0 + 1096);
    v75 = *(_QWORD *)(v0 + 1112);
    v76 = *(_QWORD *)(v0 + 1088);
    v70 = *(_QWORD *)(v0 + 1072);
    v71 = *(_QWORD *)(v0 + 1080);
    v72 = *(_QWORD *)(v0 + 1064);
    v17 = *(_QWORD *)(v0 + 1056);
    v69 = *(_QWORD *)(v0 + 1128);
    v18 = sub_100004828((uint64_t *)&unk_1006325A0);
    v19 = sub_100004828((uint64_t *)&unk_100633440);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(_QWORD *)(v20 + 72);
    v22 = *(unsigned __int8 *)(v20 + 80);
    v23 = (v22 + 32) & ~v22;
    v24 = swift_allocObject(v18, v23 + 3 * v21, v22 | 7);
    *(_OWORD *)(v24 + 16) = xmmword_100524440;
    v25 = v24 + v23;
    v26 = (_QWORD *)(v24 + v23 + *(int *)(v19 + 48));
    v27 = enum case for DIPError.PropertyKey.conversationID(_:);
    v28 = type metadata accessor for DIPError.PropertyKey(0);
    v29 = *(void (**)(void))(*(_QWORD *)(v28 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v29)(v25, v27, v28);
    v30 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v31 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v26[3] = &type metadata for String;
    *v26 = v30;
    v26[1] = v31;
    v32 = (_QWORD *)(v25 + v21 + *(int *)(v19 + 48));
    v29();
    swift_errorRetain(v81);
    swift_bridgeObjectRetain(v31);
    JWSSignedJSON.payload.getter(v69);
    v33 = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v0 + 448) = v33;
    *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 608);
    v34 = *(_OWORD *)(v0 + 528);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 384) = v34;
    v35 = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v0 + 416) = v35;
    v36 = *(_OWORD *)(v0 + 496);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 480);
    *(_OWORD *)(v0 + 352) = v36;
    v37 = *(_QWORD *)(v0 + 352);
    v38 = *(_QWORD *)(v0 + 360);
    swift_bridgeObjectRetain(v38);
    sub_1002554EC((_QWORD *)(v0 + 336));
    v32[3] = &type metadata for String;
    *v32 = v37;
    v32[1] = v38;
    v39 = (_QWORD *)(v25 + 2 * v21 + *(int *)(v19 + 48));
    v29();
    v39[3] = &type metadata for String;
    *v39 = 0xD000000000000014;
    v39[1] = 0x8000000100557E70;
    v40 = sub_10011D314(v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v70 + 104))(v71, v80, v72);
    swift_allocError(v78, v77, 0, 0);
    v41 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x8000000100557E90, v81, v71, 0, v40, 0xD000000000000054, 0x8000000100557710, 0xD000000000000024, 0x8000000100557EC0, 406);
    swift_willThrow(v41);
    swift_errorRelease(v81);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v75, v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v71);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v43 = *(_QWORD *)(v0 + 1128);
    swift_release(v6);
    JWSSignedJSON.payload.getter(v43);
    v44 = *(_OWORD *)(v0 + 880);
    *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 864);
    *(_OWORD *)(v0 + 736) = v44;
    *(_OWORD *)(v0 + 752) = *(_OWORD *)(v0 + 896);
    v45 = *(_OWORD *)(v0 + 816);
    *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 800);
    *(_OWORD *)(v0 + 672) = v45;
    v46 = *(_OWORD *)(v0 + 848);
    *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 832);
    *(_OWORD *)(v0 + 704) = v46;
    v47 = *(_OWORD *)(v0 + 784);
    *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 768);
    *(_OWORD *)(v0 + 640) = v47;
    v79 = *(_QWORD *)(v0 + 624);
    v48 = *(_QWORD *)(v0 + 632);
    *(_QWORD *)(v0 + 1176) = v48;
    v49 = *(_QWORD *)(v0 + 640);
    v50 = *(_QWORD *)(v0 + 648);
    *(_QWORD *)(v0 + 1184) = v50;
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v50);
    sub_1002554EC((_QWORD *)(v0 + 624));
    JWSSignedJSON.payload.getter(v7);
    v51 = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 128) = v51;
    v52 = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 160) = v52;
    v53 = *(_OWORD *)(v0 + 224);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v0 + 64) = v53;
    v54 = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v0 + 96) = v54;
    v55 = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v0 + 32) = v55;
    v56 = *(_QWORD *)(v0 + 16);
    v58 = *(_QWORD *)(v0 + 40);
    v57 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 1200) = v58;
    v60 = *(_QWORD *)(v0 + 56);
    v59 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 1208) = v60;
    v62 = *(_QWORD *)(v0 + 72);
    v61 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 1216) = v62;
    v63 = *(_QWORD *)(v0 + 104);
    *(_QWORD *)(v0 + 1232) = v63;
    *(_QWORD *)(v0 + 912) = v56;
    v64 = *(_OWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 1192) = v64;
    *(_OWORD *)(v0 + 920) = v64;
    v65 = v64;
    *(_QWORD *)(v0 + 936) = v58;
    *(_QWORD *)(v0 + 944) = v57;
    *(_QWORD *)(v0 + 952) = v60;
    *(_QWORD *)(v0 + 960) = v59;
    *(_QWORD *)(v0 + 968) = v62;
    *(_QWORD *)(v0 + 976) = v61;
    v66 = *(_OWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 1224) = v66;
    *(_OWORD *)(v0 + 984) = v66;
    v67 = v66;
    *(_QWORD *)(v0 + 1000) = v63;
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v67);
    sub_10025625C((_QWORD *)(v0 + 16));
    v68 = (_QWORD *)swift_task_alloc(dword_100639B54);
    *(_QWORD *)(v0 + 1240) = v68;
    *v68 = v0;
    v68[1] = sub_100247E44;
    return sub_100253650(v79, v48, v49, v50, v0 + 912);
  }
}

uint64_t sub_100247E44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1240);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1232);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 1224);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 1216);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 1208);
  v7 = *(_QWORD *)(*(_QWORD *)v1 + 1200);
  v8 = *(_QWORD *)(*(_QWORD *)v1 + 1192);
  v9 = *(_QWORD *)(*(_QWORD *)v1 + 1184);
  v10 = *(_QWORD *)(*(_QWORD *)v1 + 1176);
  *(_QWORD *)(*(_QWORD *)v1 + 1248) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100247F18, 0, 0);
}

uint64_t sub_100247F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  void (*v60)(uint64_t, uint64_t, _QWORD);
  uint64_t v61;

  v1 = *(_QWORD *)(v0 + 1248);
  if (v1)
  {
    v56 = *(_QWORD *)(v0 + 1168);
    v2 = *(_QWORD *)(v0 + 1080);
    v52 = *(_QWORD *)(v0 + 1040);
    v3 = enum case for DIPError.Code.internalError(_:);
    v60 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1072) + 104);
    v59 = enum case for DIPError.Code.internalError(_:);
    v60(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 1064));
    swift_errorRetain(v1);
    v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v5 = type metadata accessor for DIPError(0);
    v54 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v55 = v5;
    v6 = swift_allocError(v5, v54, 0, 0);
    v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v4, 0xD000000000000054, 0x8000000100557710, 0xD000000000000024, 0x8000000100557EC0, 397);
    swift_willThrow(v7);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v52);
    v57 = *(_QWORD *)(v0 + 1152);
    v8 = *(_QWORD *)(v0 + 1144);
    v9 = *(_QWORD *)(v0 + 1080);
    v60(v9, v3, *(_QWORD *)(v0 + 1064));
    swift_errorRetain(v6);
    v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v61 = swift_allocError(v5, v54, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000048, 0x8000000100557EF0, v6, v9, 0, v10, 0xD000000000000054, 0x8000000100557710, 0xD000000000000024, 0x8000000100557EC0, 403);
    swift_willThrow(v11);
    swift_errorRelease(v6);
    sub_100007F8C(v8, v57);
    v45 = *(_QWORD *)(v0 + 1128);
    v50 = *(_QWORD *)(v0 + 1104);
    v51 = *(_QWORD *)(v0 + 1096);
    v53 = *(_QWORD *)(v0 + 1112);
    v58 = *(_QWORD *)(v0 + 1088);
    v47 = *(_QWORD *)(v0 + 1072);
    v48 = *(_QWORD *)(v0 + 1080);
    v49 = *(_QWORD *)(v0 + 1064);
    v12 = *(_QWORD *)(v0 + 1056);
    v13 = sub_100004828((uint64_t *)&unk_1006325A0);
    v14 = sub_100004828((uint64_t *)&unk_100633440);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(_QWORD *)(v15 + 72);
    v17 = *(unsigned __int8 *)(v15 + 80);
    v18 = (v17 + 32) & ~v17;
    v46 = 2 * v16;
    v19 = swift_allocObject(v13, v18 + 3 * v16, v17 | 7);
    *(_OWORD *)(v19 + 16) = xmmword_100524440;
    v20 = v19 + v18;
    v21 = (_QWORD *)(v20 + *(int *)(v14 + 48));
    v22 = enum case for DIPError.PropertyKey.conversationID(_:);
    v23 = type metadata accessor for DIPError.PropertyKey(0);
    v24 = *(void (**)(void))(*(_QWORD *)(v23 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v24)(v20, v22, v23);
    v25 = *(_QWORD *)(v12 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v26 = *(_QWORD *)(v12 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v21[3] = &type metadata for String;
    *v21 = v25;
    v21[1] = v26;
    v27 = (_QWORD *)(v20 + v16 + *(int *)(v14 + 48));
    v24();
    swift_errorRetain(v61);
    swift_bridgeObjectRetain(v26);
    JWSSignedJSON.payload.getter(v45);
    v28 = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v0 + 448) = v28;
    *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 608);
    v29 = *(_OWORD *)(v0 + 528);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 384) = v29;
    v30 = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v0 + 416) = v30;
    v31 = *(_OWORD *)(v0 + 496);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 480);
    *(_OWORD *)(v0 + 352) = v31;
    v33 = *(_QWORD *)(v0 + 352);
    v32 = *(_QWORD *)(v0 + 360);
    swift_bridgeObjectRetain(v32);
    sub_1002554EC((_QWORD *)(v0 + 336));
    v27[3] = &type metadata for String;
    *v27 = v33;
    v27[1] = v32;
    v34 = (_QWORD *)(v20 + v46 + *(int *)(v14 + 48));
    v24();
    v34[3] = &type metadata for String;
    *v34 = 0xD000000000000014;
    v34[1] = 0x8000000100557E70;
    v35 = sub_10011D314(v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v47 + 104))(v48, v59, v49);
    swift_allocError(v55, v54, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x8000000100557E90, v61, v48, 0, v35, 0xD000000000000054, 0x8000000100557710, 0xD000000000000024, 0x8000000100557EC0, 406);
    swift_willThrow(v36);
    swift_errorRelease(v61);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v53, v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v58);
    swift_task_dealloc(v48);
  }
  else
  {
    v37 = *(_QWORD *)(v0 + 1152);
    v38 = *(_QWORD *)(v0 + 1144);
    v39 = *(_QWORD *)(v0 + 1112);
    v40 = *(_QWORD *)(v0 + 1104);
    v41 = *(_QWORD *)(v0 + 1096);
    v42 = *(_QWORD *)(v0 + 1088);
    v43 = *(_QWORD *)(v0 + 1080);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_100007F8C(v38, v37);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    swift_task_dealloc(v39);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100248468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1120));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1008));
  v36 = enum case for DIPError.Code.internalError(_:);
  v1 = *(_QWORD *)(v0 + 1160);
  v32 = v1;
  v30 = *(_QWORD *)(v0 + 1128);
  v39 = *(_QWORD *)(v0 + 1112);
  v37 = *(_QWORD *)(v0 + 1104);
  v38 = *(_QWORD *)(v0 + 1096);
  v40 = *(_QWORD *)(v0 + 1088);
  v33 = *(_QWORD *)(v0 + 1072);
  v34 = *(_QWORD *)(v0 + 1080);
  v35 = *(_QWORD *)(v0 + 1064);
  v29 = *(_QWORD *)(v0 + 1056);
  v2 = sub_100004828((uint64_t *)&unk_1006325A0);
  v3 = sub_100004828((uint64_t *)&unk_100633440);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v31 = 2 * v5;
  v8 = swift_allocObject(v2, v7 + 3 * v5, v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_100524440;
  v9 = v8 + v7;
  v10 = (_QWORD *)(v8 + v7 + *(int *)(v3 + 48));
  v11 = enum case for DIPError.PropertyKey.conversationID(_:);
  v12 = type metadata accessor for DIPError.PropertyKey(0);
  v13 = *(void (**)(void))(*(_QWORD *)(v12 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(v9, v11, v12);
  v14 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v15 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v10[3] = &type metadata for String;
  *v10 = v14;
  v10[1] = v15;
  v16 = (_QWORD *)(v9 + v5 + *(int *)(v3 + 48));
  v13();
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v15);
  JWSSignedJSON.payload.getter(v30);
  v17 = *(_OWORD *)(v0 + 592);
  *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v0 + 448) = v17;
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 608);
  v18 = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 512);
  *(_OWORD *)(v0 + 384) = v18;
  v19 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 416) = v19;
  v20 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v0 + 352) = v20;
  v22 = *(_QWORD *)(v0 + 352);
  v21 = *(_QWORD *)(v0 + 360);
  swift_bridgeObjectRetain(v21);
  sub_1002554EC((_QWORD *)(v0 + 336));
  v16[3] = &type metadata for String;
  *v16 = v22;
  v16[1] = v21;
  v23 = (_QWORD *)(v9 + v31 + *(int *)(v3 + 48));
  v13();
  v23[3] = &type metadata for String;
  *v23 = 0xD000000000000014;
  v23[1] = 0x8000000100557E70;
  v24 = sub_10011D314(v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 104))(v34, v36, v35);
  v25 = type metadata accessor for DIPError(0);
  v26 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v25, v26, 0, 0);
  v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x8000000100557E90, v32, v34, 0, v24, 0xD000000000000054, 0x8000000100557710, 0xD000000000000024, 0x8000000100557EC0, 406);
  swift_willThrow(v27);
  swift_errorRelease(v32);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002487CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[40] = a1;
  v2[41] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[42] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[43] = v4;
  v2[44] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPSignpost.Config(0);
  v2[45] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPSignpost(0);
  v2[46] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[47] = v7;
  v2[48] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100248874, 0, 0);
}

uint64_t sub_100248874()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[45];
  v2 = v0[40];
  static DaemonSignposts.identityPendingActionRequest.getter();
  DIPSignpost.init(_:)(v1);
  v3 = sub_100004828(&qword_100637388);
  v0[49] = v3;
  v0[39] = v3;
  v4 = sub_100022234(v0 + 36);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v2, v3);
  v5 = (_QWORD *)swift_task_alloc(dword_100639B4C);
  v0[50] = v5;
  *v5 = v0;
  v5[1] = sub_100248948;
  return sub_100250C38((uint64_t)(v0 + 36), 0xD000000000000018, 0x8000000100557DB0, 0, 0);
}

uint64_t sub_100248948(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)();

  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 400);
  v7[51] = a3;
  v7[52] = v3;
  swift_task_dealloc(v8);
  if (v3)
  {
    v9 = sub_100248E50;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v7 + 36);
    sub_100007F8C(a1, a2);
    v9 = sub_1002489D0;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_1002489D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = objc_opt_self(NSHTTPURLResponse);
  if (swift_dynamicCastObjCClass(v1, v2))
  {
    v3 = *(void **)(v0 + 408);
    v5 = *(_QWORD *)(v0 + 376);
    v4 = *(_QWORD *)(v0 + 384);
    v7 = *(_QWORD *)(v0 + 360);
    v6 = *(_QWORD *)(v0 + 368);
    v8 = *(_QWORD *)(v0 + 352);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc(v4);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
  }
  else
  {
    v9 = *(void **)(v0 + 408);
    v10 = *(_QWORD *)(v0 + 352);
    v48 = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(uint64_t))(*(_QWORD *)(v0 + 344) + 104))(v10);
    v11 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v47 = type metadata accessor for DIPError(0);
    v46 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v49 = swift_allocError(v47, v46, 0, 0);
    v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000044, 0x8000000100557E20, 0, v10, 0, v11, 0xD000000000000054, 0x8000000100557710, 0xD000000000000028, 0x8000000100557DF0, 420);
    swift_willThrow(v12);

    v42 = *(_QWORD *)(v0 + 376);
    v43 = *(_QWORD *)(v0 + 368);
    v44 = *(_QWORD *)(v0 + 384);
    v45 = *(_QWORD *)(v0 + 360);
    v39 = *(_QWORD *)(v0 + 344);
    v40 = *(_QWORD *)(v0 + 352);
    v13 = *(_QWORD *)(v0 + 328);
    v41 = *(_QWORD *)(v0 + 336);
    v38 = *(_QWORD *)(v0 + 392);
    v14 = sub_100004828((uint64_t *)&unk_1006325A0);
    v15 = sub_100004828((uint64_t *)&unk_100633440);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(_QWORD *)(v16 + 72);
    v18 = *(unsigned __int8 *)(v16 + 80);
    v19 = (v18 + 32) & ~v18;
    v20 = swift_allocObject(v14, v19 + 3 * v17, v18 | 7);
    *(_OWORD *)(v20 + 16) = xmmword_100524440;
    v21 = (_QWORD *)(v20 + v19 + *(int *)(v15 + 48));
    v22 = enum case for DIPError.PropertyKey.conversationID(_:);
    v23 = type metadata accessor for DIPError.PropertyKey(0);
    v24 = *(void (**)(void))(*(_QWORD *)(v23 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v24)(v20 + v19, v22, v23);
    v25 = *(_QWORD *)(v13 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v26 = *(_QWORD *)(v13 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v21[3] = &type metadata for String;
    *v21 = v25;
    v21[1] = v26;
    v27 = (_QWORD *)(v20 + v19 + v17 + *(int *)(v15 + 48));
    v24();
    swift_errorRetain(v49);
    swift_bridgeObjectRetain(v26);
    JWSSignedJSON.payload.getter(v38);
    v28 = *(_OWORD *)(v0 + 168);
    v29 = *(_OWORD *)(v0 + 232);
    v30 = *(_OWORD *)(v0 + 264);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 128) = v30;
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 280);
    v31 = *(_OWORD *)(v0 + 200);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 184);
    *(_OWORD *)(v0 + 64) = v31;
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 216);
    *(_OWORD *)(v0 + 96) = v29;
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 152);
    *(_OWORD *)(v0 + 32) = v28;
    v33 = *(_QWORD *)(v0 + 32);
    v32 = *(_QWORD *)(v0 + 40);
    swift_bridgeObjectRetain(v32);
    sub_100255438((_QWORD *)(v0 + 16));
    v27[3] = &type metadata for String;
    *v27 = v33;
    v27[1] = v32;
    v34 = (_QWORD *)(v20 + v19 + 2 * v17 + *(int *)(v15 + 48));
    v24();
    v34[3] = &type metadata for String;
    *v34 = 0xD000000000000018;
    v34[1] = 0x8000000100557DB0;
    v35 = sub_10011D314(v20);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v39 + 104))(v40, v48, v41);
    swift_allocError(v47, v46, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100557DD0, v49, v40, 0, v35, 0xD000000000000054, 0x8000000100557710, 0xD000000000000028, 0x8000000100557DF0, 424);
    swift_willThrow(v36);
    swift_errorRelease(v49);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v44, v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v40);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100248E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 288));
  v33 = enum case for DIPError.Code.internalError(_:);
  v38 = *(_QWORD *)(v0 + 416);
  v29 = *(_QWORD *)(v0 + 392);
  v36 = *(_QWORD *)(v0 + 384);
  v34 = *(_QWORD *)(v0 + 376);
  v35 = *(_QWORD *)(v0 + 368);
  v37 = *(_QWORD *)(v0 + 360);
  v30 = *(_QWORD *)(v0 + 344);
  v31 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 328);
  v32 = *(_QWORD *)(v0 + 336);
  v2 = sub_100004828((uint64_t *)&unk_1006325A0);
  v3 = sub_100004828((uint64_t *)&unk_100633440);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v2, v7 + 3 * v5, v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_100524440;
  v9 = v8 + v7;
  v10 = (_QWORD *)(v8 + v7 + *(int *)(v3 + 48));
  v11 = enum case for DIPError.PropertyKey.conversationID(_:);
  v12 = type metadata accessor for DIPError.PropertyKey(0);
  v13 = *(void (**)(void))(*(_QWORD *)(v12 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(v9, v11, v12);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v10[3] = &type metadata for String;
  *v10 = v14;
  v10[1] = v15;
  v16 = (_QWORD *)(v9 + v5 + *(int *)(v3 + 48));
  v13();
  swift_errorRetain(v38);
  swift_bridgeObjectRetain(v15);
  JWSSignedJSON.payload.getter(v29);
  v17 = *(_OWORD *)(v0 + 168);
  v18 = *(_OWORD *)(v0 + 232);
  v19 = *(_OWORD *)(v0 + 264);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 128) = v19;
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 280);
  v20 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 64) = v20;
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 96) = v18;
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 32) = v17;
  v21 = *(_QWORD *)(v0 + 32);
  v22 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain(v22);
  sub_100255438((_QWORD *)(v0 + 16));
  v16[3] = &type metadata for String;
  *v16 = v21;
  v16[1] = v22;
  v23 = (_QWORD *)(v9 + 2 * v5 + *(int *)(v3 + 48));
  v13();
  v23[3] = &type metadata for String;
  *v23 = 0xD000000000000018;
  v23[1] = 0x8000000100557DB0;
  v24 = sub_10011D314(v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104))(v31, v33, v32);
  v25 = type metadata accessor for DIPError(0);
  v26 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v25, v26, 0, 0);
  v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100557DD0, v38, v31, 0, v24, 0xD000000000000054, 0x8000000100557710, 0xD000000000000028, 0x8000000100557DF0, 424);
  swift_willThrow(v27);
  swift_errorRelease(v38);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002491AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  v4 = type metadata accessor for ContinuousClock(0);
  v3[31] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[32] = v5;
  v3[33] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[34] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[35] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[36] = swift_task_alloc(v8);
  v3[37] = swift_task_alloc(v8);
  v9 = type metadata accessor for DIPError.Code(0);
  v3[38] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[39] = v10;
  v3[40] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  v3[41] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost(0);
  v3[42] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[43] = v13;
  v3[44] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002492B8, 0, 0);
}

uint64_t sub_1002492B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;

  v1 = v0[41];
  v2 = v0[29];
  static DaemonSignposts.identityLivenessConfigRequest.getter();
  DIPSignpost.init(_:)(v1);
  v3 = sub_1002556F4();
  v0[45] = v3;
  v0[21] = &type metadata for IdentityProofingLivenessConfigRequest;
  v4 = (_OWORD *)swift_allocObject(&unk_10060C3C8, 176, 7);
  v0[18] = v4;
  v5 = *(_OWORD *)(v2 + 16);
  v4[1] = *(_OWORD *)v2;
  v4[2] = v5;
  v6 = *(_OWORD *)(v2 + 80);
  v8 = *(_OWORD *)(v2 + 32);
  v7 = *(_OWORD *)(v2 + 48);
  v4[5] = *(_OWORD *)(v2 + 64);
  v4[6] = v6;
  v4[3] = v8;
  v4[4] = v7;
  v9 = *(_OWORD *)(v2 + 144);
  v11 = *(_OWORD *)(v2 + 96);
  v10 = *(_OWORD *)(v2 + 112);
  v4[9] = *(_OWORD *)(v2 + 128);
  v4[10] = v9;
  v4[7] = v11;
  v4[8] = v10;
  sub_100256194((_QWORD *)v2);
  v12 = (_QWORD *)swift_task_alloc(dword_100639B4C);
  v0[46] = v12;
  *v12 = v0;
  v12[1] = sub_1002493B0;
  return sub_100250C38((uint64_t)(v0 + 18), 0xD000000000000014, 0x8000000100557C60, v3, 0);
}

uint64_t sub_1002493B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 368);
  v6[47] = a1;
  v6[48] = a2;
  v6[49] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = sub_10024A7EC;
  }
  else
  {
    swift_bridgeObjectRelease(v6[45]);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 18);

    v8 = sub_100249444;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100249444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD *v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 376);
  v4 = type metadata accessor for JSONDecoder(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v6 = JSONDecoder.init()(v5);
  v7 = type metadata accessor for IdentityProofingLivenessConfigResponseV2(0);
  v8 = sub_100004790(&qword_100639C10, type metadata accessor for IdentityProofingLivenessConfigResponseV2, (uint64_t)&unk_10052B7F4);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v3, v1, v7, v8);
  if (v2)
  {
    v9 = v2;
    swift_release(v6);
    v10 = *(_QWORD *)(v0 + 376);
    v11 = *(_QWORD *)(v0 + 384);
    v12 = *(_QWORD *)(v0 + 320);
    v63 = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(uint64_t))(*(_QWORD *)(v0 + 312) + 104))(v12);
    swift_errorRetain(v9);
    v13 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v60 = type metadata accessor for DIPError(0);
    v59 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v50 = swift_allocError(v60, v59, 0, 0);
    v14 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004BLL, 0x8000000100557CE0, v9, v12, 0, v13, 0xD000000000000054, 0x8000000100557710, 0xD000000000000026, 0x8000000100557CB0, 455);
    swift_willThrow(v14);
    swift_errorRelease(v9);
    sub_100007F8C(v10, v11);
    v55 = *(_QWORD *)(v0 + 336);
    v56 = *(_QWORD *)(v0 + 352);
    v57 = *(_QWORD *)(v0 + 328);
    v51 = *(_QWORD *)(v0 + 312);
    v52 = *(_QWORD *)(v0 + 320);
    v53 = *(_QWORD *)(v0 + 304);
    v54 = *(_QWORD *)(v0 + 344);
    v58 = *(_QWORD *)(v0 + 296);
    v61 = *(_QWORD *)(v0 + 288);
    v62 = *(_QWORD *)(v0 + 264);
    v48 = *(_QWORD *)(v0 + 240);
    v49 = *(_OWORD **)(v0 + 232);
    v15 = sub_100004828((uint64_t *)&unk_1006325A0);
    v16 = sub_100004828((uint64_t *)&unk_100633440);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(_QWORD *)(v17 + 72);
    v19 = *(unsigned __int8 *)(v17 + 80);
    v20 = (v19 + 32) & ~v19;
    v21 = 2 * v18;
    v22 = swift_allocObject(v15, v20 + 3 * v18, v19 | 7);
    *(_OWORD *)(v22 + 16) = xmmword_100524440;
    v23 = v22 + v20;
    v24 = (_QWORD *)(v22 + v20 + *(int *)(v16 + 48));
    v25 = enum case for DIPError.PropertyKey.conversationID(_:);
    v26 = type metadata accessor for DIPError.PropertyKey(0);
    v27 = *(void (**)(void))(*(_QWORD *)(v26 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v27)(v23, v25, v26);
    v28 = *(_QWORD *)(v48 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v29 = *(_QWORD *)(v48 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v24[3] = &type metadata for String;
    *v24 = v28;
    v24[1] = v29;
    v30 = v23 + v18 + *(int *)(v16 + 48);
    v27();
    v31 = v49[1];
    *(_OWORD *)(v0 + 112) = *v49;
    *(_OWORD *)(v0 + 128) = v31;
    v32 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 176) = v32;
    *(_QWORD *)(v30 + 24) = &type metadata for String;
    *(_OWORD *)v30 = v32;
    v33 = (_QWORD *)(v23 + v21 + *(int *)(v16 + 48));
    v27();
    v33[3] = &type metadata for String;
    *v33 = 0xD000000000000014;
    v33[1] = 0x8000000100557C60;
    swift_errorRetain(v50);
    swift_bridgeObjectRetain(v29);
    sub_1000DB7AC(v0 + 176);
    v34 = sub_10011D314(v22);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v51 + 104))(v52, v63, v53);
    swift_allocError(v60, v59, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x8000000100557C80, v50, v52, 0, v34, 0xD000000000000054, 0x8000000100557710, 0xD000000000000026, 0x8000000100557CB0, 458);
    swift_willThrow(v35);
    swift_errorRelease(v50);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v56, v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v52);
    swift_task_dealloc(v58);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v38 = *(_OWORD **)(v0 + 224);
    v37 = *(uint64_t **)(v0 + 232);
    swift_release(v6);
    v40 = *v37;
    v39 = v37[1];
    v41 = v37[2];
    v42 = v37[3];
    v43 = v38[5];
    v45 = v38[2];
    v44 = v38[3];
    *(_OWORD *)(v0 + 80) = v38[4];
    *(_OWORD *)(v0 + 96) = v43;
    *(_OWORD *)(v0 + 48) = v45;
    *(_OWORD *)(v0 + 64) = v44;
    v46 = v38[1];
    *(_OWORD *)(v0 + 16) = *v38;
    *(_OWORD *)(v0 + 32) = v46;
    sub_10023FE18((_QWORD *)(v0 + 16));
    v47 = (_QWORD *)swift_task_alloc(dword_100639B54);
    *(_QWORD *)(v0 + 400) = v47;
    *v47 = v0;
    v47[1] = sub_100249950;
    return sub_100253650(v40, v39, v41, v42, v0 + 16);
  }
}

uint64_t sub_100249950(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(*(_QWORD *)v1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  *(_QWORD *)(*(_QWORD *)v1 + 408) = a1;
  swift_task_dealloc(v3);
  sub_10023FE8C(v2);
  return swift_task_switch(sub_1002499B8, 0, 0);
}

uint64_t sub_1002499B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  id v34;
  Swift::String v35;
  double v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83[3];
  Swift::Double_optional v84;

  v1 = *(_QWORD *)(v0 + 408);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 320);
    v78 = *(_QWORD *)(v0 + 224);
    v3 = enum case for DIPError.Code.internalError(_:);
    v76 = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 304));
    swift_errorRetain(v1);
    v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v5 = type metadata accessor for DIPError(0);
    v72 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v73 = v5;
    v6 = swift_allocError(v5, v72, 0, 0);
    v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v4, 0xD000000000000054, 0x8000000100557710, 0xD000000000000026, 0x8000000100557CB0, 444);
    swift_willThrow(v7);
    swift_errorRelease(v1);
    sub_100035DAC(v78, type metadata accessor for IdentityProofingLivenessConfigResponseV2);
    v8 = *(_QWORD *)(v0 + 376);
    v79 = *(_QWORD *)(v0 + 384);
    v9 = *(_QWORD *)(v0 + 320);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 312) + 104))(v9, v3, *(_QWORD *)(v0 + 304));
    swift_errorRetain(v6);
    v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v65 = swift_allocError(v5, v72, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004BLL, 0x8000000100557CE0, v6, v9, 0, v10, 0xD000000000000054, 0x8000000100557710, 0xD000000000000026, 0x8000000100557CB0, 455);
    swift_willThrow(v11);
    swift_errorRelease(v6);
    sub_100007F8C(v8, v79);
    v70 = *(_QWORD *)(v0 + 336);
    v71 = *(_QWORD *)(v0 + 352);
    v67 = *(_QWORD *)(v0 + 320);
    v66 = *(_QWORD *)(v0 + 312);
    v68 = *(_QWORD *)(v0 + 304);
    v69 = *(_QWORD *)(v0 + 344);
    v74 = *(_QWORD *)(v0 + 328);
    v75 = *(_QWORD *)(v0 + 296);
    v77 = *(_QWORD *)(v0 + 288);
    v80 = *(_QWORD *)(v0 + 264);
    v63 = *(_QWORD *)(v0 + 240);
    v64 = *(_OWORD **)(v0 + 232);
    v12 = sub_100004828((uint64_t *)&unk_1006325A0);
    v13 = sub_100004828((uint64_t *)&unk_100633440);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(_QWORD *)(v14 + 72);
    v16 = *(unsigned __int8 *)(v14 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = 2 * v15;
    v19 = swift_allocObject(v12, v17 + 3 * v15, v16 | 7);
    *(_OWORD *)(v19 + 16) = xmmword_100524440;
    v20 = v19 + v17;
    v21 = (_QWORD *)(v20 + *(int *)(v13 + 48));
    v22 = enum case for DIPError.PropertyKey.conversationID(_:);
    v23 = type metadata accessor for DIPError.PropertyKey(0);
    v24 = *(void (**)(void))(*(_QWORD *)(v23 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v24)(v20, v22, v23);
    v25 = *(_QWORD *)(v63 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v26 = *(_QWORD *)(v63 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v21[3] = &type metadata for String;
    *v21 = v25;
    v21[1] = v26;
    v27 = v20 + v15 + *(int *)(v13 + 48);
    v24();
    v28 = v64[1];
    *(_OWORD *)(v0 + 112) = *v64;
    *(_OWORD *)(v0 + 128) = v28;
    v29 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 176) = v29;
    *(_QWORD *)(v27 + 24) = &type metadata for String;
    *(_OWORD *)v27 = v29;
    v30 = (_QWORD *)(v20 + v18 + *(int *)(v13 + 48));
    v24();
    v30[3] = &type metadata for String;
    *v30 = 0xD000000000000014;
    v30[1] = 0x8000000100557C60;
    swift_errorRetain(v65);
    swift_bridgeObjectRetain(v26);
    sub_1000DB7AC(v0 + 176);
    v31 = sub_10011D314(v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v66 + 104))(v67, v76, v68);
    swift_allocError(v73, v72, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x8000000100557C80, v65, v67, 0, v31, 0xD000000000000054, 0x8000000100557710, 0xD000000000000026, 0x8000000100557CB0, 458);
    swift_willThrow(v32);
    swift_errorRelease(v65);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v71, v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v74);
    swift_task_dealloc(v67);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v80);
    v33 = *(uint64_t (**)(void))(v0 + 8);
    return v33();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v34 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v35._countAndFlagsBits = 0xD000000000000021;
  v35._object = (void *)0x8000000100557D30;
  v84 = NSUserDefaults.internalDouble(forKey:)(v35);
  v36 = *(double *)&v84.is_nil;
  v38 = v37;

  if ((v38 & 1) != 0)
  {
    v51 = *(_QWORD *)(v0 + 376);
    v52 = *(_QWORD *)(v0 + 384);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
    sub_100007F8C(v51, v52);
    v53 = *(_QWORD *)(v0 + 320);
    v54 = *(_QWORD *)(v0 + 328);
    v56 = *(_QWORD *)(v0 + 288);
    v55 = *(_QWORD *)(v0 + 296);
    v57 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v54);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    v33 = *(uint64_t (**)(void))(v0 + 8);
    return v33();
  }
  *(double *)(v0 + 416) = v36;
  v40 = defaultLogger()(v39);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.debug.getter(v41);
  v43 = os_log_type_enabled(v41, v42);
  v44 = *(_QWORD *)(v0 + 296);
  v46 = *(_QWORD *)(v0 + 272);
  v45 = *(_QWORD *)(v0 + 280);
  if (v43)
  {
    v81 = *(_QWORD *)(v0 + 272);
    v47 = swift_slowAlloc(22, -1);
    v48 = swift_slowAlloc(32, -1);
    v83[0] = v48;
    *(_DWORD *)v47 = 136315394;
    *(_QWORD *)(v0 + 208) = sub_1000E3AC8(0xD000000000000026, 0x8000000100557CB0, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v47 + 4);
    *(_WORD *)(v47 + 12) = 2048;
    *(double *)(v0 + 216) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v47 + 14);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s force delay %fs - start", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);

    v49 = *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8);
    v50 = v49(v44, v81);
  }
  else
  {

    v49 = *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8);
    v50 = v49(v44, v46);
  }
  *(_QWORD *)(v0 + 424) = v49;
  v59 = static Duration.seconds(_:)(v50, v36);
  v61 = v60;
  ContinuousClock.init()(v59);
  v82 = (char *)&dword_100635728 + dword_100635728;
  v62 = (_QWORD *)swift_task_alloc(unk_10063572C);
  *(_QWORD *)(v0 + 432) = v62;
  *v62 = v0;
  v62[1] = sub_10024A130;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))v82)(v59, v61, 0, 0, 1);
}

uint64_t sub_10024A130()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 432);
  *(_QWORD *)(*(_QWORD *)v1 + 440) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[32] + 8))(v2[33], v2[31]);
  if (v0)
    v4 = sub_10024A1A4;
  else
    v4 = sub_10024A5B4;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10024A1A4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;

  sub_100035DAC(*(_QWORD *)(v0 + 224), type metadata accessor for IdentityProofingLivenessConfigResponseV2);
  v1 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 320);
  v44 = enum case for DIPError.Code.internalError(_:);
  (*(void (**)(uint64_t))(*(_QWORD *)(v0 + 312) + 104))(v4);
  swift_errorRetain(v1);
  v5 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v41 = type metadata accessor for DIPError(0);
  v40 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v31 = swift_allocError(v41, v40, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004BLL, 0x8000000100557CE0, v1, v4, 0, v5, 0xD000000000000054, 0x8000000100557710, 0xD000000000000026, 0x8000000100557CB0, 455);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  sub_100007F8C(v3, v2);
  v36 = *(_QWORD *)(v0 + 336);
  v37 = *(_QWORD *)(v0 + 352);
  v38 = *(_QWORD *)(v0 + 328);
  v32 = *(_QWORD *)(v0 + 312);
  v33 = *(_QWORD *)(v0 + 320);
  v34 = *(_QWORD *)(v0 + 304);
  v35 = *(_QWORD *)(v0 + 344);
  v39 = *(_QWORD *)(v0 + 296);
  v42 = *(_QWORD *)(v0 + 288);
  v43 = *(_QWORD *)(v0 + 264);
  v29 = *(_QWORD *)(v0 + 240);
  v30 = *(_OWORD **)(v0 + 232);
  v7 = sub_100004828((uint64_t *)&unk_1006325A0);
  v8 = sub_100004828((uint64_t *)&unk_100633440);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = 2 * v10;
  v14 = swift_allocObject(v7, v12 + 3 * v10, v11 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_100524440;
  v15 = v14 + v12;
  v16 = (_QWORD *)(v14 + v12 + *(int *)(v8 + 48));
  v17 = enum case for DIPError.PropertyKey.conversationID(_:);
  v18 = type metadata accessor for DIPError.PropertyKey(0);
  v19 = *(void (**)(void))(*(_QWORD *)(v18 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v15, v17, v18);
  v20 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v21 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v16[3] = &type metadata for String;
  *v16 = v20;
  v16[1] = v21;
  v22 = v15 + v10 + *(int *)(v8 + 48);
  v19();
  v23 = v30[1];
  *(_OWORD *)(v0 + 112) = *v30;
  *(_OWORD *)(v0 + 128) = v23;
  v24 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 176) = v24;
  *(_QWORD *)(v22 + 24) = &type metadata for String;
  *(_OWORD *)v22 = v24;
  v25 = (_QWORD *)(v15 + v13 + *(int *)(v8 + 48));
  v19();
  v25[3] = &type metadata for String;
  *v25 = 0xD000000000000014;
  v25[1] = 0x8000000100557C60;
  swift_errorRetain(v31);
  swift_bridgeObjectRetain(v21);
  sub_1000DB7AC(v0 + 176);
  v26 = sub_10011D314(v14);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v33, v44, v34);
  swift_allocError(v41, v40, 0, 0);
  v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x8000000100557C80, v31, v33, 0, v26, 0xD000000000000054, 0x8000000100557710, 0xD000000000000026, 0x8000000100557CB0, 458);
  swift_willThrow(v27);
  swift_errorRelease(v31);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v33);
  swift_task_dealloc(v39);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10024A5B4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;

  v2 = v1;
  v3 = defaultLogger()(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v1[52];
    v8 = v1[47];
    v7 = v1[48];
    v29 = v1[44];
    v30 = (void (*)(uint64_t, uint64_t))v1[53];
    v27 = v1[43];
    v28 = v1[42];
    v25 = v1[34];
    v26 = v1[36];
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v31 = v10;
    *(_DWORD *)v9 = 136315394;
    v1[24] = sub_1000E3AC8(0xD000000000000026, 0x8000000100557CB0, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 25, v9 + 4);
    *(_WORD *)(v9 + 12) = 2048;
    v1[25] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 25, v1 + 26, v9 + 14);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s force delay %fs - end", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
    sub_100007F8C(v8, v7);

    v30(v26, v25);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  }
  else
  {
    v11 = (void (*)(uint64_t, uint64_t))v1[53];
    v12 = v1[47];
    v13 = v1[48];
    v15 = v1[43];
    v14 = v1[44];
    v16 = v2[42];
    v17 = v2[36];
    v18 = v2[34];
    sub_100007F8C(v12, v13);

    v11(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  v20 = v2[40];
  v19 = v2[41];
  v22 = v2[36];
  v21 = v2[37];
  v23 = v2[33];
  swift_task_dealloc(v2[44]);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return ((uint64_t (*)(void))v2[1])();
}

uint64_t sub_10024A7EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 360));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 144));
  v30 = enum case for DIPError.Code.internalError(_:);
  v31 = *(_QWORD *)(v0 + 344);
  v32 = *(_QWORD *)(v0 + 336);
  v33 = *(_QWORD *)(v0 + 352);
  v34 = *(_QWORD *)(v0 + 328);
  v26 = *(_QWORD *)(v0 + 392);
  v27 = *(_QWORD *)(v0 + 312);
  v28 = *(_QWORD *)(v0 + 320);
  v29 = *(_QWORD *)(v0 + 304);
  v35 = *(_QWORD *)(v0 + 296);
  v36 = *(_QWORD *)(v0 + 288);
  v37 = *(_QWORD *)(v0 + 264);
  v24 = *(_QWORD *)(v0 + 240);
  v25 = *(_OWORD **)(v0 + 232);
  v1 = sub_100004828((uint64_t *)&unk_1006325A0);
  v2 = sub_100004828((uint64_t *)&unk_100633440);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100524440;
  v8 = v7 + v6;
  v9 = (_QWORD *)(v7 + v6 + *(int *)(v2 + 48));
  v10 = enum case for DIPError.PropertyKey.conversationID(_:);
  v11 = type metadata accessor for DIPError.PropertyKey(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v8, v10, v11);
  v13 = *(_QWORD *)(v24 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v14 = *(_QWORD *)(v24 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v9[3] = &type metadata for String;
  *v9 = v13;
  v9[1] = v14;
  v15 = v8 + v4 + *(int *)(v2 + 48);
  v12();
  v16 = v25[1];
  *(_OWORD *)(v0 + 112) = *v25;
  *(_OWORD *)(v0 + 128) = v16;
  v17 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 176) = v17;
  *(_QWORD *)(v15 + 24) = &type metadata for String;
  *(_OWORD *)v15 = v17;
  v18 = (_QWORD *)(v8 + 2 * v4 + *(int *)(v2 + 48));
  v12();
  v18[3] = &type metadata for String;
  *v18 = 0xD000000000000014;
  v18[1] = 0x8000000100557C60;
  swift_errorRetain(v26);
  swift_bridgeObjectRetain(v14);
  sub_1000DB7AC(v0 + 176);
  v19 = sub_10011D314(v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104))(v28, v30, v29);
  v20 = type metadata accessor for DIPError(0);
  v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v20, v21, 0, 0);
  v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x8000000100557C80, v26, v28, 0, v19, 0xD000000000000054, 0x8000000100557710, 0xD000000000000026, 0x8000000100557CB0, 458);
  swift_willThrow(v22);
  swift_errorRelease(v26);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v33, v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v28);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10024AB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[95] = v4;
  v5[94] = a4;
  v5[93] = a3;
  v5[92] = a2;
  v5[91] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[96] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[97] = v7;
  v5[98] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v5[99] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[100] = v9;
  v5[101] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for IdentityProofingRequestV2(0);
  v5[102] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  v5[103] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost(0);
  v5[104] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[105] = v13;
  v5[106] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10024AC38, 0, 0);
}

uint64_t sub_10024AC38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[103];
  v2 = v0[92];
  static DaemonSignposts.identityProofingRequestV2.getter();
  DIPSignpost.init(_:)(v1);
  v3 = sub_100004828(&qword_1006384E0);
  v0[107] = v3;
  v0[89] = v3;
  v4 = sub_100022234(v0 + 86);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v2, v3);
  v5 = (_QWORD *)swift_task_alloc(dword_100639B4C);
  v0[108] = v5;
  *v5 = v0;
  v5[1] = sub_10024AD0C;
  return sub_100250C38((uint64_t)(v0 + 86), 0xD000000000000016, 0x8000000100557BB0, 0, 0);
}

uint64_t sub_10024AD0C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 864);
  v6[109] = a1;
  v6[110] = a2;
  v6[111] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = sub_10024BBB4;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 86);

    v8 = sub_10024AD98;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10024AD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 888);
  v2 = *(_QWORD *)(v0 + 880);
  v3 = *(_QWORD *)(v0 + 872);
  v4 = type metadata accessor for JSONDecoder(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v6 = JSONDecoder.init()(v5);
  v7 = sub_100004828(&qword_100638560);
  *(_QWORD *)(v0 + 896) = v7;
  v8 = sub_100099FFC(&qword_100639C08, &qword_100638560, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v3, v2, v7, v8);
  if (v1)
  {
    v9 = v1;
    v10 = *(_QWORD *)(v0 + 776);
    swift_release(v6);
    v74 = enum case for DIPError.Code.internalError(_:);
    v11 = *(void (**)(uint64_t))(v10 + 104);
    v12 = *(_QWORD *)(v0 + 880);
    v13 = *(_QWORD *)(v0 + 872);
    v14 = *(_QWORD *)(v0 + 784);
    v11(v14);
    swift_errorRetain(v9);
    v15 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v72 = type metadata accessor for DIPError(0);
    v71 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v76 = swift_allocError(v72, v71, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000038, 0x8000000100557C20, v9, v14, 0, v15, 0xD000000000000054, 0x8000000100557710, 0xD000000000000023, 0x8000000100557BF0, 483);
    swift_willThrow(v16);
    swift_errorRelease(v9);
    sub_100007F8C(v13, v12);
    v63 = *(_QWORD *)(v0 + 856);
    v67 = *(_QWORD *)(v0 + 840);
    v68 = *(_QWORD *)(v0 + 832);
    v69 = *(_QWORD *)(v0 + 848);
    v70 = *(_QWORD *)(v0 + 824);
    v17 = *(_QWORD *)(v0 + 816);
    v73 = *(_QWORD *)(v0 + 808);
    v64 = *(_QWORD *)(v0 + 776);
    v65 = *(_QWORD *)(v0 + 784);
    v66 = *(_QWORD *)(v0 + 768);
    v61 = *(_QWORD *)(v0 + 760);
    v18 = sub_100004828((uint64_t *)&unk_1006325A0);
    v19 = sub_100004828((uint64_t *)&unk_100633440);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(_QWORD *)(v20 + 72);
    v22 = *(unsigned __int8 *)(v20 + 80);
    v23 = (v22 + 32) & ~v22;
    v62 = 2 * v21;
    v24 = swift_allocObject(v18, v23 + 3 * v21, v22 | 7);
    *(_OWORD *)(v24 + 16) = xmmword_100524440;
    v25 = v24 + v23;
    v26 = (_QWORD *)(v24 + v23 + *(int *)(v19 + 48));
    v27 = enum case for DIPError.PropertyKey.conversationID(_:);
    v28 = type metadata accessor for DIPError.PropertyKey(0);
    v29 = *(void (**)(void))(*(_QWORD *)(v28 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v29)(v25, v27, v28);
    v30 = *(_QWORD *)(v61 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v31 = *(_QWORD *)(v61 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v26[3] = &type metadata for String;
    *v26 = v30;
    v26[1] = v31;
    v32 = (_QWORD *)(v25 + v21 + *(int *)(v19 + 48));
    v29();
    swift_errorRetain(v76);
    swift_bridgeObjectRetain(v31);
    JWSSignedJSON.payload.getter(v63);
    v34 = *(_QWORD *)(v17 + 16);
    v33 = *(_QWORD *)(v17 + 24);
    swift_bridgeObjectRetain(v33);
    sub_100035DAC(v17, type metadata accessor for IdentityProofingRequestV2);
    v32[3] = &type metadata for String;
    *v32 = v34;
    v32[1] = v33;
    v35 = (_QWORD *)(v25 + v62 + *(int *)(v19 + 48));
    v29();
    v35[3] = &type metadata for String;
    *v35 = 0xD000000000000016;
    v35[1] = 0x8000000100557BB0;
    v36 = sub_10011D314(v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v64 + 104))(v65, v74, v66);
    swift_allocError(v72, v71, 0, 0);
    v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100557BD0, v76, v65, 0, v36, 0xD000000000000054, 0x8000000100557710, 0xD000000000000023, 0x8000000100557BF0, 486);
    swift_willThrow(v37);
    swift_errorRelease(v76);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v69, v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v17);
    swift_task_dealloc(v73);
    swift_task_dealloc(v65);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v39 = *(_QWORD *)(v0 + 856);
    v40 = *(uint64_t **)(v0 + 816);
    swift_release(v6);
    JWSSignedJSON.payload.getter(v39);
    v41 = v40[1];
    v75 = *v40;
    *(_QWORD *)(v0 + 904) = v41;
    v42 = v40[2];
    v43 = v40[3];
    *(_QWORD *)(v0 + 912) = v43;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v43);
    sub_100035DAC((uint64_t)v40, type metadata accessor for IdentityProofingRequestV2);
    JWSSignedJSON.payload.getter(v7);
    v44 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 320) = v44;
    v45 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 416) = v45;
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 144);
    v46 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 352) = v46;
    v47 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 384) = v47;
    v48 = *(_QWORD *)(v0 + 304);
    v49 = *(_QWORD *)(v0 + 312);
    *(_QWORD *)(v0 + 920) = v49;
    v50 = *(_QWORD *)(v0 + 320);
    v51 = *(_QWORD *)(v0 + 328);
    *(_QWORD *)(v0 + 928) = v51;
    v52 = *(_QWORD *)(v0 + 336);
    v53 = *(_QWORD *)(v0 + 344);
    *(_QWORD *)(v0 + 936) = v53;
    v54 = *(_QWORD *)(v0 + 352);
    v55 = *(_QWORD *)(v0 + 360);
    *(_QWORD *)(v0 + 944) = v55;
    v56 = *(_QWORD *)(v0 + 368);
    v57 = *(_QWORD *)(v0 + 376);
    *(_QWORD *)(v0 + 952) = v57;
    v59 = *(_QWORD *)(v0 + 384);
    v58 = *(_QWORD *)(v0 + 392);
    *(_QWORD *)(v0 + 960) = v58;
    *(_QWORD *)(v0 + 592) = v48;
    *(_QWORD *)(v0 + 600) = v49;
    *(_QWORD *)(v0 + 608) = v50;
    *(_QWORD *)(v0 + 616) = v51;
    *(_QWORD *)(v0 + 624) = v52;
    *(_QWORD *)(v0 + 632) = v53;
    *(_QWORD *)(v0 + 640) = v54;
    *(_QWORD *)(v0 + 648) = v55;
    *(_QWORD *)(v0 + 656) = v56;
    *(_QWORD *)(v0 + 664) = v57;
    *(_QWORD *)(v0 + 672) = v59;
    *(_QWORD *)(v0 + 680) = v58;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v57);
    sub_1001FB4E0((_QWORD *)(v0 + 304));
    v60 = (_QWORD *)swift_task_alloc(dword_100639B54);
    *(_QWORD *)(v0 + 968) = v60;
    *v60 = v0;
    v60[1] = sub_10024B3C0;
    return sub_100253650(v75, v41, v42, v43, v0 + 592);
  }
}

uint64_t sub_10024B3C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 968);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 960);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 952);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 944);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 936);
  v7 = *(_QWORD *)(*(_QWORD *)v1 + 928);
  v8 = *(_QWORD *)(*(_QWORD *)v1 + 920);
  v9 = *(_QWORD *)(*(_QWORD *)v1 + 912);
  v10 = *(_QWORD *)(*(_QWORD *)v1 + 904);
  *(_QWORD *)(*(_QWORD *)v1 + 976) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10024B494, 0, 0);
}

uint64_t sub_10024B494()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(void);
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  void (*v79)(uint64_t, uint64_t, _QWORD);
  uint64_t v80;
  uint64_t v81[3];

  v1 = *(_QWORD *)(v0 + 976);
  if (v1)
  {
    JWSSignedJSON.payload.getter(*(_QWORD *)(v0 + 896));
    v2 = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 560) = v2;
    *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 288);
    v3 = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 496) = v3;
    v4 = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 224);
    *(_OWORD *)(v0 + 528) = v4;
    v5 = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 160);
    *(_OWORD *)(v0 + 464) = v5;
    v6 = *(_QWORD *)(v0 + 544);
    v7 = *(_QWORD *)(v0 + 552);
    swift_bridgeObjectRetain(v7);
    v8 = sub_1001FB4E0((_QWORD *)(v0 + 448));
    if (v7)
    {
      defaultLogger()(v8);
      swift_bridgeObjectRetain(v7);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.debug.getter(v10);
      v12 = os_log_type_enabled(v10, v11);
      v13 = *(_QWORD *)(v0 + 808);
      v14 = *(_QWORD *)(v0 + 800);
      v15 = *(_QWORD *)(v0 + 792);
      if (v12)
      {
        v77 = *(_QWORD *)(v0 + 808);
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        v73 = v15;
        v17 = swift_slowAlloc(32, -1);
        v81[0] = v17;
        *(_DWORD *)v16 = 136315138;
        swift_bridgeObjectRetain(v7);
        *(_QWORD *)(v0 + 720) = sub_1000E3AC8(v6, v7, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 720, v0 + 728, v16 + 4);
        swift_bridgeObjectRelease_n(v7, 3);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "server runtime error : %s", v16, 0xCu);
        swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v16, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v77, v73);
      }
      else
      {
        swift_bridgeObjectRelease_n(v7, 2);

        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      }
    }
    v28 = *(_QWORD *)(v0 + 976);
    v29 = *(_QWORD *)(v0 + 784);
    v71 = *(_QWORD *)(v0 + 728);
    v74 = *(_QWORD *)(v0 + 896);
    v30 = enum case for DIPError.Code.internalError(_:);
    v79 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 776) + 104);
    v78 = enum case for DIPError.Code.internalError(_:);
    v79(v29, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 768));
    swift_errorRetain(v1);
    v31 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v70 = type metadata accessor for DIPError(0);
    v69 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v32 = swift_allocError(v70, v69, 0, 0);
    v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v28, v29, 0, v31, 0xD000000000000054, 0x8000000100557710, 0xD000000000000023, 0x8000000100557BF0, 478);
    swift_willThrow(v33);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v71);
    v75 = *(_QWORD *)(v0 + 880);
    v34 = *(_QWORD *)(v0 + 872);
    v35 = *(_QWORD *)(v0 + 784);
    v79(v35, v30, *(_QWORD *)(v0 + 768));
    swift_errorRetain(v32);
    v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v80 = swift_allocError(v70, v69, 0, 0);
    v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000038, 0x8000000100557C20, v32, v35, 0, v36, 0xD000000000000054, 0x8000000100557710, 0xD000000000000023, 0x8000000100557BF0, 483);
    swift_willThrow(v37);
    swift_errorRelease(v32);
    sub_100007F8C(v34, v75);
    v62 = *(_QWORD *)(v0 + 856);
    v66 = *(_QWORD *)(v0 + 840);
    v67 = *(_QWORD *)(v0 + 832);
    v68 = *(_QWORD *)(v0 + 848);
    v38 = *(_QWORD *)(v0 + 816);
    v72 = *(_QWORD *)(v0 + 824);
    v76 = *(_QWORD *)(v0 + 808);
    v63 = *(_QWORD *)(v0 + 776);
    v64 = *(_QWORD *)(v0 + 784);
    v65 = *(_QWORD *)(v0 + 768);
    v60 = *(_QWORD *)(v0 + 760);
    v39 = sub_100004828((uint64_t *)&unk_1006325A0);
    v40 = sub_100004828((uint64_t *)&unk_100633440);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(_QWORD *)(v41 + 72);
    v43 = *(unsigned __int8 *)(v41 + 80);
    v44 = (v43 + 32) & ~v43;
    v61 = 2 * v42;
    v45 = swift_allocObject(v39, v44 + 3 * v42, v43 | 7);
    *(_OWORD *)(v45 + 16) = xmmword_100524440;
    v46 = v45 + v44;
    v47 = (_QWORD *)(v45 + v44 + *(int *)(v40 + 48));
    v48 = enum case for DIPError.PropertyKey.conversationID(_:);
    v49 = type metadata accessor for DIPError.PropertyKey(0);
    v50 = *(void (**)(void))(*(_QWORD *)(v49 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v50)(v46, v48, v49);
    v51 = *(_QWORD *)(v60 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    v52 = *(_QWORD *)(v60 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v47[3] = &type metadata for String;
    *v47 = v51;
    v47[1] = v52;
    v53 = (_QWORD *)(v46 + v42 + *(int *)(v40 + 48));
    v50();
    swift_errorRetain(v80);
    swift_bridgeObjectRetain(v52);
    JWSSignedJSON.payload.getter(v62);
    v55 = *(_QWORD *)(v38 + 16);
    v54 = *(_QWORD *)(v38 + 24);
    swift_bridgeObjectRetain(v54);
    sub_100035DAC(v38, type metadata accessor for IdentityProofingRequestV2);
    v53[3] = &type metadata for String;
    *v53 = v55;
    v53[1] = v54;
    v56 = (_QWORD *)(v46 + v61 + *(int *)(v40 + 48));
    v50();
    v56[3] = &type metadata for String;
    *v56 = 0xD000000000000016;
    v56[1] = 0x8000000100557BB0;
    v57 = sub_10011D314(v45);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v63 + 104))(v64, v78, v65);
    swift_allocError(v70, v69, 0, 0);
    v58 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100557BD0, v80, v64, 0, v57, 0xD000000000000054, 0x8000000100557710, 0xD000000000000023, 0x8000000100557BF0, 486);
    swift_willThrow(v58);
    swift_errorRelease(v80);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v68, v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v72);
    swift_task_dealloc(v38);
    swift_task_dealloc(v76);
    swift_task_dealloc(v64);
    v27 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 880);
    v19 = *(_QWORD *)(v0 + 872);
    v20 = *(_QWORD *)(v0 + 848);
    v21 = *(_QWORD *)(v0 + 840);
    v22 = *(_QWORD *)(v0 + 832);
    v23 = *(_QWORD *)(v0 + 824);
    v24 = *(_QWORD *)(v0 + 816);
    v25 = *(_QWORD *)(v0 + 808);
    v26 = *(_QWORD *)(v0 + 784);
    DIPSignpost.end(workflowID:isBackground:)(*(Swift::String_optional *)(v0 + 744), (Swift::Bool_optional)2);
    sub_100007F8C(v19, v18);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    swift_task_dealloc(v20);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    v27 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v27();
}

uint64_t sub_10024BBB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 688));
  v31 = enum case for DIPError.Code.internalError(_:);
  v37 = *(_QWORD *)(v0 + 888);
  v27 = *(_QWORD *)(v0 + 856);
  v32 = *(_QWORD *)(v0 + 840);
  v33 = *(_QWORD *)(v0 + 832);
  v34 = *(_QWORD *)(v0 + 848);
  v1 = *(_QWORD *)(v0 + 816);
  v35 = *(_QWORD *)(v0 + 824);
  v36 = *(_QWORD *)(v0 + 808);
  v28 = *(_QWORD *)(v0 + 776);
  v29 = *(_QWORD *)(v0 + 784);
  v30 = *(_QWORD *)(v0 + 768);
  v25 = *(_QWORD *)(v0 + 760);
  v2 = sub_100004828((uint64_t *)&unk_1006325A0);
  v3 = sub_100004828((uint64_t *)&unk_100633440);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v26 = 2 * v5;
  v8 = swift_allocObject(v2, v7 + 3 * v5, v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_100524440;
  v9 = v8 + v7;
  v10 = (_QWORD *)(v8 + v7 + *(int *)(v3 + 48));
  v11 = enum case for DIPError.PropertyKey.conversationID(_:);
  v12 = type metadata accessor for DIPError.PropertyKey(0);
  v13 = *(void (**)(void))(*(_QWORD *)(v12 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(v9, v11, v12);
  v14 = *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v15 = *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v10[3] = &type metadata for String;
  *v10 = v14;
  v10[1] = v15;
  v16 = (_QWORD *)(v9 + v5 + *(int *)(v3 + 48));
  v13();
  swift_errorRetain(v37);
  swift_bridgeObjectRetain(v15);
  JWSSignedJSON.payload.getter(v27);
  v17 = *(_QWORD *)(v1 + 16);
  v18 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain(v18);
  sub_100035DAC(v1, type metadata accessor for IdentityProofingRequestV2);
  v16[3] = &type metadata for String;
  *v16 = v17;
  v16[1] = v18;
  v19 = (_QWORD *)(v9 + v26 + *(int *)(v3 + 48));
  v13();
  v19[3] = &type metadata for String;
  *v19 = 0xD000000000000016;
  v19[1] = 0x8000000100557BB0;
  v20 = sub_10011D314(v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v29, v31, v30);
  v21 = type metadata accessor for DIPError(0);
  v22 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v21, v22, 0, 0);
  v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100557BD0, v37, v29, 0, v20, 0xD000000000000054, 0x8000000100557710, 0xD000000000000023, 0x8000000100557BF0, 486);
  swift_willThrow(v23);
  swift_errorRelease(v37);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v1);
  swift_task_dealloc(v36);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10024BEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3[35] = a2;
  v3[36] = v2;
  v3[34] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[37] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[38] = v5;
  v3[39] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v3[40] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[41] = v7;
  v3[42] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v3[43] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[44] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[45] = swift_task_alloc(v10);
  v3[46] = swift_task_alloc(v10);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  v3[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost(0);
  v3[48] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[49] = v13;
  v3[50] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10024C004, 0, 0);
}

uint64_t sub_10024C004()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;

  v1 = *(_QWORD *)(v0 + 376);
  static DaemonSignposts.getRPEncryptionCertificateRequest.getter();
  DIPSignpost.init(_:)(v1);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3._countAndFlagsBits = 0xD000000000000028;
  v3._object = (void *)0x8000000100557AA0;
  LOBYTE(v1) = NSUserDefaults.internalBool(forKey:)(v3);

  if ((v1 & 1) != 0)
  {
    v5 = defaultLogger()(v4);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.info.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "Internal Settings returning hardcoded test encryption certificate", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 368);
    v11 = *(_QWORD *)(v0 + 344);
    v12 = *(_QWORD *)(v0 + 352);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    v13 = *(_QWORD *)(v0 + 400);
    v14 = *(_QWORD *)(v0 + 376);
    v16 = *(_QWORD *)(v0 + 360);
    v15 = *(_QWORD *)(v0 + 368);
    v17 = *(_QWORD *)(v0 + 336);
    v18 = *(_QWORD *)(v0 + 312);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 392) + 8))(v13, *(_QWORD *)(v0 + 384));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(_UNKNOWN **))(v0 + 8))(&off_100601270);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 328);
    v20 = *(_QWORD *)(v0 + 336);
    v22 = *(_QWORD *)(v0 + 320);
    v24 = *(_QWORD *)(v0 + 272);
    v23 = *(_QWORD *)(v0 + 280);
    swift_bridgeObjectRetain(v23);
    v26 = UUID.init()(v25);
    v27 = UUID.uuidString.getter(v26);
    v29 = v28;
    *(_QWORD *)(v0 + 408) = v27;
    *(_QWORD *)(v0 + 416) = v28;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    *(_QWORD *)(v0 + 256) = &type metadata for GetRPEncryptionCertificateRequest;
    v30 = (_QWORD *)swift_allocObject(&unk_10060C3A0, 80, 7);
    *(_QWORD *)(v0 + 232) = v30;
    v30[2] = 0;
    v30[3] = 0xE000000000000000;
    v30[4] = v27;
    v30[5] = v29;
    v30[6] = v24;
    v30[7] = v23;
    v30[8] = 0x61746E6567616DLL;
    v30[9] = 0xE700000000000000;
    v31 = dword_100639B4C;
    swift_bridgeObjectRetain(0xE000000000000000);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(0xE700000000000000);
    v32 = (_QWORD *)swift_task_alloc(v31);
    *(_QWORD *)(v0 + 424) = v32;
    *v32 = v0;
    v32[1] = sub_10024C2B0;
    return sub_100250C38(v0 + 232, 0xD000000000000019, 0x8000000100557AD0, 0, 1);
  }
}

uint64_t sub_10024C2B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 424);
  v6[54] = a1;
  v6[55] = a2;
  v6[56] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = v6[52];
    v9 = v6[35];
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(0xE700000000000000);
    v10 = sub_10024CE6C;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 29);

    v10 = sub_10024C360;
  }
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_10024C360()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;

  v2 = *(_QWORD *)(v0 + 440);
  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 432);
  v4 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_100022948(v3, v2);
  v6 = JSONDecoder.init()(v5);
  v7 = sub_1002560E0();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for GetRPEncryptionCertificateResponse, v3, v2, &type metadata for GetRPEncryptionCertificateResponse, v7);
  v8 = v1;
  v10 = *(_QWORD *)(v0 + 432);
  v9 = *(_QWORD *)(v0 + 440);
  if (v8)
  {
    v11 = *(_QWORD *)(v0 + 416);
    v12 = *(_QWORD *)(v0 + 280);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(0xE700000000000000);
    sub_100007F8C(v10, v9);
    swift_release(v6);
    v13 = enum case for DIPError.PropertyKey.serverURL(_:);
    v14 = enum case for DIPError.Code.internalError(_:);
    v53 = *(_QWORD *)(v0 + 432);
    v54 = *(_QWORD *)(v0 + 440);
    v16 = *(_QWORD *)(v0 + 304);
    v15 = *(_QWORD *)(v0 + 312);
    v17 = *(_QWORD *)(v0 + 296);
    v18 = sub_100004828((uint64_t *)&unk_1006325A0);
    v19 = sub_100004828((uint64_t *)&unk_100633440);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(_QWORD *)(v20 + 72);
    v22 = *(unsigned __int8 *)(v20 + 80);
    v23 = (v22 + 32) & ~v22;
    v24 = swift_allocObject(v18, v23 + v21, v22 | 7);
    *(_OWORD *)(v24 + 16) = xmmword_10051FFB0;
    v25 = v24 + v23;
    v26 = (_QWORD *)(v25 + *(int *)(v19 + 48));
    v27 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v25, v13, v27);
    v26[3] = &type metadata for String;
    *v26 = 0xD000000000000019;
    v26[1] = 0x8000000100557AD0;
    swift_errorRetain(v8);
    v28 = sub_10011D314(v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 104))(v15, v14, v17);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v29, v30, 0, 0);
    v31 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x8000000100557B40, v8, v15, 0, v28, 0xD000000000000054, 0x8000000100557710, 0xD00000000000001DLL, 0x8000000100557B20, 617);
    swift_willThrow(v31);
    sub_100007F8C(v53, v54);
    swift_errorRelease(v8);
    v33 = *(_QWORD *)(v0 + 392);
    v32 = *(_QWORD *)(v0 + 400);
    v35 = *(_QWORD *)(v0 + 376);
    v34 = *(_QWORD *)(v0 + 384);
    v37 = *(_QWORD *)(v0 + 360);
    v36 = *(_QWORD *)(v0 + 368);
    v38 = *(_QWORD *)(v0 + 336);
    v39 = *(_QWORD *)(v0 + 312);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    swift_task_dealloc(v32);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_100007F8C(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440));
    swift_release(v6);
    v41 = *(_QWORD *)(v0 + 16);
    v42 = *(_QWORD *)(v0 + 40);
    v43 = *(_QWORD *)(v0 + 48);
    v44 = *(_QWORD *)(v0 + 56);
    v45 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 464) = v42;
    *(_QWORD *)(v0 + 472) = v44;
    v46 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v0 + 512) = *(_QWORD *)(v0 + 120);
    v47 = *(_QWORD *)(v0 + 72);
    v48 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 480) = v47;
    v49 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v0 + 496) = v49;
    *(_QWORD *)(v0 + 520) = v46;
    v50 = *(_OWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 456) = v50;
    v51 = *(_OWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 488) = v51;
    *(_QWORD *)(v0 + 136) = v41;
    *(_OWORD *)(v0 + 144) = v50;
    *(_QWORD *)(v0 + 160) = v42;
    *(_QWORD *)(v0 + 168) = v43;
    *(_QWORD *)(v0 + 176) = v44;
    *(_QWORD *)(v0 + 184) = v45;
    *(_QWORD *)(v0 + 192) = v47;
    *(_QWORD *)(v0 + 200) = v48;
    *(_OWORD *)(v0 + 208) = v51;
    *(_QWORD *)(v0 + 224) = v49;
    v52 = (_QWORD *)swift_task_alloc(dword_100639B54);
    *(_QWORD *)(v0 + 528) = v52;
    *v52 = v0;
    v52[1] = sub_10024C734;
    return sub_100253650(0, 0xE000000000000000, *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), v0 + 136);
  }
}

uint64_t sub_10024C734(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 416);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 536) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(0xE700000000000000);
  return swift_task_switch(sub_10024C7B8, 0, 0);
}

uint64_t sub_10024C7B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void (*v84)(void);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v1 = *(_QWORD *)(v0 + 536);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 512);
    v4 = *(_QWORD *)(v0 + 488);
    v3 = *(_QWORD *)(v0 + 496);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 520));
    if (v2)
    {
      v86 = v1;
      v5 = *(_QWORD *)(v0 + 512);
      v7 = *(_QWORD *)(v0 + 472);
      v6 = *(_QWORD *)(v0 + 480);
      v9 = *(_QWORD *)(v0 + 456);
      v8 = *(_QWORD *)(v0 + 464);
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v6);
      v10 = swift_bridgeObjectRelease(v9);
      defaultLogger()(v10);
      swift_bridgeObjectRetain(v5);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.debug.getter(v12);
      if (os_log_type_enabled(v12, v13))
      {
        v14 = *(_QWORD *)(v0 + 504);
        v80 = *(_QWORD *)(v0 + 352);
        v83 = *(_QWORD *)(v0 + 344);
        v85 = *(_QWORD *)(v0 + 360);
        v15 = (uint8_t *)swift_slowAlloc(12, -1);
        v16 = swift_slowAlloc(32, -1);
        v87 = v16;
        *(_DWORD *)v15 = 136315138;
        swift_bridgeObjectRetain(v5);
        *(_QWORD *)(v0 + 264) = sub_1000E3AC8(v14, v5, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v15 + 4);
        swift_bridgeObjectRelease_n(v5, 3);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Server runtime error : %s", v15, 0xCu);
        swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v85, v83);
      }
      else
      {
        v37 = *(_QWORD *)(v0 + 352);
        v36 = *(_QWORD *)(v0 + 360);
        v38 = *(_QWORD *)(v0 + 344);
        swift_bridgeObjectRelease_n(v5, 2);

        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
      }
      v1 = v86;
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 472);
      v32 = *(_QWORD *)(v0 + 480);
      v35 = *(_QWORD *)(v0 + 456);
      v34 = *(_QWORD *)(v0 + 464);
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRelease(v35);
    }
    v81 = *(_QWORD *)(v0 + 536);
    v39 = *(_QWORD *)(v0 + 304);
    v40 = *(_QWORD *)(v0 + 312);
    v41 = sub_100004828((uint64_t *)&unk_1006325A0);
    v42 = sub_100004828((uint64_t *)&unk_100633440);
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(_QWORD *)(v43 + 72);
    v45 = *(unsigned __int8 *)(v43 + 80);
    v46 = (v45 + 32) & ~v45;
    v47 = swift_allocObject(v41, v46 + v44, v45 | 7);
    *(_OWORD *)(v47 + 16) = xmmword_10051FFB0;
    v48 = v47 + v46;
    v49 = (_QWORD *)(v48 + *(int *)(v42 + 48));
    v50 = enum case for DIPError.PropertyKey.serverURL(_:);
    v51 = type metadata accessor for DIPError.PropertyKey(0);
    v84 = *(void (**)(void))(*(_QWORD *)(v51 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v84)(v48, v50, v51);
    v49[3] = &type metadata for String;
    *v49 = 0xD000000000000019;
    v49[1] = 0x8000000100557AD0;
    swift_errorRetain(v1);
    v52 = sub_10011D314(v47);
    v79 = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(uint64_t))(v39 + 104))(v40);
    v78 = type metadata accessor for DIPError(0);
    v77 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v53 = swift_allocError(v78, v77, 0, 0);
    v54 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003BLL, 0x8000000100557B70, v81, v40, 0, v52, 0xD000000000000054, 0x8000000100557710, 0xD00000000000001DLL, 0x8000000100557B20, 610);
    swift_willThrow(v54);
    swift_errorRelease(v1);
    v82 = *(_QWORD *)(v0 + 440);
    v76 = *(_QWORD *)(v0 + 432);
    v55 = *(_QWORD *)(v0 + 304);
    v56 = *(_QWORD *)(v0 + 312);
    v57 = *(_QWORD *)(v0 + 296);
    v58 = sub_100004828((uint64_t *)&unk_1006325A0);
    v59 = sub_100004828((uint64_t *)&unk_100633440);
    v60 = *(_QWORD *)(v59 - 8);
    v61 = *(_QWORD *)(v60 + 72);
    v62 = *(unsigned __int8 *)(v60 + 80);
    v63 = (v62 + 32) & ~v62;
    v64 = swift_allocObject(v58, v63 + v61, v62 | 7);
    *(_OWORD *)(v64 + 16) = xmmword_10051FFB0;
    v65 = (_QWORD *)(v64 + v63 + *(int *)(v59 + 48));
    v84();
    v65[3] = &type metadata for String;
    *v65 = 0xD000000000000019;
    v65[1] = 0x8000000100557AD0;
    swift_errorRetain(v53);
    v66 = sub_10011D314(v64);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v55 + 104))(v56, v79, v57);
    swift_allocError(v78, v77, 0, 0);
    v67 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x8000000100557B40, v53, v56, 0, v66, 0xD000000000000054, 0x8000000100557710, 0xD00000000000001DLL, 0x8000000100557B20, 617);
    swift_willThrow(v67);
    sub_100007F8C(v76, v82);
    swift_errorRelease(v53);
    v69 = *(_QWORD *)(v0 + 392);
    v68 = *(_QWORD *)(v0 + 400);
    v71 = *(_QWORD *)(v0 + 376);
    v70 = *(_QWORD *)(v0 + 384);
    v73 = *(_QWORD *)(v0 + 360);
    v72 = *(_QWORD *)(v0 + 368);
    v74 = *(_QWORD *)(v0 + 336);
    v75 = *(_QWORD *)(v0 + 312);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
    swift_task_dealloc(v68);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 512);
    v19 = *(_QWORD *)(v0 + 488);
    v18 = *(_QWORD *)(v0 + 496);
    v21 = *(_QWORD *)(v0 + 472);
    v20 = *(_QWORD *)(v0 + 480);
    v23 = *(_QWORD *)(v0 + 456);
    v22 = *(_QWORD *)(v0 + 464);
    sub_100007F8C(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440));
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v17);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v24 = *(_QWORD *)(v0 + 520);
    v25 = *(_QWORD *)(v0 + 400);
    v26 = *(_QWORD *)(v0 + 376);
    v28 = *(_QWORD *)(v0 + 360);
    v27 = *(_QWORD *)(v0 + 368);
    v29 = *(_QWORD *)(v0 + 336);
    v30 = *(_QWORD *)(v0 + 312);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 392) + 8))(v25, *(_QWORD *)(v0 + 384));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v24);
  }
}

uint64_t sub_10024CE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 296);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 232));
  v5 = sub_100004828((uint64_t *)&unk_1006325A0);
  v6 = sub_100004828((uint64_t *)&unk_100633440);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v5, v10 + v8, v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_10051FFB0;
  v12 = v11 + v10;
  v13 = (_QWORD *)(v12 + *(int *)(v6 + 48));
  v14 = enum case for DIPError.PropertyKey.serverURL(_:);
  v15 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v12, v14, v15);
  v13[3] = &type metadata for String;
  *v13 = 0xD000000000000019;
  v13[1] = 0x8000000100557AD0;
  swift_errorRetain(v1);
  v16 = sub_10011D314(v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.internalError(_:), v4);
  v17 = type metadata accessor for DIPError(0);
  v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v17, v18, 0, 0);
  v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100557AF0, v1, v2, 0, v16, 0xD000000000000054, 0x8000000100557710, 0xD00000000000001DLL, 0x8000000100557B20, 597);
  swift_willThrow(v19);
  swift_errorRelease(v1);
  v21 = *(_QWORD *)(v0 + 392);
  v20 = *(_QWORD *)(v0 + 400);
  v23 = *(_QWORD *)(v0 + 376);
  v22 = *(_QWORD *)(v0 + 384);
  v25 = *(_QWORD *)(v0 + 360);
  v24 = *(_QWORD *)(v0 + 368);
  v26 = *(_QWORD *)(v0 + 336);
  v27 = *(_QWORD *)(v0 + 312);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  swift_task_dealloc(v20);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10024D0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3[105] = v2;
  v3[104] = a2;
  v3[103] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[106] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[107] = v5;
  v3[108] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError(0);
  v3[109] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[110] = v7;
  v3[111] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v3[112] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[113] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[114] = swift_task_alloc(v10);
  v3[115] = swift_task_alloc(v10);
  v3[116] = swift_task_alloc(v10);
  return swift_task_switch(sub_10024D1C8, 0, 0);
}

uint64_t sub_10024D1C8()
{
  Swift::String_optional *v0;
  _QWORD *v1;
  id v2;
  Swift::String v3;
  Swift::String_optional v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t countAndFlagsBits;
  uint64_t v11;
  uint8_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  Swift::String_optional **v52;
  uint64_t v54;
  void (**object)(uint64_t, uint64_t);
  Swift::String_optional *v56;
  _QWORD *v57;

  v1 = (_QWORD *)sub_10011DC20((uint64_t)_swiftEmptyArrayStorage);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3._countAndFlagsBits = 0xD00000000000003FLL;
  v3._object = (void *)0x8000000100557950;
  v4 = NSUserDefaults.internalString(forKey:)(v3);

  if (!v4.value._object)
    goto LABEL_29;
  defaultLogger()(v5);
  v6 = swift_bridgeObjectRetain_n(v4.value._object, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  countAndFlagsBits = v0[58].value._countAndFlagsBits;
  object = (void (**)(uint64_t, uint64_t))v0[56].value._object;
  v56 = v0;
  v11 = v0[56].value._countAndFlagsBits;
  if (v9)
  {
    v54 = v0[56].value._countAndFlagsBits;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = (_QWORD *)swift_slowAlloc(32, -1);
    v57 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain(v4.value._object);
    v0[51].value._countAndFlagsBits = sub_1000E3AC8(v4.value._countAndFlagsBits, (unint64_t)v4.value._object, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v0[51], &v0[51].value._object, v12 + 4);
    swift_bridgeObjectRelease_n(v4.value._object, 3);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "DIPTopekaWebService registerTerminal using the following test headers: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    object[1](countAndFlagsBits, v54);
  }
  else
  {
    swift_bridgeObjectRelease_n(v4.value._object, 2);

    object[1](countAndFlagsBits, v11);
  }
  v0[49] = v4;
  v14 = sub_1000994DC();
  v15 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(44, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, &type metadata for String, v14);
  swift_bridgeObjectRelease(v4.value._object);
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v57 = _swiftEmptyArrayStorage;
    sub_1000E419C(0, v16, 0);
    v17 = v57;
    v18 = (_QWORD *)(v15 + 56);
    do
    {
      v19 = *(v18 - 3);
      v20 = *(v18 - 2);
      v21 = *(v18 - 1);
      v22 = *v18;
      swift_bridgeObjectRetain(*v18);
      v23 = static String._fromSubstring(_:)(v19, v20, v21, v22);
      v25 = v24;
      swift_bridgeObjectRelease(v22);
      v57 = v17;
      v27 = v17[2];
      v26 = v17[3];
      if (v27 >= v26 >> 1)
      {
        sub_1000E419C(v26 > 1, v27 + 1, 1);
        v17 = v57;
      }
      v17[2] = v27 + 1;
      v28 = &v17[2 * v27];
      v28[4] = v23;
      v28[5] = v25;
      v18 += 4;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease(v15);
    v29 = v17[2];
    if (!v29)
      goto LABEL_28;
  }
  else
  {
    swift_bridgeObjectRelease(v15);
    v17 = _swiftEmptyArrayStorage;
    v29 = _swiftEmptyArrayStorage[2];
    if (!v29)
    {
LABEL_28:
      swift_bridgeObjectRelease(v17);
      v0 = v56;
LABEL_29:
      v0[58].value._object = v1;
      v48 = v0[52].value._countAndFlagsBits;
      v49 = sub_100004828(&qword_100639B58);
      v0[59].value._countAndFlagsBits = v49;
      v0[46].value._object = (void *)v49;
      v50 = sub_100022234(&v0[45].value._countAndFlagsBits);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v50, v48, v49);
      v51 = dword_100639B4C;
      swift_bridgeObjectRetain(v1);
      v52 = (Swift::String_optional **)swift_task_alloc(v51);
      v0[59].value._object = v52;
      *v52 = v0;
      v52[1] = (Swift::String_optional *)sub_10024D794;
      return sub_100250C38((uint64_t)&v0[45], 0xD00000000000001ALL, 0x8000000100557990, (uint64_t)v1, 0);
    }
  }
  swift_bridgeObjectRetain(v17);
  v30 = v17 + 5;
  while (1)
  {
    v33 = *(v30 - 1);
    v32 = *v30;
    swift_bridgeObjectRetain(*v30);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
    v57 = v1;
    v36 = sub_1004A8604(v33, v32);
    v37 = v1[2];
    v38 = (v35 & 1) == 0;
    v39 = v37 + v38;
    if (__OFADD__(v37, v38))
    {
      __break(1u);
LABEL_32:
      __break(1u);
    }
    v40 = v35;
    if (v1[3] < v39)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v35 & 1) == 0)
        goto LABEL_23;
    }
    else
    {
      sub_10012973C();
      v1 = v57;
      if ((v40 & 1) == 0)
      {
LABEL_23:
        v1[(v36 >> 6) + 8] |= 1 << v36;
        v43 = (uint64_t *)(v1[6] + 16 * v36);
        *v43 = v33;
        v43[1] = v32;
        v44 = (_QWORD *)(v1[7] + 16 * v36);
        *v44 = 1702195828;
        v44[1] = 0xE400000000000000;
        v45 = v1[2];
        v46 = __OFADD__(v45, 1);
        v47 = v45 + 1;
        if (v46)
          goto LABEL_32;
        v1[2] = v47;
        swift_bridgeObjectRetain(v32);
        goto LABEL_15;
      }
    }
LABEL_14:
    v31 = (_QWORD *)(v1[7] + 16 * v36);
    swift_bridgeObjectRelease(v31[1]);
    *v31 = 1702195828;
    v31[1] = 0xE400000000000000;
LABEL_15:
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRelease(v32);
    v30 += 2;
    if (!--v29)
    {
      swift_bridgeObjectRelease(v17);
      goto LABEL_28;
    }
  }
  sub_100123948(v39, isUniquelyReferenced_nonNull_native);
  v1 = v57;
  v41 = sub_1004A8604(v33, v32);
  if ((v40 & 1) == (v42 & 1))
  {
    v36 = v41;
    if ((v40 & 1) == 0)
      goto LABEL_23;
    goto LABEL_14;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
}

uint64_t sub_10024D794(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 952);
  v6[120] = a1;
  v6[121] = a2;
  v6[122] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = sub_10024EE44;
  }
  else
  {
    swift_bridgeObjectRelease(v6[117]);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 90);

    v8 = (uint64_t (*)())sub_10024D870;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10024D870(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,os_log_t a48)
{
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v49 = *(_QWORD *)(v48 + 976);
  v50 = *(_QWORD *)(v48 + 968);
  v51 = *(_QWORD *)(v48 + 960);
  v52 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
  v53 = sub_100022948(v51, v50);
  v54 = JSONDecoder.init()(v53);
  v55 = sub_100256060();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for RegisterTerminalResponse, v51, v50, &type metadata for RegisterTerminalResponse, v55);
  if (v49)
  {
    v56 = v49;
    v57 = swift_release(v54);
    v58 = *(_QWORD *)(v48 + 968);
    v59 = *(_QWORD *)(v48 + 960);
    defaultLogger()(v57);
    v60 = sub_100022948(v59, v58);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter(v61);
    v63 = os_log_type_enabled(v61, v62);
    v64 = *(_QWORD *)(v48 + 968);
    if (v63)
    {
      v65 = v64 >> 62;
      v66 = (_DWORD *)swift_slowAlloc(12, -1);
      swift_slowAlloc(32, -1);
      *v66 = 136315138;
      __asm { BR              X9 }
    }
    v84 = *(_QWORD *)(v48 + 960);
    v85 = *(_QWORD *)(v48 + 912);
    v86 = *(_QWORD *)(v48 + 904);
    v87 = *(_QWORD *)(v48 + 896);
    sub_100007F8C(v84, *(_QWORD *)(v48 + 968));
    sub_100007F8C(v84, v64);

    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v87);
    v88 = *(_QWORD *)(v48 + 968);
    v89 = *(_QWORD *)(v48 + 960);
    v90 = *(_QWORD *)(v48 + 872);
    v91 = *(_QWORD *)(v48 + 864);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v48 + 856) + 104))(v91, enum case for DIPError.Code.jsonDecodingFailed(_:), *(_QWORD *)(v48 + 848));
    swift_errorRetain(v56);
    v92 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v93 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v90, v93, 0, 0);
    v94 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000043, 0x8000000100557A10, v56, v91, 0, v92, 0xD000000000000054, 0x8000000100557710, 0xD00000000000001ALL, 0x80000001005579F0, 668);
    swift_willThrow(v94);
    sub_100007F8C(v89, v88);
    swift_errorRelease(v56);
    v95 = *(_QWORD *)(v48 + 928);
    v96 = *(_QWORD *)(v48 + 920);
    v97 = *(_QWORD *)(v48 + 912);
    v98 = *(_QWORD *)(v48 + 888);
    v99 = *(_QWORD *)(v48 + 864);
    swift_bridgeObjectRelease(*(_QWORD *)(v48 + 936));
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    __asm { BR              X0 }
  }
  v67 = *(_QWORD *)(v48 + 944);
  swift_release(v54);
  v106 = *(_QWORD *)(v48 + 424);
  v107 = *(_QWORD *)(v48 + 432);
  *(_QWORD *)(v48 + 984) = v106;
  *(_QWORD *)(v48 + 992) = v107;
  v104 = *(_QWORD *)(v48 + 440);
  v105 = *(_QWORD *)(v48 + 448);
  *(_QWORD *)(v48 + 1000) = v104;
  *(_QWORD *)(v48 + 1008) = v105;
  v102 = *(_QWORD *)(v48 + 456);
  v103 = *(_QWORD *)(v48 + 464);
  *(_QWORD *)(v48 + 1016) = v102;
  *(_QWORD *)(v48 + 1024) = v103;
  v68 = *(_QWORD *)(v48 + 472);
  v69 = *(_QWORD *)(v48 + 480);
  *(_QWORD *)(v48 + 1032) = v68;
  *(_QWORD *)(v48 + 1040) = v69;
  v70 = *(_QWORD *)(v48 + 488);
  v71 = *(_QWORD *)(v48 + 496);
  *(_QWORD *)(v48 + 1048) = v70;
  *(_QWORD *)(v48 + 1056) = v71;
  v72 = *(_QWORD *)(v48 + 504);
  *(_QWORD *)(v48 + 1064) = v72;
  v73 = *(_OWORD *)(v48 + 528);
  v101 = *(_OWORD *)(v48 + 512);
  *(_OWORD *)(v48 + 1072) = v101;
  *(_OWORD *)(v48 + 1088) = v73;
  JWSSignedJSON.payload.getter(v67);
  v74 = *(_OWORD *)(v48 + 376);
  *(_OWORD *)(v48 + 144) = *(_OWORD *)(v48 + 360);
  *(_OWORD *)(v48 + 160) = v74;
  *(_OWORD *)(v48 + 176) = *(_OWORD *)(v48 + 392);
  *(_OWORD *)(v48 + 185) = *(_OWORD *)(v48 + 401);
  v75 = *(_OWORD *)(v48 + 312);
  *(_OWORD *)(v48 + 80) = *(_OWORD *)(v48 + 296);
  *(_OWORD *)(v48 + 96) = v75;
  v76 = *(_OWORD *)(v48 + 344);
  *(_OWORD *)(v48 + 112) = *(_OWORD *)(v48 + 328);
  *(_OWORD *)(v48 + 128) = v76;
  v77 = *(_OWORD *)(v48 + 248);
  *(_OWORD *)(v48 + 16) = *(_OWORD *)(v48 + 232);
  *(_OWORD *)(v48 + 32) = v77;
  v78 = *(_OWORD *)(v48 + 280);
  *(_OWORD *)(v48 + 48) = *(_OWORD *)(v48 + 264);
  *(_OWORD *)(v48 + 64) = v78;
  v79 = *(_QWORD *)(v48 + 24);
  v100 = *(_QWORD *)(v48 + 16);
  *(_QWORD *)(v48 + 1104) = v79;
  v80 = *(_QWORD *)(v48 + 32);
  v81 = *(_QWORD *)(v48 + 40);
  *(_QWORD *)(v48 + 1112) = v81;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v81);
  sub_1002551E8((_QWORD *)(v48 + 16));
  *(_QWORD *)(v48 + 544) = v106;
  *(_QWORD *)(v48 + 552) = v107;
  *(_QWORD *)(v48 + 560) = v104;
  *(_QWORD *)(v48 + 568) = v105;
  *(_QWORD *)(v48 + 576) = v102;
  *(_QWORD *)(v48 + 584) = v103;
  *(_QWORD *)(v48 + 592) = v68;
  *(_QWORD *)(v48 + 600) = v69;
  *(_QWORD *)(v48 + 608) = v70;
  *(_QWORD *)(v48 + 616) = v71;
  *(_QWORD *)(v48 + 624) = v72;
  *(_QWORD *)(v48 + 632) = v101;
  v82 = (_QWORD *)swift_task_alloc(dword_100639B54);
  *(_QWORD *)(v48 + 1120) = v82;
  *v82 = v48;
  v82[1] = sub_10024E1B4;
  return sub_100253650(v100, v79, v80, v81, v48 + 544);
}

uint64_t sub_10024E1B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1120);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1112);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 1104);
  *(_QWORD *)(*(_QWORD *)v1 + 1128) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10024E25C, 0, 0);
}

void sub_10024E25C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,uint64_t a58,os_log_t a59)
{
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  BOOL v113;
  unint64_t v114;
  _DWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v60 = *(_QWORD *)(v59 + 1096);
  v61 = *(_QWORD *)(v59 + 1088);
  if (*(_QWORD *)(v59 + 1128))
  {
    v145 = *(_QWORD *)(v59 + 1128);
    v62 = *(_QWORD *)(v59 + 1072);
    v63 = *(_QWORD *)(v59 + 1056);
    v64 = *(_QWORD *)(v59 + 1040);
    v65 = *(_QWORD *)(v59 + 1024);
    v66 = *(_QWORD *)(v59 + 1008);
    v67 = *(_QWORD *)(v59 + 992);
    if (v61)
    {
      swift_bridgeObjectRelease(v60);
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v63);
      swift_bridgeObjectRelease(v66);
      swift_bridgeObjectRelease(v65);
      swift_bridgeObjectRelease(v64);
      v68 = swift_bridgeObjectRelease(v67);
      defaultLogger()(v68);
      swift_bridgeObjectRetain(v61);
      v70 = Logger.logObject.getter(v69);
      v71 = static os_log_type_t.debug.getter(v70);
      if (os_log_type_enabled(v70, v71))
      {
        v72 = *(_QWORD *)(v59 + 1080);
        v142 = *(_QWORD *)(v59 + 920);
        v73 = *(_QWORD *)(v59 + 904);
        v138 = *(_QWORD *)(v59 + 896);
        v74 = (uint8_t *)swift_slowAlloc(12, -1);
        v75 = swift_slowAlloc(32, -1);
        v147 = v75;
        *(_DWORD *)v74 = 136315138;
        swift_bridgeObjectRetain(v61);
        *(_QWORD *)(v59 + 808) = sub_1000E3AC8(v72, v61, &v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v59 + 808, v59 + 816, v74 + 4);
        swift_bridgeObjectRelease_n(v61, 3);
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Server runtime error : %s", v74, 0xCu);
        swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v74, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v142, v138);
      }
      else
      {
        v84 = *(_QWORD *)(v59 + 920);
        v85 = *(_QWORD *)(v59 + 904);
        v86 = *(_QWORD *)(v59 + 896);
        swift_bridgeObjectRelease_n(v61, 2);

        (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v60);
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v63);
      swift_bridgeObjectRelease(v66);
      swift_bridgeObjectRelease(v65);
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRelease(v67);
    }
    v140 = *(_QWORD *)(v59 + 1128);
    v87 = *(_QWORD *)(v59 + 888);
    v144 = *(_QWORD *)(v59 + 880);
    v88 = *(_QWORD *)(v59 + 872);
    v89 = *(_QWORD *)(v59 + 864);
    v90 = *(_QWORD *)(v59 + 856);
    v91 = *(_QWORD *)(v59 + 848);
    v92 = sub_100004828((uint64_t *)&unk_1006325A0);
    v93 = sub_100004828((uint64_t *)&unk_100633440);
    v94 = *(_QWORD *)(v93 - 8);
    v95 = *(_QWORD *)(v94 + 72);
    v96 = *(unsigned __int8 *)(v94 + 80);
    v97 = (v96 + 32) & ~v96;
    v98 = swift_allocObject(v92, v97 + v95, v96 | 7);
    *(_OWORD *)(v98 + 16) = xmmword_10051FFB0;
    v99 = v98 + v97;
    v100 = (_QWORD *)(v99 + *(int *)(v93 + 48));
    v101 = enum case for DIPError.PropertyKey.serverURL(_:);
    v102 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 104))(v99, v101, v102);
    v100[3] = &type metadata for String;
    *v100 = 0xD00000000000001ALL;
    v100[1] = 0x8000000100557990;
    swift_errorRetain(v145);
    v103 = sub_10011D314(v98);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v90 + 104))(v89, enum case for DIPError.Code.internalError(_:), v91);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x8000000100557A60, v140, v89, 0, v103, 0xD000000000000054, 0x8000000100557710, 0xD00000000000001ALL, 0x80000001005579F0, 659);
    v141 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v104 = swift_allocError(v88, v141, 0, 0);
    v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 16))(v105, v87, v88);
    swift_willThrow(v106);
    swift_errorRelease(v145);
    v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v144 + 8))(v87, v88);
    v108 = *(_QWORD *)(v59 + 968);
    v109 = *(_QWORD *)(v59 + 960);
    defaultLogger()(v107);
    v110 = sub_100022948(v109, v108);
    v111 = Logger.logObject.getter(v110);
    v112 = static os_log_type_t.error.getter(v111);
    v113 = os_log_type_enabled(v111, v112);
    v114 = *(_QWORD *)(v59 + 968);
    if (v113)
    {
      v115 = (_DWORD *)swift_slowAlloc(12, -1);
      v147 = swift_slowAlloc(32, -1);
      *v115 = 136315138;
      __asm { BR              X9 }
    }
    v116 = *(_QWORD *)(v59 + 960);
    v117 = *(_QWORD *)(v59 + 912);
    v118 = v104;
    v119 = *(_QWORD *)(v59 + 904);
    v120 = *(_QWORD *)(v59 + 896);
    sub_100007F8C(v116, *(_QWORD *)(v59 + 968));
    sub_100007F8C(v116, v114);

    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v117, v120);
    v121 = *(_QWORD *)(v59 + 968);
    v122 = *(_QWORD *)(v59 + 960);
    v123 = *(_QWORD *)(v59 + 872);
    v124 = *(_QWORD *)(v59 + 864);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v59 + 856) + 104))(v124, enum case for DIPError.Code.jsonDecodingFailed(_:), *(_QWORD *)(v59 + 848));
    swift_errorRetain(v118);
    v125 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v123, v141, 0, 0);
    v126 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000043, 0x8000000100557A10, v118, v124, 0, v125, 0xD000000000000054, 0x8000000100557710, 0xD00000000000001ALL, 0x80000001005579F0, 668);
    swift_willThrow(v126);
    sub_100007F8C(v122, v121);
    swift_errorRelease(v118);
    v127 = *(_QWORD *)(v59 + 928);
    v128 = *(_QWORD *)(v59 + 920);
    v129 = *(_QWORD *)(v59 + 912);
    v130 = *(_QWORD *)(v59 + 888);
    v131 = *(_QWORD *)(v59 + 864);
    swift_bridgeObjectRelease(*(_QWORD *)(v59 + 936));
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    swift_task_dealloc(v131);
    v83 = *(_QWORD *)(v59 + 8);
  }
  else
  {
    v146 = *(_QWORD *)(v59 + 1080);
    v139 = *(_OWORD *)(v59 + 1064);
    v135 = *(_OWORD *)(v59 + 1032);
    v136 = *(_OWORD *)(v59 + 1048);
    v133 = *(_OWORD *)(v59 + 1000);
    v134 = *(_OWORD *)(v59 + 1016);
    v132 = *(_OWORD *)(v59 + 984);
    v76 = *(_QWORD *)(v59 + 968);
    v77 = *(_QWORD *)(v59 + 960);
    v78 = *(_QWORD *)(v59 + 936);
    v79 = *(_QWORD *)(v59 + 928);
    v80 = *(_QWORD *)(v59 + 920);
    v81 = *(_QWORD *)(v59 + 912);
    v137 = *(_QWORD *)(v59 + 888);
    v143 = *(_QWORD *)(v59 + 864);
    v82 = *(_QWORD *)(v59 + 824);
    sub_100007F8C(v77, v76);
    sub_100007F8C(v77, v76);
    swift_bridgeObjectRelease(v78);
    *(_OWORD *)v82 = v132;
    *(_OWORD *)(v82 + 16) = v133;
    *(_OWORD *)(v82 + 32) = v134;
    *(_OWORD *)(v82 + 48) = v135;
    *(_OWORD *)(v82 + 64) = v136;
    *(_OWORD *)(v82 + 80) = v139;
    *(_QWORD *)(v82 + 96) = v146;
    *(_QWORD *)(v82 + 104) = v61;
    *(_QWORD *)(v82 + 112) = v60;
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v137);
    swift_task_dealloc(v143);
    v83 = *(_QWORD *)(v59 + 8);
  }
  __asm { BR              X0 }
}

uint64_t sub_10024EE44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 976);
  v2 = *(_QWORD *)(v0 + 872);
  v3 = *(_QWORD *)(v0 + 864);
  v4 = *(_QWORD *)(v0 + 856);
  v5 = *(_QWORD *)(v0 + 848);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 936));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 720));
  v6 = sub_100004828((uint64_t *)&unk_1006325A0);
  v7 = sub_100004828((uint64_t *)&unk_100633440);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10051FFB0;
  v13 = v12 + v11;
  v14 = (_QWORD *)(v13 + *(int *)(v7 + 48));
  v15 = enum case for DIPError.PropertyKey.serverURL(_:);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v13, v15, v16);
  v14[3] = &type metadata for String;
  *v14 = 0xD00000000000001ALL;
  v14[1] = 0x8000000100557990;
  swift_errorRetain(v1);
  v17 = sub_10011D314(v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v2, v18, 0, 0);
  v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x80000001005579B0, v1, v3, 0, v17, 0xD000000000000054, 0x8000000100557710, 0xD00000000000001ALL, 0x80000001005579F0, 644);
  swift_willThrow(v19);
  swift_errorRelease(v1);
  v20 = *(_QWORD *)(v0 + 928);
  v21 = *(_QWORD *)(v0 + 920);
  v22 = *(_QWORD *)(v0 + 912);
  v23 = *(_QWORD *)(v0 + 888);
  v24 = *(_QWORD *)(v0 + 864);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 936));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10024F0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v7 + 3240) = v6;
  *(_BYTE *)(v7 + 3600) = a6;
  *(_QWORD *)(v7 + 3232) = a5;
  *(_QWORD *)(v7 + 3224) = a4;
  *(_QWORD *)(v7 + 3216) = a3;
  *(_QWORD *)(v7 + 3208) = a2;
  *(_QWORD *)(v7 + 3200) = a1;
  v8 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v7 + 3248) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 3256) = v9;
  *(_QWORD *)(v7 + 3264) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_100630A48);
  *(_QWORD *)(v7 + 3272) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  *(_QWORD *)(v7 + 3280) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 3288) = v12;
  *(_QWORD *)(v7 + 3296) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v7 + 3304) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v7 + 3312) = v14;
  *(_QWORD *)(v7 + 3320) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004828(&qword_100639B58);
  *(_QWORD *)(v7 + 3328) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v7 + 3336) = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 3344) = swift_task_alloc(v17);
  *(_QWORD *)(v7 + 3352) = swift_task_alloc(v17);
  v18 = sub_100004828(&qword_1006384E0);
  *(_QWORD *)(v7 + 3360) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v7 + 3368) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 3376) = swift_task_alloc(v20);
  *(_QWORD *)(v7 + 3384) = swift_task_alloc(v20);
  v21 = sub_100004828(&qword_100637388);
  *(_QWORD *)(v7 + 3392) = v21;
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v7 + 3400) = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 3408) = swift_task_alloc(v23);
  *(_QWORD *)(v7 + 3416) = swift_task_alloc(v23);
  v24 = sub_100004828(&qword_100639B60);
  *(_QWORD *)(v7 + 3424) = v24;
  v25 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v7 + 3432) = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 3440) = swift_task_alloc(v26);
  *(_QWORD *)(v7 + 3448) = swift_task_alloc(v26);
  v27 = sub_100004828(&qword_100636628);
  *(_QWORD *)(v7 + 3456) = v27;
  v28 = *(_QWORD *)(v27 - 8);
  *(_QWORD *)(v7 + 3464) = v28;
  v29 = (*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 3472) = swift_task_alloc(v29);
  *(_QWORD *)(v7 + 3480) = swift_task_alloc(v29);
  v30 = sub_100004828(&qword_100636770);
  *(_QWORD *)(v7 + 3488) = v30;
  v31 = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(v7 + 3496) = v31;
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 3504) = swift_task_alloc(v32);
  *(_QWORD *)(v7 + 3512) = swift_task_alloc(v32);
  v33 = type metadata accessor for Logger(0);
  *(_QWORD *)(v7 + 3520) = v33;
  v34 = *(_QWORD *)(v33 - 8);
  *(_QWORD *)(v7 + 3528) = v34;
  *(_QWORD *)(v7 + 3536) = swift_task_alloc((*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10024F330, 0, 0);
}

uint64_t sub_10024F330(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  Swift::String_optional v175;
  Swift::String v176;
  _QWORD *v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  unint64_t v200;
  unint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t DynamicType;
  Swift::String v250;
  void *object;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t *v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t (*v297)(uint64_t, uint64_t, char, char);
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;

  v2 = v1;
  v3 = v1 + 44;
  v4 = v1 + 390;
  v5 = v1 + 394;
  v293 = v1 + 400;
  v6 = v1[400];
  defaultLogger()(a1);
  v7 = sub_10002EDBC(v6, (uint64_t)(v1 + 394));
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.info.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v273 = v1 + 398;
    v275 = v1 + 399;
    v278 = v1[441];
    v281 = v1[440];
    v285 = v1[442];
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v299 = v12;
    *(_DWORD *)v11 = 136446210;
    v289 = v4;
    v13 = v2[397];
    v14 = sub_10000806C(v5, v13);
    v2[398] = swift_getDynamicType(v14, v13, 1);
    v15 = sub_100004828(&qword_100630AA0);
    v16 = String.init<A>(describing:)(v273, v15);
    v18 = v17;
    v2[399] = sub_1000E3AC8(v16, v17, &v299);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v275, v293, v11 + 4);
    v19 = v18;
    v4 = v289;
    swift_bridgeObjectRelease(v19);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "coreidvd: sendPostRequest of type %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v278 + 8))(v285, v281);
  }
  else
  {
    v20 = v1[442];
    v21 = v1[441];
    v22 = v2[440];
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v5);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  sub_10002EDBC(*v293, (uint64_t)v4);
  if (swift_dynamicCast(v3, v4, (char *)&type metadata for Any + 8, &type metadata for WorkflowRecommendationRequest, 0))
  {
    v23 = *v293;
    v24 = *((_OWORD *)v3 + 9);
    *((_OWORD *)v2 + 51) = *((_OWORD *)v3 + 8);
    *((_OWORD *)v2 + 52) = v24;
    v2[106] = v3[20];
    v25 = *((_OWORD *)v3 + 5);
    *((_OWORD *)v2 + 47) = *((_OWORD *)v3 + 4);
    *((_OWORD *)v2 + 48) = v25;
    v26 = *((_OWORD *)v3 + 7);
    *((_OWORD *)v2 + 49) = *((_OWORD *)v3 + 6);
    *((_OWORD *)v2 + 50) = v26;
    v27 = *((_OWORD *)v3 + 1);
    *((_OWORD *)v2 + 43) = *(_OWORD *)v3;
    *((_OWORD *)v2 + 44) = v27;
    v28 = *((_OWORD *)v3 + 3);
    *((_OWORD *)v2 + 45) = *((_OWORD *)v3 + 2);
    *((_OWORD *)v2 + 46) = v28;
    sub_100184AB4(v2 + 86);
    v29 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    v30 = JSONEncoder.init()();
    sub_10002EDBC(v23, (uint64_t)(v2 + 386));
    swift_dynamicCast(v2 + 23, v2 + 386, (char *)&type metadata for Any + 8, &type metadata for WorkflowRecommendationRequest, 7);
    v31 = *(_OWORD *)(v2 + 37);
    v33 = *(_OWORD *)(v2 + 39);
    v32 = *(_OWORD *)(v2 + 41);
    *(_OWORD *)(v2 + 81) = v33;
    *(_OWORD *)(v2 + 83) = v32;
    v34 = *(_OWORD *)(v2 + 29);
    v36 = *(_OWORD *)(v2 + 31);
    v35 = *(_OWORD *)(v2 + 33);
    *(_OWORD *)(v2 + 73) = v36;
    *(_OWORD *)(v2 + 75) = v35;
    v37 = *(_OWORD *)(v2 + 33);
    v39 = *(_OWORD *)(v2 + 35);
    v38 = *(_OWORD *)(v2 + 37);
    *(_OWORD *)(v2 + 77) = v39;
    *(_OWORD *)(v2 + 79) = v38;
    v40 = *(_OWORD *)(v2 + 25);
    *(_OWORD *)(v2 + 65) = *(_OWORD *)(v2 + 23);
    *(_OWORD *)(v2 + 67) = v40;
    v41 = *(_OWORD *)(v2 + 29);
    v43 = *(_OWORD *)(v2 + 23);
    v42 = *(_OWORD *)(v2 + 25);
    v44 = *(_OWORD *)(v2 + 27);
    *(_OWORD *)(v2 + 69) = v44;
    *(_OWORD *)(v2 + 71) = v41;
    v45 = *(_OWORD *)(v2 + 41);
    *((_OWORD *)v2 + 9) = v33;
    *((_OWORD *)v2 + 10) = v45;
    *((_OWORD *)v2 + 5) = v36;
    *((_OWORD *)v2 + 6) = v37;
    *((_OWORD *)v2 + 7) = v39;
    *((_OWORD *)v2 + 8) = v31;
    *((_OWORD *)v2 + 1) = v43;
    *((_OWORD *)v2 + 2) = v42;
    v2[85] = v2[43];
    v2[22] = v2[43];
    *((_OWORD *)v2 + 3) = v44;
    *((_OWORD *)v2 + 4) = v34;
    v46 = sub_10025601C();
    v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v2 + 2, &type metadata for WorkflowRecommendationRequest, v46);
    v49 = v48;
    sub_100184AB4(v2 + 65);
LABEL_6:
    swift_release(v30);
    goto LABEL_20;
  }
  if (swift_dynamicCast(v2[439], v4, (char *)&type metadata for Any + 8, v2[436], 0))
  {
    v50 = v2[438];
    v51 = v2[436];
    v52 = v2[400];
    v53 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
    v54 = JSONEncoder.init()();
    sub_10002EDBC(v52, (uint64_t)(v2 + 374));
    swift_dynamicCast(v50, v2 + 374, (char *)&type metadata for Any + 8, v51, 7);
    v55 = sub_100099FFC(&qword_100639BD8, &qword_100636770, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v50, v51, v55);
    v49 = v56;
    v57 = v2[439];
    v58 = v2[438];
    v59 = v2[437];
    v60 = v4;
    v61 = v2[436];
  }
  else if (swift_dynamicCast(v2[435], v4, (char *)&type metadata for Any + 8, v2[432], 0))
  {
    v62 = v2[434];
    v63 = v2[432];
    v64 = v2[400];
    v65 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
    v54 = JSONEncoder.init()();
    sub_10002EDBC(v64, (uint64_t)(v2 + 370));
    swift_dynamicCast(v62, v2 + 370, (char *)&type metadata for Any + 8, v63, 7);
    v66 = sub_100099FFC(&qword_100639BD0, &qword_100636628, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v62, v63, v66);
    v49 = v67;
    v57 = v2[435];
    v58 = v2[434];
    v59 = v2[433];
    v60 = v4;
    v61 = v2[432];
  }
  else
  {
    if (swift_dynamicCast(v2 + 300, v4, (char *)&type metadata for Any + 8, &type metadata for NonceRequest, 0))
    {
      v290 = v4;
      v294 = v2 + 287;
      v282 = v2[400];
      v286 = v2 + 313;
      v68 = (uint64_t)(v2 + 358);
      v69 = v2[301];
      v70 = v2[303];
      v71 = v2[306];
      v72 = v2[307];
      v73 = v2[308];
      v74 = v2;
      v75 = v2[309];
      v76 = v74[310];
      v77 = v74[311];
      v78 = v74[312];
      swift_bridgeObjectRelease(v69);
      swift_bridgeObjectRelease(v70);
      swift_bridgeObjectRelease(v71);
      sub_10008EF5C(v72, v73, v75, v76, v77, v78);
      v79 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v79, *(unsigned int *)(v79 + 48), *(unsigned __int16 *)(v79 + 52));
      v30 = JSONEncoder.init()();
      sub_10002EDBC(v282, v68);
      swift_dynamicCast(v286, v68, (char *)&type metadata for Any + 8, &type metadata for NonceRequest, 7);
      v80 = v74[314];
      v81 = v74[315];
      v82 = v74[316];
      v83 = v74[317];
      v84 = v74[318];
      v85 = v74[319];
      v86 = v74[320];
      v87 = v74[321];
      v283 = v74[323];
      v287 = v74[322];
      v276 = v74[325];
      v279 = v74[324];
      v74[287] = v74[313];
      v74[288] = v80;
      v74[289] = v81;
      v74[290] = v82;
      v74[291] = v83;
      v74[292] = v84;
      v74[293] = v85;
      v74[294] = v86;
      v74[295] = v87;
      v74[296] = v287;
      v74[297] = v283;
      v74[298] = v279;
      v74[299] = v276;
      v88 = sub_1001393B8();
      v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v294, &type metadata for NonceRequest, v88);
      v49 = v89;
      swift_bridgeObjectRelease(v80);
      v90 = v82;
      v4 = v290;
      swift_bridgeObjectRelease(v90);
      swift_bridgeObjectRelease(v85);
      v91 = v86;
      v2 = v74;
      sub_10008EF5C(v91, v87, v287, v283, v279, v276);
      goto LABEL_6;
    }
    if (swift_dynamicCast(v2[431], v4, (char *)&type metadata for Any + 8, v2[428], 0))
    {
      v92 = v2[430];
      v93 = v2[428];
      v94 = v2[400];
      v95 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v95, *(unsigned int *)(v95 + 48), *(unsigned __int16 *)(v95 + 52));
      v54 = JSONEncoder.init()();
      sub_10002EDBC(v94, (uint64_t)(v2 + 354));
      swift_dynamicCast(v92, v2 + 354, (char *)&type metadata for Any + 8, v93, 7);
      v96 = sub_100099FFC(&qword_100639BC8, &qword_100639B60, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
      v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v92, v93, v96);
      v49 = v97;
      v57 = v2[431];
      v58 = v2[430];
      v59 = v2[429];
      v60 = v4;
      v61 = v2[428];
    }
    else if (swift_dynamicCast(v2[427], v4, (char *)&type metadata for Any + 8, v2[424], 0))
    {
      v98 = v2[426];
      v99 = v2[424];
      v100 = v2[400];
      v101 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v101, *(unsigned int *)(v101 + 48), *(unsigned __int16 *)(v101 + 52));
      v54 = JSONEncoder.init()();
      sub_10002EDBC(v100, (uint64_t)(v2 + 350));
      swift_dynamicCast(v98, v2 + 350, (char *)&type metadata for Any + 8, v99, 7);
      v102 = sub_100099FFC(&qword_100639BC0, &qword_100637388, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
      v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v98, v99, v102);
      v49 = v103;
      v57 = v2[427];
      v58 = v2[426];
      v59 = v2[425];
      v60 = v4;
      v61 = v2[424];
    }
    else
    {
      if (!swift_dynamicCast(v2[423], v4, (char *)&type metadata for Any + 8, v2[420], 0))
      {
        if (swift_dynamicCast(v2 + 107, v4, (char *)&type metadata for Any + 8, &type metadata for IdentityProofingLivenessConfigRequest, 0))
        {
          v178 = *v293;
          v179 = *(_OWORD *)(v2 + 121);
          *(_OWORD *)(v2 + 139) = *(_OWORD *)(v2 + 119);
          *(_OWORD *)(v2 + 141) = v179;
          v180 = *(_OWORD *)(v2 + 125);
          *(_OWORD *)(v2 + 143) = *(_OWORD *)(v2 + 123);
          *(_OWORD *)(v2 + 145) = v180;
          v181 = *(_OWORD *)(v2 + 113);
          *(_OWORD *)(v2 + 131) = *(_OWORD *)(v2 + 111);
          *(_OWORD *)(v2 + 133) = v181;
          v182 = *(_OWORD *)(v2 + 117);
          *(_OWORD *)(v2 + 135) = *(_OWORD *)(v2 + 115);
          *(_OWORD *)(v2 + 137) = v182;
          v183 = *(_OWORD *)(v2 + 109);
          *(_OWORD *)(v2 + 127) = *(_OWORD *)(v2 + 107);
          *(_OWORD *)(v2 + 129) = v183;
          sub_100255370(v2 + 127);
          v184 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v184, *(unsigned int *)(v184 + 48), *(unsigned __int16 *)(v184 + 52));
          v30 = JSONEncoder.init()();
          sub_10002EDBC(v178, (uint64_t)(v2 + 366));
          swift_dynamicCast(v2 + 187, v2 + 366, (char *)&type metadata for Any + 8, &type metadata for IdentityProofingLivenessConfigRequest, 7);
          v186 = *(_OWORD *)(v2 + 199);
          v185 = *(_OWORD *)(v2 + 201);
          v187 = *(_OWORD *)(v2 + 197);
          *(_OWORD *)(v2 + 159) = v186;
          *(_OWORD *)(v2 + 161) = v185;
          v188 = *(_OWORD *)(v2 + 201);
          v190 = *(_OWORD *)(v2 + 203);
          v189 = *(_OWORD *)(v2 + 205);
          *(_OWORD *)(v2 + 163) = v190;
          *(_OWORD *)(v2 + 165) = v189;
          v192 = *(_OWORD *)(v2 + 191);
          v191 = *(_OWORD *)(v2 + 193);
          v193 = *(_OWORD *)(v2 + 189);
          *(_OWORD *)(v2 + 151) = v192;
          *(_OWORD *)(v2 + 153) = v191;
          v194 = *(_OWORD *)(v2 + 193);
          v196 = *(_OWORD *)(v2 + 195);
          v195 = *(_OWORD *)(v2 + 197);
          *(_OWORD *)(v2 + 155) = v196;
          *(_OWORD *)(v2 + 157) = v195;
          v197 = *(_OWORD *)(v2 + 189);
          v198 = *(_OWORD *)(v2 + 187);
          *(_OWORD *)(v2 + 147) = v198;
          *(_OWORD *)(v2 + 149) = v197;
          *(_OWORD *)(v2 + 179) = v186;
          *(_OWORD *)(v2 + 181) = v188;
          v199 = *(_OWORD *)(v2 + 205);
          *(_OWORD *)(v2 + 183) = v190;
          *(_OWORD *)(v2 + 185) = v199;
          *(_OWORD *)(v2 + 171) = v192;
          *(_OWORD *)(v2 + 173) = v194;
          *(_OWORD *)(v2 + 175) = v196;
          *(_OWORD *)(v2 + 177) = v187;
          *(_OWORD *)(v2 + 167) = v198;
          *(_OWORD *)(v2 + 169) = v193;
          v200 = sub_100255FD8();
          v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v2 + 167, &type metadata for IdentityProofingLivenessConfigRequest, v200);
          v49 = v201;
          sub_100255370(v2 + 147);
        }
        else if (swift_dynamicCast(v2 + 342, v4, (char *)&type metadata for Any + 8, &type metadata for GetRPEncryptionCertificateRequest, 0))
        {
          v202 = v2 + 326;
          v203 = v2[400];
          v204 = v2[345];
          v292 = v4;
          v205 = v2[347];
          v206 = v2[349];
          swift_bridgeObjectRelease(v2[343]);
          swift_bridgeObjectRelease(v204);
          swift_bridgeObjectRelease(v205);
          swift_bridgeObjectRelease(v206);
          v207 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v207, *(unsigned int *)(v207 + 48), *(unsigned __int16 *)(v207 + 52));
          v30 = JSONEncoder.init()();
          sub_10002EDBC(v203, (uint64_t)(v2 + 378));
          swift_dynamicCast(v2 + 334, v2 + 378, (char *)&type metadata for Any + 8, &type metadata for GetRPEncryptionCertificateRequest, 7);
          v208 = v2[334];
          v209 = v2[335];
          v210 = v2[336];
          v211 = v2[337];
          v212 = v2[338];
          v213 = v2[339];
          v214 = v2[340];
          v215 = v2;
          v216 = v2[341];
          v215[326] = v208;
          v215[327] = v209;
          v215[328] = v210;
          v215[329] = v211;
          v215[330] = v212;
          v215[331] = v213;
          v215[332] = v214;
          v215[333] = v216;
          v217 = sub_100255F94();
          v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v202, &type metadata for GetRPEncryptionCertificateRequest, v217);
          v49 = v218;
          swift_bridgeObjectRelease(v209);
          v219 = v211;
          v4 = v292;
          swift_bridgeObjectRelease(v219);
          swift_bridgeObjectRelease(v213);
          v220 = v216;
          v2 = v215;
          swift_bridgeObjectRelease(v220);
        }
        else if (swift_dynamicCast(v2 + 255, v4, (char *)&type metadata for Any + 8, &type metadata for ClaimValidityRequest, 0))
        {
          v221 = *v293;
          v222 = *(_OWORD *)(v2 + 265);
          *(_OWORD *)(v2 + 247) = *(_OWORD *)(v2 + 263);
          *(_OWORD *)(v2 + 249) = v222;
          v223 = *(_OWORD *)(v2 + 269);
          *(_OWORD *)(v2 + 251) = *(_OWORD *)(v2 + 267);
          *(_OWORD *)(v2 + 253) = v223;
          v224 = *(_OWORD *)(v2 + 257);
          *(_OWORD *)(v2 + 239) = *(_OWORD *)(v2 + 255);
          *(_OWORD *)(v2 + 241) = v224;
          v225 = *(_OWORD *)(v2 + 261);
          *(_OWORD *)(v2 + 243) = *(_OWORD *)(v2 + 259);
          *(_OWORD *)(v2 + 245) = v225;
          sub_1002552C4(v2 + 239);
          v226 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v226, *(unsigned int *)(v226 + 48), *(unsigned __int16 *)(v226 + 52));
          v30 = JSONEncoder.init()();
          sub_10002EDBC(v221, (uint64_t)(v2 + 382));
          swift_dynamicCast(v2 + 207, v2 + 382, (char *)&type metadata for Any + 8, &type metadata for ClaimValidityRequest, 7);
          v227 = *(_OWORD *)(v2 + 215);
          v228 = *(_OWORD *)(v2 + 217);
          *(_OWORD *)(v2 + 279) = v227;
          *(_OWORD *)(v2 + 281) = v228;
          v229 = *(_OWORD *)(v2 + 219);
          v230 = *(_OWORD *)(v2 + 221);
          *(_OWORD *)(v2 + 283) = v229;
          *(_OWORD *)(v2 + 285) = v230;
          v231 = *(_OWORD *)(v2 + 207);
          v232 = *(_OWORD *)(v2 + 209);
          *(_OWORD *)(v2 + 271) = v231;
          *(_OWORD *)(v2 + 273) = v232;
          v233 = *(_OWORD *)(v2 + 211);
          v234 = *(_OWORD *)(v2 + 213);
          *(_OWORD *)(v2 + 275) = v233;
          *(_OWORD *)(v2 + 277) = v234;
          *(_OWORD *)(v2 + 235) = v229;
          *(_OWORD *)(v2 + 237) = v230;
          *(_OWORD *)(v2 + 231) = v227;
          *(_OWORD *)(v2 + 233) = v228;
          *(_OWORD *)(v2 + 227) = v233;
          *(_OWORD *)(v2 + 229) = v234;
          *(_OWORD *)(v2 + 223) = v231;
          *(_OWORD *)(v2 + 225) = v232;
          v235 = sub_100255F50();
          v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v2 + 223, &type metadata for ClaimValidityRequest, v235);
          v49 = v236;
          sub_1002552C4(v2 + 271);
        }
        else
        {
          if (!swift_dynamicCast(v2[419], v4, (char *)&type metadata for Any + 8, v2[416], 0))
          {
            v242 = v2[415];
            v243 = v2[414];
            v244 = v2[413];
            v245 = v2[402];
            v298 = v2[401];
            v299 = 0;
            v246 = (_QWORD *)v2[400];
            v300 = 0xE000000000000000;
            _StringGuts.grow(_:)(23);
            swift_bridgeObjectRelease(v300);
            v299 = 0xD000000000000015;
            v300 = 0x8000000100540C30;
            v247 = v246[3];
            v248 = sub_10000806C(v246, v247);
            DynamicType = swift_getDynamicType(v248, v247, 1);
            v250._countAndFlagsBits = _typeName(_:qualified:)(DynamicType, 0);
            object = v250._object;
            String.append(_:)(v250);
            swift_bridgeObjectRelease(object);
            v252 = v299;
            v253 = v300;
            (*(void (**)(uint64_t, _QWORD, uint64_t))(v243 + 104))(v242, enum case for DIPError.Code.badLogic(_:), v244);
            v254 = sub_100004828((uint64_t *)&unk_1006325A0);
            v255 = sub_100004828((uint64_t *)&unk_100633440);
            v256 = *(_QWORD *)(v255 - 8);
            v257 = *(_QWORD *)(v256 + 72);
            v258 = *(unsigned __int8 *)(v256 + 80);
            v259 = v4;
            v260 = (v258 + 32) & ~v258;
            v261 = swift_allocObject(v254, v260 + v257, v258 | 7);
            *(_OWORD *)(v261 + 16) = xmmword_10051FFB0;
            v262 = v261 + v260;
            v263 = (_QWORD *)(v262 + *(int *)(v255 + 48));
            v264 = enum case for DIPError.PropertyKey.serverURL(_:);
            v265 = type metadata accessor for DIPError.PropertyKey(0);
            v266 = v262;
            v267 = v259;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v265 - 8) + 104))(v266, v264, v265);
            v263[3] = &type metadata for String;
            *v263 = v298;
            v263[1] = v245;
            swift_bridgeObjectRetain(v245);
            v268 = sub_10011D314(v261);
            v269 = type metadata accessor for DIPError(0);
            v270 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            v271 = swift_allocError(v269, v270, 0, 0);
            v272 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v252, v253, 0, v242, 0, v268, 0xD000000000000054, 0x8000000100557710, 0xD000000000000042, 0x8000000100557900, 729);
            swift_willThrow(v272);
            v112 = v2[415];
            v113 = v2[414];
            v295 = v2[413];
            v114 = v2[402];
            v115 = v271;
            v116 = v2[401];
            _s8coreidvd24DigitalPresentmentHelperVwxx_0(v267);
            v117 = sub_100004828((uint64_t *)&unk_1006325A0);
            v118 = sub_100004828((uint64_t *)&unk_100633440);
            v119 = *(_QWORD *)(v118 - 8);
            v120 = *(_QWORD *)(v119 + 72);
            v121 = *(unsigned __int8 *)(v119 + 80);
            v122 = (v121 + 32) & ~v121;
            v123 = swift_allocObject(v117, v122 + v120, v121 | 7);
            *(_OWORD *)(v123 + 16) = xmmword_10051FFB0;
            v124 = v123 + v122;
            v125 = v2;
            v126 = (_QWORD *)(v124 + *(int *)(v118 + 48));
            v127 = enum case for DIPError.PropertyKey.serverURL(_:);
            v128 = type metadata accessor for DIPError.PropertyKey(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 104))(v124, v127, v128);
            v126[3] = &type metadata for String;
            *v126 = v116;
            v126[1] = v114;
            v2 = v125;
            swift_bridgeObjectRetain(v114);
            swift_errorRetain(v115);
            v129 = sub_10011D314(v123);
            v130 = v112;
            (*(void (**)(uint64_t, _QWORD, uint64_t))(v113 + 104))(v112, enum case for DIPError.Code.internalError(_:), v295);
            v131 = type metadata accessor for DIPError(0);
            v132 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v131, v132, 0, 0);
            v133 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100540C70, v115, v130, 0, v129, 0xD000000000000054, 0x8000000100557710, 0xD000000000000042, 0x8000000100557900, 733);
            swift_willThrow(v133);
            swift_errorRelease(v115);
            goto LABEL_22;
          }
          v237 = v2[418];
          v238 = v2[416];
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v2[417] + 32))(v237, v2[419], v238);
          v239 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v239, *(unsigned int *)(v239 + 48), *(unsigned __int16 *)(v239 + 52));
          v30 = JSONEncoder.init()();
          v240 = sub_100099FFC(&qword_100639B98, &qword_100639B58, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
          v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v237, v238, v240);
          v49 = v241;
          (*(void (**)(_QWORD, _QWORD))(v2[417] + 8))(v2[418], v2[416]);
        }
        goto LABEL_6;
      }
      v104 = v2[422];
      v105 = v2[420];
      v106 = v2[400];
      v107 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v107, *(unsigned int *)(v107 + 48), *(unsigned __int16 *)(v107 + 52));
      v54 = JSONEncoder.init()();
      sub_10002EDBC(v106, (uint64_t)(v2 + 362));
      swift_dynamicCast(v104, v2 + 362, (char *)&type metadata for Any + 8, v105, 7);
      v108 = sub_100099FFC(&qword_100639BB8, &qword_1006384E0, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
      v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v104, v105, v108);
      v49 = v109;
      v57 = v2[423];
      v58 = v2[422];
      v59 = v2[421];
      v60 = v4;
      v61 = v2[420];
    }
  }
  swift_release(v54);
  v110 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
  v110(v58, v61);
  v111 = v61;
  v4 = v60;
  v110(v57, v111);
LABEL_20:
  v134 = v2[411];
  v135 = v2[410];
  v136 = v2[409];
  v137 = v2[402];
  v138 = v2[401];
  v2[443] = v49;
  v2[444] = v47;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v4);
  URL.init(string:)(v138, v137);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v136, 1, v135) == 1)
  {
    v139 = v2[415];
    v140 = v2[414];
    v141 = v2[413];
    v142 = v2[402];
    v143 = v2[401];
    sub_100008030(v2[409], &qword_100630A48);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v140 + 104))(v139, enum case for DIPError.Code.badLogic(_:), v141);
    v144 = sub_100004828((uint64_t *)&unk_1006325A0);
    v145 = sub_100004828((uint64_t *)&unk_100633440);
    v146 = *(_QWORD *)(v145 - 8);
    v147 = *(_QWORD *)(v146 + 72);
    v148 = *(unsigned __int8 *)(v146 + 80);
    v149 = (v148 + 32) & ~v148;
    v150 = swift_allocObject(v144, v149 + v147, v148 | 7);
    *(_OWORD *)(v150 + 16) = xmmword_10051FFB0;
    v151 = v150 + v149;
    v152 = (_QWORD *)(v151 + *(int *)(v145 + 48));
    v153 = enum case for DIPError.PropertyKey.serverURL(_:);
    v154 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 104))(v151, v153, v154);
    v152[3] = &type metadata for String;
    *v152 = v143;
    v152[1] = v142;
    swift_bridgeObjectRetain(v142);
    v155 = sub_10011D314(v150);
    v156 = type metadata accessor for DIPError(0);
    v157 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v156, v157, 0, 0);
    v158 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000013, 0x8000000100540C90, 0, v139, 0, v155, 0xD000000000000054, 0x8000000100557710, 0xD000000000000042, 0x8000000100557900, 737);
    swift_willThrow(v158);
    sub_100007F8C(v47, v49);
LABEL_22:
    v159 = v2[442];
    v160 = v2[439];
    v161 = v2[438];
    v162 = v2[435];
    v163 = v2[434];
    v164 = v2;
    v165 = v2[431];
    v166 = v164[430];
    v167 = v164[427];
    v168 = v164[426];
    v169 = v164[423];
    v274 = v164[422];
    v277 = v164[419];
    v280 = v164[418];
    v284 = v164[415];
    v288 = v164[412];
    v291 = v164[409];
    v296 = v164[408];
    swift_task_dealloc(v159);
    swift_task_dealloc(v160);
    swift_task_dealloc(v161);
    swift_task_dealloc(v162);
    swift_task_dealloc(v163);
    swift_task_dealloc(v165);
    swift_task_dealloc(v166);
    swift_task_dealloc(v167);
    swift_task_dealloc(v168);
    swift_task_dealloc(v169);
    swift_task_dealloc(v274);
    swift_task_dealloc(v277);
    swift_task_dealloc(v280);
    swift_task_dealloc(v284);
    swift_task_dealloc(v288);
    swift_task_dealloc(v291);
    swift_task_dealloc(v296);
    return ((uint64_t (*)(void))v164[1])();
  }
  v171 = v2[412];
  v172 = v2[408];
  v173 = *((_BYTE *)v2 + 3600);
  v174 = v2[403];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v2[411] + 32))(v171, v2[409], v2[410]);
  sub_100022948(v47, v49);
  sub_1004E1380(v171, v174, 0, v173, v172);
  URLRequest.httpMethod.setter(1414745936, 0xE400000000000000);
  v175.value._countAndFlagsBits = 0xD000000000000010;
  v175.value._object = (void *)0x8000000100540CB0;
  v176._countAndFlagsBits = 0x2D746E65746E6F43;
  v176._object = (void *)0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(v175, v176);
  URLRequest.httpBody.setter(v47, v49);
  v297 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + dword_100643F70);
  v177 = (_QWORD *)swift_task_alloc(unk_100643F74);
  v2[445] = v177;
  *v177 = v2;
  v177[1] = sub_1002508AC;
  return v297(v2[408], v2[404], 0, *((_BYTE *)v2 + 3600));
}

uint64_t sub_1002508AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();

  v10 = *v5;
  v11 = *(_QWORD *)(*v5 + 3560);
  *(_QWORD *)(*v5 + 3568) = v4;
  swift_task_dealloc(v11);
  if (v4)
  {
    v12 = sub_100250AC4;
  }
  else
  {
    *(_BYTE *)(v10 + 3601) = a4 & 1;
    *(_QWORD *)(v10 + 3576) = a3;
    *(_QWORD *)(v10 + 3584) = a2;
    *(_QWORD *)(v10 + 3592) = a1;
    v12 = sub_100250944;
  }
  return swift_task_switch(v12, 0, 0);
}

uint64_t sub_100250944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 3536);
  v2 = *(_QWORD *)(v0 + 3512);
  v3 = *(_QWORD *)(v0 + 3504);
  v11 = *(_QWORD *)(v0 + 3480);
  v12 = *(_QWORD *)(v0 + 3472);
  v13 = *(_QWORD *)(v0 + 3448);
  v14 = *(_QWORD *)(v0 + 3440);
  v15 = *(_QWORD *)(v0 + 3416);
  v16 = *(_QWORD *)(v0 + 3408);
  v17 = *(_QWORD *)(v0 + 3384);
  v18 = *(_QWORD *)(v0 + 3376);
  v19 = *(_QWORD *)(v0 + 3352);
  v20 = *(_QWORD *)(v0 + 3344);
  v21 = *(_QWORD *)(v0 + 3320);
  v4 = *(_QWORD *)(v0 + 3296);
  v5 = *(_QWORD *)(v0 + 3288);
  v6 = *(_QWORD *)(v0 + 3280);
  v22 = *(_QWORD *)(v0 + 3272);
  v7 = *(_QWORD *)(v0 + 3264);
  v8 = *(_QWORD *)(v0 + 3256);
  v9 = *(_QWORD *)(v0 + 3248);
  sub_100007F8C(*(_QWORD *)(v0 + 3552), *(_QWORD *)(v0 + 3544));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v4);
  swift_task_dealloc(v22);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 3592), *(_QWORD *)(v0 + 3584), *(_QWORD *)(v0 + 3576), *(unsigned __int8 *)(v0 + 3601));
}

uint64_t sub_100250AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 3296);
  v2 = *(_QWORD *)(v0 + 3288);
  v3 = *(_QWORD *)(v0 + 3280);
  v4 = *(_QWORD *)(v0 + 3264);
  v5 = *(_QWORD *)(v0 + 3256);
  v6 = *(_QWORD *)(v0 + 3248);
  sub_100007F8C(*(_QWORD *)(v0 + 3552), *(_QWORD *)(v0 + 3544));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(_QWORD *)(v0 + 3512);
  v8 = *(_QWORD *)(v0 + 3504);
  v9 = *(_QWORD *)(v0 + 3480);
  v10 = *(_QWORD *)(v0 + 3472);
  v11 = *(_QWORD *)(v0 + 3448);
  v12 = *(_QWORD *)(v0 + 3440);
  v13 = *(_QWORD *)(v0 + 3416);
  v14 = *(_QWORD *)(v0 + 3408);
  v15 = *(_QWORD *)(v0 + 3384);
  v17 = *(_QWORD *)(v0 + 3376);
  v18 = *(_QWORD *)(v0 + 3352);
  v19 = *(_QWORD *)(v0 + 3344);
  v20 = *(_QWORD *)(v0 + 3320);
  v21 = *(_QWORD *)(v0 + 3296);
  v22 = *(_QWORD *)(v0 + 3272);
  v23 = *(_QWORD *)(v0 + 3264);
  swift_task_dealloc(*(_QWORD *)(v0 + 3536));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100250C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  *(_QWORD *)(v6 + 2600) = v5;
  *(_BYTE *)(v6 + 201) = a5;
  *(_QWORD *)(v6 + 2592) = a4;
  *(_QWORD *)(v6 + 2584) = a3;
  *(_QWORD *)(v6 + 2576) = a2;
  *(_QWORD *)(v6 + 2568) = a1;
  v7 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v6 + 2608) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 2616) = v8;
  *(_QWORD *)(v6 + 2624) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v6 + 2632) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 2640) = v10;
  *(_QWORD *)(v6 + 2648) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_100639B58);
  *(_QWORD *)(v6 + 2656) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v6 + 2664) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 2672) = swift_task_alloc(v13);
  *(_QWORD *)(v6 + 2680) = swift_task_alloc(v13);
  *(_QWORD *)(v6 + 2688) = swift_task_alloc(v13);
  v14 = type metadata accessor for IdentityProofingRequestV2(0);
  *(_QWORD *)(v6 + 2696) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004828(&qword_1006384E0);
  *(_QWORD *)(v6 + 2704) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v6 + 2712) = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 2720) = swift_task_alloc(v17);
  *(_QWORD *)(v6 + 2728) = swift_task_alloc(v17);
  v18 = sub_100004828(&qword_100637388);
  *(_QWORD *)(v6 + 2736) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v6 + 2744) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 2752) = swift_task_alloc(v20);
  *(_QWORD *)(v6 + 2760) = swift_task_alloc(v20);
  v21 = sub_100004828(&qword_100639B60);
  *(_QWORD *)(v6 + 2768) = v21;
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v6 + 2776) = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 2784) = swift_task_alloc(v23);
  *(_QWORD *)(v6 + 2792) = swift_task_alloc(v23);
  v24 = type metadata accessor for SharingRegistrationRequest(0);
  *(_QWORD *)(v6 + 2800) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v24 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100004828(&qword_100636628);
  *(_QWORD *)(v6 + 2808) = v25;
  v26 = *(_QWORD *)(v25 - 8);
  *(_QWORD *)(v6 + 2816) = v26;
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 2824) = swift_task_alloc(v27);
  *(_QWORD *)(v6 + 2832) = swift_task_alloc(v27);
  v28 = type metadata accessor for IdentityProofingRequest(0);
  *(_QWORD *)(v6 + 2840) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v28 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100004828(&qword_100636770);
  *(_QWORD *)(v6 + 2848) = v29;
  v30 = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(v6 + 2856) = v30;
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 2864) = swift_task_alloc(v31);
  *(_QWORD *)(v6 + 2872) = swift_task_alloc(v31);
  return swift_task_switch(sub_100250EA8, 0, 0);
}

uint64_t sub_100250EA8()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;

  if ((*(_BYTE *)(v0 + 201) & 1) != 0)
  {
    v1 = &_swiftEmptyDictionarySingleton;
  }
  else
  {
    if (qword_10062F560 != -1)
      swift_once(&qword_10062F560, sub_10041FF94);
    v2 = (id)qword_1006707A8;
    v3 = sub_10041FFC0();
    v5 = v4;
    sub_1001070C4(v3, v4);
    if (v5 == 1)
      sub_1004218D4();
    v6 = sub_10041FFC0();
    v8 = v7;

    v1 = &_swiftEmptyDictionarySingleton;
    if (v8 >= 2)
    {
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(kDIHttpHeaderSEID);
      v11 = v10;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
      v120 = &_swiftEmptyDictionarySingleton;
      sub_100481050(v6, v8, v9, v11, isUniquelyReferenced_nonNull_native);
      v1 = &_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_bridgeObjectRelease(v11);
    }
  }
  v13 = *(_QWORD *)(v0 + 2592);
  if (v13)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 2592));
    v14 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v120 = &_swiftEmptyDictionarySingleton;
    sub_100254890(v13, (uint64_t)sub_100254D34, 0, v14, &v120);
    v1 = v120;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v15 = (_QWORD *)(v0 + 2352);
  sub_10002EDBC(*(_QWORD *)(v0 + 2568), v0 + 2256);
  v16 = sub_100004828(&qword_100639B68);
  v17 = sub_100004828(&qword_100639B70);
  v119 = v0 + 2320;
  if (swift_dynamicCast(v0 + 2152, v0 + 2256, v16, v17, 0))
  {
    sub_10002EDBC(*(_QWORD *)(v0 + 2568), v0 + 2512);
    swift_dynamicCast(v0 + 2112, v0 + 2512, v16, v17, 7);
    v18 = *(_QWORD *)(v0 + 2136);
    v19 = *(_QWORD *)(v0 + 2144);
    sub_10000806C((_QWORD *)(v0 + 2112), v18);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 2112));
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 2152));
    goto LABEL_19;
  }
  if (swift_dynamicCast(*(_QWORD *)(v0 + 2872), v0 + 2256, v16, *(_QWORD *)(v0 + 2848), 0))
  {
    v115 = *(_QWORD *)(v0 + 2872);
    v27 = *(_QWORD *)(v0 + 2864);
    v28 = *(_QWORD *)(v0 + 2856);
    v29 = *(_QWORD *)(v0 + 2848);
    v30 = *(uint64_t **)(v0 + 2840);
    sub_10002EDBC(*(_QWORD *)(v0 + 2568), v0 + 2480);
    swift_dynamicCast(v27, v0 + 2480, v16, v29, 7);
    JWSSignedJSON.payload.getter(v29);
    v31 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v31(v27, v29);
    v20 = *v30;
    v22 = v30[1];
    v24 = v30[2];
    v26 = v30[3];
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
    v32 = type metadata accessor for IdentityProofingRequest;
    v33 = (uint64_t)v30;
    v15 = (_QWORD *)(v0 + 2352);
LABEL_18:
    sub_100035DAC(v33, v32);
    v31(v115, v29);
    goto LABEL_19;
  }
  if (swift_dynamicCast(*(_QWORD *)(v0 + 2832), v0 + 2256, v16, *(_QWORD *)(v0 + 2808), 0))
  {
    v115 = *(_QWORD *)(v0 + 2832);
    v34 = *(_QWORD *)(v0 + 2824);
    v35 = *(_QWORD *)(v0 + 2816);
    v29 = *(_QWORD *)(v0 + 2808);
    v36 = *(uint64_t **)(v0 + 2800);
    sub_10002EDBC(*(_QWORD *)(v0 + 2568), v0 + 2448);
    swift_dynamicCast(v34, v0 + 2448, v16, v29, 7);
    JWSSignedJSON.payload.getter(v29);
    v31 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v37 = v34;
    v15 = (_QWORD *)(v0 + 2352);
    v31(v37, v29);
    v20 = *v36;
    v22 = v36[1];
    v24 = v36[2];
    v26 = v36[3];
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
    v32 = type metadata accessor for SharingRegistrationRequest;
LABEL_17:
    v33 = (uint64_t)v36;
    goto LABEL_18;
  }
  if (swift_dynamicCast(*(_QWORD *)(v0 + 2792), v0 + 2256, v16, *(_QWORD *)(v0 + 2768), 0))
  {
    v116 = *(_QWORD *)(v0 + 2792);
    v56 = *(_QWORD *)(v0 + 2784);
    v57 = *(_QWORD *)(v0 + 2776);
    v58 = *(_QWORD *)(v0 + 2768);
    sub_10002EDBC(*(_QWORD *)(v0 + 2568), v0 + 2384);
    swift_dynamicCast(v56, v0 + 2384, v16, v58, 7);
    JWSSignedJSON.payload.getter(v58);
    v59 = *(_OWORD *)(v0 + 1152);
    *(_OWORD *)(v0 + 1280) = *(_OWORD *)(v0 + 1136);
    *(_OWORD *)(v0 + 1296) = v59;
    *(_OWORD *)(v0 + 1312) = *(_OWORD *)(v0 + 1168);
    v60 = *(_OWORD *)(v0 + 1088);
    *(_OWORD *)(v0 + 1216) = *(_OWORD *)(v0 + 1072);
    *(_OWORD *)(v0 + 1232) = v60;
    v61 = *(_OWORD *)(v0 + 1120);
    *(_OWORD *)(v0 + 1248) = *(_OWORD *)(v0 + 1104);
    *(_OWORD *)(v0 + 1264) = v61;
    v62 = *(_OWORD *)(v0 + 1056);
    *(_OWORD *)(v0 + 1184) = *(_OWORD *)(v0 + 1040);
    *(_OWORD *)(v0 + 1200) = v62;
    v63 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v63(v56, v58);
    v20 = *(_QWORD *)(v0 + 1184);
    v22 = *(_QWORD *)(v0 + 1192);
    v24 = *(_QWORD *)(v0 + 1200);
    v26 = *(_QWORD *)(v0 + 1208);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
    sub_1002554EC((_QWORD *)(v0 + 1184));
    v63(v116, v58);
  }
  else if (swift_dynamicCast(*(_QWORD *)(v0 + 2760), v0 + 2256, v16, *(_QWORD *)(v0 + 2736), 0))
  {
    v117 = *(_QWORD *)(v0 + 2760);
    v64 = *(_QWORD *)(v0 + 2752);
    v65 = *(_QWORD *)(v0 + 2744);
    v66 = *(_QWORD *)(v0 + 2736);
    sub_10002EDBC(*(_QWORD *)(v0 + 2568), v0 + 2288);
    swift_dynamicCast(v64, v0 + 2288, v16, v66, 7);
    JWSSignedJSON.payload.getter(v66);
    v67 = *(_OWORD *)(v0 + 1440);
    *(_OWORD *)(v0 + 1560) = *(_OWORD *)(v0 + 1424);
    *(_OWORD *)(v0 + 1576) = v67;
    *(_QWORD *)(v0 + 1592) = *(_QWORD *)(v0 + 1456);
    v68 = *(_OWORD *)(v0 + 1376);
    *(_OWORD *)(v0 + 1496) = *(_OWORD *)(v0 + 1360);
    *(_OWORD *)(v0 + 1512) = v68;
    v69 = *(_OWORD *)(v0 + 1408);
    *(_OWORD *)(v0 + 1528) = *(_OWORD *)(v0 + 1392);
    *(_OWORD *)(v0 + 1544) = v69;
    v70 = *(_OWORD *)(v0 + 1344);
    *(_OWORD *)(v0 + 1464) = *(_OWORD *)(v0 + 1328);
    *(_OWORD *)(v0 + 1480) = v70;
    v71 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    v71(v64, v66);
    v20 = *(_QWORD *)(v0 + 1464);
    v22 = *(_QWORD *)(v0 + 1472);
    v24 = *(_QWORD *)(v0 + 1480);
    v26 = *(_QWORD *)(v0 + 1488);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
    sub_100255438((_QWORD *)(v0 + 1464));
    v71(v117, v66);
  }
  else
  {
    if (swift_dynamicCast(*(_QWORD *)(v0 + 2728), v0 + 2256, v16, *(_QWORD *)(v0 + 2704), 0))
    {
      v115 = *(_QWORD *)(v0 + 2728);
      v72 = *(_QWORD *)(v0 + 2720);
      v73 = *(_QWORD *)(v0 + 2712);
      v29 = *(_QWORD *)(v0 + 2704);
      v36 = *(uint64_t **)(v0 + 2696);
      sub_10002EDBC(*(_QWORD *)(v0 + 2568), v0 + 2224);
      swift_dynamicCast(v72, v0 + 2224, v16, v29, 7);
      JWSSignedJSON.payload.getter(v29);
      v31 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v74 = v72;
      v15 = (_QWORD *)(v0 + 2352);
      v31(v74, v29);
      v20 = *v36;
      v22 = v36[1];
      v24 = v36[2];
      v26 = v36[3];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v26);
      v32 = type metadata accessor for IdentityProofingRequestV2;
      goto LABEL_17;
    }
    if (swift_dynamicCast(v0 + 400, v0 + 2256, v16, &type metadata for IdentityProofingLivenessConfigRequest, 0))
    {
      v75 = *(_QWORD *)(v0 + 2568);
      v76 = *(_OWORD *)(v0 + 512);
      *(_OWORD *)(v0 + 976) = *(_OWORD *)(v0 + 496);
      *(_OWORD *)(v0 + 992) = v76;
      v77 = *(_OWORD *)(v0 + 544);
      *(_OWORD *)(v0 + 1008) = *(_OWORD *)(v0 + 528);
      *(_OWORD *)(v0 + 1024) = v77;
      v78 = *(_OWORD *)(v0 + 448);
      *(_OWORD *)(v0 + 912) = *(_OWORD *)(v0 + 432);
      *(_OWORD *)(v0 + 928) = v78;
      v79 = *(_OWORD *)(v0 + 480);
      *(_OWORD *)(v0 + 944) = *(_OWORD *)(v0 + 464);
      *(_OWORD *)(v0 + 960) = v79;
      v80 = *(_OWORD *)(v0 + 416);
      *(_OWORD *)(v0 + 880) = *(_OWORD *)(v0 + 400);
      *(_OWORD *)(v0 + 896) = v80;
      sub_100255370((_QWORD *)(v0 + 880));
      v81 = v75;
      v15 = (_QWORD *)(v0 + 2352);
      sub_10002EDBC(v81, v0 + 2416);
      swift_dynamicCast(v0 + 720, v0 + 2416, v16, &type metadata for IdentityProofingLivenessConfigRequest, 7);
      v82 = *(_OWORD *)(v0 + 800);
      *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 784);
      *(_OWORD *)(v0 + 640) = v82;
      v83 = *(_OWORD *)(v0 + 768);
      *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 752);
      *(_OWORD *)(v0 + 608) = v83;
      v84 = *(_OWORD *)(v0 + 864);
      *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 848);
      *(_OWORD *)(v0 + 704) = v84;
      v85 = *(_OWORD *)(v0 + 832);
      *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 816);
      *(_OWORD *)(v0 + 672) = v85;
      v86 = *(_OWORD *)(v0 + 736);
      *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 720);
      *(_OWORD *)(v0 + 576) = v86;
      v20 = *(_QWORD *)(v0 + 560);
      v22 = *(_QWORD *)(v0 + 568);
      v24 = *(_QWORD *)(v0 + 576);
      v26 = *(_QWORD *)(v0 + 584);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v26);
      sub_100255370((_QWORD *)(v0 + 560));
    }
    else if (swift_dynamicCast(v0 + 1984, v0 + 2256, v16, &type metadata for ClaimValidityRequest, 0))
    {
      v87 = *(_QWORD *)(v0 + 2568);
      v88 = *(_OWORD *)(v0 + 2064);
      *(_OWORD *)(v0 + 1664) = *(_OWORD *)(v0 + 2048);
      *(_OWORD *)(v0 + 1680) = v88;
      v89 = *(_OWORD *)(v0 + 2096);
      *(_OWORD *)(v0 + 1696) = *(_OWORD *)(v0 + 2080);
      *(_OWORD *)(v0 + 1712) = v89;
      v90 = *(_OWORD *)(v0 + 2000);
      *(_OWORD *)(v0 + 1600) = *(_OWORD *)(v0 + 1984);
      *(_OWORD *)(v0 + 1616) = v90;
      v91 = *(_OWORD *)(v0 + 2032);
      *(_OWORD *)(v0 + 1632) = *(_OWORD *)(v0 + 2016);
      *(_OWORD *)(v0 + 1648) = v91;
      sub_1002552C4((_QWORD *)(v0 + 1600));
      v92 = v87;
      v15 = (_QWORD *)(v0 + 2352);
      sub_10002EDBC(v92, v0 + 2192);
      swift_dynamicCast(v0 + 1856, v0 + 2192, v16, &type metadata for ClaimValidityRequest, 7);
      v93 = *(_OWORD *)(v0 + 1904);
      *(_OWORD *)(v0 + 1760) = *(_OWORD *)(v0 + 1888);
      *(_OWORD *)(v0 + 1776) = v93;
      v94 = *(_OWORD *)(v0 + 1872);
      *(_OWORD *)(v0 + 1728) = *(_OWORD *)(v0 + 1856);
      *(_OWORD *)(v0 + 1744) = v94;
      v95 = *(_OWORD *)(v0 + 1968);
      *(_OWORD *)(v0 + 1824) = *(_OWORD *)(v0 + 1952);
      *(_OWORD *)(v0 + 1840) = v95;
      v96 = *(_OWORD *)(v0 + 1936);
      *(_OWORD *)(v0 + 1792) = *(_OWORD *)(v0 + 1920);
      *(_OWORD *)(v0 + 1808) = v96;
      v20 = *(_QWORD *)(v0 + 1728);
      v22 = *(_QWORD *)(v0 + 1736);
      v24 = *(_QWORD *)(v0 + 1744);
      v26 = *(_QWORD *)(v0 + 1752);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v26);
      sub_1002552C4((_QWORD *)(v0 + 1728));
    }
    else
    {
      v97 = swift_dynamicCast(*(_QWORD *)(v0 + 2688), v0 + 2256, v16, *(_QWORD *)(v0 + 2656), 0);
      if ((_DWORD)v97)
      {
        v98 = *(_QWORD *)(v0 + 2680);
        v99 = *(_QWORD *)(v0 + 2664);
        v100 = *(_QWORD *)(v0 + 2656);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v99 + 32))(v98, *(_QWORD *)(v0 + 2688), v100);
        JWSSignedJSON.payload.getter(v100);
        v101 = v100;
        v15 = (_QWORD *)(v0 + 2352);
        (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v98, v101);
        v102 = *(_OWORD *)(v0 + 320);
        *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 304);
        *(_OWORD *)(v0 + 128) = v102;
        v103 = *(_OWORD *)(v0 + 288);
        *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 272);
        *(_OWORD *)(v0 + 96) = v103;
        *(_OWORD *)(v0 + 185) = *(_OWORD *)(v0 + 377);
        v104 = *(_OWORD *)(v0 + 368);
        v105 = *(_OWORD *)(v0 + 336);
        *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 352);
        *(_OWORD *)(v0 + 176) = v104;
        *(_OWORD *)(v0 + 144) = v105;
        v106 = *(_OWORD *)(v0 + 256);
        *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 240);
        *(_OWORD *)(v0 + 64) = v106;
        v107 = *(_OWORD *)(v0 + 224);
        *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 208);
        *(_OWORD *)(v0 + 32) = v107;
        v20 = *(_QWORD *)(v0 + 16);
        v22 = *(_QWORD *)(v0 + 24);
        v24 = *(_QWORD *)(v0 + 32);
        v26 = *(_QWORD *)(v0 + 40);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v26);
        sub_1002551E8((_QWORD *)(v0 + 16));
      }
      else
      {
        v108 = defaultLogger()(v97);
        v109 = Logger.logObject.getter(v108);
        v110 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v109, v110))
        {
          v111 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v111 = 0;
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "unknown topeka request, conversation/request id not added to http header", v111, 2u);
          swift_slowDealloc(v111, -1, -1);
        }
        v112 = *(_QWORD *)(v0 + 2648);
        v113 = *(_QWORD *)(v0 + 2640);
        v114 = *(_QWORD *)(v0 + 2632);

        (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v112, v114);
        v20 = 0;
        v22 = 0;
        v24 = 0;
        v26 = 0;
        v15 = (_QWORD *)(v0 + 2352);
      }
    }
  }
LABEL_19:
  v38 = *(_QWORD *)(v0 + 2672);
  v39 = *(_QWORD *)(v0 + 2656);
  v40 = *(_QWORD **)(v0 + 2568);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 2256));
  v118 = sub_100251EA0(v20, v22, v24, v26, v1);
  *(_QWORD *)(v0 + 2880) = v118;
  swift_bridgeObjectRelease(v1);
  sub_100182A30(v20, v22, v24, v26);
  v41 = v40[3];
  v42 = sub_10000806C(v40, v41);
  *(_QWORD *)(v0 + 2376) = v41;
  v43 = sub_100022234(v15);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v43, v42, v41);
  v44 = v15;
  sub_10002EDBC((uint64_t)v15, v119);
  v45 = swift_dynamicCast(v38, v119, (char *)&type metadata for Any + 8, v39, 6);
  v46 = v45;
  if (v45)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 2664) + 8))(*(_QWORD *)(v0 + 2672), *(_QWORD *)(v0 + 2656));
  v47 = *(_QWORD *)(v0 + 2600);
  v48 = *(_BYTE *)(v0 + 201);
  v49 = *(_QWORD *)(v0 + 2584);
  v50 = *(_QWORD *)(v0 + 2576);
  v51 = *(_QWORD *)(v0 + 2568);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v44);
  v52 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 2888) = v52;
  *(_QWORD *)(v52 + 16) = v50;
  *(_QWORD *)(v52 + 24) = v49;
  *(_QWORD *)(v52 + 32) = v47;
  *(_BYTE *)(v52 + 40) = v46;
  *(_QWORD *)(v52 + 48) = v51;
  *(_QWORD *)(v52 + 56) = v118;
  *(_BYTE *)(v52 + 64) = v48;
  v53 = (_QWORD *)swift_task_alloc(async function pointer to DIPRetrier.retry<A>(operation:)[1]);
  *(_QWORD *)(v0 + 2896) = v53;
  v54 = sub_100004828(&qword_100639B88);
  *v53 = v0;
  v53[1] = sub_100251970;
  return DIPRetrier.retry<A>(operation:)(v0 + 2544, &unk_100639B80, v52, v54);
}

uint64_t sub_100251970()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2896);
  *(_QWORD *)(*v1 + 2904) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100251B34;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 2888);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 2880));
    swift_task_dealloc(v5);
    v4 = sub_1002519E8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002519E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 2864);
  v2 = *(_QWORD *)(v0 + 2840);
  v3 = *(_QWORD *)(v0 + 2832);
  v4 = *(_QWORD *)(v0 + 2824);
  v5 = *(_QWORD *)(v0 + 2800);
  v6 = *(_QWORD *)(v0 + 2792);
  v7 = *(_QWORD *)(v0 + 2784);
  v8 = *(_QWORD *)(v0 + 2760);
  v9 = *(_QWORD *)(v0 + 2752);
  v11 = *(_QWORD *)(v0 + 2728);
  v12 = *(_QWORD *)(v0 + 2720);
  v13 = *(_QWORD *)(v0 + 2696);
  v14 = *(_QWORD *)(v0 + 2688);
  v15 = *(_QWORD *)(v0 + 2680);
  v16 = *(_QWORD *)(v0 + 2672);
  v17 = *(_QWORD *)(v0 + 2648);
  v18 = *(_QWORD *)(v0 + 2624);
  v20 = *(_QWORD *)(v0 + 2552);
  v21 = *(_QWORD *)(v0 + 2544);
  v19 = *(_QWORD *)(v0 + 2560);
  swift_task_dealloc(*(_QWORD *)(v0 + 2872));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v21, v20, v19);
}

uint64_t sub_100251B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v26 = *(_QWORD *)(v0 + 2904);
  v1 = *(_QWORD *)(v0 + 2888);
  v29 = *(_QWORD *)(v0 + 2872);
  v30 = *(_QWORD *)(v0 + 2864);
  v31 = *(_QWORD *)(v0 + 2840);
  v32 = *(_QWORD *)(v0 + 2832);
  v33 = *(_QWORD *)(v0 + 2824);
  v34 = *(_QWORD *)(v0 + 2800);
  v35 = *(_QWORD *)(v0 + 2792);
  v36 = *(_QWORD *)(v0 + 2784);
  v37 = *(_QWORD *)(v0 + 2760);
  v38 = *(_QWORD *)(v0 + 2752);
  v39 = *(_QWORD *)(v0 + 2728);
  v40 = *(_QWORD *)(v0 + 2720);
  v41 = *(_QWORD *)(v0 + 2696);
  v42 = *(_QWORD *)(v0 + 2688);
  v43 = *(_QWORD *)(v0 + 2680);
  v44 = *(_QWORD *)(v0 + 2672);
  v45 = *(_QWORD *)(v0 + 2648);
  v27 = *(_QWORD *)(v0 + 2624);
  v28 = *(_QWORD *)(v0 + 2608);
  v2 = *(_QWORD *)(v0 + 2600);
  v24 = *(_QWORD *)(v0 + 2584);
  v25 = *(_QWORD *)(v0 + 2616);
  v23 = *(_QWORD *)(v0 + 2576);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2880));
  swift_task_dealloc(v1);
  v3 = sub_100004828((uint64_t *)&unk_1006325A0);
  v4 = sub_100004828((uint64_t *)&unk_100633440);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v3, v8 + 2 * v6, v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_1005208D0;
  v10 = v9 + v8;
  v11 = (_QWORD *)(v10 + *(int *)(v4 + 48));
  v12 = enum case for DIPError.PropertyKey.conversationID(_:);
  v13 = type metadata accessor for DIPError.PropertyKey(0);
  v14 = *(void (**)(void))(*(_QWORD *)(v13 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v10, v12, v13);
  v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v11[3] = &type metadata for String;
  *v11 = v15;
  v11[1] = v16;
  v17 = (_QWORD *)(v10 + v6 + *(int *)(v4 + 48));
  v14();
  v17[3] = &type metadata for String;
  *v17 = v23;
  v17[1] = v24;
  swift_errorRetain(v26);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v24);
  v18 = sub_10011D314(v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 104))(v27, enum case for DIPError.Code.internalError(_:), v28);
  v19 = type metadata accessor for DIPError(0);
  v20 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v19, v20, 0, 0);
  v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x80000001005576E0, v26, v27, 0, v18, 0xD000000000000054, 0x8000000100557710, 0xD000000000000033, 0x8000000100557770, 938);
  swift_willThrow(v21);
  swift_errorRelease(v26);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100251EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void *v40;
  __objc2_prop *v41;
  id v42;
  Swift::String v43;
  Swift::String_optional v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint8_t *v51;
  char v52;
  id v53;
  Swift::String v54;
  Swift::String_optional v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  char v63;
  id v64;
  Swift::String v65;
  Swift::String_optional v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  char v74;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;

  v10 = type metadata accessor for Logger(0);
  v80 = *(_QWORD *)(v10 - 8);
  v81 = v10;
  v11 = __chkstk_darwin(v10);
  v12 = __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  v16 = (char *)&v76 - v15;
  if (a5)
    v17 = a5;
  else
    v17 = &_swiftEmptyDictionarySingleton;
  if (!a2)
  {
    swift_bridgeObjectRetain(a5);
    return v17;
  }
  v78 = v14;
  v79 = v13;
  v18 = kDIHttpHeaderConversationID;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kDIHttpHeaderConversationID);
  v21 = v20;
  if (!v17[2])
  {
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRelease(v21);
    goto LABEL_10;
  }
  v22 = v19;
  swift_bridgeObjectRetain(a5);
  sub_1004A8604(v22, v21);
  v24 = v23;
  swift_bridgeObjectRelease(v21);
  if ((v24 & 1) == 0)
  {
LABEL_10:
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v27 = v26;
    swift_bridgeObjectRetain(a2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    v83 = v17;
    sub_100481050(a1, a2, v25, v27, isUniquelyReferenced_nonNull_native);
    v17 = v83;
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v29 = v81;
  v30 = kDIHttpHeaderXRequestID;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(kDIHttpHeaderXRequestID);
  v33 = v32;
  if (v17[2])
  {
    sub_1004A8604(v31, v32);
    v35 = v34;
    swift_bridgeObjectRelease(v33);
    if ((v35 & 1) != 0)
      goto LABEL_16;
  }
  else
  {
    swift_bridgeObjectRelease(v32);
  }
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v38 = v37;
  swift_bridgeObjectRetain(a4);
  v39 = swift_isUniquelyReferenced_nonNull_native(v17);
  v83 = v17;
  sub_100481050(a3, a4, v36, v38, v39);
  v17 = v83;
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(0x8000000000000000);
LABEL_16:
  v40 = (void *)objc_opt_self(NSUserDefaults);
  v41 = &stru_10062A000;
  v42 = objc_msgSend(v40, "standardUserDefaults");
  v43._countAndFlagsBits = 0xD000000000000022;
  v43._object = (void *)0x8000000100557830;
  v44 = NSUserDefaults.internalString(forKey:)(v43);

  if (v44.value._object)
  {
    defaultLogger()(v45);
    v46 = swift_bridgeObjectRetain_n(v44.value._object, 2);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v83 = (_QWORD *)v50;
      v77 = v40;
      *(_DWORD *)v49 = 136315138;
      swift_bridgeObjectRetain(v44.value._object);
      v82 = sub_1000E3AC8(v44.value._countAndFlagsBits, (unint64_t)v44.value._object, (uint64_t *)&v83);
      v41 = &stru_10062A000;
      v40 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v49 + 4);
      swift_bridgeObjectRelease_n(v44.value._object, 3);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Using shortcut response header: %s", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      v51 = v49;
      v29 = v81;
      swift_slowDealloc(v51, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v44.value._object, 2);
    }
    (*(void (**)(char *, uint64_t))(v80 + 8))(v16, v29);
    v52 = swift_isUniquelyReferenced_nonNull_native(v17);
    v83 = v17;
    sub_100481050(v44.value._countAndFlagsBits, (uint64_t)v44.value._object, 0xD00000000000001DLL, 0x80000001005578E0, v52);
    v17 = v83;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v53 = objc_msgSend(v40, v41[130].attr);
  v54._countAndFlagsBits = 0xD000000000000015;
  v54._object = (void *)0x8000000100557860;
  v55 = NSUserDefaults.internalString(forKey:)(v54);

  if (v55.value._object)
  {
    v57 = v78;
    defaultLogger()(v56);
    v58 = swift_bridgeObjectRetain_n(v55.value._object, 2);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.debug.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = swift_slowAlloc(32, -1);
      v83 = (_QWORD *)v62;
      v77 = v40;
      *(_DWORD *)v61 = 136315138;
      swift_bridgeObjectRetain(v55.value._object);
      v82 = sub_1000E3AC8(v55.value._countAndFlagsBits, (unint64_t)v55.value._object, (uint64_t *)&v83);
      v41 = &stru_10062A000;
      v40 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v61 + 4);
      swift_bridgeObjectRelease_n(v55.value._object, 3);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Using IVS-Test header: %s", v61, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v55.value._object, 2);
    }
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v57, v81);
    v63 = swift_isUniquelyReferenced_nonNull_native(v17);
    v83 = v17;
    sub_100481050(v55.value._countAndFlagsBits, (uint64_t)v55.value._object, 0xD000000000000014, 0x80000001005578C0, v63);
    v17 = v83;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v64 = objc_msgSend(v40, v41[130].attr);
  v65._countAndFlagsBits = 0xD000000000000019;
  v65._object = (void *)0x8000000100557880;
  v66 = NSUserDefaults.internalString(forKey:)(v65);

  if (v66.value._object)
  {
    v68 = v79;
    defaultLogger()(v67);
    v69 = swift_bridgeObjectRetain_n(v66.value._object, 2);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.debug.getter(v70);
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = swift_slowAlloc(32, -1);
      v83 = (_QWORD *)v73;
      *(_DWORD *)v72 = 136315138;
      swift_bridgeObjectRetain(v66.value._object);
      v82 = sub_1000E3AC8(v66.value._countAndFlagsBits, (unint64_t)v66.value._object, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v72 + 4);
      swift_bridgeObjectRelease_n(v66.value._object, 3);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Using Magenta-Test header: %s", v72, 0xCu);
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v72, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v66.value._object, 2);
    }
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v68, v81);
    v74 = swift_isUniquelyReferenced_nonNull_native(v17);
    v83 = v17;
    sub_100481050(v66.value._countAndFlagsBits, (uint64_t)v66.value._object, 0xD000000000000018, 0x80000001005578A0, v74);
    v17 = v83;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  return v17;
}

uint64_t sub_100252664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *(_BYTE *)(v8 + 377) = a8;
  *(_QWORD *)(v8 + 168) = a6;
  *(_QWORD *)(v8 + 176) = a7;
  *(_BYTE *)(v8 + 376) = a5;
  *(_QWORD *)(v8 + 152) = a3;
  *(_QWORD *)(v8 + 160) = a4;
  *(_QWORD *)(v8 + 136) = a1;
  *(_QWORD *)(v8 + 144) = a2;
  v9 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v8 + 184) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 192) = v10;
  *(_QWORD *)(v8 + 200) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  *(_QWORD *)(v8 + 208) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 216) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 224) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 232) = swift_task_alloc(v13);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100630A48) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 240) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 248) = swift_task_alloc(v14);
  v15 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 256) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v8 + 264) = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 272) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 280) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 288) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 296) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 304) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 312) = swift_task_alloc(v17);
  return swift_task_switch(sub_1002527A8, 0, 0);
}

uint64_t sub_1002527A8(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = (unsigned __int8 *)(v1 + 47);
  v3 = v1[19];
  defaultLogger()(a1);
  v4 = swift_bridgeObjectRetain_n(v3, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v39 = v1[33];
    v40 = v1[32];
    v41 = v1[39];
    v8 = v1[18];
    v7 = v1[19];
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v42 = v10;
    *(_DWORD *)v9 = 136446210;
    swift_bridgeObjectRetain(v7);
    v1[16] = sub_1000E3AC8(v8, v7, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 17, v9 + 4);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sending topeka post request to %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    v11 = v10;
    v2 = (unsigned __int8 *)(v1 + 47);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v12 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v12(v41, v40);
  }
  else
  {
    v13 = v1[39];
    v14 = v1[32];
    v15 = v1[33];
    swift_bridgeObjectRelease_n(v1[19], 2);

    v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  v1[40] = v12;
  v16 = v1[30];
  v17 = v1[31];
  v18 = v1[26];
  v19 = v1[27];
  sub_100253D20(*v2, v17);
  sub_100038B24(v17, v16, &qword_100630A48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) == 1)
  {
    v20 = v1[19];
    sub_100008030(v1[30], &qword_100630A48);
    swift_bridgeObjectRetain(v20);
    v21 = v1[18];
    v22 = v1[19];
  }
  else
  {
    v24 = v1[28];
    v23 = v1[29];
    v25 = v1[26];
    v26 = v1[27];
    v27 = v1[18];
    v28 = v1[19];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 32))(v23, v1[30], v25);
    URL.appendingPathComponent(_:)(v27, v28);
    v21 = URL.absoluteString.getter(v29);
    v22 = v30;
    v31 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v31(v24, v25);
    v31(v23, v25);
  }
  v1[41] = v22;
  v32 = (_QWORD *)v1[21];
  v33 = v1[22];
  v34 = v32[3];
  v35 = sub_10000806C(v32, v34);
  v1[5] = v34;
  v36 = sub_100022234(v1 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v36, v35, v34);
  v37 = (_QWORD *)swift_task_alloc(dword_100639B44);
  v1[42] = v37;
  *v37 = v1;
  v37[1] = sub_100252AAC;
  return sub_10024F0B4((uint64_t)(v1 + 2), v21, v22, v33, (uint64_t)&off_100601610, v2[1]);
}

uint64_t sub_100252AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v5 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 328);
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 336);
  v5[43] = a1;
  v5[44] = a2;
  v5[45] = a3;
  v5[46] = v3;
  swift_task_dealloc(v6);
  swift_bridgeObjectRelease(v7);
  if (v3)
  {
    v8 = sub_100253530;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v5 + 2);
    v8 = sub_100252B34;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100252B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  NSString v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = objc_opt_self(NSHTTPURLResponse);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  if (!v3)
    goto LABEL_24;
  v4 = (void *)v3;
  v5 = *(id *)(v0 + 360);
  v6 = objc_msgSend(v4, "statusCode");
  if (v6 != (id)428)
  {
    if (v6 == (id)301)
    {
      v7 = defaultLogger()(301);
      v8 = Logger.logObject.getter(v7);
      v10 = static os_log_type_t.info.getter(v8, v9);
      if (os_log_type_enabled(v8, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v10, "Received 301 from server", v11, 2u);
        swift_slowDealloc(v11, -1, -1);
      }
      v12 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
      v13 = *(_QWORD *)(v0 + 304);
      v14 = *(_QWORD *)(v0 + 256);

      v12(v13, v14);
      v15 = String._bridgeToObjectiveC()();
      v16 = objc_msgSend(v4, "valueForHTTPHeaderField:", v15);

      if (v16)
      {
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v19 = v18;

        *(_QWORD *)(v0 + 96) = v17;
        *(_QWORD *)(v0 + 104) = v19;
        v20 = sub_1000B3C38();
        Collection.nilIfEmpty.getter((_QWORD *)(v0 + 48), &type metadata for String, v20);
        v21 = swift_bridgeObjectRelease(v19);
        v22 = *(_QWORD *)(v0 + 56);
        if (v22)
        {
          v23 = *(_QWORD *)(v0 + 48);
          defaultLogger()(v21);
          v24 = swift_bridgeObjectRetain_n(v22, 2);
          v25 = Logger.logObject.getter(v24);
          v26 = static os_log_type_t.debug.getter(v25);
          v27 = os_log_type_enabled(v25, v26);
          v28 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
          v29 = *(_QWORD *)(v0 + 296);
          v30 = *(_QWORD *)(v0 + 256);
          if (v27)
          {
            v113 = *(_QWORD *)(v0 + 296);
            v110 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
            v31 = (uint8_t *)swift_slowAlloc(12, -1);
            v32 = swift_slowAlloc(32, -1);
            v116 = v32;
            *(_DWORD *)v31 = 136446210;
            swift_bridgeObjectRetain(v22);
            *(_QWORD *)(v0 + 120) = sub_1000E3AC8(v23, v22, &v116);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v31 + 4);
            swift_bridgeObjectRelease_n(v22, 3);
            _os_log_impl((void *)&_mh_execute_header, v25, v26, "Received 301 server response with location header %{public}s", v31, 0xCu);
            swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v32, -1, -1);
            swift_slowDealloc(v31, -1, -1);

            v110(v113, v30);
          }
          else
          {
            swift_bridgeObjectRelease_n(v22, 2);

            v28(v29, v30);
          }
          sub_100255954(v23, v22, *(_BYTE *)(v0 + 376));
          swift_bridgeObjectRelease(v22);
        }
      }
      v86 = *(_QWORD *)(v0 + 352);
      v87 = *(void **)(v0 + 360);
      v88 = *(_QWORD *)(v0 + 344);
      v89 = *(_QWORD *)(v0 + 248);
      v90 = *(_QWORD *)(v0 + 200);
      v91 = *(_QWORD *)(v0 + 136);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 104))(v90, enum case for DIPError.Code.httpMovedPermanently(_:), *(_QWORD *)(v0 + 184));
      v92 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v93 = type metadata accessor for DIPError(0);
      v94 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v95 = swift_allocError(v93, v94, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100557810, 0, v90, 0, v92, 0xD000000000000054, 0x8000000100557710, 0xD000000000000033, 0x8000000100557770, 911);

      sub_100007F8C(v88, v86);
      sub_100008030(v89, &qword_100630A48);
      *(_QWORD *)v91 = v95;
      *(_QWORD *)(v91 + 8) = 0;
      *(_BYTE *)(v91 + 16) = 1;
      v66 = (unsigned int *)&enum case for DIPRetrier.RetryResult.retry<A>(_:);
      goto LABEL_28;
    }
    v67 = String._bridgeToObjectiveC()();
    v68 = objc_msgSend(v4, "valueForHTTPHeaderField:", v67);

    if (v68)
    {
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      v71 = v70;

      defaultLogger()(v72);
      v73 = swift_bridgeObjectRetain_n(v71, 2);
      v74 = Logger.logObject.getter(v73);
      v75 = static os_log_type_t.debug.getter(v74);
      v76 = os_log_type_enabled(v74, v75);
      v77 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
      v78 = *(_QWORD *)(v0 + 272);
      v79 = *(_QWORD *)(v0 + 256);
      if (v76)
      {
        v111 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
        v80 = (uint8_t *)swift_slowAlloc(12, -1);
        v108 = v79;
        v81 = v69;
        v82 = swift_slowAlloc(32, -1);
        v116 = v82;
        *(_DWORD *)v80 = 136446210;
        swift_bridgeObjectRetain(v71);
        *(_QWORD *)(v0 + 112) = sub_1000E3AC8(v81, v71, &v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v80 + 4);
        swift_bridgeObjectRelease_n(v71, 3);
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "Content-Location header set to %{public}s", v80, 0xCu);
        swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
        v83 = v82;
        v69 = v81;
        swift_slowDealloc(v83, -1, -1);
        swift_slowDealloc(v80, -1, -1);

        v111(v78, v108);
      }
      else
      {
        swift_bridgeObjectRelease_n(v71, 2);

        v77(v78, v79);
      }
      sub_100255954(v69, v71, *(_BYTE *)(v0 + 376));
      swift_bridgeObjectRelease(v71);
    }

LABEL_24:
    v84 = *(_QWORD *)(v0 + 360);
    v114 = *(_OWORD *)(v0 + 344);
    v85 = *(_QWORD *)(v0 + 136);
    sub_100008030(*(_QWORD *)(v0 + 248), &qword_100630A48);
    *(_OWORD *)v85 = v114;
    *(_QWORD *)(v85 + 16) = v84;
    v66 = (unsigned int *)&enum case for DIPRetrier.RetryResult.success<A>(_:);
    goto LABEL_28;
  }
  v33 = defaultLogger()(428);
  v34 = Logger.logObject.getter(v33);
  v36 = static os_log_type_t.info.getter(v34, v35);
  if (os_log_type_enabled(v34, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v36, "Received 428 from server", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }
  v38 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  v39 = *(_QWORD *)(v0 + 288);
  v40 = *(_QWORD *)(v0 + 256);

  v38(v39, v40);
  v41 = String._bridgeToObjectiveC()();
  v42 = objc_msgSend(v4, "valueForHTTPHeaderField:", v41);

  if (v42)
  {
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    *(_QWORD *)(v0 + 80) = v43;
    *(_QWORD *)(v0 + 88) = v45;
    v46 = sub_1000B3C38();
    Collection.nilIfEmpty.getter((_QWORD *)(v0 + 64), &type metadata for String, v46);
    swift_bridgeObjectRelease(v45);
    v47 = *(_QWORD *)(v0 + 72);
    v48 = swift_bridgeObjectRelease(v47);
    if (v47)
    {
      v49 = defaultLogger()(v48);
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Server indiciated registration is required", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }
      v53 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
      v54 = *(_QWORD *)(v0 + 280);
      v55 = *(_QWORD *)(v0 + 256);

      v53(v54, v55);
      type metadata accessor for DaemonAnalytics(0);
      static DaemonAnalytics.sendPasskitRegistrationEvent(success:preconditionFailed:)(0, 0);
    }
  }
  v56 = *(_QWORD *)(v0 + 352);
  v57 = *(void **)(v0 + 360);
  v58 = *(_QWORD *)(v0 + 344);
  v59 = *(_QWORD *)(v0 + 248);
  v60 = *(_QWORD *)(v0 + 200);
  v61 = *(uint64_t **)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 104))(v60, enum case for DIPError.Code.httpPreconditionRequired(_:), *(_QWORD *)(v0 + 184));
  v62 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v63 = type metadata accessor for DIPError(0);
  v64 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v65 = swift_allocError(v63, v64, 0, 0);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x80000001005577F0, 0, v60, 0, v62, 0xD000000000000054, 0x8000000100557710, 0xD000000000000033, 0x8000000100557770, 920);

  sub_100007F8C(v58, v56);
  sub_100008030(v59, &qword_100630A48);
  *v61 = v65;
  v66 = (unsigned int *)&enum case for DIPRetrier.RetryResult.failure<A>(_:);
LABEL_28:
  v96 = *(_QWORD *)(v0 + 304);
  v97 = *(_QWORD *)(v0 + 312);
  v99 = *(_QWORD *)(v0 + 288);
  v98 = *(_QWORD *)(v0 + 296);
  v101 = *(_QWORD *)(v0 + 272);
  v100 = *(_QWORD *)(v0 + 280);
  v102 = *(_QWORD *)(v0 + 248);
  v107 = *(_QWORD *)(v0 + 240);
  v109 = *(_QWORD *)(v0 + 232);
  v112 = *(_QWORD *)(v0 + 224);
  v115 = *(_QWORD *)(v0 + 200);
  v103 = *(_QWORD *)(v0 + 136);
  v104 = *v66;
  v105 = sub_100004828(&qword_100639B90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 104))(v103, v104, v105);
  swift_task_dealloc(v97);
  swift_task_dealloc(v96);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v107);
  swift_task_dealloc(v109);
  swift_task_dealloc(v112);
  swift_task_dealloc(v115);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100253530()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD **)(v0 + 136);
  sub_100008030(*(_QWORD *)(v0 + 248), &qword_100630A48);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  *v2 = v1;
  v4 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 296);
  v8 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 224);
  v17 = *(_QWORD *)(v0 + 200);
  v10 = *(_QWORD *)(v0 + 136);
  v11 = enum case for DIPRetrier.RetryResult.failure<A>(_:);
  v12 = sub_100004828(&qword_100639B90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v10, v11, v12);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100253650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v6[10] = a5;
  v6[11] = v5;
  v6[8] = a3;
  v6[9] = a4;
  v6[6] = a1;
  v6[7] = a2;
  v7 = type metadata accessor for Logger(0);
  v6[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[13] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[14] = swift_task_alloc(v9);
  v6[15] = swift_task_alloc(v9);
  v6[16] = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006335E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[17] = swift_task_alloc(v10);
  v6[18] = swift_task_alloc(v10);
  return swift_task_switch(sub_100253708, 0, 0);
}

uint64_t sub_100253708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t ObjectType;
  int *v26;
  _QWORD *v27;
  uint64_t (*v28)();
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Strong;
  int *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int *v51;

  sub_10023E9A8(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(void **)(v0 + 72), *(_QWORD **)(v0 + 80), 1);
  *(_QWORD *)(v0 + 152) = v1;
  if (!v1)
    goto LABEL_4;
  v2 = *(_QWORD *)(v0 + 144);
  swift_getErrorValue(v1, v0 + 40, v0 + 16);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_3:
    sub_100008030(*(_QWORD *)(v0 + 144), &qword_1006335E0);
LABEL_4:
    v5 = *(_QWORD *)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 152));
  }
  v10 = *(_QWORD *)(v0 + 136);
  sub_100038B24(*(_QWORD *)(v0 + 144), v10, &qword_1006335E0);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v10, v3);
  if ((_DWORD)v11 == enum case for DIPError.Code.topekaSharedVerifiedClaimNeedsRefresh(_:)
    || (_DWORD)v11 == enum case for DIPError.Code.topekaSharedVerifiedClaimExpired(_:))
  {
    goto LABEL_10;
  }
  if ((_DWORD)v11 == enum case for DIPError.Code.topekaSelfHealDeleteCurrentClaim(_:))
  {
    v29 = defaultLogger()(v11);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Received self heal delete current claim response code from server", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }
    v33 = *(_QWORD *)(v0 + 128);
    v34 = *(_QWORD *)(v0 + 96);
    v35 = *(_QWORD *)(v0 + 104);
    v36 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
    v37 = v36 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer;
    Strong = swift_unknownObjectWeakLoadStrong(v36 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer);
    *(_QWORD *)(v0 + 160) = Strong;
    if (!Strong)
      goto LABEL_3;
    v24 = *(_QWORD **)(v37 + 8);
    ObjectType = swift_getObjectType(Strong);
    v39 = (int *)v24[1];
    v51 = (int *)((char *)v39 + *v39);
    v27 = (_QWORD *)swift_task_alloc(v39[1]);
    *(_QWORD *)(v0 + 168) = v27;
    v28 = sub_100253B70;
    goto LABEL_25;
  }
  if ((_DWORD)v11 == enum case for DIPError.Code.topekaSelfHealDeleteAllClaimsForCurrentProvider(_:))
  {
LABEL_10:
    v13 = sub_100008030(*(_QWORD *)(v0 + 144), &qword_1006335E0);
    v14 = defaultLogger()(v13);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Received self heal delete all claims for current provider response code from server", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    v18 = *(_QWORD *)(v0 + 120);
    v19 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 104);
    v21 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    v22 = v21 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer;
    v23 = swift_unknownObjectWeakLoadStrong(v21 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer);
    *(_QWORD *)(v0 + 176) = v23;
    if (!v23)
      goto LABEL_4;
    v24 = *(_QWORD **)(v22 + 8);
    ObjectType = swift_getObjectType(v23);
    v26 = (int *)v24[2];
    v51 = (int *)((char *)v26 + *v26);
    v27 = (_QWORD *)swift_task_alloc(v26[1]);
    *(_QWORD *)(v0 + 184) = v27;
    v28 = sub_100253C3C;
    goto LABEL_25;
  }
  if ((_DWORD)v11 != enum case for DIPError.Code.topekaSelfHealDeleteEverything(_:))
  {
    (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v0 + 136), v3);
    goto LABEL_3;
  }
  v40 = defaultLogger()(v11);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.debug.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Received self heal delete everything response code from server", v43, 2u);
    swift_slowDealloc(v43, -1, -1);
  }
  v45 = *(_QWORD *)(v0 + 104);
  v44 = *(_QWORD *)(v0 + 112);
  v47 = *(_QWORD *)(v0 + 88);
  v46 = *(_QWORD *)(v0 + 96);

  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
  v48 = v47 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer;
  v49 = swift_unknownObjectWeakLoadStrong(v47 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer);
  *(_QWORD *)(v0 + 192) = v49;
  if (!v49)
    goto LABEL_3;
  v24 = *(_QWORD **)(v48 + 8);
  ObjectType = swift_getObjectType(v49);
  v50 = (int *)v24[3];
  v51 = (int *)((char *)v50 + *v50);
  v27 = (_QWORD *)swift_task_alloc(v50[1]);
  *(_QWORD *)(v0 + 200) = v27;
  v28 = sub_100253CC8;
LABEL_25:
  *v27 = v0;
  v27[1] = v28;
  return ((uint64_t (*)(uint64_t, _QWORD *))v51)(ObjectType, v24);
}

uint64_t sub_100253B70()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));

  return swift_task_switch(sub_100253BC8, 0, 0);
}

uint64_t sub_100253BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100008030(*(_QWORD *)(v0 + 144), &qword_1006335E0);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 152));
}

uint64_t sub_100253C3C()
{
  uint64_t *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = (_QWORD *)*v0;
  v2 = *(void **)(*v0 + 176);
  v8 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 184));

  v3 = v1[17];
  v5 = v1[15];
  v4 = v1[16];
  v6 = v1[14];
  swift_task_dealloc(v1[18]);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(_QWORD))(v8 + 8))(v1[19]);
}

uint64_t sub_100253CC8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 192);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));

  return swift_task_switch(sub_100256578, 0, 0);
}

uint64_t sub_100253D20@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_unfair_lock_s *v55;
  uint64_t v56;
  os_unfair_lock_s *v57;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[3];
  uint64_t v75;
  _OWORD v76[12];
  _BYTE v77[432];
  _QWORD v78[54];
  uint64_t v79[54];
  _QWORD v80[46];
  _BYTE v81[24];

  v72 = a2;
  v3 = type metadata accessor for Logger(0);
  v70 = *(_QWORD *)(v3 - 8);
  v71 = v3;
  v4 = __chkstk_darwin(v3);
  v69 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v65 - v7;
  __chkstk_darwin(v6);
  v66 = (char *)&v65 - v9;
  v10 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v10);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(char **)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v65 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v67 = (char *)&v65 - v17;
  LODWORD(v68) = a1;
  if ((a1 & 1) != 0)
    v18 = 0xD000000000000013;
  else
    v18 = 0xD000000000000010;
  if ((a1 & 1) != 0)
    v19 = 0x80000001005576C0;
  else
    v19 = 0x80000001005576A0;
  v20 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v20, "stringForKey:", v21);

  if (!v22)
  {
    v67 = (char *)v13;
    swift_bridgeObjectRelease(v19);
    v33 = v69;
    if ((v68 & 1) == 0)
    {
LABEL_21:
      if (qword_10062F490 != -1)
        swift_once(&qword_10062F490, sub_100139C84);
      v54 = qword_1006702A0;
      v55 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
      v56 = (uint64_t)&v55[4];
      v57 = v55 + 52;
      os_unfair_lock_lock(v55 + 52);
      sub_100139D14(v56, v54, v76);
      os_unfair_lock_unlock(v57);
      sub_10002581C((uint64_t)v76, (uint64_t)v74);
      sub_10001D410(v76);
      sub_10000806C(v74, v75);
      sub_10010866C((uint64_t)v77);
      sub_1000A1F54((uint64_t)v77, (uint64_t)v78, &qword_100632330);
      if (sub_100035A5C((uint64_t)v78) == 1)
      {
LABEL_24:
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v74);
        return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))v14 + 7))(v72, 1, 1, v67);
      }
      memcpy(v79, v78, sizeof(v79));
      memcpy(v80, &v79[4], 0x169uLL);
      sub_100035A74(v80);
      sub_100035B1C((uint64_t)v77);
      v40 = v80[4];
      v39 = v80[5];
      swift_bridgeObjectRetain(v80[5]);
      sub_100035CC0(v80);
      v38 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(v74);
      goto LABEL_27;
    }
LABEL_12:
    if (qword_10062F490 != -1)
      swift_once(&qword_10062F490, sub_100139C84);
    v34 = qword_1006702A0;
    v35 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
    v36 = (uint64_t)&v35[4];
    v37 = v35 + 52;
    os_unfair_lock_lock(v35 + 52);
    sub_100139D14(v36, v34, v76);
    os_unfair_lock_unlock(v37);
    sub_10002581C((uint64_t)v76, (uint64_t)v74);
    sub_10001D410(v76);
    sub_10000806C(v74, v75);
    sub_10010866C((uint64_t)v77);
    sub_1000A1F54((uint64_t)v77, (uint64_t)v78, &qword_100632330);
    if (sub_100035A5C((uint64_t)v78) == 1)
      goto LABEL_24;
    memcpy(v79, v78, sizeof(v79));
    memcpy(v80, &v79[4], 0x169uLL);
    sub_100035A74(v80);
    sub_100035B1C((uint64_t)v77);
    sub_1000A1F54((uint64_t)&v80[6], (uint64_t)v81, (uint64_t *)&unk_100632610);
    sub_1000DB7AC((uint64_t)v81);
    sub_100035CC0(v80);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v74);
    v38 = sub_1000A1F54((uint64_t)v81, (uint64_t)v76, (uint64_t *)&unk_100632610);
    v39 = *((_QWORD *)&v76[0] + 1);
    if (!*((_QWORD *)&v76[0] + 1))
      return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))v14 + 7))(v72, 1, 1, v67);
    v40 = *(_QWORD *)&v76[0];
LABEL_27:
    defaultLogger()(v38);
    v59 = swift_bridgeObjectRetain_n(v39, 2);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.debug.getter(v60);
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = swift_slowAlloc(32, -1);
      v74[0] = v63;
      *(_DWORD *)v62 = 136446210;
      swift_bridgeObjectRetain(v39);
      v73 = sub_1000E3AC8(v40, v39, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v62 + 4);
      swift_bridgeObjectRelease_n(v39, 3);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Using Topeka base url from config: %{public}s", v62, 0xCu);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v39, 2);
    }
    (*(void (**)(char *, uint64_t))(v70 + 8))(v33, v71);
    URL.init(string:)(v40, v39);
    return swift_bridgeObjectRelease(v39);
  }
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  sub_100399F3C(v23, v25, v12);
  v26 = v13;
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v14 + 6))(v12, 1, v13) == 1)
  {
    v66 = v14;
    v67 = (char *)v13;
    swift_bridgeObjectRelease(v19);
    v27 = sub_100008030((uint64_t)v12, &qword_100630A48);
    defaultLogger()(v27);
    swift_bridgeObjectRetain(v25);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v79[0] = v32;
      *(_DWORD *)v31 = 136446210;
      swift_bridgeObjectRetain(v25);
      v78[0] = sub_1000E3AC8(v23, v25, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v78, &v78[1], v31 + 4);
      swift_bridgeObjectRelease_n(v25, 3);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Not using Topeka base url %{public}s from user defaults because it is not valid", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v25, 2);
    }
    (*(void (**)(char *, uint64_t))(v70 + 8))(v8, v71);
    v33 = v69;
    v14 = v66;
    if ((v68 & 1) == 0)
      goto LABEL_21;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease(v25);
  v41 = v67;
  v69 = (char *)*((_QWORD *)v14 + 4);
  v42 = ((uint64_t (*)(char *, char *, uint64_t))v69)(v67, v12, v13);
  v43 = v66;
  defaultLogger()(v42);
  v44 = v65;
  (*((void (**)(char *, char *, uint64_t))v14 + 2))(v65, v41, v26);
  swift_bridgeObjectRetain(v19);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.debug.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v48 = swift_slowAlloc(22, -1);
    v68 = swift_slowAlloc(64, -1);
    v79[0] = v68;
    *(_DWORD *)v48 = 136315394;
    swift_bridgeObjectRetain(v19);
    v78[0] = sub_1000E3AC8(v18, v19, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v78, &v78[1], v48 + 4);
    swift_bridgeObjectRelease_n(v19, 3);
    *(_WORD *)(v48 + 12) = 2082;
    v50 = URL.absoluteString.getter(v49);
    v52 = v51;
    v78[0] = sub_1000E3AC8(v50, v51, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v78, &v78[1], v48 + 14);
    swift_bridgeObjectRelease(v52);
    (*((void (**)(char *, uint64_t))v14 + 1))(v44, v26);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Using Topeka base url from defaults %s: %{public}s", (uint8_t *)v48, 0x16u);
    v53 = v68;
    swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v48, -1, -1);

    (*(void (**)(char *, uint64_t))(v70 + 8))(v66, v71);
  }
  else
  {
    swift_bridgeObjectRelease_n(v19, 2);
    (*((void (**)(char *, uint64_t))v14 + 1))(v44, v26);

    (*(void (**)(char *, uint64_t))(v70 + 8))(v43, v71);
  }
  v64 = v72;
  ((void (*)(uint64_t, char *, uint64_t))v69)(v72, v67, v26);
  return (*((uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))v14 + 7))(v64, 0, 1, v26);
}

uint64_t sub_10025469C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_redirectRetrier;
  v2 = type metadata accessor for DIPRetrier(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_authRetrier, v2);
  v3(v0 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_retrier, v2);
  return sub_10001D07C(v0 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer);
}

id sub_10025471C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DIPTopekaWebService(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1002547D4()
{
  return type metadata accessor for DIPTopekaWebService(0);
}

uint64_t type metadata accessor for DIPTopekaWebService(uint64_t a1)
{
  uint64_t result;

  result = qword_100639AD8;
  if (!qword_100639AD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DIPTopekaWebService);
  return result;
}

uint64_t sub_100254818(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for DIPRetrier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = &unk_100526B08;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 120);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100254890(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  char v57;
  char v58;
  _QWORD *v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;

  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  v9 = sub_100279B3C();
  if (!v10)
    goto LABEL_23;
  v13 = v9;
  v14 = v10;
  v15 = v12;
  v65 = v11;
  v16 = (_QWORD *)*a5;
  v18 = sub_1004A8604(v9, v10);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) != 0)
    {
      v25 = (_QWORD *)*a5;
      if ((v17 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_10012973C();
      v25 = (_QWORD *)*a5;
      if ((v22 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v25[(v18 >> 6) + 8] |= 1 << v18;
    v30 = (uint64_t *)(v25[6] + 16 * v18);
    *v30 = v13;
    v30[1] = v14;
    v31 = (_QWORD *)(v25[7] + 16 * v18);
    *v31 = v65;
    v31[1] = v15;
    v32 = v25[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v25[2] = v34;
LABEL_13:
    v35 = sub_100279B3C();
    if (v36)
    {
      v39 = v35;
      v40 = v36;
      v41 = v37;
      v42 = v38;
      do
      {
        v51 = (_QWORD *)*a5;
        v52 = sub_1004A8604(v39, v40);
        v54 = v51[2];
        v55 = (v53 & 1) == 0;
        v33 = __OFADD__(v54, v55);
        v56 = v54 + v55;
        if (v33)
          goto LABEL_24;
        v57 = v53;
        if (v51[3] < v56)
        {
          sub_100123948(v56, 1);
          v52 = sub_1004A8604(v39, v40);
          if ((v57 & 1) != (v58 & 1))
            goto LABEL_26;
        }
        v59 = (_QWORD *)*a5;
        if ((v57 & 1) != 0)
        {
          v43 = 16 * v52;
          v44 = (uint64_t *)(v59[7] + 16 * v52);
          v46 = *v44;
          v45 = v44[1];
          swift_bridgeObjectRetain(v45);
          swift_bridgeObjectRelease(v40);
          swift_bridgeObjectRelease(v42);
          v47 = (_QWORD *)(v59[7] + v43);
          swift_bridgeObjectRelease(v47[1]);
          *v47 = v46;
          v47[1] = v45;
        }
        else
        {
          v59[(v52 >> 6) + 8] |= 1 << v52;
          v60 = (uint64_t *)(v59[6] + 16 * v52);
          *v60 = v39;
          v60[1] = v40;
          v61 = (_QWORD *)(v59[7] + 16 * v52);
          *v61 = v41;
          v61[1] = v42;
          v62 = v59[2];
          v33 = __OFADD__(v62, 1);
          v63 = v62 + 1;
          if (v33)
            goto LABEL_25;
          v59[2] = v63;
        }
        v39 = sub_100279B3C();
        v40 = v48;
        v41 = v49;
        v42 = v50;
      }
      while (v48);
    }
LABEL_23:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_1000FBE78(a1);
    return swift_release(a3);
  }
  sub_100123948(v21, a4 & 1);
  v23 = sub_1004A8604(v13, v14);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
    v25 = (_QWORD *)*a5;
    if ((v22 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v26 = (uint64_t *)(v25[7] + 16 * v18);
    v28 = *v26;
    v27 = v26[1];
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v15);
    v29 = (_QWORD *)(v25[7] + 16 * v18);
    swift_bridgeObjectRelease(v29[1]);
    *v29 = v28;
    v29[1] = v27;
    goto LABEL_13;
  }
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100254BDC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100022948(a1, a2);
  sub_1001116FC(a1, a2);
  v5 = v4;
  sub_100007F8C(a1, a2);
  v6 = static String._fromUTF8Repairing(_:)(v5 + 32, *(_QWORD *)(v5 + 16));
  swift_release(v5);
  return v6;
}

uint64_t sub_100254C50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = static String._fromUTF8Repairing(_:)(a1, v4);
  *a3 = result;
  a3[1] = v6;
  return result;
}

_QWORD *sub_100254C88(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = (_QWORD *)__DataStorage._bytes.getter();
  v9 = (uint64_t)result;
  if (result)
  {
    result = (_QWORD *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - (_QWORD)result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  result = sub_100254D68(v9, v15, a4);
  if (v4)
    return (_QWORD *)v16;
  return result;
}

uint64_t sub_100254D34@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

_QWORD *sub_100254D68(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = a3(&v6, a1, v4);
  if (!v3)
    return (_QWORD *)v6;
  return result;
}

uint64_t sub_100254DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (!a1)
    a2 = 0;
  result = static String._fromUTF8Repairing(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

char *sub_100254DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t (*v17)(_QWORD *);
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[5];
  _OWORD v49[12];
  _BYTE v50[432];
  _OWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD *);
  uint64_t v56;

  v43 = a3;
  v44 = a4;
  v46 = a2;
  v47 = a1;
  v45 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v43 - v11);
  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v13 = qword_1006702A0;
  v14 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v15 = (uint64_t)&v14[4];
  v16 = v14 + 52;
  os_unfair_lock_lock(v14 + 52);
  sub_100139D14(v15, v13, v51);
  os_unfair_lock_unlock(v16);
  v17 = v55;
  v18 = v56;
  sub_10002EF2C((uint64_t)v55, v56);
  v19 = sub_10001D410(v51);
  if (v17)
  {
    v20 = (char *)v17(v19);
    sub_10002F034((uint64_t)v17, v18);
  }
  else
  {
    v21 = qword_1006702A0;
    v22 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
    v23 = (uint64_t)&v22[4];
    v24 = v22 + 52;
    os_unfair_lock_lock(v22 + 52);
    sub_100139D14(v23, v21, v49);
    os_unfair_lock_unlock(v24);
    sub_10002581C((uint64_t)v49, (uint64_t)v48);
    sub_10001D410(v49);
    sub_10000806C(v48, v48[3]);
    sub_10010866C((uint64_t)v50);
    sub_1000A1F54((uint64_t)v50, (uint64_t)v51, &qword_100632330);
    if (sub_100035A5C((uint64_t)v51) == 1)
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v48);
      if (qword_10062F5C8 != -1)
        swift_once(&qword_10062F5C8, sub_1004E0C10);
      v25 = sub_1000352C0((uint64_t)v7, (uint64_t)qword_100670848);
      sub_100035DE8(v25, (uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
    }
    else
    {
      v26 = v52;
      v27 = v53;
      v28 = v54;
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v48);
      v29 = (_QWORD *)((char *)v12 + v7[6]);
      sub_100035B1C((uint64_t)v50);
      *v29 = v28;
      v30 = enum case for DIPBackoffStrategy.exponential(_:);
      v31 = type metadata accessor for DIPBackoffStrategy(0);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v29, v30, v31);
      *v12 = v26;
      v12[1] = v27;
      *((_BYTE *)v12 + v7[7]) = 0;
      *((_BYTE *)v12 + v7[8]) = 1;
      *((_BYTE *)v12 + v7[9]) = 0;
      v32 = (_QWORD *)((char *)v12 + v7[10]);
      v33 = v44;
      *v32 = v43;
      v32[1] = v33;
      swift_bridgeObjectRetain(v33);
    }
    v34 = sub_100035DE8((uint64_t)v12, (uint64_t)v10, type metadata accessor for DIPHTTPSession.Configuration);
    v35 = UUID.init()(v34);
    v36 = UUID.uuidString.getter(v35);
    v38 = v37;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v45);
    v39 = objc_allocWithZone((Class)type metadata accessor for DIPTopekaWebService(0));
    v20 = (char *)sub_10024000C(v36, v38, (uint64_t)v10);
    v40 = &v20[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer];
    v41 = v47;
    *((_QWORD *)v40 + 1) = v46;
    swift_unknownObjectWeakAssign(v40, v41);
    sub_100035DAC((uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
  }
  return v20;
}

uint64_t sub_100255150(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_BYTE *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_100639B7C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100007EE8;
  return sub_100252664(a1, v4, v5, v6, v7, v8, v9, v10);
}

_QWORD *sub_1002551E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[13];
  v10 = a1[15];
  v12 = a1[11];
  v13 = a1[17];
  v16 = a1[20];
  v17 = a1[19];
  v14 = a1[22];
  v15 = a1[21];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  sub_10008EF5C(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  sub_1000B52B0(v17, v16, v15, v14);
  return a1;
}

_QWORD *sub_1002552C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v12 = a1[11];
  v9 = a1[13];
  v10 = a1[15];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  sub_10008EF5C(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v12);
  return a1;
}

_QWORD *sub_100255370(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[13];
  v10 = a1[15];
  v12 = a1[11];
  v13 = a1[17];
  v14 = a1[19];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  sub_10008EF5C(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

_QWORD *sub_100255438(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[14];
  v12 = a1[13];
  v13 = a1[11];
  v10 = a1[16];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  sub_10008EF5C(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

_QWORD *sub_1002554EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[13];
  v10 = a1[15];
  v12 = a1[11];
  v13 = a1[17];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  sub_10008EF5C(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void sub_1002555A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for DeviceInformationProvider(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v10 = a2;
  }
  else
  {
    v11 = type metadata accessor for DIPAccountManager(0);
    static DIPAccountManager.sharedInstance.getter(v23, v11);
    v12 = v24;
    v13 = v25;
    sub_10000806C(v23, v24);
    a1 = dispatch thunk of DIPAccountManagerProtocol.appleAuthHeader(_:)(a1, 0, v12, v13);
    v10 = v14;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v23);
  }
  swift_bridgeObjectRetain(a2);
  v16 = DeviceInformationProvider.init()(v15);
  v17 = DeviceInformationProvider.uniqueDeviceID.getter(v16);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (qword_10062F5D8 != -1)
    swift_once(&qword_10062F5D8, sub_1004E424C);
  v20 = qword_100670878;
  swift_bridgeObjectRetain(unk_100670880);
  *a3 = a1;
  a3[1] = v10;
  a3[2] = v17;
  a3[3] = v19;
  a3[4] = v20;
  a3[5] = v21;
}

unint64_t sub_1002556F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23[64];

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v5._object = (void *)0x8000000100557D60;
  v5._countAndFlagsBits = 0xD00000000000001ALL;
  v6 = NSUserDefaults.internalString(forKey:)(v5);
  countAndFlagsBits = v6.value._countAndFlagsBits;

  if (!v6.value._object)
    return 0;
  defaultLogger()(v8);
  v9 = swift_bridgeObjectRetain_n(v6.value._object, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v20 = v6.value._countAndFlagsBits;
    v14 = v13;
    v22 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain(v6.value._object);
    v21 = sub_1000E3AC8(v20, (unint64_t)v6.value._object, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4);
    swift_bridgeObjectRelease_n(v6.value._object, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Using Liveness-Config test header: %s", v12, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    v15 = v14;
    countAndFlagsBits = v20;
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v6.value._object, 2);
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v17 = sub_100004828(&qword_100630AA8);
  inited = swift_initStackObject(v17, v23);
  *(_OWORD *)(inited + 16) = xmmword_10051FFB0;
  *(_QWORD *)(inited + 32) = 0xD000000000000020;
  *(_QWORD *)(inited + 40) = 0x8000000100557D80;
  *(_QWORD *)(inited + 48) = countAndFlagsBits;
  *(_QWORD *)(inited + 56) = v6.value._object;
  return sub_10011DC20(inited);
}

void sub_100255954(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  id v37;
  NSString v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint8_t *v46;
  __n128 v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint8_t *v53;
  id v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  NSString v58;
  NSString v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v6 = type metadata accessor for Logger(0);
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v60 - v11;
  __chkstk_darwin(v10);
  v64 = (char *)&v60 - v13;
  v14 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v14);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v60 - v23;
  v25 = 0xD000000000000010;
  if ((a3 & 1) != 0)
    v25 = 0xD000000000000013;
  v65 = v25;
  if ((a3 & 1) != 0)
    v26 = 0x80000001005576C0;
  else
    v26 = 0x80000001005576A0;
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    sub_100399F3C(a1, a2, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {
      swift_bridgeObjectRelease(v26);
      v27 = sub_100008030((uint64_t)v16, &qword_100630A48);
      defaultLogger()(v27);
      swift_bridgeObjectRetain(a2);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = swift_slowAlloc(32, -1);
        v69 = v32;
        *(_DWORD *)v31 = 136446210;
        swift_bridgeObjectRetain(a2);
        v68 = sub_1000E3AC8(a1, a2, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v31 + 4);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Not setting Topeka base URL to %{public}s because it is not a valid HTTPS url", v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v67);
    }
    else
    {
      swift_bridgeObjectRelease(a2);
      v39 = v24;
      v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v24, v16, v17);
      v41 = v64;
      defaultLogger()(v40);
      v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 16))(v21, v39, v17);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.debug.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = swift_slowAlloc(12, -1);
        v63 = v26;
        v46 = (uint8_t *)v45;
        v62 = swift_slowAlloc(32, -1);
        v69 = v62;
        v47.n128_u64[0] = 136446210;
        *(_DWORD *)v46 = 136446210;
        v61 = v46 + 4;
        v48 = URL.absoluteString.getter(v47);
        v50 = v49;
        v68 = sub_1000E3AC8(v48, v49, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v61);
        swift_bridgeObjectRelease(v50);
        v51 = *(void (**)(char *, uint64_t))(v18 + 8);
        v51(v21, v17);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Setting Topeka base URL to %{public}s", v46, 0xCu);
        v52 = v62;
        swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        v53 = v46;
        v26 = v63;
        swift_slowDealloc(v53, -1, -1);
      }
      else
      {
        v51 = *(void (**)(char *, uint64_t))(v18 + 8);
        v51(v21, v17);
      }

      (*(void (**)(char *, uint64_t))(v66 + 8))(v41, v67);
      v54 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      URL.absoluteString.getter(v55);
      v57 = v56;
      v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v57);
      v59 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v26);
      objc_msgSend(v54, "setObject:forKey:", v58, v59);

      v51(v39, v17);
    }
  }
  else
  {
    v33 = defaultLogger()(v22);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Clearing Topeka base URL", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v66 + 8))(v9, v67);
    v37 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    objc_msgSend(v37, "removeObjectForKey:", v38);

  }
}

unint64_t sub_100255F50()
{
  unint64_t result;

  result = qword_100639BA0;
  if (!qword_100639BA0)
  {
    result = swift_getWitnessTable(&unk_10052B90C, &type metadata for ClaimValidityRequest);
    atomic_store(result, (unint64_t *)&qword_100639BA0);
  }
  return result;
}

unint64_t sub_100255F94()
{
  unint64_t result;

  result = qword_100639BA8;
  if (!qword_100639BA8)
  {
    result = swift_getWitnessTable(&unk_10052B8E4, &type metadata for GetRPEncryptionCertificateRequest);
    atomic_store(result, (unint64_t *)&qword_100639BA8);
  }
  return result;
}

unint64_t sub_100255FD8()
{
  unint64_t result;

  result = qword_100639BB0;
  if (!qword_100639BB0)
  {
    result = swift_getWitnessTable(&unk_10052B8BC, &type metadata for IdentityProofingLivenessConfigRequest);
    atomic_store(result, (unint64_t *)&qword_100639BB0);
  }
  return result;
}

unint64_t sub_10025601C()
{
  unint64_t result;

  result = qword_100639BE0;
  if (!qword_100639BE0)
  {
    result = swift_getWitnessTable(&unk_10052B86C, &type metadata for WorkflowRecommendationRequest);
    atomic_store(result, (unint64_t *)&qword_100639BE0);
  }
  return result;
}

unint64_t sub_100256060()
{
  unint64_t result;

  result = qword_100639BE8;
  if (!qword_100639BE8)
  {
    result = swift_getWitnessTable(&unk_10052B844, &type metadata for RegisterTerminalResponse);
    atomic_store(result, (unint64_t *)&qword_100639BE8);
  }
  return result;
}

uint64_t sub_1002560A4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

unint64_t sub_1002560E0()
{
  unint64_t result;

  result = qword_100639C00;
  if (!qword_100639C00)
  {
    result = swift_getWitnessTable(&unk_10052B81C, &type metadata for GetRPEncryptionCertificateResponse);
    atomic_store(result, (unint64_t *)&qword_100639C00);
  }
  return result;
}

uint64_t sub_100256124()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  v1 = v0[7];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[9]);
    swift_bridgeObjectRelease(v0[11]);
  }
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[19]);
  swift_bridgeObjectRelease(v0[21]);
  return swift_deallocObject(v0, 176, 7);
}

_QWORD *sub_100256194(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[11];
  v12 = a1[13];
  v13 = a1[15];
  v14 = a1[17];
  v10 = a1[19];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  sub_10008F020(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

_QWORD *sub_10025625C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[13];
  v9 = a1[17];
  v10 = a1[18];
  v12 = a1[19];
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  sub_10025631C(v9, v10, v12);
  return a1;
}

uint64_t sub_10025631C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_bridgeObjectRelease(a3);
  return result;
}

uint64_t sub_100256330(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_100639C3C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001D0A0;
  return sub_100244184(a1, v4, v5, v6, v7, v8);
}

_QWORD *sub_1002563B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[12];
  swift_bridgeObjectRetain(a1[6]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_10008F020(v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t *sub_100256438(uint64_t *a1)
{
  sub_10008EF5C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t sub_10025646C()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  v1 = v0[10];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[12]);
    swift_bridgeObjectRelease(v0[14]);
  }
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_1002564BC()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  v1 = v0[7];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[9]);
    swift_bridgeObjectRelease(v0[11]);
  }
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[19]);
  swift_bridgeObjectRelease(v0[20]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

unint64_t sub_100256534()
{
  unint64_t result;

  result = qword_100639C68;
  if (!qword_100639C68)
  {
    result = swift_getWitnessTable(&unk_10052B7A4, &type metadata for LegacyWorkflowRecommendationResponse);
    atomic_store(result, (unint64_t *)&qword_100639C68);
  }
  return result;
}

ValueMetadata *type metadata accessor for Certificate()
{
  return &type metadata for Certificate;
}

uint64_t sub_10025658C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[2];

  v6 = sub_100004828(&qword_100639C88);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000806C(a1, v10);
  v12 = sub_10025698C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Certificate.CodingKeys, &type metadata for Certificate.CodingKeys, v12, v10, v11);
  v14[0] = a2;
  v14[1] = a3;
  sub_100049584();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100256690()
{
  return 1635017060;
}

uint64_t sub_1002566A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100256724(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10025698C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10025674C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10025698C();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100256774@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_100256868(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10025679C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10025658C(a1, *v1, v1[1]);
}

void sub_1002567B4()
{
  const __CFData *isa;
  SecCertificateRef v1;
  uint64_t v2;
  SecCertificateRef v3;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v1 = SecCertificateCreateWithData(kCFAllocatorDefault, isa);

  if (v1)
  {
    v3 = v1;
    type metadata accessor for SecCertificate(0);
    String.init<A>(describing:)(&v3, v2);
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_100256824()
{
  unint64_t result;

  result = qword_100639C70;
  if (!qword_100639C70)
  {
    result = swift_getWitnessTable(&unk_100526B38, &type metadata for Certificate);
    atomic_store(result, (unint64_t *)&qword_100639C70);
  }
  return result;
}

_QWORD *sub_100256868(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v3 = sub_100004828(&qword_100639C78);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10000806C(a1, v7);
  v10 = sub_10025698C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Certificate.CodingKeys, &type metadata for Certificate.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  }
  else
  {
    v11 = sub_100049540();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_10025698C()
{
  unint64_t result;

  result = qword_100639C80;
  if (!qword_100639C80)
  {
    result = swift_getWitnessTable(&unk_100526CDC, &type metadata for Certificate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100639C80);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Certificate.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100256A10 + 4 * byte_100526B20[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100256A30 + 4 * byte_100526B25[v4]))();
}

_BYTE *sub_100256A10(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100256A30(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100256A38(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100256A40(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100256A48(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100256A50(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Certificate.CodingKeys()
{
  return &type metadata for Certificate.CodingKeys;
}

unint64_t sub_100256A70()
{
  unint64_t result;

  result = qword_100639C90;
  if (!qword_100639C90)
  {
    result = swift_getWitnessTable(&unk_100526CB4, &type metadata for Certificate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100639C90);
  }
  return result;
}

unint64_t sub_100256AB8()
{
  unint64_t result;

  result = qword_100639C98;
  if (!qword_100639C98)
  {
    result = swift_getWitnessTable(&unk_100526C24, &type metadata for Certificate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100639C98);
  }
  return result;
}

unint64_t sub_100256B00()
{
  unint64_t result;

  result = qword_100639CA0;
  if (!qword_100639CA0)
  {
    result = swift_getWitnessTable(&unk_100526C4C, &type metadata for Certificate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100639CA0);
  }
  return result;
}

CLLocationAccuracy sub_100256B44()
{
  CLLocationAccuracy result;

  result = kCLLocationAccuracyHundredMeters * 3.0;
  *(double *)&qword_100670330 = kCLLocationAccuracyHundredMeters * 3.0;
  return result;
}

CLLocationAccuracy sub_100256B64()
{
  CLLocationAccuracy result;

  result = kCLLocationAccuracyHundredMeters;
  qword_100670338 = *(_QWORD *)&kCLLocationAccuracyHundredMeters;
  return result;
}

uint64_t sub_100256BD8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t result;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  id v23;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v26;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 | a3)
  {
    v17 = *(NSObject **)&v3[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_serviceQueue];
    v18 = (_QWORD *)swift_allocObject(&unk_10060C7C8, 48, 7);
    v18[2] = v3;
    v18[3] = a3;
    v18[4] = a1;
    v18[5] = a2;
    v19 = swift_allocObject(&unk_10060C7F0, 32, 7);
    *(_QWORD *)(v19 + 16) = sub_100258854;
    *(_QWORD *)(v19 + 24) = v18;
    aBlock[4] = sub_1001AEFEC;
    v26 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100026DC8;
    aBlock[3] = &unk_10060C808;
    v20 = _Block_copy(aBlock);
    v21 = v26;
    swift_bridgeObjectRetain(a2);
    swift_retain(v19);
    v22 = v3;
    v23 = (id)a3;
    swift_release(v21);
    dispatch_sync(v17, v20);
    _Block_release(v20);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v19, "", 84, 51, 32, 1);
    swift_release(v18);
    result = swift_release(v19);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
  else
  {
    v12 = defaultLogger()(v9);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "skipping init as no effective bundles provided", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  return result;
}

void sub_100256DF0(char *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  id v22;
  char *v23;
  NSString v24;
  id v25;
  id v26;
  void *v27;
  NSString v28;
  unsigned int v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint8_t *v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager;
  if (!*(_QWORD *)&a1[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager])
  {
    v40 = v10;
    if (a2)
    {
      v14 = objc_msgSend(a2, "bundlePath");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v16 = v15;

    }
    else
    {
      if (a4)
        v17 = a3;
      else
        v17 = 0;
      if (a4)
        v18 = a4;
      else
        v18 = 0xE000000000000000;
      v41 = 0xD000000000000020;
      v42 = 0x8000000100558410;
      v19 = v18;
      String.append(_:)(*(Swift::String *)&v17);
      v16 = v42;
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v18);
    }
    v20 = *(void **)&a1[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_serviceQueue];
    v21 = objc_allocWithZone((Class)CLLocationManager);
    swift_bridgeObjectRetain(v16);
    v22 = v20;
    v23 = a1;
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    v25 = objc_msgSend(v21, "initWithEffectiveBundlePath:delegate:onQueue:", v24, v23, v22);

    if (v25)
    {
      v26 = v25;
      if ((objc_msgSend(v26, "locationServicesAvailable") & 1) != 0)
      {
        objc_msgSend(v26, "requestWhenInUseAuthorization");
        if (qword_10062F4E0 != -1)
          swift_once(&qword_10062F4E0, sub_100256B64);
        objc_msgSend(v26, "setDistanceFilter:", *(double *)&qword_100670338);
        if (qword_10062F4D8 != -1)
          swift_once(&qword_10062F4D8, sub_100256B44);
        objc_msgSend(v26, "setDesiredAccuracy:", *(double *)&qword_100670330);
        v27 = (void *)objc_opt_self(CLLocationManager);
        v28 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v16);
        v29 = objc_msgSend(v27, "authorizationStatusForBundlePath:", v28);

        v39 = OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_authorizationStatus;
        *(_DWORD *)&v23[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_authorizationStatus] = v29;
        defaultLogger()(v30);
        v31 = v23;
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.debug.getter(v32);
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc(8, -1);
          v38 = v31;
          v35 = v34;
          *(_DWORD *)v34 = 67240192;
          LODWORD(v41) = *(_DWORD *)&v23[v39];
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 4, v34 + 4);

          _os_log_impl((void *)&_mh_execute_header, v32, v33, "init Authorization status is %{public}d", v35, 8u);
          swift_slowDealloc(v35, -1, -1);
        }
        else
        {

          v32 = v31;
        }

        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v40);
        objc_msgSend(v26, "requestLocation");

        goto LABEL_23;
      }

    }
    swift_bridgeObjectRelease(v16);
LABEL_23:
    v36 = *(void **)&a1[v13];
    *(_QWORD *)&a1[v13] = v25;

  }
}

id sub_100257188()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  void (*v8)();
  void *v9;
  uint64_t v10;
  char *v11;
  objc_class *v12;
  _QWORD v14[5];
  uint64_t v15;
  objc_super v16;

  v1 = v0;
  v2 = OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager;
  v3 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager];
  if (!v3)
    goto LABEL_9;
  objc_msgSend(v3, "setDelegate:", 0);
  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
  {
    v4 = *(void **)&v1[v2];
    if (v4)
    {
      objc_msgSend(v4, "stopUpdatingLocation");
      v5 = *(void **)&v1[v2];
LABEL_8:
      *(_QWORD *)&v1[v2] = 0;

LABEL_9:
      v8 = 0;
      v2 = 0;
      goto LABEL_10;
    }
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  v6 = static OS_dispatch_queue.main.getter();
  v2 = swift_allocObject(&unk_10060C840, 24, 7);
  *(_QWORD *)(v2 + 16) = v1;
  v7 = swift_allocObject(&unk_10060C868, 32, 7);
  v8 = sub_100258E9C;
  *(_QWORD *)(v7 + 16) = sub_100258E9C;
  *(_QWORD *)(v7 + 24) = v2;
  v14[4] = sub_1001AEFEC;
  v15 = v7;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100026DC8;
  v14[3] = &unk_10060C880;
  v9 = _Block_copy(v14);
  v10 = v15;
  v11 = v1;
  swift_retain(v7);
  swift_release(v10);
  dispatch_sync(v6, v9);

  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v7, "", 84, 87, 41, 1);
  swift_release(v7);
  if ((v6 & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
LABEL_10:
  sub_10002F034((uint64_t)v8, v2);
  v12 = (objc_class *)type metadata accessor for DIPLocationHelper();
  v16.receiver = v1;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t sub_1002573CC()
{
  return sub_1002577A8((uint64_t)&unk_10060C728, (uint64_t)sub_1002587FC, (uint64_t)&unk_10060C740);
}

uint64_t sub_1002573E8(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD aBlock[5];
  uint64_t v49;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  __chkstk_darwin(v6);
  v45 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  result = __chkstk_darwin(v12);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a1;
  v17 = *(void **)&a1[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location];
  if (!v17)
    goto LABEL_3;
  v18 = v17;
  v43 = v9;
  v19 = v8;
  v20 = v5;
  v21 = v3;
  v22 = v2;
  v23 = v18;
  v24 = objc_msgSend(v18, "timestamp");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

  v26 = Date.timeIntervalSinceNow.getter(v25);
  v2 = v22;
  v3 = v21;
  v5 = v20;
  v8 = v19;
  v9 = v43;
  result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if (v26 <= -600.0)
  {
LABEL_3:
    v27 = defaultLogger()(result);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "requesting location", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
    v31 = (void *)static OS_dispatch_queue.main.getter();
    v32 = swift_allocObject(&unk_10060C778, 24, 7);
    v33 = v44;
    *(_QWORD *)(v32 + 16) = v44;
    aBlock[4] = sub_100258804;
    v49 = v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004AB190;
    aBlock[3] = &unk_10060C790;
    v34 = _Block_copy(aBlock);
    v35 = v49;
    v36 = v33;
    v37 = swift_release(v35);
    v38 = v45;
    static DispatchQoS.unspecified.getter(v37);
    aBlock[0] = _swiftEmptyArrayStorage;
    v39 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v40 = sub_100004828((uint64_t *)&unk_1006308D0);
    v41 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v40, v41, v2, v39);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v5, v34);
    _Block_release(v34);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v38, v47);
  }
  return result;
}

uint64_t sub_10025778C()
{
  return sub_1002577A8((uint64_t)&unk_10060C6D8, (uint64_t)sub_1002587F4, (uint64_t)&unk_10060C6F0);
}

uint64_t sub_1002577A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_serviceQueue];
  v14 = swift_allocObject(a1, 24, 7);
  *(_QWORD *)(v14 + 16) = v3;
  aBlock[4] = a2;
  v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = a3;
  v15 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v3);
  v22 = _swiftEmptyArrayStorage;
  v16 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100004828((uint64_t *)&unk_1006308D0);
  v18 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v7, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

void sub_10025798C(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager);
  if (v1)
  {
    v2 = v1;
    sub_100258568(v2);

  }
}

id sub_1002579D0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "stop updating location", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return objc_msgSend(a1, "stopUpdatingLocation");
}

uint64_t sub_100257AD4()
{
  char *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char *v6;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v9;
  _QWORD aBlock[5];
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  v1 = *(NSObject **)&v0[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_serviceQueue];
  v2 = swift_allocObject(&unk_10060C660, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v12;
  v3 = swift_allocObject(&unk_10060C688, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1002587DC;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_1000C00CC;
  v11 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100026DC8;
  aBlock[3] = &unk_10060C6A0;
  v4 = _Block_copy(aBlock);
  v5 = v11;
  v6 = v0;
  swift_retain(v3);
  swift_release(v5);
  dispatch_sync(v1, v4);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 84, 129, 32, 1);
  result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v9 = v12;
    swift_release(v2);
    return v9;
  }
  return result;
}

void sub_100257C0C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v33 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v33 - v13;
  v15 = defaultLogger()(v12);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "attempting to get location", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v20 = v19(v14, v4);
  if ((*(_DWORD *)(a1 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_authorizationStatus) - 3) >= 2)
  {
    v29 = defaultLogger()(v20);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "No location authorization, returning nothing", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    v19(v11, v4);
  }
  else
  {
    v21 = OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location;
    v22 = *(void **)(a1 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location);
    if (v22)
    {
      v23 = defaultLogger()(v20);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "got location update from delegate", v26, 2u);
        swift_slowDealloc(v26, -1, -1);
      }

      v19(v8, v4);
      v22 = *(void **)(a1 + v21);
    }
    v27 = *a2;
    *a2 = v22;
    v28 = v22;

  }
}

unint64_t sub_100257E8C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  Class *v24;
  uint64_t v25;
  void *v26;
  Class isa;
  uint64_t v28;
  uint64_t v29;
  unint64_t result;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t (*v36)(char *, uint64_t);
  uint64_t v37;
  Class v38;
  uint64_t v39;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v35 - v12;
  v14 = defaultLogger()(v11);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Got a location update", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  v19 = v18(v13, v6);
  defaultLogger()(v19);
  swift_bridgeObjectRetain(a2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v36 = v18;
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = (Class *)swift_slowAlloc(8, -1);
    v37 = v6;
    *(_DWORD *)v23 = 138412290;
    v35 = v23 + 4;
    sub_10001CFF8(0, &qword_100639D58, CLLocation_ptr);
    v25 = v3;
    v26 = a1;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v38 = isa;
    v6 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v35);
    *v24 = isa;
    a1 = v26;
    v3 = v25;
    v18 = v36;
    swift_bridgeObjectRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "locations %@", v23, 0xCu);
    v28 = sub_100004828(&qword_1006308B0);
    swift_arrayDestroy(v24, 1, v28);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(a2);
  }
  v18(v10, v6);
  if (!((unint64_t)a2 >> 62))
  {
    v29 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v29)
      goto LABEL_8;
    return swift_bridgeObjectRelease(a2);
  }
  if (a2 < 0)
    v34 = a2;
  else
    v34 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v29 = _CocoaArrayWrapper.endIndex.getter(v34);
  if (!v29)
    return swift_bridgeObjectRelease(a2);
LABEL_8:
  result = v29 - 1;
  if (__OFSUB__(v29, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_21:
    v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, a2);
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v31 = *(id *)(a2 + 8 * result + 32);
LABEL_13:
    v32 = v31;
    swift_bridgeObjectRelease(a2);
    v33 = *(void **)(v3 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location) = v32;

    return sub_100258568(a1);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DIPLocationHelper()
{
  return objc_opt_self(_TtC8coreidvd17DIPLocationHelper);
}

id sub_100258320(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  id v19;
  void *v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  void *v25;
  objc_super v26;
  _QWORD *v27;

  v24 = a2;
  v25 = (void *)a3;
  v23 = a1;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location] = 0;
  v22[1] = sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  v14 = v3;
  static DispatchQoS.unspecified.getter(v14);
  v27 = _swiftEmptyArrayStorage;
  v15 = sub_100004790((unint64_t *)&qword_10062FF40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_100004828((uint64_t *)&unk_100636400);
  v17 = sub_100025D68((unint64_t *)&qword_10062FF50, (uint64_t *)&unk_100636400);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v16, v17, v8, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v4);
  *(_QWORD *)&v14[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_serviceQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000020, 0x80000001005583E0, v13, v10, v7, 0);
  *(_DWORD *)&v14[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_authorizationStatus] = 0;

  v18 = (objc_class *)type metadata accessor for DIPLocationHelper();
  v26.receiver = v14;
  v26.super_class = v18;
  v19 = objc_msgSendSuper2(&v26, "init");
  v20 = v25;
  sub_100256BD8(v23, v24, (unint64_t)v25);

  return v19;
}

uint64_t sub_100258568(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter();
  v10 = swift_allocObject(&unk_10060C610, 24, 7);
  *(_QWORD *)(v10 + 16) = a1;
  aBlock[4] = sub_100258798;
  v22 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_10060C628;
  v11 = _Block_copy(aBlock);
  v12 = v22;
  v13 = a1;
  v14 = swift_release(v12);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100004828((uint64_t *)&unk_1006308D0);
  v17 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v2, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100258774()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100258798()
{
  uint64_t v0;

  return sub_1002579D0(*(void **)(v0 + 16));
}

uint64_t sub_1002587A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002587B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1002587B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1002587DC()
{
  uint64_t v0;

  sub_100257C0C(*(_QWORD *)(v0 + 16), *(void ***)(v0 + 24));
}

uint64_t sub_1002587E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1002587F4()
{
  uint64_t v0;

  sub_10025798C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1002587FC()
{
  uint64_t v0;

  return sub_1002573E8(*(char **)(v0 + 16));
}

id sub_100258804()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager), "requestLocation");
}

uint64_t sub_100258820()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100258854()
{
  uint64_t v0;

  sub_100256DF0(*(char **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100258860()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100258870(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[3];
  _BYTE v23[8];
  uint64_t v24;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v6);
  swift_errorRetain(a2);
  v9 = swift_errorRetain(a2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v20 = a1;
    v12 = swift_slowAlloc(12, -1);
    v19 = v4;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    v24 = v14;
    *(_DWORD *)v13 = 136446210;
    swift_getErrorValue(a2, v23, v22);
    v15 = Error.localizedDescription.getter(v22[1], v22[2]);
    v17 = v16;
    v21 = sub_1000E3AC8(v15, v16, &v24);
    a1 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v13 + 4);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to update location %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v19);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return sub_100258568(a1);
}

uint64_t sub_100258A6C(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint8_t *v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t result;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  _QWORD *v46;
  uint64_t (*v47)(char *, uint64_t);
  int v48;
  NSObject *v49;
  uint64_t v50;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v47 = (uint64_t (*)(char *, uint64_t))((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v46 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v46 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v46 - v15;
  v17 = defaultLogger()(v14);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = v13;
    v21 = v2;
    v22 = v4;
    v23 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v23 = 67240192;
    v48 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v23 + 4);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Authorization changed. new status %{public}d", v23, 8u);
    v24 = v23;
    v4 = v22;
    v2 = v21;
    v13 = v20;
    swift_slowDealloc(v24, -1, -1);
  }

  v25 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v26 = v25(v16, v4);
  v27 = OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_authorizationStatus;
  *(_DWORD *)(v2 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_authorizationStatus) = a1;
  v28 = *(void **)(v2 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location);
  if (v28)
  {
    v29 = v28;
    defaultLogger()(v29);
    v30 = v29;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = (_QWORD *)swift_slowAlloc(8, -1);
      v47 = v25;
      *(_DWORD *)v33 = 138412290;
      v49 = v30;
      v30 = v30;
      v25 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v33 + 4);
      v34 = v46;
      *v46 = v28;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Location information is already known %@. Will not request again.", v33, 0xCu);
      v35 = sub_100004828(&qword_1006308B0);
      swift_arrayDestroy(v34, 1, v35);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {

      v31 = v30;
    }

    return v25(v13, v4);
  }
  else
  {
    v36 = defaultLogger()(v26);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Location information doesn't exist. Will attempt to make a single location request based on the authorizationStatus", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

    result = v25(v10, v4);
    if ((*(_DWORD *)(v2 + v27) - 3) <= 1)
    {
      v41 = (char *)v47;
      v42 = defaultLogger()(result);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.debug.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Making a single location request", v45, 2u);
        swift_slowDealloc(v45, -1, -1);
      }

      v25(v41, v4);
      return sub_1002573CC();
    }
  }
  return result;
}

void sub_100258E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager), "stopUpdatingLocation");
  v3 = *(void **)(v1 + v2);
  *(_QWORD *)(v1 + v2) = 0;

}

uint64_t sub_100258ED8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100258F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100259458(a1, (uint64_t (*)(_QWORD))&type metadata accessor for Date, a2);
}

uint64_t sub_100258F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, __n128);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  uint64_t v64;

  v58 = a1;
  v1 = type metadata accessor for AnyCodable(0);
  v56 = *(_QWORD *)(v1 - 8);
  v57 = v1;
  __chkstk_darwin(v1);
  v55 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v60 = *(_QWORD *)(v3 - 8);
  v61 = v3;
  v4 = __chkstk_darwin(v3);
  v54 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v50 - v6;
  v8 = sub_100004828(&qword_100630DE8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100639D90);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v59 = (char *)&v50 - v16;
  v17 = type metadata accessor for ISO18013KnownNamespaces(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = ISO18013Response.IssuerSigned.namespaces.getter(v19);
  if (!v22)
    goto LABEL_16;
  v23 = v22;
  v24 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v25 = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
  v53 = v24;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(v24, v25);
  v26 = sub_100004790(&qword_100639DA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces, (uint64_t)&protocol conformance descriptor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter(v17, v26);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  v27 = *((_QWORD *)&v62[0] + 1);
  if (!*(_QWORD *)(v23 + 16) || (v28 = sub_1004A8604(*(uint64_t *)&v62[0], *((uint64_t *)&v62[0] + 1)), (v29 & 1) == 0))
  {
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v23);
    goto LABEL_16;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v28);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v23);
  if (!v30)
  {
LABEL_16:
    v43 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v59, 1, 1, v8);
    goto LABEL_17;
  }
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v32 = v30 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
    v51 = *(_QWORD *)(v9 + 72);
    v52 = v33;
    v50 = v30;
    v34 = swift_bridgeObjectRetain(v30);
    while (1)
    {
      v52(v11, v32, v8, v34);
      v35 = CBOREncodedCBOR.value.getter(v8);
      v36 = ISO18013IssuerSignedItem.elementIdentifier.getter(v35);
      v38 = v37;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v7, v61);
      v39 = sub_100004790(&qword_100639DB0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter(v53, v39);
      v40 = *((_QWORD *)&v62[0] + 1);
      if (v36 == *(_QWORD *)&v62[0] && v38 == *((_QWORD *)&v62[0] + 1))
        break;
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, *(_QWORD *)&v62[0], *((_QWORD *)&v62[0] + 1), 0);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v38);
      if ((v42 & 1) != 0)
        goto LABEL_24;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v32 += v51;
      if (!--v31)
      {
        v30 = v50;
        swift_bridgeObjectRelease(v50);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n(v38, 2);
LABEL_24:
    v30 = v50;
    swift_bridgeObjectRelease(v50);
    v43 = (uint64_t)v59;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v59, v11, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v43, 0, 1, v8);
  }
  else
  {
LABEL_14:
    v43 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v59, 1, 1, v8);
  }
  swift_bridgeObjectRelease(v30);
LABEL_17:
  sub_100038B24(v43, (uint64_t)v15, &qword_100639D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    sub_100008030(v43, &qword_100639D90);
    sub_100008030((uint64_t)v15, &qword_100639D90);
    memset(v62, 0, sizeof(v62));
    v63 = 0;
  }
  else
  {
    v44 = v54;
    CBOREncodedCBOR.value.getter(v8);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    v46 = v55;
    ISO18013IssuerSignedItem.elementValue.getter(v45);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v44, v61);
    AnyCodable.value.getter(v62, v47);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v46, v57);
    sub_100008030(v43, &qword_100639D90);
  }
  v48 = sub_100004828(&qword_100639D98);
  if (swift_dynamicCast(&v64, v62, v48, &type metadata for String, 6))
    return v64;
  else
    return 0;
}

uint64_t sub_10025944C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100259458(a1, (uint64_t (*)(_QWORD))&type metadata accessor for AnyCodableArray, a2);
}

uint64_t sub_100259458@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, __n128);
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_QWORD);
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, __n128);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t (*v67)(_QWORD);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v71[2];
  uint64_t v72;

  v67 = a2;
  v68 = a3;
  v65 = a1;
  v3 = type metadata accessor for AnyCodable(0);
  v63 = *(_QWORD *)(v3 - 8);
  v64 = v3;
  __chkstk_darwin(v3);
  v62 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v69 = *(_QWORD *)(v5 - 8);
  v70 = v5;
  v6 = __chkstk_darwin(v5);
  v61 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v57 - v8;
  v10 = sub_100004828(&qword_100630DE8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004828(&qword_100639D90);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v66 = (char *)&v57 - v18;
  v19 = type metadata accessor for ISO18013KnownNamespaces(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = ISO18013Response.IssuerSigned.namespaces.getter(v21);
  if (!v24)
    goto LABEL_16;
  v25 = v24;
  v26 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v27 = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
  v60 = v26;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(v26, v27);
  v28 = sub_100004790(&qword_100639DA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces, (uint64_t)&protocol conformance descriptor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter(v19, v28);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  v29 = *((_QWORD *)&v71[0] + 1);
  if (!*(_QWORD *)(v25 + 16) || (v30 = sub_1004A8604(*(uint64_t *)&v71[0], *((uint64_t *)&v71[0] + 1)), (v31 & 1) == 0))
  {
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v25);
    goto LABEL_16;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v30);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v25);
  if (!v32)
  {
LABEL_16:
    v45 = (uint64_t)v66;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v66, 1, 1, v10);
    goto LABEL_17;
  }
  v33 = *(_QWORD *)(v32 + 16);
  if (v33)
  {
    v34 = v32 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v35 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
    v58 = *(_QWORD *)(v11 + 72);
    v59 = v35;
    v57 = v32;
    v36 = swift_bridgeObjectRetain(v32);
    while (1)
    {
      v59(v13, v34, v10, v36);
      v37 = CBOREncodedCBOR.value.getter(v10);
      v38 = ISO18013IssuerSignedItem.elementIdentifier.getter(v37);
      v40 = v39;
      (*(void (**)(char *, uint64_t))(v69 + 8))(v9, v70);
      v41 = sub_100004790(&qword_100639DB0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter(v60, v41);
      v42 = *((_QWORD *)&v71[0] + 1);
      if (v38 == *(_QWORD *)&v71[0] && v40 == *((_QWORD *)&v71[0] + 1))
        break;
      v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, *(_QWORD *)&v71[0], *((_QWORD *)&v71[0] + 1), 0);
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v40);
      if ((v44 & 1) != 0)
        goto LABEL_22;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      v34 += v58;
      if (!--v33)
      {
        v32 = v57;
        swift_bridgeObjectRelease(v57);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n(v40, 2);
LABEL_22:
    v56 = v57;
    swift_bridgeObjectRelease(v57);
    v45 = (uint64_t)v66;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v13, v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v45, 0, 1, v10);
    swift_bridgeObjectRelease(v56);
  }
  else
  {
LABEL_14:
    v45 = (uint64_t)v66;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v66, 1, 1, v10);
    swift_bridgeObjectRelease(v32);
  }
LABEL_17:
  v47 = v67;
  v46 = v68;
  sub_100038B24(v45, (uint64_t)v17, &qword_100639D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v17, 1, v10) == 1)
  {
    sub_100008030(v45, &qword_100639D90);
    sub_100008030((uint64_t)v17, &qword_100639D90);
    memset(v71, 0, sizeof(v71));
    v72 = 0;
  }
  else
  {
    v48 = v61;
    CBOREncodedCBOR.value.getter(v10);
    v49 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    v50 = v62;
    ISO18013IssuerSignedItem.elementValue.getter(v49);
    v51 = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v48, v70);
    AnyCodable.value.getter(v71, v51);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v50, v64);
    sub_100008030(v45, &qword_100639D90);
  }
  v52 = sub_100004828(&qword_100639D98);
  v53 = v47(0);
  v54 = swift_dynamicCast(v46, v71, v52, v53, 6);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v46, v54 ^ 1u, 1, v53);
}

uint64_t sub_1002599A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t, __n128);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[2];
  uint64_t v70;

  v64 = a1;
  v66 = a2;
  v2 = type metadata accessor for AnyCodable(0);
  v62 = *(_QWORD *)(v2 - 8);
  v63 = v2;
  __chkstk_darwin(v2);
  v61 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v67 = *(_QWORD *)(v4 - 8);
  v68 = v4;
  v5 = __chkstk_darwin(v4);
  v60 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v55 - v7;
  v9 = sub_100004828(&qword_100630DE8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_100639D90);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v65 = (char *)&v55 - v17;
  v18 = type metadata accessor for ISO18013KnownNamespaces(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = ISO18013Response.IssuerSigned.namespaces.getter(v20);
  if (!v23)
    goto LABEL_16;
  v24 = v23;
  v25 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier(0);
  v26 = sub_100004790(&qword_100639420, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier);
  v59 = v25;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(v25, v26);
  v27 = sub_100004790(&qword_100639DA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces, (uint64_t)&protocol conformance descriptor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter(v18, v27);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v28 = *((_QWORD *)&v69[0] + 1);
  if (!*(_QWORD *)(v24 + 16) || (v29 = sub_1004A8604(*(uint64_t *)&v69[0], *((uint64_t *)&v69[0] + 1)), (v30 & 1) == 0))
  {
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v24);
    goto LABEL_16;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v29);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v24);
  if (!v31)
  {
LABEL_16:
    v44 = (uint64_t)v65;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v65, 1, 1, v9);
    goto LABEL_17;
  }
  v32 = *(_QWORD *)(v31 + 16);
  if (v32)
  {
    v33 = v31 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v34 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
    v57 = *(_QWORD *)(v10 + 72);
    v58 = v34;
    v56 = v31;
    v35 = swift_bridgeObjectRetain(v31);
    while (1)
    {
      v58(v12, v33, v9, v35);
      v36 = CBOREncodedCBOR.value.getter(v9);
      v37 = ISO18013IssuerSignedItem.elementIdentifier.getter(v36);
      v39 = v38;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v8, v68);
      v40 = sub_100004790(&qword_100639DA0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter(v59, v40);
      v41 = *((_QWORD *)&v69[0] + 1);
      if (v37 == *(_QWORD *)&v69[0] && v39 == *((_QWORD *)&v69[0] + 1))
        break;
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, *(_QWORD *)&v69[0], *((_QWORD *)&v69[0] + 1), 0);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v39);
      if ((v43 & 1) != 0)
        goto LABEL_22;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v33 += v57;
      if (!--v32)
      {
        v31 = v56;
        swift_bridgeObjectRelease(v56);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n(v39, 2);
LABEL_22:
    v54 = v56;
    swift_bridgeObjectRelease(v56);
    v44 = (uint64_t)v65;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v65, v12, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v44, 0, 1, v9);
    swift_bridgeObjectRelease(v54);
  }
  else
  {
LABEL_14:
    v44 = (uint64_t)v65;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v65, 1, 1, v9);
    swift_bridgeObjectRelease(v31);
  }
LABEL_17:
  v45 = v66;
  sub_100038B24(v44, (uint64_t)v16, &qword_100639D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1)
  {
    sub_100008030(v44, &qword_100639D90);
    sub_100008030((uint64_t)v16, &qword_100639D90);
    memset(v69, 0, sizeof(v69));
    v70 = 0;
  }
  else
  {
    v46 = v60;
    CBOREncodedCBOR.value.getter(v9);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    v48 = v61;
    ISO18013IssuerSignedItem.elementValue.getter(v47);
    v49 = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v46, v68);
    AnyCodable.value.getter(v69, v49);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v63);
    sub_100008030(v44, &qword_100639D90);
  }
  v50 = sub_100004828(&qword_100639D98);
  v51 = type metadata accessor for AnyCodableArray(0);
  v52 = swift_dynamicCast(v45, v69, v50, v51, 6);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v45, v52 ^ 1u, 1, v51);
}

uint64_t sub_100259EF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, __n128);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  uint64_t v64;

  v58 = a1;
  v1 = type metadata accessor for AnyCodable(0);
  v56 = *(_QWORD *)(v1 - 8);
  v57 = v1;
  __chkstk_darwin(v1);
  v55 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v60 = *(_QWORD *)(v3 - 8);
  v61 = v3;
  v4 = __chkstk_darwin(v3);
  v54 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v50 - v6;
  v8 = sub_100004828(&qword_100630DE8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100639D90);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v59 = (char *)&v50 - v16;
  v17 = type metadata accessor for ISO18013KnownNamespaces(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = ISO18013Response.IssuerSigned.namespaces.getter(v19);
  if (!v22)
    goto LABEL_16;
  v23 = v22;
  v24 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier(0);
  v25 = sub_100004790(&qword_100639420, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier);
  v53 = v24;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(v24, v25);
  v26 = sub_100004790(&qword_100639DA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces, (uint64_t)&protocol conformance descriptor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter(v17, v26);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  v27 = *((_QWORD *)&v62[0] + 1);
  if (!*(_QWORD *)(v23 + 16) || (v28 = sub_1004A8604(*(uint64_t *)&v62[0], *((uint64_t *)&v62[0] + 1)), (v29 & 1) == 0))
  {
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v23);
    goto LABEL_16;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v28);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v23);
  if (!v30)
  {
LABEL_16:
    v43 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v59, 1, 1, v8);
    goto LABEL_17;
  }
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v32 = v30 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
    v51 = *(_QWORD *)(v9 + 72);
    v52 = v33;
    v50 = v30;
    v34 = swift_bridgeObjectRetain(v30);
    while (1)
    {
      v52(v11, v32, v8, v34);
      v35 = CBOREncodedCBOR.value.getter(v8);
      v36 = ISO18013IssuerSignedItem.elementIdentifier.getter(v35);
      v38 = v37;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v7, v61);
      v39 = sub_100004790(&qword_100639DA0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter(v53, v39);
      v40 = *((_QWORD *)&v62[0] + 1);
      if (v36 == *(_QWORD *)&v62[0] && v38 == *((_QWORD *)&v62[0] + 1))
        break;
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, *(_QWORD *)&v62[0], *((_QWORD *)&v62[0] + 1), 0);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v38);
      if ((v42 & 1) != 0)
        goto LABEL_24;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v32 += v51;
      if (!--v31)
      {
        v30 = v50;
        swift_bridgeObjectRelease(v50);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n(v38, 2);
LABEL_24:
    v30 = v50;
    swift_bridgeObjectRelease(v50);
    v43 = (uint64_t)v59;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v59, v11, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v43, 0, 1, v8);
  }
  else
  {
LABEL_14:
    v43 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v59, 1, 1, v8);
  }
  swift_bridgeObjectRelease(v30);
LABEL_17:
  sub_100038B24(v43, (uint64_t)v15, &qword_100639D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    sub_100008030(v43, &qword_100639D90);
    sub_100008030((uint64_t)v15, &qword_100639D90);
    memset(v62, 0, sizeof(v62));
    v63 = 0;
  }
  else
  {
    v44 = v54;
    CBOREncodedCBOR.value.getter(v8);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    v46 = v55;
    ISO18013IssuerSignedItem.elementValue.getter(v45);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v44, v61);
    AnyCodable.value.getter(v62, v47);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v46, v57);
    sub_100008030(v43, &qword_100639D90);
  }
  v48 = sub_100004828(&qword_100639D98);
  if (swift_dynamicCast(&v64, v62, v48, &type metadata for String, 6))
    return v64;
  else
    return 0;
}

uint64_t sub_10025A408(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t, __n128);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  uint64_t v66[3];

  v60 = a1;
  v1 = type metadata accessor for AnyCodable(0);
  v58 = *(_QWORD *)(v1 - 8);
  v59 = v1;
  __chkstk_darwin(v1);
  v57 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v62 = *(_QWORD *)(v3 - 8);
  v63 = v3;
  v4 = __chkstk_darwin(v3);
  v56 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v52 - v6;
  v8 = sub_100004828(&qword_100630DE8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100639D90);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v61 = (char *)&v52 - v16;
  v17 = type metadata accessor for ISO18013KnownNamespaces(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = ISO18013Response.IssuerSigned.namespaces.getter(v19);
  if (!v22)
    goto LABEL_16;
  v23 = v22;
  v24 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier(0);
  v25 = sub_100004790(&qword_100639420, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier);
  v55 = v24;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(v24, v25);
  v26 = sub_100004790(&qword_100639DA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces, (uint64_t)&protocol conformance descriptor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter(v17, v26);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  v27 = *((_QWORD *)&v64[0] + 1);
  if (!*(_QWORD *)(v23 + 16) || (v28 = sub_1004A8604(*(uint64_t *)&v64[0], *((uint64_t *)&v64[0] + 1)), (v29 & 1) == 0))
  {
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v23);
    goto LABEL_16;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v28);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v23);
  if (!v30)
  {
LABEL_16:
    v43 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v61, 1, 1, v8);
    goto LABEL_17;
  }
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v32 = v30 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
    v53 = *(_QWORD *)(v9 + 72);
    v54 = v33;
    v52 = v30;
    v34 = swift_bridgeObjectRetain(v30);
    while (1)
    {
      v54(v11, v32, v8, v34);
      v35 = CBOREncodedCBOR.value.getter(v8);
      v36 = ISO18013IssuerSignedItem.elementIdentifier.getter(v35);
      v38 = v37;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v7, v63);
      v39 = sub_100004790(&qword_100639DA0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter(v55, v39);
      v40 = *((_QWORD *)&v64[0] + 1);
      if (v36 == *(_QWORD *)&v64[0] && v38 == *((_QWORD *)&v64[0] + 1))
        break;
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, *(_QWORD *)&v64[0], *((_QWORD *)&v64[0] + 1), 0);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v38);
      if ((v42 & 1) != 0)
        goto LABEL_24;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v32 += v53;
      if (!--v31)
      {
        v30 = v52;
        swift_bridgeObjectRelease(v52);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n(v38, 2);
LABEL_24:
    v30 = v52;
    swift_bridgeObjectRelease(v52);
    v43 = (uint64_t)v61;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v61, v11, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v43, 0, 1, v8);
  }
  else
  {
LABEL_14:
    v43 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v61, 1, 1, v8);
  }
  swift_bridgeObjectRelease(v30);
LABEL_17:
  sub_100038B24(v43, (uint64_t)v15, &qword_100639D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    sub_100008030(v43, &qword_100639D90);
    sub_100008030((uint64_t)v15, &qword_100639D90);
    memset(v64, 0, sizeof(v64));
    v65 = 0;
  }
  else
  {
    v44 = v56;
    CBOREncodedCBOR.value.getter(v8);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    v46 = v57;
    ISO18013IssuerSignedItem.elementValue.getter(v45);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v44, v63);
    AnyCodable.value.getter(v64, v47);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v59);
    sub_100008030(v43, &qword_100639D90);
  }
  v48 = sub_100004828(&qword_100639D98);
  v49 = swift_dynamicCast(v66, v64, v48, &type metadata for Int, 6);
  v50 = v66[0];
  if (!v49)
    return 0;
  return v50;
}

uint64_t sub_10025A924(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t, __n128);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  uint64_t v66[3];

  v60 = a1;
  v1 = type metadata accessor for AnyCodable(0);
  v58 = *(_QWORD *)(v1 - 8);
  v59 = v1;
  __chkstk_darwin(v1);
  v57 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v62 = *(_QWORD *)(v3 - 8);
  v63 = v3;
  v4 = __chkstk_darwin(v3);
  v56 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v52 - v6;
  v8 = sub_100004828(&qword_100630DE8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100639D90);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v61 = (char *)&v52 - v16;
  v17 = type metadata accessor for ISO18013KnownNamespaces(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = ISO18013Response.IssuerSigned.namespaces.getter(v19);
  if (!v22)
    goto LABEL_16;
  v23 = v22;
  v24 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v25 = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
  v55 = v24;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(v24, v25);
  v26 = sub_100004790(&qword_100639DA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces, (uint64_t)&protocol conformance descriptor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter(v17, v26);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  v27 = *((_QWORD *)&v64[0] + 1);
  if (!*(_QWORD *)(v23 + 16) || (v28 = sub_1004A8604(*(uint64_t *)&v64[0], *((uint64_t *)&v64[0] + 1)), (v29 & 1) == 0))
  {
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v23);
    goto LABEL_16;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v28);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v23);
  if (!v30)
  {
LABEL_16:
    v43 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v61, 1, 1, v8);
    goto LABEL_17;
  }
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v32 = v30 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
    v53 = *(_QWORD *)(v9 + 72);
    v54 = v33;
    v52 = v30;
    v34 = swift_bridgeObjectRetain(v30);
    while (1)
    {
      v54(v11, v32, v8, v34);
      v35 = CBOREncodedCBOR.value.getter(v8);
      v36 = ISO18013IssuerSignedItem.elementIdentifier.getter(v35);
      v38 = v37;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v7, v63);
      v39 = sub_100004790(&qword_100639DB0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter(v55, v39);
      v40 = *((_QWORD *)&v64[0] + 1);
      if (v36 == *(_QWORD *)&v64[0] && v38 == *((_QWORD *)&v64[0] + 1))
        break;
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, *(_QWORD *)&v64[0], *((_QWORD *)&v64[0] + 1), 0);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v38);
      if ((v42 & 1) != 0)
        goto LABEL_24;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v32 += v53;
      if (!--v31)
      {
        v30 = v52;
        swift_bridgeObjectRelease(v52);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n(v38, 2);
LABEL_24:
    v30 = v52;
    swift_bridgeObjectRelease(v52);
    v43 = (uint64_t)v61;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v61, v11, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v43, 0, 1, v8);
  }
  else
  {
LABEL_14:
    v43 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v61, 1, 1, v8);
  }
  swift_bridgeObjectRelease(v30);
LABEL_17:
  sub_100038B24(v43, (uint64_t)v15, &qword_100639D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    sub_100008030(v43, &qword_100639D90);
    sub_100008030((uint64_t)v15, &qword_100639D90);
    memset(v64, 0, sizeof(v64));
    v65 = 0;
  }
  else
  {
    v44 = v56;
    CBOREncodedCBOR.value.getter(v8);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    v46 = v57;
    ISO18013IssuerSignedItem.elementValue.getter(v45);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v44, v63);
    AnyCodable.value.getter(v64, v47);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v59);
    sub_100008030(v43, &qword_100639D90);
  }
  v48 = sub_100004828(&qword_100639D98);
  v49 = swift_dynamicCast(v66, v64, v48, &type metadata for Int, 6);
  v50 = v66[0];
  if (!v49)
    return 0;
  return v50;
}

double sub_10025AE40@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  double result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, __n128);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[2];
  uint64_t v68;

  v62 = a1;
  v64 = a2;
  v2 = type metadata accessor for AnyCodable(0);
  v60 = *(_QWORD *)(v2 - 8);
  v61 = v2;
  __chkstk_darwin(v2);
  v59 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v65 = *(_QWORD *)(v4 - 8);
  v66 = v4;
  v5 = __chkstk_darwin(v4);
  v58 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v53 - v7;
  v9 = sub_100004828(&qword_100630DE8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_100639D90);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v63 = (char *)&v53 - v17;
  v18 = type metadata accessor for ISO18013KnownNamespaces(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = ISO18013Response.IssuerSigned.namespaces.getter(v20);
  if (!v23)
    goto LABEL_16;
  v24 = v23;
  v25 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v26 = sub_100004790(&qword_100639418, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
  v57 = v25;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(v25, v26);
  v27 = sub_100004790(&qword_100639DA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces, (uint64_t)&protocol conformance descriptor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter(v18, v27);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v28 = *((_QWORD *)&v67[0] + 1);
  if (!*(_QWORD *)(v24 + 16) || (v29 = sub_1004A8604(*(uint64_t *)&v67[0], *((uint64_t *)&v67[0] + 1)), (v30 & 1) == 0))
  {
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v24);
    goto LABEL_16;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v29);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v24);
  if (!v31)
  {
LABEL_16:
    v44 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v63, 1, 1, v9);
    goto LABEL_17;
  }
  v32 = *(_QWORD *)(v31 + 16);
  if (v32)
  {
    v33 = v31 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v34 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
    v55 = *(_QWORD *)(v10 + 72);
    v56 = v34;
    v54 = v31;
    v35 = swift_bridgeObjectRetain(v31);
    while (1)
    {
      v56(v12, v33, v9, v35);
      v36 = CBOREncodedCBOR.value.getter(v9);
      v37 = ISO18013IssuerSignedItem.elementIdentifier.getter(v36);
      v39 = v38;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v8, v66);
      v40 = sub_100004790(&qword_100639DB0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter(v57, v40);
      v41 = *((_QWORD *)&v67[0] + 1);
      if (v37 == *(_QWORD *)&v67[0] && v39 == *((_QWORD *)&v67[0] + 1))
        break;
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, *(_QWORD *)&v67[0], *((_QWORD *)&v67[0] + 1), 0);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v39);
      if ((v43 & 1) != 0)
        goto LABEL_24;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v33 += v55;
      if (!--v32)
      {
        v31 = v54;
        swift_bridgeObjectRelease(v54);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n(v39, 2);
LABEL_24:
    v52 = v54;
    swift_bridgeObjectRelease(v54);
    v44 = (uint64_t)v63;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v63, v12, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v44, 0, 1, v9);
    swift_bridgeObjectRelease(v52);
  }
  else
  {
LABEL_14:
    v44 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v63, 1, 1, v9);
    swift_bridgeObjectRelease(v31);
  }
LABEL_17:
  v45 = v64;
  sub_100038B24(v44, (uint64_t)v16, &qword_100639D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1)
  {
    sub_100008030(v44, &qword_100639D90);
    sub_100008030((uint64_t)v16, &qword_100639D90);
    memset(v67, 0, sizeof(v67));
    v68 = 0;
  }
  else
  {
    v46 = v58;
    CBOREncodedCBOR.value.getter(v9);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    v48 = v59;
    ISO18013IssuerSignedItem.elementValue.getter(v47);
    v49 = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v46, v66);
    AnyCodable.value.getter(v67, v49);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v48, v61);
    sub_100008030(v44, &qword_100639D90);
  }
  v50 = sub_100004828(&qword_100639D98);
  if ((swift_dynamicCast(v45, v67, v50, &type metadata for Data, 6) & 1) == 0)
  {
    result = 0.0;
    *v45 = xmmword_100520790;
  }
  return result;
}

uint64_t sub_10025B374(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, __n128);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  uint64_t v64;

  v58 = a1;
  v1 = type metadata accessor for AnyCodable(0);
  v56 = *(_QWORD *)(v1 - 8);
  v57 = v1;
  __chkstk_darwin(v1);
  v55 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v60 = *(_QWORD *)(v3 - 8);
  v61 = v3;
  v4 = __chkstk_darwin(v3);
  v54 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v50 - v6;
  v8 = sub_100004828(&qword_100630DE8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100639D90);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v59 = (char *)&v50 - v16;
  v17 = type metadata accessor for ISO18013KnownNamespaces(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = ISO18013Response.IssuerSigned.namespaces.getter(v19);
  if (!v22)
    goto LABEL_16;
  v23 = v22;
  v24 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
  v25 = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
  v53 = v24;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(v24, v25);
  v26 = sub_100004790(&qword_100639DA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces, (uint64_t)&protocol conformance descriptor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter(v17, v26);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  v27 = *((_QWORD *)&v62[0] + 1);
  if (!*(_QWORD *)(v23 + 16) || (v28 = sub_1004A8604(*(uint64_t *)&v62[0], *((uint64_t *)&v62[0] + 1)), (v29 & 1) == 0))
  {
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v23);
    goto LABEL_16;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v28);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v23);
  if (!v30)
  {
LABEL_16:
    v43 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v59, 1, 1, v8);
    goto LABEL_17;
  }
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v32 = v30 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
    v51 = *(_QWORD *)(v9 + 72);
    v52 = v33;
    v50 = v30;
    v34 = swift_bridgeObjectRetain(v30);
    while (1)
    {
      v52(v11, v32, v8, v34);
      v35 = CBOREncodedCBOR.value.getter(v8);
      v36 = ISO18013IssuerSignedItem.elementIdentifier.getter(v35);
      v38 = v37;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v7, v61);
      v39 = sub_100004790(&qword_100639DC0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter(v53, v39);
      v40 = *((_QWORD *)&v62[0] + 1);
      if (v36 == *(_QWORD *)&v62[0] && v38 == *((_QWORD *)&v62[0] + 1))
        break;
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, *(_QWORD *)&v62[0], *((_QWORD *)&v62[0] + 1), 0);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v38);
      if ((v42 & 1) != 0)
        goto LABEL_24;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v32 += v51;
      if (!--v31)
      {
        v30 = v50;
        swift_bridgeObjectRelease(v50);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n(v38, 2);
LABEL_24:
    v30 = v50;
    swift_bridgeObjectRelease(v50);
    v43 = (uint64_t)v59;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v59, v11, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v43, 0, 1, v8);
  }
  else
  {
LABEL_14:
    v43 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v59, 1, 1, v8);
  }
  swift_bridgeObjectRelease(v30);
LABEL_17:
  sub_100038B24(v43, (uint64_t)v15, &qword_100639D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    sub_100008030(v43, &qword_100639D90);
    sub_100008030((uint64_t)v15, &qword_100639D90);
    memset(v62, 0, sizeof(v62));
    v63 = 0;
  }
  else
  {
    v44 = v54;
    CBOREncodedCBOR.value.getter(v8);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    v46 = v55;
    ISO18013IssuerSignedItem.elementValue.getter(v45);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v44, v61);
    AnyCodable.value.getter(v62, v47);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v46, v57);
    sub_100008030(v43, &qword_100639D90);
  }
  v48 = sub_100004828(&qword_100639D98);
  if (swift_dynamicCast(&v64, v62, v48, &type metadata for String, 6))
    return v64;
  else
    return 0;
}

uint64_t sub_10025B88C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t, __n128);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  uint64_t v66[3];

  v60 = a1;
  v1 = type metadata accessor for AnyCodable(0);
  v58 = *(_QWORD *)(v1 - 8);
  v59 = v1;
  __chkstk_darwin(v1);
  v57 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v62 = *(_QWORD *)(v3 - 8);
  v63 = v3;
  v4 = __chkstk_darwin(v3);
  v56 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v52 - v6;
  v8 = sub_100004828(&qword_100630DE8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100639D90);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v61 = (char *)&v52 - v16;
  v17 = type metadata accessor for ISO18013KnownNamespaces(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = ISO18013Response.IssuerSigned.namespaces.getter(v19);
  if (!v22)
    goto LABEL_16;
  v23 = v22;
  v24 = type metadata accessor for ISO23220_1_ElementIdentifier(0);
  v25 = sub_100004790(&qword_100634A80, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_ElementIdentifier);
  v55 = v24;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(v24, v25);
  v26 = sub_100004790(&qword_100639DA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces, (uint64_t)&protocol conformance descriptor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter(v17, v26);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  v27 = *((_QWORD *)&v64[0] + 1);
  if (!*(_QWORD *)(v23 + 16) || (v28 = sub_1004A8604(*(uint64_t *)&v64[0], *((uint64_t *)&v64[0] + 1)), (v29 & 1) == 0))
  {
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v23);
    goto LABEL_16;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v28);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v23);
  if (!v30)
  {
LABEL_16:
    v43 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v61, 1, 1, v8);
    goto LABEL_17;
  }
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v32 = v30 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
    v53 = *(_QWORD *)(v9 + 72);
    v54 = v33;
    v52 = v30;
    v34 = swift_bridgeObjectRetain(v30);
    while (1)
    {
      v54(v11, v32, v8, v34);
      v35 = CBOREncodedCBOR.value.getter(v8);
      v36 = ISO18013IssuerSignedItem.elementIdentifier.getter(v35);
      v38 = v37;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v7, v63);
      v39 = sub_100004790(&qword_100639DC8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter(v55, v39);
      v40 = *((_QWORD *)&v64[0] + 1);
      if (v36 == *(_QWORD *)&v64[0] && v38 == *((_QWORD *)&v64[0] + 1))
        break;
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, *(_QWORD *)&v64[0], *((_QWORD *)&v64[0] + 1), 0);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v38);
      if ((v42 & 1) != 0)
        goto LABEL_24;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v32 += v53;
      if (!--v31)
      {
        v30 = v52;
        swift_bridgeObjectRelease(v52);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n(v38, 2);
LABEL_24:
    v30 = v52;
    swift_bridgeObjectRelease(v52);
    v43 = (uint64_t)v61;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v61, v11, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v43, 0, 1, v8);
  }
  else
  {
LABEL_14:
    v43 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v61, 1, 1, v8);
  }
  swift_bridgeObjectRelease(v30);
LABEL_17:
  sub_100038B24(v43, (uint64_t)v15, &qword_100639D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    sub_100008030(v43, &qword_100639D90);
    sub_100008030((uint64_t)v15, &qword_100639D90);
    memset(v64, 0, sizeof(v64));
    v65 = 0;
  }
  else
  {
    v44 = v56;
    CBOREncodedCBOR.value.getter(v8);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    v46 = v57;
    ISO18013IssuerSignedItem.elementValue.getter(v45);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v44, v63);
    AnyCodable.value.getter(v64, v47);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v59);
    sub_100008030(v43, &qword_100639D90);
  }
  v48 = sub_100004828(&qword_100639D98);
  v49 = swift_dynamicCast(v66, v64, v48, &type metadata for Int, 6);
  v50 = v66[0];
  if (!v49)
    return 0;
  return v50;
}

double sub_10025BDA8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  double result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, __n128);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[2];
  uint64_t v68;

  v62 = a1;
  v64 = a2;
  v2 = type metadata accessor for AnyCodable(0);
  v60 = *(_QWORD *)(v2 - 8);
  v61 = v2;
  __chkstk_darwin(v2);
  v59 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v65 = *(_QWORD *)(v4 - 8);
  v66 = v4;
  v5 = __chkstk_darwin(v4);
  v58 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v53 - v7;
  v9 = sub_100004828(&qword_100630DE8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_100639D90);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v63 = (char *)&v53 - v17;
  v18 = type metadata accessor for ISO18013KnownNamespaces(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = ISO18013Response.IssuerSigned.namespaces.getter(v20);
  if (!v23)
    goto LABEL_16;
  v24 = v23;
  v25 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
  v26 = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
  v57 = v25;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(v25, v26);
  v27 = sub_100004790(&qword_100639DA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces, (uint64_t)&protocol conformance descriptor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter(v18, v27);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v28 = *((_QWORD *)&v67[0] + 1);
  if (!*(_QWORD *)(v24 + 16) || (v29 = sub_1004A8604(*(uint64_t *)&v67[0], *((uint64_t *)&v67[0] + 1)), (v30 & 1) == 0))
  {
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v24);
    goto LABEL_16;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v29);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v24);
  if (!v31)
  {
LABEL_16:
    v44 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v63, 1, 1, v9);
    goto LABEL_17;
  }
  v32 = *(_QWORD *)(v31 + 16);
  if (v32)
  {
    v33 = v31 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v34 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
    v55 = *(_QWORD *)(v10 + 72);
    v56 = v34;
    v54 = v31;
    v35 = swift_bridgeObjectRetain(v31);
    while (1)
    {
      v56(v12, v33, v9, v35);
      v36 = CBOREncodedCBOR.value.getter(v9);
      v37 = ISO18013IssuerSignedItem.elementIdentifier.getter(v36);
      v39 = v38;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v8, v66);
      v40 = sub_100004790(&qword_100639DC0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter(v57, v40);
      v41 = *((_QWORD *)&v67[0] + 1);
      if (v37 == *(_QWORD *)&v67[0] && v39 == *((_QWORD *)&v67[0] + 1))
        break;
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, *(_QWORD *)&v67[0], *((_QWORD *)&v67[0] + 1), 0);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v39);
      if ((v43 & 1) != 0)
        goto LABEL_24;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v33 += v55;
      if (!--v32)
      {
        v31 = v54;
        swift_bridgeObjectRelease(v54);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n(v39, 2);
LABEL_24:
    v52 = v54;
    swift_bridgeObjectRelease(v54);
    v44 = (uint64_t)v63;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v63, v12, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v44, 0, 1, v9);
    swift_bridgeObjectRelease(v52);
  }
  else
  {
LABEL_14:
    v44 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v63, 1, 1, v9);
    swift_bridgeObjectRelease(v31);
  }
LABEL_17:
  v45 = v64;
  sub_100038B24(v44, (uint64_t)v16, &qword_100639D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1)
  {
    sub_100008030(v44, &qword_100639D90);
    sub_100008030((uint64_t)v16, &qword_100639D90);
    memset(v67, 0, sizeof(v67));
    v68 = 0;
  }
  else
  {
    v46 = v58;
    CBOREncodedCBOR.value.getter(v9);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    v48 = v59;
    ISO18013IssuerSignedItem.elementValue.getter(v47);
    v49 = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v46, v66);
    AnyCodable.value.getter(v67, v49);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v48, v61);
    sub_100008030(v44, &qword_100639D90);
  }
  v50 = sub_100004828(&qword_100639D98);
  if ((swift_dynamicCast(v45, v67, v50, &type metadata for Data, 6) & 1) == 0)
  {
    result = 0.0;
    *v45 = xmmword_100520790;
  }
  return result;
}

uint64_t sub_10025C2DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t, __n128);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[2];
  uint64_t v70;

  v64 = a1;
  v66 = a2;
  v2 = type metadata accessor for AnyCodable(0);
  v62 = *(_QWORD *)(v2 - 8);
  v63 = v2;
  __chkstk_darwin(v2);
  v61 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v67 = *(_QWORD *)(v4 - 8);
  v68 = v4;
  v5 = __chkstk_darwin(v4);
  v60 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v55 - v7;
  v9 = sub_100004828(&qword_100630DE8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_100639D90);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v65 = (char *)&v55 - v17;
  v18 = type metadata accessor for ISO18013KnownNamespaces(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = ISO18013Response.IssuerSigned.namespaces.getter(v20);
  if (!v23)
    goto LABEL_16;
  v24 = v23;
  v25 = type metadata accessor for ISO23220_1_ElementIdentifier(0);
  v26 = sub_100004790(&qword_100634A80, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_ElementIdentifier);
  v59 = v25;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(v25, v26);
  v27 = sub_100004790(&qword_100639DA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces, (uint64_t)&protocol conformance descriptor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter(v18, v27);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v28 = *((_QWORD *)&v69[0] + 1);
  if (!*(_QWORD *)(v24 + 16) || (v29 = sub_1004A8604(*(uint64_t *)&v69[0], *((uint64_t *)&v69[0] + 1)), (v30 & 1) == 0))
  {
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v24);
    goto LABEL_16;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v29);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v24);
  if (!v31)
  {
LABEL_16:
    v44 = (uint64_t)v65;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v65, 1, 1, v9);
    goto LABEL_17;
  }
  v32 = *(_QWORD *)(v31 + 16);
  if (v32)
  {
    v33 = v31 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v34 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
    v57 = *(_QWORD *)(v10 + 72);
    v58 = v34;
    v56 = v31;
    v35 = swift_bridgeObjectRetain(v31);
    while (1)
    {
      v58(v12, v33, v9, v35);
      v36 = CBOREncodedCBOR.value.getter(v9);
      v37 = ISO18013IssuerSignedItem.elementIdentifier.getter(v36);
      v39 = v38;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v8, v68);
      v40 = sub_100004790(&qword_100639DC8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter(v59, v40);
      v41 = *((_QWORD *)&v69[0] + 1);
      if (v37 == *(_QWORD *)&v69[0] && v39 == *((_QWORD *)&v69[0] + 1))
        break;
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, *(_QWORD *)&v69[0], *((_QWORD *)&v69[0] + 1), 0);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v39);
      if ((v43 & 1) != 0)
        goto LABEL_22;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v33 += v57;
      if (!--v32)
      {
        v31 = v56;
        swift_bridgeObjectRelease(v56);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n(v39, 2);
LABEL_22:
    v54 = v56;
    swift_bridgeObjectRelease(v56);
    v44 = (uint64_t)v65;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v65, v12, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v44, 0, 1, v9);
    swift_bridgeObjectRelease(v54);
  }
  else
  {
LABEL_14:
    v44 = (uint64_t)v65;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v65, 1, 1, v9);
    swift_bridgeObjectRelease(v31);
  }
LABEL_17:
  v45 = v66;
  sub_100038B24(v44, (uint64_t)v16, &qword_100639D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1)
  {
    sub_100008030(v44, &qword_100639D90);
    sub_100008030((uint64_t)v16, &qword_100639D90);
    memset(v69, 0, sizeof(v69));
    v70 = 0;
  }
  else
  {
    v46 = v60;
    CBOREncodedCBOR.value.getter(v9);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    v48 = v61;
    ISO18013IssuerSignedItem.elementValue.getter(v47);
    v49 = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v46, v68);
    AnyCodable.value.getter(v69, v49);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v63);
    sub_100008030(v44, &qword_100639D90);
  }
  v50 = sub_100004828(&qword_100639D98);
  v51 = type metadata accessor for Date(0);
  v52 = swift_dynamicCast(v45, v69, v50, v51, 6);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v45, v52 ^ 1u, 1, v51);
}

uint64_t sub_10025C828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  Swift::String v37;
  void *object;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;

  v71 = a3;
  v75 = a1;
  v65 = a4;
  v5 = type metadata accessor for DIPError.Code(0);
  v68 = *(_QWORD *)(v5 - 8);
  v69 = v5;
  __chkstk_darwin(v5);
  v70 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale.Region(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v66 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v65 - v11;
  v13 = type metadata accessor for ISO18013Response.IssuerSigned(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v65 - v17;
  v19 = type metadata accessor for MobileDocumentType.Identifier(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = a2;
  MobileDocumentType.storage.getter(v21);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v23, v19);
  if (v24 == enum case for MobileDocumentType.Identifier.nationalIDCard(_:))
  {
    (*(void (**)(char *, uint64_t))(v20 + 96))(v23, v19);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v23, v7);
    v25 = v66;
    Locale.Region.init(stringLiteral:)(20554, 0xE200000000000000);
    v26 = sub_100004790((unint64_t *)&unk_100633500, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.Region, (uint64_t)&protocol conformance descriptor for Locale.Region);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)(v25, v12, v7, v26);
    v28 = *(void (**)(char *, uint64_t))(v8 + 8);
    v28(v25, v7);
    v28(v12, v7);
    if ((v27 & 1) != 0)
    {
      v29 = v72;
      v30 = v75;
      v31 = v67;
      sub_10025CEA4(v72, (uint64_t)v16);
      if (v31)
        swift_bridgeObjectRelease(v71);
      else
        sub_100260328((uint64_t)v16, v71, v65);
      v61 = type metadata accessor for MobileDocumentType(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v29, v61);
      v62 = type metadata accessor for ISO18013Response(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v30, v62);
      v49 = v23;
    }
    else
    {
      swift_bridgeObjectRelease(v71);
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v25, v23, v7);
      v73 = 0;
      v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v35._countAndFlagsBits = 0xD000000000000026;
      v35._object = (void *)0x800000010054C140;
      String.append(_:)(v35);
      v37._countAndFlagsBits = Locale.Region.identifier.getter(v36);
      object = v37._object;
      String.append(_:)(v37);
      swift_bridgeObjectRelease(object);
      v39._countAndFlagsBits = 0xD000000000000013;
      v39._object = (void *)0x800000010054C170;
      String.append(_:)(v39);
      v40 = v73;
      v41 = v74;
      v42 = v70;
      (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v70, enum case for DIPError.Code.documentReaderUnsupportedNationalIDCardRegion(_:), v69);
      v43 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v44 = type metadata accessor for DIPError(0);
      v45 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v44, v45, 0, 0);
      v46 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v40, v41, 0, v42, 0, v43, 0xD000000000000087, 0x8000000100558440, 0xD000000000000036, 0x80000001005584D0, 33);
      swift_willThrow(v46);
      v47 = type metadata accessor for MobileDocumentType(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v72, v47);
      v48 = type metadata accessor for ISO18013Response(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v75, v48);
      v49 = v25;
    }
    return ((uint64_t (*)(char *, uint64_t))v28)(v49, v7);
  }
  else if (v24 == enum case for MobileDocumentType.Identifier.driversLicense(_:))
  {
    v32 = v72;
    v33 = v75;
    v34 = v67;
    sub_10025CEA4(v72, (uint64_t)v18);
    if (v34)
      swift_bridgeObjectRelease(v71);
    else
      sub_10025D298((uint64_t)v18, v71, v65);
    v63 = type metadata accessor for MobileDocumentType(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v32, v63);
    v64 = type metadata accessor for ISO18013Response(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v33, v64);
  }
  else
  {
    swift_bridgeObjectRelease(v71);
    v73 = 0;
    v74 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v50._countAndFlagsBits = 0xD00000000000001ALL;
    v50._object = (void *)0x80000001005412E0;
    String.append(_:)(v50);
    v51 = type metadata accessor for MobileDocumentType(0);
    v52 = v72;
    _print_unlocked<A, B>(_:_:)(v72, &v73, v51, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v53 = v74;
    v71 = v73;
    v54 = v70;
    (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v70, enum case for DIPError.Code.documentReaderUnknownDocumentType(_:), v69);
    v55 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v56 = type metadata accessor for DIPError(0);
    v57 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v56, v57, 0, 0);
    v58 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v71, v53, 0, v54, 0, v55, 0xD000000000000087, 0x8000000100558440, 0xD000000000000036, 0x80000001005584D0, 35);
    swift_willThrow(v58);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v52, v51);
    v59 = type metadata accessor for ISO18013Response(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v75, v59);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  }
}

uint64_t sub_10025CEA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v50 = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ISO18013Response.Document(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100639DD0);
  __chkstk_darwin(v12);
  v48 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ISO18013Response.IssuerSigned(0);
  v46 = *(_QWORD *)(v14 - 8);
  v47 = v14;
  v15 = __chkstk_darwin(v14);
  v45 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = ISO18013Response.documents.getter(v15);
  if (!v17)
    goto LABEL_17;
  v51 = v9;
  v18 = *(_QWORD *)(v17 + 16);
  v44 = v17;
  if (v18)
  {
    v40 = v5;
    v41 = v4;
    v42 = a2;
    v43 = v7;
    v19 = v17 + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80));
    v49 = *(_QWORD *)(v51 + 72);
    v20 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v51 + 16);
    while (1)
    {
      v21 = v20(v11, v19, v8);
      v22 = ISO18013Response.Document.docType.getter(v21);
      v24 = v23;
      v25 = MobileDocumentType.iso18013Identifier.getter(v22);
      if (v2)
      {
        swift_bridgeObjectRelease(v24);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v11, v8);
        return swift_bridgeObjectRelease(v44);
      }
      v27 = v26;
      if (v22 == v25 && v24 == v26)
        break;
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v25, v26, 0);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v27);
      if ((v28 & 1) != 0)
        goto LABEL_14;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v11, v8);
      v19 += v49;
      if (!--v18)
      {
        v29 = 1;
        a2 = v42;
        v7 = v43;
        v5 = v40;
        v4 = v41;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease_n(v24, 2);
LABEL_14:
    v30 = v51;
    v31 = (uint64_t)v48;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v11, v8);
    v29 = 0;
    a2 = v42;
    v7 = v43;
    v5 = v40;
    v4 = v41;
  }
  else
  {
    v29 = 1;
LABEL_11:
    v30 = v51;
    v31 = (uint64_t)v48;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v31, v29, 1, v8);
  swift_bridgeObjectRelease(v44);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v8);
  if ((_DWORD)v33 == 1)
  {
    sub_100008030(v31, &qword_100639DD0);
LABEL_17:
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.documentReaderInvalidResponse(_:), v4);
    v34 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v36 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v35, v36, 0, 0);
    v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x80000001005586C0, 0, v7, 0, v34, 0xD000000000000087, 0x8000000100558440, 0xD000000000000016, 0x8000000100558700, 316);
    return swift_willThrow(v37);
  }
  v38 = v45;
  ISO18013Response.Document.issuerSigned.getter(v33);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v46 + 32))(a2, v38, v47);
}

uint64_t sub_10025D298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  void (*v120)(char *, unint64_t, uint64_t);
  uint64_t v121;
  uint64_t (*v122)(char *, uint64_t);
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void (*v150)(char *, uint64_t);
  void (*v151)(char *, unint64_t, uint64_t);
  uint64_t v152;
  char *v153;
  char v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t (*v172)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  void (*v178)(char *, unint64_t, uint64_t);
  char *v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  char v200;
  uint64_t (*v201)(uint64_t, uint64_t);
  uint64_t v202;
  uint64_t v203;
  unsigned int *v204;
  char *v205;
  uint64_t v206;
  unsigned int *v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  void (*v214)(char *, unint64_t, uint64_t);
  char *v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  double v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void (*v235)(char *, unint64_t, uint64_t);
  char *v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  char v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  void (*v269)(char *, unint64_t, uint64_t);
  char *v270;
  uint64_t v271;
  char v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  void (*v293)(char *, unint64_t, uint64_t);
  char *v294;
  uint64_t v295;
  char v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  char v302;
  uint64_t v303;
  void (*v304)(char *, _QWORD, uint64_t);
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  void (*v310)(uint64_t, uint64_t);
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  uint64_t v342;
  unint64_t v343;
  char *v344;
  uint64_t v345;
  char v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  char *v350;
  uint64_t v351;
  char v352;
  uint64_t v353;
  uint64_t v354;
  void (*v355)(char *, _QWORD, uint64_t);
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  void (*v361)(uint64_t, uint64_t);
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  unint64_t v380;
  void (*v381)(char *, unint64_t, uint64_t);
  char *v382;
  uint64_t v383;
  char v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  char v390;
  char *v391;
  uint64_t v392;
  char *v393;
  uint64_t (*v394)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  void (*v400)(char *, unint64_t, uint64_t);
  char *v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  char *v407;
  uint64_t v408;
  char v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unsigned int *v418;
  char v419;
  char *v420;
  char *v421;
  uint64_t v422;
  unint64_t v423;
  void (*v424)(char *, unint64_t, uint64_t);
  char *v425;
  uint64_t v426;
  char v427;
  uint64_t v428;
  char *v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  char *v433;
  uint64_t v434;
  char v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  char *v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  void (*v448)(char *, uint64_t);
  char *v449;
  uint64_t v450;
  char v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  char *v455;
  uint64_t v456;
  char v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  char *v466;
  uint64_t v467;
  void (*v468)(uint64_t, uint64_t);
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  void (*v472)(char *, uint64_t);
  void (*v473)(char *, unint64_t, uint64_t);
  char *v474;
  char *v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  char *v480;
  uint64_t v481;
  char v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v504;
  char *v505;
  char *v506;
  uint64_t v507;
  char *v508;
  uint64_t v509;
  char *v510;
  char *v511;
  char *v512;
  uint64_t v513;
  char *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  char *v525;
  char *v526;
  uint64_t v527;
  uint64_t v528;
  char *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  char *v535;
  uint64_t v536;
  char *v537;
  char *v538;
  char *v539;
  char *v540;
  char *v541;
  char *v542;
  uint64_t v543;
  char *v544;
  char *v545;
  char *v546;
  char *v547;
  char *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  char *v552;
  char *v553;
  char *v554;
  char *v555;
  char *v556;
  char *v557;
  char *v558;
  char *v559;
  char *v560;
  char *v561;
  char *v562;
  uint64_t v563;
  char *v564;
  char *v565;
  char *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  void (*v570)(char *, uint64_t);
  __int128 v571;
  uint64_t v572;
  unint64_t v573;
  __int128 v574;

  v568 = a1;
  v524 = a3;
  v4 = sub_100004828(&qword_100639D60);
  v5 = __chkstk_darwin(v4);
  v523 = (uint64_t)&v504 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v532 = (uint64_t)&v504 - v7;
  v8 = sub_100004828(&qword_100639D68);
  v9 = __chkstk_darwin(v8);
  v522 = (uint64_t)&v504 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v510 = (char *)&v504 - v12;
  __chkstk_darwin(v11);
  v549 = (uint64_t)&v504 - v13;
  v14 = sub_100004828(&qword_100639D70);
  v15 = __chkstk_darwin(v14);
  v521 = (uint64_t)&v504 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v504 - v18;
  __chkstk_darwin(v17);
  v550 = (uint64_t)&v504 - v20;
  v21 = sub_100004828(&qword_100633990);
  v22 = __chkstk_darwin(v21);
  v507 = (uint64_t)&v504 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v509 = (uint64_t)&v504 - v25;
  __chkstk_darwin(v24);
  v513 = (uint64_t)&v504 - v26;
  v27 = sub_100004828(&qword_100635DC8);
  v28 = __chkstk_darwin(v27);
  v519 = (uint64_t)&v504 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v518 = (uint64_t)&v504 - v31;
  v32 = __chkstk_darwin(v30);
  v520 = (uint64_t)&v504 - v33;
  v34 = __chkstk_darwin(v32);
  v506 = (char *)&v504 - v35;
  v36 = __chkstk_darwin(v34);
  v536 = (uint64_t)&v504 - v37;
  v38 = __chkstk_darwin(v36);
  v508 = (char *)&v504 - v39;
  v40 = __chkstk_darwin(v38);
  v533 = (uint64_t)&v504 - v41;
  v42 = __chkstk_darwin(v40);
  v512 = (char *)&v504 - v43;
  __chkstk_darwin(v42);
  v551 = (uint64_t)&v504 - v44;
  v45 = type metadata accessor for ISO18013KnownNamespaces(0);
  v46 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v514 = (char *)&v504 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100004828(&qword_100639D78);
  v49 = __chkstk_darwin(v48);
  v517 = (uint64_t)&v504 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __chkstk_darwin(v49);
  v505 = (char *)&v504 - v52;
  __chkstk_darwin(v51);
  v543 = (uint64_t)&v504 - v53;
  v528 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier(0);
  v527 = *(_QWORD *)(v528 - 8);
  __chkstk_darwin(v528);
  v526 = (char *)&v504 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v567 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v563 = *(_QWORD *)(v567 - 8);
  __chkstk_darwin(v567);
  v566 = (char *)&v504 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for MobileDocumentElement(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = __chkstk_darwin(v56);
  v537 = (char *)&v504 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __chkstk_darwin(v58);
  v564 = (char *)&v504 - v61;
  v62 = __chkstk_darwin(v60);
  v538 = (char *)&v504 - v63;
  v64 = __chkstk_darwin(v62);
  v525 = (char *)&v504 - v65;
  v66 = __chkstk_darwin(v64);
  v539 = (char *)&v504 - v67;
  v68 = __chkstk_darwin(v66);
  v554 = (char *)&v504 - v69;
  v70 = __chkstk_darwin(v68);
  v540 = (char *)&v504 - v71;
  v72 = __chkstk_darwin(v70);
  v555 = (char *)&v504 - v73;
  v74 = __chkstk_darwin(v72);
  v541 = (char *)&v504 - v75;
  v76 = __chkstk_darwin(v74);
  v556 = (char *)&v504 - v77;
  v78 = __chkstk_darwin(v76);
  v542 = (char *)&v504 - v79;
  v80 = __chkstk_darwin(v78);
  v82 = (char *)&v504 - v81;
  v83 = __chkstk_darwin(v80);
  v544 = (char *)&v504 - v84;
  v85 = __chkstk_darwin(v83);
  v558 = (char *)&v504 - v86;
  v87 = __chkstk_darwin(v85);
  v545 = (char *)&v504 - v88;
  v89 = __chkstk_darwin(v87);
  v559 = (char *)&v504 - v90;
  v91 = __chkstk_darwin(v89);
  v546 = (char *)&v504 - v92;
  v93 = __chkstk_darwin(v91);
  v560 = (char *)&v504 - v94;
  v95 = __chkstk_darwin(v93);
  v547 = (char *)&v504 - v96;
  v97 = __chkstk_darwin(v95);
  v561 = (char *)&v504 - v98;
  v99 = __chkstk_darwin(v97);
  v562 = (char *)&v504 - v100;
  v101 = __chkstk_darwin(v99);
  v552 = (char *)&v504 - v102;
  v103 = __chkstk_darwin(v101);
  v565 = (char *)&v504 - v104;
  v105 = __chkstk_darwin(v103);
  v553 = (char *)&v504 - v106;
  v107 = __chkstk_darwin(v105);
  v109 = (char *)&v504 - v108;
  __chkstk_darwin(v107);
  v111 = (char *)&v504 - v110;
  v531 = type metadata accessor for PersonNameComponents(0);
  v530 = *(_QWORD *)(v531 - 8);
  v112 = __chkstk_darwin(v531);
  v529 = (char *)&v504 - ((v113 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = __chkstk_darwin(v112);
  v548 = (char *)&v504 - v115;
  v116 = PersonNameComponents.init()(v114);
  static MobileDocumentElement.givenName.getter(v116);
  v117 = *(_QWORD *)(a2 + 16);
  v534 = a2;
  v569 = v57;
  v511 = v19;
  v557 = v82;
  v516 = v45;
  v515 = v46;
  if (!v117)
  {
    v122 = *(uint64_t (**)(char *, uint64_t))(v57 + 8);
    v123 = v562;
    v124 = v553;
    v125 = v565;
    v126 = v122(v111, v56);
    goto LABEL_21;
  }
  v118 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
  v119 = v111;
  v120 = *(void (**)(char *, unint64_t, uint64_t))(v57 + 16);
  v120(v109, a2 + v118, v56);
  v121 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(a2);
  v535 = v119;
  LOBYTE(v119) = dispatch thunk of static Equatable.== infix(_:_:)(v109, v119, v56, v121);
  v570 = *(void (**)(char *, uint64_t))(v57 + 8);
  v570(v109, v56);
  if ((v119 & 1) != 0)
    goto LABEL_14;
  if (v117 != 1)
  {
    v127 = *(_QWORD *)(v569 + 72);
    v128 = a2 + v127 + v118;
    v129 = 1;
    while (1)
    {
      v120(v109, v128, v56);
      v130 = v129 + 1;
      if (__OFADD__(v129, 1))
      {
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
LABEL_255:
        __break(1u);
LABEL_256:
        __break(1u);
LABEL_257:
        __break(1u);
LABEL_258:
        __break(1u);
LABEL_259:
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        __break(1u);
LABEL_263:
        __break(1u);
LABEL_264:
        __break(1u);
        JUMPOUT(0x100260300);
      }
      v131 = dispatch thunk of static Equatable.== infix(_:_:)(v109, v535, v56, v121);
      v570(v109, v56);
      if ((v131 & 1) != 0)
        break;
      ++v129;
      v128 += v127;
      v125 = v565;
      if (v130 == v117)
      {
        a2 = v534;
        swift_bridgeObjectRelease(v534);
        v122 = (uint64_t (*)(char *, uint64_t))v570;
        v123 = v562;
        v124 = v553;
        goto LABEL_11;
      }
    }
    a2 = v534;
LABEL_14:
    swift_bridgeObjectRelease(a2);
    v122 = (uint64_t (*)(char *, uint64_t))v570;
    v570(v535, v56);
    v132 = v563;
    v134 = (uint64_t)v566;
    v133 = v567;
    (*(void (**)(char *, _QWORD, uint64_t))(v563 + 104))(v566, enum case for ISO18013_5_1_ElementIdentifier.givenName(_:), v567);
    v135 = sub_100258F34(v134);
    v137 = v136;
    (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v134, v133);
    if (v137)
    {
      v572 = v135;
      v573 = v137;
      v138 = sub_1000B3C38();
      Collection.nilIfEmpty.getter(&v574, &type metadata for String, v138);
      swift_bridgeObjectRelease(v137);
      v139 = *((_QWORD *)&v574 + 1);
      v135 = v574;
    }
    else
    {
      v139 = 0;
    }
    PersonNameComponents.givenName.setter(v135, v139);
    v140 = v527;
    v141 = (uint64_t)v526;
    v142 = v528;
    (*(void (**)(char *, _QWORD, uint64_t))(v527 + 104))(v526, enum case for ISO18013_AAMVA_ElementIdentifier.nameSuffix(_:), v528);
    v143 = sub_100259EF0(v141);
    v145 = v144;
    (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v141, v142);
    if (v145)
    {
      v572 = v143;
      v573 = v145;
      v146 = sub_1000B3C38();
      Collection.nilIfEmpty.getter(&v574, &type metadata for String, v146);
      swift_bridgeObjectRelease(v145);
      v147 = *((_QWORD *)&v574 + 1);
      v143 = v574;
    }
    else
    {
      v147 = 0;
    }
    v123 = v562;
    v124 = v553;
    v126 = PersonNameComponents.nameSuffix.setter(v143, v147);
    v125 = v565;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease(a2);
  v122 = (uint64_t (*)(char *, uint64_t))v570;
  v123 = v562;
  v124 = v553;
  v125 = v565;
LABEL_11:
  v126 = v122(v535, v56);
LABEL_21:
  static MobileDocumentElement.familyName.getter(v126);
  v148 = *(_QWORD *)(a2 + 16);
  v570 = (void (*)(char *, uint64_t))v122;
  if (!v148)
  {
LABEL_31:
    v122(v124, v56);
    goto LABEL_32;
  }
  v149 = (*(unsigned __int8 *)(v569 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v569 + 80);
  v150 = (void (*)(char *, uint64_t))v122;
  v151 = *(void (**)(char *, unint64_t, uint64_t))(v569 + 16);
  v151(v125, a2 + v149, v56);
  v152 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(a2);
  v153 = v125;
  v154 = dispatch thunk of static Equatable.== infix(_:_:)(v125, v124, v56, v152);
  v150(v153, v56);
  if ((v154 & 1) == 0)
  {
    if (v148 != 1)
    {
      v156 = *(_QWORD *)(v569 + 72);
      v157 = a2 + v156 + v149;
      v158 = 1;
      v159 = v565;
      while (1)
      {
        v151(v159, v157, v56);
        v160 = v158 + 1;
        if (__OFADD__(v158, 1))
          goto LABEL_253;
        v161 = dispatch thunk of static Equatable.== infix(_:_:)(v159, v553, v56, v152);
        v570(v159, v56);
        if ((v161 & 1) != 0)
          break;
        ++v158;
        v157 += v156;
        if (v160 == v148)
        {
          a2 = v534;
          swift_bridgeObjectRelease(v534);
          v122 = (uint64_t (*)(char *, uint64_t))v570;
          v123 = v562;
          v124 = v553;
          goto LABEL_31;
        }
      }
      a2 = v534;
      swift_bridgeObjectRelease(v534);
      v122 = (uint64_t (*)(char *, uint64_t))v570;
      v155 = v552;
      v570(v553, v56);
      goto LABEL_34;
    }
    swift_bridgeObjectRelease(a2);
    v122 = (uint64_t (*)(char *, uint64_t))v570;
    v123 = v562;
    v570(v124, v56);
LABEL_32:
    v155 = v552;
    goto LABEL_38;
  }
  swift_bridgeObjectRelease(a2);
  v122 = (uint64_t (*)(char *, uint64_t))v570;
  v155 = v552;
  v570(v124, v56);
LABEL_34:
  v162 = v563;
  v164 = (uint64_t)v566;
  v163 = v567;
  (*(void (**)(char *, _QWORD, uint64_t))(v563 + 104))(v566, enum case for ISO18013_5_1_ElementIdentifier.familyName(_:), v567);
  v165 = sub_100258F34(v164);
  v167 = v166;
  (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v164, v163);
  if (v167)
  {
    v572 = v165;
    v573 = v167;
    v168 = sub_1000B3C38();
    Collection.nilIfEmpty.getter(&v574, &type metadata for String, v168);
    swift_bridgeObjectRelease(v167);
    v169 = *((_QWORD *)&v574 + 1);
    v165 = v574;
  }
  else
  {
    v169 = 0;
  }
  v123 = v562;
  PersonNameComponents.familyName.setter(v165, v169);
LABEL_38:
  v170 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex(0);
  v171 = *(char **)(v170 - 8);
  v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v171 + 7);
  v173 = v172(v543, 1, 1, v170);
  static MobileDocumentElement.sex.getter(v173);
  v174 = *(_QWORD *)(a2 + 16);
  if (!v174)
    goto LABEL_48;
  v535 = v171;
  v553 = (char *)v170;
  v565 = (char *)v172;
  v175 = (*(unsigned __int8 *)(v569 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v569 + 80);
  v176 = a2 + v175;
  v177 = a2;
  v178 = *(void (**)(char *, unint64_t, uint64_t))(v569 + 16);
  v178(v123, v176, v56);
  v179 = v123;
  v180 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(v177);
  v181 = dispatch thunk of static Equatable.== infix(_:_:)(v179, v155, v56, v180);
  v122(v179, v56);
  if ((v181 & 1) == 0)
  {
    if (v174 != 1)
    {
      v182 = *(_QWORD *)(v569 + 72);
      v183 = v534 + v182 + v175;
      v184 = 1;
      v185 = v562;
      while (1)
      {
        v178(v185, v183, v56);
        v186 = v184 + 1;
        if (__OFADD__(v184, 1))
          goto LABEL_254;
        v187 = dispatch thunk of static Equatable.== infix(_:_:)(v185, v552, v56, v180);
        v570(v185, v56);
        if ((v187 & 1) != 0)
          break;
        ++v184;
        v183 += v182;
        if (v186 == v174)
        {
          a2 = v534;
          swift_bridgeObjectRelease(v534);
          v122 = (uint64_t (*)(char *, uint64_t))v570;
          v155 = v552;
          goto LABEL_48;
        }
      }
      a2 = v534;
      swift_bridgeObjectRelease(v534);
      v122 = (uint64_t (*)(char *, uint64_t))v570;
      v155 = v552;
      goto LABEL_50;
    }
    a2 = v534;
    swift_bridgeObjectRelease(v534);
LABEL_48:
    v188 = v122(v155, v56);
    goto LABEL_63;
  }
  swift_bridgeObjectRelease(v177);
  a2 = v177;
LABEL_50:
  v122(v155, v56);
  v189 = v527;
  v190 = (uint64_t)v526;
  v191 = v528;
  (*(void (**)(char *, _QWORD, uint64_t))(v527 + 104))(v526, enum case for ISO18013_AAMVA_ElementIdentifier.sex(_:), v528);
  v192 = sub_10025A408(v190);
  v194 = v193;
  (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v190, v191);
  v195 = v563;
  v197 = (uint64_t)v566;
  v196 = v567;
  (*(void (**)(char *, _QWORD, uint64_t))(v563 + 104))(v566, enum case for ISO18013_5_1_ElementIdentifier.sex(_:), v567);
  v198 = sub_10025A924(v197);
  v200 = v199;
  v201 = *(uint64_t (**)(uint64_t, uint64_t))(v195 + 8);
  v122 = (uint64_t (*)(char *, uint64_t))v570;
  v188 = v201(v197, v196);
  if ((v194 & 1) == 0 || (v200 & 1) == 0)
  {
    if ((v194 & 1) != 0)
      v202 = v198;
    else
      v202 = v192;
    switch(v202)
    {
      case 0:
        v203 = v543;
        sub_100008030(v543, &qword_100639D78);
        v204 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.unknown(_:);
        goto LABEL_59;
      case 1:
        v203 = v543;
        sub_100008030(v543, &qword_100639D78);
        v204 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.male(_:);
        goto LABEL_59;
      case 2:
        v203 = v543;
        sub_100008030(v543, &qword_100639D78);
        v204 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.female(_:);
LABEL_59:
        v205 = v553;
        (*((void (**)(uint64_t, _QWORD, char *))v535 + 13))(v203, *v204, v553);
        v188 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, char *))v565)(v203, 0, 1, v205);
        break;
      case 9:
        v206 = v543;
        sub_100008030(v543, &qword_100639D78);
        v207 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.notApplicable(_:);
        if ((v194 & 1) == 0)
          v207 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.notSpecified(_:);
        v208 = (uint64_t)v505;
        v209 = v553;
        (*((void (**)(char *, _QWORD, char *))v535 + 13))(v505, *v207, v553);
        ((void (*)(uint64_t, _QWORD, uint64_t, char *))v565)(v208, 0, 1, v209);
        v188 = sub_1000A1F54(v208, v206, &qword_100639D78);
        break;
      default:
        break;
    }
  }
LABEL_63:
  v210 = v561;
  static MobileDocumentElement.portrait.getter(v188);
  v211 = *(_QWORD *)(a2 + 16);
  v212 = v569;
  if (!v211)
    goto LABEL_74;
  v213 = (*(unsigned __int8 *)(v569 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v569 + 80);
  v214 = *(void (**)(char *, unint64_t, uint64_t))(v569 + 16);
  v215 = v547;
  v214(v547, a2 + v213, v56);
  v216 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(a2);
  v217 = dispatch thunk of static Equatable.== infix(_:_:)(v215, v210, v56, v216);
  v122(v215, v56);
  if ((v217 & 1) == 0)
  {
    if (v211 != 1)
    {
      v218 = *(_QWORD *)(v569 + 72);
      v219 = a2 + v218 + v213;
      v220 = 1;
      v221 = v547;
      while (1)
      {
        v214(v221, v219, v56);
        v222 = v220 + 1;
        if (__OFADD__(v220, 1))
          goto LABEL_255;
        v223 = dispatch thunk of static Equatable.== infix(_:_:)(v221, v561, v56, v216);
        v570(v221, v56);
        if ((v223 & 1) != 0)
          break;
        ++v220;
        v219 += v218;
        if (v222 == v211)
        {
          a2 = v534;
          swift_bridgeObjectRelease(v534);
          v122 = (uint64_t (*)(char *, uint64_t))v570;
          goto LABEL_73;
        }
      }
      a2 = v534;
      swift_bridgeObjectRelease(v534);
      v122 = (uint64_t (*)(char *, uint64_t))v570;
      goto LABEL_76;
    }
    swift_bridgeObjectRelease(a2);
LABEL_73:
    v210 = v561;
    v212 = v569;
LABEL_74:
    v224 = v122(v210, v56);
    v225 = 0;
    v552 = (char *)0xF000000000000000;
    v226 = v560;
    goto LABEL_79;
  }
  swift_bridgeObjectRelease(a2);
LABEL_76:
  v212 = v569;
  v122(v561, v56);
  v227 = v563;
  v229 = (uint64_t)v566;
  v228 = v567;
  (*(void (**)(char *, _QWORD, uint64_t))(v563 + 104))(v566, enum case for ISO18013_5_1_ElementIdentifier.portrait(_:), v567);
  v230 = sub_10025AE40(v229, &v574);
  v224 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v227 + 8))(v229, v228, v230);
  v231 = *((_QWORD *)&v574 + 1);
  v225 = v574;
  if (*((_QWORD *)&v574 + 1) >> 60 != 15)
  {
    v571 = v574;
    v232 = sub_100262570();
    Collection.nilIfEmpty.getter(&v572, &type metadata for Data, v232);
    v224 = sub_100007F78(v225, v231);
    v225 = v572;
    v231 = v573;
  }
  v226 = v560;
  v552 = (char *)v231;
LABEL_79:
  v553 = (char *)v225;
  static MobileDocumentElement.age.getter(v224);
  v233 = *(_QWORD *)(a2 + 16);
  if (v233)
  {
    v234 = (*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80);
    v235 = *(void (**)(char *, unint64_t, uint64_t))(v212 + 16);
    v236 = v546;
    v235(v546, a2 + v234, v56);
    v237 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
    swift_bridgeObjectRetain(a2);
    v238 = dispatch thunk of static Equatable.== infix(_:_:)(v236, v226, v56, v237);
    v122(v236, v56);
    if ((v238 & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      goto LABEL_96;
    }
    if (v233 != 1)
    {
      v239 = *(_QWORD *)(v212 + 72);
      v240 = a2 + v239 + v234;
      v241 = 1;
      v226 = v560;
      v242 = v546;
      while (1)
      {
        v235(v242, v240, v56);
        v243 = v241 + 1;
        if (__OFADD__(v241, 1))
          goto LABEL_256;
        v244 = dispatch thunk of static Equatable.== infix(_:_:)(v242, v226, v56, v237);
        v570(v242, v56);
        if ((v244 & 1) != 0)
          break;
        ++v241;
        v240 += v239;
        v226 = v560;
        if (v243 == v233)
        {
          a2 = v534;
          swift_bridgeObjectRelease(v534);
          v212 = v569;
          v122 = (uint64_t (*)(char *, uint64_t))v570;
          goto LABEL_89;
        }
      }
      a2 = v534;
      swift_bridgeObjectRelease(v534);
      v212 = v569;
      v122 = (uint64_t (*)(char *, uint64_t))v570;
LABEL_96:
      v122(v560, v56);
      v258 = v563;
      v260 = (uint64_t)v566;
      v259 = v567;
      (*(void (**)(char *, _QWORD, uint64_t))(v563 + 104))(v566, enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:), v567);
      v547 = (char *)sub_10025A924(v260);
      LODWORD(v546) = v261 & 1;
      v262 = (*(uint64_t (**)(uint64_t, uint64_t))(v258 + 8))(v260, v259);
      v246 = ISO18013Response.IssuerSigned.namespaces.getter(v262);
      if (!v246)
        goto LABEL_97;
      goto LABEL_90;
    }
    swift_bridgeObjectRelease(a2);
    v226 = v560;
  }
LABEL_89:
  v245 = v122(v226, v56);
  v547 = 0;
  LODWORD(v546) = 1;
  v246 = ISO18013Response.IssuerSigned.namespaces.getter(v245);
  if (!v246)
  {
LABEL_97:
    v257 = 0;
    goto LABEL_98;
  }
LABEL_90:
  v247 = v246;
  v248 = v515;
  v249 = v514;
  v250 = v516;
  v251 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v515 + 104))(v514, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v516);
  v252 = ISO18013KnownNamespaces.rawValue.getter(v251);
  v254 = v253;
  (*(void (**)(char *, uint64_t))(v248 + 8))(v249, v250);
  if (*(_QWORD *)(v247 + 16) && (v255 = sub_1004A8604(v252, v254), (v256 & 1) != 0))
  {
    v257 = *(_QWORD *)(*(_QWORD *)(v247 + 56) + 8 * v255);
    swift_bridgeObjectRetain(v257);
  }
  else
  {
    v257 = 0;
  }
  swift_bridgeObjectRelease(v254);
  swift_bridgeObjectRelease(v247);
LABEL_98:
  v560 = (char *)sub_100261CB0(v257, j___s7CoreIDV30ISO18013_5_1_ElementIdentifierO09isAgeOverD0ySbSSFZ, 0, (uint64_t (*)(uint64_t, uint64_t))sub_100261AD0, 0, a2);
  swift_bridgeObjectRelease(v257);
  v263 = type metadata accessor for DateComponents(0);
  v264 = *(char **)(*(_QWORD *)(v263 - 8) + 56);
  v565 = (char *)v263;
  v562 = v264;
  v265 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v264)(v551, 1, 1);
  v266 = v559;
  static MobileDocumentElement.dateOfBirth.getter(v265);
  v267 = *(_QWORD *)(a2 + 16);
  if (!v267)
    goto LABEL_109;
  v268 = (*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80);
  v269 = *(void (**)(char *, unint64_t, uint64_t))(v212 + 16);
  v270 = v545;
  v269(v545, a2 + v268, v56);
  v271 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(a2);
  v272 = dispatch thunk of static Equatable.== infix(_:_:)(v270, v266, v56, v271);
  v122(v270, v56);
  if ((v272 & 1) == 0)
  {
    if (v267 != 1)
    {
      v273 = *(_QWORD *)(v212 + 72);
      v274 = a2 + v273 + v268;
      v275 = 1;
      while (1)
      {
        v276 = v545;
        v269(v545, v274, v56);
        v277 = v275 + 1;
        if (__OFADD__(v275, 1))
          goto LABEL_257;
        v278 = dispatch thunk of static Equatable.== infix(_:_:)(v276, v559, v56, v271);
        v570(v276, v56);
        if ((v278 & 1) != 0)
          break;
        ++v275;
        v274 += v273;
        v212 = v569;
        if (v277 == v267)
        {
          a2 = v534;
          swift_bridgeObjectRelease(v534);
          v122 = (uint64_t (*)(char *, uint64_t))v570;
          goto LABEL_108;
        }
      }
      a2 = v534;
      swift_bridgeObjectRelease(v534);
      v212 = v569;
      v122 = (uint64_t (*)(char *, uint64_t))v570;
      goto LABEL_111;
    }
    swift_bridgeObjectRelease(a2);
LABEL_108:
    v266 = v559;
LABEL_109:
    v122(v266, v56);
    goto LABEL_115;
  }
  swift_bridgeObjectRelease(a2);
LABEL_111:
  v122(v559, v56);
  v279 = v563;
  v281 = (uint64_t)v566;
  v280 = v567;
  (*(void (**)(char *, _QWORD, uint64_t))(v563 + 104))(v566, enum case for ISO18013_5_1_ElementIdentifier.birthDate(_:), v567);
  v282 = v513;
  sub_100259458(v281, (uint64_t (*)(_QWORD))&type metadata accessor for Date, v513);
  v283 = v282;
  (*(void (**)(uint64_t, uint64_t))(v279 + 8))(v281, v280);
  v284 = type metadata accessor for Date(0);
  v285 = *(_QWORD *)(v284 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v285 + 48))(v282, 1, v284) == 1)
  {
    v286 = v551;
    sub_100008030(v551, &qword_100635DC8);
    sub_100008030(v283, &qword_100633990);
    v287 = (uint64_t)v512;
    ((void (*)(char *, uint64_t, uint64_t, char *))v562)(v512, 1, 1, v565);
  }
  else
  {
    v287 = (uint64_t)v512;
    Date.utcDayRepresentation.getter();
    v286 = v551;
    sub_100008030(v551, &qword_100635DC8);
    (*(void (**)(uint64_t, uint64_t))(v285 + 8))(v283, v284);
  }
  sub_1000A1F54(v287, v286, &qword_100635DC8);
LABEL_115:
  v288 = v558;
  v289 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Address(0);
  v290 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v289 - 8) + 56))(v550, 1, 1, v289);
  static MobileDocumentElement.address.getter(v290);
  v291 = *(_QWORD *)(a2 + 16);
  if (!v291)
    goto LABEL_126;
  v292 = (*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80);
  v293 = *(void (**)(char *, unint64_t, uint64_t))(v212 + 16);
  v294 = v544;
  v293(v544, a2 + v292, v56);
  v295 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(a2);
  v296 = dispatch thunk of static Equatable.== infix(_:_:)(v294, v288, v56, v295);
  v122(v294, v56);
  if ((v296 & 1) == 0)
  {
    if (v291 != 1)
    {
      v297 = *(_QWORD *)(v569 + 72);
      v298 = a2 + v297 + v292;
      v299 = 1;
      v288 = v558;
      v300 = v544;
      while (1)
      {
        v293(v300, v298, v56);
        v301 = v299 + 1;
        if (__OFADD__(v299, 1))
          goto LABEL_258;
        v302 = dispatch thunk of static Equatable.== infix(_:_:)(v300, v288, v56, v295);
        v570(v300, v56);
        if ((v302 & 1) != 0)
          break;
        ++v299;
        v298 += v297;
        v288 = v558;
        if (v301 == v291)
        {
          a2 = v534;
          swift_bridgeObjectRelease(v534);
          v122 = (uint64_t (*)(char *, uint64_t))v570;
          goto LABEL_125;
        }
      }
      a2 = v534;
      swift_bridgeObjectRelease(v534);
      v122 = (uint64_t (*)(char *, uint64_t))v570;
      goto LABEL_128;
    }
    swift_bridgeObjectRelease(a2);
    v288 = v558;
LABEL_125:
    v212 = v569;
LABEL_126:
    v122(v288, v56);
    goto LABEL_143;
  }
  swift_bridgeObjectRelease(a2);
LABEL_128:
  v122(v558, v56);
  v303 = v563;
  v304 = *(void (**)(char *, _QWORD, uint64_t))(v563 + 104);
  v306 = (uint64_t)v566;
  v305 = v567;
  v304(v566, enum case for ISO18013_5_1_ElementIdentifier.residentAddress(_:), v567);
  v307 = sub_100258F34(v306);
  v309 = v308;
  v310 = *(void (**)(uint64_t, uint64_t))(v303 + 8);
  v310(v306, v305);
  if (v309)
  {
    v572 = v307;
    v573 = v309;
    v311 = sub_1000B3C38();
    Collection.nilIfEmpty.getter(&v574, &type metadata for String, v311);
    swift_bridgeObjectRelease(v309);
    v558 = (char *)*((_QWORD *)&v574 + 1);
    v561 = (char *)v574;
  }
  else
  {
    v561 = (char *)v307;
    v558 = 0;
  }
  v313 = (uint64_t)v566;
  v312 = v567;
  v304(v566, enum case for ISO18013_5_1_ElementIdentifier.residentCity(_:), v567);
  v314 = sub_100258F34(v313);
  v316 = v315;
  v310(v313, v312);
  if (v316)
  {
    v572 = v314;
    v573 = v316;
    v317 = sub_1000B3C38();
    Collection.nilIfEmpty.getter(&v574, &type metadata for String, v317);
    swift_bridgeObjectRelease(v316);
    v545 = (char *)*((_QWORD *)&v574 + 1);
    v559 = (char *)v574;
  }
  else
  {
    v559 = (char *)v314;
    v545 = 0;
  }
  v319 = (uint64_t)v566;
  v318 = v567;
  v304(v566, enum case for ISO18013_5_1_ElementIdentifier.residentState(_:), v567);
  v320 = sub_100258F34(v319);
  v322 = v321;
  v310(v319, v318);
  if (v322)
  {
    v572 = v320;
    v573 = v322;
    v323 = sub_1000B3C38();
    Collection.nilIfEmpty.getter(&v574, &type metadata for String, v323);
    swift_bridgeObjectRelease(v322);
    v544 = (char *)*((_QWORD *)&v574 + 1);
    v320 = v574;
  }
  else
  {
    v544 = 0;
  }
  v324 = v567;
  v325 = (uint64_t)v566;
  v304(v566, enum case for ISO18013_5_1_ElementIdentifier.residentPostalCode(_:), v567);
  v326 = sub_100258F34(v325);
  v328 = v327;
  v310(v325, v324);
  if (v328)
  {
    v572 = v326;
    v573 = v328;
    v329 = sub_1000B3C38();
    Collection.nilIfEmpty.getter(&v574, &type metadata for String, v329);
    swift_bridgeObjectRelease(v328);
    v328 = *((_QWORD *)&v574 + 1);
    v326 = v574;
  }
  v330 = (uint64_t)v566;
  v331 = v567;
  v304(v566, enum case for ISO18013_5_1_ElementIdentifier.residentCountry(_:), v567);
  v332 = sub_100258F34(v330);
  v334 = v333;
  v310(v330, v331);
  if (v334)
  {
    v572 = v332;
    v573 = v334;
    v335 = sub_1000B3C38();
    Collection.nilIfEmpty.getter(&v574, &type metadata for String, v335);
    swift_bridgeObjectRelease(v334);
    v336 = *((_QWORD *)&v574 + 1);
    v332 = v574;
  }
  else
  {
    v336 = 0;
  }
  v122 = (uint64_t (*)(char *, uint64_t))v570;
  v337 = (uint64_t)v511;
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.Address.init(street:city:state:postalCode:isoCountryCode:)(v561, v558, v559, v545, v320, v544, v326, v328, v332, v336);
  v338 = v550;
  sub_100008030(v550, &qword_100639D70);
  sub_1000A1F54(v337, v338, &qword_100639D70);
  v212 = v569;
LABEL_143:
  v339 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.IssuingAuthority(0);
  v340 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v339 - 8) + 56))(v549, 1, 1, v339);
  v341 = v557;
  static MobileDocumentElement.issuingAuthority.getter(v340);
  v342 = *(_QWORD *)(a2 + 16);
  if (!v342)
    goto LABEL_154;
  v343 = (*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80);
  v344 = v542;
  v561 = *(char **)(v212 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v561)(v542, a2 + v343, v56);
  v345 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(a2);
  v346 = dispatch thunk of static Equatable.== infix(_:_:)(v344, v341, v56, v345);
  v122(v344, v56);
  if ((v346 & 1) == 0)
  {
    if (v342 != 1)
    {
      v347 = *(_QWORD *)(v212 + 72);
      v348 = a2 + v347 + v343;
      v349 = 1;
      v350 = v542;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v561)(v350, v348, v56);
        v351 = v349 + 1;
        if (__OFADD__(v349, 1))
          goto LABEL_259;
        v352 = dispatch thunk of static Equatable.== infix(_:_:)(v350, v557, v56, v345);
        v570(v350, v56);
        if ((v352 & 1) != 0)
          break;
        ++v349;
        v348 += v347;
        if (v351 == v342)
        {
          a2 = v534;
          swift_bridgeObjectRelease(v534);
          v122 = (uint64_t (*)(char *, uint64_t))v570;
          goto LABEL_153;
        }
      }
      a2 = v534;
      swift_bridgeObjectRelease(v534);
      v122 = (uint64_t (*)(char *, uint64_t))v570;
      goto LABEL_156;
    }
    swift_bridgeObjectRelease(a2);
LABEL_153:
    v341 = v557;
LABEL_154:
    v353 = v122(v341, v56);
    goto LABEL_165;
  }
  swift_bridgeObjectRelease(a2);
LABEL_156:
  v122(v557, v56);
  v354 = v563;
  v355 = *(void (**)(char *, _QWORD, uint64_t))(v563 + 104);
  v357 = (uint64_t)v566;
  v356 = v567;
  v355(v566, enum case for ISO18013_5_1_ElementIdentifier.issuingAuthority(_:), v567);
  v358 = sub_100258F34(v357);
  v360 = v359;
  v361 = *(void (**)(uint64_t, uint64_t))(v354 + 8);
  v361(v357, v356);
  if (v360)
  {
    v572 = v358;
    v573 = v360;
    v362 = sub_1000B3C38();
    Collection.nilIfEmpty.getter(&v574, &type metadata for String, v362);
    swift_bridgeObjectRelease(v360);
    v561 = (char *)*((_QWORD *)&v574 + 1);
    v358 = v574;
  }
  else
  {
    v561 = 0;
  }
  v363 = (uint64_t)v566;
  v364 = v567;
  v355(v566, enum case for ISO18013_5_1_ElementIdentifier.issuingJurisdiction(_:), v567);
  v365 = sub_100258F34(v363);
  v367 = v366;
  v361(v363, v364);
  if (v367)
  {
    v572 = v365;
    v573 = v367;
    v368 = sub_1000B3C38();
    Collection.nilIfEmpty.getter(&v574, &type metadata for String, v368);
    swift_bridgeObjectRelease(v367);
    v367 = *((_QWORD *)&v574 + 1);
    v365 = v574;
  }
  v369 = (uint64_t)v566;
  v370 = v567;
  v355(v566, enum case for ISO18013_5_1_ElementIdentifier.issuingCountry(_:), v567);
  v371 = sub_100258F34(v369);
  v373 = v372;
  v361(v369, v370);
  if (v373)
  {
    v572 = v371;
    v573 = v373;
    v374 = sub_1000B3C38();
    Collection.nilIfEmpty.getter(&v574, &type metadata for String, v374);
    swift_bridgeObjectRelease(v373);
    v375 = *((_QWORD *)&v574 + 1);
    v371 = v574;
  }
  else
  {
    v375 = 0;
  }
  v212 = v569;
  v122 = (uint64_t (*)(char *, uint64_t))v570;
  v376 = (uint64_t)v510;
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.IssuingAuthority.init(name:jurisdiction:isoCountryCode:)(v358, v561, v365, v367, v371, v375);
  v377 = v549;
  sub_100008030(v549, &qword_100639D68);
  v353 = sub_1000A1F54(v376, v377, &qword_100639D68);
LABEL_165:
  v378 = v556;
  static MobileDocumentElement.drivingPrivileges.getter(v353);
  v379 = *(_QWORD *)(a2 + 16);
  if (!v379)
    goto LABEL_176;
  v380 = (*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80);
  v381 = *(void (**)(char *, unint64_t, uint64_t))(v212 + 16);
  v382 = v541;
  v381(v541, a2 + v380, v56);
  v383 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(a2);
  v384 = dispatch thunk of static Equatable.== infix(_:_:)(v382, v378, v56, v383);
  v122(v382, v56);
  if ((v384 & 1) == 0)
  {
    if (v379 != 1)
    {
      v385 = *(_QWORD *)(v212 + 72);
      v386 = a2 + v385 + v380;
      v387 = 1;
      v388 = v541;
      while (1)
      {
        v381(v388, v386, v56);
        v389 = v387 + 1;
        if (__OFADD__(v387, 1))
          goto LABEL_260;
        v390 = dispatch thunk of static Equatable.== infix(_:_:)(v388, v556, v56, v383);
        v570(v388, v56);
        if ((v390 & 1) != 0)
          break;
        ++v387;
        v386 += v385;
        if (v389 == v379)
        {
          a2 = v534;
          swift_bridgeObjectRelease(v534);
          v212 = v569;
          v122 = (uint64_t (*)(char *, uint64_t))v570;
          goto LABEL_175;
        }
      }
      a2 = v534;
      swift_bridgeObjectRelease(v534);
      v212 = v569;
      v122 = (uint64_t (*)(char *, uint64_t))v570;
      goto LABEL_178;
    }
    swift_bridgeObjectRelease(a2);
LABEL_175:
    v378 = v556;
LABEL_176:
    v122(v378, v56);
    v558 = (char *)_swiftEmptyArrayStorage;
    v559 = (char *)_swiftEmptyArrayStorage;
    v391 = v555;
    goto LABEL_179;
  }
  swift_bridgeObjectRelease(a2);
LABEL_178:
  v391 = v555;
  v122(v556, v56);
  v559 = (char *)sub_100133F00();
  v558 = (char *)sub_100400FF0();
LABEL_179:
  v392 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DHSComplianceStatus(0);
  v393 = *(char **)(v392 - 8);
  v394 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v393 + 7);
  v395 = v394(v532, 1, 1, v392);
  static MobileDocumentElement.documentDHSComplianceStatus.getter(v395);
  v396 = *(_QWORD *)(a2 + 16);
  if (!v396)
  {
LABEL_190:
    v410 = v122(v391, v56);
    goto LABEL_203;
  }
  v556 = v393;
  v557 = (char *)v392;
  v561 = (char *)v394;
  v397 = (*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80);
  v398 = a2 + v397;
  v399 = a2;
  v400 = *(void (**)(char *, unint64_t, uint64_t))(v212 + 16);
  v401 = v391;
  v402 = v540;
  v400(v540, v398, v56);
  v403 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(v399);
  LOBYTE(v401) = dispatch thunk of static Equatable.== infix(_:_:)(v402, v401, v56, v403);
  v122(v402, v56);
  if ((v401 & 1) != 0)
  {
    swift_bridgeObjectRelease(v399);
    a2 = v399;
    goto LABEL_192;
  }
  if (v396 == 1)
  {
    a2 = v534;
    swift_bridgeObjectRelease(v534);
LABEL_189:
    v391 = v555;
    goto LABEL_190;
  }
  v404 = *(_QWORD *)(v212 + 72);
  v405 = v534 + v404 + v397;
  v406 = 1;
  v407 = v540;
  while (1)
  {
    v400(v407, v405, v56);
    v408 = v406 + 1;
    if (__OFADD__(v406, 1))
      goto LABEL_261;
    v409 = dispatch thunk of static Equatable.== infix(_:_:)(v407, v555, v56, v403);
    v570(v407, v56);
    if ((v409 & 1) != 0)
      break;
    ++v406;
    v405 += v404;
    if (v408 == v396)
    {
      a2 = v534;
      swift_bridgeObjectRelease(v534);
      v122 = (uint64_t (*)(char *, uint64_t))v570;
      goto LABEL_189;
    }
  }
  a2 = v534;
  swift_bridgeObjectRelease(v534);
  v122 = (uint64_t (*)(char *, uint64_t))v570;
LABEL_192:
  v122(v555, v56);
  v411 = v527;
  v412 = (uint64_t)v526;
  v413 = v528;
  (*(void (**)(char *, _QWORD, uint64_t))(v527 + 104))(v526, enum case for ISO18013_AAMVA_ElementIdentifier.dhsCompliance(_:), v528);
  v414 = sub_100259EF0(v412);
  v416 = v415;
  v410 = (*(uint64_t (**)(uint64_t, uint64_t))(v411 + 8))(v412, v413);
  if (!v416)
    goto LABEL_203;
  if (v414 == 70 && v416 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(70, 0xE100000000000000, v414, v416, 0) & 1) != 0)
  {
    v417 = v532;
    sub_100008030(v532, &qword_100639D60);
    swift_bridgeObjectRelease(v416);
    v418 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DHSComplianceStatus.compliant(_:);
  }
  else
  {
    if (v414 == 78 && v416 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease(0xE100000000000000);
    }
    else
    {
      v419 = _stringCompareWithSmolCheck(_:_:expecting:)(78, 0xE100000000000000, v414, v416, 0);
      v410 = swift_bridgeObjectRelease(v416);
      if ((v419 & 1) == 0)
        goto LABEL_203;
    }
    v417 = v532;
    sub_100008030(v532, &qword_100639D60);
    v418 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DHSComplianceStatus.noncompliant(_:);
  }
  v420 = v557;
  (*((void (**)(uint64_t, _QWORD, char *))v556 + 13))(v417, *v418, v557);
  v410 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, char *))v561)(v417, 0, 1, v420);
LABEL_203:
  v421 = v554;
  static MobileDocumentElement.documentNumber.getter(v410);
  v422 = *(_QWORD *)(a2 + 16);
  if (!v422)
    goto LABEL_213;
  v423 = (*(unsigned __int8 *)(v569 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v569 + 80);
  v424 = *(void (**)(char *, unint64_t, uint64_t))(v569 + 16);
  v425 = v539;
  v424(v539, a2 + v423, v56);
  v426 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(a2);
  v427 = dispatch thunk of static Equatable.== infix(_:_:)(v425, v421, v56, v426);
  v122(v425, v56);
  if ((v427 & 1) == 0)
  {
    if (v422 != 1)
    {
      v430 = *(_QWORD *)(v569 + 72);
      v431 = a2 + v430 + v423;
      v432 = 1;
      v433 = v539;
      while (1)
      {
        v424(v433, v431, v56);
        v434 = v432 + 1;
        if (__OFADD__(v432, 1))
          goto LABEL_262;
        v435 = dispatch thunk of static Equatable.== infix(_:_:)(v433, v554, v56, v426);
        v570(v433, v56);
        if ((v435 & 1) != 0)
          break;
        ++v432;
        v431 += v430;
        if (v434 == v422)
        {
          a2 = v534;
          swift_bridgeObjectRelease(v534);
          v122 = (uint64_t (*)(char *, uint64_t))v570;
          v421 = v554;
          goto LABEL_213;
        }
      }
      a2 = v534;
      swift_bridgeObjectRelease(v534);
      v428 = v533;
      v122 = (uint64_t (*)(char *, uint64_t))v570;
      v429 = v554;
      goto LABEL_215;
    }
    swift_bridgeObjectRelease(a2);
    v421 = v554;
LABEL_213:
    v122(v421, v56);
    v436 = 0;
    v556 = 0;
    v428 = v533;
    goto LABEL_218;
  }
  swift_bridgeObjectRelease(a2);
  v428 = v533;
  v429 = v554;
LABEL_215:
  v122(v429, v56);
  v437 = v563;
  v439 = (uint64_t)v566;
  v438 = v567;
  (*(void (**)(char *, _QWORD, uint64_t))(v563 + 104))(v566, enum case for ISO18013_5_1_ElementIdentifier.documentNumber(_:), v567);
  v436 = sub_100258F34(v439);
  v441 = v440;
  (*(void (**)(uint64_t, uint64_t))(v437 + 8))(v439, v438);
  if (v441)
  {
    v572 = v436;
    v573 = v441;
    v442 = sub_1000B3C38();
    Collection.nilIfEmpty.getter(&v574, &type metadata for String, v442);
    swift_bridgeObjectRelease(v441);
    v556 = (char *)*((_QWORD *)&v574 + 1);
    v436 = v574;
  }
  else
  {
    v556 = 0;
  }
LABEL_218:
  v443 = v564;
  v444 = v525;
  v445 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))v562)(v428, 1, 1, v565);
  static MobileDocumentElement.documentIssueDate.getter(v445);
  v446 = *(_QWORD *)(a2 + 16);
  v557 = (char *)v436;
  if (!v446)
    goto LABEL_229;
  v447 = (*(unsigned __int8 *)(v569 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v569 + 80);
  v448 = (void (*)(char *, uint64_t))v122;
  v449 = v538;
  v561 = *(char **)(v569 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v561)(v538, a2 + v447, v56);
  v450 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(a2);
  v451 = dispatch thunk of static Equatable.== infix(_:_:)(v449, v444, v56, v450);
  v448(v449, v56);
  if ((v451 & 1) == 0)
  {
    if (v446 != 1)
    {
      v452 = *(_QWORD *)(v569 + 72);
      v453 = a2 + v452 + v447;
      v454 = 1;
      v455 = v538;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v561)(v455, v453, v56);
        v456 = v454 + 1;
        if (__OFADD__(v454, 1))
          goto LABEL_263;
        v457 = dispatch thunk of static Equatable.== infix(_:_:)(v455, v444, v56, v450);
        v570(v455, v56);
        if ((v457 & 1) != 0)
          break;
        ++v454;
        v453 += v452;
        if (v456 == v446)
        {
          a2 = v534;
          swift_bridgeObjectRelease(v534);
          goto LABEL_228;
        }
      }
      a2 = v534;
      swift_bridgeObjectRelease(v534);
      goto LABEL_231;
    }
    swift_bridgeObjectRelease(a2);
LABEL_228:
    v122 = (uint64_t (*)(char *, uint64_t))v570;
    v443 = v564;
LABEL_229:
    v122(v444, v56);
    goto LABEL_235;
  }
  swift_bridgeObjectRelease(a2);
LABEL_231:
  v122 = (uint64_t (*)(char *, uint64_t))v570;
  v570(v444, v56);
  v458 = v563;
  v460 = (uint64_t)v566;
  v459 = v567;
  (*(void (**)(char *, _QWORD, uint64_t))(v563 + 104))(v566, enum case for ISO18013_5_1_ElementIdentifier.issueDate(_:), v567);
  v461 = v509;
  sub_100259458(v460, (uint64_t (*)(_QWORD))&type metadata accessor for Date, v509);
  (*(void (**)(uint64_t, uint64_t))(v458 + 8))(v460, v459);
  v462 = type metadata accessor for Date(0);
  v463 = *(_QWORD *)(v462 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v463 + 48))(v461, 1, v462) == 1)
  {
    v464 = v533;
    sub_100008030(v533, &qword_100635DC8);
    sub_100008030(v461, &qword_100633990);
    v465 = (uint64_t)v508;
    ((void (*)(char *, uint64_t, uint64_t, char *))v562)(v508, 1, 1, v565);
  }
  else
  {
    v466 = v508;
    Date.utcDayRepresentation.getter();
    v467 = v533;
    sub_100008030(v533, &qword_100635DC8);
    v468 = *(void (**)(uint64_t, uint64_t))(v463 + 8);
    v464 = v467;
    v465 = (uint64_t)v466;
    v468(v461, v462);
  }
  v443 = v564;
  sub_1000A1F54(v465, v464, &qword_100635DC8);
LABEL_235:
  v469 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))v562)(v536, 1, 1, v565);
  static MobileDocumentElement.documentExpirationDate.getter(v469);
  v470 = *(_QWORD *)(a2 + 16);
  if (!v470)
    goto LABEL_245;
  v471 = (*(unsigned __int8 *)(v569 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v569 + 80);
  v472 = (void (*)(char *, uint64_t))v122;
  v473 = *(void (**)(char *, unint64_t, uint64_t))(v569 + 16);
  v474 = v443;
  v475 = v537;
  v473(v537, a2 + v471, v56);
  v476 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(a2);
  LOBYTE(v474) = dispatch thunk of static Equatable.== infix(_:_:)(v475, v474, v56, v476);
  v472(v475, v56);
  if ((v474 & 1) == 0)
  {
    if (v470 != 1)
    {
      v477 = *(_QWORD *)(v569 + 72);
      v478 = a2 + v477 + v471;
      v479 = 1;
      v480 = v537;
      while (1)
      {
        v473(v480, v478, v56);
        v481 = v479 + 1;
        if (__OFADD__(v479, 1))
          goto LABEL_264;
        v482 = dispatch thunk of static Equatable.== infix(_:_:)(v480, v564, v56, v476);
        v570(v480, v56);
        if ((v482 & 1) != 0)
          break;
        ++v479;
        v478 += v477;
        if (v481 == v470)
        {
          a2 = v534;
          goto LABEL_244;
        }
      }
      a2 = v534;
      swift_bridgeObjectRelease(v534);
      goto LABEL_247;
    }
LABEL_244:
    swift_bridgeObjectRelease(a2);
    v122 = (uint64_t (*)(char *, uint64_t))v570;
    v443 = v564;
LABEL_245:
    v122(v443, v56);
    swift_bridgeObjectRelease(a2);
    v483 = v536;
    goto LABEL_251;
  }
  swift_bridgeObjectRelease(a2);
LABEL_247:
  v570(v564, v56);
  swift_bridgeObjectRelease(a2);
  v484 = v563;
  v486 = (uint64_t)v566;
  v485 = v567;
  (*(void (**)(char *, _QWORD, uint64_t))(v563 + 104))(v566, enum case for ISO18013_5_1_ElementIdentifier.expiryDate(_:), v567);
  v487 = v507;
  sub_100259458(v486, (uint64_t (*)(_QWORD))&type metadata accessor for Date, v507);
  (*(void (**)(uint64_t, uint64_t))(v484 + 8))(v486, v485);
  v488 = type metadata accessor for Date(0);
  v489 = *(_QWORD *)(v488 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v489 + 48))(v487, 1, v488) == 1)
  {
    v483 = v536;
    sub_100008030(v536, &qword_100635DC8);
    sub_100008030(v487, &qword_100633990);
    v490 = (uint64_t)v506;
    ((void (*)(char *, uint64_t, uint64_t, char *))v562)(v506, 1, 1, v565);
  }
  else
  {
    v490 = (uint64_t)v506;
    Date.utcDayRepresentation.getter();
    v483 = v536;
    sub_100008030(v536, &qword_100635DC8);
    (*(void (**)(uint64_t, uint64_t))(v489 + 8))(v487, v488);
  }
  sub_1000A1F54(v490, v483, &qword_100635DC8);
LABEL_251:
  v491 = v551;
  (*(void (**)(char *, char *, uint64_t))(v530 + 16))(v529, v548, v531);
  v492 = v517;
  sub_100038B24(v543, v517, &qword_100639D78);
  v493 = v520;
  sub_100038B24(v491, v520, &qword_100635DC8);
  v494 = v521;
  sub_100038B24(v550, v521, &qword_100639D70);
  v495 = v522;
  sub_100038B24(v549, v522, &qword_100639D68);
  v496 = v532;
  v497 = v523;
  sub_100038B24(v532, v523, &qword_100639D60);
  v498 = v533;
  v499 = v518;
  sub_100038B24(v533, v518, &qword_100635DC8);
  v500 = v483;
  v501 = v519;
  sub_100038B24(v500, v519, &qword_100635DC8);
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.init(nameComponents:sex:portraitData:age:ageAtLeastElements:dateOfBirth:address:nationality:issuingAuthority:drivingPrivileges:aamvaDrivingPrivileges:documentDHSComplianceStatus:documentNumber:documentIssueDate:documentExpirationDate:)(v529, v492, v553, v552, v547, v546, v560, v493, v494, 0, 0, v495, v559, v558, v497, v557, v556, v499, v501);
  v502 = type metadata accessor for ISO18013Response.IssuerSigned(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v502 - 8) + 8))(v568, v502);
  sub_100008030(v536, &qword_100635DC8);
  sub_100008030(v498, &qword_100635DC8);
  sub_100008030(v496, &qword_100639D60);
  sub_100008030(v549, &qword_100639D68);
  sub_100008030(v550, &qword_100639D70);
  sub_100008030(v551, &qword_100635DC8);
  sub_100008030(v543, &qword_100639D78);
  return (*(uint64_t (**)(char *, uint64_t))(v530 + 8))(v548, v531);
}

uint64_t sub_100260328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void (*v67)(char *, unint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, unint64_t, uint64_t);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  id v102;
  NSString v103;
  id v104;
  char *v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  char *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  char *v112;
  uint64_t (*v113)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void (*v120)(char *, unint64_t, uint64_t);
  uint64_t v121;
  char *v122;
  char *v123;
  char v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char v130;
  void (*v131)(char *, uint64_t);
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  uint64_t v140;
  unsigned int *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  void (*v145)(char *, unint64_t, uint64_t);
  void (*v146)(char *, uint64_t);
  char *v147;
  uint64_t v148;
  char v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  __int128 v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  void (*v173)(char *, unint64_t, uint64_t);
  char *v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  unint64_t v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  void (*v231)(char *, uint64_t, uint64_t, char *);
  char *v232;
  char *v233;
  uint64_t v234;
  char *v236;
  char *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  char *v246;
  char *v247;
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  char *v266;
  uint64_t v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  void (*v276)(char *, uint64_t);
  __int128 v277;
  char *v278;
  char *v279;
  __int128 v280;

  v272 = a1;
  v249 = a3;
  v4 = sub_100004828(&qword_100639D60);
  __chkstk_darwin(v4);
  v248 = (char *)&v236 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004828(&qword_100639D68);
  __chkstk_darwin(v6);
  v247 = (char *)&v236 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100639D70);
  __chkstk_darwin(v8);
  v246 = (char *)&v236 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v10);
  v238 = (uint64_t)&v236 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100635DC8);
  v13 = __chkstk_darwin(v12);
  v244 = (char *)&v236 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v243 = (char *)&v236 - v16;
  v17 = __chkstk_darwin(v15);
  v245 = (uint64_t)&v236 - v18;
  v19 = __chkstk_darwin(v17);
  v237 = (char *)&v236 - v20;
  __chkstk_darwin(v19);
  v261 = (char *)&v236 - v21;
  v241 = type metadata accessor for ISO18013KnownNamespaces(0);
  v240 = *(_QWORD *)(v241 - 8);
  __chkstk_darwin(v241);
  v239 = (char *)&v236 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v255 = type metadata accessor for ISO23220_1_ElementIdentifier(0);
  v254 = *(_QWORD *)(v255 - 8);
  __chkstk_darwin(v255);
  v253 = (char *)&v236 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100004828(&qword_100639D78);
  v25 = __chkstk_darwin(v24);
  v242 = (uint64_t)&v236 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v267 = (uint64_t)&v236 - v27;
  v28 = sub_100004828(&qword_100639DB8);
  __chkstk_darwin(v28);
  v30 = (char *)&v236 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
  v251 = *(_QWORD *)(v252 - 8);
  __chkstk_darwin(v252);
  v250 = (char *)&v236 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for MobileDocumentElement(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v268 = (char *)&v236 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v256 = (char *)&v236 - v37;
  v38 = __chkstk_darwin(v36);
  v265 = (char *)&v236 - v39;
  v40 = __chkstk_darwin(v38);
  v274 = (char *)&v236 - v41;
  v42 = __chkstk_darwin(v40);
  v266 = (char *)&v236 - v43;
  v44 = __chkstk_darwin(v42);
  v271 = (char *)&v236 - v45;
  v46 = __chkstk_darwin(v44);
  v269 = (char *)&v236 - v47;
  v48 = __chkstk_darwin(v46);
  v50 = (char *)&v236 - v49;
  v51 = __chkstk_darwin(v48);
  v257 = (char *)&v236 - v52;
  v53 = __chkstk_darwin(v51);
  v55 = (char *)&v236 - v54;
  v56 = __chkstk_darwin(v53);
  v58 = (char *)&v236 - v57;
  __chkstk_darwin(v56);
  v60 = (char *)&v236 - v59;
  v262 = type metadata accessor for PersonNameComponents(0);
  v260 = *(_QWORD *)(v262 - 8);
  v61 = __chkstk_darwin(v262);
  v258 = (char *)&v236 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __chkstk_darwin(v61);
  v264 = (char *)&v236 - v64;
  static MobileDocumentElement.givenName.getter(v63);
  v65 = *(_QWORD *)(a2 + 16);
  v263 = a2;
  v273 = v33;
  v275 = v50;
  v259 = v55;
  v270 = v60;
  if (!v65)
  {
    v71 = *(void (**)(char *, uint64_t))(v33 + 8);
    v72 = ((uint64_t (*)(char *, uint64_t))v71)(v270, v32);
    goto LABEL_13;
  }
  v66 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v67 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
  v67(v58, a2 + v66, v32);
  v68 = v33;
  v69 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(a2);
  v70 = dispatch thunk of static Equatable.== infix(_:_:)(v58, v60, v32, v69);
  v276 = *(void (**)(char *, uint64_t))(v68 + 8);
  v276(v58, v32);
  if ((v70 & 1) == 0)
  {
    if (v65 != 1)
    {
      v236 = v30;
      v73 = *(_QWORD *)(v273 + 72);
      v74 = a2 + v73 + v66;
      v75 = 1;
      while (1)
      {
        v67(v58, v74, v32);
        v76 = v75 + 1;
        if (__OFADD__(v75, 1))
        {
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
          JUMPOUT(0x100261AA4);
        }
        v77 = dispatch thunk of static Equatable.== infix(_:_:)(v58, v270, v32, v69);
        v276(v58, v32);
        if ((v77 & 1) != 0)
          break;
        ++v75;
        v74 += v73;
        if (v76 == v65)
        {
          a2 = v263;
          swift_bridgeObjectRelease(v263);
          v33 = v273;
          v50 = v275;
          v71 = v276;
          v30 = v236;
          goto LABEL_12;
        }
      }
      a2 = v263;
      swift_bridgeObjectRelease(v263);
      v30 = v236;
      goto LABEL_26;
    }
    swift_bridgeObjectRelease(a2);
    v33 = v273;
    v50 = v275;
    v71 = v276;
LABEL_12:
    v55 = v259;
    v72 = ((uint64_t (*)(char *, uint64_t))v71)(v270, v32);
LABEL_13:
    static MobileDocumentElement.familyName.getter(v72);
    v78 = *(_QWORD *)(a2 + 16);
    if (v78)
    {
      v236 = v30;
      v79 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      v80 = a2 + v79;
      v81 = v55;
      v82 = a2;
      v83 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      v84 = v257;
      v83(v257, v80, v32);
      v85 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
      swift_bridgeObjectRetain(v82);
      LOBYTE(v81) = dispatch thunk of static Equatable.== infix(_:_:)(v84, v81, v32, v85);
      v71(v84, v32);
      if ((v81 & 1) != 0)
      {
        swift_bridgeObjectRelease(v82);
        a2 = v82;
LABEL_28:
        v30 = v236;
        v71(v259, v32);
        goto LABEL_29;
      }
      if (v78 != 1)
      {
        v276 = v71;
        v86 = *(_QWORD *)(v273 + 72);
        v87 = v263 + v86 + v79;
        v88 = 1;
        v89 = v257;
        while (1)
        {
          v83(v89, v87, v32);
          v90 = v88 + 1;
          if (__OFADD__(v88, 1))
            goto LABEL_115;
          v91 = dispatch thunk of static Equatable.== infix(_:_:)(v89, v259, v32, v85);
          v276(v89, v32);
          if ((v91 & 1) != 0)
            break;
          ++v88;
          v87 += v86;
          if (v90 == v78)
          {
            a2 = v263;
            swift_bridgeObjectRelease(v263);
            v33 = v273;
            v71 = v276;
            goto LABEL_23;
          }
        }
        a2 = v263;
        swift_bridgeObjectRelease(v263);
        v71 = v276;
        goto LABEL_28;
      }
      a2 = v263;
      swift_bridgeObjectRelease(v263);
      v33 = v273;
LABEL_23:
      v50 = v275;
      v55 = v259;
    }
    v276 = v71;
    v92 = ((uint64_t (*)(char *, uint64_t))v71)(v55, v32);
    v93 = v269;
    goto LABEL_37;
  }
  swift_bridgeObjectRelease(a2);
LABEL_26:
  v71 = v276;
  v276(v270, v32);
LABEL_29:
  v94 = v251;
  v95 = (uint64_t)v250;
  v96 = v252;
  (*(void (**)(char *, _QWORD, uint64_t))(v251 + 104))(v250, enum case for ISO23220_1_Japan_ElementIdentifier.fullName(_:), v252);
  v97 = sub_10025B374(v95);
  v99 = (char *)v98;
  v92 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 8))(v95, v96);
  v276 = v71;
  if (v99
    && (v278 = (char *)v97,
        v279 = v99,
        v100 = sub_1000B3C38(),
        Collection.nilIfEmpty.getter(&v280, &type metadata for String, v100),
        v92 = swift_bridgeObjectRelease(v99),
        (v101 = *((_QWORD *)&v280 + 1)) != 0))
  {
    v102 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), "init");
    v103 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v101);
    v104 = objc_msgSend(v102, "personNameComponentsFromString:", v103);

    if (v104)
    {
      v105 = v258;
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)(v104);

      v106 = v260;
      v107 = *(void (**)(char *, char *, uint64_t))(v260 + 32);
      v108 = v105;
      v109 = v262;
      v107(v30, v108, v262);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v30, 0, 1, v109);
      v110 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v106 + 48))(v30, 1, v109);
      v93 = v269;
      if (v110 != 1)
      {
        v107(v264, v30, v262);
        v33 = v273;
        v50 = v275;
        goto LABEL_38;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v260 + 56))(v30, 1, 1, v262);
      v93 = v269;
    }
    v92 = sub_100008030((uint64_t)v30, &qword_100639DB8);
    v33 = v273;
    v50 = v275;
  }
  else
  {
    v33 = v273;
    v50 = v275;
    v93 = v269;
  }
LABEL_37:
  PersonNameComponents.init()(v92);
LABEL_38:
  v111 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex(0);
  v112 = *(char **)(v111 - 8);
  v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v112 + 7);
  v114 = v113(v267, 1, 1, v111);
  static MobileDocumentElement.sex.getter(v114);
  v115 = *(_QWORD *)(a2 + 16);
  if (!v115)
    goto LABEL_47;
  v257 = v112;
  v259 = (char *)v111;
  v270 = (char *)v113;
  v116 = v50;
  v117 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v118 = a2 + v117;
  v119 = a2;
  v120 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
  v120(v93, v118, v32);
  v121 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(v119);
  v122 = v116;
  v123 = v93;
  v124 = dispatch thunk of static Equatable.== infix(_:_:)(v93, v122, v32, v121);
  v276(v123, v32);
  if ((v124 & 1) == 0)
  {
    if (v115 != 1)
    {
      v125 = *(_QWORD *)(v273 + 72);
      v126 = v263 + v125 + v117;
      v127 = 1;
      v128 = v269;
      while (1)
      {
        v120(v128, v126, v32);
        v129 = v127 + 1;
        if (__OFADD__(v127, 1))
          goto LABEL_111;
        v130 = dispatch thunk of static Equatable.== infix(_:_:)(v128, v275, v32, v121);
        v276(v128, v32);
        if ((v130 & 1) != 0)
          break;
        ++v127;
        v126 += v125;
        if (v129 == v115)
          goto LABEL_46;
      }
      a2 = v263;
      swift_bridgeObjectRelease(v263);
      goto LABEL_49;
    }
LABEL_46:
    a2 = v263;
    swift_bridgeObjectRelease(v263);
    v50 = v275;
LABEL_47:
    v131 = v276;
    v132 = ((uint64_t (*)(char *, uint64_t))v276)(v50, v32);
    v133 = v271;
    goto LABEL_56;
  }
  swift_bridgeObjectRelease(v119);
  a2 = v119;
LABEL_49:
  v131 = v276;
  v276(v275, v32);
  v134 = v254;
  v135 = (uint64_t)v253;
  v136 = v255;
  (*(void (**)(char *, _QWORD, uint64_t))(v254 + 104))(v253, enum case for ISO23220_1_ElementIdentifier.sex(_:), v255);
  v137 = sub_10025B88C(v135);
  v139 = v138;
  v132 = (*(uint64_t (**)(uint64_t, uint64_t))(v134 + 8))(v135, v136);
  v133 = v271;
  if ((v139 & 1) == 0)
  {
    switch(v137)
    {
      case 0:
        v140 = v267;
        sub_100008030(v267, &qword_100639D78);
        v141 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.unknown(_:);
        goto LABEL_55;
      case 1:
        v140 = v267;
        sub_100008030(v267, &qword_100639D78);
        v141 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.male(_:);
        goto LABEL_55;
      case 2:
        v140 = v267;
        sub_100008030(v267, &qword_100639D78);
        v141 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.female(_:);
        goto LABEL_55;
      case 9:
        v140 = v267;
        sub_100008030(v267, &qword_100639D78);
        v141 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.notApplicable(_:);
LABEL_55:
        v142 = v259;
        (*((void (**)(uint64_t, _QWORD, char *))v257 + 13))(v140, *v141, v259);
        v132 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, char *))v270)(v140, 0, 1, v142);
        break;
      default:
        break;
    }
  }
LABEL_56:
  static MobileDocumentElement.portrait.getter(v132);
  v143 = *(_QWORD *)(a2 + 16);
  if (!v143)
    goto LABEL_66;
  v144 = (*(unsigned __int8 *)(v273 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v273 + 80);
  v145 = *(void (**)(char *, unint64_t, uint64_t))(v273 + 16);
  v146 = v131;
  v147 = v266;
  v145(v266, a2 + v144, v32);
  v148 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(a2);
  v149 = dispatch thunk of static Equatable.== infix(_:_:)(v147, v133, v32, v148);
  v150 = v147;
  v131 = v146;
  v146(v150, v32);
  if ((v149 & 1) == 0)
  {
    if (v143 != 1)
    {
      v152 = *(_QWORD *)(v273 + 72);
      v153 = a2 + v152 + v144;
      v154 = 1;
      v155 = v266;
      while (1)
      {
        v145(v155, v153, v32);
        v156 = v154 + 1;
        if (__OFADD__(v154, 1))
          goto LABEL_112;
        v157 = dispatch thunk of static Equatable.== infix(_:_:)(v155, v271, v32, v148);
        v276(v155, v32);
        if ((v157 & 1) != 0)
          break;
        ++v154;
        v153 += v152;
        if (v156 == v143)
        {
          a2 = v263;
          swift_bridgeObjectRelease(v263);
          v133 = v271;
          v131 = v276;
          goto LABEL_66;
        }
      }
      v151 = v263;
      swift_bridgeObjectRelease(v263);
      v133 = v271;
      v131 = v276;
      goto LABEL_68;
    }
    swift_bridgeObjectRelease(a2);
LABEL_66:
    v158 = ((uint64_t (*)(char *, uint64_t))v131)(v133, v32);
    v270 = (char *)0xF000000000000000;
    v271 = 0;
    v159 = v273;
    v160 = v274;
    goto LABEL_72;
  }
  v151 = a2;
  swift_bridgeObjectRelease(a2);
LABEL_68:
  v131(v133, v32);
  v161 = v251;
  v162 = (uint64_t)v250;
  v163 = v252;
  (*(void (**)(char *, _QWORD, uint64_t))(v251 + 104))(v250, enum case for ISO23220_1_Japan_ElementIdentifier.portrait(_:), v252);
  v164 = sub_10025BDA8(v162, &v280);
  v158 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v161 + 8))(v162, v163, v164);
  v165 = v280;
  v159 = v273;
  if (*((_QWORD *)&v280 + 1) >> 60 == 15)
  {
    v270 = (char *)*((_QWORD *)&v280 + 1);
    v271 = (char *)v280;
  }
  else
  {
    v277 = v280;
    v166 = sub_100262570();
    Collection.nilIfEmpty.getter(&v278, &type metadata for Data, v166);
    v158 = sub_100007F78(v165, *((unint64_t *)&v165 + 1));
    v270 = v279;
    v271 = v278;
  }
  v160 = v274;
  a2 = v151;
LABEL_72:
  v167 = (uint64_t)v261;
  static MobileDocumentElement.age.getter(v158);
  v168 = *(_QWORD *)(a2 + 16);
  if (!v168)
    goto LABEL_82;
  v169 = v159;
  v170 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
  v171 = a2 + v170;
  v172 = a2;
  v173 = *(void (**)(char *, unint64_t, uint64_t))(v169 + 16);
  v174 = v265;
  v173(v265, v171, v32);
  v175 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(v172);
  v176 = dispatch thunk of static Equatable.== infix(_:_:)(v174, v160, v32, v175);
  v131(v174, v32);
  if ((v176 & 1) == 0)
  {
    if (v168 != 1)
    {
      v160 = v274;
      v177 = *(_QWORD *)(v273 + 72);
      v178 = v263 + v177 + v170;
      v179 = 1;
      v180 = v265;
      while (1)
      {
        v173(v180, v178, v32);
        v181 = v179 + 1;
        if (__OFADD__(v179, 1))
          goto LABEL_113;
        v182 = dispatch thunk of static Equatable.== infix(_:_:)(v180, v160, v32, v175);
        v276(v180, v32);
        if ((v182 & 1) != 0)
          break;
        ++v179;
        v178 += v177;
        v160 = v274;
        if (v181 == v168)
        {
          swift_bridgeObjectRelease(v263);
          v159 = v273;
          v167 = (uint64_t)v261;
          v131 = v276;
          goto LABEL_82;
        }
      }
      swift_bridgeObjectRelease(v263);
      v167 = (uint64_t)v261;
      v131 = v276;
      goto LABEL_84;
    }
    swift_bridgeObjectRelease(v263);
    v159 = v273;
    v160 = v274;
    v167 = (uint64_t)v261;
LABEL_82:
    v183 = ((uint64_t (*)(char *, uint64_t))v131)(v160, v32);
    v269 = 0;
    LODWORD(v266) = 1;
    goto LABEL_85;
  }
  swift_bridgeObjectRelease(v172);
  v167 = (uint64_t)v261;
LABEL_84:
  v131(v274, v32);
  v184 = v254;
  v185 = (uint64_t)v253;
  v186 = v255;
  (*(void (**)(char *, _QWORD, uint64_t))(v254 + 104))(v253, enum case for ISO23220_1_ElementIdentifier.ageInYears(_:), v255);
  v269 = (char *)sub_10025B88C(v185);
  LODWORD(v266) = v187 & 1;
  v183 = (*(uint64_t (**)(uint64_t, uint64_t))(v184 + 8))(v185, v186);
  v159 = v273;
LABEL_85:
  v188 = ISO18013Response.IssuerSigned.namespaces.getter(v183);
  if (v188)
  {
    v189 = v188;
    v190 = v239;
    v191 = static ISO23220_1_ElementIdentifier.namespaceIdentifier.getter();
    v192 = ISO18013KnownNamespaces.rawValue.getter(v191);
    v194 = v193;
    (*(void (**)(char *, uint64_t))(v240 + 8))(v190, v241);
    if (*(_QWORD *)(v189 + 16) && (v195 = sub_1004A8604(v192, v194), (v196 & 1) != 0))
    {
      v197 = *(_QWORD *)(*(_QWORD *)(v189 + 56) + 8 * v195);
      swift_bridgeObjectRetain(v197);
    }
    else
    {
      v197 = 0;
    }
    swift_bridgeObjectRelease(v194);
    swift_bridgeObjectRelease(v189);
  }
  else
  {
    v197 = 0;
  }
  v198 = v263;
  v265 = (char *)sub_100261CB0(v197, j___s7CoreIDV28ISO23220_1_ElementIdentifierO09isAgeOverD0ySbSSFZ, 0, (uint64_t (*)(uint64_t, uint64_t))sub_100261AEC, 0, v263);
  swift_bridgeObjectRelease(v197);
  v199 = type metadata accessor for DateComponents(0);
  v273 = *(_QWORD *)(*(_QWORD *)(v199 - 8) + 56);
  v274 = (char *)v199;
  v200 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v273)(v167, 1, 1);
  v201 = v256;
  static MobileDocumentElement.dateOfBirth.getter(v200);
  v202 = *(_QWORD *)(v198 + 16);
  v203 = v268;
  if (!v202)
    goto LABEL_103;
  v204 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
  v275 = *(char **)(v159 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v275)(v268, v198 + v204, v32);
  v205 = sub_100004790(&qword_100639D80, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentElement, (uint64_t)&protocol conformance descriptor for MobileDocumentElement);
  swift_bridgeObjectRetain(v198);
  v206 = dispatch thunk of static Equatable.== infix(_:_:)(v203, v201, v32, v205);
  v131(v203, v32);
  if ((v206 & 1) == 0)
  {
    if (v202 != 1)
    {
      v207 = *(_QWORD *)(v159 + 72);
      v208 = v198 + v207 + v204;
      v209 = 1;
      v210 = v256;
      v211 = v268;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v275)(v211, v208, v32);
        v212 = v209 + 1;
        if (__OFADD__(v209, 1))
          goto LABEL_114;
        v213 = dispatch thunk of static Equatable.== infix(_:_:)(v211, v210, v32, v205);
        v276(v211, v32);
        if ((v213 & 1) != 0)
          break;
        ++v209;
        v208 += v207;
        if (v212 == v202)
        {
          v198 = v263;
          swift_bridgeObjectRelease(v263);
          v201 = v210;
          v167 = (uint64_t)v261;
          goto LABEL_102;
        }
      }
      v198 = v263;
      swift_bridgeObjectRelease(v263);
      v167 = (uint64_t)v261;
      goto LABEL_105;
    }
    swift_bridgeObjectRelease(v198);
    v167 = (uint64_t)v261;
    v201 = v256;
LABEL_102:
    v131 = v276;
LABEL_103:
    v131(v201, v32);
    swift_bridgeObjectRelease(v198);
    goto LABEL_109;
  }
  swift_bridgeObjectRelease(v198);
  v167 = (uint64_t)v261;
LABEL_105:
  v276(v256, v32);
  swift_bridgeObjectRelease(v198);
  v214 = v254;
  v215 = (uint64_t)v253;
  v216 = v255;
  (*(void (**)(char *, _QWORD, uint64_t))(v254 + 104))(v253, enum case for ISO23220_1_ElementIdentifier.birthDate(_:), v255);
  v217 = v238;
  sub_10025C2DC(v215, v238);
  (*(void (**)(uint64_t, uint64_t))(v214 + 8))(v215, v216);
  v218 = type metadata accessor for Date(0);
  v219 = *(_QWORD *)(v218 - 8);
  v220 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v219 + 48))(v217, 1, v218);
  v221 = (uint64_t)v237;
  if (v220 == 1)
  {
    sub_100008030(v167, &qword_100635DC8);
    sub_100008030(v217, &qword_100633990);
    ((void (*)(uint64_t, uint64_t, uint64_t, char *))v273)(v221, 1, 1, v274);
  }
  else
  {
    Date.utcDayRepresentation.getter();
    sub_100008030(v167, &qword_100635DC8);
    (*(void (**)(uint64_t, uint64_t))(v219 + 8))(v217, v218);
  }
  sub_1000A1F54(v221, v167, &qword_100635DC8);
LABEL_109:
  (*(void (**)(char *, char *, uint64_t))(v260 + 16))(v258, v264, v262);
  v222 = v242;
  sub_100038B24(v267, v242, &qword_100639D78);
  v223 = v245;
  sub_100038B24(v167, v245, &qword_100635DC8);
  v224 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Address(0);
  v225 = v246;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v224 - 8) + 56))(v246, 1, 1, v224);
  v226 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.IssuingAuthority(0);
  v227 = v247;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v226 - 8) + 56))(v247, 1, 1, v226);
  v228 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DHSComplianceStatus(0);
  v229 = v248;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v228 - 8) + 56))(v248, 1, 1, v228);
  v230 = v243;
  v231 = (void (*)(char *, uint64_t, uint64_t, char *))v273;
  v232 = v274;
  ((void (*)(char *, uint64_t, uint64_t, char *))v273)(v243, 1, 1, v274);
  v233 = v244;
  v231(v244, 1, 1, v232);
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.init(nameComponents:sex:portraitData:age:ageAtLeastElements:dateOfBirth:address:nationality:issuingAuthority:drivingPrivileges:aamvaDrivingPrivileges:documentDHSComplianceStatus:documentNumber:documentIssueDate:documentExpirationDate:)(v258, v222, v271, v270, v269, v266, v265, v223, v225, 0, 0, v227, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v229, 0, 0, v230, v233);
  v234 = type metadata accessor for ISO18013Response.IssuerSigned(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v234 - 8) + 8))(v272, v234);
  sub_100008030(v167, &qword_100635DC8);
  sub_100008030(v267, &qword_100639D78);
  return (*(uint64_t (**)(char *, uint64_t))(v260 + 8))(v264, v262);
}

uint64_t sub_100261AD0()
{
  return static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)();
}

uint64_t sub_100261AEC()
{
  return static ISO23220_1_ElementIdentifier.parseAgeOverElement(_:)();
}

uint64_t sub_100261B04(int a1, int a2, Swift::Int a3, uint64_t a4, void *a5)
{
  Swift::String v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;

  _StringGuts.grow(_:)(a3);
  v7._object = (void *)0x8000000100558580;
  v7._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits = a4;
  v10._object = a5;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 46;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t sub_100261C0C(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  Swift::String v7;
  void *object;
  Swift::String v9;

  _StringGuts.grow(_:)(a2);
  v6._countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._countAndFlagsBits = 46;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 0;
}

unint64_t sub_100261CB0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  void (*v31)(char *, uint64_t, uint64_t, __n128);
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  _BOOL8 v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  char v89;
  _QWORD *v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t result;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, uint64_t);
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t, __n128);
  uint64_t v121;
  unsigned __int8 v122;
  _QWORD v123[6];

  v115 = a4;
  v116 = a5;
  v118 = a2;
  v106 = type metadata accessor for Logger(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AnyCodable(0);
  v111 = *(_QWORD *)(v10 - 8);
  v112 = v10;
  __chkstk_darwin(v10);
  v110 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v117 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v109 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v97 - v15;
  v17 = sub_100004828(&qword_100630DE8);
  v121 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return sub_10012CB64((uint64_t)_swiftEmptyArrayStorage);
  v20 = sub_100468434(a6);
  v21 = sub_10012CB64((uint64_t)_swiftEmptyArrayStorage);
  v107 = (_QWORD *)v21;
  v102 = v20[2];
  if (v102)
  {
    v22 = 0;
    v23 = *(_QWORD *)(a1 + 16);
    v101 = v20 + 4;
    v100 = v23;
    v114 = a3;
    v99 = a1;
    v98 = v20;
    while (v22 < v20[2])
    {
      v108 = v101[v22];
      if (v23)
      {
        v27 = v23;
        v103 = v22;
        v28 = v121;
        v29 = a1 + ((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80));
        v30 = swift_bridgeObjectRetain(a1);
        v31 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v28 + 16);
        v119 = *(_QWORD *)(v28 + 72);
        v120 = v31;
        v32 = v27;
        v31(v19, v29, v17, v30);
        while (2)
        {
          v34 = CBOREncodedCBOR.value.getter(v17);
          v35 = ISO18013IssuerSignedItem.elementIdentifier.getter(v34);
          v37 = v36;
          v38 = *(void (**)(char *, uint64_t))(v117 + 8);
          v38(v16, v12);
          LOBYTE(v35) = v118(v35, v37);
          swift_bridgeObjectRelease(v37);
          if ((v35 & 1) != 0)
          {
            v39 = CBOREncodedCBOR.value.getter(v17);
            v40 = ISO18013IssuerSignedItem.elementIdentifier.getter(v39);
            v42 = v41;
            v38(v16, v12);
            v43 = v115(v40, v42);
            LOBYTE(v40) = v44;
            swift_bridgeObjectRelease(v42);
            if ((v40 & 1) == 0)
            {
              v113 = v43;
              v45 = v12;
              v46 = v109;
              v47 = CBOREncodedCBOR.value.getter(v17);
              v48 = v110;
              ISO18013IssuerSignedItem.elementValue.getter(v47);
              v49 = v46;
              v12 = v45;
              v50 = ((uint64_t (*)(char *, uint64_t))v38)(v49, v45);
              AnyCodable.value.getter(v123, v50);
              (*(void (**)(char *, uint64_t))(v111 + 8))(v48, v112);
              if (!v123[3])
              {
                sub_100008030((uint64_t)v123, &qword_100639D98);
                goto LABEL_10;
              }
              v51 = swift_dynamicCast(&v122, v123, &type metadata for AnyHashable, &type metadata for Bool, 6);
              if ((v51 & 1) != 0)
              {
                v52 = v108;
                if (v113 == v108)
                {
                  LODWORD(v113) = v122;
                  v53 = v104;
                  v54 = defaultLogger()(v51);
                  __chkstk_darwin(v54);
                  *(&v97 - 2) = v52;
                  Logger.sensitive(_:)(sub_100262650);
                  (*(void (**)(char *, uint64_t))(v105 + 8))(v53, v106);
                  v55 = v107;
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v107);
                  v123[0] = v55;
                  v58 = sub_1004A8730(v52);
                  v59 = v55[2];
                  v60 = (v57 & 1) == 0;
                  v61 = v59 + v60;
                  if (__OFADD__(v59, v60))
                    goto LABEL_57;
                  v62 = v57;
                  if (v55[3] >= v61)
                  {
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                      sub_10012AAAC();
                  }
                  else
                  {
                    sub_100125D30(v61, isUniquelyReferenced_nonNull_native);
                    v63 = sub_1004A8730(v108);
                    if ((v62 & 1) != (v64 & 1))
                      goto LABEL_63;
                    v58 = v63;
                  }
                  v89 = v113;
                  v107 = (_QWORD *)v123[0];
                  if ((v62 & 1) != 0)
                  {
                    *(_BYTE *)(*(_QWORD *)(v123[0] + 56) + v58) = v113;
                    goto LABEL_53;
                  }
                  v90 = v107;
                  *(_QWORD *)(v123[0] + 8 * (v58 >> 6) + 64) |= 1 << v58;
                  *(_QWORD *)(v90[6] + 8 * v58) = v108;
                  *(_BYTE *)(v90[7] + v58) = v89;
                  v91 = v90[2];
                  v92 = __OFADD__(v91, 1);
                  v93 = v91 + 1;
                  if (v92)
                    goto LABEL_59;
LABEL_52:
                  v90[2] = v93;
                  goto LABEL_53;
                }
                if (v113 < v108 && (v122 & 1) == 0)
                {
                  v65 = v104;
                  v66 = defaultLogger()(v51);
                  __chkstk_darwin(v66);
                  *(&v97 - 2) = v113;
                  *(&v97 - 1) = v52;
                  Logger.sensitive(_:)(sub_10026261C);
                  (*(void (**)(char *, uint64_t))(v105 + 8))(v65, v106);
                  v67 = v107;
                  v68 = swift_isUniquelyReferenced_nonNull_native(v107);
                  v123[0] = v67;
                  v70 = sub_1004A8730(v52);
                  v71 = v67[2];
                  v72 = (v69 & 1) == 0;
                  v73 = v71 + v72;
                  if (__OFADD__(v71, v72))
                    goto LABEL_58;
                  v74 = v69;
                  if (v67[3] >= v73)
                  {
                    if ((v68 & 1) == 0)
                      sub_10012AAAC();
                  }
                  else
                  {
                    sub_100125D30(v73, v68);
                    v75 = sub_1004A8730(v108);
                    if ((v74 & 1) != (v76 & 1))
                      goto LABEL_63;
                    v70 = v75;
                  }
                  v107 = (_QWORD *)v123[0];
                  if ((v74 & 1) == 0)
                  {
                    v90 = v107;
                    *(_QWORD *)(v123[0] + 8 * (v70 >> 6) + 64) |= 1 << v70;
                    *(_QWORD *)(v90[6] + 8 * v70) = v108;
                    *(_BYTE *)(v90[7] + v70) = 0;
                    v94 = v90[2];
                    v92 = __OFADD__(v94, 1);
                    v93 = v94 + 1;
                    if (v92)
                      goto LABEL_61;
                    goto LABEL_52;
                  }
                  *(_BYTE *)(*(_QWORD *)(v123[0] + 56) + v70) = 0;
                  goto LABEL_53;
                }
                if (v108 < v113 && v122)
                {
                  v77 = v104;
                  v78 = defaultLogger()(v51);
                  __chkstk_darwin(v78);
                  *(&v97 - 2) = v113;
                  *(&v97 - 1) = v52;
                  Logger.sensitive(_:)(sub_1002625E8);
                  (*(void (**)(char *, uint64_t))(v105 + 8))(v77, v106);
                  v79 = v107;
                  v80 = swift_isUniquelyReferenced_nonNull_native(v107);
                  v123[0] = v79;
                  v82 = sub_1004A8730(v52);
                  v83 = v79[2];
                  v84 = (v81 & 1) == 0;
                  v85 = v83 + v84;
                  if (__OFADD__(v83, v84))
                    goto LABEL_60;
                  v86 = v81;
                  if (v79[3] >= v85)
                  {
                    if ((v80 & 1) == 0)
                      sub_10012AAAC();
                  }
                  else
                  {
                    sub_100125D30(v85, v80);
                    v87 = sub_1004A8730(v108);
                    if ((v86 & 1) != (v88 & 1))
                      goto LABEL_63;
                    v82 = v87;
                  }
                  v107 = (_QWORD *)v123[0];
                  if ((v86 & 1) == 0)
                  {
                    v90 = v107;
                    *(_QWORD *)(v123[0] + 8 * (v82 >> 6) + 64) |= 1 << v82;
                    *(_QWORD *)(v90[6] + 8 * v82) = v108;
                    *(_BYTE *)(v90[7] + v82) = 1;
                    v95 = v90[2];
                    v92 = __OFADD__(v95, 1);
                    v93 = v95 + 1;
                    if (v92)
                      goto LABEL_62;
                    goto LABEL_52;
                  }
                  *(_BYTE *)(*(_QWORD *)(v123[0] + 56) + v82) = 1;
LABEL_53:
                  swift_bridgeObjectRelease(0x8000000000000000);
                }
              }
            }
          }
LABEL_10:
          (*(void (**)(char *, uint64_t))(v121 + 8))(v19, v17);
          v29 += v119;
          if (!--v32)
          {
            a1 = v99;
            v21 = swift_bridgeObjectRelease(v99);
            v20 = v98;
            v22 = v103;
            break;
          }
          v120(v19, v29, v17, v33);
          continue;
        }
      }
      v24 = v22 + 1;
      v25 = v104;
      v26 = defaultLogger()(v21);
      __chkstk_darwin(v26);
      *(&v97 - 2) = v108;
      Logger.sensitive(_:)(sub_1002625B4);
      v21 = (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v25, v106);
      v22 = v24;
      v23 = v100;
      if (v24 == v102)
        goto LABEL_54;
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
    __break(1u);
  }
  else
  {
LABEL_54:
    swift_bridgeObjectRelease(v20);
    return (unint64_t)v107;
  }
  return result;
}

unint64_t sub_100262570()
{
  unint64_t result;

  result = qword_100639D88;
  if (!qword_100639D88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100639D88);
  }
  return result;
}

uint64_t sub_1002625B4()
{
  uint64_t v0;

  return sub_100261C0C(*(_QWORD *)(v0 + 16), 101, 0xD000000000000062, (void *)0x8000000100558650);
}

uint64_t sub_1002625E8()
{
  uint64_t v0;

  return sub_100261B04(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 114, 0xD000000000000041, (void *)0x8000000100558600);
}

uint64_t sub_10026261C()
{
  uint64_t v0;

  return sub_100261B04(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 115, 0xD000000000000042, (void *)0x80000001005585B0);
}

uint64_t sub_100262650()
{
  uint64_t v0;

  return sub_100261C0C(*(_QWORD *)(v0 + 16), 102, 0xD000000000000063, (void *)0x8000000100558510);
}

uint64_t sub_100262684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[38] = a3;
  v4[39] = a4;
  v4[36] = a1;
  v4[37] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[40] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[41] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[42] = swift_task_alloc(v7);
  v4[43] = swift_task_alloc(v7);
  v8 = type metadata accessor for DIPError.Code(0);
  v4[44] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[45] = v9;
  v4[46] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPError(0);
  v4[47] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[48] = v11;
  v4[49] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100636688);
  v4[50] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPPregeneratedAssessment(0);
  v4[51] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[52] = v14;
  v4[53] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100262794, 0, 0);
}

uint64_t sub_100262794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _BYTE v60[8];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 400);
  sub_100038B24(*(_QWORD *)(v0 + 304), v3, &qword_100636688);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = sub_100008030(*(_QWORD *)(v0 + 400), &qword_100636688);
    v7 = defaultLogger()(v4);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "getOrCreateGUIDS: no pre-generated assessment available; generating new guids",
        v11,
        2u);
      swift_slowDealloc(v11, -1, -1);
    }
    v13 = *(_QWORD *)(v0 + 328);
    v12 = *(_QWORD *)(v0 + 336);
    v14 = *(_QWORD *)(v0 + 320);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    v15 = (_QWORD *)swift_task_alloc(dword_100638C9C);
    *(_QWORD *)(v0 + 432) = v15;
    *v15 = v0;
    v15[1] = sub_100262C98;
    return sub_10020EDB0(v0 + 152);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 424);
    v6 = *(_QWORD *)(v0 + 312);
    sub_100038AE0(*(_QWORD *)(v0 + 400), v5, type metadata accessor for DIPPregeneratedAssessment);
    sub_10027A950(v5, v6, (uint64_t)v60);
    v59 = v60[0];
    v16 = v61;
    v17 = v62;
    v18 = v63;
    v57 = v65;
    v58 = v64;
    v55 = v67;
    v56 = v66;
    v53 = v69;
    v54 = v68;
    v51 = v71;
    v52 = v70;
    v49 = v73;
    v50 = v72;
    v47 = v75;
    v48 = v74;
    v46 = v76;
    v45 = v77;
    v43 = v79;
    v44 = v78;
    v41 = v81;
    v42 = v80;
    v39 = v83;
    v40 = v82;
    v37 = v85;
    v38 = v84;
    v35 = v87;
    v36 = v86;
    v33 = v89;
    v34 = v88;
    v31 = v91;
    v32 = v90;
    v29 = v93;
    v30 = v92;
    v19 = *(_QWORD *)(v0 + 416);
    v20 = *(_QWORD *)(v0 + 408);
    v21 = *(_QWORD *)(v0 + 296);
    sub_100038AE0(*(_QWORD *)(v0 + 424), v21, type metadata accessor for DIPPregeneratedAssessment);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, v20);
    v22 = *(_QWORD *)(v0 + 392);
    v23 = *(_QWORD *)(v0 + 400);
    v24 = *(_QWORD *)(v0 + 368);
    v26 = *(_QWORD *)(v0 + 336);
    v25 = *(_QWORD *)(v0 + 344);
    v27 = *(_QWORD *)(v0 + 288);
    swift_task_dealloc(*(_QWORD *)(v0 + 424));
    swift_task_dealloc(v23);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    *(_BYTE *)v27 = v59;
    *(_QWORD *)(v27 + 8) = v16;
    *(_QWORD *)(v27 + 16) = v17;
    *(_QWORD *)(v27 + 24) = v18;
    *(_QWORD *)(v27 + 32) = v58;
    *(_QWORD *)(v27 + 40) = v57;
    *(_QWORD *)(v27 + 48) = v56;
    *(_QWORD *)(v27 + 56) = v55;
    *(_QWORD *)(v27 + 64) = v54;
    *(_QWORD *)(v27 + 72) = v53;
    *(_QWORD *)(v27 + 80) = v52;
    *(_QWORD *)(v27 + 88) = v51;
    *(_QWORD *)(v27 + 96) = v50;
    *(_QWORD *)(v27 + 104) = v49;
    *(_QWORD *)(v27 + 112) = v48;
    *(_QWORD *)(v27 + 120) = v47;
    *(_QWORD *)(v27 + 128) = v46;
    *(_BYTE *)(v27 + 136) = v45;
    *(_QWORD *)(v27 + 144) = v44;
    *(_QWORD *)(v27 + 152) = v43;
    *(_QWORD *)(v27 + 160) = v42;
    *(_QWORD *)(v27 + 168) = v41;
    *(_QWORD *)(v27 + 176) = v40;
    *(_QWORD *)(v27 + 184) = v39;
    *(_QWORD *)(v27 + 192) = v38;
    *(_QWORD *)(v27 + 200) = v37;
    *(_QWORD *)(v27 + 208) = v36;
    *(_QWORD *)(v27 + 216) = v35;
    *(_QWORD *)(v27 + 224) = v34;
    *(_QWORD *)(v27 + 232) = v33;
    *(_QWORD *)(v27 + 240) = v32;
    *(_QWORD *)(v27 + 248) = v31;
    *(_QWORD *)(v27 + 256) = v30;
    *(_QWORD *)(v27 + 264) = v29;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100262C98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*v1 + 432);
  v3 = *v1;
  *(_QWORD *)(v3 + 440) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100262F38, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(dword_100638C8C);
  *(_QWORD *)(v3 + 448) = v5;
  *v5 = v3;
  v5[1] = sub_100262D3C;
  return sub_10020F3B8(v3 + 16);
}

uint64_t sub_100262D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 448);
  *(_QWORD *)(*(_QWORD *)v1 + 456) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1002630AC;
  else
    v3 = sub_100262DA0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100262DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 416) + 56))(*(_QWORD *)(v0 + 296), 1, 1, *(_QWORD *)(v0 + 408));
  v26 = *(_QWORD *)(v0 + 144);
  v27 = *(_QWORD *)(v0 + 136);
  v24 = *(_OWORD *)(v0 + 104);
  v25 = *(_OWORD *)(v0 + 120);
  v22 = *(_OWORD *)(v0 + 72);
  v23 = *(_OWORD *)(v0 + 88);
  v20 = *(_OWORD *)(v0 + 40);
  v21 = *(_OWORD *)(v0 + 56);
  v19 = *(_OWORD *)(v0 + 24);
  v18 = *(_BYTE *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 272);
  v1 = *(_QWORD *)(v0 + 280);
  v16 = *(_OWORD *)(v0 + 240);
  v17 = *(_OWORD *)(v0 + 256);
  v14 = *(_OWORD *)(v0 + 208);
  v15 = *(_OWORD *)(v0 + 224);
  v12 = *(_OWORD *)(v0 + 176);
  v13 = *(_OWORD *)(v0 + 192);
  v11 = *(_OWORD *)(v0 + 160);
  v3 = *(_BYTE *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 368);
  v8 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  *(_BYTE *)v9 = v3;
  *(_OWORD *)(v9 + 8) = v11;
  *(_OWORD *)(v9 + 24) = v12;
  *(_OWORD *)(v9 + 40) = v13;
  *(_OWORD *)(v9 + 56) = v14;
  *(_OWORD *)(v9 + 72) = v15;
  *(_OWORD *)(v9 + 88) = v16;
  *(_OWORD *)(v9 + 104) = v17;
  *(_QWORD *)(v9 + 120) = v2;
  *(_QWORD *)(v9 + 128) = v1;
  *(_BYTE *)(v9 + 136) = v18;
  *(_OWORD *)(v9 + 144) = v19;
  *(_OWORD *)(v9 + 160) = v20;
  *(_OWORD *)(v9 + 176) = v21;
  *(_OWORD *)(v9 + 192) = v22;
  *(_OWORD *)(v9 + 208) = v23;
  *(_OWORD *)(v9 + 224) = v24;
  *(_OWORD *)(v9 + 240) = v25;
  *(_QWORD *)(v9 + 256) = v27;
  *(_QWORD *)(v9 + 264) = v26;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100262F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 336);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 104))(v6, enum case for DIPError.Code.unexpectedDaemonState(_:), *(_QWORD *)(v0 + 352));
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x8000000100559810, 0, v6, 0, v8, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD000000000000023, 0x8000000100559830, 914);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002630AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  sub_1001837F4((_QWORD *)(v0 + 152));
  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 336);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 104))(v6, enum case for DIPError.Code.unexpectedDaemonState(_:), *(_QWORD *)(v0 + 352));
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x8000000100559810, 0, v6, 0, v8, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD000000000000023, 0x8000000100559830, 914);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100263228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100004790((unint64_t *)&qword_10062FF40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_100004828((uint64_t *)&unk_100636400);
  v13 = sub_100099FFC((unint64_t *)&qword_10062FF50, (uint64_t *)&unk_100636400, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000010, 0x8000000100559180, v9, v6, v3, 0);
  qword_100639DD8 = result;
  return result;
}

void sub_1002633FC()
{
  off_100639DE0 = &_swiftEmptyDictionarySingleton;
}

void *sub_100263410(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_100263458(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t *a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)(char *, _QWORD, uint64_t);
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  Swift::String v76;
  Swift::String v77;
  __int128 v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v16 = v14;
  v141 = a8;
  v135 = a7;
  v144 = a6;
  v134 = a5;
  v133 = a4;
  v143 = a3;
  v132 = a2;
  v145 = a13;
  v157 = a12;
  v130 = type metadata accessor for Logger(0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v131 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DIPError.Code(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v140 = (char *)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v14 + 216) = 0u;
  v22 = v14 + 216;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 232) = 0u;
  *(_OWORD *)(v14 + 248) = 0u;
  *(_OWORD *)(v14 + 264) = 0u;
  *(_QWORD *)(v14 + 280) = 0xF000000000000000;
  v23 = v14 + 288;
  *(_OWORD *)(v14 + 288) = 0u;
  *(_OWORD *)(v14 + 304) = 0u;
  *(_OWORD *)(v14 + 320) = 0u;
  *(_OWORD *)(v14 + 336) = 0u;
  *(_QWORD *)(v14 + 352) = 0xF000000000000000;
  *(_QWORD *)(v14 + 360) = 0;
  *(_QWORD *)(v14 + 384) = 0x6567616D2E6D6F63;
  *(_QWORD *)(v14 + 392) = 0xEB0000000061746ELL;
  *(_WORD *)(v14 + 400) = 257;
  v24 = v14 + OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest;
  *(_QWORD *)(v16 + 368) = 0;
  *(_QWORD *)(v16 + 376) = 0;
  v25 = type metadata accessor for ORDRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = v16 + OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  v27 = type metadata accessor for OTDRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = (_QWORD *)(v16 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  *v28 = 0;
  v28[1] = 0;
  v142 = a11;
  sub_100038B24(a11, (uint64_t)&v149, &qword_100636670);
  v146 = a1;
  if (v150)
  {
    sub_100008018(&v149, (uint64_t)&v151);
  }
  else
  {
    sub_10005618C((uint64_t)&v151);
    sub_100008030((uint64_t)&v149, &qword_100636670);
  }
  if (!v152)
  {
    swift_bridgeObjectRelease(v143);
    swift_bridgeObjectRelease(v144);
    sub_100008030((uint64_t)&v151, &qword_100636670);
    v38 = v140;
    (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v140, enum case for DIPError.Code.assessmentGUIDsExhausted(_:), v19);
    v39 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v40 = type metadata accessor for DIPError(0);
    v41 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v42 = v23;
    swift_allocError(v40, v41, 0, 0);
    v43 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x80000001005596F0, 0, v38, 0, v39, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD0000000000000BFLL, 0x8000000100559720, 150);
    swift_willThrow(v43);
    sub_10027FDDC(v145);
    swift_release(v146);
    swift_release(a9);

    sub_100008030(v157, &qword_100636670);
    sub_100008030(v142, &qword_100636670);
LABEL_13:
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + 120));
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + 136));
    sub_100008030(v22, &qword_100636670);
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + 264));
    sub_100007F78(*(_QWORD *)(v16 + 272), *(_QWORD *)(v16 + 280));
    sub_100008030(v42, &qword_100636670);
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + 336));
    sub_100007F78(*(_QWORD *)(v16 + 344), *(_QWORD *)(v16 + 352));
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + 360));

    swift_bridgeObjectRelease(*(_QWORD *)(v16 + 392));
    sub_100008030(v16 + OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest, &qword_10063A860);
    sub_100008030(v16 + OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest, &qword_10063A868);
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8));
    v55 = type metadata accessor for DIPODNator(0);
    swift_deallocPartialClassInstance(v16, v55, *(unsigned int *)(*(_QWORD *)v16 + 48), *(unsigned __int16 *)(*(_QWORD *)v16 + 52));
    return v16;
  }
  v137 = a10;
  v136 = a9;
  v139 = v22;
  v138 = v23;
  sub_100008018(&v151, (uint64_t)&v154);
  v30 = v155;
  v29 = v156;
  sub_10000806C(&v154, v155);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v30, v29);
  v33 = v32;
  if (qword_10062F4B0 != -1)
    swift_once(&qword_10062F4B0, sub_1001A5E1C);
  v34 = qword_1006702E0;
  swift_retain(qword_1006702E0);
  v35 = sub_1001AD3EC(v31, (unint64_t)v33);
  v37 = v31;
  v22 = v139;
  if (v15)
  {
    swift_release(v34);
    swift_bridgeObjectRelease(v143);
    swift_bridgeObjectRelease(v144);
    sub_10027FDDC(v145);
    swift_bridgeObjectRelease(v33);
LABEL_12:
    swift_release(v146);
    swift_release(v136);

    sub_100008030(v157, &qword_100636670);
    sub_100008030(v142, &qword_100636670);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v154);
    v42 = v138;
    goto LABEL_13;
  }
  v44 = v36;
  v128 = v37;
  v127 = v35;
  swift_release(v34);
  if (v44 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v143);
    swift_bridgeObjectRelease(v144);
    *(_QWORD *)&v151 = 0;
    *((_QWORD *)&v151 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease(*((_QWORD *)&v151 + 1));
    *(_QWORD *)&v151 = 0xD000000000000026;
    *((_QWORD *)&v151 + 1) = 0x80000001005594A0;
    v45._countAndFlagsBits = v128;
    v45._object = v33;
    String.append(_:)(v45);
    swift_bridgeObjectRelease(v33);
    v46._countAndFlagsBits = 41;
    v46._object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    v48 = *((_QWORD *)&v151 + 1);
    v47 = v151;
    v49 = v140;
    (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v140, enum case for DIPError.Code.internalError(_:), v19);
    v50 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v51 = type metadata accessor for DIPError(0);
    v52 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v51, v52, 0, 0);
    v53 = v48;
    v22 = v139;
    v54 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v47, v53, 0, v49, 0, v50, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD0000000000000BFLL, 0x8000000100559720, 154);
    swift_willThrow(v54);
    sub_10027FDDC(v145);
    goto LABEL_12;
  }
  sub_100038B24(v157, (uint64_t)&v147, &qword_100636670);
  if (v148)
  {
    sub_100008018(&v147, (uint64_t)&v149);
  }
  else
  {
    sub_10005618C((uint64_t)&v149);
    sub_100008030((uint64_t)&v147, &qword_100636670);
  }
  v126 = v44;
  if (!v150)
  {
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v143);
    swift_bridgeObjectRelease(v144);
    sub_100008030((uint64_t)&v149, &qword_100636670);
    v65 = *(void (**)(char *, _QWORD, uint64_t))(v20 + 104);
    v66 = v140;
    v65(v140, enum case for DIPError.Code.assessmentGUIDsExhausted(_:), v19);
    v67 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v68 = type metadata accessor for DIPError(0);
    v69 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v68, v69, 0, 0);
    v70 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x80000001005597E0, 0, v66, 0, v67, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD0000000000000BFLL, 0x8000000100559720, 159);
    swift_willThrow(v70);
    sub_100007F78(v127, v126);
    sub_10027FDDC(v145);
    swift_release(v146);
    swift_release(v136);

    sub_100008030(v157, &qword_100636670);
    sub_100008030(v142, &qword_100636670);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v154);
    v42 = v138;
LABEL_24:
    v22 = v139;
    goto LABEL_13;
  }
  sub_100008018(&v149, (uint64_t)&v151);
  v58 = v152;
  v57 = v153;
  sub_10000806C(&v151, v152);
  v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v58, v57);
  v61 = v60;
  v62 = qword_1006702E0;
  swift_retain(qword_1006702E0);
  v63 = sub_1001AD3EC(v59, (unint64_t)v61);
  v125 = 0;
  v71 = v63;
  v72 = v64;
  v124 = v59;
  v73 = swift_release(v62);
  v123 = v72;
  v74 = v72 >> 60 == 15;
  v75 = v138;
  if (v74)
  {
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v143);
    swift_bridgeObjectRelease(v144);
    *(_QWORD *)&v149 = 0;
    *((_QWORD *)&v149 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(*((_QWORD *)&v149 + 1));
    *(_QWORD *)&v149 = 0xD000000000000024;
    *((_QWORD *)&v149 + 1) = 0x80000001005594D0;
    v76._countAndFlagsBits = v124;
    v76._object = v61;
    String.append(_:)(v76);
    swift_bridgeObjectRelease(v61);
    v77._countAndFlagsBits = 41;
    v77._object = (void *)0xE100000000000000;
    String.append(_:)(v77);
    v78 = v149;
    v79 = v140;
    (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v140, enum case for DIPError.Code.internalError(_:), v19);
    v80 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v81 = type metadata accessor for DIPError(0);
    v82 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v42 = v75;
    swift_allocError(v81, v82, 0, 0);
    v83 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v78, *((_QWORD *)&v78 + 1), 0, v79, 0, v80, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD0000000000000BFLL, 0x8000000100559720, 163);
    swift_willThrow(v83);
    sub_100007F78(v127, v126);
    sub_10027FDDC(v145);
    swift_release(v146);
    swift_release(v136);

    sub_100008030(v157, &qword_100636670);
    sub_100008030(v142, &qword_100636670);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v151);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v154);
    goto LABEL_24;
  }
  v84 = v131;
  defaultLogger()(v73);
  swift_bridgeObjectRetain_n(v33, 2);
  v85 = swift_bridgeObjectRetain_n(v61, 2);
  v86 = Logger.logObject.getter(v85);
  v87 = static os_log_type_t.debug.getter(v86);
  v88 = os_log_type_enabled(v86, v87);
  v122 = v33;
  v121 = v61;
  v120 = v71;
  if (v88)
  {
    v89 = swift_slowAlloc(22, -1);
    v140 = (char *)swift_slowAlloc(64, -1);
    *(_QWORD *)&v149 = v140;
    *(_DWORD *)v89 = 136446466;
    swift_bridgeObjectRetain(v33);
    *(_QWORD *)&v147 = sub_1000E3AC8(v128, (unint64_t)v33, (uint64_t *)&v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, (char *)&v147 + 8, v89 + 4);
    swift_bridgeObjectRelease_n(v33, 3);
    *(_WORD *)(v89 + 12) = 2080;
    swift_bridgeObjectRetain(v61);
    *(_QWORD *)&v147 = sub_1000E3AC8(v124, (unint64_t)v61, (uint64_t *)&v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, (char *)&v147 + 8, v89 + 14);
    swift_bridgeObjectRelease_n(v61, 3);
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "Using aguid %{public}s, tguid %s", (uint8_t *)v89, 0x16u);
    v90 = v140;
    swift_arrayDestroy(v140, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1, -1);
    swift_slowDealloc(v89, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v61, 2);
    swift_bridgeObjectRelease_n(v33, 2);
  }
  (*(void (**)(char *, uint64_t))(v129 + 8))(v84, v130);
  v91 = v142;
  v92 = v141;
  v93 = v146;
  v94 = *(_QWORD *)(v146 + 16);
  v95 = *(_QWORD *)(v94 + 24);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v94 + 16);
  *(_QWORD *)(v16 + 24) = v95;
  v96 = v93;
  v97 = *(_QWORD **)(v93 + 24);
  if (v97)
  {
    v98 = v97[3];
    *(_QWORD *)(v16 + 32) = v97[2];
    *(_QWORD *)(v16 + 40) = v98;
    v99 = v97[9];
    *(_QWORD *)(v16 + 48) = v97[8];
    *(_QWORD *)(v16 + 56) = v99;
    v100 = v97[16];
    *(_QWORD *)(v16 + 64) = v97[15];
    *(_QWORD *)(v16 + 72) = v100;
    v102 = v97[17];
    v101 = v97[18];
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v98);
    swift_bridgeObjectRetain(v99);
  }
  else
  {
    v102 = 0x414C494156414E55;
    v101 = 0xEB00000000454C42;
    *(_QWORD *)(v16 + 32) = 0x414C494156414E55;
    *(_QWORD *)(v16 + 40) = 0xEB00000000454C42;
    *(_QWORD *)(v16 + 48) = 0x414C494156414E55;
    *(_QWORD *)(v16 + 56) = 0xEB00000000454C42;
    *(_QWORD *)(v16 + 64) = 0;
    *(_QWORD *)(v16 + 72) = 0;
  }
  swift_bridgeObjectRetain(v95);
  sub_100008030(v157, &qword_100636670);
  sub_100008030(v91, &qword_100636670);
  *(_QWORD *)(v16 + 80) = v102;
  *(_QWORD *)(v16 + 88) = v101;
  v103 = *(_QWORD *)(v96 + 5992);
  v104 = *(_QWORD *)(v96 + 6000);
  swift_bridgeObjectRetain(v104);
  swift_release(v96);
  *(_QWORD *)(v16 + 96) = v103;
  *(_QWORD *)(v16 + 104) = v104;
  v105 = v143;
  *(_BYTE *)(v16 + 184) = v133 & 1;
  *(_QWORD *)(v16 + 168) = v132;
  *(_QWORD *)(v16 + 176) = v105;
  v106 = v137;
  v107 = v144;
  *(_QWORD *)(v16 + 192) = v134;
  *(_QWORD *)(v16 + 200) = v107;
  *(_BYTE *)(v16 + 208) = v135;
  *(_QWORD *)(v16 + 144) = v92;
  *(_QWORD *)(v16 + 152) = v136;
  *(_QWORD *)(v16 + 160) = v106;
  sub_10002581C((uint64_t)&v154, (uint64_t)&v149);
  v108 = v139;
  swift_beginAccess(v139, &v147, 33, 0);
  sub_100184E1C((uint64_t)&v149, v108, &qword_100636670);
  swift_endAccess(&v147);
  v109 = *(_QWORD *)(v16 + 264);
  v110 = v122;
  *(_QWORD *)(v16 + 256) = v128;
  *(_QWORD *)(v16 + 264) = v110;
  swift_bridgeObjectRelease(v109);
  v111 = *(_QWORD *)(v16 + 272);
  v112 = *(_QWORD *)(v16 + 280);
  v113 = v126;
  *(_QWORD *)(v16 + 272) = v127;
  *(_QWORD *)(v16 + 280) = v113;
  sub_100007F78(v111, v112);
  sub_10002581C((uint64_t)&v151, (uint64_t)&v149);
  v114 = v138;
  swift_beginAccess(v138, &v147, 33, 0);
  sub_100184E1C((uint64_t)&v149, v114, &qword_100636670);
  swift_endAccess(&v147);
  v115 = *(_QWORD *)(v16 + 336);
  v116 = v121;
  *(_QWORD *)(v16 + 328) = v124;
  *(_QWORD *)(v16 + 336) = v116;
  swift_bridgeObjectRelease(v115);
  v117 = *(_QWORD *)(v16 + 344);
  v118 = *(_QWORD *)(v16 + 352);
  v119 = v123;
  *(_QWORD *)(v16 + 344) = v120;
  *(_QWORD *)(v16 + 352) = v119;
  sub_100007F78(v117, v118);
  sub_1000A1F54((uint64_t)v145, v16 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory, &qword_10063A8E0);
  *(_BYTE *)(v16 + 402) = a14 & 1;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v151);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v154);
  return v16;
}

uint64_t sub_10026456C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, char a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(void);
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  os_log_type_t v95;
  uint8_t *v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint8_t *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  unint64_t v135;
  uint8_t *v136;
  char v137;
  _QWORD v138[5];

  v11 = v10;
  v119 = a8;
  v122 = a7;
  v116 = a1;
  LODWORD(v121) = a9;
  v17 = sub_100004828(&qword_1006375E0);
  __chkstk_darwin(v17);
  v114 = (uint64_t)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AugmentedProfile(0);
  __chkstk_darwin(v19);
  v117 = (uint8_t *)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v128 = type metadata accessor for Logger(0);
  v125 = *(_QWORD *)(v128 - 8);
  v21 = __chkstk_darwin(v128);
  v115 = (uint64_t)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v118 = (char *)&v111 - v24;
  __chkstk_darwin(v23);
  v120 = (char *)&v111 - v25;
  v124 = type metadata accessor for DIPError.Code(0);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  *(_QWORD *)&v129 = (char *)&v111 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v111 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 232) = 0u;
  *(_OWORD *)(v11 + 248) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_OWORD *)(v11 + 264) = 0u;
  *(_QWORD *)(v11 + 280) = 0xF000000000000000;
  *(_OWORD *)(v11 + 288) = 0u;
  *(_OWORD *)(v11 + 304) = 0u;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_OWORD *)(v11 + 336) = 0u;
  *(_QWORD *)(v11 + 352) = 0xF000000000000000;
  *(_QWORD *)(v11 + 360) = 0;
  *(_QWORD *)(v11 + 384) = 0x6567616D2E6D6F63;
  *(_QWORD *)(v11 + 392) = 0xEB0000000061746ELL;
  *(_WORD *)(v11 + 400) = 257;
  v31 = v11 + OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest;
  *(_QWORD *)(v11 + 368) = 0;
  *(_QWORD *)(v11 + 376) = 0;
  v32 = type metadata accessor for ORDRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = v11 + OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  v34 = type metadata accessor for OTDRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v35 = (_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  *v35 = 0;
  v35[1] = 0;
  *(_QWORD *)(v11 + 16) = a5;
  *(_QWORD *)(v11 + 24) = a6;
  *(_QWORD *)&v127 = a5;
  *(_QWORD *)(v11 + 32) = a5;
  *(_QWORD *)(v11 + 40) = a6;
  *(_QWORD *)(v11 + 48) = a3;
  *(_QWORD *)(v11 + 56) = a4;
  v126 = (_QWORD *)a3;
  *(_QWORD *)(v11 + 168) = a3;
  *(_QWORD *)(v11 + 176) = a4;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = 0xE000000000000000;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_BYTE *)(v11 + 208) = v121;
  *(_BYTE *)(v11 + 184) = 1;
  *(_QWORD *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 192) = 0;
  *(_QWORD *)(v11 + 200) = 0;
  swift_bridgeObjectRetain_n(a6, 2);
  if (a2)
  {
    swift_bridgeObjectRetain_n(a4, 2);
    v36 = v119;
    v37 = v116;
  }
  else
  {
    v38 = swift_bridgeObjectRetain_n(a4, 2);
    v39 = UUID.init()(v38);
    v37 = UUID.uuidString.getter(v39);
    a2 = v40;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    v36 = v119;
  }
  v41 = v122;
  v42 = sub_100035318(v37, a2, v122, v36);
  swift_bridgeObjectRelease(a2);
  *(_QWORD *)(v11 + 160) = v42;
  swift_bridgeObjectRetain(a6);
  v44 = UUID.init()(v43);
  v45 = UUID.uuidString.getter(v44);
  v47 = v46;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  v48 = sub_1000356BC(v45, v47, v41, v36);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v36);
  v49 = sub_1004FDDD4(v127, a6, (uint64_t)v126, a4, (uint64_t)v48);
  swift_bridgeObjectRelease(a6);
  swift_bridgeObjectRelease(a4);
  swift_release(v48);
  *(_QWORD *)(v11 + 152) = v49;
  swift_retain_n(v49, 2);
  v50 = sub_100004828((uint64_t *)&unk_100632610);
  v122 = (uint64_t)"coreidvd/DIPODNator.swift";
  runAsyncAndBlock<A>(file:function:line:_:)(&v130, 0xD000000000000019, 0x8000000100558A60, 0xD000000000000054, 0x8000000100558A80, 228, &unk_10063A790, v49, v50);
  swift_release(v49);
  v51 = *((_QWORD *)&v130 + 1);
  v126 = v49;
  if (*((_QWORD *)&v130 + 1))
  {
    v121 = a6;
    v52 = v117;
    v53 = 0;
    sub_1001A5908(v130, *((uint64_t *)&v130 + 1), v117);
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(v121);
    v78 = v114;
    sub_100038B24((uint64_t)v52, v114, &qword_1006375E0);
    v79 = sub_100004828(&qword_100636840);
    v80 = *(_QWORD *)(v79 - 8);
    v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79);
    v74 = v118;
    if (v81 == 1)
    {
      sub_100035DAC((uint64_t)v52, type metadata accessor for AugmentedProfile);
      sub_100008030(v78, &qword_1006375E0);
      v77 = 0;
    }
    else
    {
      v119 = 0;
      v82 = v78;
      JWSSignedJSON.payload.getter(v79);
      sub_100035DAC((uint64_t)v52, type metadata accessor for AugmentedProfile);
      v83 = *((_QWORD *)&v130 + 1);
      v116 = v130;
      v85 = *((_QWORD *)&v131 + 1);
      v84 = v131;
      v115 = *((_QWORD *)&v132 + 1);
      v86 = v132;
      v112 = *((_QWORD *)&v133 + 1);
      v113 = v133;
      *(_QWORD *)&v127 = v134;
      v121 = v135;
      v117 = v136;
      v77 = v137;
      v87 = v82;
      v53 = v119;
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v87, v79);
      v88 = v85;
      v49 = v126;
      sub_1001849FC(v116, v83, v84, v88, v86, v115, v113, v112);
      swift_bridgeObjectRelease(v117);
      swift_bridgeObjectRelease(v121);
      swift_bridgeObjectRelease(v127);
    }
    v76 = v120;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v123 + 104))(v129, enum case for DIPError.Code.odnMissingProfile(_:), v124);
    v54 = sub_100004828((uint64_t *)&unk_1006325A0);
    v55 = sub_100004828((uint64_t *)&unk_100633440);
    v56 = *(_QWORD *)(v55 - 8);
    v57 = *(_QWORD *)(v56 + 72);
    v58 = *(unsigned __int8 *)(v56 + 80);
    v59 = (v58 + 32) & ~v58;
    v60 = swift_allocObject(v54, v59 + 2 * v57, v58 | 7);
    *(_OWORD *)(v60 + 16) = xmmword_1005208D0;
    v61 = v60 + v59;
    v62 = (_QWORD *)(v61 + *(int *)(v55 + 48));
    v63 = enum case for DIPError.PropertyKey.inoWorkflowID(_:);
    v64 = type metadata accessor for DIPError.PropertyKey(0);
    v65 = *(_QWORD *)(v64 - 8);
    v121 = 0x8000000100558A80;
    v66 = *(void (**)(void))(v65 + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v66)(v61, v63, v64);
    v62[3] = &type metadata for String;
    v67 = v127;
    *v62 = v127;
    v62[1] = a6;
    v68 = v61 + v57;
    v49 = v126;
    v69 = (_QWORD *)(v68 + *(int *)(v55 + 48));
    v66();
    v69[3] = &type metadata for String;
    *v69 = v67;
    v69[1] = a6;
    swift_bridgeObjectRetain(a6);
    v70 = sub_10011D314(v60);
    v71 = type metadata accessor for DIPError(0);
    v72 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v73 = swift_allocError(v71, v72, 0, 0);
    v74 = v118;
    v75 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x800000010054F340, 0, v129, 0, v70, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD000000000000054, v121, 242);
    v76 = v120;
    defaultLogger()(v75);
    DIPRecordError(_:message:log:)(v73, 0, 0xE000000000000000, v76);
    (*(void (**)(char *, _QWORD))(v125 + 8))(v76, v128);
    swift_errorRelease(v73);
    v77 = 0;
    v53 = 0;
  }
  v138[3] = type metadata accessor for DeviceInformationProvider(0);
  v138[4] = &protocol witness table for DeviceInformationProvider;
  sub_100022234(v138);
  v89 = swift_retain(v49);
  DeviceInformationProvider.init()(v89);
  v90 = sub_1002104E4(v138, v77, (uint64_t)&unk_10063A7A0, (uint64_t)v49, &v130);
  if (v53)
  {
    v91 = (_OWORD *)(v11 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory);
    *v91 = 0u;
    v91[1] = 0u;
    v91[2] = 0u;
    v91[3] = 0u;
    v91[4] = 0u;
    v92 = defaultLogger()(v90);
    v93 = Logger.logObject.getter(v92);
    v95 = static os_log_type_t.info.getter(v93, v94);
    if (os_log_type_enabled(v93, v95))
    {
      v96 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v96 = 0;
      _os_log_impl((void *)&_mh_execute_header, v93, v95, "Ignoring error initialing GUIDFactory. This will result in errors getting Assessments which may not be mandatory", v96, 2u);
      swift_slowDealloc(v96, -1, -1);
    }

    v97 = *(void (**)(char *, uint64_t))(v125 + 8);
    v98 = v128;
    v97(v74, v128);
    v99 = v129;
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v123 + 104))(v129, enum case for DIPError.Code.odnGUIDFactoryIssueInitializing(_:), v124);
    v100 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v101 = type metadata accessor for DIPError(0);
    v102 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v103 = swift_allocError(v101, v102, 0, 0);
    v104 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x8000000100558B30, 0, v99, 0, v100, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD000000000000054, v122 | 0x8000000000000000, 256);
    defaultLogger()(v104);
    DIPRecordError(_:message:log:)(v103, 0, 0xE000000000000000, v76);
    swift_errorRelease(v53);
    swift_release(v126);
    v97(v76, v98);
    swift_errorRelease(v103);
  }
  else
  {
    v129 = v131;
    v128 = v132;
    v127 = v133;
    v105 = v134;
    v106 = v135;
    swift_release(v49);
    v107 = v11 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory;
    v108 = v129;
    *(_OWORD *)v107 = v130;
    *(_OWORD *)(v107 + 16) = v108;
    v109 = v127;
    *(_OWORD *)(v107 + 32) = v128;
    *(_OWORD *)(v107 + 48) = v109;
    *(_QWORD *)(v107 + 64) = v105;
    *(_QWORD *)(v107 + 72) = v106;
  }
  *(_BYTE *)(v11 + 402) = a10 & 1;
  return v11;
}

uint64_t sub_1002653D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1006446AC);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100265420;
  return sub_1004F92EC();
}

uint64_t sub_100265420(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 24);
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10026547C, 0, 0);
}

uint64_t sub_10026547C()
{
  uint64_t v0;

  *(_OWORD *)*(_QWORD *)(v0 + 16) = *(_OWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100265490()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1006446B4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1002654D8;
  return sub_1004FAD30();
}

uint64_t sub_1002654D8(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (a2)
    v7 = a1;
  else
    v7 = 0;
  if (a2)
    v8 = a2;
  else
    v8 = 0xE000000000000000;
  return (*(uint64_t (**)(uint64_t, unint64_t))(v6 + 8))(v7, v8);
}

void sub_10026553C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  Swift::String v23;
  Swift::Bool v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;

  v47 = a2;
  v48 = a3;
  v46 = a1;
  v5 = sub_100004828(&qword_100636668);
  __chkstk_darwin(v5);
  v52 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100636688);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPPregeneratedAssessment(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v45 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DIPSignpost(0);
  v50 = *(_QWORD *)(v16 - 8);
  v51 = v16;
  __chkstk_darwin(v16);
  v49 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v23._object = (void *)0x8000000100558EA0;
  v23._countAndFlagsBits = 0xD000000000000012;
  v24 = NSUserDefaults.internalBool(forKey:)(v23);

  if (v24)
  {
    v26 = defaultLogger()(v25);
    v27 = Logger.logObject.getter(v26);
    v29 = static os_log_type_t.info.getter(v27, v28);
    if (os_log_type_enabled(v27, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "Skipping ODIN due to setting", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v31 = v53;
    swift_beginAccess(v53 + 216, v54, 0, 0);
    sub_100038B24(v31 + 216, a4, &qword_100636670);
    v33 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
    v32 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
    v34 = a4 + *(int *)(type metadata accessor for ODNAssessmentResult(0) + 44);
    v35 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_QWORD *)(a4 + 128) = 0;
    *(_QWORD *)(a4 + 136) = 0;
    *(_QWORD *)(a4 + 120) = 1;
    *(_BYTE *)(a4 + 144) = 0;
    *(_OWORD *)(a4 + 152) = 0u;
    *(_OWORD *)(a4 + 168) = 0u;
    *(_OWORD *)(a4 + 184) = 0u;
    *(_OWORD *)(a4 + 200) = 0u;
    *(_QWORD *)(a4 + 216) = v33;
    *(_QWORD *)(a4 + 224) = v32;
    swift_bridgeObjectRetain(v32);
  }
  else
  {
    static DaemonSignposts.getVerificationResultFetchAssesssment.getter();
    v36 = v49;
    DIPSignpost.init(_:)(v15);
    sub_100038B24(v48, (uint64_t)v9, &qword_100636688);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_100008030((uint64_t)v9, &qword_100636688);
      sub_1002661A8(v46, v47, 1);
      v38 = v37;
      memset(v54, 0, sizeof(v54));
      v55 = 1;
      v39 = type metadata accessor for AugmentedProfile(0);
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v40 = (uint8_t *)v52;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v52, 1, 1, v39);
      sub_100268E30(v38, 0, (uint64_t)v54, v40, 1, a4);
      swift_bridgeObjectRelease(v38);
      sub_100008030((uint64_t)v40, &qword_100636668);
    }
    else
    {
      v41 = v45;
      sub_100038AE0((uint64_t)v9, v45, type metadata accessor for DIPPregeneratedAssessment);
      v42 = type metadata accessor for AugmentedProfile(0);
      v43 = (uint64_t)v52;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v52, 1, 1, v42);
      sub_100267C88(v41, v43, a4);
      sub_100008030(v43, &qword_100636668);
      sub_100035DAC(v41, type metadata accessor for DIPPregeneratedAssessment);
    }
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v36, v51);
  }
}

uint64_t sub_1002659F0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void (*v19)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  __int128 v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  _QWORD v39[3];
  _BYTE v40[8];
  uint64_t v41;
  __int128 v42;
  __int128 v43;

  v37 = a2;
  v5 = sub_100004828(&qword_1006335E0);
  __chkstk_darwin(v5);
  v7 = &v36[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for DIPError.PropertyKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v36[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_100004828(&qword_100636620);
  __chkstk_darwin(v12);
  v14 = &v36[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v41 = a1;
  swift_errorRetain(a1);
  v15 = sub_100004828((uint64_t *)&unk_100633430);
  v16 = type metadata accessor for DIPError(0);
  v17 = swift_dynamicCast(v14, &v41, v15, v16, 6);
  v18 = *(_QWORD *)(v16 - 8);
  v19 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if (!v17)
  {
    v19(v14, 1, 1, v16);
    sub_100008030((uint64_t)v14, &qword_100636620);
    v42 = 0u;
    v43 = 0u;
    v23 = v37;
LABEL_13:
    sub_100008030((uint64_t)&v42, (uint64_t *)&unk_1006371E0);
    v26 = 0;
    v27 = 1;
    goto LABEL_14;
  }
  v20 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v19)(v14, 0, 1, v16);
  v21 = DIPError.properties.getter(v20);
  (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v14, v16);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DIPError.PropertyKey.underlyingErrno(_:), v8);
  if (*(_QWORD *)(v21 + 16))
  {
    v22 = sub_1004A8668((uint64_t)v11);
    v23 = v37;
    if ((v24 & 1) != 0)
    {
      sub_10002EDBC(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)&v42);
    }
    else
    {
      v42 = 0u;
      v43 = 0u;
    }
  }
  else
  {
    v42 = 0u;
    v43 = 0u;
    v23 = v37;
  }
  swift_bridgeObjectRelease(v21);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  if (!*((_QWORD *)&v43 + 1))
    goto LABEL_13;
  v25 = swift_dynamicCast(&v41, &v42, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
  if (v25)
    v26 = v41;
  else
    v26 = 0;
  v27 = v25 ^ 1;
LABEL_14:
  swift_getErrorValue(a1, v40, v39);
  Error.dipErrorCode.getter(v39[1], v39[2]);
  v28 = type metadata accessor for DIPError.Code(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v7, 1, v28);
  if ((_DWORD)v30 == 1)
  {
    sub_100008030((uint64_t)v7, &qword_1006335E0);
    v31 = -1;
  }
  else
  {
    v31 = DIPError.Code.rawValue.getter(v30);
    (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v7, v28);
  }
  v32 = *(_QWORD *)(v38 + 32);
  v33 = *(_QWORD *)(v38 + 40);
  *(_QWORD *)&v42 = 0;
  *((_QWORD *)&v42 + 1) = 0xE000000000000000;
  LOBYTE(v41) = *(_BYTE *)(v38 + 208);
  swift_bridgeObjectRetain(v33);
  result = _print_unlocked<A, B>(_:_:)(&v41, &v42, &type metadata for DIPState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v35 = v42;
  *(_QWORD *)a3 = v31;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v32;
  *(_QWORD *)(a3 + 32) = v33;
  *(_OWORD *)(a3 + 40) = v35;
  *(_BYTE *)(a3 + 56) = v23;
  return result;
}

unint64_t sub_100265D44(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;

  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = *a1;
  v3 = swift_bridgeObjectRetain(v2);
  v4._countAndFlagsBits = Dictionary.description.getter(v3, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(object);
  return 0xD00000000000001CLL;
}

uint64_t sub_100265DF4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v37[3];
  void *v38;
  uint64_t v39;

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v37[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004828(&qword_1006308F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v37[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = qword_100670068;
  v10 = unk_100670070;
  v11 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", byte_100670061, swift_bridgeObjectRetain(unk_100670070).n128_f64[0]);
  v12 = (void *)sub_10001CFF8(0, &qword_100636CA8, NSNumber_ptr);
  v38 = v12;
  v37[0] = (uint64_t)v11;
  sub_10047E6E4((uint64_t)v37, v9, v10);
  if (qword_10062F560 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  v13 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", (char *)objc_msgSend((id)objc_opt_self(DIPMobileKeyBag), "deviceLockState") - 1 < (char *)2);
  v38 = v12;
  v37[0] = (uint64_t)v13;
  v14 = sub_10047E6E4((uint64_t)v37, 0x6563697665447369, 0xEE0064656B636F4CLL);
  v15 = static Locale.current.getter(v14);
  Locale.region.getter(v15);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v16 = type metadata accessor for Locale.Region(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v8, 1, v16);
  if ((_DWORD)v18 == 1)
  {
    sub_100008030((uint64_t)v8, &qword_1006308F0);
    v19 = 0;
    v20 = 0xE000000000000000;
  }
  else
  {
    v19 = Locale.Region.identifier.getter(v18);
    v20 = v21;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v16);
  }
  v22 = sub_10039A498(v19, v20);
  swift_bridgeObjectRelease(v20);
  v38 = &type metadata for Int;
  v37[0] = v22;
  sub_10047E6E4((uint64_t)v37, 0xD000000000000011, 0x8000000100558F40);
  v23 = type metadata accessor for DIPAccountManager(0);
  static DIPAccountManager.sharedInstance.getter(v37, v23);
  v24 = v38;
  v25 = v39;
  sub_10000806C(v37, (uint64_t)v38);
  v26 = (void *)dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccount()(v24, v25);
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, "appleID");

    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v37);
    if (v28)
    {
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

      v38 = &type metadata for String;
      v37[0] = v29;
      v37[1] = v31;
      sub_10047E6E4((uint64_t)v37, 0x6469656C707061, 0xE700000000000000);
    }
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v37);
  }
  sub_100277CDC(a1);
  v32 = sub_100276F38(*a1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v37[0] = *a1;
  *a1 = 0x8000000000000000;
  sub_100279588((uint64_t)v32, (uint64_t)sub_100279548, 0, isUniquelyReferenced_nonNull_native, v37);
  v34 = *a1;
  *a1 = v37[0];
  return swift_bridgeObjectRelease(v34);
}

void sub_1002661A8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t i;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  id v67;
  Swift::String v68;
  Swift::Bool v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char v84;
  uint64_t v85;
  id v86;
  Swift::String v87;
  Swift::Bool v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  _BOOL4 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  _BOOL4 v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  _BOOL4 v122;
  uint8_t *v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  Swift::String v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  id v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  char v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  Swift::String v145;
  id v146;
  id v147;
  unint64_t v148;
  char v149;
  char v150;
  char v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  void *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char v192;
  char v193;
  uint64_t v194;
  char v195;
  Swift::String v196;
  uint64_t v197;
  uint64_t v198;
  id v199;
  id v200;
  uint64_t v201;
  char v202;
  NSObject *v203;
  id v204;
  double v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v210;
  id v211;
  double v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  id v217;
  double v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  NSObject *v224;
  uint64_t v225;
  os_log_type_t v226;
  uint8_t *v227;
  uint64_t v228;
  uint64_t v229;
  os_log_type_t v230;
  uint8_t *v231;
  char v232;
  uint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  __n128 v237;
  char *v238;
  int v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  __n128 v245;
  char *v246;
  void (*v247)(char *, uint64_t);
  uint64_t v248;
  char *v249;
  char *v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;

  v239 = a3;
  v262 = a2;
  v244 = a1;
  v248 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v248 - 8);
  v4 = __chkstk_darwin(v248);
  v6 = (char *)&v233 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v236 = (char *)&v233 - v8;
  v9 = __chkstk_darwin(v7);
  v246 = (char *)&v233 - v10;
  v11 = __chkstk_darwin(v9);
  v238 = (char *)&v233 - v12;
  v13 = __chkstk_darwin(v11);
  v243 = (char *)&v233 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v233 - v16;
  v18 = __chkstk_darwin(v15);
  v250 = (char *)&v233 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v233 - v21;
  v23 = defaultLogger()(v20);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Preparing bindings dict from claim", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  v247 = *(void (**)(char *, uint64_t))(v3 + 8);
  v247(v22, v248);
  v27 = sub_10011D1E0((uint64_t)_swiftEmptyArrayStorage);
  v272 = (unint64_t)v27;
  if (!v244 || !v262)
  {
LABEL_111:
    if (*(_QWORD *)(v240 + 144) && (v27 = sub_100257AD4()) != 0)
    {
      v203 = v27;
      v204 = -[NSObject coordinate](v27, "coordinate");
      v206 = Double.description.getter(v204, v205);
      *((_QWORD *)&v271 + 1) = &type metadata for String;
      *(_QWORD *)&v270 = v206;
      *((_QWORD *)&v270 + 1) = v207;
      sub_10000491C(&v270, &v268);
      v208 = v272;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v272);
      v267 = v208;
      sub_100481A14(&v268, 0xD000000000000018, 0x8000000100558EE0, isUniquelyReferenced_nonNull_native);
      v210 = v267;
      swift_bridgeObjectRelease(0x8000000000000000);
      v211 = -[NSObject coordinate](v203, "coordinate");
      v213 = Double.description.getter(v211, v212);
      *((_QWORD *)&v271 + 1) = &type metadata for String;
      *(_QWORD *)&v270 = v213;
      *((_QWORD *)&v270 + 1) = v214;
      sub_10000491C(&v270, &v268);
      v215 = swift_isUniquelyReferenced_nonNull_native(v210);
      v267 = v210;
      sub_100481A14(&v268, 0xD000000000000019, 0x8000000100558F00, v215);
      v216 = v267;
      swift_bridgeObjectRelease(0x8000000000000000);
      v217 = -[NSObject horizontalAccuracy](v203, "horizontalAccuracy");
      v219 = Double.description.getter(v217, v218);
      *((_QWORD *)&v271 + 1) = &type metadata for String;
      *(_QWORD *)&v270 = v219;
      *((_QWORD *)&v270 + 1) = v220;
      sub_10000491C(&v270, &v268);
      v221 = swift_isUniquelyReferenced_nonNull_native(v216);
      v267 = v216;
      sub_100481A14(&v268, 0xD000000000000022, 0x80000001005596C0, v221);
      v272 = v267;
      v222 = swift_bridgeObjectRelease(0x8000000000000000);
      v6 = v236;
      v223 = defaultLogger()(v222);
      v224 = Logger.logObject.getter(v223);
      v226 = static os_log_type_t.info.getter(v224, v225);
      if (os_log_type_enabled(v224, v226))
      {
        v227 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v227 = 0;
        _os_log_impl((void *)&_mh_execute_header, v224, v226, "got GPS data", v227, 2u);
        swift_slowDealloc(v227, -1, -1);
      }

    }
    else
    {
      v228 = defaultLogger()(v27);
      v203 = Logger.logObject.getter(v228);
      v230 = static os_log_type_t.info.getter(v203, v229);
      if (os_log_type_enabled(v203, v230))
      {
        v231 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v231 = 0;
        _os_log_impl((void *)&_mh_execute_header, v203, v230, "no GPS location available", v231, 2u);
        swift_slowDealloc(v231, -1, -1);
      }
    }
    v232 = v239;

    v247(v6, v248);
    if ((v232 & 1) != 0)
      sub_100265DF4((uint64_t *)&v272);
    return;
  }
  v28 = *(_QWORD *)(v244 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claimData);
  v29 = *(_QWORD *)(v28 + 64);
  v256 = v28 + 64;
  v30 = 1 << *(_BYTE *)(v28 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & v29;
  v257 = (unint64_t)(v30 + 63) >> 6;
  v249 = (char *)&v268 + 8;
  swift_retain(v244);
  v33 = swift_bridgeObjectRetain(v28);
  v34 = 0;
  v35 = 0;
  v241 = (unint64_t)"Forcing assessment error";
  v251 = (void *)0x8000000100559250;
  v33.n128_u64[0] = 136315394;
  v237 = v33;
  v235 = (char *)&type metadata for Any + 8;
  v33.n128_u64[0] = 136315138;
  v245 = v33;
  v234 = v6;
  v242 = v17;
  v252 = v28;
  if (!v32)
    goto LABEL_9;
LABEL_8:
  v265 = (v32 - 1) & v32;
  v266 = v34;
  for (i = __clz(__rbit64(v32)) | (v34 << 6); ; i = __clz(__rbit64(v39)) + (v38 << 6))
  {
    v41 = *(_QWORD *)(v28 + 56);
    v42 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * i);
    v43 = v28;
    v45 = *v42;
    v44 = (void *)v42[1];
    v46 = (_QWORD *)(v41 + 96 * i);
    v47 = v46[1];
    v48 = v46[3];
    v49 = v46[5];
    v50 = v46[8];
    v51 = v46[9];
    v52 = v46[10];
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
    v53 = sub_10040C194(v45, v44);
    if (v35)
    {
      swift_errorRelease(v35);
      swift_bridgeObjectRelease(v44);
      swift_bridgeObjectRelease(v52);
      swift_bridgeObjectRelease(v50);
      swift_bridgeObjectRelease(v49);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v47);
      v35 = 0;
      v32 = v265;
      v34 = v266;
      v28 = v43;
      if (v265)
        goto LABEL_8;
      goto LABEL_9;
    }
    v258 = v50;
    v255 = (uint64_t)v53;
    v259 = v54;
    v261 = v45;
    v263 = (uint64_t)v44;
    v253 = v51;
    v260 = v52;
    v57 = *(_QWORD *)(v262 + 16);
    v264 = 0;
    if (v57)
    {
      v58 = v263;
      v59 = v56;
      v60 = v55;
      swift_bridgeObjectRetain(v263);
      sub_1004A8604(v261, v58);
      LODWORD(v254) = v61;
      swift_bridgeObjectRelease(v58);
      v55 = v60;
      v56 = v59;
    }
    else
    {
      LODWORD(v254) = 0;
    }
    v62 = v49;
    *(_QWORD *)&v270 = v55;
    *((_QWORD *)&v270 + 1) = v56;
    *(_QWORD *)&v268 = 0x6E692D646579656BLL;
    *((_QWORD *)&v268 + 1) = 0xE800000000000000;
    v63 = v56;
    v64 = v55;
    v65 = sub_100099FB8();
    v66 = sub_100183D54();
    if ((BidirectionalCollection<>.starts<A>(with:)(&v268, &type metadata for String, &type metadata for String, v65, v66) & 1) != 0)
    {
      swift_bridgeObjectRelease(v63);
      swift_bridgeObjectRelease(v263);
      swift_bridgeObjectRelease(v258);
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v47);
      v67 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v68._countAndFlagsBits = 0xD00000000000001CLL;
      v68._object = v251;
      v69 = NSUserDefaults.internalBool(forKey:)(v68);

      v71 = v260;
      if (v69 && v260)
      {
        swift_bridgeObjectRetain(v260);
        v72 = v250;
        defaultLogger()(v73);
        v74 = v259;
        swift_bridgeObjectRetain_n(v259, 2);
        swift_bridgeObjectRetain(v71);
        v76 = Logger.logObject.getter(v75);
        v77 = static os_log_type_t.debug.getter(v76);
        v78 = os_log_type_enabled(v76, v77);
        v79 = v253;
        if (v78)
        {
          v80 = swift_slowAlloc(22, -1);
          v81 = swift_slowAlloc(64, -1);
          *(_QWORD *)&v270 = v81;
          *(_DWORD *)v80 = v237.n128_u32[0];
          swift_bridgeObjectRetain(v74);
          *(_QWORD *)&v268 = sub_1000E3AC8(v255, v74, (uint64_t *)&v270);
          v82 = v249;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, v249, v80 + 4);
          swift_bridgeObjectRelease_n(v74, 3);
          *(_WORD *)(v80 + 12) = 2080;
          swift_bridgeObjectRetain(v71);
          *(_QWORD *)&v268 = sub_1000E3AC8(v79, v71, (uint64_t *)&v270);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, v82, v80 + 14);
          swift_bridgeObjectRelease_n(v71, 3);
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "ODN bindings keyed-in attribute %s: %s", (uint8_t *)v80, 0x16u);
          swift_arrayDestroy(v81, 2, v235);
          swift_slowDealloc(v81, -1, -1);
          swift_slowDealloc(v80, -1, -1);

          v83 = v250;
        }
        else
        {

          swift_bridgeObjectRelease_n(v71, 2);
          swift_bridgeObjectRelease_n(v74, 2);
          v83 = v72;
        }
        v247(v83, v248);
      }
      else
      {
        v103 = v242;
        defaultLogger()(v70);
        v74 = v259;
        v104 = swift_bridgeObjectRetain_n(v259, 2);
        v105 = Logger.logObject.getter(v104);
        v106 = static os_log_type_t.debug.getter(v105);
        v107 = os_log_type_enabled(v105, v106);
        v79 = v253;
        if (v107)
        {
          v108 = (uint8_t *)swift_slowAlloc(12, -1);
          v109 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v270 = v109;
          *(_DWORD *)v108 = v245.n128_u32[0];
          swift_bridgeObjectRetain(v74);
          *(_QWORD *)&v268 = sub_1000E3AC8(v255, v74, (uint64_t *)&v270);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, v249, v108 + 4);
          swift_bridgeObjectRelease_n(v74, 3);
          _os_log_impl((void *)&_mh_execute_header, v105, v106, "ODN bindings keyed-in attribute %s", v108, 0xCu);
          swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v109, -1, -1);
          swift_slowDealloc(v108, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v74, 2);
        }
        v247(v103, v248);
        if (!v71)
        {
          swift_bridgeObjectRetain(v74);
          v136 = v272;
          swift_bridgeObjectRetain(v272);
          v137 = sub_1004A8604(v255, v74);
          v139 = v138;
          swift_bridgeObjectRelease(v136);
          if ((v139 & 1) != 0)
          {
            v140 = v272;
            v141 = swift_isUniquelyReferenced_nonNull_native(v272);
            v267 = v140;
            if ((v141 & 1) == 0)
            {
              sub_10012A4A4();
              v140 = v267;
            }
            swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v140 + 48) + 16 * v137 + 8));
            sub_10000491C((_OWORD *)(*(_QWORD *)(v140 + 56) + 32 * v137), &v268);
            sub_1004802F4(v137, v140);
            v272 = v140;
            swift_bridgeObjectRelease(0x8000000000000000);
          }
          else
          {
            v268 = 0u;
            v269 = 0u;
          }
          swift_bridgeObjectRelease(v74);
          sub_100008030((uint64_t)&v268, (uint64_t *)&unk_1006371E0);
          v127 = v255;
          goto LABEL_51;
        }
      }
      *((_QWORD *)&v271 + 1) = &type metadata for String;
      *(_QWORD *)&v270 = v79;
      *((_QWORD *)&v270 + 1) = v71;
      sub_10000491C(&v270, &v268);
      swift_bridgeObjectRetain(v74);
      v125 = v272;
      v126 = swift_isUniquelyReferenced_nonNull_native(v272);
      v267 = v125;
      v272 = 0x8000000000000000;
      v127 = v255;
      sub_100481A14(&v268, v255, v74, v126);
      v128 = v272;
      v272 = v267;
      swift_bridgeObjectRelease(v74);
      swift_bridgeObjectRelease(v128);
LABEL_51:
      *(_QWORD *)&v270 = v127;
      *((_QWORD *)&v270 + 1) = v74;
      v129._countAndFlagsBits = 0x657261685373692ELL;
      v129._object = (void *)0xE900000000000064;
      String.append(_:)(v129);
      v131 = *((_QWORD *)&v270 + 1);
      v130 = v270;
      v132 = objc_allocWithZone((Class)NSNumber);
      v133 = objc_msgSend(v132, "initWithBool:", v254 & 1);
      *((_QWORD *)&v271 + 1) = sub_10001CFF8(0, &qword_100636CA8, NSNumber_ptr);
      *(_QWORD *)&v270 = v133;
      sub_10000491C(&v270, &v268);
      v134 = v272;
      v135 = swift_isUniquelyReferenced_nonNull_native(v272);
      v267 = v134;
LABEL_63:
      sub_100481A14(&v268, v130, v131, v135);
      v272 = v267;
      swift_bridgeObjectRelease(v131);
      swift_bridgeObjectRelease(0x8000000000000000);
      goto LABEL_64;
    }
    swift_bridgeObjectRelease(v259);
    *(_QWORD *)&v270 = v64;
    *((_QWORD *)&v270 + 1) = v63;
    *(_QWORD *)&v268 = 0x746E656D75636F64;
    *((_QWORD *)&v268 + 1) = 0xE800000000000000;
    v84 = BidirectionalCollection<>.starts<A>(with:)(&v268, &type metadata for String, &type metadata for String, v65, v66);
    swift_bridgeObjectRelease(v63);
    v85 = v258;
    if ((v84 & 1) != 0)
    {
      swift_bridgeObjectRelease(v258);
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v47);
      v86 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v87._object = (void *)(v241 | 0x8000000000000000);
      v87._countAndFlagsBits = 0xD00000000000001CLL;
      v88 = NSUserDefaults.internalBool(forKey:)(v87);

      v90 = v260;
      v91 = v263;
      if (v88 && v260)
      {
        swift_bridgeObjectRetain(v260);
        v92 = v243;
        defaultLogger()(v93);
        swift_bridgeObjectRetain_n(v91, 2);
        swift_bridgeObjectRetain(v90);
        v95 = Logger.logObject.getter(v94);
        v96 = static os_log_type_t.debug.getter(v95);
        v97 = os_log_type_enabled(v95, v96);
        v98 = v253;
        if (v97)
        {
          v99 = swift_slowAlloc(22, -1);
          v100 = swift_slowAlloc(64, -1);
          *(_QWORD *)&v270 = v100;
          *(_DWORD *)v99 = v237.n128_u32[0];
          swift_bridgeObjectRetain(v91);
          v101 = v261;
          *(_QWORD *)&v268 = sub_1000E3AC8(v261, v91, (uint64_t *)&v270);
          v102 = v249;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, v249, v99 + 4);
          swift_bridgeObjectRelease_n(v91, 3);
          *(_WORD *)(v99 + 12) = 2080;
          swift_bridgeObjectRetain(v90);
          *(_QWORD *)&v268 = sub_1000E3AC8(v98, v90, (uint64_t *)&v270);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, v102, v99 + 14);
          swift_bridgeObjectRelease_n(v90, 3);
          _os_log_impl((void *)&_mh_execute_header, v95, v96, "ODN bindings document attribute %s: %s", (uint8_t *)v99, 0x16u);
          swift_arrayDestroy(v100, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v100, -1, -1);
          swift_slowDealloc(v99, -1, -1);

          v247(v243, v248);
        }
        else
        {

          swift_bridgeObjectRelease_n(v90, 2);
          swift_bridgeObjectRelease_n(v91, 2);
          v247(v92, v248);
          v101 = v261;
        }
      }
      else
      {
        v118 = v238;
        defaultLogger()(v89);
        v119 = swift_bridgeObjectRetain_n(v91, 2);
        v120 = Logger.logObject.getter(v119);
        v121 = static os_log_type_t.debug.getter(v120);
        v122 = os_log_type_enabled(v120, v121);
        v98 = v253;
        if (v122)
        {
          v123 = (uint8_t *)swift_slowAlloc(12, -1);
          v124 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v270 = v124;
          *(_DWORD *)v123 = v245.n128_u32[0];
          swift_bridgeObjectRetain(v91);
          *(_QWORD *)&v268 = sub_1000E3AC8(v261, v91, (uint64_t *)&v270);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, v249, v123 + 4);
          swift_bridgeObjectRelease_n(v91, 3);
          _os_log_impl((void *)&_mh_execute_header, v120, v121, "ODN bindings document attribute %s", v123, 0xCu);
          swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v124, -1, -1);
          swift_slowDealloc(v123, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v91, 2);
        }
        v247(v118, v248);
        v101 = v261;
        if (!v90)
        {
          swift_bridgeObjectRetain(v91);
          v144 = v272;
          swift_bridgeObjectRetain(v272);
          v148 = sub_1004A8604(v101, v91);
          v150 = v149;
          swift_bridgeObjectRelease(v144);
          if ((v150 & 1) != 0)
          {
            v151 = swift_isUniquelyReferenced_nonNull_native(v144);
            v267 = v144;
            if ((v151 & 1) == 0)
            {
              sub_10012A4A4();
              v144 = v267;
            }
            swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v144 + 48) + 16 * v148 + 8));
            sub_10000491C((_OWORD *)(*(_QWORD *)(v144 + 56) + 32 * v148), &v268);
            sub_1004802F4(v148, v144);
            v272 = v144;
            swift_bridgeObjectRelease(0x8000000000000000);
          }
          else
          {
            v268 = 0u;
            v269 = 0u;
          }
          swift_bridgeObjectRelease(v91);
          sub_100008030((uint64_t)&v268, (uint64_t *)&unk_1006371E0);
          goto LABEL_62;
        }
      }
      *((_QWORD *)&v271 + 1) = &type metadata for String;
      *(_QWORD *)&v270 = v98;
      *((_QWORD *)&v270 + 1) = v90;
      sub_10000491C(&v270, &v268);
      swift_bridgeObjectRetain(v91);
      v142 = v272;
      v143 = swift_isUniquelyReferenced_nonNull_native(v272);
      v267 = v142;
      sub_100481A14(&v268, v101, v91, v143);
      v144 = v267;
      v272 = v267;
      swift_bridgeObjectRelease(v91);
      swift_bridgeObjectRelease(0x8000000000000000);
LABEL_62:
      *(_QWORD *)&v270 = v101;
      *((_QWORD *)&v270 + 1) = v91;
      v145._countAndFlagsBits = 0x657261685373692ELL;
      v145._object = (void *)0xE900000000000064;
      String.append(_:)(v145);
      v131 = *((_QWORD *)&v270 + 1);
      v130 = v270;
      v146 = objc_allocWithZone((Class)NSNumber);
      v147 = objc_msgSend(v146, "initWithBool:", v254 & 1);
      *((_QWORD *)&v271 + 1) = sub_10001CFF8(0, &qword_100636CA8, NSNumber_ptr);
      *(_QWORD *)&v270 = v147;
      sub_10000491C(&v270, &v268);
      v135 = swift_isUniquelyReferenced_nonNull_native(v144);
      v267 = v144;
      goto LABEL_63;
    }
    swift_bridgeObjectRelease(v260);
    swift_bridgeObjectRelease(v85);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v48);
    v110 = swift_bridgeObjectRelease(v47);
    v111 = v246;
    defaultLogger()(v110);
    v112 = v263;
    swift_bridgeObjectRetain(v263);
    v114 = Logger.logObject.getter(v113);
    v115 = static os_log_type_t.debug.getter(v114);
    if (os_log_type_enabled(v114, v115))
    {
      v116 = swift_slowAlloc(12, -1);
      v117 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v270 = v117;
      *(_DWORD *)v116 = v245.n128_u32[0];
      swift_bridgeObjectRetain(v112);
      *(_QWORD *)(v116 + 4) = sub_1000E3AC8(v261, v112, (uint64_t *)&v270);
      swift_bridgeObjectRelease_n(v112, 3);
      _os_log_impl((void *)&_mh_execute_header, v114, v115, "Skipping ODN bindings for attribute %s", (uint8_t *)v116, 0xCu);
      swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v117, -1, -1);
      swift_slowDealloc(v116, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v112, 2);
    }
    v247(v111, v248);
LABEL_64:
    v35 = v264;
    v32 = v265;
    v28 = v252;
    v34 = v266;
    if (v265)
      goto LABEL_8;
LABEL_9:
    v37 = __OFADD__(v34, 1);
    v38 = v34 + 1;
    if (v37)
    {
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    if (v38 >= v257)
      goto LABEL_74;
    v39 = *(_QWORD *)(v256 + 8 * v38);
    if (!v39)
      break;
LABEL_19:
    v265 = (v39 - 1) & v39;
    v266 = v38;
  }
  v40 = v38 + 1;
  if (v38 + 1 >= v257)
    goto LABEL_74;
  v39 = *(_QWORD *)(v256 + 8 * v40);
  if (v39)
    goto LABEL_18;
  v40 = v38 + 2;
  if (v38 + 2 >= v257)
    goto LABEL_74;
  v39 = *(_QWORD *)(v256 + 8 * v40);
  if (v39)
  {
LABEL_18:
    v38 = v40;
    goto LABEL_19;
  }
  v40 = v38 + 3;
  if (v38 + 3 < v257)
  {
    v39 = *(_QWORD *)(v256 + 8 * v40);
    if (!v39)
    {
      while (1)
      {
        v38 = v40 + 1;
        if (__OFADD__(v40, 1))
          break;
        if (v38 >= v257)
          goto LABEL_74;
        v39 = *(_QWORD *)(v256 + 8 * v38);
        ++v40;
        if (v39)
          goto LABEL_19;
      }
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }
    goto LABEL_18;
  }
LABEL_74:
  swift_release(v28);
  v152 = *(char **)(v244 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_unverifiedClaimData);
  v153 = *((_QWORD *)v152 + 8);
  v250 = v152 + 64;
  v154 = 1 << v152[32];
  v155 = -1;
  if (v154 < 64)
    v155 = ~(-1 << v154);
  v156 = v155 & v153;
  v251 = (void *)((unint64_t)(v154 + 63) >> 6);
  swift_bridgeObjectRetain(v152);
  v157 = 0;
  v246 = v152;
  while (2)
  {
    if (v156)
    {
      v265 = v157;
      v266 = (v156 - 1) & v156;
      v158 = __clz(__rbit64(v156)) | (v157 << 6);
LABEL_92:
      v162 = (uint64_t *)(*((_QWORD *)v152 + 6) + 16 * v158);
      v164 = *v162;
      v163 = (void *)v162[1];
      v165 = (_QWORD *)(*((_QWORD *)v152 + 7) + 96 * v158);
      v166 = v165[1];
      v167 = v165[3];
      v168 = v165[5];
      v169 = v165[8];
      v170 = (char *)v165[9];
      v171 = v165[10];
      swift_bridgeObjectRetain(v171);
      swift_bridgeObjectRetain(v163);
      swift_bridgeObjectRetain(v166);
      swift_bridgeObjectRetain(v167);
      swift_bridgeObjectRetain(v168);
      swift_bridgeObjectRetain(v169);
      v172 = sub_10040C194(v164, v163);
      if (v35)
      {
        swift_errorRelease(v35);
        swift_bridgeObjectRelease(v163);
        swift_bridgeObjectRelease(v171);
        swift_bridgeObjectRelease(v169);
        swift_bridgeObjectRelease(v168);
        swift_bridgeObjectRelease(v167);
        swift_bridgeObjectRelease(v166);
        v35 = 0;
      }
      else
      {
        v249 = v170;
        v260 = v173;
        v261 = (uint64_t)v172;
        swift_bridgeObjectRelease(v174);
        v175 = v262;
        v176 = *(_QWORD *)(v262 + 16);
        v264 = 0;
        if (v176 && (v177 = sub_1004A8604(v164, (uint64_t)v163), (v178 & 1) != 0))
        {
          v179 = *(_QWORD *)(v175 + 56) + 96 * v177;
          v180 = *(_QWORD *)v179;
          v263 = *(_QWORD *)(v179 + 8);
          v181 = *(_QWORD *)(v179 + 24);
          v257 = *(_QWORD *)(v179 + 16);
          v258 = v180;
          v256 = *(_QWORD *)(v179 + 32);
          v245.n128_u64[0] = *(_QWORD *)(v179 + 40);
          v254 = *(unsigned __int8 *)(v179 + 48);
          v182 = *(_QWORD *)(v179 + 64);
          v253 = *(_QWORD *)(v179 + 56);
          v183 = *(_QWORD *)(v179 + 80);
          v252 = *(_QWORD *)(v179 + 72);
          swift_bridgeObjectRetain(v183);
          swift_bridgeObjectRetain(v263);
          v255 = v181;
          swift_bridgeObjectRetain(v181);
          v184 = v245.n128_u64[0];
          swift_bridgeObjectRetain(v245.n128_u64[0]);
          swift_bridgeObjectRetain(v182);
          LODWORD(v259) = 1;
        }
        else
        {
          LODWORD(v259) = 0;
          v257 = 0;
          v258 = 0;
          v263 = 0;
          v255 = 0;
          v256 = 0;
          v184 = 0;
          v254 = 0;
          v253 = 0;
          v182 = 0;
          v252 = 0;
          v183 = 0;
        }
        swift_bridgeObjectRelease(v163);
        sub_100183E44(v258, v263, v257, v255, v256, v184, v254, v253, v182, v252, v183);
        if (v171)
        {
          *((_QWORD *)&v271 + 1) = &type metadata for String;
          *(_QWORD *)&v270 = v249;
          *((_QWORD *)&v270 + 1) = v171;
          swift_bridgeObjectRelease(v169);
          swift_bridgeObjectRelease(v168);
          swift_bridgeObjectRelease(v167);
          swift_bridgeObjectRelease(v166);
          sub_10000491C(&v270, &v268);
          v185 = v260;
          swift_bridgeObjectRetain(v260);
          v186 = v272;
          v187 = swift_isUniquelyReferenced_nonNull_native(v272);
          v267 = v186;
          v272 = 0x8000000000000000;
          v188 = v261;
          sub_100481A14(&v268, v261, v185, v187);
          v189 = v272;
          v272 = v267;
          swift_bridgeObjectRelease(v185);
          swift_bridgeObjectRelease(v189);
        }
        else
        {
          swift_bridgeObjectRelease(0);
          swift_bridgeObjectRelease(v169);
          swift_bridgeObjectRelease(v168);
          swift_bridgeObjectRelease(v167);
          swift_bridgeObjectRelease(v166);
          v185 = v260;
          swift_bridgeObjectRetain(v260);
          v190 = v272;
          swift_bridgeObjectRetain(v272);
          v188 = v261;
          v191 = sub_1004A8604(v261, v185);
          v193 = v192;
          swift_bridgeObjectRelease(v190);
          if ((v193 & 1) != 0)
          {
            v194 = v272;
            v195 = swift_isUniquelyReferenced_nonNull_native(v272);
            *(_QWORD *)&v268 = v194;
            if ((v195 & 1) == 0)
            {
              sub_10012A4A4();
              v194 = v268;
            }
            swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v194 + 48) + 16 * v191 + 8));
            sub_10000491C((_OWORD *)(*(_QWORD *)(v194 + 56) + 32 * v191), &v270);
            sub_1004802F4(v191, v194);
            v272 = v194;
            swift_bridgeObjectRelease(0x8000000000000000);
          }
          else
          {
            v270 = 0u;
            v271 = 0u;
          }
          swift_bridgeObjectRelease(v185);
          sub_100008030((uint64_t)&v270, (uint64_t *)&unk_1006371E0);
        }
        *(_QWORD *)&v270 = v188;
        *((_QWORD *)&v270 + 1) = v185;
        v196._countAndFlagsBits = 0x657261685373692ELL;
        v196._object = (void *)0xE900000000000064;
        String.append(_:)(v196);
        v198 = *((_QWORD *)&v270 + 1);
        v197 = v270;
        v199 = objc_allocWithZone((Class)NSNumber);
        v200 = objc_msgSend(v199, "initWithBool:", v259);
        *((_QWORD *)&v271 + 1) = sub_10001CFF8(0, &qword_100636CA8, NSNumber_ptr);
        *(_QWORD *)&v270 = v200;
        sub_10000491C(&v270, &v268);
        v201 = v272;
        v202 = swift_isUniquelyReferenced_nonNull_native(v272);
        v267 = v201;
        sub_100481A14(&v268, v197, v198, v202);
        v272 = v267;
        swift_bridgeObjectRelease(v198);
        swift_bridgeObjectRelease(0x8000000000000000);
        v35 = v264;
        v152 = v246;
      }
      v157 = v265;
      v156 = v266;
      continue;
    }
    break;
  }
  v37 = __OFADD__(v157, 1);
  v159 = v157 + 1;
  if (v37)
    goto LABEL_122;
  if (v159 >= (uint64_t)v251)
  {
LABEL_110:
    swift_release(v244);
    v27 = swift_release(v152);
    v6 = v234;
    goto LABEL_111;
  }
  v160 = *(_QWORD *)&v250[8 * v159];
  if (v160)
  {
LABEL_91:
    v265 = v159;
    v266 = (v160 - 1) & v160;
    v158 = __clz(__rbit64(v160)) + (v159 << 6);
    goto LABEL_92;
  }
  v161 = v159 + 1;
  if (v159 + 1 >= (uint64_t)v251)
    goto LABEL_110;
  v160 = *(_QWORD *)&v250[8 * v161];
  if (v160)
    goto LABEL_90;
  v161 = v159 + 2;
  if (v159 + 2 >= (uint64_t)v251)
    goto LABEL_110;
  v160 = *(_QWORD *)&v250[8 * v161];
  if (v160)
    goto LABEL_90;
  v161 = v159 + 3;
  if (v159 + 3 >= (uint64_t)v251)
    goto LABEL_110;
  v160 = *(_QWORD *)&v250[8 * v161];
  if (v160)
  {
LABEL_90:
    v159 = v161;
    goto LABEL_91;
  }
  while (1)
  {
    v159 = v161 + 1;
    if (__OFADD__(v161, 1))
      break;
    if (v159 >= (uint64_t)v251)
      goto LABEL_110;
    v160 = *(_QWORD *)&v250[8 * v159];
    ++v161;
    if (v160)
      goto LABEL_91;
  }
LABEL_124:
  __break(1u);
}

void sub_100267C88(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint8_t *v41;
  uint8_t *v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  id v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint8_t *v111;
  int *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[5];
  uint64_t v121[6];
  _OWORD v122[2];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;

  v115 = a2;
  v116 = a1;
  v106 = a3;
  v109 = type metadata accessor for DIPError.Code(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v110 = (uint64_t)&v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_100636698);
  __chkstk_darwin(v4);
  v107 = (uint64_t)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004828(&qword_10063A7B8);
  v7 = __chkstk_darwin(v6);
  v114 = (uint64_t)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v118 = (uint64_t)&v102 - v9;
  v10 = sub_100004828(&qword_10063A6C8);
  v11 = __chkstk_darwin(v10);
  v112 = (int *)((char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v117 = (uint64_t)&v102 - v13;
  v14 = type metadata accessor for AugmentedProfile(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v111 = (uint8_t *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v102 - v18;
  v20 = sub_100004828(&qword_100636668);
  v21 = __chkstk_darwin(v20);
  v103 = (uint64_t)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v102 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v102 - v26;
  v28 = type metadata accessor for Logger(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v105 = (char *)&v102 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v104 = (char *)&v102 - v33;
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v102 - v35;
  v37 = defaultLogger()(v34);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v113 = v27;
  if (v40)
  {
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Using pre-computed assessment", v41, 2u);
    v42 = v41;
    v27 = v113;
    swift_slowDealloc(v42, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v28);
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v43(v27, 1, 1, v14);
  sub_100038B24(v115, (uint64_t)v25, &qword_100636668);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v25, 1, v14) == 1)
  {
    sub_100008030((uint64_t)v25, &qword_100636668);
    v44 = v119;
    swift_retain(v119);
    v45 = sub_100004828((uint64_t *)&unk_100632610);
    runAsyncAndBlock<A>(file:function:line:_:)(v122, 0xD000000000000019, 0x8000000100558A60, 0xD000000000000032, 0x80000001005595B0, 434, &unk_10063A8C0, v44, v45);
    swift_release(v44);
    v46 = *((_QWORD *)&v122[0] + 1);
    v47 = v118;
    if (*((_QWORD *)&v122[0] + 1))
    {
      v48 = v111;
      sub_1001A5908(*(uint64_t *)&v122[0], *((uint64_t *)&v122[0] + 1), v111);
      sub_100270940((uint64_t)v48);
      v53 = v103;
      sub_100038AE0((uint64_t)v48, v103, type metadata accessor for AugmentedProfile);
      v54 = (uint64_t)v113;
      sub_100008030((uint64_t)v113, &qword_100636668);
      swift_bridgeObjectRelease(v46);
      v43((char *)v53, 0, 1, v14);
      sub_1000A1F54(v53, v54, &qword_100636668);
    }
    v50 = v117;
    v51 = v116;
    v52 = v114;
    v49 = v47;
  }
  else
  {
    sub_100008030((uint64_t)v27, &qword_100636668);
    sub_100038AE0((uint64_t)v25, (uint64_t)v19, type metadata accessor for AugmentedProfile);
    sub_100035DE8((uint64_t)v19, (uint64_t)v27, type metadata accessor for AugmentedProfile);
    v43(v27, 0, 1, v14);
    sub_100270940((uint64_t)v19);
    sub_100035DAC((uint64_t)v19, type metadata accessor for AugmentedProfile);
    v49 = v118;
    v50 = v117;
    v51 = v116;
    v52 = v114;
  }
  v55 = (int *)type metadata accessor for DIPPregeneratedAssessment(0);
  v56 = (uint64_t *)(v51 + v55[7]);
  v57 = *v56;
  v58 = v56[1];
  v59 = (uint64_t *)(v51 + v55[6]);
  v60 = v59[1];
  v114 = *v59;
  v61 = (uint64_t *)(v51 + v55[12]);
  v63 = *v61;
  v62 = v61[1];
  type metadata accessor for DIPODNator(0);
  v115 = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v62);
  LODWORD(v109) = sub_10027A3B8(v57, v58);
  v110 = v64;
  v111 = v65;
  v66 = (uint64_t *)(v51 + v55[10]);
  v67 = v66[1];
  v108 = *v66;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v67);
  v68 = (uint64_t)v112;
  sub_100268904((uint64_t)v112, v52, v51);
  sub_1000A1F54(v68, v50, &qword_10063A6C8);
  v69 = sub_1000A1F54(v52, v49, &qword_10063A7B8);
  v70 = Date.timeIntervalSinceNow.getter(v69);
  v71 = -v70;
  if ((~COERCE__INT64(-v70) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v70 >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v70 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v112 = v55;
  v72 = *(_QWORD *)(v51 + v55[13]);
  v73 = sub_100004828(&qword_1006385E0);
  v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 48))(v50, 1, v73);
  if (v74 == 1)
  {
    v75 = 0;
  }
  else
  {
    v75 = v72 + 1;
    if (__OFADD__(v72, 1))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
  }
  v76 = sub_100004828(&qword_10063A7D8);
  v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 48))(v49, 1, v76);
  if (v77 == 1)
  {
    v78 = 0;
  }
  else
  {
    v78 = v72 + 2;
    if (__OFADD__(v72, 2))
    {
LABEL_26:
      __break(1u);
      return;
    }
  }
  v105 = (char *)v63;
  v79 = v77 == 1;
  v121[0] = v63;
  v121[1] = v62;
  v121[2] = v63;
  v121[3] = v62;
  v121[4] = v108;
  v121[5] = v67;
  memset(v122, 0, sizeof(v122));
  v124 = 0;
  v125 = 0;
  v123 = 1;
  v126 = 0;
  v80 = v115;
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v67);
  v108 = (uint64_t)v71;
  v81 = (uint64_t)v113;
  v101 = v79;
  v82 = v109 & 1;
  v100 = v78;
  v83 = v118;
  v99 = v74 == 1;
  v98 = v75;
  v84 = v117;
  v85 = v111;
  v86 = v119;
  sub_10026DEE0(v114, v80, v121, v110, (uint64_t)v111, v72, (uint64_t *)v122, v109 & 1, v117, v98, v99, v118, v100, v101, (uint64_t)v113, (uint64_t)v71, 0);
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v67);
  swift_bridgeObjectRelease(v62);
  swift_bridgeObjectRelease(v85);
  if (__OFADD__(v72, 1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v87 = v107;
  sub_100270744(v108, v82, v84, v72 + 1, v107);
  v88 = (uint64_t *)(v116 + v112[8]);
  v90 = *v88;
  v89 = v88[1];
  v120[3] = &type metadata for String;
  v120[4] = &off_10060B728;
  v120[0] = v90;
  v120[1] = v89;
  swift_bridgeObjectRetain(v89);
  sub_100008030(v81, &qword_100636668);
  swift_bridgeObjectRelease(v67);
  swift_bridgeObjectRelease(v62);
  v92 = *(_QWORD *)(v86 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  v91 = *(_QWORD *)(v86 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
  v93 = v106;
  sub_1000A1F54((uint64_t)v120, v106, &qword_100636670);
  *(_QWORD *)(v93 + 40) = v105;
  *(_QWORD *)(v93 + 48) = v62;
  v94 = v115;
  *(_QWORD *)(v93 + 56) = v114;
  *(_QWORD *)(v93 + 64) = v94;
  *(_QWORD *)(v93 + 72) = 0;
  *(_QWORD *)(v93 + 80) = 0;
  sub_1000A1F54((uint64_t)v122, v93 + 88, &qword_10063A880);
  *(_OWORD *)(v93 + 152) = 0u;
  *(_OWORD *)(v93 + 168) = 0u;
  *(_OWORD *)(v93 + 184) = 0u;
  *(_OWORD *)(v93 + 200) = 0u;
  *(_QWORD *)(v93 + 216) = v92;
  *(_QWORD *)(v93 + 224) = v91;
  v95 = type metadata accessor for ODNAssessmentResult(0);
  sub_1000A1F54(v87, v93 + *(int *)(v95 + 44), &qword_100636698);
  swift_bridgeObjectRetain(v91);
  sub_100008030(v83, &qword_10063A7B8);
  sub_100008030(v84, &qword_10063A6C8);
  v96 = *(void **)(v86 + 376);
  if (v96)
  {
    v97 = v96;
    OS_dispatch_semaphore.signal()();

  }
}

uint64_t sub_100268844(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10026885C, 0, 0);
}

uint64_t sub_10026885C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1006446AC);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1002688A8;
  return sub_1004F92EC();
}

uint64_t sub_1002688A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10027FED4, 0, 0);
}

uint64_t sub_100268904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v57 = a1;
  v58 = a2;
  v4 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v4);
  v52 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v54 = *(_QWORD *)(v6 - 8);
  v55 = v6;
  v7 = __chkstk_darwin(v6);
  v53 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v48 - v9;
  v11 = sub_100004828(&qword_10063A7D8);
  v56 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004828(&qword_1006385E0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DIPPregeneratedAssessment(0);
  v19 = (_QWORD *)(a3 + *(int *)(v18 + 60));
  v20 = v19[1];
  if (v20)
  {
    v21 = v18;
    v18 = Data.init(base64Encoded:options:)(*v19, v20, 1);
    if (v22 >> 60 != 15)
    {
      v23 = v22;
      v24 = (_QWORD *)(a3 + *(int *)(v21 + 64));
      v25 = v24[1];
      if (v25)
      {
        v50 = v18;
        v51 = v23;
        v27 = Data.init(base64Encoded:options:)(*v24, v25, 1);
        v18 = v50;
        v23 = v51;
        if (v26 >> 60 != 15)
        {
          v48 = v26;
          v49 = v27;
          v38 = v50;
          v39 = v51;
          v40 = type metadata accessor for JSONDecoder(0);
          v41 = swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
          v42 = JSONDecoder.init()(v41);
          v43 = sub_100099FFC(&qword_10063A8C8, &qword_1006385E0, (uint64_t)&protocol conformance descriptor for EncryptedDataContainer<A>);
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(v14, v38, v39, v14, v43);
          v44 = sub_100099FFC(&qword_10063A8D0, &qword_10063A7D8, (uint64_t)&protocol conformance descriptor for EncryptedDataContainer<A>);
          v35 = v11;
          v45 = v11;
          v46 = v48;
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(v45, v49, v48, v35, v44);
          sub_100007F78(v50, v51);
          swift_release(v42);
          sub_100007F78(v49, v46);
          v47 = v57;
          (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v57, v17, v14);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v47, 0, 1, v14);
          v36 = v56;
          v34 = v58;
          (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v58, v13, v35);
          v33 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v34, v33, 1, v35);
        }
      }
      v18 = sub_100007F78(v18, v23);
    }
  }
  v28 = defaultLogger()(v18);
  v29 = Logger.logObject.getter(v28);
  v31 = static os_log_type_t.info.getter(v29, v30);
  if (os_log_type_enabled(v29, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v31, "No Encrypted Containers from pre-generated assessment", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v54 + 8))(v10, v55);
  v33 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v57, 1, 1, v14);
  v34 = v58;
  v35 = v11;
  v36 = v56;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v34, v33, 1, v35);
}

double sub_100268E30@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint8_t *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  uint8_t *v70;
  uint8_t *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint8_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(void);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(void);
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double result;
  uint64_t v161;
  NSObject *v162;
  os_log_type_t v163;
  uint8_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(void);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint8_t *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  NSObject *v205;
  os_log_type_t v206;
  uint8_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  char *v215;
  void (*v216)(char *, uint64_t);
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  __n128 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  NSObject *v243;
  os_log_type_t v244;
  _BOOL4 v245;
  uint64_t v246;
  uint8_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  NSObject *v254;
  uint64_t v255;
  os_log_type_t v256;
  uint8_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  unint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  char *v267;
  char *v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  NSObject *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  unint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  __int128 v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  uint64_t countAndFlagsBits;
  unint64_t v328;
  unint64_t v329;
  void (*v330)(char *, _QWORD *);
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t object;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  int64_t v347;
  _QWORD *v348;
  unint64_t v349;
  int64_t v350;
  _QWORD *v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  uint64_t *v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint8_t *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  Swift::String v381;
  void *v382;
  unint64_t v383;
  uint64_t v384;
  Swift::String v385;
  uint64_t v386;
  int v387;
  char *v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint8_t *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  id v404;
  _QWORD *v405;
  uint64_t v406;
  void (*v407)(char *, uint64_t);
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  char *v414;
  _QWORD *v415;
  uint64_t v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  _QWORD *v422;
  int v423;
  uint64_t *v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  char *v433;
  char *v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  char *v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  char *v442;
  uint64_t v443;
  uint8_t *v444;
  char *v445;
  uint64_t v446;
  uint64_t v447;
  char *v448;
  uint64_t v449;
  uint8_t *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  __int128 v455;
  uint64_t v456;
  uint64_t v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  uint64_t v466;
  uint64_t v467;
  _OWORD v468[4];
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  uint64_t v473;
  _QWORD v474[5];
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  __int128 v478;
  char *v479;
  uint64_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  char v485[32];
  __int128 v486;
  uint64_t v487;
  unint64_t v488;
  unsigned int v489;

  v7 = v6;
  v423 = a5;
  v449 = a6;
  v450 = a4;
  v424 = (uint64_t *)a3;
  v425 = a2;
  v428 = a1;
  v8 = sub_100004828(&qword_100636698);
  __chkstk_darwin(v8);
  v416 = (uint64_t)&v403 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v415 = (_QWORD *)type metadata accessor for String.Encoding(0);
  v413 = *(v415 - 1);
  __chkstk_darwin(v415);
  v414 = (char *)&v403 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_100636840);
  v429 = *(_QWORD *)(v11 - 8);
  v430 = v11;
  __chkstk_darwin(v11);
  v417 = (char *)&v403 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_10063A7B8);
  v421 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v427 = (uint64_t)&v403 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v412 = (uint64_t)&v403 - v17;
  v422 = v18;
  __chkstk_darwin(v16);
  v432 = (uint64_t)&v403 - v19;
  v20 = sub_100004828(&qword_10063A6C8);
  v419 = *(_QWORD *)(v20 - 8);
  v21 = __chkstk_darwin(v20);
  v426 = (uint64_t)&v403 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v418 = (uint64_t)&v403 - v24;
  v420 = v25;
  __chkstk_darwin(v23);
  v431 = (uint64_t)&v403 - v26;
  v27 = type metadata accessor for UUID(0);
  v436 = *(_QWORD *)(v27 - 8);
  v437 = v27;
  v28 = __chkstk_darwin(v27);
  v433 = (char *)&v403 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v438 = (char *)&v403 - v30;
  v31 = type metadata accessor for DIPError.Code(0);
  v446 = *(_QWORD *)(v31 - 8);
  v447 = v31;
  __chkstk_darwin(v31);
  v454 = (uint64_t)&v403 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100004828(&qword_100636668);
  __chkstk_darwin(v33);
  v35 = (char *)&v403 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v451 = type metadata accessor for AugmentedProfile(0);
  v36 = *(_QWORD *)(v451 - 8);
  v37 = __chkstk_darwin(v451);
  v441 = (unint64_t)&v403 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v444 = (uint8_t *)&v403 - v40;
  v41 = __chkstk_darwin(v39);
  v440 = (unint64_t)&v403 - v42;
  __chkstk_darwin(v41);
  v44 = (char *)&v403 - v43;
  v456 = type metadata accessor for Logger(0);
  v45 = *(_QWORD *)(v456 - 8);
  v46 = __chkstk_darwin(v456);
  v445 = (char *)&v403 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __chkstk_darwin(v46);
  v443 = (uint64_t)&v403 - v49;
  v50 = __chkstk_darwin(v48);
  v442 = (char *)&v403 - v51;
  v52 = __chkstk_darwin(v50);
  v439 = (uint64_t)&v403 - v53;
  v54 = __chkstk_darwin(v52);
  v435 = (unint64_t)&v403 - v55;
  v56 = __chkstk_darwin(v54);
  v434 = (char *)&v403 - v57;
  v58 = __chkstk_darwin(v56);
  v448 = (char *)&v403 - v59;
  v60 = __chkstk_darwin(v58);
  v62 = (char *)&v403 - v61;
  v63 = __chkstk_darwin(v60);
  v65 = (char *)&v403 - v64;
  v66 = defaultLogger()(v63);
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.debug.getter(v67);
  v69 = os_log_type_enabled(v67, v68);
  v453 = v7;
  if (v69)
  {
    v70 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v70 = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Computing new assessment", v70, 2u);
    v71 = v70;
    v7 = v453;
    swift_slowDealloc(v71, -1, -1);
  }

  v72 = *(void (**)(char *, uint64_t))(v45 + 8);
  v73 = v456;
  *(_QWORD *)&v455 = v72;
  v72(v65, v456);
  v74 = v451;
  v452 = swift_allocBox(v451);
  v76 = v75;
  sub_100038B24((uint64_t)v450, (uint64_t)v35, &qword_100636668);
  v77 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v78 = v74;
  if (v77(v35, 1, v74) == 1)
  {
    sub_100008030((uint64_t)v35, &qword_100636668);
    swift_retain(v7);
    v79 = sub_100004828((uint64_t *)&unk_100632610);
    runAsyncAndBlock<A>(file:function:line:_:)(&v475, 0xD000000000000019, 0x8000000100558A60, 0xD000000000000070, 0x8000000100559500, 482, &unk_10063A8A0, v7, v79);
    v80 = swift_release(v7);
    v81 = v476;
    if (!v476)
    {
      v451 = (uint64_t)" the training GUID (";
      v161 = defaultLogger()(v80);
      v162 = Logger.logObject.getter(v161);
      v163 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v162, v163))
      {
        v164 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v164 = 0;
        _os_log_impl((void *)&_mh_execute_header, v162, v163, "assessment profile is missing, skip assessment", v164, 2u);
        swift_slowDealloc(v164, -1, -1);
      }

      ((void (*)(char *, uint64_t))v455)(v62, v73);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v446 + 104))(v454, enum case for DIPError.Code.odnMissingProfile(_:), v447);
      v165 = sub_100004828((uint64_t *)&unk_1006325A0);
      v166 = sub_100004828((uint64_t *)&unk_100633440);
      v167 = *(_QWORD *)(v166 - 8);
      v168 = *(_QWORD *)(v167 + 72);
      v169 = *(unsigned __int8 *)(v167 + 80);
      v170 = (v169 + 32) & ~v169;
      v171 = swift_allocObject(v165, v170 + 2 * v168, v169 | 7);
      *(_OWORD *)(v171 + 16) = xmmword_1005208D0;
      v172 = v171 + v170;
      v173 = (_QWORD *)(v172 + *(int *)(v166 + 48));
      v174 = enum case for DIPError.PropertyKey.inoWorkflowID(_:);
      v175 = type metadata accessor for DIPError.PropertyKey(0);
      v176 = *(void (**)(void))(*(_QWORD *)(v175 - 8) + 104);
      ((void (*)(uint64_t, uint64_t, uint64_t))v176)(v172, v174, v175);
      v177 = v453;
      v178 = *(_QWORD *)(v453 + 16);
      v179 = *(_QWORD *)(v453 + 24);
      v173[3] = &type metadata for String;
      *v173 = v178;
      v173[1] = v179;
      v180 = (_QWORD *)(v172 + v168 + *(int *)(v166 + 48));
      v176();
      v181 = *(_QWORD *)(v177 + 32);
      v182 = *(_QWORD *)(v177 + 40);
      v180[3] = &type metadata for String;
      *v180 = v181;
      v180[1] = v182;
      swift_bridgeObjectRetain(v179);
      swift_bridgeObjectRetain(v182);
      v183 = sub_10011D314(v171);
      v184 = type metadata accessor for DIPError(0);
      v185 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v186 = swift_allocError(v184, v185, 0, 0);
      v187 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v454, 0, v183, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD000000000000070, v451 | 0x8000000000000000, 484);
      v188 = v448;
      defaultLogger()(v187);
      DIPRecordError(_:message:log:)(v186, 0, 0xE000000000000000, v188);
      ((void (*)(char *, uint64_t))v455)(v188, v456);
      swift_errorRelease(v186);
      swift_beginAccess(v177 + 216, &v475, 0, 0);
      v189 = v449;
      sub_100038B24(v177 + 216, v449, &qword_100636670);
      v191 = *(_QWORD *)(v177 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
      v190 = *(_QWORD *)(v177 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
      v192 = v189 + *(int *)(type metadata accessor for ODNAssessmentResult(0) + 44);
      v193 = type metadata accessor for AssessmentAdditionalInfo(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v193 - 8) + 56))(v192, 1, 1, v193);
      *(_OWORD *)(v189 + 104) = 0u;
      *(_OWORD *)(v189 + 88) = 0u;
      *(_OWORD *)(v189 + 72) = 0u;
      *(_OWORD *)(v189 + 56) = 0u;
      *(_OWORD *)(v189 + 40) = 0u;
      *(_QWORD *)(v189 + 128) = 0;
      *(_QWORD *)(v189 + 136) = 0;
      *(_QWORD *)(v189 + 120) = 1;
      *(_BYTE *)(v189 + 144) = 0;
      *(_OWORD *)(v189 + 152) = 0u;
      *(_OWORD *)(v189 + 168) = 0u;
      *(_OWORD *)(v189 + 184) = 0u;
      *(_OWORD *)(v189 + 200) = 0u;
      *(_QWORD *)(v189 + 216) = v191;
      *(_QWORD *)(v189 + 224) = v190;
      swift_deallocBox(v452);
      goto LABEL_35;
    }
    v82 = v76;
    v83 = v444;
    sub_1001A5908(v475, v476, v444);
    v84 = v73;
    v450 = 0;
    sub_100270940((uint64_t)v83);
    v194 = v440;
    sub_100038AE0((uint64_t)v83, v440, type metadata accessor for AugmentedProfile);
    swift_bridgeObjectRelease(v81);
    v195 = v194;
    v76 = v82;
    sub_100038AE0(v195, v82, type metadata accessor for AugmentedProfile);
    v44 = (char *)v441;
    sub_100035DE8(v82, v441, type metadata accessor for AugmentedProfile);
    sub_1001AC08C((uint64_t)v44);
  }
  else
  {
    v84 = v73;
    sub_100038AE0((uint64_t)v35, (uint64_t)v44, type metadata accessor for AugmentedProfile);
    sub_100035DE8((uint64_t)v44, v76, type metadata accessor for AugmentedProfile);
    sub_100270940((uint64_t)v44);
    v450 = 0;
  }
  sub_100035DAC((uint64_t)v44, type metadata accessor for AugmentedProfile);
  v85 = (uint64_t *)(v76 + *(int *)(v74 + 20));
  v86 = *v85;
  v87 = v85[1];
  swift_bridgeObjectRetain(v87);
  v88 = (uint8_t *)Data.init(base64Encoded:options:)(v86, v87, 1);
  v90 = v89;
  v91 = swift_bridgeObjectRelease(v87);
  if (v90 >> 60 == 15)
  {
    v92 = v443;
    v93 = defaultLogger()(v91);
    v94 = Logger.logObject.getter(v93);
    v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, v95))
    {
      v96 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v96 = 0;
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "assessment profile is missing, skip assessment", v96, 2u);
      swift_slowDealloc(v96, -1, -1);
    }

    ((void (*)(uint64_t, uint64_t))v455)(v92, v84);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v446 + 104))(v454, enum case for DIPError.Code.odnMissingProfile(_:), v447);
    v97 = sub_100004828((uint64_t *)&unk_1006325A0);
    v98 = sub_100004828((uint64_t *)&unk_100633440);
    v99 = *(_QWORD *)(v98 - 8);
    v100 = *(_QWORD *)(v99 + 72);
    v101 = *(unsigned __int8 *)(v99 + 80);
    v102 = (v101 + 32) & ~v101;
    v103 = swift_allocObject(v97, v102 + 2 * v100, v101 | 7);
    *(_OWORD *)(v103 + 16) = xmmword_1005208D0;
    v104 = v103 + v102;
    v105 = (_QWORD *)(v104 + *(int *)(v98 + 48));
    v106 = enum case for DIPError.PropertyKey.inoWorkflowID(_:);
    v107 = type metadata accessor for DIPError.PropertyKey(0);
    v108 = *(void (**)(void))(*(_QWORD *)(v107 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v108)(v104, v106, v107);
    v109 = v453;
    v110 = *(_QWORD *)(v453 + 16);
    v111 = *(_QWORD *)(v453 + 24);
    v105[3] = &type metadata for String;
    *v105 = v110;
    v105[1] = v111;
    v112 = (_QWORD *)(v104 + v100 + *(int *)(v98 + 48));
    v108();
    v113 = *(_QWORD *)(v109 + 32);
    v114 = *(_QWORD *)(v109 + 40);
    v112[3] = &type metadata for String;
    *v112 = v113;
    v112[1] = v114;
    swift_bridgeObjectRetain(v111);
    swift_bridgeObjectRetain(v114);
    v115 = sub_10011D314(v103);
    v116 = type metadata accessor for DIPError(0);
    v117 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v118 = swift_allocError(v116, v117, 0, 0);
    v119 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v454, 0, v115, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD000000000000070, 0x8000000100559500, 493);
    v120 = v448;
    defaultLogger()(v119);
    DIPRecordError(_:message:log:)(v118, 0, 0xE000000000000000, v120);
LABEL_16:
    ((void (*)(char *, uint64_t))v455)(v120, v456);
    swift_errorRelease(v118);
    swift_beginAccess(v109 + 216, &v475, 0, 0);
    v153 = v449;
    sub_100038B24(v109 + 216, v449, &qword_100636670);
    v155 = *(_QWORD *)(v109 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
    v154 = *(_QWORD *)(v109 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
    v156 = v153 + *(int *)(type metadata accessor for ODNAssessmentResult(0) + 44);
    v157 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v157 - 8) + 56))(v156, 1, 1, v157);
    *(_OWORD *)(v153 + 104) = 0u;
    *(_OWORD *)(v153 + 88) = 0u;
    *(_OWORD *)(v153 + 72) = 0u;
    *(_OWORD *)(v153 + 56) = 0u;
    *(_OWORD *)(v153 + 40) = 0u;
    *(_QWORD *)(v153 + 128) = 0;
    *(_QWORD *)(v153 + 136) = 0;
    *(_QWORD *)(v153 + 120) = 1;
    *(_BYTE *)(v153 + 144) = 0;
    *(_OWORD *)(v153 + 152) = 0u;
    *(_OWORD *)(v153 + 168) = 0u;
    *(_OWORD *)(v153 + 184) = 0u;
    *(_OWORD *)(v153 + 200) = 0u;
    *(_QWORD *)(v153 + 216) = v155;
    *(_QWORD *)(v153 + 224) = v154;
    v158 = v154;
LABEL_17:
    swift_bridgeObjectRetain(v158);
    v159 = v452;
LABEL_18:
    swift_release(v159);
    return result;
  }
  v121 = (uint64_t *)(v76 + *(int *)(v78 + 24));
  v122 = v121[1];
  if (!v122
    || (v123 = *v121,
        swift_bridgeObjectRetain(v121[1]),
        v124 = Data.init(base64Encoded:options:)(v123, v122, 1),
        v126 = v125,
        v91 = swift_bridgeObjectRelease(v122),
        v126 >> 60 == 15))
  {
    v444 = v88;
    v441 = v90;
    v127 = v442;
    v128 = defaultLogger()(v91);
    v129 = Logger.logObject.getter(v128);
    v130 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v129, v130))
    {
      v131 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v131 = 0;
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "assessment profileInfo is missing, skip assessment", v131, 2u);
      swift_slowDealloc(v131, -1, -1);
    }

    ((void (*)(char *, uint64_t))v455)(v127, v84);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v446 + 104))(v454, enum case for DIPError.Code.assessmentProfileInfoMissing(_:), v447);
    v132 = sub_100004828((uint64_t *)&unk_1006325A0);
    v133 = sub_100004828((uint64_t *)&unk_100633440);
    v134 = *(_QWORD *)(v133 - 8);
    v135 = *(_QWORD *)(v134 + 72);
    v136 = *(unsigned __int8 *)(v134 + 80);
    v137 = (v136 + 32) & ~v136;
    v138 = swift_allocObject(v132, v137 + 2 * v135, v136 | 7);
    *(_OWORD *)(v138 + 16) = xmmword_1005208D0;
    v139 = v138 + v137;
    v140 = (_QWORD *)(v139 + *(int *)(v133 + 48));
    v141 = enum case for DIPError.PropertyKey.inoWorkflowID(_:);
    v142 = type metadata accessor for DIPError.PropertyKey(0);
    v143 = *(void (**)(void))(*(_QWORD *)(v142 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v143)(v139, v141, v142);
    v109 = v453;
    v144 = *(_QWORD *)(v453 + 16);
    v145 = *(_QWORD *)(v453 + 24);
    v140[3] = &type metadata for String;
    *v140 = v144;
    v140[1] = v145;
    v146 = (_QWORD *)(v139 + v135 + *(int *)(v133 + 48));
    v143();
    v147 = *(_QWORD *)(v109 + 32);
    v148 = *(_QWORD *)(v109 + 40);
    v146[3] = &type metadata for String;
    *v146 = v147;
    v146[1] = v148;
    swift_bridgeObjectRetain(v145);
    swift_bridgeObjectRetain(v148);
    v149 = sub_10011D314(v138);
    v150 = type metadata accessor for DIPError(0);
    v151 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v118 = swift_allocError(v150, v151, 0, 0);
    v152 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v454, 0, v149, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD000000000000070, 0x8000000100559500, 499);
    v120 = v448;
    defaultLogger()(v152);
    DIPRecordError(_:message:log:)(v118, 0, 0xE000000000000000, v120);
    sub_100007F78((uint64_t)v444, v441);
    goto LABEL_16;
  }
  v443 = v124;
  swift_beginAccess(v7 + 216, v485, 0, 0);
  v454 = v7 + 216;
  sub_100038B24(v7 + 216, (uint64_t)&v475, &qword_100636670);
  v196 = v478;
  sub_100008030((uint64_t)&v475, &qword_100636670);
  if (!v196
    || *(_QWORD *)(v7 + 280) >> 60 == 15
    || !*(_QWORD *)(v7 + 264)
    || (swift_beginAccess(v7 + 288, &v457, 0, 0),
        sub_100038B24(v7 + 288, (uint64_t)&v475, &qword_100636670),
        v197 = v478,
        v198 = sub_100008030((uint64_t)&v475, &qword_100636670),
        !v197)
    || *(_QWORD *)(v7 + 352) >> 60 == 15
    || !*(_QWORD *)(v7 + 336))
  {
    v199 = v76;
    swift_retain(v7);
    v200 = v450;
    runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD000000000000019, 0x8000000100558A60, 0xD000000000000070, 0x8000000100559500, 506, &unk_10063A8B0, v7, (char *)&type metadata for () + 8);
    if (v200)
    {
      sub_100007F78(v443, v126);
      sub_100007F78((uint64_t)v88, v90);
      swift_release(v452);
      v201 = v7;
      goto LABEL_30;
    }
    v450 = 0;
    v198 = swift_release(v7);
    v76 = v199;
  }
  v230 = *(_QWORD *)(v7 + 280);
  if (v230 >> 60 == 15 || (v231 = *(_QWORD *)(v7 + 264)) == 0)
  {
    v242 = defaultLogger()(v198);
    v243 = Logger.logObject.getter(v242);
    v244 = static os_log_type_t.error.getter();
    v245 = os_log_type_enabled(v243, v244);
    v246 = v452;
    if (v245)
    {
      v247 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v247 = 0;
      _os_log_impl((void *)&_mh_execute_header, v243, v244, "No assessment guid was set; skipping assessment", v247, 2u);
      swift_slowDealloc(v247, -1, -1);
      sub_100007F78((uint64_t)v88, v90);

      sub_100007F78(v443, v126);
    }
    else
    {
      sub_100007F78(v443, v126);
      sub_100007F78((uint64_t)v88, v90);

    }
    ((void (*)(uint64_t, uint64_t))v455)(v439, v84);
    v248 = v449;
    sub_100038B24(v454, v449, &qword_100636670);
    v250 = *(_QWORD *)(v7 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
    v249 = *(_QWORD *)(v7 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
    v251 = v248 + *(int *)(type metadata accessor for ODNAssessmentResult(0) + 44);
    v252 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v252 - 8) + 56))(v251, 1, 1, v252);
    *(_OWORD *)(v248 + 104) = 0u;
    *(_OWORD *)(v248 + 88) = 0u;
    *(_OWORD *)(v248 + 72) = 0u;
    *(_OWORD *)(v248 + 56) = 0u;
    *(_OWORD *)(v248 + 40) = 0u;
    *(_QWORD *)(v248 + 128) = 0;
    *(_QWORD *)(v248 + 136) = 0;
    *(_QWORD *)(v248 + 120) = 1;
    *(_BYTE *)(v248 + 144) = 0;
    *(_OWORD *)(v248 + 152) = 0u;
    *(_OWORD *)(v248 + 168) = 0u;
    *(_OWORD *)(v248 + 184) = 0u;
    *(_OWORD *)(v248 + 200) = 0u;
    *(_QWORD *)(v248 + 216) = v250;
    *(_QWORD *)(v248 + 224) = v249;
    swift_bridgeObjectRetain(v249);
    v159 = v246;
    goto LABEL_18;
  }
  v232 = *(_QWORD *)(v7 + 272);
  v409 = *(_QWORD *)(v7 + 256);
  v439 = v232;
  v440 = v126;
  v411 = v230;
  sub_100028034(v232, v230);
  v446 = v231;
  swift_bridgeObjectRetain(v231);
  v234 = UUID.init()(v233);
  v235 = UUID.uuidString.getter(v234);
  v447 = v237;
  v238 = *(_QWORD *)(v7 + 72);
  v408 = v76;
  v410 = v235;
  if (v238)
  {
    v239 = *(_QWORD *)(v7 + 64);
    v240 = v452;
    if (qword_10062F5B0 != -1)
      swift_once(&qword_10062F5B0, sub_100486FCC);
    v200 = v450;
    v241 = sub_10048BA78(*(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), v239, v238, v236);
    if (v200)
    {
      sub_100007F78(v439, v411);
      sub_100007F78((uint64_t)v88, v90);
      swift_bridgeObjectRelease(v446);
      sub_100007F78(v443, v440);
      swift_bridgeObjectRelease(v447);
      (*(void (**)(char *, uint64_t))(v436 + 8))(v438, v437);
      v201 = v240;
      goto LABEL_30;
    }
    v263 = v241;
    v450 = 0;
    v264 = v241[2];
    v260 = v437;
    if (v264)
    {
      v265 = &v241[2 * v264];
      v266 = v265[3];
      v410 = v265[2];
      swift_bridgeObjectRetain(v266);
      swift_bridgeObjectRelease(v447);
      v258 = swift_bridgeObjectRelease(v263);
      v447 = v266;
    }
    else
    {
      v258 = swift_bridgeObjectRelease(v241);
    }
    v261 = v433;
    v262 = v435;
    v259 = v436;
  }
  else
  {
    v253 = defaultLogger()(v235);
    v254 = Logger.logObject.getter(v253);
    v256 = static os_log_type_t.info.getter(v254, v255);
    if (os_log_type_enabled(v254, v256))
    {
      v257 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v257 = 0;
      _os_log_impl((void *)&_mh_execute_header, v254, v256, "No launch tiers, so no sessions to search for", v257, 2u);
      swift_slowDealloc(v257, -1, -1);
    }

    v258 = ((uint64_t (*)(char *, uint64_t))v455)(v434, v84);
    v259 = v436;
    v260 = v437;
    v261 = v433;
    v262 = v435;
  }
  v267 = v438;
  v436 = UUID.uuidString.getter(v258);
  v442 = v268;
  v269 = *(char **)(v7 + 336);
  v433 = *(char **)(v7 + 328);
  v434 = v269;
  swift_bridgeObjectRetain(v269);
  v270 = v447;
  swift_bridgeObjectRetain(v447);
  defaultLogger()(v271);
  (*(void (**)(char *, char *, uint64_t))(v259 + 16))(v261, v267, v260);
  v272 = swift_retain_n(v7, 2);
  v273 = v262;
  v274 = Logger.logObject.getter(v272);
  LODWORD(v406) = static os_log_type_t.debug.getter(v274);
  if (os_log_type_enabled(v274, (os_log_type_t)v406))
  {
    v444 = v88;
    v441 = v90;
    v275 = v260;
    v276 = swift_slowAlloc(22, -1);
    v277 = swift_slowAlloc(64, -1);
    v475 = v277;
    *(_DWORD *)v276 = 136315394;
    v278 = UUID.uuidString.getter(v277);
    v280 = v279;
    *(_QWORD *)&v468[0] = sub_1000E3AC8(v278, v279, &v475);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v468, (char *)v468 + 8, v276 + 4);
    swift_bridgeObjectRelease(v280);
    v407 = *(void (**)(char *, uint64_t))(v259 + 8);
    v407(v261, v275);
    *(_WORD *)(v276 + 12) = 2080;
    v281 = *(_QWORD *)(v7 + 336);
    if (v281)
    {
      v282 = *(_QWORD *)(v7 + 328);
      v283 = *(_QWORD *)(v7 + 336);
    }
    else
    {
      v283 = 0xE500000000000000;
      v282 = 0x3E6C696E3CLL;
    }
    swift_bridgeObjectRetain(v281);
    *(_QWORD *)&v468[0] = sub_1000E3AC8(v282, v283, &v475);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v468, (char *)v468 + 8, v276 + 14);
    swift_release_n(v7, 2);
    swift_bridgeObjectRelease(v283);
    _os_log_impl((void *)&_mh_execute_header, v274, (os_log_type_t)v406, "using tsid %s ts session %%@ tguid %s", (uint8_t *)v276, 0x16u);
    swift_arrayDestroy(v277, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v277, -1, -1);
    swift_slowDealloc(v276, -1, -1);

    v84 = v456;
    ((void (*)(unint64_t))v455)(v435);
    v90 = v441;
    v88 = v444;
    v270 = v447;
  }
  else
  {
    v407 = *(void (**)(char *, uint64_t))(v259 + 8);
    v407(v261, v260);

    swift_release_n(v7, 2);
    v84 = v456;
    ((void (*)(unint64_t))v455)(v273);
  }
  v284 = (uint64_t)v442;
  v285 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v285, *(unsigned int *)(v285 + 48), *(unsigned __int16 *)(v285 + 52));
  v286 = JSONEncoder.init()();
  v475 = v436;
  v476 = v284;
  v477 = v410;
  *(_QWORD *)&v478 = v270;
  v287 = v434;
  *((_QWORD *)&v478 + 1) = v433;
  v479 = v434;
  v288 = sub_10027EE68();
  v289 = v270;
  v200 = v450;
  v290 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v475, &type metadata for TSID, v288);
  v292 = v443;
  if (v200)
  {
    sub_100007F78(v439, v411);
    swift_release(v286);
    sub_100007F78((uint64_t)v88, v90);
    swift_bridgeObjectRelease(v446);
    sub_100007F78(v292, v440);
    swift_bridgeObjectRelease(v289);
    v407(v438, v437);
    swift_release(v452);
    swift_bridgeObjectRelease(v287);
    swift_bridgeObjectRelease(v289);
    v202 = swift_bridgeObjectRelease(v442);
    goto LABEL_31;
  }
  v293 = v290;
  v294 = v286;
  v295 = v291;
  swift_release(v294);
  v296 = sub_100004828(&qword_100634078);
  v297 = (_QWORD *)swift_allocObject(v296, 48, 7);
  *((_OWORD *)v297 + 1) = xmmword_10051FFB0;
  v297[4] = v293;
  v297[5] = v295;
  v406 = v293;
  v435 = v295;
  sub_100022948(v293, v295);
  if (qword_10062F560 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  v444 = v88;
  v404 = objc_msgSend((id)objc_opt_self(DIPMobileKeyBag), "deviceLockState");
  v299 = v429;
  v298 = v430;
  v300 = v408;
  v301 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v429 + 48))(v408, 1, v430);
  v302 = (uint64_t)v442;
  if (v301)
  {
    v303 = 0;
    v304 = 0;
  }
  else
  {
    v405 = v297;
    v450 = 0;
    v305 = v90;
    v306 = v417;
    (*(void (**)(char *, uint64_t, uint64_t))(v299 + 16))(v417, v300, v298);
    JWSSignedJSON.payload.getter(v298);
    (*(void (**)(char *, uint64_t))(v299 + 8))(v306, v298);
    v307 = v475;
    v308 = v476;
    v309 = v477;
    v310 = v478;
    v311 = (uint64_t)v479;
    v303 = v480;
    v304 = v481;
    v429 = v483;
    v430 = v482;
    v417 = v484;
    sub_1001AD7A0(v475, v476, v477, v478, *((uint64_t *)&v478 + 1), (uint64_t)v479, v480, (uint64_t)v481);
    sub_1001849FC(v307, v308, v309, v310, *((uint64_t *)&v310 + 1), v311, v303, (uint64_t)v304);
    swift_bridgeObjectRelease(v417);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v430);
    if (v308)
    {
      swift_bridgeObjectRetain(v304);
      sub_1001849FC(v307, v308, v309, v310, *((uint64_t *)&v310 + 1), v311, v303, (uint64_t)v304);
    }
    else
    {
      v303 = 0;
      v304 = 0;
    }
    v7 = v453;
    v84 = v456;
    v90 = v305;
    v200 = v450;
    v302 = (uint64_t)v442;
    v297 = v405;
  }
  v312 = v431;
  v313 = v303;
  v314 = v446;
  sub_10026B680(v431, v432, v313, v304, v436, v302, v409, v446);
  if (!v200)
  {
    swift_bridgeObjectRelease(v304);
    v315 = v418;
    sub_100038B24(v312, v418, &qword_10063A6C8);
    v316 = sub_100004828(&qword_1006385E0);
    v317 = *(_QWORD *)(v316 - 8);
    v318 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v317 + 48))(v315, 1, v316);
    v441 = v90;
    if (v318 != 1)
    {
      v321 = v315;
      v322 = EncryptedDataContainer.data.getter(v316);
      v324 = v323;
      v325 = (*(uint64_t (**)(uint64_t, uint64_t))(v317 + 8))(v321, v316);
      if (!v324)
        goto LABEL_88;
      v326 = v414;
      static String.Encoding.utf8.getter(v325);
      countAndFlagsBits = String.data(using:allowLossyConversion:)(v326, 0, v322, v324);
      v329 = v328;
      swift_bridgeObjectRelease(v324);
      v330 = *(void (**)(char *, _QWORD *))(v413 + 8);
      v330(v326, v415);
      if (v329 >> 60 == 15)
        goto LABEL_87;
      v320 = v432;
      v331 = v412;
      sub_100038B24(v432, v412, &qword_10063A7B8);
      v332 = sub_100004828(&qword_10063A7D8);
      v333 = *(_QWORD *)(v332 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v333 + 48))(v331, 1, v332) == 1)
      {
        sub_100007F78(countAndFlagsBits, v329);
        sub_100008030(v331, &qword_10063A7B8);
        v7 = v453;
        goto LABEL_89;
      }
      v334 = EncryptedDataContainer.data.getter(v332);
      v335 = v331;
      v337 = v336;
      v338 = (*(uint64_t (**)(uint64_t, uint64_t))(v333 + 8))(v335, v332);
      if (v337)
      {
        v339 = v414;
        static String.Encoding.utf8.getter(v338);
        v340 = String.data(using:allowLossyConversion:)(v339, 0, v334, v337);
        object = v341;
        swift_bridgeObjectRelease(v337);
        v330(v339, v415);
        if (object >> 60 != 15)
        {
          sub_100022948(countAndFlagsBits, v329);
          v346 = v297[2];
          v345 = v297[3];
          v347 = v346 + 1;
          if (v346 < v345 >> 1)
            goto LABEL_83;
          goto LABEL_110;
        }
      }
      v343 = countAndFlagsBits;
      v344 = v329;
      goto LABEL_86;
    }
    v319 = v312;
    sub_100008030(v315, &qword_10063A6C8);
    v320 = v432;
    while (1)
    {
      v405 = v297;
      v450 = v200;
      v352 = (unint64_t)v404 - 1;
      if (qword_10062F4B0 != -1)
        swift_once(&qword_10062F4B0, sub_1001A5E1C);
      v429 = *(_QWORD *)(v7 + 32);
      v430 = qword_1006702E0;
      v418 = *(_QWORD *)(v7 + 40);
      LODWORD(v417) = *(unsigned __int8 *)(v7 + 208);
      v415 = *(_QWORD **)(v7 + 368);
      sub_100038B24(v319, v426, &qword_10063A6C8);
      sub_100038B24(v320, v427, &qword_10063A7B8);
      v353 = *(unsigned __int8 *)(v419 + 80);
      v354 = (v353 + 64) & ~v353;
      v355 = *(unsigned __int8 *)(v421 + 80);
      v356 = (v420 + v355 + v354) & ~v355;
      v357 = (char *)v422 + v356;
      v358 = ((unint64_t)v422 + v356) & 0xFFFFFFFFFFFFFFF8;
      v359 = (v358 + 63) & 0xFFFFFFFFFFFFFFF8;
      v360 = swift_allocObject(&unk_10060CBF0, v359 + 57, v353 | v355 | 7);
      *(_QWORD *)(v360 + 16) = v453;
      v361 = (_QWORD *)(v358 + v360);
      *(_BYTE *)(v360 + 24) = v352 < 2;
      v362 = v452;
      v422 = (_QWORD *)v352;
      v363 = v410;
      *(_QWORD *)(v360 + 32) = v452;
      *(_QWORD *)(v360 + 40) = v363;
      v364 = v360 + v354;
      v7 = v453;
      v365 = v447;
      v366 = v428;
      *(_QWORD *)(v360 + 48) = v447;
      *(_QWORD *)(v360 + 56) = v366;
      sub_1000A1F54(v426, v364, &qword_10063A6C8);
      sub_1000A1F54(v427, v360 + v356, &qword_10063A7B8);
      v357[v360] = v423 & 1;
      v367 = v442;
      v361[1] = v436;
      v361[2] = v367;
      v361[3] = v363;
      v361[4] = v365;
      v368 = v434;
      v361[5] = v433;
      v361[6] = v368;
      v369 = v424;
      sub_1000A1F54((uint64_t)v424, v360 + v359, &qword_10063A880);
      swift_retain(v7);
      v447 = v365;
      swift_bridgeObjectRetain(v365);
      swift_bridgeObjectRetain(v368);
      swift_retain(v430);
      v370 = v443;
      v371 = v440;
      sub_100028034(v443, v440);
      v433 = v415;
      swift_retain(v362);
      v372 = v428;
      swift_bridgeObjectRetain(v428);
      swift_bridgeObjectRetain(v367);
      sub_10027F754(v369);
      v373 = v444;
      v374 = v370;
      v375 = v371;
      v376 = (uint64_t)v405;
      v377 = v439;
      v378 = v411;
      v200 = v450;
      sub_1001A62EC((uint64_t)v444, v441, v374, v375, v372, (uint64_t)v405, v439, v411, &v486, v429, v418, v417);
      if (v200)
      {
        sub_100007F78(v377, v378);
        swift_bridgeObjectRelease(v376);

        v379 = v443;
        v380 = v440;
        sub_100007F78(v443, v440);
        swift_release(v360);
        swift_release(v430);
        sub_100007F78((uint64_t)v373, v441);
        swift_bridgeObjectRelease(v434);
        swift_bridgeObjectRelease(v447);
        swift_bridgeObjectRelease(v442);
        swift_bridgeObjectRelease(v446);
        sub_100007F78(v379, v380);
        sub_100007F8C(v406, v435);
        sub_100008030(v432, &qword_10063A7B8);
        sub_100008030(v431, &qword_10063A6C8);
        v407(v438, v437);
        v202 = swift_release(v452);
        v84 = v456;
        goto LABEL_31;
      }
      v297 = v422;
      swift_bridgeObjectRelease(v376);

      sub_100007F78(v443, v440);
      swift_release(v360);
      swift_release(v430);
      v381 = Data.base64EncodedString(options:)(0);
      countAndFlagsBits = v381._countAndFlagsBits;
      object = (unint64_t)v381._object;
      v382 = 0;
      v383 = v488;
      if (v488 >> 60 != 15)
      {
        v384 = v487;
        sub_100022948(v487, v488);
        v385 = Data.base64EncodedString(options:)(0);
        v200 = (uint8_t *)v385._countAndFlagsBits;
        v382 = v385._object;
        sub_100007F78(v384, v383);
      }
      *(_QWORD *)&v455 = v382;
      v456 = (uint64_t)v200;
      sub_100038B24(v454, (uint64_t)v474, &qword_100636670);
      v340 = v431;
      v200 = v444;
      v346 = v439;
      v347 = v409;
      if (v474[3])
      {
        v386 = sub_100004828(&qword_100638CA0);
        v387 = swift_dynamicCast(v468, v474, v386, &type metadata for DIPClientGUID, 6);
        v329 = v446;
        if (v387)
        {
          v464 = v471;
          v465 = v472;
          v466 = v473;
          v460 = v468[2];
          v461 = v468[3];
          v462 = v469;
          v463 = v470;
          v458 = v468[0];
          v459 = v468[1];
          nullsub_7(&v458);
        }
        else
        {
          sub_1002113CC((uint64_t)&v458);
        }
        sub_1000A1F54((uint64_t)&v458, (uint64_t)&v475, &qword_100638C90);
      }
      else
      {
        sub_100008030((uint64_t)v474, &qword_100636670);
        sub_1002113CC((uint64_t)v468);
        sub_1000A1F54((uint64_t)v468, (uint64_t)&v475, &qword_100638C90);
        v329 = v446;
      }
      v345 = v489;
      if (v489 != -1)
        break;
      __break(1u);
LABEL_110:
      v297 = sub_1000E2CA4((_QWORD *)(v345 > 1), v347, 1, v297);
LABEL_83:
      v297[2] = v347;
      v348 = &v297[2 * v346];
      v348[4] = countAndFlagsBits;
      v348[5] = v329;
      sub_100022948(v340, object);
      v349 = v297[3];
      v350 = v346 + 2;
      if (v350 > (uint64_t)(v349 >> 1))
        v297 = sub_1000E2CA4((_QWORD *)(v349 > 1), v350, 1, v297);
      v297[2] = v350;
      v351 = &v297[2 * v347];
      v351[4] = v340;
      v351[5] = object;
      sub_100007F78(countAndFlagsBits, v329);
      v343 = v340;
      v344 = object;
LABEL_86:
      sub_100007F78(v343, v344);
LABEL_87:
      v7 = v453;
LABEL_88:
      v320 = v432;
LABEL_89:
      v319 = v431;
    }
    v450 = (uint8_t *)v381._object;
    v454 = v381._countAndFlagsBits;
    sub_100270744(0, (unint64_t)v297 < 2, v340, v489 + 1, v416);
    *((_QWORD *)&v459 + 1) = &type metadata for String;
    *(_QWORD *)&v460 = &off_10060B728;
    *(_QWORD *)&v458 = v347;
    *((_QWORD *)&v458 + 1) = v329;
    sub_1000A1F54((uint64_t)&v475, (uint64_t)v468, &qword_100638C90);
    if (sub_1002113B4((uint64_t)v468) == 1)
    {
      v388 = v442;
      swift_bridgeObjectRetain(v442);
      sub_100007F78(v346, v411);
      sub_100007F78((uint64_t)v200, v441);
      swift_bridgeObjectRelease(v434);
      swift_bridgeObjectRelease(v447);
      swift_bridgeObjectRelease(v388);
      v453 = 0;
      v389 = 0;
      v448 = 0;
      v390 = 0;
      v446 = 0;
      v391 = 0;
      v392 = 0;
      v393 = 0;
    }
    else
    {
      v394 = 49;
      if (LOBYTE(v468[0]))
        v394 = 50;
      v453 = v394;
      v448 = (char *)*((_QWORD *)&v469 + 1);
      v446 = *((_QWORD *)&v470 + 1);
      v390 = v470;
      v392 = *((_QWORD *)&v471 + 1);
      v391 = v471;
      v393 = v472;
      v388 = v442;
      swift_bridgeObjectRetain(v442);
      swift_bridgeObjectRetain(v390);
      swift_bridgeObjectRetain(v391);
      swift_bridgeObjectRetain(v393);
      sub_100007F78(v346, v411);
      sub_100007F78((uint64_t)v200, v441);
      sub_10027FC1C(&v475);
      swift_bridgeObjectRelease(v434);
      swift_bridgeObjectRelease(v447);
      swift_bridgeObjectRelease(v388);
      v389 = 0xE100000000000000;
    }
    sub_10027EEAC((uint64_t *)&v486, (void (*)(uint64_t, uint64_t))sub_100007F78, (void (*)(uint64_t, uint64_t))sub_100007F8C);
    sub_100007F78(v443, v440);
    sub_100007F8C(v406, v435);
    sub_100008030(v432, &qword_10063A7B8);
    sub_100008030(v431, &qword_10063A6C8);
    v407(v438, v437);
    v395 = v408;
    swift_beginAccess(v408, &v467, 0, 0);
    v396 = (uint64_t *)(v395 + *(int *)(v451 + 28));
    v398 = *v396;
    v397 = v396[1];
    v399 = v449;
    sub_1000A1F54((uint64_t)&v458, v449, &qword_100636670);
    *(_QWORD *)(v399 + 40) = v436;
    *(_QWORD *)(v399 + 48) = v388;
    v400 = v450;
    *(_QWORD *)(v399 + 56) = v454;
    *(_QWORD *)(v399 + 64) = v400;
    v401 = v455;
    *(_QWORD *)(v399 + 72) = v456;
    *(_QWORD *)(v399 + 80) = v401;
    *(_OWORD *)(v399 + 88) = 0u;
    *(_OWORD *)(v399 + 104) = 0u;
    *(_QWORD *)(v399 + 128) = 0;
    *(_QWORD *)(v399 + 136) = 0;
    *(_QWORD *)(v399 + 120) = 1;
    *(_BYTE *)(v399 + 144) = 0;
    *(_QWORD *)(v399 + 152) = v453;
    *(_QWORD *)(v399 + 160) = v389;
    *(_QWORD *)(v399 + 168) = v448;
    *(_QWORD *)(v399 + 176) = v390;
    *(_QWORD *)(v399 + 184) = v446;
    *(_QWORD *)(v399 + 192) = v391;
    *(_QWORD *)(v399 + 200) = v392;
    *(_QWORD *)(v399 + 208) = v393;
    *(_QWORD *)(v399 + 216) = v398;
    *(_QWORD *)(v399 + 224) = v397;
    v402 = type metadata accessor for ODNAssessmentResult(0);
    sub_1000A1F54(v416, v399 + *(int *)(v402 + 44), &qword_100636698);
    v158 = v397;
    goto LABEL_17;
  }
  sub_100007F78(v439, v411);
  swift_bridgeObjectRelease(v304);
  sub_100007F78((uint64_t)v444, v90);
  swift_bridgeObjectRelease(v434);
  swift_bridgeObjectRelease_n(v447, 2);
  swift_bridgeObjectRelease(v302);
  swift_bridgeObjectRelease(v314);
  sub_100007F78(v443, v440);
  sub_100007F8C(v406, v435);
  swift_bridgeObjectRelease(v297);
  v407(v438, v437);
  v201 = v452;
LABEL_30:
  v202 = swift_release(v201);
LABEL_31:
  v203 = v445;
  defaultLogger()(v202);
  swift_errorRetain(v200);
  v204 = swift_errorRetain(v200);
  v205 = Logger.logObject.getter(v204);
  v206 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v205, v206))
  {
    v207 = (uint8_t *)swift_slowAlloc(12, -1);
    v208 = swift_slowAlloc(32, -1);
    v475 = v208;
    *(_DWORD *)v207 = 136446210;
    *(_QWORD *)&v468[0] = v200;
    swift_errorRetain(v200);
    v209 = sub_100004828((uint64_t *)&unk_100633430);
    v210 = String.init<A>(reflecting:)(v468, v209);
    v212 = v211;
    *(_QWORD *)&v468[0] = sub_1000E3AC8(v210, v211, &v475);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v468, (char *)v468 + 8, v207 + 4);
    v213 = v212;
    v7 = v453;
    swift_bridgeObjectRelease(v213);
    swift_errorRelease(v200);
    swift_errorRelease(v200);
    _os_log_impl((void *)&_mh_execute_header, v205, v206, "ignoring failed to generate assessment data. error %{public}s", v207, 0xCu);
    swift_arrayDestroy(v208, 1, (char *)&type metadata for Any + 8);
    v214 = v208;
    v84 = v456;
    swift_slowDealloc(v214, -1, -1);
    swift_slowDealloc(v207, -1, -1);

    v215 = v445;
  }
  else
  {
    swift_errorRelease(v200);
    swift_errorRelease(v200);

    v215 = v203;
  }
  v216 = (void (*)(char *, uint64_t))v455;
  v217 = ((uint64_t (*)(char *, uint64_t))v455)(v215, v84);
  v218 = v448;
  defaultLogger()(v217);
  DIPRecordError(_:message:log:)(v200, 0, 0xE000000000000000, v218);
  v216(v218, v84);
  sub_1002659F0((uint64_t)v200, 2, (uint64_t)&v475);
  v456 = v475;
  v219 = v476;
  v220 = v477;
  v455 = v478;
  v221 = (uint64_t)v479;
  v222 = v480;
  v223 = v7;
  v224 = (char)v481;
  swift_errorRelease(v200);
  swift_beginAccess(v223 + 216, v468, 0, 0);
  v225 = v449;
  sub_100038B24(v223 + 216, v449, &qword_100636670);
  v226 = v223 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId;
  v227 = *(_QWORD *)(v223 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  v190 = *(_QWORD *)(v226 + 8);
  v228 = v225 + *(int *)(type metadata accessor for ODNAssessmentResult(0) + 44);
  v229 = type metadata accessor for AssessmentAdditionalInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v229 - 8) + 56))(v228, 1, 1, v229);
  *(_OWORD *)(v225 + 72) = 0u;
  *(_OWORD *)(v225 + 56) = 0u;
  *(_OWORD *)(v225 + 40) = 0u;
  *(_QWORD *)(v225 + 88) = v456;
  *(_QWORD *)(v225 + 96) = v219;
  *(_QWORD *)(v225 + 104) = v220;
  *(_OWORD *)(v225 + 112) = v455;
  *(_QWORD *)(v225 + 128) = v221;
  *(_QWORD *)(v225 + 136) = v222;
  *(_BYTE *)(v225 + 144) = v224;
  *(_OWORD *)(v225 + 152) = 0u;
  *(_OWORD *)(v225 + 168) = 0u;
  *(_OWORD *)(v225 + 184) = 0u;
  *(_OWORD *)(v225 + 200) = 0u;
  *(_QWORD *)(v225 + 216) = v227;
  *(_QWORD *)(v225 + 224) = v190;
LABEL_35:
  *(_QWORD *)&result = swift_bridgeObjectRetain(v190).n128_u64[0];
  return result;
}

uint64_t sub_10026B564(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10026B57C, 0, 0);
}

uint64_t sub_10026B57C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1006446AC);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_10026B5C8;
  return sub_1004F92EC();
}

uint64_t sub_10026B5C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10026B624, 0, 0);
}

uint64_t sub_10026B624()
{
  uint64_t v0;

  *(_OWORD *)*(_QWORD *)(v0 + 16) = *(_OWORD *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026B638()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100639E44);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100007EE8;
  return sub_10026CC40();
}

void sub_10026B680(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  Swift::String v28;
  SecCertificateRef v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  SecCertificateRef v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(_BYTE *, _QWORD, uint64_t);
  _BYTE *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  SecCertificateRef v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD);
  _BYTE *v55;
  uint64_t v56;
  __SecCertificate *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  __SecCertificate *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[4];
  unsigned int v76;
  void (*v77)(_BYTE *, _QWORD, uint64_t);
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];
  uint64_t v97;
  void *v98;
  uint64_t v99;

  v79 = a8;
  v78 = a7;
  v82 = a5;
  v99 = a3;
  v88 = a1;
  v89 = a2;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v75[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for DIPError.Code(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v85 = &v75[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_100004828(&qword_10063A7D8);
  v86 = *(_QWORD *)(v17 - 8);
  v87 = v17;
  __chkstk_darwin(v17);
  v80 = &v75[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v83 = type metadata accessor for EncryptionParamsAlgorithmIdentifier(0);
  v19 = *(_QWORD *)(v83 - 8);
  v20 = __chkstk_darwin(v83);
  v81 = &v75[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v84 = &v75[-v22];
  v23 = sub_100004828(&qword_1006385E0);
  v90 = *(_QWORD *)(v23 - 8);
  v91 = v23;
  v24 = __chkstk_darwin(v23);
  v26 = &v75[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a4)
  {
    v31 = defaultLogger()(v24);
    v32 = Logger.logObject.getter(v31);
    v34 = static os_log_type_t.info.getter(v32, v33);
    if (os_log_type_enabled(v32, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v34, "No tsidEnc cert provided, skipping encryption and sending nil", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    v36 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v88, 1, 1, v91);
    v37 = v89;
    v39 = v86;
    v38 = v87;
    goto LABEL_7;
  }
  v27 = v26;
  swift_bridgeObjectRetain(a6);
  v28._countAndFlagsBits = v99;
  v28._object = a4;
  v29 = createCertificateFromString(_:)(v28);
  if (v30)
  {
    swift_bridgeObjectRelease(a6);
    return;
  }
  v40 = v29;
  v41 = copyPublicKeyDataFromCertificate(_:)();
  if (v42 >> 60 != 15)
  {
    v49 = v42;
    v50 = v40;
    v51 = v41;
    v99 = a6;
    v52 = type metadata accessor for DIPECIESSessionECV3SH(0);
    swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
    v53 = DIPECIESSessionECV3SH.init(_:)(0);
    v54 = *(void (**)(_QWORD))(v19 + 104);
    v76 = enum case for EncryptionParamsAlgorithmIdentifier.EC_v3_SH(_:);
    v77 = (void (*)(_BYTE *, _QWORD, uint64_t))v54;
    v54(v84);
    v97 = v52;
    v98 = &protocol witness table for DIPECIESSessionECV3;
    v96[0] = v53;
    v55 = (_BYTE *)v53;
    v56 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
    v85 = v55;
    swift_retain(v55);
    v57 = v50;
    v58 = __DataStorage.init(length:)(65);
    v92 = 49;
    v93 = 0xE100000000000000;
    v59 = v58 | 0x4000000000000000;
    v94 = v82;
    v95 = v99;
    sub_100022948(v51, v49);
    v60 = sub_10027EF34();
    v61 = sub_10027EF78();
    v62 = v59;
    v63 = v51;
    EncryptedDataContainer.init(alg:encryptor:remoteCertificate:senderSigningKey:recipientSigningKey:data:)(v84, v96, v57, 0x4100000000, v62, v51, v49, &v92, &type metadata for TrainingSignalId, v60, v61);
    v77(v81, v76, v83);
    v97 = v52;
    v98 = &protocol witness table for DIPECIESSessionECV3;
    v64 = v85;
    v96[0] = v85;
    swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
    v65 = v57;
    v66 = v63;
    swift_retain(v64);
    v67 = v79;
    swift_bridgeObjectRetain(v79);
    v68 = __DataStorage.init(length:)(65) | 0x4000000000000000;
    v92 = 49;
    v93 = 0xE100000000000000;
    v94 = v78;
    v95 = v67;
    v69 = sub_10027EFBC();
    v70 = sub_10027F000();
    v71 = v80;
    EncryptedDataContainer.init(alg:encryptor:remoteCertificate:senderSigningKey:recipientSigningKey:data:)(v81, v96, v65, 0x4100000000, v68, v66, v49, &v92, &type metadata for AssessmentGUIDContainer, v69, v70);
    swift_release(v85);
    v73 = v90;
    v72 = v91;
    v74 = v88;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v90 + 32))(v88, v27, v91);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v74, 0, 1, v72);
    v39 = v86;
    v38 = v87;
    v37 = v89;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v86 + 32))(v89, v71, v87);
    v36 = 0;
LABEL_7:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v37, v36, 1, v38);
    return;
  }
  swift_bridgeObjectRelease(a6);
  v43 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v15 + 104);
  v44 = v85;
  v43(v85, enum case for DIPError.Code.certificateDecodingFailed(_:), v14);
  v45 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v46 = type metadata accessor for DIPError(0);
  v47 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v46, v47, 0, 0);
  v48 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x8000000100558C70, 0, v44, 0, v45, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD00000000000004BLL, 0x8000000100558CB0, 1007);
  swift_willThrow(v48);

}

void sub_10026BD20(uint64_t a1, int a2, uint64_t a3, char *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t *a13, uint64_t a14)
{
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  char *v59;
  uint8_t *v60;
  uint8_t *v61;
  uint64_t (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  char *v70;
  uint8_t *v71;
  uint8_t *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  void *v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(void);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t countAndFlagsBits;
  void (**object)(_QWORD, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  Swift::String v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  NSObject *v162;
  os_log_type_t v163;
  uint8_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (**v189)(_QWORD, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void (*v208)(uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  _QWORD v211[2];
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 v217;
  _QWORD v218[8];
  _QWORD v219[7];
  unsigned __int8 v220;
  _QWORD v221[8];
  _QWORD v222[6];
  unsigned int v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235[6];
  uint64_t v236[7];
  char v237;

  v175 = a7;
  v176 = a8;
  LODWORD(v207) = a5;
  LODWORD(v17) = a2;
  v19 = *a13;
  v194 = a13[1];
  v195 = v19;
  v20 = a13[2];
  v192 = a13[3];
  v193 = v20;
  v21 = a13[4];
  v196 = a13[5];
  v197 = v21;
  v191 = a14;
  sub_1000A1F54(a14, (uint64_t)v219, &qword_10063A880);
  v183 = v219[1];
  v184 = v219[0];
  v181 = v219[3];
  v182 = v219[2];
  v179 = v219[5];
  v180 = v219[4];
  v178 = v219[6];
  v177 = v220;
  v199 = a1;
  sub_1000A1F54(a1, (uint64_t)v218, &qword_10063A820);
  v168 = v218[1];
  v169 = v218[0];
  v170 = v218[3];
  v171 = v218[2];
  v172 = v218[5];
  v173 = v218[4];
  v22 = sub_100004828(&qword_10063A7B0);
  __chkstk_darwin(v22);
  v174 = (uint64_t)&v165 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DIPError.Code(0);
  v185 = *(_QWORD *)(v24 - 8);
  v186 = v24;
  __chkstk_darwin(v24);
  v187 = (uint64_t)&v165 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DIPError(0);
  v189 = *(void (***)(_QWORD, uint64_t, uint64_t))(v26 - 8);
  v190 = v26;
  __chkstk_darwin(v26);
  v188 = (uint64_t)&v165 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100004828(&qword_100636668);
  __chkstk_darwin(v28);
  v206 = (uint64_t)&v165 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100004828(&qword_10063A7B8);
  __chkstk_darwin(v30);
  v32 = (char *)&v165 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100004828(&qword_10063A6C8);
  v166 = *(_QWORD *)(v33 - 8);
  v167 = v33;
  __chkstk_darwin(v33);
  v202 = (uint64_t)&v165 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = type metadata accessor for Logger(0);
  v35 = *(_QWORD *)(v209 - 8);
  v36 = __chkstk_darwin(v209);
  v200 = (char *)&v165 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v36);
  v203 = (uint64_t)&v165 - v39;
  v40 = __chkstk_darwin(v38);
  v201 = (char *)&v165 - v41;
  v42 = __chkstk_darwin(v40);
  v198 = (uint64_t)&v165 - v43;
  v44 = __chkstk_darwin(v42);
  v46 = (char *)&v165 - v45;
  v47 = __chkstk_darwin(v44);
  v49 = (char *)&v165 - v48;
  __chkstk_darwin(v47);
  v51 = (char *)&v165 - v50;
  v204 = type metadata accessor for AugmentedProfile(0);
  v52 = swift_projectBox(a6);
  v205 = v52;
  if ((v17 & 1) != 0)
  {
    v53 = defaultLogger()(v52);
    v54 = Logger.logObject.getter(v53);
    v56 = static os_log_type_t.info.getter(v54, v55);
    if (os_log_type_enabled(v54, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      LODWORD(v208) = (_DWORD)v17;
      v17 = v32;
      v58 = a3;
      v59 = a4;
      v60 = v57;
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v56, "odn callback called (completed in time)", v57, 2u);
      v61 = v60;
      a4 = v59;
      a3 = v58;
      v32 = v17;
      LOBYTE(v17) = (_BYTE)v208;
      swift_slowDealloc(v61, -1, -1);
    }

    v62 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
    v63 = v62(v51, v209);
  }
  else
  {
    v64 = defaultLogger()(v52);
    v65 = Logger.logObject.getter(v64);
    v67 = static os_log_type_t.info.getter(v65, v66);
    if (os_log_type_enabled(v65, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(2, -1);
      LODWORD(v208) = (_DWORD)v17;
      v17 = v32;
      v69 = a3;
      v70 = a4;
      v71 = v68;
      *(_WORD *)v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v67, "odn callback called (completed late)", v68, 2u);
      v72 = v71;
      a4 = v70;
      a3 = v69;
      v32 = v17;
      LOBYTE(v17) = (_BYTE)v208;
      swift_slowDealloc(v72, -1, -1);
    }

    v62 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
    v63 = v62(v49, v209);
  }
  v208 = (void (*)(uint64_t, uint64_t))v62;
  if (a3)
  {
    swift_errorRetain(a3);
    v200 = a4;
    v73 = sub_1002659F0(a3, 2, (uint64_t)&v227);
    v74 = v227;
    v75 = v228;
    v76 = *((_QWORD *)&v228 + 1);
    v199 = *((_QWORD *)&v229 + 1);
    v77 = v229;
    v197 = v230;
    LODWORD(v196) = BYTE8(v230);
    if ((v17 & 1) != 0)
    {
      v198 = v228;
      v78 = (uint64_t)v201;
      v79 = defaultLogger()(v73);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.debug.getter(v80);
      if (os_log_type_enabled(v80, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v82 = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "odn callback received an error but completed in time; not logging the error separately",
          v82,
          2u);
        v83 = v82;
        v78 = (uint64_t)v201;
        swift_slowDealloc(v83, -1, -1);
      }

      v84 = v209;
      v85 = v204;
      v75 = v198;
    }
    else
    {
      v78 = v198;
      defaultLogger()(v73);
      DIPRecordError(_:message:log:)(a3, 0xD000000000000024, 0x8000000100559580, v78);
      v84 = v209;
      v85 = v204;
    }
    v94 = v78;
    v95 = v208;
    v208(v94, v84);
    v225 = 0u;
    v226 = 0u;
    v224 = 0u;
    v231 = v74;
    *(_QWORD *)&v232 = v75;
    *((_QWORD *)&v232 + 1) = v76;
    *(_QWORD *)&v233 = v77;
    *((_QWORD *)&v233 + 1) = v199;
    *(_QWORD *)&v234 = v197;
    BYTE8(v234) = v196;
    v96 = sub_100004828(&qword_1006385E0);
    v97 = v202;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v202, 1, 1, v96);
    v98 = sub_100004828(&qword_10063A7D8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v32, 1, 1, v98);
    v99 = (uint64_t)v32;
    v100 = v205;
    swift_beginAccess(v205, v222, 0, 0);
    v101 = v100;
    v102 = v206;
    sub_100035DE8(v101, v206, type metadata accessor for AugmentedProfile);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v102, 0, 1, v85);
    v103 = v200;
    sub_10026DEE0(0, 0, (uint64_t *)&v224, 0, 0, -1, (uint64_t *)&v231, v207 & 1, v97, 0, 1, v99, 0, 1, v102, 0, 1u);
    sub_10027FD04((uint64_t)&v227);
    swift_errorRelease(a3);
    sub_100008030(v102, &qword_100636668);
    sub_100008030(v99, &qword_10063A7B8);
    v104 = sub_100008030(v97, &qword_10063A6C8);
    v105 = v203;
    v106 = defaultLogger()(v104);
    v107 = Logger.logObject.getter(v106);
    v108 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v107, v108))
    {
      v109 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "signaling shareTimeSemaphore because we are done", v109, 2u);
      swift_slowDealloc(v109, -1, -1);
    }

    v95(v105, v209);
    v110 = (void *)*((_QWORD *)v103 + 47);
    if (v110)
    {
LABEL_21:
      v111 = v110;
      OS_dispatch_semaphore.signal()();

    }
  }
  else
  {
    v86 = defaultLogger()(v63);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.debug.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v89 = 0;
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "assessments retrieved", v89, 2u);
      swift_slowDealloc(v89, -1, -1);
    }

    v90 = v46;
    v91 = v209;
    v62(v90, v209);
    if ((v17 & 1) != 0)
    {
      v186 = 0;
      v187 = 0;
      v92 = 0;
      v93 = 0;
      v202 = 0;
      v203 = 0;
      LODWORD(v201) = 0;
      v198 = 1;
    }
    else
    {
      v112 = sub_100004828((uint64_t *)&unk_1006325A0);
      v113 = sub_100004828((uint64_t *)&unk_100633440);
      v114 = *(_QWORD *)(v113 - 8);
      v115 = *(_QWORD *)(v114 + 72);
      v116 = *(unsigned __int8 *)(v114 + 80);
      v117 = (v116 + 32) & ~v116;
      v118 = swift_allocObject(v112, v117 + 2 * v115, v116 | 7);
      *(_OWORD *)(v118 + 16) = xmmword_1005208D0;
      v119 = v118 + v117;
      v120 = a4;
      v121 = (_QWORD *)(v119 + *(int *)(v113 + 48));
      v122 = enum case for DIPError.PropertyKey.spWorkflowID(_:);
      v123 = type metadata accessor for DIPError.PropertyKey(0);
      v124 = *(void (**)(void))(*(_QWORD *)(v123 - 8) + 104);
      ((void (*)(uint64_t, uint64_t, uint64_t))v124)(v119, v122, v123);
      v125 = *((_QWORD *)v120 + 4);
      v126 = *((_QWORD *)v120 + 5);
      v121[3] = &type metadata for String;
      *v121 = v125;
      v121[1] = v126;
      a4 = v120;
      v127 = v119 + v115 + *(int *)(v113 + 48);
      v91 = v209;
      v124();
      v62 = (uint64_t (*)(char *, uint64_t))v208;
      v128 = v120[208];
      *(_QWORD *)(v127 + 24) = &type metadata for DIPState;
      *(_BYTE *)v127 = v128;
      swift_bridgeObjectRetain(v126);
      v129 = sub_10011D314(v118);
      v130 = v187;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v185 + 104))(v187, enum case for DIPError.Code.odnTimeout(_:), v186);
      v131 = v188;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x656D6974204E444FLL, 0xEB0000000074756FLL, 0, v130, 0, v129, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD000000000000070, 0x8000000100559500, 610);
      v132 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v133 = v190;
      v134 = swift_allocError(v190, v132, 0, 0);
      v135 = (uint64_t)v189;
      v189[2](v136, v131, v133);
      sub_1002659F0(v134, 2, (uint64_t)v211);
      v92 = v211[1];
      v93 = v212;
      v186 = v211[0];
      v187 = v213;
      v198 = v214;
      v202 = v216;
      v203 = v215;
      LODWORD(v201) = v217;
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v131, v133);
      swift_errorRelease(v134);
    }
    v137 = v199;
    v190 = a11;
    v199 = a10;
    if (a4[184] == 1)
    {
      sub_1000A1F54(v137, (uint64_t)&v227, &qword_10063A820);
      if (*((_QWORD *)&v228 + 1) >> 60 != 15)
      {
        v231 = v227;
        v232 = v228;
        v233 = v229;
        v234 = v230;
        v138 = v174;
        sub_100038B24(v199, v174, &qword_10063A6C8);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v166 + 56))(v138, 0, 1, v167);
        sub_100028034(v169, v168);
        sub_100022948(v171, v170);
        sub_100028034(v173, v172);
        sub_10026D984(v175, v176, (uint64_t *)&v231, v207 & 1, a9, v138, v190);
        sub_10027F1CC(v137, (void (*)(void))sub_100007F78, (void (*)(uint64_t, unint64_t))sub_100007F8C);
        sub_100008030(v138, &qword_10063A7B0);
      }
    }
    if ((a12 & 1) != 0)
    {
      sub_1000A1F54(v137, (uint64_t)&v224, &qword_10063A820);
      v139 = v187;
      if (*((_QWORD *)&v225 + 1) >> 60 == 15)
      {
        countAndFlagsBits = 0;
        object = 0;
      }
      else
      {
        v144 = Data.base64EncodedString(options:)(0);
        object = (void (**)(_QWORD, uint64_t, uint64_t))v144._object;
        countAndFlagsBits = v144._countAndFlagsBits;
      }
      v188 = countAndFlagsBits;
      v189 = object;
      v145 = v93;
      v146 = v92;
      v147 = a4[208] != 9;
      LODWORD(v185) = v207 & 1;
      v176 = sub_10027B84C(v137, v147, v185);
      v207 = v148;
      sub_1000A1F54(v137, (uint64_t)v222, &qword_10063A820);
      if (v222[3] >> 60 == 15)
        v149 = 0;
      else
        v149 = v223;
      sub_1000A1F54(v191, (uint64_t)v221, &qword_10063A880);
      if (v221[4] == 1)
      {
        v151 = v202;
        v150 = v203;
        v152 = (int)v201;
        v153 = v198;
      }
      else
      {
        v151 = v178;
        swift_bridgeObjectRetain(v178);
        v153 = v180;
        swift_bridgeObjectRetain(v180);
        sub_100183918(v186, v146, v145, v139, v198, v203, v202);
        v146 = v183;
        v186 = v184;
        v139 = v181;
        v145 = v182;
        v150 = v179;
        v152 = v177;
      }
      v198 = v153;
      v187 = v139;
      v202 = v151;
      v203 = v150;
      LODWORD(v201) = v152;
      v154 = v186;
      v236[0] = v186;
      v236[1] = v146;
      v236[2] = v145;
      v236[3] = v139;
      v236[4] = v153;
      v236[5] = v150;
      v236[6] = v151;
      v237 = v152;
      v235[0] = v195;
      v235[1] = v194;
      v235[2] = v193;
      v235[3] = v192;
      v235[4] = v197;
      v235[5] = v196;
      v155 = v205;
      swift_beginAccess(v205, &v210, 0, 0);
      v156 = v206;
      sub_100035DE8(v155, v206, type metadata accessor for AugmentedProfile);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v204 - 8) + 56))(v156, 0, 1);
      v142 = v209;
      v157 = (uint64_t)v189;
      v158 = v207;
      sub_10026DEE0(v188, (uint64_t)v189, v235, v176, v207, v149, v236, v185, v199, v149 + 1, 0, v190, v149 + 2, 0, v156, 0, 0);
      sub_100183918(v154, v146, v145, v187, v198, v203, v202);
      swift_bridgeObjectRelease(v158);
      swift_bridgeObjectRelease(v157);
      v159 = v156;
      v62 = (uint64_t (*)(char *, uint64_t))v208;
      v143 = sub_100008030(v159, &qword_100636668);
    }
    else
    {
      v142 = v91;
      v143 = sub_100183918(v186, v92, v93, v187, v198, v203, v202);
    }
    v160 = v200;
    v161 = defaultLogger()(v143);
    v162 = Logger.logObject.getter(v161);
    v163 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v162, v163))
    {
      v164 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v164 = 0;
      _os_log_impl((void *)&_mh_execute_header, v162, v163, "signaling shareTimeSemaphore because we are done", v164, 2u);
      swift_slowDealloc(v164, -1, -1);
    }

    v62(v160, v142);
    v110 = (void *)*((_QWORD *)a4 + 47);
    if (v110)
      goto LABEL_21;
  }
}

uint64_t sub_10026CC40()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[72] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[73] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[74] = v3;
  v1[75] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10026CCA0, 0, 0);
}

uint64_t sub_10026CCA0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 576) + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory);
  v2 = *v1;
  *(_QWORD *)(v0 + 608) = *v1;
  v3 = v1[1];
  *(_QWORD *)(v0 + 616) = v3;
  v4 = v1[2];
  *(_QWORD *)(v0 + 624) = v4;
  v5 = v1[3];
  *(_QWORD *)(v0 + 632) = v5;
  v6 = v1[4];
  *(_QWORD *)(v0 + 640) = v6;
  v7 = v1[5];
  *(_QWORD *)(v0 + 648) = v7;
  v8 = v1[6];
  *(_QWORD *)(v0 + 656) = v8;
  v9 = v1[7];
  *(_QWORD *)(v0 + 664) = v9;
  v10 = v1[8];
  *(_QWORD *)(v0 + 672) = v10;
  v11 = v1[9];
  *(_QWORD *)(v0 + 680) = v11;
  if (v2)
  {
    *(_QWORD *)(v0 + 288) = v2;
    *(_QWORD *)(v0 + 296) = v3;
    *(_QWORD *)(v0 + 304) = v4;
    *(_QWORD *)(v0 + 312) = v5;
    *(_QWORD *)(v0 + 320) = v6;
    *(_QWORD *)(v0 + 328) = v7;
    *(_QWORD *)(v0 + 336) = v8;
    *(_QWORD *)(v0 + 344) = v9;
    *(_QWORD *)(v0 + 352) = v10;
    *(_QWORD *)(v0 + 360) = v11;
    v12 = dword_100638C9C;
    swift_retain(v3);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    v13 = (_QWORD *)swift_task_alloc(v12);
    *(_QWORD *)(v0 + 688) = v13;
    *v13 = v0;
    v13[1] = sub_10026CED0;
    return sub_10020EDB0(v0 + 152);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 600);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 592) + 104))(v15, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 584));
    v16 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v17 = type metadata accessor for DIPError(0);
    v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v17, v18, 0, 0);
    v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100559480, 0, v15, 0, v16, 0xD00000000000004CLL, 0x8000000100558AE0, 0x65746172656E6567, 0xEF29287344495547, 664);
    swift_willThrow(v19);
    swift_task_dealloc(*(_QWORD *)(v0 + 600));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10026CED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 688);
  *(_QWORD *)(*(_QWORD *)v1 + 696) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10026D854;
  else
    v3 = sub_10026CF34;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10026CF34()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)(v0 + 272);
  v1 = *(void **)(v0 + 280);
  *(_QWORD *)(v0 + 704) = v2;
  *(_QWORD *)(v0 + 712) = v1;
  v3 = qword_10062F4B0;
  swift_bridgeObjectRetain(v1);
  if (v3 != -1)
    swift_once(&qword_10062F4B0, sub_1001A5E1C);
  v4 = *(_QWORD *)(v0 + 696);
  v5 = qword_1006702E0;
  swift_retain(qword_1006702E0);
  *(_QWORD *)(v0 + 720) = sub_1001AD3EC(v2, (unint64_t)v1);
  *(_QWORD *)(v0 + 728) = v6;
  if (v4)
  {
    v7 = *(_QWORD *)(v0 + 672);
    v35 = *(_QWORD *)(v0 + 656);
    v37 = *(_QWORD *)(v0 + 664);
    v33 = *(_QWORD *)(v0 + 648);
    v29 = *(_QWORD *)(v0 + 680);
    v31 = *(_QWORD *)(v0 + 640);
    v8 = *(_QWORD *)(v0 + 632);
    v9 = *(_QWORD *)(v0 + 624);
    v10 = *(_QWORD *)(v0 + 616);
    v11 = *(_QWORD *)(v0 + 608);
    swift_release(v5);
    swift_bridgeObjectRelease(v1);
    sub_1001837F4((_QWORD *)(v0 + 152));
    sub_10018343C(v11, v10, v9, v8, v31, v33, v35, v37, v7, v29);
LABEL_7:
    swift_task_dealloc(*(_QWORD *)(v0 + 600));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = v6;
  swift_release(v5);
  if (v12 >> 60 == 15)
  {
    v28 = *(_QWORD *)(v0 + 672);
    v30 = *(_QWORD *)(v0 + 680);
    v36 = *(_QWORD *)(v0 + 656);
    v38 = *(_QWORD *)(v0 + 664);
    v32 = *(_QWORD *)(v0 + 640);
    v34 = *(_QWORD *)(v0 + 648);
    v26 = *(_QWORD *)(v0 + 624);
    v27 = *(_QWORD *)(v0 + 632);
    v13 = *(_QWORD *)(v0 + 616);
    v14 = *(_QWORD *)(v0 + 608);
    v15 = *(_QWORD *)(v0 + 600);
    v16 = *(_QWORD *)(v0 + 592);
    v17 = *(_QWORD *)(v0 + 584);
    sub_1001837F4((_QWORD *)(v0 + 152));
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease(0xE000000000000000);
    v18._countAndFlagsBits = v2;
    v18._object = v1;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(v1);
    v19._countAndFlagsBits = 41;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v15, enum case for DIPError.Code.internalError(_:), v17);
    v20 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v21 = type metadata accessor for DIPError(0);
    v22 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v21, v22, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x80000001005594A0, 0, v15, 0, v20, 0xD00000000000004CLL, 0x8000000100558AE0, 0x65746172656E6567, 0xEF29287344495547, 671);
    swift_willThrow(v23);
    sub_10018343C(v14, v13, v26, v27, v32, v34, v36, v38, v28, v30);
    goto LABEL_7;
  }
  v25 = (_QWORD *)swift_task_alloc(dword_100638C8C);
  *(_QWORD *)(v0 + 736) = v25;
  *v25 = v0;
  v25[1] = sub_10026D270;
  return sub_10020F3B8(v0 + 16);
}

uint64_t sub_10026D270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 736);
  *(_QWORD *)(*(_QWORD *)v1 + 744) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10026D8B8;
  else
    v3 = sub_10026D2D4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10026D2D4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v1 = *(_QWORD *)(v0 + 744);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(void **)(v0 + 144);
  v4 = qword_1006702E0;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  v5 = sub_1001AD3EC(v3, (unint64_t)v2);
  if (v1)
  {
    v7 = *(_QWORD *)(v0 + 728);
    v8 = *(_QWORD *)(v0 + 720);
    v9 = *(_QWORD *)(v0 + 712);
    v65 = *(_QWORD *)(v0 + 672);
    v67 = *(_QWORD *)(v0 + 680);
    v74 = *(_QWORD *)(v0 + 656);
    v77 = *(_QWORD *)(v0 + 664);
    v69 = *(_QWORD *)(v0 + 640);
    v71 = *(_QWORD *)(v0 + 648);
    v59 = *(_QWORD *)(v0 + 624);
    v62 = *(_QWORD *)(v0 + 632);
    v56 = *(_QWORD *)(v0 + 616);
    v10 = *(_QWORD *)(v0 + 608);
    swift_release(v4);
    swift_bridgeObjectRelease(v2);
    sub_1001837F4((_QWORD *)(v0 + 16));
    sub_100007F78(v8, v7);
    swift_bridgeObjectRelease(v9);
    sub_1001837F4((_QWORD *)(v0 + 152));
    sub_10018343C(v10, v56, v59, v62, v69, v71, v74, v77, v65, v67);
  }
  else
  {
    v11 = v5;
    v12 = v6;
    swift_release(v4);
    if (v12 >> 60 != 15)
    {
      v25 = *(_QWORD *)(v0 + 720);
      v45 = *(_QWORD *)(v0 + 712);
      v46 = *(_QWORD *)(v0 + 728);
      v76 = v2;
      v44 = *(_QWORD *)(v0 + 704);
      v51 = *(_QWORD *)(v0 + 672);
      v53 = *(_QWORD *)(v0 + 680);
      v61 = *(_QWORD *)(v0 + 656);
      v64 = *(_QWORD *)(v0 + 664);
      v55 = *(_QWORD *)(v0 + 640);
      v58 = *(_QWORD *)(v0 + 648);
      v49 = *(_QWORD *)(v0 + 624);
      v50 = *(_QWORD *)(v0 + 632);
      v47 = *(_QWORD *)(v0 + 608);
      v48 = *(_QWORD *)(v0 + 616);
      v79 = *(_QWORD *)(v0 + 600);
      v73 = v11;
      v26 = *(_QWORD **)(v0 + 576);
      *(_QWORD *)(v0 + 392) = &type metadata for DIPClientGUID;
      *(_QWORD *)(v0 + 400) = &off_10060B980;
      v27 = swift_allocObject(&unk_10060CBC8, 152, 7);
      *(_QWORD *)(v0 + 368) = v27;
      v28 = *(_OWORD *)(v0 + 264);
      *(_OWORD *)(v27 + 112) = *(_OWORD *)(v0 + 248);
      *(_OWORD *)(v27 + 128) = v28;
      *(_QWORD *)(v27 + 144) = *(_QWORD *)(v0 + 280);
      v29 = *(_OWORD *)(v0 + 200);
      *(_OWORD *)(v27 + 48) = *(_OWORD *)(v0 + 184);
      *(_OWORD *)(v27 + 64) = v29;
      v30 = *(_OWORD *)(v0 + 232);
      *(_OWORD *)(v27 + 80) = *(_OWORD *)(v0 + 216);
      *(_OWORD *)(v27 + 96) = v30;
      v31 = *(_OWORD *)(v0 + 168);
      *(_OWORD *)(v27 + 16) = *(_OWORD *)(v0 + 152);
      *(_OWORD *)(v27 + 32) = v31;
      sub_1000A1F54(v0 + 368, v0 + 408, &qword_100636670);
      swift_beginAccess(v26 + 27, v0 + 528, 33, 0);
      sub_100184E1C(v0 + 408, (uint64_t)(v26 + 27), &qword_100636670);
      swift_endAccess(v0 + 528);
      v32 = v26[33];
      v26[32] = v44;
      v26[33] = v45;
      swift_bridgeObjectRelease(v32);
      v33 = v26[34];
      v34 = v26[35];
      v26[34] = v25;
      v26[35] = v46;
      sub_100022948(v25, v46);
      sub_100007F78(v33, v34);
      *(_QWORD *)(v0 + 472) = &type metadata for DIPClientGUID;
      *(_QWORD *)(v0 + 480) = &off_10060B980;
      v35 = swift_allocObject(&unk_10060CBC8, 152, 7);
      *(_QWORD *)(v0 + 448) = v35;
      sub_100007F78(v25, v46);
      sub_10018343C(v47, v48, v49, v50, v55, v58, v61, v64, v51, v53);
      v36 = *(_OWORD *)(v0 + 128);
      *(_OWORD *)(v35 + 112) = *(_OWORD *)(v0 + 112);
      *(_OWORD *)(v35 + 128) = v36;
      *(_QWORD *)(v35 + 144) = *(_QWORD *)(v0 + 144);
      v37 = *(_OWORD *)(v0 + 64);
      *(_OWORD *)(v35 + 48) = *(_OWORD *)(v0 + 48);
      *(_OWORD *)(v35 + 64) = v37;
      v38 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v35 + 80) = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v35 + 96) = v38;
      v39 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v35 + 16) = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v35 + 32) = v39;
      sub_1000A1F54(v0 + 448, v0 + 488, &qword_100636670);
      swift_beginAccess(v26 + 36, v0 + 552, 33, 0);
      sub_100184E1C(v0 + 488, (uint64_t)(v26 + 36), &qword_100636670);
      swift_endAccess(v0 + 552);
      v40 = v26[42];
      v26[41] = v3;
      v26[42] = v76;
      swift_bridgeObjectRelease(v40);
      v41 = v26[43];
      v42 = v26[44];
      v26[43] = v73;
      v26[44] = v12;
      sub_100007F78(v41, v42);
      swift_task_dealloc(v79);
      v24 = *(uint64_t (**)(void))(v0 + 8);
      return v24();
    }
    v60 = *(_QWORD *)(v0 + 728);
    v54 = *(_QWORD *)(v0 + 720);
    v13 = *(_QWORD *)(v0 + 712);
    v66 = *(_QWORD *)(v0 + 672);
    v68 = *(_QWORD *)(v0 + 680);
    v75 = *(_QWORD *)(v0 + 656);
    v78 = *(_QWORD *)(v0 + 664);
    v70 = *(_QWORD *)(v0 + 640);
    v72 = *(_QWORD *)(v0 + 648);
    v63 = *(_QWORD *)(v0 + 632);
    v57 = *(_QWORD *)(v0 + 624);
    v52 = *(_QWORD *)(v0 + 616);
    v14 = *(_QWORD *)(v0 + 608);
    v15 = *(_QWORD *)(v0 + 600);
    v16 = *(_QWORD *)(v0 + 592);
    v17 = *(_QWORD *)(v0 + 584);
    sub_1001837F4((_QWORD *)(v0 + 152));
    sub_1001837F4((_QWORD *)(v0 + 16));
    swift_bridgeObjectRelease(v13);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(0xE000000000000000);
    v18._countAndFlagsBits = v3;
    v18._object = v2;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(v2);
    v19._countAndFlagsBits = 41;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v15, enum case for DIPError.Code.internalError(_:), v17);
    v20 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v21 = type metadata accessor for DIPError(0);
    v22 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v21, v22, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x80000001005594D0, 0, v15, 0, v20, 0xD00000000000004CLL, 0x8000000100558AE0, 0x65746172656E6567, 0xEF29287344495547, 678);
    swift_willThrow(v23);
    sub_100007F78(v54, v60);
    sub_10018343C(v14, v52, v57, v63, v70, v72, v75, v78, v66, v68);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 600));
  v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_10026D854()
{
  uint64_t v0;

  sub_10018343C(*(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 616), *(_QWORD *)(v0 + 624), *(_QWORD *)(v0 + 632), *(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656), *(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 680));
  swift_task_dealloc(*(_QWORD *)(v0 + 600));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026D8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 712);
  v2 = *(_QWORD *)(v0 + 680);
  v3 = *(_QWORD *)(v0 + 672);
  v11 = *(_QWORD *)(v0 + 656);
  v12 = *(_QWORD *)(v0 + 664);
  v10 = *(_QWORD *)(v0 + 648);
  v4 = *(_QWORD *)(v0 + 640);
  v5 = *(_QWORD *)(v0 + 632);
  v6 = *(_QWORD *)(v0 + 624);
  v7 = *(_QWORD *)(v0 + 616);
  v8 = *(_QWORD *)(v0 + 608);
  sub_100007F78(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728));
  swift_bridgeObjectRelease(v1);
  sub_1001837F4((_QWORD *)(v0 + 152));
  sub_10018343C(v8, v7, v6, v5, v4, v10, v11, v12, v3, v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 600));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026D984(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint8_t *v32;
  uint8_t *v33;
  __int128 *v34;
  _QWORD v35[6];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[5];
  uint64_t v62;
  _OWORD v63[8];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v8 = v7;
  v45 = a7;
  v46 = a6;
  v47 = a5;
  v48 = a2;
  LODWORD(v44) = a4;
  v49 = a1;
  v10 = *a3;
  v41 = a3[1];
  v42 = v10;
  v11 = a3[2];
  v39 = a3[3];
  v40 = v11;
  v12 = a3[4];
  v37 = a3[5];
  v38 = v12;
  v43 = *((unsigned int *)a3 + 12);
  v36 = a3[7];
  v13 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v13);
  v35[3] = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DIPError(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v35[5] = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v50 - 8);
  v19 = __chkstk_darwin(v50);
  v35[4] = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)v35 - v21;
  swift_beginAccess(v8 + 216, &v62, 0, 0);
  sub_100038B24(v8 + 216, (uint64_t)&v51, &qword_100636670);
  if (!*((_QWORD *)&v52 + 1))
  {
    v34 = &v51;
    return sub_100008030((uint64_t)v34, &qword_100636670);
  }
  v23 = sub_100004828(&qword_100638CA0);
  result = swift_dynamicCast(&v65, &v51, v23, &type metadata for DIPClientGUID, 6);
  if ((result & 1) == 0)
    return result;
  v35[1] = v15;
  v35[2] = v16;
  v63[6] = v71;
  v63[7] = v72;
  v64 = v73;
  v63[2] = v67;
  v63[3] = v68;
  v63[4] = v69;
  v63[5] = v70;
  v63[0] = v65;
  v63[1] = v66;
  swift_beginAccess(v8 + 288, &v60, 0, 0);
  sub_100038B24(v8 + 288, (uint64_t)v61, &qword_100636670);
  if (!v61[3])
  {
    sub_1001837F4(v63);
    v34 = (__int128 *)v61;
    return sub_100008030((uint64_t)v34, &qword_100636670);
  }
  if ((swift_dynamicCast(&v51, v61, v23, &type metadata for DIPClientGUID, 6) & 1) == 0)
    return (uint64_t)sub_1001837F4(v63);
  v71 = v57;
  v72 = v58;
  v73 = v59;
  v67 = v53;
  v68 = v54;
  v69 = v55;
  v70 = v56;
  v65 = v51;
  v66 = v52;
  v25 = *(_BYTE *)(v8 + 208) != 9;
  *(_QWORD *)&v51 = v42;
  *((_QWORD *)&v51 + 1) = v41;
  *(_QWORD *)&v52 = v40;
  *((_QWORD *)&v52 + 1) = v39;
  *(_QWORD *)&v53 = v38;
  *((_QWORD *)&v53 + 1) = v37;
  *(_QWORD *)&v54 = v43;
  *((_QWORD *)&v54 + 1) = v36;
  v44 = sub_10027B84C((uint64_t)&v51, v25, v44 & 1);
  v27 = v26;
  v28 = defaultLogger()(v44);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    v43 = v27;
    v32 = v31;
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Storing assessment for reuse", v31, 2u);
    v33 = v32;
    v27 = v43;
    swift_slowDealloc(v33, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v50);
  sub_10027BDAC(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), a3[2], a3[3], v44, v27, *((unsigned int *)a3 + 12), v49, v48, (uint64_t)v63, (uint64_t)&v65, v47, v46, v45);
  sub_1001837F4(&v65);
  sub_1001837F4(v63);
  return swift_bridgeObjectRelease(v27);
}

uint64_t sub_10026DEE0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint8_t *v71;
  uint8_t *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::String v79;
  _BOOL8 v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  int *v95;
  uint64_t v96;
  uint64_t *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  Swift::String v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  _BOOL4 v119;
  uint64_t v120;
  uint8_t *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  NSObject *v125;
  uint64_t v126;
  os_log_type_t v127;
  uint8_t *v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  Swift::String_optional v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t *v148;
  void (*v149)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t *v192;
  int64x2_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t (*v205)(char *, uint64_t, uint64_t);
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  int *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *object;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *countAndFlagsBits;
  uint64_t v249;
  void (*v250)(char *, uint64_t);
  uint64_t v251;
  char *v252;
  _QWORD v253[2];
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _OWORD v263[2];
  uint64_t v264;
  int64x2_t v265[4];
  int64x2_t v266[4];
  char v267[8];
  int *v268;
  uint64_t v269;
  uint64_t v270;
  _OWORD v271[3];
  __int128 v272;
  int64x2_t v273;
  __int128 v274;

  LODWORD(v242) = a8;
  v243 = a7;
  v216 = a6;
  v217 = a4;
  v232 = a5;
  v239 = a1;
  v240 = a2;
  v244 = a15;
  object = a3;
  sub_1000A1F54((uint64_t)a3, (uint64_t)v267, &qword_10063A870);
  v230 = v268;
  v231 = v269;
  v229 = v270;
  v17 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v17);
  v234 = (char *)&v203 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DIPError.Code(0);
  v209 = *(_QWORD *)(v19 - 8);
  v210 = v19;
  __chkstk_darwin(v19);
  v211 = (char *)&v203 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DIPError(0);
  v222 = *(_QWORD *)(v21 - 8);
  v223 = v21;
  __chkstk_darwin(v21);
  v226 = (char *)&v203 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchWorkItemFlags(0);
  v220 = *(_QWORD *)(v23 - 8);
  v221 = v23;
  __chkstk_darwin(v23);
  v219 = (char *)&v203 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100004828(&qword_1006375E0);
  __chkstk_darwin(v25);
  v204 = (uint64_t)&v203 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = type metadata accessor for DIPODINPair(0);
  __chkstk_darwin(v218);
  v227 = (char *)&v203 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100004828(&qword_10063A868);
  v29 = __chkstk_darwin(v28);
  v228 = (uint64_t)&v203 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v215 = (uint64_t)&v203 - v32;
  __chkstk_darwin(v31);
  v214 = (uint64_t)&v203 - v33;
  v34 = sub_100004828(&qword_100636668);
  v35 = __chkstk_darwin(v34);
  v207 = (uint64_t)&v203 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v224 = (uint64_t)&v203 - v38;
  __chkstk_darwin(v37);
  v40 = (char *)&v203 - v39;
  v41 = sub_100004828(&qword_10063A860);
  v42 = __chkstk_darwin(v41);
  v238 = (unint64_t)&v203 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v45 = (char *)&v203 - v44;
  v46 = sub_100004828(&qword_10063A7B8);
  __chkstk_darwin(v46);
  v48 = (char *)&v203 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100004828(&qword_10063A6C8);
  __chkstk_darwin(v49);
  v51 = (char *)&v203 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v251 = type metadata accessor for Logger(0);
  v52 = *(_QWORD *)(v251 - 8);
  v53 = __chkstk_darwin(v251);
  v233 = (char *)&v203 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __chkstk_darwin(v53);
  countAndFlagsBits = (char *)&v203 - v56;
  v57 = __chkstk_darwin(v55);
  v225 = (char *)&v203 - v58;
  v59 = __chkstk_darwin(v57);
  v208 = (char *)&v203 - v60;
  v61 = __chkstk_darwin(v59);
  v63 = (char *)&v203 - v62;
  v64 = __chkstk_darwin(v61);
  v66 = (char *)&v203 - v65;
  v67 = defaultLogger()(v64);
  v68 = Logger.logObject.getter(v67);
  v69 = static os_log_type_t.debug.getter(v68);
  v70 = os_log_type_enabled(v68, v69);
  v252 = v51;
  if (v70)
  {
    v71 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v71 = 0;
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "Preparing ODN web requests", v71, 2u);
    v72 = v71;
    v51 = v252;
    swift_slowDealloc(v72, -1, -1);
  }

  v73 = *(void (**)(char *, uint64_t))(v52 + 8);
  v74 = v251;
  v250 = v73;
  v73(v66, v251);
  v75 = sub_100004828(&qword_1006385E0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v51, 1, 1, v75);
  v76 = sub_100004828(&qword_10063A7D8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v48, 1, 1, v76);
  v77 = v249;
  v78 = *(_QWORD *)(v249 + 40);
  v79 = *(Swift::String *)(v249 + 384);
  v245 = *(_QWORD *)(v249 + 32);
  v246 = v78;
  v80 = String.hasPrefix(_:)(v79);
  v247 = v48;
  if (v80)
  {
    v213 = a13;
    v237 = a10;
    LODWORD(v236) = a11 & 1;
    LODWORD(v212) = a14 & 1;
    sub_100008030((uint64_t)v48, &qword_10063A7B8);
    sub_100008030((uint64_t)v51, &qword_10063A6C8);
    sub_100038B24(a9, (uint64_t)v51, &qword_10063A6C8);
    sub_100038B24(a12, (uint64_t)v48, &qword_10063A7B8);
  }
  else
  {
    v81 = defaultLogger()(v80);
    v82 = Logger.logObject.getter(v81);
    v84 = static os_log_type_t.info.getter(v82, v83);
    if (os_log_type_enabled(v82, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v84, "Label Ingestion Not Allowed, skipping EncryptedContainers", v85, 2u);
      swift_slowDealloc(v85, -1, -1);
    }

    v250(v63, v74);
    v213 = 0;
    v237 = 0;
    LODWORD(v212) = 1;
    LODWORD(v236) = 1;
  }
  LODWORD(v235) = a17;
  swift_beginAccess(v77 + 216, &v264, 0, 0);
  sub_100038B24(v77 + 216, (uint64_t)v253, &qword_100636670);
  sub_100210028((uint64_t)v253, v265);
  sub_100008030((uint64_t)v253, &qword_100636670);
  v86 = (uint64_t *)(*(_QWORD *)(v77 + 160) + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v88 = *v86;
  v87 = v86[1];
  sub_100038B24(v244, (uint64_t)v40, &qword_100636668);
  v89 = type metadata accessor for AugmentedProfile(0);
  v205 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 48);
  v90 = v205(v40, 1, v89);
  v206 = v89;
  if (v90 == 1)
  {
    swift_bridgeObjectRetain(v87);
    v91 = v246;
    swift_bridgeObjectRetain(v246);
    sub_100008030((uint64_t)v40, &qword_100636668);
    v92 = 0xE700000000000000;
    v93 = 0x4E574F4E4B4E55;
  }
  else
  {
    v94 = (uint64_t *)&v40[*(int *)(v89 + 28)];
    v93 = *v94;
    v92 = v94[1];
    swift_bridgeObjectRetain(v87);
    v91 = v246;
    swift_bridgeObjectRetain(v246);
    swift_bridgeObjectRetain(v92);
    sub_100035DAC((uint64_t)v40, type metadata accessor for AugmentedProfile);
  }
  v95 = (int *)type metadata accessor for ORDRequest(0);
  sub_100038B24((uint64_t)v252, (uint64_t)&v45[v95[11]], &qword_10063A6C8);
  *(_QWORD *)v45 = v88;
  *((_QWORD *)v45 + 1) = v87;
  v96 = v240;
  *((_QWORD *)v45 + 2) = v239;
  *((_QWORD *)v45 + 3) = v96;
  sub_1000A1F54((uint64_t)v265, (uint64_t)(v45 + 32), &qword_10063A878);
  *((_QWORD *)v45 + 12) = v245;
  *((_QWORD *)v45 + 13) = v91;
  *((_QWORD *)v45 + 14) = v93;
  *((_QWORD *)v45 + 15) = v92;
  v97 = v243;
  sub_1000A1F54((uint64_t)v243, (uint64_t)(v45 + 128), &qword_10063A880);
  v45[185] = v242;
  v98 = &v45[v95[12]];
  *(_QWORD *)v98 = v237;
  v98[8] = (char)v236;
  v99 = &v45[v95[13]];
  *(_QWORD *)v99 = a16;
  v99[8] = v235 & 1;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v95 - 1) + 56))(v45, 0, 1, v95);
  v100 = v238;
  sub_1000A1F54((uint64_t)v45, v238, &qword_10063A860);
  v101 = v249;
  v102 = v249 + OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest;
  swift_beginAccess(v249 + OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest, v253, 33, 0);
  sub_10027F754(v97);
  swift_bridgeObjectRetain(v96);
  sub_100184E1C(v100, v102, &qword_10063A860);
  swift_endAccess(v253);
  v103 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v103, *(unsigned int *)(v103 + 48), *(unsigned __int16 *)(v103 + 52));
  v104 = JSONEncoder.init()();
  v105 = object;
  sub_1000A1F54((uint64_t)object, (uint64_t)v253, &qword_10063A870);
  v106 = sub_100004828(&qword_10063A870);
  v107 = sub_10027F78C();
  v108 = dispatch thunk of JSONEncoder.encode<A>(_:)(v253, v106, v107);
  v110 = v109;
  swift_release(v104);
  sub_100022948(v108, v110);
  v111 = Data.base64EncodedString(options:)(0);
  v240 = v108;
  sub_100007F8C(v108, v110);
  sub_1000A1F54((uint64_t)v105, (uint64_t)v271, &qword_10063A870);
  v112 = (uint64_t)v247;
  v113 = (uint64_t)v252;
  if (!*((_QWORD *)&v271[0] + 1))
  {
    v114 = swift_bridgeObjectRelease(v111._object);
    goto LABEL_16;
  }
  v272 = v271[0];
  v273 = (int64x2_t)v271[1];
  v274 = v271[2];
  if (!v232 || *(_QWORD *)(v101 + 200))
  {
    swift_bridgeObjectRetain(v229);
    swift_bridgeObjectRetain(v230);
    swift_bridgeObjectRetain(v231);
    swift_bridgeObjectRelease(v111._object);
    v263[0] = v272;
    sub_1000E6CF0((uint64_t)v263);
    v266[0] = v273;
    sub_1000E6CF0((uint64_t)v266);
    sub_1000A1F54((uint64_t)&v274, (uint64_t)v253, (uint64_t *)&unk_100632610);
    v114 = sub_1000E6CF0((uint64_t)v253);
LABEL_16:
    v115 = v240;
    v116 = defaultLogger()(v114);
    v117 = Logger.logObject.getter(v116);
    v118 = static os_log_type_t.debug.getter(v117);
    v119 = os_log_type_enabled(v117, v118);
    v120 = v251;
    if (v119)
    {
      v121 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v121 = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, v118, "Skipping OTD web request because required properties aren't available", v121, 2u);
      swift_slowDealloc(v121, -1, -1);
    }

    v122 = ((uint64_t (*)(char *, uint64_t))v250)(countAndFlagsBits, v120);
    goto LABEL_19;
  }
  v237 = *(_QWORD *)(v101 + 192);
  v238 = v110;
  v138 = (uint64_t)v247;
  swift_beginAccess(v101 + 288, v263, 0, 0);
  sub_100038B24(v101 + 288, (uint64_t)v253, &qword_100636670);
  sub_10027F824(object);
  v139 = v232;
  swift_bridgeObjectRetain(v232);
  sub_100210028((uint64_t)v253, v266);
  sub_100008030((uint64_t)v253, &qword_100636670);
  v140 = (int *)type metadata accessor for OTDRequest(0);
  v141 = v214;
  sub_100038B24(v138, v214 + v140[10], &qword_10063A7B8);
  v142 = v246;
  swift_bridgeObjectRetain(v246);
  v143 = v243;
  sub_10027F754(v243);
  v144 = experimentalGroup()();
  countAndFlagsBits = (char *)v144.value._countAndFlagsBits;
  object = (uint64_t *)v144.value._object;
  *(Swift::String *)v141 = v111;
  *(_QWORD *)(v141 + 16) = v216;
  sub_1000A1F54((uint64_t)v266, v141 + 24, &qword_10063A878);
  *(_QWORD *)(v141 + 88) = v245;
  *(_QWORD *)(v141 + 96) = v142;
  *(_QWORD *)(v141 + 104) = v217;
  *(_QWORD *)(v141 + 112) = v139;
  *(_QWORD *)(v141 + 120) = 2;
  *(_BYTE *)(v141 + 128) = v242;
  v145 = v141 + v140[11];
  *(_QWORD *)v145 = v213;
  *(_BYTE *)(v145 + 8) = v212;
  sub_1000A1F54((uint64_t)v143, v141 + v140[12], &qword_10063A880);
  v146 = v141 + v140[13];
  *(_QWORD *)v146 = 0;
  *(_BYTE *)(v146 + 8) = 1;
  v147 = (_QWORD *)(v141 + v140[14]);
  v148 = object;
  *v147 = countAndFlagsBits;
  v147[1] = v148;
  v149 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(*((_QWORD *)v140 - 1) + 56);
  v149(v141, 0, 1, v140);
  v150 = v141;
  v151 = v140;
  v152 = v215;
  sub_1000A1F54(v150, v215, &qword_10063A868);
  v153 = v101 + OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  swift_beginAccess(v101 + OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest, v253, 33, 0);
  sub_100184E1C(v152, v153, &qword_10063A868);
  swift_endAccess(v253);
  v154 = *(_QWORD *)(v101 + 272);
  object = *(uint64_t **)(v101 + 280);
  v242 = v154;
  v155 = *(_QWORD *)(v101 + 168);
  v230 = v140;
  v231 = v155;
  v243 = *(uint64_t **)(v101 + 176);
  v156 = *(_QWORD *)(v101 + 64);
  v157 = *(_QWORD *)(v101 + 72);
  v158 = *(_QWORD *)(v101 + 80);
  v159 = *(_QWORD *)(v101 + 88);
  v236 = v149;
  v149(v228, 1, 1, v151);
  v160 = *(_QWORD *)(v101 + 96);
  v161 = *(char **)(v101 + 104);
  v162 = v224;
  sub_100038B24(v244, v224, &qword_100636668);
  countAndFlagsBits = v161;
  v235 = v156;
  v232 = v158;
  v239 = v159;
  if (v161)
  {
    swift_bridgeObjectRetain(v246);
    sub_100028034(v242, (unint64_t)object);
    swift_bridgeObjectRetain(countAndFlagsBits);
    swift_bridgeObjectRetain(v243);
    swift_bridgeObjectRetain(v157);
    swift_bridgeObjectRetain(v159);
    sub_100008030(v162, &qword_100636668);
    v163 = v157;
    v164 = v160;
    v113 = (uint64_t)v252;
  }
  else
  {
    v165 = v207;
    sub_100038B24(v162, v207, &qword_100636668);
    v166 = v205((char *)v165, 1, v206);
    v113 = (uint64_t)v252;
    if (v166 != 1)
    {
      v167 = v157;
      v168 = v204;
      sub_100038B24(v165, v204, &qword_1006375E0);
      swift_bridgeObjectRetain(v246);
      sub_100028034(v242, (unint64_t)object);
      v244 = v167;
      swift_bridgeObjectRetain(v167);
      swift_bridgeObjectRetain(v239);
      swift_bridgeObjectRetain(v243);
      sub_100035DAC(v165, type metadata accessor for AugmentedProfile);
      v169 = sub_100004828(&qword_100636840);
      v170 = *(_QWORD *)(v169 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v170 + 48))(v168, 1, v169) == 1)
      {
        sub_100008030(v224, &qword_100636668);
        sub_100008030(v168, &qword_1006375E0);
      }
      else
      {
        JWSSignedJSON.payload.getter(v169);
        sub_100008030(v224, &qword_100636668);
        v229 = v253[0];
        v171 = v254;
        v172 = v255;
        v173 = v258;
        v214 = v259;
        v215 = v253[1];
        v224 = v260;
        v216 = v262;
        v217 = v261;
        v174 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
        v175 = v168;
        v176 = v257;
        v177 = v169;
        v178 = v256;
        v213 = v254;
        v174(v175, v177);
        v179 = v215;
        v180 = v171;
        v181 = v214;
        sub_1001AD7A0(v229, v215, v180, v172, v178, v176, v173, v214);
        v182 = v179;
        v183 = v213;
        countAndFlagsBits = (char *)v172;
        v206 = v178;
        v207 = v176;
        v212 = v173;
        v184 = v173;
        v185 = v182;
        sub_1001849FC(v229, v182, v213, v172, v178, v176, v184, v181);
        swift_bridgeObjectRelease(v216);
        swift_bridgeObjectRelease(v217);
        swift_bridgeObjectRelease(v224);
        if (v185)
        {
          v186 = (uint64_t)countAndFlagsBits;
          swift_bridgeObjectRetain(countAndFlagsBits);
          sub_1001849FC(v229, v185, v183, v186, v206, v207, v212, v181);
          v163 = v244;
          v164 = v183;
          goto LABEL_37;
        }
      }
      v164 = 0;
      countAndFlagsBits = 0;
      v163 = v244;
      goto LABEL_37;
    }
    swift_bridgeObjectRetain(v246);
    sub_100028034(v242, (unint64_t)object);
    swift_bridgeObjectRetain(v157);
    swift_bridgeObjectRetain(v239);
    swift_bridgeObjectRetain(v243);
    sub_100008030(v162, &qword_100636668);
    sub_100008030(v165, &qword_100636668);
    v164 = 0;
    countAndFlagsBits = 0;
    v163 = v157;
  }
LABEL_37:
  v187 = v218;
  v188 = v227;
  v189 = (uint64_t)&v227[*(int *)(v218 + 52)];
  v236(v189, 1, 1, v230);
  v190 = (uint64_t)v188;
  v191 = (uint64_t *)&v188[*(int *)(v187 + 56)];
  *v191 = 0;
  v191[1] = 0;
  v192 = object;
  *(_QWORD *)v190 = v242;
  *(_QWORD *)(v190 + 8) = v192;
  v193 = v273;
  *(_OWORD *)(v190 + 16) = v272;
  *(int64x2_t *)(v190 + 32) = v193;
  *(_OWORD *)(v190 + 48) = v274;
  v194 = v237;
  *(_QWORD *)(v190 + 64) = v237;
  *(_QWORD *)(v190 + 72) = 0;
  *(_QWORD *)(v190 + 80) = v194;
  *(_QWORD *)(v190 + 88) = 0;
  v195 = v243;
  *(_QWORD *)(v190 + 96) = v231;
  *(_QWORD *)(v190 + 104) = v195;
  v196 = v246;
  *(_QWORD *)(v190 + 112) = v245;
  *(_QWORD *)(v190 + 120) = v196;
  *(_BYTE *)(v190 + 128) = 0;
  *(_QWORD *)(v190 + 136) = v235;
  *(_QWORD *)(v190 + 144) = v163;
  v197 = v239;
  *(_QWORD *)(v190 + 152) = v232;
  *(_QWORD *)(v190 + 160) = v197;
  sub_100184E1C(v228, v189, &qword_10063A868);
  v198 = swift_bridgeObjectRelease(v191[1]);
  v199 = countAndFlagsBits;
  *v191 = v164;
  v191[1] = (uint64_t)v199;
  if (qword_10062F5B0 != -1)
    v198 = swift_once(&qword_10062F5B0, sub_100486FCC);
  v200 = v219;
  v201 = static DispatchWorkItemFlags.barrier.getter(v198);
  __chkstk_darwin(v201);
  OS_dispatch_queue.sync<A>(flags:execute:)(v200, sub_10027F894);
  v202 = v190;
  v112 = (uint64_t)v247;
  (*(void (**)(char *, uint64_t))(v220 + 8))(v200, v221);
  v122 = sub_100035DAC(v202, type metadata accessor for DIPODINPair);
  v120 = v251;
  v110 = v238;
  v115 = v240;
LABEL_19:
  if (*(_BYTE *)(v101 + 402) == 1)
  {
    v123 = v233;
    v124 = defaultLogger()(v122);
    v125 = Logger.logObject.getter(v124);
    v127 = static os_log_type_t.info.getter(v125, v126);
    if (os_log_type_enabled(v125, v127))
    {
      v128 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v128 = 0;
      _os_log_impl((void *)&_mh_execute_header, v125, v127, "Configured to not immediately send to Assessment Server", v128, 2u);
      v129 = v128;
      v120 = v251;
      swift_slowDealloc(v129, -1, -1);
    }

    sub_100007F78(v115, v110);
    v250(v123, v120);
  }
  else
  {
    v130 = *(_QWORD *)(v101 + 104);
    if (v130)
    {
      v131 = *(_QWORD *)(v101 + 96);
      v132 = *(_QWORD *)(v101 + 104);
    }
    else
    {
      v131 = *(_QWORD *)(v101 + 112);
      v132 = *(_QWORD *)(v101 + 120);
      swift_bridgeObjectRetain(v132);
    }
    v133 = type metadata accessor for TaskPriority(0);
    v134 = (uint64_t)v234;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 56))(v234, 1, 1, v133);
    v135 = (_QWORD *)swift_allocObject(&unk_10060CBA0, 56, 7);
    v135[2] = 0;
    v135[3] = 0;
    v135[4] = v101;
    v135[5] = v131;
    v135[6] = v132;
    swift_bridgeObjectRetain(v130);
    swift_retain(v101);
    v136 = sub_1001075D4(v134, (uint64_t)&unk_1006366C8, (uint64_t)v135);
    swift_release(v136);
    sub_100007F78(v115, v110);
    v112 = (uint64_t)v247;
  }
  sub_100008030(v112, &qword_10063A7B8);
  return sub_100008030(v113, &qword_10063A6C8);
}

uint64_t sub_10026F398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6[15] = a5;
  v6[16] = a6;
  v6[14] = a4;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[18] = v8;
  v6[19] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError(0);
  v6[20] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[21] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[22] = swift_task_alloc(v11);
  v6[23] = swift_task_alloc(v11);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_10063A868) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[24] = swift_task_alloc(v12);
  v6[25] = swift_task_alloc(v12);
  v13 = type metadata accessor for OTDRequest(0);
  v6[26] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[27] = v14;
  v6[28] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_10063A860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[29] = swift_task_alloc(v15);
  v6[30] = swift_task_alloc(v15);
  v16 = type metadata accessor for ORDRequest(0);
  v6[31] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v6[32] = v17;
  v6[33] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger(0);
  v6[34] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v6[35] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[36] = swift_task_alloc(v20);
  v6[37] = swift_task_alloc(v20);
  v6[38] = swift_task_alloc(v20);
  v6[39] = swift_task_alloc(v20);
  v6[40] = swift_task_alloc(v20);
  v6[41] = swift_task_alloc(v20);
  return swift_task_switch(sub_10026F554, 0, 0);
}

uint64_t sub_10026F554(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.info.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Sending ODN Results", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 328);
  v8 = *(_QWORD *)(v1 + 272);
  v9 = *(_QWORD *)(v1 + 280);
  v10 = *(_QWORD *)(v1 + 248);
  v11 = *(_QWORD *)(v1 + 256);
  v12 = *(_QWORD *)(v1 + 240);
  v13 = *(_QWORD *)(v1 + 112);

  v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  *(_QWORD *)(v1 + 336) = v14;
  v14(v7, v8);
  v15 = OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest;
  *(_QWORD *)(v1 + 344) = OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest;
  v16 = v13 + v15;
  swift_beginAccess(v13 + v15, v1 + 16, 0, 0);
  sub_100038B24(v16, v12, &qword_10063A860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10) == 1)
  {
    v17 = sub_100008030(*(_QWORD *)(v1 + 240), &qword_10063A860);
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 112);
    sub_100038AE0(*(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 264), type metadata accessor for ORDRequest);
    if (*(_BYTE *)(v18 + 400) == 1)
    {
      v19 = *(_QWORD **)(v1 + 112);
      v20 = v19[21];
      v21 = v19[22];
      v22 = v19[24];
      v23 = v19[25];
      v24 = (_QWORD *)swift_task_alloc(dword_10063096C);
      *(_QWORD *)(v1 + 352) = v24;
      *v24 = v1;
      v24[1] = sub_10026FA0C;
      return sub_10002F4C8(v20, v21, *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), v22, v23, *(_QWORD *)(v1 + 264));
    }
    v17 = sub_100035DAC(*(_QWORD *)(v1 + 264), type metadata accessor for ORDRequest);
  }
  v26 = defaultLogger()(v17);
  v27 = Logger.logObject.getter(v26);
  v29 = static os_log_type_t.info.getter(v27, v28);
  if (os_log_type_enabled(v27, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v29, "no ORD available or configured to not send", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }
  v31 = *(_QWORD *)(v1 + 320);
  v32 = *(_QWORD *)(v1 + 272);

  v14(v31, v32);
  v33 = *(_QWORD *)(v1 + 208);
  v34 = *(_QWORD *)(v1 + 216);
  v35 = *(_QWORD *)(v1 + 200);
  v36 = *(_QWORD *)(v1 + 112);
  v37 = OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  *(_QWORD *)(v1 + 368) = OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  v38 = v36 + v37;
  swift_beginAccess(v36 + v37, v1 + 40, 0, 0);
  sub_100038B24(v38, v35, &qword_10063A868);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v35, 1, v33) == 1)
  {
    v39 = sub_100008030(*(_QWORD *)(v1 + 200), &qword_10063A868);
  }
  else
  {
    v40 = *(_QWORD *)(v1 + 112);
    sub_100038AE0(*(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 224), type metadata accessor for OTDRequest);
    if (*(_BYTE *)(v40 + 401) == 1)
    {
      v41 = (_QWORD *)swift_task_alloc(dword_100630974);
      *(_QWORD *)(v1 + 376) = v41;
      *v41 = v1;
      v41[1] = sub_10026FD64;
      return sub_100030058(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128));
    }
    v39 = sub_100035DAC(*(_QWORD *)(v1 + 224), type metadata accessor for OTDRequest);
  }
  v42 = defaultLogger()(v39);
  v43 = Logger.logObject.getter(v42);
  v45 = static os_log_type_t.info.getter(v43, v44);
  if (os_log_type_enabled(v43, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v45, "no OTD available or configured to not send", v46, 2u);
    swift_slowDealloc(v46, -1, -1);
  }
  v47 = *(void (**)(uint64_t, uint64_t))(v1 + 336);
  v48 = *(_QWORD *)(v1 + 312);
  v49 = *(_QWORD *)(v1 + 272);

  v47(v48, v49);
  v50 = *(_QWORD *)(v1 + 320);
  v52 = *(_QWORD *)(v1 + 304);
  v51 = *(_QWORD *)(v1 + 312);
  v54 = *(_QWORD *)(v1 + 288);
  v53 = *(_QWORD *)(v1 + 296);
  v55 = *(_QWORD *)(v1 + 264);
  v57 = *(_QWORD *)(v1 + 232);
  v56 = *(_QWORD *)(v1 + 240);
  v58 = *(_QWORD *)(v1 + 224);
  v59 = *(_QWORD *)(v1 + 200);
  v60 = *(_QWORD *)(v1 + 192);
  v61 = *(_QWORD *)(v1 + 184);
  v62 = *(_QWORD *)(v1 + 176);
  v63 = *(_QWORD *)(v1 + 152);
  swift_task_dealloc(*(_QWORD *)(v1 + 328));
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10026FA0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10026FF2C;
  else
    v3 = sub_10026FA70;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10026FA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 112) + *(_QWORD *)(v0 + 344);
  sub_100035DAC(*(_QWORD *)(v0 + 264), type metadata accessor for ORDRequest);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v3, 1, 1, v2);
  swift_beginAccess(v4, v0 + 88, 33, 0);
  sub_100184E1C(v3, v4, &qword_10063A860);
  swift_endAccess(v0 + 88);
  v5 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 112);
  v9 = OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  *(_QWORD *)(v0 + 368) = OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  v10 = v8 + v9;
  swift_beginAccess(v8 + v9, v0 + 40, 0, 0);
  sub_100038B24(v10, v7, &qword_10063A868);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
  {
    v11 = sub_100008030(*(_QWORD *)(v0 + 200), &qword_10063A868);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 112);
    sub_100038AE0(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 224), type metadata accessor for OTDRequest);
    if (*(_BYTE *)(v12 + 401) == 1)
    {
      v13 = (_QWORD *)swift_task_alloc(dword_100630974);
      *(_QWORD *)(v0 + 376) = v13;
      *v13 = v0;
      v13[1] = sub_10026FD64;
      return sub_100030058(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
    }
    v11 = sub_100035DAC(*(_QWORD *)(v0 + 224), type metadata accessor for OTDRequest);
  }
  v15 = defaultLogger()(v11);
  v16 = Logger.logObject.getter(v15);
  v18 = static os_log_type_t.info.getter(v16, v17);
  if (os_log_type_enabled(v16, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v18, "no OTD available or configured to not send", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }
  v20 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v21 = *(_QWORD *)(v0 + 312);
  v22 = *(_QWORD *)(v0 + 272);

  v20(v21, v22);
  v23 = *(_QWORD *)(v0 + 320);
  v25 = *(_QWORD *)(v0 + 304);
  v24 = *(_QWORD *)(v0 + 312);
  v27 = *(_QWORD *)(v0 + 288);
  v26 = *(_QWORD *)(v0 + 296);
  v28 = *(_QWORD *)(v0 + 264);
  v30 = *(_QWORD *)(v0 + 232);
  v29 = *(_QWORD *)(v0 + 240);
  v31 = *(_QWORD *)(v0 + 224);
  v32 = *(_QWORD *)(v0 + 200);
  v33 = *(_QWORD *)(v0 + 192);
  v34 = *(_QWORD *)(v0 + 184);
  v35 = *(_QWORD *)(v0 + 176);
  v36 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026FD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100270404;
  else
    v3 = sub_10026FDC8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10026FDC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 112) + *(_QWORD *)(v0 + 368);
  sub_100035DAC(*(_QWORD *)(v0 + 224), type metadata accessor for OTDRequest);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v3, 1, 1, v2);
  swift_beginAccess(v4, v0 + 64, 33, 0);
  sub_100184E1C(v3, v4, &qword_10063A868);
  swift_endAccess(v0 + 64);
  v5 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 296);
  v10 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 240);
  v13 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 184);
  v18 = *(_QWORD *)(v0 + 176);
  v19 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026FF2C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v60 = v0 + 88;
  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 152);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 136));
  swift_errorRetain(v1);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x80000001005593B0, v1, v8, 0, v9, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD000000000000010, 0x8000000100559390, 825);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v7, v10, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v12, v5, v7);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v3);
  v2(v3, v4);
  v14 = swift_errorRelease(v11);
  v15 = defaultLogger()(v14);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to send ORD request; continuing on", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }
  v19 = *(_QWORD *)(v0 + 360);
  v20 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v21 = *(_QWORD *)(v0 + 296);
  v22 = *(_QWORD *)(v0 + 272);
  v23 = *(_QWORD *)(v0 + 184);
  v25 = *(_QWORD *)(v0 + 160);
  v24 = *(_QWORD *)(v0 + 168);

  swift_errorRelease(v19);
  v20(v21, v22);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  v26 = *(_QWORD *)(v0 + 256);
  v27 = *(_QWORD *)(v0 + 248);
  v28 = *(_QWORD *)(v0 + 232);
  v29 = *(_QWORD *)(v0 + 112) + *(_QWORD *)(v0 + 344);
  sub_100035DAC(*(_QWORD *)(v0 + 264), type metadata accessor for ORDRequest);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v28, 1, 1, v27);
  swift_beginAccess(v29, v60, 33, 0);
  sub_100184E1C(v28, v29, &qword_10063A860);
  swift_endAccess(v60);
  v31 = *(_QWORD *)(v0 + 208);
  v30 = *(_QWORD *)(v0 + 216);
  v32 = *(_QWORD *)(v0 + 200);
  v33 = *(_QWORD *)(v0 + 112);
  v34 = OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  *(_QWORD *)(v0 + 368) = OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  v35 = v33 + v34;
  swift_beginAccess(v33 + v34, v0 + 40, 0, 0);
  sub_100038B24(v35, v32, &qword_10063A868);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v32, 1, v31) == 1)
  {
    v36 = sub_100008030(*(_QWORD *)(v0 + 200), &qword_10063A868);
  }
  else
  {
    v37 = *(_QWORD *)(v0 + 112);
    sub_100038AE0(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 224), type metadata accessor for OTDRequest);
    if (*(_BYTE *)(v37 + 401) == 1)
    {
      v38 = (_QWORD *)swift_task_alloc(dword_100630974);
      *(_QWORD *)(v0 + 376) = v38;
      *v38 = v0;
      v38[1] = sub_10026FD64;
      return sub_100030058(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
    }
    v36 = sub_100035DAC(*(_QWORD *)(v0 + 224), type metadata accessor for OTDRequest);
  }
  v40 = defaultLogger()(v36);
  v41 = Logger.logObject.getter(v40);
  v43 = static os_log_type_t.info.getter(v41, v42);
  if (os_log_type_enabled(v41, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v43, "no OTD available or configured to not send", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }
  v45 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v46 = *(_QWORD *)(v0 + 312);
  v47 = *(_QWORD *)(v0 + 272);

  v45(v46, v47);
  v48 = *(_QWORD *)(v0 + 320);
  v50 = *(_QWORD *)(v0 + 304);
  v49 = *(_QWORD *)(v0 + 312);
  v52 = *(_QWORD *)(v0 + 288);
  v51 = *(_QWORD *)(v0 + 296);
  v53 = *(_QWORD *)(v0 + 264);
  v55 = *(_QWORD *)(v0 + 232);
  v54 = *(_QWORD *)(v0 + 240);
  v56 = *(_QWORD *)(v0 + 224);
  v57 = *(_QWORD *)(v0 + 200);
  v58 = *(_QWORD *)(v0 + 192);
  v59 = *(_QWORD *)(v0 + 184);
  v61 = *(_QWORD *)(v0 + 176);
  v62 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100270404()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 136));
  swift_errorRetain(v1);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x8000000100559370, v1, v8, 0, v9, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD000000000000010, 0x8000000100559390, 837);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v7, v10, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v12, v5, v7);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v3);
  v2(v3, v4);
  v14 = swift_errorRelease(v11);
  v15 = defaultLogger()(v14);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to send OTD request; continuing on", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }
  v19 = *(_QWORD *)(v0 + 384);
  v20 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v21 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 272);
  v24 = *(_QWORD *)(v0 + 168);
  v23 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 160);

  swift_errorRelease(v19);
  v20(v21, v22);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  v26 = *(_QWORD *)(v0 + 216);
  v27 = *(_QWORD *)(v0 + 208);
  v28 = *(_QWORD *)(v0 + 192);
  v29 = *(_QWORD *)(v0 + 112) + *(_QWORD *)(v0 + 368);
  sub_100035DAC(*(_QWORD *)(v0 + 224), type metadata accessor for OTDRequest);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v28, 1, 1, v27);
  swift_beginAccess(v29, v0 + 64, 33, 0);
  sub_100184E1C(v28, v29, &qword_10063A868);
  swift_endAccess(v0 + 64);
  v30 = *(_QWORD *)(v0 + 320);
  v32 = *(_QWORD *)(v0 + 304);
  v31 = *(_QWORD *)(v0 + 312);
  v34 = *(_QWORD *)(v0 + 288);
  v33 = *(_QWORD *)(v0 + 296);
  v35 = *(_QWORD *)(v0 + 264);
  v37 = *(_QWORD *)(v0 + 232);
  v36 = *(_QWORD *)(v0 + 240);
  v38 = *(_QWORD *)(v0 + 224);
  v40 = *(_QWORD *)(v0 + 200);
  v41 = *(_QWORD *)(v0 + 192);
  v42 = *(_QWORD *)(v0 + 184);
  v43 = *(_QWORD *)(v0 + 176);
  v44 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100270744(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  Swift::String *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  void *object;
  uint64_t countAndFlagsBits;
  char v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a1;
  v10 = sub_100004828(&qword_10063A6C8);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_1006385E0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100038B24(a3, (uint64_t)v12, &qword_10063A6C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100008030((uint64_t)v12, &qword_10063A6C8);
  }
  else
  {
    v17 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v17(v16, v12, v13);
    countAndFlagsBits = v5[2]._countAndFlagsBits;
    object = v5[2]._object;
    if (String.hasPrefix(_:)(v5[24]))
    {
      v26 = a4;
      v20 = a2 & 1;
      v21 = type metadata accessor for AssessmentAdditionalInfo(0);
      v22 = (char *)(a5 + *(int *)(v21 + 28));
      v17(v22, v16, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v22, 0, 1, v13);
      *(_QWORD *)a5 = countAndFlagsBits;
      *(_QWORD *)(a5 + 8) = object;
      *(_BYTE *)(a5 + 16) = v20;
      v23 = v26;
      *(_QWORD *)(a5 + 24) = v27;
      *(_BYTE *)(a5 + 32) = 0;
      v24 = a5 + *(int *)(v21 + 32);
      *(_QWORD *)v24 = v23;
      *(_BYTE *)(v24 + 8) = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a5, 0, 1, v21);
      swift_bridgeObjectRetain(object);
      return;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  v25 = type metadata accessor for AssessmentAdditionalInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a5, 1, 1, v25);
}

uint64_t sub_100270940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(_QWORD, _QWORD, _QWORD);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(_QWORD, _QWORD, _QWORD);
  uint64_t v90;
  char v91;
  char v92;

  v3 = sub_100004828(&qword_1006375E0);
  v4 = __chkstk_darwin(v3);
  v75 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v74 = (uint64_t)&v69 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v69 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v69 - v11;
  v13 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AugmentedProfile(0) + 28));
  v15 = *v13;
  v14 = v13[1];
  v16 = (_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
  *v16 = v15;
  v16[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v17);
  sub_100038B24(a1, (uint64_t)v12, &qword_1006375E0);
  v18 = sub_100004828(&qword_100636840);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v12, 1, v18);
  v78 = a1;
  v79 = v1;
  v76 = v20;
  v77 = v19;
  if (v21 == 1)
  {
    sub_100008030((uint64_t)v12, &qword_1006375E0);
    v22 = 1;
  }
  else
  {
    JWSSignedJSON.payload.getter(v18);
    v23 = v81;
    v70 = v80;
    v24 = v19;
    v25 = v82;
    v26 = v83;
    v27 = v84;
    v28 = v85;
    v29 = v86;
    v69 = v87;
    v73 = v88;
    v72 = v89;
    v71 = v90;
    v22 = v91;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v18);
    v30 = v23;
    v20 = v76;
    v31 = v25;
    v32 = v26;
    a1 = v78;
    v1 = v79;
    sub_1001849FC(v70, v30, v31, v32, v27, v28, v29, v69);
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v72);
    swift_bridgeObjectRelease(v73);
  }
  *(_BYTE *)(v1 + 400) = v22;
  sub_100038B24(a1, (uint64_t)v10, &qword_1006375E0);
  if (v20(v10, 1, v18) == 1)
  {
    sub_100008030((uint64_t)v10, &qword_1006375E0);
    v33 = 1;
  }
  else
  {
    JWSSignedJSON.payload.getter(v18);
    v34 = v81;
    v70 = v80;
    v35 = v82;
    v36 = v83;
    v37 = v84;
    v38 = v85;
    v39 = v86;
    v40 = v87;
    v73 = v88;
    v72 = v89;
    v71 = v90;
    v33 = v92;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v10, v18);
    v41 = v34;
    v42 = v35;
    v20 = v76;
    v43 = v38;
    a1 = v78;
    v1 = v79;
    sub_1001849FC(v70, v41, v42, v36, v37, v43, v39, v40);
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v72);
    swift_bridgeObjectRelease(v73);
  }
  *(_BYTE *)(v1 + 401) = v33;
  v44 = v74;
  sub_100038B24(a1, v74, &qword_1006375E0);
  if (v20((char *)v44, 1, v18) == 1)
  {
    sub_100008030(v44, &qword_1006375E0);
    v45 = 0;
    v46 = 0;
  }
  else
  {
    JWSSignedJSON.payload.getter(v18);
    v45 = v80;
    v46 = v81;
    v47 = v82;
    v48 = v83;
    v50 = v84;
    v49 = v85;
    v51 = v44;
    v53 = v86;
    v52 = v87;
    v73 = v88;
    v54 = v90;
    v72 = v89;
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v51, v18);
    sub_1001AD7A0(v45, v46, v47, v48, v50, v49, v53, v52);
    sub_1001849FC(v45, v46, v47, v48, v50, v49, v53, v52);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v72);
    swift_bridgeObjectRelease(v73);
    if (v46)
    {
      swift_bridgeObjectRetain(v46);
      sub_1001849FC(v45, v46, v47, v48, v50, v49, v53, v52);
    }
    else
    {
      v45 = 0;
    }
    a1 = v78;
    v1 = v79;
    v20 = v76;
  }
  v55 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 112) = v45;
  *(_QWORD *)(v1 + 120) = v46;
  swift_bridgeObjectRelease(v55);
  v56 = v75;
  sub_100038B24(a1, v75, &qword_1006375E0);
  if (v20((char *)v56, 1, v18) == 1)
  {
    sub_100008030(v56, &qword_1006375E0);
    v57 = 0;
    v58 = 0;
  }
  else
  {
    JWSSignedJSON.payload.getter(v18);
    v59 = v56;
    v60 = v80;
    v61 = v81;
    v57 = v82;
    v58 = v83;
    v62 = v84;
    v63 = v85;
    v64 = v86;
    v65 = v87;
    v78 = v88;
    v66 = v90;
    v76 = (uint64_t (*)(char *, uint64_t, uint64_t))v89;
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v59, v18);
    sub_1001AD7A0(v60, v61, v57, v58, v62, v63, v64, v65);
    sub_1001849FC(v60, v61, v57, v58, v62, v63, v64, v65);
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease(v78);
    if (v61)
    {
      swift_bridgeObjectRetain(v58);
      sub_1001849FC(v60, v61, v57, v58, v62, v63, v64, v65);
    }
    else
    {
      v57 = 0;
      v58 = 0;
    }
    v1 = v79;
  }
  v67 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 128) = v57;
  *(_QWORD *)(v1 + 136) = v58;
  return swift_bridgeObjectRelease(v67);
}

uint64_t sub_100270EE8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));

  swift_release(*(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
  sub_100008030(v0 + 216, &qword_100636670);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
  sub_100007F78(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  sub_100008030(v0 + 288, &qword_100636670);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 336));
  sub_100007F78(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 360));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 392));
  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest, &qword_10063A860);
  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest, &qword_10063A868);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8));
  sub_10018343C(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory), *(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory + 56), *(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory + 64), *(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory + 72));
  return v0;
}

uint64_t sub_100271040()
{
  uint64_t v0;

  sub_100270EE8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100271064()
{
  return type metadata accessor for DIPODNator(0);
}

uint64_t type metadata accessor for DIPODNator(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_100639E30, (uint64_t)&nominal type descriptor for DIPODNator);
}

void sub_100271080(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[32];

  v6[0] = &unk_100526E68;
  v6[1] = &unk_100526E68;
  v6[2] = &unk_100526E68;
  v6[3] = &unk_100526E80;
  v6[4] = &unk_100526E68;
  v6[5] = &unk_100526E80;
  v6[6] = &unk_100526E80;
  v6[7] = &unk_100526E80;
  v6[8] = &unk_100526E98;
  v6[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[11] = &unk_100526E68;
  v6[12] = &unk_100526EB0;
  v6[13] = &unk_100526E80;
  v6[14] = &unk_100526EC8;
  v6[15] = &unk_100526EE0;
  v6[16] = &unk_100526E80;
  v6[17] = &unk_100526EF8;
  v6[18] = &unk_100526EE0;
  v6[19] = &unk_100526E80;
  v6[20] = &unk_100526EF8;
  v6[21] = &unk_100526E98;
  v6[22] = &unk_100526E98;
  v6[23] = &unk_100526E98;
  v6[24] = &unk_100526E68;
  v6[25] = &unk_100526EB0;
  v6[26] = &unk_100526EB0;
  v6[27] = &unk_100526EB0;
  sub_10003B6E4(319, &qword_100639E48, type metadata accessor for ORDRequest);
  if (v3 <= 0x3F)
  {
    v6[28] = *(_QWORD *)(v2 - 8) + 64;
    sub_10003B6E4(319, (unint64_t *)&qword_100639E50, type metadata accessor for OTDRequest);
    if (v5 <= 0x3F)
    {
      v6[29] = *(_QWORD *)(v4 - 8) + 64;
      v6[30] = &unk_100526E80;
      v6[31] = &unk_100526F10;
      swift_updateClassMetadata2(a1, 256, 32, v6, a1 + 80);
    }
  }
}

_QWORD *sub_1002711C0@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_1002711E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t *a13, unsigned __int8 a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[40];
  _QWORD v63[6];
  uint64_t v64;

  v60 = a8;
  v59 = a7;
  v57 = a5;
  v58 = a6;
  v56 = a4;
  v54 = a2;
  v55 = a3;
  v52 = a9;
  v53 = a1;
  v51 = a10;
  v50 = a13;
  v49 = a14;
  v48 = a12;
  v47 = a11;
  v64 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v15 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v46 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v14 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 0;
  v23 = v14 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  v44 = v14;
  v24 = type metadata accessor for ODNAssessmentResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v45 = OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_workQueue;
  v41 = sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  v25 = swift_retain(v14);
  static DispatchQoS.unspecified.getter(v25);
  v63[0] = _swiftEmptyArrayStorage;
  v26 = sub_100004790((unint64_t *)&qword_10062FF40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v43 = v26;
  v27 = sub_100004828((uint64_t *)&unk_100636400);
  v42 = v27;
  v28 = sub_100099FFC((unint64_t *)&qword_10062FF50, (uint64_t *)&unk_100636400, (uint64_t)&protocol conformance descriptor for [A]);
  v29 = v27;
  v30 = v17;
  dispatch thunk of SetAlgebra.init<A>(_:)(v63, v29, v28, v17, v26);
  v31 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
  v33 = v46;
  v32(v46, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v64);
  v34 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ALL, 0x8000000100558A10, v22, v19, v33, 0);
  v35 = v44;
  *(_QWORD *)(v44 + v45) = v34;
  v45 = OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_recomputeQueue;
  static DispatchQoS.userInitiated.getter();
  v63[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v63, v42, v28, v30, v43);
  v32(v33, v31, v64);
  v36 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000024, 0x8000000100558A30, v22, v19, v33, 0);
  *(_QWORD *)(v35 + v45) = v36;
  swift_release(v35);
  v37 = v47;
  sub_100038B24(v47, (uint64_t)v63, &qword_100636670);
  v38 = v48;
  sub_100038B24(v48, (uint64_t)v62, &qword_100636670);
  v39 = v61;
  sub_100263458(v53, v54, v55, v56, v57, v58, v59, v60, v52, v51, (uint64_t)v63, (uint64_t)v62, v50, v49);
  sub_100008030(v38, &qword_100636670);
  sub_100008030(v37, &qword_100636670);
  if (!v39)
    *(_BYTE *)(v35 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 0;
  return v35;
}

uint64_t sub_100271618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v11 = v10;
  v47 = a7;
  v48 = a8;
  v45 = a5;
  v46 = a6;
  v43 = a3;
  v44 = a4;
  v41 = a1;
  v42 = a2;
  v39 = a10;
  v40 = a9;
  v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v13 = *(_QWORD *)(v12 - 8);
  v33 = v12;
  __chkstk_darwin(v12);
  v38 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v10 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 0;
  v21 = v10 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  v22 = type metadata accessor for ODNAssessmentResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v37 = OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_workQueue;
  v36 = sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  v23 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v23);
  v49 = _swiftEmptyArrayStorage;
  v24 = sub_100004790((unint64_t *)&qword_10062FF40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v35 = v24;
  v25 = sub_100004828((uint64_t *)&unk_100636400);
  v34 = v25;
  v26 = sub_100099FFC((unint64_t *)&qword_10062FF50, (uint64_t *)&unk_100636400, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v25, v26, v15, v24);
  v27 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 104);
  v29 = v38;
  v28(v38, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v12);
  v30 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ALL, 0x8000000100558A10, v20, v17, v29, 0);
  *(_QWORD *)(v11 + v37) = v30;
  v37 = OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_recomputeQueue;
  static DispatchQoS.userInitiated.getter();
  v49 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v34, v26, v15, v35);
  v28(v29, v27, v33);
  v31 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000024, 0x8000000100558A30, v20, v17, v29, 0);
  *(_QWORD *)(v11 + v37) = v31;
  swift_release(v11);
  sub_10026456C(v41, v42, v43, v44, v45, v46, v47, v48, v40, v39);
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 0;
  return v11;
}

uint64_t sub_100271958(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  Swift::String v18;
  Swift::Bool v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  os_log_t v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  Swift::String v37;
  __int128 v38;
  id v39;
  uint64_t v41;
  os_log_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v48 = a2;
  v3 = type metadata accessor for Logger(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v41 - v8;
  v11 = *a1;
  v10 = a1[1];
  v12 = (_QWORD *)a1[2];
  v13 = a1[4];
  v14 = v12[2];
  v46 = v15;
  v47 = v7;
  if (v14)
  {
    v16 = v12[5];
    v49 = v12[4];
    swift_bridgeObjectRetain(v16);
  }
  else
  {
    v49 = 0;
    v16 = 0;
  }
  v17 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v18._object = (void *)0x8000000100559250;
  v18._countAndFlagsBits = 0xD00000000000001CLL;
  v19 = NSUserDefaults.internalBool(forKey:)(v18);

  if (v19 && v16)
  {
    swift_bridgeObjectRetain(v16);
    defaultLogger()(v21);
    swift_bridgeObjectRetain_n(v13, 2);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain_n(v12, 2);
    v22 = swift_bridgeObjectRetain_n(v10, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      v26 = swift_slowAlloc(22, -1);
      LODWORD(v44) = v25;
      v27 = v26;
      v43 = (uint8_t *)swift_slowAlloc(64, -1);
      *(_QWORD *)&v50 = v43;
      *(_DWORD *)v27 = 136315394;
      v42 = v23;
      swift_bridgeObjectRetain(v10);
      v52 = sub_1000E3AC8(v11, v10, (uint64_t *)&v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v27 + 4);
      swift_bridgeObjectRelease_n(v13, 2);
      swift_bridgeObjectRelease_n(v12, 2);
      swift_bridgeObjectRelease_n(v10, 3);
      *(_WORD *)(v27 + 12) = 2080;
      swift_bridgeObjectRetain(v16);
      v52 = sub_1000E3AC8(v49, v16, (uint64_t *)&v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v27 + 14);
      swift_bridgeObjectRelease_n(v16, 3);
      v28 = v42;
      _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v44, "ODN bindings user entered keyed-in attribute %s: %s", (uint8_t *)v27, 0x16u);
      v29 = v43;
      swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v16, 2);
      swift_bridgeObjectRelease_n(v13, 2);
      swift_bridgeObjectRelease_n(v12, 2);
      swift_bridgeObjectRelease_n(v10, 2);
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v47);
  }
  else
  {
    defaultLogger()(v20);
    swift_bridgeObjectRetain_n(v13, 2);
    swift_bridgeObjectRetain_n(v12, 2);
    v30 = swift_bridgeObjectRetain_n(v10, 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter(v31);
    v33 = os_log_type_enabled(v31, v32);
    v45 = v11;
    if (v33)
    {
      v34 = swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v50 = v44;
      v43 = (uint8_t *)v34;
      *(_DWORD *)v34 = 136315138;
      v42 = (os_log_t)(v34 + 4);
      swift_bridgeObjectRetain(v10);
      v52 = sub_1000E3AC8(v11, v10, (uint64_t *)&v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v42);
      swift_bridgeObjectRelease_n(v13, 2);
      swift_bridgeObjectRelease_n(v12, 2);
      swift_bridgeObjectRelease_n(v10, 3);
      v35 = v43;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "ODN bindings user entered keyed-in attribute %s", v43, 0xCu);
      v36 = v44;
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v13, 2);
      swift_bridgeObjectRelease_n(v12, 2);
      swift_bridgeObjectRelease_n(v10, 2);
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v47);
    if (!v16)
    {
      v50 = 0u;
      v51 = 0u;
      v11 = v45;
      goto LABEL_17;
    }
    v11 = v45;
  }
  *((_QWORD *)&v51 + 1) = &type metadata for String;
  *(_QWORD *)&v50 = v49;
  *((_QWORD *)&v50 + 1) = v16;
LABEL_17:
  swift_bridgeObjectRetain(v10);
  sub_10047E6E4((uint64_t)&v50, v11, v10);
  *(_QWORD *)&v50 = v11;
  *((_QWORD *)&v50 + 1) = v10;
  swift_bridgeObjectRetain(v10);
  v37._countAndFlagsBits = 0x657261685373692ELL;
  v37._object = (void *)0xE900000000000064;
  String.append(_:)(v37);
  v38 = v50;
  v39 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", 1);
  *((_QWORD *)&v51 + 1) = sub_10001CFF8(0, &qword_100636CA8, NSNumber_ptr);
  *(_QWORD *)&v50 = v39;
  return sub_10047E6E4((uint64_t)&v50, v38, *((uint64_t *)&v38 + 1));
}

void sub_100271ED4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  id v25;
  Swift::String v26;
  Swift::Bool v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  dispatch_semaphore_t v45;
  void *v46;
  dispatch_semaphore_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  os_log_type_t v77;
  uint8_t *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void **aBlock;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102[2];

  v86 = a3;
  v83 = a2;
  v93 = a1;
  v92 = type metadata accessor for DispatchWorkItemFlags(0);
  v84 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v87 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v88 = *(_QWORD *)(v6 - 8);
  v89 = v6;
  __chkstk_darwin(v6);
  v85 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100636690);
  __chkstk_darwin(v8);
  v91 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for ODNAssessmentResult(0);
  v90 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DIPSignpost(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Logger(0);
  v94 = *(_QWORD *)(v19 - 8);
  v95 = (char *)v19;
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v79 - v23;
  v25 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v26._object = (void *)0x8000000100558EA0;
  v26._countAndFlagsBits = 0xD000000000000012;
  v27 = NSUserDefaults.internalBool(forKey:)(v26);

  if (!v27)
  {
    v39 = v90;
    v79 = v22;
    v40 = (uint64_t)v91;
    v41 = v93;
    v80 = v11;
    v42 = v92;
    v82 = v16;
    v81 = v15;
    static DaemonSignposts.getVerificationResultFetchAssesssment.getter();
    DIPSignpost.init(_:)(v14);
    v43 = v97;
    if (*(_BYTE *)(v97 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) == 1)
    {
      v44 = v97 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
      swift_beginAccess(v97 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult, &aBlock, 0, 0);
      sub_100038B24(v44, v40, &qword_100636690);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v40, 1, v96) == 1)
      {
        sub_100008030(v40, &qword_100636690);
LABEL_17:
        v71 = v81;
        v72 = v82;
        sub_100274CD8(a4);
        DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
        v66 = *(void (**)(char *, uint64_t))(v72 + 8);
        v67 = v18;
        v68 = v71;
        goto LABEL_18;
      }
      v69 = (uint64_t)v80;
      v70 = sub_100038AE0(v40, (uint64_t)v80, type metadata accessor for ODNAssessmentResult);
      if (*(_QWORD *)(v69 + 120) == 1)
      {
        sub_100035DAC(v69, type metadata accessor for ODNAssessmentResult);
        goto LABEL_17;
      }
      v73 = v79;
      v74 = defaultLogger()(v70);
      v75 = Logger.logObject.getter(v74);
      v77 = static os_log_type_t.info.getter(v75, v76);
      if (os_log_type_enabled(v75, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v78 = 0;
        _os_log_impl((void *)&_mh_execute_header, v75, v77, "fetchAssessment: previous assessment contains error.", v78, 2u);
        swift_slowDealloc(v78, -1, -1);
      }

      (*(void (**)(char *, char *))(v94 + 8))(v73, v95);
      sub_100038AE0(v69, a4, type metadata accessor for ODNAssessmentResult);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      v66 = *(void (**)(char *, uint64_t))(v82 + 8);
      v67 = v18;
    }
    else
    {
      v95 = v18;
      *(_BYTE *)(v97 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 1;
      v45 = dispatch_semaphore_create(0);
      v46 = *(void **)(v43 + 368);
      *(_QWORD *)(v43 + 368) = v45;

      v47 = dispatch_semaphore_create(0);
      v48 = *(void **)(v43 + 376);
      *(_QWORD *)(v43 + 376) = v47;

      sub_1002661A8(v41, v83, 0);
      v102[0] = v49;
      v51 = v85;
      v50 = v86;
      if (v86)
      {
        v52 = *(_QWORD *)(v86 + 16);
        if (v52)
        {
          swift_bridgeObjectRetain(v86);
          v53 = (_OWORD *)(v50 + 56);
          do
          {
            aBlock = (void **)*((_QWORD *)v53 - 3);
            v99 = *(v53 - 1);
            v54 = *v53;
            v53 = (_OWORD *)((char *)v53 + 40);
            v100 = v54;
            sub_100271958((uint64_t *)&aBlock, (uint64_t)v102);
            --v52;
          }
          while (v52);
          swift_bridgeObjectRelease(v50);
        }
      }
      sub_100265DF4(v102);
      v55 = v102[0];
      v56 = swift_allocObject(&unk_10060CB50, 32, 7);
      *(_QWORD *)(v56 + 16) = v43;
      *(_QWORD *)(v56 + 24) = v55;
      *((_QWORD *)&v100 + 1) = sub_10027F74C;
      v101 = v56;
      aBlock = _NSConcreteStackBlock;
      *(_QWORD *)&v99 = 1107296256;
      *((_QWORD *)&v99 + 1) = sub_1004AB190;
      *(_QWORD *)&v100 = &unk_10060CB68;
      v57 = _Block_copy(&aBlock);
      v58 = swift_retain(v43);
      static DispatchQoS.unspecified.getter(v58);
      v102[0] = (uint64_t)_swiftEmptyArrayStorage;
      v59 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v60 = sub_100004828((uint64_t *)&unk_1006308D0);
      v61 = sub_100099FFC(&qword_100632390, (uint64_t *)&unk_1006308D0, (uint64_t)&protocol conformance descriptor for [A]);
      v62 = v87;
      dispatch thunk of SetAlgebra.init<A>(_:)(v102, v60, v61, v42, v59);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v51, v62, v57);
      _Block_release(v57);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v62, v42);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v51, v89);
      swift_release(v101);
      *(_QWORD *)(a4 + 32) = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      v63 = a4 + *(int *)(v96 + 44);
      v64 = type metadata accessor for AssessmentAdditionalInfo(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 1, 1, v64);
      *(_OWORD *)(a4 + 104) = 0u;
      *(_OWORD *)(a4 + 88) = 0u;
      *(_OWORD *)(a4 + 72) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_QWORD *)(a4 + 128) = 0;
      *(_QWORD *)(a4 + 136) = 0;
      *(_QWORD *)(a4 + 120) = 1;
      *(_BYTE *)(a4 + 144) = 0;
      *(_OWORD *)(a4 + 152) = 0u;
      *(_OWORD *)(a4 + 168) = 0u;
      *(_OWORD *)(a4 + 184) = 0u;
      *(_OWORD *)(a4 + 200) = 0u;
      *(_OWORD *)(a4 + 216) = 0u;
      v65 = v95;
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      v66 = *(void (**)(char *, uint64_t))(v82 + 8);
      v67 = v65;
    }
    v68 = v81;
LABEL_18:
    v66(v67, v68);
    return;
  }
  v29 = v97;
  v30 = defaultLogger()(v28);
  v31 = Logger.logObject.getter(v30);
  v33 = static os_log_type_t.info.getter(v31, v32);
  if (os_log_type_enabled(v31, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v33, "Skipping ODIN due to setting", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }

  (*(void (**)(char *, char *))(v94 + 8))(v24, v95);
  swift_beginAccess(v29 + 216, &aBlock, 0, 0);
  sub_100038B24(v29 + 216, a4, &qword_100636670);
  v36 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  v35 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
  v37 = a4 + *(int *)(v96 + 44);
  v38 = type metadata accessor for AssessmentAdditionalInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)(a4 + 136) = 0;
  *(_QWORD *)(a4 + 120) = 1;
  *(_BYTE *)(a4 + 144) = 0;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_QWORD *)(a4 + 216) = v36;
  *(_QWORD *)(a4 + 224) = v35;
  swift_bridgeObjectRetain(v35);
}

uint64_t sub_10027270C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v26[24];
  _OWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v4 = sub_100004828(&qword_100636668);
  __chkstk_darwin(v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_100004828(&qword_100636690);
  v8 = __chkstk_darwin(v7);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v8);
  v12 = &v26[-v11 - 8];
  v13 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v13);
  v15 = &v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = type metadata accessor for DIPSignpost(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = &v26[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  static DaemonSignposts.getVerificationResultFetchAssesssmentProofing.getter(v18);
  DIPSignpost.init(_:)(v15);
  memset(v27, 0, sizeof(v27));
  v28 = 1;
  v21 = type metadata accessor for AugmentedProfile(0);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 1, 1, v21);
  sub_100268E30(a2, 0, (uint64_t)v27, v6, 1, (uint64_t)v12);
  sub_100008030((uint64_t)v6, &qword_100636668);
  v22 = type metadata accessor for ODNAssessmentResult(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 0, 1, v22);
  sub_1000A1F54((uint64_t)v12, (uint64_t)v10, &qword_100636690);
  v23 = a1 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  swift_beginAccess(v23, v26, 33, 0);
  sub_100184E1C((uint64_t)v10, v23, &qword_100636690);
  swift_endAccess(v26);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 8))(v20, v16);
}

void sub_10027295C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  id v28;
  Swift::String v29;
  Swift::Bool v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  dispatch_semaphore_t v50;
  void *v51;
  dispatch_semaphore_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  os_log_type_t v88;
  uint8_t *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD aBlock[5];
  uint64_t v118;

  v109 = a2;
  v110 = a3;
  v99 = a1;
  v113 = a4;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v104 = *(_QWORD *)(v4 - 8);
  v105 = v4;
  __chkstk_darwin(v4);
  v103 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for DispatchQoS(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100636688);
  v97 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v98 = v8;
  v95 = (uint64_t)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_100636668);
  v96 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v96 + 64);
  __chkstk_darwin(v9);
  v108 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_100636690);
  __chkstk_darwin(v11);
  v107 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for ODNAssessmentResult(0);
  v106 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v14 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DIPSignpost(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Logger(0);
  v111 = *(_QWORD *)(v22 - 8);
  v112 = (char *)v22;
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v90 - v26;
  v28 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v29._object = (void *)0x8000000100558EA0;
  v29._countAndFlagsBits = 0xD000000000000012;
  v30 = NSUserDefaults.internalBool(forKey:)(v29);

  if (!v30)
  {
    v43 = v106;
    v90 = v25;
    v44 = (uint64_t)v107;
    v92 = v10;
    v45 = (uint64_t)v108;
    v91 = v14;
    v47 = v109;
    v46 = v110;
    v94 = v19;
    v93 = v18;
    static DaemonSignposts.getVerificationResultFetchAssesssment.getter();
    DIPSignpost.init(_:)(v17);
    v48 = v115;
    if (*(_BYTE *)(v115 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) == 1)
    {
      v49 = v115 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
      swift_beginAccess(v115 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult, aBlock, 0, 0);
      sub_100038B24(v49, v44, &qword_100636690);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v44, 1, v114) == 1)
      {
        sub_100008030(v44, &qword_100636690);
LABEL_12:
        v82 = v93;
        v83 = v94;
        sub_100274CD8(v113);
        DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
        v77 = *(void (**)(char *, uint64_t))(v83 + 8);
        v78 = v21;
        v79 = v82;
        goto LABEL_13;
      }
      v80 = (uint64_t)v91;
      v81 = sub_100038AE0(v44, (uint64_t)v91, type metadata accessor for ODNAssessmentResult);
      if (*(_QWORD *)(v80 + 120) == 1)
      {
        sub_100035DAC(v80, type metadata accessor for ODNAssessmentResult);
        goto LABEL_12;
      }
      v84 = v90;
      v85 = defaultLogger()(v81);
      v86 = Logger.logObject.getter(v85);
      v88 = static os_log_type_t.info.getter(v86, v87);
      if (os_log_type_enabled(v86, v88))
      {
        v89 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v89 = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, v88, "fetchAssessment: previous assessment contains error.", v89, 2u);
        swift_slowDealloc(v89, -1, -1);
      }

      (*(void (**)(char *, char *))(v111 + 8))(v84, v112);
      sub_100038AE0(v80, v113, type metadata accessor for ODNAssessmentResult);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      v77 = *(void (**)(char *, uint64_t))(v94 + 8);
      v78 = v21;
    }
    else
    {
      *(_BYTE *)(v115 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 1;
      v50 = dispatch_semaphore_create(0);
      v51 = *(void **)(v48 + 368);
      *(_QWORD *)(v48 + 368) = v50;

      v52 = dispatch_semaphore_create(0);
      v53 = *(void **)(v48 + 376);
      *(_QWORD *)(v48 + 376) = v52;

      v111 = *(_QWORD *)(v48 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_workQueue);
      v54 = v45;
      sub_100038B24(v46, v45, &qword_100636668);
      v55 = v95;
      sub_100038B24(v47, v95, &qword_100636688);
      v56 = *(unsigned __int8 *)(v96 + 80);
      v57 = (v56 + 16) & ~v56;
      v58 = (v92 + v57 + 7) & 0xFFFFFFFFFFFFFFF8;
      v59 = *(unsigned __int8 *)(v97 + 80);
      v60 = (v59 + v58 + 8) & ~v59;
      v112 = v21;
      v61 = (v98 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
      v62 = swift_allocObject(&unk_10060CB00, v61 + 8, v56 | v59 | 7);
      sub_1000A1F54(v54, v62 + v57, &qword_100636668);
      *(_QWORD *)(v62 + v58) = v48;
      sub_1000A1F54(v55, v62 + v60, &qword_100636688);
      v63 = v99;
      *(_QWORD *)(v62 + v61) = v99;
      aBlock[4] = sub_10027F630;
      v118 = v62;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1004AB190;
      aBlock[3] = &unk_10060CB18;
      v64 = _Block_copy(aBlock);
      swift_retain(v48);
      swift_bridgeObjectRetain(v63);
      v65 = v100;
      static DispatchQoS.unspecified.getter(v66);
      v116 = _swiftEmptyArrayStorage;
      v67 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v68 = sub_100004828((uint64_t *)&unk_1006308D0);
      v69 = sub_100099FFC(&qword_100632390, (uint64_t *)&unk_1006308D0, (uint64_t)&protocol conformance descriptor for [A]);
      v70 = v103;
      v71 = v105;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v116, v68, v69, v105, v67);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v65, v70, v64);
      _Block_release(v64);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v70, v71);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v65, v102);
      swift_release(v118);
      v73 = v113;
      v72 = v114;
      *(_QWORD *)(v113 + 32) = 0;
      *(_OWORD *)v73 = 0u;
      *(_OWORD *)(v73 + 16) = 0u;
      v74 = v73 + *(int *)(v72 + 44);
      v75 = type metadata accessor for AssessmentAdditionalInfo(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v74, 1, 1, v75);
      *(_OWORD *)(v73 + 104) = 0u;
      *(_OWORD *)(v73 + 88) = 0u;
      *(_OWORD *)(v73 + 72) = 0u;
      *(_OWORD *)(v73 + 56) = 0u;
      *(_OWORD *)(v73 + 40) = 0u;
      *(_QWORD *)(v73 + 128) = 0;
      *(_QWORD *)(v73 + 136) = 0;
      *(_QWORD *)(v73 + 120) = 1;
      *(_BYTE *)(v73 + 144) = 0;
      *(_OWORD *)(v73 + 152) = 0u;
      *(_OWORD *)(v73 + 168) = 0u;
      *(_OWORD *)(v73 + 184) = 0u;
      *(_OWORD *)(v73 + 200) = 0u;
      *(_OWORD *)(v73 + 216) = 0u;
      v76 = v112;
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      v77 = *(void (**)(char *, uint64_t))(v94 + 8);
      v78 = v76;
    }
    v79 = v93;
LABEL_13:
    v77(v78, v79);
    return;
  }
  v32 = v115;
  v33 = defaultLogger()(v31);
  v34 = Logger.logObject.getter(v33);
  v36 = static os_log_type_t.info.getter(v34, v35);
  if (os_log_type_enabled(v34, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v36, "Skipping ODIN due to setting", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

  (*(void (**)(char *, char *))(v111 + 8))(v27, v112);
  swift_beginAccess(v32 + 216, aBlock, 0, 0);
  v38 = v113;
  sub_100038B24(v32 + 216, v113, &qword_100636670);
  v40 = *(_QWORD *)(v32 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  v39 = *(_QWORD *)(v32 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
  v41 = v38 + *(int *)(v114 + 44);
  v42 = type metadata accessor for AssessmentAdditionalInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 40) = 0u;
  *(_QWORD *)(v38 + 128) = 0;
  *(_QWORD *)(v38 + 136) = 0;
  *(_QWORD *)(v38 + 120) = 1;
  *(_BYTE *)(v38 + 144) = 0;
  *(_OWORD *)(v38 + 152) = 0u;
  *(_OWORD *)(v38 + 168) = 0u;
  *(_OWORD *)(v38 + 184) = 0u;
  *(_OWORD *)(v38 + 200) = 0u;
  *(_QWORD *)(v38 + 216) = v40;
  *(_QWORD *)(v38 + 224) = v39;
  swift_bridgeObjectRetain(v39);
}

uint64_t sub_100273298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  unint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  char v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  id v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint8_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t (*v152)(char *, uint64_t, uint64_t);
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  char *v160;
  char v161[8];
  char v162[8];
  __int128 v163;
  _BYTE v164[24];
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned __int8 v171;
  char v172[8];
  uint64_t v173;

  v141 = a4;
  v151 = a3;
  *(_QWORD *)&v158 = a1;
  v5 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v5);
  v140 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for DIPSignpost(0);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v142 = (char *)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100636688);
  __chkstk_darwin(v8);
  v150 = (uint64_t)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for DIPPregeneratedAssessment(0);
  v147 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v139 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for DIPError.Code(0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v136 = (char *)&v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100636690);
  v13 = __chkstk_darwin(v12);
  v155 = (uint64_t)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v154 = (uint64_t)&v132 - v15;
  v146 = sub_100004828(&qword_100636840);
  v145 = *(_QWORD *)(v146 - 8);
  v16 = __chkstk_darwin(v146);
  v137 = (char *)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v133 = (char *)&v132 - v18;
  v159 = type metadata accessor for Logger(0);
  v157 = *(_QWORD *)(v159 - 8);
  v19 = __chkstk_darwin(v159);
  v153 = (char *)&v132 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v160 = (char *)&v132 - v22;
  __chkstk_darwin(v21);
  v138 = (char *)&v132 - v23;
  v24 = type metadata accessor for AugmentedProfile(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (uint8_t *)&v132 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v132 - v29;
  v31 = sub_100004828(&qword_100636668);
  v32 = __chkstk_darwin(v31);
  v148 = (uint8_t *)&v132 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v132 - v35;
  v37 = __chkstk_darwin(v34);
  v39 = (char *)&v132 - v38;
  __chkstk_darwin(v37);
  v41 = (char *)&v132 - v40;
  v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  v42((char *)&v132 - v40, 1, 1, v24);
  sub_100038B24(v158, (uint64_t)v39, &qword_100636668);
  v152 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v43 = v152(v39, 1, v24);
  v156 = v41;
  *(_QWORD *)&v158 = v24;
  if (v43 != 1)
  {
    sub_100038AE0((uint64_t)v39, (uint64_t)v30, type metadata accessor for AugmentedProfile);
    sub_100008030((uint64_t)v41, &qword_100636668);
    sub_100035DE8((uint64_t)v30, (uint64_t)v41, type metadata accessor for AugmentedProfile);
    v42(v41, 0, 1, v24);
    sub_100270940((uint64_t)v30);
    v45 = sub_100035DAC((uint64_t)v30, type metadata accessor for AugmentedProfile);
    v47 = a2;
    goto LABEL_5;
  }
  sub_100008030((uint64_t)v39, &qword_100636668);
  swift_retain(a2);
  v44 = sub_100004828((uint64_t *)&unk_100632610);
  runAsyncAndBlock<A>(file:function:line:_:)(&v163, 0xD000000000000019, 0x8000000100558A60, 0xD000000000000055, 0x80000001005591D0, 1163, &unk_10063A858, a2, v44);
  v45 = swift_release(a2);
  v46 = *((_QWORD *)&v163 + 1);
  v47 = a2;
  if (*((_QWORD *)&v163 + 1))
  {
    sub_1001A5908(v163, *((uint64_t *)&v163 + 1), v28);
    sub_100270940((uint64_t)v28);
    sub_100038AE0((uint64_t)v28, (uint64_t)v36, type metadata accessor for AugmentedProfile);
    swift_bridgeObjectRelease(v46);
    v24 = v158;
    v42(v36, 0, 1, v158);
    v41 = v156;
    v45 = sub_100184E1C((uint64_t)v36, (uint64_t)v156, &qword_100636668);
LABEL_5:
    v48 = v159;
    goto LABEL_7;
  }
  v41 = v156;
  v48 = v159;
  v24 = v158;
LABEL_7:
  v49 = v160;
  v50 = defaultLogger()(v45);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = 4271950;
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = swift_slowAlloc(32, -1);
    v173 = v55;
    *(_DWORD *)v54 = 136315138;
    v56 = swift_beginAccess(v41, v161, 0, 0);
    v57 = v24;
    v58 = v152;
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v152)(v41, 1, v57, v56))
    {
      v59 = v47;
      v60 = 0xE300000000000000;
    }
    else
    {
      v63 = v41;
      v59 = v47;
      v64 = v145;
      v65 = v146;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v63, 1, v146))
      {
        v60 = 0xE300000000000000;
      }
      else
      {
        v66 = v133;
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v133, v63, v65);
        JWSSignedJSON.payload.getter(v65);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v65);
        v67 = v168;
        v68 = v169;
        v69 = v170;
        v70 = v171;
        sub_1001849FC(v163, *((uint64_t *)&v163 + 1), *(uint64_t *)v164, *(uint64_t *)&v164[8], *(uint64_t *)&v164[16], v165, v166, v167);
        swift_bridgeObjectRelease(v69);
        swift_bridgeObjectRelease(v68);
        swift_bridgeObjectRelease(v67);
        v71 = 0x800000010053A940;
        v72 = 0xD000000000000018;
        if (v70 != 1)
        {
          v72 = 0x6146737961776C61;
          v71 = 0xEE006B6361626C6CLL;
        }
        if (v70)
          v53 = v72;
        else
          v53 = 0x746C7561666564;
        if (v70)
          v60 = v71;
        else
          v60 = 0xE700000000000000;
      }
    }
    v73 = v160;
    *(_QWORD *)&v163 = sub_1000E3AC8(v53, v60, &v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, (char *)&v163 + 8, v54 + 4);
    swift_bridgeObjectRelease(v60);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "fetchAssessment: requirePregenerated set at : %s", v54, 0xCu);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);

    v61 = *(void (**)(char *, uint64_t))(v157 + 8);
    v48 = v159;
    v61(v73, v159);
    v47 = v59;
    v41 = v156;
    v62 = v153;
  }
  else
  {

    v61 = *(void (**)(char *, uint64_t))(v157 + 8);
    v61(v49, v48);
    v62 = v153;
    v58 = v152;
  }
  v74 = swift_beginAccess(v41, &v173, 0, 0);
  if (((unsigned int (*)(char *, uint64_t, _QWORD, __n128))v58)(v41, 1, v158, v74)
    || (*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v41, 1, v146))
  {
    goto LABEL_24;
  }
  v98 = v41;
  v99 = v47;
  v100 = v145;
  v101 = v137;
  v102 = v146;
  (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v137, v98, v146);
  JWSSignedJSON.payload.getter(v102);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v102);
  v103 = v168;
  v104 = v169;
  v105 = v170;
  v106 = v171;
  sub_1001849FC(v163, *((uint64_t *)&v163 + 1), *(uint64_t *)v164, *(uint64_t *)&v164[8], *(uint64_t *)&v164[16], v165, v166, v167);
  swift_bridgeObjectRelease(v105);
  swift_bridgeObjectRelease(v104);
  swift_bridgeObjectRelease(v103);
  if (v106)
  {
    if (v106 != 1)
    {
      swift_bridgeObjectRelease(0xEE006B6361626C6CLL);
      v47 = v99;
      goto LABEL_37;
    }
    v107 = 0x800000010053A940;
    v108 = 0xD000000000000018;
  }
  else
  {
    v108 = 0x746C7561666564;
    v107 = 0xE700000000000000;
  }
  v47 = v99;
  v109 = _stringCompareWithSmolCheck(_:_:expecting:)(v108, v107, 0x6146737961776C61, 0xEE006B6361626C6CLL, 0);
  swift_bridgeObjectRelease(v107);
  v41 = v156;
  if ((v109 & 1) == 0)
  {
LABEL_24:
    v75 = v150;
    sub_100038B24(v151, v150, &qword_100636688);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v75, 1, v149) == 1)
    {
      v76 = sub_100008030(v75, &qword_100636688);
      v77 = defaultLogger()(v76);
      v78 = Logger.logObject.getter(v77);
      v80 = static os_log_type_t.info.getter(v78, v79);
      if (os_log_type_enabled(v78, v80))
      {
        v81 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v81 = 0;
        _os_log_impl((void *)&_mh_execute_header, v78, v80, "No Pregenerated available, computing a new one", v81, 2u);
        swift_slowDealloc(v81, -1, -1);
      }

      v82 = ((uint64_t (*)(char *, uint64_t))v61)(v62, v48);
      v83 = v140;
      static DaemonSignposts.getVerificationResultFetchAssesssmentProofing.getter(v82);
      v84 = v142;
      DIPSignpost.init(_:)(v83);
      v163 = 0u;
      *(_OWORD *)v164 = 0u;
      v165 = 0;
      v166 = 0;
      *(_QWORD *)&v164[16] = 1;
      LOBYTE(v167) = 0;
      v85 = v148;
      sub_100038B24((uint64_t)v41, (uint64_t)v148, &qword_100636668);
      v86 = v154;
      sub_100268E30(v141, 0, (uint64_t)&v163, v85, 1, v154);
      sub_100008030((uint64_t)v85, &qword_100636668);
      v87 = type metadata accessor for ODNAssessmentResult(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v86, 0, 1, v87);
      v88 = v86;
      v89 = v155;
      sub_1000A1F54(v88, v155, &qword_100636690);
      v90 = v47 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
      swift_beginAccess(v47 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult, v172, 33, 0);
      sub_100184E1C(v89, v90, &qword_100636690);
      swift_endAccess(v172);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(char *, uint64_t))(v143 + 8))(v84, v144);
    }
    else
    {
      v91 = v139;
      sub_100038AE0(v75, v139, type metadata accessor for DIPPregeneratedAssessment);
      v92 = (uint64_t)v148;
      sub_100038B24((uint64_t)v41, (uint64_t)v148, &qword_100636668);
      v93 = v154;
      sub_100267C88(v91, v92, v154);
      sub_100008030(v92, &qword_100636668);
      sub_100035DAC(v91, type metadata accessor for DIPPregeneratedAssessment);
      v94 = type metadata accessor for ODNAssessmentResult(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56))(v93, 0, 1, v94);
      v95 = v155;
      sub_1000A1F54(v93, v155, &qword_100636690);
      v96 = v47 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
      swift_beginAccess(v47 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult, &v163, 33, 0);
      sub_100184E1C(v95, v96, &qword_100636690);
      swift_endAccess(&v163);
    }
    return sub_100008030((uint64_t)v41, &qword_100636668);
  }
LABEL_37:
  v110 = v136;
  (*(void (**)(char *, _QWORD, uint64_t))(v134 + 104))(v136, enum case for DIPError.Code.odnForcedFallback(_:), v135);
  v111 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v112 = type metadata accessor for DIPError(0);
  v113 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v114 = swift_allocError(v112, v113, 0, 0);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100559230, 0, v110, 0, v111, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD000000000000055, 0x80000001005591D0, 1175);
  sub_1002659F0(v114, 2, (uint64_t)&v163);
  v160 = (char *)v163;
  v115 = v47;
  v159 = *((_QWORD *)&v163 + 1);
  v116 = v164[0];
  v158 = *(_OWORD *)&v164[8];
  v117 = v165;
  v118 = v166;
  v119 = v167;
  swift_errorRelease(v114);
  swift_beginAccess(v47 + 216, v172, 0, 0);
  v120 = v47 + 216;
  v121 = v154;
  sub_100038B24(v120, v154, &qword_100636670);
  v123 = *(_QWORD *)(v115 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  v122 = *(_QWORD *)(v115 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
  v124 = type metadata accessor for ODNAssessmentResult(0);
  v125 = v121 + *(int *)(v124 + 44);
  v126 = type metadata accessor for AssessmentAdditionalInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 56))(v125, 1, 1, v126);
  *(_OWORD *)(v121 + 72) = 0u;
  *(_OWORD *)(v121 + 56) = 0u;
  *(_OWORD *)(v121 + 40) = 0u;
  v127 = v159;
  *(_QWORD *)(v121 + 88) = v160;
  *(_QWORD *)(v121 + 96) = v127;
  *(_QWORD *)(v121 + 104) = v116;
  *(_OWORD *)(v121 + 112) = v158;
  *(_QWORD *)(v121 + 128) = v117;
  *(_QWORD *)(v121 + 136) = v118;
  *(_BYTE *)(v121 + 144) = v119;
  *(_OWORD *)(v121 + 152) = 0u;
  *(_OWORD *)(v121 + 168) = 0u;
  *(_OWORD *)(v121 + 184) = 0u;
  *(_OWORD *)(v121 + 200) = 0u;
  *(_QWORD *)(v121 + 216) = v123;
  *(_QWORD *)(v121 + 224) = v122;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 56))(v121, 0, 1, v124);
  v128 = v155;
  sub_1000A1F54(v121, v155, &qword_100636690);
  v129 = v115 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  swift_beginAccess(v115 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult, v162, 33, 0);
  swift_bridgeObjectRetain(v122);
  sub_100184E1C(v128, v129, &qword_100636690);
  swift_endAccess(v162);
  v130 = *(void **)(v115 + 376);
  v41 = v156;
  if (v130)
  {
    v131 = v130;
    OS_dispatch_semaphore.signal()();

  }
  return sub_100008030((uint64_t)v41, &qword_100636668);
}

void sub_100274350(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  id v24;
  Swift::String v25;
  Swift::Bool v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  dispatch_semaphore_t v52;
  void *v53;
  dispatch_semaphore_t v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD aBlock[5];
  uint64_t v92;

  v84 = a1;
  v85 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v82 = *(_QWORD *)(v4 - 8);
  v83 = v4;
  __chkstk_darwin(v4);
  v81 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v79 = *(_QWORD *)(v6 - 8);
  v80 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_100636690);
  __chkstk_darwin(v9);
  v11 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for ODNAssessmentResult(0);
  v12 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v87 = *(_QWORD *)(v15 - 8);
  v88 = v15;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v74 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v74 - v22;
  v24 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v25._object = (void *)0x8000000100558EA0;
  v25._countAndFlagsBits = 0xD000000000000012;
  v26 = NSUserDefaults.internalBool(forKey:)(v25);

  if (v26)
  {
    v28 = defaultLogger()(v27);
    v29 = Logger.logObject.getter(v28);
    v31 = static os_log_type_t.info.getter(v29, v30);
    if (os_log_type_enabled(v29, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v31, "Skipping ODIN due to setting", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v87 + 8))(v23, v88);
    v33 = v89;
    swift_beginAccess(v89 + 216, aBlock, 0, 0);
    sub_100038B24(v33 + 216, a3, &qword_100636670);
    v35 = *(_QWORD *)(v33 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
    v34 = *(_QWORD *)(v33 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
    v36 = a3 + *(int *)(v86 + 44);
    v37 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 128) = 0;
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 120) = 1;
    *(_BYTE *)(a3 + 144) = 0;
    *(_OWORD *)(a3 + 152) = 0u;
    *(_OWORD *)(a3 + 168) = 0u;
    *(_OWORD *)(a3 + 184) = 0u;
    *(_OWORD *)(a3 + 200) = 0u;
    *(_QWORD *)(a3 + 216) = v35;
    *(_QWORD *)(a3 + 224) = v34;
    swift_bridgeObjectRetain(v34);
    return;
  }
  v77 = v12;
  v78 = v11;
  v75 = v18;
  v76 = v14;
  v38 = v83;
  v39 = defaultLogger()(v27);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.debug.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Fetching identity profile assessment", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

  v43 = *(void (**)(char *, uint64_t))(v87 + 8);
  v44 = v21;
  v45 = v88;
  v43(v44, v88);
  v46 = v89;
  v48 = v84;
  v47 = v85;
  if (*(_BYTE *)(v89 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) != 1)
  {
    *(_BYTE *)(v89 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 1;
    v52 = dispatch_semaphore_create(0);
    v53 = *(void **)(v46 + 368);
    *(_QWORD *)(v46 + 368) = v52;

    v54 = dispatch_semaphore_create(0);
    v55 = *(void **)(v46 + 376);
    *(_QWORD *)(v46 + 376) = v54;

    v56 = sub_10027B28C(v48, v47);
    v57 = swift_allocObject(&unk_10060C9E8, 32, 7);
    *(_QWORD *)(v57 + 16) = v46;
    *(_QWORD *)(v57 + 24) = v56;
    aBlock[4] = sub_10027F340;
    v92 = v57;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004AB190;
    aBlock[3] = &unk_10060CA00;
    v58 = _Block_copy(aBlock);
    v59 = swift_retain(v46);
    static DispatchQoS.unspecified.getter(v59);
    v90 = _swiftEmptyArrayStorage;
    v60 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v61 = sub_100004828((uint64_t *)&unk_1006308D0);
    v62 = sub_100099FFC(&qword_100632390, (uint64_t *)&unk_1006308D0, (uint64_t)&protocol conformance descriptor for [A]);
    v63 = v81;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v90, v61, v62, v38, v60);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v63, v58);
    _Block_release(v58);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v63, v38);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v8, v80);
    swift_release(v92);
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    v64 = a3 + *(int *)(v86 + 44);
    v65 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 1, 1, v65);
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 128) = 0;
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 120) = 1;
    *(_BYTE *)(a3 + 144) = 0;
    *(_OWORD *)(a3 + 152) = 0u;
    *(_OWORD *)(a3 + 168) = 0u;
    *(_OWORD *)(a3 + 184) = 0u;
    *(_OWORD *)(a3 + 200) = 0u;
    *(_OWORD *)(a3 + 216) = 0u;
    return;
  }
  v49 = v89 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  swift_beginAccess(v89 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult, aBlock, 0, 0);
  v50 = v49;
  v51 = (uint64_t)v78;
  sub_100038B24(v50, (uint64_t)v78, &qword_100636690);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v51, 1, v86) == 1)
  {
    sub_100008030(v51, &qword_100636690);
LABEL_13:
    sub_100274CD8(a3);
    return;
  }
  v66 = (uint64_t)v76;
  v67 = sub_100038AE0(v51, (uint64_t)v76, type metadata accessor for ODNAssessmentResult);
  if (*(_QWORD *)(v66 + 120) == 1)
  {
    sub_100035DAC(v66, type metadata accessor for ODNAssessmentResult);
    goto LABEL_13;
  }
  v68 = v75;
  v69 = defaultLogger()(v67);
  v70 = Logger.logObject.getter(v69);
  v72 = static os_log_type_t.info.getter(v70, v71);
  if (os_log_type_enabled(v70, v72))
  {
    v73 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v73 = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, v72, "fetchAssessment: previous assessment contains error.", v73, 2u);
    swift_slowDealloc(v73, -1, -1);
  }

  v43(v68, v45);
  sub_100038AE0(v66, a3, type metadata accessor for ODNAssessmentResult);
}

uint64_t sub_100274A88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v26[24];
  _OWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v4 = sub_100004828(&qword_100636668);
  __chkstk_darwin(v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_100004828(&qword_100636690);
  v8 = __chkstk_darwin(v7);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v8);
  v12 = &v26[-v11 - 8];
  v13 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v13);
  v15 = &v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = type metadata accessor for DIPSignpost(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = &v26[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  static DaemonSignposts.getIdentityProofingAssessment.getter(v18);
  DIPSignpost.init(_:)(v15);
  memset(v27, 0, sizeof(v27));
  v28 = 1;
  v21 = type metadata accessor for AugmentedProfile(0);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 1, 1, v21);
  sub_100268E30(a2, 0, (uint64_t)v27, v6, 1, (uint64_t)v12);
  sub_100008030((uint64_t)v6, &qword_100636668);
  v22 = type metadata accessor for ODNAssessmentResult(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 0, 1, v22);
  sub_1000A1F54((uint64_t)v12, (uint64_t)v10, &qword_100636690);
  v23 = a1 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  swift_beginAccess(v23, v26, 33, 0);
  sub_100184E1C((uint64_t)v10, v23, &qword_100636690);
  swift_endAccess(v26);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 8))(v20, v16);
}

uint64_t sub_100274CD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unint64_t v32;
  void *v33;
  id v34;
  uint64_t (*v35)();
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  char *v56;
  uint64_t v57;
  void *v58;
  uint64_t (*v59)();
  uint64_t v60;
  uint64_t v61;
  char v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v79;
  uint64_t (*v80)();
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  id v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)();
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void **v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void **aBlock;
  uint64_t v109;
  uint64_t (*v110)(uint64_t);
  void *v111;
  uint64_t (*v112)();
  uint64_t v113;
  uint64_t v114;
  char v115;

  v2 = v1;
  v97 = type metadata accessor for DIPError.Code(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v99 = (uint64_t (*)())((char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Logger(0);
  v101 = *(_QWORD *)(v5 - 8);
  v102 = v5;
  v6 = __chkstk_darwin(v5);
  v100 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v105 = (unint64_t)&v91 - v9;
  __chkstk_darwin(v8);
  v93 = (char *)&v91 - v10;
  v103 = type metadata accessor for ODNAssessmentResult(0);
  v98 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v92 = (uint64_t)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100636690);
  v13 = __chkstk_darwin(v12);
  v94 = (uint64_t)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v95 = (char *)&v91 - v15;
  v16 = sub_100004828((uint64_t *)&unk_1006325A0);
  v17 = sub_100004828((uint64_t *)&unk_100633440);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v16, v21 + 2 * v19, v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_1005208D0;
  v23 = v22 + v21;
  v24 = (_QWORD *)(v22 + v21 + *(int *)(v17 + 48));
  v25 = enum case for DIPError.PropertyKey.spWorkflowID(_:);
  v26 = type metadata accessor for DIPError.PropertyKey(0);
  v27 = *(void (**)(void))(*(_QWORD *)(v26 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v27)(v23, v25, v26);
  v28 = *(_QWORD *)(v2 + 32);
  v29 = *(_QWORD *)(v2 + 40);
  v24[3] = &type metadata for String;
  *v24 = v28;
  v24[1] = v29;
  v30 = v23 + v19 + *(int *)(v17 + 48);
  v27();
  v31 = *(_BYTE *)(v2 + 208);
  *(_QWORD *)(v30 + 24) = &type metadata for DIPState;
  *(_BYTE *)v30 = v31;
  swift_bridgeObjectRetain(v29);
  v32 = sub_10011D314(v22);
  v104 = (void **)v2;
  v33 = *(void **)(v2 + 376);
  if (!v33)
  {
    v35 = v99;
    (*(void (**)(uint64_t (*)(), _QWORD, uint64_t))(v96 + 104))(v99, enum case for DIPError.Code.odnSemaphoreNotSet(_:), v97);
    v36 = type metadata accessor for DIPError(0);
    v37 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v38 = swift_allocError(v36, v37, 0, 0);
    v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100558E30, 0, v35, 0, v32, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD00000000000001FLL, 0x8000000100558E50, 1232);
    v40 = swift_willThrow(v39);
    v98 = 0;
    v99 = 0;
LABEL_4:
    v41 = (char *)v105;
    defaultLogger()(v40);
    swift_errorRetain(v38);
    v42 = swift_errorRetain(v38);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = (void **)swift_slowAlloc(32, -1);
      aBlock = v46;
      *(_DWORD *)v45 = 136446210;
      v106 = v38;
      swift_errorRetain(v38);
      v47 = sub_100004828((uint64_t *)&unk_100633430);
      v48 = String.init<A>(reflecting:)(&v106, v47);
      v50 = v49;
      v106 = sub_1000E3AC8(v48, v49, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v45 + 4);
      swift_bridgeObjectRelease(v50);
      swift_errorRelease(v38);
      swift_errorRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "waitAndGetAssessmentInProcess: ignoring failed to generate assessment data. error %{public}s", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      v51 = *(uint64_t (**)(char *, uint64_t))(v101 + 8);
      v52 = (char *)v105;
    }
    else
    {
      swift_errorRelease(v38);
      swift_errorRelease(v38);

      v51 = *(uint64_t (**)(char *, uint64_t))(v101 + 8);
      v52 = v41;
    }
    v53 = v102;
    v54 = v51(v52, v102);
    v55 = v104;
    v56 = v100;
    defaultLogger()(v54);
    DIPRecordError(_:message:log:)(v38, 0, 0xE000000000000000, v56);
    v51(v56, v53);
    sub_1002659F0(v38, 2, (uint64_t)&aBlock);
    v57 = v109;
    v104 = aBlock;
    v105 = v110;
    v58 = v111;
    v59 = v112;
    v60 = v113;
    v61 = v114;
    v62 = v115;
    v63 = v55[46];
    if (v63)
    {
      v64 = v63;
      OS_dispatch_semaphore.signal()();
      swift_errorRelease(v38);

    }
    else
    {
      swift_errorRelease(v38);
    }
    swift_beginAccess(v55 + 27, &v106, 0, 0);
    sub_100038B24((uint64_t)(v55 + 27), a1, &qword_100636670);
    v66 = *(uint64_t *)((char *)v55 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
    v65 = *(uint64_t *)((char *)v55 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
    v67 = a1 + *(int *)(v103 + 44);
    v68 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 1, 1, v68);
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_QWORD *)(a1 + 88) = v104;
    *(_QWORD *)(a1 + 96) = v57;
    *(_QWORD *)(a1 + 104) = v105;
    *(_QWORD *)(a1 + 112) = v58;
    *(_QWORD *)(a1 + 120) = v59;
    *(_QWORD *)(a1 + 128) = v60;
    *(_QWORD *)(a1 + 136) = v61;
    *(_BYTE *)(a1 + 144) = v62;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_QWORD *)(a1 + 216) = v66;
    *(_QWORD *)(a1 + 224) = v65;
    swift_bridgeObjectRetain(v65);
    return sub_10002F034((uint64_t)v99, v98);
  }
  v34 = v33;
  sub_1001AD7F0((uint64_t)v34, v31, v32, 0);
  v91 = v34;
  v69 = (uint64_t)v95;
  v70 = v103;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v95, 1, 1, v103);
  v71 = v104;
  v72 = *(NSObject **)((char *)v104 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_workQueue);
  v73 = swift_allocObject(&unk_10060C970, 32, 7);
  *(_QWORD *)(v73 + 16) = v69;
  *(_QWORD *)(v73 + 24) = v71;
  v74 = swift_allocObject(&unk_10060C998, 32, 7);
  *(_QWORD *)(v74 + 16) = sub_10027F30C;
  *(_QWORD *)(v74 + 24) = v73;
  v112 = sub_1000C00CC;
  v113 = v74;
  aBlock = _NSConcreteStackBlock;
  v109 = 1107296256;
  v110 = sub_100026DC8;
  v111 = &unk_10060C9B0;
  v75 = _Block_copy(&aBlock);
  v76 = v113;
  swift_retain(v71);
  swift_retain(v74);
  swift_release(v76);
  dispatch_sync(v72, v75);
  _Block_release(v75);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v74, "", 76, 1239, 28, 1);
  result = swift_release(v74);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    return result;
  }
  v79 = v94;
  sub_100038B24(v69, v94, &qword_100636690);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v79, 1, v70) == 1)
  {
    v98 = v73;
    sub_100008030(v79, &qword_100636690);
    v80 = v99;
    (*(void (**)(uint64_t (*)(), _QWORD, uint64_t))(v96 + 104))(v99, enum case for DIPError.Code.odnTimeout(_:), v97);
    v81 = type metadata accessor for DIPError(0);
    v82 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v38 = swift_allocError(v81, v82, 0, 0);
    v83 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x8000000100558E70, 0, v80, 0, v32, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD00000000000001FLL, 0x8000000100558E50, 1243);
    swift_willThrow(v83);

    v40 = sub_100008030(v69, &qword_100636690);
    v99 = sub_10027F30C;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease(v32);
  v84 = v92;
  v85 = sub_100038AE0(v79, v92, type metadata accessor for ODNAssessmentResult);
  v86 = v93;
  v87 = defaultLogger()(v85);
  v88 = Logger.logObject.getter(v87);
  v89 = static os_log_type_t.debug.getter(v88);
  if (os_log_type_enabled(v88, v89))
  {
    v90 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v90 = 0;
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "After waiting and have an assessment result", v90, 2u);
    swift_slowDealloc(v90, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v101 + 8))(v86, v102);
  sub_100038AE0(v84, a1, type metadata accessor for ODNAssessmentResult);
  sub_100008030(v69, &qword_100636690);
  return swift_release(v73);
}

uint64_t sub_1002756D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE v10[24];

  v4 = sub_100004828(&qword_100636690);
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = a2 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  swift_beginAccess(v7, v10, 0, 0);
  sub_100038B24(v7, (uint64_t)v6, &qword_100636690);
  return sub_100184E1C((uint64_t)v6, a1, &qword_100636690);
}

void sub_10027577C()
{
  uint64_t v0;

  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult, &qword_100636690);

}

uint64_t sub_1002757C0()
{
  uint64_t v0;

  sub_100270EE8();
  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult, &qword_100636690);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10027581C()
{
  return type metadata accessor for AssessDuringProofingODNator(0);
}

uint64_t type metadata accessor for AssessDuringProofingODNator(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_10063A218, (uint64_t)&nominal type descriptor for AssessDuringProofingODNator);
}

void sub_100275838(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100526EB0;
  sub_10003B6E4(319, (unint64_t *)&unk_10063A228, type metadata accessor for ODNAssessmentResult);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 864);
  }
}

uint64_t type metadata accessor for ODNAssessmentResult(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_10063A728, (uint64_t)&nominal type descriptor for ODNAssessmentResult);
}

uint64_t sub_1002758E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t);

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  swift_bridgeObjectRetain(a2);
  return sub_10027F2D0(v5, v2, a1, a2);
}

uint64_t type metadata accessor for AssessmentPregenerator()
{
  return objc_opt_self(_TtC8coreidvd22AssessmentPregenerator);
}

uint64_t storeEnumTagSinglePayload for AssessDuringProofingODNator.ODNatorState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002759A4 + 4 * byte_100526D65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002759D8 + 4 * asc_100526D60[v4]))();
}

uint64_t sub_1002759D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002759E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002759E8);
  return result;
}

uint64_t sub_1002759F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002759FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100275A00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100275A08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssessDuringProofingODNator.ODNatorState()
{
  return &type metadata for AssessDuringProofingODNator.ODNatorState;
}

uint64_t sub_100275A24(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v9);
    return v4;
  }
  v7 = a2[3];
  if (v7)
  {
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
  }
  else
  {
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = a2[4];
  }
  v11 = a2[6];
  *(_QWORD *)(v4 + 40) = a2[5];
  *(_QWORD *)(v4 + 48) = v11;
  v12 = a2[8];
  *(_QWORD *)(v4 + 56) = a2[7];
  *(_QWORD *)(v4 + 64) = v12;
  v13 = a2[10];
  *(_QWORD *)(v4 + 72) = a2[9];
  *(_QWORD *)(v4 + 80) = v13;
  v14 = a2[15];
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  if (v14 == 1)
  {
    v15 = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(v4 + 104) = v15;
    *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(v4 + 129) = *(_OWORD *)((char *)a2 + 129);
    v16 = a2[20];
    if (v16)
    {
LABEL_8:
      *(_QWORD *)(v4 + 152) = a2[19];
      *(_QWORD *)(v4 + 160) = v16;
      v17 = a2[22];
      *(_QWORD *)(v4 + 168) = a2[21];
      *(_QWORD *)(v4 + 176) = v17;
      v18 = a2[24];
      *(_QWORD *)(v4 + 184) = a2[23];
      *(_QWORD *)(v4 + 192) = v18;
      v19 = a2[26];
      *(_QWORD *)(v4 + 200) = a2[25];
      *(_QWORD *)(v4 + 208) = v19;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      goto LABEL_11;
    }
  }
  else
  {
    v20 = a2[12];
    *(_QWORD *)(v4 + 88) = a2[11];
    *(_QWORD *)(v4 + 96) = v20;
    *(_BYTE *)(v4 + 104) = *((_BYTE *)a2 + 104);
    *(_QWORD *)(v4 + 112) = a2[14];
    *(_QWORD *)(v4 + 120) = v14;
    v21 = a2[17];
    *(_QWORD *)(v4 + 128) = a2[16];
    *(_QWORD *)(v4 + 136) = v21;
    *(_BYTE *)(v4 + 144) = *((_BYTE *)a2 + 144);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v21);
    v16 = a2[20];
    if (v16)
      goto LABEL_8;
  }
  v22 = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(v4 + 168) = v22;
  v23 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v4 + 200) = v23;
LABEL_11:
  v24 = a2[28];
  *(_QWORD *)(v4 + 216) = a2[27];
  *(_QWORD *)(v4 + 224) = v24;
  v25 = *(int *)(a3 + 44);
  v26 = (_QWORD *)(v4 + v25);
  v27 = (uint64_t *)((char *)a2 + v25);
  v28 = type metadata accessor for AssessmentAdditionalInfo(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v29 + 48);
  v31 = swift_bridgeObjectRetain(v24);
  if (v30(v27, 1, v28, v31))
  {
    v32 = sub_100004828(&qword_100636698);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v33 = v27[1];
    *v26 = *v27;
    v26[1] = v33;
    *((_BYTE *)v26 + 16) = *((_BYTE *)v27 + 16);
    v26[3] = v27[3];
    *((_BYTE *)v26 + 32) = *((_BYTE *)v27 + 32);
    v34 = *(int *)(v28 + 28);
    v35 = (char *)v26 + v34;
    v36 = (char *)v27 + v34;
    swift_bridgeObjectRetain(v33);
    v37 = sub_100004828(&qword_1006385E0);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      v39 = sub_100004828(&qword_10063A6C8);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    v40 = *(int *)(v28 + 32);
    v41 = (char *)v26 + v40;
    v42 = (char *)v27 + v40;
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  return v4;
}

uint64_t sub_100275D10(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[3])
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  v4 = a1[15];
  if (v4 != 1)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[17]);
  }
  v5 = a1[20];
  if (v5)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[22]);
    swift_bridgeObjectRelease(a1[24]);
    swift_bridgeObjectRelease(a1[26]);
  }
  swift_bridgeObjectRelease(a1[28]);
  v6 = (char *)a1 + *(int *)(a2 + 44);
  v7 = type metadata accessor for AssessmentAdditionalInfo(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*((_QWORD *)v6 + 1));
    v9 = &v6[*(int *)(v7 + 28)];
    v10 = sub_100004828(&qword_1006385E0);
    v11 = *(_QWORD *)(v10 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  return result;
}

uint64_t sub_100275E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;

  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  v12 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (v12 == 1)
  {
    v13 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v13;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
    v14 = *(_QWORD *)(a2 + 160);
    if (v14)
    {
LABEL_6:
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = v14;
      v15 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v15;
      v16 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v16;
      v17 = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = v17;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      goto LABEL_9;
    }
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v18;
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v12;
    v19 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v19;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v19);
    v14 = *(_QWORD *)(a2 + 160);
    if (v14)
      goto LABEL_6;
  }
  v20 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v20;
  v21 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v21;
LABEL_9:
  v22 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v22;
  v23 = *(int *)(a3 + 44);
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  v26 = type metadata accessor for AssessmentAdditionalInfo(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v27 + 48);
  v29 = swift_bridgeObjectRetain(v22);
  if (v28(v25, 1, v26, v29))
  {
    v30 = sub_100004828(&qword_100636698);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v31 = v25[1];
    *v24 = *v25;
    v24[1] = v31;
    *((_BYTE *)v24 + 16) = *((_BYTE *)v25 + 16);
    v24[3] = v25[3];
    *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
    v32 = *(int *)(v26 + 28);
    v33 = (char *)v24 + v32;
    v34 = (char *)v25 + v32;
    swift_bridgeObjectRetain(v31);
    v35 = sub_100004828(&qword_1006385E0);
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = sub_100004828(&qword_10063A6C8);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    v38 = *(int *)(v26 + 32);
    v39 = (char *)v24 + v38;
    v40 = (char *)v25 + v38;
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t sub_1002760EC(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(void *, uint64_t, uint64_t);
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;

  v6 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v6)
    {
      sub_10000660C((_QWORD *)a1, a2);
      goto LABEL_8;
    }
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)a1);
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
    goto LABEL_8;
  }
  v7 = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
LABEL_8:
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  v9 = *((_QWORD *)a2 + 6);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v11 = *((_QWORD *)a2 + 8);
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  v13 = *((_QWORD *)a2 + 10);
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = (_OWORD *)(a1 + 88);
  v16 = (__int128 *)((char *)a2 + 88);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *((_QWORD *)a2 + 15);
  if (v17 == 1)
  {
    if (v18 == 1)
    {
      v19 = *v16;
      v20 = *(__int128 *)((char *)a2 + 104);
      v21 = *(__int128 *)((char *)a2 + 120);
      *(_OWORD *)(a1 + 129) = *(__int128 *)((char *)a2 + 129);
      *(_OWORD *)(a1 + 104) = v20;
      *(_OWORD *)(a1 + 120) = v21;
      *v15 = v19;
    }
    else
    {
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      v25 = *((_QWORD *)a2 + 12);
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      *(_QWORD *)(a1 + 96) = v25;
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      v26 = *((_QWORD *)a2 + 15);
      *(_QWORD *)(a1 + 120) = v26;
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      v27 = *((_QWORD *)a2 + 17);
      *(_QWORD *)(a1 + 136) = v27;
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
    }
  }
  else if (v18 == 1)
  {
    sub_1002766DC(a1 + 88);
    v23 = *(__int128 *)((char *)a2 + 104);
    v22 = *(__int128 *)((char *)a2 + 120);
    v24 = *v16;
    *(_OWORD *)(a1 + 129) = *(__int128 *)((char *)a2 + 129);
    *(_OWORD *)(a1 + 104) = v23;
    *(_OWORD *)(a1 + 120) = v22;
    *v15 = v24;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    v28 = *((_QWORD *)a2 + 12);
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    *(_QWORD *)(a1 + 96) = v28;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    v29 = *((_QWORD *)a2 + 15);
    *(_QWORD *)(a1 + 120) = v29;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(v17);
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    v30 = *((_QWORD *)a2 + 17);
    v31 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(v31);
    *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  }
  v32 = (_OWORD *)(a1 + 152);
  v33 = (__int128 *)((char *)a2 + 152);
  v34 = *(_QWORD *)(a1 + 160);
  v35 = *((_QWORD *)a2 + 20);
  if (v34)
  {
    if (v35)
    {
      *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
      v36 = *((_QWORD *)a2 + 20);
      *(_QWORD *)(a1 + 160) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v34);
      *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
      v37 = *((_QWORD *)a2 + 22);
      v38 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v37;
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRelease(v38);
      *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
      v39 = *((_QWORD *)a2 + 24);
      v40 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v39;
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRelease(v40);
      *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
      v41 = *((_QWORD *)a2 + 26);
      v42 = *(_QWORD *)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v41;
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRelease(v42);
    }
    else
    {
      sub_100276710((_QWORD *)(a1 + 152));
      v47 = *(__int128 *)((char *)a2 + 200);
      v49 = *v33;
      v48 = *(__int128 *)((char *)a2 + 168);
      *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
      *(_OWORD *)(a1 + 200) = v47;
      *v32 = v49;
      *(_OWORD *)(a1 + 168) = v48;
    }
  }
  else if (v35)
  {
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    v43 = *((_QWORD *)a2 + 20);
    *(_QWORD *)(a1 + 160) = v43;
    *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
    v44 = *((_QWORD *)a2 + 22);
    *(_QWORD *)(a1 + 176) = v44;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    v45 = *((_QWORD *)a2 + 24);
    *(_QWORD *)(a1 + 192) = v45;
    *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
    v46 = *((_QWORD *)a2 + 26);
    *(_QWORD *)(a1 + 208) = v46;
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
  }
  else
  {
    v50 = *v33;
    v51 = *(__int128 *)((char *)a2 + 168);
    v52 = *(__int128 *)((char *)a2 + 200);
    *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
    *(_OWORD *)(a1 + 200) = v52;
    *v32 = v50;
    *(_OWORD *)(a1 + 168) = v51;
  }
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  v53 = *((_QWORD *)a2 + 28);
  v54 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  v55 = *(int *)(a3 + 44);
  v56 = a1 + v55;
  v57 = (uint64_t)a2 + v55;
  v58 = type metadata accessor for AssessmentAdditionalInfo(0);
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (v62)
    {
      sub_100035DAC(v56, type metadata accessor for AssessmentAdditionalInfo);
      goto LABEL_28;
    }
    *(_QWORD *)v56 = *(_QWORD *)v57;
    v72 = *(_QWORD *)(v57 + 8);
    v73 = *(_QWORD *)(v56 + 8);
    *(_QWORD *)(v56 + 8) = v72;
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRelease(v73);
    *(_BYTE *)(v56 + 16) = *(_BYTE *)(v57 + 16);
    v74 = *(_QWORD *)(v57 + 24);
    *(_BYTE *)(v56 + 32) = *(_BYTE *)(v57 + 32);
    *(_QWORD *)(v56 + 24) = v74;
    v75 = *(int *)(v58 + 28);
    v76 = (void *)(v56 + v75);
    v77 = (void *)(v57 + v75);
    v78 = sub_100004828(&qword_1006385E0);
    v79 = *(_QWORD *)(v78 - 8);
    v80 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v79 + 48);
    v81 = v80(v76, 1, v78);
    v82 = v80(v77, 1, v78);
    if (v81)
    {
      if (!v82)
      {
        (*(void (**)(void *, void *, uint64_t))(v79 + 16))(v76, v77, v78);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
LABEL_37:
        v88 = *(int *)(v58 + 32);
        v89 = v56 + v88;
        v90 = (uint64_t *)(v57 + v88);
        v91 = *v90;
        *(_BYTE *)(v89 + 8) = *((_BYTE *)v90 + 8);
        *(_QWORD *)v89 = v91;
        return a1;
      }
    }
    else
    {
      if (!v82)
      {
        (*(void (**)(void *, void *, uint64_t))(v79 + 24))(v76, v77, v78);
        goto LABEL_37;
      }
      (*(void (**)(void *, uint64_t))(v79 + 8))(v76, v78);
    }
    v87 = sub_100004828(&qword_10063A6C8);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    goto LABEL_37;
  }
  if (v62)
  {
LABEL_28:
    v71 = sub_100004828(&qword_100636698);
    memcpy((void *)v56, (const void *)v57, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v56 = *(_QWORD *)v57;
  v63 = *(_QWORD *)(v57 + 8);
  *(_QWORD *)(v56 + 8) = v63;
  *(_BYTE *)(v56 + 16) = *(_BYTE *)(v57 + 16);
  v64 = *(_QWORD *)(v57 + 24);
  *(_BYTE *)(v56 + 32) = *(_BYTE *)(v57 + 32);
  *(_QWORD *)(v56 + 24) = v64;
  v65 = *(int *)(v58 + 28);
  v66 = (void *)(v56 + v65);
  v67 = (const void *)(v57 + v65);
  swift_bridgeObjectRetain(v63);
  v68 = sub_100004828(&qword_1006385E0);
  v69 = *(_QWORD *)(v68 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
  {
    v70 = sub_100004828(&qword_10063A6C8);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v69 + 16))(v66, v67, v68);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
  }
  v83 = *(int *)(v58 + 32);
  v84 = v56 + v83;
  v85 = (uint64_t *)(v57 + v83);
  v86 = *v85;
  *(_BYTE *)(v84 + 8) = *((_BYTE *)v85 + 8);
  *(_QWORD *)v84 = v86;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
  return a1;
}

uint64_t sub_1002766DC(uint64_t a1)
{
  destroy for ODNErrorInfo(a1);
  return a1;
}

_QWORD *sub_100276710(_QWORD *a1)
{
  destroy for DIPClientGUIDSeeds(a1);
  return a1;
}

uint64_t sub_100276744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v5 = *(int *)(a3 + 44);
  v6 = (_OWORD *)(a1 + v5);
  v7 = (_OWORD *)(a2 + v5);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  v8 = type metadata accessor for AssessmentAdditionalInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_100004828(&qword_100636698);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    *v6 = *v7;
    *((_BYTE *)v6 + 16) = *((_BYTE *)v7 + 16);
    *((_QWORD *)v6 + 3) = *((_QWORD *)v7 + 3);
    *((_BYTE *)v6 + 32) = *((_BYTE *)v7 + 32);
    v11 = *(int *)(v8 + 28);
    v12 = (char *)v6 + v11;
    v13 = (char *)v7 + v11;
    v14 = sub_100004828(&qword_1006385E0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_100004828(&qword_10063A6C8);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v17 = *(int *)(v8 + 32);
    v18 = (char *)v6 + v17;
    v19 = (char *)v7 + v17;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_100276928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void *, uint64_t, uint64_t);
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  if (*(_QWORD *)(a1 + 24))
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a1 + 120);
  if (v12 == 1)
    goto LABEL_6;
  v13 = *(_QWORD *)(a2 + 120);
  if (v13 == 1)
  {
    sub_1002766DC(a1 + 88);
LABEL_6:
    v14 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v14;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
    goto LABEL_8;
  }
  v15 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v15;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v13;
  swift_bridgeObjectRelease(v12);
  v16 = *(_QWORD *)(a2 + 136);
  v17 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v16;
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
LABEL_8:
  v18 = *(_QWORD *)(a1 + 160);
  if (v18)
  {
    v19 = *(_QWORD *)(a2 + 160);
    if (v19)
    {
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = v19;
      swift_bridgeObjectRelease(v18);
      v20 = *(_QWORD *)(a2 + 176);
      v21 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v20;
      swift_bridgeObjectRelease(v21);
      v22 = *(_QWORD *)(a2 + 192);
      v23 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v22;
      swift_bridgeObjectRelease(v23);
      v24 = *(_QWORD *)(a2 + 208);
      v25 = *(_QWORD *)(a1 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = v24;
      swift_bridgeObjectRelease(v25);
      goto LABEL_13;
    }
    sub_100276710((_QWORD *)(a1 + 152));
  }
  v26 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v26;
  v27 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v27;
LABEL_13:
  v28 = *(_QWORD *)(a2 + 224);
  v29 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(int *)(a3 + 44);
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for AssessmentAdditionalInfo(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (v37)
    {
      sub_100035DAC(v31, type metadata accessor for AssessmentAdditionalInfo);
      goto LABEL_19;
    }
    v45 = *(_QWORD *)(v32 + 8);
    v46 = *(_QWORD *)(v31 + 8);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *(_QWORD *)(v31 + 8) = v45;
    swift_bridgeObjectRelease(v46);
    *(_BYTE *)(v31 + 16) = *(_BYTE *)(v32 + 16);
    *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
    *(_BYTE *)(v31 + 32) = *(_BYTE *)(v32 + 32);
    v47 = *(int *)(v33 + 28);
    v48 = (void *)(v31 + v47);
    v49 = (void *)(v32 + v47);
    v50 = sub_100004828(&qword_1006385E0);
    v51 = *(_QWORD *)(v50 - 8);
    v52 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v51 + 48);
    v53 = v52(v48, 1, v50);
    v54 = v52(v49, 1, v50);
    if (v53)
    {
      if (!v54)
      {
        (*(void (**)(void *, void *, uint64_t))(v51 + 32))(v48, v49, v50);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
LABEL_28:
        v59 = *(int *)(v33 + 32);
        v60 = v31 + v59;
        v61 = v32 + v59;
        *(_QWORD *)v60 = *(_QWORD *)v61;
        *(_BYTE *)(v60 + 8) = *(_BYTE *)(v61 + 8);
        return a1;
      }
    }
    else
    {
      if (!v54)
      {
        (*(void (**)(void *, void *, uint64_t))(v51 + 40))(v48, v49, v50);
        goto LABEL_28;
      }
      (*(void (**)(void *, uint64_t))(v51 + 8))(v48, v50);
    }
    v58 = sub_100004828(&qword_10063A6C8);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_28;
  }
  if (v37)
  {
LABEL_19:
    v44 = sub_100004828(&qword_100636698);
    memcpy((void *)v31, (const void *)v32, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_BYTE *)(v31 + 16) = *(_BYTE *)(v32 + 16);
  *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
  *(_BYTE *)(v31 + 32) = *(_BYTE *)(v32 + 32);
  v38 = *(int *)(v33 + 28);
  v39 = (void *)(v31 + v38);
  v40 = (const void *)(v32 + v38);
  v41 = sub_100004828(&qword_1006385E0);
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    v43 = sub_100004828(&qword_10063A6C8);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 32))(v39, v40, v41);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  v55 = *(int *)(v33 + 32);
  v56 = v31 + v55;
  v57 = v32 + v55;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  return a1;
}

uint64_t sub_100276D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100276D38);
}

uint64_t sub_100276D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100004828(&qword_100636698);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v9);
  }
}

uint64_t sub_100276DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100276DD0);
}

uint64_t sub_100276DD0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 24) = a2;
  }
  else
  {
    v7 = sub_100004828(&qword_100636698);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

void sub_100276E48(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_100526EE0;
  v4[1] = &unk_100526E80;
  v4[2] = &unk_100526E80;
  v4[3] = &unk_100526E80;
  v4[4] = "9";
  v4[5] = &unk_100526FB0;
  v4[6] = &unk_100526E80;
  sub_10003B6E4(319, (unint64_t *)&unk_10063A738, type metadata accessor for AssessmentAdditionalInfo);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
  }
}

unint64_t sub_100276EF4()
{
  unint64_t result;

  result = qword_10063A780;
  if (!qword_10063A780)
  {
    result = swift_getWitnessTable(&unk_100527040, &type metadata for AssessDuringProofingODNator.ODNatorState);
    atomic_store(result, &qword_10063A780);
  }
  return result;
}

void *sub_100276F38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t (*v31)(char *, uint64_t);
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  void *v38;
  Swift::String v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  id v43;
  NSString v44;
  id v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  Swift::String v81;
  Swift::String v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  NSString v86;
  id v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  char v118;
  _QWORD *v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  uint8_t *v123;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  uint64_t v128;
  os_log_type_t v129;
  uint8_t *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  NSObject *v134;
  uint64_t v135;
  os_log_type_t v136;
  uint8_t *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  _OWORD v147[2];
  __int128 v148;
  void *v149;
  void *v150;

  v2 = sub_100004828(&qword_100639DB8);
  v3 = __chkstk_darwin(v2);
  v141 = (char *)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v138 - v5;
  v7 = type metadata accessor for PersonNameComponents(0);
  v8 = *(_QWORD *)(v7 - 8);
  v143 = v7;
  v144 = v8;
  v9 = __chkstk_darwin(v7);
  v139 = (char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v142 = (char *)&v138 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v138 - v13;
  v145 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v145 - 8);
  v16 = __chkstk_darwin(v145);
  v18 = (char *)&v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v140 = (char *)&v138 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v138 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v138 - v25;
  v27 = defaultLogger()(v24);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Attempting to guess name components", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  v31 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  v32 = v31(v26, v145);
  v150 = &_swiftEmptyDictionarySingleton;
  if (*(_QWORD *)(a1 + 16))
  {
    v32 = sub_1004A8604(0x6D614E7473726966, 0xE900000000000065);
    if ((v33 & 1) != 0)
    {
      sub_10002EDBC(*(_QWORD *)(a1 + 56) + 32 * v32, (uint64_t)&v148);
      v32 = swift_dynamicCast(v147, &v148, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      if ((v32 & 1) != 0)
      {
        v34 = *((_QWORD *)&v147[0] + 1);
        if (*(_QWORD *)(a1 + 16))
        {
          v35 = *(_QWORD *)&v147[0];
          v36 = sub_1004A8604(0x656D614E7473616CLL, 0xE800000000000000);
          if ((v37 & 1) != 0)
          {
            sub_10002EDBC(*(_QWORD *)(a1 + 56) + 32 * v36, (uint64_t)&v148);
            if ((swift_dynamicCast(v147, &v148, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
            {
              v38 = (void *)*((_QWORD *)&v147[0] + 1);
              v138 = *(_QWORD *)&v147[0];
              *(_QWORD *)&v148 = v35;
              *((_QWORD *)&v148 + 1) = v34;
              swift_bridgeObjectRetain(v34);
              v39._countAndFlagsBits = 32;
              v39._object = (void *)0xE100000000000000;
              String.append(_:)(v39);
              swift_bridgeObjectRelease(v34);
              v40 = *((_QWORD *)&v148 + 1);
              swift_bridgeObjectRetain(*((_QWORD *)&v148 + 1));
              v41._countAndFlagsBits = v138;
              v41._object = v38;
              String.append(_:)(v41);
              swift_bridgeObjectRelease(v40);
              swift_bridgeObjectRelease(v38);
              v42 = *((_QWORD *)&v148 + 1);
              v43 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), "init");
              v44 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v42);
              v45 = objc_msgSend(v43, "personNameComponentsFromString:", v44);

              if (v45)
              {
                v46 = v142;
                static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)(v45);

                v47 = v144;
                v48 = *(void (**)(char *, char *, uint64_t))(v144 + 32);
                v49 = v46;
                v50 = v143;
                v48(v6, v49, v143);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v6, 0, 1, v50);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v6, 1, v50) != 1)
                {
                  v51 = ((uint64_t (*)(char *, char *, uint64_t))v48)(v14, v6, v50);
                  v52 = PersonNameComponents.namePrefix.getter(v51);
                  if (v53)
                  {
                    v149 = &type metadata for String;
                    *(_QWORD *)&v148 = v52;
                    *((_QWORD *)&v148 + 1) = v53;
                    sub_10000491C(&v148, v147);
                    v54 = v150;
                    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v150);
                    v146 = v54;
                    sub_100481A14(v147, 0xD000000000000010, 0x80000001005590C0, isUniquelyReferenced_nonNull_native);
                    v150 = v146;
                    v52 = swift_bridgeObjectRelease(0x8000000000000000);
                  }
                  v56 = PersonNameComponents.familyName.getter(v52);
                  if (v57)
                  {
                    v149 = &type metadata for String;
                    *(_QWORD *)&v148 = v56;
                    *((_QWORD *)&v148 + 1) = v57;
                    sub_10000491C(&v148, v147);
                    v58 = v150;
                    v59 = swift_isUniquelyReferenced_nonNull_native(v150);
                    v146 = v58;
                    sub_100481A14(v147, 0xD000000000000010, 0x80000001005590A0, v59);
                    v150 = v146;
                    v56 = swift_bridgeObjectRelease(0x8000000000000000);
                  }
                  v60 = PersonNameComponents.givenName.getter(v56);
                  if (v61)
                  {
                    v149 = &type metadata for String;
                    *(_QWORD *)&v148 = v60;
                    *((_QWORD *)&v148 + 1) = v61;
                    sub_10000491C(&v148, v147);
                    v62 = v150;
                    v63 = swift_isUniquelyReferenced_nonNull_native(v150);
                    v146 = v62;
                    sub_100481A14(v147, 0x6947646573726170, 0xEF656D614E6E6576, v63);
                    v150 = v146;
                    v60 = swift_bridgeObjectRelease(0x8000000000000000);
                  }
                  v64 = PersonNameComponents.middleName.getter(v60);
                  if (v65)
                  {
                    v149 = &type metadata for String;
                    *(_QWORD *)&v148 = v64;
                    *((_QWORD *)&v148 + 1) = v65;
                    sub_10000491C(&v148, v147);
                    v66 = v150;
                    v67 = swift_isUniquelyReferenced_nonNull_native(v150);
                    v146 = v66;
                    sub_100481A14(v147, 0xD000000000000010, 0x8000000100559080, v67);
                    v150 = v146;
                    v64 = swift_bridgeObjectRelease(0x8000000000000000);
                  }
                  v68 = PersonNameComponents.nameSuffix.getter(v64);
                  if (v69)
                  {
                    v149 = &type metadata for String;
                    *(_QWORD *)&v148 = v68;
                    *((_QWORD *)&v148 + 1) = v69;
                    sub_10000491C(&v148, v147);
                    v70 = v150;
                    v71 = swift_isUniquelyReferenced_nonNull_native(v150);
                    v146 = v70;
                    sub_100481A14(v147, 0xD000000000000010, 0x8000000100559060, v71);
                    v150 = v146;
                    v68 = swift_bridgeObjectRelease(0x8000000000000000);
                  }
                  v72 = PersonNameComponents.nickname.getter(v68);
                  if (v73)
                  {
                    v149 = &type metadata for String;
                    *(_QWORD *)&v148 = v72;
                    *((_QWORD *)&v148 + 1) = v73;
                    sub_10000491C(&v148, v147);
                    v74 = v150;
                    v75 = swift_isUniquelyReferenced_nonNull_native(v150);
                    v146 = v74;
                    sub_100481A14(v147, 0x694E646573726170, 0xEE00656D614E6B63, v75);
                    v150 = v146;
                    swift_bridgeObjectRelease(0x8000000000000000);
                  }
                  v32 = (*(uint64_t (**)(char *, uint64_t))(v144 + 8))(v14, v50);
                  if (!*(_QWORD *)(a1 + 16))
                    goto LABEL_48;
                  goto LABEL_27;
                }
              }
              else
              {
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v144 + 56))(v6, 1, 1, v143);
              }
              v125 = sub_100008030((uint64_t)v6, &qword_100639DB8);
              v126 = defaultLogger()(v125);
              v127 = Logger.logObject.getter(v126);
              v129 = static os_log_type_t.info.getter(v127, v128);
              if (os_log_type_enabled(v127, v129))
              {
                v130 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v130 = 0;
                _os_log_impl((void *)&_mh_execute_header, v127, v129, "Could not get nameComponents out of name", v130, 2u);
                swift_slowDealloc(v130, -1, -1);
              }

              v32 = v31(v23, v145);
              if (!*(_QWORD *)(a1 + 16))
                goto LABEL_48;
              goto LABEL_27;
            }
          }
        }
        v32 = swift_bridgeObjectRelease(v34);
      }
    }
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_48;
LABEL_27:
  v32 = sub_1004A8604(0xD000000000000012, 0x8000000100558F60);
  if ((v76 & 1) == 0)
    goto LABEL_48;
  sub_10002EDBC(*(_QWORD *)(a1 + 56) + 32 * v32, (uint64_t)&v148);
  v32 = swift_dynamicCast(v147, &v148, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((v32 & 1) == 0)
    goto LABEL_48;
  v77 = *((_QWORD *)&v147[0] + 1);
  if (!*(_QWORD *)(a1 + 16)
    || (v78 = *(_QWORD *)&v147[0], v79 = sub_1004A8604(0xD000000000000011, 0x8000000100558F80), (v80 & 1) == 0)
    || (sub_10002EDBC(*(_QWORD *)(a1 + 56) + 32 * v79, (uint64_t)&v148),
        (swift_dynamicCast(v147, &v148, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0))
  {
    v32 = swift_bridgeObjectRelease(v77);
    goto LABEL_48;
  }
  v81 = (Swift::String)v147[0];
  *(_QWORD *)&v148 = v78;
  *((_QWORD *)&v148 + 1) = v77;
  swift_bridgeObjectRetain(v77);
  v82._countAndFlagsBits = 32;
  v82._object = (void *)0xE100000000000000;
  String.append(_:)(v82);
  swift_bridgeObjectRelease(v77);
  v83 = *((_QWORD *)&v148 + 1);
  swift_bridgeObjectRetain(*((_QWORD *)&v148 + 1));
  String.append(_:)(v81);
  swift_bridgeObjectRelease(v83);
  swift_bridgeObjectRelease(v81._object);
  v84 = *((_QWORD *)&v148 + 1);
  v85 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), "init");
  v86 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v84);
  v87 = objc_msgSend(v85, "personNameComponentsFromString:", v86);

  if (v87)
  {
    v88 = v142;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)(v87);

    v89 = v143;
    v90 = v144;
    v91 = *(void (**)(char *, char *, uint64_t))(v144 + 32);
    v92 = (uint64_t)v141;
    v91(v141, v88, v143);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v90 + 56))(v92, 0, 1, v89);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v92, 1, v89) != 1)
    {
      v93 = v139;
      v94 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91)(v139, v92, v89);
      v95 = PersonNameComponents.namePrefix.getter(v94);
      if (v96)
      {
        v149 = &type metadata for String;
        *(_QWORD *)&v148 = v95;
        *((_QWORD *)&v148 + 1) = v96;
        sub_10000491C(&v148, v147);
        v97 = v150;
        v98 = swift_isUniquelyReferenced_nonNull_native(v150);
        v146 = v97;
        sub_100481A14(v147, 0xD000000000000018, 0x8000000100559040, v98);
        v150 = v146;
        v95 = swift_bridgeObjectRelease(0x8000000000000000);
      }
      v99 = PersonNameComponents.familyName.getter(v95);
      if (v100)
      {
        v149 = &type metadata for String;
        *(_QWORD *)&v148 = v99;
        *((_QWORD *)&v148 + 1) = v100;
        sub_10000491C(&v148, v147);
        v101 = v150;
        v102 = swift_isUniquelyReferenced_nonNull_native(v150);
        v146 = v101;
        sub_100481A14(v147, 0xD000000000000018, 0x8000000100559020, v102);
        v150 = v146;
        v99 = swift_bridgeObjectRelease(0x8000000000000000);
      }
      v103 = PersonNameComponents.givenName.getter(v99);
      if (v104)
      {
        v149 = &type metadata for String;
        *(_QWORD *)&v148 = v103;
        *((_QWORD *)&v148 + 1) = v104;
        sub_10000491C(&v148, v147);
        v105 = v150;
        v106 = swift_isUniquelyReferenced_nonNull_native(v150);
        v146 = v105;
        sub_100481A14(v147, 0xD000000000000017, 0x8000000100559000, v106);
        v150 = v146;
        v103 = swift_bridgeObjectRelease(0x8000000000000000);
      }
      v107 = PersonNameComponents.middleName.getter(v103);
      if (v108)
      {
        v149 = &type metadata for String;
        *(_QWORD *)&v148 = v107;
        *((_QWORD *)&v148 + 1) = v108;
        sub_10000491C(&v148, v147);
        v109 = v150;
        v110 = swift_isUniquelyReferenced_nonNull_native(v150);
        v146 = v109;
        sub_100481A14(v147, 0xD000000000000018, 0x8000000100558FE0, v110);
        v150 = v146;
        v107 = swift_bridgeObjectRelease(0x8000000000000000);
      }
      v111 = PersonNameComponents.nameSuffix.getter(v107);
      if (v112)
      {
        v149 = &type metadata for String;
        *(_QWORD *)&v148 = v111;
        *((_QWORD *)&v148 + 1) = v112;
        sub_10000491C(&v148, v147);
        v113 = v150;
        v114 = swift_isUniquelyReferenced_nonNull_native(v150);
        v146 = v113;
        sub_100481A14(v147, 0xD000000000000018, 0x8000000100558FC0, v114);
        v150 = v146;
        v111 = swift_bridgeObjectRelease(0x8000000000000000);
      }
      v115 = PersonNameComponents.nickname.getter(v111);
      if (v116)
      {
        v149 = &type metadata for String;
        *(_QWORD *)&v148 = v115;
        *((_QWORD *)&v148 + 1) = v116;
        sub_10000491C(&v148, v147);
        v117 = v150;
        v118 = swift_isUniquelyReferenced_nonNull_native(v150);
        v146 = v117;
        sub_100481A14(v147, 0xD000000000000016, 0x8000000100558FA0, v118);
        v150 = v146;
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      v32 = (*(uint64_t (**)(char *, uint64_t))(v144 + 8))(v93, v143);
      goto LABEL_48;
    }
  }
  else
  {
    v92 = (uint64_t)v141;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v144 + 56))(v141, 1, 1, v143);
  }
  v131 = sub_100008030(v92, &qword_100639DB8);
  v132 = v140;
  v133 = defaultLogger()(v131);
  v134 = Logger.logObject.getter(v133);
  v136 = static os_log_type_t.info.getter(v134, v135);
  if (os_log_type_enabled(v134, v136))
  {
    v137 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v137 = 0;
    _os_log_impl((void *)&_mh_execute_header, v134, v136, "Could not get nameComponents out of doc name", v137, 2u);
    swift_slowDealloc(v137, -1, -1);
  }

  v32 = v31(v132, v145);
LABEL_48:
  defaultLogger()(v32);
  v119 = v150;
  swift_bridgeObjectRetain(v150);
  v121 = Logger.logObject.getter(v120);
  v122 = static os_log_type_t.debug.getter(v121);
  if (os_log_type_enabled(v121, v122))
  {
    v123 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v123 = 134349056;
    *(_QWORD *)&v148 = v119[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v123 + 4);
    swift_bridgeObjectRelease(v119);
    _os_log_impl((void *)&_mh_execute_header, v121, v122, "Guessed %{public}ld name components", v123, 0xCu);
    swift_slowDealloc(v123, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(v119);
  }
  v31(v18, v145);
  swift_beginAccess(&v150, &v148, 0, 0);
  return v150;
}

uint64_t sub_100277CDC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  int v45;
  void *v46;
  uint64_t v47;
  double v48;
  double v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  int v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  int v63;
  _QWORD *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  int v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  int v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  int v83;
  void *v84;
  uint64_t v85;
  double v86;
  double v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  uint64_t v100;
  os_log_type_t v101;
  uint8_t *v102;
  uint64_t (*v103)(char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  os_log_type_t v110;
  uint8_t *v111;
  double v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  uint64_t v122;
  os_log_type_t v123;
  uint8_t *v124;
  __n128 v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  NSObject *v129;
  uint64_t v130;
  os_log_type_t v131;
  uint8_t *v132;
  const char *v133;
  double v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  void (*v151)(char *, uint64_t);
  unint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  void *v160;
  double v161;
  double v162;
  char v163;
  void *v164;

  v2 = type metadata accessor for Logger(0);
  v156 = *(_QWORD *)(v2 - 8);
  v157 = v2;
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v145 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v145 - v7;
  v9 = __chkstk_darwin(v6);
  v149 = (char *)&v145 - v10;
  v11 = __chkstk_darwin(v9);
  v150 = (char *)&v145 - v12;
  __chkstk_darwin(v11);
  v148 = (char *)&v145 - v13;
  v158 = type metadata accessor for CharacterSet(0);
  v154 = *(_QWORD **)(v158 - 8);
  __chkstk_darwin(v158);
  v15 = (char *)&v145 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v17 = sub_1004A8604(0x31746565727473, 0xE700000000000000), (v18 & 1) != 0))
  {
    sub_10002EDBC(*(_QWORD *)(v16 + 56) + 32 * v17, (uint64_t)&v161);
    v19 = swift_dynamicCast(&v159, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    v20 = (uint64_t)v159;
    if (!v19)
      v20 = 0;
    v155 = v20;
    if (v19)
      v21 = v160;
    else
      v21 = 0;
  }
  else
  {
    v155 = 0;
    v21 = 0;
  }
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + 16);
  v147 = v8;
  v146 = v5;
  if (v23 && (v24 = sub_1004A8604(0x32746565727473, 0xE700000000000000), (v25 & 1) != 0))
  {
    sub_10002EDBC(*(_QWORD *)(v22 + 56) + 32 * v24, (uint64_t)&v161);
    v26 = swift_dynamicCast(&v159, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v26)
      v27 = (uint64_t)v159;
    else
      v27 = 0;
    if (v26)
      v28 = v160;
    else
      v28 = 0;
  }
  else
  {
    v27 = 0;
    v28 = 0;
  }
  v29 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v30 = sub_1004A8604(2037672291, 0xE400000000000000), (v31 & 1) != 0))
  {
    sub_10002EDBC(*(_QWORD *)(v29 + 56) + 32 * v30, (uint64_t)&v161);
    v32 = swift_dynamicCast(&v159, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v32)
      v33 = (uint64_t)v159;
    else
      v33 = 0;
    if (v32)
      v34 = v160;
    else
      v34 = 0;
  }
  else
  {
    v33 = 0;
    v34 = 0;
  }
  v35 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v36 = sub_1004A8604(0x6574617473, 0xE500000000000000), (v37 & 1) != 0))
  {
    sub_10002EDBC(*(_QWORD *)(v35 + 56) + 32 * v36, (uint64_t)&v161);
    v38 = swift_dynamicCast(&v159, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v38)
      v39 = (uint64_t)v159;
    else
      v39 = 0;
    if (v38)
      v40 = v160;
    else
      v40 = 0;
  }
  else
  {
    v39 = 0;
    v40 = 0;
  }
  v41 = *a1;
  v42 = *(_QWORD *)(*a1 + 16);
  if (!v42)
    goto LABEL_42;
  v43 = sub_1004A8604(0x6F436C6174736F70, 0xEA00000000006564);
  if ((v44 & 1) == 0)
  {
    v42 = 0;
LABEL_42:
    v46 = 0;
    goto LABEL_43;
  }
  sub_10002EDBC(*(_QWORD *)(v41 + 56) + 32 * v43, (uint64_t)&v161);
  v45 = swift_dynamicCast(&v159, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  v42 = (uint64_t)v159;
  if (v45)
  {
    v46 = v160;
  }
  else
  {
    v42 = 0;
    v46 = 0;
  }
LABEL_43:
  *(double *)&v47 = COERCE_DOUBLE(sub_100278954(v155, v21, v27, v28, v33, v34, v39, v40, v42, v46));
  v49 = v48;
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v21);
  v161 = *(double *)&v47;
  v162 = v49;
  static CharacterSet.whitespacesAndNewlines.getter(v50);
  v152 = sub_1000994DC();
  v51 = StringProtocol.trimmingCharacters(in:)(v15, &type metadata for String, v152);
  v53 = v52;
  v151 = (void (*)(char *, uint64_t))v154[1];
  v151(v15, v158);
  swift_bridgeObjectRelease(*(_QWORD *)&v162);
  v54 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v55 = sub_1004A8604(0xD000000000000010, 0x80000001005590E0);
    if ((v56 & 1) != 0)
    {
      sub_10002EDBC(*(_QWORD *)(v54 + 56) + 32 * v55, (uint64_t)&v161);
      v57 = swift_dynamicCast(&v159, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      v58 = (uint64_t)v159;
      if (!v57)
        v58 = 0;
      v155 = v58;
      if (v57)
        v59 = v160;
      else
        v59 = 0;
    }
    else
    {
      v155 = 0;
      v59 = 0;
    }
  }
  else
  {
    v155 = 0;
    v59 = 0;
  }
  v60 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v61 = sub_1004A8604(0xD000000000000010, 0x8000000100559100), (v62 & 1) != 0))
  {
    sub_10002EDBC(*(_QWORD *)(v60 + 56) + 32 * v61, (uint64_t)&v161);
    v63 = swift_dynamicCast(&v159, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    v64 = v159;
    if (!v63)
      v64 = 0;
    v154 = v64;
    if (v63)
      v65 = v160;
    else
      v65 = 0;
  }
  else
  {
    v154 = 0;
    v65 = 0;
  }
  v66 = *a1;
  v67 = *(_QWORD *)(*a1 + 16);
  v153 = v51;
  if (v67 && (v68 = sub_1004A8604(0x746E656D75636F64, 0xED0000797469632ELL), (v69 & 1) != 0))
  {
    sub_10002EDBC(*(_QWORD *)(v66 + 56) + 32 * v68, (uint64_t)&v161);
    v70 = swift_dynamicCast(&v159, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v70)
      v71 = (uint64_t)v159;
    else
      v71 = 0;
    if (v70)
      v72 = v160;
    else
      v72 = 0;
  }
  else
  {
    v71 = 0;
    v72 = 0;
  }
  v73 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v74 = sub_1004A8604(0x746E656D75636F64, 0xEE0065746174732ELL), (v75 & 1) != 0))
  {
    sub_10002EDBC(*(_QWORD *)(v73 + 56) + 32 * v74, (uint64_t)&v161);
    v76 = swift_dynamicCast(&v159, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v76)
      v77 = (uint64_t)v159;
    else
      v77 = 0;
    if (v76)
      v78 = v160;
    else
      v78 = 0;
  }
  else
  {
    v77 = 0;
    v78 = 0;
  }
  v79 = *a1;
  v80 = *(_QWORD *)(*a1 + 16);
  if (!v80)
    goto LABEL_84;
  v81 = sub_1004A8604(0xD000000000000013, 0x8000000100559120);
  if ((v82 & 1) == 0)
  {
    v80 = 0;
LABEL_84:
    v84 = 0;
    goto LABEL_85;
  }
  sub_10002EDBC(*(_QWORD *)(v79 + 56) + 32 * v81, (uint64_t)&v161);
  v83 = swift_dynamicCast(&v159, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  v80 = (uint64_t)v159;
  if (v83)
  {
    v84 = v160;
  }
  else
  {
    v80 = 0;
    v84 = 0;
  }
LABEL_85:
  *(double *)&v85 = COERCE_DOUBLE(sub_100278954(v155, v59, (uint64_t)v154, v65, v71, v72, v77, v78, v80, v84));
  v87 = v86;
  swift_bridgeObjectRelease(v84);
  swift_bridgeObjectRelease(v78);
  swift_bridgeObjectRelease(v72);
  swift_bridgeObjectRelease(v65);
  swift_bridgeObjectRelease(v59);
  v161 = *(double *)&v85;
  v162 = v87;
  static CharacterSet.whitespacesAndNewlines.getter(v88);
  v89 = StringProtocol.trimmingCharacters(in:)(v15, &type metadata for String, v152);
  v91 = v90;
  v151(v15, v158);
  swift_bridgeObjectRelease(*(_QWORD *)&v162);
  v159 = &_swiftEmptySetSingleton;
  v92 = v153;
  if (String.count.getter(v153, v53) >= 1)
  {
    swift_bridgeObjectRetain(v53);
    sub_1004E5D2C((uint64_t *)&v161, v92, v53);
    swift_bridgeObjectRelease(*(_QWORD *)&v162);
  }
  if (String.count.getter(v89, v91) >= 1)
  {
    swift_bridgeObjectRetain(v91);
    sub_1004E5D2C((uint64_t *)&v161, v89, v91);
    swift_bridgeObjectRelease(*(_QWORD *)&v162);
  }
  v93 = v159;
  if (v159[2])
  {
    sub_100278D28((uint64_t)v159);
    v94 = swift_bridgeObjectRelease(v93);
    if (qword_10062F4E8 != -1)
      v94 = swift_once(&qword_10062F4E8, sub_100263228);
    __chkstk_darwin(v94);
    v143 = v92;
    v144 = v53;
    v95 = sub_100004828(&qword_10063A840);
    OS_dispatch_queue.sync<A>(execute:)(sub_10027F350, &v145 - 4, v95, v96);
    v97 = swift_bridgeObjectRelease(v53);
    if ((v163 & 1) != 0)
    {
      v98 = defaultLogger()(v97);
      v99 = Logger.logObject.getter(v98);
      v101 = static os_log_type_t.info.getter(v99, v100);
      if (os_log_type_enabled(v99, v101))
      {
        v102 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v102 = 0;
        _os_log_impl((void *)&_mh_execute_header, v99, v101, "no geo location available", v102, 2u);
        swift_slowDealloc(v102, -1, -1);
      }

      v103 = *(uint64_t (**)(char *, uint64_t))(v156 + 8);
      v104 = v103(v149, v157);
    }
    else
    {
      v113 = v162;
      *(double *)&v114 = COERCE_DOUBLE(Double.description.getter(v97, v161));
      v164 = &type metadata for String;
      v161 = *(double *)&v114;
      v162 = v115;
      v116 = sub_10047E6E4((uint64_t)&v161, 0x4C73736572646461, 0xEA00000000007461);
      *(double *)&v117 = COERCE_DOUBLE(Double.description.getter(v116, v113));
      v164 = &type metadata for String;
      v161 = *(double *)&v117;
      v162 = v118;
      v119 = sub_10047E6E4((uint64_t)&v161, 0x4C73736572646461, 0xEA00000000006E6FLL);
      v120 = defaultLogger()(v119);
      v121 = Logger.logObject.getter(v120);
      v123 = static os_log_type_t.info.getter(v121, v122);
      if (os_log_type_enabled(v121, v123))
      {
        v124 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v124 = 0;
        _os_log_impl((void *)&_mh_execute_header, v121, v123, "got geo location", v124, 2u);
        swift_slowDealloc(v124, -1, -1);
      }

      v103 = *(uint64_t (**)(char *, uint64_t))(v156 + 8);
      v104 = v103(v150, v157);
    }
    __chkstk_darwin(v104);
    v143 = v89;
    v144 = v91;
    OS_dispatch_queue.sync<A>(execute:)(sub_10027FEEC, &v145 - 4, v95, v125);
    v126 = swift_bridgeObjectRelease(v91);
    if ((v163 & 1) != 0)
    {
      v127 = v146;
      v128 = defaultLogger()(v126);
      v129 = Logger.logObject.getter(v128);
      v131 = static os_log_type_t.info.getter(v129, v130);
      if (os_log_type_enabled(v129, v131))
      {
        v132 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v132 = 0;
        v133 = "no document geo location available";
LABEL_107:
        _os_log_impl((void *)&_mh_execute_header, v129, v131, v133, v132, 2u);
        swift_slowDealloc(v132, -1, -1);
      }
    }
    else
    {
      v134 = v162;
      *(double *)&v135 = COERCE_DOUBLE(Double.description.getter(v126, v161));
      v164 = &type metadata for String;
      v161 = *(double *)&v135;
      v162 = v136;
      v137 = sub_10047E6E4((uint64_t)&v161, 0xD000000000000013, 0x8000000100559140);
      *(double *)&v138 = COERCE_DOUBLE(Double.description.getter(v137, v134));
      v164 = &type metadata for String;
      v161 = *(double *)&v138;
      v162 = v139;
      v140 = sub_10047E6E4((uint64_t)&v161, 0xD000000000000013, 0x8000000100559160);
      v127 = v147;
      v141 = defaultLogger()(v140);
      v129 = Logger.logObject.getter(v141);
      v131 = static os_log_type_t.info.getter(v129, v142);
      if (os_log_type_enabled(v129, v131))
      {
        v132 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v132 = 0;
        v133 = "got document geo location";
        goto LABEL_107;
      }
    }

    return v103(v127, v157);
  }
  swift_bridgeObjectRelease(v91);
  swift_bridgeObjectRelease(v53);
  v105 = swift_bridgeObjectRelease(v93);
  v106 = v148;
  v107 = defaultLogger()(v105);
  v108 = Logger.logObject.getter(v107);
  v110 = static os_log_type_t.info.getter(v108, v109);
  if (os_log_type_enabled(v108, v110))
  {
    v111 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v111 = 0;
    _os_log_impl((void *)&_mh_execute_header, v108, v110, "No Address bindings provided for geo location", v111, 2u);
    swift_slowDealloc(v111, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v156 + 8))(v106, v157);
}

uint64_t sub_100278954(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, void *a8, uint64_t a9, void *a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  Swift::String v29;
  __n128 v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *object;
  Swift::String v35;
  __n128 v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  __n128 v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  Swift::String v47;
  __n128 v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  Swift::String v53;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  unint64_t v61;

  v58 = a7;
  v17 = type metadata accessor for CharacterSet(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = 0;
  v61 = 0xE000000000000000;
  if (a2)
  {
    v56 = a3;
    v57 = a8;
    v21 = a5;
    v59._countAndFlagsBits = a1;
    v59._object = a2;
    v22 = swift_bridgeObjectRetain(a2);
    static CharacterSet.whitespacesAndNewlines.getter(v22);
    v23 = sub_1000994DC();
    v24 = StringProtocol.trimmingCharacters(in:)(v20, &type metadata for String, v23);
    v25 = v17;
    v27 = v26;
    v28 = v25;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v25);
    swift_bridgeObjectRelease(v59._object);
    if (String.count.getter(v24, v27) >= 1)
    {
      v29._countAndFlagsBits = v24;
      v29._object = v27;
      String.append(_:)(v29);
    }
    swift_bridgeObjectRelease(v27);
    v17 = v28;
    a5 = v21;
    a3 = v56;
    a8 = v57;
  }
  if (a4)
  {
    v59._countAndFlagsBits = a3;
    v59._object = a4;
    v30 = swift_bridgeObjectRetain(a4);
    static CharacterSet.whitespacesAndNewlines.getter(v30);
    v31 = sub_1000994DC();
    v32 = StringProtocol.trimmingCharacters(in:)(v20, &type metadata for String, v31);
    object = v33;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    swift_bridgeObjectRelease(v59._object);
    if (String.count.getter(v32, object) >= 1)
    {
      v59._countAndFlagsBits = 32;
      v59._object = (void *)0xE100000000000000;
      v35._countAndFlagsBits = v32;
      v35._object = object;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(object);
      object = v59._object;
      String.append(_:)(v59);
    }
    swift_bridgeObjectRelease(object);
  }
  if (a6)
  {
    v59._countAndFlagsBits = a5;
    v59._object = a6;
    v36 = swift_bridgeObjectRetain(a6);
    static CharacterSet.whitespacesAndNewlines.getter(v36);
    v37 = sub_1000994DC();
    v38 = StringProtocol.trimmingCharacters(in:)(v20, &type metadata for String, v37);
    v40 = v39;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    swift_bridgeObjectRelease(v59._object);
    if (String.count.getter(v38, v40) >= 1)
    {
      v59._countAndFlagsBits = 8236;
      v59._object = (void *)0xE200000000000000;
      v41._countAndFlagsBits = v38;
      v41._object = v40;
      String.append(_:)(v41);
      swift_bridgeObjectRelease(v40);
      v40 = v59._object;
      String.append(_:)(v59);
    }
    swift_bridgeObjectRelease(v40);
  }
  if (a8)
  {
    v59._countAndFlagsBits = v58;
    v59._object = a8;
    v42 = swift_bridgeObjectRetain(a8);
    static CharacterSet.whitespacesAndNewlines.getter(v42);
    v43 = sub_1000994DC();
    v44 = StringProtocol.trimmingCharacters(in:)(v20, &type metadata for String, v43);
    v46 = v45;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    swift_bridgeObjectRelease(v59._object);
    if (String.count.getter(v44, v46) >= 1)
    {
      v59._countAndFlagsBits = 8236;
      v59._object = (void *)0xE200000000000000;
      v47._countAndFlagsBits = v44;
      v47._object = v46;
      String.append(_:)(v47);
      swift_bridgeObjectRelease(v46);
      v46 = v59._object;
      String.append(_:)(v59);
    }
    swift_bridgeObjectRelease(v46);
  }
  if (a10)
  {
    v59._countAndFlagsBits = a9;
    v59._object = a10;
    v48 = swift_bridgeObjectRetain(a10);
    static CharacterSet.whitespacesAndNewlines.getter(v48);
    v49 = sub_1000994DC();
    v50 = StringProtocol.trimmingCharacters(in:)(v20, &type metadata for String, v49);
    v52 = v51;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    swift_bridgeObjectRelease(v59._object);
    if (String.count.getter(v50, v52) >= 1)
    {
      v59._countAndFlagsBits = 32;
      v59._object = (void *)0xE100000000000000;
      v53._countAndFlagsBits = v50;
      v53._object = v52;
      String.append(_:)(v53);
      swift_bridgeObjectRelease(v52);
      v52 = v59._object;
      String.append(_:)(v59);
    }
    swift_bridgeObjectRelease(v52);
  }
  return v60;
}

void sub_100278D28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  NSObject *v13;
  void (*v14)(_BYTE *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  _BYTE v22[16];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v22[-v11];
  v13 = dispatch_group_create();
  sub_10027A090(a1, v13);
  static DispatchTime.now()();
  + infix(_:_:)(v10, 1.0);
  v14 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v14(v10, v6);
  v15 = OS_dispatch_group.wait(timeout:)(v12) & 1;
  v14(v12, v6);
  v16 = static DispatchTimeoutResult.== infix(_:_:)(v15, 0);
  if ((v16 & 1) != 0)
  {

  }
  else
  {
    v17 = defaultLogger()(v16);
    v18 = Logger.logObject.getter(v17);
    v20 = static os_log_type_t.info.getter(v18, v19);
    if (os_log_type_enabled(v18, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v20, "geocodeAddressString callback not invoked in the specified timeout", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void sub_100278EF8(uint64_t a1, uint64_t a2, NSObject *a3, NSObject *a4, NSObject *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  Swift::String v16;
  void **v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t isEscapingClosureAtFileLocation;
  id v23;
  void *v24;
  NSObject *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t (*v28)();
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  dispatch_group_t v33;
  void **aBlock;
  unint64_t v35;
  uint64_t (*v36)(uint64_t);
  void *v37;
  uint64_t (*v38)();
  uint64_t v39;

  v33 = a3;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10062F4E8 != -1)
    v11 = swift_once(&qword_10062F4E8, sub_100263228);
  __chkstk_darwin(v11);
  *(&v33 - 2) = a4;
  *(&v33 - 1) = a5;
  v14 = sub_100004828(&qword_10063A840);
  OS_dispatch_queue.sync<A>(execute:)(sub_10027FEEC, &(&v33)[-4], v14, v15);
  if ((v36 & 1) == 0)
    goto LABEL_6;
  if (a2)
  {
    aBlock = 0;
    v35 = 0xE000000000000000;
    swift_errorRetain(a2);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(v35);
    aBlock = (void **)0xD000000000000025;
    v35 = 0x80000001005591A0;
    v16._countAndFlagsBits = (uint64_t)a4;
    v16._object = a5;
    String.append(_:)(v16);
    v17 = aBlock;
    v18 = v35;
    defaultLogger()(v19);
    DIPRecordError(_:message:log:)(a2, v17, v18, v13);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(a2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
LABEL_6:
    dispatch_group_leave(v33);
    return;
  }
  if (!a1)
    goto LABEL_22;
  if (!((unint64_t)a1 >> 62))
  {
    v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v20)
      goto LABEL_10;
LABEL_21:
    swift_bridgeObjectRelease(a1);
    goto LABEL_22;
  }
  if (a1 >= 0)
    v32 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v32 = a1;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v32))
    goto LABEL_21;
LABEL_10:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_13;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v21 = *(id *)(a1 + 32);
LABEL_13:
    isEscapingClosureAtFileLocation = (uint64_t)v21;
    swift_bridgeObjectRelease(a1);
    v23 = objc_msgSend((id)isEscapingClosureAtFileLocation, "location", v33);
    if (v23)
    {
      v24 = v23;
      v25 = qword_100639DD8;
      v26 = (_QWORD *)swift_allocObject(&unk_10060CA88, 40, 7);
      v26[2] = a4;
      v26[3] = a5;
      v26[4] = v24;
      v27 = swift_allocObject(&unk_10060CAB0, 32, 7);
      v28 = sub_10027F3CC;
      *(_QWORD *)(v27 + 16) = sub_10027F3CC;
      *(_QWORD *)(v27 + 24) = v26;
      v38 = sub_1001AEFEC;
      v39 = v27;
      aBlock = _NSConcreteStackBlock;
      v35 = 1107296256;
      v36 = sub_100026DC8;
      v37 = &unk_10060CAC8;
      v29 = _Block_copy(&aBlock);
      v30 = v39;
      swift_bridgeObjectRetain(a5);
      v31 = v24;
      swift_retain(v27);
      swift_release(v30);
      dispatch_sync(v25, v29);

      _Block_release(v29);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v27, "", 76, 1569, 38, 1);
      swift_release(v27);
      if ((isEscapingClosureAtFileLocation & 1) == 0)
      {
LABEL_23:
        dispatch_group_leave(v33);
        sub_10002F034((uint64_t)v28, (uint64_t)v26);
        return;
      }
      __break(1u);
    }

LABEL_22:
    v28 = 0;
    v26 = 0;
    goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_100279270(uint64_t a1, uint64_t a2, void *a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  char isUniquelyReferenced_nonNull_native;
  void *v11;
  void *v13;
  _BYTE v14[24];

  if (qword_10062F4F0 != -1)
    swift_once(&qword_10062F4F0, sub_1002633FC);
  objc_msgSend(a3, "coordinate", swift_bridgeObjectRetain(a2).n128_f64[0]);
  v7 = v6;
  v9 = v8;
  swift_beginAccess(&off_100639DE0, v14, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(off_100639DE0);
  v13 = off_100639DE0;
  off_100639DE0 = (_UNKNOWN *)0x8000000000000000;
  sub_10048272C(a1, a2, isUniquelyReferenced_nonNull_native, v7, v9);
  v11 = off_100639DE0;
  off_100639DE0 = v13;
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v11);
  return swift_endAccess(v14);
}

uint64_t sub_100279368(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  id v8;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_10001CFF8(0, &qword_10063A848, CLPlacemark_ptr);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1002793F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  char v8;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v13;
  _BYTE v14[24];

  if (qword_10062F4F0 != -1)
    swift_once(&qword_10062F4F0, sub_1002633FC);
  swift_beginAccess(&off_100639DE0, v14, 32, 0);
  v6 = off_100639DE0;
  if (*((_QWORD *)off_100639DE0 + 2))
  {
    swift_bridgeObjectRetain(a2);
    v7 = sub_1004A8604(a1, a2);
    v9 = 0uLL;
    if ((v8 & 1) != 0)
      v9 = *(_OWORD *)(v6[7] + 16 * v7);
    v13 = v9;
    v10 = v8 ^ 1;
    swift_bridgeObjectRelease(a2);
    v11 = v13;
  }
  else
  {
    v11 = 0uLL;
    v10 = 1;
  }
  *(_OWORD *)a3 = v11;
  *(_BYTE *)(a3 + 16) = v10 & 1;
  return swift_endAccess(v14);
}

_BYTE *sub_1002794E0@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

double sub_100279548@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  v4 = *a1;
  v3 = a1[1];
  sub_10002EDBC((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v3).n128_u64[0];
  return result;
}

uint64_t sub_100279588(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  _QWORD v33[4];
  _OWORD v34[2];
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v8 = -1 << *(_BYTE *)(a1 + 32);
  v9 = ~v8;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = -v8;
  v38 = a1;
  v39 = a1 + 64;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v40 = v9;
  v41 = 0;
  v42 = v12 & v10;
  v43 = a2;
  v44 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_100279CD8(&v36);
  v13 = *((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
  {
LABEL_19:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_1000FBE78(v38);
    return swift_release(v44);
  }
  while (1)
  {
    v16 = v36;
    sub_10000491C(&v37, v35);
    v17 = *a5;
    v19 = sub_1004A8604(v16, v13);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      break;
    v23 = v18;
    if (*(_QWORD *)(v17 + 24) >= v22)
    {
      if ((a4 & 1) != 0)
      {
        if ((v18 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        sub_10012A4A4();
        if ((v23 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      sub_10012539C(v22, a4 & 1);
      v24 = sub_1004A8604(v16, v13);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_22;
      v19 = v24;
      if ((v23 & 1) != 0)
      {
LABEL_6:
        v14 = 32 * v19;
        sub_10002EDBC(*(_QWORD *)(*a5 + 56) + v14, (uint64_t)v33);
        sub_10002EDBC((uint64_t)v33, (uint64_t)v34);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v33);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v35);
        swift_bridgeObjectRelease(v13);
        v15 = (_QWORD *)(*(_QWORD *)(*a5 + 56) + v14);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v15);
        sub_10000491C(v34, v15);
        goto LABEL_7;
      }
    }
    v26 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v19 >> 6) + 64) |= 1 << v19;
    v27 = (uint64_t *)(v26[6] + 16 * v19);
    *v27 = v16;
    v27[1] = v13;
    sub_10000491C(v35, (_OWORD *)(v26[7] + 32 * v19));
    v28 = v26[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_21;
    v26[2] = v30;
LABEL_7:
    sub_100279CD8(&v36);
    v13 = *((_QWORD *)&v36 + 1);
    a4 = 1;
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1002797E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t i;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  _OWORD v48[2];
  _OWORD v49[2];
  __int128 v50;
  _OWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v9 = -1 << *(_BYTE *)(a1 + 32);
  v10 = ~v9;
  v11 = *(_QWORD *)(a1 + 64);
  v12 = -v9;
  v52 = a1;
  v53 = a1 + 64;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  else
    v13 = -1;
  v54 = v10;
  v55 = 0;
  v56 = v13 & v11;
  v57 = a2;
  v58 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_100279CD8(&v50);
  v14 = *((_QWORD *)&v50 + 1);
  if (!*((_QWORD *)&v50 + 1))
    goto LABEL_27;
  v15 = v50;
  sub_10000491C(v51, v49);
  v16 = *(_QWORD **)a5;
  v18 = sub_1004A8604(v15, v14);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) != 0)
    {
      if ((v17 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_10012A4A4();
      if ((v22 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v26 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    v27 = (uint64_t *)(v26[6] + 16 * v18);
    *v27 = v15;
    v27[1] = v14;
    sub_10000491C(v49, (_OWORD *)(v26[7] + 32 * v18));
    v28 = v26[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v26[2] = v30;
LABEL_16:
    sub_100279CD8(&v50);
    for (i = *((_QWORD *)&v50 + 1); *((_QWORD *)&v50 + 1); i = *((_QWORD *)&v50 + 1))
    {
      v33 = v50;
      sub_10000491C(v51, v49);
      v34 = *(_QWORD **)a5;
      v36 = sub_1004A8604(v33, i);
      v37 = v34[2];
      v38 = (v35 & 1) == 0;
      v39 = v37 + v38;
      if (__OFADD__(v37, v38))
        goto LABEL_28;
      v40 = v35;
      if (v34[3] < v39)
      {
        sub_10012539C(v39, 1);
        v41 = sub_1004A8604(v33, i);
        if ((v40 & 1) != (v42 & 1))
          goto LABEL_30;
        v36 = v41;
      }
      if ((v40 & 1) != 0)
      {
        sub_10002EDBC((uint64_t)v49, (uint64_t)v48);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v49);
        swift_bridgeObjectRelease(i);
        v32 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v36);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v32);
        sub_10000491C(v48, v32);
      }
      else
      {
        v43 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v36 >> 6) + 64) |= 1 << v36;
        v44 = (uint64_t *)(v43[6] + 16 * v36);
        *v44 = v33;
        v44[1] = i;
        sub_10000491C(v49, (_OWORD *)(v43[7] + 32 * v36));
        v45 = v43[2];
        v29 = __OFADD__(v45, 1);
        v46 = v45 + 1;
        if (v29)
          goto LABEL_29;
        v43[2] = v46;
      }
      sub_100279CD8(&v50);
    }
LABEL_27:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_1000FBE78(v52);
    return swift_release(v58);
  }
  sub_10012539C(v21, a4 & 1);
  v23 = sub_1004A8604(v15, v14);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
    if ((v22 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_10002EDBC((uint64_t)v49, (uint64_t)v48);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v49);
    swift_bridgeObjectRelease(v14);
    v25 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v18);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v25);
    sub_10000491C(v48, v25);
    goto LABEL_16;
  }
LABEL_30:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100279B3C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 16 * v6;
    v8 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v9 = *v8;
    v10 = v8[1];
    v11 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v7);
    v12 = *v11;
    v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    v14 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    v23[2] = v12;
    v23[3] = v13;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v13);
    v14(&v22, v23);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v10);
    return v22;
  }
  v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      v18 = v0[1];
      v19 = *(_QWORD *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        v5 = (v19 - 1) & v19;
        v6 = __clz(__rbit64(v19)) + (v16 << 6);
        v4 = v16;
        goto LABEL_3;
      }
      v20 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        v19 = *(_QWORD *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          v16 = v20;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          v19 = *(_QWORD *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            v16 = v3 + 3;
            goto LABEL_7;
          }
          v20 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            v19 = *(_QWORD *)(v18 + 8 * v20);
            if (v19)
              goto LABEL_10;
            v16 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              v19 = *(_QWORD *)(v18 + 8 * v16);
              if (v19)
                goto LABEL_7;
              v4 = v17 - 1;
              v21 = v3 + 6;
              while (v17 != v21)
              {
                v19 = *(_QWORD *)(v18 + 8 * v21++);
                if (v19)
                {
                  v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_100279CD8@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_10002EDBC(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_1000A1F54((uint64_t)&v23, (uint64_t)v22, &qword_100636C88);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_100008030((uint64_t)v21, &qword_10063A838);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_100279EBC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *__return_ptr, _QWORD *);
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  _QWORD v31[6];
  _QWORD v32[6];

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 32 * v8);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v1[3] = v6;
    v1[4] = v7;
    v17 = (void (*)(_QWORD *__return_ptr, _QWORD *))v1[5];
    v32[0] = v10;
    v32[1] = v11;
    v32[2] = v13;
    v32[3] = v14;
    v32[4] = v15;
    v32[5] = v16;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v16);
    v17(v31, v32);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v14);
    result = swift_bridgeObjectRelease(v11);
    v19 = v31[0];
    v20 = v31[1];
    v21 = v31[2];
    v22 = v31[3];
    v23 = v31[4];
    v24 = v31[5];
LABEL_23:
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v21;
    a1[3] = v22;
    a1[4] = v23;
    a1[5] = v24;
    return result;
  }
  v25 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    v26 = (unint64_t)(v1[2] + 64) >> 6;
    if (v25 < v26)
    {
      v27 = v1[1];
      v28 = *(_QWORD *)(v27 + 8 * v25);
      if (v28)
      {
LABEL_7:
        v7 = (v28 - 1) & v28;
        v8 = __clz(__rbit64(v28)) + (v25 << 6);
        v6 = v25;
        goto LABEL_3;
      }
      v29 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v26)
      {
        v28 = *(_QWORD *)(v27 + 8 * v29);
        if (v28)
        {
LABEL_10:
          v25 = v29;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v26)
        {
          v28 = *(_QWORD *)(v27 + 8 * (v5 + 3));
          if (v28)
          {
            v25 = v5 + 3;
            goto LABEL_7;
          }
          v29 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v26)
          {
            v28 = *(_QWORD *)(v27 + 8 * v29);
            if (v28)
              goto LABEL_10;
            v25 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v26)
            {
              v28 = *(_QWORD *)(v27 + 8 * v25);
              if (v28)
                goto LABEL_7;
              v6 = v26 - 1;
              v30 = v5 + 6;
              while (v26 != v30)
              {
                v28 = *(_QWORD *)(v27 + 8 * v30++);
                if (v28)
                {
                  v25 = v30 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v1[3] = v6;
    v1[4] = 0;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

void sub_10027A090(uint64_t a1, NSObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  id v20;
  NSString v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  NSObject *v25;
  _QWORD v26[5];
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  _QWORD aBlock[2];
  uint64_t (*v31)(uint64_t, uint64_t, void *);
  void *v32;
  void (*v33)(uint64_t, uint64_t);
  _QWORD *v34;

  v3 = *(_QWORD *)(a1 + 56);
  v27 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & v3;
  v28 = (unint64_t)(v4 + 63) >> 6;
  v29 = a1;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  if (v6)
    goto LABEL_6;
LABEL_7:
  if (!__OFADD__(v7++, 1))
  {
    if (v7 >= v28)
      goto LABEL_29;
    v11 = *(_QWORD *)(v27 + 8 * v7);
    if (v11)
    {
LABEL_19:
      v6 = (v11 - 1) & v11;
      for (i = __clz(__rbit64(v11)) + (v7 << 6); ; i = v8 | (v7 << 6))
      {
        v13 = (uint64_t *)(*(_QWORD *)(v29 + 48) + 16 * i);
        v15 = *v13;
        v14 = v13[1];
        v16 = qword_10062F4E8;
        swift_bridgeObjectRetain(v14);
        if (v16 != -1)
          v17 = swift_once(&qword_10062F4E8, sub_100263228);
        __chkstk_darwin(v17);
        v26[2] = v15;
        v26[3] = v14;
        v18 = sub_100004828(&qword_10063A840);
        OS_dispatch_queue.sync<A>(execute:)(sub_10027FEEC, v26, v18, v19);
        if ((v31 & 1) != 0)
        {
          dispatch_group_enter(a2);
          v20 = objc_msgSend(objc_allocWithZone((Class)CLGeocoder), "init");
          v21 = String._bridgeToObjectiveC()();
          v22 = (_QWORD *)swift_allocObject(&unk_10060CA38, 40, 7);
          v22[2] = a2;
          v22[3] = v15;
          v22[4] = v14;
          v33 = sub_10027F394;
          v34 = v22;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          v31 = sub_100279368;
          v32 = &unk_10060CA50;
          v23 = _Block_copy(aBlock);
          v24 = v34;
          swift_bridgeObjectRetain(v14);
          v25 = a2;
          swift_release(v24);
          objc_msgSend(v20, "geocodeAddressString:completionHandler:", v21, v23);
          _Block_release(v23);
          swift_bridgeObjectRelease(v14);

          if (!v6)
            goto LABEL_7;
        }
        else
        {
          swift_bridgeObjectRelease(v14);
          if (!v6)
            goto LABEL_7;
        }
LABEL_6:
        v8 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
      }
    }
    v12 = v7 + 1;
    if (v7 + 1 >= v28)
      goto LABEL_29;
    v11 = *(_QWORD *)(v27 + 8 * v12);
    if (!v11)
    {
      v12 = v7 + 2;
      if (v7 + 2 >= v28)
        goto LABEL_29;
      v11 = *(_QWORD *)(v27 + 8 * v12);
      if (!v11)
      {
        v12 = v7 + 3;
        if (v7 + 3 >= v28)
          goto LABEL_29;
        v11 = *(_QWORD *)(v27 + 8 * v12);
        if (!v11)
        {
          v12 = v7 + 4;
          if (v7 + 4 < v28)
          {
            v11 = *(_QWORD *)(v27 + 8 * v12);
            if (v11)
              goto LABEL_18;
            while (1)
            {
              v7 = v12 + 1;
              if (__OFADD__(v12, 1))
                goto LABEL_31;
              if (v7 >= v28)
                break;
              v11 = *(_QWORD *)(v27 + 8 * v7);
              ++v12;
              if (v11)
                goto LABEL_19;
            }
          }
LABEL_29:
          swift_release(v29);
          return;
        }
      }
    }
LABEL_18:
    v7 = v12;
    goto LABEL_19;
  }
  __break(1u);
LABEL_31:
  __break(1u);
}

uint64_t sub_10027A3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  char v58;

  v4 = type metadata accessor for DIPError.Code(0);
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  __chkstk_darwin(v4);
  v49 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError(0);
  v51 = *(_QWORD *)(v6 - 8);
  v52 = v6;
  __chkstk_darwin(v6);
  v50 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v53 - 8);
  v9 = __chkstk_darwin(v53);
  v46 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - v12;
  v14 = type metadata accessor for String.Encoding(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2
    && (static String.Encoding.utf8.getter(v16),
        v19 = String.data(using:allowLossyConversion:)(v18, 0, a1, a2),
        v21 = v20,
        v16 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14),
        v21 >> 60 != 15))
  {
    v45 = a1;
    v27 = type metadata accessor for JSONDecoder(0);
    v28 = swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    v29 = JSONDecoder.init()(v28);
    v30 = sub_10027FD98();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for DUADataAug, v19, v21, &type metadata for DUADataAug, v30);
    v44 = v19;
    swift_release(v29);
    v31 = v55;
    v43 = v54;
    v32 = v56;
    v33 = v57;
    v34 = v58 & 1;
    v35 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    v36 = JSONEncoder.init()();
    v54 = v43;
    v55 = v31;
    v56 = v32;
    v57 = v33;
    v58 = 2;
    v37 = sub_10027F188();
    v38 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v54, &type metadata for DUADataAug, v37);
    v40 = v39;
    swift_release(v36);
    v41 = swift_bridgeObjectRelease(v31);
    v54 = v38;
    v55 = v40;
    static String.Encoding.utf8.getter(v41);
    v42 = sub_10027F28C();
    String.init<A>(bytes:encoding:)(&v54, v18, &type metadata for Data, v42);
    sub_100007F78(v44, v21);
    sub_100007F8C(v38, v40);
    return v34;
  }
  else
  {
    v22 = defaultLogger()(v16);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "no duaDataAug, using defaults", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v53);
    swift_bridgeObjectRetain(a2);
    return 0;
  }
}

uint64_t sub_10027A950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _QWORD v124[15];
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[15];
  uint64_t v128;
  uint64_t v129;
  _OWORD v130[4];
  _OWORD v131[5];
  unint64_t v132;

  v118 = a2;
  v5 = type metadata accessor for Logger(0);
  v115 = *(_QWORD *)(v5 - 8);
  v116 = v5;
  __chkstk_darwin(v5);
  v114 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError.Code(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for DIPPregeneratedAssessment(0);
  v12 = __chkstk_darwin(v11);
  v117 = (uint64_t)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = Data.init(base64Encoded:options:)(*(_QWORD *)(a1 + *(int *)(v12 + 36)), *(_QWORD *)(a1 + *(int *)(v12 + 36) + 8), 1);
  if (v15 >> 60 == 15)
    goto LABEL_4;
  v16 = v15;
  v119 = v14;
  v113 = v8;
  v17 = Data.init(base64Encoded:options:)(*(_QWORD *)(a1 + v11[11]), *(_QWORD *)(a1 + v11[11] + 8), 1);
  if (v18 >> 60 == 15)
  {
    sub_100007F78(v119, v16);
    v8 = v113;
LABEL_4:
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.base64DecodingFailed(_:), v7);
    v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v22 = swift_allocError(v20, v21, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x80000001005598A0, 0, v10, 0, v19, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD00000000000001BLL, 0x80000001005598D0, 927);
    swift_willThrow(v23);
LABEL_8:
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.internalError(_:), v7);
    swift_errorRetain(v22);
    v33 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v34 = type metadata accessor for DIPError(0);
    v35 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v34, v35, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x8000000100559860, v22, v10, 0, v33, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD00000000000001BLL, 0x80000001005598D0, 946);
    swift_willThrow(v36);
    return swift_errorRelease(v22);
  }
  v109 = a3;
  v110 = a1;
  v111 = v18;
  v112 = v17;
  v24 = type metadata accessor for JSONDecoder(0);
  v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v26 = v16;
  v27 = JSONDecoder.init()(v25);
  v28 = sub_10027FE24();
  v29 = v119;
  v30 = v132;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for DIPClientGUIDSeeds, v119, v26, &type metadata for DIPClientGUIDSeeds, v28);
  v22 = v30;
  if (v30)
  {
    swift_release(v27);
    sub_100007F78(v112, v111);
    sub_100007F78(v29, v26);
    v8 = v113;
    goto LABEL_8;
  }
  v132 = v26;
  v131[0] = v120;
  v131[1] = v121;
  v131[2] = v122;
  v131[3] = v123;
  v32 = v111;
  v31 = v112;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for DIPClientGUIDSeeds, v112, v111, &type metadata for DIPClientGUIDSeeds, v28);
  v130[0] = v120;
  v130[1] = v121;
  v130[2] = v122;
  v130[3] = v123;
  sub_10020EB54(v131, (uint64_t)v124);
  v94 = v124[1];
  v95 = v124[0];
  v92 = v124[3];
  v93 = v124[2];
  v91 = v124[4];
  v107 = v124[5];
  v108 = v27;
  v105 = v124[7];
  v106 = v124[6];
  v103 = v124[9];
  v104 = v124[8];
  v101 = v124[11];
  v102 = v124[10];
  v99 = v124[13];
  v100 = v124[12];
  v97 = v125;
  v98 = v124[14];
  v96 = v126;
  sub_10027FE68(v131);
  sub_10020EB54(v130, (uint64_t)v127);
  v75 = v127[0];
  v118 = v127[1];
  v89 = v127[3];
  v90 = v127[2];
  v87 = v127[5];
  v88 = v127[4];
  v85 = v127[7];
  v86 = v127[6];
  v83 = v127[9];
  v84 = v127[8];
  v81 = v127[11];
  v82 = v127[10];
  v79 = v127[13];
  v80 = v127[12];
  v77 = v128;
  v78 = v127[14];
  v76 = v129;
  sub_10027FE68(v130);
  v38 = (_QWORD *)(v110 + v11[8]);
  v39 = v38[1];
  if (v125 == *v38 && v126 == v39)
  {
    v40 = v117;
    sub_100035DE8(v110, v117, type metadata accessor for DIPPregeneratedAssessment);
  }
  else
  {
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v125, v126, *v38, v39, 0);
    v40 = v117;
    sub_100035DE8(v110, v117, type metadata accessor for DIPPregeneratedAssessment);
    if ((v41 & 1) == 0)
    {
      sub_1001837F4(v124);
      sub_1001837F4(v127);
      sub_100035DAC(v40, type metadata accessor for DIPPregeneratedAssessment);
      goto LABEL_22;
    }
  }
  v42 = (_QWORD *)(v40 + v11[10]);
  v43 = v42[1];
  if (v128 != *v42 || v129 != v43)
  {
    v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v128, v129, *v42, v43, 0);
    v44 = sub_100035DAC(v40, type metadata accessor for DIPPregeneratedAssessment);
    if ((v45 & 1) != 0)
      goto LABEL_17;
    sub_1001837F4(v124);
    sub_1001837F4(v127);
LABEL_22:
    v8 = v113;
    v69 = v108;
    (*(void (**)(char *, _QWORD, uint64_t))(v113 + 104))(v10, enum case for DIPError.Code.guidSeedMismatch(_:), v7);
    v70 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v71 = type metadata accessor for DIPError(0);
    v72 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v22 = swift_allocError(v71, v72, 0, 0);
    v73 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003FLL, 0x80000001005598F0, 0, v10, 0, v70, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD00000000000001BLL, 0x80000001005598D0, 939);
    swift_willThrow(v73);
    swift_release(v69);
    sub_100007F78(v112, v111);
    sub_100007F78(v119, v132);
    goto LABEL_8;
  }
  v44 = sub_100035DAC(v40, type metadata accessor for DIPPregeneratedAssessment);
LABEL_17:
  v46 = v114;
  v47 = defaultLogger()(v44);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.debug.getter(v48);
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "using guids from pre-generated assessment", v50, 2u);
    v51 = v50;
    v31 = v112;
    swift_slowDealloc(v51, -1, -1);
  }
  sub_100007F78(v119, v132);
  swift_release(v108);
  sub_100007F78(v31, v32);

  result = (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v46, v116);
  v52 = v109;
  v53 = v93;
  *(_QWORD *)(v109 + 8) = v94;
  *(_QWORD *)(v52 + 16) = v53;
  v54 = v91;
  *(_QWORD *)(v52 + 24) = v92;
  *(_QWORD *)(v52 + 32) = v54;
  *(_BYTE *)v52 = v95 & 1;
  v55 = v106;
  *(_QWORD *)(v52 + 40) = v107;
  *(_QWORD *)(v52 + 48) = v55;
  v56 = v104;
  *(_QWORD *)(v52 + 56) = v105;
  *(_QWORD *)(v52 + 64) = v56;
  v57 = v102;
  *(_QWORD *)(v52 + 72) = v103;
  *(_QWORD *)(v52 + 80) = v57;
  v58 = v100;
  *(_QWORD *)(v52 + 88) = v101;
  *(_QWORD *)(v52 + 96) = v58;
  v59 = v98;
  *(_QWORD *)(v52 + 104) = v99;
  *(_QWORD *)(v52 + 112) = v59;
  v60 = v96;
  *(_QWORD *)(v52 + 120) = v97;
  *(_QWORD *)(v52 + 128) = v60;
  *(_BYTE *)(v52 + 136) = v75 & 1;
  v61 = v90;
  *(_QWORD *)(v52 + 144) = v118;
  *(_QWORD *)(v52 + 152) = v61;
  v62 = v88;
  *(_QWORD *)(v52 + 160) = v89;
  *(_QWORD *)(v52 + 168) = v62;
  v63 = v86;
  *(_QWORD *)(v52 + 176) = v87;
  *(_QWORD *)(v52 + 184) = v63;
  v64 = v84;
  *(_QWORD *)(v52 + 192) = v85;
  *(_QWORD *)(v52 + 200) = v64;
  v65 = v82;
  *(_QWORD *)(v52 + 208) = v83;
  *(_QWORD *)(v52 + 216) = v65;
  v66 = v80;
  *(_QWORD *)(v52 + 224) = v81;
  *(_QWORD *)(v52 + 232) = v66;
  v67 = v78;
  *(_QWORD *)(v52 + 240) = v79;
  *(_QWORD *)(v52 + 248) = v67;
  v68 = v76;
  *(_QWORD *)(v52 + 256) = v77;
  *(_QWORD *)(v52 + 264) = v68;
  return result;
}

_QWORD *sub_10027B28C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  Swift::String v47;
  Swift::String v48;
  _QWORD *result;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  void *v58;
  _QWORD *v59;

  v53 = a1;
  v54 = a2;
  v2 = sub_100004828(&qword_100633978);
  __chkstk_darwin(v2);
  v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PDF417ParsedData(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v51 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v52 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v50 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v50 - v16;
  v18 = defaultLogger()(v15);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Preparing bindings dict from PDF417ParsedData", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23 = v8;
  v22(v17, v8);
  v59 = &_swiftEmptyDictionarySingleton;
  sub_100038B24(v53, (uint64_t)v4, &qword_100633978);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100008030((uint64_t)v4, &qword_100633978);
  }
  else
  {
    v24 = v51;
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v51, v4, v5);
    v26 = PDF417ParsedData.getBindings()(v25);
    sub_10044BF1C(v26);
    v28 = v27;
    swift_bridgeObjectRelease(v26);
    v29 = v59;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v59);
    *(_QWORD *)&v57 = v29;
    sub_1002797E8(v28, (uint64_t)sub_100279548, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v57);
    v59 = (_QWORD *)v57;
    v31 = swift_bridgeObjectRelease(0x8000000000000000);
    v32 = defaultLogger()(v31);
    __chkstk_darwin(v32);
    *(&v50 - 2) = (uint64_t)&v59;
    Logger.sensitive(_:)(sub_10027F348);
    v22(v14, v23);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v24, v5);
  }
  v33 = sub_100265DF4((uint64_t *)&v59);
  v34 = v54;
  if (!v54)
    goto LABEL_12;
  swift_retain(v54);
  OS_dispatch_group.wait()();
  v35 = *(_QWORD **)(v34 + 112);
  if (!v35 || v35[2] != 2)
  {
    v33 = swift_release(v34);
LABEL_12:
    v41 = v52;
    v42 = defaultLogger()(v33);
    v43 = Logger.logObject.getter(v42);
    v45 = static os_log_type_t.info.getter(v43, v44);
    if (os_log_type_enabled(v43, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v45, "No GPS location available for bindings", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    v22(v41, v23);
    goto LABEL_15;
  }
  v58 = &type metadata for Double;
  *(_QWORD *)&v57 = v35[4];
  sub_10000491C(&v57, v56);
  swift_bridgeObjectRetain(v35);
  v36 = swift_isUniquelyReferenced_nonNull_native(v59);
  v55 = v59;
  v59 = (_QWORD *)0x8000000000000000;
  sub_100481A14(v56, 0xD000000000000018, 0x8000000100558EE0, v36);
  v37 = v59;
  v59 = v55;
  swift_bridgeObjectRelease(v37);
  v58 = &type metadata for Double;
  if (v35[2] >= 2uLL)
  {
    v38 = v35[5];
    swift_bridgeObjectRelease(v35);
    *(_QWORD *)&v57 = v38;
    sub_10000491C(&v57, v56);
    v39 = swift_isUniquelyReferenced_nonNull_native(v59);
    v55 = v59;
    v59 = (_QWORD *)0x8000000000000000;
    sub_100481A14(v56, 0xD000000000000019, 0x8000000100558F00, v39);
    v40 = v59;
    v59 = v55;
    swift_release(v34);
    swift_bridgeObjectRelease(v40);
LABEL_15:
    v47._countAndFlagsBits = 0xD00000000000001ELL;
    v47._object = (void *)0x8000000100558EC0;
    v48._countAndFlagsBits = 0x6133333630313834;
    v48._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v48, v47);
    return v59;
  }
  __break(1u);
  result = (_QWORD *)swift_bridgeObjectRelease(0x8000000000000000);
  __break(1u);
  return result;
}

uint64_t sub_10027B774(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc(dword_10063A78C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100007EE8;
  v3[2] = a1;
  v4 = (_QWORD *)swift_task_alloc(dword_1006446AC);
  v3[3] = v4;
  *v4 = v3;
  v4[1] = sub_100265420;
  return sub_1004F92EC();
}

uint64_t sub_10027B7E8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10063A79C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10018499C;
  v2 = (_QWORD *)swift_task_alloc(dword_1006446B4);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1002654D8;
  return sub_1004FAD30();
}

uint64_t sub_10027B84C(uint64_t a1, char a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _BYTE *v26;
  BOOL v27;
  double v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD v37[3];
  uint64_t countAndFlagsBits;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t object;
  double v44;
  char v45;
  char v46;
  char v47;
  double v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[3];
  __int128 v54;
  _BYTE v55[16];
  _QWORD v56[2];

  v6 = 0;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v9);
  v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A1F54(a1, (uint64_t)&v49, &qword_10063A820);
  if (*((_QWORD *)&v50 + 1) >> 60 == 15)
    return v6;
  v53[0] = v49;
  v53[1] = v50;
  v53[2] = v51;
  v54 = v52;
  sub_1000A1F54((uint64_t)v53, (uint64_t)v55, &qword_100638678);
  sub_1000A1F54((uint64_t)v55, (uint64_t)v56, &qword_100638678);
  if (v56[1] >> 60 == 15)
    return 0;
  v37[1] = v8;
  v39 = a2 & 1;
  sub_10027F1CC(a1, (void (*)(void))sub_100028034, (void (*)(uint64_t, unint64_t))sub_100022948);
  sub_100222730((uint64_t)v55);
  v12 = Data.base64EncodedString(options:)(0);
  countAndFlagsBits = v12._countAndFlagsBits;
  sub_1002227CC((uint64_t)v55);
  if (byte_100670061)
    v13 = *((double *)&v54 + 1);
  else
    v13 = -1.0;
  v14 = sub_100004828((uint64_t *)&unk_100636410);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v15 + 56) = &type metadata for Double;
  *(_QWORD *)(v15 + 64) = &protocol witness table for Double;
  *(double *)(v15 + 32) = v13;
  v16 = String.init(format:_:)(1714630181, 0xE400000000000000, v15);
  v18 = v17;
  v19 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v41 = JSONEncoder.init()();
  v40 = v37;
  v48 = 0.0;
  v20 = __chkstk_darwin(v41);
  v37[-2] = &v48;
  if ((v18 & 0x1000000000000000) != 0 || !(v18 & 0x2000000000000000 | v16 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(&v47, sub_10027F11C);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v37[2] = v37;
    __chkstk_darwin(v20);
    v37[-2] = sub_10027F11C;
    v37[-1] = v21;
    if ((v18 & 0x2000000000000000) != 0)
    {
      v42 = v16;
      object = v18 & 0xFFFFFFFFFFFFFFLL;
      if (v16 <= 0x20u && ((0x100003E01uLL >> v16) & 1) != 0)
      {
        v27 = 0;
      }
      else
      {
        v26 = (_BYTE *)_swift_stdlib_strtod_clocale(&v42, &v48);
        if (v26)
          v27 = *v26 == 0;
        else
          v27 = 0;
      }
      v24 = v39;
      v25 = countAndFlagsBits;
      v47 = v27;
      swift_bridgeObjectRelease(v18);
      goto LABEL_20;
    }
    if ((v16 & 0x1000000000000000) != 0)
    {
      v22 = (v18 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v23 = v16 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v22 = _StringObject.sharedUTF8.getter(v16, v18);
    }
    v47 = sub_100012AD0(v22, v23, (void (*)(uint64_t *__return_ptr))sub_1000FBD80) & 1;
    swift_bridgeObjectRelease(v18);
  }
  v24 = v39;
  v25 = countAndFlagsBits;
LABEL_20:
  v28 = v48;
  if (!v47)
    v28 = -1.0;
  v42 = v25;
  object = (uint64_t)v12._object;
  v44 = v28;
  v45 = v24;
  v46 = a3;
  v29 = sub_10027F188();
  v30 = v41;
  v32 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v42, &type metadata for DUADataAug, v29);
  v34 = v33;
  swift_release(v30);
  v35 = swift_bridgeObjectRelease(v12._object);
  v42 = v32;
  object = v34;
  static String.Encoding.utf8.getter(v35);
  v36 = sub_10027F28C();
  v6 = String.init<A>(bytes:encoding:)(&v42, v11, &type metadata for Data, v36);
  sub_10027F1CC(a1, (void (*)(void))sub_100007F78, (void (*)(uint64_t, unint64_t))sub_100007F8C);
  sub_100007F8C(v32, v34);
  return v6;
}

uint64_t sub_10027BDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void (*v53)(char *, _QWORD, uint64_t);
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  unint64_t v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  Swift::String v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  Swift::String v91;
  char *v92;
  char *v93;
  int *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  void *v123;
  char *v124;
  uint64_t v125;
  uint64_t countAndFlagsBits;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  void *object;

  v15 = v14;
  v131 = a8;
  v132 = a7;
  v133 = a6;
  v130 = a5;
  v129 = a2;
  v128 = a1;
  v146 = type metadata accessor for DIPError.Code(0);
  v144 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v147 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for DispatchWorkItemFlags(0);
  v125 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v124 = (char *)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for DIPPregeneratedAssessment(0);
  __chkstk_darwin(v127);
  v134 = (char *)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004828(&qword_10063A7B8);
  __chkstk_darwin(v19);
  v136 = (uint64_t)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100004828(&qword_10063A7D8);
  v141 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v140 = (char *)&v116 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100004828(&qword_10063A7B0);
  __chkstk_darwin(v22);
  v138 = (uint64_t)&v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100004828(&qword_10063A6C8);
  v24 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v26 = (char *)&v116 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = Data.base64EncodedString(options:)(0);
  countAndFlagsBits = v27._countAndFlagsBits;
  object = v27._object;
  v28 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = JSONEncoder.init()();
  v30 = 49;
  if (*(_BYTE *)a10)
    v30 = 50;
  v31 = *(_QWORD *)(a10 + 72);
  v32 = *(_QWORD *)(a10 + 80);
  v33 = *(_QWORD *)(a10 + 88);
  v34 = *(_QWORD *)(a10 + 96);
  v35 = *(_QWORD *)(a10 + 104);
  v36 = *(_QWORD *)(a10 + 112);
  v148 = v30;
  v149 = 0xE100000000000000;
  v150 = v31;
  v151 = v32;
  v152 = v33;
  v153 = v34;
  v154 = v35;
  v155 = v36;
  v37 = sub_10027F044();
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v36);
  v142 = v37;
  v145 = v29;
  v38 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v148, &type metadata for DIPClientGUIDSeeds, v37);
  v143 = v15;
  if (v15)
  {
    swift_bridgeObjectRelease(object);
    swift_release(v145);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(0xE100000000000000);
    v53 = *(void (**)(char *, _QWORD, uint64_t))(v144 + 104);
    v55 = v146;
    v54 = v147;
    v53(v147, enum case for DIPError.Code.jsonEncodingFailed(_:), v146);
    swift_errorRetain(v15);
    v56 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v57 = type metadata accessor for DIPError(0);
    v58 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v59 = swift_allocError(v57, v58, 0, 0);
    v60 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000036, 0x8000000100558D00, v15, v54, 0, v56, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD0000000000000B0, 0x8000000100558D40, 1355);
    swift_willThrow(v60);
    swift_errorRelease(v15);
    if (!v143)
      swift_bridgeObjectRelease(v123);
    v53(v54, enum case for DIPError.Code.internalError(_:), v55);
    swift_errorRetain(v59);
    v61 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v62 = type metadata accessor for DIPError(0);
    v63 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v62, v63, 0, 0);
    v64 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v59, v54, 0, v61, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD0000000000000B0, 0x8000000100558D40, 1376);
    swift_willThrow(v64);
    return swift_errorRelease(v59);
  }
  else
  {
    v40 = v38;
    v41 = v39;
    v122 = v24;
    v121 = v26;
    v120 = a10;
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(0xE100000000000000);
    v42 = Data.base64EncodedString(options:)(0);
    v119 = v42._countAndFlagsBits;
    sub_100007F8C(v40, v41);
    v43 = 49;
    if (*(_BYTE *)a11)
      v43 = 50;
    v44 = *(_QWORD *)(a11 + 72);
    v45 = *(_QWORD *)(a11 + 80);
    v46 = *(_QWORD *)(a11 + 88);
    v47 = *(_QWORD *)(a11 + 96);
    v48 = *(_QWORD *)(a11 + 104);
    v49 = *(_QWORD *)(a11 + 112);
    v148 = v43;
    v149 = 0xE100000000000000;
    v150 = v44;
    v151 = v45;
    v152 = v46;
    v153 = v47;
    v154 = v48;
    v155 = v49;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v49);
    v50 = v145;
    v51 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v148, &type metadata for DIPClientGUIDSeeds, v142);
    v123 = v42._object;
    v66 = v51;
    v67 = v52;
    v118 = a11;
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(0xE100000000000000);
    v68 = Data.base64EncodedString(options:)(0);
    v117 = v68._countAndFlagsBits;
    sub_100007F8C(v66, v67);
    v69 = v138;
    sub_100038B24(a13, v138, &qword_10063A7B0);
    v70 = v137;
    v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v69, 1, v137);
    v142 = (unint64_t)v68._object;
    if (v71 == 1)
    {
      sub_100008030(v69, &qword_10063A7B0);
      v138 = 0;
      v72 = 0;
      v73 = v139;
      v74 = v140;
      v75 = v141;
      v76 = v50;
    }
    else
    {
      v77 = (uint64_t)v121;
      sub_1000A1F54(v69, (uint64_t)v121, &qword_10063A6C8);
      v78 = sub_10027F0A0();
      v76 = v50;
      v79 = dispatch thunk of JSONEncoder.encode<A>(_:)(v77, v70, v78);
      v73 = v139;
      v74 = v140;
      v75 = v141;
      v80 = v79;
      v82 = v81;
      v83 = Data.base64EncodedString(options:)(0);
      v138 = v83._countAndFlagsBits;
      sub_100007F8C(v80, v82);
      v84 = v77;
      v72 = v83._object;
      sub_100008030(v84, &qword_10063A6C8);
    }
    v85 = v136;
    sub_100038B24(a14, v136, &qword_10063A7B8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v85, 1, v73) == 1)
    {
      v145 = (uint64_t)v72;
      swift_release(v76);
      sub_100008030(v85, &qword_10063A7B8);
      v143 = 0;
      v86 = 0;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v74, v85, v73);
      v87 = sub_100099FFC(&qword_10063A808, &qword_10063A7D8, (uint64_t)&protocol conformance descriptor for EncryptedDataContainer<A>);
      v88 = dispatch thunk of JSONEncoder.encode<A>(_:)(v74, v73, v87);
      v90 = v89;
      v145 = (uint64_t)v72;
      v91 = Data.base64EncodedString(options:)(0);
      v143 = v91._countAndFlagsBits;
      v92 = v74;
      v86 = v91._object;
      swift_release(v76);
      sub_100007F8C(v88, v90);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v92, v73);
    }
    v93 = v124;
    v94 = (int *)v127;
    v95 = v134;
    v96 = v129;
    swift_bridgeObjectRetain(v129);
    Date.init()(v97);
    v157 = *(_OWORD *)(v120 + 120);
    v98 = v157;
    *v95 = v128;
    v95[1] = v96;
    v99 = (_QWORD *)((char *)v95 + v94[6]);
    v100 = (uint64_t)object;
    *v99 = countAndFlagsBits;
    v99[1] = v100;
    v101 = (_QWORD *)((char *)v95 + v94[7]);
    v102 = v133;
    *v101 = v130;
    v101[1] = v102;
    *(_OWORD *)((char *)v95 + v94[8]) = v98;
    v103 = (_QWORD *)((char *)v95 + v94[9]);
    v104 = (uint64_t)v123;
    *v103 = v119;
    v103[1] = v104;
    v105 = v118;
    *(_OWORD *)((char *)v95 + v94[10]) = *(_OWORD *)(v118 + 120);
    v106 = *(_OWORD *)(v105 + 120);
    v107 = (_QWORD *)((char *)v95 + v94[11]);
    v108 = v142;
    *v107 = v117;
    v107[1] = v108;
    v109 = (_QWORD *)((char *)v95 + v94[12]);
    *v109 = v131;
    v109[1] = a9;
    *(_QWORD *)((char *)v95 + v94[13]) = v132;
    v156 = v106;
    *(_QWORD *)((char *)v95 + v94[14]) = a12;
    v110 = (_QWORD *)((char *)v95 + v94[15]);
    v111 = v145;
    *v110 = v138;
    v110[1] = v111;
    v112 = (_QWORD *)((char *)v95 + v94[16]);
    *v112 = v143;
    v112[1] = (uint64_t)v86;
    swift_bridgeObjectRetain(v102);
    sub_1000DB7AC((uint64_t)&v157);
    sub_1000DB7AC((uint64_t)&v156);
    v113 = qword_10062F5B0;
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a12);
    if (v113 != -1)
      v114 = swift_once(&qword_10062F5B0, sub_100486FCC);
    v115 = static DispatchWorkItemFlags.barrier.getter(v114);
    __chkstk_darwin(v115);
    OS_dispatch_queue.sync<A>(flags:execute:)(v93, sub_10027F088);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v93, v135);
    return sub_100035DAC((uint64_t)v95, type metadata accessor for DIPPregeneratedAssessment);
  }
}

uint64_t sub_10027C938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  *(_BYTE *)(v7 + 397) = a7;
  *(_QWORD *)(v7 + 928) = a6;
  *(_QWORD *)(v7 + 920) = a5;
  *(_QWORD *)(v7 + 912) = a4;
  *(_QWORD *)(v7 + 904) = a3;
  *(_QWORD *)(v7 + 896) = a2;
  *(_QWORD *)(v7 + 888) = a1;
  v8 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v7 + 936) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 944) = v9;
  *(_QWORD *)(v7 + 952) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  *(_QWORD *)(v7 + 960) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 + 968) = v11;
  *(_QWORD *)(v7 + 976) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  *(_QWORD *)(v7 + 984) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v7 + 992) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 1000) = swift_task_alloc(v14);
  *(_QWORD *)(v7 + 1008) = swift_task_alloc(v14);
  v15 = sub_100004828(&qword_10063A7B0);
  *(_QWORD *)(v7 + 1016) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.Encoding(0);
  *(_QWORD *)(v7 + 1024) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v7 + 1032) = v17;
  *(_QWORD *)(v7 + 1040) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_10063A7B8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 1048) = swift_task_alloc(v18);
  *(_QWORD *)(v7 + 1056) = swift_task_alloc(v18);
  *(_QWORD *)(v7 + 1064) = swift_task_alloc(v18);
  v19 = sub_100004828(&qword_10063A6C8);
  *(_QWORD *)(v7 + 1072) = v19;
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v7 + 1080) = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 1088) = swift_task_alloc(v21);
  *(_QWORD *)(v7 + 1096) = swift_task_alloc(v21);
  v22 = type metadata accessor for UUID(0);
  *(_QWORD *)(v7 + 1104) = v22;
  v23 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v7 + 1112) = v23;
  *(_QWORD *)(v7 + 1120) = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006375E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 1128) = swift_task_alloc(v24);
  *(_QWORD *)(v7 + 1136) = swift_task_alloc(v24);
  v25 = type metadata accessor for AugmentedProfile(0);
  *(_QWORD *)(v7 + 1144) = v25;
  *(_QWORD *)(v7 + 1152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Logger(0);
  *(_QWORD *)(v7 + 1160) = v26;
  v27 = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(v7 + 1168) = v27;
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 1176) = swift_task_alloc(v28);
  *(_QWORD *)(v7 + 1184) = swift_task_alloc(v28);
  return swift_task_switch(sub_10027CB90, 0, 0);
}

uint64_t sub_10027CB90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = *(_QWORD *)(v1 + 896);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v43 = *(_QWORD *)(v1 + 1168);
    v45 = *(_QWORD *)(v1 + 1160);
    v46 = *(_QWORD *)(v1 + 1184);
    v6 = *(_QWORD *)(v1 + 896);
    v7 = *(_QWORD *)(v1 + 888);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v47 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 880) = sub_1000E3AC8(v7, v6, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 880, v1 + 888, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pre-generating assessment for workflow ID %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v10(v46, v45);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 1184);
    v12 = *(_QWORD *)(v1 + 1168);
    v13 = *(_QWORD *)(v1 + 1160);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 896), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v10(v11, v13);
  }
  *(_QWORD *)(v1 + 1192) = v10;
  sub_1001A5908(*(_QWORD *)(v1 + 904), *(_QWORD *)(v1 + 912), *(uint8_t **)(v1 + 1152));
  v14 = (_QWORD *)(v1 + 512);
  v15 = (_QWORD *)(v1 + 768);
  v16 = *(_QWORD *)(v1 + 1152);
  v17 = *(_QWORD *)(v1 + 1136);
  sub_1001AC08C(v16);
  sub_100038B24(v16, v17, &qword_1006375E0);
  v18 = sub_100004828(&qword_100636840);
  *(_QWORD *)(v1 + 1200) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v1 + 1208) = v19;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  *(_QWORD *)(v1 + 1216) = v20;
  v21 = v20(v17, 1, v18);
  v22 = *(_QWORD *)(v1 + 1136);
  if (v21 == 1)
  {
    sub_100008030(*(_QWORD *)(v1 + 1136), &qword_1006375E0);
    v23 = 0;
  }
  else
  {
    JWSSignedJSON.payload.getter(v18);
    v24 = *(_QWORD *)(v1 + 400);
    v25 = *(_QWORD *)(v1 + 408);
    v26 = *(_QWORD *)(v1 + 416);
    v28 = *(_QWORD *)(v1 + 432);
    v27 = *(_QWORD *)(v1 + 440);
    v39 = *(_QWORD *)(v1 + 448);
    v40 = *(_QWORD *)(v1 + 424);
    v38 = *(_QWORD *)(v1 + 456);
    v41 = *(_QWORD *)(v1 + 464);
    v42 = *(_QWORD *)(v1 + 472);
    v44 = *(_QWORD *)(v1 + 480);
    v29 = v18;
    v23 = *(_BYTE *)(v1 + 507);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v29);
    v30 = v24;
    v14 = (_QWORD *)(v1 + 512);
    v31 = v25;
    v15 = (_QWORD *)(v1 + 768);
    sub_1001849FC(v30, v31, v26, v40, v28, v27, v39, v38);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v44);
  }
  v32 = *(_QWORD *)(v1 + 928);
  v33 = *(_QWORD *)(v1 + 920);
  v34 = swift_allocObject(&unk_10060C948, 32, 7);
  *(_QWORD *)(v34 + 16) = v33;
  *(_QWORD *)(v34 + 24) = v32;
  *(_QWORD *)(v1 + 792) = type metadata accessor for DeviceInformationProvider(0);
  *(_QWORD *)(v1 + 800) = &protocol witness table for DeviceInformationProvider;
  sub_100022234(v15);
  swift_bridgeObjectRetain(v32);
  DeviceInformationProvider.init()(v35);
  sub_1002104E4(v15, v23, (uint64_t)&unk_10063A7C8, v34, v14);
  v36 = (_QWORD *)swift_task_alloc(dword_100638C9C);
  *(_QWORD *)(v1 + 1224) = v36;
  *v36 = v1;
  v36[1] = sub_10027D044;
  return sub_10020EDB0(v1 + 152);
}

uint64_t sub_10027D044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1224);
  *(_QWORD *)(*(_QWORD *)v1 + 1232) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10027EAE4;
  else
    v3 = sub_10027D0A8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10027D0A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[35];
  v0[155] = v0[34];
  v0[156] = v1;
  v2 = dword_100638C8C;
  swift_bridgeObjectRetain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[157] = v3;
  *v3 = v0;
  v3[1] = sub_10027D118;
  return sub_10020F3B8((uint64_t)(v0 + 2));
}

uint64_t sub_10027D118()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1256);
  *(_QWORD *)(*v1 + 1264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 1248);
    sub_1001837F4((_QWORD *)(v2 + 152));
    swift_bridgeObjectRelease(v4);
    v5 = sub_10027EC2C;
  }
  else
  {
    v5 = sub_10027D190;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10027D190()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(void);
  int v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  NSNumber v75;
  char isUniquelyReferenced_nonNull_native;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  _BOOL4 v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  unint64_t v117;
  NSObject *v118;
  uint8_t *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  void (*v169)(uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  unint64_t v202;
  int64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned __int8 *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t (*v251)(uint64_t, uint64_t);
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  id v260;
  unint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275[3];

  v1 = v0;
  v2 = v0 + 2;
  v3 = v0 + 19;
  v4 = v0 + 64;
  v5 = v0[144];
  v6 = v0[143];
  v7 = v0[17];
  v8 = v1[18];
  v9 = (uint64_t *)(v5 + *(int *)(v6 + 20));
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v11);
  v12 = Data.init(base64Encoded:options:)(v10, v11, 1);
  v14 = v13;
  swift_bridgeObjectRelease(v11);
  if (v14 >> 60 == 15)
  {
    v15 = v1[156];
    v16 = v1[144];
    v17 = v1[119];
    v18 = v1[118];
    v19 = v1[117];
    swift_bridgeObjectRelease(v8);
    sub_1001837F4(v2);
    sub_1001837F4(v3);
    swift_bridgeObjectRelease(v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v17, enum case for DIPError.Code.internalError(_:), v19);
    v20 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v21 = type metadata accessor for DIPError(0);
    v22 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v21, v22, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002DLL, 0x8000000100558B60, 0, v17, 0, v20, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD00000000000004FLL, 0x8000000100558B90, 1282);
    swift_willThrow(v23);
    sub_10027EE00(v4);
LABEL_14:
    sub_100035DAC(v16, type metadata accessor for AugmentedProfile);
    goto LABEL_15;
  }
  v263 = v4;
  v266 = v12;
  if (qword_10062F4B0 != -1)
    swift_once(&qword_10062F4B0, sub_1001A5E1C);
  v24 = v1[158];
  v25 = v1[156];
  v26 = v1[155];
  v27 = qword_1006702E0;
  swift_retain(qword_1006702E0);
  v28 = sub_1001AD3EC(v26, v25);
  if (v24)
  {
    v30 = v1[156];
    sub_100035DAC(v1[144], type metadata accessor for AugmentedProfile);
    swift_release(v27);
    sub_10027EE00(v263);
    swift_bridgeObjectRelease(v8);
    sub_1001837F4(v2);
    sub_1001837F4(v3);
    sub_100007F78(v266, v14);
    swift_bridgeObjectRelease(v30);
LABEL_15:
    v58 = v1[148];
    v59 = v1[147];
    v60 = v1[144];
    v61 = v1[142];
    v62 = v1[141];
    v63 = v1[140];
    v64 = v1;
    v65 = v1[137];
    v66 = v64[136];
    v67 = v64[133];
    v68 = v64[132];
    v245 = v64[131];
    v248 = v64[130];
    v253 = v64[127];
    v256 = v64[126];
    v259 = v64[125];
    v264 = v64[122];
    v267 = v64[119];
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v245);
    swift_task_dealloc(v248);
    swift_task_dealloc(v253);
    swift_task_dealloc(v256);
    swift_task_dealloc(v259);
    swift_task_dealloc(v264);
    swift_task_dealloc(v267);
    v69 = (uint64_t (*)(void))v64[1];
    return v69();
  }
  v31 = v28;
  v32 = v29;
  v258 = v1;
  swift_release(v27);
  if (v32 >> 60 == 15)
  {
    v33 = v1[156];
    v16 = v1[144];
    v34 = v1[119];
    v35 = v1[118];
    v36 = v1[117];
    swift_bridgeObjectRelease(v8);
    sub_1001837F4(v2);
    sub_1001837F4(v3);
    swift_bridgeObjectRelease(v33);
    v37 = v36;
    v1 = v258;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v35 + 104))(v34, enum case for DIPError.Code.internalError(_:), v37);
    v38 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v39 = type metadata accessor for DIPError(0);
    v40 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v39, v40, 0, 0);
    v41 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x8000000100558BE0, 0, v34, 0, v38, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD00000000000004FLL, 0x8000000100558B90, 1286);
    swift_willThrow(v41);
    sub_10027EE00(v263);
LABEL_13:
    sub_100007F78(v266, v14);
    goto LABEL_14;
  }
  v252 = v31;
  v255 = v32;
  v16 = v1[144];
  v42 = (uint64_t *)(v16 + *(int *)(v1[143] + 24));
  v43 = v42[1];
  if (!v43)
  {
LABEL_12:
    v49 = v258[156];
    v50 = v258[119];
    v51 = v258[118];
    v52 = v258[117];
    swift_bridgeObjectRelease(v8);
    sub_1001837F4(v2);
    sub_1001837F4(v3);
    swift_bridgeObjectRelease(v49);
    v53 = v52;
    v1 = v258;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v51 + 104))(v50, enum case for DIPError.Code.internalError(_:), v53);
    v54 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v55 = type metadata accessor for DIPError(0);
    v56 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v55, v56, 0, 0);
    v57 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x8000000100558C10, 0, v50, 0, v54, 0xD00000000000004CLL, 0x8000000100558AE0, 0xD00000000000004FLL, 0x8000000100558B90, 1291);
    swift_willThrow(v57);
    sub_10027EE00(v263);
    sub_100007F78(v252, v32);
    goto LABEL_13;
  }
  v44 = *v42;
  swift_bridgeObjectRetain(v42[1]);
  v45 = Data.init(base64Encoded:options:)(v44, v43, 1);
  v47 = v46;
  v48 = swift_bridgeObjectRelease(v43);
  if (v47 >> 60 == 15)
  {
    v16 = v258[144];
    goto LABEL_12;
  }
  v244 = v45;
  v246 = v47;
  v71 = *((unsigned __int8 *)v258 + 397);
  v72 = UUID.init()(v48);
  v243 = UUID.uuidString.getter(v72);
  v249 = v73;
  if (v71 == 1)
  {
    v74 = (void *)sub_10001CFF8(0, &qword_100636CA8, NSNumber_ptr);
    v75.super.super.isa = NSNumber.init(integerLiteral:)(2).super.super.isa;
  }
  else
  {
    v74 = &type metadata for Int;
    v75.super.super.isa = (Class)1;
  }
  v258[104] = v74;
  v258[101] = v75.super.super.isa;
  sub_10000491C(v258 + 101, v258 + 105);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v275[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
  v77 = (__int128 *)v258;
  sub_100481A14(v258 + 105, 0xD000000000000012, 0x8000000100558C50, isUniquelyReferenced_nonNull_native);
  v78 = swift_bridgeObjectRelease(0x8000000000000000);
  v79 = UUID.uuidString.getter(v78);
  v81 = v80;
  v82 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v82, *(unsigned int *)(v82 + 48), *(unsigned __int16 *)(v82 + 52));
  v83 = swift_bridgeObjectRetain(v249);
  v84 = JSONEncoder.init()(v83);
  v258[90] = v79;
  v240 = v81;
  v258[91] = v81;
  v258[92] = v243;
  v258[93] = v249;
  v258[94] = v7;
  v258[95] = v8;
  v85 = sub_10027EE68();
  v86 = dispatch thunk of JSONEncoder.encode<A>(_:)(v258 + 90, &type metadata for TSID, v85);
  v88 = v87;
  v229 = v79;
  v89 = v258[137];
  v90 = v258[133];
  v228 = (unsigned __int8 *)v258 + 397;
  v232 = *((unsigned __int8 *)v258 + 397);
  v91 = v86;
  swift_release(v84);
  v92 = sub_100004828(&qword_100634078);
  v93 = swift_allocObject(v92, 48, 7);
  *(_OWORD *)(v93 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v93 + 32) = v91;
  *(_QWORD *)(v93 + 40) = v88;
  v236 = (_QWORD *)v93;
  v94 = sub_100004828(&qword_1006385E0);
  v224 = *(_QWORD *)(v94 - 8);
  v226 = v94;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v224 + 56))(v89, 1, 1);
  v95 = sub_100004828(&qword_10063A7D8);
  v96 = *(_QWORD *)(v95 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56))(v90, 1, 1, v95);
  v239 = v88;
  v238 = v91;
  if (v232 == 1)
  {
    v217 = v96;
    v219 = v95;
    v97 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v258[152];
    v98 = v258[150];
    v99 = v258[141];
    sub_100038B24(v258[144], v99, &qword_1006375E0);
    if (v97(v99, 1, v98) == 1)
    {
      v100 = v258[141];
      sub_100022948(v91, v88);
      sub_100008030(v100, &qword_1006375E0);
      v101 = 0;
      v102 = 0;
      v103 = v240;
      v104 = v229;
    }
    else
    {
      v121 = v258[151];
      v122 = v258[150];
      v206 = v258[141];
      sub_100022948(v91, v239);
      JWSSignedJSON.payload.getter(v122);
      v123 = v258[39];
      v234 = v258[38];
      v124 = v258[40];
      v222 = v258[41];
      v125 = v258[42];
      v208 = v258[43];
      v212 = v258[44];
      v214 = v258[45];
      v216 = v258[46];
      v126 = v258[36];
      v127 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
      v101 = v258[37];
      v127(v206, v122);
      sub_1001AD7A0(v126, v101, v234, v123, v124, v222, v125, v208);
      v207 = v126;
      v128 = v126;
      v210 = v123;
      v129 = v123;
      v102 = (void *)v208;
      v130 = v125;
      sub_1001849FC(v128, v101, v234, v129, v124, v222, v125, v208);
      swift_bridgeObjectRelease(v212);
      swift_bridgeObjectRelease(v214);
      swift_bridgeObjectRelease(v216);
      v103 = v240;
      v104 = v229;
      if (v101)
      {
        swift_bridgeObjectRetain(v208);
        v131 = v101;
        v101 = v130;
        sub_1001849FC(v207, v131, v234, v210, v124, v222, v130, v208);
      }
      else
      {
        v102 = 0;
      }
      v77 = (__int128 *)v258;
    }
    sub_10026B680(*((_QWORD *)v77 + 136), *((_QWORD *)v77 + 132), v101, v102, v104, v103, *((_QWORD *)v77 + 155), *((_QWORD *)v77 + 156));
    v155 = *((_QWORD *)v77 + 156);
    v156 = *((_QWORD *)v77 + 137);
    v157 = *((_QWORD *)v77 + 136);
    v272 = *((_QWORD *)v77 + 133);
    v242 = *((_QWORD *)v77 + 132);
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v155);
    swift_bridgeObjectRelease(v103);
    swift_bridgeObjectRelease(v249);
    swift_bridgeObjectRelease(v8);
    sub_100184E1C(v157, v156, &qword_10063A6C8);
    sub_100184E1C(v242, v272, &qword_10063A7B8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v224 + 48))(v156, 1, v226))
    {
      v158 = EncryptedDataContainer.data.getter(v226);
      if (v159)
      {
        v160 = v158;
        v161 = v159;
        v162 = *((_QWORD *)v77 + 130);
        v163 = *((_QWORD *)v77 + 129);
        v164 = v77;
        v165 = *((_QWORD *)v77 + 128);
        static String.Encoding.utf8.getter(v158);
        v166 = String.data(using:allowLossyConversion:)(v162, 0, v160, v161);
        v168 = v167;
        swift_bridgeObjectRelease(v161);
        v169 = *(void (**)(uint64_t, uint64_t))(v163 + 8);
        v169(v162, v165);
        if (v168 >> 60 == 15)
        {
          v77 = v164;
        }
        else
        {
          v274 = v166;
          if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(v217 + 48))(*((_QWORD *)v164 + 133), 1, v219))
          {
            v77 = v164;
            sub_100007F78(v166, v168);
          }
          else
          {
            v187 = EncryptedDataContainer.data.getter(v219);
            if (!v188)
              goto LABEL_48;
            v189 = v187;
            v190 = v188;
            v191 = v258[130];
            v192 = v258[128];
            static String.Encoding.utf8.getter(v187);
            v193 = String.data(using:allowLossyConversion:)(v191, 0, v189, v190);
            v195 = v194;
            swift_bridgeObjectRelease(v190);
            v169(v191, v192);
            if (v195 >> 60 != 15)
            {
              sub_100022948(v274, v168);
              v199 = v236[2];
              v198 = v236[3];
              v200 = v199 + 1;
              if (v199 >= v198 >> 1)
                v236 = sub_1000E2CA4((_QWORD *)(v198 > 1), v199 + 1, 1, v236);
              v236[2] = v200;
              v201 = &v236[2 * v199];
              v201[4] = v274;
              v201[5] = v168;
              sub_100022948(v193, v195);
              v202 = v236[3];
              v203 = v199 + 2;
              if (v203 > (uint64_t)(v202 >> 1))
                v236 = sub_1000E2CA4((_QWORD *)(v202 > 1), v203, 1, v236);
              v236[2] = v203;
              v204 = &v236[2 * v200];
              v204[4] = v193;
              v204[5] = v195;
              sub_100007F78(v274, v168);
              v196 = v193;
              v197 = v195;
            }
            else
            {
LABEL_48:
              v196 = v274;
              v197 = v168;
            }
            sub_100007F78(v196, v197);
            v77 = (__int128 *)v258;
          }
        }
      }
    }
  }
  else
  {
    v105 = v258[156];
    sub_100022948(v91, v88);
    swift_bridgeObjectRelease(v240);
    swift_bridgeObjectRelease(v249);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v105);
  }
  if (qword_10062F560 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  v269 = *((_QWORD *)v77 + 112);
  v106 = *((_QWORD *)v77 + 111);
  v260 = objc_msgSend((id)objc_opt_self(DIPMobileKeyBag), "deviceLockState");
  v107 = qword_1006702E0;
  swift_retain(qword_1006702E0);
  sub_100028034(v244, v246);
  swift_bridgeObjectRetain(&_swiftEmptyDictionarySingleton);
  sub_1001A62EC(v266, v14, v244, v246, (uint64_t)&_swiftEmptyDictionarySingleton, (uint64_t)v236, v252, v255, v77 + 41, v106, v269, 9u);
  v241 = (uint64_t *)(v77 + 41);
  v108 = *((_QWORD *)v77 + 112);
  v225 = *((_QWORD *)v77 + 84);
  v227 = *((_QWORD *)v77 + 83);
  v221 = *((_QWORD *)v77 + 86);
  v223 = *((_QWORD *)v77 + 85);
  v220 = *((_QWORD *)v77 + 87);
  v230 = *((_QWORD *)v77 + 82);
  v233 = *((unsigned int *)v77 + 176);
  v215 = (unint64_t)v260 - 1;
  v218 = *((_QWORD *)v77 + 89);
  swift_bridgeObjectRelease(v236);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  sub_100007F78(v244, v246);
  swift_release(v107);
  v109 = *((_QWORD *)v77 + 85);
  v211 = *((unsigned int *)v77 + 176);
  v237 = *((_QWORD *)v77 + 84);
  v110 = sub_100022948(v237, v109);
  defaultLogger()(v110);
  v111 = swift_bridgeObjectRetain_n(v108, 2);
  v112 = Logger.logObject.getter(v111);
  v113 = static os_log_type_t.debug.getter(v112);
  v114 = os_log_type_enabled(v112, v113);
  v115 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v77 + 149);
  v116 = *((_QWORD *)v77 + 147);
  v213 = *((_QWORD *)v77 + 145);
  v117 = *((_QWORD *)v77 + 112);
  v261 = v109;
  if (v114)
  {
    v205 = *((_QWORD *)v77 + 111);
    v209 = *((_QWORD *)v77 + 147);
    v118 = v112;
    v119 = (uint8_t *)swift_slowAlloc(12, -1);
    v120 = (_QWORD *)swift_slowAlloc(32, -1);
    v275[0] = (uint64_t)v120;
    *(_DWORD *)v119 = 136446210;
    swift_bridgeObjectRetain(v117);
    *((_QWORD *)v77 + 109) = sub_1000E3AC8(v205, v117, v275);
    UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)v77 + 872, v77 + 55, v119 + 4);
    swift_bridgeObjectRelease_n(v117, 3);
    _os_log_impl((void *)&_mh_execute_header, v118, v113, "Successfully pre-generated an assessment for workflow ID %{public}s", v119, 0xCu);
    swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v120, -1, -1);
    swift_slowDealloc(v119, -1, -1);

    v115(v209, v213);
  }
  else
  {
    swift_bridgeObjectRelease_n(v117, 2);

    v115(v116, v213);
  }
  v132 = *v228;
  *((_QWORD *)v77 + 74) = v230;
  *((_QWORD *)v77 + 75) = v227;
  *((_QWORD *)v77 + 76) = v225;
  *((_QWORD *)v77 + 77) = v223;
  *((_QWORD *)v77 + 78) = v221;
  *((_QWORD *)v77 + 79) = v220;
  *((_QWORD *)v77 + 80) = v233;
  *((_QWORD *)v77 + 81) = v218;
  sub_10027EEAC(v241, (void (*)(uint64_t, uint64_t))sub_100028034, (void (*)(uint64_t, uint64_t))sub_100022948);
  v133 = sub_10027B84C((uint64_t)(v77 + 37), 0, v215 < 2);
  v135 = v134;
  sub_10027EEAC(v241, (void (*)(uint64_t, uint64_t))sub_100007F78, (void (*)(uint64_t, uint64_t))sub_100007F8C);
  if (v132 == 1)
  {
    v136 = *((_QWORD *)v77 + 135);
    v137 = *((_QWORD *)v77 + 134);
    v270 = v133;
    v138 = v135;
    v139 = *((_QWORD *)v77 + 133);
    v140 = *((_QWORD *)v77 + 131);
    v141 = *((_QWORD *)v77 + 127);
    v231 = *((_QWORD *)v77 + 111);
    v235 = *((_QWORD *)v77 + 112);
    sub_100038B24(*((_QWORD *)v77 + 137), v141, &qword_10063A6C8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v136 + 56))(v141, 0, 1, v137);
    sub_100038B24(v139, v140, &qword_10063A7B8);
    sub_10027BDAC(v231, v235, v237, v261, v270, v138, v211, v243, v249, (uint64_t)v3, (uint64_t)v2, (uint64_t)&_swiftEmptyDictionarySingleton, v141, v140);
    v170 = *((_QWORD *)v77 + 131);
    v171 = *((_QWORD *)v77 + 127);
    sub_1001837F4(v2);
    sub_1001837F4(v3);
    swift_bridgeObjectRelease(v138);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(v249);
    sub_100008030(v170, &qword_10063A7B8);
    v172 = sub_100008030(v171, &qword_10063A7B0);
    if (qword_10062F5B0 != -1)
      v172 = swift_once(&qword_10062F5B0, sub_100486FCC);
    v173 = *((_QWORD *)v77 + 126);
    v174 = *((_QWORD *)v77 + 125);
    v175 = *((_QWORD *)v77 + 124);
    v176 = *((_QWORD *)v77 + 123);
    v177 = *((_QWORD *)v77 + 122);
    v273 = *((_QWORD *)v77 + 112);
    v178 = *((_QWORD *)v77 + 111);
    v179 = qword_100670828;
    Date.init()(v172);
    static Date.- infix(_:_:)(v174, 60.0);
    v251 = *(uint64_t (**)(uint64_t, uint64_t))(v175 + 8);
    v180 = v251(v174, v176);
    static DispatchWorkItemFlags.barrier.getter(v180);
    v181 = (_QWORD *)swift_task_alloc(48);
    v181[2] = v179;
    v181[3] = v178;
    v181[4] = v273;
    v181[5] = v173;
    OS_dispatch_queue.sync<A>(flags:execute:)(v177, sub_10027EF18);
    v182 = *((_QWORD *)v77 + 140);
    v183 = *((_QWORD *)v77 + 139);
    v184 = *((_QWORD *)v77 + 138);
    v185 = *((_QWORD *)v77 + 126);
    v186 = *((_QWORD *)v77 + 123);
    (*(void (**)(_QWORD, _QWORD))(*((_QWORD *)v77 + 121) + 8))(*((_QWORD *)v77 + 122), *((_QWORD *)v77 + 120));
    sub_10027EE00(v263);
    sub_100007F8C(v237, v261);
    sub_100007F78(v252, v255);
    sub_100007F78(v266, v14);
    sub_10027EEAC(v241, (void (*)(uint64_t, uint64_t))sub_100007F78, (void (*)(uint64_t, uint64_t))sub_100007F8C);
    sub_100007F78(v244, v246);
    sub_100007F8C(v238, v239);
    swift_task_dealloc(v181);
    v251(v185, v186);
    (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v182, v184);
  }
  else
  {
    v142 = *((_QWORD *)v77 + 140);
    v143 = *((_QWORD *)v77 + 139);
    v144 = *((_QWORD *)v77 + 138);
    sub_1001837F4(v2);
    sub_1001837F4(v3);
    swift_bridgeObjectRelease(v135);
    sub_10027EE00(v263);
    sub_100007F8C(v237, v261);
    sub_100007F78(v252, v255);
    sub_100007F78(v266, v14);
    sub_10027EEAC(v241, (void (*)(uint64_t, uint64_t))sub_100007F78, (void (*)(uint64_t, uint64_t))sub_100007F8C);
    sub_100007F78(v244, v246);
    sub_100007F8C(v238, v239);
    swift_bridgeObjectRelease(v249);
    (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v142, v144);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  }
  v145 = *((_QWORD *)v77 + 148);
  v146 = *((_QWORD *)v77 + 147);
  v147 = *((_QWORD *)v77 + 144);
  v148 = *((_QWORD *)v77 + 142);
  v149 = *((_QWORD *)v77 + 141);
  v150 = *((_QWORD *)v77 + 140);
  v151 = v77;
  v152 = *((_QWORD *)v77 + 137);
  v153 = *((_QWORD *)v151 + 136);
  v154 = *((_QWORD *)v151 + 133);
  v247 = *((_QWORD *)v151 + 132);
  v250 = *((_QWORD *)v151 + 131);
  v254 = *((_QWORD *)v151 + 130);
  v257 = *((_QWORD *)v151 + 127);
  v262 = *((_QWORD *)v151 + 126);
  v265 = *((_QWORD *)v151 + 125);
  v268 = *((_QWORD *)v151 + 122);
  v271 = *((_QWORD *)v151 + 119);
  sub_100035DAC(v147, type metadata accessor for AugmentedProfile);
  sub_100008030(v154, &qword_10063A7B8);
  sub_100008030(v152, &qword_10063A6C8);
  swift_task_dealloc(v145);
  swift_task_dealloc(v146);
  swift_task_dealloc(v147);
  swift_task_dealloc(v148);
  swift_task_dealloc(v149);
  swift_task_dealloc(v150);
  swift_task_dealloc(v152);
  swift_task_dealloc(v153);
  swift_task_dealloc(v154);
  swift_task_dealloc(v247);
  swift_task_dealloc(v250);
  swift_task_dealloc(v254);
  swift_task_dealloc(v257);
  swift_task_dealloc(v262);
  swift_task_dealloc(v265);
  swift_task_dealloc(v268);
  swift_task_dealloc(v271);
  v69 = (uint64_t (*)(void))*((_QWORD *)v151 + 1);
  return v69();
}

uint64_t sub_10027EAE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 1152);
  sub_10027EE00((_QWORD *)(v0 + 512));
  sub_100035DAC(v1, type metadata accessor for AugmentedProfile);
  v2 = *(_QWORD *)(v0 + 1176);
  v3 = *(_QWORD *)(v0 + 1152);
  v4 = *(_QWORD *)(v0 + 1136);
  v5 = *(_QWORD *)(v0 + 1128);
  v6 = *(_QWORD *)(v0 + 1120);
  v7 = *(_QWORD *)(v0 + 1096);
  v8 = *(_QWORD *)(v0 + 1088);
  v9 = *(_QWORD *)(v0 + 1064);
  v10 = *(_QWORD *)(v0 + 1056);
  v12 = *(_QWORD *)(v0 + 1048);
  v13 = *(_QWORD *)(v0 + 1040);
  v14 = *(_QWORD *)(v0 + 1016);
  v15 = *(_QWORD *)(v0 + 1008);
  v16 = *(_QWORD *)(v0 + 1000);
  v17 = *(_QWORD *)(v0 + 976);
  v18 = *(_QWORD *)(v0 + 952);
  swift_task_dealloc(*(_QWORD *)(v0 + 1184));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027EC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 1152);
  sub_10027EE00((_QWORD *)(v0 + 512));
  sub_100035DAC(v1, type metadata accessor for AugmentedProfile);
  v2 = *(_QWORD *)(v0 + 1176);
  v3 = *(_QWORD *)(v0 + 1152);
  v4 = *(_QWORD *)(v0 + 1136);
  v5 = *(_QWORD *)(v0 + 1128);
  v6 = *(_QWORD *)(v0 + 1120);
  v7 = *(_QWORD *)(v0 + 1096);
  v8 = *(_QWORD *)(v0 + 1088);
  v9 = *(_QWORD *)(v0 + 1064);
  v10 = *(_QWORD *)(v0 + 1056);
  v12 = *(_QWORD *)(v0 + 1048);
  v13 = *(_QWORD *)(v0 + 1040);
  v14 = *(_QWORD *)(v0 + 1016);
  v15 = *(_QWORD *)(v0 + 1008);
  v16 = *(_QWORD *)(v0 + 1000);
  v17 = *(_QWORD *)(v0 + 976);
  v18 = *(_QWORD *)(v0 + 952);
  swift_task_dealloc(*(_QWORD *)(v0 + 1184));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027ED74()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10027ED98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10063A7C4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10027FEBC;
  swift_bridgeObjectRetain(v3);
  return sub_10018499C(v2, v3);
}

_QWORD *sub_10027EE00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_release(v2);
  return a1;
}

unint64_t sub_10027EE68()
{
  unint64_t result;

  result = qword_10063A7D0;
  if (!qword_10063A7D0)
  {
    result = swift_getWitnessTable(&unk_10052BAC4, &type metadata for TSID);
    atomic_store(result, (unint64_t *)&qword_10063A7D0);
  }
  return result;
}

uint64_t *sub_10027EEAC(uint64_t *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  a2(*a1, a1[1]);
  a3(v6, v7);
  a2(v8, v9);
  return a1;
}

const char *sub_10027EF18()
{
  uint64_t v0;

  return sub_1004A52C4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

unint64_t sub_10027EF34()
{
  unint64_t result;

  result = qword_10063A7E0;
  if (!qword_10063A7E0)
  {
    result = swift_getWitnessTable(&unk_100527DE4, &type metadata for TrainingSignalId);
    atomic_store(result, (unint64_t *)&qword_10063A7E0);
  }
  return result;
}

unint64_t sub_10027EF78()
{
  unint64_t result;

  result = qword_10063A7E8;
  if (!qword_10063A7E8)
  {
    result = swift_getWitnessTable(&unk_100527DBC, &type metadata for TrainingSignalId);
    atomic_store(result, (unint64_t *)&qword_10063A7E8);
  }
  return result;
}

unint64_t sub_10027EFBC()
{
  unint64_t result;

  result = qword_10063A7F0;
  if (!qword_10063A7F0)
  {
    result = swift_getWitnessTable(&unk_100527CF4, &type metadata for AssessmentGUIDContainer);
    atomic_store(result, (unint64_t *)&qword_10063A7F0);
  }
  return result;
}

unint64_t sub_10027F000()
{
  unint64_t result;

  result = qword_10063A7F8;
  if (!qword_10063A7F8)
  {
    result = swift_getWitnessTable(&unk_100527CCC, &type metadata for AssessmentGUIDContainer);
    atomic_store(result, (unint64_t *)&qword_10063A7F8);
  }
  return result;
}

unint64_t sub_10027F044()
{
  unint64_t result;

  result = qword_10063A800;
  if (!qword_10063A800)
  {
    result = swift_getWitnessTable(&unk_100525F48, &type metadata for DIPClientGUIDSeeds);
    atomic_store(result, (unint64_t *)&qword_10063A800);
  }
  return result;
}

const char *sub_10027F088()
{
  uint64_t v0;

  return sub_1004A02C8(*(NSObject **)(v0 + 16), *(_QWORD **)(v0 + 24));
}

unint64_t sub_10027F0A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063A810;
  if (!qword_10063A810)
  {
    v1 = sub_100013E24(&qword_10063A6C8);
    sub_100099FFC(&qword_10063A818, &qword_1006385E0, (uint64_t)&protocol conformance descriptor for EncryptedDataContainer<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10063A810);
  }
  return result;
}

_BYTE *sub_10027F11C@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

unint64_t sub_10027F188()
{
  unint64_t result;

  result = qword_10063A828;
  if (!qword_10063A828)
  {
    result = swift_getWitnessTable(&unk_10052BA9C, &type metadata for DUADataAug);
    atomic_store(result, (unint64_t *)&qword_10063A828);
  }
  return result;
}

uint64_t sub_10027F1CC(uint64_t a1, void (*a2)(void), void (*a3)(uint64_t, unint64_t))
{
  sub_10027F218(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a2, a3);
  return a1;
}

uint64_t sub_10027F218(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void), void (*a10)(uint64_t, unint64_t))
{
  uint64_t result;

  if (a4 >> 60 != 15)
  {
    a9();
    a10(a3, a4);
    return ((uint64_t (*)(uint64_t, uint64_t))a9)(a5, a6);
  }
  return result;
}

unint64_t sub_10027F28C()
{
  unint64_t result;

  result = qword_10063A830;
  if (!qword_10063A830)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10063A830);
  }
  return result;
}

uint64_t sub_10027F2D0(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t sub_10027F2E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10027F30C()
{
  uint64_t v0;

  return sub_1002756D0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10027F314()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10027F324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10027F334(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10027F340()
{
  uint64_t v0;

  return sub_100274A88(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_10027F348()
{
  uint64_t v0;

  return sub_100265D44(*(uint64_t **)(v0 + 16));
}

uint64_t sub_10027F350@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1002793F4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10027F368()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10027F394(uint64_t a1, uint64_t a2)
{
  NSObject **v2;

  sub_100278EF8(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_10027F3A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10027F3CC()
{
  uint64_t v0;

  return sub_100279270(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10027F3D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10027F3E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v1 = *(_QWORD *)(sub_100004828(&qword_100636668) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(sub_100004828(&qword_100636688) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v4 + v6 + 8) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = v0 + v3;
  v10 = (int *)type metadata accessor for AugmentedProfile(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v9, 1, v10))
  {
    v11 = sub_100004828(&qword_100636840);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[5] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[7] + 8));
  }
  swift_release(*(_QWORD *)(v0 + v4));
  v13 = v0 + v7;
  v14 = (int *)type metadata accessor for DIPPregeneratedAssessment(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v14 - 1) + 48))(v0 + v7, 1, v14))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + 8));
    v15 = v13 + v14[5];
    v16 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[7] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[8] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[9] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[10] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[11] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[14]));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[15] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[16] + 8));
  }
  v17 = (v8 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = v17 + 8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v17));
  return swift_deallocObject(v0, v18, v2 | v6 | 7);
}

uint64_t sub_10027F630()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(sub_100004828(&qword_100636668) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(sub_100004828(&qword_100636688) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_100273298(v0 + v2, *(_QWORD *)(v0 + v3), v0 + v5, *(_QWORD *)(v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10027F6BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10063A854);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10001D0A0;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_10026885C, 0, 0);
}

uint64_t sub_10027F720()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10027F74C()
{
  uint64_t v0;

  return sub_10027270C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t *sub_10027F754(uint64_t *a1)
{
  sub_100183888(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

unint64_t sub_10027F78C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063A888;
  if (!qword_10063A888)
  {
    v1 = sub_100013E24(&qword_10063A870);
    sub_10027EE68();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, &qword_10063A888);
  }
  return result;
}

uint64_t sub_10027F7F0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t *sub_10027F824(uint64_t *a1)
{
  sub_10027F858(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t sub_10027F858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

const char *sub_10027F894()
{
  uint64_t v0;

  return sub_10048C7E0(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_10027F8AC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  return swift_deallocObject(v0, 152, 7);
}

uint64_t sub_10027F908(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10063A89C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10001D0A0;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_10026B57C, 0, 0);
}

uint64_t sub_10027F968()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10063A8AC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100007EE8;
  v2 = (_QWORD *)swift_task_alloc(dword_100639E44);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_100007EE8;
  return sub_10026CC40();
}

uint64_t sub_10027F9CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(sub_100004828(&qword_10063A6C8) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 64) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(sub_100004828(&qword_10063A7B8) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = (v7 + *(_QWORD *)(v5 + 64)) & 0xFFFFFFFFFFFFFFF8;
  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  v9 = (char *)v0 + v3;
  v10 = sub_100004828(&qword_1006385E0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  v12 = v8 + 8;
  v13 = (v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  v14 = (char *)v0 + v7;
  v15 = sub_100004828(&qword_10063A7D8);
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v12 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v12 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v12 + 40));
  v17 = *(_QWORD *)((char *)v0 + v13 + 32);
  if (v17 != 1)
  {
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v13 + 48));
  }
  return swift_deallocObject(v0, v13 + 57, v2 | v6 | 7);
}

void sub_10027FB44(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7 = *(_QWORD *)(sub_100004828(&qword_10063A6C8) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(sub_100004828(&qword_10063A7B8) - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  sub_10026BD20(a1, a2, a3, *(char **)(v3 + 16), *(unsigned __int8 *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), v3 + v8, v3 + v11, *(_BYTE *)(v3 + v11 + *(_QWORD *)(v10 + 64)), (uint64_t *)(((v11 + *(_QWORD *)(v10 + 64)) & 0xFFFFFFFFFFFFFFF8) + v3 + 8), v3 + ((((v11 + *(_QWORD *)(v10 + 64)) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t *sub_10027FC1C(uint64_t *a1)
{
  sub_10027FC74(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  return a1;
}

uint64_t sub_10027FC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a13);
    swift_bridgeObjectRelease(a15);
    return swift_bridgeObjectRelease(a17);
  }
  return result;
}

uint64_t sub_10027FD04(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10027FD38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10063A8BC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10001D0A0;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_10026885C, 0, 0);
}

unint64_t sub_10027FD98()
{
  unint64_t result;

  result = qword_10063A8D8;
  if (!qword_10063A8D8)
  {
    result = swift_getWitnessTable(&unk_10052B934, &type metadata for DUADataAug);
    atomic_store(result, (unint64_t *)&qword_10063A8D8);
  }
  return result;
}

uint64_t *sub_10027FDDC(uint64_t *a1)
{
  sub_10018343C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  return a1;
}

unint64_t sub_10027FE24()
{
  unint64_t result;

  result = qword_10063A8F0;
  if (!qword_10063A8F0)
  {
    result = swift_getWitnessTable(&unk_100525F70, &type metadata for DIPClientGUIDSeeds);
    atomic_store(result, &qword_10063A8F0);
  }
  return result;
}

_QWORD *sub_10027FE68(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10027FEEC@<X0>(uint64_t a1@<X8>)
{
  return sub_10027F350(a1);
}

uint64_t sub_10027FF00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v1 = type metadata accessor for Logger(0);
  v0[239] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[240] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[241] = swift_task_alloc(v3);
  v0[242] = swift_task_alloc(v3);
  v0[243] = swift_task_alloc(v3);
  v0[244] = swift_task_alloc(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_10063EA64);
  v0[245] = v4;
  *v4 = v0;
  v4[1] = sub_10027FF94;
  return sub_1003A0F34();
}

uint64_t sub_10027FF94(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1960);
  *(_BYTE *)(*(_QWORD *)v1 + 1675) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10027FFF0, 0, 0);
}

uint64_t sub_10027FFF0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::Bool v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  const char *v12;
  id v13;
  Swift::String v14;
  Swift::Bool v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  os_log_type_t v35;

  if ((*(_BYTE *)(v0 + 1675) & 1) == 0)
  {
    v2 = (void *)objc_opt_self(NSUserDefaults);
    v3 = objc_msgSend(v2, "standardUserDefaults");
    v4._object = (void *)0x80000001005599D0;
    v4._countAndFlagsBits = 0xD000000000000010;
    v5 = NSUserDefaults.internalBool(forKey:)(v4);

    if (v5)
    {
      v7 = (uint64_t *)(v0 + 1952);
      v8 = defaultLogger()(v6);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.debug.getter(v9);
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v11 = 0;
        v12 = "Forcing cv to disabled due to user defaults setting";
LABEL_6:
        _os_log_impl((void *)&_mh_execute_header, v9, v10, v12, v11, 2u);
        v1 = 0;
        goto LABEL_10;
      }
    }
    else
    {
      v13 = objc_msgSend(v2, "standardUserDefaults");
      v14._countAndFlagsBits = 0x76632E6775626564;
      v14._object = (void *)0xEF656C62616E652ELL;
      v15 = NSUserDefaults.internalBool(forKey:)(v14);

      if (v15)
      {
        v7 = (uint64_t *)(v0 + 1944);
        v17 = defaultLogger()(v16);
        v9 = Logger.logObject.getter(v17);
        v18 = static os_log_type_t.debug.getter(v9);
        if (!os_log_type_enabled(v9, v18))
        {
          v1 = 1;
          goto LABEL_21;
        }
        v11 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v18, "Forcing cv to enabled due to user defaults setting", v11, 2u);
        v1 = 1;
LABEL_10:
        swift_slowDealloc(v11, -1, -1);
LABEL_21:
        v27 = *v7;
        v28 = *(_QWORD *)(v0 + 1920);
        v29 = *(_QWORD *)(v0 + 1912);

        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
        goto LABEL_22;
      }
      if (qword_10062F490 != -1)
        swift_once(&qword_10062F490, sub_100139C84);
      v19 = qword_1006702A0;
      v20 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
      v21 = (uint64_t)&v20[4];
      v22 = v20 + 52;
      os_unfair_lock_lock(v20 + 52);
      sub_100139D14(v21, v19, (_OWORD *)(v0 + 1680));
      os_unfair_lock_unlock(v22);
      sub_10002581C(v0 + 1680, v0 + 1872);
      sub_10001D410((_QWORD *)(v0 + 1680));
      sub_10000806C((_QWORD *)(v0 + 1872), *(_QWORD *)(v0 + 1896));
      sub_10010866C(v0 + 880);
      sub_1000A1F54(v0 + 880, v0 + 16, &qword_100632330);
      v23 = sub_100035A5C(v0 + 16);
      if (v23 == 1)
      {
        v24 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1872));
      }
      else
      {
        memcpy((void *)(v0 + 448), (const void *)(v0 + 16), 0x1B0uLL);
        sub_100035B1C(v0 + 880);
        memcpy((void *)(v0 + 1312), (const void *)(v0 + 480), 0x169uLL);
        sub_1000A1F54(v0 + 1609, v0 + 1673, &qword_10063A918);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1872));
        v24 = sub_1000A1F54(v0 + 1673, v0 + 1674, &qword_10063A918);
        v25 = *(unsigned __int8 *)(v0 + 1674);
        if (v25 != 2)
        {
          v1 = v25 & 1;
          v7 = (uint64_t *)(v0 + 1936);
          v34 = defaultLogger()(v24);
          v9 = Logger.logObject.getter(v34);
          v35 = static os_log_type_t.debug.getter(v9);
          if (!os_log_type_enabled(v9, v35))
            goto LABEL_21;
          v11 = (uint8_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v11 = 67109120;
          *(_DWORD *)(v0 + 1676) = v1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1676, v0 + 1680, v11 + 4);
          _os_log_impl((void *)&_mh_execute_header, v9, v35, "Using enableCV value from bootstrap: %{BOOL}d", v11, 8u);
          goto LABEL_10;
        }
      }
      v7 = (uint64_t *)(v0 + 1928);
      v26 = defaultLogger()(v24);
      v9 = Logger.logObject.getter(v26);
      v10 = static os_log_type_t.debug.getter(v9);
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v11 = 0;
        v12 = "No enableCV set in active config; defaulting isCVEnabled to false";
        goto LABEL_6;
      }
    }
    v1 = 0;
    goto LABEL_21;
  }
  v1 = 0;
LABEL_22:
  v30 = *(_QWORD *)(v0 + 1944);
  v31 = *(_QWORD *)(v0 + 1936);
  v32 = *(_QWORD *)(v0 + 1928);
  swift_task_dealloc(*(_QWORD *)(v0 + 1952));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100280480()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Logger(0);
  v0[245] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[246] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[247] = swift_task_alloc(v3);
  v0[248] = swift_task_alloc(v3);
  v0[249] = swift_task_alloc(v3);
  return swift_task_switch(sub_1002804F8, 0, 0);
}

uint64_t sub_1002804F8()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  double v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint32_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  os_log_type_t v30;
  Swift::Double_optional v31;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2._object = (void *)0x80000001005599A0;
  v2._countAndFlagsBits = 0xD000000000000020;
  v31 = NSUserDefaults.internalDouble(forKey:)(v2);
  v3 = *(double *)&v31.is_nil;
  v5 = v4;

  if ((v5 & 1) != 0)
  {
    if (qword_10062F490 != -1)
      swift_once(&qword_10062F490, sub_100139C84);
    v18 = qword_1006702A0;
    v19 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
    v20 = (uint64_t)&v19[4];
    v21 = v19 + 52;
    os_unfair_lock_lock(v19 + 52);
    sub_100139D14(v20, v18, (_OWORD *)(v0 + 1680));
    os_unfair_lock_unlock(v21);
    sub_10002581C(v0 + 1680, v0 + 1872);
    sub_10001D410((_QWORD *)(v0 + 1680));
    sub_10000806C((_QWORD *)(v0 + 1872), *(_QWORD *)(v0 + 1896));
    sub_10010866C(v0 + 16);
    sub_1000A1F54(v0 + 16, v0 + 880, &qword_100632330);
    if (sub_100035A5C(v0 + 880) == 1)
    {
      v22 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1872));
    }
    else
    {
      memcpy((void *)(v0 + 448), (const void *)(v0 + 880), 0x1B0uLL);
      sub_100035B1C(v0 + 16);
      memcpy((void *)(v0 + 1312), (const void *)(v0 + 480), 0x169uLL);
      sub_1000A1F54(v0 + 1616, v0 + 1928, &qword_10063A900);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1872));
      v22 = sub_1000A1F54(v0 + 1928, v0 + 1912, &qword_10063A900);
      if ((*(_BYTE *)(v0 + 1920) & 1) == 0)
      {
        v7 = (_QWORD *)(v0 + 1984);
        v8 = *(double *)(v0 + 1912);
        v29 = defaultLogger()(v22);
        v10 = Logger.logObject.getter(v29);
        v30 = static os_log_type_t.debug.getter(v10);
        if (!os_log_type_enabled(v10, v30))
          goto LABEL_13;
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v12 = 134217984;
        *(double *)(v0 + 1944) = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1944, v0 + 1952, v12 + 4);
        v13 = "Using cvBackgroundChance value from bootstrap: %f";
        v14 = v10;
        v15 = v30;
        goto LABEL_4;
      }
    }
    v7 = (_QWORD *)(v0 + 1976);
    v23 = defaultLogger()(v22);
    v10 = Logger.logObject.getter(v23);
    v24 = static os_log_type_t.debug.getter(v10);
    v8 = 0.25;
    if (os_log_type_enabled(v10, v24))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      v13 = "No cvBackgroundChance set in active config; using default background check chance";
      v14 = v10;
      v15 = v24;
      v16 = v12;
      v17 = 2;
      goto LABEL_12;
    }
  }
  else
  {
    v7 = (_QWORD *)(v0 + 1992);
    v8 = v3;
    v9 = defaultLogger()(v6);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v12 = 134217984;
      *(double *)(v0 + 1952) = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1952, v0 + 1960, v12 + 4);
      v13 = "Overriding cv background check chance to %f due to internal default setting";
      v14 = v10;
      v15 = v11;
LABEL_4:
      v16 = v12;
      v17 = 12;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, v16, v17);
      swift_slowDealloc(v12, -1, -1);
    }
  }
LABEL_13:

  v25 = *(_QWORD *)(v0 + 1992);
  v26 = *(_QWORD *)(v0 + 1984);
  v27 = *(_QWORD *)(v0 + 1976);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1968) + 8))(*v7, *(_QWORD *)(v0 + 1960));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(double))(v0 + 8))(v8);
}

uint64_t sub_1002808CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Logger(0);
  v0[245] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[246] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[247] = swift_task_alloc(v3);
  v0[248] = swift_task_alloc(v3);
  v0[249] = swift_task_alloc(v3);
  return swift_task_switch(sub_100280944, 0, 0);
}

uint64_t sub_100280944()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  double v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  os_log_type_t v28;
  Swift::Double_optional v29;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2._object = (void *)0x8000000100559980;
  v2._countAndFlagsBits = 0xD00000000000001DLL;
  v29 = NSUserDefaults.internalDouble(forKey:)(v2);
  v3 = *(double *)&v29.is_nil;
  v5 = v4;

  if ((v5 & 1) != 0)
  {
    if (qword_10062F490 != -1)
      swift_once(&qword_10062F490, sub_100139C84);
    v16 = qword_1006702A0;
    v17 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
    v18 = (uint64_t)&v17[4];
    v19 = v17 + 52;
    os_unfair_lock_lock(v17 + 52);
    sub_100139D14(v18, v16, (_OWORD *)(v0 + 1680));
    os_unfair_lock_unlock(v19);
    sub_10002581C(v0 + 1680, v0 + 1872);
    sub_10001D410((_QWORD *)(v0 + 1680));
    sub_10000806C((_QWORD *)(v0 + 1872), *(_QWORD *)(v0 + 1896));
    sub_10010866C(v0 + 16);
    sub_1000A1F54(v0 + 16, v0 + 880, &qword_100632330);
    if (sub_100035A5C(v0 + 880) == 1)
    {
      v20 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1872));
    }
    else
    {
      memcpy((void *)(v0 + 448), (const void *)(v0 + 880), 0x1B0uLL);
      sub_100035B1C(v0 + 16);
      memcpy((void *)(v0 + 1312), (const void *)(v0 + 480), 0x169uLL);
      sub_1000A1F54(v0 + 1632, v0 + 1928, &qword_10063A900);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1872));
      v20 = sub_1000A1F54(v0 + 1928, v0 + 1912, &qword_10063A900);
      if ((*(_BYTE *)(v0 + 1920) & 1) == 0)
      {
        v7 = (_QWORD *)(v0 + 1984);
        v8 = *(double *)(v0 + 1912);
        v27 = defaultLogger()(v20);
        v10 = Logger.logObject.getter(v27);
        v28 = static os_log_type_t.debug.getter(v10);
        if (!os_log_type_enabled(v10, v28))
          goto LABEL_13;
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v12 = 134217984;
        *(double *)(v0 + 1944) = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1944, v0 + 1952, v12 + 4);
        v13 = "Using cvRandomizationWindow value from bootstrap: %f";
        v14 = v10;
        v15 = v28;
        goto LABEL_4;
      }
    }
    v7 = (_QWORD *)(v0 + 1976);
    v21 = defaultLogger()(v20);
    v10 = Logger.logObject.getter(v21);
    v22 = static os_log_type_t.debug.getter(v10);
    if (!os_log_type_enabled(v10, v22))
    {
      v8 = 86400.0;
      goto LABEL_13;
    }
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v22, "Active config is not available; using default randomization window",
      v12,
      2u);
    v8 = 86400.0;
    goto LABEL_12;
  }
  v7 = (_QWORD *)(v0 + 1992);
  v8 = v3;
  v9 = defaultLogger()(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v12 = 134217984;
    *(double *)(v0 + 1952) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1952, v0 + 1960, v12 + 4);
    v13 = "Overriding cvRandomizationWindow to %f due to internal default setting";
    v14 = v10;
    v15 = v11;
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, v12, 0xCu);
LABEL_12:
    swift_slowDealloc(v12, -1, -1);
  }
LABEL_13:

  v23 = *(_QWORD *)(v0 + 1992);
  v24 = *(_QWORD *)(v0 + 1984);
  v25 = *(_QWORD *)(v0 + 1976);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1968) + 8))(*v7, *(_QWORD *)(v0 + 1960));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(double))(v0 + 8))(v8);
}

double sub_100280D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Swift::String v5;
  double v6;
  char v7;
  char v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v16;
  double v17;
  uint64_t v18;
  Swift::Double_optional v19;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v5._object = (void *)0x8000000100559930;
  v5._countAndFlagsBits = 0xD000000000000022;
  v19 = NSUserDefaults.internalDouble(forKey:)(v5);
  v6 = *(double *)&v19.is_nil;
  v8 = v7;

  if ((v8 & 1) != 0)
    return 3600.0;
  v10 = v6;
  v11 = defaultLogger()(v9);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v14 = 134217984;
    v17 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v14 + 4);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Overriding cv dynamic task grace period to %f due to internal default setting", v14, 0xCu);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v10;
}

double sub_100280EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Swift::String v5;
  double v6;
  char v7;
  char v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v16;
  double v17;
  uint64_t v18;
  Swift::Double_optional v19;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v5._object = (void *)0x8000000100559960;
  v5._countAndFlagsBits = 0xD00000000000001ALL;
  v19 = NSUserDefaults.internalDouble(forKey:)(v5);
  v6 = *(double *)&v19.is_nil;
  v8 = v7;

  if ((v8 & 1) != 0)
    return 86400.0;
  v10 = v6;
  v11 = defaultLogger()(v9);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v14 = 134217984;
    v17 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v14 + 4);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Overriding cv acceptance window to %f due to internal default setting", v14, 0xCu);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v10;
}

uint64_t sub_100281054(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeatureFlagProvider(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_100281090(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FeatureFlagProvider(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1002810C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100281108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10028114C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100281190(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002811D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002811E0);
}

uint64_t sub_1002811E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KRLConfigurationProvider(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10028121C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100281228);
}

uint64_t sub_100281228(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KRLConfigurationProvider(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CVConfigurationProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10063A978;
  if (!qword_10063A978)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CVConfigurationProvider);
  return result;
}

uint64_t sub_1002812A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for FeatureFlagProvider(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10028130C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[15] = a1;
  v2[16] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[18] = v4;
  v2[19] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPSignpost.Config(0);
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPSignpost(0);
  v2[21] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[22] = v7;
  v2[23] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002813B4, 0, 0);
}

uint64_t sub_1002813B4()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(__int128 **)(v0 + 120);
  v31 = *(_QWORD *)(v0 + 128);
  static DaemonSignposts.claimValidityRequest.getter();
  DIPSignpost.init(_:)(v1);
  v3 = sub_100004828((uint64_t *)&unk_1006325A0);
  v4 = sub_100004828((uint64_t *)&unk_100633440);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 32) & ~v7;
  v30 = 2 * v6;
  v9 = swift_allocObject(v3, v8 + 3 * v6, v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_100524440;
  v10 = v9 + v8;
  v11 = (_QWORD *)(v10 + *(int *)(v4 + 48));
  v12 = enum case for DIPError.PropertyKey.conversationID(_:);
  v13 = type metadata accessor for DIPError.PropertyKey(0);
  v14 = *(void (**)(void))(*(_QWORD *)(v13 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v10, v12, v13);
  v15 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v16 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v11[3] = &type metadata for String;
  *v11 = v15;
  v11[1] = v16;
  v17 = v10 + v6 + *(int *)(v4 + 48);
  v14();
  v18 = v2[1];
  *(_OWORD *)(v0 + 16) = *v2;
  *(_OWORD *)(v0 + 32) = v18;
  v19 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 104) = v19;
  *(_QWORD *)(v17 + 24) = &type metadata for String;
  *(_OWORD *)v17 = v19;
  v20 = (_QWORD *)(v10 + v30 + *(int *)(v4 + 48));
  v14();
  v20[3] = &type metadata for String;
  *v20 = 0xD000000000000013;
  v20[1] = 0x80000001005599F0;
  swift_bridgeObjectRetain(v16);
  sub_1000DB7AC(v0 + 104);
  *(_QWORD *)(v0 + 192) = sub_10011D314(v9);
  *(_QWORD *)(v0 + 72) = &type metadata for ClaimValidityRequest;
  v21 = (_OWORD *)swift_allocObject(&unk_10060CCC8, 144, 7);
  *(_QWORD *)(v0 + 48) = v21;
  v22 = v2[3];
  v24 = *v2;
  v23 = v2[1];
  v21[3] = v2[2];
  v21[4] = v22;
  v21[1] = v24;
  v21[2] = v23;
  v25 = v2[7];
  v27 = v2[4];
  v26 = v2[5];
  v21[7] = v2[6];
  v21[8] = v25;
  v21[5] = v27;
  v21[6] = v26;
  sub_100281AFC(v2);
  v28 = (_QWORD *)swift_task_alloc(dword_100639B4C);
  *(_QWORD *)(v0 + 200) = v28;
  *v28 = v0;
  v28[1] = sub_100281610;
  return sub_100250C38(v0 + 48, 0xD000000000000013, 0x80000001005599F0, 0, 0);
}

uint64_t sub_100281610(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 200);
  v6[26] = a1;
  v6[27] = a2;
  v6[28] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = sub_100281930;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 6);

    v8 = sub_100281698;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100281698()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_100022948(v3, v2);
  v6 = JSONDecoder.init()(v5);
  v7 = sub_100281BA8();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for ClaimValidityResponse, v3, v2, &type metadata for ClaimValidityResponse, v7);
  v8 = v1;
  v10 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 192);
  if (v8)
  {
    v13 = *(_QWORD *)(v0 + 144);
    v12 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 136);
    sub_100007F8C(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
    swift_release(v6);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v12, enum case for DIPError.Code.internalError(_:), v14);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_100007F30();
    swift_allocError(v15, v16, 0, 0);
    swift_errorRetain(v8);
    v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x8000000100559AC0, v8, v12, 0, v11, 0xD000000000000065, 0x8000000100559A30, 0xD00000000000001ALL, 0x8000000100559AA0, 40);
    swift_willThrow(v17);
    sub_100007F8C(v10, v9);
    v19 = *(_QWORD *)(v0 + 176);
    v18 = *(_QWORD *)(v0 + 184);
    v21 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 168);
    v22 = *(_QWORD *)(v0 + 152);
    swift_errorRelease(v8);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    swift_task_dealloc(v18);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 176);
    v24 = *(_QWORD *)(v0 + 184);
    v27 = *(_QWORD *)(v0 + 160);
    v26 = *(_QWORD *)(v0 + 168);
    v28 = *(_QWORD *)(v0 + 152);
    sub_100007F8C(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
    sub_100007F8C(v10, v9);
    swift_release(v6);
    swift_bridgeObjectRelease(v11);
    v29 = *(_QWORD *)(v0 + 80);
    v30 = *(_QWORD *)(v0 + 88);
    v31 = *(_QWORD *)(v0 + 96);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    swift_task_dealloc(v24);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v29, v30, v31);
  }
}

uint64_t sub_100281930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 136);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  v6 = type metadata accessor for DIPError(0);
  v7 = sub_100007F30();
  swift_allocError(v6, v7, 0, 0);
  swift_errorRetain(v1);
  v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000015, 0x8000000100559A10, v1, v3, 0, v2, 0xD000000000000065, 0x8000000100559A30, 0xD00000000000001ALL, 0x8000000100559AA0, 35);
  swift_willThrow(v8);
  v10 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 152);
  swift_errorRelease(*(_QWORD *)(v0 + 224));
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100281A9C()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  v1 = v0[7];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[9]);
    swift_bridgeObjectRelease(v0[11]);
  }
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  return swift_deallocObject(v0, 144, 7);
}

_QWORD *sub_100281AFC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[11];
  v10 = a1[13];
  v12 = a1[15];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  sub_10008F020(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  return a1;
}

unint64_t sub_100281BA8()
{
  unint64_t result;

  result = qword_10063A9B8;
  if (!qword_10063A9B8)
  {
    result = swift_getWitnessTable(&unk_10052BAEC, &type metadata for ClaimValidityResponse);
    atomic_store(result, &qword_10063A9B8);
  }
  return result;
}

uint64_t sub_100281BEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  void (*v103)(char *, uint64_t, uint64_t, __n128);
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  void (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v87 - v10;
  v12 = type metadata accessor for DeviceInformationProvider(0);
  v93 = *(_QWORD *)(v12 - 8);
  v94 = v12;
  __chkstk_darwin(v12);
  v92 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for HardwareAttestationType(0);
  v15 = __chkstk_darwin(v14);
  v106 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v107 = (char *)&v87 - v18;
  v19 = __chkstk_darwin(v17);
  v108 = (char *)&v87 - v20;
  v21 = __chkstk_darwin(v19);
  __chkstk_darwin(v21);
  v114 = (char *)&v87 - v24;
  v25 = *(_QWORD *)(a1 + 16);
  if (!v25)
  {
    v27 = enum case for HardwareAttestationType.SEP(_:);
    v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 104);
    return v45(a2, v27, v14);
  }
  v104 = v23;
  v89 = v9;
  v88 = v11;
  v90 = v6;
  v91 = v5;
  v95 = a2;
  v96 = v2;
  v26 = a1 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  v27 = enum case for HardwareAttestationType.SEP(_:);
  v102 = enum case for HardwareAttestationType.SE(_:);
  v100 = enum case for HardwareAttestationType.IDV(_:);
  v99 = enum case for HardwareAttestationType.OP(_:);
  v28 = *(_QWORD *)(v22 + 72);
  v97 = a1;
  v98 = v28;
  v105 = v22;
  v103 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16);
  v29 = swift_bridgeObjectRetain(a1);
  v30 = v114;
  v101 = v27;
  v31 = v104;
  while (1)
  {
    v103(v30, v26, v14, v29);
    v32 = v105;
    v109 = *(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 104);
    v109(v31, v27, v14);
    v33 = sub_100004790(&qword_100634950, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
    dispatch thunk of RawRepresentable.rawValue.getter(v14, v33);
    dispatch thunk of RawRepresentable.rawValue.getter(v14, v33);
    v34 = v113;
    v35 = v111;
    if (v112 == (char *)v110 && v113 == v111)
    {
      swift_bridgeObjectRelease_n(v113, 2);
      v38 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v38(v31, v14);
      v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v109;
LABEL_23:
      v38((uint64_t)v30, v14);
      swift_bridgeObjectRelease(v97);
      goto LABEL_27;
    }
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v112, v113, v110, v111, 0);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v35);
    v38 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v38(v31, v14);
    if ((v37 & 1) != 0)
    {
      v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v109;
      v30 = v114;
      goto LABEL_23;
    }
    v109((uint64_t)v108, v102, v14);
    dispatch thunk of RawRepresentable.rawValue.getter(v14, v33);
    dispatch thunk of RawRepresentable.rawValue.getter(v14, v33);
    v39 = v113;
    v40 = v111;
    if (v112 == (char *)v110 && v113 == v111)
    {
      swift_bridgeObjectRelease_n(v113, 2);
      v38((uint64_t)v108, v14);
LABEL_25:
      v51 = swift_bridgeObjectRelease(v97);
      v52 = hasSEService(v51);
      v38((uint64_t)v114, v14);
      v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v109;
      if (v52)
      {
        v53 = v95;
        v54 = v102;
        return v50(v53, v54, v14);
      }
LABEL_27:
      v53 = v95;
      v54 = v101;
      return v50(v53, v54, v14);
    }
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v112, v113, v110, v111, 0);
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v40);
    v38((uint64_t)v108, v14);
    if ((v41 & 1) != 0)
      goto LABEL_25;
    v109((uint64_t)v107, v100, v14);
    dispatch thunk of RawRepresentable.rawValue.getter(v14, v33);
    dispatch thunk of RawRepresentable.rawValue.getter(v14, v33);
    v42 = v113;
    v43 = v111;
    if (v112 == (char *)v110 && v113 == v111)
    {
      swift_bridgeObjectRelease_n(v113, 2);
      v38((uint64_t)v107, v14);
LABEL_30:
      v38((uint64_t)v114, v14);
      swift_bridgeObjectRelease(v97);
      return ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v109)(v95, v101, v14);
    }
    v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v112, v113, v110, v111, 0);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v43);
    v38((uint64_t)v107, v14);
    if ((v44 & 1) != 0)
      goto LABEL_30;
    v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v109;
    v109((uint64_t)v106, v99, v14);
    dispatch thunk of RawRepresentable.rawValue.getter(v14, v33);
    dispatch thunk of RawRepresentable.rawValue.getter(v14, v33);
    v46 = v113;
    v47 = v111;
    if (v112 == (char *)v110 && v113 == v111)
      break;
    v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v112, v113, v110, v111, 0);
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v47);
    v38((uint64_t)v106, v14);
    if ((v48 & 1) != 0)
      goto LABEL_32;
    v30 = v114;
    v38((uint64_t)v114, v14);
    v26 += v98;
    --v25;
    v27 = v101;
    if (!v25)
    {
      swift_bridgeObjectRelease(v97);
      a2 = v95;
      return v45(a2, v27, v14);
    }
  }
  swift_bridgeObjectRelease_n(v113, 2);
  v38((uint64_t)v106, v14);
LABEL_32:
  v55 = swift_bridgeObjectRelease(v97);
  if (!hasSEService(v55))
  {
LABEL_46:
    v38((uint64_t)v114, v14);
    v84 = v95;
    v85 = v101;
    return v45(v84, v85, v14);
  }
  v56 = v92;
  v57 = DeviceInformationProvider.init()();
  v58 = DeviceInformationProvider.hardwarePlatform.getter(v57);
  v60 = v59;
  (*(void (**)(char *, uint64_t))(v93 + 8))(v56, v94);
  if (qword_10062F560 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  v61 = (id)qword_1006707A8;
  v62 = sub_10041FFC0();
  v64 = v63;
  sub_1001070C4(v62, v63);
  if (v64 == 1)
    sub_1004218D4();
  v65 = sub_10041FFC0();
  if (v66 == 1)
  {
    swift_bridgeObjectRelease(v60);

    goto LABEL_43;
  }
  v69 = v67;
  sub_1001070C4(v65, v66);

  if ((v69 & 0x100000000) != 0)
  {
    v68 = swift_bridgeObjectRelease(v60);
LABEL_43:
    v77 = v89;
    v78 = defaultLogger()(v68);
    v79 = Logger.logObject.getter(v78);
    v80 = static os_log_type_t.default.getter();
    v81 = os_log_type_enabled(v79, v80);
    v82 = v91;
    if (v81)
    {
      v83 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "failed to get SE type", v83, 2u);
      swift_slowDealloc(v83, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v90 + 8))(v77, v82);
    goto LABEL_46;
  }
  v71 = v88;
  defaultLogger()(v70);
  v72 = swift_bridgeObjectRetain_n(v60, 2);
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.debug.getter(v73);
  if (os_log_type_enabled(v73, v74))
  {
    v75 = swift_slowAlloc(18, -1);
    v108 = (char *)swift_slowAlloc(32, -1);
    v112 = v108;
    *(_DWORD *)v75 = 136446466;
    swift_bridgeObjectRetain(v60);
    v110 = sub_1000E3AC8(v58, v60, (uint64_t *)&v112);
    v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111, v75 + 4);
    swift_bridgeObjectRelease_n(v60, 3);
    *(_WORD *)(v75 + 12) = 1026;
    LODWORD(v110) = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, (char *)&v110 + 4, v75 + 14);
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "soc %{public}s, se %{public}u", (uint8_t *)v75, 0x12u);
    v76 = v108;
    swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    swift_slowDealloc(v75, -1, -1);

    (*(void (**)(char *, uint64_t))(v90 + 8))(v88, v91);
  }
  else
  {

    swift_bridgeObjectRelease_n(v60, 2);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v71, v91);
  }
  v86 = sub_100282FFC(v58, v60);
  swift_bridgeObjectRelease(v60);
  v38((uint64_t)v114, v14);
  v85 = v101;
  switch((_DWORD)v69)
  {
    case 2:
LABEL_52:
      if (v86 <= 5u)
        goto LABEL_55;
      goto LABEL_53;
    case 1:
      if (v86 <= 4u)
        goto LABEL_55;
      goto LABEL_53;
    case 0:
      goto LABEL_52;
  }
  if (v86 > 1u)
  {
LABEL_53:
    v84 = v95;
    v85 = v102;
    return v45(v84, v85, v14);
  }
LABEL_55:
  v84 = v95;
  return v45(v84, v85, v14);
}

uint64_t sub_10028254C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v2 + 320) = a2;
  *(_QWORD *)(v2 + 168) = a1;
  v3 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v2 + 176) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 184) = v4;
  *(_QWORD *)(v2 + 192) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError(0);
  *(_QWORD *)(v2 + 200) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 208) = v6;
  *(_QWORD *)(v2 + 216) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v2 + 224) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 232) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 240) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 248) = swift_task_alloc(v9);
  v10 = type metadata accessor for DIPKeyAlgorithm(0);
  *(_QWORD *)(v2 + 256) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v2 + 264) = v11;
  *(_QWORD *)(v2 + 272) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100282638, 0, 0);
}

uint64_t sub_100282638()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = swift_allocObject(&unk_10060CCF8, 17, 7);
  *(_QWORD *)(v0 + 280) = v1;
  *(_BYTE *)(v1 + 16) = 0;
  v2 = (void *)objc_opt_self(NSUserDefaults);
  *(_QWORD *)(v0 + 288) = v2;
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "BOOLForKey:", v4);

  if ((_DWORD)v5)
  {
    *(_BYTE *)(v1 + 16) = 1;
  }
  else if ((*(_BYTE *)(v0 + 320) & 1) == 0 && hasSEService())
  {
    sub_1000F5D50(*(_QWORD *)(v0 + 168), v0 + 56);
    if (*(_QWORD *)(v0 + 80))
    {
      v7 = *(_QWORD *)(v0 + 264);
      v6 = *(_QWORD *)(v0 + 272);
      v8 = *(_QWORD *)(v0 + 256);
      sub_100008018((__int128 *)(v0 + 56), v0 + 16);
      v9 = *(_QWORD *)(v0 + 40);
      sub_10000806C((_QWORD *)(v0 + 16), v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for DIPKeyAlgorithm.ECC256(_:), v8);
      v10 = sub_10011DBFC((uint64_t)_swiftEmptyArrayStorage);
      *(_QWORD *)(v0 + 296) = v10;
      v11 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of DIPKeystoreProtocol.generateIdentityKeyPair(label:algorithm:constraints:enableUAM:temporary:)[1]);
      *(_QWORD *)(v0 + 304) = v11;
      *v11 = v0;
      v11[1] = sub_100282864;
      return dispatch thunk of DIPKeystoreProtocol.generateIdentityKeyPair(label:algorithm:constraints:enableUAM:temporary:)(v0 + 96, 0xD000000000000014, 0x8000000100559AF0, *(_QWORD *)(v0 + 272), v10, 1, 1, v9);
    }
    sub_1000F5D10(v0 + 56);
  }
  sub_100282E00(v1);
  swift_release(v1);
  v14 = *(_QWORD *)(v0 + 240);
  v13 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 216);
  v16 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(id))(v0 + 8))(v5);
}

uint64_t sub_100282864()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[37];
    (*(void (**)(_QWORD, _QWORD))(v2[33] + 8))(v2[34], v2[32]);
    swift_bridgeObjectRelease(v4);
    v5 = sub_100282AA4;
  }
  else
  {
    v6 = v2 + 12;
    v7 = v2[37];
    v9 = v2[33];
    v8 = v2[34];
    v10 = v2[32];
    swift_bridgeObjectRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6);
    v5 = sub_100282918;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100282918()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 288);
  *(_BYTE *)(*(_QWORD *)(v0 + 280) + 16) = 1;
  v2 = objc_msgSend(v1, "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setBool:forKey:", 1, v3);

  v5 = defaultLogger()(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "set se service available to true", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v9 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 224);
  v11 = *(_QWORD *)(v0 + 232);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v12 = *(_QWORD *)(v0 + 280);
  v13 = *(unsigned __int8 *)(v12 + 16);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  sub_100282E00(v12);
  swift_release(v12);
  v14 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

uint64_t sub_100282AA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 240);
  v24 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 192);
  v21 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_getErrorValue(v1, v0 + 160, v0 + 136);
  v6._countAndFlagsBits = Error.localizedDescription.getter(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.keychainSEKeyCreateFailure(_:), v5);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x8000000100559B10, 0, v3, 0, v8, 0xD00000000000005ELL, 0x8000000100559B40, 0xD000000000000030, 0x8000000100559BA0, 137);
  v9 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v10 = swift_allocError(v21, v9, 0, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v11, v20, v21);
  defaultLogger()(v12);
  DIPRecordError(_:message:log:)(v10, 0, 0xE000000000000000, v2);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v2, v24);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  swift_errorRelease(v10);
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(unsigned __int8 *)(v13 + 16);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  sub_100282E00(v13);
  swift_release(v13);
  v16 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 216);
  v18 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t sub_100282D04()
{
  id v0;
  NSString v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "removeObjectForKey:", v1);

  type metadata accessor for DIPKeystoreKeychain(0);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClassKey);
  v4 = v3;
  static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)(0xD000000000000014, 0x8000000100559AF0, 0, 0xF000000000000000, v2, v3);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_100282DF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100282E00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v4);
  v7 = swift_retain_n(a1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(12, -1);
    v16 = v2;
    v11 = (uint8_t *)v10;
    v12 = swift_slowAlloc(32, -1);
    v19 = v12;
    *(_DWORD *)v11 = 136446210;
    swift_beginAccess(a1 + 16, v18, 0, 0);
    if (*(_BYTE *)(a1 + 16))
      v13 = 1702195828;
    else
      v13 = 0x65736C6166;
    if (*(_BYTE *)(a1 + 16))
      v14 = 0xE400000000000000;
    else
      v14 = 0xE500000000000000;
    v17 = sub_1000E3AC8(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v11 + 4);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "se service available = %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v16);
  }
  else
  {

    swift_release_n(a1, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_100282FFC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a1;
  v11 = a2;
  v8 = 808466292;
  v9 = 0xE400000000000000;
  v4 = sub_100099FB8();
  v5 = sub_100183D54();
  if ((BidirectionalCollection<>.starts<A>(with:)(&v8, &type metadata for String, &type metadata for String, v4, v5) & 1) != 0)
    return 0;
  v10 = a1;
  v11 = a2;
  v8 = 3160180;
  v9 = 0xE300000000000000;
  v6 = 2;
  if ((BidirectionalCollection<>.starts<A>(with:)(&v8, &type metadata for String, &type metadata for String, v4, v5) & 1) == 0)
  {
    v10 = a1;
    v11 = a2;
    v8 = 3160179;
    v9 = 0xE300000000000000;
    if ((BidirectionalCollection<>.starts<A>(with:)(&v8, &type metadata for String, &type metadata for String, v4, v5) & 1) != 0)
      return 2;
    else
      return 3;
  }
  return v6;
}

uint64_t sub_100283100()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_100004828(&qword_10063B3C8);
  v2 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v3 = swift_allocObject(v1, ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ 6 * *(_QWORD *)(v2 + 72), *(unsigned __int8 *)(v2 + 80) | 7);
  *(_OWORD *)(v3 + 16) = xmmword_1005270F0;
  URLQueryItem.init(name:value:)(0x776F6C666B726F77, 0xEB0000000064695FLL, *v0, v0[1]);
  URLQueryItem.init(name:value:)(0x69737265765F736FLL, 0xEA00000000006E6FLL, v0[2], v0[3]);
  URLQueryItem.init(name:value:)(0x69737265765F6462, 0xEA00000000006E6FLL, v0[4], v0[5]);
  URLQueryItem.init(name:value:)(0x6E6F69676572, 0xE600000000000000, v0[6], v0[7]);
  URLQueryItem.init(name:value:)(0x65676175676E616CLL, 0xE800000000000000, v0[8], v0[9]);
  URLQueryItem.init(name:value:)(0x74656B637562, 0xE600000000000000, v0[10], v0[11]);
  return v3;
}

void sub_10028325C()
{
  Swift::String v1;

  _StringGuts.grow(_:)(27);
  v1._countAndFlagsBits = 0x72756F5361746164;
  v1._object = (void *)0xED000022203A6563;
  String.append(_:)(v1);
  __asm { BR              X10 }
}

uint64_t sub_1002832E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __dst, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;
  void *v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  _BYTE v59[344];

  v55._countAndFlagsBits = 5391183;
  v55._object = v53;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(v53);
  v56._countAndFlagsBits = 0x203A617461640A22;
  v56._object = (void *)0xE900000000000022;
  String.append(_:)(v56);
  memcpy(v59, (const void *)(v52 + 8), 0x118uLL);
  _print_unlocked<A, B>(_:_:)(v59, v54 - 48, &type metadata for ProofingDataContainer, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v57._countAndFlagsBits = 34;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  return *(_QWORD *)(v54 - 48);
}

uint64_t sub_1002833B4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v3 = v1;
  v5 = sub_100004828(&qword_10063B0C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002AE658();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ResponseHeader.CodingKeys, &type metadata for ResponseHeader.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v31 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v31, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v30 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v30, v5);
    v16 = v3[4];
    v17 = v3[5];
    v29 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v29, v5);
    v18 = v3[6];
    v19 = v3[7];
    v28 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v28, v5);
    v20 = v3[8];
    v21 = v3[9];
    v27 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v27, v5);
    v22 = v3[10];
    v23 = v3[11];
    v26 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100283568()
{
  _BYTE *v0;

  if (*v0)
    return 0x4974736575716572;
  else
    return 0x61737265766E6F63;
}

uint64_t sub_1002835B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002ADC24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002835D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036FD70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100283600(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036FD70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100283628@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1002ADD44(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100283654(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063D898, (uint64_t (*)(void))sub_10036FD70, (uint64_t)&type metadata for RequestHeader.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_10028369C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002836D8 + 4 * byte_100527105[*v0]))(0x61737265766E6F63, 0xEE0064496E6F6974);
}

uint64_t sub_1002836D8()
{
  return 0x4974736575716572;
}

uint64_t sub_1002836F4()
{
  return 0x65736E6F70736572;
}

uint64_t sub_100283710()
{
  return 0x6F43737574617473;
}

uint64_t sub_100283730()
{
  return 0x7574617453627573;
}

uint64_t sub_100283754()
{
  return 0x654D737574617473;
}

uint64_t sub_100283778@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002ADF40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028379C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002AE658();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002837C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002AE658();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002837EC@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[6];

  sub_1002AE248(a1, (uint64_t *)v8);
  if (!v2)
  {
    v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    result = *(double *)v8;
    v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_100283834(_QWORD *a1)
{
  return sub_1002833B4(a1);
}

uint64_t sub_100283848()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6449656369766564;
  if (*v0 != 1)
    v1 = 0x6E49746E65696C63;
  if (*v0)
    return v1;
  else
    return 0x7A69726F68747561;
}

uint64_t sub_1002838B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002AE69C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002838D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368B1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100283900(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368B1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100283928@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1002AE820(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100283968(_QWORD *a1)
{
  return sub_1002A029C(a1, &qword_10063CC18, (uint64_t (*)(void))sub_100368B1C, (uint64_t)&type metadata for AppleCredentials.CodingKeys, (uint64_t)&KeyedEncodingContainer.encode(_:forKey:));
}

Swift::Int sub_10028399C(uint64_t a1, uint64_t a2)
{
  return sub_1002A1C00(a1, a2, 0xD000000000000010, 0x800000010053A260);
}

uint64_t sub_1002839B8(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000010, 0x800000010053A260);
}

Swift::Int sub_1002839D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002A1C7C(a1, a2, a3, 0xD000000000000010, 0x800000010053A260);
}

uint64_t sub_1002839F0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100601640;
  return sub_1002A1CD0(v2, a1, a2);
}

void sub_1002839FC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000010053A260;
}

uint64_t sub_100283A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10036FFE0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100283A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10036FFE0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100283AC4()
{
  qword_100670340 = (uint64_t)&off_100601110;
}

uint64_t sub_100283AD8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD v54[3];
  char v55;
  char v56[8];
  _BYTE v57[56];
  char v58[8];

  v3 = v1;
  v5 = type metadata accessor for DIPError.Code(0);
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  __chkstk_darwin(v5);
  v53 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for EncodingError(0);
  v49 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v48 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v50 = (char *)&v48 - v10;
  v11 = sub_100004828(&qword_10063C5B0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v15 = a1[4];
  sub_10000806C(a1, v16);
  v17 = sub_100365494();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WorkflowRecommendationRequest.CodingKeys, &type metadata for WorkflowRecommendationRequest.CodingKeys, v17, v16, v15);
  v18 = *(_OWORD *)(v3 + 16);
  v54[0] = *(_OWORD *)v3;
  v54[1] = v18;
  v55 = 0;
  sub_10036345C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v54);
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v30 = v50;
    *(_QWORD *)&v54[0] = v2;
    swift_errorRetain(v2);
    v31 = sub_100004828((uint64_t *)&unk_100633430);
    if (swift_dynamicCast(v30, v54, v31, v7, 0))
    {
      swift_errorRelease(v2);
      v33 = v48;
      v32 = v49;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v48, v30, v7);
      v34 = swift_allocError(v7, &protocol witness table for EncodingError, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v35, v33, v7);
      v36 = v53;
      (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v53, enum case for DIPError.Code.jsonEncodingFailed(_:), v52);
      v37 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v38 = type metadata accessor for DIPError(0);
      v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v38, v39, 0, 0);
      v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x800000010055A3D0, v34, v36, 0, v37, 0xD000000000000054, 0x8000000100559CF0, 0x742865646F636E65, 0xEB00000000293A6FLL, 105);
      swift_willThrow(v40);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v7);
      v41 = *(_QWORD *)&v54[0];
    }
    else
    {
      swift_errorRelease(*(_QWORD *)&v54[0]);
      v42 = v53;
      (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v53, enum case for DIPError.Code.internalError(_:), v52);
      swift_errorRetain(v2);
      v43 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v44 = type metadata accessor for DIPError(0);
      v45 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v44, v45, 0, 0);
      v46 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004ELL, 0x800000010055A380, v2, v42, 0, v43, 0xD000000000000054, 0x8000000100559CF0, 0x742865646F636E65, 0xEB00000000293A6FLL, 108);
      swift_willThrow(v46);
      v41 = v2;
    }
    return swift_errorRelease(v41);
  }
  else
  {
    sub_1000A1F54(v3 + 32, (uint64_t)v57, &qword_100639C48);
    sub_1000A1F54((uint64_t)v57, (uint64_t)v54, &qword_100639C48);
    v55 = 1;
    v19 = sub_1003634A0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v54, &v55, v11, &type metadata for AppleCredentials, v19);
    v20 = *(_QWORD *)(v3 + 80);
    v21 = *(_QWORD *)(v3 + 88);
    LOBYTE(v54[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, v54, v11);
    v22 = *(_QWORD *)(v3 + 96);
    v23 = *(_QWORD *)(v3 + 104);
    LOBYTE(v54[0]) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, v54, v11);
    *(_QWORD *)&v54[0] = *(_QWORD *)(v3 + 112);
    v55 = 4;
    sub_100004828(&qword_1006368D0);
    sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v54);
    v24 = *(_QWORD *)(v3 + 120);
    LOBYTE(v54[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v54, v11);
    v25 = *(_QWORD *)(v3 + 128);
    v26 = *(_QWORD *)(v3 + 136);
    LOBYTE(v54[0]) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, v54, v11);
    sub_1000A1F54(v3 + 144, (uint64_t)v58, &qword_10063C5C0);
    sub_1000A1F54((uint64_t)v58, (uint64_t)v54, &qword_10063C5C0);
    v55 = 7;
    v27 = sub_100004828(&qword_10063C5C8);
    v28 = sub_1000A1F98(&qword_10063C5D0, &qword_10063C5C8, (void (*)(void))sub_1003654D8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v54, &v55, v11, v27, v28);
    v29 = *(unsigned __int8 *)(v3 + 152);
    LOBYTE(v54[0]) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v54, v11);
    sub_1000A1F54(v3 + 160, (uint64_t)v56, &qword_100632378);
    sub_1000A1F54((uint64_t)v56, (uint64_t)v54, &qword_100632378);
    v55 = 9;
    sub_100004828(&qword_100632378);
    sub_10036551C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v54);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1002841E0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100284220 + 4 * byte_10052710B[a1]))(0x4874736575716572, 0xED00007265646165);
}

unint64_t sub_100284220()
{
  return 0xD000000000000010;
}

uint64_t sub_10028423C()
{
  return 0x72656469766F7270;
}

uint64_t sub_100284258()
{
  return 1919248756;
}

unint64_t sub_100284268()
{
  return 0xD000000000000016;
}

uint64_t sub_100284288()
{
  return 0x756F4365636E6F6ELL;
}

uint64_t sub_1002842A4()
{
  return 0x6F436E6F69676572;
}

uint64_t sub_1002842C4()
{
  return 0x696C696261706163;
}

uint64_t sub_1002842E4()
{
  return 0x6563697665447369;
}

uint64_t sub_100284308()
{
  return 0x747865746E6F63;
}

uint64_t sub_100284320()
{
  unsigned __int8 *v0;

  return sub_1002841E0(*v0);
}

uint64_t sub_100284328@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002AE9FC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10028434C(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_100284358(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365494();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100284380(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365494();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002843A8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[3];
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return v1;
}

__n128 sub_1002843F0@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[10];
  uint64_t v10;

  sub_1002AEE64(a1, (uint64_t)v9);
  if (!v2)
  {
    v5 = v9[9];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(_QWORD *)(a2 + 160) = v10;
    v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_100284464(_QWORD *a1)
{
  return sub_100283AD8(a1);
}

uint64_t sub_1002844BC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  _OWORD v20[6];

  v3 = v1;
  v5 = sub_100004828(&qword_10063CBF8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100366FEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LegacyWorkflowRecommendationResponse.CodingKeys, &type metadata for LegacyWorkflowRecommendationResponse.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 48);
  v20[2] = *(_OWORD *)(v3 + 32);
  v20[3] = v12;
  v13 = *(_OWORD *)(v3 + 80);
  v20[4] = *(_OWORD *)(v3 + 64);
  v20[5] = v13;
  v14 = *(_OWORD *)(v3 + 16);
  v20[0] = *(_OWORD *)v3;
  v20[1] = v14;
  v19 = 0;
  sub_1003684E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20);
  if (!v2)
  {
    v15 = *(_QWORD *)(v3 + 96);
    v16 = *(_QWORD *)(v3 + 104);
    LOBYTE(v20[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v20, v5);
    *(_QWORD *)&v20[0] = *(_QWORD *)(v3 + 112);
    v19 = 2;
    type metadata accessor for LegacyWorkflowPackage(0);
    sub_100004790(&qword_10063CC00, type metadata accessor for LegacyWorkflowPackage, (uint64_t)&unk_1005280DC);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100284658(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100284698 + 4 * byte_100527115[a1]))(0x776F6C666B726F77, 0xED00006E69616843);
}

uint64_t sub_1002846A0()
{
  return 0x7365636E6F6ELL;
}

uint64_t sub_1002846B4()
{
  return 0x726F576F73726570;
}

unint64_t sub_1002846D8()
{
  return 0xD000000000000011;
}

unint64_t sub_100284724()
{
  return 0xD000000000000014;
}

uint64_t sub_100284744(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100284784 + 4 * byte_10052711D[a1]))(0x776F6C666B726F77, 0xED00006E69616843);
}

uint64_t sub_10028478C()
{
  return 0x7365636E6F6ELL;
}

uint64_t sub_1002847A0()
{
  return 0x726F576F73726570;
}

unint64_t sub_1002847C4()
{
  return 0xD000000000000011;
}

unint64_t sub_100284810()
{
  return 0xD000000000000014;
}

uint64_t sub_100284830()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x45656D69746E7572;
  if (*v0 != 1)
    v1 = 0x776F6C666B726F77;
  if (*v0)
    return v1;
  else
    return 0x65736E6F70736572;
}

uint64_t sub_1002848A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002AFDF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002848C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100366FEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002848F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100366FEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100284918@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  sub_1002AF99C(a1, v8);
  if (!v2)
  {
    v5 = v12;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v13;
    *(_QWORD *)(a2 + 112) = v14;
    v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = *(double *)&v9;
    v7 = v10;
    *(_OWORD *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 48) = v7;
  }
  return result;
}

uint64_t sub_10028497C(_QWORD *a1)
{
  return sub_1002844BC(a1);
}

void sub_100284990(char *a1)
{
  sub_1003C0694(*a1);
}

void sub_10028499C()
{
  char *v0;

  sub_1003C2FB4(0, *v0);
}

void sub_1002849A8(uint64_t a1)
{
  char *v1;

  sub_100228204(a1, *v1);
}

void sub_1002849B0(uint64_t a1)
{
  char *v1;

  sub_1003C2FB4(a1, *v1);
}

unint64_t sub_1002849B8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1002AFF8C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002849E4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100284658(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100284A0C()
{
  unsigned __int8 *v0;

  return sub_100284744(*v0);
}

unint64_t sub_100284A14@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1002AFF8C(a1);
  *a2 = result;
  return result;
}

void sub_100284A38(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100284A44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002AD354();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100284A6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002AD354();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100284A94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint8_t *v45;
  uint8_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint8_t *v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  __n128 v104;
  uint64_t v105;
  __n128 v106;
  _QWORD *v107;
  char *v108;
  id v109;
  Swift::String v110;
  Swift::Bool v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  __n128 v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  _BYTE v148[5919];
  char v149;
  _QWORD v150[3];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v2 = sub_100004828(&qword_100632300);
  __chkstk_darwin(v2);
  v130 = (uint64_t *)((char *)&v129 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v4);
  v134 = (char *)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPSignpost(0);
  v132 = *(_QWORD *)(v6 - 8);
  v133 = v6;
  __chkstk_darwin(v6);
  v135 = (char *)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError.Code(0);
  v137 = *(_QWORD *)(v8 - 8);
  v138 = v8;
  __chkstk_darwin(v8);
  v140 = (char *)&v129 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_100632308);
  __chkstk_darwin(v10);
  v136 = (char *)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100632318);
  v13 = __chkstk_darwin(v12);
  v141 = (uint64_t *)((char *)&v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v139 = (char *)&v129 - v15;
  v16 = type metadata accessor for Logger(0);
  v142 = *(_QWORD *)(v16 - 8);
  v143 = v16;
  v17 = __chkstk_darwin(v16);
  v131 = (char *)&v129 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v129 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v129 - v22;
  v24 = sub_100004828(&qword_10063B040);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v129 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1[3];
  v28 = a1[4];
  v144 = a1;
  sub_10000806C(a1, v29);
  v30 = sub_1002AD354();
  v31 = v145;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LegacyWorkflowPackage.CodingKeys, &type metadata for LegacyWorkflowPackage.CodingKeys, v30, v29, v28);
  if (v31)
    goto LABEL_2;
  v129 = 0;
  v36 = v21;
  v145 = v25;
  LOBYTE(v150[0]) = 0;
  v37 = KeyedDecodingContainer.contains(_:)(v150, v24);
  v38 = (_QWORD *)v24;
  if ((v37 & 1) != 0)
  {
    v39 = v27;
    v40 = defaultLogger()(v37);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.debug.getter(v41);
    v43 = os_log_type_enabled(v41, v42);
    v44 = v143;
    if (v43)
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "decoding legacy", v45, 2u);
      v46 = v45;
      v38 = (_QWORD *)v24;
      swift_slowDealloc(v46, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v142 + 8))(v23, v44);
    v148[0] = 0;
    v47 = v39;
    v48 = v129;
    KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)(v150, v148, v38);
    v49 = v48;
    v50 = v145;
    if (v48)
    {
      (*(void (**)(char *, _QWORD *))(v145 + 8))(v39, v38);
LABEL_2:
      v32 = v153;
LABEL_3:
      v33 = v144;
LABEL_4:
      v34 = type metadata accessor for LegacyWorkflowPackage(0);
      swift_deallocPartialClassInstance(v32, v34, *(unsigned int *)(*(_QWORD *)v32 + 48), *(unsigned __int16 *)(*(_QWORD *)v32 + 52));
      goto LABEL_5;
    }
    v141 = v38;
    v72 = v151;
    v73 = v152;
    sub_10000806C(v150, v151);
    v74 = dispatch thunk of UnkeyedDecodingContainer.count.getter(v72, v73);
    if ((v75 & 1) == 0 && v74 > 2)
    {
      v76 = v140;
      (*(void (**)(char *, _QWORD, uint64_t))(v137 + 104))(v140, enum case for DIPError.Code.serverResponseInconsistent(_:), v138);
      v77 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v78 = type metadata accessor for DIPError(0);
      v79 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v78, v79, 0, 0);
      v80 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x8000000100559CB0, 0, v76, 0, v77, 0xD000000000000054, 0x8000000100559CF0, 0x6F72662874696E69, 0xEB00000000293A6DLL, 181);
      swift_willThrow(v80);
      (*(void (**)(char *, _QWORD *))(v50 + 8))(v39, v141);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v150);
      goto LABEL_2;
    }
    v90 = sub_100004828((uint64_t *)&unk_100632320);
    v91 = v151;
    v92 = v152;
    sub_10001E624((uint64_t)v150, v151);
    v93 = sub_100099FFC(&qword_10063B058, (uint64_t *)&unk_100632320, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v94 = (uint64_t)v139;
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v90, v90, v93, v91, v92);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v94, 0, 1, v90);
    sub_1000A1F54(v94, v153 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow, &qword_100632318);
    v96 = sub_100004828(&qword_100632310);
    v97 = v151;
    v98 = v152;
    sub_10001E624((uint64_t)v150, v151);
    v99 = sub_100099FFC(&qword_10063B060, &qword_100632310, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v100 = (uint64_t)v136;
    dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(v96, v96, v99, v97, v98);
    v105 = v153;
    sub_1000A1F54(v100, v153 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_spWorkflow, &qword_100632308);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v150);
    v32 = v105;
    v38 = v141;
  }
  else
  {
    LOBYTE(v150[0]) = 1;
    v51 = KeyedDecodingContainer.contains(_:)(v150, v24);
    v47 = v27;
    if ((v51 & 1) == 0)
    {
      v32 = v153;
      v67 = v153 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow;
      v68 = sub_100004828((uint64_t *)&unk_100632320);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 1, 1, v68);
      v69 = v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_spWorkflow;
      v70 = sub_100004828(&qword_100632310);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v69, 1, 1, v70);
      v71 = v145;
      v49 = v129;
      goto LABEL_22;
    }
    v52 = v24;
    v53 = v21;
    v54 = defaultLogger()(v51);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.debug.getter(v55);
    v57 = os_log_type_enabled(v55, v56);
    v32 = v153;
    v58 = v143;
    if (v57)
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "decoding LegacyINOWorkflow", v59, 2u);
      v60 = v59;
      v53 = v36;
      swift_slowDealloc(v60, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v142 + 8))(v53, v58);
    v61 = sub_100004828((uint64_t *)&unk_100632320);
    LOBYTE(v150[0]) = 1;
    v62 = sub_100099FFC(&qword_10063B058, (uint64_t *)&unk_100632320, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v63 = v141;
    v64 = (_QWORD *)v52;
    v65 = v52;
    v47 = v27;
    v66 = v129;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v141, v61, v150, v65, v61, v62);
    v49 = v66;
    if (v66)
    {
      (*(void (**)(char *, _QWORD *))(v145 + 8))(v27, v64);
      goto LABEL_3;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v63, 0, 1, v61);
    sub_1000A1F54((uint64_t)v63, v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow, &qword_100632318);
    v81 = v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_spWorkflow;
    v82 = sub_100004828(&qword_100632310);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v81, 1, 1, v82);
    v38 = v64;
  }
  v71 = v145;
LABEL_22:
  LOBYTE(v150[0]) = 4;
  v83 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v150, v38);
  if (v49)
  {
    (*(void (**)(char *, _QWORD *))(v71 + 8))(v47, v38);
    v33 = v144;
    sub_100008030(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow, &qword_100632318);
    sub_100008030(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_spWorkflow, &qword_100632308);
    goto LABEL_4;
  }
  v85 = (uint64_t *)(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentProfile);
  *v85 = v83;
  v85[1] = v84;
  v86 = v38;
  v87 = sub_100004828(&qword_1006368D0);
  v148[0] = 5;
  v88 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v153 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v150, v87, v148, v86, v87, v88, v89);
  *(_QWORD *)(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentGUIDs) = v150[0];
  LOBYTE(v150[0]) = 6;
  v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v150, v86);
  v101 = (uint64_t *)(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentBaseURL);
  *v101 = v95;
  v101[1] = v102;
  v149 = 7;
  v103 = sub_1001D9A00();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v150, &type metadata for IQModel, &v149, v86, &type metadata for IQModel, v103, v104);
  sub_1000A1F54((uint64_t)v150, (uint64_t)v148, &qword_1006322D8);
  sub_1000A1F54((uint64_t)v148, v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_imageQualityCriteria, &qword_1006322D8);
  v146 = 2;
  v107 = KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v147, v87, &v146, v86, v87, v88, v106);
  v33 = v144;
  *(_QWORD *)(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_nonces) = v147;
  v108 = v134;
  static DaemonSignposts.configureDecodePersoWorkflow.getter(v107);
  DIPSignpost.init(_:)(v108);
  v109 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v110._object = (void *)0x8000000100559C90;
  v110._countAndFlagsBits = 0xD00000000000001BLL;
  v111 = NSUserDefaults.internalBool(forKey:)(v110);

  if (v111)
  {
    v113 = v131;
    v114 = defaultLogger()(v112);
    v115 = Logger.logObject.getter(v114);
    v116 = static os_log_type_t.debug.getter(v115);
    if (os_log_type_enabled(v115, v116))
    {
      v117 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v117 = 0;
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "Skipping perso workflow due to user defaults settings", v117, 2u);
      v118 = v117;
      v113 = v131;
      swift_slowDealloc(v118, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v142 + 8))(v113, v143);
    v119 = v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_persoWorkflow;
    v120 = sub_100004828((uint64_t *)&unk_100632340);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 56))(v119, 1, 1, v120);
  }
  else
  {
    v121 = sub_100004828((uint64_t *)&unk_100632340);
    LOBYTE(v147) = 3;
    v122 = sub_100099FFC(&qword_10063B050, (uint64_t *)&unk_100632340, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v123 = v130;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v130, v121, &v147, v86, v121, v122, v124);
    sub_1000A1F54((uint64_t)v123, v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_persoWorkflow, &qword_100632300);
  }
  v125 = v86;
  v127 = v132;
  v126 = v133;
  v128 = v135;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v128, v126);
  (*(void (**)(char *, _QWORD *))(v145 + 8))(v47, v125);
LABEL_5:
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v33);
  return v32;
}

uint64_t sub_100285998()
{
  uint64_t v0;
  uint64_t v2[740];

  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow, &qword_100632318);
  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_spWorkflow, &qword_100632308);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentProfile + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentGUIDs));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentBaseURL + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_nonces));
  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_persoWorkflow, &qword_100632300);
  sub_1000A1F54(v0 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_imageQualityCriteria, (uint64_t)v2, &qword_1006322D8);
  sub_1001D9A8C(v2);
  return v0;
}

uint64_t sub_100285A88()
{
  uint64_t v0;

  sub_100285998();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100285AAC()
{
  return type metadata accessor for LegacyWorkflowPackage(0);
}

uint64_t type metadata accessor for LegacyWorkflowPackage(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_10063A9F0, (uint64_t)&nominal type descriptor for LegacyWorkflowPackage);
}

void sub_100285AC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  sub_100358D48(319, &qword_10063AA00, (uint64_t *)&unk_100632320);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100358D48(319, &qword_10063AA08, &qword_100632310);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_100527488;
      v8[3] = &unk_1005274A0;
      v8[4] = &unk_100527488;
      v8[5] = &unk_1005274A0;
      sub_100358D48(319, (unint64_t *)&unk_10063AA10, (uint64_t *)&unk_100632340);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        v8[7] = &unk_1005274B8;
        swift_updateClassMetadata2(a1, 256, 8, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_100285BB8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = type metadata accessor for LegacyWorkflowPackage(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  result = sub_100284A94(a1);
  if (!v2)
    *a2 = v6;
  return result;
}

uint64_t sub_100285C10(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;

  v3 = sub_100004828(&qword_10063B068);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_10000806C(a1, v8);
  v10 = sub_1002AD354();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LegacyWorkflowPackage.CodingKeys, &type metadata for LegacyWorkflowPackage.CodingKeys, v10, v8, v9);
  v11 = v7 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow;
  v16 = 1;
  v12 = sub_100004828((uint64_t *)&unk_100632320);
  v13 = sub_100099FFC(&qword_10063B070, (uint64_t *)&unk_100632320, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v11, &v16, v3, v12, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100285D44(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v3 = v1;
  v5 = sub_100004828(&qword_10063C9F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10036812C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InputValidationRequestV1.CodingKeys, &type metadata for InputValidationRequestV1.CodingKeys, v11, v9, v10);
  v25 = *v3;
  HIBYTE(v24) = 0;
  v12 = sub_100004828(&qword_1006367E8);
  v13 = sub_1001846A0(&qword_1006367F8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, (char *)&v24 + 7, v5, v12, v13);
  if (!v2)
  {
    v14 = v3[1];
    v15 = v3[2];
    BYTE6(v24) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, (char *)&v24 + 6, v5);
    v16 = type metadata accessor for InputValidationRequestV1(0);
    v17 = (char *)v3 + *(int *)(v16 + 24);
    BYTE5(v24) = 2;
    v18 = type metadata accessor for EncryptionParamsAlgorithmIdentifier(0);
    v19 = sub_100004790(&qword_100632558, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptionParamsAlgorithmIdentifier, (uint64_t)&protocol conformance descriptor for EncryptionParamsAlgorithmIdentifier);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, (char *)&v24 + 5, v5, v18, v19);
    v20 = (uint64_t *)((char *)v3 + *(int *)(v16 + 28));
    v21 = *v20;
    v22 = v20[1];
    BYTE4(v24) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, (char *)&v24 + 4, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100285F30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;

  v38 = a2;
  v3 = sub_100004828(&qword_10063B560);
  __chkstk_darwin(v3);
  v40 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100004828(&qword_10063C9E8);
  v39 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for InputValidationRequestV1(0);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  v11 = (uint64_t)v10 + *(int *)(v8 + 24);
  v12 = type metadata accessor for EncryptionParamsAlgorithmIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = (_QWORD *)((char *)v10 + *(int *)(v7 + 28));
  *v13 = 0;
  v13[1] = 0;
  v14 = a1[3];
  v15 = a1[4];
  sub_10000806C(a1, v14);
  v16 = sub_10036812C();
  v41 = v6;
  v17 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InputValidationRequestV1.CodingKeys, &type metadata for InputValidationRequestV1.CodingKeys, v16, v14, v15);
  if (v17)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  }
  else
  {
    v36 = v13;
    v37 = v11;
    v43 = a1;
    v19 = v39;
    v18 = v40;
    v20 = sub_100004828(&qword_1006367E8);
    v47 = 0;
    v21 = sub_1001846A0(&qword_1006367F0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    v22 = v20;
    v23 = v42;
    v24 = v20;
    v25 = v41;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v48, v22, &v47, v42, v24, v21, v26);
    *v10 = v48;
    v46 = 1;
    v10[1] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v23);
    v10[2] = v27;
    v45 = 2;
    v28 = sub_100004790(&qword_100632178, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptionParamsAlgorithmIdentifier, (uint64_t)&protocol conformance descriptor for EncryptionParamsAlgorithmIdentifier);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, v12, &v45, v23, v12, v28, v29);
    sub_100184E1C((uint64_t)v18, v37, &qword_10063B560);
    v44 = 3;
    v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v23);
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v23);
    v34 = v36;
    swift_bridgeObjectRelease(v36[1]);
    *v34 = v31;
    v34[1] = v33;
    sub_100035DE8((uint64_t)v10, v38, type metadata accessor for InputValidationRequestV1);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v43);
  }
  return sub_100035DAC((uint64_t)v10, type metadata accessor for InputValidationRequestV1);
}

uint64_t sub_100286258()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10028628C + 4 * byte_100527125[*v0]))(0x7461447475706E69, 0xE900000000000061);
}

unint64_t sub_10028628C()
{
  return 0xD000000000000012;
}

unint64_t sub_1002862AC()
{
  return 0xD000000000000011;
}

uint64_t sub_1002862C8()
{
  return 0x654B63696C627570;
}

uint64_t sub_1002862EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002AFFD4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100286310(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036812C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100286338(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036812C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100286360(uint64_t a1, uint64_t a2)
{
  return sub_1002872A0(a1, a2, &qword_10063C188, type metadata accessor for InputValidationRequestV1, (uint64_t)&unk_10052B2E4);
}

uint64_t sub_10028638C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100285F30(a1, a2);
}

uint64_t sub_1002863A0(_QWORD *a1)
{
  return sub_100285D44(a1);
}

uint64_t sub_1002863B4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v1;
  v5 = sub_100004828(&qword_10063C9D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003680E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InputValidationRequestV3.CodingKeys, &type metadata for InputValidationRequestV3.CodingKeys, v11, v9, v10);
  v19 = *v3;
  HIBYTE(v18) = 0;
  v12 = sub_100004828(&qword_1006367E8);
  v13 = sub_1001846A0(&qword_1006367F8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, (char *)&v18 + 7, v5, v12, v13);
  if (!v2)
  {
    v14 = (char *)v3 + *(int *)(type metadata accessor for InputValidationRequestV3(0) + 20);
    BYTE6(v18) = 1;
    v15 = sub_100004828(&qword_1006367C0);
    v16 = sub_100099FFC(&qword_10063C9D8, &qword_1006367C0, (uint64_t)&protocol conformance descriptor for EncryptedDataContainer<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, (char *)&v18 + 6, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100286548@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;

  v28 = a2;
  v3 = sub_100004828(&qword_10063B4C0);
  __chkstk_darwin(v3);
  v29 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100004828(&qword_10063C9B8);
  v5 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for InputValidationRequestV3(0);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v11 = 0;
  v12 = (uint64_t)v11 + *(int *)(v9 + 20);
  v13 = sub_100004828(&qword_1006367C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = a1[3];
  v15 = a1[4];
  sub_10000806C(a1, v14);
  v16 = sub_1003680E8();
  v31 = v7;
  v17 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InputValidationRequestV3.CodingKeys, &type metadata for InputValidationRequestV3.CodingKeys, v16, v14, v15);
  if (!v17)
  {
    v18 = v29;
    v19 = sub_100004828(&qword_1006367E8);
    v34 = 0;
    v20 = sub_1001846A0(&qword_1006367F0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    v21 = v30;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v35, v19, &v34, v30, v19, v20, v22);
    *v11 = v35;
    v33 = 1;
    v23 = sub_100099FFC(&qword_10063C9C8, &qword_1006367C0, (uint64_t)&protocol conformance descriptor for EncryptedDataContainer<A>);
    v24 = v31;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, v13, &v33, v21, v13, v23, v25);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v24, v21);
    v26 = v28;
    sub_100184E1C((uint64_t)v18, v12, &qword_10063B4C0);
    sub_100035DE8((uint64_t)v11, v26, type metadata accessor for InputValidationRequestV3);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return sub_100035DAC((uint64_t)v11, type metadata accessor for InputValidationRequestV3);
}

uint64_t sub_100286800(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_100004828(&qword_10063C9E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100367CA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InputValidationResponse.CodingKeys, &type metadata for InputValidationResponse.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((unsigned __int8 *)v3 + 8);
  v25 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v25, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v24 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v24, v5);
    v16 = v3[4];
    v17 = v3[5];
    v23 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v23, v5);
    v18 = v3[6];
    v19 = v3[7];
    v22 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100286968(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v7 = sub_100004828(&qword_10063C988);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000806C(a1, v11);
  v13 = sub_100367F00();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingStaticAsset.CodingKeys, &type metadata for IdentityProofingStaticAsset.CodingKeys, v13, v11, v12);
  v21 = a2;
  v20 = 0;
  v14 = sub_100004828(&qword_1006368D0);
  v15 = sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v20, v7, v14, v15);
  if (!v3)
  {
    v21 = a3;
    v20 = 1;
    v16 = sub_100004828(&qword_10063C970);
    v17 = sub_100367FF4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v20, v7, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100286AE8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100286B24 + 4 * byte_100527129[a1]))(0xD000000000000014, 0x800000010055AAF0);
}

uint64_t sub_100286B24()
{
  return 0x7365726975716572;
}

uint64_t sub_100286B48()
{
  uint64_t v0;

  return v0 + 4;
}

unint64_t sub_100286B60()
{
  return 0xD000000000000012;
}

uint64_t sub_100286B7C()
{
  return 0x756F656D69547263;
}

uint64_t sub_100286B98()
{
  return 0x6B6174655278616DLL;
}

uint64_t sub_100286BBC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char v24[8];
  _BYTE v25[8];

  v3 = v1;
  v5 = sub_100004828(&qword_10063CBD8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003689E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DocScanConfig.CodingKeys, &type metadata for DocScanConfig.CodingKeys, v11, v9, v10);
  sub_1000A1F54(v3, (uint64_t)v25, &qword_10063CBE0);
  sub_1000A1F54((uint64_t)v25, (uint64_t)v24, &qword_10063CBE0);
  v23 = 0;
  v12 = sub_100004828(&qword_10063CBC0);
  v13 = sub_100368AA0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v23, v5, v12, v13);
  if (!v2)
  {
    v14 = *(unsigned __int8 *)(v3 + 8);
    v24[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v24, v5);
    v15 = *(unsigned __int8 *)(v3 + 9);
    v24[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v24, v5);
    v16 = *(unsigned __int8 *)(v3 + 10);
    v24[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v24, v5);
    v17 = *(_QWORD *)(v3 + 16);
    v18 = *(unsigned __int8 *)(v3 + 24);
    v24[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v24, v5);
    v19 = *(_QWORD *)(v3 + 32);
    v20 = *(unsigned __int8 *)(v3 + 40);
    v24[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, v24, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100286DBC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v19[5];
  char v20;
  _BYTE v21[8];
  _BYTE v22[8];
  _BYTE v23[48];

  v3 = v1;
  v5 = sub_100004828(&qword_10063D068);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100362E18();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingStaticWorkflow.SubRegionSpecifics.CodingKeys, &type metadata for IdentityProofingStaticWorkflow.SubRegionSpecifics.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v19[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v19, v5);
  if (!v2)
  {
    v14 = v3[2];
    LOBYTE(v19[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v19, v5);
    v19[0] = v3[3];
    v20 = 2;
    v15 = sub_100004828(&qword_1006323F0);
    v16 = sub_1000A1F98(&qword_10063D058, &qword_1006323F0, (void (*)(void))sub_100369E80, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19);
    sub_1000A1F54((uint64_t)(v3 + 4), (uint64_t)v23, &qword_100638AD0);
    sub_1000A1F54((uint64_t)v23, (uint64_t)v19, &qword_100638AD0);
    v20 = 3;
    v17 = sub_100369EC4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v20, v5, &type metadata for DocScanConfig, v17);
    sub_1000A1F54((uint64_t)(v3 + 10), (uint64_t)v22, &qword_10063D078);
    sub_1000A1F54((uint64_t)v22, (uint64_t)v19, &qword_10063D078);
    v20 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v20, v5, v15, v16);
    sub_1000A1F54((uint64_t)(v3 + 11), (uint64_t)v21, &qword_10063D078);
    sub_1000A1F54((uint64_t)v21, (uint64_t)v19, &qword_10063D078);
    v20 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v20, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100287050(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v16 = a4;
  v8 = sub_100004828(&qword_10063D050);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = sub_100362EA0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingStaticWorkflow.DefaultPagination.CodingKeys, &type metadata for IdentityProofingStaticWorkflow.DefaultPagination.CodingKeys, v14, v12, v13);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v19, v8);
  if (!v4)
  {
    v17 = v16;
    v18 = 1;
    sub_100004828(&qword_1006323F0);
    sub_1000A1F98(&qword_10063D058, &qword_1006323F0, (void (*)(void))sub_100369E80, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1002871BC()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x7461447475706E69;
}

uint64_t sub_100287200@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B01B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100287224(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003680E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028724C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003680E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100287274(uint64_t a1, uint64_t a2)
{
  return sub_1002872A0(a1, a2, &qword_10063C178, type metadata accessor for InputValidationRequestV3, (uint64_t)&unk_10052B35C);
}

uint64_t sub_1002872A0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = v5;
  v11 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = JSONEncoder.init()();
  v13 = sub_100004790(a3, a4, a5);
  v14 = dispatch thunk of JSONEncoder.encode<A>(_:)(v10, a1, v13);
  swift_release(v12);
  return v14;
}

uint64_t sub_10028734C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100286548(a1, a2);
}

uint64_t sub_100287360(_QWORD *a1)
{
  return sub_1002863B4(a1);
}

uint64_t sub_100287374()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002873A8 + 4 * byte_10052712F[*v0]))(0x646F43726F727265, 0xE900000000000065);
}

uint64_t sub_1002873A8()
{
  return 0x657A696C61636F6CLL;
}

unint64_t sub_1002873CC()
{
  return 0xD000000000000014;
}

unint64_t sub_1002873EC()
{
  return 0xD000000000000010;
}

uint64_t sub_100287408@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B02A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028742C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367CA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100287454(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367CA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10028747C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1002B0484(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1002874BC(_QWORD *a1)
{
  return sub_100286800(a1);
}

uint64_t sub_1002874D0()
{
  _BYTE *v0;

  if (*v0)
    return 0x7373416567616D69;
  else
    return 0x6568636163657270;
}

uint64_t sub_100287520@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B06FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100287544(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367F00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028756C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367F00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100287594@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1002B0828(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1002875BC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100286968(a1, *v1, v1[1]);
}

unint64_t sub_1002875DC()
{
  return 0xD000000000000012;
}

uint64_t sub_1002875F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B0A1C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100287620(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369728();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100287648(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369728();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100287670@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002A0048(a1, &qword_10063CF08, (uint64_t (*)(void))sub_100369728, (uint64_t)&type metadata for IdentityProofingStaticTC.CodingKeys, a2);
}

uint64_t sub_10028769C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002A01A4(a1, a2, a3, &qword_10063CF18, (uint64_t (*)(void))sub_100369728, (uint64_t)&type metadata for IdentityProofingStaticTC.CodingKeys);
}

uint64_t sub_1002876C8(char *a1, char *a2)
{
  return sub_1003C04E0(*a1, *a2);
}

Swift::Int sub_1002876D4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 30771;
  else
    v2 = 30770;
  String.hash(into:)(v4, v2, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10028772C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 30771;
  else
    v2 = 30770;
  String.hash(into:)(a1, v2, 0xE200000000000000);
  return swift_bridgeObjectRelease(0xE200000000000000);
}

Swift::Int sub_100287758(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 30771;
  else
    v3 = 30770;
  String.hash(into:)(v5, v3, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1002877AC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100601758;
  return sub_10005D5D8(v2, a1, a2);
}

void sub_1002877B8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 30770;
  if (*v1)
    v2 = 30771;
  *a1 = v2;
  a1[1] = 0xE200000000000000;
}

uint64_t sub_1002877D4()
{
  _BYTE *v0;

  if (*v0)
    return 30771;
  else
    return 30770;
}

uint64_t sub_1002877EC@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100601758;
  return sub_10029BB0C(a1, v2, a2);
}

uint64_t sub_1002877F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100370068();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100287820(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100370068();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100287848@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028787C(a1, (uint64_t)&unk_10063D8E8, (uint64_t)sub_100370068, (uint64_t)&type metadata for IdentityProofingImageAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1002CA68C, a2);
}

uint64_t sub_10028787C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = a5(a1, a2, a3, a4);
  if (!v6)
  {
    *a6 = result;
    a6[1] = v9;
    a6[2] = v10;
    a6[3] = v11;
  }
  return result;
}

uint64_t sub_1002878B4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063D8F8, (uint64_t (*)(void))sub_100370068, (uint64_t)&type metadata for IdentityProofingImageAsset.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_1002878FC()
{
  unsigned __int8 *v0;

  return sub_100286AE8(*v0);
}

uint64_t sub_100287904@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B0AA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100287928(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003689E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100287950(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003689E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100287978@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_1002B0D60(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1002879B8(_QWORD *a1)
{
  return sub_100286BBC(a1);
}

uint64_t sub_1002879F0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100287A24 + 4 * byte_100527133[*v0]))(0x6F69676552627573, 0xE90000000000006ELL);
}

unint64_t sub_100287A24()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_100287A40()
{
  return 0x6974616E69676170;
}

uint64_t sub_100287A5C()
{
  return 0x436E616353636F64;
}

uint64_t sub_100287A80()
{
  return 0x6761506863746177;
}

uint64_t sub_100287AA4()
{
  return 0x616E696761506D64;
}

uint64_t sub_100287AC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B0FF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100287AE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100362E18();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100287B10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100362E18();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100287B38@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[6];

  sub_1002B12E0(a1, (uint64_t)v8);
  if (!v2)
  {
    v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    result = *(double *)v8;
    v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_100287B80(_QWORD *a1)
{
  return sub_100286DBC(a1);
}

uint64_t sub_100287BC0()
{
  _BYTE *v0;

  if (*v0)
    return 0x6974616E69676170;
  else
    return 0x746E656D75636F64;
}

uint64_t sub_100287C08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B1814(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100287C2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100362EA0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100287C54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100362EA0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100287C7C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1002B1928(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100287CA8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100287050(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100287CC4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100287CEC + 4 * byte_100527139[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_100287CEC()
{
  return 0x6E6F6973726576;
}

uint64_t sub_100287D04()
{
  return 1701869940;
}

uint64_t sub_100287D14()
{
  return 0x72656469766F7270;
}

uint64_t sub_100287D30()
{
  return 0x6574726F70707573;
}

unint64_t sub_100287D54()
{
  return 0xD000000000000012;
}

uint64_t sub_100287EA8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100287ED0 + 4 * byte_10052714B[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_100287ED0()
{
  return 0x6E6F6973726576;
}

uint64_t sub_100287EE8()
{
  return 1701869940;
}

uint64_t sub_100287EF8()
{
  return 0x72656469766F7270;
}

uint64_t sub_100287F14()
{
  return 0x6574726F70707573;
}

unint64_t sub_100287F38()
{
  return 0xD000000000000012;
}

uint64_t sub_10028808C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100061464(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100287CC4);
}

Swift::Int sub_100288098(uint64_t a1, uint64_t a2)
{
  return sub_1000614FC(a1, a2, (uint64_t (*)(uint64_t))sub_100287CC4);
}

uint64_t sub_1002880A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006156C(a1, a2, a3, (uint64_t (*)(_QWORD))sub_100287CC4);
}

Swift::Int sub_1002880B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000615B8(a1, a2, a3, (uint64_t (*)(uint64_t))sub_100287CC4);
}

uint64_t sub_1002880BC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1002B25F8(*a1, a1[1], (uint64_t)&off_1006017A8, (uint64_t)&unk_10062F680);
  *a2 = result;
  return result;
}

uint64_t sub_1002880F8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100287CC4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100288120()
{
  unsigned __int8 *v0;

  return sub_100287EA8(*v0);
}

uint64_t sub_100288128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B25F8(a1, a2, (uint64_t)&off_1006017A8, (uint64_t)&unk_10062F680);
  *a3 = result;
  return result;
}

uint64_t sub_10028815C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002AD398();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100288184(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002AD398();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002881AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  __n128 v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  __n128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  __n128 v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  id v61;
  Swift::String v62;
  Swift::Bool v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t *v67;
  id v68;
  Swift::String v69;
  Swift::Bool v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t *v74;
  id v75;
  Swift::String v76;
  Swift::Bool v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t *v101;
  char v102;
  _QWORD *v103;

  v92 = a2;
  v3 = sub_100004828(&qword_1006322F0);
  __chkstk_darwin(v3);
  v93 = (uint64_t *)((char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v94 = sub_100004828(&qword_10063B078);
  v5 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v7 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  v9 = (int *)__chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = (char *)v11 + v9[13];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = (char *)v11 + v9[14];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = (char *)v11 + v9[15];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v15 = (char *)v11 + v9[16];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v96 = a1;
  v97 = (uint64_t *)v15;
  v16 = v9[17];
  *((_BYTE *)v11 + v16) = 2;
  v99 = v9[19];
  v100 = v9;
  *(uint64_t *)((char *)v11 + v99) = 0;
  v98 = v9[20];
  v101 = v11;
  *(uint64_t *)((char *)v11 + v98) = 0;
  v18 = a1[3];
  v17 = a1[4];
  sub_10000806C(a1, v18);
  v19 = sub_1002AD398();
  v20 = v95;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IdentityProofingStaticWorkflow.CodingKeys, &type metadata for IdentityProofingStaticWorkflow.CodingKeys, v19, v18, v17);
  if (v20)
  {
    v24 = v101;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v96);
    swift_bridgeObjectRelease(v97[1]);
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v24 + v99));
    return swift_bridgeObjectRelease(*(uint64_t *)((char *)v24 + v98));
  }
  else
  {
    v95 = (uint64_t *)v14;
    v90 = (uint64_t *)v13;
    v91 = (uint64_t *)v12;
    v89 = v16;
    v21 = v5;
    LOBYTE(v103) = 0;
    v22 = v94;
    v23 = KeyedDecodingContainer.decode(_:forKey:)(&v103, v94);
    v26 = v101;
    *v101 = v23;
    v26[1] = v27;
    LOBYTE(v103) = 1;
    v28 = KeyedDecodingContainer.decode(_:forKey:)(&v103, v22);
    v29 = v100;
    v26[2] = v28;
    v26[3] = v30;
    LOBYTE(v103) = 3;
    v26[4] = KeyedDecodingContainer.decode(_:forKey:)(&v103, v22);
    v26[5] = v31;
    LOBYTE(v103) = 4;
    v26[6] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v103, v22);
    v26[7] = v32;
    v33 = (_QWORD *)sub_100004828(&qword_1006368D0);
    v102 = 5;
    v34 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v103, v33, &v102, v22, v33, v34, v35);
    v88 = v34;
    v36 = v103;
    if (!v103)
      v36 = _swiftEmptyArrayStorage;
    v26[8] = (uint64_t)v36;
    v37 = type metadata accessor for HardwareAttestationType(0);
    LOBYTE(v103) = 6;
    v38 = sub_100004790(&qword_1006324A0, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
    v39 = v93;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v93, v37, &v103, v22, v37, v38, v40);
    sub_1000A1F54((uint64_t)v39, (uint64_t)v26 + v29[9], &qword_1006322F0);
    LOBYTE(v103) = 7;
    v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v103, v22);
    v93 = v33;
    v42 = (uint64_t *)((char *)v26 + v29[11]);
    *v42 = v41;
    v42[1] = v43;
    v44 = sub_100004828(&qword_10063B088);
    v102 = 8;
    v45 = sub_1000A1F98(&qword_10063B090, &qword_10063B088, (void (*)(void))sub_1002AD3DC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v103, v44, &v102, v22, v44, v45, v46);
    *(uint64_t *)((char *)v26 + v29[10]) = (uint64_t)v103;
    v47 = sub_100004828(&qword_1006324F8);
    v102 = 9;
    v48 = sub_100099C30();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v103, v47, &v102, v22, v47, v48, v49);
    *(uint64_t *)((char *)v26 + v29[12]) = (uint64_t)v103;
    v50 = sub_100004828(&qword_1006367E8);
    v102 = 15;
    v51 = sub_1001846A0(&qword_1006367F0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v103, v50, &v102, v22, v50, v51, v52);
    v53 = (unint64_t)v103;
    if (!v103)
      v53 = sub_10011DC20((uint64_t)_swiftEmptyArrayStorage);
    *(uint64_t *)((char *)v101 + v99) = v53;
    v54 = sub_100004828(&qword_10063B0A0);
    v102 = 16;
    v55 = sub_1000A1F98(&qword_10063B0A8, &qword_10063B0A0, (void (*)(void))sub_1002AD420, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v103, v54, &v102, v22, v54, v55, v56);
    v58 = v103;
    if (!v103)
      v58 = _swiftEmptyArrayStorage;
    *(uint64_t *)((char *)v101 + v98) = (uint64_t)v58;
    v102 = 17;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v103, v93, &v102, v22, v93, v88, v57);
    v59 = v103;
    if (!v103)
      v59 = _swiftEmptyArrayStorage;
    *(uint64_t *)((char *)v101 + v100[18]) = (uint64_t)v59;
    v60 = (void *)objc_opt_self(NSUserDefaults);
    v61 = objc_msgSend(v60, "standardUserDefaults");
    v62._countAndFlagsBits = 0xD00000000000003ALL;
    v62._object = (void *)0x8000000100559D90;
    v63 = NSUserDefaults.internalBool(forKey:)(v62);

    if (v63)
    {
      v64 = 0;
      v65 = 300;
    }
    else
    {
      LOBYTE(v103) = 12;
      v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v103, v22);
      v64 = v66 & 1;
    }
    v67 = v95;
    *v95 = v65;
    *((_BYTE *)v67 + 8) = v64;
    v68 = objc_msgSend(v60, "standardUserDefaults");
    v69._object = (void *)0x8000000100559DD0;
    v69._countAndFlagsBits = 0xD000000000000021;
    v70 = NSUserDefaults.internalBool(forKey:)(v69);

    if (v70)
    {
      v71 = 0;
      v72 = 0;
    }
    else
    {
      LOBYTE(v103) = 10;
      v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v103, v22);
      v72 = v73 & 1;
    }
    v74 = v91;
    *v91 = v71;
    *((_BYTE *)v74 + 8) = v72;
    v75 = objc_msgSend(v60, "standardUserDefaults");
    v76._countAndFlagsBits = 0xD000000000000029;
    v76._object = (void *)0x8000000100559E00;
    v77 = NSUserDefaults.internalBool(forKey:)(v76);

    if (v77)
    {
      v78 = 0;
      v79 = 1000000000;
    }
    else
    {
      LOBYTE(v103) = 11;
      v79 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v103, v22);
      v78 = v80 & 1;
    }
    v81 = v90;
    *v90 = v79;
    *((_BYTE *)v81 + 8) = v78;
    LOBYTE(v103) = 13;
    v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v103, v22);
    v83 = v97;
    *v97 = v82;
    v83[1] = v84;
    LOBYTE(v103) = 14;
    v85 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v103, v22);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v22);
    v86 = (uint64_t)v101;
    *((_BYTE *)v101 + v89) = v85;
    sub_100035DE8(v86, v92, type metadata accessor for IdentityProofingStaticWorkflow);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v96);
    return sub_100035DAC(v86, type metadata accessor for IdentityProofingStaticWorkflow);
  }
}

uint64_t sub_100288C34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002881AC(a1, a2);
}

uint64_t sub_100288C48(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100288C88 + 4 * byte_10052715D[a1]))(0x4874736575716572, 0xED00007265646165);
}

unint64_t sub_100288C88()
{
  return 0xD000000000000010;
}

uint64_t sub_100288CA4()
{
  return 0x776F6C666B726F77;
}

unint64_t sub_100288CC0()
{
  return 0xD000000000000017;
}

uint64_t sub_100288DAC()
{
  return 0x696C696261706163;
}

uint64_t sub_100288DCC(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;

  v3 = v1;
  v5 = sub_100004828(&qword_10063C8C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10036798C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingRequest.CodingKeys, &type metadata for IdentityProofingRequest.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v31 = *v3;
  *(_QWORD *)&v32 = v12;
  *((_QWORD *)&v32 + 1) = v13;
  v34 = 0;
  sub_10036345C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31);
  if (!v2)
  {
    v14 = v3[3];
    v31 = v3[2];
    v32 = v14;
    v33 = v3[4];
    v34 = 1;
    v15 = sub_1003634A0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v34, v5, &type metadata for AppleCredentials, v15);
    v16 = *((_QWORD *)v3 + 10);
    v17 = *((_QWORD *)v3 + 11);
    LOBYTE(v31) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v31, v5);
    v18 = (int *)type metadata accessor for IdentityProofingRequest(0);
    v19 = (uint64_t)v3 + v18[7];
    LOBYTE(v31) = 3;
    type metadata accessor for HardwareAttestationType(0);
    sub_100004790(&qword_100632528, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19);
    *(_QWORD *)&v31 = *(_QWORD *)((char *)v3 + v18[8]);
    v34 = 4;
    sub_100004828(&qword_10063C868);
    sub_100367B18();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31);
    *(_QWORD *)&v31 = *(_QWORD *)((char *)v3 + v18[9]);
    v34 = 5;
    v20 = sub_100004828(&qword_10063C7B0);
    v21 = sub_100367800();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v34, v5, v20, v21);
    *(_QWORD *)&v31 = *(_QWORD *)((char *)v3 + v18[10]);
    v34 = 6;
    v22 = sub_100004828(&qword_10063C700);
    v23 = sub_100367538();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v34, v5, v22, v23);
    *(_QWORD *)&v31 = *(_QWORD *)((char *)v3 + v18[11]);
    v34 = 7;
    sub_100004828(&qword_10063C828);
    sub_1000A1F98(&qword_10063C848, &qword_10063C828, (void (*)(void))sub_100367948, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31);
    *(_QWORD *)&v31 = *(_QWORD *)((char *)v3 + v18[12]);
    v34 = 8;
    v24 = sub_100004828(&qword_1006368D0);
    v25 = sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v34, v5, v24, v25);
    *(_QWORD *)&v31 = *(_QWORD *)((char *)v3 + v18[13]);
    v34 = 9;
    v26 = sub_100004828(&qword_10063C880);
    v27 = sub_1000A1F98(&qword_10063C8D8, &qword_10063C880, (void (*)(void))sub_100367B94, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v34, v5, v26, v27);
    *(_QWORD *)&v31 = *(_QWORD *)((char *)v3 + v18[14]);
    v34 = 10;
    v28 = sub_100004828(&qword_10063C898);
    v29 = sub_1000A1F98(&qword_10063C8E8, &qword_10063C898, (void (*)(void))sub_100367BD8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v34, v5, v28, v29);
    *(_QWORD *)&v31 = *(_QWORD *)((char *)v3 + v18[15]);
    v34 = 11;
    sub_100004828(&qword_10063C5C8);
    sub_1000A1F98(&qword_10063C5D0, &qword_10063C5C8, (void (*)(void))sub_1003654D8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002892D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  __n128 v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  unint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char v81;

  v64 = a2;
  v3 = type metadata accessor for HardwareAttestationType(0);
  v68 = *(_QWORD *)(v3 - 8);
  v69 = v3;
  __chkstk_darwin(v3);
  v65 = (uint64_t *)((char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100004828(&qword_10063C858);
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for IdentityProofingRequest(0);
  v13 = __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = UUID.init()(v13);
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *v15 = 0;
  v15[1] = 0xE000000000000000;
  v15[2] = v17;
  v15[3] = v19;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  v77 = v12[9];
  *(_QWORD *)((char *)v15 + v77) = 0;
  v74 = v12[10];
  *(_QWORD *)((char *)v15 + v74) = 0;
  v75 = v12[12];
  *(_QWORD *)((char *)v15 + v75) = 0;
  v73 = v12[13];
  *(_QWORD *)((char *)v15 + v73) = 0;
  v72 = v12[14];
  *(_QWORD *)((char *)v15 + v72) = 0;
  v20 = v12[15];
  if (qword_10062F4F8 != -1)
    swift_once(&qword_10062F4F8, sub_100283AC4);
  v21 = qword_100670340;
  v71 = v20;
  *(_QWORD *)((char *)v15 + v20) = qword_100670340;
  v22 = a1[3];
  v23 = a1[4];
  v76 = a1;
  sub_10000806C(a1, v22);
  v24 = sub_10036798C();
  swift_bridgeObjectRetain(v21);
  v25 = v24;
  v26 = v70;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IdentityProofingRequest.CodingKeys, &type metadata for IdentityProofingRequest.CodingKeys, v25, v22, v23);
  if (v26)
  {
    v27 = v74;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v76);
    swift_bridgeObjectRelease(v15[1]);
    swift_bridgeObjectRelease(v15[3]);
    sub_10008EF5C(v15[4], v15[5], v15[6], v15[7], v15[8], v15[9]);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v77));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v27));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v75));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v73));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v72));
    return swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v71));
  }
  else
  {
    v81 = 0;
    v28 = sub_100363220();
    v29 = v67;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v78, &type metadata for RequestHeader, &v81, v67, &type metadata for RequestHeader, v28);
    v30 = v7;
    v31 = v74;
    swift_bridgeObjectRelease(v19);
    v32 = v79;
    *(_OWORD *)v15 = v78;
    *((_OWORD *)v15 + 1) = v32;
    v81 = 1;
    v33 = sub_100363264();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v78, &type metadata for AppleCredentials, &v81, v29, &type metadata for AppleCredentials, v33, v34);
    v35 = v79;
    *((_OWORD *)v15 + 2) = v78;
    *((_OWORD *)v15 + 3) = v35;
    *((_OWORD *)v15 + 4) = v80;
    LOBYTE(v78) = 2;
    v15[10] = KeyedDecodingContainer.decode(_:forKey:)(&v78, v29);
    v15[11] = v37;
    LOBYTE(v78) = 3;
    v38 = sub_100004790(&qword_1006324A0, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
    v39 = v65;
    v40 = v69;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v65, v69, &v78, v29, v69, v38);
    (*(void (**)(char *, _QWORD *, uint64_t))(v68 + 32))((char *)v15 + v12[7], v39, v40);
    v41 = sub_100004828(&qword_10063C868);
    v81 = 4;
    v42 = sub_1003679D0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v78, v41, &v81, v29, v41, v42);
    *(_QWORD *)((char *)v15 + v12[8]) = v78;
    v43 = sub_100004828(&qword_10063C7B0);
    v81 = 5;
    v44 = sub_100367740();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v78, v43, &v81, v29, v43, v44, v45);
    *(_QWORD *)((char *)v15 + v77) = v78;
    v46 = sub_100004828(&qword_10063C700);
    v81 = 6;
    v47 = sub_1003673C4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v78, v46, &v81, v29, v46, v47, v48);
    *(_QWORD *)((char *)v15 + v31) = v78;
    v49 = sub_100004828(&qword_10063C828);
    v81 = 7;
    v50 = sub_1000A1F98(&qword_10063C830, &qword_10063C828, (void (*)(void))sub_100367904, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v78, v49, &v81, v29, v49, v50);
    *(_QWORD *)((char *)v15 + v12[11]) = v78;
    v51 = sub_100004828(&qword_1006368D0);
    v81 = 8;
    v52 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v78, v51, &v81, v29, v51, v52, v53);
    *(_QWORD *)((char *)v15 + v75) = v78;
    v54 = sub_100004828(&qword_10063C880);
    v81 = 9;
    v55 = sub_1000A1F98(&qword_10063C888, &qword_10063C880, (void (*)(void))sub_100367A4C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v78, v54, &v81, v29, v54, v55, v56);
    *(_QWORD *)((char *)v15 + v73) = v78;
    v57 = sub_100004828(&qword_10063C898);
    v81 = 10;
    v58 = sub_1000A1F98(&qword_10063C8A0, &qword_10063C898, (void (*)(void))sub_100367A90, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v78, v57, &v81, v67, v57, v58, v59);
    *(_QWORD *)((char *)v15 + v72) = v78;
    v60 = sub_100004828(&qword_10063C5C8);
    v81 = 11;
    v61 = sub_1000A1F98(&qword_10063C8B0, &qword_10063C5C8, (void (*)(void))sub_100367AD4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v78, v60, &v81, v67, v60, v61);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v30, v67);
    v62 = v78;
    v63 = v71;
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v71));
    *(_QWORD *)((char *)v15 + v63) = v62;
    sub_100035DE8((uint64_t)v15, v64, type metadata accessor for IdentityProofingRequest);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v76);
    return sub_100035DAC((uint64_t)v15, type metadata accessor for IdentityProofingRequest);
  }
}

uint64_t sub_100289BA8()
{
  unsigned __int8 *v0;

  return sub_100288C48(*v0);
}

uint64_t sub_100289BB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B1B18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100289BD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036798C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100289BFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036798C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100289C28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002892D4(a1, a2);
}

uint64_t sub_100289C3C(_QWORD *a1)
{
  return sub_100288DCC(a1);
}

uint64_t sub_100289C50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[3];
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  char v79;

  v66 = a2;
  v59 = type metadata accessor for DIPError.Code(0);
  v58 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v60 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DIPCertUsage(0);
  v67 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v63 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for DIPOIDVerifier(0);
  v62 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v61 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004828(&qword_1006366E0);
  __chkstk_darwin(v6);
  v68 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_10063CC28);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for IdentityProofingResponse(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v15 + 12) = 0;
  *((_QWORD *)v15 + 13) = 0;
  *((_QWORD *)v15 + 14) = 0;
  v16 = (uint64_t)&v15[*(int *)(v13 + 28)];
  v17 = type metadata accessor for VerifiedClaim(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v70 = v16;
  v18(v16, 1, 1, v17);
  v72 = *(int *)(v12 + 32);
  *(_QWORD *)&v15[v72] = 0;
  v73 = *(int *)(v12 + 36);
  *(_QWORD *)&v15[v73] = 0;
  v19 = a1[3];
  v20 = a1[4];
  v69 = a1;
  sub_10000806C(a1, v19);
  v21 = sub_100368B60();
  v22 = v71;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IdentityProofingResponse.CodingKeys, &type metadata for IdentityProofingResponse.CodingKeys, v21, v19, v20);
  if (v22)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v69);
    v26 = v70;
    v27 = v72;
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 13));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 14));
    sub_100008030(v26, &qword_1006366E0);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v27]);
    return swift_release(*(_QWORD *)&v15[v73]);
  }
  else
  {
    v23 = v68;
    v71 = v9;
    v79 = 0;
    v24 = sub_1001D98D0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v74, &type metadata for ResponseHeader, &v79, v8, &type metadata for ResponseHeader, v24);
    v25 = v8;
    v30 = v74[1];
    v29 = v74[2];
    v31 = v75;
    v32 = v76;
    *(_OWORD *)v15 = v74[0];
    *((_OWORD *)v15 + 1) = v30;
    *((_OWORD *)v15 + 2) = v29;
    *((_QWORD *)v15 + 6) = v31;
    *((_QWORD *)v15 + 7) = v32;
    v33 = v78;
    *((_OWORD *)v15 + 4) = v77;
    *((_OWORD *)v15 + 5) = v33;
    LOBYTE(v74[0]) = 1;
    *((_QWORD *)v15 + 12) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v74, v8);
    *((_QWORD *)v15 + 13) = v34;
    v35 = sub_100004828(&qword_1006368D0);
    v79 = 2;
    v36 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v74, v35, &v79, v8, v35, v36, v37);
    *((_QWORD *)v15 + 14) = *(_QWORD *)&v74[0];
    LOBYTE(v74[0]) = 3;
    v38 = sub_100004790(&qword_10063CC38, type metadata accessor for VerifiedClaim, (uint64_t)&unk_100534564);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, v17, v74, v8, v17, v38, v39);
    sub_100184E1C((uint64_t)v23, v70, &qword_1006366E0);
    v40 = sub_100004828(&qword_10063C700);
    v79 = 4;
    v41 = sub_1003673C4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v74, v40, &v79, v8, v40, v41, v42);
    v43 = *(_QWORD *)&v74[0];
    v44 = v72;
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v72]);
    *(_QWORD *)&v15[v44] = v43;
    v45 = type metadata accessor for LegacyWorkflowPackage(0);
    v79 = 5;
    v46 = sub_100004790(&qword_10063CC40, type metadata accessor for LegacyWorkflowPackage, (uint64_t)&unk_100528104);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v74, v45, &v79, v25, v45, v46, v47);
    v49 = v73;
    v48 = *(_QWORD *)&v74[0];
    swift_release(*(_QWORD *)&v15[v73]);
    *(_QWORD *)&v15[v49] = v48;
    v50 = *((_QWORD *)v15 + 14);
    if (v50)
    {
      swift_bridgeObjectRetain(*((_QWORD *)v15 + 14));
      v51 = v61;
      DIPOIDVerifier.init()(v52);
      v53 = v63;
      v54 = v65;
      (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v63, enum case for DIPCertUsage.clientIdentity(_:), v65);
      v55 = (void *)DIPOIDVerifier.verifyChain(fromBase64DER:forUsage:)(v50, v53);
      v56 = v66;

      swift_bridgeObjectRelease(v50);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v53, v54);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v51, v64);
      v57 = v56;
    }
    else
    {
      v57 = v66;
    }
    (*(void (**)(char *, uint64_t))(v71 + 8))(v11, v25);
    sub_100035DE8((uint64_t)v15, v57, type metadata accessor for IdentityProofingResponse);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v69);
    return sub_100035DAC((uint64_t)v15, type metadata accessor for IdentityProofingResponse);
  }
}

uint64_t sub_10028A454(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10028A494 + 4 * byte_100527169[a1]))(0x65736E6F70736572, 0xEE00726564616548);
}

uint64_t sub_10028A494()
{
  return 0x45656D69746E7572;
}

unint64_t sub_10028A4B4()
{
  return 0xD000000000000013;
}

uint64_t sub_10028A4D4()
{
  return 0x6465696669726576;
}

unint64_t sub_10028A4F8()
{
  return 0xD000000000000011;
}

uint64_t sub_10028A514()
{
  return 0x6B726F577478656ELL;
}

uint64_t sub_10028A534(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;

  v3 = v1;
  v5 = sub_100004828(&qword_10063CC48);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100368B60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingResponse.CodingKeys, &type metadata for IdentityProofingResponse.CodingKeys, v11, v9, v10);
  v13 = *(_OWORD *)(v3 + 16);
  v12 = *(_OWORD *)(v3 + 32);
  v14 = *(_QWORD *)(v3 + 48);
  v15 = *(_QWORD *)(v3 + 56);
  v32[0] = *(_OWORD *)v3;
  v32[1] = v13;
  v32[2] = v12;
  v33 = v14;
  v34 = v15;
  v16 = *(_OWORD *)(v3 + 80);
  v35 = *(_OWORD *)(v3 + 64);
  v36 = v16;
  v31 = 0;
  sub_1003684E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v32);
  if (!v2)
  {
    v17 = *(_QWORD *)(v3 + 96);
    v18 = *(_QWORD *)(v3 + 104);
    LOBYTE(v32[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v32, v5);
    *(_QWORD *)&v32[0] = *(_QWORD *)(v3 + 112);
    v31 = 2;
    v19 = sub_100004828(&qword_1006368D0);
    v20 = sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v31, v5, v19, v20);
    v21 = (int *)type metadata accessor for IdentityProofingResponse(0);
    v22 = v3 + v21[7];
    LOBYTE(v32[0]) = 3;
    v23 = type metadata accessor for VerifiedClaim(0);
    v24 = sub_100004790(&qword_10063CC50, type metadata accessor for VerifiedClaim, (uint64_t)&unk_10053453C);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, v32, v5, v23, v24);
    *(_QWORD *)&v32[0] = *(_QWORD *)(v3 + v21[8]);
    v31 = 4;
    v25 = sub_100004828(&qword_10063C700);
    v26 = sub_100367538();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v31, v5, v25, v26);
    *(_QWORD *)&v32[0] = *(_QWORD *)(v3 + v21[9]);
    v31 = 5;
    v27 = type metadata accessor for LegacyWorkflowPackage(0);
    v28 = sub_100004790(&qword_10063CC00, type metadata accessor for LegacyWorkflowPackage, (uint64_t)&unk_1005280DC);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v31, v5, v27, v28);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10028A804(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE v13[288];
  char v14;

  v3 = v1;
  v5 = sub_100004828(&qword_10063C548);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003651EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IDVData.CodingKeys, &type metadata for IDVData.CodingKeys, v11, v9, v10);
  v13[0] = *v3;
  v14 = 0;
  sub_1003652B8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v13);
  if (!v2)
  {
    memcpy(v13, v3 + 8, 0x118uLL);
    v14 = 1;
    sub_1003652FC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10028A95C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10028A990 + 4 * byte_10052716F[a1]))(0x3731345F666470, 0xE700000000000000);
}

uint64_t sub_10028A990()
{
  return 0x616E5F7473726966;
}

uint64_t sub_10028A9AC()
{
  return 0x6E5F656C6464696DLL;
}

uint64_t sub_10028AACC()
{
  return 1684628851;
}

uint64_t sub_10028AADC()
{
  return 0x6469636369;
}

uint64_t sub_10028AAF0()
{
  return 0x756E5F656E6F6870;
}

unint64_t sub_10028AB10()
{
  return 0xD000000000000011;
}

uint64_t sub_10028AB2C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10028AB60 + 4 * byte_100527181[a1]))(0x3731345F666470, 0xE700000000000000);
}

uint64_t sub_10028AB60()
{
  return 0x616E5F7473726966;
}

uint64_t sub_10028AB7C()
{
  return 0x6E5F656C6464696DLL;
}

uint64_t sub_10028AC9C()
{
  return 1684628851;
}

uint64_t sub_10028ACAC()
{
  return 0x6469636369;
}

uint64_t sub_10028ACC0()
{
  return 0x756E5F656E6F6870;
}

unint64_t sub_10028ACE0()
{
  return 0xD000000000000011;
}

uint64_t sub_10028ACFC()
{
  unsigned __int8 *v0;

  return sub_10028A454(*v0);
}

uint64_t sub_10028AD04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B2074(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028AD28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368B60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028AD50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368B60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10028AD78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100289C50(a1, a2);
}

uint64_t sub_10028AD8C(_QWORD *a1)
{
  return sub_10028A534(a1);
}

void sub_10028ADA0(char *a1)
{
  sub_1003C1FB8(*a1);
}

void sub_10028ADAC()
{
  char *v0;

  sub_1003C2680(*v0);
}

void sub_10028ADB4()
{
  __asm { BR              X10 }
}

uint64_t sub_10028ADE8(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 5391183, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_10028AE50(uint64_t a1)
{
  char *v1;

  sub_1003C2B98(a1, *v1);
}

unint64_t sub_10028AE58@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100601978;
  result = sub_1002CAFC4(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_10028AE8C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10028AEB4 + 4 * byte_100527198[*v0]))();
}

void sub_10028AEB4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 5391183;
  a1[1] = v1;
}

void sub_10028AEC4(_QWORD *a1@<X8>)
{
  *a1 = 0x454349564544;
  a1[1] = 0xE600000000000000;
}

void sub_10028AEDC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000010053A3D0;
}

void sub_10028AEFC(_QWORD *a1@<X8>)
{
  *a1 = 0x4E495F444559454BLL;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_10028AF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10036FF9C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10028AF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10036FF9C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10028AFC0()
{
  _BYTE *v0;

  if (*v0)
    return 1635017060;
  else
    return 0x72756F5361746164;
}

uint64_t sub_10028AFF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B235C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028B01C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003651EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028B044(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003651EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10028B06C@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[288];

  result = sub_1002B2448(a1, v5);
  if (!v2)
    return memcpy(a2, v5, 0x120uLL);
  return result;
}

uint64_t sub_10028B0BC(_QWORD *a1)
{
  return sub_10028A804(a1);
}

uint64_t sub_10028B0D4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100061464(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_10028A95C);
}

Swift::Int sub_10028B0E0(uint64_t a1, uint64_t a2)
{
  return sub_1000614FC(a1, a2, (uint64_t (*)(uint64_t))sub_10028A95C);
}

uint64_t sub_10028B0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006156C(a1, a2, a3, (uint64_t (*)(_QWORD))sub_10028A95C);
}

Swift::Int sub_10028B0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000615B8(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10028A95C);
}

uint64_t sub_10028B104@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1002B25F8(*a1, a1[1], (uint64_t)&off_100601A10, (uint64_t)&unk_10062F690);
  *a2 = result;
  return result;
}

uint64_t sub_10028B140@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10028A95C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10028B168()
{
  unsigned __int8 *v0;

  return sub_10028AB2C(*v0);
}

uint64_t sub_10028B170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B25F8(a1, a2, (uint64_t)&off_100601A10, (uint64_t)&unk_10062F690);
  *a3 = result;
  return result;
}

uint64_t sub_10028B1A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369C8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028B1CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369C8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10028B1F4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char v50;
  char v51[8];
  _BYTE v52[8];

  v3 = v1;
  v5 = sub_100004828(&qword_10063D028);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100369C8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ProofingDataContainer.CodingKeys, &type metadata for ProofingDataContainer.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v51[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v51, v5);
  if (!v2)
  {
    v14 = v3[11];
    v15 = v3[12];
    v51[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v51, v5);
    v16 = v3[13];
    v17 = v3[14];
    v51[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v51, v5);
    v18 = v3[15];
    v19 = v3[16];
    v51[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, v51, v5);
    v20 = v3[17];
    v21 = v3[18];
    v51[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v51, v5);
    v22 = v3[19];
    v23 = v3[20];
    v51[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, v51, v5);
    v24 = v3[21];
    v25 = v3[22];
    v51[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, v51, v5);
    v26 = v3[23];
    v27 = v3[24];
    v51[0] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, v51, v5);
    v28 = v3[25];
    v29 = v3[26];
    v51[0] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, v51, v5);
    v30 = v3[27];
    v31 = v3[28];
    v51[0] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v31, v51, v5);
    v32 = v3[29];
    v33 = v3[30];
    v51[0] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, v51, v5);
    v34 = v3[31];
    v35 = v3[32];
    v51[0] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, v51, v5);
    sub_1000A1F54((uint64_t)(v3 + 2), (uint64_t)v52, &qword_10063B2A0);
    sub_1000A1F54((uint64_t)v52, (uint64_t)v51, &qword_10063B2A0);
    v50 = 12;
    v36 = sub_100004828(&qword_10063B288);
    v37 = sub_10008F400(&qword_10063B2A8, &qword_10063B288, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v51, &v50, v5, v36, v37);
    v38 = v3[3];
    v39 = v3[4];
    v51[0] = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, v39, v51, v5);
    v40 = v3[5];
    v41 = v3[6];
    v51[0] = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v40, v41, v51, v5);
    v42 = v3[7];
    v43 = v3[8];
    v51[0] = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v42, v43, v51, v5);
    v44 = v3[9];
    v45 = v3[10];
    v51[0] = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v44, v45, v51, v5);
    v46 = v3[33];
    v47 = v3[34];
    v51[0] = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v46, v47, v51, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void *sub_10028B5EC@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE __src[280];

  result = sub_1002B263C(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x118uLL);
  return result;
}

uint64_t sub_10028B63C(_QWORD *a1)
{
  const void *v1;
  _BYTE __dst[280];

  memcpy(__dst, v1, sizeof(__dst));
  return sub_10028B1F4(a1);
}

uint64_t sub_10028B68C()
{
  uint64_t *v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  void *v63;
  Swift::String v64;
  void *object;
  Swift::String v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  Swift::String v70;
  Swift::String v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  Swift::String v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  Swift::String v80;
  Swift::String v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  Swift::String v85;

  _StringGuts.grow(_:)(227);
  v1._countAndFlagsBits = 0x6144373134666470;
  v1._object = (void *)0xEC000000203A6174;
  String.append(_:)(v1);
  v2 = v0[1];
  if (v2)
    v3 = *v0;
  else
    v3 = 0;
  if (v2)
    v4 = (void *)v0[1];
  else
    v4 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v2);
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 0x6E5F74737269660ALL;
  v6._object = (void *)0xED0000203A656D61;
  String.append(_:)(v6);
  v7 = v0[12];
  if (v7)
    v8 = v0[11];
  else
    v8 = 0;
  if (v7)
    v9 = (void *)v0[12];
  else
    v9 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v7);
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 0x5F656C6464696D0ALL;
  v11._object = (void *)0xEE00203A656D616ELL;
  String.append(_:)(v11);
  v12 = v0[14];
  if (v12)
    v13 = v0[13];
  else
    v13 = 0;
  if (v12)
    v14 = (void *)v0[14];
  else
    v14 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v12);
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16._object = (void *)0xEC000000203A656DLL;
  v16._countAndFlagsBits = 0x616E5F7473616C0ALL;
  String.append(_:)(v16);
  v17 = v0[16];
  if (v17)
    v18 = v0[15];
  else
    v18 = 0;
  if (v17)
    v19 = (void *)v0[16];
  else
    v19 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v17);
  v20._countAndFlagsBits = v18;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  v21._object = (void *)0x8000000100559D50;
  v21._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v21);
  v22 = v0[18];
  if (v22)
    v23 = v0[17];
  else
    v23 = 0;
  if (v22)
    v24 = (void *)v0[18];
  else
    v24 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v22);
  v25._countAndFlagsBits = v23;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v24);
  v26._object = (void *)0x8000000100559D70;
  v26._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v26);
  v27 = v0[20];
  if (v27)
    v28 = v0[19];
  else
    v28 = 0;
  if (v27)
    v29 = (void *)v0[20];
  else
    v29 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v27);
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v29);
  v31._countAndFlagsBits = 0x203A797469630ALL;
  v31._object = (void *)0xE700000000000000;
  String.append(_:)(v31);
  v32 = v0[22];
  if (v32)
    v33 = v0[21];
  else
    v33 = 0;
  if (v32)
    v34 = (void *)v0[22];
  else
    v34 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v32);
  v35._countAndFlagsBits = v33;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(v34);
  v36._countAndFlagsBits = 0x203A65746174730ALL;
  v36._object = (void *)0xE800000000000000;
  String.append(_:)(v36);
  v37 = v0[24];
  if (v37)
    v38 = v0[23];
  else
    v38 = 0;
  if (v37)
    v39 = (void *)v0[24];
  else
    v39 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v37);
  v40._countAndFlagsBits = v38;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v39);
  v41._countAndFlagsBits = 0x5F6C6174736F700ALL;
  v41._object = (void *)0xEE00203A65646F63;
  String.append(_:)(v41);
  v42 = v0[26];
  if (v42)
    v43 = v0[25];
  else
    v43 = 0;
  if (v42)
    v44 = (void *)v0[26];
  else
    v44 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v42);
  v45._countAndFlagsBits = v43;
  v45._object = v44;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v44);
  v46._countAndFlagsBits = 0x7972746E756F630ALL;
  v46._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v46);
  v47 = v0[28];
  if (v47)
    v48 = v0[27];
  else
    v48 = 0;
  if (v47)
    v49 = (void *)v0[28];
  else
    v49 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v47);
  v50._countAndFlagsBits = v48;
  v50._object = v49;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v49);
  v51._countAndFlagsBits = 0x203A626F640ALL;
  v51._object = (void *)0xE600000000000000;
  String.append(_:)(v51);
  v52 = v0[30];
  if (v52)
    v53 = v0[29];
  else
    v53 = 0;
  if (v52)
    v54 = (void *)v0[30];
  else
    v54 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v52);
  v55._countAndFlagsBits = v53;
  v55._object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(v54);
  v56._countAndFlagsBits = 0x3A7265757373690ALL;
  v56._object = (void *)0xE900000000000020;
  String.append(_:)(v56);
  v57 = v0[32];
  if (v57)
    v58 = v0[31];
  else
    v58 = 0;
  if (v57)
    v59 = (void *)v0[32];
  else
    v59 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v57);
  v60._countAndFlagsBits = v58;
  v60._object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease(v59);
  v61._countAndFlagsBits = 0x61636F4C7370670ALL;
  v61._object = (void *)0xEE00203A6E6F6974;
  String.append(_:)(v61);
  v62 = v0[2];
  if (v62)
    v63 = (void *)v0[2];
  else
    v63 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v62);
  v64._countAndFlagsBits = Array.description.getter(v63, &type metadata for Double);
  object = v64._object;
  String.append(_:)(v64);
  swift_bridgeObjectRelease(v63);
  swift_bridgeObjectRelease(object);
  v66._countAndFlagsBits = 0x4E6563697665640ALL;
  v66._object = (void *)0xED0000203A656D61;
  String.append(_:)(v66);
  v67 = v0[4];
  if (v67)
    v68 = v0[3];
  else
    v68 = 0;
  if (v67)
    v69 = (void *)v0[4];
  else
    v69 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v67);
  v70._countAndFlagsBits = v68;
  v70._object = v69;
  String.append(_:)(v70);
  swift_bridgeObjectRelease(v69);
  v71._countAndFlagsBits = 0x203A646965730ALL;
  v71._object = (void *)0xE700000000000000;
  String.append(_:)(v71);
  v72 = v0[6];
  if (v72)
    v73 = v0[5];
  else
    v73 = 0;
  if (v72)
    v74 = (void *)v0[6];
  else
    v74 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v72);
  v75._countAndFlagsBits = v73;
  v75._object = v74;
  String.append(_:)(v75);
  swift_bridgeObjectRelease(v74);
  v76._countAndFlagsBits = 0x203A64696363690ALL;
  v76._object = (void *)0xE800000000000000;
  String.append(_:)(v76);
  v77 = v0[8];
  if (v77)
    v78 = v0[7];
  else
    v78 = 0;
  if (v77)
    v79 = (void *)v0[8];
  else
    v79 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v77);
  v80._countAndFlagsBits = v78;
  v80._object = v79;
  String.append(_:)(v80);
  swift_bridgeObjectRelease(v79);
  v81._countAndFlagsBits = 0x754E656E6F68700ALL;
  v81._object = (void *)0xEE00203A7265626DLL;
  String.append(_:)(v81);
  v82 = v0[10];
  if (v82)
    v83 = v0[9];
  else
    v83 = 0;
  if (v82)
    v84 = (void *)v0[10];
  else
    v84 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v82);
  v85._countAndFlagsBits = v83;
  v85._object = v84;
  String.append(_:)(v85);
  swift_bridgeObjectRelease(v84);
  return 0;
}

uint64_t sub_10028BC28(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v3 = v1;
  v5 = sub_100004828(&qword_10063C508);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100365120();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ProofingData.CodingKeys, &type metadata for ProofingData.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = sub_100004828(&qword_100638568);
  v13 = sub_100099FFC(&qword_10063C510, &qword_100638568, (uint64_t)&protocol conformance descriptor for SealedMessage<A>);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v19 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for ProofingData(0) + 20));
    v18 = 1;
    v14 = sub_100004828(&qword_10063C4F0);
    v15 = sub_1000A1F98(&qword_10063C518, &qword_10063C4F0, (void (*)(void))sub_1003651A8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10028BDC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;

  v27 = a2;
  v4 = sub_100004828(&qword_100638578);
  __chkstk_darwin(v4);
  v28 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = sub_100004828(&qword_10063C4D8);
  v6 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ProofingData(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = sub_100365120();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ProofingData.CodingKeys, &type metadata for ProofingData.CodingKeys, v14, v12, v13);
  if (v2)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v25 = v9;
  v26 = v6;
  v15 = (uint64_t)v11;
  v16 = sub_100004828(&qword_100638568);
  v32 = 0;
  v17 = sub_100099FFC(&qword_10063C4E8, &qword_100638568, (uint64_t)&protocol conformance descriptor for SealedMessage<A>);
  v19 = v28;
  v18 = v29;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v28, v16, &v32, v29, v16, v17, v20);
  sub_1000A1F54((uint64_t)v19, v15, &qword_100638578);
  v21 = sub_100004828(&qword_10063C4F0);
  v31 = 1;
  v22 = sub_1000A1F98(&qword_10063C4F8, &qword_10063C4F0, (void (*)(void))sub_100365164, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v30, v21, &v31, v18, v21, v22, v23);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v18);
  *(_QWORD *)(v15 + *(int *)(v25 + 20)) = v30;
  sub_100035DE8(v15, v27, type metadata accessor for ProofingData);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return sub_100035DAC(v15, type metadata accessor for ProofingData);
}

uint64_t sub_10028C074(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _BYTE v18[16];
  _OWORD v19[2];
  uint64_t v20;

  v3 = v1;
  v5 = sub_100004828(&qword_10063CD00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100368D04();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UploadedData.CodingKeys, &type metadata for UploadedData.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v19[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v19, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v19[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v19, v5);
    v16 = *((_OWORD *)v3 + 3);
    v19[0] = *((_OWORD *)v3 + 2);
    v19[1] = v16;
    v20 = v3[8];
    v18[15] = 2;
    sub_100368D8C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10028C1D0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v3 = v1;
  v5 = sub_100004828(&qword_10063D928);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003700F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UploadedDataInfo.CodingKeys, &type metadata for UploadedDataInfo.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v21, v5);
  if (!v2)
  {
    v14 = v3[2];
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v20, v5);
    v15 = v3[3];
    v16 = v3[4];
    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v19, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10028C30C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_100004828(&qword_10063D8A0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10000806C(a1, v8);
  v10 = sub_10036FDB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ImageQualityMetricData.CodingKeys, &type metadata for ImageQualityMetricData.CodingKeys, v10, v8, v9);
  v13 = a2;
  sub_100004828(&qword_10063D880);
  sub_10036FEA8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10028C410(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v20 = a3;
  v8 = sub_100004828(&qword_10063CB78);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = sub_100368888();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MetricsData.CodingKeys, &type metadata for MetricsData.CodingKeys, v14, v12, v13);
  v22 = a2;
  v21 = 0;
  v15 = sub_100004828(&qword_100634110);
  v16 = sub_100368934();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v22, &v21, v8, v15, v16);
  if (!v4)
  {
    v22 = v20;
    v21 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v22, &v21, v8, v15, v16);
    v22 = a4;
    v21 = 2;
    v17 = sub_100004828(&qword_10063CB68);
    v18 = sub_1000A1F98(&qword_10063CB90, &qword_10063CB68, (void (*)(void))sub_100368934, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v22, &v21, v8, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10028C5D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10028C608 + 4 * word_10052719E[a1]))(0x656E697272756C62, 0xEA00000000007373);
}

uint64_t sub_10028C608()
{
  return 0x657275736F707865;
}

uint64_t sub_10028C620()
{
  return 0x7473694464726163;
}

unint64_t sub_10028C644()
{
  return 0xD000000000000010;
}

unint64_t sub_10028C968()
{
  return 0xD000000000000014;
}

void sub_10028C980()
{
  JUMPOUT(0x10028C994);
}

uint64_t sub_10028C9A0()
{
  return 0x6365446C65646F6DLL;
}

uint64_t sub_10028C9C4()
{
  return 0x7265566C65646F6DLL;
}

uint64_t sub_10028C9E4()
{
  return 0x7461726F6C707865;
}

uint64_t sub_10028CA04()
{
  return 0x6F436E6163736572;
}

uint64_t sub_10028CA24()
{
  return 0x7373656E6576696CLL;
}

uint64_t sub_10028CA48()
{
  return 0x646F43726F727265;
}

uint64_t sub_10028CA68(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v88[108];
  _BYTE v89[4];
  uint64_t v90;
  _BYTE v91[112];
  _BYTE v92[8];
  _BYTE v93[8];
  _BYTE v94[8];
  _BYTE v95[8];
  _BYTE v96[16];
  _BYTE v97[8];

  v3 = v1;
  v5 = sub_100004828(&qword_10063CB00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v88[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100368528();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IQMetrics.CodingKeys, &type metadata for IQMetrics.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((_BYTE *)v3 + 4);
  v88[0] = 0;
  v89[0] = v13;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12 | ((unint64_t)v13 << 32), v88, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = *((_BYTE *)v3 + 12);
    v88[0] = 1;
    v89[0] = v15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14 | ((unint64_t)v15 << 32), v88, v5);
    v16 = v3[4];
    v17 = *((_BYTE *)v3 + 20);
    v88[0] = 2;
    v89[0] = v17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16 | ((unint64_t)v17 << 32), v88, v5);
    v18 = v3[6];
    v19 = *((_BYTE *)v3 + 28);
    v88[0] = 3;
    v89[0] = v19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18 | ((unint64_t)v19 << 32), v88, v5);
    v20 = v3[8];
    v21 = *((_BYTE *)v3 + 36);
    v88[0] = 4;
    v89[0] = v21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20 | ((unint64_t)v21 << 32), v88, v5);
    v22 = v3[10];
    v23 = *((_BYTE *)v3 + 44);
    v88[0] = 5;
    v89[0] = v23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22 | ((unint64_t)v23 << 32), v88, v5);
    v24 = v3[12];
    v25 = *((_BYTE *)v3 + 52);
    v88[0] = 6;
    v89[0] = v25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24 | ((unint64_t)v25 << 32), v88, v5);
    v26 = v3[14];
    v27 = *((_BYTE *)v3 + 60);
    v88[0] = 7;
    v89[0] = v27;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26 | ((unint64_t)v27 << 32), v88, v5);
    v28 = v3[16];
    v29 = *((_BYTE *)v3 + 68);
    v88[0] = 8;
    v89[0] = v29;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28 | ((unint64_t)v29 << 32), v88, v5);
    v30 = v3[18];
    v31 = *((_BYTE *)v3 + 76);
    v88[0] = 9;
    v89[0] = v31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30 | ((unint64_t)v31 << 32), v88, v5);
    v32 = v3[20];
    v33 = *((_BYTE *)v3 + 84);
    v88[0] = 10;
    v89[0] = v33;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32 | ((unint64_t)v33 << 32), v88, v5);
    v34 = v3[22];
    v35 = *((_BYTE *)v3 + 92);
    v88[0] = 11;
    v89[0] = v35;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34 | ((unint64_t)v35 << 32), v88, v5);
    v36 = v3[24];
    v37 = *((_BYTE *)v3 + 100);
    v88[0] = 12;
    v89[0] = v37;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36 | ((unint64_t)v37 << 32), v88, v5);
    v38 = v3[26];
    v39 = *((_BYTE *)v3 + 108);
    v88[0] = 13;
    v89[0] = v39;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38 | ((unint64_t)v39 << 32), v88, v5);
    v40 = v3[28];
    v41 = *((_BYTE *)v3 + 116);
    v88[0] = 14;
    v89[0] = v41;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v40 | ((unint64_t)v41 << 32), v88, v5);
    v42 = v3[30];
    v43 = *((_BYTE *)v3 + 124);
    v88[0] = 15;
    v89[0] = v43;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v42 | ((unint64_t)v43 << 32), v88, v5);
    v44 = v3[32];
    v45 = *((_BYTE *)v3 + 132);
    v88[0] = 16;
    v89[0] = v45;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v44 | ((unint64_t)v45 << 32), v88, v5);
    v46 = v3[34];
    v47 = *((_BYTE *)v3 + 140);
    v88[0] = 17;
    v89[0] = v47;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v46 | ((unint64_t)v47 << 32), v88, v5);
    v48 = v3[36];
    v49 = *((_BYTE *)v3 + 148);
    v88[0] = 18;
    v89[0] = v49;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v48 | ((unint64_t)v49 << 32), v88, v5);
    v50 = v3[38];
    v51 = *((_BYTE *)v3 + 156);
    v88[0] = 19;
    v89[0] = v51;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v50 | ((unint64_t)v51 << 32), v88, v5);
    v52 = v3[40];
    v53 = *((_BYTE *)v3 + 164);
    v88[0] = 20;
    v89[0] = v53;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v52 | ((unint64_t)v53 << 32), v88, v5);
    v54 = v3[42];
    v55 = *((_BYTE *)v3 + 172);
    v88[0] = 21;
    v89[0] = v55;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v54 | ((unint64_t)v55 << 32), v88, v5);
    sub_1000A1F54((uint64_t)(v3 + 44), (uint64_t)v97, &qword_10063CB08);
    sub_1000A1F54((uint64_t)v97, (uint64_t)v88, &qword_10063CB08);
    v89[0] = 22;
    v56 = sub_100004828(&qword_1006321F8);
    v57 = sub_10008F400(&qword_100632210, &qword_1006321F8, (uint64_t)&protocol witness table for Float, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v88, v89, v5, v56, v57);
    sub_1000A1F54((uint64_t)(v3 + 46), (uint64_t)v96, &qword_10063CB08);
    sub_1000A1F54((uint64_t)v96, (uint64_t)v88, &qword_10063CB08);
    v89[0] = 23;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v88, v89, v5, v56, v57);
    v58 = *((_QWORD *)v3 + 24);
    v59 = *((unsigned __int8 *)v3 + 200);
    v88[0] = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v58, v59, v88, v5);
    v60 = *((_QWORD *)v3 + 26);
    v61 = *((unsigned __int8 *)v3 + 216);
    v88[0] = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v60, v61, v88, v5);
    v62 = *((unsigned __int8 *)v3 + 217);
    v88[0] = 26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v62, v88, v5);
    v63 = *((unsigned __int8 *)v3 + 218);
    v88[0] = 27;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v63, v88, v5);
    v64 = *((unsigned __int8 *)v3 + 219);
    v88[0] = 28;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v64, v88, v5);
    v65 = *((unsigned __int8 *)v3 + 220);
    v88[0] = 29;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v65, v88, v5);
    v66 = *((_QWORD *)v3 + 28);
    v67 = *((_QWORD *)v3 + 29);
    v88[0] = 30;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v66, v67, v88, v5);
    v68 = *((_QWORD *)v3 + 30);
    v69 = *((_QWORD *)v3 + 31);
    v88[0] = 31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v68, v69, v88, v5);
    sub_1000A1F54((uint64_t)(v3 + 64), (uint64_t)v95, &qword_10063CB10);
    sub_1000A1F54((uint64_t)v95, (uint64_t)v88, &qword_10063CB10);
    v89[0] = 32;
    v70 = sub_100004828(&qword_10063CAD0);
    v71 = sub_1003687C8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v88, v89, v5, v70, v71);
    sub_1000A1F54((uint64_t)(v3 + 66), (uint64_t)v94, &qword_10063CB10);
    sub_1000A1F54((uint64_t)v94, (uint64_t)v88, &qword_10063CB10);
    v89[0] = 33;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v88, v89, v5, v70, v71);
    sub_1000A1F54((uint64_t)(v3 + 68), (uint64_t)v93, &qword_10063CB10);
    sub_1000A1F54((uint64_t)v93, (uint64_t)v88, &qword_10063CB10);
    v89[0] = 34;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v88, v89, v5, v70, v71);
    sub_1000A1F54((uint64_t)(v3 + 70), (uint64_t)v92, &qword_10063CB10);
    sub_1000A1F54((uint64_t)v92, (uint64_t)v88, &qword_10063CB10);
    v89[0] = 35;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v88, v89, v5, v70, v71);
    sub_1000A1F54((uint64_t)(v3 + 72), (uint64_t)v91, &qword_10063CB28);
    sub_1000A1F54((uint64_t)v91, (uint64_t)v88, &qword_10063CB28);
    v89[0] = 36;
    v72 = sub_100368844();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v88, v89, v5, &type metadata for FuzzyMatchData, v72);
    sub_1000A1F54((uint64_t)(v3 + 100), (uint64_t)&v90, &qword_10063CB38);
    sub_1000A1F54((uint64_t)&v90, (uint64_t)v88, &qword_10063CB38);
    v89[0] = 37;
    v73 = sub_100004828(&qword_10063CAF0);
    v74 = sub_10008F400(&qword_10063CB40, &qword_10063CAF0, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v88, v89, v5, v73, v74);
    v75 = *((_QWORD *)v3 + 51);
    v76 = *((_QWORD *)v3 + 52);
    v88[0] = 38;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v75, v76, v88, v5);
    v77 = *((_QWORD *)v3 + 53);
    v78 = *((_QWORD *)v3 + 54);
    v88[0] = 39;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v77, v78, v88, v5);
    v79 = *((unsigned __int8 *)v3 + 440);
    v88[0] = 40;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v79, v88, v5);
    v80 = *((_QWORD *)v3 + 56);
    v81 = *((unsigned __int8 *)v3 + 456);
    v88[0] = 41;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v80, v81, v88, v5);
    v82 = *((_QWORD *)v3 + 58);
    v83 = *((_QWORD *)v3 + 59);
    v88[0] = 42;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v82, v83, v88, v5);
    v84 = *((_QWORD *)v3 + 60);
    v85 = *((unsigned __int8 *)v3 + 488);
    v88[0] = 43;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v84, v85, v88, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10028D598(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v3 = v1;
  v5 = sub_100004828(&qword_10063D910);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003700AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FuzzyMatchData.CodingKeys, &type metadata for FuzzyMatchData.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((unsigned __int8 *)v3 + 8);
  v34 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v34, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = *((unsigned __int8 *)v3 + 24);
    v33 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v33, v5);
    v16 = v3[4];
    v17 = *((unsigned __int8 *)v3 + 40);
    v32 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v32, v5);
    v18 = v3[6];
    v19 = *((unsigned __int8 *)v3 + 56);
    v31 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v31, v5);
    v20 = v3[8];
    v21 = *((unsigned __int8 *)v3 + 72);
    v30 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v30, v5);
    v22 = v3[10];
    v23 = *((unsigned __int8 *)v3 + 88);
    v29 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v29, v5);
    v24 = v3[12];
    v25 = *((unsigned __int8 *)v3 + 104);
    v28 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v28, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10028D790(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  char v13;
  int v14;
  char v15;
  int v16;
  char v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  _BYTE v27[16];
  uint64_t v28;
  char v29;
  __int128 v30;
  int v31;
  char v32;
  int v33;
  char v34;
  int v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v3 = v1;
  v5 = sub_100004828(&qword_10063CFB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100369A44();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LivenessDataV2.CodingKeys, &type metadata for LivenessDataV2.CodingKeys, v11, v9, v10);
  LOBYTE(v28) = 0;
  sub_100004828(&qword_100633968);
  sub_100099FFC(&qword_10063CD30, &qword_100633968, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3);
  if (!v2)
  {
    v12 = (uint64_t *)(v3 + *(int *)(type metadata accessor for LivenessDataV2(0) + 20));
    v13 = *((_BYTE *)v12 + 8);
    v14 = *((_DWORD *)v12 + 8);
    v15 = *((_BYTE *)v12 + 36);
    v16 = *((_DWORD *)v12 + 10);
    v17 = *((_BYTE *)v12 + 44);
    v18 = *((_DWORD *)v12 + 12);
    v19 = *((_BYTE *)v12 + 52);
    v20 = v12[7];
    v21 = *((unsigned __int8 *)v12 + 64);
    v22 = v12[9];
    v23 = *((_DWORD *)v12 + 20);
    v24 = *((_BYTE *)v12 + 84);
    v25 = v12[13];
    v28 = *v12;
    v29 = v13;
    v30 = *((_OWORD *)v12 + 1);
    v31 = v14;
    v32 = v15;
    v33 = v16;
    v34 = v17;
    v35 = v18;
    v36 = v19;
    v37 = v20;
    v38 = v21;
    v39 = v22;
    v40 = v23;
    v41 = v24;
    v42 = *(_OWORD *)(v12 + 11);
    v43 = v25;
    v27[15] = 1;
    sub_100369ACC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10028D978@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  char v24;
  int v25;
  char v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  int v47;
  char v48;
  int v49;
  char v50;
  int v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  int v56;
  char v57;
  __int128 v58;
  uint64_t v59;
  char v60;

  v39 = a2;
  v41 = sub_100004828(&qword_100633968);
  v3 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v40 = (uint64_t *)((char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = sub_100004828(&qword_10063CFA0);
  v5 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LivenessDataV2(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000806C(a1, v11);
  v13 = sub_100369A44();
  v14 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LivenessDataV2.CodingKeys, &type metadata for LivenessDataV2.CodingKeys, v13, v11, v12);
  if (v14)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v43 = a1;
  v15 = v5;
  v38 = v8;
  v16 = (uint64_t)v10;
  LOBYTE(v44) = 0;
  v17 = sub_100099FFC(&qword_10063C618, &qword_100633968, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  v18 = v40;
  v19 = v41;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v40, v41, &v44, v42, v41, v17);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 32))(v16, v18, v19);
  v60 = 1;
  v20 = sub_100369A88();
  v21 = v42;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for LivenessAttestation, &v60, v42, &type metadata for LivenessAttestation, v20);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v21);
  v22 = v45;
  v23 = v47;
  v24 = v48;
  v25 = v49;
  v26 = v50;
  v27 = v51;
  v28 = v52;
  v29 = v53;
  v30 = v54;
  v31 = v55;
  v32 = v56;
  v33 = v57;
  v34 = v59;
  v35 = v16 + *(int *)(v38 + 20);
  *(_QWORD *)v35 = v44;
  *(_BYTE *)(v35 + 8) = v22;
  *(_OWORD *)(v35 + 16) = v46;
  *(_DWORD *)(v35 + 32) = v23;
  *(_BYTE *)(v35 + 36) = v24;
  *(_DWORD *)(v35 + 40) = v25;
  *(_BYTE *)(v35 + 44) = v26;
  *(_DWORD *)(v35 + 48) = v27;
  *(_BYTE *)(v35 + 52) = v28;
  *(_QWORD *)(v35 + 56) = v29;
  *(_BYTE *)(v35 + 64) = v30;
  *(_QWORD *)(v35 + 72) = v31;
  *(_DWORD *)(v35 + 80) = v32;
  *(_BYTE *)(v35 + 84) = v33;
  *(_OWORD *)(v35 + 88) = v58;
  *(_QWORD *)(v35 + 104) = v34;
  sub_100035DE8(v16, v39, type metadata accessor for LivenessDataV2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v43);
  return sub_100035DAC(v16, type metadata accessor for LivenessDataV2);
}

uint64_t sub_10028DC78(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE v16[176];
  _BYTE v17[96];
  _BYTE v18[184];
  char v19;

  v3 = v1;
  v5 = sub_100004828(&qword_10063B0F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002B78E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LivenessConfigV2.CodingKeys, &type metadata for LivenessConfigV2.CodingKeys, v11, v9, v10);
  sub_1000A1F54(v3, (uint64_t)v18, &qword_10063B0E8);
  sub_1000A1F54((uint64_t)v18, (uint64_t)v16, &qword_10063B0E8);
  v19 = 0;
  v12 = sub_1002B7BE4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v19, v5, &type metadata for ActiveLivenessConfig, v12);
  if (!v2)
  {
    sub_1000A1F54(v3 + 176, (uint64_t)v17, &qword_10063B108);
    sub_1000A1F54((uint64_t)v17, (uint64_t)v16, &qword_10063B108);
    v19 = 1;
    v13 = sub_1002B7C28();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v19, v5, &type metadata for PassiveLivenessConfig, v13);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10028DE08(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10028DE3C + 4 * byte_1005271F6[a1]))(0x6E6F6973726576, 0xE700000000000000);
}

uint64_t sub_10028DE3C()
{
  return 0x7365727574736567;
}

uint64_t sub_10028DE54()
{
  return 0x746169636F737361;
}

unint64_t sub_10028DE74()
{
  return 0xD000000000000017;
}

uint64_t sub_10028E048()
{
  return 0x65526569666C6573;
}

uint64_t sub_10028E06C()
{
  return 0x7541656C62616E65;
}

uint64_t sub_10028E090(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v39[8];
  uint64_t v40;

  v3 = v1;
  v5 = sub_100004828(&qword_10063B158);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002B979C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ActiveLivenessConfig.CodingKeys, &type metadata for ActiveLivenessConfig.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v40) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v40, v5);
  if (!v2)
  {
    v40 = v3[2];
    v39[7] = 1;
    sub_100004828(&qword_10063B140);
    sub_1000A1F98(&qword_10063B160, &qword_10063B140, (void (*)(void))sub_1002B98B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v40);
    v14 = v3[3];
    v15 = v3[4];
    LOBYTE(v40) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v40, v5);
    v16 = v3[5];
    LOBYTE(v40) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v40, v5);
    v17 = v3[6];
    LOBYTE(v40) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v40, v5);
    v18 = v3[7];
    LOBYTE(v40) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v40, v5);
    v19 = v3[8];
    LOBYTE(v40) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v40, v5);
    v20 = v3[9];
    LOBYTE(v40) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v40, v5);
    v21 = v3[10];
    LOBYTE(v40) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v21, &v40, v5);
    v22 = v3[11];
    LOBYTE(v40) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v40, v5);
    v23 = v3[12];
    LOBYTE(v40) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v23, &v40, v5);
    v24 = v3[13];
    LOBYTE(v40) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v24, &v40, v5);
    v25 = v3[14];
    LOBYTE(v40) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v40, v5);
    v26 = v3[15];
    LOBYTE(v40) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v26, &v40, v5);
    v27 = v3[16];
    v28 = *((unsigned __int8 *)v3 + 136);
    LOBYTE(v40) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v40, v5);
    v29 = v3[18];
    v30 = *((unsigned __int8 *)v3 + 152);
    LOBYTE(v40) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v40, v5);
    v31 = v3[20];
    v32 = *((unsigned __int8 *)v3 + 168);
    LOBYTE(v40) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v40, v5);
    v33 = *((unsigned __int8 *)v3 + 169);
    LOBYTE(v40) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, &v40, v5);
    v34 = *((unsigned __int8 *)v3 + 170);
    LOBYTE(v40) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, &v40, v5);
    v35 = *((unsigned __int8 *)v3 + 171);
    LOBYTE(v40) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, &v40, v5);
    v36 = *((unsigned __int8 *)v3 + 172);
    LOBYTE(v40) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, &v40, v5);
    v37 = *((unsigned __int8 *)v3 + 173);
    LOBYTE(v40) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37, &v40, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10028E514(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10028E548 + 4 * byte_10052720C[a1]))(0x6E6F6973726576, 0xE700000000000000);
}

uint64_t sub_10028E548()
{
  return 0x746169636F737361;
}

uint64_t sub_10028E568()
{
  return 0x6B6174655278616DLL;
}

uint64_t sub_10028E58C()
{
  return 0x546E6F6973736573;
}

unint64_t sub_10028E5B0()
{
  return 0xD000000000000014;
}

unint64_t sub_10028E60C()
{
  return 0xD000000000000016;
}

uint64_t sub_10028E634()
{
  return 0x7541656C62616E65;
}

uint64_t sub_10028E658()
{
  return 0x6172466C61746F74;
}

uint64_t sub_10028E67C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v3 = v1;
  v5 = sub_100004828(&qword_10063B128);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002B9758();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PassiveLivenessConfig.CodingKeys, &type metadata for PassiveLivenessConfig.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v37 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v37, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v36 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v36, v5);
    v16 = v3[4];
    v35 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v35, v5);
    v17 = v3[5];
    v34 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v34, v5);
    v18 = v3[6];
    v19 = *((unsigned __int8 *)v3 + 56);
    v33 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v33, v5);
    v20 = *((unsigned __int8 *)v3 + 57);
    v32 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, &v32, v5);
    v21 = *((unsigned __int8 *)v3 + 58);
    v31 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, &v31, v5);
    v22 = *((unsigned __int8 *)v3 + 59);
    v30 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, &v30, v5);
    v23 = v3[8];
    v24 = *((unsigned __int8 *)v3 + 72);
    HIBYTE(v29) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, (char *)&v29 + 7, v5);
    v25 = v3[10];
    v26 = *((unsigned __int8 *)v3 + 88);
    BYTE6(v29) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, (char *)&v29 + 6, v5);
    v27 = *((unsigned __int8 *)v3 + 89);
    BYTE5(v29) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, (char *)&v29 + 5, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10028E904(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v7 = sub_100004828(&qword_10063C328);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000806C(a1, v11);
  v13 = sub_100362EE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Gesture.CodingKeys, &type metadata for Gesture.CodingKeys, v13, v11, v12);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v7);
  if (!v3)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v16, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10028EA20(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10028EA60 + 4 * byte_100527217[a1]))(0x7373656E6576696CLL, 0xED00006C6562614CLL);
}

uint64_t sub_10028EA60()
{
  return 0x656D737365737361;
}

uint64_t sub_10028EB28()
{
  return 0x656D737365737361;
}

uint64_t sub_10028EB4C()
{
  return 0x6D617473656D6974;
}

unint64_t sub_10028EB6C()
{
  return 0xD000000000000017;
}

uint64_t sub_10028EB88()
{
  return 0x65756C615678756CLL;
}

uint64_t sub_10028EBA4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _BYTE v36[4];
  char v37[8];
  _BYTE v38[8];
  _BYTE v39[8];
  _BYTE v40[8];
  _BYTE v41[8];
  _BYTE v42[8];
  _BYTE v43[8];

  v3 = v1;
  v5 = sub_100004828(&qword_10063D980);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 4];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100370178();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LivenessAttestation.CodingKeys, &type metadata for LivenessAttestation.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((unsigned __int8 *)v3 + 8);
  v37[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v37, v5);
  if (!v2)
  {
    sub_1000A1F54((uint64_t)(v3 + 2), (uint64_t)v43, &qword_10063CB38);
    sub_1000A1F54((uint64_t)v43, (uint64_t)v37, &qword_10063CB38);
    v36[0] = 1;
    v14 = sub_100004828(&qword_10063CAF0);
    v15 = sub_10008F400(&qword_10063CB40, &qword_10063CAF0, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v37, v36, v5, v14, v15);
    sub_1000A1F54((uint64_t)(v3 + 3), (uint64_t)v42, &qword_10063D988);
    sub_1000A1F54((uint64_t)v42, (uint64_t)v37, &qword_10063D988);
    v36[0] = 2;
    v16 = sub_100004828(&qword_10063D950);
    v17 = sub_1003701BC(&qword_10063D990, &qword_10063D998, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v37, v36, v5, v16, v17);
    v18 = *((unsigned int *)v3 + 8);
    v19 = *((_BYTE *)v3 + 36);
    v37[0] = 3;
    v36[0] = v19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18 | ((unint64_t)v19 << 32), v37, v5);
    v20 = *((unsigned int *)v3 + 10);
    v21 = *((_BYTE *)v3 + 44);
    v37[0] = 4;
    v36[0] = v21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20 | ((unint64_t)v21 << 32), v37, v5);
    v22 = *((unsigned int *)v3 + 12);
    v23 = *((_BYTE *)v3 + 52);
    v37[0] = 5;
    v36[0] = v23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22 | ((unint64_t)v23 << 32), v37, v5);
    v24 = v3[7];
    v25 = *((unsigned __int8 *)v3 + 64);
    v37[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, v37, v5);
    sub_1000A1F54((uint64_t)(v3 + 9), (uint64_t)v41, &qword_10063D9A0);
    sub_1000A1F54((uint64_t)v41, (uint64_t)v37, &qword_10063D9A0);
    v36[0] = 7;
    v26 = sub_100004828(&qword_10063D968);
    v27 = sub_1000A1F98(&qword_10063D9A8, &qword_10063D968, (void (*)(void))sub_100370288, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v37, v36, v5, v26, v27);
    v28 = *((unsigned int *)v3 + 20);
    v29 = *((_BYTE *)v3 + 84);
    v37[0] = 8;
    v36[0] = v29;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28 | ((unint64_t)v29 << 32), v37, v5);
    sub_1000A1F54((uint64_t)(v3 + 11), (uint64_t)v40, &qword_10063D9B8);
    sub_1000A1F54((uint64_t)v40, (uint64_t)v37, &qword_10063D9B8);
    v36[0] = 9;
    v30 = sub_100004828(&qword_1006340B8);
    v31 = sub_10008F400(&qword_10063D998, &qword_1006340B8, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v35 = v30;
    v32 = v30;
    v33 = v31;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v37, v36, v5, v32, v31);
    sub_1000A1F54((uint64_t)(v3 + 12), (uint64_t)v39, &qword_10063D9B8);
    sub_1000A1F54((uint64_t)v39, (uint64_t)v37, &qword_10063D9B8);
    v36[0] = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v37, v36, v5, v35, v33);
    sub_1000A1F54((uint64_t)(v3 + 13), (uint64_t)v38, &qword_10063CB38);
    sub_1000A1F54((uint64_t)v38, (uint64_t)v37, &qword_10063CB38);
    v36[0] = 11;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v37, v36, v5, v14, v15);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10028F094(_QWORD *a1, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v7 = sub_100004828(&qword_10063D040);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000806C(a1, v11);
  v13 = sub_100369DF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PRDResults.CodingKeys, &type metadata for PRDResults.CodingKeys, v13, v11, v12);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v17, v7, a3);
  if (!v3)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2, &v16, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10028F1B4()
{
  _BYTE *v0;

  if (*v0)
    return 0x646564616F6C7075;
  else
    return 0x61746144766469;
}

uint64_t sub_10028F1F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B3608(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028F21C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365120();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028F244(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365120();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10028F26C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10028BDC0(a1, a2);
}

uint64_t sub_10028F280(_QWORD *a1)
{
  return sub_10028BC28(a1);
}

uint64_t sub_10028F294()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7475626972747461;
  if (*v0 != 1)
    v1 = 0x6F666E4961746164;
  if (*v0)
    return v1;
  else
    return 0x644979656BLL;
}

uint64_t sub_10028F2F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B3710(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028F318(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368D04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028F340(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368D04();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10028F368@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_1002B3874(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10028F3B8(_QWORD *a1)
{
  return sub_10028C074(a1);
}

uint64_t sub_10028F3CC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1702521203;
  if (*v0 != 1)
    v1 = 0x48746E65746E6F63;
  if (*v0)
    return v1;
  else
    return 0x644964726F636572;
}

uint64_t sub_10028F428@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B3AF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028F44C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003700F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028F474(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003700F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10028F49C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1002B3C4C(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10028F4E0(_QWORD *a1)
{
  return sub_10028C1D0(a1);
}

uint64_t sub_10028F4F4()
{
  return 0x4D7363697274656DLL;
}

uint64_t sub_10028F510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x4D7363697274656DLL && a2 == 0xEA00000000007061)
  {
    result = swift_bridgeObjectRelease(0xEA00000000007061);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4D7363697274656DLL, 0xEA00000000007061, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10028F5B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036FDB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028F5D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036FDB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10028F600@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1002B3E28(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10028F628(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10028C30C(a1, *v1);
}

uint64_t sub_10028F640()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x4D65727574706163;
  if (*v0 != 1)
    v1 = 0x74654D6F65646976;
  if (*v0)
    return v1;
  else
    return 0x654D656E696C6E69;
}

uint64_t sub_10028F6BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B3F54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028F6E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368888();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028F708(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368888();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10028F730@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1002B4108(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10028F75C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10028C410(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10028F778()
{
  unsigned __int8 *v0;

  return sub_10028C5D0(*v0);
}

uint64_t sub_10028F780@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B4388(a1, a2);
  *a3 = result;
  return result;
}

void sub_10028F7A4(_BYTE *a1@<X8>)
{
  *a1 = 44;
}

uint64_t sub_10028F7B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368528();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028F7D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368528();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10028F800@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[496];

  result = sub_1002B560C(a1, v5);
  if (!v2)
    return memcpy(a2, v5, 0x1E9uLL);
  return result;
}

uint64_t sub_10028F850(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[489];

  memcpy(v4, v1, sizeof(v4));
  return sub_10028CA68(a1);
}

uint64_t sub_10028F8A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10028F8D4 + 4 * byte_100527223[*v0]))(0x6D614E7473726966, 0xE900000000000065);
}

uint64_t sub_10028F8D4()
{
  return 0x656D614E7473616CLL;
}

uint64_t sub_10028F8EC()
{
  return 0x6574617473;
}

uint64_t sub_10028F900()
{
  return 0x6D754E6573756F68;
}

uint64_t sub_10028F920()
{
  return 0x746565727473;
}

uint64_t sub_10028F934()
{
  return 6451044;
}

uint64_t sub_10028F944()
{
  return 0x6F436C6174736F70;
}

uint64_t sub_10028F960@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B6E24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028F984(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003700AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028F9AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003700AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10028F9D4@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  _OWORD v8[2];

  sub_1002B7118(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v8[0];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 89) = *(_OWORD *)((char *)v8 + 9);
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10028FA24(_QWORD *a1)
{
  return sub_10028D598(a1);
}

uint64_t sub_10028FA38()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0x7373656E6576696CLL;
}

uint64_t sub_10028FA84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B73C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028FAA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369A44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028FAD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369A44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10028FAF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10028D978(a1, a2);
}

uint64_t sub_10028FB0C(_QWORD *a1)
{
  return sub_10028D790(a1);
}

unint64_t sub_10028FB20()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0xD000000000000014;
}

uint64_t sub_10028FB60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B74D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028FB84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002B78E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028FBAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002B78E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10028FBD4@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[272];

  result = sub_1002B75C0(a1, v5);
  if (!v2)
    return memcpy(a2, v5, 0x10AuLL);
  return result;
}

uint64_t sub_10028FC24(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[266];

  memcpy(v4, v1, sizeof(v4));
  return sub_10028DC78(a1);
}

uint64_t sub_10028FC74()
{
  unsigned __int8 *v0;

  return sub_10028DE08(*v0);
}

uint64_t sub_10028FC7C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B7C6C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10028FCA0(_BYTE *a1@<X8>)
{
  *a1 = 22;
}

uint64_t sub_10028FCAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002B979C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028FCD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002B979C();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10028FCFC@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[9];
  _OWORD v10[2];

  sub_1002B85BC(a1, v9);
  if (!v2)
  {
    v5 = v10[0];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(_OWORD *)(a2 + 158) = *(_OWORD *)((char *)v10 + 14);
    v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10028FD5C(_QWORD *a1)
{
  return sub_10028E090(a1);
}

uint64_t sub_10028FD70()
{
  unsigned __int8 *v0;

  return sub_10028E514(*v0);
}

uint64_t sub_10028FD78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B8E00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028FD9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002B9758();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028FDC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002B9758();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10028FDEC@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[4];
  _OWORD v8[2];

  sub_1002B9318(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[3];
    a2[2] = v7[2];
    a2[3] = v5;
    a2[4] = v8[0];
    *(_OWORD *)((char *)a2 + 74) = *(_OWORD *)((char *)v8 + 10);
    result = *(double *)v7;
    v6 = v7[1];
    *a2 = v7[0];
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_10028FE3C(_QWORD *a1)
{
  return sub_10028E67C(a1);
}

uint64_t sub_10028FE50()
{
  _BYTE *v0;

  if (*v0)
    return 1701869940;
  else
    return 0x65727574736567;
}

uint64_t sub_10028FE84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B98F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028FEA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100362EE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028FED0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100362EE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10028FEF8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1002B99D4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10028FF20(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10028E904(a1, *v1, v1[1]);
}

uint64_t sub_10028FF38()
{
  unsigned __int8 *v0;

  return sub_10028EA20(*v0);
}

uint64_t sub_10028FF40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002B9B24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028FF64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100370178();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028FF8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100370178();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10028FFB4@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[7];

  sub_1002BA0BC(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_100290004(_QWORD *a1)
{
  return sub_10028EBA4(a1);
}

uint64_t sub_10029004C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D617473656D6974;
  else
    return 0x326567617473;
}

uint64_t sub_100290088@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BA7C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002900AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369DF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002900D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369DF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_1002900FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  int v5;

  result = sub_1002BA8BC(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = result;
  }
  return result;
}

uint64_t sub_100290128(_QWORD *a1)
{
  uint64_t v1;

  return sub_10028F094(a1, *(_QWORD *)(v1 + 8), *(float *)v1);
}

uint64_t sub_100290144(float a1)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v2._countAndFlagsBits = 0x3A3265676174730ALL;
  v2._object = (void *)0xE900000000000020;
  String.append(_:)(v2);
  Float.write<A>(to:)(v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1);
  v3._countAndFlagsBits = 0x7473656D6974202CLL;
  v3._object = (void *)0xED0000203A706D61;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  return v7[0];
}

uint64_t sub_100290228(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v19 = a5;
  v20 = a4;
  v9 = sub_100004828(&qword_10063CBA8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v14);
  v15 = sub_10036899C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyAuthorization.CodingKeys, &type metadata for KeyAuthorization.CodingKeys, v15, v14, v13);
  LOBYTE(v22) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v22, v9);
  if (!v5)
  {
    v16 = v19;
    v22 = v20;
    v21 = 1;
    sub_100004828(&qword_1006368D0);
    sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
    v22 = v16;
    v21 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1002903CC()
{
  float *v0;

  return sub_100290144(*v0);
}

uint64_t sub_1002903D8()
{
  return 0x7A69726F68747561;
}

uint64_t sub_100290424@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BAA10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100290448(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036899C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100290470(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036899C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100290498@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1002BAB90(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1002904C4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100290228(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1002904E0()
{
  _BYTE *v0;

  if (*v0)
    return 0x7461747365747461;
  else
    return 0xD000000000000012;
}

uint64_t sub_100290528@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BAE10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029054C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368DD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100290574(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368DD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029059C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028787C(a1, (uint64_t)&unk_10063CD10, (uint64_t)sub_100368DD0, (uint64_t)&type metadata for CASDAttestationData.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1002CA68C, a2);
}

uint64_t sub_1002905D0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063CD20, (uint64_t (*)(void))sub_100368DD0, (uint64_t)&type metadata for CASDAttestationData.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_100290618(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100290658 + 4 * byte_10052722A[a1]))(0x4874736575716572, 0xED00007265646165);
}

unint64_t sub_100290658()
{
  return 0xD000000000000010;
}

uint64_t sub_10029079C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;

  v3 = v1;
  v5 = sub_100004828(&qword_10063C430);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003631DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingRequestV2.CodingKeys, &type metadata for IdentityProofingRequestV2.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v39 = *v3;
  *(_QWORD *)&v40 = v12;
  *((_QWORD *)&v40 + 1) = v13;
  v42 = 0;
  sub_10036345C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v39);
  if (!v2)
  {
    v14 = v3[3];
    v39 = v3[2];
    v40 = v14;
    v41 = v3[4];
    v42 = 1;
    v15 = sub_1003634A0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v42, v5, &type metadata for AppleCredentials, v15);
    v16 = *((_QWORD *)v3 + 10);
    v17 = *((_QWORD *)v3 + 11);
    LOBYTE(v39) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v39, v5);
    v18 = *((_QWORD *)v3 + 12);
    v19 = *((_QWORD *)v3 + 13);
    LOBYTE(v39) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v39, v5);
    *(_QWORD *)&v39 = *((_QWORD *)v3 + 14);
    v42 = 4;
    sub_100004828(&qword_10063C3E0);
    sub_1003634E4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v39);
    v20 = (int *)type metadata accessor for IdentityProofingRequestV2(0);
    v21 = (uint64_t)v3 + v20[9];
    LOBYTE(v39) = 5;
    v22 = type metadata accessor for TiberiusWrappedAssessment(0);
    v23 = sub_100004790(&qword_10063C450, type metadata accessor for TiberiusWrappedAssessment, (uint64_t)&unk_10052A0FC);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v39, v5, v22, v23);
    *(_QWORD *)&v39 = *(_QWORD *)((char *)v3 + v20[10]);
    v42 = 6;
    v24 = sub_100004828(&qword_1006368D0);
    v25 = sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v42, v5, v24, v25);
    *(_QWORD *)&v39 = *(_QWORD *)((char *)v3 + v20[11]);
    v42 = 7;
    v26 = sub_100363560();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v42, v5, &type metadata for ImageQualityMetricData, v26);
    *(_QWORD *)&v39 = *(_QWORD *)((char *)v3 + v20[12]);
    v42 = 8;
    sub_100004828(&qword_100638690);
    sub_1000A1F98(&qword_10063C460, &qword_100638690, (void (*)(void))sub_1003635A4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v39);
    v27 = (uint64_t *)((char *)v3 + v20[13]);
    v28 = *v27;
    v29 = v27[1];
    LOBYTE(v39) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v39, v5);
    v30 = (uint64_t)v3 + v20[14];
    LOBYTE(v39) = 10;
    v31 = type metadata accessor for LivenessDataV2(0);
    v32 = sub_100004790(&qword_10063C470, type metadata accessor for LivenessDataV2, (uint64_t)&unk_10052A0AC);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v30, &v39, v5, v31, v32);
    *(_QWORD *)&v39 = *(_QWORD *)((char *)v3 + v20[15]);
    v42 = 11;
    v33 = sub_100004828(&qword_10063C418);
    v34 = sub_1003635E8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v42, v5, v33, v34);
    v35 = (uint64_t *)((char *)v3 + v20[16]);
    v36 = *v35;
    v37 = v35[1];
    LOBYTE(v39) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v39, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100290C2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  unint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char v99;

  v80 = a2;
  v3 = sub_100004828(&qword_1006384E8);
  __chkstk_darwin(v3);
  v81 = (uint64_t *)((char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100004828(&qword_1006384F0);
  __chkstk_darwin(v5);
  v82 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100004828(&qword_10063C3C0);
  v85 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for IdentityProofingRequestV2(0);
  v14 = __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = UUID.init()(v14);
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *v16 = 0;
  v16[1] = 0xE000000000000000;
  v16[2] = v18;
  v16[3] = v20;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  v16[12] = 0;
  v16[13] = 0;
  v21 = (uint64_t)v16 + v13[9];
  v22 = type metadata accessor for TiberiusWrappedAssessment(0);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v93 = v21;
  v23(v21, 1, 1, v22);
  v94 = v13[10];
  *(_QWORD *)((char *)v16 + v94) = 0;
  v92 = v13[11];
  *(_QWORD *)((char *)v16 + v92) = 0;
  v95 = v13[12];
  *(_QWORD *)((char *)v16 + v95) = _swiftEmptyArrayStorage;
  v24 = (_QWORD *)((char *)v16 + v13[13]);
  *v24 = 0;
  v24[1] = 0;
  v91 = v24;
  v25 = (uint64_t)v16 + v13[14];
  v26 = type metadata accessor for LivenessDataV2(0);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v90 = v25;
  v27(v25, 1, 1, v26);
  v28 = v13[15];
  v88 = a1;
  v89 = v28;
  *(_QWORD *)((char *)v16 + v28) = 0;
  v29 = (_QWORD *)((char *)v16 + v13[16]);
  *v29 = 0;
  v29[1] = 0;
  v87 = v29;
  v31 = a1[3];
  v30 = a1[4];
  sub_10000806C(a1, v31);
  v32 = sub_1003631DC();
  v84 = v8;
  v33 = v86;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IdentityProofingRequestV2.CodingKeys, &type metadata for IdentityProofingRequestV2.CodingKeys, v32, v31, v30);
  if (v33)
  {
    v41 = v92;
    v40 = v93;
    v42 = v94;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v88);
    swift_bridgeObjectRelease(v16[1]);
    swift_bridgeObjectRelease(v16[3]);
    sub_10008EF5C(v16[4], v16[5], v16[6], v16[7], v16[8], v16[9]);
    swift_bridgeObjectRelease(v16[13]);
    sub_100008030(v40, &qword_1006384F0);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v42));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v41));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v95));
    swift_bridgeObjectRelease(v91[1]);
    sub_100008030(v90, &qword_1006384E8);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v89));
    return swift_bridgeObjectRelease(v87[1]);
  }
  else
  {
    v34 = v82;
    v99 = 0;
    v35 = sub_100363220();
    v36 = v83;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v96, &type metadata for RequestHeader, &v99, v83, &type metadata for RequestHeader, v35);
    swift_bridgeObjectRelease(v20);
    v37 = v97;
    *(_OWORD *)v16 = v96;
    *((_OWORD *)v16 + 1) = v37;
    v99 = 1;
    v38 = sub_100363264();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v96, &type metadata for AppleCredentials, &v99, v36, &type metadata for AppleCredentials, v38, v39);
    v43 = v97;
    *((_OWORD *)v16 + 2) = v96;
    *((_OWORD *)v16 + 3) = v43;
    *((_OWORD *)v16 + 4) = v98;
    LOBYTE(v96) = 2;
    v44 = KeyedDecodingContainer.decode(_:forKey:)(&v96, v36);
    v45 = v94;
    v16[10] = v44;
    v16[11] = v46;
    LOBYTE(v96) = 3;
    v16[12] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v96, v36);
    v16[13] = v47;
    v48 = sub_100004828(&qword_10063C3E0);
    v99 = 4;
    v49 = sub_1003632A8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v96, v48, &v99, v36, v48, v49);
    v16[14] = v96;
    LOBYTE(v96) = 5;
    v50 = sub_100004790(&qword_10063C3F0, type metadata accessor for TiberiusWrappedAssessment, (uint64_t)&unk_10052A124);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v34, v22, &v96, v36, v22, v50, v51);
    sub_100184E1C((uint64_t)v34, v93, &qword_1006384F0);
    v52 = sub_100004828(&qword_1006368D0);
    v99 = 6;
    v53 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v96, v52, &v99, v36, v52, v53, v54);
    v55 = v92;
    v56 = v96;
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v45));
    *(_QWORD *)((char *)v16 + v45) = v56;
    v99 = 7;
    v57 = sub_100363324();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v96, &type metadata for ImageQualityMetricData, &v99, v36, &type metadata for ImageQualityMetricData, v57, v58);
    v59 = v96;
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v55));
    *(_QWORD *)((char *)v16 + v55) = v59;
    v60 = sub_100004828(&qword_100638690);
    v99 = 8;
    v61 = sub_1000A1F98(&qword_10063C400, &qword_100638690, (void (*)(void))sub_100363368, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v96, v60, &v99, v36, v60, v61);
    v63 = v95;
    v62 = v96;
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v95));
    *(_QWORD *)((char *)v16 + v63) = v62;
    LOBYTE(v96) = 9;
    v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v96, v36);
    v66 = v65;
    v67 = v91;
    swift_bridgeObjectRelease(v91[1]);
    *v67 = v64;
    v67[1] = v66;
    LOBYTE(v96) = 10;
    v68 = sub_100004790(&qword_10063C410, type metadata accessor for LivenessDataV2, (uint64_t)&unk_10052A0D4);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v81, v26, &v96, v83, v26, v68, v69);
    sub_100184E1C((uint64_t)v81, v90, &qword_1006384E8);
    v70 = sub_100004828(&qword_10063C418);
    v99 = 11;
    v71 = sub_1003633AC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v96, v70, &v99, v83, v70, v71, v72);
    v73 = v96;
    v74 = v89;
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v89));
    *(_QWORD *)((char *)v16 + v74) = v73;
    LOBYTE(v96) = 12;
    v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v96, v83);
    v77 = v76;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v83);
    v78 = v87;
    swift_bridgeObjectRelease(v87[1]);
    *v78 = v75;
    v78[1] = v77;
    sub_100035DE8((uint64_t)v16, v80, type metadata accessor for IdentityProofingRequestV2);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v88);
    return sub_100035DAC((uint64_t)v16, type metadata accessor for IdentityProofingRequestV2);
  }
}

uint64_t sub_1002914B8()
{
  unsigned __int8 *v0;

  return sub_100290618(*v0);
}

uint64_t sub_1002914C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BAF14(a1, a2);
  *a3 = result;
  return result;
}

void sub_1002914E4(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_1002914F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003631DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100291518(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003631DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100291540@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100290C2C(a1, a2);
}

uint64_t sub_100291554(_QWORD *a1)
{
  return sub_10029079C(a1);
}

uint64_t sub_100291568(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];
  _OWORD v23[6];

  v3 = v1;
  v5 = sub_100004828(&qword_10063CC90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100368BE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingResponseV2.CodingKeys, &type metadata for IdentityProofingResponseV2.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 48);
  v23[2] = *(_OWORD *)(v3 + 32);
  v23[3] = v12;
  v13 = *(_OWORD *)(v3 + 80);
  v23[4] = *(_OWORD *)(v3 + 64);
  v23[5] = v13;
  v14 = *(_OWORD *)(v3 + 16);
  v23[0] = *(_OWORD *)v3;
  v23[1] = v14;
  v22[15] = 0;
  sub_1003684E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23);
  if (!v2)
  {
    v15 = *(_QWORD *)(v3 + 96);
    v16 = *(_QWORD *)(v3 + 104);
    LOBYTE(v23[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v23, v5);
    v17 = *(_QWORD *)(v3 + 112);
    v18 = *(unsigned __int8 *)(v3 + 120);
    LOBYTE(v23[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v23, v5);
    v19 = *(_QWORD *)(v3 + 128);
    v20 = *(_QWORD *)(v3 + 136);
    LOBYTE(v23[0]) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, v23, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002916F8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_100004828(&qword_10063CDE0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003690AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ActionRequest.CodingKeys, &type metadata for ActionRequest.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v25, v5);
  if (!v2)
  {
    v14 = type metadata accessor for ActionRequest(0);
    v15 = (char *)v3 + *(int *)(v14 + 20);
    v24 = 1;
    v16 = type metadata accessor for PendingActionContext(0);
    v17 = sub_100004790(&qword_10063CDE8, type metadata accessor for PendingActionContext, (uint64_t)&unk_10052A3B8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v24, v5, v16, v17);
    v18 = (uint64_t *)((char *)v3 + *(int *)(v14 + 24));
    v19 = *v18;
    v20 = v18[1];
    v23 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v23, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100291880@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  v33 = a2;
  v3 = sub_100004828((uint64_t *)&unk_100633958);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = sub_100004828(&qword_10063CDC8);
  v6 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ActionRequest(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = sub_1003690AC();
  v35 = v8;
  v15 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ActionRequest.CodingKeys, &type metadata for ActionRequest.CodingKeys, v14, v12, v13);
  if (v15)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v16 = v6;
  v32 = v11;
  v39 = 0;
  v17 = v34;
  v18 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v34);
  v19 = v32;
  *v32 = v18;
  v19[1] = v20;
  v21 = type metadata accessor for PendingActionContext(0);
  v38 = 1;
  v22 = sub_100004790(&qword_10063CDD8, type metadata accessor for PendingActionContext, (uint64_t)&unk_10052A3E0);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v5, v21, &v38, v17, v21, v22, v23);
  sub_1000A1F54((uint64_t)v5, (uint64_t)v32 + *(int *)(v9 + 20), (uint64_t *)&unk_100633958);
  v37 = 2;
  v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v37, v17);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v35, v17);
  v28 = (uint64_t)v32;
  v27 = v33;
  v29 = (uint64_t *)((char *)v32 + *(int *)(v9 + 24));
  *v29 = v24;
  v29[1] = v26;
  sub_100035DE8(v28, v27, type metadata accessor for ActionRequest);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return sub_100035DAC(v28, type metadata accessor for ActionRequest);
}

uint64_t sub_100291B50()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100291B8C + 4 * byte_100527237[*v0]))(0x65736E6F70736572, 0xEE00726564616548);
}

uint64_t sub_100291B8C()
{
  return 0x45656D69746E7572;
}

unint64_t sub_100291BAC()
{
  return 0xD000000000000016;
}

unint64_t sub_100291BCC()
{
  return 0xD000000000000011;
}

uint64_t sub_100291BE8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BB47C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100291C0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368BE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100291C34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368BE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100291C5C@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[9];

  sub_1002BB668(a1, v8);
  if (!v2)
  {
    v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100291CB4(_QWORD *a1)
{
  return sub_100291568(a1);
}

uint64_t sub_100291CC8()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x747865746E6F63;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x6E6F69746361;
}

uint64_t sub_100291D24@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BBB2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100291D48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003690AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100291D70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003690AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100291D98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100291880(a1, a2);
}

uint64_t sub_100291DAC(_QWORD *a1)
{
  return sub_1002916F8(a1);
}

uint64_t sub_100291DC0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1003C0D04(*a1, *a2);
}

Swift::Int sub_100291DCC()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEE0059525445525FLL;
  v3 = 0xD000000000000010;
  if (v1 == 1)
    v3 = 0x45444F4348545541;
  else
    v2 = 0x8000000100539200;
  if (v1)
    v4 = v3;
  else
    v4 = 0x45444F4348545541;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100291E6C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEE0059525445525FLL;
  v3 = 0xD000000000000010;
  if (*v1 == 1)
    v3 = 0x45444F4348545541;
  else
    v2 = 0x8000000100539200;
  if (*v1)
    v4 = v3;
  else
    v4 = 0x45444F4348545541;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100291EE8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEE0059525445525FLL;
  v4 = 0xD000000000000010;
  if (v2 == 1)
    v4 = 0x45444F4348545541;
  else
    v3 = 0x8000000100539200;
  if (v2)
    v5 = v4;
  else
    v5 = 0x45444F4348545541;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE800000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_100291F84@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100601BE0;
  result = sub_1002CB008(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100291FB8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xEE0059525445525FLL;
  v5 = 0x45444F4348545541;
  if (v2 != 1)
  {
    v5 = 0xD000000000000010;
    v4 = 0x8000000100539200;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x45444F4348545541;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100292028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100369E3C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100292084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100369E3C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002920D0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 == 1)
    v1 = 0x45444F4348545541;
  if (*v0)
    return v1;
  else
    return 0x45444F4348545541;
}

void sub_10029212C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_100292134(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100370134();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029215C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100370134();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100292184(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1002921BC + 4 * byte_10052723B[a1]))(0xD000000000000018, 0x800000010055ABF0);
}

uint64_t sub_1002921BC(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_1002923C0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  __int128 *v60;
  __int128 v61;
  __int128 v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v71;
  char v72;
  _BYTE v73[5920];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char v78[17];
  int *v79;

  v3 = v1;
  v5 = sub_100004828(&qword_10063CE60);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100369178();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PendingActionContext.CodingKeys, &type metadata for PendingActionContext.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v74) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v74, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v74) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v74, v5);
    v16 = v3[4];
    v17 = v3[5];
    LOBYTE(v74) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v74, v5);
    v18 = v3[6];
    v19 = v3[7];
    LOBYTE(v74) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v74, v5);
    v20 = v3[8];
    v21 = v3[9];
    LOBYTE(v74) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v74, v5);
    v22 = *((unsigned __int8 *)v3 + 80);
    LOBYTE(v74) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, &v74, v5);
    v23 = v3[11];
    v24 = v3[12];
    LOBYTE(v74) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v74, v5);
    *(_QWORD *)&v74 = v3[13];
    v73[0] = 7;
    v25 = sub_100004828(&qword_1006368D0);
    v26 = sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v74, v73, v5, v25, v26);
    v27 = *((_OWORD *)v3 + 8);
    v74 = *((_OWORD *)v3 + 7);
    v75 = v27;
    v28 = *((_OWORD *)v3 + 10);
    v76 = *((_OWORD *)v3 + 9);
    v77 = v28;
    v73[0] = 8;
    v29 = sub_1003693D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v74, v73, v5, &type metadata for DisplayMessageAction, v29);
    v30 = *((_OWORD *)v3 + 12);
    v74 = *((_OWORD *)v3 + 11);
    v75 = v30;
    v73[0] = 9;
    v31 = sub_10036941C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v74, v73, v5, &type metadata for DisplayMessageContext, v31);
    v32 = v3[26];
    v33 = v3[27];
    LOBYTE(v74) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, &v74, v5);
    v34 = v3[28];
    v35 = v3[29];
    LOBYTE(v74) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, &v74, v5);
    v36 = *((_OWORD *)v3 + 16);
    v74 = *((_OWORD *)v3 + 15);
    v75 = v36;
    v73[0] = 12;
    v37 = sub_100369460();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v74, v73, v5, &type metadata for DisplayNotificationContext, v37);
    v79 = (int *)type metadata accessor for PendingActionContext(0);
    v38 = (uint64_t)v3 + v79[17];
    LOBYTE(v74) = 13;
    v39 = type metadata accessor for WorkflowRecommendationResponse(0);
    v40 = sub_100004790(&qword_10063CE80, type metadata accessor for WorkflowRecommendationResponse, (uint64_t)&unk_1005259B8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v38, &v74, v5, v39, v40);
    LOBYTE(v74) = *((_BYTE *)v3 + v79[18]);
    v73[0] = 14;
    v41 = sub_1003694A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v74, v73, v5, &type metadata for ExecuteWorkflowType, v41);
    *(_QWORD *)&v74 = *(uint64_t *)((char *)v3 + v79[19]);
    v73[0] = 15;
    v42 = sub_1003694E8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v74, v73, v5, &type metadata for IdentityProvisioningContext, v42);
    v43 = (uint64_t *)((char *)v3 + v79[20]);
    v44 = *v43;
    v45 = *((unsigned __int8 *)v43 + 8);
    LOBYTE(v74) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v44, v45, &v74, v5);
    v46 = (uint64_t *)((char *)v3 + v79[21]);
    v47 = *v46;
    v48 = *((unsigned __int8 *)v46 + 8);
    LOBYTE(v74) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v47, v48, &v74, v5);
    v49 = *((unsigned __int8 *)v3 + v79[22]);
    LOBYTE(v74) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v49, &v74, v5);
    v50 = (uint64_t *)((char *)v3 + v79[23]);
    v51 = *v50;
    v52 = *((unsigned __int8 *)v50 + 8);
    LOBYTE(v74) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v51, v52, &v74, v5);
    v53 = (uint64_t *)((char *)v3 + v79[24]);
    v54 = *v53;
    v55 = *((unsigned __int8 *)v53 + 8);
    LOBYTE(v74) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v54, v55, &v74, v5);
    v56 = (__int128 *)((char *)v3 + v79[25]);
    v57 = v56[1];
    v74 = *v56;
    v75 = v57;
    v58 = v56[3];
    v76 = v56[2];
    v77 = v58;
    v73[0] = 21;
    v59 = sub_10036952C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v74, v73, v5, &type metadata for PendingActionLivenessVersions, v59);
    v60 = (__int128 *)((char *)v3 + v79[26]);
    v61 = v60[1];
    v74 = *v60;
    v75 = v61;
    v62 = v60[3];
    v76 = v60[2];
    v77 = v62;
    v73[0] = 22;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v74, v73, v5, &type metadata for PendingActionLivenessVersions, v59);
    v63 = (uint64_t *)((char *)v3 + v79[27]);
    v64 = *v63;
    v65 = v63[1];
    LOBYTE(v74) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v64, v65, &v74, v5);
    v66 = (uint64_t)v3 + v79[28];
    v78[0] = 24;
    v67 = sub_100004828(&qword_100633968);
    v68 = sub_100099FFC(&qword_10063CD30, &qword_100633968, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v66, v78, v5, v67, v68);
    sub_1000A1F54((uint64_t)v3 + v79[29], (uint64_t)&v74, &qword_1006322D8);
    sub_1000A1F54((uint64_t)&v74, (uint64_t)v73, &qword_1006322D8);
    v72 = 25;
    v69 = sub_100369570();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v73, &v72, v5, &type metadata for IQModel, v69);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100292B98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t result;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int *v29;
  uint64_t *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  _OWORD *v43;
  unint64_t v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  __n128 v49;
  __int128 v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  __n128 v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  unint64_t v69;
  uint64_t v70;
  __n128 v71;
  unint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  char *v76;
  char v77;
  uint64_t v78;
  char *v79;
  char v80;
  char v81;
  uint64_t v82;
  char *v83;
  char v84;
  uint64_t v85;
  char *v86;
  char v87;
  unint64_t v88;
  uint64_t v89;
  __n128 v90;
  char *v91;
  __int128 v92;
  __n128 v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  unint64_t v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  int *v116;
  uint64_t v117;
  _BYTE v118[5919];
  char v119;
  __int128 v120;
  __int128 v121;
  __n128 v122;
  __int128 v123;
  char *v124;

  v111 = a2;
  v4 = sub_100004828(&qword_10063B3E0);
  __chkstk_darwin(v4);
  v6 = (_QWORD **)((char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100004828(&qword_100632BF8);
  __chkstk_darwin(v7);
  v9 = (_QWORD **)((char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v113 = sub_100004828(&qword_10063CE20);
  v10 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = (int *)type metadata accessor for PendingActionContext(0);
  __chkstk_darwin(v116);
  v124 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  v115 = a1;
  sub_10000806C(a1, v14);
  v16 = sub_100369178();
  v112 = v12;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PendingActionContext.CodingKeys, &type metadata for PendingActionContext.CodingKeys, v16, v14, v15);
  if (v2)
  {
    v117 = v2;
    LODWORD(v113) = 0;
    v20 = 0;
  }
  else
  {
    v114 = v9;
    v110 = v6;
    v17 = v10;
    LOBYTE(v120) = 0;
    v18 = v113;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v113);
    v32 = v124;
    *(_QWORD *)v124 = v19;
    *((_QWORD *)v32 + 1) = v33;
    LOBYTE(v120) = 1;
    *((_QWORD *)v32 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v18);
    *((_QWORD *)v32 + 3) = v34;
    LOBYTE(v120) = 2;
    *((_QWORD *)v32 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v18);
    *((_QWORD *)v32 + 5) = v35;
    LOBYTE(v120) = 3;
    *((_QWORD *)v32 + 6) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v18);
    *((_QWORD *)v32 + 7) = v36;
    LOBYTE(v120) = 4;
    *((_QWORD *)v32 + 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v18);
    *((_QWORD *)v32 + 9) = v37;
    LOBYTE(v120) = 5;
    v32[80] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v18);
    LOBYTE(v120) = 6;
    *((_QWORD *)v32 + 11) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v18);
    *((_QWORD *)v32 + 12) = v38;
    v39 = v18;
    v40 = sub_100004828(&qword_1006368D0);
    v118[0] = 7;
    v41 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v120, v40, v118, v39, v40, v41, v42);
    v43 = v124;
    *((_QWORD *)v124 + 13) = v120;
    v118[0] = 8;
    v44 = sub_100369240();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v120, &type metadata for DisplayMessageAction, v118, v113, &type metadata for DisplayMessageAction, v44, v45);
    v46 = v121;
    v43[7] = v120;
    v43[8] = v46;
    v47 = v123;
    v43[9] = v122;
    v43[10] = v47;
    v118[0] = 9;
    v48 = sub_100369284();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v120, &type metadata for DisplayMessageContext, v118, v113, &type metadata for DisplayMessageContext, v48, v49);
    v117 = 0;
    v50 = v121;
    v51 = v124;
    *((_OWORD *)v124 + 11) = v120;
    *((_OWORD *)v51 + 12) = v50;
    LOBYTE(v120) = 10;
    v52 = v117;
    v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v113);
    v117 = v52;
    if (v52)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v112, v113);
      LODWORD(v113) = 0;
      v20 = 991;
    }
    else
    {
      v55 = v124;
      *((_QWORD *)v124 + 26) = v53;
      *((_QWORD *)v55 + 27) = v54;
      LOBYTE(v120) = 11;
      v56 = v117;
      v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v113);
      v117 = v56;
      if (v56)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v112, v113);
        LODWORD(v113) = 0;
        v20 = 2015;
      }
      else
      {
        v59 = v124;
        *((_QWORD *)v124 + 28) = v57;
        *((_QWORD *)v59 + 29) = v58;
        v118[0] = 12;
        v60 = sub_1003692C8();
        v61 = v117;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v120, &type metadata for DisplayNotificationContext, v118, v113, &type metadata for DisplayNotificationContext, v60, v62);
        v117 = v61;
        if (v61)
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v112, v113);
          LODWORD(v113) = 0;
          v20 = 4063;
        }
        else
        {
          v63 = v121;
          v64 = v124;
          *((_OWORD *)v124 + 15) = v120;
          *((_OWORD *)v64 + 16) = v63;
          v65 = type metadata accessor for WorkflowRecommendationResponse(0);
          LOBYTE(v120) = 13;
          v66 = sub_100004790(&qword_100639C60, type metadata accessor for WorkflowRecommendationResponse, (uint64_t)&unk_1005259E0);
          v67 = v117;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v114, v65, &v120, v113, v65, v66, v68);
          v117 = v67;
          if (v67)
          {
            (*(void (**)(char *, uint64_t))(v10 + 8))(v112, v113);
            LODWORD(v113) = 0;
            v20 = 8159;
          }
          else
          {
            sub_1000A1F54((uint64_t)v114, (uint64_t)&v124[v116[17]], &qword_100632BF8);
            v118[0] = 14;
            v69 = sub_10036930C();
            v70 = v117;
            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v120, &type metadata for ExecuteWorkflowType, v118, v113, &type metadata for ExecuteWorkflowType, v69, v71);
            v117 = v70;
            if (v70
              || (v124[v116[18]] = v120,
                  v118[0] = 15,
                  v72 = sub_100369350(),
                  v73 = v117,
                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v120, &type metadata for IdentityProvisioningContext, v118, v113, &type metadata for IdentityProvisioningContext, v72, v74), (v117 = v73) != 0))
            {
              (*(void (**)(char *, uint64_t))(v10 + 8))(v112, v113);
              LODWORD(v113) = 0;
              v20 = 16351;
            }
            else
            {
              *(_QWORD *)&v124[v116[19]] = v120;
              LOBYTE(v120) = 16;
              v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v113);
              v117 = 0;
              v76 = &v124[v116[20]];
              *(_QWORD *)v76 = v75;
              v76[8] = v77 & 1;
              LOBYTE(v120) = 17;
              v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v113);
              v117 = 0;
              v79 = &v124[v116[21]];
              *(_QWORD *)v79 = v78;
              v79[8] = v80 & 1;
              LOBYTE(v120) = 18;
              v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v113);
              v117 = 0;
              v124[v116[22]] = v81;
              LOBYTE(v120) = 19;
              v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v113);
              v117 = 0;
              v83 = &v124[v116[23]];
              *(_QWORD *)v83 = v82;
              v83[8] = v84 & 1;
              LOBYTE(v120) = 20;
              v85 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v113);
              v117 = 0;
              v86 = &v124[v116[24]];
              *(_QWORD *)v86 = v85;
              v86[8] = v87 & 1;
              v118[0] = 21;
              v88 = sub_100369394();
              v89 = v117;
              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v120, &type metadata for PendingActionLivenessVersions, v118, v113, &type metadata for PendingActionLivenessVersions, v88, v90);
              v117 = v89;
              if (!v89)
              {
                v91 = &v124[v116[25]];
                v92 = v121;
                *(_OWORD *)v91 = v120;
                *((_OWORD *)v91 + 1) = v92;
                v93 = v122;
                v94 = v123;
                *((__n128 *)v91 + 2) = v122;
                *((_OWORD *)v91 + 3) = v94;
                v118[0] = 22;
                v95 = v117;
                KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v120, &type metadata for PendingActionLivenessVersions, v118, v113, &type metadata for PendingActionLivenessVersions, v88, v93);
                LODWORD(v114) = v95 == 0;
                v117 = v95;
                if (v95)
                {
                  (*(void (**)(char *, uint64_t))(v17 + 8))(v112, v113);
                  LODWORD(v111) = 0;
                  LODWORD(v112) = 0;
                }
                else
                {
                  v96 = &v124[v116[26]];
                  v97 = v121;
                  *(_OWORD *)v96 = v120;
                  *((_OWORD *)v96 + 1) = v97;
                  v98 = v123;
                  *((__n128 *)v96 + 2) = v122;
                  *((_OWORD *)v96 + 3) = v98;
                  LOBYTE(v120) = 23;
                  v99 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v120, v113);
                  v117 = 0;
                  v101 = (uint64_t *)&v124[v116[27]];
                  *v101 = v99;
                  v101[1] = v100;
                  v102 = sub_100004828(&qword_100633968);
                  LOBYTE(v120) = 24;
                  v103 = sub_100099FFC(&qword_10063C618, &qword_100633968, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
                  v104 = v117;
                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v110, v102, &v120, v113, v102, v103, v105);
                  v117 = v104;
                  if (v104)
                  {
                    (*(void (**)(char *, uint64_t))(v17 + 8))(v112, v113);
                    LODWORD(v112) = 0;
                    LODWORD(v111) = 1;
                  }
                  else
                  {
                    sub_1000A1F54((uint64_t)v110, (uint64_t)&v124[v116[28]], &qword_10063B3E0);
                    v119 = 25;
                    v106 = sub_1001D9A00();
                    v107 = v117;
                    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v120, &type metadata for IQModel, &v119, v113, &type metadata for IQModel, v106, v108);
                    v117 = v107;
                    if (!v107)
                    {
                      (*(void (**)(char *, uint64_t))(v17 + 8))(v112, v113);
                      sub_1000A1F54((uint64_t)&v120, (uint64_t)v118, &qword_1006322D8);
                      v109 = (uint64_t)v124;
                      sub_1000A1F54((uint64_t)v118, (uint64_t)&v124[v116[29]], &qword_1006322D8);
                      sub_100035DE8(v109, v111, type metadata accessor for PendingActionContext);
                      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v115);
                      return sub_100035DAC(v109, type metadata accessor for PendingActionContext);
                    }
                    (*(void (**)(char *, uint64_t))(v17 + 8))(v112, v113);
                    LODWORD(v111) = 1;
                    LODWORD(v112) = 1;
                  }
                }
                _s8coreidvd24DigitalPresentmentHelperVwxx_0(v115);
                v21 = v124;
                swift_bridgeObjectRelease(*((_QWORD *)v124 + 1));
                swift_bridgeObjectRelease(v21[3]);
                swift_bridgeObjectRelease(v21[5]);
                swift_bridgeObjectRelease(v21[7]);
                swift_bridgeObjectRelease(v21[9]);
                swift_bridgeObjectRelease(v21[12]);
                swift_bridgeObjectRelease(v21[13]);
                v28 = 1;
                LODWORD(v113) = 1;
                v27 = 1;
                v26 = 1;
                v25 = 1;
                v24 = 1;
                LOBYTE(v23) = 1;
LABEL_13:
                result = sub_1003691F0(v21[14], v21[15], v21[16], v21[17], v21[18], v21[19], v21[20], v21[21]);
                if ((v23 & 1) != 0)
                  goto LABEL_14;
                goto LABEL_32;
              }
              (*(void (**)(char *, uint64_t))(v17 + 8))(v112, v113);
              v20 = 49119;
              LODWORD(v113) = 1;
            }
          }
        }
      }
    }
  }
  v21 = v124;
  result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(v115);
  v23 = (v20 >> 9) & 1;
  v24 = (v20 >> 10) & 1;
  v25 = (v20 >> 11) & 1;
  v26 = (v20 >> 12) & 1;
  v27 = (v20 >> 13) & 1;
  if ((v20 & 1) != 0)
  {
    result = swift_bridgeObjectRelease(v21[1]);
    if ((v20 & 2) == 0)
    {
LABEL_6:
      if ((v20 & 4) == 0)
        goto LABEL_7;
      goto LABEL_26;
    }
  }
  else if ((v20 & 2) == 0)
  {
    goto LABEL_6;
  }
  result = swift_bridgeObjectRelease(v21[3]);
  if ((v20 & 4) == 0)
  {
LABEL_7:
    if ((v20 & 8) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  result = swift_bridgeObjectRelease(v21[5]);
  if ((v20 & 8) == 0)
  {
LABEL_8:
    if ((v20 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  result = swift_bridgeObjectRelease(v21[7]);
  if ((v20 & 0x10) == 0)
  {
LABEL_9:
    if ((v20 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = swift_bridgeObjectRelease(v21[9]);
  if ((v20 & 0x40) == 0)
  {
LABEL_10:
    if ((v20 & 0x80) == 0)
      goto LABEL_11;
LABEL_30:
    result = swift_bridgeObjectRelease(v21[13]);
    if ((v20 & 0x100) != 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_29:
  result = swift_bridgeObjectRelease(v21[12]);
  if ((v20 & 0x80) != 0)
    goto LABEL_30;
LABEL_11:
  if ((v20 & 0x100) != 0)
  {
LABEL_12:
    LODWORD(v112) = 0;
    LODWORD(v111) = 0;
    LODWORD(v114) = 0;
    v28 = 0;
    goto LABEL_13;
  }
LABEL_31:
  v28 = 0;
  LODWORD(v114) = 0;
  LODWORD(v111) = 0;
  LODWORD(v112) = 0;
  if ((v20 & 0x200) != 0)
  {
LABEL_14:
    result = sub_1003691BC(v21[22], v21[23], v21[24], v21[25]);
    if ((v24 & 1) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  if (!v24)
  {
LABEL_15:
    if (v25)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = swift_bridgeObjectRelease(v21[27]);
  if ((v25 & 1) != 0)
  {
LABEL_16:
    result = swift_bridgeObjectRelease(v21[29]);
    if ((v26 & 1) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  if (!v26)
  {
LABEL_17:
    v29 = v116;
    if (v27)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  result = sub_1003691BC(v21[30], v21[31], v21[32], v21[33]);
  v29 = v116;
  if ((v27 & 1) != 0)
  {
LABEL_18:
    result = sub_100008030((uint64_t)v21 + v29[17], &qword_100632BF8);
    if ((v113 & 1) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  if (!(_DWORD)v113)
  {
LABEL_19:
    if (v28)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  result = swift_bridgeObjectRelease(*(_QWORD *)((char *)v21 + v29[19]));
  if ((v28 & 1) != 0)
  {
LABEL_20:
    v30 = (_QWORD *)((char *)v21 + v29[25]);
    result = sub_1001849FC(*v30, v30[1], v30[2], v30[3], v30[4], v30[5], v30[6], v30[7]);
    if ((v114 & 1) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  if (!(_DWORD)v114)
  {
LABEL_21:
    if ((_DWORD)v111)
      goto LABEL_22;
LABEL_40:
    if (!(_DWORD)v112)
      return result;
    return sub_100008030((uint64_t)v21 + v29[28], &qword_10063B3E0);
  }
LABEL_39:
  v31 = (_QWORD *)((char *)v21 + v29[26]);
  result = sub_1001849FC(*v31, v31[1], v31[2], v31[3], v31[4], v31[5], v31[6], v31[7]);
  if ((v111 & 1) == 0)
    goto LABEL_40;
LABEL_22:
  result = swift_bridgeObjectRelease(*(_QWORD *)((char *)v21 + v29[27] + 8));
  if ((v112 & 1) == 0)
    return result;
  return sub_100008030((uint64_t)v21 + v29[28], &qword_10063B3E0);
}

uint64_t sub_1002938CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, __int128 a13, uint64_t a14, uint64_t a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  *(_BYTE *)(a9 + 80) = a12;
  *(_QWORD *)(a9 + 104) = a14;
  *(_OWORD *)(a9 + 88) = a13;
  sub_1000A1F54(a15, a9 + 112, &qword_10063B3D0);
  *(_OWORD *)(a9 + 176) = a16;
  *(_OWORD *)(a9 + 192) = a17;
  *(_OWORD *)(a9 + 208) = a18;
  *(_OWORD *)(a9 + 224) = a19;
  *(_OWORD *)(a9 + 240) = a20;
  *(_QWORD *)(a9 + 256) = a21;
  *(_QWORD *)(a9 + 264) = a22;
  v41 = (int *)type metadata accessor for PendingActionContext(0);
  sub_1000A1F54(a23, a9 + v41[17], &qword_100632BF8);
  *(_BYTE *)(a9 + v41[18]) = a24;
  *(_QWORD *)(a9 + v41[19]) = a25;
  v42 = a9 + v41[20];
  *(_QWORD *)v42 = a26;
  *(_BYTE *)(v42 + 8) = a27 & 1;
  v43 = a9 + v41[21];
  *(_QWORD *)v43 = a28;
  *(_BYTE *)(v43 + 8) = a29 & 1;
  *(_BYTE *)(a9 + v41[22]) = a30;
  v44 = a9 + v41[23];
  *(_QWORD *)v44 = a31;
  *(_BYTE *)(v44 + 8) = a32 & 1;
  v45 = a9 + v41[24];
  *(_QWORD *)v45 = a33;
  *(_BYTE *)(v45 + 8) = a34 & 1;
  sub_1000A1F54(a35, a9 + v41[25], &qword_10063B3D8);
  sub_1000A1F54(a36, a9 + v41[26], &qword_10063B3D8);
  v46 = (_QWORD *)(a9 + v41[27]);
  *v46 = a37;
  v46[1] = a38;
  sub_1000A1F54(a39, a9 + v41[28], &qword_10063B3E0);
  return sub_1000A1F54(a40, a9 + v41[29], &qword_1006322D8);
}

uint64_t sub_100293B20(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  _BYTE v16[32];
  _BYTE v17[32];
  _BYTE v18[32];

  v3 = v1;
  v5 = sub_100004828(&qword_10063CD98);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100368F68();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DisplayMessageAction.CodingKeys, &type metadata for DisplayMessageAction.CodingKeys, v11, v9, v10);
  sub_1000A1F54(v3, (uint64_t)v18, &qword_10063CDA0);
  sub_1000A1F54((uint64_t)v18, (uint64_t)v16, &qword_10063CDA0);
  v15 = 0;
  v12 = sub_100369024();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v15, v5, &type metadata for DisplayMessageActionButton, v12);
  if (!v2)
  {
    sub_1000A1F54(v3 + 32, (uint64_t)v17, &qword_10063CDA0);
    sub_1000A1F54((uint64_t)v17, (uint64_t)v16, &qword_10063CDA0);
    v15 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v15, v5, &type metadata for DisplayMessageActionButton, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100293CA4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1002BBC74(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100293CCC()
{
  unsigned __int8 *v0;

  return sub_100292184(*v0);
}

uint64_t sub_100293CD4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BC328(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100293CF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369178();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100293D20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369178();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100293D48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100292B98(a1, a2);
}

uint64_t sub_100293D5C(_QWORD *a1)
{
  return sub_1002923C0(a1);
}

uint64_t sub_100293D70()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100293DA4 + 4 * byte_100527255[*v0]))(0x6973726556636166, 0xEA00000000006E6FLL);
}

uint64_t sub_100293DA4()
{
  return 0x65736F5065636166;
}

uint64_t sub_100293DC8()
{
  return 0x566C6F6F74646170;
}

uint64_t sub_100293DEC()
{
  return 0x6973726556647270;
}

uint64_t sub_100293E00@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BCD98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100293E24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368F24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100293E4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368F24();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100293E74@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1002A3A10(a1, &qword_10063CD68, (uint64_t (*)(void))sub_100368F24, (uint64_t)&type metadata for PendingActionLivenessVersions.CodingKeys, a2);
}

uint64_t sub_100293EA0(_QWORD *a1)
{
  return sub_1002A3744(a1, &qword_10063CD78, (uint64_t (*)(void))sub_100368F24, (uint64_t)&type metadata for PendingActionLivenessVersions.CodingKeys);
}

uint64_t sub_100293ECC()
{
  _BYTE *v0;

  if (*v0)
    return 0x657079546469;
  else
    return 0x6574617473;
}

uint64_t sub_100293F00@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BCFB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100293F24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003690F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100293F4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003690F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100293F74@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002941F0(a1, &qword_10063CDF0, (uint64_t (*)(void))sub_1003690F0, (uint64_t)&type metadata for DisplayNotificationContext.CodingKeys, a2);
}

uint64_t sub_100293FA0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063CE00, (uint64_t (*)(void))sub_1003690F0, (uint64_t)&type metadata for DisplayNotificationContext.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t sub_100293FE8()
{
  _BYTE *v0;

  if (*v0)
    return 0x7261646E6F636573;
  else
    return 0x7972616D697270;
}

uint64_t sub_100294028@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BD090(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029404C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368F68();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100294074(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368F68();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10029409C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1002BD18C(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1002940DC(_QWORD *a1)
{
  return sub_100293B20(a1);
}

uint64_t sub_100294114()
{
  _BYTE *v0;

  if (*v0)
    return 7107189;
  else
    return 0x69546E6F74747562;
}

uint64_t sub_100294150@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BD3F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100294174(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369068();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029419C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369068();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002941C4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002941F0(a1, &qword_10063CDB0, (uint64_t (*)(void))sub_100369068, (uint64_t)&type metadata for DisplayMessageActionButton.CodingKeys, a2);
}

uint64_t sub_1002941F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_1002BD5D4(a1, a2, a3, a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
    a5[2] = v9;
    a5[3] = v10;
  }
  return result;
}

uint64_t sub_100294228(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063CDC0, (uint64_t (*)(void))sub_100369068, (uint64_t)&type metadata for DisplayMessageActionButton.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t sub_100294270()
{
  _BYTE *v0;

  if (*v0)
    return 0x656D614E707061;
  else
    return 0x6574617473;
}

uint64_t sub_1002942A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BD4EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002942CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369134();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002942F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369134();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029431C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002941F0(a1, &qword_10063CE08, (uint64_t (*)(void))sub_100369134, (uint64_t)&type metadata for DisplayMessageContext.CodingKeys, a2);
}

uint64_t sub_100294348(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063CE18, (uint64_t (*)(void))sub_100369134, (uint64_t)&type metadata for DisplayMessageContext.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t sub_100294390(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002943D0 + 4 * byte_100527259[a1]))(0x4874736575716572, 0xED00007265646165);
}

unint64_t sub_1002943D0()
{
  return 0xD000000000000010;
}

uint64_t sub_1002943EC()
{
  return 0x6F436E6F69676572;
}

uint64_t sub_10029440C()
{
  return 0x776F6C666B726F77;
}

uint64_t sub_100294428()
{
  return 0x736E6F69746361;
}

unint64_t sub_100294440()
{
  return 0xD000000000000011;
}

uint64_t sub_100294460(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[3];
  char v22;
  _BYTE v23[48];

  v3 = v1;
  v5 = sub_100004828(&qword_10063C668);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100367030();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingActionNotificationRequest.CodingKeys, &type metadata for IdentityProofingActionNotificationRequest.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v21[0] = *(_OWORD *)v3;
  v21[1] = v12;
  v22 = 0;
  sub_10036345C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21);
  if (!v2)
  {
    sub_1000A1F54(v3 + 32, (uint64_t)v23, &qword_100639C48);
    sub_1000A1F54((uint64_t)v23, (uint64_t)v21, &qword_100639C48);
    v22 = 1;
    v13 = sub_1003634A0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v22, v5, &type metadata for AppleCredentials, v13);
    v14 = *(_QWORD *)(v3 + 80);
    v15 = *(_QWORD *)(v3 + 88);
    LOBYTE(v21[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v21, v5);
    v16 = *(_QWORD *)(v3 + 96);
    v17 = *(_QWORD *)(v3 + 104);
    LOBYTE(v21[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v21, v5);
    *(_QWORD *)&v21[0] = *(_QWORD *)(v3 + 112);
    v22 = 4;
    sub_100004828(&qword_10063C650);
    sub_1000A1F98(&qword_10063C670, &qword_10063C650, (void (*)(void))sub_10036716C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21);
    v18 = *(_QWORD *)(v3 + 120);
    v19 = *(_QWORD *)(v3 + 128);
    LOBYTE(v21[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002946A8()
{
  unsigned __int8 *v0;

  return sub_100294390(*v0);
}

uint64_t sub_1002946B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BD790(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002946D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367030();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002946FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367030();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100294724@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[8];
  uint64_t v9;

  sub_1002BDA30(a1, (uint64_t)v8);
  if (!v2)
  {
    v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_QWORD *)(a2 + 128) = v9;
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10029478C(_QWORD *a1)
{
  return sub_100294460(a1);
}

uint64_t sub_1002947DC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10029481C + 4 * byte_10052725F[a1]))(0x4874736575716572, 0xED00007265646165);
}

unint64_t sub_10029481C()
{
  return 0xD000000000000010;
}

uint64_t sub_100294838()
{
  return 0x6F436E6F69676572;
}

uint64_t sub_100294858()
{
  return 0x776F6C666B726F77;
}

unint64_t sub_100294874()
{
  return 0xD000000000000011;
}

uint64_t sub_1002948AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v23[3];
  char v24;
  _BYTE v25[48];

  v3 = v1;
  v5 = sub_100004828(&qword_10063C498);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100363698();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingPendingActionsRequest.CodingKeys, &type metadata for IdentityProofingPendingActionsRequest.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v23[0] = *(_OWORD *)v3;
  v23[1] = v12;
  v24 = 0;
  sub_10036345C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23);
  if (!v2)
  {
    sub_1000A1F54(v3 + 32, (uint64_t)v25, &qword_100639C48);
    sub_1000A1F54((uint64_t)v25, (uint64_t)v23, &qword_100639C48);
    v24 = 1;
    v13 = sub_1003634A0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, &v24, v5, &type metadata for AppleCredentials, v13);
    v14 = *(_QWORD *)(v3 + 80);
    v15 = *(_QWORD *)(v3 + 88);
    LOBYTE(v23[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v23, v5);
    v16 = *(_QWORD *)(v3 + 96);
    v17 = *(_QWORD *)(v3 + 104);
    LOBYTE(v23[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v23, v5);
    v18 = *(_QWORD *)(v3 + 112);
    v19 = *(_QWORD *)(v3 + 120);
    LOBYTE(v23[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, v23, v5);
    v20 = *(_QWORD *)(v3 + 128);
    v21 = *(_QWORD *)(v3 + 136);
    LOBYTE(v23[0]) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v23, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100294AB0(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_100004828(&qword_10063CD58);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = sub_100368E58();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingPendingActionsContext.CodingKeys, &type metadata for IdentityProofingPendingActionsContext.CodingKeys, v14, v12, v13);
  v21 = a2;
  v20 = 0;
  v15 = sub_100368EE0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v20, v8, &type metadata for IdentityConfigurationSubType, v15);
  if (!v4)
  {
    v19 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a3, v18, &v19, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100294BEC()
{
  unsigned __int8 *v0;

  return sub_1002947DC(*v0);
}

uint64_t sub_100294BF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BE164(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100294C18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100363698();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100294C40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100363698();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100294C68@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[9];

  sub_1002BE3F8(a1, v8);
  if (!v2)
  {
    v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100294CC0(_QWORD *a1)
{
  return sub_1002948AC(a1);
}

uint64_t sub_100294D10()
{
  _BYTE *v0;

  if (*v0)
    return 0x656D614E707061;
  else
    return 0x657079546469;
}

uint64_t sub_100294D48@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BEB24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100294D6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368E58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100294D94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368E58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100294DBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1002BEC0C(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100294DE8(_QWORD *a1)
{
  uint64_t v1;

  return sub_100294AB0(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_100294E04(char *a1, char *a2)
{
  return sub_1003C02E0(*a1, *a2);
}

Swift::Int sub_100294E10()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x44495F4554415453;
  else
    v2 = 0x5F474E4956495244;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEF45534E4543494CLL;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100294E9C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x44495F4554415453;
  else
    v2 = 0x5F474E4956495244;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEF45534E4543494CLL;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100294F04(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x44495F4554415453;
  else
    v3 = 0x5F474E4956495244;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEF45534E4543494CLL;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100294F8C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100601C48;
  return sub_10005D5D8(v2, a1, a2);
}

void sub_100294F98(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x5F474E4956495244;
  if (*v1)
    v2 = 0x44495F4554415453;
  v3 = 0xEF45534E4543494CLL;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100294FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100368E14();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100295040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100368E14();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10029508C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char v22;
  _OWORD v23[6];
  _BYTE v24[24];

  v3 = v1;
  v5 = sub_100004828(&qword_10063CF50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10036976C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingPendingActionsResponse.CodingKeys, &type metadata for IdentityProofingPendingActionsResponse.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 48);
  v23[2] = *(_OWORD *)(v3 + 32);
  v23[3] = v12;
  v13 = *(_OWORD *)(v3 + 80);
  v23[4] = *(_OWORD *)(v3 + 64);
  v23[5] = v13;
  v14 = *(_OWORD *)(v3 + 16);
  v23[0] = *(_OWORD *)v3;
  v23[1] = v14;
  v22 = 0;
  sub_1003684E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23);
  if (!v2)
  {
    v15 = *(_QWORD *)(v3 + 96);
    v16 = *(_QWORD *)(v3 + 104);
    LOBYTE(v23[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v23, v5);
    v17 = *(_QWORD *)(v3 + 112);
    v18 = *(unsigned __int8 *)(v3 + 120);
    LOBYTE(v23[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v23, v5);
    *(_QWORD *)&v23[0] = *(_QWORD *)(v3 + 128);
    v22 = 3;
    sub_100004828(&qword_10063CF30);
    sub_100369940();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23);
    sub_1000A1F54(v3 + 136, (uint64_t)v24, &qword_10063CF68);
    sub_1000A1F54((uint64_t)v24, (uint64_t)v23, &qword_10063CF68);
    v22 = 4;
    v19 = sub_1003699BC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, &v22, v5, &type metadata for IdentityProofingPendingActionsContext, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002952A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002952DC + 4 * byte_100527265[*v0]))(0x65736E6F70736572, 0xEE00726564616548);
}

uint64_t sub_1002952DC()
{
  return 0x45656D69746E7572;
}

unint64_t sub_1002952FC()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_100295318()
{
  return 0x736E6F69746361;
}

uint64_t sub_100295330()
{
  return 0x747865746E6F63;
}

uint64_t sub_100295348@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BED78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029536C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036976C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100295394(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036976C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002953BC@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[10];

  sub_1002BEFC8(a1, v10);
  if (!v2)
  {
    v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    result = *(double *)v10;
    v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_100295414(_QWORD *a1)
{
  return sub_10029508C(a1);
}

uint64_t sub_100295464(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002954A4 + 4 * byte_10052726A[a1]))(0x4874736575716572, 0xED00007265646165);
}

unint64_t sub_1002954A4()
{
  return 0xD000000000000010;
}

uint64_t sub_1002954C0()
{
  return 0x72656469766F7270;
}

uint64_t sub_1002954DC()
{
  return 0x6F436E6F69676572;
}

uint64_t sub_1002954FC()
{
  return 0x6F69676552627573;
}

uint64_t sub_100295520()
{
  return 0x7373656E6576696CLL;
}

unint64_t sub_100295544()
{
  return 0xD000000000000011;
}

uint64_t sub_100295564(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v25[3];
  char v26;
  _BYTE v27[48];

  v3 = v1;
  v5 = sub_100004828(&qword_10063C590);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10036540C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingLivenessConfigRequest.CodingKeys, &type metadata for IdentityProofingLivenessConfigRequest.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v25[0] = *(_OWORD *)v3;
  v25[1] = v12;
  v26 = 0;
  sub_10036345C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v25);
  if (!v2)
  {
    sub_1000A1F54(v3 + 32, (uint64_t)v27, &qword_100639C48);
    sub_1000A1F54((uint64_t)v27, (uint64_t)v25, &qword_100639C48);
    v26 = 1;
    v13 = sub_1003634A0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v26, v5, &type metadata for AppleCredentials, v13);
    v14 = *(_QWORD *)(v3 + 80);
    v15 = *(_QWORD *)(v3 + 88);
    LOBYTE(v25[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v25, v5);
    v16 = *(_QWORD *)(v3 + 96);
    v17 = *(_QWORD *)(v3 + 104);
    LOBYTE(v25[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v25, v5);
    v18 = *(_QWORD *)(v3 + 112);
    v19 = *(_QWORD *)(v3 + 120);
    LOBYTE(v25[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, v25, v5);
    v20 = *(_QWORD *)(v3 + 128);
    v21 = *(_QWORD *)(v3 + 136);
    LOBYTE(v25[0]) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v25, v5);
    v22 = *(_QWORD *)(v3 + 144);
    v23 = *(_QWORD *)(v3 + 152);
    LOBYTE(v25[0]) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, v25, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100295790()
{
  unsigned __int8 *v0;

  return sub_100295464(*v0);
}

uint64_t sub_100295798@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002BF5EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002957BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036540C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002957E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036540C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10029580C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[10];

  sub_1002BF938(a1, v10);
  if (!v2)
  {
    v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    result = *(double *)v10;
    v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_100295864(_QWORD *a1)
{
  return sub_100295564(a1);
}

uint64_t sub_1002958B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];
  _OWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v3 = v1;
  v5 = sub_100004828(&qword_10063CD28);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100366F64();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityProofingLivenessConfigResponseV2.CodingKeys, &type metadata for IdentityProofingLivenessConfigResponseV2.CodingKeys, v11, v9, v10);
  v13 = *(_OWORD *)(v3 + 16);
  v12 = *(_OWORD *)(v3 + 32);
  v14 = *(_QWORD *)(v3 + 48);
  v15 = *(_QWORD *)(v3 + 56);
  v22[0] = *(_OWORD *)v3;
  v22[1] = v13;
  v22[2] = v12;
  v23 = v14;
  v24 = v15;
  v16 = *(_OWORD *)(v3 + 80);
  v25 = *(_OWORD *)(v3 + 64);
  v26 = v16;
  v21[15] = 0;
  sub_1003684E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22);
  if (!v2)
  {
    v17 = *(_QWORD *)(v3 + 96);
    v18 = *(_QWORD *)(v3 + 104);
    LOBYTE(v22[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v22, v5);
    v19 = v3 + *(int *)(type metadata accessor for IdentityProofingLivenessConfigResponseV2(0) + 24);
    LOBYTE(v22[0]) = 2;
    sub_100004828(&qword_100633968);
    sub_100099FFC(&qword_10063CD30, &qword_100633968, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100295A64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD v30[2];
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char v52;

  v36 = a2;
  v37 = sub_100004828(&qword_100633968);
  v3 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v5 = (_QWORD *)((char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = sub_100004828(&qword_10063C608);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IdentityProofingLivenessConfigResponseV2(0);
  __chkstk_darwin(v9);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  v12 = a1[3];
  v13 = a1[4];
  v40 = a1;
  sub_10000806C(a1, v12);
  v14 = sub_100366F64();
  v39 = v8;
  v15 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IdentityProofingLivenessConfigResponseV2.CodingKeys, &type metadata for IdentityProofingLivenessConfigResponseV2.CodingKeys, v14, v12, v13);
  if (v15)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v40);
    return swift_bridgeObjectRelease(0);
  }
  else
  {
    v41 = v5;
    v16 = v37;
    v52 = 0;
    v17 = sub_1001D98D0();
    v18 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, &type metadata for ResponseHeader, &v52, v38, &type metadata for ResponseHeader, v17);
    v20 = v44;
    v19 = v45;
    v22 = v46;
    v21 = v47;
    v24 = v48;
    v23 = v49;
    v25 = v51;
    *(_QWORD *)v11 = v42;
    v33 = v43;
    *(_OWORD *)(v11 + 8) = v43;
    v34 = v20;
    *((_QWORD *)v11 + 3) = v20;
    *((_QWORD *)v11 + 4) = v19;
    v32 = v22;
    *((_QWORD *)v11 + 5) = v22;
    *((_QWORD *)v11 + 6) = v21;
    v30[1] = v24;
    *((_QWORD *)v11 + 7) = v24;
    *((_QWORD *)v11 + 8) = v23;
    v31 = v50;
    *(_OWORD *)(v11 + 72) = v50;
    v35 = v25;
    *((_QWORD *)v11 + 11) = v25;
    LOBYTE(v42) = 1;
    *((_QWORD *)v11 + 12) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v18);
    *((_QWORD *)v11 + 13) = v26;
    LOBYTE(v42) = 2;
    v27 = sub_100099FFC(&qword_10063C618, &qword_100633968, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v28 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v41, v16, &v42, v18, v16, v27);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v28, v18);
    (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 32))(&v11[*(int *)(v9 + 24)], v41, v16);
    sub_100035DE8((uint64_t)v11, v36, type metadata accessor for IdentityProofingLivenessConfigResponseV2);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v40);
    return sub_100035DAC((uint64_t)v11, type metadata accessor for IdentityProofingLivenessConfigResponseV2);
  }
}

uint64_t sub_100295DB4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  char v19;
  _BYTE v20[24];
  _BYTE v21[24];

  v3 = v1;
  v5 = sub_100004828(&qword_10063CEC8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003695B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ActionResult.CodingKeys, &type metadata for ActionResult.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v20[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v20, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v20[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v20, v5);
    sub_1000A1F54((uint64_t)(v3 + 4), (uint64_t)v21, &qword_10063CED0);
    sub_1000A1F54((uint64_t)v21, (uint64_t)v20, &qword_10063CED0);
    v19 = 2;
    v16 = sub_1003696A0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for ActionContext, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100295F28(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;

  v18 = a4;
  v8 = sub_100004828(&qword_10063CEF0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = sub_1003696E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ActionContext.CodingKeys, &type metadata for ActionContext.CodingKeys, v14, v12, v13);
  v21 = a2;
  v20 = 0;
  v15 = sub_100004828(&qword_1006368D0);
  v16 = sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v20, v8, v15, v16);
  if (!v4)
  {
    v19 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a3, v18, &v19, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100296090(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1002960C8 + 4 * byte_100527271[a1]))(0xD000000000000017, 0x80000001005394F0);
}

uint64_t sub_1002960C8()
{
  return 0x776F6C666B726F77;
}

uint64_t sub_1002960E8(uint64_t a1)
{
  return a1 + 7;
}

uint64_t sub_100296100()
{
  return 0x6144434150736469;
}

uint64_t sub_10029612C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  _OWORD v28[2];

  v3 = v1;
  v5 = sub_100004828(&qword_10063C9A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003680A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharingRegistrationInfo.CodingKeys, &type metadata for SharingRegistrationInfo.CodingKeys, v11, v9, v10);
  LOBYTE(v28[0]) = 0;
  type metadata accessor for HardwareAttestationType(0);
  sub_100004790(&qword_100632528, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3);
  if (!v2)
  {
    v12 = (int *)type metadata accessor for SharingRegistrationInfo(0);
    v13 = (uint64_t *)(v3 + v12[5]);
    v14 = *v13;
    v15 = v13[1];
    LOBYTE(v28[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v28, v5);
    v16 = (uint64_t *)(v3 + v12[6]);
    v17 = *v16;
    v18 = v16[1];
    LOBYTE(v28[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v28, v5);
    v19 = (_OWORD *)(v3 + v12[7]);
    v20 = v19[1];
    v28[0] = *v19;
    v28[1] = v20;
    v27 = 3;
    v21 = sub_10036787C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IDSPACData, v21);
    v22 = v3 + v12[8];
    LOBYTE(v28[0]) = 4;
    v23 = sub_100004828(&qword_1006365D8);
    v24 = sub_100099FFC(&qword_10063C810, &qword_1006365D8, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, v28, v5, v23, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100296360@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __n128 v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  _OWORD v45[2];
  char v46;

  v38 = a2;
  v3 = sub_100004828(&qword_1006365D0);
  __chkstk_darwin(v3);
  v39 = (uint64_t *)((char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = type metadata accessor for HardwareAttestationType(0);
  v5 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v43 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = sub_100004828(&qword_10063C9B0);
  v7 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for SharingRegistrationInfo(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v14);
  v15 = sub_1003680A4();
  v42 = v9;
  v16 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SharingRegistrationInfo.CodingKeys, &type metadata for SharingRegistrationInfo.CodingKeys, v15, v14, v13);
  if (v16)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v44 = a1;
  v17 = (uint64_t)v12;
  LOBYTE(v45[0]) = 0;
  v18 = sub_100004790(&qword_1006324A0, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
  v19 = v40;
  v20 = v41;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v40, v45, v41, v40, v18);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v5 + 32))(v17, v43, v19);
  LOBYTE(v45[0]) = 1;
  v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v45, v20);
  v22 = (uint64_t *)(v17 + v10[5]);
  *v22 = v21;
  v22[1] = v23;
  LOBYTE(v45[0]) = 2;
  v43 = 0;
  v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v45, v20);
  v25 = (uint64_t *)(v17 + v10[6]);
  *v25 = v24;
  v25[1] = v26;
  v46 = 3;
  v27 = sub_1003677BC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v45, &type metadata for IDSPACData, &v46, v20, &type metadata for IDSPACData, v27, v28);
  v29 = (_OWORD *)(v17 + v10[7]);
  v30 = v45[1];
  *v29 = v45[0];
  v29[1] = v30;
  v31 = sub_100004828(&qword_1006365D8);
  LOBYTE(v45[0]) = 4;
  v32 = sub_100099FFC(&qword_10063C7E0, &qword_1006365D8, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  v33 = v20;
  v34 = v39;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v39, v31, v45, v33, v31, v32, v35);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v42, v41);
  sub_1000A1F54((uint64_t)v34, v17 + v10[8], &qword_1006365D0);
  sub_100035DE8(v17, v38, type metadata accessor for SharingRegistrationInfo);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v44);
  return sub_100035DAC(v17, type metadata accessor for SharingRegistrationInfo);
}

uint64_t sub_1002967A8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x45656D69746E7572;
  if (*v0 != 1)
    v1 = 0x7373656E6576696CLL;
  if (*v0)
    return v1;
  else
    return 0x65736E6F70736572;
}

uint64_t sub_100296824@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C00EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100296848(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100366F64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100296870(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100366F64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100296898@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100295A64(a1, a2);
}

uint64_t sub_1002968AC(_QWORD *a1)
{
  return sub_1002958B4(a1);
}

uint64_t sub_1002968C0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x737574617473;
  if (*v0 != 1)
    v1 = 0x747865746E6F63;
  if (*v0)
    return v1;
  else
    return 0x6E6F69746361;
}

uint64_t sub_100296914@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C02A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100296938(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003695B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100296960(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003695B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100296988@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1002C03E4(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1002969D4(_QWORD *a1)
{
  return sub_100295DB4(a1);
}

uint64_t sub_100296A14()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000018;
  else
    return 0x644964726F636572;
}

uint64_t sub_100296A58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C0668(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100296A7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003696E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100296AA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003696E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100296ACC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1002C0760(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100296AF8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100295F28(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100296B14()
{
  unsigned __int8 *v0;

  return sub_100296090(*v0);
}

uint64_t sub_100296B1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C0944(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100296B40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003680A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100296B68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003680A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100296B90(_QWORD *a1)
{
  return sub_10029612C(a1);
}

uint64_t sub_100296BA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100296360(a1, a2);
}

uint64_t sub_100296BB8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100296BF8 + 4 * byte_100527276[a1]))(0x4874736575716572, 0xED00007265646165);
}

unint64_t sub_100296BF8()
{
  return 0xD000000000000010;
}

uint64_t sub_100296C54()
{
  return 0x6465696669726576;
}

uint64_t sub_100296C94()
{
  return 0x6144434150736469;
}

uint64_t sub_100296CC0()
{
  return 0x6563697665447369;
}

uint64_t sub_100296CE4()
{
  return 0x6144434150736469;
}

uint64_t sub_100296D08(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;

  v3 = v1;
  v5 = sub_100004828(&qword_10063C7E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003676FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharingRegistrationRequest.CodingKeys, &type metadata for SharingRegistrationRequest.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v36 = *v3;
  *(_QWORD *)&v37 = v12;
  *((_QWORD *)&v37 + 1) = v13;
  v39 = 0;
  sub_10036345C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v3[3];
  v36 = v3[2];
  v37 = v14;
  v38 = v3[4];
  v39 = 1;
  v15 = sub_1003634A0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v36, &v39, v5, &type metadata for AppleCredentials, v15);
  v16 = (int *)type metadata accessor for SharingRegistrationRequest(0);
  v17 = (uint64_t)v3 + v16[6];
  LOBYTE(v36) = 2;
  type metadata accessor for HardwareAttestationType(0);
  sub_100004790(&qword_100632528, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v17);
  v18 = (uint64_t *)((char *)v3 + v16[7]);
  v19 = *v18;
  v20 = v18[1];
  LOBYTE(v36) = 3;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v36, v5);
  v21 = (uint64_t *)((char *)v3 + v16[8]);
  v22 = *v21;
  v23 = v21[1];
  LOBYTE(v36) = 4;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v36, v5);
  *(_QWORD *)&v36 = *(_QWORD *)((char *)v3 + v16[9]);
  v39 = 5;
  sub_100004828(&qword_10063C7B0);
  sub_100367800();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36);
  *(_QWORD *)&v36 = *(_QWORD *)((char *)v3 + v16[10]);
  v39 = 6;
  sub_100004828(&qword_10063C700);
  sub_100367538();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36);
  v24 = (__int128 *)((char *)v3 + v16[11]);
  v25 = v24[1];
  v36 = *v24;
  v37 = v25;
  v39 = 7;
  v26 = sub_10036787C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v36, &v39, v5, &type metadata for IDSPACData, v26);
  *(_QWORD *)&v36 = *(_QWORD *)((char *)v3 + v16[12]);
  v39 = 8;
  v27 = sub_100004828(&qword_10063C7D0);
  v28 = sub_1000A1F98(&qword_10063C808, &qword_10063C7D0, (void (*)(void))sub_10036787C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v36, &v39, v5, v27, v28);
  v35 = v6;
  v29 = (uint64_t)v3 + v16[13];
  LOBYTE(v36) = 9;
  v30 = sub_100004828(&qword_1006365D8);
  v31 = sub_100099FFC(&qword_10063C810, &qword_1006365D8, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, &v36, v5, v30, v31);
  v32 = *((unsigned __int8 *)v3 + v16[14]);
  LOBYTE(v36) = 10;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, &v36, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v8, v5);
}

uint64_t sub_100297120@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  __int128 v39;
  unint64_t v40;
  __n128 v41;
  int *v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __n128 v57;
  __int128 v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  int *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char v85;

  v66 = a2;
  v3 = sub_100004828(&qword_1006365D0);
  __chkstk_darwin(v3);
  v67 = (uint64_t *)((char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for HardwareAttestationType(0);
  v71 = *(_QWORD *)(v5 - 8);
  v72 = v5;
  __chkstk_darwin(v5);
  v68 = (uint64_t *)((char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100004828(&qword_10063C7A0);
  v69 = *(_QWORD *)(v7 - 8);
  v70 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for SharingRegistrationRequest(0);
  v15 = __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = UUID.init()(v15);
  v19 = UUID.uuidString.getter(v18);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *v17 = 0;
  v17[1] = 0xE000000000000000;
  v17[2] = v19;
  v17[3] = v21;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  v22 = (_QWORD *)((char *)v17 + v14[7]);
  *v22 = 0;
  v22[1] = 0;
  v77 = v22;
  v23 = (_QWORD *)((char *)v17 + v14[8]);
  *v23 = 0;
  v23[1] = 0;
  v79 = v23;
  v24 = (_QWORD *)((char *)v17 + v14[11]);
  *(_OWORD *)v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  v81 = v24;
  v80 = v14[12];
  *(_QWORD *)((char *)v17 + v80) = 0;
  v25 = (uint64_t)v17 + v14[13];
  v26 = sub_100004828(&qword_1006365D8);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v76 = v25;
  v27(v25, 1, 1, v26);
  v78 = v14;
  v28 = v14[14];
  *((_BYTE *)v17 + v28) = 2;
  v29 = a1[3];
  v30 = a1[4];
  v75 = a1;
  sub_10000806C(a1, v29);
  v31 = sub_1003676FC();
  v73 = v9;
  v32 = v74;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SharingRegistrationRequest.CodingKeys, &type metadata for SharingRegistrationRequest.CodingKeys, v31, v29, v30);
  if (v32)
  {
    v33 = v77;
    v34 = v79;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v75);
    swift_bridgeObjectRelease(v17[1]);
    swift_bridgeObjectRelease(v17[3]);
    sub_10008EF5C(v17[4], v17[5], v17[6], v17[7], v17[8], v17[9]);
    swift_bridgeObjectRelease(v33[1]);
    swift_bridgeObjectRelease(v34[1]);
    sub_100182A30(*v81, v81[1], v81[2], v81[3]);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v17 + v80));
    return sub_100008030(v76, &qword_1006365D0);
  }
  else
  {
    v74 = v28;
    v85 = 0;
    v35 = sub_100363220();
    v36 = v70;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v82, &type metadata for RequestHeader, &v85, v70, &type metadata for RequestHeader, v35);
    v37 = v79;
    swift_bridgeObjectRelease(v21);
    v39 = v83;
    *(_OWORD *)v17 = v82;
    *((_OWORD *)v17 + 1) = v39;
    v85 = 1;
    v40 = sub_100363264();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v82, &type metadata for AppleCredentials, &v85, v36, &type metadata for AppleCredentials, v40, v41);
    v42 = v78;
    v43 = v83;
    *((_OWORD *)v17 + 2) = v82;
    *((_OWORD *)v17 + 3) = v43;
    *((_OWORD *)v17 + 4) = v84;
    LOBYTE(v82) = 2;
    v44 = sub_100004790(&qword_1006324A0, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
    v45 = v68;
    v46 = v36;
    v47 = v72;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v68, v72, &v82, v46, v72, v44);
    v48 = v77;
    (*(void (**)(char *, _QWORD *, uint64_t))(v71 + 32))((char *)v17 + v42[6], v45, v47);
    LOBYTE(v82) = 3;
    v49 = v70;
    *v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v82, v70);
    v48[1] = v50;
    LOBYTE(v82) = 4;
    *v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v82, v49);
    v37[1] = v51;
    v52 = sub_100004828(&qword_10063C7B0);
    v85 = 5;
    v53 = sub_100367740();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v82, v52, &v85, v49, v52, v53);
    *(_QWORD *)((char *)v17 + v42[9]) = v82;
    v54 = sub_100004828(&qword_10063C700);
    v85 = 6;
    v55 = sub_1003673C4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v82, v54, &v85, v49, v54, v55);
    *(_QWORD *)((char *)v17 + v42[10]) = v82;
    v85 = 7;
    v56 = sub_1003677BC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v82, &type metadata for IDSPACData, &v85, v49, &type metadata for IDSPACData, v56, v57);
    v58 = v83;
    v59 = v81;
    *(_OWORD *)v81 = v82;
    *((_OWORD *)v59 + 1) = v58;
    v60 = v49;
    v61 = sub_100004828(&qword_10063C7D0);
    v85 = 8;
    v62 = sub_1000A1F98(&qword_10063C7D8, &qword_10063C7D0, (void (*)(void))sub_1003677BC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v82, v61, &v85, v60, v61, v62, v63);
    *(_QWORD *)((char *)v17 + v80) = v82;
    LOBYTE(v82) = 9;
    v64 = sub_100099FFC(&qword_10063C7E0, &qword_1006365D8, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v67, v26, &v82, v70, v26, v64, v65);
    sub_100184E1C((uint64_t)v67, v76, &qword_1006365D0);
    LOBYTE(v82) = 10;
    LOBYTE(v60) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v82, v70);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v73, v70);
    *((_BYTE *)v17 + v74) = v60;
    sub_100035DE8((uint64_t)v17, v66, type metadata accessor for SharingRegistrationRequest);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v75);
    return sub_100035DAC((uint64_t)v17, type metadata accessor for SharingRegistrationRequest);
  }
}

uint64_t sub_100297924()
{
  unsigned __int8 *v0;

  return sub_100296BB8(*v0);
}

uint64_t sub_10029792C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C0B64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100297950(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003676FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100297978(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003676FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002979A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100297120(a1, a2);
}

uint64_t sub_1002979B4(_QWORD *a1)
{
  return sub_100296D08(a1);
}

uint64_t sub_1002979C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[16];
  _OWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

  v3 = v1;
  v5 = sub_100004828(&qword_10063CC70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100368BA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharingRegistrationResponse.CodingKeys, &type metadata for SharingRegistrationResponse.CodingKeys, v11, v9, v10);
  v13 = *(_OWORD *)(v3 + 16);
  v12 = *(_OWORD *)(v3 + 32);
  v14 = *(_QWORD *)(v3 + 48);
  v15 = *(_QWORD *)(v3 + 56);
  v24[0] = *(_OWORD *)v3;
  v24[1] = v13;
  v24[2] = v12;
  v25 = v14;
  v26 = v15;
  v16 = *(_OWORD *)(v3 + 80);
  v27 = *(_OWORD *)(v3 + 64);
  v28 = v16;
  v23[15] = 0;
  sub_1003684E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v24);
  if (!v2)
  {
    v17 = *(_QWORD *)(v3 + 96);
    v18 = *(_QWORD *)(v3 + 104);
    LOBYTE(v24[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v24, v5);
    v19 = v3 + *(int *)(type metadata accessor for SharingRegistrationResponse(0) + 24);
    LOBYTE(v24[0]) = 2;
    v20 = type metadata accessor for SharingCredentials(0);
    v21 = sub_100004790(&qword_10063CC78, type metadata accessor for SharingCredentials, (uint64_t)&unk_10052B12C);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, v24, v5, v20, v21);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100297B74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  char v43;

  v33 = a2;
  v3 = sub_100004828((uint64_t *)&unk_100636548);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = sub_100004828(&qword_10063CC58);
  v6 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SharingRegistrationResponse(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v12 + 12) = 0;
  *((_QWORD *)v12 + 13) = 0;
  v13 = (uint64_t)&v12[*(int *)(v10 + 24)];
  v14 = type metadata accessor for SharingCredentials(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v36 = v13;
  v15(v13, 1, 1, v14);
  v17 = a1[3];
  v16 = a1[4];
  v35 = a1;
  sub_10000806C(a1, v17);
  v18 = sub_100368BA4();
  v19 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SharingRegistrationResponse.CodingKeys, &type metadata for SharingRegistrationResponse.CodingKeys, v18, v17, v16);
  if (v19)
  {
    v22 = v36;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v35);
    swift_bridgeObjectRelease(*((_QWORD *)v12 + 13));
    return sub_100008030(v22, (uint64_t *)&unk_100636548);
  }
  else
  {
    v43 = 0;
    v20 = sub_1001D98D0();
    v21 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v38, &type metadata for ResponseHeader, &v43, v34, &type metadata for ResponseHeader, v20);
    v24 = v38[1];
    v23 = v38[2];
    v25 = v39;
    v26 = v40;
    *(_OWORD *)v12 = v38[0];
    *((_OWORD *)v12 + 1) = v24;
    *((_OWORD *)v12 + 2) = v23;
    *((_QWORD *)v12 + 6) = v25;
    *((_QWORD *)v12 + 7) = v26;
    v27 = v42;
    *((_OWORD *)v12 + 4) = v41;
    *((_OWORD *)v12 + 5) = v27;
    LOBYTE(v38[0]) = 1;
    *((_QWORD *)v12 + 12) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v38, v21);
    *((_QWORD *)v12 + 13) = v28;
    LOBYTE(v38[0]) = 2;
    v29 = sub_100004790(&qword_10063CC68, type metadata accessor for SharingCredentials, (uint64_t)&unk_10052B154);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v5, v14, v38, v21, v14, v29, v30);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v21);
    sub_100184E1C((uint64_t)v5, v36, (uint64_t *)&unk_100636548);
    sub_100035DE8((uint64_t)v12, v33, type metadata accessor for SharingRegistrationResponse);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v35);
    return sub_100035DAC((uint64_t)v12, type metadata accessor for SharingRegistrationResponse);
  }
}

uint64_t sub_100297EAC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x45656D69746E7572;
  if (*v0 != 1)
    v1 = 0xD000000000000012;
  if (*v0)
    return v1;
  else
    return 0x65736E6F70736572;
}

uint64_t sub_100297F20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C1034(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100297F44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368BA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100297F6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368BA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100297F94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100297B74(a1, a2);
}

uint64_t sub_100297FA8(_QWORD *a1)
{
  return sub_1002979C8(a1);
}

uint64_t sub_100297FBC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD v18[3];
  char v19;
  _BYTE v20[48];

  v3 = v1;
  v5 = sub_100004828(&qword_10063C5A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100365450();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NonceRequest.CodingKeys, &type metadata for NonceRequest.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v18[0] = *(_OWORD *)v3;
  v18[1] = v12;
  v19 = 0;
  sub_10036345C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v18);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 32);
    LOBYTE(v18[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v18, v5);
    v14 = *(_QWORD *)(v3 + 40);
    v15 = *(_QWORD *)(v3 + 48);
    LOBYTE(v18[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v18, v5);
    sub_1000A1F54(v3 + 56, (uint64_t)v20, &qword_100639C48);
    sub_1000A1F54((uint64_t)v20, (uint64_t)v18, &qword_100639C48);
    v19 = 3;
    v16 = sub_1003634A0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v19, v5, &type metadata for AppleCredentials, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100298170()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002981AC + 4 * byte_100527281[*v0]))(0x4874736575716572, 0xED00007265646165);
}

uint64_t sub_1002981AC()
{
  return 0x756F4365636E6F6ELL;
}

uint64_t sub_1002981C8()
{
  return 0x72656469766F7270;
}

unint64_t sub_1002981E4()
{
  return 0xD000000000000010;
}

uint64_t sub_100298200@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C11C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100298224(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365450();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029824C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365450();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100298274@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;

  sub_1002C13B0(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_QWORD *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1002982D0(_QWORD *a1)
{
  return sub_100297FBC(a1);
}

uint64_t sub_100298318()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x45656D69746E7572;
  if (*v0 != 1)
    v1 = 0x7365636E6F6ELL;
  if (*v0)
    return v1;
  else
    return 0x65736E6F70736572;
}

uint64_t sub_100298384@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C1828(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002983A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100366FA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002983D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100366FA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002983F8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002ACDE8(a1, &qword_10063C620, (uint64_t (*)(void))sub_100366FA8, (uint64_t)&type metadata for NonceResponse.CodingKeys, a2);
}

uint64_t sub_100298424(_QWORD *a1)
{
  return sub_1002ACB04(a1, &qword_10063CC20, (uint64_t (*)(void))sub_100366FA8, (uint64_t)&type metadata for NonceResponse.CodingKeys);
}

uint64_t sub_10029848C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002984CC + 4 * byte_100527285[a1]))(0x4874736575716572, 0xED00007265646165);
}

unint64_t sub_1002984CC()
{
  return 0xD000000000000019;
}

uint64_t sub_1002984EC()
{
  return 0x6465696669726576;
}

unint64_t sub_100298510()
{
  return 0xD000000000000011;
}

uint64_t sub_10029852C()
{
  return 0x61746144766469;
}

uint64_t sub_100298544()
{
  return 0x746163696C707061;
}

uint64_t sub_100298568(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v3 = v1;
  v5 = sub_100004828(&qword_10063C730);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100367304();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentitySharingRequest.CodingKeys, &type metadata for IdentitySharingRequest.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v24 = *v3;
  v25 = v12;
  v26 = v13;
  v27 = 0;
  sub_10036345C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for IdentitySharingRequest(0);
    v15 = (uint64_t)v3 + v14[5];
    LOBYTE(v24) = 1;
    sub_100004828(&qword_100636528);
    sub_100099FFC(&qword_10063C738, &qword_100636528, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15);
    *(_QWORD *)&v24 = *(_QWORD *)((char *)v3 + v14[6]);
    v27 = 2;
    sub_100004828(&qword_10063C6E8);
    sub_1003674BC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24);
    *(_QWORD *)&v24 = *(_QWORD *)((char *)v3 + v14[7]);
    v27 = 3;
    v16 = sub_100004828(&qword_10063C700);
    v17 = sub_100367538();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v24, &v27, v5, v16, v17);
    *(_QWORD *)&v24 = *(_QWORD *)((char *)v3 + v14[8]);
    v27 = 4;
    v18 = sub_100004828(&qword_10063C718);
    v19 = sub_1003675B4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v24, &v27, v5, v18, v19);
    v20 = (uint64_t *)((char *)v3 + v14[9]);
    v21 = *v20;
    v22 = v20[1];
    LOBYTE(v24) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v24, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029880C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  uint64_t v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  int *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;

  v53 = a2;
  v3 = sub_100004828(&qword_100636528);
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  __chkstk_darwin(v3);
  v55 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100004828(&qword_10063C6D0);
  v54 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for IdentitySharingRequest(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = UUID.init()(v12);
  v16 = UUID.uuidString.getter(v15);
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20 = a1;
  v19(v10, v7);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0xE000000000000000;
  *((_QWORD *)v14 + 2) = v16;
  *((_QWORD *)v14 + 3) = v18;
  v60 = v11[7];
  *(_QWORD *)&v14[v60] = 0;
  v21 = v11[8];
  *(_QWORD *)&v14[v21] = 0;
  v22 = &v14[v11[9]];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  v61 = v22;
  v62 = v11;
  v23 = v20[3];
  v24 = v20[4];
  sub_10000806C(v20, v23);
  v25 = sub_100367304();
  v57 = v6;
  v26 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IdentitySharingRequest.CodingKeys, &type metadata for IdentitySharingRequest.CodingKeys, v25, v23, v24);
  if (v26)
  {
    v34 = v21;
    v36 = v60;
    v35 = v61;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v20);
    swift_bridgeObjectRelease(*((_QWORD *)v14 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v14 + 3));
    swift_bridgeObjectRelease(*(_QWORD *)&v14[v36]);
    swift_bridgeObjectRelease(*(_QWORD *)&v14[v34]);
    return swift_bridgeObjectRelease(*((_QWORD *)v35 + 1));
  }
  else
  {
    v27 = v55;
    v67 = 0;
    v28 = sub_100363220();
    v29 = v56;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, &type metadata for RequestHeader, &v67, v56, &type metadata for RequestHeader, v28);
    swift_bridgeObjectRelease(v18);
    v30 = v65;
    v31 = v66;
    *(_OWORD *)v14 = v64;
    *((_QWORD *)v14 + 2) = v30;
    *((_QWORD *)v14 + 3) = v31;
    LOBYTE(v64) = 1;
    v32 = sub_100099FFC(&qword_10063C6E0, &qword_100636528, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v33 = v59;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v59, &v64, v29, v59, v32);
    v37 = v62;
    (*(void (**)(char *, _QWORD *, uint64_t))(v58 + 32))(&v14[v62[5]], v27, v33);
    v38 = sub_100004828(&qword_10063C6E8);
    v67 = 2;
    v39 = sub_100367348();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, v38, &v67, v29, v38, v39);
    *(_QWORD *)&v14[v37[6]] = v64;
    v40 = sub_100004828(&qword_10063C700);
    v67 = 3;
    v41 = sub_1003673C4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, v40, &v67, v29, v40, v41, v42);
    *(_QWORD *)&v14[v60] = v64;
    v43 = sub_100004828(&qword_10063C718);
    v67 = 4;
    v44 = sub_100367440();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, v43, &v67, v29, v43, v44, v45);
    *(_QWORD *)&v14[v21] = v64;
    LOBYTE(v64) = 5;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v64, v29);
    v47 = (uint64_t *)v61;
    v48 = v46;
    v50 = v49;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v57, v56);
    swift_bridgeObjectRelease(v47[1]);
    *v47 = v48;
    v47[1] = v50;
    sub_100035DE8((uint64_t)v14, v53, type metadata accessor for IdentitySharingRequest);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v20);
    return sub_100035DAC((uint64_t)v14, type metadata accessor for IdentitySharingRequest);
  }
}

uint64_t sub_100298D2C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100298D68 + 4 * byte_10052728B[a1]))(0x776F6C666B726F77, 0xEB0000000064695FLL);
}

unint64_t sub_100298D68()
{
  return 0xD000000000000010;
}

uint64_t sub_100298D84()
{
  return 0x5F64616F6C796170;
}

unint64_t sub_100298DA8()
{
  return 0xD000000000000026;
}

uint64_t sub_100298DE4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v3 = v1;
  v5 = sub_100004828(&qword_10063B1B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002C92A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AssessmentAdditionalInfo.CodingKeys, &type metadata for AssessmentAdditionalInfo.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v30 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v30, v5);
  if (!v2)
  {
    v14 = *((unsigned __int8 *)v3 + 16);
    v29 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, &v29, v5);
    v15 = v3[3];
    v16 = *((unsigned __int8 *)v3 + 32);
    v28 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v28, v5);
    v17 = type metadata accessor for AssessmentAdditionalInfo(0);
    v18 = (uint64_t)v3 + *(int *)(v17 + 28);
    v27 = 3;
    v19 = sub_100004828(&qword_1006385E0);
    v20 = sub_100099FFC(&qword_10063A818, &qword_1006385E0, (uint64_t)&protocol conformance descriptor for EncryptedDataContainer<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v27, v5, v19, v20);
    v21 = (uint64_t *)((char *)v3 + *(int *)(v17 + 32));
    v22 = *v21;
    v23 = *((unsigned __int8 *)v21 + 8);
    v26 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100298FCC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v31 = a2;
  v4 = sub_100004828(&qword_10063A6C8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_100004828(&qword_10063B1A0);
  v7 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AssessmentAdditionalInfo(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v33 = a1;
  sub_10000806C(a1, v14);
  v15 = sub_1002C92A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AssessmentAdditionalInfo.CodingKeys, &type metadata for AssessmentAdditionalInfo.CodingKeys, v15, v14, v13);
  if (v2)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(v33);
  v16 = v7;
  v38 = 0;
  v17 = v32;
  *(_QWORD *)v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v38, v32);
  *((_QWORD *)v12 + 1) = v18;
  v37 = 1;
  v12[16] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v37, v17);
  v36 = 2;
  *((_QWORD *)v12 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v17);
  v12[32] = v19 & 1;
  v20 = v17;
  v21 = sub_100004828(&qword_1006385E0);
  v35 = 3;
  v22 = sub_100099FFC(&qword_10063A8C8, &qword_1006385E0, (uint64_t)&protocol conformance descriptor for EncryptedDataContainer<A>);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v6, v21, &v35, v20, v21, v22, v23);
  sub_1000A1F54((uint64_t)v6, (uint64_t)&v12[*(int *)(v10 + 28)], &qword_10063A6C8);
  v34 = 4;
  v24 = v32;
  v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v34, v32);
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v24);
  v28 = &v12[*(int *)(v10 + 32)];
  *(_QWORD *)v28 = v25;
  v28[8] = v27 & 1;
  sub_100035DE8((uint64_t)v12, v31, type metadata accessor for AssessmentAdditionalInfo);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v33);
  return sub_100035DAC((uint64_t)v12, type metadata accessor for AssessmentAdditionalInfo);
}

uint64_t sub_100299318()
{
  unsigned __int8 *v0;

  return sub_10029848C(*v0);
}

uint64_t sub_100299320@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C19B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100299344(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367304();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029936C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367304();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100299394@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10029880C(a1, a2);
}

uint64_t sub_1002993A8(_QWORD *a1)
{
  return sub_100298568(a1);
}

uint64_t sub_1002993BC()
{
  unsigned __int8 *v0;

  return sub_100298D2C(*v0);
}

uint64_t sub_1002993C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C1C8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002993E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C92A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100299410(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C92A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100299438@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100298FCC(a1, a2);
}

uint64_t sub_10029944C(_QWORD *a1)
{
  return sub_100298DE4(a1);
}

uint64_t sub_100299460(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v3 = v1;
  v5 = sub_100004828(&qword_10063CF90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100369A00();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TiberiusWrappedAssessment.CodingKeys, &type metadata for TiberiusWrappedAssessment.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v29) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v29, v5);
  if (!v2)
  {
    v14 = *((_OWORD *)v3 + 2);
    v29 = *((_OWORD *)v3 + 1);
    v30 = v14;
    v15 = *((_OWORD *)v3 + 4);
    v31 = *((_OWORD *)v3 + 3);
    v32 = v15;
    v28 = 1;
    v16 = sub_10027F044();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v5, &type metadata for DIPClientGUIDSeeds, v16);
    v17 = v3[16];
    v18 = *((_BYTE *)v3 + 136);
    v19 = *((_OWORD *)v3 + 6);
    v29 = *((_OWORD *)v3 + 5);
    v30 = v19;
    v31 = *((_OWORD *)v3 + 7);
    *(_QWORD *)&v32 = v17;
    BYTE8(v32) = v18;
    v28 = 2;
    v20 = sub_1002C93F8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v5, &type metadata for ODNErrorInfo, v20);
    v21 = v3[18];
    v22 = v3[19];
    LOBYTE(v29) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v29, v5);
    v23 = (uint64_t)v3 + *(int *)(type metadata accessor for TiberiusWrappedAssessment(0) + 32);
    LOBYTE(v29) = 4;
    v24 = type metadata accessor for AssessmentAdditionalInfo(0);
    v25 = sub_100004790(&qword_10063CF98, type metadata accessor for AssessmentAdditionalInfo, (uint64_t)&unk_100527D6C);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, &v29, v5, v24, v25);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029967C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;

  v34 = a2;
  v3 = sub_100004828(&qword_100636698);
  __chkstk_darwin(v3);
  v35 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100004828(&qword_10063CF78);
  v5 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v6 = type metadata accessor for TiberiusWrappedAssessment(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v9 + 5) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *(_OWORD *)v9 = 0u;
  *((_QWORD *)v9 + 15) = 0;
  *((_QWORD *)v9 + 16) = 0;
  *((_QWORD *)v9 + 14) = 1;
  v9[136] = 0;
  *((_QWORD *)v9 + 18) = 0;
  *((_QWORD *)v9 + 19) = 0;
  v10 = (uint64_t)&v9[*(int *)(v7 + 32)];
  v11 = type metadata accessor for AssessmentAdditionalInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a1[3];
  v13 = a1[4];
  v37 = a1;
  sub_10000806C(a1, v12);
  v14 = sub_100369A00();
  v15 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TiberiusWrappedAssessment.CodingKeys, &type metadata for TiberiusWrappedAssessment.CodingKeys, v14, v12, v13);
  if (v15)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v37);
  }
  else
  {
    v38 = v11;
    v33 = v10;
    v17 = v35;
    v16 = v36;
    LOBYTE(v39) = 0;
    *(_QWORD *)v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v39, v36);
    *((_QWORD *)v9 + 1) = v18;
    v43 = 1;
    v19 = sub_10027FE24();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v39, &type metadata for DIPClientGUIDSeeds, &v43, v16, &type metadata for DIPClientGUIDSeeds, v19, v20);
    v21 = v40;
    *((_OWORD *)v9 + 1) = v39;
    *((_OWORD *)v9 + 2) = v21;
    v22 = v42;
    *((_OWORD *)v9 + 3) = v41;
    *((_OWORD *)v9 + 4) = v22;
    v43 = 2;
    v23 = sub_1002C9370();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v39, &type metadata for ODNErrorInfo, &v43, v16, &type metadata for ODNErrorInfo, v23, v24);
    v25 = v42;
    v26 = BYTE8(v42);
    v27 = v40;
    *((_OWORD *)v9 + 5) = v39;
    *((_OWORD *)v9 + 6) = v27;
    *((_OWORD *)v9 + 7) = v41;
    *((_QWORD *)v9 + 16) = v25;
    v9[136] = v26;
    LOBYTE(v39) = 3;
    *((_QWORD *)v9 + 18) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v39, v16);
    *((_QWORD *)v9 + 19) = v29;
    LOBYTE(v39) = 4;
    v30 = sub_100004790(&qword_10063CF88, type metadata accessor for AssessmentAdditionalInfo, (uint64_t)&unk_100527D94);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v17, v38, &v39, v16, v38, v30, v31);
    (*(void (**)(_QWORD, uint64_t))(v5 + 8))(0, v16);
    v32 = v37;
    sub_100184E1C((uint64_t)v17, v33, &qword_100636698);
    sub_100035DE8((uint64_t)v9, v34, type metadata accessor for TiberiusWrappedAssessment);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v32);
  }
  return sub_100035DAC((uint64_t)v9, type metadata accessor for TiberiusWrappedAssessment);
}

uint64_t sub_1002999DC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100299A10 + 4 * byte_100527290[*v0]))(0x656D737365737361, 0xEA0000000000746ELL);
}

uint64_t sub_100299A10()
{
  return 0x7364656573;
}

uint64_t sub_100299A24()
{
  return 0x666E49726F727265;
}

uint64_t sub_100299A48()
{
  return 0x49656C69666F7270;
}

uint64_t sub_100299A64()
{
  return 0x6E6F697469646461;
}

uint64_t sub_100299A88@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C1ECC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100299AAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369A00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100299AD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369A00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100299AFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10029967C(a1, a2);
}

uint64_t sub_100299B10(_QWORD *a1)
{
  return sub_100299460(a1);
}

uint64_t sub_100299B24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  Swift::String v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;

  v2 = v1;
  v4 = type metadata accessor for DIPError.Code(0);
  v66 = *(_QWORD *)(v4 - 8);
  v67 = v4;
  __chkstk_darwin(v4);
  v68 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for EncodingError(0);
  v64 = *(_QWORD *)(v69 - 8);
  v6 = __chkstk_darwin(v69);
  v63 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v65 = (char *)&v60 - v8;
  v9 = sub_100004828(&qword_1006384F0);
  __chkstk_darwin(v9);
  v62 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for TiberiusWrappedAssessment(0);
  v11 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004828(&qword_10063C8F8);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v19 = a1[4];
  sub_10000806C(a1, v18);
  v20 = sub_100367C1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TiberiusIdentitySharingRequest.CodingKeys, &type metadata for TiberiusIdentitySharingRequest.CodingKeys, v20, v18, v19);
  v74 = 0;
  v21 = sub_100004828(&qword_100636528);
  v22 = sub_100099FFC(&qword_10063C738, &qword_100636528, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  v23 = v17;
  v24 = v70;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v2, &v74, v14, v21, v22);
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v30 = v68;
    v31 = v69;
    v33 = v66;
    v32 = v67;
    v34 = v65;
    v71 = v24;
    swift_errorRetain(v24);
    v35 = sub_100004828((uint64_t *)&unk_100633430);
    if (swift_dynamicCast(v34, &v71, v35, v31, 0))
    {
      swift_errorRelease(v24);
      v36 = v63;
      v37 = v64;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v63, v34, v31);
      v38 = swift_allocError(v31, &protocol witness table for EncodingError, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v39, v36, v31);
      (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v30, enum case for DIPError.Code.jsonEncodingFailed(_:), v32);
      v40 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v41 = type metadata accessor for DIPError(0);
      v42 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v41, v42, 0, 0);
      v43 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000028, 0x800000010055A450, v38, v30, 0, v40, 0xD000000000000054, 0x8000000100559CF0, 0x742865646F636E65, 0xEB00000000293A6FLL, 1319);
      swift_willThrow(v43);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v31);
      v44 = v71;
    }
    else
    {
      swift_errorRelease(v71);
      (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v30, enum case for DIPError.Code.internalError(_:), v32);
      swift_errorRetain(v24);
      v45 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v46 = type metadata accessor for DIPError(0);
      v47 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v46, v47, 0, 0);
      v48 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004ALL, 0x800000010055A400, v24, v30, 0, v45, 0xD000000000000054, 0x8000000100559CF0, 0x742865646F636E65, 0xEB00000000293A6FLL, 1322);
      swift_willThrow(v48);
      v44 = v24;
    }
    return swift_errorRelease(v44);
  }
  else
  {
    v25 = (uint64_t)v62;
    v70 = v15;
    v26 = type metadata accessor for TiberiusIdentitySharingRequest(0);
    v27 = (uint64_t *)(v2 + *(int *)(v26 + 24));
    v28 = *v27;
    v29 = v27[1];
    v73 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v29, &v73, v14);
    v60 = v23;
    sub_100038B24(v2 + *(int *)(v26 + 20), v25, &qword_1006384F0);
    v50 = v61;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v25, 1, v61) == 1)
    {
      (*(void (**)(char *, uint64_t))(v70 + 8))(v60, v14);
      return sub_100008030(v25, &qword_1006384F0);
    }
    else
    {
      sub_100367C60(v25, (uint64_t)v13);
      v51 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
      v52 = JSONEncoder.init()();
      v53 = sub_100004790(&qword_10063C450, type metadata accessor for TiberiusWrappedAssessment, (uint64_t)&unk_10052A0FC);
      v54 = dispatch thunk of JSONEncoder.encode<A>(_:)(v13, v50, v53);
      v56 = v55;
      swift_release(v52);
      v57 = Data.base64EncodedString(options:)(0);
      sub_100007F8C(v54, v56);
      v72 = 1;
      v58 = v60;
      KeyedEncodingContainer.encode(_:forKey:)(v57._countAndFlagsBits, v57._object, &v72, v14);
      v59 = v70;
      swift_bridgeObjectRelease(v57._object);
      sub_100035DAC((uint64_t)v13, type metadata accessor for TiberiusWrappedAssessment);
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v58, v14);
    }
  }
}

uint64_t sub_10029A210@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  __n128 v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  char v42;
  char v43;

  v34 = a2;
  v3 = sub_100004828(&qword_1006384F0);
  __chkstk_darwin(v3);
  v36 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004828(&qword_100636678);
  __chkstk_darwin(v5);
  v37 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = sub_100004828(&qword_10063CA30);
  v35 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TiberiusIdentitySharingRequest(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100636528);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v33 = v9;
  v13 = (uint64_t)&v11[*(int *)(v9 + 20)];
  v14 = type metadata accessor for TiberiusWrappedAssessment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = a1[3];
  v16 = a1[4];
  sub_10000806C(a1, v15);
  v17 = sub_100367C1C();
  v38 = v8;
  v18 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TiberiusIdentitySharingRequest.CodingKeys, &type metadata for TiberiusIdentitySharingRequest.CodingKeys, v17, v15, v16);
  if (v18)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
    sub_100008030((uint64_t)v11, &qword_100636678);
    return sub_100008030(v13, &qword_1006384F0);
  }
  else
  {
    v40 = a1;
    v20 = v35;
    v19 = v36;
    v43 = 0;
    v21 = sub_100099FFC(&qword_10063C6E0, &qword_100636528, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v23 = v37;
    v22 = v38;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, v12, &v43, v39, v12, v21, v24);
    sub_100184E1C((uint64_t)v23, (uint64_t)v11, &qword_100636678);
    v42 = 1;
    v25 = sub_100004790(&qword_10063C3F0, type metadata accessor for TiberiusWrappedAssessment, (uint64_t)&unk_10052A124);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v19, v14, &v42, v39, v14, v25, v26);
    sub_100184E1C((uint64_t)v19, v13, &qword_1006384F0);
    v41 = 2;
    v27 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v39);
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v39);
    v30 = v34;
    v31 = (uint64_t *)&v11[*(int *)(v33 + 24)];
    *v31 = v27;
    v31[1] = v29;
    sub_100035DE8((uint64_t)v11, v30, type metadata accessor for TiberiusIdentitySharingRequest);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v40);
    return sub_100035DAC((uint64_t)v11, type metadata accessor for TiberiusIdentitySharingRequest);
  }
}

unint64_t sub_10029A574()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 == 1)
    v1 = 0x656D737365737361;
  if (*v0)
    return v1;
  else
    return 0xD000000000000019;
}

uint64_t sub_10029A5D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C2128(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029A5FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367C1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029A624(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367C1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029A64C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10029A210(a1, a2);
}

uint64_t sub_10029A660(_QWORD *a1)
{
  return sub_100299B24(a1);
}

uint64_t sub_10029A674(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[16];
  _OWORD v25[6];

  v3 = v1;
  v5 = sub_100004828(&qword_10063CAB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003683EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentitySharingResponse.CodingKeys, &type metadata for IdentitySharingResponse.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 48);
  v25[2] = *(_OWORD *)(v3 + 32);
  v25[3] = v12;
  v13 = *(_OWORD *)(v3 + 80);
  v25[4] = *(_OWORD *)(v3 + 64);
  v25[5] = v13;
  v14 = *(_OWORD *)(v3 + 16);
  v25[0] = *(_OWORD *)v3;
  v25[1] = v14;
  v24[15] = 0;
  sub_1003684E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v25);
  if (!v2)
  {
    v15 = *(_QWORD *)(v3 + 96);
    v16 = *(_QWORD *)(v3 + 104);
    LOBYTE(v25[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v25, v5);
    v17 = *(_QWORD *)(v3 + 112);
    v18 = *(_QWORD *)(v3 + 120);
    LOBYTE(v25[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v25, v5);
    v19 = *(_QWORD *)(v3 + 128);
    v20 = *(_QWORD *)(v3 + 136);
    LOBYTE(v25[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, v25, v5);
    v21 = *(_QWORD *)(v3 + 144);
    v22 = *(_QWORD *)(v3 + 152);
    LOBYTE(v25[0]) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, v25, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029A828()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10029A864 + 4 * byte_100527295[*v0]))(0x65736E6F70736572, 0xEE00726564616548);
}

uint64_t sub_10029A864()
{
  return 0x65636E6F6ELL;
}

uint64_t sub_10029A878()
{
  return 0x6954707570657473;
}

unint64_t sub_10029A894()
{
  return 0xD000000000000013;
}

uint64_t sub_10029A8B0()
{
  return 0x746163696C707061;
}

uint64_t sub_10029A8D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C2280(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029A8F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003683EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029A920(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003683EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10029A948@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[10];

  sub_1002C24E0(a1, v10);
  if (!v2)
  {
    v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    result = *(double *)v10;
    v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_10029A9A0(_QWORD *a1)
{
  return sub_10029A674(a1);
}

uint64_t sub_10029A9B4()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E656B6F74;
  else
    return 1684632949;
}

uint64_t sub_10029A9E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C2ADC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029AA08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367EBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029AA30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367EBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029AA58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028787C(a1, (uint64_t)&unk_10063C958, (uint64_t)sub_100367EBC, (uint64_t)&type metadata for OLDRequest.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1002CA68C, a2);
}

uint64_t sub_10029AA8C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063C948, (uint64_t (*)(void))sub_100367EBC, (uint64_t)&type metadata for OLDRequest.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_10029AAD4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10029AB0C + 4 * byte_10052729A[a1]))(0xD000000000000010, 0x800000010055A2D0);
}

uint64_t sub_10029AB0C(uint64_t a1)
{
  return a1 + 9;
}

uint64_t sub_10029AB58(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v17[2];
  char v18;
  _BYTE v19[16];

  v3 = v1;
  v5 = sub_100004828(&qword_10063B250);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002C94C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GlobalConfig.CodingKeys, &type metadata for GlobalConfig.CodingKeys, v11, v9, v10);
  v17[0] = *v3;
  v18 = 0;
  sub_100004828(&qword_10063B230);
  sub_1002C95FC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v17);
  if (!v2)
  {
    v17[0] = v3[1];
    v18 = 1;
    sub_100004828(&qword_1006368D0);
    sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17);
    v12 = v3[2];
    v13 = v3[3];
    LOBYTE(v17[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v17, v5);
    sub_1000A1F54((uint64_t)(v3 + 4), (uint64_t)v19, &qword_10063B268);
    sub_1000A1F54((uint64_t)v19, (uint64_t)v17, &qword_10063B268);
    v18 = 3;
    v14 = sub_1002C96AC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, &v18, v5, &type metadata for RegionFeatureConfigs, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029AD5C()
{
  unsigned __int8 *v0;

  return sub_10029AAD4(*v0);
}

uint64_t sub_10029AD64@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C2BB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029AD88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C94C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029ADB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C94C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10029ADD8@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1002C2D7C(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10029AE18(_QWORD *a1)
{
  return sub_10029AB58(a1);
}

uint64_t sub_10029AE50(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10029AE8C + 4 * byte_10052729E[a1]))(0xD000000000000020, 0x800000010053A4E0);
}

uint64_t sub_10029AE8C()
{
  uint64_t v0;

  return v0 + 1;
}

uint64_t sub_10029B064()
{
  return 0x2D656C6261736964;
}

uint64_t sub_10029B084()
{
  return 0x6C2D786966657270;
}

uint64_t sub_10029B0A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  char v62;

  v3 = v1;
  v5 = sub_100004828(&qword_10063C380);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100362F6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RegionConfig.CodingKeys, &type metadata for RegionConfig.CodingKeys, v11, v9, v10);
  v12 = *(double *)v3;
  v62 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v62, v5, v12);
  if (!v2)
  {
    v13 = *(double *)(v3 + 8);
    v62 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v62, v5, v13);
    v14 = *(_QWORD *)(v3 + 16);
    v62 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v62, v5);
    v15 = *(double *)(v3 + 24);
    v62 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v62, v5, v15);
    v16 = *(_QWORD *)(v3 + 32);
    v17 = *(_QWORD *)(v3 + 40);
    v62 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v62, v5);
    v18 = *(_QWORD *)(v3 + 48);
    v19 = *(_QWORD *)(v3 + 56);
    v62 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v62, v5);
    v20 = *(_QWORD *)(v3 + 64);
    v21 = *(_QWORD *)(v3 + 72);
    v62 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v62, v5);
    v22 = *(_QWORD *)(v3 + 80);
    v23 = *(_QWORD *)(v3 + 88);
    v62 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v62, v5);
    v24 = *(_QWORD *)(v3 + 96);
    v25 = *(_QWORD *)(v3 + 104);
    v62 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v62, v5);
    v26 = *(_QWORD *)(v3 + 112);
    v27 = *(unsigned __int8 *)(v3 + 120);
    v62 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v62, v5);
    v28 = *(_QWORD *)(v3 + 128);
    v29 = *(unsigned __int8 *)(v3 + 136);
    v62 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v62, v5);
    v30 = *(_QWORD *)(v3 + 144);
    v31 = *(_QWORD *)(v3 + 152);
    v62 = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v30, v31, &v62, v5);
    v32 = *(_QWORD *)(v3 + 160);
    v33 = *(unsigned __int8 *)(v3 + 168);
    v62 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, &v62, v5);
    v34 = *(_QWORD *)(v3 + 176);
    v35 = *(unsigned __int8 *)(v3 + 184);
    v62 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, &v62, v5);
    v36 = *(_QWORD *)(v3 + 192);
    v37 = *(unsigned __int8 *)(v3 + 200);
    v62 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v62, v5);
    v38 = *(_QWORD *)(v3 + 208);
    v39 = *(unsigned __int8 *)(v3 + 216);
    v62 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, v39, &v62, v5);
    v40 = *(_QWORD *)(v3 + 224);
    v41 = *(unsigned __int8 *)(v3 + 232);
    v62 = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v40, v41, &v62, v5);
    v42 = *(_QWORD *)(v3 + 240);
    v43 = *(_QWORD *)(v3 + 248);
    v62 = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v42, v43, &v62, v5);
    v44 = *(_QWORD *)(v3 + 256);
    v45 = *(_QWORD *)(v3 + 264);
    v62 = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v44, v45, &v62, v5);
    v46 = *(_QWORD *)(v3 + 272);
    v47 = *(_QWORD *)(v3 + 280);
    v62 = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v46, v47, &v62, v5);
    v48 = *(_QWORD *)(v3 + 288);
    v49 = *(unsigned __int8 *)(v3 + 296);
    v62 = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v48, v49, &v62, v5);
    v50 = *(unsigned __int8 *)(v3 + 297);
    v62 = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v50, &v62, v5);
    v51 = *(_QWORD *)(v3 + 304);
    v52 = *(unsigned __int8 *)(v3 + 312);
    v62 = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v51, v52, &v62, v5);
    v53 = *(_QWORD *)(v3 + 320);
    v54 = *(unsigned __int8 *)(v3 + 328);
    v62 = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v53, v54, &v62, v5);
    v55 = *(_QWORD *)(v3 + 336);
    v56 = *(unsigned __int8 *)(v3 + 344);
    v62 = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v55, v56, &v62, v5);
    v57 = *(unsigned __int8 *)(v3 + 345);
    v62 = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v57, &v62, v5);
    v58 = *(_QWORD *)(v3 + 352);
    v59 = *(unsigned __int8 *)(v3 + 360);
    v62 = 26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v58, v59, &v62, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029B5D8(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v7 = sub_100004828(&qword_10063C388);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000806C(a1, v11);
  v13 = sub_100362FB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RegionFeatureConfigs.CodingKeys, &type metadata for RegionFeatureConfigs.CodingKeys, v13, v11, v12);
  v19 = a2;
  v18 = 0;
  sub_1003630A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
  if (!v3)
  {
    v16 = a3;
    v17 = 1;
    sub_100004828(&qword_10063C370);
    sub_1003630E8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10029B72C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100061464(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_10029AE50);
}

Swift::Int sub_10029B738(uint64_t a1, uint64_t a2)
{
  return sub_1000614FC(a1, a2, (uint64_t (*)(uint64_t))sub_10029AE50);
}

uint64_t sub_10029B744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006156C(a1, a2, a3, (uint64_t (*)(_QWORD))sub_10029AE50);
}

Swift::Int sub_10029B750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000615B8(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10029AE50);
}

uint64_t sub_10029B75C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1002C3090(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10029B788@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10029AE50(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10029B7B0()
{
  unsigned __int8 *v0;

  return sub_10029AE50(*v0);
}

uint64_t sub_10029B7B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C3090(a1, a2);
  *a3 = result;
  return result;
}

void sub_10029B7DC(_BYTE *a1@<X8>)
{
  *a1 = 27;
}

uint64_t sub_10029B7E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100362F6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029B810(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100362F6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10029B838@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[368];

  result = sub_1002C30E0(a1, v5);
  if (!v2)
    return memcpy(a2, v5, 0x169uLL);
  return result;
}

uint64_t sub_10029B888(_QWORD *a1)
{
  return sub_10029B0A8(a1);
}

uint64_t sub_10029B89C(char *a1, char *a2)
{
  return sub_1003C09E0(*a1, *a2);
}

Swift::Int sub_10029B8A8()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6F436E6F69676552;
  else
    v2 = 0x43746C7561666544;
  if (v1)
    v3 = 0xED0000736769666ELL;
  else
    v3 = 0xEE00736769666E6FLL;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10029B940(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6F436E6F69676552;
  else
    v2 = 0x43746C7561666544;
  if (*v1)
    v3 = 0xED0000736769666ELL;
  else
    v3 = 0xEE00736769666E6FLL;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10029B9B4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6F436E6F69676552;
  else
    v3 = 0x43746C7561666544;
  if (v2)
    v4 = 0xED0000736769666ELL;
  else
    v4 = 0xEE00736769666E6FLL;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10029BA48@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100601F40;
  return sub_10005D5D8(v2, a1, a2);
}

void sub_10029BA54(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x43746C7561666544;
  if (*v1)
    v2 = 0x6F436E6F69676552;
  v3 = 0xEE00736769666E6FLL;
  if (*v1)
    v3 = 0xED0000736769666ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10029BAAC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F436E6F69676552;
  else
    return 0x43746C7561666544;
}

uint64_t sub_10029BB00@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100601F40;
  return sub_10029BB0C(a1, v2, a2);
}

uint64_t sub_10029BB0C@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;
  char v8;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

uint64_t sub_10029BB68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100362FB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029BB90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100362FB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029BBB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1002C3F64(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_10029BBE4(_QWORD *a1)
{
  uint64_t v1;

  return sub_10029B5D8(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8));
}

Swift::Int sub_10029BC00(uint64_t a1, uint64_t a2)
{
  return sub_1002A1C00(a1, a2, 0xD00000000000001CLL, 0x800000010053A820);
}

uint64_t sub_10029BC1C(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD00000000000001CLL, 0x800000010053A820);
}

Swift::Int sub_10029BC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002A1C7C(a1, a2, a3, 0xD00000000000001CLL, 0x800000010053A820);
}

uint64_t sub_10029BC54@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100601F90;
  return sub_1002A1CD0(v2, a1, a2);
}

void sub_10029BC60(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x800000010053A820;
}

unint64_t sub_10029BC80()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_10029BC9C@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100601FC8, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_10029BCF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036FD2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029BD18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10036FD2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029BD40@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_100004828(&qword_10063D848);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10036FD2C();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FeatureConfig.CodingKeys, &type metadata for FeatureConfig.CodingKeys, v11, v9, v10);
  if (v2)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  *a2 = v13;
  return result;
}

uint64_t sub_10029BE50(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_100004828(&qword_10063D858);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = *v1;
  sub_10000806C(a1, v7);
  v10 = sub_10036FD2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FeatureConfig.CodingKeys, &type metadata for FeatureConfig.CodingKeys, v10, v7, v8);
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v9, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10029BF38@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_10029BF40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369B10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029BF68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369B10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029BF90(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10029BFC8 + 4 * byte_1005272B9[a1]))(0xD000000000000010, 0x800000010055AE80);
}

uint64_t sub_10029BFC8(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_10029BFF0()
{
  return 0x656372756F736572;
}

uint64_t sub_10029C010(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v19 = a3;
  v20 = a5;
  v9 = sub_100004828(&qword_10063CFF0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v14);
  v15 = sub_100369B98();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AttributeConfig.CodingKeys, &type metadata for AttributeConfig.CodingKeys, v15, v14, v13);
  v22 = a2;
  v21 = 0;
  sub_100004828(&qword_10063D000);
  sub_100369BDC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
  if (!v5)
  {
    v16 = v20;
    v22 = v19;
    v21 = 1;
    sub_100004828(&qword_1006367E8);
    sub_1001846A0(&qword_1006367F8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
    v22 = a4;
    v21 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
    v22 = v16;
    v21 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10029C200(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10029C22C + 4 * byte_1005272BD[a1]))(1954047348, 0xE400000000000000);
}

uint64_t sub_10029C22C()
{
  return 0x72656B636970;
}

uint64_t sub_10029C240()
{
  return 1702125924;
}

uint64_t sub_10029C24C()
{
  return 0x6172656D6163;
}

uint64_t sub_10029C260()
{
  return 0x6F746F6870;
}

uint64_t sub_10029C274()
{
  return 7369839;
}

unint64_t sub_10029C284()
{
  return 0xD000000000000010;
}

uint64_t sub_10029C2A0()
{
  unsigned __int8 *v0;

  return sub_10029BF90(*v0);
}

uint64_t sub_10029C2A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C480C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029C2CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369B98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029C2F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369B98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029C31C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1002C40F0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10029C348(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10029C010(a1, *v1, v1[1], v1[2], v1[3]);
}

void sub_10029C364(char *a1)
{
  sub_1003C14FC(*a1);
}

void sub_10029C370()
{
  char *v0;

  sub_1003C2D6C(0, *v0);
}

void sub_10029C37C(uint64_t a1)
{
  char *v1;

  sub_10022859C(a1, *v1);
}

void sub_10029C384(uint64_t a1)
{
  char *v1;

  sub_1003C2D6C(a1, *v1);
}

unint64_t sub_10029C38C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100602000;
  result = sub_100364A98(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_10029C3C0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10029C200(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10029C3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1003702CC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10029C444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1003702CC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10029C490(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10029C4CC + 4 * byte_1005272C4[a1]))(0x707954646C656966, 0xE900000000000065);
}

unint64_t sub_10029C4CC()
{
  return 0xD000000000000014;
}

uint64_t sub_10029C66C()
{
  return 0x656C6261636E7973;
}

uint64_t sub_10029C6A0()
{
  return 0x6974726F70707573;
}

uint64_t sub_10029C6C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char v38;

  v3 = v1;
  v5 = sub_100004828(&qword_10063D0B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100369F08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AttributeSettings.CodingKeys, &type metadata for AttributeSettings.CodingKeys, v11, v9, v10);
  LOBYTE(v37) = *(_BYTE *)v3;
  v38 = 0;
  sub_100369FD4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v37);
  if (!v2)
  {
    v12 = *(_QWORD *)(v3 + 8);
    v13 = *(_QWORD *)(v3 + 16);
    LOBYTE(v37) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v37, v5);
    v14 = *(_QWORD *)(v3 + 24);
    v15 = *(_QWORD *)(v3 + 32);
    LOBYTE(v37) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v37, v5);
    v16 = *(_QWORD *)(v3 + 40);
    v17 = *(_QWORD *)(v3 + 48);
    LOBYTE(v37) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v37, v5);
    v18 = *(_QWORD *)(v3 + 56);
    v19 = *(_QWORD *)(v3 + 64);
    LOBYTE(v37) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v37, v5);
    v20 = *(_QWORD *)(v3 + 72);
    v21 = *(_QWORD *)(v3 + 80);
    LOBYTE(v37) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v37, v5);
    v22 = *(_QWORD *)(v3 + 88);
    LOBYTE(v37) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v37, v5);
    v23 = *(_QWORD *)(v3 + 96);
    LOBYTE(v37) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v23, &v37, v5);
    v24 = *(unsigned __int8 *)(v3 + 104);
    LOBYTE(v37) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v24, &v37, v5);
    v25 = *(unsigned __int8 *)(v3 + 105);
    LOBYTE(v37) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v37, v5);
    v26 = *(unsigned __int8 *)(v3 + 106);
    LOBYTE(v37) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v26, &v37, v5);
    v27 = *(unsigned __int8 *)(v3 + 107);
    LOBYTE(v37) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v27, &v37, v5);
    v28 = *(unsigned __int8 *)(v3 + 108);
    LOBYTE(v37) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v28, &v37, v5);
    v29 = *(unsigned __int8 *)(v3 + 109);
    LOBYTE(v37) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v29, &v37, v5);
    v37 = *(_QWORD *)(v3 + 112);
    v38 = 14;
    sub_100004828(&qword_10063D098);
    sub_1000A1F98(&qword_10063D0C0, &qword_10063D098, (void (*)(void))sub_10036A018, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37);
    v30 = *(unsigned __int8 *)(v3 + 120);
    LOBYTE(v37) = 15;
    KeyedEncodingContainer.encode(_:forKey:)(v30, &v37, v5);
    v31 = *(unsigned __int8 *)(v3 + 121);
    LOBYTE(v37) = 16;
    KeyedEncodingContainer.encode(_:forKey:)(v31, &v37, v5);
    v32 = *(unsigned __int8 *)(v3 + 122);
    LOBYTE(v37) = 17;
    KeyedEncodingContainer.encode(_:forKey:)(v32, &v37, v5);
    v33 = *(_QWORD *)(v3 + 128);
    LOBYTE(v37) = 18;
    KeyedEncodingContainer.encode(_:forKey:)(v33, &v37, v5);
    v34 = *(_QWORD *)(v3 + 136);
    v35 = *(_QWORD *)(v3 + 144);
    LOBYTE(v37) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, &v37, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029CB04(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10029CB40 + 4 * byte_1005272D8[a1]))(0xD000000000000011, 0x800000010055A700);
}

uint64_t sub_10029CB40()
{
  uint64_t v0;

  return v0 - 10;
}

uint64_t sub_10029CBF4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  _OWORD v26[2];

  v3 = v1;
  v5 = sub_100004828(&qword_10063CA68);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100368280();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityStatusAttestation.CodingKeys, &type metadata for IdentityStatusAttestation.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v26[0] = *(_OWORD *)v3;
  v26[1] = v12;
  v25 = 0;
  sub_10036727C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v26);
  if (!v2)
  {
    *(_QWORD *)&v26[0] = *(_QWORD *)(v3 + 32);
    v25 = 1;
    sub_100004828(&qword_1006368D0);
    sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26);
    v13 = *(_QWORD *)(v3 + 40);
    v14 = *(_QWORD *)(v3 + 48);
    LOBYTE(v26[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, v26, v5);
    *(_QWORD *)&v26[0] = *(_QWORD *)(v3 + 56);
    v25 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26);
    v15 = *(_QWORD *)(v3 + 64);
    v16 = *(_QWORD *)(v3 + 72);
    LOBYTE(v26[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v26, v5);
    v17 = *(_QWORD *)(v3 + 80);
    v18 = *(_QWORD *)(v3 + 88);
    LOBYTE(v26[0]) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v26, v5);
    v19 = *(_QWORD *)(v3 + 96);
    v20 = *(_QWORD *)(v3 + 104);
    LOBYTE(v26[0]) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, v26, v5);
    v21 = *(_QWORD *)(v3 + 112);
    v22 = *(_QWORD *)(v3 + 120);
    LOBYTE(v26[0]) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029CE68(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[2];
  char v19;

  v17 = a4;
  v7 = a2 & 1;
  v8 = sub_100004828(&qword_10063CA48);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = sub_1003681F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DataSharingArtifact.CodingKeys, &type metadata for DataSharingArtifact.CodingKeys, v14, v12, v13);
  v19 = v7;
  v18[1] = 0;
  sub_10036823C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
  if (!v4)
  {
    v18[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a3, v17, v18, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10029CFA4()
{
  unsigned __int8 *v0;

  return sub_10029C490(*v0);
}

uint64_t sub_10029CFAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C5418(a1, a2);
  *a3 = result;
  return result;
}

void sub_10029CFD0(_BYTE *a1@<X8>)
{
  *a1 = 20;
}

uint64_t sub_10029CFDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369F08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029D004(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100369F08();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10029D02C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[9];
  uint64_t v10;

  sub_1002C49C8(a1, (uint64_t)v9);
  if (!v2)
  {
    v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_QWORD *)(a2 + 144) = v10;
    v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = *(double *)v9;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t sub_10029D09C(_QWORD *a1)
{
  return sub_10029C6C4(a1);
}

uint64_t sub_10029D0B0()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 0xD000000000000014;
}

uint64_t sub_10029D0EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C5C68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029D110(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100370310();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029D138(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100370310();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029D160@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028787C(a1, (uint64_t)&unk_10063D9C8, (uint64_t)sub_100370310, (uint64_t)&type metadata for AttributeSettingsPickerItem.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1002CA68C, a2);
}

uint64_t sub_10029D194(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063D9D8, (uint64_t (*)(void))sub_100370310, (uint64_t)&type metadata for AttributeSettingsPickerItem.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_10029D1DC()
{
  _BYTE *v0;

  if (*v0)
    return 0x776F6C666B726F77;
  else
    return 0x72656469766F7270;
}

uint64_t sub_10029D214@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C5D4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029D238(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100370024();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029D260(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100370024();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029D288@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028787C(a1, (uint64_t)&unk_10063D8D0, (uint64_t)sub_100370024, (uint64_t)&type metadata for ProviderWorkflowInfo.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1002CA68C, a2);
}

uint64_t sub_10029D2BC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063D8E0, (uint64_t (*)(void))sub_100370024, (uint64_t)&type metadata for ProviderWorkflowInfo.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_10029D304()
{
  _BYTE *v0;

  if (*v0)
    return 1953259891;
  else
    return 0x7475626972747461;
}

uint64_t sub_10029D340@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C5E54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029D364(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368170();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029D38C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368170();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029D3B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028787C(a1, (uint64_t)&unk_10063CA00, (uint64_t)sub_100368170, (uint64_t)&type metadata for AppleIdAttributeProof.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1002CA68C, a2);
}

uint64_t sub_10029D3E8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063CA10, (uint64_t (*)(void))sub_100368170, (uint64_t)&type metadata for AppleIdAttributeProof.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_10029D430()
{
  unsigned __int8 *v0;

  return sub_10029CB04(*v0);
}

uint64_t sub_10029D438@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C5F4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029D45C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368280();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029D484(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368280();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10029D4AC@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  sub_1002C62B8(a1, v9);
  if (!v2)
  {
    v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    result = *(double *)&v10;
    v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_10029D4FC(_QWORD *a1)
{
  return sub_10029CBF4(a1);
}

uint64_t sub_10029D510(char *a1, char *a2)
{
  return sub_1003C2440(*a1, *a2);
}

Swift::Int sub_10029D51C()
{
  char *v0;

  return sub_1003C2744(*v0);
}

uint64_t sub_10029D524(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;

  if (*v1)
    v2 = 0x800000010053A8A0;
  else
    v2 = 0x800000010053A880;
  String.hash(into:)(a1, 0xD00000000000001ALL, v2);
  return swift_bridgeObjectRelease(v2);
}

Swift::Int sub_10029D57C(uint64_t a1)
{
  char *v1;

  return sub_1003C2AD0(a1, *v1);
}

uint64_t sub_10029D584@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1006020C8;
  return sub_10005D5D8(v2, a1, a2);
}

void sub_10029D590(_QWORD *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0x800000010053A880;
  if (*v1)
    v2 = 0x800000010053A8A0;
  *a1 = 0xD00000000000001ALL;
  a1[1] = v2;
}

uint64_t sub_10029D5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002CC334();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10029D628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002CC334();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10029D674()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E656B6F74;
  else
    return 0x7463616669747261;
}

uint64_t sub_10029D6B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C69C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029D6D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003681F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029D6FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003681F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029D724@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1002C6ABC(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_10029D754(_QWORD *a1)
{
  uint64_t v1;

  return sub_10029CE68(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_10029D770(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  _OWORD v24[2];

  v3 = v1;
  v5 = sub_100004828(&qword_10063C6B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003671B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DataSharingAuthorization.CodingKeys, &type metadata for DataSharingAuthorization.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v24[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v24, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v24[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v24, v5);
    v16 = *((_OWORD *)v3 + 3);
    v24[0] = *((_OWORD *)v3 + 2);
    v24[1] = v16;
    v23 = 2;
    sub_10036727C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24);
    *(_QWORD *)&v24[0] = v3[8];
    v23 = 3;
    sub_100004828(&qword_10063C698);
    sub_1000A1F98(&qword_10063C6C0, &qword_10063C698, (void (*)(void))sub_1003672C0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24);
    v17 = v3[9];
    v18 = v3[10];
    LOBYTE(v24[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, v24, v5);
    v19 = v3[11];
    v20 = v3[12];
    LOBYTE(v24[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, v24, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029D980()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10029D9A4 + 4 * byte_1005272E0[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_10029D9A4()
{
  return 0x6465696669726576;
}

unint64_t sub_10029D9C8()
{
  return 0xD000000000000011;
}

uint64_t sub_10029D9E4()
{
  return 0x7463616669747261;
}

uint64_t sub_10029DA00()
{
  return 0x64657461657263;
}

uint64_t sub_10029DA18()
{
  return 0x6974617269707865;
}

uint64_t sub_10029DA34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C6C28(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029DA58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003671B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029DA80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003671B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10029DAA8@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;

  sub_1002C6EC4(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_QWORD *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10029DB04(_QWORD *a1)
{
  return sub_10029D770(a1);
}

uint64_t sub_10029DB18(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[2];
  uint64_t v19;
  char v20;

  v3 = v1;
  v5 = sub_100004828(&qword_10063B380);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 2];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002CC268();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdVDataElement.CodingKeys, &type metadata for IdVDataElement.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v20, v5);
  if (!v2)
  {
    v19 = v3[2];
    v18[1] = 1;
    sub_100004828(&qword_1006368D0);
    sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
    v14 = v3[3];
    v15 = v3[4];
    v18[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v18, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029DC98(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21[8];
  _BYTE v22[8];

  v3 = v1;
  v5 = sub_100004828(&qword_10063B3C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002CC378();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PersoDataElement.CodingKeys, &type metadata for PersoDataElement.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v21[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v21, v5);
  if (!v2)
  {
    sub_1000A1F54((uint64_t)(v3 + 2), (uint64_t)v22, (uint64_t *)&unk_100631300);
    sub_1000A1F54((uint64_t)v22, (uint64_t)v21, (uint64_t *)&unk_100631300);
    v20 = 1;
    v14 = sub_100004828(&qword_1006368D0);
    v15 = sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, v14, v15);
    v16 = v3[3];
    v17 = v3[4];
    v21[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029DE38()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7365756C6176;
  if (*v0 != 1)
    v1 = 1953259891;
  if (*v0)
    return v1;
  else
    return 0x7475626972747461;
}

uint64_t sub_10029DE90@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C73E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029DEB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CC268();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029DEDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CC268();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10029DF04@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1002C753C(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10029DF48(_QWORD *a1)
{
  return sub_10029DB18(a1);
}

uint64_t sub_10029DF5C(uint64_t a1, uint64_t a2)
{
  return sub_1002AD2B8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD **)(a2 + 16));
}

uint64_t sub_10029DF78()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7365756C6176;
  if (*v0 != 1)
    v1 = 0x656372756F736572;
  if (*v0)
    return v1;
  else
    return 0x7475626972747461;
}

uint64_t sub_10029DFDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C77B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029E000(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CC378();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029E028(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CC378();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10029E050@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1002C7920(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10029E094(_QWORD *a1)
{
  return sub_10029DC98(a1);
}

uint64_t sub_10029E0CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v7 = sub_100004828(&qword_10063C840);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000806C(a1, v11);
  v13 = sub_1003678C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdVData.CodingKeys, &type metadata for IdVData.CodingKeys, v13, v11, v12);
  v19 = a2;
  v18 = 0;
  v14 = sub_100004828(&qword_100636480);
  v15 = sub_1001828D4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v7, v14, v15);
  if (!v3)
  {
    v19 = a3;
    v18 = 1;
    sub_100004828(&qword_10063C828);
    sub_1000A1F98(&qword_10063C848, &qword_10063C828, (void (*)(void))sub_100367948, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10029E24C()
{
  _BYTE *v0;

  if (*v0)
    return 0x4464656D69616C63;
  else
    return 0xD000000000000011;
}

uint64_t sub_10029E294@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C7B94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029E2B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003678C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029E2E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003678C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029E308@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1002C7C98(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10029E330(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10029E0CC(a1, *v1, v1[1]);
}

uint64_t sub_10029E348()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x7475626972747461;
}

uint64_t sub_10029E390@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C7E8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029E3B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003681B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029E3DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003681B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029E404@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028787C(a1, (uint64_t)&unk_10063CA18, (uint64_t)sub_1003681B4, (uint64_t)&type metadata for DataNodeProof.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1002CA68C, a2);
}

uint64_t sub_10029E438(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063CA28, (uint64_t (*)(void))sub_1003681B4, (uint64_t)&type metadata for DataNodeProof.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_10029E480()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x6E6F6973726576;
}

uint64_t sub_10029E4C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C7F90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029E4E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003683A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029E50C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003683A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029E534@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028787C(a1, (uint64_t)&unk_10063CA88, (uint64_t)sub_1003683A8, (uint64_t)&type metadata for DeviceAssessmentTrainingSignalId.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1002C827C, a2);
}

uint64_t sub_10029E568(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063CA98, (uint64_t (*)(void))sub_1003683A8, (uint64_t)&type metadata for DeviceAssessmentTrainingSignalId.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_10029E5B0()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x6E6F6973726576;
}

uint64_t sub_10029E5F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C807C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029E614(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C9260();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029E63C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C9260();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029E664@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028787C(a1, (uint64_t)&unk_10063B188, (uint64_t)sub_1002C9260, (uint64_t)&type metadata for TrainingSignalId.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1002C827C, a2);
}

uint64_t sub_10029E698(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063B198, (uint64_t (*)(void))sub_1002C9260, (uint64_t)&type metadata for TrainingSignalId.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

unint64_t sub_10029E6E0(char a1)
{
  unint64_t result;

  result = 0xD000000000000011;
  if (a1)
  {
    if (a1 == 1)
      return 0xD000000000000020;
    else
      return 0xD00000000000001ELL;
  }
  return result;
}

uint64_t sub_10029E740(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v17[4];
  char v18;
  _BYTE v19[32];

  v3 = v1;
  v5 = sub_100004828(&qword_10063C788);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100367630();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharingIdVData.CodingKeys, &type metadata for SharingIdVData.CodingKeys, v11, v9, v10);
  v17[0] = *v3;
  v18 = 0;
  sub_100004828(&qword_100636480);
  sub_1001828D4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v17);
  if (!v2)
  {
    sub_1000A1F54((uint64_t)(v3 + 1), (uint64_t)v19, &qword_10063C790);
    sub_1000A1F54((uint64_t)v19, (uint64_t)v17, &qword_10063C790);
    v18 = 1;
    v12 = sub_1003676B8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, &v18, v5, &type metadata for DeviceAssessmentTrainingSignalId, v12);
    v13 = v3[5];
    v14 = v3[6];
    LOBYTE(v17[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, v17, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029E8D8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _BYTE v14[8];
  uint64_t v15;

  v3 = v1;
  v5 = sub_100004828(&qword_10063CA80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100368364();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharingCredentials.CodingKeys, &type metadata for SharingCredentials.CodingKeys, v11, v9, v10);
  v15 = *v3;
  v14[7] = 0;
  sub_100004828(&qword_1006368D0);
  sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
  if (!v2)
  {
    v12 = (char *)v3 + *(int *)(type metadata accessor for SharingCredentials(0) + 20);
    v14[6] = 1;
    sub_100004828(&qword_100636528);
    sub_100099FFC(&qword_10063C738, &qword_100636528, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v12);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029EA74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  char v31;
  uint64_t v32;

  v25 = a2;
  v26 = sub_100004828(&qword_100636528);
  v24 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v4 = (uint64_t *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_100004828(&qword_10063CA70);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SharingCredentials(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10000806C(a1, v12);
  v13 = sub_100368364();
  v27 = v7;
  v14 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SharingCredentials.CodingKeys, &type metadata for SharingCredentials.CodingKeys, v13, v12, v11);
  if (v14)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v15 = v5;
  v29 = a1;
  v16 = v26;
  v17 = sub_100004828(&qword_1006368D0);
  v31 = 0;
  v18 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v19 = v27;
  v20 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, v17, &v31, v28, v17, v18);
  v23 = v32;
  *(_QWORD *)v10 = v32;
  v30 = 1;
  v21 = sub_100099FFC(&qword_10063C6E0, &qword_100636528, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v16, &v30, v20, v16, v21);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v20);
  (*(void (**)(char *, _QWORD *, uint64_t))(v24 + 32))(&v10[*(int *)(v8 + 20)], v4, v16);
  sub_100035DE8((uint64_t)v10, v25, type metadata accessor for SharingCredentials);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v29);
  return sub_100035DAC((uint64_t)v10, type metadata accessor for SharingCredentials);
}

uint64_t sub_10029ED18(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10029ED54 + 4 * byte_1005272E6[a1]))(0xD000000000000012, 0x800000010055A2B0);
}

uint64_t sub_10029ED54()
{
  return 0x617461645F617564;
}

uint64_t sub_10029ED6C()
{
  return 0x7364656573;
}

uint64_t sub_10029ED80()
{
  return 0x776F6C666B726F77;
}

uint64_t sub_10029EDA0()
{
  return 0x5F656C69666F7270;
}

uint64_t sub_10029EDBC()
{
  return 0x726F727265;
}

unint64_t sub_10029EDD0()
{
  return 0xD000000000000010;
}

uint64_t sub_10029EDEC()
{
  uint64_t v0;

  return v0 + 22;
}

uint64_t sub_10029EE14()
{
  return 0x5F64616F6C796170;
}

uint64_t sub_10029EE38(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;

  v3 = v1;
  v5 = sub_100004828(&qword_10063B218);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002C9480();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ORDRequest.CodingKeys, &type metadata for ORDRequest.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v39) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v39, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v39) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v39, v5);
    v16 = *((_OWORD *)v3 + 3);
    v39 = *((_OWORD *)v3 + 2);
    v40 = v16;
    v17 = *((_OWORD *)v3 + 5);
    v41 = *((_OWORD *)v3 + 4);
    v42 = v17;
    v43 = 2;
    v18 = sub_10027F044();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v43, v5, &type metadata for DIPClientGUIDSeeds, v18);
    v19 = v3[12];
    v20 = v3[13];
    LOBYTE(v39) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v39, v5);
    v21 = v3[14];
    v22 = v3[15];
    LOBYTE(v39) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v39, v5);
    v23 = v3[22];
    v24 = *((_BYTE *)v3 + 184);
    v25 = *((_OWORD *)v3 + 9);
    v39 = *((_OWORD *)v3 + 8);
    v40 = v25;
    v41 = *((_OWORD *)v3 + 10);
    *(_QWORD *)&v42 = v23;
    BYTE8(v42) = v24;
    v43 = 5;
    v26 = sub_1002C93F8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v43, v5, &type metadata for ODNErrorInfo, v26);
    v27 = *((unsigned __int8 *)v3 + 185);
    LOBYTE(v39) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, &v39, v5);
    v28 = (int *)type metadata accessor for ORDRequest(0);
    v29 = (uint64_t)v3 + v28[11];
    LOBYTE(v39) = 7;
    v30 = sub_100004828(&qword_1006385E0);
    v31 = sub_100099FFC(&qword_10063A818, &qword_1006385E0, (uint64_t)&protocol conformance descriptor for EncryptedDataContainer<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, &v39, v5, v30, v31);
    v32 = (uint64_t *)((char *)v3 + v28[12]);
    v33 = *v32;
    v34 = *((unsigned __int8 *)v32 + 8);
    LOBYTE(v39) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, &v39, v5);
    v35 = (uint64_t *)((char *)v3 + v28[13]);
    v36 = *v35;
    v37 = *((unsigned __int8 *)v35 + 8);
    LOBYTE(v39) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v39, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029F144@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;

  v5 = sub_100004828(&qword_10063A6C8);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = sub_100004828(&qword_10063B208);
  v8 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = (int *)type metadata accessor for ORDRequest(0);
  __chkstk_darwin(v43);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v44 = a1;
  sub_10000806C(a1, v14);
  v15 = sub_1002C9480();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ORDRequest.CodingKeys, &type metadata for ORDRequest.CodingKeys, v15, v14, v13);
  if (v2)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(v44);
  v16 = v8;
  LOBYTE(v45) = 0;
  v17 = v42;
  *(_QWORD *)v12 = KeyedDecodingContainer.decode(_:forKey:)(&v45, v42);
  *((_QWORD *)v12 + 1) = v18;
  LOBYTE(v45) = 1;
  *((_QWORD *)v12 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v17);
  *((_QWORD *)v12 + 3) = v19;
  v49 = 2;
  v20 = sub_10027FE24();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v45, &type metadata for DIPClientGUIDSeeds, &v49, v17, &type metadata for DIPClientGUIDSeeds, v20, v21);
  v22 = v46;
  *((_OWORD *)v12 + 2) = v45;
  *((_OWORD *)v12 + 3) = v22;
  v23 = v48;
  *((_OWORD *)v12 + 4) = v47;
  *((_OWORD *)v12 + 5) = v23;
  LOBYTE(v45) = 3;
  *((_QWORD *)v12 + 12) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v17);
  *((_QWORD *)v12 + 13) = v24;
  LOBYTE(v45) = 4;
  *((_QWORD *)v12 + 14) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v17);
  *((_QWORD *)v12 + 15) = v25;
  v49 = 5;
  v26 = sub_1002C9370();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v45, &type metadata for ODNErrorInfo, &v49, v17, &type metadata for ODNErrorInfo, v26, v27);
  v28 = v48;
  v29 = BYTE8(v48);
  v30 = v46;
  *((_OWORD *)v12 + 8) = v45;
  *((_OWORD *)v12 + 9) = v30;
  *((_OWORD *)v12 + 10) = v47;
  *((_QWORD *)v12 + 22) = v28;
  v12[184] = v29;
  LOBYTE(v45) = 6;
  v12[185] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v17);
  v31 = sub_100004828(&qword_1006385E0);
  LOBYTE(v45) = 7;
  v32 = sub_100099FFC(&qword_10063A8C8, &qword_1006385E0, (uint64_t)&protocol conformance descriptor for EncryptedDataContainer<A>);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v7, v31, &v45, v17, v31, v32, v33);
  sub_1000A1F54((uint64_t)v7, (uint64_t)&v12[v43[11]], &qword_10063A6C8);
  LOBYTE(v45) = 8;
  v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v17);
  v35 = &v12[v43[12]];
  *(_QWORD *)v35 = v34;
  v35[8] = v36 & 1;
  LOBYTE(v45) = 9;
  v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v17);
  LOBYTE(v17) = v38;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v42);
  v39 = &v12[v43[13]];
  *(_QWORD *)v39 = v37;
  v39[8] = v17 & 1;
  sub_100035DE8((uint64_t)v12, a2, type metadata accessor for ORDRequest);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v44);
  return sub_100035DAC((uint64_t)v12, type metadata accessor for ORDRequest);
}

uint64_t sub_10029F6FC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v3 = v1;
  v5 = sub_100004828(&qword_10063B180);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002C921C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ODNErrorInfo.CodingKeys, &type metadata for ODNErrorInfo.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v26 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v26, v5);
  if (!v2)
  {
    v13 = v3[1];
    v14 = *((unsigned __int8 *)v3 + 16);
    v25 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v25, v5);
    v15 = v3[3];
    v16 = v3[4];
    v24 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v24, v5);
    v17 = v3[5];
    v18 = v3[6];
    v23 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v23, v5);
    v19 = *((unsigned __int8 *)v3 + 56);
    v22 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029F88C()
{
  _BYTE *v0;

  if (*v0)
    return 0x656D737365737361;
  else
    return 0x6E6F6973726576;
}

uint64_t sub_10029F8D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C8168(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029F8F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C943C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029F920(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C943C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029F948@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028787C(a1, (uint64_t)&unk_10063B1F0, (uint64_t)sub_1002C943C, (uint64_t)&type metadata for AssessmentGUIDContainer.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1002C827C, a2);
}

uint64_t sub_10029F97C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063B200, (uint64_t (*)(void))sub_1002C943C, (uint64_t)&type metadata for AssessmentGUIDContainer.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

unint64_t sub_10029F9C4()
{
  char *v0;

  return sub_10029E6E0(*v0);
}

uint64_t sub_10029F9CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C8414(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029F9F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367630();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029FA18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100367630();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10029FA40@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1002C8554(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_10029FA8C(_QWORD *a1)
{
  return sub_10029E740(a1);
}

unint64_t sub_10029FACC()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000019;
  else
    return 0xD00000000000001ALL;
}

uint64_t sub_10029FB08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C8828(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029FB2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368364();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029FB54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100368364();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029FB7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10029EA74(a1, a2);
}

uint64_t sub_10029FB90(_QWORD *a1)
{
  return sub_10029E8D8(a1);
}

uint64_t sub_10029FBA4()
{
  unsigned __int8 *v0;

  return sub_10029ED18(*v0);
}

uint64_t sub_10029FBAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C8914(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029FBD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C9480();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029FBF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C9480();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029FC20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10029F144(a1, a2);
}

uint64_t sub_10029FC34(_QWORD *a1)
{
  return sub_10029EE38(a1);
}

uint64_t sub_10029FC48()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10029FC7C + 4 * byte_1005272F0[*v0]))(0x6F7272655F766469, 0xE900000000000072);
}

uint64_t sub_10029FC7C()
{
  return 0x6F7272655F6E646FLL;
}

uint64_t sub_10029FC90()
{
  return 0x776F6C666B726F77;
}

uint64_t sub_10029FCB0()
{
  return 0x6574617473;
}

uint64_t sub_10029FCC4()
{
  return 0x6D6F6365725F7369;
}

uint64_t sub_10029FCE8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C8D38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029FD0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C921C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029FD34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C921C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10029FD5C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_1002C8FA0(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_10029FDA4(_QWORD *a1)
{
  return sub_10029F6FC(a1);
}

uint64_t sub_10029FDB8()
{
  return 0x666F72705F617564;
}

uint64_t sub_10029FDD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x666F72705F617564 && a2 == 0xEB00000000656C69)
  {
    result = swift_bridgeObjectRelease(0xEB00000000656C69);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x666F72705F617564, 0xEB00000000656C69, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10029FE84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100363154();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029FEAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100363154();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029FED4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002A0048(a1, &qword_10063C3A0, (uint64_t (*)(void))sub_100363154, (uint64_t)&type metadata for GetProfileResponse.CodingKeys, a2);
}

uint64_t sub_10029FF00(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002A01A4(a1, a2, a3, &qword_10063CFD0, (uint64_t (*)(void))sub_100363154, (uint64_t)&type metadata for GetProfileResponse.CodingKeys);
}

uint64_t sub_10029FF2C()
{
  return 0x656D697473;
}

uint64_t sub_10029FF40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x656D697473 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease(0xE500000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656D697473, 0xE500000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10029FFCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100363198();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029FFF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100363198();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002A001C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002A0048(a1, &qword_10063C3B0, (uint64_t (*)(void))sub_100363198, (uint64_t)&type metadata for GetSTSResponse.CodingKeys, a2);
}

uint64_t sub_1002A0048@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v23 = a5;
  v24 = sub_100004828(a2);
  v9 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = a3();
  v15 = dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (v5)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v16 = v23;
  v17 = v24;
  v18 = KeyedDecodingContainer.decode(_:forKey:)(v15, v24);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v17);
  result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  *v16 = v18;
  v16[1] = v20;
  return result;
}

uint64_t sub_1002A0178(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002A01A4(a1, a2, a3, &qword_10063CFC8, (uint64_t (*)(void))sub_100363198, (uint64_t)&type metadata for GetSTSResponse.CodingKeys);
}

uint64_t sub_1002A01A4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t (*v20)(void);

  v20 = a5;
  v9 = sub_100004828(a4);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v6[1];
  v19 = *v6;
  v15 = a1[3];
  v14 = a1[4];
  sub_10000806C(a1, v15);
  v16 = v20();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v16, v15, v14);
  KeyedEncodingContainer.encode(_:forKey:)(v19, v13, v17, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1002A029C(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  char v27;
  char v28;
  char v29;

  v26[0] = a5;
  v8 = v5;
  v10 = sub_100004828(a2);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  sub_10000806C(a1, v15);
  v16 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v16, v15, v14);
  v17 = *v8;
  v18 = v8[1];
  v29 = 0;
  v19 = v26[1];
  KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v29, v10);
  if (!v19)
  {
    v20 = (void (*)(uint64_t, uint64_t, char *, uint64_t))v26[0];
    v21 = v8[2];
    v22 = v8[3];
    v28 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v28, v10);
    v23 = v8[4];
    v24 = v8[5];
    v27 = 2;
    v20(v23, v24, &v27, v10);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1002A03E4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v17 = a4;
  v8 = sub_100004828(&qword_10063C340);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = sub_100362F28();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TSIDContainer.CodingKeys, &type metadata for TSIDContainer.CodingKeys, v14, v12, v13);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v19, v8);
  if (!v4)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v18, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1002A050C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  uint64_t v19;
  _BYTE v20[2];
  char v21;
  char v22;
  char v23;

  HIDWORD(v19) = a4;
  v10 = sub_100004828(&qword_10063C4C0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 5];
  v14 = a1[3];
  v15 = a1[4];
  sub_10000806C(a1, v14);
  v16 = sub_100365098();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DUADataAug.CodingKeys, &type metadata for DUADataAug.CodingKeys, v16, v14, v15);
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v23, v10);
  if (!v5)
  {
    v17 = WORD2(v19);
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v22, v10, a5);
    v21 = v17 & 1;
    v20[1] = 2;
    sub_1003650DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21);
    v20[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(HIBYTE(v17), v20, v10);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1002A06AC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x5F6E6F6973736573;
  if (*v0 != 1)
    v1 = 0x65636E6F6E5F7374;
  if (*v0)
    return v1;
  else
    return 1684632436;
}

uint64_t sub_1002A0704@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C96F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A0728(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365054();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A0750(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365054();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002A0778@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1002C9840(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1002A07B8(_QWORD *a1)
{
  return sub_1002A029C(a1, &qword_10063C4B0, (uint64_t (*)(void))sub_100365054, (uint64_t)&type metadata for TSID.CodingKeys, (uint64_t)&KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t sub_1002A07EC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

uint64_t sub_1002A081C()
{
  _BYTE *v0;

  if (*v0)
    return 0x695F747365676964;
  else
    return 0x64616F6C796170;
}

uint64_t sub_1002A0860@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C9A74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A0884(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100362F28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A08AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100362F28();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002A08D4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1002C9B7C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1002A0900(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A03E4(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1002A091C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10036FF58();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002A0978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10036FF58();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002A09C4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002A09F4 + 4 * byte_1005272F5[*v0]))(0x617461645F617564, 0xE800000000000000);
}

uint64_t sub_1002A09F4()
{
  return 0x6E6F697461727564;
}

uint64_t sub_1002A0A08()
{
  return 0x7079745F6B736174;
}

unint64_t sub_1002A0A24()
{
  return 0xD000000000000010;
}

uint64_t sub_1002A0A40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002C9D0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A0A64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365098();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A0A8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365098();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1002A0AB4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  double v7;

  v7 = sub_1002C9ECC(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = v6 & 1;
    *(_BYTE *)(a2 + 25) = HIBYTE(v6);
  }
}

uint64_t sub_1002A0AF0(_QWORD *a1)
{
  uint64_t v1;

  return sub_1002A050C(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 24) | (*(unsigned __int8 *)(v1 + 25) << 8), *(double *)(v1 + 16));
}

uint64_t sub_1002A0B18(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002A0B58 + 4 * byte_1005272F9[a1]))(0x6E6F635F64697374, 0xEE0072656E696174);
}

uint64_t sub_1002A0B58()
{
  return 0x7364656573;
}

uint64_t sub_1002A0B6C()
{
  return 0x776F6C666B726F77;
}

uint64_t sub_1002A0B8C()
{
  return 0x617461645F617564;
}

uint64_t sub_1002A0BAC()
{
  return 0x6E6F6973726576;
}

unint64_t sub_1002A0BC4()
{
  return 0xD000000000000010;
}

unint64_t sub_1002A0BE0()
{
  return 0xD000000000000023;
}

uint64_t sub_1002A0C54()
{
  return 0x726F727265;
}

uint64_t sub_1002A0C68(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;

  v3 = v1;
  v5 = sub_100004828(&qword_10063B1D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002C92E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OTDRequest.CodingKeys, &type metadata for OTDRequest.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v41 = *v3;
  *(_QWORD *)&v42 = v12;
  v45 = 0;
  sub_1002C93B4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v41);
  if (!v2)
  {
    v13 = *(__int128 *)((char *)v3 + 40);
    v41 = *(__int128 *)((char *)v3 + 24);
    v42 = v13;
    v14 = *(__int128 *)((char *)v3 + 72);
    v43 = *(__int128 *)((char *)v3 + 56);
    v44 = v14;
    v45 = 1;
    v15 = sub_10027F044();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v45, v5, &type metadata for DIPClientGUIDSeeds, v15);
    v16 = *((_QWORD *)v3 + 11);
    v17 = *((_QWORD *)v3 + 12);
    LOBYTE(v41) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v41, v5);
    v18 = *((_QWORD *)v3 + 13);
    v19 = *((_QWORD *)v3 + 14);
    LOBYTE(v41) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v41, v5);
    v20 = *((_QWORD *)v3 + 15);
    LOBYTE(v41) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v41, v5);
    v21 = *((unsigned __int8 *)v3 + 128);
    LOBYTE(v41) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, &v41, v5);
    v22 = (int *)type metadata accessor for OTDRequest(0);
    v23 = (uint64_t)v3 + v22[10];
    LOBYTE(v41) = 6;
    v24 = sub_100004828(&qword_10063A7D8);
    v25 = sub_100099FFC(&qword_10063A808, &qword_10063A7D8, (uint64_t)&protocol conformance descriptor for EncryptedDataContainer<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, &v41, v5, v24, v25);
    v26 = (uint64_t *)((char *)v3 + v22[11]);
    v27 = *v26;
    v28 = *((unsigned __int8 *)v26 + 8);
    LOBYTE(v41) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v41, v5);
    v29 = (__int128 *)((char *)v3 + v22[12]);
    v30 = *((_QWORD *)v29 + 6);
    v31 = *((_BYTE *)v29 + 56);
    v32 = v29[1];
    v41 = *v29;
    v42 = v32;
    v43 = v29[2];
    *(_QWORD *)&v44 = v30;
    BYTE8(v44) = v31;
    v45 = 8;
    v33 = sub_1002C93F8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v45, v5, &type metadata for ODNErrorInfo, v33);
    v34 = (uint64_t *)((char *)v3 + v22[13]);
    v35 = *v34;
    v36 = *((unsigned __int8 *)v34 + 8);
    LOBYTE(v41) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, &v41, v5);
    v37 = (uint64_t *)((char *)v3 + v22[14]);
    v38 = *v37;
    v39 = v37[1];
    LOBYTE(v41) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, v39, &v41, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002A0FD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  char v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64;

  v54 = a2;
  v4 = sub_100004828(&qword_10063A7B8);
  __chkstk_darwin(v4);
  v6 = (uint64_t **)((char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56 = sub_100004828(&qword_10063B1B8);
  v7 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OTDRequest(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v13 + 15) = 2;
  v14 = &v13[*(int *)(v11 + 52)];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v58 = a1;
  v59 = v11;
  v15 = &v13[*(int *)(v11 + 56)];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v57 = v15;
  v17 = a1[3];
  v16 = a1[4];
  sub_10000806C(a1, v17);
  v18 = sub_1002C92E8();
  v55 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OTDRequest.CodingKeys, &type metadata for OTDRequest.CodingKeys, v18, v17, v16);
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v58);
    return swift_bridgeObjectRelease(*((_QWORD *)v57 + 1));
  }
  else
  {
    v52 = (uint64_t *)v14;
    v53 = v6;
    v19 = v7;
    v64 = 0;
    v20 = sub_1002C932C();
    v21 = v56;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v60, &type metadata for TSIDContainer, &v64, v56, &type metadata for TSIDContainer, v20);
    v22 = v61;
    *(_OWORD *)v13 = v60;
    *((_QWORD *)v13 + 2) = v22;
    v64 = 1;
    v23 = sub_10027FE24();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v60, &type metadata for DIPClientGUIDSeeds, &v64, v21, &type metadata for DIPClientGUIDSeeds, v23, v24);
    v25 = v61;
    *(_OWORD *)(v13 + 24) = v60;
    *(_OWORD *)(v13 + 40) = v25;
    v26 = v63;
    *(_OWORD *)(v13 + 56) = v62;
    *(_OWORD *)(v13 + 72) = v26;
    LOBYTE(v60) = 2;
    *((_QWORD *)v13 + 11) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v21);
    *((_QWORD *)v13 + 12) = v27;
    LOBYTE(v60) = 3;
    *((_QWORD *)v13 + 13) = KeyedDecodingContainer.decode(_:forKey:)(&v60, v21);
    *((_QWORD *)v13 + 14) = v28;
    LOBYTE(v60) = 4;
    *((_QWORD *)v13 + 15) = KeyedDecodingContainer.decode(_:forKey:)(&v60, v21, v29);
    LOBYTE(v60) = 5;
    v13[128] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v21);
    v30 = sub_100004828(&qword_10063A7D8);
    LOBYTE(v60) = 6;
    v31 = sub_100099FFC(&qword_10063A8D0, &qword_10063A7D8, (uint64_t)&protocol conformance descriptor for EncryptedDataContainer<A>);
    v32 = v53;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v53, v30, &v60, v21, v30, v31, v33);
    v34 = v59;
    sub_1000A1F54((uint64_t)v32, (uint64_t)&v13[*(int *)(v59 + 40)], &qword_10063A7B8);
    LOBYTE(v60) = 7;
    v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v21);
    v36 = &v13[*(int *)(v34 + 44)];
    *(_QWORD *)v36 = v35;
    v36[8] = v37 & 1;
    v64 = 8;
    v38 = sub_1002C9370();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v60, &type metadata for ODNErrorInfo, &v64, v21, &type metadata for ODNErrorInfo, v38, v39);
    v40 = v63;
    v41 = BYTE8(v63);
    v42 = &v13[*(int *)(v34 + 48)];
    v43 = v61;
    *(_OWORD *)v42 = v60;
    *((_OWORD *)v42 + 1) = v43;
    *((_OWORD *)v42 + 2) = v62;
    *((_QWORD *)v42 + 6) = v40;
    v42[56] = v41;
    LOBYTE(v60) = 9;
    v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v21);
    v45 = v52;
    *v52 = v44;
    *((_BYTE *)v45 + 8) = v46 & 1;
    LOBYTE(v60) = 10;
    v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v56);
    v49 = v48;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v55, v56);
    v50 = (uint64_t *)v57;
    swift_bridgeObjectRelease(*((_QWORD *)v57 + 1));
    *v50 = v47;
    v50[1] = v49;
    sub_100035DE8((uint64_t)v13, v54, type metadata accessor for OTDRequest);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v58);
    return sub_100035DAC((uint64_t)v13, type metadata accessor for OTDRequest);
  }
}

uint64_t sub_1002A15B0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(void), uint64_t a8, void (*a9)(uint64_t, uint64_t, char *, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v25 = a3;
  v22 = a4;
  v23 = a5;
  v24 = a2;
  v12 = sub_100004828(a6);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v17 = a1[4];
  sub_10000806C(a1, v16);
  v18 = a7();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a8, a8, v18, v16, v17);
  v28 = 0;
  v19 = v26;
  a9(v24, v25, &v28, v12);
  if (!v19)
  {
    v27 = 1;
    a9(v22, v23, &v27, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_1002A16D8()
{
  unsigned __int8 *v0;

  return sub_1002A0B18(*v0);
}

uint64_t sub_1002A16E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002CA0D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A1704(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C92E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A172C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002C92E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002A1754@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002A0FD4(a1, a2);
}

uint64_t sub_1002A1768(_QWORD *a1)
{
  return sub_1002A0C68(a1);
}

uint64_t sub_1002A177C()
{
  _BYTE *v0;

  if (*v0)
    return 0x727574616E676973;
  else
    return 0x64616F6C796170;
}

uint64_t sub_1002A17BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002CA590(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A17E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CC2AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A1808(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CC2AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002A1830@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028787C(a1, (uint64_t)&unk_10063B388, (uint64_t)sub_1002CC2AC, (uint64_t)&type metadata for IDSPACData.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1002CA68C, a2);
}

uint64_t sub_1002A1864(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A15B0(a1, *v1, v1[1], v1[2], v1[3], &qword_10063B398, (uint64_t (*)(void))sub_1002CC2AC, (uint64_t)&type metadata for IDSPACData.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_1002A18AC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23[8];
  _BYTE v24[8];

  v3 = v1;
  v5 = sub_100004828(&qword_10063B298);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002CAD08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccountAssessmentDeviceData.CodingKeys, &type metadata for AccountAssessmentDeviceData.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v23[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v23, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v23[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v23, v5);
    sub_1000A1F54((uint64_t)(v3 + 4), (uint64_t)v24, &qword_10063B2A0);
    sub_1000A1F54((uint64_t)v24, (uint64_t)v23, &qword_10063B2A0);
    v22 = 2;
    v16 = sub_100004828(&qword_10063B288);
    v17 = sub_10008F400(&qword_10063B2A8, &qword_10063B288, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, &v22, v5, v16, v17);
    v18 = v3[5];
    v19 = v3[6];
    v23[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, v23, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002A1A74()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002A1A9C + 4 * byte_100527304[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1002A1A9C()
{
  return 0x756E5F656E6F6870;
}

uint64_t sub_1002A1ABC()
{
  return 0x61636F6C5F737067;
}

uint64_t sub_1002A1ADC()
{
  return 1684628851;
}

uint64_t sub_1002A1AE8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002CA848(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A1B0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CAD08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A1B34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CAD08();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002A1B5C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1002CAA10(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1002A1BA8(_QWORD *a1)
{
  return sub_1002A18AC(a1);
}

Swift::Int sub_1002A1BE8(uint64_t a1, uint64_t a2)
{
  return sub_1002A1C00(a1, a2, 0x7375697265626974, 0xE800000000000000);
}

Swift::Int sub_1002A1C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  String.hash(into:)(v7, a3, a4);
  return Hasher._finalize()();
}

uint64_t sub_1002A1C4C(uint64_t a1)
{
  return String.hash(into:)(a1, 0x7375697265626974, 0xE800000000000000);
}

Swift::Int sub_1002A1C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002A1C7C(a1, a2, a3, 0x7375697265626974, 0xE800000000000000);
}

Swift::Int sub_1002A1C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, a4, a5);
  return Hasher._finalize()();
}

uint64_t sub_1002A1CC4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100602118;
  return sub_1002A1CD0(v2, a1, a2);
}

uint64_t sub_1002A1CD0@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  *a3 = v6 != 0;
  return result;
}

void sub_1002A1D1C(_QWORD *a1@<X8>)
{
  *a1 = 0x7375697265626974;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1002A1D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002CC2F0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002A1D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002CC2F0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002A1DE0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v3 = v1;
  v5 = sub_100004828(&qword_10063B2C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1002CAD4C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AugmentedProfile.CodingKeys, &type metadata for AugmentedProfile.CodingKeys, v11, v9, v10);
  v31 = 0;
  v12 = sub_100004828(&qword_100636840);
  v13 = sub_100099FFC(&qword_10063B2D0, &qword_100636840, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v31, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for AugmentedProfile(0);
    v15 = (uint64_t *)(v3 + v14[5]);
    v16 = *v15;
    v17 = v15[1];
    v30 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v30, v5);
    v18 = (uint64_t *)(v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    v29 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v29, v5);
    v21 = (uint64_t *)(v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    v28 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v28, v5);
    v24 = *(_QWORD *)(v3 + v14[8]);
    v27 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v24, &v27, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002A1FC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int *v44;
  char *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v41 = a2;
  v3 = sub_100004828(&qword_1006375E0);
  __chkstk_darwin(v3);
  v42 = (uint64_t *)((char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = sub_100004828(&qword_10063B2B0);
  v5 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for AugmentedProfile(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_100636840);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = &v10[v8[6]];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v44 = v8;
  v45 = v12;
  v13 = &v10[v8[7]];
  strcpy(v13, "LegacyUnknown");
  *((_WORD *)v13 + 7) = -4864;
  v46 = (uint64_t *)v13;
  v47 = a1;
  v14 = v8[8];
  *(_QWORD *)&v10[v14] = 0;
  v16 = a1[3];
  v15 = a1[4];
  sub_10000806C(a1, v16);
  v17 = sub_1002CAD4C();
  v18 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AugmentedProfile.CodingKeys, &type metadata for AugmentedProfile.CodingKeys, v17, v16, v15);
  if (v18)
  {
    v25 = v46;
    v26 = v45;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v47);
    sub_100008030((uint64_t)v10, &qword_1006375E0);
    swift_bridgeObjectRelease(*((_QWORD *)v26 + 1));
    return swift_bridgeObjectRelease(v25[1]);
  }
  else
  {
    v48 = v14;
    v19 = v5;
    v53 = 0;
    v20 = sub_100099FFC(&qword_10063B2C0, &qword_100636840, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v21 = v42;
    v22 = v43;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v42, v11, &v53, v43, v11, v20, v23);
    sub_100184E1C((uint64_t)v21, (uint64_t)v10, &qword_1006375E0);
    v52 = 1;
    v24 = KeyedDecodingContainer.decode(_:forKey:)(&v52, v22);
    v27 = (uint64_t *)&v10[v44[5]];
    *v27 = v24;
    v27[1] = v28;
    v51 = 2;
    v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v22);
    v31 = v30;
    v32 = v22;
    v33 = (uint64_t *)v45;
    swift_bridgeObjectRelease(*((_QWORD *)v45 + 1));
    *v33 = v29;
    v33[1] = v31;
    v50 = 3;
    v34 = KeyedDecodingContainer.decode(_:forKey:)(&v50, v32);
    v36 = v35;
    v37 = v46;
    swift_bridgeObjectRelease(v46[1]);
    *v37 = v34;
    v37[1] = v36;
    v49 = 4;
    v39 = KeyedDecodingContainer.decode(_:forKey:)(&v49, v43, v38);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v43);
    *(_QWORD *)&v10[v48] = v39;
    sub_100035DE8((uint64_t)v10, v41, type metadata accessor for AugmentedProfile);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v47);
    return sub_100035DAC((uint64_t)v10, type metadata accessor for AugmentedProfile);
  }
}

uint64_t sub_1002A23AC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1002A23E0 + 4 * byte_100527308[*v0]))(0xD000000000000010, 0x800000010055A310);
}

uint64_t sub_1002A23E0()
{
  return 0x656C69666F7270;
}

uint64_t sub_1002A23F8()
{
  return 0x49656C69666F7270;
}

uint64_t sub_1002A2424()
{
  return 0x6E6F6973726576;
}

uint64_t sub_1002A243C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002CAD90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A2460(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CAD4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A2488(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CAD4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002A24B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002A1FC8(a1, a2);
}

uint64_t sub_1002A24C4(_QWORD *a1)
{
  return sub_1002A1DE0(a1);
}

uint64_t sub_1002A24D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1003C12DC(*a1, *a2);
}

Swift::Int sub_1002A24E4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEC000000746E656DLL;
  v3 = 0x7373657373416F6ELL;
  if (v1 != 1)
  {
    v3 = 0x64656C6261736964;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6C616D726F6ELL;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1002A2588(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEC000000746E656DLL;
  v3 = 0x7373657373416F6ELL;
  if (*v1 != 1)
  {
    v3 = 0x64656C6261736964;
    v2 = 0xE800000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6C616D726F6ELL;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1002A2608(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEC000000746E656DLL;
  v4 = 0x7373657373416F6ELL;
  if (v2 != 1)
  {
    v4 = 0x64656C6261736964;
    v3 = 0xE800000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6C616D726F6ELL;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE600000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1002A26A8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100600B08;
  result = sub_1002CB008(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1002A26DC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xEC000000746E656DLL;
  v5 = 0x7373657373416F6ELL;
  if (v2 != 1)
  {
    v5 = 0x64656C6261736964;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6C616D726F6ELL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1002A2740@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1002A30E4(a1, &off_100600B08, a2);
}

uint64_t sub_1002A275C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10036A05C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1002A27A8(char *a1)
{
  sub_1003C17F8(*a1);
}

void sub_1002A27B4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1002A27FC()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x73656E755469, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_1002A2884()
{
  __asm { BR              X10 }
}

uint64_t sub_1002A28BC(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x73656E755469, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_1002A2930(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1002A2974()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x73656E755469, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

unint64_t sub_1002A29FC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100602150;
  result = sub_1002CAFC4(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1002A2A30()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1002A2A5C + 4 * byte_10052731C[*v0]))();
}

void sub_1002A2A5C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x73656E755469;
  a1[1] = v1;
}

void sub_1002A2A70(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x64726143656DLL;
  a1[1] = v1;
}

void sub_1002A2A84(_QWORD *a1@<X8>)
{
  *a1 = 0x6D754E656E6F6870;
  a1[1] = 0xEB00000000726562;
}

void sub_1002A2AA8(_QWORD *a1@<X8>)
{
  *a1 = 0x726F707075736E75;
  a1[1] = 0xEB00000000646574;
}

uint64_t sub_1002A2ACC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1002A2AEC(a1, 4, (uint64_t (*)(_BYTE *, uint64_t))sub_1002ACEC0, a2);
}

uint64_t sub_1002A2AEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t (*a3)(_BYTE *, uint64_t)@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  char v9;
  uint64_t result;
  _BYTE v11[40];

  sub_10002581C((uint64_t)a1, (uint64_t)v11);
  v9 = a3(v11, a2);
  result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  if (!v4)
    *a4 = v9;
  return result;
}

uint64_t sub_1002A2B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10036A16C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1002A2BB0(char *a1)
{
  sub_1003C19F0(*a1);
}

void sub_1002A2BBC()
{
  char *v0;

  sub_1003C2C58(0, *v0);
}

void sub_1002A2BC8()
{
  __asm { BR              X10 }
}

uint64_t sub_1002A2C04(uint64_t a1, uint64_t a2)
{
  String.hash(into:)(a1, a2, 0xEF64756F6C43692ELL);
  return swift_bridgeObjectRelease(0xEF64756F6C43692ELL);
}

void sub_1002A2CAC(uint64_t a1)
{
  char *v1;

  sub_1003C2C58(a1, *v1);
}

unint64_t sub_1002A2CB4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1006021E8;
  result = sub_100364A98(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1002A2CE8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1002A2D18 + 4 * byte_100527328[*v0]))();
}

void sub_1002A2D18(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  a1[1] = 0xEF64756F6C43692ELL;
}

void sub_1002A2D30(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  a1[1] = 0xEF73656E7554692ELL;
}

void sub_1002A2D48(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "CoreTelephony");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1002A2D70(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x797469746E656449;
  a1[1] = v1;
}

void sub_1002A2D88(_QWORD *a1@<X8>)
{
  *a1 = 0x64726143654DLL;
  a1[1] = 0xE600000000000000;
}

void sub_1002A2DA0(_QWORD *a1@<X8>)
{
  *a1 = 0x726F707075736E75;
  a1[1] = 0xEB00000000646574;
}

uint64_t sub_1002A2DC4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1002A2AEC(a1, 6, (uint64_t (*)(_BYTE *, uint64_t))sub_1002ACFB4, a2);
}

uint64_t sub_1002A2DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10036A128();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002A2E30(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1003C1BF8(*a1, *a2);
}

Swift::Int sub_1002A2E3C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0x800000010053A940;
  v3 = 0xD000000000000018;
  if (v1 != 1)
  {
    v3 = 0x6146737961776C61;
    v2 = 0xEE006B6361626C6CLL;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x746C7561666564;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1002A2EEC(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x800000010053A940;
  v3 = 0xD000000000000018;
  if (*v1 != 1)
  {
    v3 = 0x6146737961776C61;
    v2 = 0xEE006B6361626C6CLL;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x746C7561666564;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1002A2F78(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0x800000010053A940;
  v4 = 0xD000000000000018;
  if (v2 != 1)
  {
    v4 = 0x6146737961776C61;
    v3 = 0xEE006B6361626C6CLL;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x746C7561666564;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1002A3024@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1006022B0;
  result = sub_1002CB008(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1002A3058(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0x800000010053A940;
  v5 = 0xD000000000000018;
  if (v2 != 1)
  {
    v5 = 0x6146737961776C61;
    v4 = 0xEE006B6361626C6CLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x746C7561666564;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1002A30C8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1002A30E4(a1, &off_1006022B0, a2);
}

uint64_t sub_1002A30E4@<X0>(_QWORD *a1@<X0>, void *a2@<X3>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  Swift::OpaquePointer v7;
  char v8;
  uint64_t result;
  _QWORD v10[5];

  sub_10002581C((uint64_t)a1, (uint64_t)v10);
  v7._rawValue = a2;
  v8 = sub_1002AD0A8(v10, 0, v7);
  result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  if (!v3)
    *a3 = v8;
  return result;
}

uint64_t sub_1002A3154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10036A0E4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002A31A0(char *a1, char *a2)
{
  return sub_1003C197C(*a1, *a2);
}

Swift::Int sub_1002A31AC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 0x73656E755469;
  else
    v2 = 0x64756F6C4369;
  String.hash(into:)(v4, v2, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1002A3218(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 0x73656E755469;
  else
    v2 = 0x64756F6C4369;
  String.hash(into:)(a1, v2, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

Swift::Int sub_1002A3258(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 0x73656E755469;
  else
    v3 = 0x64756F6C4369;
  String.hash(into:)(v5, v3, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1002A32C0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100602318;
  return sub_10005D5D8(v2, a1, a2);
}

void sub_1002A32CC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x64756F6C4369;
  if (*v1)
    v2 = 0x73656E755469;
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1002A32FC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v5;
  uint64_t result;
  char v7;
  _QWORD v8[5];

  sub_10002581C((uint64_t)a1, (uint64_t)v8);
  v5 = sub_1002AD1B0(v8, 0);
  if (v2)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v7 = v5 & 1;
  result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  *a2 = v7;
  return result;
}

uint64_t sub_1002A3370(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1002A33AC + 4 * byte_10052732F[a1]))(0xD000000000000019, 0x800000010053A970);
}

unint64_t sub_1002A33AC()
{
  return 0xD000000000000011;
}

uint64_t sub_1002A33D4()
{
  return 0x74616E6974736564;
}

uint64_t sub_1002A33F4()
{
  return 0x5468736572666572;
}

uint64_t sub_1002A3414()
{
  uint64_t v0;

  return v0 - 1;
}

uint64_t sub_1002A343C()
{
  return 0x4F646E6553657375;
}

uint64_t sub_1002A3458()
{
  return 0x447972616D697270;
}

uint64_t sub_1002A3478()
{
  return 0x79546769666E6F63;
}

uint64_t sub_1002A3494()
{
  return 0x4F646E6553657375;
}

uint64_t sub_1002A34B4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1002A34F0 + 4 * byte_10052733A[a1]))(0xD000000000000019, 0x800000010053A970);
}

unint64_t sub_1002A34F0()
{
  return 0xD000000000000011;
}

uint64_t sub_1002A3518()
{
  return 0x74616E6974736564;
}

uint64_t sub_1002A3538()
{
  return 0x5468736572666572;
}

uint64_t sub_1002A3558()
{
  uint64_t v0;

  return v0 - 1;
}

uint64_t sub_1002A3580()
{
  return 0x4F646E6553657375;
}

uint64_t sub_1002A359C()
{
  return 0x447972616D697270;
}

uint64_t sub_1002A35BC()
{
  return 0x79546769666E6F63;
}

uint64_t sub_1002A35D8()
{
  return 0x4F646E6553657375;
}

uint64_t sub_1002A35F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10036A0A0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002A3644(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100061464(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1002A3370);
}

Swift::Int sub_1002A3650(uint64_t a1, uint64_t a2)
{
  return sub_1000614FC(a1, a2, (uint64_t (*)(uint64_t))sub_1002A3370);
}

uint64_t sub_1002A365C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006156C(a1, a2, a3, (uint64_t (*)(_QWORD))sub_1002A3370);
}

Swift::Int sub_1002A3668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000615B8(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1002A3370);
}

unint64_t sub_1002A3674@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1002CB04C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002A36A0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1002A3370(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1002A36C8()
{
  unsigned __int8 *v0;

  return sub_1002A34B4(*v0);
}

unint64_t sub_1002A36D0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1002CB04C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002A36F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CB9F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A371C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CB9F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002A3744(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  char v27;
  char v28;
  char v29;
  char v30;

  v7 = v4;
  v9 = sub_100004828(a2);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10000806C(a1, v13);
  v15 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v15, v13, v14);
  v16 = *v7;
  v17 = v7[1];
  v30 = 0;
  v18 = v26[1];
  KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v30, v9);
  if (!v18)
  {
    v19 = v7[2];
    v20 = v7[3];
    v29 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v29, v9);
    v21 = v7[4];
    v22 = v7[5];
    v28 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v28, v9);
    v23 = v7[6];
    v24 = v7[7];
    v27 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v24, &v27, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

__n128 sub_1002A38B0@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  _OWORD v8[2];

  sub_1002CB094(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v8[0];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 93) = *(_OWORD *)((char *)v8 + 13);
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1002A3900()
{
  return sub_1002CBC80();
}

uint64_t sub_1002A3914()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002A3940 + 4 * byte_100527345[*v0]))(6582895, 0xE300000000000000);
}

uint64_t sub_1002A3940@<X0>(uint64_t a1@<X8>)
{
  return a1 + 2048;
}

uint64_t sub_1002A3948()
{
  return 6581359;
}

unint64_t sub_1002A3954()
{
  return 0xD000000000000012;
}

uint64_t sub_1002A3970@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002CBDD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A3994(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CC224();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A39BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002CC224();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002A39E4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1002A3A10(a1, &qword_10063B358, (uint64_t (*)(void))sub_1002CC224, (uint64_t)&type metadata for AssessmentServerDestinations.CodingKeys, a2);
}

double sub_1002A3A10@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;

  sub_1002CBF44(a1, a2, a3, a4, (uint64_t *)v10);
  if (!v5)
  {
    v8 = v10[1];
    *a5 = v10[0];
    a5[1] = v8;
    result = *(double *)&v11;
    v9 = v12;
    a5[2] = v11;
    a5[3] = v9;
  }
  return result;
}

uint64_t sub_1002A3A5C(_QWORD *a1)
{
  return sub_1002A3744(a1, &qword_10063B368, (uint64_t (*)(void))sub_1002CC224, (uint64_t)&type metadata for AssessmentServerDestinations.CodingKeys);
}

uint64_t sub_1002A3A88(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  _OWORD v19[2];

  v3 = v1;
  v5 = sub_100004828(&qword_10063C580);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1003653C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GetRPEncryptionCertificateRequest.CodingKeys, &type metadata for GetRPEncryptionCertificateRequest.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v19[0] = *(_OWORD *)v3;
  v19[1] = v12;
  v18[15] = 0;
  sub_10036345C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v19);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 32);
    v14 = *(_QWORD *)(v3 + 40);
    LOBYTE(v19[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, v19, v5);
    v15 = *(_QWORD *)(v3 + 48);
    v16 = *(_QWORD *)(v3 + 56);
    LOBYTE(v19[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v19, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002A3BDC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x69746E6564497072;
  if (*v0 != 1)
    v1 = 0x72656469766F7270;
  if (*v0)
    return v1;
  else
    return 0x4874736575716572;
}

uint64_t sub_1002A3C50@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100363794(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A3C74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003653C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A3C9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003653C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002A3CC4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_100363930(a1, v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1002A3D04(_QWORD *a1)
{
  return sub_1002A3A88(a1);
}

uint64_t sub_1002A3D18(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  _OWORD v20[6];

  v3 = v1;
  v5 = sub_100004828(&qword_10063CC98);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100366F20();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GetRPEncryptionCertificateResponse.CodingKeys, &type metadata for GetRPEncryptionCertificateResponse.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 48);
  v20[2] = *(_OWORD *)(v3 + 32);
  v20[3] = v12;
  v13 = *(_OWORD *)(v3 + 80);
  v20[4] = *(_OWORD *)(v3 + 64);
  v20[5] = v13;
  v14 = *(_OWORD *)(v3 + 16);
  v20[0] = *(_OWORD *)v3;
  v20[1] = v14;
  v19 = 0;
  sub_1003684E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20);
  if (!v2)
  {
    v15 = *(_QWORD *)(v3 + 96);
    v16 = *(_QWORD *)(v3 + 104);
    LOBYTE(v20[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v20, v5);
    *(_QWORD *)&v20[0] = *(_QWORD *)(v3 + 112);
    v19 = 2;
    sub_100004828(&qword_1006368D0);
    sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002A3EC0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x45656D69746E7572;
  if (*v0 != 1)
    v1 = 0xD00000000000001ALL;
  if (*v0)
    return v1;
  else
    return 0x65736E6F70736572;
}

