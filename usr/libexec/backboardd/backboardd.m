void sub_100002D1C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKTetherController sharedInstance](BKTetherController, "sharedInstance"));
  if (objc_msgSend(v2, "isTethered"))
    objc_msgSend(v2, "noteInterfaceOrientationChangedWithInterfaceOrientation:", *(unsigned __int8 *)(a1 + 32));

}

void sub_100002D6C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKTetherController sharedInstance](BKTetherController, "sharedInstance"));
  **(_BYTE **)(a1 + 32) = objc_msgSend(v2, "isTethered");

}

void sub_100002E34(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint8_t v8[16];

  v1 = a1;
  v2 = qword_100117620;
  if (qword_100117620
    || (v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDSystemInterface sharedInstance](BKHIDSystemInterface, "sharedInstance")),
        v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "HIDSystemChannel")),
        v5 = (void *)qword_100117620,
        qword_100117620 = v4,
        v5,
        v3,
        (v2 = qword_100117620) != 0))
  {
    dispatch_mach_receive_barrier(v2, v1);
  }
  else
  {
    v6 = sub_1000599A0();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "BKHIDSystem HID server runloop not yet initialized", v8, 2u);
    }

  }
}

void sub_1000033B8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 v10;
  BOOL v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  unsigned __int8 v26;
  uint64_t v27;
  NSObject *v28;
  _BOOL4 v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  __int16 v33;
  _BYTE v34[10];
  __int16 v35;
  int v36;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
  v3 = BKLogDisplay();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = BSDeviceOrientationDescription(*(unsigned __int8 *)(a1 + 32));
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v31 = 138543362;
    v32 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "UpdateMirroredDisplayOrientationWithInterfaceOrientation:%{public}@ ", (uint8_t *)&v31, 0xCu);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[BKTetherController sharedInstance](BKTetherController, "sharedInstance"));
  v8 = objc_msgSend(v7, "isTethered");
  v9 = objc_msgSend(v7, "usesDisplayPortTethering");
  v10 = objc_msgSend(v2, "isSteveNoteRotationEnabled");
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11 || (v10 & 1) != 0)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "forceMirroredOrientation"));

    if (!v19)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[CAWindowServer serverIfRunning](CAWindowServer, "serverIfRunning"));
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "displays"));

      if (-[NSObject count](v13, "count"))
      {
        v15 = kCAWindowServerOrientation_Portrait;
        if (*(unsigned __int8 *)(a1 + 32) - 2 <= 2)
        {
          v23 = *(id *)*(&off_1000EA908 + (*(_BYTE *)(a1 + 32) - 2));

          v15 = v23;
        }
        v24 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectAtIndex:](v13, "objectAtIndex:", 0));
        v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "orientation"));
        v26 = -[NSObject isEqualToString:](v25, "isEqualToString:", v15);
        v27 = BKLogDisplay();
        v28 = objc_claimAutoreleasedReturnValue(v27);
        v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
        if ((v26 & 1) != 0)
        {
          if (v29)
          {
            v31 = 138543362;
            v32 = v15;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Ignoring request to update to same display interface orientation (%{public}@)", (uint8_t *)&v31, 0xCu);
          }

        }
        else
        {
          if (v29)
          {
            v31 = 138543618;
            v32 = v25;
            v33 = 2114;
            *(_QWORD *)v34 = v15;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Updating external display interface orientation from %{public}@ to %{public}@", (uint8_t *)&v31, 0x16u);
          }

          objc_msgSend(v24, "setOrientation:", v15);
        }

        goto LABEL_27;
      }
      v30 = BKLogDisplay();
      v15 = objc_claimAutoreleasedReturnValue(v30);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
LABEL_27:

        goto LABEL_28;
      }
      LOWORD(v31) = 0;
      v16 = "Ignoring request to update to same display interface orientation because there are no CADisplays";
      v17 = v15;
      v18 = 2;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v31, v18);
      goto LABEL_27;
    }
    v20 = BKLogDisplay();
    v13 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v21 = BSDeviceOrientationDescription(*(unsigned __int8 *)(a1 + 32));
      v15 = objc_claimAutoreleasedReturnValue(v21);
      v31 = 138543362;
      v32 = v15;
      v16 = "ignoring mirrored display orientation update to %{public}@ because (forceMirroredOrientation:YES)";
      v17 = v13;
      v18 = 12;
      goto LABEL_13;
    }
  }
  else
  {
    v12 = BKLogDisplay();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = BSDeviceOrientationDescription(*(unsigned __int8 *)(a1 + 32));
      v15 = objc_claimAutoreleasedReturnValue(v14);
      v31 = 138544130;
      v32 = v15;
      v33 = 1024;
      *(_DWORD *)v34 = 1;
      *(_WORD *)&v34[4] = 1024;
      *(_DWORD *)&v34[6] = 1;
      v35 = 1024;
      v36 = 0;
      v16 = "ignoring mirrored display orientation update to %{public}@ because (tethered:%{BOOL}u displayPortTethering:%"
            "{BOOL}u stevenoteRotationEnabled:%{BOOL}u)";
      v17 = v13;
      v18 = 30;
      goto LABEL_13;
    }
  }
LABEL_28:

}

void sub_100003774(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  _BKMousePointerServerClientRecord *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  _QWORD v16[5];

  v3 = a2;
  v4 = (id)objc_opt_self(BKSMousePointerServiceSessionSpecification);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "serviceQuality"));
  objc_msgSend(v3, "setServiceQuality:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "interface"));
  objc_msgSend(v3, "setInterface:", v6);

  objc_msgSend(v3, "setInterfaceTarget:", *(_QWORD *)(a1 + 32));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10001E390;
  v16[3] = &unk_1000E9A70;
  v16[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "setInterruptionHandler:", v16);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10001E450;
  v15[3] = &unk_1000E9A70;
  v15[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "setInvalidationHandler:", v15);
  v7 = objc_alloc_init(_BKMousePointerServerClientRecord);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "remoteProcess"));
  -[_BKMousePointerServerClientRecord setPID:](v7, "setPID:", objc_msgSend(v8, "pid"));
  v9 = objc_alloc_init((Class)NSMutableSet);
  v10 = BKPointerGlobalEventRoutingEntitlement;
  if (objc_msgSend(v8, "hasEntitlement:", BKPointerGlobalEventRoutingEntitlement))
    objc_msgSend(v9, "addObject:", v10);
  v11 = BKPointerRepositioningEntitlement;
  if (objc_msgSend(v8, "hasEntitlement:", BKPointerRepositioningEntitlement))
    objc_msgSend(v9, "addObject:", v11);
  v12 = BKPointerAutomationEntitlement;
  if (objc_msgSend(v8, "hasEntitlement:", BKPointerAutomationEntitlement))
    objc_msgSend(v9, "addObject:", v12);
  v13 = BKPointerPreferencesEntitlement;
  if (objc_msgSend(v8, "hasEntitlement:", BKPointerPreferencesEntitlement))
    objc_msgSend(v9, "addObject:", v13);
  v14 = BKPointerHitTestingEntitlement;
  if (objc_msgSend(v8, "hasEntitlement:", BKPointerHitTestingEntitlement))
    objc_msgSend(v9, "addObject:", v14);
  -[_BKMousePointerServerClientRecord setEntitlements:](v7, "setEntitlements:", v9);
  objc_msgSend(v3, "setUserInfo:", v7);
  objc_msgSend(v3, "setTargetQueue:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));

}

void sub_100003A40(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  int v9;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 48);
  if (*(_DWORD *)(v1 + 176) != v2)
  {
    *(_DWORD *)(v1 + 176) = v2;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(a1 + 40);
    v6 = *(void **)(v4 + 8);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100018B20;
    v7[3] = &unk_1000ECDF8;
    v7[4] = v4;
    v8 = v5;
    v9 = *(_DWORD *)(a1 + 48);
    objc_msgSend(v6, "updateStatistics:", v7);

  }
}

void sub_100003B20(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100025C20;
  v6[3] = &unk_1000EA030;
  v4 = v2;
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v6);

}

void sub_100003B94(uint64_t a1)
{
  id v2;
  id v3;
  id v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "_pidForClientPort:", *(unsigned int *)(a1 + 40));
  if ((_DWORD)v2 != -1)
  {
    v3 = v2;
    v4 = objc_alloc_init((Class)BKSTouchDeliveryUpdate);
    objc_msgSend(v4, "setType:", 1);
    objc_msgSend(v4, "setTouchIdentifier:", *(unsigned int *)(a1 + 44));
    objc_msgSend(v4, "setPid:", v3);
    objc_msgSend(v4, "setContextID:", *(unsigned int *)(a1 + 48));
    objc_msgSend(v4, "setIsDetached:", *(unsigned __int8 *)(a1 + 52));
    objc_msgSend(*(id *)(a1 + 32), "_queue_pendUpdate:", v4);

  }
}

void sub_100003C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100003C94(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10000632C;
  v3[3] = &unk_1000ECB38;
  v4 = v1;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v3);

}

void sub_100003DF0(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100004CEC;
  v2[3] = &unk_1000ECB10;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "appendCustomFormatWithName:block:", CFSTR("touchIDs"), v2);

}

void sub_100003F40(void *a1)
{
  _DWORD *v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  void *v5;
  _DWORD v6[2];

  v1 = a1;
  if (v1[6])
  {
    v2 = BKLogTouchEvents();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = v1[6];
      v6[0] = 67109120;
      v6[1] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "auth: exited slotID %X", (uint8_t *)v6, 8u);
    }

    v1[6] = 0;
    v5 = (void *)*((_QWORD *)v1 + 32);
    *((_QWORD *)v1 + 32) = 0;

  }
}

void sub_100004004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100004024(uint64_t a1, void *a2)
{
  _BOOL4 v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  CGRect v18;

  v17 = a2;
  objc_msgSend(v17, "rect");
  v3 = CGRectContainsPoint(v18, *(CGPoint *)(a1 + 56));
  v4 = v17;
  if (v3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(_QWORD *)(v5 + 24);
    if (!v6)
    {
      objc_msgSend(v17, "rect");
      v7 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
      v7[6] = v8;
      v7[7] = v9;
      v7[8] = v10;
      v7[9] = v11;
      objc_msgSend(v17, "_exclusiveTouchNormalizedSubRectInReferenceSpace");
      v12 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
      v12[6] = v13;
      v12[7] = v14;
      v12[8] = v15;
      v12[9] = v16;
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v6 = *(_QWORD *)(v5 + 24);
      v4 = v17;
    }
    *(_QWORD *)(v5 + 24) = v6 + 1;
  }

}

void sub_1000040BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100004174(uint64_t a1, uint64_t a2, double a3, float a4, float a5, float a6)
{
  void *v11;
  double v12;
  double v13;
  double v14;
  id v15;

  v15 = objc_msgSend(objc_alloc((Class)BSMachPortSendRight), "initWithPort:", a1);
  if (objc_msgSend(v15, "isUsable"))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[BKAccelerometerInterface sharedInstance](BKAccelerometerInterface, "sharedInstance"));
    *(float *)&v12 = a4;
    *(float *)&v13 = a5;
    *(float *)&v14 = a6;
    objc_msgSend(v11, "bksAccelerometerClientRequestedAccelerometerEvents:updateInterval:xThreshold:yThreshold:zThreshold:auditToken:", v15, a2, a3, v12, v13, v14);

  }
}

void sub_100004470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100004560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10000476C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
  v4 = objc_msgSend(v2, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v3));
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);

  objc_msgSend(v5, "setEventDispatchMode:ambiguityRecommendation:lastTouchTimestamp:forTouchStreamIdentifier:", *(unsigned __int8 *)(a1 + 44), *(unsigned __int8 *)(a1 + 45), *(unsigned int *)(a1 + 40), *(double *)(a1 + 32));
}

void sub_100004844(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000048D0(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;

  if (**(_BYTE **)(a1 + 32))
    v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v5 = 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
  v3 = objc_msgSend(v1, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  objc_msgSend(v4, "cancelTouchesOnDisplay:", v5);
}

void sub_100004CEC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  _QWORD *v8;
  _QWORD v9[3];
  char v10;

  v3 = a2;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  v10 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "touchIdentifiers"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100018DE4;
  v6[3] = &unk_1000ECAE8;
  v8 = v9;
  v5 = v3;
  v7 = v5;
  objc_msgSend(v4, "enumerateRangesUsingBlock:", v6);

  _Block_object_dispose(v9, 8);
}

void sub_100004DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100004EF8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  _BOOL8 v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v16;
  id v17;
  __int16 v18;
  id v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;

  v7 = a2;
  v8 = a3;
  if (sub_10001261C(v7, a4)
    || (v9 = +[BKSecurityManager hasEntitlement:forAuditToken:](BKSecurityManager, "hasEntitlement:forAuditToken:", v8, a4))&& (v10 = (void *)objc_claimAutoreleasedReturnValue(+[BKSystemShellSentinel sharedInstance](BKSystemShellSentinel, "sharedInstance")), v11 = objc_msgSend(v10, "auditTokenRepresentsSystemApp:", a4), v10, (v11 & 1) != 0))
  {
    v12 = 1;
  }
  else
  {
    v13 = BKLogCommon(v9);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v16 = 138544130;
      v17 = v8;
      v18 = 2114;
      v19 = v7;
      v20 = 2082;
      v21 = a1;
      v22 = 1024;
      v23 = BSPIDForAuditToken(a4);
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Only system apps with entitlement %{public}@ or processes with entitlement %{public}@ may use %{public}s; ignori"
        "ng request from pid %d",
        (uint8_t *)&v16,
        0x26u);
    }

    v12 = 0;
  }

  return v12;
}

BKTouchContact *sub_100005058(int64_t a1, uint64_t a2)
{
  BKTouchContact *v4;
  BKTouchContact *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  _DWORD v10[2];
  __int16 v11;
  int v12;

  v4 = objc_alloc_init(BKTouchContact);
  v5 = v4;
  if ((dword_100117568 + 1) > 1)
    v6 = dword_100117568 + 1;
  else
    v6 = 1;
  dword_100117568 = v6;
  v4->_pathIndex = a1;
  v4->_touchIdentifier = v6;
  v4->_transducerType = IOHIDEventGetIntegerValue(a2, 720900);
  v7 = BKLogTouchEvents();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v10[0] = 67109376;
    v10[1] = a1;
    v11 = 1024;
    v12 = dword_100117568;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "new contact for pathIndex: %d touchID: %X", (uint8_t *)v10, 0xEu);
  }

  return v5;
}

void sub_100005164(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100005270(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  if (a1)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v3 = (id *)(a1 + 280);
    v4 = *(id *)(a1 + 280);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v11;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v11 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v8);
          if (v9)
            objc_msgSend(*(id *)(v9 + 24), "removeObject:", *v3, (_QWORD)v10);
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v6);
    }

    objc_storeStrong(v3, a2);
  }
}

BKHIDUISensorConfiguringService *__cdecl sub_1000055DC(id a1, BKIOHIDService *a2)
{
  BKIOHIDService *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  unsigned int v10;
  __objc2_class **v11;
  id v12;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[BKIOHIDService propertyForKey:](v2, "propertyForKey:", CFSTR("NeedsHostState")));
  v5 = objc_opt_class(NSNumber, v4);
  v6 = v3;
  v7 = v6;
  if (v5)
  {
    if ((objc_opt_isKindOfClass(v6, v5) & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  v9 = v8;

  v10 = objc_msgSend(v9, "BOOLValue");
  v11 = off_1000E8B30;
  if (!v10)
    v11 = &off_1000E8B40;
  v12 = objc_msgSend(objc_alloc(*v11), "initWithIOHIDService:", v2);

  return (BKHIDUISensorConfiguringService *)v12;
}

id sub_1000056A4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  int v9;
  void *v10;
  __int16 v11;
  id v12;

  v3 = a2;
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) + 16))();
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
  {
    v6 = BKLogUISensor();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138543618;
      v10 = v5;
      v11 = 2114;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "instantiated %{public}@ for service:%{public}@", (uint8_t *)&v9, 0x16u);
    }

    objc_msgSend(v3, "addDisappearanceObserver:queue:", *(_QWORD *)(a1 + 32), &_dispatch_main_q);
  }

  return v5;
}

void sub_10000579C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;

  v10 = *(_QWORD **)(a1 + 40);
  if (v10)
    v10 = (_QWORD *)v10[2];
  v14 = v10;
  sub_1000123E4((double *)a1, a3, v14);

  if (a4)
    v11 = *(unsigned int *)(a4 + 8);
  else
    v11 = 0;
  v15 = (id)objc_claimAutoreleasedReturnValue(+[BKSHIDEventDeferringToken tokenForIdentifierOfCAContext:](BKSHIDEventDeferringToken, "tokenForIdentifierOfCAContext:", v11));
  objc_msgSend(a3, "setToken:");

  objc_msgSend(a3, "setInitialTouchTimestamp:", a5);
  objc_msgSend(a3, "setActiveModifiers:", *(_QWORD *)(a1 + 104));
  BKSHIDEventSetAttributes(a2, a3);
  v12 = sub_1000121FC(*(_QWORD *)(a1 + 184));
  v16 = (id)objc_claimAutoreleasedReturnValue(v12);
  sub_100012240(a1, (uint64_t)v16);
  if (a4)
    v13 = *(unsigned int *)(a4 + 12);
  else
    v13 = 0;
  objc_msgSend(*(id *)(a1 + 48), "sendEvent:toClientTaskPort:", a2, v13);

}

void sub_1000058A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double sub_1000058C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  void *v11;

  objc_msgSend(*(id *)a3, "convertReferenceLocation:toCAScreenLocationForDisplayUUID:", *(_QWORD *)(a3 + 8), *(double *)(a3 + 56), *(double *)(a3 + 64));
  v7 = v6;
  v9 = v8;
  v10 = sub_100005968((uint64_t)BKDisplayController, *(unsigned __int8 *)(a3 + 89), a2 != 0, 0, *(void **)(a3 + 16));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  objc_msgSend(*(id *)a3, "contextIDAtCAScreenLocation:displayUUID:options:securityAnalysis:results:", *(_QWORD *)(a3 + 8), v11, a2, a1, v7, v9);

  return v7;
}

void sub_100005958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100005968(uint64_t a1, int a2, int a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v9 = a4;
  v10 = a5;
  objc_opt_self(a1);
  v11 = objc_msgSend(v9, "hitTestInformationMask");
  v12 = objc_msgSend(v10, "count");
  v13 = (uint64_t)v12;
  if ((a2 & 1) != 0 || v11 || v12 || a3)
  {
    v15 = objc_alloc_init((Class)NSMutableDictionary);
    v14 = v15;
    if (v11)
    {
      if ((v11 & 2) != 0)
        objc_msgSend(v15, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kCAWindowServerHitTestCumulativeOpacity);
      if ((v11 & 0x31) != 0)
        objc_msgSend(v14, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kCAWindowServerHitTestCumulativeTransform);
      if ((v11 & 4) != 0)
        objc_msgSend(v14, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kCAWindowServerHitTestIsInsecureFiltered);
      if ((v11 & 8) != 0)
      {
        objc_msgSend(v14, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kCAWindowServerHitTestWantsLayerBackgroundStatistics);
        v16 = (unint64_t)objc_msgSend(v9, "backgroundStatisticsRegion");
        v17 = HIWORD(v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v16));
        objc_msgSend(v14, "setObject:forKeyedSubscript:", v18, kCAWindowServerHitTestLayerBackgroundTopEdgeInset);

        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD1(v16)));
        objc_msgSend(v14, "setObject:forKeyedSubscript:", v19, kCAWindowServerHitTestLayerBackgroundLeftEdgeInset);

        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD2(v16)));
        objc_msgSend(v14, "setObject:forKeyedSubscript:", v20, kCAWindowServerHitTestLayerBackgroundBottomEdgeInset);

        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v17));
        objc_msgSend(v14, "setObject:forKeyedSubscript:", v21, kCAWindowServerHitTestLayerBackgroundRightEdgeInset);

        objc_msgSend(v9, "backgroundStatisticsForeground");
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:"));
        objc_msgSend(v14, "setObject:forKeyedSubscript:", v22, CFSTR("hitTestBackgroundForeground"));

        objc_msgSend(v9, "backgroundStatisticsPassingContrast");
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:"));
        objc_msgSend(v14, "setObject:forKeyedSubscript:", v23, CFSTR("hitTestBackgroundPassingContrast"));

        objc_msgSend(v9, "backgroundStatisticsFailingContrast");
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:"));
        objc_msgSend(v14, "setObject:forKeyedSubscript:", v24, CFSTR("hitTestBackgroundFailingContrast"));

      }
    }
    if (a3)
      objc_msgSend(v14, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kCAWindowServerHitTestWantsContextSecurityAnalysis);
    if (a2)
      objc_msgSend(v14, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kCAWindowServerHitTestIgnoreBlankingContext);
    if (v13 >= 1)
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v10, kCAWindowServerHitTestOptionExcludedContextIds);
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_100005C70(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  id self;
  id selfa;
  id selfb;
  _QWORD v12[5];

  v2 = *(void **)(a1 + 32);
  self = *(id *)(a1 + 40);
  v3 = objc_msgSend(self, "length");
  v4 = (void *)BKSDisplayUUIDMainKey;
  if (v3)
    v4 = self;
  v5 = v4;

  selfa = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_displayInfoForDisplay:createIfNeeded:", v5, 1));
  if (selfa)
    objc_setProperty_nonatomic_copy(selfa, v6, *(id *)(a1 + 48), 32);
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10000CF10;
  v12[3] = &unk_1000EB140;
  v12[4] = *(_QWORD *)(a1 + 48);
  objc_msgSend(v7, "_queue_enumerateDigitizersForDisplay:usingBlock:", v8, v12, selfa);

}

void sub_100005D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_100005F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100006084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000060C4(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6;
  void *v7;
  void *v8;
  id v9;

  v6 = a2;
  v7 = *(void **)(a1 + 32);
  v9 = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "sendRight"));
  LODWORD(v7) = objc_msgSend(v7, "matchesPortOfRight:", v8);

  if ((_DWORD)v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }

}

_DWORD *sub_100006150(_DWORD *result, uint64_t a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  __int16 v7;
  double v8;
  double v9;
  double v10;
  _QWORD v11[10];

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v9 = 0.0;
    v10 = 0.0;
    v8 = 0.0;
    v7 = 0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10000FBA8;
    v11[3] = &unk_1000EA5A0;
    v11[4] = &v10;
    v11[5] = &v9;
    v11[6] = &v8;
    v11[7] = (char *)&v7 + 1;
    v11[8] = 0;
    v11[9] = &v7;
    sub_10000FA60(v11);
    v3 = v10;
    v4 = v9;
    *(float *)(a2 + 36) = v3;
    *(float *)(a2 + 40) = v4;
    v5 = v8;
    *(float *)(a2 + 44) = v5;
    v6 = BSDegreesToRadians((double)(90 * HIBYTE(v7)));
    *(float *)(a2 + 48) = v6;
    *(_BYTE *)(a2 + 52) = v7;
    result = (_DWORD *)sub_100006268();
    *(_BYTE *)(a2 + 56) = (_BYTE)result;
    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 60;
  }
  return result;
}

BOOL sub_100006268()
{
  _BOOL8 v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  id v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3032000000;
  v6 = sub_1000348CC;
  v7 = sub_1000348DC;
  v8 = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100016E40;
  v2[3] = &unk_1000EA580;
  v2[4] = &v3;
  sub_10000FA60(v2);
  v0 = v4[5] == 0;
  _Block_object_dispose(&v3, 8);

  return v0;
}

void sub_100006314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000632C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  unsigned int *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v5 = a3;
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "processDescription"));
  if (v6)
    v8 = v6[2];
  else
    v8 = 0;

  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringByAppendingFormat:", CFSTR(" contextID %X"), v8));
  v9 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100003DF0;
  v12[3] = &unk_1000ECD80;
  v13 = v9;
  v14 = v5;
  v10 = v5;
  objc_msgSend(v13, "appendBodySectionWithName:openDelimiter:closeDelimiter:block:", v11, CFSTR("{"), CFSTR("}"), v12);

}

void sub_100006778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100006990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_100006DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100006ED8(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  id *v9;
  const void *DigitizerEvent;
  id v11;
  id v12;
  int v13;
  uint8_t buf[4];
  int v15;

  if (a1)
  {
    v6 = BKLogTouchEvents();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      if (a2)
        v13 = *(_DWORD *)(a2 + 8);
      else
        v13 = 0;
      *(_DWORD *)buf = 67109120;
      v15 = v13;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "SGP: Sending no longer possible to latent client: %x", buf, 8u);
    }

    objc_msgSend(a1[18], "removeObject:", a2);
    v8 = mach_absolute_time();
    v9 = a1;
    DigitizerEvent = (const void *)IOHIDEventCreateDigitizerEvent(0, v8, 3, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0x4400000000);
    v11 = v9[1];
    IOHIDEventSetSenderID(DigitizerEvent, objc_msgSend(v11, "senderID"));

    IOHIDEventSetIntegerValue(DigitizerEvent, 720921, *((unsigned __int8 *)v9 + 206));
    IOHIDEventSetIntegerValue(DigitizerEvent, 4, *((unsigned __int8 *)v9 + 207));

    v12 = objc_alloc_init((Class)BKSHIDEventDigitizerAttributes);
    objc_msgSend(v12, "setSystemGestureStateChange:", 1);
    objc_msgSend(v12, "setTouchStreamIdentifier:", a3);
    sub_10000579C((uint64_t)v9, (uint64_t)DigitizerEvent, v12, a2, *((double *)v9 + 12));
    CFRelease(DigitizerEvent);

  }
}

void sub_100007098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000072E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000077A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100007DE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1000081BC(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100096484;
  v8[3] = &unk_1000ED178;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v9 = v4;
  v10 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "matchSharingTouchesPolicy:orCancelTouchesPolicy:orCombinedPolicy:", v8, &stru_1000ED1B8, &stru_1000ED1D8));

  return v6;
}

id sub_100008250(uint64_t a1, void *a2)
{
  _QWORD v3[5];
  int v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100096448;
  v3[3] = &unk_1000ED260;
  v4 = *(_DWORD *)(a1 + 40);
  v3[4] = *(_QWORD *)(a1 + 32);
  return (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "matchSharingTouchesPolicy:orCancelTouchesPolicy:orCombinedPolicy:", &stru_1000ED240, v3, &stru_1000ED280));
}

id sub_1000082C4(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v1 = a1;
  v2 = (uint64_t)objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v3)
          objc_enumerationMutation(v1);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * i), "BOOLValue", (_QWORD)v7) & 1) != 0)
        {
          v2 = 1;
          goto LABEL_11;
        }
      }
      v2 = (uint64_t)objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_11:

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v2));
  return v5;
}

id sub_1000083D8(id a1, NSArray *a2)
{
  return sub_1000082C4(a2);
}

id sub_1000083E0(id a1, NSArray *a2)
{
  return sub_1000082C4(a2);
}

void sub_1000083E8(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _OWORD v11[2];

  if ((*(_DWORD *)a1 & 0x80000000) == 0)
    goto LABEL_2;
  v3 = -304;
  if (*(_DWORD *)(a1 + 24) != 1)
    goto LABEL_3;
  v5 = *(unsigned int *)(a1 + 4);
  if (v5 < 0x40 || v5 > 0x440)
    goto LABEL_3;
  if (*(_BYTE *)(a1 + 39) != 1)
    goto LABEL_17;
  v6 = *(_DWORD *)(a1 + 60);
  v3 = -304;
  if (v6 > 0x400 || (int)v5 - 64 < v6)
    goto LABEL_3;
  if ((_DWORD)v5 != ((v6 + 3) & 0xFFFFFFFC) + 64)
    goto LABEL_2;
  v7 = *(_DWORD *)(a1 + 40);
  if (v7 != *(_DWORD *)(a1 + 52))
  {
LABEL_17:
    v3 = -300;
    goto LABEL_3;
  }
  if (!memchr((void *)(a1 + 64), 0, v5 - 64))
  {
LABEL_2:
    v3 = -304;
    goto LABEL_3;
  }
  v8 = ((v5 + 3) & 0x1FFFFFFFCLL) + a1;
  if (!*(_DWORD *)v8 && *(_DWORD *)(v8 + 4) > 0x1Fu)
  {
    v9 = *(_QWORD *)(a1 + 28);
    v10 = *(_OWORD *)(v8 + 36);
    v11[0] = *(_OWORD *)(v8 + 20);
    v11[1] = v10;
    *(_DWORD *)(a2 + 32) = sub_100008534(v9, v7, a1 + 64, (uint64_t)v11);
    mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
    *(_QWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    return;
  }
  v3 = -309;
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

uint64_t sub_100008534(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[6];
  int v6;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000085B0;
  v5[3] = &unk_1000EA820;
  v6 = a2;
  v5[4] = a3;
  v5[5] = a1;
  if (!sub_10001261C(BKBackBoardClientEntitlement, a4))
    return 5;
  sub_1000085B0((uint64_t)v5);
  return 0;
}

void sub_1000085B0(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSSet *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint8_t buf[16];

  if (**(_BYTE **)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v2 = 0;
  if (*(_DWORD *)(a1 + 48) && *(_QWORD *)(a1 + 40))
  {
    v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), 0);
    v5 = objc_opt_class(NSArray, v4);
    v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(BKSHitTestRegion, v6), 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSObject bs_secureObjectFromData:ofClasses:](NSObject, "bs_secureObjectFromData:ofClasses:", v3, v8));

    if (v9)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
      v13 = objc_msgSend(v11, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v12));
      v14 = objc_claimAutoreleasedReturnValue(v13);

      -[NSObject setHitTestRegions:forDisplay:](v14, "setHitTestRegions:forDisplay:", v9, v2);
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
      v17 = objc_msgSend(v15, "eventProcessorOfClass:", objc_opt_class(BKHIDMousePointerEventProcessor, v16));
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "mousePointerController"));
      objc_msgSend(v19, "hitTestRegionsDidChange:forDisplayUUID:", v9, v2);

    }
    else
    {
      v20 = BKLogCommon(v10);
      v14 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Error unarchiving hittestRegions", buf, 2u);
      }
    }

  }
}

void sub_1000088FC(uint64_t a1, void *a2)
{
  id v3;
  NSObject **WeakRetained;
  NSObject **v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  NSObject **v9;

  v3 = a2;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = WeakRetained[7];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10000F1C8;
    v7[3] = &unk_1000ECD80;
    v8 = v3;
    v9 = v5;
    dispatch_async(v6, v7);

  }
}

id sub_1000089A4(id a1, BKEventStatistic *a2)
{
  BKEventStatistic *v2;
  BKEventStatistic *v3;

  v2 = a2;
  if (-[BKEventStatistic needsLogging](v2, "needsLogging"))
    v3 = v2;
  else
    v3 = 0;

  return v3;
}

void sub_1000089EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  mach_msg_header_t *msg;
  uint64_t v7;

  v5 = a3;
  v7 = a1;
  if (a2 == 2 && (dispatch_mach_mig_demux(0, &v7, 1, v5) & 1) == 0)
  {
    msg = (mach_msg_header_t *)dispatch_mach_msg_get_msg(v5, 0);
    mach_msg_destroy(msg);
  }

}

void sub_100008BF0(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "primaryUsagePage");
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "primaryUsage");
  v4 = *(void **)(a1 + 40);
  if ((_DWORD)v2 == 13)
  {
    v5 = ((_DWORD)v3 - 1);
    if (v5 < 0x21 && ((0x180001FFFuLL >> (v3 - 1)) & 1) != 0)
      v6 = (uint64_t)*(&off_1000EC580 + v5);
    else
      v6 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown digitizer usage: %X)"), v3));
    v19 = (id)v6;
    objc_msgSend(v4, "appendString:withName:", v6, 0);
  }
  else
  {
    v19 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(0x%X / 0x%X)"), v2, v3));
    objc_msgSend(v4, "appendString:withName:");
  }

  v20 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "senderDescriptor"));
  v7 = objc_msgSend(v20, "hardwareType");

  v8 = *(void **)(a1 + 40);
  v9 = NSStringFromBKSHIDEventHardwareType(v7);
  v21 = (id)objc_claimAutoreleasedReturnValue(v9);
  objc_msgSend(v8, "appendString:withName:");

  v10 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v10 + 205))
  {
    objc_msgSend(*(id *)(a1 + 40), "appendString:withName:", CFSTR("preciseLocations"), 0);
    v10 = *(_QWORD *)(a1 + 32);
  }
  if (v7 == (id)2)
  {
    v11 = objc_msgSend(*(id *)(a1 + 40), "appendBool:withName:", objc_msgSend(*(id *)(v10 + 8), "isAuthenticated"), CFSTR("authenticated"));
    v10 = *(_QWORD *)(a1 + 32);
  }
  v12 = *(void **)(a1 + 40);
  v22 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v10 + 8), "displayUUID"));
  objc_msgSend(v12, "appendString:withName:skipIfEmpty:");

  v13 = objc_msgSend(*(id *)(a1 + 40), "appendUInt64:withName:format:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "senderID"), CFSTR("senderID"), 1);
  v14 = objc_msgSend(*(id *)(a1 + 40), "appendObject:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112), CFSTR("contacts"));
  v15 = *(void **)(a1 + 40);
  v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "allValues"));
  v16 = objc_msgSend(v15, "appendObject:withName:");

  v17 = objc_msgSend(*(id *)(a1 + 40), "appendObject:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144), CFSTR("latentSystemGestureDestinations"));
  v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "reasons"));
  if (objc_msgSend(v24, "count"))
    v18 = objc_msgSend(*(id *)(a1 + 40), "appendObject:withName:", v24, CFSTR("suppressTouchesAssertion"));

}

void sub_100008EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_100009154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000093C0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_10000967C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100009D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100009EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v6;
  BKTouchAnnotationController *v7;
  BKTouchAnnotationController *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  BKTouchAnnotationController *v16;
  void *v17;
  unsigned __int8 v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t v27[128];
  uint8_t buf[4];
  void *v29;

  if (a1)
  {
    v6 = (id *)(a1 + 80);
    v7 = (BKTouchAnnotationController *)*(id *)(a1 + 80);
    v8 = v7;
    if ((a2 & 1) != 0 || (_DWORD)a3)
    {
      if (!v7)
      {
        v13 = sub_1000598B8();
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "displayUUID"));
          *(_DWORD *)buf = 138543362;
          v29 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "annotations enabled for %{public}@", buf, 0xCu);

        }
        v16 = [BKTouchAnnotationController alloc];
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "displayUUID"));
        v8 = -[BKTouchAnnotationController initWithDisplayUUID:](v16, "initWithDisplayUUID:", v17);

        objc_msgSend(*(id *)(a1 + 72), "addObject:", v8);
        objc_storeStrong(v6, v8);
      }
      -[BKTouchAnnotationController setShouldVisualizeTouches:](v8, "setShouldVisualizeTouches:", a2);
      v18 = -[BKTouchAnnotationController shouldVisualizeHitTestRegions](v8, "shouldVisualizeHitTestRegions");
      -[BKTouchAnnotationController setShouldVisualizeHitTestRegions:](v8, "setShouldVisualizeHitTestRegions:", a3);
      if ((v18 & 1) == 0)
      {
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v19 = *(id *)(a1 + 72);
        v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
        if (v20)
        {
          v21 = *(_QWORD *)v24;
          do
          {
            v22 = 0;
            do
            {
              if (*(_QWORD *)v24 != v21)
                objc_enumerationMutation(v19);
              objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v22), "hitTestRegionsDidChange:", *(_QWORD *)(a1 + 176), (_QWORD)v23);
              v22 = (char *)v22 + 1;
            }
            while (v20 != v22);
            v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
          }
          while (v20);
        }

      }
    }
    else if (v7)
    {
      v9 = sub_1000598B8();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "displayUUID"));
        *(_DWORD *)buf = 138543362;
        v29 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "annotations disabled for %{public}@", buf, 0xCu);

      }
      v12 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = 0;

      objc_msgSend(*(id *)(a1 + 72), "removeObject:", v8);
      -[BKTouchAnnotationController setShouldVisualizeTouches:](v8, "setShouldVisualizeTouches:", 0);
      -[BKTouchAnnotationController setShouldVisualizeHitTestRegions:](v8, "setShouldVisualizeHitTestRegions:", 0);
    }

  }
}

void sub_10000A158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000A1B8(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  int v10;
  _OWORD v11[2];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
    goto LABEL_7;
  }
  v4 = a1[6];
  v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v6 = *(_OWORD *)(v3 + 9);
  v11[0] = *(_OWORD *)(v3 + 5);
  v11[1] = v6;
  v7 = sub_10001261C(BKDisplayBrightnessEntitlement, (uint64_t)v11);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  v9 = v8;
  if (v7)
    objc_msgSend(v8, "brightnessLevel");
  else
    objc_msgSend(v8, "unentitledBrightnessLevel");
  *(_DWORD *)(a2 + 36) = v10;

  *(_DWORD *)(a2 + 32) = 0;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  *(_DWORD *)(a2 + 4) = 40;
}

void sub_10000A29C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  _QWORD v8[5];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 76);
  v7[0] = *(_OWORD *)(a1 + 60);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10000A388;
  v8[3] = &unk_1000EBC38;
  v8[4] = v4;
  if (sub_10000A40C((uint64_t)"_BKHIDXXSetMinimumBrightnessLevelWithFadeDuration", BKBackBoardClientEntitlement, (uint64_t)v7))
  {
    sub_10000A388((uint64_t)v8);
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
}

void sub_10000A388(uint64_t a1)
{
  double v2;
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  LODWORD(v2) = *(_DWORD *)(a1 + 32);
  LODWORD(v3) = *(_DWORD *)(a1 + 36);
  objc_msgSend(v4, "setMinimumBrightnessLevel:fadeDuration:", v2, v3);

}

id sub_10000A40C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  int v11;
  id v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;

  v5 = a2;
  v6 = sub_1000125C8(v5, a3);
  v7 = v6;
  if ((v6 & 1) == 0)
  {
    v8 = BKLogCommon(v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = 138543874;
      v12 = v5;
      v13 = 2082;
      v14 = a1;
      v15 = 1024;
      v16 = BSPIDForAuditToken(a3);
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Only system apps with entitlement %{public}@ may use %{public}s; ignoring request from pid %d",
        (uint8_t *)&v11,
        0x1Cu);
    }

  }
  return v7;
}

void sub_10000A674(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  int v10;
  id v11;
  __int16 v12;
  void *v13;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = BKLogBacklight();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", v5));
      v10 = 138543618;
      v11 = v6;
      v12 = 2114;
      v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Set BrightnessSystem property:%{public}@ to:%{public}@", (uint8_t *)&v10, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 96), "setProperty:forKey:", v5, v6);
  }

}

void sub_10000A810(uint64_t a1, id *a2)
{
  uint64_t v2;
  id *v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
    a2 = (id *)a2[2];
  v3 = a2;
  (*(void (**)(uint64_t))(v2 + 16))(v2);

}

void sub_10000A878(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  id *v13;
  uint64_t IntegerValue;
  int v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  int v19;

  if (a2)
    v7 = *(unsigned int *)(a2 + 8);
  else
    v7 = 0;
  v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "shouldCancelTouchesDeliveredToContextId:withInitialTouchTimestamp:", v7, *(double *)(*(_QWORD *)(a1 + 32) + 96));
  if ((_DWORD)v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "objectForKey:", v7));
    if ((uint64_t)objc_msgSend(v9, "count") >= 1)
    {
      v10 = BKLogTouchDeliveryPolicy();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v18 = 67109120;
        v19 = v7;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TDPS said this context should cancel: %X", (uint8_t *)&v18, 8u);
      }

      v13 = *(id **)(a1 + 32);
      v12 = *(_QWORD *)(a1 + 40);
      IntegerValue = IOHIDEventGetIntegerValue(*(_QWORD *)(a1 + 48), 720923);
      sub_100082C34(v13, a2, v12, IntegerValue);
    }

  }
  else if (a2)
  {
    v15 = *(unsigned __int8 *)(a1 + 56);
    sub_10000FCE0(*(void **)(a1 + 32), *(_QWORD *)(a1 + 48), a2, *(_QWORD *)(a1 + 40), v15 == 1, a4, *(double *)(*(_QWORD *)(a1 + 32) + 96));
    if (v15 == 1 || *(_BYTE *)(a1 + 57))
    {
      if (v15 == 1)
        sub_10000AE94(*(_QWORD *)(a1 + 32), a2);
    }
    else if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "containsObject:", a2))
    {
      sub_100006ED8(*(id **)(a1 + 32), a2, 0);
    }
  }
  else
  {
    v16 = BKLogTouchEvents(v8);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = 67109120;
      v19 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Missing destination for hit tested context: %X -- ignoring event", (uint8_t *)&v18, 8u);
    }

  }
}

void sub_10000AAD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000AE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t buf[4];
  uint64_t v18;
  _BYTE v19[128];

  if (!a1)
    return;
  if (a2)
    v4 = *(unsigned int *)(a2 + 8);
  else
    v4 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 128), "objectForKey:", v4, 0));
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
  if (!v6)
  {

LABEL_16:
    v11 = BKLogTouchEvents(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v18 = a2;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "adding latent: %{public}@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 144), "addObject:", a2);
    return;
  }
  v7 = 0;
  v8 = *(_QWORD *)v14;
  do
  {
    for (i = 0; i != v6; i = (char *)i + 1)
    {
      if (*(_QWORD *)v14 != v8)
        objc_enumerationMutation(v5);
      if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i) + 32) > v7)
        v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i) + 32);
    }
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
  }
  while (v6);

  if (v7 <= 1)
    goto LABEL_16;
}

void sub_10000B020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10000B514(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "increment");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "includeBitNumber:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "includeBitNumber:", *(_QWORD *)(a1 + 40));
}

void sub_10000B64C(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  id location;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 66))
  {
    v2 = BSAbsoluteMachTimeNow(a1);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v3 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v3 + 48))
    {
      objc_msgSend(*(id *)(v3 + 48), "invalidate");
      v4 = *(_QWORD *)(a1 + 32);
      v5 = *(void **)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;

      v3 = *(_QWORD *)(a1 + 32);
    }
    if (*(_BYTE *)(v3 + 64))
    {
      *(double *)(v3 + 40) = v2;
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 0;
      v3 = *(_QWORD *)(a1 + 32);
    }
    if (v2 - *(double *)(v3 + 40) >= 32.0)
    {
      sub_10001A39C(v3);
    }
    else
    {
      v6 = objc_msgSend(objc_alloc((Class)BSAbsoluteMachTimer), "initWithIdentifier:", CFSTR("BKEventStatisticsLogging"));
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(void **)(v7 + 48);
      *(_QWORD *)(v7 + 48) = v6;

      objc_initWeak(&location, *(id *)(a1 + 32));
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(void **)(v9 + 48);
      v11 = *(_QWORD *)(v9 + 56);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_100074FCC;
      v12[3] = &unk_1000EBED0;
      objc_copyWeak(&v13, &location);
      objc_msgSend(v10, "scheduleWithFireInterval:leewayInterval:queue:handler:", v11, v12, 8.0, 0.5);
      objc_destroyWeak(&v13);
      objc_destroyWeak(&location);
    }
  }
}

void sub_10000B7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10000B7F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  const __CFString *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  void *v26;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 144))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("precondition: should have invalidated and cleared any previous transactions")));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      v8 = NSStringFromSelector(*(SEL *)(a1 + 40));
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v11 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32), v10);
      v12 = NSStringFromClass(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v14 = *(_QWORD *)(a1 + 32);
      v15 = 138544642;
      v16 = v9;
      v17 = 2114;
      v18 = v13;
      v19 = 2048;
      v20 = v14;
      v21 = 2114;
      v22 = CFSTR("BKTouchDeliveryStatisticsLoggingObserver.m");
      v23 = 1024;
      v24 = 304;
      v25 = 2114;
      v26 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", (uint8_t *)&v15, 0x3Au);

    }
    _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v7), "UTF8String"));
    __break(0);
    JUMPOUT(0x10000B96CLL);
  }
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 8), "beginTransactionForReason:", CFSTR("processing touches")));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 144);
  *(_QWORD *)(v4 + 144) = v3;

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "begin");
}

id sub_10000B9B0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "invalidate");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;

  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "end");
}

id sub_10000BA6C(uint64_t a1)
{
  id result;
  int v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "increment");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "includeBitNumber:", *(_QWORD *)(a1 + 40));
  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "includeBitNumber:", *(_QWORD *)(a1 + 40));
  if (!*(_DWORD *)(a1 + 48))
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "increment");
  v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 0x20000) != 0)
  {
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "increment");
    v3 = *(_DWORD *)(a1 + 52);
  }
  if ((v3 & 0x42800) != 0)
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "increment");
  return result;
}

void sub_10000BB70(uint64_t a1)
{
  double v2;
  NSObject *v3;
  double v4;
  double v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  double v24;
  __int16 v25;
  void *v26;

  if (a1 && *(_BYTE *)(a1 + 65))
  {
    v2 = BSAbsoluteMachTimeNow(a1);
    v3 = *(NSObject **)(a1 + 16);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(double *)(a1 + 40);
      if (v4 <= 0.0)
        v5 = 0.0;
      else
        v5 = v2 - v4;
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(void **)(a1 + 24);
      v8 = v3;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bs_compactMap:", &stru_1000EBEA8));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", v9));
      *(_DWORD *)buf = 138543874;
      v22 = v6;
      v23 = 2048;
      v24 = v5;
      v25 = 2114;
      v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ events starting %gs ago: %{public}@", buf, 0x20u);

    }
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v11 = *(id *)(a1 + 24);
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v17, buf, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(_QWORD *)v18 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
          if ((objc_msgSend(v16, "automaticResetDisabled", (_QWORD)v17) & 1) == 0)
            objc_msgSend(v16, "reset");
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v17, buf, 16);
      }
      while (v13);
    }

    *(_WORD *)(a1 + 64) = 1;
  }
}

void sub_10000BEA0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_digitizerStateForService:", *(_QWORD *)(a1 + 40)));
  if (!v2)
  {
    v3 = BKLogTouchEvents(0);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v6 = 138543362;
      v7 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "*** unknown digitizer %{public}@ -- initializing now", (uint8_t *)&v6, 0xCu);
    }

    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_addDigitizerStateForService:", *(_QWORD *)(a1 + 40)));
  }
  sub_10000CFBC((uint64_t)v2, *(__IOHIDEvent **)(a1 + 48));

}

void sub_10000BF84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000C04C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10000C1CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id *sub_10000C210(id *a1)
{
  if (a1)
    a1 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "allValues"));
  return a1;
}

void sub_10000C230(id a1, BKDirectTouchState *a2)
{
  sub_10000C61C(a2, 2u, 0);
}

void sub_10000C240(uint64_t a1, uint64_t a2)
{
  id *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  double v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *j;
  id v25;
  uint64_t v26;
  void *k;
  void *v28;
  id obj;
  id obja;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  uint8_t v44[128];
  uint8_t buf[4];
  id *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  uint64_t v50;

  if (a2)
  {
    v2 = (id *)a2;
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v5 = *(unsigned __int8 *)(a1 + 64);
    v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    if (v6 == 2)
    {
      v7 = *(double *)(a1 + 56);
      if (*(double *)(a2 + 160) >= v7)
        v7 = *(double *)(a2 + 160);
      *(double *)(a2 + 160) = v7;
    }
    if (v5)
    {
      if (v4 == 3)
      {
        v8 = BKLogTouchEvents();
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "cancel clients due to system gesture stealing the touches", buf, 2u);
        }

        sub_10000C61C(v2, 2u, v3);
      }
      else if (v3)
      {
        if (v6 == 2 && *(_BYTE *)(v3 + 9) != 0)
        {
          v11 = *(unsigned __int8 *)(v3 + 8);
          v12 = BKLogTouchEvents();
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2[1], "displayUUID"));
            *(_DWORD *)buf = 134218498;
            v46 = v2;
            v47 = 2114;
            v48 = v28;
            v49 = 2114;
            v50 = v3;
            _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "System gestures no longer possible (<%p> - %{public}@) causedByTouchStream: %{public}@", buf, 0x20u);

          }
          v14 = objc_msgSend(v2[18], "mutableCopy");
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          obj = v2[14];
          v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, buf, 16);
          if (v15)
          {
            v16 = *(_QWORD *)v40;
            do
            {
              for (i = 0; i != v15; i = (char *)i + 1)
              {
                if (*(_QWORD *)v40 != v16)
                  objc_enumerationMutation(obj);
                v18 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)i);
                if (*(_QWORD *)(v18 + 32) == 2)
                {
                  v19 = v11;
                  v20 = v2;
                  v37 = 0u;
                  v38 = 0u;
                  v35 = 0u;
                  v36 = 0u;
                  v21 = *(id *)(v18 + 272);
                  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v35, v44, 16);
                  if (v22)
                  {
                    v23 = *(_QWORD *)v36;
                    do
                    {
                      for (j = 0; j != v22; j = (char *)j + 1)
                      {
                        if (*(_QWORD *)v36 != v23)
                          objc_enumerationMutation(v21);
                        objc_msgSend(v14, "addObject:", *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)j));
                      }
                      v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v35, v44, 16);
                    }
                    while (v22);
                  }

                  v2 = v20;
                  v11 = v19;
                }
              }
              v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, buf, 16);
            }
            while (v15);
          }

          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          obja = v14;
          v25 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v31, v43, 16);
          if (v25)
          {
            v26 = *(_QWORD *)v32;
            do
            {
              for (k = 0; k != v25; k = (char *)k + 1)
              {
                if (*(_QWORD *)v32 != v26)
                  objc_enumerationMutation(obja);
                sub_100006ED8(v2, *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)k), v11);
              }
              v25 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v31, v43, 16);
            }
            while (v25);
          }

        }
      }
    }
  }
}

void sub_10000C5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id sub_10000C61C(id result, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id *v8;
  void *v9;
  id v10;
  void *v11;
  int v12;
  id v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  uint64_t v17;

  if (result)
  {
    v5 = (uint64_t)result;
    v6 = BKLogTouchEvents();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v10 = objc_msgSend(*(id *)(v5 + 8), "senderID");
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v5 + 8), "displayUUID"));
      v12 = 134218498;
      v13 = v10;
      v14 = 2114;
      v15 = v11;
      v16 = 2114;
      v17 = a3;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Cancel all touches %llX - display:%{public}@ causedByTouchStream:%{public}@", (uint8_t *)&v12, 0x20u);

    }
    v8 = sub_10000C768(*(id **)(v5 + 112));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    sub_10000CAA4(v5, v9, a2, a3);

    return sub_10000C784(v5, a3);
  }
  return result;
}

void sub_10000C744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id *sub_10000C768(id *a1)
{
  if (a1)
    a1 = (id *)a1[1];
  return a1;
}

id sub_10000C784(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  const void *DigitizerEvent;
  id v14;
  id v15;
  int v16;
  id v17;
  id obj;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t v24[128];
  uint8_t buf[4];
  int v26;

  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  obj = *(id *)(a1 + 144);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v21;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v21 != v5)
          objc_enumerationMutation(obj);
        if (a2)
          v7 = *(unsigned __int8 *)(a2 + 8);
        else
          v7 = 0;
        v8 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v6);
        v9 = BKLogTouchEvents();
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          if (v8)
            v16 = *(_DWORD *)(v8 + 8);
          else
            v16 = 0;
          *(_DWORD *)buf = 67109120;
          v26 = v16;
          _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "SGP: Sending cancel to latent client: %x", buf, 8u);
        }

        v11 = mach_absolute_time();
        v12 = (id)a1;
        DigitizerEvent = (const void *)IOHIDEventCreateDigitizerEvent(0, v11, 3, 0, 0, 130, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0x4400000000);
        v14 = *(id *)(a1 + 8);
        IOHIDEventSetSenderID(DigitizerEvent, objc_msgSend(v14, "senderID"));

        IOHIDEventSetIntegerValue(DigitizerEvent, 720921, *(unsigned __int8 *)(a1 + 206));
        IOHIDEventSetIntegerValue(DigitizerEvent, 4, *(unsigned __int8 *)(a1 + 207));

        v15 = objc_alloc_init((Class)BKSHIDEventDigitizerAttributes);
        objc_msgSend(v15, "setTouchStreamIdentifier:", v7);
        sub_10000579C((uint64_t)v12, (uint64_t)DigitizerEvent, v15, v8, *(double *)(a1 + 96));
        CFRelease(DigitizerEvent);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      v4 = v17;
    }
    while (v17);
  }

  return objc_msgSend(*(id *)(a1 + 144), "removeAllObjects");
}

void sub_10000C9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_10000CAA4(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;
  char v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *i;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  id v30;
  id v31;
  uint64_t v32;
  void *j;
  id v34;
  void *v35;
  void *v36;
  id obj;
  id obja;
  uint64_t v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  _BYTE v54[128];
  uint8_t v55[128];
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;

  v7 = a2;
  obj = v7;
  if (a3 == 2)
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bs_filter:", &stru_1000EC3C0));

    v7 = (id)v8;
    obj = (id)v8;
  }
  if (objc_msgSend(v7, "count", v7, obj))
  {
    v9 = BKLogTouchEvents();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", v36));
      v12 = (uint64_t)*(&off_1000EC688 + a3);
      *(_DWORD *)buf = 138543874;
      v57 = v11;
      v58 = 2114;
      v59 = v12;
      v60 = 2114;
      v61 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "canceling paths %{public}@ -- %{public}@ (ts:%{public}@)", buf, 0x20u);

    }
    sub_1000828B8((id *)a1, v36, 1, 0);
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v13 = *(_QWORD **)(a1 + 40);
    if (v13)
      v13 = (_QWORD *)v13[3];
    v14 = v13;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v49, v55, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v50;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v50 != v16)
            objc_enumerationMutation(v14);
          v18 = *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)v17);
          if (a3 != 2)
          {
            if (v18)
LABEL_21:
              v21 = *(void **)(v18 + 48);
            else
              v21 = 0;
            v22 = v21;
            sub_100082BC4((id *)a1, (uint64_t)v22);

            goto LABEL_23;
          }
          v19 = objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)v17), "isEqual:", a4);
          if (v18)
            v20 = v19;
          else
            v20 = 1;
          if ((v20 & 1) == 0 && *(_BYTE *)(v18 + 9))
            goto LABEL_21;
LABEL_23:
          v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        v23 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v49, v55, 16);
        v15 = v23;
      }
      while (v23);
    }

    if (a3 != 2)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      obja = v36;
      v24 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v45, v54, 16);
      if (v24)
      {
        v39 = *(_QWORD *)v46;
        do
        {
          v40 = v24;
          for (i = 0; i != v40; i = (char *)i + 1)
          {
            if (*(_QWORD *)v46 != v39)
              objc_enumerationMutation(obja);
            v26 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i);
            v27 = *(_QWORD *)(v26 + 32);
            v28 = v27 == 1 || v27 == 2;
            v29 = v27 != 1 && v27 == 2;
            *(_QWORD *)(v26 + 32) = 0;
            v41 = 0u;
            v42 = 0u;
            v43 = 0u;
            v44 = 0u;
            v30 = *(id *)(a1 + 72);
            v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v41, v53, 16);
            if (v31)
            {
              v32 = *(_QWORD *)v42;
              do
              {
                for (j = 0; j != v31; j = (char *)j + 1)
                {
                  if (*(_QWORD *)v42 != v32)
                    objc_enumerationMutation(v30);
                  v34 = *(id *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)j);
                  v35 = v34;
                  if (v29)
                    objc_msgSend(v34, "touch:pathIndex:upAtPoint:detached:", *(unsigned int *)(v26 + 16), *(_QWORD *)(v26 + 8), *(unsigned __int8 *)(v26 + 288), *(double *)(v26 + 216), *(double *)(v26 + 224));
                  if (v28)
                    objc_msgSend(v35, "touch:pathIndex:rangeOutAtPoint:", *(unsigned int *)(v26 + 16), *(_QWORD *)(v26 + 8), *(double *)(v26 + 216), *(double *)(v26 + 224));

                }
                v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v41, v53, 16);
              }
              while (v31);
            }

          }
          v24 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v45, v54, 16);
        }
        while (v24);
      }

      sub_1000150D4(a1);
    }
  }

}

void sub_10000CE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_10000CF10(uint64_t a1, uint64_t a2)
{
  sub_100017654(a2, *(void **)(a1 + 32));
}

uint64_t sub_10000CF20(uint64_t result, uint64_t a2)
{
  if (a2)
    *(_QWORD *)(a2 + 152) = *(_QWORD *)(result + 32);
  return result;
}

void sub_10000CFBC(uint64_t a1, __IOHIDEvent *a2)
{
  void *v3;
  void *v4;
  int v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int IntegerValue;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  BKTouchContact *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  NSObject *v47;
  id v48;
  __IOHIDEvent *v49;
  id *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  void *k;
  id v58;
  uint64_t v59;
  NSObject *v60;
  void *v61;
  BKHIDEventCollector *v62;
  char *v63;
  char *v64;
  _DWORD *v65;
  int v66;
  unint64_t v67;
  id v68;
  uint64_t TimeStamp;
  char v70;
  const void *DigitizerEvent;
  id v72;
  void *v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t j;
  id v83;
  id v84;
  id v85;
  _QWORD *v86;
  char *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  BKHIDEventCollector *v94;
  id *v95;
  BKTouchHitTestContextMap *v96;
  uint64_t v97;
  void *v98;
  unsigned int v99;
  BKTouchContactSet *v100;
  int v101;
  id v102;
  uint64_t v103;
  void *m;
  uint64_t v105;
  id *v106;
  id v107;
  uint64_t v108;
  void *n;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  void *SenderID;
  id *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  _QWORD *v119;
  _BOOL4 v120;
  id v121;
  void *ii;
  id *v123;
  int v124;
  id *v125;
  double v127;
  id v128;
  void *v129;
  unsigned int *v130;
  void *v131;
  uint64_t v132;
  _BOOL4 v133;
  const __CFArray *Children;
  uint64_t v135;
  int64_t v136;
  id *v137;
  uint64_t v138;
  id *v139;
  float64_t FloatValue;
  float64_t v141;
  BKHitTestResultPathLocation *v142;
  BKHitTestResultPathLocation *v143;
  __int128 v144;
  uint64_t v145;
  __IOHIDEvent *v146;
  void *v147;
  id *v148;
  NSObject *v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  id *v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  NSObject *v158;
  _QWORD *v159;
  id v160;
  uint64_t v161;
  void *jj;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  uint64_t v166;
  id v167;
  void *v168;
  void *v169;
  int v170;
  uint64_t v171;
  id *v172;
  id v173;
  uint64_t v174;
  void *kk;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  NSObject *v179;
  _BOOL4 v180;
  uint64_t v181;
  uint64_t v182;
  NSObject *v183;
  id v184;
  void *v185;
  uint64_t v186;
  id v187;
  id v188;
  uint64_t v189;
  void *mm;
  id v191;
  void *v192;
  void *v193;
  NSString *v194;
  id v195;
  uint64_t v196;
  objc_class *v197;
  NSString *v198;
  void *v199;
  uint64_t v200;
  BOOL v201;
  _BOOL4 v202;
  _QWORD *v203;
  NSObject *v204;
  uint64_t v205;
  void *v206;
  BKHIDEventCollector *v207;
  _QWORD *v208;
  uint64_t v209;
  int aSelector;
  uint64_t v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  id *v216;
  id *v217;
  id *obj;
  id obja;
  BKTouchContactSet *v220;
  uint64_t v221;
  id *location;
  id **locationa;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  char v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  const __CFArray *v242[7];
  uint64_t v243[2];
  unsigned __int8 v244;
  _OWORD v245[3];
  CGFloat v246;
  _BYTE v247[56];
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  _BYTE v252[128];
  _BYTE v253[128];
  _QWORD buf[6];
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  _BYTE v267[32];
  __int128 v268;
  _QWORD v269[10];
  objc_super v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  uint8_t v274[16];
  __int128 v275;
  __int128 v276;
  __int128 v277;
  uint8_t v278[32];
  __int128 v279;
  __int128 v280;

  if (!a1)
    return;
  if (!*(_BYTE *)(a1 + 204))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "propertyForKey:", CFSTR("AccurateMaxDigitizerPressureValue")));
    v4 = v3;
    if (v3)
      objc_msgSend(v3, "floatValue");
    else
      v5 = 0;
    *(_BYTE *)(a1 + 204) = 1;
    *(_DWORD *)(a1 + 200) = v5;

  }
  v231 = 0u;
  v232 = 0u;
  v229 = 0u;
  v230 = 0u;
  v213 = a1;
  v6 = *(id *)(a1 + 72);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v229, v253, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v230;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v230 != v8)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v229 + 1) + 8 * (_QWORD)i), "touchWillStartProcessingTouchCollection");
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v229, v253, 16);
    }
    while (v7);
  }

  if (BKSHIDEventContainsUpdates(a2))
  {
    location = *(id **)(v213 + 184);
    if (location)
    {
      v211 = sub_100011F84((uint64_t)a2);
      v10 = sub_10003806C((uint64_t)location, v211);
      v216 = (id *)objc_claimAutoreleasedReturnValue(v10);
      if (v216)
      {
        v266 = 0u;
        v265 = 0u;
        v264 = 0u;
        v263 = 0u;
        v262 = 0u;
        v261 = 0u;
        v260 = 0u;
        v259 = 0u;
        v258 = 0u;
        v256 = 0u;
        v257 = 0u;
        v255 = 0u;
        memset(buf, 0, sizeof(buf));
        sub_1000111B4((const __CFArray **)v274, (uint64_t)a2);
        sub_100010FD0((unint64_t)v274);
        v214 = 0;
        v11 = 0;
        v270 = *(objc_super *)v274;
        v271 = v275;
        v272 = v276;
        *(_QWORD *)&v273 = v277;
        while (1)
        {
          v12 = *((_QWORD *)&v271 + 1);
          if (!*((_QWORD *)&v271 + 1))
            break;
          v13 = v272;
          *((_QWORD *)&v272 + 1) = *((_QWORD *)&v271 + 1);
          *(_QWORD *)&v273 = v272;
          v14 = sub_100037D4C((uint64_t)v216, v272);
          IntegerValue = IOHIDEventGetIntegerValue(v12, 720924);
          if (!v14)
          {
            v90 = IOHIDEventGetIntegerValue(v12, 720925);
            v91 = v90;
            if ((_DWORD)v90)
            {
              v92 = BKLogTouchEvents(v90);
              v93 = objc_claimAutoreleasedReturnValue(v92);
              if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v267 = 134218240;
                *(_QWORD *)&v267[4] = v13;
                *(_WORD *)&v267[12] = 2048;
                *(_QWORD *)&v267[14] = v91;
                _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "remainingUpdatesMask for path %ld is zero, but we got updates:%lX", v267, 0x16u);
              }

            }
            goto LABEL_106;
          }
          v16 = IntegerValue;
          buf[v13] = v12;
          sub_100037EDC((uint64_t)v216, IntegerValue, v13);
          v11 |= 1 << v13;
          v17 = v214;
          if (v16)
            v17 = v214 + 1;
          v214 = v17;
          sub_100010FD0((unint64_t)&v270);
        }
        if (v11)
        {
          v273 = 0u;
          v272 = 0u;
          v271 = 0u;
          v270 = (objc_super)0;
          obja = v216[17];
          v62 = 0;
          v63 = (char *)objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v270, v274, 16);
          if (v63)
          {
            v221 = *(_QWORD *)v271;
            do
            {
              v64 = 0;
              do
              {
                if (*(_QWORD *)v271 != v221)
                  objc_enumerationMutation(obja);
                v65 = (_DWORD *)*((_QWORD *)v270.super_class + (_QWORD)v64);
                if (v65)
                  v66 = v65[6];
                else
                  v66 = 0;
                v67 = v66 & v11;
                if ((v66 & v11) != 0)
                {
                  v68 = location[3];
                  TimeStamp = IOHIDEventGetTimeStamp(a2);
                  IOHIDEventGetEventFlags(a2);
                  LODWORD(v200) = 0;
                  HIDWORD(v200) = v70 & 0x20 | 4;
                  DigitizerEvent = (const void *)IOHIDEventCreateDigitizerEvent(0, TimeStamp, 3, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, v200);
                  v72 = v68;
                  v73 = v72;
                  if (v72)
                    v74 = (void *)*((_QWORD *)v72 + 1);
                  else
                    v74 = 0;
                  v75 = v74;
                  IOHIDEventSetSenderID(DigitizerEvent, objc_msgSend(v75, "senderID"));

                  v76 = IOHIDEventGetIntegerValue(a2, 720923);
                  IOHIDEventSetIntegerValue(DigitizerEvent, 720923, v76);
                  v77 = IOHIDEventGetIntegerValue(a2, 720924);
                  IOHIDEventSetIntegerValue(DigitizerEvent, 720924, v77);
                  v78 = IOHIDEventGetIntegerValue(a2, 720925);
                  IOHIDEventSetIntegerValue(DigitizerEvent, 720925, v78);
                  v79 = IOHIDEventGetIntegerValue(a2, 720921);
                  IOHIDEventSetIntegerValue(DigitizerEvent, 720921, v79);
                  v80 = IOHIDEventGetIntegerValue(a2, 4);
                  IOHIDEventSetIntegerValue(DigitizerEvent, 4, v80);

                  for (j = 0; j != 30; ++j)
                  {
                    if (((v67 >> j) & 1) != 0)
                      IOHIDEventAppendEvent(DigitizerEvent, buf[j], 0, v81);
                  }
                  v83 = objc_alloc_init((Class)BKSHIDEventDigitizerAttributes);
                  if (!v62)
                    v62 = objc_alloc_init(BKHIDEventCollector);
                  v84 = sub_1000121FC((uint64_t)location);
                  v85 = (id)objc_claimAutoreleasedReturnValue(v84);
                  v86 = v85;
                  if (v62 && v85 && objc_msgSend(*((id *)v85 + 2), "count"))
                  {
                    sub_1000121A0((uint64_t)v62);
                    -[NSMutableArray addObjectsFromArray:](v62->_collectedEvents, "addObjectsFromArray:", v86[2]);
                  }

                  sub_1000113BC((uint64_t)v62, a2, v83, v65);
                  CFRelease(DigitizerEvent);

                }
                ++v64;
              }
              while (v64 != v63);
              v87 = (char *)objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v270, v274, 16);
              v63 = v87;
            }
            while (v87);
          }

          if (!v214)
          {
            v88 = sub_1000381A4((uint64_t)location, v211);
            v89 = objc_claimAutoreleasedReturnValue(v88);
            if ((id *)v89 != v216)
            {
              v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("pending/removed items don't match: %@/%@"), v89, v216));
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                v194 = NSStringFromSelector("_handleDidUpdateEvent:");
                v195 = (id)objc_claimAutoreleasedReturnValue(v194);
                v197 = (objc_class *)objc_opt_class(location, v196);
                v198 = NSStringFromClass(v197);
                v199 = (void *)objc_claimAutoreleasedReturnValue(v198);
                *(_DWORD *)v267 = 138544642;
                *(_QWORD *)&v267[4] = v195;
                *(_WORD *)&v267[12] = 2114;
                *(_QWORD *)&v267[14] = v199;
                *(_WORD *)&v267[22] = 2048;
                *(_QWORD *)&v267[24] = location;
                LOWORD(v268) = 2114;
                *(_QWORD *)((char *)&v268 + 2) = CFSTR("BKDirectTouchUpdateEvents.mm");
                WORD5(v268) = 1024;
                HIDWORD(v268) = 260;
                LOWORD(v269[0]) = 2114;
                *(_QWORD *)((char *)v269 + 2) = v193;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", v267, 0x3Au);

              }
              _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v193), "UTF8String"));
              __break(0);
              JUMPOUT(0x10000EA18);
            }

          }
        }
        else
        {
          v62 = 0;
        }
        v94 = v62;
      }
      else
      {
        v59 = BKLogTouchEvents(0);
        v60 = objc_claimAutoreleasedReturnValue(v59);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          v61 = (void *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", location[1]));
          LODWORD(buf[0]) = 134218242;
          *(_QWORD *)((char *)buf + 4) = v211;
          WORD2(buf[1]) = 2114;
          *(_QWORD *)((char *)&buf[1] + 6) = v61;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "BKDigitizer: got an event update with generation:%ld but I can't find any pending items waiting for an update: %{public}@", (uint8_t *)buf, 0x16u);

        }
LABEL_106:
        v94 = 0;
      }

    }
    else
    {
      v94 = 0;
    }
    sub_100012240(v213, (uint64_t)v94);

    goto LABEL_253;
  }
  v206 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v213 + 8), "displayUUID"));
  if (!*(_QWORD *)(v213 + 56))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[BKTouchDeliveryPolicyServer sharedServer](BKTouchDeliveryPolicyServer, "sharedServer"));
    objc_storeStrong((id *)(v213 + 56), v18);
    v19 = *(_QWORD *)(v213 + 24);
    if (v19)
      objc_storeStrong((id *)(v19 + 8), v18);

  }
  v207 = objc_alloc_init(BKHIDEventCollector);
  v243[0] = (uint64_t)v207;
  obj = (id *)(id)v213;
  v243[1] = (uint64_t)obj;
  v20 = (id *)obj[14];
  locationa = (id **)(obj + 14);
  if (v20)
  {
    v220 = objc_alloc_init(BKTouchContactSet);
    v277 = 0u;
    v276 = 0u;
    v275 = 0u;
    *(_OWORD *)v274 = 0u;
    v21 = v20[1];
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", v274, buf, 16);
    if (v22)
    {
      v23 = *(_QWORD *)v275;
      do
      {
        v24 = 0;
        do
        {
          if (*(_QWORD *)v275 != v23)
            objc_enumerationMutation(v21);
          v25 = *(_QWORD *)(*(_QWORD *)&v274[8] + 8 * (_QWORD)v24);
          v26 = [BKTouchContact alloc];
          if (v26)
          {
            v270.receiver = v26;
            v270.super_class = (Class)BKTouchContact;
            v27 = (char *)objc_msgSendSuper2(&v270, "init");
            v28 = (uint64_t)v27;
            if (v27)
            {
              *((_QWORD *)v27 + 1) = *(_QWORD *)(v25 + 8);
              *((_DWORD *)v27 + 4) = *(_DWORD *)(v25 + 16);
              *((_DWORD *)v27 + 5) = *(_DWORD *)(v25 + 20);
              *((_DWORD *)v27 + 6) = *(_DWORD *)(v25 + 24);
              *((_QWORD *)v27 + 4) = *(_QWORD *)(v25 + 32);
              *((_QWORD *)v27 + 6) = *(_QWORD *)(v25 + 48);
              *((_DWORD *)v27 + 14) = *(_DWORD *)(v25 + 56);
              v29 = *(_OWORD *)(v25 + 80);
              *((_OWORD *)v27 + 4) = *(_OWORD *)(v25 + 64);
              *((_OWORD *)v27 + 5) = v29;
              v30 = *(_OWORD *)(v25 + 112);
              *((_OWORD *)v27 + 6) = *(_OWORD *)(v25 + 96);
              *((_OWORD *)v27 + 7) = v30;
              *((_OWORD *)v27 + 8) = *(_OWORD *)(v25 + 128);
              *((_QWORD *)v27 + 18) = *(_QWORD *)(v25 + 144);
              *(_OWORD *)(v27 + 152) = *(_OWORD *)(v25 + 152);
              v31 = *(_OWORD *)(v25 + 168);
              *((_QWORD *)v27 + 23) = *(_QWORD *)(v25 + 184);
              *(_OWORD *)(v27 + 168) = v31;
              v32 = *(_OWORD *)(v25 + 192);
              v33 = *(_OWORD *)(v25 + 208);
              v34 = *(_OWORD *)(v25 + 224);
              *((_QWORD *)v27 + 30) = *(_QWORD *)(v25 + 240);
              *((_OWORD *)v27 + 13) = v33;
              *((_OWORD *)v27 + 14) = v34;
              *((_OWORD *)v27 + 12) = v32;
              objc_storeStrong((id *)v27 + 31, *(id *)(v25 + 248));
              objc_storeStrong((id *)(v28 + 256), *(id *)(v25 + 256));
              objc_storeStrong((id *)(v28 + 264), *(id *)(v25 + 264));
              v35 = objc_msgSend(*(id *)(v25 + 272), "mutableCopy");
              v36 = *(void **)(v28 + 272);
              *(_QWORD *)(v28 + 272) = v35;

              objc_storeStrong((id *)(v28 + 280), *(id *)(v25 + 280));
              *(_BYTE *)(v28 + 288) = *(_BYTE *)(v25 + 288);
              *(_BYTE *)(v28 + 290) = *(_BYTE *)(v25 + 290);
            }
          }
          else
          {
            v28 = 0;
          }
          sub_100012D78((uint64_t)v220, v28);

          v24 = (char *)v24 + 1;
        }
        while (v22 != v24);
        v37 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", v274, buf, 16);
        v22 = v37;
      }
      while (v37);
    }

  }
  else
  {
    v220 = 0;
  }
  v38 = IOHIDEventGetIntegerValue(a2, 720903);
  v39 = v38;
  if ((v38 & 0x80) != 0)
  {
    v46 = BKLogTouchEvents(v38);
    v47 = objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "cancel received from HID", (uint8_t *)buf, 2u);
    }

    v48 = objc_alloc_init((Class)NSMutableArray);
    v49 = a2;
    sub_1000111B4((const __CFArray **)&v270, (uint64_t)a2);
    sub_100010FD0((unint64_t)&v270);
    *(objc_super *)v267 = v270;
    *(_OWORD *)&v267[16] = v271;
    v268 = v272;
    v269[0] = v273;
    while (*(_QWORD *)&v267[24])
    {
      *((_QWORD *)&v268 + 1) = *(_QWORD *)&v267[24];
      v269[0] = v268;
      v50 = sub_100011258(*locationa, v268);
      v51 = objc_claimAutoreleasedReturnValue(v50);
      v52 = (void *)v51;
      if (v51)
      {
        v53 = *(unsigned int *)(v51 + 16);
        if ((_DWORD)v53)
        {
          v277 = 0u;
          v276 = 0u;
          v275 = 0u;
          *(_OWORD *)v274 = 0u;
          v54 = *(id *)(v213 + 72);
          v55 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", v274, buf, 16);
          if (v55)
          {
            v56 = *(_QWORD *)v275;
            do
            {
              for (k = 0; k != v55; k = (char *)k + 1)
              {
                if (*(_QWORD *)v275 != v56)
                  objc_enumerationMutation(v54);
                objc_msgSend(*(id *)(*(_QWORD *)&v274[8] + 8 * (_QWORD)k), "touchDidHIDCancel:", v53);
              }
              v55 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", v274, buf, 16);
            }
            while (v55);
          }

        }
        objc_msgSend(v48, "addObject:", v52);
      }

      sub_100010FD0((unint64_t)v267);
      v49 = a2;
    }
    if (objc_msgSend(v48, "count"))
    {
      v58 = v48;
    }
    else
    {
      v111 = BKLogTouchEvents(0);
      v112 = objc_claimAutoreleasedReturnValue(v111);
      if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
      {
        SenderID = (void *)IOHIDEventGetSenderID(v49);
        LODWORD(v270.receiver) = 134217984;
        *(id *)((char *)&v270.receiver + 4) = SenderID;
        _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_INFO, "received cancel without child paths from senderID:0x%llX", (uint8_t *)&v270, 0xCu);
      }

      v114 = sub_10000C768(*locationa);
      v58 = (id)objc_claimAutoreleasedReturnValue(v114);
    }
    v115 = v58;

    sub_10000CAA4((uint64_t)obj, v115, 0, 0);
    if (!objc_msgSend(*locationa, "count"))
      sub_10000C784((uint64_t)obj, 0);
    *((_BYTE *)obj + 208) = 0;

    goto LABEL_252;
  }
  sub_1000111B4(v242, (uint64_t)a2);
  sub_100010FD0((unint64_t)v242);
  if (v242[2])
  {
    _BKHIDNoteUserEventOccurredOnDisplay(v206);
    if ((v39 & 0x20000) == 0)
    {
      v40 = objc_msgSend(obj[4], "isActive");
      v41 = *((unsigned __int8 *)obj + 208);
      if (((*((_BYTE *)obj + 208) == 0) & ~v40) == 0)
      {
        sub_1000111B4((const __CFArray **)buf, (uint64_t)a2);
        sub_100010FD0((unint64_t)buf);
        v275 = *(_OWORD *)&buf[2];
        *(_OWORD *)v274 = *(_OWORD *)buf;
        v276 = *(_OWORD *)&buf[4];
        *(_QWORD *)&v277 = v255;
        v42 = buf[3];
        if (buf[3])
        {
          v43 = 0;
          do
          {
            *((_QWORD *)&v276 + 1) = v42;
            *(_QWORD *)&v277 = v276;
            v44 = IOHIDEventGetIntegerValue(v42, 720905);
            sub_100010FD0((unint64_t)v274);
            if (v44)
              ++v43;
            v42 = *((_QWORD *)&v275 + 1);
          }
          while (*((_QWORD *)&v275 + 1));
          v45 = v43 != 0;
        }
        else
        {
          v45 = 0;
        }
        *((_BYTE *)obj + 208) = v45;
        v166 = BKLogTouchEvents(0);
        v204 = objc_claimAutoreleasedReturnValue(v166);
        if (os_log_type_enabled(v204, OS_LOG_TYPE_DEFAULT))
        {
          v167 = objc_msgSend(*(id *)(v213 + 8), "senderID");
          v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obj[4], "reasons"));
          v169 = (void *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", v168));
          v170 = *((unsigned __int8 *)obj + 208);
          LODWORD(buf[0]) = 134218754;
          *(_QWORD *)((char *)buf + 4) = v167;
          WORD2(buf[1]) = 2114;
          *(_QWORD *)((char *)&buf[1] + 6) = v169;
          HIWORD(buf[2]) = 1024;
          LODWORD(buf[3]) = v41;
          WORD2(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 6) = v170;
          _os_log_impl((void *)&_mh_execute_header, v204, OS_LOG_TYPE_DEFAULT, "%llX ignoring touch event (%{public}@) prevHadTouches:%{BOOL}u nowHasTouches:%{BOOL}u", (uint8_t *)buf, 0x22u);

        }
LABEL_251:

        goto LABEL_252;
      }
    }
    *((_BYTE *)obj + 206) = IOHIDEventGetIntegerValue(a2, 720921) != 0;
    *((_BYTE *)obj + 207) = IOHIDEventGetIntegerValue(a2, 4) != 0;
    v95 = sub_1000155EC((uint64_t)obj, (uint64_t)a2, v220);
    v204 = objc_claimAutoreleasedReturnValue(v95);
    v96 = sub_100013600((uint64_t)obj[3], (uint64_t)a2, v204, obj[22], obj[15], obj[16]);
    v97 = objc_claimAutoreleasedReturnValue(v96);
    if (v97 && *(_BYTE *)(v97 + 8))
      obj[12] = *(id *)(v97 + 16);
    v205 = v97;
    objc_storeStrong((id *)locationa, v204);
    v98 = (void *)objc_claimAutoreleasedReturnValue(+[SLGLog sharedInstance](SLGLog, "sharedInstance"));
    v99 = objc_msgSend(v98, "isEnabled");

    if (v99)
      sub_10004832C(obj, (uint64_t)a2);
    v240 = 0u;
    v241 = 0u;
    v238 = 0u;
    v239 = 0u;
    v100 = v220;
    v101 = 0;
    v102 = -[BKTouchContactSet countByEnumeratingWithState:objects:count:](v100, "countByEnumeratingWithState:objects:count:", &v238, &v270, 16);
    if (v102)
    {
      v103 = *(_QWORD *)v239;
      do
      {
        for (m = 0; m != v102; m = (char *)m + 1)
        {
          if (*(_QWORD *)v239 != v103)
            objc_enumerationMutation(v100);
          v105 = *(_QWORD *)(*((_QWORD *)&v238 + 1) + 8 * (_QWORD)m);
          if (*(_QWORD *)(v105 + 32) == 2)
            v101 |= *(_BYTE *)(v105 + 288) == 0;
        }
        v102 = -[BKTouchContactSet countByEnumeratingWithState:objects:count:](v100, "countByEnumeratingWithState:objects:count:", &v238, &v270, 16);
      }
      while (v102);
    }

    v236 = 0u;
    v237 = 0u;
    v234 = 0u;
    v235 = 0u;
    v106 = *locationa;
    v107 = objc_msgSend(v106, "countByEnumeratingWithState:objects:count:", &v234, v267, 16);
    if (v107)
    {
      v215 = 0;
      v108 = *(_QWORD *)v235;
      do
      {
        for (n = 0; n != v107; n = (char *)n + 1)
        {
          if (*(_QWORD *)v235 != v108)
            objc_enumerationMutation(v106);
          v110 = *(_QWORD *)(*((_QWORD *)&v234 + 1) + 8 * (_QWORD)n);
          if (*(_QWORD *)(v110 + 32) == 2)
            v215 |= *(_BYTE *)(v110 + 288) == 0;
        }
        v107 = objc_msgSend(v106, "countByEnumeratingWithState:objects:count:", &v234, v267, 16);
      }
      while (v107);
    }
    else
    {
      v215 = 0;
    }

    v233 = 0;
    aSelector = v215 & (v101 ^ 1);
    if ((aSelector & 1) != 0 || ((v215 ^ 1) & 1) != 0)
    {
      v117 = BKLogTouchEvents(v116);
      v118 = objc_claimAutoreleasedReturnValue(v117);
      if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 67109376;
        HIDWORD(buf[0]) = aSelector & 1;
        LOWORD(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 2) = (v215 ^ 1) & 1;
        _os_log_debug_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "touchstreams: start sending isFirstDown:%{BOOL}u lifted:%{BOOL}u", (uint8_t *)buf, 0xEu);
      }

    }
    v244 = 0;
    v119 = obj[5];
    if (v119)
      v119 = (_QWORD *)v119[3];
    v203 = v119;
    v120 = sub_1000173F4((uint64_t)v203, &v233, &v244);
    v201 = v244 == 3;
    v202 = v120;
    if (v120)
    {
      v277 = 0u;
      v276 = 0u;
      v275 = 0u;
      *(_OWORD *)v274 = 0u;
      v208 = v203;
      v121 = objc_msgSend(v208, "countByEnumeratingWithState:objects:count:", v274, buf, 16);
      if (v121)
      {
        v209 = *(_QWORD *)v275;
        do
        {
          v212 = v121;
          for (ii = 0; ii != v212; ii = (char *)ii + 1)
          {
            if (*(_QWORD *)v275 != v209)
              objc_enumerationMutation(v208);
            v123 = (id *)*(id *)(*(_QWORD *)&v274[8] + 8 * (_QWORD)ii);
            v217 = v123;
            if (v123)
              v124 = *((unsigned __int8 *)v123 + 10);
            else
              v124 = 0;
            if ((aSelector & 1) != 0)
            {
              if (v124 != 1)
                goto LABEL_162;
            }
            else if (v215 & 1 | (v124 != 1))
            {
LABEL_162:
              v125 = v123;
              if (v123)
              {
                if (*((_BYTE *)v123 + 9) && v124 == 1)
                  goto LABEL_186;
              }
              goto LABEL_167;
            }
            if (v123)
              *((_BYTE *)v123 + 10) = 2;
LABEL_167:
            if (!a2)
              __assert_rtn("-[BKDirectTouchState _touchStreamClient:appendPathCollectionEvent:toEventPoster:initialTouchTimestamp:]", "BKDirectTouchState.mm", 2453, "pathCollectionEvent");
            v127 = *((double *)obj + 21);
            v128 = objc_alloc_init((Class)NSMutableArray);
            v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v213 + 8), "displayUUID"));
            if (v217)
            {
              v130 = (unsigned int *)v217[6];
              v131 = v130;
              if (v130)
                v132 = v130[2];
              else
                v132 = 0;
              v133 = *((_BYTE *)v217 + 9) != 0;
            }
            else
            {
              v132 = 0;
              v131 = 0;
              v133 = 0;
            }
            *((_QWORD *)&v248 + 1) = 0;
            *(_QWORD *)&v249 = 0;
            Children = (const __CFArray *)IOHIDEventGetChildren(a2);
            *(_QWORD *)&v248 = Children;
            if (Children)
              *(_QWORD *)&v249 = CFArrayGetCount(Children);
            sub_100010FD0((unint64_t)&v248);
            *(_OWORD *)v278 = v248;
            *(_OWORD *)&v278[16] = v249;
            v279 = v250;
            *(_QWORD *)&v280 = v251;
            while (1)
            {
              v135 = *(_QWORD *)&v278[24];
              if (!*(_QWORD *)&v278[24])
                break;
              v136 = v279;
              *((_QWORD *)&v279 + 1) = *(_QWORD *)&v278[24];
              *(_QWORD *)&v280 = v279;
              v137 = sub_100011258(*locationa, v279);
              v138 = objc_claimAutoreleasedReturnValue(v137);
              v139 = (id *)v138;
              if (v138 && (!v133 || !*(_BYTE *)(v138 + 288)))
              {
                FloatValue = IOHIDEventGetFloatValue(v135, 720896);
                v141 = IOHIDEventGetFloatValue(v135, 720897);
                sub_10000F200((uint64_t)v247, (uint64_t)obj, FloatValue, v141, CGPointZero.x, CGPointZero.y);
                sub_10000F364((uint64_t)v245, (uint64_t)obj, (uint64_t)v247, v132, (uint64_t)v129);
                v142 = objc_alloc_init(BKHitTestResultPathLocation);
                v143 = v142;
                if (v142)
                {
                  v144 = v245[1];
                  *(_OWORD *)&v142->_pathLocation.locationsAreValid = v245[0];
                  *(_OWORD *)&v142->_pathLocation.location.y = v144;
                  *(_OWORD *)&v142->_pathLocation.hitTestLocation.y = v245[2];
                  v142->_pathLocation.preciseLocation.y = v246;
                  v142->_pathIndex = v136;
                  v142->_contextRelationship = 0;
                }
                objc_msgSend(v128, "addObject:", v142);
                objc_msgSend(v139[34], "addObject:", v131);

              }
              sub_100010FD0((unint64_t)v278);
            }
            if (objc_msgSend(v128, "count"))
              sub_10000FCE0(obj, (uint64_t)a2, (uint64_t)v131, (uint64_t)v207, 0, v128, v127);

            v125 = v217;
LABEL_186:

          }
          v121 = objc_msgSend(v208, "countByEnumeratingWithState:objects:count:", v274, buf, 16);
        }
        while (v121);
      }

      if ((aSelector & 1) != 0)
      {
        v145 = IOHIDEventGetTimeStamp(a2);
        *((double *)obj + 21) = BSMonotonicReferencedTimeFromMachTime(v145);
      }
    }

    v146 = a2;
    if (v205 && !objc_msgSend(*(id *)(v205 + 24), "count"))
    {
      v164 = BKLogTouchEvents(0);
      v165 = objc_claimAutoreleasedReturnValue(v164);
      if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0]) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_DEBUG, "no events for regular clients", (uint8_t *)buf, 2u);
      }

      sub_1000150D4((uint64_t)obj);
    }
    else
    {
      if ((v202 & aSelector) == 1)
      {
        v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v213 + 8), "displayUUID"));
        v250 = 0u;
        v251 = 0u;
        v248 = 0u;
        v249 = 0u;
        v148 = sub_10000C210((id *)obj[5]);
        v149 = objc_claimAutoreleasedReturnValue(v148);
        v150 = -[NSObject countByEnumeratingWithState:objects:count:](v149, "countByEnumeratingWithState:objects:count:", &v248, buf, 16);
        if (v150)
        {
          v151 = *(_QWORD *)v249;
LABEL_199:
          v152 = 0;
          while (1)
          {
            if (*(_QWORD *)v249 != v151)
              objc_enumerationMutation(v149);
            v153 = *(id **)(*((_QWORD *)&v248 + 1) + 8 * v152);
            if (v153 != obj && (uint64_t)objc_msgSend(v153[14], "count") > 0)
              break;
            if (v150 == (id)++v152)
            {
              v150 = -[NSObject countByEnumeratingWithState:objects:count:](v149, "countByEnumeratingWithState:objects:count:", &v248, buf, 16);
              if (v150)
                goto LABEL_199;
              goto LABEL_206;
            }
          }
        }
        else
        {
LABEL_206:

          v154 = *((double *)obj + 20);
          v155 = IOHIDEventGetTimeStamp(a2);
          if (v154 >= BSMonotonicReferencedTimeFromMachTime(v155))
          {
            v171 = BKLogTouchEvents(v156);
            v149 = objc_claimAutoreleasedReturnValue(v171);
            if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v274 = 138543362;
              *(_QWORD *)&v274[4] = v147;
              _os_log_debug_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEBUG, "Assuming system gestures are not possible (lost race with SpringBoard) (%{public}@)", v274, 0xCu);
            }
          }
          else
          {
            v157 = BKLogTouchEvents(v156);
            v158 = objc_claimAutoreleasedReturnValue(v157);
            if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v274 = 138543362;
              *(_QWORD *)&v274[4] = v147;
              _os_log_debug_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEBUG, "Assuming system gestures are possible (%{public}@)", v274, 0xCu);
            }

            v233 = 1;
            v279 = 0u;
            v280 = 0u;
            memset(v278, 0, sizeof(v278));
            v159 = obj[5];
            if (v159)
              v159 = (_QWORD *)v159[3];
            v149 = v159;
            v160 = -[NSObject countByEnumeratingWithState:objects:count:](v149, "countByEnumeratingWithState:objects:count:", v278, v274, 16);
            if (v160)
            {
              v161 = **(_QWORD **)&v278[16];
              do
              {
                for (jj = 0; jj != v160; jj = (char *)jj + 1)
                {
                  if (**(_QWORD **)&v278[16] != v161)
                    objc_enumerationMutation(v149);
                  v163 = *(_QWORD *)(*(_QWORD *)&v278[8] + 8 * (_QWORD)jj);
                  if (v163 && *(_BYTE *)(v163 + 9))
                    *(_BYTE *)(v163 + 11) = 1;
                }
                v160 = -[NSObject countByEnumeratingWithState:objects:count:](v149, "countByEnumeratingWithState:objects:count:", v278, v274, 16);
              }
              while (v160);
            }
          }
        }

        v146 = a2;
      }
      *(_QWORD *)&v248 = _NSConcreteStackBlock;
      *((_QWORD *)&v248 + 1) = 3221225472;
      *(_QWORD *)&v249 = sub_10000A878;
      *((_QWORD *)&v249 + 1) = &unk_1000EC4C8;
      *(_QWORD *)&v250 = obj;
      *((_QWORD *)&v250 + 1) = v207;
      *(_QWORD *)&v251 = v146;
      BYTE8(v251) = v233;
      BYTE9(v251) = v201;
      sub_100013420((_QWORD *)v205, (uint64_t)&v248);
      v277 = 0u;
      v276 = 0u;
      v275 = 0u;
      *(_OWORD *)v274 = 0u;
      v172 = *locationa;
      v173 = objc_msgSend(v172, "countByEnumeratingWithState:objects:count:", v274, buf, 16);
      if (v173)
      {
        v174 = *(_QWORD *)v275;
        do
        {
          for (kk = 0; kk != v173; kk = (char *)kk + 1)
          {
            if (*(_QWORD *)v275 != v174)
              objc_enumerationMutation(v172);
            v176 = *(_QWORD *)(*(_QWORD *)&v274[8] + 8 * (_QWORD)kk);
            if (*(_QWORD *)(v176 + 32) == 1 && *(_BYTE *)(v176 + 288))
            {
              *(_BYTE *)(v176 + 288) = 0;
              *(_QWORD *)(v176 + 152) = 0;
              *(_QWORD *)(v176 + 160) = 0;
              *(_DWORD *)(v176 + 20) = 0;
            }
          }
          v173 = objc_msgSend(v172, "countByEnumeratingWithState:objects:count:", v274, buf, 16);
        }
        while (v173);
      }

      sub_1000150D4((uint64_t)obj);
      v178 = BKLogTouchEvents(v177);
      v179 = objc_claimAutoreleasedReturnValue(v178);
      v180 = os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG);

      if (v180)
      {
        if (v206)
        {
          v182 = BKLogTouchEvents(v181);
          v183 = objc_claimAutoreleasedReturnValue(v182);
          if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
          {
            v184 = objc_msgSend(*(id *)(v213 + 8), "senderID");
            v185 = (void *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", *locationa));
            *(_DWORD *)v278 = 134218498;
            *(_QWORD *)&v278[4] = v184;
            *(_WORD *)&v278[12] = 2114;
            *(_QWORD *)&v278[14] = v206;
            *(_WORD *)&v278[22] = 2114;
            *(_QWORD *)&v278[24] = v185;
            _os_log_debug_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_DEBUG, "digitizer:%llX - display:%{public}@ - %{public}@", v278, 0x20u);

          }
        }
        else
        {
          v186 = BKLogTouchEvents(v181);
          v183 = objc_claimAutoreleasedReturnValue(v186);
          if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
          {
            v191 = objc_msgSend(*(id *)(v213 + 8), "senderID");
            v192 = (void *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", *locationa));
            *(_DWORD *)v278 = 134218242;
            *(_QWORD *)&v278[4] = v191;
            *(_WORD *)&v278[12] = 2114;
            *(_QWORD *)&v278[14] = v192;
            _os_log_debug_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_DEBUG, "contacts:%llX - %{public}@", v278, 0x16u);

          }
        }

      }
    }

    goto LABEL_251;
  }
LABEL_252:

  sub_100013358(v243);
LABEL_253:
  v227 = 0u;
  v228 = 0u;
  v225 = 0u;
  v226 = 0u;
  v187 = *(id *)(v213 + 72);
  v188 = objc_msgSend(v187, "countByEnumeratingWithState:objects:count:", &v225, v252, 16);
  if (v188)
  {
    v189 = *(_QWORD *)v226;
    do
    {
      for (mm = 0; mm != v188; mm = (char *)mm + 1)
      {
        if (*(_QWORD *)v226 != v189)
          objc_enumerationMutation(v187);
        objc_msgSend(*(id *)(*((_QWORD *)&v225 + 1) + 8 * (_QWORD)mm), "touchDidFinishProcessingTouchCollection");
      }
      v188 = objc_msgSend(v187, "countByEnumeratingWithState:objects:count:", &v225, v252, 16);
    }
    while (v188);
  }

}

void sub_10000EA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_10000EDA4(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  void *v13;
  NSString *v14;
  void *v15;
  uint64_t v16;
  objc_class *v17;
  NSString *v18;
  void *v19;
  id *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  id *v30;
  __int16 v31;
  const __CFString *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  void *v36;
  _BYTE v37[128];

  if (a3)
    v5 = *(_QWORD *)(a3 + 32);
  else
    v5 = 0;
  if ((a1[6] & ~v5) == 0)
  {
    v6 = a2;
    v20 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 128), "objectForKey:", a2));
    if (v20)
    {
      v7 = (void *)a1[5];
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v8 = v7;
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v37, 16);
      if (v9)
      {
        v10 = *(_QWORD *)v22;
        do
        {
          for (i = 0; i != v9; i = (char *)i + 1)
          {
            if (*(_QWORD *)v22 != v10)
              objc_enumerationMutation(v8);
            v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i) + 8);
            if (v12 >= 30)
            {
              v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("pathIndex out of bounds: %d"), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i) + 8)));
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                v14 = NSStringFromSelector("removeContacts:");
                v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
                v17 = (objc_class *)objc_opt_class(v20, v16);
                v18 = NSStringFromClass(v17);
                v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
                *(_DWORD *)buf = 138544642;
                v26 = v15;
                v27 = 2114;
                v28 = v19;
                v29 = 2048;
                v30 = v20;
                v31 = 2114;
                v32 = CFSTR("BKTouchContactSet.m");
                v33 = 1024;
                v34 = 112;
                v35 = 2114;
                v36 = v13;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

              }
              _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v13), "UTF8String"));
              __break(0);
              JUMPOUT(0x10000F05CLL);
            }
            v20[v12 + 2] = 0;
          }
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v37, 16);
        }
        while (v9);
      }

      objc_msgSend(v20[1], "removeObjectsInArray:", v8);
    }
    if (!objc_msgSend(v20, "count"))
      objc_msgSend(*(id *)(a1[4] + 128), "removeObjectForKey:", v6);
    sub_10000F090(a1[4], a3);

  }
}

void sub_10000F06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10000F090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;

  if (a1)
  {
    if (a2)
    {
      v4 = *(unsigned int *)(a2 + 8);
      if (objc_msgSend(*(id *)(a2 + 24), "count"))
        return;
    }
    else
    {
      v4 = 0;
    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 128), "objectForKey:", v4));
    v6 = objc_msgSend(v5, "count");

    if ((uint64_t)v6 <= 0)
    {
      v7 = BKLogTouchEvents();
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v9 = 138543362;
        v10 = a2;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "removing destination: %{public}@", (uint8_t *)&v9, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 120), "removeObjectForKey:", v4);
      objc_msgSend(*(id *)(a1 + 128), "removeObjectForKey:", v4);
    }
  }
}

void sub_10000F1B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000F1C8(uint64_t a1)
{
  if ((objc_msgSend(*(id *)(a1 + 32), "isActive") & 1) == 0)
    sub_10000BB70(*(_QWORD *)(a1 + 40));
}

float64x2_t sub_10000F200(uint64_t a1, uint64_t a2, float64_t a3, float64_t a4, float64_t a5, float64_t a6)
{
  void *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  double v21;
  char v22;
  char v23;
  double v24;
  float64x2_t result;
  float64x2_t v26;
  float64x2_t v31;
  float64x2_t v32;
  double v33;
  float64x2_t v34;

  v34 = 0uLL;
  v33 = 1.0;
  v31 = 0uLL;
  __asm { FMOV            V0.2D, #1.0 }
  v26 = _Q0;
  v32 = _Q0;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 8), "displayUUID"));
  sub_10000F834(v13, &v34, &v34.f64[1], &v33, 0, (uint64_t)&v31);

  v14.f64[0] = a3;
  v14.f64[1] = a4;
  v15.f64[0] = a5;
  v15.f64[1] = a6;
  v16 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33, 0);
  v17 = vmlaq_f64(vmulq_n_f64(v15, v33), v34, vminnmq_f64(vmaxnmq_f64(vdivq_f64(vsubq_f64(v14, v31), v32), (float64x2_t)0), v26));
  v18 = vdivq_f64(vrndaq_f64(v17), v16);
  v19 = 1.0 / v33 * 0.5;
  v20 = v19 + v18.f64[0];
  v21 = v18.f64[0] - v19;
  if (v18.f64[0] == v34.f64[0] / v33)
  {
    v22 = 1;
  }
  else
  {
    v21 = v18.f64[0];
    v22 = 0;
  }
  if (v18.f64[0] == 0.0)
  {
    v23 = 1;
  }
  else
  {
    v20 = v21;
    v23 = v22;
  }
  v24 = v18.f64[1];
  if (v18.f64[1] == 0.0)
  {
    v24 = v19 + v18.f64[1];
LABEL_11:
    v23 = 1;
    goto LABEL_12;
  }
  if (v18.f64[1] == v34.f64[1] / v33)
  {
    v24 = v18.f64[1] - v19;
    goto LABEL_11;
  }
LABEL_12:
  result = vdivq_f64(v17, v16);
  *(_BYTE *)a1 = 1;
  *(_BYTE *)(a1 + 1) = v23;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 205);
  *(float64x2_t *)(a1 + 8) = v18;
  *(double *)(a1 + 24) = v20;
  *(double *)(a1 + 32) = v24;
  *(float64x2_t *)(a1 + 40) = result;
  return result;
}

void sub_10000F354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_10000F364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64x2_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (!a2)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)&v17 = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return *(double *)&v17;
  }
  *(_WORD *)a1 = 0;
  v10 = vdupq_n_s64(0xC197D783FC000000);
  *(int64x2_t *)(a1 + 8) = v10;
  v11 = (__int128 *)(a1 + 8);
  *(int64x2_t *)(a1 + 24) = v10;
  v12 = (__int128 *)(a1 + 24);
  *(_BYTE *)(a1 + 2) = 0;
  *(int64x2_t *)(a1 + 40) = v10;
  *(double *)(a1 + 24) = sub_10000F478(a2, a5, a4, *(double *)(a3 + 24), *(double *)(a3 + 32));
  *(_QWORD *)(a1 + 32) = v13;
  v14 = *(unsigned __int8 *)(a3 + 1);
  *(_BYTE *)(a1 + 1) = v14;
  v15 = *(unsigned __int8 *)(a3 + 2);
  *(_BYTE *)(a1 + 2) = v15;
  if (!v14)
  {
    *v11 = *v12;
    if (v15)
      goto LABEL_4;
LABEL_6:
    v17 = *v11;
    *(_OWORD *)(a1 + 40) = *v11;
    goto LABEL_7;
  }
  *(double *)(a1 + 8) = sub_10000F478(a2, a5, a4, *(double *)(a3 + 8), *(double *)(a3 + 16));
  *(_QWORD *)(a1 + 16) = v16;
  if (!*(_BYTE *)(a3 + 2))
    goto LABEL_6;
LABEL_4:
  *(double *)&v17 = sub_10000F478(a2, a5, a4, *(double *)(a3 + 40), *(double *)(a3 + 48));
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 48) = v18;
LABEL_7:
  *(_BYTE *)a1 = 1;
  return *(double *)&v17;
}

double sub_10000F478(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  _QWORD *v9;
  _QWORD *v10;
  double v11;
  double v12;

  v9 = *(_QWORD **)(a1 + 40);
  if (v9)
    v9 = (_QWORD *)v9[1];
  v10 = v9;
  objc_msgSend(v10, "convertReferenceLocation:toCAScreenLocationForDisplayUUID:", a2, a4, a5);
  objc_msgSend(v10, "convertCAScreenLocation:toContextID:displayUUID:", a3, a2);
  v12 = v11;

  return v12;
}

void sub_10000F4F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_10000F560(uint64_t a1, void *a2, double a3, double a4)
{
  id v7;
  void *v8;
  double v9;
  double v10;

  v7 = sub_10000F5CC(a2, (uint64_t)"BKDisplayConvertCAScreenLocationToContext");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v8, "convertPoint:toContextId:", a1, a3, a4);
  v10 = v9;

  return v10;
}

id sub_10000F5CC(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  int v10;
  uint64_t v11;
  __int16 v12;
  id v13;

  v3 = a1;
  if (sub_10000F94C(v3))
  {
    v4 = sub_10000F6DC();
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (v5)
      goto LABEL_8;
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[CAWindowServer serverIfRunning](CAWindowServer, "serverIfRunning"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "displayWithUniqueId:", v3));

    if (v5)
      goto LABEL_8;
  }
  v7 = BKLogDisplay();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v10 = 136446466;
    v11 = a2;
    v12 = 2114;
    v13 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s: unknown displayUUID:%{public}@ ", (uint8_t *)&v10, 0x16u);
  }

LABEL_8:
  return v5;
}

id sub_10000F6DC()
{
  id v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  id v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3032000000;
  v6 = sub_1000348CC;
  v7 = sub_1000348DC;
  v8 = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10000FC94;
  v2[3] = &unk_1000EA580;
  v2[4] = &v3;
  sub_10000FA60(v2);
  v0 = (id)v4[5];
  _Block_object_dispose(&v3, 8);

  return v0;
}

void sub_10000F788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000F7A0(void *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  v2 = 0x3FF0000000000000;
  v1 = 0;
  sub_10000F834(a1, &v3, &v4, (double *)&v2, &v1, 0);
}

void sub_10000F834(void *a1, _QWORD *a2, _QWORD *a3, double *a4, _BYTE *a5, uint64_t a6)
{
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  void *v18;
  id v24;
  _QWORD v25[10];

  v24 = a1;
  if (sub_10000F94C(v24))
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10000FBA8;
    v25[3] = &unk_1000EA5A0;
    v25[4] = a2;
    v25[5] = a3;
    v25[6] = a4;
    v25[7] = a5;
    v25[8] = a6;
    v25[9] = 0;
    sub_10000FA60(v25);
  }
  else
  {
    v11 = sub_100034B98(v24);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    objc_msgSend(v12, "bounds");
    v14 = v13;
    v16 = v15;
    BKSDisplayServicesGetExternalDisplayScale(v12);
    if (a2)
      *a2 = v14;
    if (a3)
      *a3 = v16;
    if (a4)
      *a4 = v17;
    if (a5)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "nativeOrientation"));
      *a5 = sub_100034D5C(v18);

    }
    if (a6)
    {
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(a6 + 16) = _Q0;
    }

  }
}

uint64_t sub_10000F94C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;

  v1 = a1;
  v8 = 0;
  v9 = &v8;
  v10 = 0x3032000000;
  v11 = sub_1000348CC;
  v12 = sub_1000348DC;
  v13 = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10000FAB4;
  v7[3] = &unk_1000EA580;
  v7[4] = &v8;
  sub_10000FA60(v7);
  v2 = (void *)v9[5];
  if (v2)
  {
    v3 = (uint64_t)objc_msgSend(v2, "isEqualToString:", v1);
  }
  else
  {
    v4 = v1;
    v5 = v4;
    if (v4)
      v3 = (uint64_t)objc_msgSend(v4, "isEqualToString:", BKSDisplayUUIDMainKey);
    else
      v3 = 1;

  }
  _Block_object_dispose(&v8, 8);

  return v3;
}

void sub_10000FA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000FA60(void *a1)
{
  void (**v1)(id, uint64_t);

  v1 = a1;
  os_unfair_lock_assert_not_owner((const os_unfair_lock *)&unk_1001172A8);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1001172A8);
  v1[2](v1, qword_1001172A0);

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001172A8);
}

void sub_10000FAB4(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;

  v10 = a2;
  if (objc_msgSend(v10, "isExternal"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "windowServerDisplay"));
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueId"));
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100034B54;
    block[3] = &unk_1000ECDA8;
    v7 = v10;
    v12 = v7;
    if (qword_100117280 == -1)
    {
      v3 = v7;
    }
    else
    {
      dispatch_once(&qword_100117280, block);
      v3 = v12;
    }
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v9 = (id)qword_100117278;
    v6 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v9;
  }

}

void sub_10000FBA8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v3 = a2;
  v12 = v3;
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(v3, "size");
    v3 = v12;
    **(_QWORD **)(a1 + 32) = v4;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(v12, "size");
    v3 = v12;
    **(_QWORD **)(a1 + 40) = v5;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    objc_msgSend(v12, "scale");
    v3 = v12;
    **(_QWORD **)(a1 + 48) = v6;
  }
  if (*(_QWORD *)(a1 + 56))
  {
    **(_BYTE **)(a1 + 56) = objc_msgSend(v12, "nativeRotation");
    v3 = v12;
  }
  v7 = *(_QWORD **)(a1 + 64);
  if (v7)
  {
    objc_msgSend(v12, "normalizedDigitizerRect");
    v3 = v12;
    *v7 = v8;
    v7[1] = v9;
    v7[2] = v10;
    v7[3] = v11;
  }
  if (*(_QWORD *)(a1 + 72))
  {
    **(_BYTE **)(a1 + 72) = objc_msgSend(v12, "isExternal");
    v3 = v12;
  }

}

void sub_10000FC94(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "windowServerDisplay"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10000FCE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, double a7)
{
  unsigned int v10;
  uint64_t TimeStamp;
  char v12;
  id v13;
  uint64_t IntegerValue;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFArray *Children;
  const __CFArray *v20;
  CFIndex Count;
  CFIndex v22;
  const void *ValueAtIndex;
  int Type;
  unsigned __int16 v25;
  __int16 v26;
  const void *Copy;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  _BOOL4 v48;
  int v49;
  BOOL v50;
  _BOOL4 v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  _BOOL4 v58;
  uint64_t v59;
  char v60;
  BOOL v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  __n128 v76;
  id v77;
  double v78;
  _DWORD *v79;
  int v80;
  _BOOL4 v81;
  CFIndex v82;
  uint64_t v83;
  const __CFArray *v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  NSObject *v91;
  _DWORD *DataValue;
  int v93;
  id v94;
  void *v95;
  int v96;
  int v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  NSObject *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  int v123;
  unsigned int v124;
  int v125;
  _BOOL4 v126;
  const __CFArray *v127;
  int v128;
  unsigned int v130;
  uint64_t v131;
  BKTouchContactSet *v132;
  id v134;
  unsigned __int8 *v135;
  const void *v136;
  id v137;
  CFIndex v138;
  __IOHIDEvent *cf;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint8_t v144[16];
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint8_t buf[16];
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  _BYTE v152[128];

  if (a1)
  {
    if (!a2)
      __assert_rtn("-[BKDirectTouchState _appendSubsetOfHIDCollection:forDestination:toEventPoster:systemGestureIsPossible:pathLocations:initialTouchTimestamp:]", "BKDirectTouchState.mm", 2193, "pathCollectionEvent");
    if (a3)
    {
      v10 = *(_DWORD *)(a3 + 12);
      v130 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      v130 = 0;
      v10 = 0;
    }
    v134 = objc_alloc_init((Class)NSMutableArray);
    v132 = objc_alloc_init(BKTouchContactSet);
    v137 = a1;
    TimeStamp = IOHIDEventGetTimeStamp(a2);
    IOHIDEventGetEventFlags(a2);
    LODWORD(v117) = 0;
    HIDWORD(v117) = v12 & 0x20 | 4;
    cf = (__IOHIDEvent *)IOHIDEventCreateDigitizerEvent(0, TimeStamp, 3, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, v117);
    v13 = *((id *)v137 + 1);
    IOHIDEventSetSenderID(cf, objc_msgSend(v13, "senderID"));

    IntegerValue = IOHIDEventGetIntegerValue(a2, 720923);
    IOHIDEventSetIntegerValue(cf, 720923, IntegerValue);
    v15 = IOHIDEventGetIntegerValue(a2, 720924);
    IOHIDEventSetIntegerValue(cf, 720924, v15);
    v16 = IOHIDEventGetIntegerValue(a2, 720925);
    IOHIDEventSetIntegerValue(cf, 720925, v16);
    v17 = IOHIDEventGetIntegerValue(a2, 720921);
    IOHIDEventSetIntegerValue(cf, 720921, v17);
    v18 = IOHIDEventGetIntegerValue(a2, 4);
    IOHIDEventSetIntegerValue(cf, 4, v18);

    Children = (const __CFArray *)IOHIDEventGetChildren(a2);
    v20 = Children;
    if (Children)
    {
      Count = CFArrayGetCount(Children);
      if (Count >= 1)
      {
        v138 = Count;
        v118 = v10;
        v131 = 0;
        v22 = 0;
        v127 = v20;
LABEL_8:
        ValueAtIndex = CFArrayGetValueAtIndex(v20, v22);
        Type = IOHIDEventGetType(ValueAtIndex);
        if (Type != 11)
        {
          if (Type != 1
            || (v25 = IOHIDEventGetIntegerValue(ValueAtIndex, 0x10000),
                v26 = IOHIDEventGetIntegerValue(ValueAtIndex, 65537),
                v25 != 65280)
            || v26 != 38)
          {
            Copy = (const void *)IOHIDEventCreateCopy(0, ValueAtIndex);
            IOHIDEventAppendEvent(cf, Copy, 0, v28);
            CFRelease(Copy);
          }
          goto LABEL_124;
        }
        v29 = IOHIDEventGetIntegerValue(ValueAtIndex, 720901);
        v30 = v29;
        if (v29 >= 30)
        {
          v31 = BKLogTouchEvents(v29);
          v32 = objc_claimAutoreleasedReturnValue(v31);
          if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v30;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v32, OS_LOG_TYPE_ERROR, "bad path count:%d", buf, 8u);
          }
          goto LABEL_123;
        }
        v33 = sub_100011258(*((id **)v137 + 14), v29);
        v32 = objc_claimAutoreleasedReturnValue(v33);
        if (!v32)
        {
          v64 = BKLogTouchEvents(0);
          v42 = objc_claimAutoreleasedReturnValue(v64);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v30;
            _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "no contact for pathIndex:%d", buf, 8u);
          }
          goto LABEL_122;
        }
        v142 = 0u;
        v143 = 0u;
        v140 = 0u;
        v141 = 0u;
        v34 = a6;
        v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v140, v152, 16);
        if (!v35)
        {
LABEL_29:

          v20 = v127;
          v41 = BKLogTouchEvents(v40);
          v42 = objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v30;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v130;
            _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Filtering pathIndex:%d from ctx:%X", buf, 0xEu);
          }
          goto LABEL_122;
        }
        v36 = *(_QWORD *)v141;
LABEL_19:
        v37 = 0;
        while (1)
        {
          if (*(_QWORD *)v141 != v36)
            objc_enumerationMutation(v34);
          v38 = *(_QWORD **)(*((_QWORD *)&v140 + 1) + 8 * v37);
          if (v38)
          {
            if (v38[1] == v30)
            {
              v135 = v38;

              v96 = v135[25];
              v97 = v135[26];
              v98 = *((double *)v135 + 4);
              v99 = *((double *)v135 + 5);
              v100 = *((double *)v135 + 6);
              v101 = *((double *)v135 + 7);
              v102 = *((double *)v135 + 8);
              v103 = *((double *)v135 + 9);
LABEL_32:
              v43 = IOHIDEventCreateCopy(0, ValueAtIndex);
              IOHIDEventSetFloatValue(v43, 720896, v98);
              IOHIDEventSetFloatValue(v43, 720897, v99);
              v44 = IOHIDEventGetIntegerValue(v43, 720903);
              v45 = IOHIDEventGetIntegerValue(v43, 720905);
              v125 = v96;
              v136 = (const void *)v43;
              v46 = (id)IOHIDEventGetIntegerValue(v43, 720904);
              v47 = v46;
              v48 = v45 == 0;
              v126 = v46 != 0;
              v49 = *(unsigned __int8 *)(v32 + 288);
              v123 = v97;
              v124 = v48 & (v44 >> 1);
              v128 = v49;
              if (v135)
              {
                v50 = v49 == 0;
                v51 = v49 != 0;
                v52 = (v45 != 0) & (v44 >> 1);
                v53 = *((_QWORD *)v135 + 2);
                if (!v50)
                  LOBYTE(v52) = 1;
                v54 = v53 != 3 || v51;
                if (v53 == 2)
                  v55 = v52 | v44 & (v46 != 0);
                else
                  v55 = 1;
                if (v53)
                {
                  v56 = v48 & (v44 >> 1);
                }
                else
                {
                  v51 = 0;
                  v56 = 0;
                }
                if (v56 != 1 || v53 == 4)
                {
                  if (v53 == 3)
                    v63 = 3;
                  else
                    v63 = 1;
                  if (v53 == 2)
                    v63 = 2;
                  if (v53 == 4)
                    v63 = 4;
                  v20 = v127;
                }
                else
                {
                  v119 = v44;
                  v57 = v45;
                  v58 = v51;
                  v59 = v32;
                  v60 = v55;
                  v61 = v48;
                  v62 = v54;
                  v120 = v59;
                  v46 = objc_msgSend(*((id *)v137 + 8), "noteTouchUpOccurred:detached:context:clientPort:", *(unsigned int *)(v59 + 16), v128 != 0, v130, v118);
                  if (v53 == 3)
                    v63 = 3;
                  else
                    v63 = 1;
                  if (v53 == 2)
                    v63 = 2;
                  v20 = v127;
                  v54 = v62;
                  LOBYTE(v48) = v61;
                  v55 = v60;
                  v51 = v58;
                  v45 = v57;
                  v44 = v119;
                  v32 = v120;
                }
                if (v51)
                  v65 = v63;
                else
                  v65 = 0;
              }
              else
              {
                v65 = 0;
                v54 = 1;
                v55 = 1;
                v20 = v127;
              }
              if (v47)
                v66 = 1;
              else
                v66 = v48;
              if ((v66 & 1) == 0)
              {
                v126 = 1;
                v67 = v54;
                v46 = (id)IOHIDEventSetIntegerValue(v136, 720904, 1);
                v54 = v67;
              }
              if ((v54 & 1) != 0)
              {
                v68 = v44;
                if ((v55 & 1) == 0)
                {
                  v69 = BKLogTouchEvents(v46);
                  v70 = objc_claimAutoreleasedReturnValue(v69);
                  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&buf[4] = v130;
                    _os_log_debug_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "-------> synthetic touch down due to client change to contextID: 0x%x", buf, 8u);
                  }

                  v71 = v44 | 2;
                  if (!v45)
                    v71 = v44;
                  v68 = v71 & 0xFFFFFFFFFFFFF7DALL | 0x821;
                }
                if (v45)
                  v72 = 1;
                else
                  v72 = v126;
                if (v72 == 1 && (v44 & 0x80) == 0)
                  sub_100012D78((uint64_t)v132, v32);
              }
              else
              {
                if (v45)
                {
                  v73 = BKLogTouchEvents(v46);
                  v74 = objc_claimAutoreleasedReturnValue(v73);
                  if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&buf[4] = v130;
                    _os_log_debug_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "-------> synthetic touch cancel due to client change to contextID: 0x%x", buf, 8u);
                  }
                  v68 = 131;
                }
                else
                {
                  v75 = BKLogTouchEvents(v46);
                  v74 = objc_claimAutoreleasedReturnValue(v75);
                  if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&buf[4] = v130;
                    _os_log_debug_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "-------> synthetic range out due to client change to contextID: 0x%x", buf, 8u);
                  }
                  v68 = 1;
                }

                IOHIDEventSetIntegerValue(v136, 720905, 0);
                IOHIDEventSetIntegerValue(v136, 720904, 0);
              }
              IOHIDEventSetIntegerValue(v136, 720903, v68);
              if (!v128 && !*(_DWORD *)(v32 + 16) && !v125 && !v123)
              {
                v76.n128_u64[0] = *(_QWORD *)(v32 + 184);
                if (v76.n128_f64[0] == 0.0)
                  goto LABEL_121;
              }
              v77 = objc_alloc_init((Class)BKSHIDEventDigitizerPathAttributes);
              objc_msgSend(v77, "setPathIndex:", v30);
              objc_msgSend(v77, "setTouchIdentifier:", *(unsigned int *)(v32 + 16));
              objc_msgSend(v77, "setUserIdentifier:", *(unsigned int *)(v32 + 20));
              v78 = *(double *)(v32 + 184);
              *(float *)&v78 = v78;
              objc_msgSend(v77, "setZGradient:", v78);
              objc_msgSend(v77, "setLocus:", v65);
              objc_msgSend(v77, "setHitTestLocation:", v100, v101);
              objc_msgSend(v77, "setPreciseLocation:", v102, v103);
              if (*(_QWORD *)(v32 + 264))
              {
                v79 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v32 + 280), "firstObject"));
                v80 = v79 ? v79[2] : 0;
                v81 = v80 == v130;

                if (v81)
                  objc_msgSend(v77, "setSecurityAnalysis:", *(_QWORD *)(v32 + 264));
              }
              if (!v124)
                goto LABEL_120;
              sub_1000111B4((const __CFArray **)buf, (uint64_t)ValueAtIndex);
              v82 = *(_QWORD *)&buf[8];
              v83 = v149;
              if (*(uint64_t *)&buf[8] >= (uint64_t)v149)
              {
LABEL_116:
                v93 = 0;
                goto LABEL_117;
              }
              v84 = *(const __CFArray **)buf;
              while (1)
              {
                if (v83)
                  v85 = CFArrayGetValueAtIndex(v84, v82);
                else
                  v85 = 0;
                if (IOHIDEventGetType(v85) == 1)
                {
                  v86 = IOHIDEventGetIntegerValue(ValueAtIndex, 0x10000);
                  v87 = IOHIDEventGetIntegerValue(ValueAtIndex, 65537);
                  if (v86 == 65280 && v87 == 34)
                  {
                    v88 = IOHIDEventGetIntegerValue(ValueAtIndex, 65539);
                    v89 = v88;
                    if (v88 > 7)
                    {
                      DataValue = (_DWORD *)IOHIDEventGetDataValue(ValueAtIndex, 65540);
                      if (*DataValue == 1)
                      {
                        v93 = DataValue[1];
LABEL_117:
                        v94 = sub_100016868((uint64_t)v137, v32, v93, a3);
                        v95 = (void *)objc_claimAutoreleasedReturnValue(v94);
                        if (v95)
                          objc_msgSend(v77, "setAuthenticationMessage:", v95);

LABEL_120:
                        objc_msgSend(v134, "addObject:", v77);

LABEL_121:
                        IOHIDEventAppendEvent(cf, v136, 0, v76);
                        CFRelease(v136);
                        ++v131;
                        v42 = v135;
LABEL_122:

LABEL_123:
LABEL_124:
                        if (++v22 == v138)
                        {
                          if (v131 > 0)
                          {
                            v104 = objc_alloc_init((Class)BKSHIDEventDigitizerAttributes);
                            v105 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDEventDeferringToken tokenForIdentifierOfCAContext:](BKSHIDEventDeferringToken, "tokenForIdentifierOfCAContext:", v130));
                            objc_msgSend(v104, "setToken:", v105);

                            objc_msgSend(v104, "setInitialTouchTimestamp:", a7);
                            objc_msgSend(v104, "setSystemGesturesPossible:", a5 != 0);
                            objc_msgSend(v104, "setPathAttributes:", v134);
                            if (a3)
                            {
                              v106 = *(id *)(a3 + 16);
                              v107 = v106;
                              if (v106)
                                objc_msgSend(v104, "setSceneTouchBehavior:", objc_msgSend(v106, "touchBehavior"));
                            }
                            else
                            {
                              v107 = 0;
                            }
                            if (*((_QWORD *)v137 + 10))
                              objc_msgSend(v104, "setOptions:", 256);
                            sub_1000111B4((const __CFArray **)buf, (uint64_t)cf);
                            sub_100010FD0((unint64_t)buf);
                            v108 = 0;
                            v109 = 0;
                            v110 = 0;
                            v111 = 0;
                            *(_OWORD *)v144 = *(_OWORD *)buf;
                            v145 = v149;
                            v146 = v150;
                            v147 = v151;
                            while (1)
                            {
                              v112 = *((_QWORD *)&v145 + 1);
                              if (!*((_QWORD *)&v145 + 1))
                                break;
                              *((_QWORD *)&v146 + 1) = *((_QWORD *)&v145 + 1);
                              v147 = v146;
                              if (IOHIDEventGetIntegerValue(*((_QWORD *)&v145 + 1), 720905))
                                v109 = 1;
                              v113 = IOHIDEventGetIntegerValue(v112, 720904);
                              v114 = IOHIDEventGetIntegerValue(v112, 720903);
                              if (v113)
                                v110 = 1;
                              v108 |= v114 & 0xF060807;
                              v111 |= (v114 >> 7) & 1;
                              sub_100010FD0((unint64_t)v144);
                            }
                            if ((v111 & 1) != 0 && !-[BKTouchContactSet count](v132, "count"))
                            {
                              v115 = BKLogTouchEvents(0);
                              v116 = objc_claimAutoreleasedReturnValue(v115);
                              if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
                              {
                                *(_DWORD *)buf = 67109120;
                                *(_DWORD *)&buf[4] = v130;
                                _os_log_debug_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEBUG, "full collection cancel contextID: 0x%X", buf, 8u);
                              }

                              v108 |= 0x80u;
                            }
                            IOHIDEventSetIntegerValue(cf, 720903, v108);
                            IOHIDEventSetIntegerValue(cf, 720905, v109);
                            IOHIDEventSetIntegerValue(cf, 720904, v110);
                            objc_msgSend(*((id *)v137 + 16), "setObject:forKey:", v132, v130);
                            sub_1000113BC(a4, cf, v104, (void *)a3);

                          }
                          goto LABEL_148;
                        }
                        goto LABEL_8;
                      }
                    }
                    else
                    {
                      v90 = BKLogTouchEvents(v88);
                      v91 = objc_claimAutoreleasedReturnValue(v90);
                      if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v144 = 67109120;
                        *(_DWORD *)&v144[4] = v89;
                        _os_log_error_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "malformed AX subevent (length is %d), want at least 8 bytes", v144, 8u);
                      }

                    }
                  }
                }
                if (v83 == ++v82)
                  goto LABEL_116;
              }
            }
          }
          else if (!v30)
          {

            v135 = 0;
            v96 = 0;
            v97 = 0;
            v98 = 0.0;
            v99 = 0.0;
            v100 = 0.0;
            v101 = 0.0;
            v102 = 0.0;
            v103 = 0.0;
            goto LABEL_32;
          }
          if (v35 == (id)++v37)
          {
            v39 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v140, v152, 16);
            v35 = v39;
            if (!v39)
              goto LABEL_29;
            goto LABEL_19;
          }
        }
      }
    }
LABEL_148:
    CFRelease(cf);

  }
}

void sub_100010A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29)
{
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

id sub_100010F8C()
{
  if (qword_100117438 != -1)
    dispatch_once(&qword_100117438, &stru_1000EB4D8);
  return (id)qword_100117430;
}

unint64_t sub_100010FD0(unint64_t result)
{
  _QWORD *v1;
  CFIndex v2;
  CFIndex v3;
  unint64_t v4;
  uint64_t Type;
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t TypeString;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 16);
  if (v2
    && (v3 = *(_QWORD *)(result + 8), v3 < v2)
    && (result = (unint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)result, v3)) != 0)
  {
    v4 = result;
    ++v1[1];
    Type = IOHIDEventGetType();
    if ((_DWORD)Type == 1)
    {
LABEL_16:
      v1[3] = 0;
      v1[4] = 0x7FFFFFFFFFFFFFFFLL;
      return sub_100010FD0(v1);
    }
    v6 = Type;
    if ((_DWORD)Type != 11)
    {
      v11 = BKLogTouchEvents();
      v9 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v13 = 136446210;
        TypeString = IOHIDEventGetTypeString(v6);
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "skipping subevent of type %{public}s", (uint8_t *)&v13, 0xCu);
      }
      goto LABEL_15;
    }
    result = IOHIDEventGetIntegerValue(v4, 720901);
    v7 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      v12 = BKLogTouchEvents();
      v9 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v13 = 67109120;
        LODWORD(TypeString) = v7;
        v10 = "%d < 0";
        goto LABEL_19;
      }
LABEL_15:

      goto LABEL_16;
    }
    if (result >= 0x1E)
    {
      v8 = BKLogTouchEvents();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v13 = 67109120;
        LODWORD(TypeString) = v7;
        v10 = "%d >= MAX_PATH_COUNT";
LABEL_19:
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v13, 8u);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    v1[3] = v4;
    v1[4] = result;
  }
  else
  {
    v1[3] = 0;
    v1[4] = 0x7FFFFFFFFFFFFFFFLL;
  }
  return result;
}

void sub_10001119C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFArray **sub_1000111B4(const __CFArray **a1, uint64_t a2)
{
  const __CFArray *Children;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    Children = (const __CFArray *)IOHIDEventGetChildren(a2);
    *a1 = Children;
    if (Children)
      a1[2] = (const __CFArray *)CFArrayGetCount(Children);
  }
  return a1;
}

id *sub_100011258(id *a1, uint64_t a2)
{
  id *v2;
  void *v4;
  NSString *v5;
  void *v6;
  uint64_t v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  id *v16;
  __int16 v17;
  const __CFString *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  void *v22;

  if (a1)
  {
    v2 = a1;
    if (a2 >= 30)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("pathIndex out of bounds: %d"), a2));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        v5 = NSStringFromSelector("contactForPathIndex:");
        v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
        v8 = (objc_class *)objc_opt_class(v2, v7);
        v9 = NSStringFromClass(v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        *(_DWORD *)buf = 138544642;
        v12 = v6;
        v13 = 2114;
        v14 = v10;
        v15 = 2048;
        v16 = v2;
        v17 = 2114;
        v18 = CFSTR("BKTouchContactSet.m");
        v19 = 1024;
        v20 = 51;
        v21 = 2114;
        v22 = v4;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

      }
      _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v4), "UTF8String"));
      __break(0);
      JUMPOUT(0x1000113B4);
    }
    a1 = (id *)a1[a2 + 2];
  }
  return a1;
}

void sub_1000113BC(uint64_t a1, __IOHIDEvent *a2, void *a3, void *a4)
{
  unsigned int *v7;
  BKCAContextDestination *context;
  BKHIDCollectedEvent *v9;
  BKHIDCollectedEvent *v10;
  __IOHIDEvent *event;
  __IOHIDEvent *v12;
  unsigned int *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  BKHIDCollectedEvent *v18;

  if (a1)
  {
    v7 = a4;
    context = a3;
    sub_1000121A0(a1);
    v9 = objc_alloc_init(BKHIDCollectedEvent);
    v18 = v9;
    if (v9)
    {
      v10 = v9;
      event = v9->_event;
      if (event != a2)
      {
        if (event)
          CFRelease(event);
        v12 = (__IOHIDEvent *)CFRetain(a2);
        v10 = v18;
        v18->_event = v12;
      }
      objc_storeStrong((id *)&v10->_attributes, a3);

      v13 = v7;
      context = v18->_context;
      v18->_context = (BKCAContextDestination *)v13;
    }

    if (v7)
      v14 = v7[3];
    else
      v14 = 0;

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v14));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "objectForKeyedSubscript:", v15));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)objc_msgSend(v16, "integerValue") + 1));
    objc_msgSend(*(id *)(a1 + 8), "setObject:forKeyedSubscript:", v17, v15);

    objc_msgSend(*(id *)(a1 + 16), "addObject:", v18);
  }
}

void sub_100011500(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  unsigned int *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;

  v13 = a3;
  v6 = a4;
  v7 = v6;
  if (v6)
    v8 = v6[3];
  else
    v8 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKeyedSubscript:", v9));
  v11 = (uint64_t)objc_msgSend(v10, "integerValue");

  if (v11 >= 2)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v11 - 1));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKeyedSubscript:", v12, v9);

    objc_msgSend(v13, "setOptions:", objc_msgSend(v13, "options") | 0x200);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10001164C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t ClientConnectionManager;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int IntegerValue;
  _QWORD *v25;
  id *p_isa;
  _BKEventUpdateGeneration *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  _DWORD *v36;
  id v37;
  _BKUpdateEventClient *v38;
  _BKUpdateEventClient *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  id v44;
  uint64_t v45;
  uint64_t ConciseDescription;
  void *v47;
  void *v48;
  NSString *v49;
  id v50;
  uint64_t v51;
  objc_class *v52;
  NSString *v53;
  void *v54;
  void *v55;
  NSString *v56;
  id v57;
  uint64_t v58;
  objc_class *v59;
  NSString *v60;
  void *v61;
  void *v62;
  NSString *v63;
  id v64;
  uint64_t v65;
  objc_class *v66;
  NSString *v67;
  void *v68;
  _QWORD *v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[32];
  __int128 v80;
  _QWORD v81[2];
  uint8_t buf[4];
  id v83;
  __int16 v84;
  void *v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  const __CFString *v89;
  __int16 v90;
  int v91;
  __int16 v92;
  void *v93;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v8 = *(_QWORD **)(v4 + 40);
    if (v8)
      v8 = (_QWORD *)v8[2];
    v69 = v8;
    sub_1000123E4((double *)v4, a3, v69);
    objc_msgSend(a3, "setActiveModifiers:", *(_QWORD *)(v4 + 104));
    BKSHIDEventSetAttributes(a2, a3);
    if (a4)
      v9 = *(unsigned int *)(a4 + 12);
    else
      v9 = 0;
    if ((~IOHIDEventGetIntegerValue(a2, 720903) & 0x20002) == 0
      && IOHIDEventGetIntegerValue(a2, 720905) == 1)
    {
      ClientConnectionManager = BKHIDEventRoutingGetClientConnectionManager();
      v11 = (void *)objc_claimAutoreleasedReturnValue(ClientConnectionManager);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "clientForTaskPort:", v9));

      if (v12)
      {
        v13 = BKLogTouchEvents();
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "bundleID"));
          v16 = NSStringFromBSVersionedPID(objc_msgSend(v12, "versionedPID"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
          *(_DWORD *)buf = 138543618;
          v83 = v15;
          v84 = 2114;
          v85 = v17;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "send tapToWake to %{public}@ pid:%{public}@", buf, 0x16u);

        }
      }

    }
    v18 = sub_1000121FC(*(_QWORD *)(v4 + 184));
    v70 = (void *)objc_claimAutoreleasedReturnValue(v18);
    sub_100012240(v4, (uint64_t)v70);
    v19 = BKLogTouchEvents();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      ConciseDescription = BKSHIDEventGetConciseDescription(a2);
      v47 = (void *)objc_claimAutoreleasedReturnValue(ConciseDescription);
      *(_DWORD *)buf = 138543362;
      v83 = v47;
      _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);

    }
    objc_msgSend(*(id *)(v4 + 48), "sendEvent:toClientTaskPort:", a2, v9);
    if (a4)
      v21 = *(_DWORD *)(a4 + 8);
    else
      v21 = 0;
    v22 = *(_QWORD *)(v4 + 184);
    if (v22)
    {
      if (IOHIDEventGetType(a2) != 11)
      {
        v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("must be a digitizer event")));
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          v49 = NSStringFromSelector("_saveWillUpdateEvents:port:contextID:");
          v50 = (id)objc_claimAutoreleasedReturnValue(v49);
          v52 = (objc_class *)objc_opt_class(v22, v51);
          v53 = NSStringFromClass(v52);
          v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
          *(_DWORD *)buf = 138544642;
          v83 = v50;
          v84 = 2114;
          v85 = v54;
          v86 = 2048;
          v87 = v22;
          v88 = 2114;
          v89 = CFSTR("BKDirectTouchUpdateEvents.mm");
          v90 = 1024;
          v91 = 271;
          v92 = 2114;
          v93 = v48;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

        }
        _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v48), "UTF8String"));
        __break(0);
        JUMPOUT(0x100011C4CLL);
      }
      v23 = sub_100011F84(a2);
      IntegerValue = IOHIDEventGetIntegerValue(a2, 720924);
      if (v23)
      {
        if (IntegerValue)
        {
          v25 = sub_10003806C(v22, v23);
          p_isa = (id *)objc_claimAutoreleasedReturnValue(v25);
          if (!p_isa)
          {
            v27 = objc_alloc_init(_BKEventUpdateGeneration);
            p_isa = (id *)&v27->super.isa;
            if (v27)
              v27->_generationCount = v23;
            v28 = *(void **)(v22 + 8);
            if (!v28)
            {
              v29 = objc_alloc_init((Class)NSMutableArray);
              v30 = *(void **)(v22 + 8);
              *(_QWORD *)(v22 + 8) = v29;

              v28 = *(void **)(v22 + 8);
            }
            objc_msgSend(v28, "addObject:", p_isa);
            if (!p_isa)
            {
              v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("this is Unix, that can't happen")));
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                v56 = NSStringFromSelector("_saveWillUpdateEvents:port:contextID:");
                v57 = (id)objc_claimAutoreleasedReturnValue(v56);
                v59 = (objc_class *)objc_opt_class(v22, v58);
                v60 = NSStringFromClass(v59);
                v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
                *(_DWORD *)buf = 138544642;
                v83 = v57;
                v84 = 2114;
                v85 = v61;
                v86 = 2048;
                v87 = v22;
                v88 = 2114;
                v89 = CFSTR("BKDirectTouchUpdateEvents.mm");
                v90 = 1024;
                v91 = 281;
                v92 = 2114;
                v93 = v55;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

              }
              _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v55), "UTF8String"));
              __break(0);
              JUMPOUT(0x100011D48);
            }
          }
          v31 = p_isa[17];
          v75 = 0u;
          v76 = 0u;
          v77 = 0u;
          v78 = 0u;
          v32 = v31;
          v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v75, buf, 16);
          if (v33)
          {
            v34 = *(_QWORD *)v76;
            do
            {
              v35 = 0;
              do
              {
                if (*(_QWORD *)v76 != v34)
                  objc_enumerationMutation(v32);
                v36 = *(_DWORD **)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)v35);
                if (v36)
                {
                  if (v36[3] == (_DWORD)v9 && v36[2] == v21)
                  {
                    v39 = v36;

                    goto LABEL_44;
                  }
                }
                else if (!(v9 | v21))
                {
                  goto LABEL_40;
                }
                v35 = (char *)v35 + 1;
              }
              while (v33 != v35);
              v37 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v75, buf, 16);
              v33 = v37;
            }
            while (v37);
          }
LABEL_40:

          v38 = objc_alloc_init(_BKUpdateEventClient);
          v39 = v38;
          if (v38)
          {
            v38->super._contextID = v21;
            v38->super._clientPort = v9;
          }
          objc_msgSend(v32, "addObject:", v38);
LABEL_44:
          sub_1000111B4((const __CFArray **)v79, a2);
          sub_100010FD0((unint64_t)v79);
          v40 = 0;
          v71 = *(_OWORD *)v79;
          v72 = *(_OWORD *)&v79[16];
          v73 = v80;
          v74 = v81[0];
          while (*((_QWORD *)&v72 + 1))
          {
            v41 = v73;
            *((_QWORD *)&v73 + 1) = *((_QWORD *)&v72 + 1);
            v74 = v73;
            v42 = IOHIDEventGetIntegerValue(*((_QWORD *)&v72 + 1), 720924);
            v43 = sub_100037D4C((uint64_t)p_isa, v41);
            if (v42)
            {
              sub_100037EDC((uint64_t)p_isa, v43 | v42, v41);
              v40 |= 1 << v41;
            }
            sub_100010FD0((unint64_t)&v71);
          }
          if (v39)
          {
            v39->_pathIDMask = v40;
            if (!v39->_pathIDMask)
            {
              objc_msgSend(v32, "removeObjectIdenticalTo:", v39);
              if (!objc_msgSend(v32, "count"))
              {
                v44 = sub_1000381A4(v22, v23);
                v45 = objc_claimAutoreleasedReturnValue(v44);
                if ((id *)v45 != p_isa)
                {
                  v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("pending/removed items don't match: %@/%@"), v45, p_isa));
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    v63 = NSStringFromSelector("_saveWillUpdateEvents:port:contextID:");
                    v64 = (id)objc_claimAutoreleasedReturnValue(v63);
                    v66 = (objc_class *)objc_opt_class(v22, v65);
                    v67 = NSStringFromClass(v66);
                    v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
                    *(_DWORD *)v79 = 138544642;
                    *(_QWORD *)&v79[4] = v64;
                    *(_WORD *)&v79[12] = 2114;
                    *(_QWORD *)&v79[14] = v68;
                    *(_WORD *)&v79[22] = 2048;
                    *(_QWORD *)&v79[24] = v22;
                    LOWORD(v80) = 2114;
                    *(_QWORD *)((char *)&v80 + 2) = CFSTR("BKDirectTouchUpdateEvents.mm");
                    WORD5(v80) = 1024;
                    HIDWORD(v80) = 322;
                    LOWORD(v81[0]) = 2114;
                    *(_QWORD *)((char *)v81 + 2) = v62;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", v79, 0x3Au);

                  }
                  _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v62), "UTF8String"));
                  __break(0);
                  JUMPOUT(0x100011E44);
                }

              }
            }
          }

        }
      }
    }

  }
}

void sub_100011E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t sub_100011F84(uint64_t a1)
{
  void *v2;
  void *v3;
  int v4;
  void *v5;
  __int16 v6;
  const __CFString *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  void *v11;

  if (!a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("passing a NULL IOHIDEventRef is not recommended")));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CFIndex BKDigitizerUpdateGenerationCount(IOHIDEventRef)"));
      v4 = 138544130;
      v5 = v3;
      v6 = 2114;
      v7 = CFSTR("BKDirectTouchUpdateEvents.mm");
      v8 = 1024;
      v9 = 174;
      v10 = 2114;
      v11 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ (%{public}@:%i) : %{public}@", (uint8_t *)&v4, 0x26u);

    }
    _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v2), "UTF8String"));
    __break(0);
    JUMPOUT(0x10001209CLL);
  }
  return IOHIDEventGetIntegerValue(a1, 720923);
}

void sub_1000120A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000121A0(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = objc_alloc_init((Class)NSMutableArray);
    v3 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;

    v4 = objc_alloc_init((Class)NSMutableDictionary);
    v5 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;

  }
}

id sub_1000121FC(uint64_t a1)
{
  id v2;
  void *v3;

  if (a1)
  {
    v2 = *(id *)(a1 + 16);
    v3 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void sub_100012240(uint64_t a1, uint64_t a2)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000827E4;
  v2[3] = &unk_1000EC450;
  v2[4] = a1;
  sub_10001229C(a2, v2);
}

void sub_10001229C(uint64_t a1, void *a2)
{
  void (**v3)(id, uint64_t, id, uint64_t);
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v3 = a2;
  if (a1)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = *(id *)(a1 + 16);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v15;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v15 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v8);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 8);
            v11 = *(id *)(v9 + 16);
            v12 = *(_QWORD *)(v9 + 24);
          }
          else
          {
            v11 = 0;
            v10 = 0;
            v12 = 0;
          }
          v3[2](v3, v10, v11, v12);

          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v13 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        v6 = v13;
      }
      while (v13);
    }

  }
}

double *sub_1000123E4(double *result, void *a2, void *a3)
{
  double *v5;
  double v6;
  double v7;

  if (result)
  {
    v5 = result;
    if (a3 && (objc_msgSend(a3, "_isBuiltinDisplay") & 1) == 0)
      objc_msgSend(a2, "setDisplay:", a3);
    v6 = 0.0;
    if (!*((_BYTE *)v5 + 209))
      v6 = v5[24];
    objc_msgSend(a2, "setMaximumPositionZ:", v6);
    LODWORD(v7) = *((_DWORD *)v5 + 50);
    return (double *)objc_msgSend(a2, "setMaximumForce:", v7);
  }
  return result;
}

void sub_1000125AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000125C8(void *a1, uint64_t a2)
{
  void *v3;
  id v4;

  if (!sub_10001261C(a1, a2))
    return 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKSystemShellSentinel sharedInstance](BKSystemShellSentinel, "sharedInstance"));
  v4 = objc_msgSend(v3, "auditTokenRepresentsSystemApp:", a2);

  return v4;
}

BOOL sub_10001261C(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  int v5;
  pid_t v6;
  _BOOL8 v7;

  v3 = a1;
  v4 = v3;
  if (!a2)
  {
    if (!v3)
    {
      v7 = 1;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  v5 = BSPIDForAuditToken(a2);
  v6 = getpid();
  v7 = 1;
  if (v4 && v5 != v6)
LABEL_6:
    v7 = +[BKSecurityManager hasEntitlement:forAuditToken:](BKSecurityManager, "hasEntitlement:forAuditToken:", v4, a2);
LABEL_8:

  return v7;
}

void sub_100012D78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;

  if (a1)
  {
    v3 = *(_QWORD *)(a2 + 8);
    if (v3 < 31)
    {
      v7 = a1 + 16;
      v8 = *(id *)(a1 + 16 + 8 * v3);
      v5 = v8;
      if (v8)
      {
        v9 = BKLogTouchEvents(v8);
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v11 = 67109120;
          LODWORD(v12) = v3;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "addContact: replacing existing contact for pathIndex %d", (uint8_t *)&v11, 8u);
        }

        sub_100019A5C(a1, (uint64_t)v5);
      }
      objc_msgSend(*(id *)(a1 + 8), "addObject:", a2);
      *(_QWORD *)(v7 + 8 * v3) = a2;
    }
    else
    {
      v4 = BKLogTouchEvents(a1);
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v11 = 138543362;
        v12 = a2;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "addContact: pathIndex out of bounds -- %{public}@", (uint8_t *)&v11, 0xCu);
      }
    }

  }
}

id sub_100012EC4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;

  v7 = a4;
  v8 = sub_100012F58(*(_QWORD *)(a1 + 16), a2, a3);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)v9;
  if (v9)
    objc_msgSend(*(id *)(v9 + 24), "addObject:", v7);
  objc_msgSend(v7, "addObject:", v10);

  return v10;
}

void sub_100012F3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100012F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  if (a1)
  {
    v6 = a2;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "objectForKey:", a2));
    if (!v7)
    {
      v8 = sub_100012FFC((uint64_t)BKTouchDestination, a2, a3);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v8);
      objc_msgSend(*(id *)(a1 + 120), "setObject:forKey:", v7, v6);
    }
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

void sub_100012FEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_100012FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_opt_self(a1);
  return sub_100013038([BKTouchDestination alloc], a2, a3);
}

_QWORD *sub_100013038(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  id v5;
  void *v6;
  objc_super v8;

  if (!a1)
    return 0;
  v8.receiver = a1;
  v8.super_class = (Class)BKTouchDestination;
  v3 = objc_msgSendSuper2(&v8, "initWithContextID:clientPort:", a2, a3);
  v4 = v3;
  if (v3)
  {
    v3[4] = 1;
    v5 = objc_msgSend(objc_alloc((Class)NSHashTable), "initWithOptions:capacity:", 517, 8);
    v6 = (void *)v4[3];
    v4[3] = v5;

  }
  return v4;
}

uint64_t *sub_100013358(uint64_t *a1)
{
  sub_100015510(a1[1], *a1);

  return a1;
}

void sub_100013394(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_100013420(_QWORD *result, uint64_t a2)
{
  void *v2;
  _QWORD v3[5];

  if (result)
  {
    v2 = (void *)result[3];
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10000A810;
    v3[3] = &unk_1000E9B38;
    v3[4] = a2;
    return objc_msgSend(v2, "enumerateKeysAndObjectsWithIndexesUsingBlock:", v3);
  }
  return result;
}

BKTouchHitTestContextMap *sub_100013600(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  id *v18;
  BKTouchHitTestContextMap *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *i;
  id v29;
  id v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  id v37;
  void *v38;
  id *v39;
  BKTouchHitTestContextMap *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  _BOOL4 v59;
  _BOOL4 v61;
  char v62;
  double v63;
  double v64;
  id *v65;
  id v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  int v75;
  double v76;
  double v77;
  _BOOL8 IsEmpty;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  _BOOL8 v85;
  uint64_t v86;
  NSObject *v87;
  int v88;
  _BOOL4 v89;
  unsigned int v90;
  id *v91;
  id *v92;
  uint64_t SenderID;
  void *v94;
  void *v95;
  id v96;
  id v97;
  void *v98;
  void *v99;
  id v100;
  void *v101;
  CFIndex v102;
  uint64_t v103;
  const __CFArray *v104;
  const void *v105;
  char v106;
  id *v107;
  uint8_t *v108;
  double v109;
  double v110;
  double v111;
  double v112;
  void *v113;
  id v114;
  void *v115;
  id *v116;
  double v117;
  double v118;
  double v119;
  double v120;
  _QWORD *v121;
  void *v122;
  id *v123;
  uint64_t v124;
  NSObject *v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  unsigned int *v130;
  uint64_t v131;
  NSObject *v132;
  uint64_t v133;
  int64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  void *j;
  void *v141;
  id v142;
  unsigned int *v143;
  id *v144;
  id v145;
  void *v146;
  id v147;
  uint64_t v148;
  void *k;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  void *v155;
  void *v156;
  uint64_t v157;
  NSObject *v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  void *v164;
  id v165;
  uint64_t IsFirstTouchDown;
  uint64_t TimeStamp;
  double v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  _BOOL4 v172;
  id v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  NSObject *v177;
  __int128 v179;
  id v180;
  _QWORD *v181;
  id v182;
  id v183;
  id v184;
  id obj;
  uint64_t v187;
  id v188;
  id v189;
  BKTouchHitTestContextMap *v190;
  void *v191;
  CGFloat point;
  id pointa;
  id *v194;
  id v195;
  id v196;
  uint64_t v197;
  CGFloat v198;
  _BOOL4 v199;
  id v200;
  void *v201;
  id v202;
  id v203;
  BKTouchHitTestContextMap *v204;
  id *v205;
  BKTouchHitTestContextMap *v206;
  id v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  id v212;
  id v213;
  void *v214;
  _BYTE v215[64];
  __int16 v216;
  uint8_t v217[128];
  uint8_t v218[16];
  __int128 v219;
  __int128 v220;
  __int128 v221;
  double v222;
  CFIndex idx[2];
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint8_t v242[16];
  __int128 v243;
  __int128 v244;
  __int128 v245;
  double v246;
  double v247;
  uint8_t buf[16];
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint8_t v252[4];
  void *v253;
  __int16 v254;
  void *v255;
  CGPoint v256;
  CGRect v257;
  CGRect v258;

  v182 = a3;
  v189 = a4;
  v183 = a5;
  v184 = a6;
  if (a1)
  {
    v190 = objc_alloc_init(BKTouchHitTestContextMap);
    v10 = *(_QWORD **)(a1 + 16);
    if (v10)
      v10 = (_QWORD *)v10[1];
    v11 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "displayUUID"));

    v13 = *(_QWORD **)(a1 + 32);
    if (v13)
      v13 = (_QWORD *)v13[1];
    v181 = v13;
    v212 = v181;
    v214 = 0;
    *(_QWORD *)v215 = 0;
    v180 = v12;
    v213 = v180;
    *(_DWORD *)&v215[7] = 0;
    *(int64x2_t *)&v215[16] = vdupq_n_s64(0xC197D783FC000000);
    *(_OWORD *)&v215[32] = *(_OWORD *)&v215[16];
    *(_OWORD *)&v215[48] = *(_OWORD *)&v215[16];
    v216 = 0;
    v208 = 0u;
    v209 = 0u;
    v210 = 0u;
    v211 = 0u;
    obj = v182;
    v188 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v208, v217, 16);
    if (v188)
    {
      v187 = *(_QWORD *)v209;
      *(_QWORD *)&v14 = 138543618;
      v179 = v14;
      do
      {
        v191 = 0;
        do
        {
          if (*(_QWORD *)v209 != v187)
            objc_enumerationMutation(obj);
          v15 = *(_QWORD *)(*((_QWORD *)&v208 + 1) + 8 * (_QWORD)v191);
          v16 = *(_QWORD *)(v15 + 8);
          v17 = *(_OWORD *)(v15 + 208);
          *(_OWORD *)&v215[8] = *(_OWORD *)(v15 + 192);
          *(_OWORD *)&v215[24] = v17;
          *(_OWORD *)&v215[40] = *(_OWORD *)(v15 + 224);
          *(_QWORD *)&v215[56] = *(_QWORD *)(v15 + 240);
          *(_QWORD *)v215 = v16;
          v197 = v15;
          v18 = (id *)(id)v15;
          v19 = v190;
          v205 = v18;
          v20 = v18[31];
          v21 = v20;
          if (v20)
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "contextIDsToAlwaysSendTouches"));
            v23 = v22;
            if (v22)
            {
              v201 = v22;
              v24 = objc_msgSend(v22, "count");
              v23 = v201;
              if (v24)
              {
                v244 = 0u;
                v245 = 0u;
                *(_OWORD *)v242 = 0u;
                v243 = 0u;
                v25 = v201;
                v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", v242, idx, 16);
                if (v26)
                {
                  v27 = *(_QWORD *)v243;
                  do
                  {
                    for (i = 0; i != v26; i = (char *)i + 1)
                    {
                      if (*(_QWORD *)v243 != v27)
                        objc_enumerationMutation(v25);
                      v29 = objc_msgSend(*(id *)(*(_QWORD *)&v242[8] + 8 * (_QWORD)i), "unsignedIntValue", v179);
                      v30 = objc_msgSend(v212, "taskPortForContextID:displayUUID:", v29, v213);
                      v31 = (uint64_t)v30;
                      if ((_DWORD)v29)
                        v32 = (_DWORD)v30 == 0;
                      else
                        v32 = 1;
                      if (!v32 && (_DWORD)v30 != -1)
                      {
                        sub_10000F364((uint64_t)v218, *(_QWORD *)(a1 + 16), (uint64_t)&v215[8], (uint64_t)v29, (uint64_t)v213);
                        v35 = BKLogTouchEvents(v34);
                        v36 = objc_claimAutoreleasedReturnValue(v35);
                        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 67109632;
                          *(_DWORD *)&buf[4] = (_DWORD)v29;
                          *(_WORD *)&buf[8] = 1024;
                          *(_DWORD *)&buf[10] = v31;
                          *(_WORD *)&buf[14] = 1024;
                          LODWORD(v249) = *(_DWORD *)v215;
                          _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Always send: adding %X %X %d", buf, 0x14u);
                        }

                        v37 = sub_100012F58(*(_QWORD *)(a1 + 16), (uint64_t)v29, v31);
                        v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
                        objc_msgSend(v205[34], "addObject:", v38);
                        sub_100014F84((uint64_t)v19, v38, *((_DWORD *)v205 + 5), *(int64_t *)v215, (CGFloat *)v218, 4);

                      }
                    }
                    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", v242, idx, 16);
                  }
                  while (v26);
                }

                v23 = v201;
              }
            }

          }
          v39 = v205;
          v40 = v19;
          if (v39[6] == (id)1)
          {
            v39[6] = (id)2;
            v41 = objc_msgSend(v39[34], "copy");
            v244 = 0u;
            v245 = 0u;
            *(_OWORD *)v242 = 0u;
            v243 = 0u;
            v42 = v41;
            v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", v242, idx, 16);
            v44 = v43;
            if (v43)
            {
              v45 = *(_QWORD *)v243;
              do
              {
                v46 = 0;
                do
                {
                  if (*(_QWORD *)v243 != v45)
                    objc_enumerationMutation(v42);
                  v47 = *(unsigned int **)(*(_QWORD *)&v242[8] + 8 * (_QWORD)v46);
                  if (v47)
                    v48 = v47[2];
                  else
                    v48 = 0;
                  v49 = BKLogTouchEvents(v43);
                  v50 = objc_claimAutoreleasedReturnValue(v49);
                  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)v218 = 67109376;
                    *(_DWORD *)&v218[4] = v48;
                    *(_WORD *)&v218[8] = 1024;
                    *(_DWORD *)&v218[10] = *(_DWORD *)v215;
                    _os_log_debug_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "Start avoiding: adding %X %d", v218, 0xEu);
                  }

                  sub_10000F364((uint64_t)v218, *(_QWORD *)(a1 + 16), (uint64_t)&v215[8], v48, (uint64_t)v213);
                  sub_100014E28(v47, v39, (CGFloat *)v218, 3, v40);
                  v46 = (char *)v46 + 1;
                }
                while (v44 != v46);
                v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", v242, idx, 16);
                v44 = v43;
              }
              while (v43);
            }

            v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "bs_filter:", &stru_1000ECBF8));
            v52 = objc_msgSend(v51, "mutableCopy");
            v53 = v39[34];
            v39[34] = v52;

          }
          v194 = v39;
          v54 = v189;
          v55 = v54;
          v56 = v39[6];
          if (v56 == (id)2)
            goto LABEL_51;
          if (v56 == (id)3)
          {
            v39[6] = 0;
LABEL_51:

            goto LABEL_186;
          }
          v57 = v194[4];
          v59 = v56 != (id)4 && v57 != 0;
          if (!v59 || v57 != (id)1)
          {
            v61 = v59;
            v62 = !v59;
            if (v57 != (id)2)
              v62 = 1;
            if ((v62 & 1) != 0)
            {

              if (v61 || v57 != (id)2)
              {
                v90 = 0;
                v91 = v205;
              }
              else
              {
                v91 = v205;
                if (v39[6] == (id)4)
                  v90 = objc_msgSend(*(id *)(a1 + 24), "_queue_hasTouchEnterSlots");
                else
                  v90 = 0;
              }
              v89 = v61;
              goto LABEL_90;
            }
            if (objc_msgSend(v54, "count"))
            {
              v63 = *(double *)&v215[32];
              v64 = *(double *)&v215[40];
              v65 = v194;
              v66 = v55;
              v67 = *((double *)v65 + 12);
              v68 = *((double *)v65 + 13);
              v69 = *((double *)v65 + 14);
              v70 = *((double *)v65 + 15);
              v71 = *((double *)v65 + 8);
              v72 = *((double *)v65 + 9);
              v73 = *((double *)v65 + 10);
              v74 = *((double *)v65 + 11);
              v75 = *((unsigned __int8 *)v65 + 288);
              idx[0] = 0;
              idx[1] = (CFIndex)idx;
              *(_QWORD *)&v224 = 0x5012000000;
              *((_QWORD *)&v224 + 1) = sub_10008D270;
              *(_QWORD *)&v225 = nullsub_6;
              *((_QWORD *)&v225 + 1) = &unk_1000D4F2B;
              *(double *)&v226 = v71;
              *((double *)&v226 + 1) = v72;
              *(double *)&v227 = v73;
              *((double *)&v227 + 1) = v74;
              *(_QWORD *)v242 = 0;
              *(_QWORD *)&v242[8] = v242;
              *(_QWORD *)&v243 = 0x5012000000;
              *((_QWORD *)&v243 + 1) = sub_10008D270;
              *(_QWORD *)&v244 = nullsub_6;
              *((_QWORD *)&v244 + 1) = &unk_1000D4F2B;
              *(double *)&v245 = v67;
              *((double *)&v245 + 1) = v68;
              v246 = v69;
              v247 = v70;
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = buf;
              v249 = 0x2020000000uLL;
              *(_QWORD *)v218 = _NSConcreteStackBlock;
              *(_QWORD *)&v218[8] = 3221225472;
              *(_QWORD *)&v219 = sub_100004024;
              *((_QWORD *)&v219 + 1) = &unk_1000ECC20;
              v198 = v63;
              *((double *)&v221 + 1) = v63;
              v76 = v67;
              point = v64;
              v222 = v64;
              v77 = v68;
              *(_QWORD *)&v220 = buf;
              *((_QWORD *)&v220 + 1) = idx;
              *(_QWORD *)&v221 = v242;
              v202 = v66;
              objc_msgSend(v66, "enumerateObjectsUsingBlock:", v218);
              v257.origin.x = v71;
              v257.origin.y = v72;
              v257.size.width = v73;
              v257.size.height = v74;
              if (!CGRectEqualToRect(v257, *(CGRect *)(idx[1] + 48)))
              {
                v71 = *(double *)(idx[1] + 48);
                v72 = *(double *)(idx[1] + 56);
                v73 = *(double *)(idx[1] + 64);
                v74 = *(double *)(idx[1] + 72);
                v76 = *(double *)(*(_QWORD *)&v242[8] + 48);
                v77 = *(double *)(*(_QWORD *)&v242[8] + 56);
                v69 = *(double *)(*(_QWORD *)&v242[8] + 64);
                v70 = *(double *)(*(_QWORD *)&v242[8] + 72);
                IsEmpty = CGRectIsEmpty(*((CGRect *)v65 + 2));
                if (!IsEmpty)
                {
                  v79 = BKLogTouchEvents(IsEmpty);
                  v80 = objc_claimAutoreleasedReturnValue(v79);
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                  {
                    v81 = BSStringFromCGRect(*((double *)v65 + 8), *((double *)v65 + 9), *((double *)v65 + 10), *((double *)v65 + 11));
                    v82 = (void *)objc_claimAutoreleasedReturnValue(v81);
                    v83 = BSStringFromCGRect(v71, v72, v73, v74);
                    v84 = (void *)objc_claimAutoreleasedReturnValue(v83);
                    *(_DWORD *)v252 = v179;
                    v253 = v82;
                    v254 = 2114;
                    v255 = v84;
                    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "Touch moved from this region: %{public}@ to this region: %{public}@", v252, 0x16u);

                  }
                }
              }
              if (v75
                || (v258.origin.x = v76,
                    v258.origin.y = v77,
                    v258.size.width = v69,
                    v258.size.height = v70,
                    v256.x = v198,
                    v256.y = point,
                    !(v85 = CGRectContainsPoint(v258, v256))))
              {
                v88 = 0;
              }
              else
              {
                v86 = BKLogTouchEvents(v85);
                v87 = objc_claimAutoreleasedReturnValue(v86);
                if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
                {
                  v161 = BSStringFromCGRect(v71, v72, v73, v74);
                  v162 = (void *)objc_claimAutoreleasedReturnValue(v161);
                  v163 = BSStringFromCGRect(v76, v77, v69, v70);
                  v164 = (void *)objc_claimAutoreleasedReturnValue(v163);
                  *(_DWORD *)v252 = v179;
                  v253 = v162;
                  v254 = 2114;
                  v255 = v164;
                  _os_log_debug_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "Touch entered exclusive touch region of this touch region: %{public}@ exclusiveHitTestRegion: %{public}@, so no longer a candidate for hit testing", v252, 0x16u);

                }
                v88 = 1;
              }
              *((double *)v65 + 12) = v76;
              *((double *)v65 + 13) = v77;
              *((double *)v65 + 14) = v69;
              *((double *)v65 + 15) = v70;
              *((double *)v65 + 8) = v71;
              *((double *)v65 + 9) = v72;
              *((double *)v65 + 10) = v73;
              *((double *)v65 + 11) = v74;
              _Block_object_dispose(buf, 8);
              _Block_object_dispose(v242, 8);
              _Block_object_dispose(idx, 8);

              if (v88)
LABEL_81:
                v39[6] = (id)4;
            }
            else if (!*((_BYTE *)v194 + 288))
            {
              goto LABEL_81;
            }
            v89 = 1;
            goto LABEL_83;
          }
          v89 = v194[5] != (id)2;
LABEL_83:

          v90 = 0;
          v91 = v205;
LABEL_90:
          v199 = v89;
          if (!v89 && !v90)
            goto LABEL_122;
          v92 = v194;
          SenderID = IOHIDEventGetSenderID(a2);
          v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91[31], "contextIDsToExcludeFromHitTesting"));
          if (SenderID == 0x8000000817319379 || SenderID == 0x8000000817319374)
          {
            v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "_queue_contextIDsToIgnoreForZoomSenders", v179));
            v96 = v94;
            v97 = v95;
            v98 = v97;
            v99 = v97;
            if (v96 && (v99 = v96, v97))
              v100 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "arrayByAddingObjectsFromArray:", v97));
            else
              v100 = v99;
            v94 = v100;

          }
          v101 = v214;
          v214 = v94;

          if (!(_BYTE)v216)
          {
            if (IOHIDEventConformsTo(a2, 1)
              && (sub_1000111B4((const __CFArray **)idx, a2), v102 = idx[1], v103 = v224, idx[1] < (uint64_t)v224))
            {
              v104 = (const __CFArray *)idx[0];
              while (1)
              {
                v105 = v103 ? CFArrayGetValueAtIndex(v104, v102) : 0;
                if (IOHIDEventGetType(v105) == 1
                  && IOHIDEventGetIntegerValue(v105, 0x10000) == 65376
                  && IOHIDEventGetIntegerValue(v105, 65537) == 11)
                {
                  break;
                }
                if (v103 == ++v102)
                  goto LABEL_110;
              }
              v106 = 1;
            }
            else
            {
LABEL_110:
              v106 = 0;
            }
            HIBYTE(v216) = v106;
            LOBYTE(v216) = 1;
          }
          if (!v199)
          {
LABEL_122:
            if (v90)
            {
              v116 = v194;
              v240 = 0u;
              v241 = 0u;
              v238 = 0u;
              v239 = 0u;
              v236 = 0u;
              v237 = 0u;
              v234 = 0u;
              v235 = 0u;
              v232 = 0u;
              v233 = 0u;
              v230 = 0u;
              v231 = 0u;
              v228 = 0u;
              v229 = 0u;
              v226 = 0u;
              v227 = 0u;
              v224 = 0u;
              v225 = 0u;
              *(_OWORD *)idx = 0u;
              v117 = sub_1000058C0((uint64_t)idx, 0, (uint64_t)&v212);
              if (LODWORD(idx[0]) && HIDWORD(idx[0]))
              {
                v119 = v117;
                v120 = v118;
                v121 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "_queue_slotRecordForSlotID:"));
                v122 = v121;
                if (v121)
                {
                  if (v121[3] == 2)
                  {
                    sub_10008D02C(v116, v121, (uint64_t)idx, (uint64_t)&v212, v119, v120);
                    sub_100017EF0(a1, v116, (unsigned int *)idx, (uint64_t)&v212);
                  }
                }
                else
                {
                  sub_100003F40(v116);
                }

              }
              else
              {
                sub_100003F40(v116);
              }

            }
            goto LABEL_137;
          }
          v107 = v92;
          v240 = 0u;
          v241 = 0u;
          v238 = 0u;
          v239 = 0u;
          v236 = 0u;
          v237 = 0u;
          v234 = 0u;
          v235 = 0u;
          v232 = 0u;
          v233 = 0u;
          v230 = 0u;
          v231 = 0u;
          v228 = 0u;
          v229 = 0u;
          v226 = 0u;
          v227 = 0u;
          v224 = 0u;
          v225 = 0u;
          *(_OWORD *)idx = 0u;
          if (v57 == (id)2)
            v108 = v242;
          else
            v108 = 0;
          *(_QWORD *)v242 = 0;
          v109 = sub_1000058C0((uint64_t)idx, (uint64_t)v108, (uint64_t)&v212);
          if (v57 == (id)2)
          {
            v111 = v109;
            v112 = v110;
            v113 = *(void **)v242;
            v114 = *(id *)v242;
            if (LODWORD(idx[0]))
            {
              objc_storeStrong(v107 + 33, v113);
              if (HIDWORD(idx[0]))
              {
                v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "_queue_slotRecordForSlotID:"));
                if (v115)
                  sub_10008D02C(v107, v115, (uint64_t)idx, (uint64_t)&v212, v111, v112);

              }
              else
              {
                sub_100003F40(v107);
              }
LABEL_135:
              sub_100017EF0(a1, v107, (unsigned int *)idx, (uint64_t)&v212);
              goto LABEL_136;
            }
          }
          else
          {
            v114 = 0;
            if (LODWORD(idx[0]))
              goto LABEL_135;
          }
          sub_100005270((uint64_t)v107, 0);
          sub_100003F40(v107);
LABEL_136:

LABEL_137:
          v123 = v194;
          v206 = v40;
          v195 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "filterDestinations:", v123[35]));
          v124 = BKLogTouchDeliveryPolicy();
          v125 = objc_claimAutoreleasedReturnValue(v124);
          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
          {
            v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "valueForKey:", CFSTR("_policy")));
            LODWORD(idx[0]) = 138543362;
            *(CFIndex *)((char *)idx + 4) = (CFIndex)v160;
            _os_log_debug_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEBUG, "policies: %{public}@", (uint8_t *)idx, 0xCu);

          }
          v203 = objc_alloc_init((Class)NSMutableSet);
          v220 = 0u;
          v221 = 0u;
          *(_OWORD *)v218 = 0u;
          v219 = 0u;
          v196 = v195;
          v126 = objc_msgSend(v196, "countByEnumeratingWithState:objects:count:", v218, idx, 16);
          if (v126)
          {
            v127 = 0;
            v128 = *(_QWORD *)v219;
            do
            {
              v129 = 0;
              pointa = v126;
              do
              {
                if (*(_QWORD *)v219 != v128)
                  objc_enumerationMutation(v196);
                v130 = *(unsigned int **)(*(_QWORD *)&v218[8] + 8 * (_QWORD)v129);
                v131 = BKLogTouchDeliveryPolicy();
                v132 = objc_claimAutoreleasedReturnValue(v131);
                if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
                {
                  v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "succinctDescription"));
                  *(_DWORD *)v252 = 138543362;
                  v253 = v141;
                  _os_log_debug_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEBUG, "TDPS allow send to %{public}@", v252, 0xCu);

                }
                if (v130)
                  v133 = v130[2];
                else
                  v133 = 0;
                if (objc_msgSend(v123[34], "containsObject:", v130, sub_10000F364((uint64_t)v252, *(_QWORD *)(a1 + 16), (uint64_t)&v215[8], v133, (uint64_t)v213)))v134 = 1;
                else
                  v134 = 2;
                sub_100014E28(v130, v123, (CGFloat *)v252, v134, v206);
                objc_msgSend(v203, "addObject:", v130);
                if (v199)
                {
                  v251 = 0u;
                  v250 = 0u;
                  v249 = 0u;
                  *(_OWORD *)buf = 0u;
                  v135 = *(_QWORD **)(a1 + 16);
                  if (v135)
                    v135 = (_QWORD *)v135[9];
                  v136 = v135;
                  v137 = objc_msgSend(v136, "countByEnumeratingWithState:objects:count:", buf, v242, 16);
                  v138 = a1;
                  if (v137)
                  {
                    v139 = *(_QWORD *)v249;
                    do
                    {
                      for (j = 0; j != v137; j = (char *)j + 1)
                      {
                        if (*(_QWORD *)v249 != v139)
                          objc_enumerationMutation(v136);
                        objc_msgSend(*(id *)(*(_QWORD *)&buf[8] + 8 * (_QWORD)j), "touch:didHitTestToDestination:hostingChainIndex:", *((unsigned int *)v123 + 4), v130, v127, v179);
                      }
                      v137 = objc_msgSend(v136, "countByEnumeratingWithState:objects:count:", buf, v242, 16);
                    }
                    while (v137);
                  }

                  v126 = pointa;
                  a1 = v138;
                  ++v127;
                }
                v129 = (char *)v129 + 1;
              }
              while (v129 != v126);
              v142 = objc_msgSend(v196, "countByEnumeratingWithState:objects:count:", v218, idx, 16);
              v126 = v142;
            }
            while (v142);
          }

          v143 = v123;
          v144 = (id *)v203;
          v204 = v206;
          v200 = v183;
          v145 = v184;
          v194 = v144;
          v146 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](NSMutableSet, "setWithSet:", *((_QWORD *)v143 + 34)));
          objc_msgSend(v146, "minusSet:", v144);
          v244 = 0u;
          v245 = 0u;
          *(_OWORD *)v242 = 0u;
          v243 = 0u;
          v207 = v146;
          v147 = objc_msgSend(v207, "countByEnumeratingWithState:objects:count:", v242, idx, 16);
          if (v147)
          {
            v148 = *(_QWORD *)v243;
            do
            {
              for (k = 0; k != v147; k = (char *)k + 1)
              {
                if (*(_QWORD *)v243 != v148)
                  objc_enumerationMutation(v207);
                v150 = *(_QWORD *)(*(_QWORD *)&v242[8] + 8 * (_QWORD)k);
                if (v150 && (*(_BYTE *)(v150 + 32) & 1) != 0)
                {
                  sub_10000F364((uint64_t)v218, *(_QWORD *)(a1 + 16), (uint64_t)&v215[8], *(unsigned int *)(v150 + 8), (uint64_t)v213);
                  v151 = *(unsigned int *)(v150 + 8);
                  v153 = BKLogTouchEvents(v152);
                  v154 = objc_claimAutoreleasedReturnValue(v153);
                  if (os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG))
                  {
                    v159 = *(_QWORD *)(v197 + 8);
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&buf[4] = v151;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v159;
                    _os_log_debug_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEBUG, "Adding hit test exit result: %X %d", buf, 0xEu);
                  }

                  sub_100014F84((uint64_t)v204, (void *)v150, v143[5], *(_QWORD *)(v197 + 8), (CGFloat *)v218, 3);
                  v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "objectForKey:", v151));
                  sub_100019A5C((uint64_t)v155, (uint64_t)v143);
                  if (!objc_msgSend(v155, "count"))
                    objc_msgSend(v145, "removeObjectForKey:", v151);
                  v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v200, "objectForKey:", v151, v179));
                  if (v156)
                  {
                    objc_msgSend(*((id *)v143 + 34), "removeObject:", v150);
                  }
                  else
                  {
                    v157 = BKLogTouchEvents(0);
                    v158 = objc_claimAutoreleasedReturnValue(v157);
                    if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 67109120;
                      *(_DWORD *)&buf[4] = v151;
                      _os_log_error_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_ERROR, "_removeContact: missing destination for context %X", buf, 8u);
                    }

                  }
                }
              }
              v147 = objc_msgSend(v207, "countByEnumeratingWithState:objects:count:", v242, idx, 16);
            }
            while (v147);
          }

LABEL_186:
          v191 = (char *)v191 + 1;
        }
        while (v191 != v188);
        v165 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v208, v217, 16);
        v188 = v165;
      }
      while (v165);
    }

    IsFirstTouchDown = (uint64_t)objc_msgSend(obj, "count");
    if (IsFirstTouchDown >= 1)
    {
      IsFirstTouchDown = BKSHIDDigitizerEventIsFirstTouchDown(a2);
      if ((_DWORD)IsFirstTouchDown)
      {
        if (v190)
          v190->_initialTouchDown = 1;
        TimeStamp = IOHIDEventGetTimeStamp(a2);
        v168 = BSMonotonicReferencedTimeFromMachTime(TimeStamp);
        if (v190)
          v190->_initialTouchTimestamp = v168;
      }
    }
    v169 = *(_QWORD *)(a1 + 16);
    if (v169)
    {
      v170 = BKLogTouchEvents(IsFirstTouchDown);
      v171 = objc_claimAutoreleasedReturnValue(v170);
      v172 = os_log_type_enabled(v171, OS_LOG_TYPE_DEBUG);

      if (v172)
      {
        v173 = objc_alloc_init((Class)BSDescriptionStream);
        v174 = *(_QWORD *)(v169 + 120);
        idx[0] = (CFIndex)_NSConcreteStackBlock;
        idx[1] = 3221225472;
        *(_QWORD *)&v224 = sub_100084024;
        *((_QWORD *)&v224 + 1) = &unk_1000EC4A0;
        v175 = v173;
        *(_QWORD *)&v225 = v175;
        v176 = BKLogTouchEvents(objc_msgSend(v175, "appendIntegerMap:withName:keyFormat:valueBlock:", v174, 0, 1, idx));
        v177 = objc_claimAutoreleasedReturnValue(v176);
        if (os_log_type_enabled(v177, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v242 = 138543362;
          *(_QWORD *)&v242[4] = v175;
          _os_log_debug_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_DEBUG, "destinations are now %{public}@", v242, 0xCu);
        }

      }
    }
    sub_100014DCC(&v212);

  }
  else
  {
    v190 = 0;
  }

  return v190;
}

void sub_100014A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,id a51)
{
  void *v51;
  void *v52;
  void *v53;
  void *v54;

  _Block_object_dispose(&STACK[0x430], 8);
  _Block_object_dispose(&STACK[0x3B0], 8);
  _Block_object_dispose(&STACK[0x280], 8);

  sub_100014DCC(&a51);
  _Unwind_Resume(a1);
}

id *sub_100014DCC(id *a1)
{
  id v2;
  id v3;
  id v4;

  v2 = *a1;
  *a1 = 0;

  v3 = a1[1];
  a1[1] = 0;

  v4 = a1[2];
  a1[2] = 0;

  return a1;
}

void sub_100014E28(void *a1, void *a2, CGFloat *a3, int64_t a4, void *a5)
{
  _DWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  v9 = a1;
  v10 = a2;
  v11 = a5;
  sub_100014F84((uint64_t)v11, v9, *((_DWORD *)v10 + 5), *((_QWORD *)v10 + 1), a3, a4);
  if (v9)
  {
    v13 = v9[2];
    v14 = v9[3];
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v15 = BKLogTouchEvents(v12);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v17 = *((_QWORD *)v10 + 1);
    v18[0] = 67109632;
    v18[1] = v13;
    v19 = 1024;
    v20 = v14;
    v21 = 1024;
    v22 = v17;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Adding hit test result: %X %X %d", (uint8_t *)v18, 0x14u);
  }

  objc_msgSend(*((id *)v10 + 34), "addObject:", v9);
}

void sub_100014F5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100014F84(uint64_t a1, void *a2, unsigned int a3, int64_t a4, CGFloat *a5, int64_t a6)
{
  BKHitTestResultPathLocation *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  BKHitTestResultPathLocation *v16;

  if (a1)
  {
    v12 = objc_alloc_init(BKHitTestResultPathLocation);
    v16 = v12;
    if (v12)
    {
      v12->_pathIndex = a4;
      v13 = *(_OWORD *)a5;
      v14 = *((_OWORD *)a5 + 1);
      v15 = *((_OWORD *)a5 + 2);
      v12->_pathLocation.preciseLocation.y = a5[6];
      *(_OWORD *)&v12->_pathLocation.hitTestLocation.y = v15;
      *(_OWORD *)&v12->_pathLocation.location.y = v14;
      *(_OWORD *)&v12->_pathLocation.locationsAreValid = v13;
      v12->_contextRelationship = a6;
    }
    sub_100015024(a1, a2, a3, (uint64_t)v12);

  }
}

void sub_100015024(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  BKHitTestResultKey *v12;

  v12 = objc_alloc_init(BKHitTestResultKey);
  if (v12)
  {
    objc_storeStrong((id *)&v12->_destination, a2);
    if (a3)
      v12->_userIdentifier = a3;
  }
  v9 = *(void **)(a1 + 24);
  if (!v9)
  {
    v10 = objc_alloc_init((Class)BSMutableOrderedDictionary);
    v11 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;

    v9 = *(void **)(a1 + 24);
  }
  objc_msgSend(v9, "addObject:toCollectionClass:forKey:", a4, objc_opt_class(NSMutableArray, v8), v12);

}

void sub_1000150D4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint8_t buf[4];
  int v16;
  _BYTE v17[128];

  v2 = objc_alloc_init((Class)NSMutableArray);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = objc_msgSend(*(id *)(a1 + 112), "copy");
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v12;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v6);
        if (!*(_QWORD *)(v7 + 32))
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = BKLogTouchEvents();
          v10 = objc_claimAutoreleasedReturnValue(v9);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            v16 = v8;
            _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "stop tracking path:%d", buf, 8u);
          }

          sub_100005270(v7, 0);
          objc_msgSend(v2, "addObject:", v7);
          sub_100019A5C(*(_QWORD *)(a1 + 112), v7);
        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
    }
    while (v4);
  }

  sub_100015340(a1, v2, 1);
  sub_1000152C4(a1);

}

void sub_10001528C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000152C4(uint64_t a1)
{
  id v2;
  _QWORD v3[5];

  v2 = objc_msgSend(*(id *)(a1 + 120), "copy");
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100018A1C;
  v3[3] = &unk_1000EC478;
  v3[4] = a1;
  BSIntegerMapEnumerateWithBlock(v2, v3);

}

void sub_100015330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100015340(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD v16[5];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[7];
  _BYTE v22[128];

  v6 = objc_msgSend(*(id *)(a1 + 120), "copy");
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10000EDA4;
  v21[3] = &unk_1000EC518;
  v21[5] = a2;
  v21[6] = a3;
  v21[4] = a1;
  BSIntegerMapEnumerateWithBlock(v6, v21);

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v7 = a2;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v18;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v18 != v9)
          objc_enumerationMutation(v7);
        v11 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v10);
        v12 = *(void **)(v11 + 272);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_100018A54;
        v16[3] = &unk_1000EC538;
        v16[4] = a3;
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "bs_filter:", v16));
        v14 = objc_msgSend(v13, "mutableCopy");
        v15 = *(void **)(v11 + 272);
        *(_QWORD *)(v11 + 272) = v14;

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v8);
  }

}

void sub_1000154D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100015510(uint64_t a1, uint64_t a2)
{
  _QWORD v2[5];

  if (a1)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10001164C;
    v2[3] = &unk_1000EC450;
    v2[4] = a1;
    sub_100015570(a2, v2);
  }
}

void sub_100015570(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  if (a1)
  {
    v5[1] = 3221225472;
    v5[2] = sub_100011500;
    v5[3] = &unk_1000EA7A0;
    v5[4] = a1;
    v4 = v3;
    v5[0] = _NSConcreteStackBlock;
    v6 = v3;
    sub_10001229C(a1, v5);

    v3 = v4;
  }

}

id *sub_1000155EC(uint64_t a1, uint64_t a2, void *a3)
{
  const __CFArray **v5;
  unint64_t v6;
  uint64_t i;
  id *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  double FloatValue;
  double v13;
  BKTouchCentroidCalculator *v14;
  CGFloat v15;
  const __CFArray **v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t IntegerValue;
  uint64_t v22;
  BKTouchContact *v23;
  NSObject *p_super;
  const char *v25;
  uint32_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  id *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  id *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  void *mm;
  id v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  id *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  double x;
  double y;
  uint64_t v64;
  NSObject *v65;
  __int128 v66;
  uint64_t v67;
  int64_t presence;
  id v69;
  id v70;
  uint64_t v71;
  double v72;
  double v73;
  uint64_t v74;
  void *j;
  double v76;
  BKSHIDEventHitTestLayerInformation *hitTestInformationAtDown;
  BKSWindowServerHitTestSecurityAnalysis *hitTestSecurityAnalysis;
  id v79;
  id v80;
  uint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  void *k;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  unint64_t v89;
  __CFString *v90;
  int v91;
  __CFString *v92;
  uint64_t TimeStamp;
  double v94;
  double v95;
  double previousTimestamp;
  double v97;
  double v98;
  double v99;
  float v100;
  id v101;
  uint64_t v102;
  double v103;
  double v104;
  uint64_t v105;
  void *m;
  double v107;
  id v108;
  id v109;
  uint64_t v110;
  double v111;
  double v112;
  uint64_t v113;
  void *jj;
  id v115;
  int64_t hitTestPolicy;
  char v117;
  int v118;
  id v119;
  uint64_t v120;
  double v121;
  double v122;
  void *n;
  double v124;
  id v125;
  id v126;
  uint64_t v127;
  double v128;
  double v129;
  uint64_t v130;
  void *kk;
  id v132;
  void *v133;
  id v134;
  uint64_t v135;
  double v136;
  double v137;
  uint64_t v138;
  void *ii;
  id v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  __CFString *v144;
  __CFString *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  NSObject *v149;
  __int128 v151;
  int HasHighFrequencyDigitizer;
  int v153;
  int v154;
  uint64_t v155;
  id *v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint8_t v196[128];
  uint8_t v197[4];
  _BYTE v198[14];
  __int16 v199;
  int v200;
  _BYTE v201[128];
  _BYTE v202[128];
  _BYTE v203[128];
  _BYTE v204[128];
  _BYTE v205[128];
  uint8_t v206[128];
  uint8_t buf[16];
  __int128 v208;
  __int128 v209;
  CGFloat v210;
  uint8_t v211[128];
  uint8_t v212[16];
  __int128 v213;
  __int128 v214;
  uint64_t v215;

  v156 = (id *)objc_msgSend(a3, "copy");
  objc_msgSend(*(id *)(a1 + 136), "removeAllObjects");
  v5 = sub_1000111B4((const __CFArray **)v212, a2);
  v6 = sub_100010FD0((unint64_t)v5);
  v192 = *(_OWORD *)v212;
  v193 = v213;
  v194 = v214;
  v195 = v215;
  for (i = *((_QWORD *)&v213 + 1); *((_QWORD *)&v193 + 1); i = *((_QWORD *)&v193 + 1))
  {
    *((_QWORD *)&v194 + 1) = i;
    v195 = v194;
    v8 = sub_100011258(*(id **)(a1 + 112), v194);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)v9;
    if (v9)
    {
      v11 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v11)
      {
        FloatValue = IOHIDEventGetFloatValue(i, 720896);
        v13 = IOHIDEventGetFloatValue(i, 720897);
        v14 = (BKTouchCentroidCalculator *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 136), "objectForKey:", v11));
        if (v14
          || (v14 = objc_alloc_init(BKTouchCentroidCalculator),
              objc_msgSend(*(id *)(a1 + 136), "setObject:forKey:", v14, v11),
              v14))
        {
          v15 = v13 + v14->_location.y;
          v14->_location.x = FloatValue + v14->_location.x;
          v14->_location.y = v15;
          ++v14->_count;
        }

      }
    }

    v6 = sub_100010FD0((unint64_t)&v192);
  }
  HasHighFrequencyDigitizer = BKSHIDServicesDeviceHasHighFrequencyDigitizer(v6);
  v16 = sub_1000111B4((const __CFArray **)v212, a2);
  v17 = sub_100010FD0((unint64_t)v16);
  v192 = *(_OWORD *)v212;
  v193 = v213;
  v194 = v214;
  *((_QWORD *)&v18 + 1) = *((_QWORD *)&v214 + 1);
  v195 = v215;
  *(_QWORD *)&v18 = 138543874;
  v151 = v18;
  while (1)
  {
    v19 = *((_QWORD *)&v193 + 1);
    if (!*((_QWORD *)&v193 + 1))
      break;
    v20 = v194;
    *((_QWORD *)&v194 + 1) = *((_QWORD *)&v193 + 1);
    v195 = v194;
    IntegerValue = IOHIDEventGetIntegerValue(*((_QWORD *)&v193 + 1), 720925);
    if ((_DWORD)IntegerValue)
    {
      v22 = BKLogTouchEvents(IntegerValue);
      v23 = (BKTouchContact *)objc_claimAutoreleasedReturnValue(v22);
      if (!os_log_type_enabled(&v23->super, OS_LOG_TYPE_ERROR))
        goto LABEL_105;
      *(_WORD *)buf = 0;
      p_super = &v23->super;
      v25 = "ignoring subevent with nonzero didUpdateMask (on parent event with zero didUpdateMask)";
      v26 = 2;
      goto LABEL_14;
    }
    v159 = IOHIDEventGetIntegerValue(v19, 720903);
    v27 = IOHIDEventGetIntegerValue(v19, 720904);
    v157 = v159 & 0x20000;
    if (v27)
      v28 = (v159 & 0x20000) == 0;
    else
      v28 = 0;
    v29 = v28;
    v155 = IOHIDEventGetIntegerValue(v19, 720905);
    v158 = (v155 != 0) & (v159 >> 1);
    v153 = v29;
    v154 = v159 & v29;
    if ((v159 & v29 & 1) != 0
      || (!v157 ? (v30 = v27 == 0) : (v30 = 1), v30 ? (v31 = 0) : (v31 = 1), v158 && (v31 & 1) == 0))
    {
      v32 = sub_100011258(v156, v20);
      v33 = objc_claimAutoreleasedReturnValue(v32);
      v34 = v33;
      if (v33)
      {
        v35 = *(_QWORD *)(v33 + 32);
        if (v35 == 2 && v155)
        {
          v36 = BKLogTouchEvents(v33);
          v37 = objc_claimAutoreleasedReturnValue(v36);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v34;
            _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "range-in for pathIndex with existing contact -- using existing: %{public}@", buf, 0xCu);
          }

          v23 = (BKTouchContact *)(id)v34;
LABEL_56:

          v40 = v159;
          if (v158)
          {
LABEL_57:
            v23->_tapToWake = v157 >> 17;
            if (v157)
            {
              v56 = BKLogTouchEvents(v39);
              v57 = objc_claimAutoreleasedReturnValue(v56);
              if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "received tapToWake", buf, 2u);
              }

            }
          }
LABEL_62:
          if (v23->_userIdentifier)
          {
            v59 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 136), "objectForKey:"));
            v60 = (void *)v59;
            if (v59)
            {
              v61 = *(_QWORD *)(v59 + 8);
              if (v61 < 1)
              {
                x = CGPointZero.x;
                y = CGPointZero.y;
              }
              else
              {
                x = *(double *)(v59 + 16) / (double)v61;
                y = *(double *)(v59 + 24) / (double)v61;
              }
              v64 = BKLogTouchEvents(v59);
              v65 = objc_claimAutoreleasedReturnValue(v64);
              if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
              {
                v146 = BSStringFromCGPoint(x, y);
                v147 = (void *)objc_claimAutoreleasedReturnValue(v146);
                *(_DWORD *)buf = 138543362;
                *(_QWORD *)&buf[4] = v147;
                _os_log_debug_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "using centroid %{public}@", buf, 0xCu);

              }
            }
            else
            {
              x = IOHIDEventGetFloatValue(v19, 720896);
              y = IOHIDEventGetFloatValue(v19, 720897);
            }

          }
          else
          {
            x = IOHIDEventGetFloatValue(v19, 720896);
            y = IOHIDEventGetFloatValue(v19, 720897);
          }
          sub_10000F200((uint64_t)buf, a1, x, y, v23->_offset.x, v23->_offset.y);
          v66 = v208;
          *(_OWORD *)&v23->_denormalizedLocation.locationsAreValid = *(_OWORD *)buf;
          *(_OWORD *)&v23->_denormalizedLocation.location.y = v66;
          *(_OWORD *)&v23->_denormalizedLocation.hitTestLocation.y = v209;
          v23->_denormalizedLocation.preciseLocation.y = v210;
          v23->_normalLocation.x = x;
          v23->_normalLocation.y = y;
          v23->_positionZ = IOHIDEventGetFloatValue(v19, 720898);
          presence = v23->_presence;
          v23->_previousPresence = presence;
          if (v158)
          {
            if (presence != 1)
            {
              v186 = 0u;
              v187 = 0u;
              v184 = 0u;
              v185 = 0u;
              v69 = *(id *)(a1 + 72);
              v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v184, v206, 16);
              if (v70)
              {
                v71 = *(_QWORD *)v185;
                v72 = *((double *)&v208 + 1);
                v73 = *(double *)&v209;
                v74 = v195;
                do
                {
                  for (j = 0; j != v70; j = (char *)j + 1)
                  {
                    if (*(_QWORD *)v185 != v71)
                      objc_enumerationMutation(v69);
                    v76 = 0.0;
                    if (!*(_BYTE *)(a1 + 209))
                      v76 = *(double *)(a1 + 192);
                    objc_msgSend(*(id *)(*((_QWORD *)&v184 + 1) + 8 * (_QWORD)j), "touch:pathIndex:rangeInAtPoint:eventMask:z:maxZ:transducerType:", v23->_touchIdentifier, v74, v40, v23->_transducerType, v72, v73, v23->_positionZ, v76, v151);
                  }
                  v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v184, v206, 16);
                }
                while (v70);
              }

            }
            v23->_presence = 2;
            hitTestInformationAtDown = v23->_hitTestInformationAtDown;
            v23->_hitTestInformationAtDown = 0;

            hitTestSecurityAnalysis = v23->_hitTestSecurityAnalysis;
            v23->_hitTestSecurityAnalysis = 0;

            v23->_transferred = 0;
            v180 = 0u;
            v181 = 0u;
            v182 = 0u;
            v183 = 0u;
            v79 = *(id *)(a1 + 72);
            v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v180, v205, 16);
            if (v80)
            {
              v81 = *(_QWORD *)v181;
              v82 = *((double *)&v208 + 1);
              v83 = *(double *)&v209;
              v84 = v195;
              do
              {
                for (k = 0; k != v80; k = (char *)k + 1)
                {
                  if (*(_QWORD *)v181 != v81)
                    objc_enumerationMutation(v79);
                  objc_msgSend(*(id *)(*((_QWORD *)&v180 + 1) + 8 * (_QWORD)k), "touch:pathIndex:downAtPoint:eventMask:transducerType:", v23->_touchIdentifier, v84, v40, v23->_transducerType, v82, v83, v151);
                }
                v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v180, v205, 16);
              }
              while (v80);
            }
            goto LABEL_92;
          }
          if (v154)
          {
            if (!presence)
            {
              v23->_presence = 1;
              v176 = 0u;
              v177 = 0u;
              v178 = 0u;
              v179 = 0u;
              v79 = *(id *)(a1 + 72);
              v101 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v176, v204, 16);
              if (v101)
              {
                v102 = *(_QWORD *)v177;
                v103 = *((double *)&v208 + 1);
                v104 = *(double *)&v209;
                v105 = v195;
                do
                {
                  for (m = 0; m != v101; m = (char *)m + 1)
                  {
                    if (*(_QWORD *)v177 != v102)
                      objc_enumerationMutation(v79);
                    v107 = 0.0;
                    if (!*(_BYTE *)(a1 + 209))
                      v107 = *(double *)(a1 + 192);
                    objc_msgSend(*(id *)(*((_QWORD *)&v176 + 1) + 8 * (_QWORD)m), "touch:pathIndex:rangeInAtPoint:eventMask:z:maxZ:transducerType:", v23->_touchIdentifier, v105, v40, v23->_transducerType, v103, v104, v23->_positionZ, v107, v151);
                  }
                  v101 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v176, v204, 16);
                }
                while (v101);
              }
LABEL_92:

LABEL_93:
              v87 = BKLogTouchEvents(v86);
              v88 = objc_claimAutoreleasedReturnValue(v87);
              if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
              {
                v89 = v23->_presence;
                v90 = CFSTR("<unknown>");
                if (v89 <= 2)
                  v90 = *(&off_1000EC8A0 + v89);
                v91 = v195;
                v92 = v90;
                *(_DWORD *)v197 = 67109378;
                *(_DWORD *)v198 = v91;
                *(_WORD *)&v198[4] = 2114;
                *(_QWORD *)&v198[6] = v92;
                _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "contact %d presence: %{public}@", v197, 0x12u);

              }
LABEL_97:

            }
LABEL_98:
            if (HasHighFrequencyDigitizer)
            {
              TimeStamp = IOHIDEventGetTimeStamp(v19);
              v94 = BSMonotonicReferencedTimeFromMachTime(TimeStamp);
              v95 = IOHIDEventGetFloatValue(v19, 720913);
              previousTimestamp = v23->_zGradient.previousTimestamp;
              if (previousTimestamp != 0.0)
              {
                v97 = v94 - previousTimestamp;
                if (v97 >= 0.1)
                  v98 = v97;
                else
                  v98 = 1.0;
                v99 = IOHIDEventGetFloatValue(v19, 720916);
                v100 = (v95 - v23->_zGradient.previousQuality)
                     / v98
                     / sqrt(v99 * IOHIDEventGetFloatValue(v19, 720917) * 0.0002);
                v23->_zGradient.zGradient = v100;
              }
              v23->_zGradient.previousTimestamp = v94;
              v23->_zGradient.previousQuality = v95;
            }
            goto LABEL_105;
          }
          if ((v159 & 2) == 0 || v155)
          {
            if ((v159 & 1) != 0)
              v117 = v153;
            else
              v117 = 1;
            if ((v117 & 1) != 0)
            {
              if (v155)
                v118 = 1;
              else
                v118 = v153;
              if (v118 == 1)
              {
                v162 = 0u;
                v163 = 0u;
                v160 = 0u;
                v161 = 0u;
                v88 = *(id *)(a1 + 72);
                v119 = -[NSObject countByEnumeratingWithState:objects:count:](v88, "countByEnumeratingWithState:objects:count:", &v160, v196, 16);
                if (v119)
                {
                  v120 = *(_QWORD *)v161;
                  v121 = *((double *)&v208 + 1);
                  v122 = *(double *)&v209;
                  do
                  {
                    for (n = 0; n != v119; n = (char *)n + 1)
                    {
                      if (*(_QWORD *)v161 != v120)
                        objc_enumerationMutation(v88);
                      v124 = 0.0;
                      if (!*(_BYTE *)(a1 + 209))
                        v124 = *(double *)(a1 + 192);
                      objc_msgSend(*(id *)(*((_QWORD *)&v160 + 1) + 8 * (_QWORD)n), "touch:didMoveToPoint:eventMask:z:maxZ:", v23->_touchIdentifier, v40, v121, v122, v23->_positionZ, v124, v151);
                    }
                    v119 = -[NSObject countByEnumeratingWithState:objects:count:](v88, "countByEnumeratingWithState:objects:count:", &v160, v196, 16);
                  }
                  while (v119);
                }
                goto LABEL_97;
              }
              goto LABEL_98;
            }
            if (presence != 1)
            {
              v142 = BKLogTouchEvents(v67);
              v88 = objc_claimAutoreleasedReturnValue(v142);
              if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
              {
                v143 = v23->_presence;
                v144 = CFSTR("<unknown>");
                if (v143 <= 2)
                  v144 = *(&off_1000EC8A0 + v143);
                v145 = v144;
                *(_DWORD *)v197 = v151;
                *(_QWORD *)v198 = v145;
                *(_WORD *)&v198[8] = 1024;
                *(_DWORD *)&v198[10] = v155 != 0;
                v199 = 1024;
                v200 = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "unexpected range-out (presence:%{public}@ event.touch:%{BOOL}u) event.range:%{BOOL}u", v197, 0x18u);

              }
              goto LABEL_97;
            }
            v23->_presence = 0;
            v164 = 0u;
            v165 = 0u;
            v166 = 0u;
            v167 = 0u;
            v125 = *(id *)(a1 + 72);
            v134 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v164, v201, 16);
            if (v134)
            {
              v135 = *(_QWORD *)v165;
              v136 = *((double *)&v208 + 1);
              v137 = *(double *)&v209;
              v138 = v195;
              do
              {
                for (ii = 0; ii != v134; ii = (char *)ii + 1)
                {
                  if (*(_QWORD *)v165 != v135)
                    objc_enumerationMutation(v125);
                  v140 = *(id *)(*((_QWORD *)&v164 + 1) + 8 * (_QWORD)ii);
                  objc_msgSend(v140, "touch:pathIndex:rangeOutAtPoint:", v23->_touchIdentifier, v138, v136, v137);

                }
                v134 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v164, v201, 16);
              }
              while (v134);
            }
          }
          else
          {
            if ((v153 & 1) != 0)
            {
              v23->_presence = 1;
              v168 = 0u;
              v169 = 0u;
              v170 = 0u;
              v171 = 0u;
              v108 = *(id *)(a1 + 72);
              v109 = objc_msgSend(v108, "countByEnumeratingWithState:objects:count:", &v168, v202, 16);
              if (v109)
              {
                v110 = *(_QWORD *)v169;
                v111 = *((double *)&v208 + 1);
                v112 = *(double *)&v209;
                v113 = v195;
                do
                {
                  for (jj = 0; jj != v109; jj = (char *)jj + 1)
                  {
                    if (*(_QWORD *)v169 != v110)
                      objc_enumerationMutation(v108);
                    v115 = *(id *)(*((_QWORD *)&v168 + 1) + 8 * (_QWORD)jj);
                    objc_msgSend(v115, "touch:pathIndex:upAtPoint:detached:", v23->_touchIdentifier, v113, v23->_touchDetached, v111, v112);

                  }
                  v109 = objc_msgSend(v108, "countByEnumeratingWithState:objects:count:", &v168, v202, 16);
                }
                while (v109);
              }

              hitTestPolicy = v23->_hitTestPolicy;
              if (hitTestPolicy == 2)
              {
                v23->_hitTestPolicy = 3;
              }
              else if (hitTestPolicy == 4)
              {
                v23->_hitTestPolicy = 0;
              }
              goto LABEL_93;
            }
            v23->_presence = 0;
            v172 = 0u;
            v173 = 0u;
            v174 = 0u;
            v175 = 0u;
            v125 = *(id *)(a1 + 72);
            v126 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v172, v203, 16);
            if (v126)
            {
              v127 = *(_QWORD *)v173;
              v128 = *((double *)&v208 + 1);
              v129 = *(double *)&v209;
              v130 = v195;
              do
              {
                for (kk = 0; kk != v126; kk = (char *)kk + 1)
                {
                  if (*(_QWORD *)v173 != v127)
                    objc_enumerationMutation(v125);
                  v132 = *(id *)(*((_QWORD *)&v172 + 1) + 8 * (_QWORD)kk);
                  v133 = v132;
                  if (presence == 2)
                    objc_msgSend(v132, "touch:pathIndex:upAtPoint:detached:", v23->_touchIdentifier, v130, v23->_touchDetached, v128, v129);
                  objc_msgSend(v133, "touch:pathIndex:rangeOutAtPoint:", v23->_touchIdentifier, v130, v128, v129, v151);

                }
                v126 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v172, v203, 16);
              }
              while (v126);
            }
          }

          goto LABEL_93;
        }
        v43 = BKLogTouchEvents(v33);
        v44 = objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v34;
          _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "range-in for pathIndex with existing contact -- replacing: %{public}@", buf, 0xCu);
        }

        sub_100019A5C((uint64_t)v156, v34);
        v45 = *(_QWORD *)(v34 + 8);
        v47 = BKLogTouchEvents(v46);
        v48 = objc_claimAutoreleasedReturnValue(v47);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v45;
          _os_log_debug_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "stop tracking path:%d", buf, 8u);
        }

        sub_100005270(v34, 0);
        sub_100019A5C(*(_QWORD *)(a1 + 112), v34);
        *(_QWORD *)buf = v34;
        v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", buf, 1));
        sub_100015340(a1, v49, 1);

        sub_1000152C4(a1);
        v188 = 0u;
        v189 = 0u;
        v190 = 0u;
        v191 = 0u;
        v50 = *(id *)(a1 + 72);
        v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v188, v211, 16);
        if (v51)
        {
          v52 = *(_QWORD *)v189;
          do
          {
            for (mm = 0; mm != v51; mm = (char *)mm + 1)
            {
              if (*(_QWORD *)v189 != v52)
                objc_enumerationMutation(v50);
              v54 = *(id *)(*((_QWORD *)&v188 + 1) + 8 * (_QWORD)mm);
              v55 = v54;
              if (v35 == 2)
                objc_msgSend(v54, "touch:pathIndex:upAtPoint:detached:", *(unsigned int *)(v34 + 16), v20, *(unsigned __int8 *)(v34 + 288), 0.0, 0.0);
              objc_msgSend(v55, "touch:pathIndex:rangeOutAtPoint:", *(unsigned int *)(v34 + 16), v20, 0.0, 0.0, v151);

            }
            v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v188, v211, 16);
          }
          while (v51);
        }

      }
      v23 = sub_100005058(v20, v19);
      sub_100012D78((uint64_t)v156, (uint64_t)v23);
      goto LABEL_56;
    }
    if (v158)
    {
      v38 = sub_100011258(v156, v20);
      v39 = objc_claimAutoreleasedReturnValue(v38);
      v23 = (BKTouchContact *)v39;
      v40 = v159;
      if (!v39)
      {
        v41 = BKLogTouchEvents(0);
        v42 = objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v20;
          _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "touch down without previous range event: %d", buf, 8u);
        }

        v40 = v159 | 1;
        IOHIDEventSetIntegerValue(v19, 720903, v40);
        v23 = sub_100005058(v20, v19);
        sub_100012D78((uint64_t)v156, (uint64_t)v23);
      }
      goto LABEL_57;
    }
    v58 = sub_100011258(v156, v20);
    v23 = (BKTouchContact *)objc_claimAutoreleasedReturnValue(v58);
    v40 = v159;
    if (v23)
      goto LABEL_62;
    v141 = BKLogTouchEvents(0);
    v23 = (BKTouchContact *)objc_claimAutoreleasedReturnValue(v141);
    if (os_log_type_enabled(&v23->super, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v20;
      p_super = &v23->super;
      v25 = "didn't see a previous touch down or range-in event for pathIndex:%d; skipping event";
      v26 = 8;
LABEL_14:
      _os_log_error_impl((void *)&_mh_execute_header, p_super, OS_LOG_TYPE_ERROR, v25, buf, v26);
    }
LABEL_105:

    v17 = sub_100010FD0((unint64_t)&v192);
  }
  v148 = BKLogTouchEvents(v17);
  v149 = objc_claimAutoreleasedReturnValue(v148);
  if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v212 = 138543362;
    *(_QWORD *)&v212[4] = v156;
    _os_log_debug_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEBUG, "contacts now %{public}@", v212, 0xCu);
  }

  return v156;
}

void sub_100016694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

id sub_100016868(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  void *v32;
  NSObject *v33;
  id v34;
  int v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  int v48;
  int v49;
  void *v50;
  id v51;
  _QWORD v52[5];
  id v53;
  id v54;
  _BYTE v55[304];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  _OWORD __src[19];
  uint8_t v60[4];
  int v61;
  __int16 v62;
  int v63;
  uint8_t buf[16];
  __int128 v65;

  if (a4)
    v8 = *(_DWORD *)(a4 + 8);
  else
    v8 = 0;
  v9 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 280), "firstObject"));
  if (v9)
    v10 = v9[2];
  else
    v10 = 0;

  if (v10 == v8 && *(_QWORD *)(a2 + 256))
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "_queue_slotRecordForSlotID:", *(unsigned int *)(a2 + 24)));
    v12 = (void *)v11;
    if (!v11)
    {
      v38 = 0;
      goto LABEL_41;
    }
    v51 = *(id *)(v11 + 16);
    memset(__src, 0, sizeof(__src));
    v13 = *(_QWORD **)(a1 + 40);
    if (v13)
      v13 = (_QWORD *)v13[1];
    v14 = v13;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "displayUUID"));
    objc_msgSend(v14, "convertReferenceLocation:toCAScreenLocationForDisplayUUID:", v15, *(double *)(a2 + 216), *(double *)(a2 + 224));
    v17 = v16;
    v19 = v18;
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 248), "contextIDsToExcludeFromHitTesting"));
    v21 = sub_100005968((uint64_t)BKDisplayController, 0, 0, v51, v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v23 = objc_msgSend(v14, "contextIDAtCAScreenLocation:displayUUID:options:securityAnalysis:results:", v15, v22, 0, __src, v17, v19);
    if (LODWORD(__src[0]) == v8)
    {
      v24 = BKLogTouchEvents(v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = __src[0];
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "auth spec contextID down/up match:%X", buf, 8u);
      }

      if (DWORD1(__src[0]) == *(_DWORD *)(a2 + 24))
      {
        if (a4)
          v27 = *(unsigned int *)(a4 + 12);
        else
          v27 = 0;
        v28 = BSAuditTokenForTask(v27, buf);
        if ((_DWORD)v28)
        {
          v29 = *(void **)(a1 + 88);
          if (!v29)
          {
            v30 = objc_claimAutoreleasedReturnValue(+[BKHIDSystemInterface sharedInstance](BKHIDSystemInterface, "sharedInstance"));
            v32 = *(void **)(a1 + 88);
            v31 = (uint64_t *)(a1 + 88);
            *v31 = v30;

            v29 = (void *)*v31;
          }
          v33 = objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "deliveryManager"));
          v50 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject authenticationOriginator](v33, "authenticationOriginator"));
          v34 = objc_msgSend(v51, "secureName");
          if (a3)
          {
            v35 = (int)v34;
            if ((_DWORD)v34 == a3)
            {
              v36 = 2;
            }
            else
            {
              v45 = BKLogTouchEvents(v34);
              v46 = objc_claimAutoreleasedReturnValue(v45);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v60 = 67109376;
                v61 = v35;
                v62 = 1024;
                v63 = a3;
                _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "auth secure name:%X does not match requested secure name:%X", v60, 0xEu);
              }

              v36 = 1;
            }
          }
          else
          {
            v36 = 0;
          }
          v52[0] = _NSConcreteStackBlock;
          v52[1] = 3221225472;
          v52[2] = sub_100083A48;
          v52[3] = &unk_1000EC560;
          memcpy(v55, __src, sizeof(v55));
          v52[4] = a2;
          v56 = v36;
          v53 = v51;
          v57 = *(_OWORD *)buf;
          v58 = v65;
          v54 = v12;
          v38 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "buildMessage:", v52));

        }
        else
        {
          v44 = BKLogTouchEvents(v28);
          v33 = objc_claimAutoreleasedReturnValue(v44);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            if (a4)
              v49 = *(_DWORD *)(a4 + 12);
            else
              v49 = 0;
            *(_DWORD *)v60 = 67109120;
            v61 = v49;
            _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "auth cannot get audit token for port:%X", v60, 8u);
          }
          v38 = 0;
        }

        v43 = 0;
LABEL_39:

        if ((v43 & 1) != 0)
        {
          v37 = 0;
LABEL_42:

          return v37;
        }
LABEL_41:
        v38 = v38;
        v37 = v38;
        goto LABEL_42;
      }
    }
    else
    {
      v39 = BKLogTouchEvents(v23);
      v40 = objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v8;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = __src[0];
        _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "auth spec context mismatch between down:%X up:%X", buf, 0xEu);
      }

      if (DWORD1(__src[0]) == *(_DWORD *)(a2 + 24))
        goto LABEL_30;
    }
    v41 = BKLogTouchEvents(v26);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      v48 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v48;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = DWORD1(__src[0]);
      _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "ignoring auth spec: slotID changed between down:%X and up:%X", buf, 0xEu);
    }

LABEL_30:
    v38 = 0;
    v43 = 1;
    goto LABEL_39;
  }
  v37 = 0;
  return v37;
}

void sub_100016DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100016E40(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v3 = a2;
  v9 = v3;
  if (!v3)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL BKDisplayIsHeadless(void)_block_invoke"));
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("BKDisplay.m"), 680, CFSTR("please invoke BKDisplayStartWindowServer before BKDisplayIsHeadless"));

    v3 = 0;
  }
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "windowServerDisplay"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1000170BC(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  _QWORD *WeakRetained;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _BOOL4 v10;
  void *v11;
  id v12;
  void *v13;
  _BYTE *v14;
  uint64_t v15;
  NSObject *v16;
  const __CFString *v17;
  const __CFString *v18;
  unint64_t v19;
  const __CFString *v20;
  unint64_t v21;
  const __CFString *v22;
  _QWORD v23[4];
  id v24;
  int8x16_t v25;
  uint64_t v26;
  BOOL v27;
  __int16 v28;
  uint8_t buf[4];
  const __CFString *v30;
  __int16 v31;
  const __CFString *v32;
  __int16 v33;
  const __CFString *v34;
  __int16 v35;
  const __CFString *v36;
  __int16 v37;
  _BOOL4 v38;
  __int16 v39;
  int v40;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_touchStreamClientForReference:", *(unsigned int *)(a1 + 64)));
  v3 = (_BYTE *)v2;
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 32));
  else
    WeakRetained = 0;
  v28 = 0;
  sub_1000173F4((uint64_t)WeakRetained, &v28, (unsigned __int8 *)&v28 + 1);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (!*(_BYTE *)(v5 + 24))
    *(_BYTE *)(v5 + 24) = v28;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_BYTE *)(v7 + 24);
  if (!v8)
  {
    *(_BYTE *)(v7 + 24) = HIBYTE(v28);
    v6 = *(_QWORD *)(a1 + 48);
    v8 = *(_BYTE *)(*(_QWORD *)(v6 + 8) + 24);
  }
  if (v3)
  {
    v3[10] = v8;
    v3[11] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v6 = *(_QWORD *)(a1 + 48);
  }
  sub_1000173F4((uint64_t)WeakRetained, (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), (unsigned __int8 *)(*(_QWORD *)(v6 + 8) + 24));
  v9 = HIBYTE(v28);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) != HIBYTE(v28)
     || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != v28;
  if (WeakRetained)
    v11 = (void *)WeakRetained[1];
  else
    v11 = 0;
  v12 = v11;
  v13 = *(void **)(a1 + 32);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10000C240;
  v23[3] = &unk_1000EB190;
  v14 = v3;
  v24 = v14;
  v25 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
  v27 = v10;
  v26 = *(_QWORD *)(a1 + 56);
  v15 = BKLogTouchEvents(objc_msgSend(v13, "_queue_enumerateDigitizersForDisplay:usingBlock:", v12, v23));
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    if (v9 > 3)
      v17 = CFSTR("<unknown>");
    else
      v17 = *(&off_1000EB3A0 + v9);
    if (v28 > 2uLL)
      v18 = CFSTR("<unknown>");
    else
      v18 = *(&off_1000EB3C0 + v28);
    v19 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    if (v19 > 3)
      v20 = CFSTR("<unknown>");
    else
      v20 = *(&off_1000EB3A0 + v19);
    v21 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (v21 > 2)
      v22 = CFSTR("<unknown>");
    else
      v22 = *(&off_1000EB3C0 + v21);
    *(_DWORD *)buf = 138544642;
    v30 = v17;
    v31 = 2114;
    v32 = v18;
    v33 = 2114;
    v34 = v20;
    v35 = 2114;
    v36 = v22;
    v37 = 1024;
    v38 = v10;
    v39 = 1024;
    v40 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "sg transition (%{public}@, %{public}@) -> (%{public}@, %{public}@) somethingDidChange:%{BOOL}u didNotify:%{BOOL}u", buf, 0x36u);
  }

}

void sub_1000173C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

BOOL sub_1000173F4(uint64_t a1, _BYTE *a2, unsigned __int8 *a3)
{
  id v5;
  id v6;
  _BOOL8 v7;
  id v8;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  void *i;
  _BYTE *v13;
  int v14;
  int v15;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  if (!a1)
    return 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v5 = *(id *)(a1 + 16);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  v7 = v6 != 0;
  if (v6)
  {
    v8 = v6;
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v11)
          objc_enumerationMutation(v5);
        v13 = *(_BYTE **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        if (v13)
        {
          if (v13[9])
          {
            v14 = v13[11];
            v15 = (v10 | 2) == 2 ? v13[11] : v10;
            if (v14 != v10 && v14 != 0)
              v10 = v15;
          }
          LODWORD(v13) = v13[10];
        }
        if (v13 > v9)
          v9 = v13;
      }
      v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v8);
  }
  else
  {
    v9 = 0;
    LOBYTE(v10) = 0;
  }

  *a2 = v10;
  *a3 = v9;
  return v7;
}

void sub_100017654(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t v19[128];
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  uint64_t v23;

  if (a1 && *(void **)(a1 + 176) != a2)
  {
    v4 = objc_msgSend(a2, "copy");
    v5 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v4;

    v7 = BKLogTouchEvents(v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543618;
      v21 = a2;
      v22 = 2114;
      v23 = a1;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Setting hittest regions to: %{public}@ for digitizer: %{public}@", buf, 0x16u);
    }

    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v9 = *(id *)(a1 + 72);
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v9);
          objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v12), "hitTestRegionsDidChange:", a2, (_QWORD)v15);
          v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

    if ((uint64_t)objc_msgSend(*(id *)(a1 + 112), "count") >= 1)
    {
      v13 = sub_10000C768(*(id **)(a1 + 112));
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      sub_1000831FC(a1, v14);

    }
  }
}

void sub_100017808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100017EF0(uint64_t a1, void *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  __int128 v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  __int128 v21;
  _QWORD *v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;

  v22 = a2;
  v7 = *a3;
  v8 = a3[2];
  v9 = objc_alloc_init((Class)NSMutableArray);
  v10 = sub_100012EC4(a1, v7, v8, v9);
  v11 = objc_msgSend(*(id *)a4, "hostContextIDForEmbeddedContextID:displayUUID:", v7, *(_QWORD *)(a4 + 8));
  *(_QWORD *)&v12 = 67109376;
  v21 = v12;
  while ((_DWORD)v11)
  {
    v13 = objc_msgSend(*(id *)a4, "taskPortForContextID:displayUUID:", v11, *(_QWORD *)(a4 + 8));
    v14 = (uint64_t)v13;
    if (((_DWORD)v13 - 1) > 0xFFFFFFFD)
    {
      v17 = BKLogTouchEvents(v13);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v21;
        v24 = v14;
        v25 = 1024;
        v26 = (int)v11;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "invalid port (%X) for contextID:%X", buf, 0xEu);
      }

    }
    else
    {
      v15 = objc_msgSend(v9, "count");
      if ((unint64_t)v15 >= 0x40)
      {
        v19 = BKLogTouchEvents(v15);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109120;
          v24 = (int)v11;
          _os_log_fault_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "reached maximum supported embedded context depth at contextID:%X", buf, 8u);
        }

        break;
      }
      v16 = sub_100012EC4(a1, (uint64_t)v11, v14, v9);
    }
    v11 = objc_msgSend(*(id *)a4, "hostContextIDForEmbeddedContextID:displayUUID:", v11, *(_QWORD *)(a4 + 8), v21);
  }
  sub_100005270((uint64_t)v22, v9);
  objc_msgSend(*(id *)a4, "applySceneHostSettingsToHostingChain:", v22[35]);

}

void sub_100018100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

id sub_100018188(uint64_t a1, mach_port_t a2, double a3, double a4, double a5)
{
  id result;

  LODWORD(a3) = *(_DWORD *)(a1 + 56);
  LODWORD(a4) = *(_DWORD *)(a1 + 60);
  LODWORD(a5) = *(_DWORD *)(a1 + 64);
  if (objc_msgSend(*(id *)(a1 + 32), "_passesThresholdForX:y:z:", a3, a4, a5))
    sub_10009CE14(a2, 1, *(double *)(a1 + 40), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64));
  result = objc_msgSend(*(id *)(a1 + 32), "_shouldSendSampleEventWithTimestamp:samplingInterval:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  if ((_DWORD)result)
  {
    sub_10009CE14(a2, 0, *(double *)(a1 + 40), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64));
    return _objc_msgSend(*(id *)(a1 + 32), "_setLastAccelerometerEventTimestamp:", *(double *)(a1 + 40));
  }
  return result;
}

id sub_100018A14(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_postPendingUpdates");
}

void sub_100018A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000F090(*(_QWORD *)(a1 + 32), a3);
}

BOOL sub_100018A54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
    v2 = *(_QWORD *)(a2 + 32);
  else
    v2 = 0;
  return (*(_QWORD *)(a1 + 32) & ~v2) != 0;
}

_BYTE *sub_100018A7C(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  _BYTE *result;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = *(_QWORD *)(a1 + 40);
  v2 = *(_DWORD **)(a1 + 32);
  v3 = v2[11];
  if ((v3 - 2) >= 2)
  {
    if (v3 == 1)
      objc_msgSend(v2, "_queue_userEventOccurredInPresenceMode");
  }
  else
  {
    objc_msgSend(v2, "_queue_userEventOccurredInIdleMode");
  }
  result = *(_BYTE **)(a1 + 32);
  if (result[56])
  {
    result = objc_msgSend(result, "_queue_postNotification:", kBKSHIDServicesUserEventOccurred);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = 0;
  }
  return result;
}

id sub_100018B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;

  v3 = *(void **)(a1 + 32);
  if (a3)
    a3 = *(_QWORD *)(a3 + 8);
  return objc_msgSend(v3, "addEntriesFromDictionary:", a3);
}

id sub_100018B18(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "isAlive");
}

id sub_100018B20(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "addDestination:touchIdentifier:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

id sub_100018B34(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "increment");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "includeBitNumber:", *(_QWORD *)(a1 + 40));
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "excludeBitNumber:", *(_QWORD *)(a1 + 40));
}

id sub_100018B70(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "increment");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "includeBitNumber:", *(_QWORD *)(a1 + 40));
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "excludeBitNumber:", *(_QWORD *)(a1 + 40));
}

id sub_100018BAC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_postUpdate:toProcessPID:", *(_QWORD *)(a1 + 40), a2);
}

void sub_100018BBC(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectForKey:", *(unsigned int *)(a1 + 40)));
  if (objc_msgSend(v3, "count"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKey:", *(unsigned int *)(a1 + 40)));

    if (v2)
      return;
    v3 = objc_alloc_init((Class)BKSTouchDeliveryUpdate);
    objc_msgSend(v3, "setType:", 1);
    objc_msgSend(v3, "setPid:", 0xFFFFFFFFLL);
    objc_msgSend(v3, "setTouchIdentifier:", *(unsigned int *)(a1 + 40));
    objc_msgSend(v3, "setIsDetached:", *(unsigned __int8 *)(a1 + 44));
    objc_msgSend(*(id *)(a1 + 32), "_queue_pendUpdate:", v3);
  }

}

void sub_100018C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_100018C9C(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) = *(_QWORD *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10000CF20;
  v3[3] = &unk_1000EB298;
  v1 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v1, "_queue_enumerateDigitizersForDisplay:usingBlock:", 0, v3);
}

void sub_100018D00(uint64_t a1, void *a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;

  v9 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  v4 = __clz(__rbit64(v3));
  v5 = __clz(v3);
  v6 = 63 - v5;
  if (v4 <= (uint64_t)(63 - v5))
  {
    v7 = 64 - v5;
    v8 = 63 - v5;
    do
    {
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) >> v4) & 1) != 0)
      {
        if (v8 == v4)
          objc_msgSend(v9, "appendFormat:", CFSTR("%d"), v6);
        else
          objc_msgSend(v9, "appendFormat:", CFSTR("%d "), v4);
      }
      ++v4;
    }
    while (v7 != v4);
  }

}

id sub_100018DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_postUpdate:forTouchIdentifier:", a3, a2);
}

id sub_100018DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  id result;
  uint64_t v8;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR(" "));
  v6 = *(void **)(a1 + 32);
  if (a3 == 1)
    result = objc_msgSend(v6, "appendFormat:", CFSTR("%X"), a2, v8);
  else
    result = objc_msgSend(v6, "appendFormat:", CFSTR("%X-%X"), a2, a3 + a2 - 1);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

uint64_t sub_100018E7C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 80);
  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
  if (*(_QWORD *)(v1 + 24) == -1)
    *(_QWORD *)(v1 + 24) = 1;
  return result;
}

id sub_100018EB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_enumerateDigitizersForDisplay:usingBlock:", *(_QWORD *)(a1 + 40), &stru_1000EB0A8);
}

void sub_100018EC4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[6];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(unsigned __int8 *)(a1 + 40);
    if (*(unsigned __int8 *)(v1 + 52) != v2)
    {
      *(_BYTE *)(v1 + 52) = v2;
      v3 = BKLogOrientationDevice(a1);
      v4 = objc_claimAutoreleasedReturnValue(v3);
      v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      if (v2)
      {
        if (v5)
        {
          LOWORD(v8[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Turning on orientation events.", (uint8_t *)v8, 2u);
        }

        kdebug_trace(730464792, 0, 0, 0, 0);
        v7 = *(_QWORD *)(v1 + 112);
        v6 = *(void **)(v1 + 120);
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        v8[2] = sub_10008A96C;
        v8[3] = &unk_1000EC9F0;
        v8[4] = v1;
        objc_msgSend(v6, "startDeviceOrientationUpdatesToQueue:withHandler:", v7, v8);
        sub_10008A9B8(v1);
      }
      else
      {
        if (v5)
        {
          LOWORD(v8[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Turning off orientation events.", (uint8_t *)v8, 2u);
        }

        kdebug_trace(730464796, 0, 0, 0, 0);
        objc_msgSend(*(id *)(v1 + 120), "stopDeviceOrientationUpdates");
        sub_10008A3A8((_QWORD *)v1);
      }
    }
  }
}

void sub_100019014(uint64_t a1)
{
  sub_100019F64(*(_QWORD *)(a1 + 32), *(float *)(a1 + 40));
}

void sub_100019024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 66))
  {
    *(_BYTE *)(v1 + 66) = 1;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "invalidate");
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;

    v5 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v5 + 48))
      sub_10001A39C(v5);
  }
}

void sub_100019088(uint64_t a1)
{
  sub_100019E0C(*(_QWORD *)(a1 + 32), *(double *)(a1 + 40));
}

void sub_100019098(uint64_t a1, void *a2)
{
  double v3;
  double v4;
  double v5;
  id v6;

  v6 = a2;
  objc_msgSend(v6, "setWantsAccelerometerEvents:", 1);
  objc_msgSend(v6, "setAccelerometerUpdateInterval:", *(double *)(a1 + 32));
  LODWORD(v3) = *(_DWORD *)(a1 + 40);
  objc_msgSend(v6, "setXThreshold:", v3);
  LODWORD(v4) = *(_DWORD *)(a1 + 44);
  objc_msgSend(v6, "setYThreshold:", v4);
  LODWORD(v5) = *(_DWORD *)(a1 + 48);
  objc_msgSend(v6, "setZThreshold:", v5);

}

void sub_100019100(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  _QWORD v8[4];
  char v9;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100002D1C;
  v8[3] = &unk_1000ECA60;
  v9 = v4;
  if (sub_10000A40C((uint64_t)"_BKDisplayXXUpdateTetheredDisplayOrientationIfNecessaryWithInterfaceOrientation", BKBackBoardClientEntitlement, (uint64_t)v7))
  {
    sub_100002D1C((uint64_t)v8);
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
}

void sub_1000191EC(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  _QWORD v8[4];
  char v9;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000033B8;
  v8[3] = &unk_1000ECA60;
  v9 = v4;
  if (sub_10000A40C((uint64_t)"_BKDisplayXXUpdateMirroredDisplayOrientationWithInterfaceOrientation", BKBackBoardClientEntitlement, (uint64_t)v7))
  {
    sub_1000033B8((uint64_t)v8);
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
}

void sub_1000192D8(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  char v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  _OWORD v10[2];
  _QWORD v11[5];
  int v12;
  char v13;
  char v14;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 52)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 56) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 36);
  v6 = *(_BYTE *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 44);
  v8 = *(_OWORD *)(a1 + 88);
  v10[0] = *(_OWORD *)(a1 + 72);
  v10[1] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10000476C;
  v11[3] = &unk_1000EA188;
  v13 = v5;
  v14 = v6;
  v11[4] = v7;
  v12 = v4;
  if (sub_100004EF8((uint64_t)"_BKHIDXXTouchStreamSetEventDispatchMode", BKTouchStreamsEntitlement, BKBackBoardClientEntitlement, (uint64_t)v10))
  {
    sub_10000476C((uint64_t)v11);
    v9 = 0;
  }
  else
  {
    v9 = 5;
  }
  *(_DWORD *)(a2 + 32) = v9;
}

void sub_1000193E8(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  double v5;
  float v6;
  float v7;
  float v8;
  __int128 v9;
  _OWORD v10[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 68)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(a1 + 68) && *(_DWORD *)(a1 + 72) > 0x1Fu)
      {
        v4 = *(unsigned int *)(a1 + 28);
        v5 = *(double *)(a1 + 48);
        v6 = *(float *)(a1 + 56);
        v7 = *(float *)(a1 + 60);
        v8 = *(float *)(a1 + 64);
        v9 = *(_OWORD *)(a1 + 104);
        v10[0] = *(_OWORD *)(a1 + 88);
        v10[1] = v9;
        sub_100004174(v4, (uint64_t)v10, v5, v6, v7, v8);
        *(_DWORD *)(a2 + 32) = 0;
        return;
      }
      v3 = -309;
    }
    else
    {
      v3 = -300;
    }
  }
  else
  {
    v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000194AC(_DWORD *a1, uint64_t a2)
{
  id v3;
  void *v4;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = sub_10001A7F4();
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    *(_DWORD *)(a2 + 36) = sub_100019D70((uint64_t)v4);

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_100019534(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  _OWORD v7[2];
  _QWORD v8[5];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
  }
  else
  {
    v4 = a1[6];
    v3 = a1 + 6;
    if (v4 || v3[1] <= 0x1Fu)
    {
      v5 = -309;
    }
    else
    {
      v6 = *(_OWORD *)(v3 + 9);
      v7[0] = *(_OWORD *)(v3 + 5);
      v7[1] = v6;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100002D6C;
      v8[3] = &unk_1000EBC38;
      v8[4] = a2 + 36;
      if ((sub_10000A40C((uint64_t)"_BKDisplayXXDisplayIsTethered", BKBackBoardClientEntitlement, (uint64_t)v7) & 1) != 0)
      {
        sub_100002D6C((uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 40;
        return;
      }
      v5 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

_DWORD *sub_100019630(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  char *v10;
  __int128 v11;
  _OWORD v12[2];

  if ((*result & 0x80000000) == 0
    && (v3 = result, v4 = result[1], v4 >= 0x28)
    && v4 <= 0x428
    && ((v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        v8 && (result = memchr(result + 10, 0, v4 - 40)) != 0))
  {
    v10 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v10 && *((_DWORD *)v10 + 1) > 0x1Fu)
    {
      v11 = *(_OWORD *)(v10 + 36);
      v12[0] = *(_OWORD *)(v10 + 20);
      v12[1] = v11;
      result = (_DWORD *)sub_100019718((uint64_t)(v3 + 10), (uint64_t)v12);
      *(_DWORD *)(a2 + 32) = (_DWORD)result;
      return result;
    }
    v9 = -309;
  }
  else
  {
    v9 = -304;
  }
  *(_DWORD *)(a2 + 32) = v9;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100019718(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000048D0;
  v3[3] = &unk_1000EBC38;
  v3[4] = a1;
  if (!sub_10001261C(BKBackBoardClientEntitlement, a2))
    return 5;
  sub_1000048D0((uint64_t)v3);
  return 0;
}

void sub_100019A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  NSString *v7;
  void *v8;
  uint64_t v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  void *v25;

  if (a1)
  {
    v3 = *(_QWORD *)(a2 + 8);
    if (v3 >= 30)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("pathIndex out of bounds: %d"), *(_QWORD *)(a2 + 8)));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        v7 = NSStringFromSelector("removeContact:");
        v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
        v10 = (objc_class *)objc_opt_class(a1, v9);
        v11 = NSStringFromClass(v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        *(_DWORD *)buf = 138544642;
        v15 = v8;
        v16 = 2114;
        v17 = v12;
        v18 = 2048;
        v19 = a1;
        v20 = 2114;
        v21 = CFSTR("BKTouchContactSet.m");
        v22 = 1024;
        v23 = 101;
        v24 = 2114;
        v25 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

      }
      _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));
      __break(0);
      JUMPOUT(0x100019C08);
    }
    v4 = *(void **)(a1 + 16 + 8 * v3);
    if (v4)
    {
      v5 = *(void **)(a1 + 8);
      v13 = v4;
      objc_msgSend(v5, "removeObject:");
      *(_QWORD *)(a1 + 16 + 8 * v3) = 0;

    }
  }
}

uint64_t sub_100019D70(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return 0;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100018E7C;
  v4[3] = &unk_1000ECDD0;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_100019E0C(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  double v8;
  void *v9;
  int v10;
  double v11;

  if (a1 && *(double *)(a1 + 40) != a2)
  {
    *(double *)(a1 + 40) = a2;
    v4 = *(_QWORD *)(a1 + 128);
    v5 = BKLogOrientationDevice(a1);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = v6;
    if (v4)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 134217984;
        v11 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setUpdateInterval:%g", (uint8_t *)&v10, 0xCu);
      }

      v8 = *(double *)(a1 + 40) * 1000000.0;
      v9 = *(void **)(a1 + 128);
      v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v8));
      objc_msgSend(v9, "setProperty:forKey:", v7, CFSTR("ReportInterval"));
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 134217984;
      v11 = a2;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "missing accel HID service plugin (setUpdateInterval:%g)", (uint8_t *)&v10, 0xCu);
    }

  }
}

void sub_100019F64(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  double v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  _QWORD v12[4];
  uint8_t buf[4];
  double v14;

  if (a1 && *(float *)(a1 + 48) != a2)
  {
    *(float *)(a1 + 48) = a2;
    v4 = *(_QWORD *)(a1 + 128);
    v5 = BKLogOrientationDevice(a1);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = v6;
    if (v4)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v14 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setInterruptEventThresholds:%g", buf, 0xCu);
      }

      LODWORD(v8) = *(_DWORD *)(a1 + 48);
      v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8));
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 20000));
      v11[0] = CFSTR("ThresholdX");
      v11[1] = CFSTR("ThresholdY");
      v12[0] = v7;
      v12[1] = v7;
      v11[2] = CFSTR("ThresholdZ");
      v11[3] = CFSTR("ThresholdPeriod");
      v12[2] = v7;
      v12[3] = v9;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 4));
      objc_msgSend(*(id *)(a1 + 128), "setProperty:forKey:", v10, CFSTR("Shake"));

    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v14 = a2;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "missing accel HID service plugin (setInterruptEventThresholds:%g)", buf, 0xCu);
    }

  }
}

void sub_10001A39C(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    *(_BYTE *)(a1 + 65) = 1;
    if ((objc_msgSend(*(id *)(a1 + 32), "isActive") & 1) == 0)
      sub_10000BB70(a1);
    objc_msgSend(*(id *)(a1 + 48), "invalidate");
    v2 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;

  }
}

void sub_10001A584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, objc_super a11)
{
  void *v11;

  a11.super_class = (Class)BKDirectTouchStateHitTester;
  -[_Unwind_Exception dealloc](&a11, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10001A5CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000592CC(a1);
  _Unwind_Resume(a1);
}

id sub_10001A7F4()
{
  objc_opt_self();
  if (qword_1001175B8 != -1)
    dispatch_once(&qword_1001175B8, &stru_1000EC928);
  return (id)qword_1001175B0;
}

void sub_10001C024(id a1)
{
  BKDisplayController *v1;
  void *v2;

  v1 = objc_alloc_init(BKDisplayController);
  v2 = (void *)qword_100117228;
  qword_100117228 = (uint64_t)v1;

}

void sub_10001C04C(void *a1, unsigned int *a2)
{
  uint64_t v3;
  id v4;

  v3 = *a2;
  v4 = a1;
  objc_msgSend(v4, "setTargetContextID:", v3);
  objc_msgSend(v4, "setTargetSlotID:", a2[1]);

}

id sub_10001C094(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10001C0F4;
  v2[3] = &unk_1000E98A0;
  v2[4] = a1;
  return (id)objc_claimAutoreleasedReturnValue(+[BKSHIDEventHitTestLayerInformation build:](BKSHIDEventHitTestLayerInformation, "build:", v2));
}

void sub_10001C0F4(uint64_t a1, void *a2)
{
  id v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2;
  v4 = *(_OWORD **)(a1 + 32);
  v5 = v4[7];
  v24 = v4[6];
  v25 = v5;
  v6 = v4[9];
  v26 = v4[8];
  v27 = v6;
  v7 = v4[3];
  v20 = v4[2];
  v21 = v7;
  v8 = v4[5];
  v22 = v4[4];
  v23 = v8;
  objc_msgSend(v3, "setCumulativeLayerTransform:", &v20);
  v9 = *(_OWORD **)(a1 + 32);
  v10 = v9[15];
  v24 = v9[14];
  v25 = v10;
  v11 = v9[17];
  v26 = v9[16];
  v27 = v11;
  v12 = v9[11];
  v20 = v9[10];
  v21 = v12;
  v13 = v9[13];
  v22 = v9[12];
  v23 = v13;
  objc_msgSend(v3, "setCumulativeContentsTransform:", &v20);
  LODWORD(v14) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24);
  objc_msgSend(v3, "setCumulativeOpacity:", v14);
  objc_msgSend(v3, "setHasInsecureFilter:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 289));
  objc_msgSend(v3, "setDetectedOcclusion:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 288));
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(v16 + 16);
  if ((v17 & 8) != 0)
  {
    LODWORD(v15) = *(_DWORD *)(v16 + 292);
    objc_msgSend(v3, "setBackgroundAverage:", v15);
    LODWORD(v18) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 296);
    objc_msgSend(v3, "setBackgroundStandardDeviation:", v18);
    LODWORD(v19) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 300);
    objc_msgSend(v3, "setBackgroundAverageContrastThreshold:", v19);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  }
  objc_msgSend(v3, "setValidMask:", v17);

}

void sub_10001C1F8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v5 = a2;
  if (a1)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "context", 0));
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v12;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v12 != v9)
            objc_enumerationMutation(v6);
          objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v10), "display:didBecomeBlank:", v5, a3);
          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v8);
    }

  }
}

void sub_10001C7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001C8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001D5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001D7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001E034(id a1, NSString *a2, _BKMousePointerServerClientPerDisplay *a3, BOOL *a4)
{
  _BKMousePointerServerClientPerDisplay *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[_BKMousePointerServerClientPerDisplay renderingAssertion](v4, "renderingAssertion"));
  objc_msgSend(v5, "invalidate");

  v6 = (void *)objc_claimAutoreleasedReturnValue(-[_BKMousePointerServerClientPerDisplay modelUpdateAssertion](v4, "modelUpdateAssertion"));
  objc_msgSend(v6, "invalidate");

  v7 = (id)objc_claimAutoreleasedReturnValue(-[_BKMousePointerServerClientPerDisplay buttonDownRepositionUniqueIdentifierToAssertionMap](v4, "buttonDownRepositionUniqueIdentifierToAssertionMap"));
  objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", &stru_1000E9B10);

}

void sub_10001E0B0(id a1, NSUUID *a2, BSInvalidatable *a3, BOOL *a4)
{
  -[BSInvalidatable invalidate](a3, "invalidate");
}

id sub_10001E0B8(id a1, BKIOHIDService *a2)
{
  BKIOHIDService *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  unsigned int v31;
  unsigned int v32;

  v2 = a2;
  if (-[BKIOHIDService serviceStatus](v2, "serviceStatus") == (id)2)
  {
    v3 = 0;
  }
  else
  {
    v4 = objc_alloc((Class)BKSMousePointerDevice);
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[BKIOHIDService senderDescriptor](v2, "senderDescriptor"));
    v3 = objc_msgSend(v4, "initWithSenderDescriptor:", v5);

    v6 = (void *)objc_claimAutoreleasedReturnValue(-[BKIOHIDService uniqueProductIdentifier](v2, "uniqueProductIdentifier"));
    objc_msgSend(v3, "setPreferenceKey:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(-[BKIOHIDService propertyForKey:](v2, "propertyForKey:", CFSTR("Product")));
    objc_msgSend(v3, "setProductName:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[BKIOHIDService propertyForKey:](v2, "propertyForKey:", CFSTR("Manufacturer")));
    objc_msgSend(v3, "setManufacturerName:", v8);
    if (-[BKIOHIDService eventSource](v2, "eventSource") == 11
      && -[BKIOHIDService claimsToConformToUsagePage:usage:](v2, "claimsToConformToUsagePage:usage:", 13, 12))
    {
      objc_msgSend(v3, "setHasVirtualMouseButtons:", 1);
    }
    if (-[BKIOHIDService eventSource](v2, "eventSource") == 12)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(-[BKIOHIDService propertyForKey:](v2, "propertyForKey:", CFSTR("VendorID")));
      v11 = objc_opt_class(NSNumber, v10);
      v12 = v9;
      v13 = v12;
      if (v11)
        v14 = (objc_opt_isKindOfClass(v12, v11) & 1) != 0 ? v13 : 0;
      else
        v14 = 0;
      v15 = v14;

      v16 = objc_msgSend(v15, "intValue");
      if (v16 == 1452 || v16 == 76)
        objc_msgSend(v3, "setSupportsDragLock:", 1);
    }
    if (-[BKIOHIDService eventSource](v2, "eventSource") == 12)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(-[BKIOHIDService propertyForKey:](v2, "propertyForKey:", CFSTR("VendorID")));
      v19 = objc_opt_class(NSNumber, v18);
      v20 = v17;
      v21 = v20;
      if (v19)
      {
        if ((objc_opt_isKindOfClass(v20, v19) & 1) != 0)
          v22 = v21;
        else
          v22 = 0;
      }
      else
      {
        v22 = 0;
      }
      v23 = v22;

      v24 = (void *)objc_claimAutoreleasedReturnValue(-[BKIOHIDService propertyForKey:](v2, "propertyForKey:", CFSTR("ProductID")));
      v26 = objc_opt_class(NSNumber, v25);
      v27 = v24;
      v28 = v27;
      if (v26)
      {
        if ((objc_opt_isKindOfClass(v27, v26) & 1) != 0)
          v29 = v28;
        else
          v29 = 0;
      }
      else
      {
        v29 = 0;
      }
      v30 = v29;

      v31 = objc_msgSend(v23, "intValue");
      v32 = objc_msgSend(v30, "intValue");

      if (v31 == 1452 && (v32 & 0xFFFFFFFE) == 0x454)
      {
        objc_msgSend(v3, "setSupportsLightClick:", 1);
        objc_msgSend(v3, "setSupportsSystemHaptics:", 1);
      }

    }
  }

  return v3;
}

void sub_10001E390(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  id v9;

  v3 = a2;
  v6 = BKLogMousePointer(v3, v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138543362;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received Connection Interruption: %{public}@", (uint8_t *)&v8, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_queue_removeConnection:", v3);
}

void sub_10001E450(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  id v9;

  v3 = a2;
  v6 = BKLogMousePointer(v3, v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138543362;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received Connection Invalidation: %{public}@", (uint8_t *)&v8, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_queue_removeConnection:", v3);
}

void sub_10001E510(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "copy");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = v2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7), "remoteTarget", (_QWORD)v9));
        objc_msgSend(v8, "pointerGlobalDevicePreferencesDidChange:", *(_QWORD *)(a1 + 40));

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

}

id sub_10001E624(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "setGlobalDevicePreferences:", *(_QWORD *)(a1 + 32));
}

uint64_t sub_10001E630(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001E640(uint64_t a1)
{

}

void sub_10001E648(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "globalDevicePreferences"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_10001E684(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "setPreferences:forDevice:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_10001E690(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 8), "preferencesForDevice:", a1[5]));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10001E6CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v5;
  BOOL v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a4;
  v5 = objc_msgSend(*(id *)(a1 + 32), "BOOLValue");
  v6 = v5 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "containsObject:", v14);
  v7 = v14;
  if (!v6)
  {
    v8 = *(id *)(*(_QWORD *)(a1 + 40) + 8);
    v9 = *(void **)(*(_QWORD *)(a1 + 40) + 32);
    if (v5)
    {
      v10 = v14;
      if (!v9)
      {
        v11 = objc_alloc_init((Class)NSMutableSet);
        v12 = *(_QWORD *)(a1 + 40);
        v13 = *(void **)(v12 + 32);
        *(_QWORD *)(v12 + 32) = v11;

        v10 = v14;
        v9 = *(void **)(*(_QWORD *)(a1 + 40) + 32);
      }
      objc_msgSend(v9, "addObject:", v10);
      if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "count") == (id)1)
        objc_msgSend(v8, "addGlobalDevicePreferencesObserver:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      objc_msgSend(v9, "removeObject:", v14);
      if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "count"))
        objc_msgSend(v8, "removeGlobalDevicePreferencesObserver:", *(_QWORD *)(a1 + 40));
    }

    v7 = v14;
  }

}

void sub_10001E7C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  NSString *v10;
  void *v11;
  uint64_t v12;
  objc_class *v13;
  NSString *v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  const __CFString *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  void *v29;

  v17 = a2;
  v7 = a3;
  v8 = a4;
  if (!v17)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("we expect the controller to exist")));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      v10 = NSStringFromSelector(*(SEL *)(a1 + 72));
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v13 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32), v12);
      v14 = NSStringFromClass(v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v16 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138544642;
      v19 = v11;
      v20 = 2114;
      v21 = v15;
      v22 = 2048;
      v23 = v16;
      v24 = 2114;
      v25 = CFSTR("BKMousePointerServiceServer.m");
      v26 = 1024;
      v27 = 273;
      v28 = 2114;
      v29 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

    }
    _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v9), "UTF8String"));
    __break(0);
    JUMPOUT(0x10001E94CLL);
  }
  objc_msgSend(v17, "getHitTestContextsAtPoint:withAdditionalContexts:onDisplay:withCompletion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));

}

void sub_10001E954(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;

  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a4, "remoteProcess"));
  v8 = objc_msgSend(v7, "pid");

  v9 = *(id *)(a1 + 32);
  v10 = objc_msgSend(v9, "length");
  v11 = (void *)BKSDisplayUUIDMainKey;
  if (v10)
    v11 = v9;
  v12 = v11;

  objc_msgSend(v6, "setGlobalPointerEventRoutes:forPID:displayUUID:", *(_QWORD *)(a1 + 40), v8, v12);
}

void sub_10001E9F4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v5 = *(id *)(a1 + 32);
  v6 = a3;
  v7 = objc_msgSend(v5, "length");
  v8 = (void *)BKSDisplayUUIDMainKey;
  if (v7)
    v8 = v5;
  v13 = v8;

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "infoForDisplayUUID:createIfNeeded:", v13, 0));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "buttonDownRepositionUniqueIdentifierToAssertionMap"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", *(_QWORD *)(a1 + 40)));
  v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "invalidate");
    objc_msgSend(v10, "removeObjectForKey:", *(_QWORD *)(a1 + 40));
    if (!objc_msgSend(v10, "count"))
      objc_msgSend(v9, "setButtonDownRepositionUniqueIdentifierToAssertionMap:", 0);
  }

}

void sub_10001EADC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;

  v19 = a2;
  v7 = a3;
  v8 = a4;
  v9 = *(void **)(a1 + 32);
  if (v9)
    v10 = (uint64_t)objc_msgSend(v9, "integerValue");
  else
    v10 = 0xFFFFFFFFLL;
  v11 = *(id *)(a1 + 40);
  v12 = objc_msgSend(v11, "length");
  v13 = (void *)BKSDisplayUUIDMainKey;
  if (v12)
    v13 = v11;
  v14 = v13;

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "infoForDisplayUUID:createIfNeeded:", v14, 1));
  v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "buttonDownRepositionUniqueIdentifierToAssertionMap"));
  if (!v16)
  {
    v16 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 1);
    objc_msgSend(v15, "setButtonDownRepositionUniqueIdentifierToAssertionMap:", v16);
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKey:", *(_QWORD *)(a1 + 48)));

  if (!v17)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 8), "acquireButtonDownPointerRepositionAssertionForReason:contextRelativePointerPosition:onDisplay:restrictingToPID:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v14, v10));
    if (v18)
      objc_msgSend(v16, "setObject:forKey:", v18, *(_QWORD *)(a1 + 48));

  }
}

void sub_10001EC38(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _DWORD v13[2];

  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a4, "remoteProcess"));
  v8 = objc_msgSend(v7, "pid");

  if ((int)v8 <= 0)
  {
    v11 = BKLogMousePointer(v9, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13[0] = 67109120;
      v13[1] = (_DWORD)v8;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "setSuppressAllEvents: bad pid:%d", (uint8_t *)v13, 8u);
    }

  }
  else
  {
    objc_msgSend(v6, "setEventsDisabled:pid:", objc_msgSend(*(id *)(a1 + 32), "BOOLValue"), v8);
  }

}

void sub_10001ED34(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  id v12;

  v12 = a2;
  v5 = a3;
  v6 = *(void **)(a1 + 32);
  if (v6)
    v7 = (uint64_t)objc_msgSend(v6, "integerValue");
  else
    v7 = 0xFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 64), "doubleValue");
  objc_msgSend(v12, "setContextRelativePointerPosition:withInitialVelocity:onDisplay:withDecelerationRate:restrictingToPID:auditPID:", v8, v9, v10, v7, objc_msgSend(v5, "pid"), v11);

}

void sub_10001EDDC(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = (void *)a1[4];
  if (v6)
    v7 = (uint64_t)objc_msgSend(v6, "integerValue");
  else
    v7 = 0xFFFFFFFFLL;
  objc_msgSend(v8, "setContextRelativePointerPosition:onDisplay:withAnimationParameters:restrictingToPID:auditPID:", a1[5], a1[6], a1[7], v7, objc_msgSend(v5, "pid"));

}

void sub_10001EE70(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  id v16;
  id v17;

  v6 = *(id *)(a1 + 32);
  v7 = a3;
  v8 = a2;
  v9 = objc_msgSend(v6, "length");
  v10 = (void *)BKSDisplayUUIDMainKey;
  if (v9)
    v10 = v6;
  v17 = v10;

  objc_msgSend(*(id *)(a1 + 40), "bs_CGPointValue");
  v12 = v11;
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 48);
  v16 = objc_msgSend(v7, "pid");

  objc_msgSend(v8, "setPointerPosition:onDisplay:withAnimationParameters:auditPID:", v17, v15, v16, v12, v14);
}

void sub_10001EF38(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;

  v6 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a4, "remoteProcess"));
  objc_msgSend(v6, "setGlobalPointerPosition:process:", v7, *(double *)(a1 + 32), *(double *)(a1 + 40));

}

id sub_10001EF98(uint64_t a1)
{
  id result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "normalizedGlobalPointerPosition");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = v5;
  return result;
}

id sub_10001EFCC(uint64_t a1)
{
  id result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "globalPointerPosition");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = v5;
  return result;
}

void sub_10001F000(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_pointerDevicesFromIOHIDServices:", *(_QWORD *)(a1 + 40)));
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v3 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v10;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v10 != v6)
            objc_enumerationMutation(v3);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7), "remoteTarget", (_QWORD)v9));
          objc_msgSend(v8, "pointingDevicesDidChange:", v2);

          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v5);
    }

  }
}

void sub_10001F130(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(v4, "setDomain:", CFSTR("BKSHIDServices"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKSMousePointerServiceSessionSpecification identifier](BKSMousePointerServiceSessionSpecification, "identifier"));
  objc_msgSend(v4, "setService:", v3);

  objc_msgSend(v4, "setDelegate:", *(_QWORD *)(a1 + 32));
}

id sub_10001F95C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[2];
  _QWORD v8[2];
  const __CFString *v9;
  void *v10;

  v9 = CFSTR("keyboardHIDEvent");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("0x%02x"), *(unsigned __int16 *)(a1 + 32), CFSTR("usage")));
  v7[1] = CFSTR("down");
  v8[0] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 34)));
  v8[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 2));
  v10 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));

  return v5;
}

id sub_10001FA64(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v5;
  void *v6;
  const __CFString *v7;
  void *v8;

  v7 = CFSTR("volumeDownButtonEvent");
  v5 = CFSTR("down");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 32)));
  v6 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  v8 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));

  return v3;
}

id sub_10001FB3C(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v5;
  void *v6;
  const __CFString *v7;
  void *v8;

  v7 = CFSTR("volumeUpButtonEvent");
  v5 = CFSTR("down");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 32)));
  v6 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  v8 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));

  return v3;
}

id sub_10001FC14(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v5;
  void *v6;
  const __CFString *v7;
  void *v8;

  v7 = CFSTR("PowerButtonEvent");
  v5 = CFSTR("down");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 32)));
  v6 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  v8 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));

  return v3;
}

id sub_10001FCEC(uint64_t a1)
{
  float v2;
  _BOOL8 v3;
  void *v4;
  int v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[3];
  _QWORD v19[3];
  const __CFString *v20;
  void *v21;

  os_unfair_lock_lock(&stru_1001172E0);
  v2 = *(float *)&dword_1001172E4;
  os_unfair_lock_unlock(&stru_1001172E0);
  v3 = v2 == 0.0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  objc_msgSend(v4, "brightnessLevel");
  v6 = v5;

  v20 = CFSTR("cameraShutterButtonEvent");
  v18[0] = CFSTR("event");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("0x%02x"), *(unsigned __int16 *)(a1 + 32), CFSTR("usage")));
  v16[1] = CFSTR("down");
  v17[0] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 34)));
  v17[1] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 2));
  v19[0] = v9;
  v18[1] = CFSTR("displayBrightness");
  LODWORD(v10) = v6;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10));
  v19[1] = v11;
  v18[2] = CFSTR("backlight");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v3));
  v19[2] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v18, 3));
  v21 = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));

  return v14;
}

id sub_10001FED4(uint64_t a1)
{
  unsigned __int16 IntegerValue;
  unsigned __int16 v3;
  _BOOL8 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSNumber *v9;
  void *v10;
  NSNumber *v11;
  void *v12;
  uint64_t Phase;
  void *v14;
  void *v15;
  const __CFString *v17;
  void *v18;

  IntegerValue = IOHIDEventGetIntegerValue(*(_QWORD *)(a1 + 32), 196608);
  v3 = IOHIDEventGetIntegerValue(*(_QWORD *)(a1 + 32), 196609);
  v4 = IOHIDEventGetIntegerValue(*(_QWORD *)(a1 + 32), 196610) != 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("0x%02x"), IntegerValue));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("usagePage"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("0x%02x"), v3));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, CFSTR("usage"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v4));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, CFSTR("down"));

  v9 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", IOHIDEventGetIntegerValue(*(_QWORD *)(a1 + 32), 196612));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, CFSTR("count"));

  v11 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", IOHIDEventGetIntegerValue(*(_QWORD *)(a1 + 32), 196613));
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v12, CFSTR("longPress"));

  Phase = IOHIDEventGetPhase(*(_QWORD *)(a1 + 32));
  if ((_DWORD)Phase)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", Phase));
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v14, CFSTR("phase"));

  }
  v17 = CFSTR("buttonEvent");
  v18 = v5;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));

  return v15;
}

id sub_100020118(uint64_t a1)
{
  double FloatValue;
  double v3;
  double v4;
  uint64_t IntegerValue;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v13[4];
  _QWORD v14[4];
  const __CFString *v15;
  void *v16;

  FloatValue = IOHIDEventGetFloatValue(*(_QWORD *)(a1 + 32), 1310720);
  v3 = IOHIDEventGetFloatValue(*(_QWORD *)(a1 + 32), 1310721);
  v4 = IOHIDEventGetFloatValue(*(_QWORD *)(a1 + 32), 1310720);
  IntegerValue = IOHIDEventGetIntegerValue(*(_QWORD *)(a1 + 32), 1310723);
  v15 = CFSTR("gyro");
  v13[0] = CFSTR("x");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", FloatValue));
  v14[0] = v6;
  v13[1] = CFSTR("y");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v3));
  v14[1] = v7;
  v13[2] = CFSTR("z");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4));
  v14[2] = v8;
  v13[3] = CFSTR("type");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", IntegerValue));
  v14[3] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 4));
  v16 = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));

  return v11;
}

id sub_1000202CC(uint64_t a1)
{
  double FloatValue;
  void *v2;
  void *v3;
  void *v4;
  const __CFString *v6;
  void *v7;
  const __CFString *v8;
  void *v9;

  FloatValue = IOHIDEventGetFloatValue(*(_QWORD *)(a1 + 32), 786432);
  v8 = CFSTR("ambientLightSensor");
  v6 = CFSTR("level");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", FloatValue));
  v7 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
  v9 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));

  return v4;
}

id sub_1000203A8(id a1)
{
  return CFSTR("Volume down pressed; possible user problem");
}

void sub_1000203B4(id a1, SLGActivatableLogging *a2)
{
  notify_post("SBStudyLogEndCameraButtonLogging");
}

void sub_1000203C0(id a1, SLGActivatableLogging *a2)
{
  notify_post("SBStudyLogBeginCameraButtonLogging");
}

void sub_10002050C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v5 = a3;
  v6 = objc_msgSend(a2, "unsignedLongLongValue");
  v7 = *(void **)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("0x%llX"), v6));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000205E4;
  v10[3] = &unk_1000ECD80;
  v11 = v5;
  v12 = *(id *)(a1 + 32);
  v9 = v5;
  objc_msgSend(v7, "appendBodySectionWithName:multilinePrefix:block:", v8, 0, v10);

}

void sub_1000205E4(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10002064C;
  v2[3] = &unk_1000E9C40;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v2);

}

void sub_10002064C(uint64_t a1, void *a2, void *a3)
{
  unsigned int v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v9 = a3;
  v5 = objc_msgSend(a2, "unsignedIntValue");
  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("page:0x%X usage:0x%X"), HIWORD(v5), (unsigned __int16)v5));
  v8 = objc_msgSend(v6, "appendObject:withName:", v9, v7);

}

void sub_1000206D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;

  v9 = a2;
  v7 = a3;
  v8 = a4;
  if (v9)
  {
    objc_msgSend(v9, "removeObjectForKey:", v8);
    if (!objc_msgSend(v9, "count"))
      objc_msgSend(*(id *)(a1 + 8), "removeObjectForKey:", v7);
  }

}

void sub_100021274(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  unsigned int v12;
  _QWORD v13[4];
  id v14;
  unsigned int v15;
  id location;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remoteProcess"));
  v5 = objc_msgSend(v4, "pid");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[BSObjCProtocol protocolForProtocol:](BSObjCProtocol, "protocolForProtocol:", &OBJC_PROTOCOL___BKSSystemShellClientInterface));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[BSObjCProtocol protocolForProtocol:](BSObjCProtocol, "protocolForProtocol:", &OBJC_PROTOCOL___BKSSystemShellServerInterface));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[BSMutableServiceInterface interfaceWithIdentifier:](BSMutableServiceInterface, "interfaceWithIdentifier:", BKSSystemShellShellServiceName));
  objc_msgSend(v8, "setServer:", v7);
  objc_msgSend(v8, "setClient:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[BSServiceQuality userInitiated](BSServiceQuality, "userInitiated"));
  objc_msgSend(v3, "setServiceQuality:", v9);

  objc_msgSend(v3, "setInterface:", v8);
  objc_msgSend(v3, "setInterfaceTarget:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
  objc_msgSend(v3, "setTargetQueue:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));
  objc_initWeak(&location, *(id *)(a1 + 40));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100021484;
  v13[3] = &unk_1000E9D00;
  objc_copyWeak(&v14, &location);
  v15 = v5;
  objc_msgSend(v3, "setInterruptionHandler:", v13);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100021554;
  v10[3] = &unk_1000E9D00;
  objc_copyWeak(&v11, &location);
  v12 = v5;
  objc_msgSend(v3, "setInvalidationHandler:", v10);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);

}

void sub_100021458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100021484(uint64_t a1)
{
  id *WeakRetained;
  uint64_t v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = BKLogSystemShell();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_DWORD *)(a1 + 40);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[Shell] interrupted connection pid:%d", (uint8_t *)v6, 8u);
    }

    objc_msgSend(WeakRetained[3], "systemShellDidTerminate:", *(unsigned int *)(a1 + 40));
  }

}

void sub_100021554(uint64_t a1)
{
  id *WeakRetained;
  uint64_t v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = BKLogSystemShell();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_DWORD *)(a1 + 40);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[Shell] invalidated connection pid:%d", (uint8_t *)v6, 8u);
    }

    objc_msgSend(WeakRetained[3], "systemShellDidTerminate:", *(unsigned int *)(a1 + 40));
  }

}

void sub_100021624(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  unsigned int v13;
  _QWORD v14[4];
  unsigned int v15;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remoteProcess"));
  v6 = objc_msgSend(v5, "pid");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[BSObjCProtocol protocolForProtocol:](BSObjCProtocol, "protocolForProtocol:", &OBJC_PROTOCOL___BKSSystemShellDataMigrationCheckInClientInterface));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[BSObjCProtocol protocolForProtocol:](BSObjCProtocol, "protocolForProtocol:", &OBJC_PROTOCOL___BKSSystemShellDataMigrationCheckInServerInterface));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[BSMutableServiceInterface interfaceWithIdentifier:](BSMutableServiceInterface, "interfaceWithIdentifier:", BKSSystemShellDataMigrationCheckInServiceName));
  objc_msgSend(v9, "setServer:", v8);
  objc_msgSend(v9, "setClient:", v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[BSServiceQuality userInitiated](BSServiceQuality, "userInitiated"));
  objc_msgSend(v4, "setServiceQuality:", v10);

  objc_msgSend(v4, "setInterface:", v9);
  objc_msgSend(v4, "setInterfaceTarget:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[BKSystemShellSentinel dataMigrationQueue](BKSystemShellSentinel, "dataMigrationQueue"));
  objc_msgSend(v4, "setTargetQueue:", v11);

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1000217CC;
  v14[3] = &unk_1000E9CB0;
  v15 = v6;
  objc_msgSend(v4, "setInterruptionHandler:", v14);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100021870;
  v12[3] = &unk_1000E9CB0;
  v13 = v6;
  objc_msgSend(v4, "setInvalidationHandler:", v12);

}

void sub_1000217CC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  _DWORD v5[2];

  v2 = BKLogSystemShell();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 32);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[DataMigrationCheckIn] connection terminated pid:%d", (uint8_t *)v5, 8u);
  }

}

void sub_100021870(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  _DWORD v5[2];

  v2 = BKLogSystemShell();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 32);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[DataMigrationCheckIn] connection invalidated pid:%d", (uint8_t *)v5, 8u);
  }

}

void sub_100021914(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "setBundleIdentifier:", v3);
  objc_msgSend(v4, "setBundlePath:", *(_QWORD *)(a1 + 40));
  objc_msgSend(v4, "setJobLabel:", *(_QWORD *)(a1 + 48));
  objc_msgSend(v4, "setSystemIdleSleepInterval:", *(double *)(a1 + 64));
  objc_msgSend(v4, "setWatchdogType:", *(_QWORD *)(a1 + 72));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "remoteProcess"));
  objc_msgSend(v4, "setPid:", objc_msgSend(v5, "pid"));

}

void sub_1000219AC(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = BKSSystemShellServiceDomainName;
  v4 = a2;
  objc_msgSend(v4, "setDomain:", v3);
  objc_msgSend(v4, "setService:", BKSSystemShellShellServiceName);
  objc_msgSend(v4, "setDelegate:", *(_QWORD *)(a1 + 32));

}

void sub_100021A10(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = BKSSystemShellServiceDomainName;
  v4 = a2;
  objc_msgSend(v4, "setDomain:", v3);
  objc_msgSend(v4, "setService:", BKSSystemShellDataMigrationCheckInServiceName);
  objc_msgSend(v4, "setDelegate:", *(_QWORD *)(a1 + 32));

}

uint64_t _linkguard_warnlisted_image_handler(const char *a1, const char *a2)
{
  char *v4;
  uint64_t result;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  const char *v9;
  char __str[16];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = getenv("BACKBOARDD_ALLOW_RISKY_UIKIT_LINKING");
  if (!v4 || (result = atoi(v4), (int)result < 1))
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    *(_OWORD *)__str = 0u;
    v11 = 0u;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v7 = a1;
      v8 = 2082;
      v9 = a2;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "you may not link <%{public}s> into backboardd (source:%{public}s)", buf, 0x16u);
    }
    snprintf(__str, 0x100uLL, "you may not link <%s> into backboardd (source:%s)", a1, a2);
    abort_with_reason(23, 2857740885, __str, 2);
  }
  return result;
}

void sub_100021B98(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  void (**v8)(_QWORD);
  double v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  id v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;

  v7 = a2;
  v8 = a4;
  if (a1)
  {
    v9 = ((double (*)(void))BSContinuousMachTimeNow)();
    v10 = BKLogCommon();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 138543362;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "start %{public}@...", (uint8_t *)&v17, 0xCu);
    }

    if (a3)
    {
      kdebug_trace(a3 | 1u, 0, 0, 0, 0);
      v8[2](v8);
      v12 = kdebug_trace(a3 | 2u, 0, 0, 0, 0);
    }
    else
    {
      v12 = ((uint64_t (*)(_QWORD))v8[2])(v8);
    }
    v13 = BSContinuousMachTimeNow(v12);
    v14 = *(double *)(a1 + 8);
    v15 = BKLogCommon();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 138543874;
      v18 = v7;
      v19 = 2048;
      v20 = v13 - v9;
      v21 = 2048;
      v22 = v13 - v14;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "      %{public}@ ready in %gs. overall %gs", (uint8_t *)&v17, 0x20u);
    }

  }
}

void sub_100021D4C(uint64_t a1)
{
  dispatch_queue_global_t global_queue;
  NSObject *v3;
  _QWORD block[4];
  id v5;

  global_queue = dispatch_get_global_queue(33, 0);
  v3 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100021DD4;
  block[3] = &unk_1000ECDA8;
  v5 = *(id *)(a1 + 32);
  dispatch_async(v3, block);

}

void sub_100021DD4(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  void *v13;

  v2 = objc_msgSend(objc_alloc((Class)RBSTerminateRequest), "initForAllManagedWithReason:", *(_QWORD *)(a1 + 32));
  v9 = 0;
  v3 = objc_msgSend(v2, "execute:", &v9);
  v4 = v9;
  v5 = v4;
  if ((v3 & 1) == 0)
  {
    v6 = BKLogCommon(v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v11 = v8;
      v12 = 2114;
      v13 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to clear the board for %{public}@ : %{public}@", buf, 0x16u);
    }

  }
}

id sub_100021ED0(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isRequired");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100021F00(uint64_t a1)
{
  dispatch_block_t v2;
  void *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v2 = dispatch_block_create((dispatch_block_flags_t)0, &stru_1000E9D20);
  v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100021FA8;
  v5[3] = &unk_1000E9D88;
  v6 = v3;
  v7 = v2;
  v4 = v2;
  objc_msgSend(v6, "launchPreboardWithCompletion:", v5);
  dispatch_block_wait(v4, 0xFFFFFFFFFFFFFFFFLL);

}

void sub_100021FA8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  void *v8;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = BKLogCommon(v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 138543362;
      v8 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "LA PreBoard launch failed: %{public}@", (uint8_t *)&v7, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "terminateWithCompletion:", &stru_1000E9D60);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100022080(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = BKLogCommon();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = 138543362;
    v6 = v2;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "LA PreBoard termination failed: %{public}@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_100022130(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint8_t buf[8];
  uint64_t v12;
  id (*v13)(uint64_t);
  void *v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;

  v2 = *(id *)(a1 + 32);
  if (objc_opt_class(LAPreboard, v3))
  {
    v17 = 0;
    v18 = &v17;
    v19 = 0x2020000000;
    v20 = 0;
    *(_QWORD *)buf = _NSConcreteStackBlock;
    v12 = 3221225472;
    v13 = sub_100021ED0;
    v14 = &unk_1000ECDD0;
    v16 = &v17;
    v4 = (id)objc_claimAutoreleasedReturnValue(+[LAPreboard sharedInstance](LAPreboard, "sharedInstance"));
    v15 = v4;
    if (v2)
      sub_100021B98((uint64_t)v2, CFSTR("Check for Local Authentication"), 0, buf);
    if (*((_BYTE *)v18 + 24))
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_100021F00;
      v9[3] = &unk_1000ECDA8;
      v5 = v4;
      v10 = v5;
      if (v2)
      {
        sub_100021B98((uint64_t)v2, CFSTR("LA PreBoard launch"), 0, v9);
        v5 = v10;
      }

    }
    _Block_object_dispose(&v17, 8);
  }
  else
  {
    v6 = BKLogCommon(0);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LA PreBoard not available", buf, 2u);
    }

  }
  sub_100021B98(*(_QWORD *)(a1 + 32), CFSTR("Data Migration"), 730464504, &stru_1000E9DA8);
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    sub_100021B98(v8, CFSTR("Bootstrap system shells"), 0, &stru_1000E9DC8);
}

void sub_100022308(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100022320(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[BKSystemShellSentinel sharedInstance](BKSystemShellSentinel, "sharedInstance"));
  objc_msgSend(v1, "dataMigratorDidComplete");

}

void sub_100022354(id a1)
{
  BKMigrator *v1;

  v1 = objc_alloc_init(BKMigrator);
  -[BKMigrator migrateIfNecessary](v1, "migrateIfNecessary");

}

uint64_t start(uint64_t a1, CFIndex *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  _opaque_pthread_t *v7;
  uint64_t qos_class_np;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  BKIgnition *v16;
  id v17;
  CFRunLoopObserverContext *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  BKIgnition *v22;
  void *v23;
  unsigned __int8 v24;
  void *v25;
  void *v26;
  CFStringRef (__cdecl *v27)(const void *);
  CFStringRef (__cdecl *copyDescription)(const void *);
  BKIgnition *v29;
  id v30;
  void *v31;
  BKIgnition *v32;
  NSObject *v33;
  double *v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  _BOOL8 v38;
  double v39;
  uint64_t v40;
  __CFRunLoop *Current;
  CFMutableArrayRef Mutable;
  __CFRunLoopObserver *v43;
  __CFRunLoopObserver *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  CFIndex v49;
  int v50;
  int v51;
  int v52;
  __CFString *v53;
  _QWORD v55[5];
  _QWORD v56[5];
  _QWORD v57[5];
  _QWORD v58[4];
  BKIgnition *v59;
  CFRunLoopObserverContext *v60;
  int __relative_priority[2];
  CFRunLoopObserverContext v62;
  id v63;
  _BYTE buf[24];
  void *v65;
  BKIgnition *v66;

  kdebug_trace(730464457, 0, 0, 0, 0);
  v2 = _set_user_dir_suffix("com.apple.backboardd");
  v3 = pthread_set_fixedpriority_self(v2);
  v4 = v3;
  if ((_DWORD)v3)
  {
    v5 = BKLogCommon(v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v51 = *__error();
      LODWORD(v62.version) = 67109120;
      HIDWORD(v62.version) = v51;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "pthread_set_fixedpriority_self failed: %{darwin.errno}d", (uint8_t *)&v62, 8u);
    }

  }
  *(_QWORD *)__relative_priority = 0;
  v7 = pthread_self();
  qos_class_np = pthread_get_qos_class_np(v7, (qos_class_t *)&__relative_priority[1], __relative_priority);
  if ((_DWORD)qos_class_np
    || (qos_class_np = pthread_set_qos_class_self_np(QOS_CLASS_USER_INTERACTIVE, 0), (_DWORD)qos_class_np))
  {
    v9 = BKLogCommon(qos_class_np);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v50 = *__error();
      LODWORD(v62.version) = 67109120;
      HIDWORD(v62.version) = v50;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "pthread_set_qos failed: %{darwin.errno}d", (uint8_t *)&v62, 8u);
    }

    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  v12 = setiopolicy_np(9, 0, 1);
  if ((v12 & 0x80000000) != 0)
  {
    v13 = BKLogCommon(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v52 = *__error();
      LODWORD(v62.version) = 67109120;
      HIDWORD(v62.version) = v52;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "setiopolicy_np failed: %{darwin.errno}d", (uint8_t *)&v62, 8u);
    }

  }
  v15 = objc_autoreleasePoolPush();
  v16 = [BKIgnition alloc];
  v17 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *a2));
  if (v16)
  {
    v62.version = (CFIndex)v16;
    v62.info = BKIgnition;
    v18 = -[CFRunLoopObserverContext init]((objc_super *)&v62, "init");
    v16 = (BKIgnition *)v18;
    if (v18)
    {
      v19 = BKLogCommon(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "starting %{public}@...", buf, 0xCu);
      }

      v16->_startTime = BSContinuousMachTimeNow(v21);
    }
  }

  sub_100021B98((uint64_t)v16, CFSTR("prewarm oscard where available"), 730464460, &stru_1000E9DE8);
  sub_100021B98((uint64_t)v16, CFSTR("CoreAccessories"), 730464464, &stru_1000E9E48);
  v22 = v16;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[BKFirstBootDetector sharedInstance](BKFirstBootDetector, "sharedInstance"));
  v24 = objc_msgSend(v23, "isFirstBoot");

  if ((v24 & 1) == 0)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s respawn"), *a2));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("clearing the board for %@"), v25));
    v62.version = (CFIndex)_NSConcreteStackBlock;
    v62.info = (void *)3221225472;
    v62.retain = (const void *(__cdecl *)(const void *))sub_100021D4C;
    v62.release = (void (__cdecl *)(const void *))&unk_1000ECDA8;
    v27 = v25;
    v62.copyDescription = v27;
    copyDescription = v27;
    if (v22)
    {
      sub_100021B98((uint64_t)v22, v26, 0, &v62);
      copyDescription = v62.copyDescription;
    }

  }
  v62.version = 0;
  v62.info = &v62;
  v62.retain = (const void *(__cdecl *)(const void *))0x3032000000;
  v62.release = (void (__cdecl *)(const void *))sub_100022D48;
  v62.copyDescription = (CFStringRef (__cdecl *)(const void *))sub_100022D58;
  v63 = 0;
  v58[0] = _NSConcreteStackBlock;
  v58[1] = 3221225472;
  v58[2] = sub_100022D60;
  v58[3] = &unk_1000ECDD0;
  v29 = v22;
  v59 = v29;
  v60 = &v62;
  sub_100021B98((uint64_t)v29, CFSTR("HID system"), 730464468, v58);
  if (v29)
    sub_100021B98((uint64_t)v29, CFSTR("AttentionAwareness"), 0, &stru_1000E9E68);
  sub_100021B98((uint64_t)v29, CFSTR("GS"), 730464472, &stru_1000E9E88);
  v30 = +[BKSecurityManager sharedInstance](BKSecurityManager, "sharedInstance");
  sub_100021B98((uint64_t)v29, CFSTR("window server"), 730464476, &stru_1000E9EA8);
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_100022E18;
  v57[3] = &unk_1000EBC00;
  v57[4] = &v62;
  sub_100021B98((uint64_t)v29, CFSTR("HID connection manager"), 730464480, v57);
  sub_100021B98((uint64_t)v29, CFSTR("backlight"), 730464484, &stru_1000E9EC8);
  v56[0] = _NSConcreteStackBlock;
  v56[1] = 3221225472;
  v56[2] = sub_100022E28;
  v56[3] = &unk_1000EBC00;
  v56[4] = &v62;
  sub_100021B98((uint64_t)v29, CFSTR("HID event processing"), 730464492, v56);
  sub_100021B98((uint64_t)v29, CFSTR("ButtonHaptics"), 730464488, &stru_1000E9EE8);
  sub_100021B98((uint64_t)v29, CFSTR("ALS sync"), 730464496, &stru_1000E9F08);
  sub_100021B98((uint64_t)v29, CFSTR("display MiG server"), 730464500, &stru_1000E9F28);
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472;
  v55[2] = sub_100022E38;
  v55[3] = &unk_1000EBC00;
  v55[4] = &v62;
  if (v29)
  {
    sub_100021B98((uint64_t)v29, CFSTR("HID server"), 0, v55);
    sub_100021B98((uint64_t)v29, CFSTR("OS watchdog"), 0, &stru_1000E9F48);
  }
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[BKUserEventTimer sharedInstance](BKUserEventTimer, "sharedInstance"));
  _BKHIDSetUserEventNotifier();

  if (v29)
    sub_100021B98((uint64_t)v29, CFSTR("system shell servers"), 0, &stru_1000E9F68);
  v32 = v29;
  v33 = objc_claimAutoreleasedReturnValue(+[BKSystemShellSentinel dataMigrationQueue](BKSystemShellSentinel, "dataMigrationQueue"));
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = sub_100022130;
  v65 = &unk_1000ECDA8;
  v66 = v32;
  v34 = v32;
  dispatch_async(v33, buf);

  v35 = (void *)objc_claimAutoreleasedReturnValue(+[BKSystemShellSentinel sharedInstance](BKSystemShellSentinel, "sharedInstance"));
  objc_msgSend(v35, "startServerWithDataMigration");

  sub_100021B98((uint64_t)v34, CFSTR("Accessibility"), 730464508, &stru_1000E9F88);
  if (v29)
  {
    sub_100021B98((uint64_t)v34, CFSTR("misc services"), 0, &stru_1000E9FA8);
    v36 = BKLogCommon(CFSTR("startup complete"));
    v37 = objc_claimAutoreleasedReturnValue(v36);
    v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    if (v38)
    {
      v39 = BSContinuousMachTimeNow(v38) - v34[1];
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = CFSTR("startup complete");
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v39;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%{public}@. %gs elapsed", buf, 0x16u);
    }

  }
  else
  {
    v53 = CFSTR("startup complete");
  }

  _Block_object_dispose(&v62, 8);
  objc_autoreleasePoolPop(v15);
  if (v11)
    v40 = pthread_set_qos_class_self_np((qos_class_t)__relative_priority[1], __relative_priority[0]);
  if (!v4)
    pthread_set_timeshare_self(v40);
  kdebug_trace(730464458, 0, 0, 0, 0);
  CFRunLoopGetCurrent();
  if (!_CFRunLoopSetPerCalloutAutoreleasepoolEnabled(1))
  {
    Current = CFRunLoopGetCurrent();
    Mutable = CFArrayCreateMutable(0, 0, 0);
    v62.version = 0;
    v62.info = Mutable;
    v62.retain = (const void *(__cdecl *)(const void *))&_CFRetain;
    v62.release = (void (__cdecl *)(const void *))&_CFRelease;
    v62.copyDescription = (CFStringRef (__cdecl *)(const void *))&CFCopyDescription;
    v43 = CFRunLoopObserverCreate(0, 1uLL, 1u, -2147483647, (CFRunLoopObserverCallBack)sub_10007A430, &v62);
    v44 = CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 0x7FFFFFFFLL, (CFRunLoopObserverCallBack)sub_10007A430, &v62);
    CFRunLoopAddObserver(Current, v43, kCFRunLoopCommonModes);
    CFRunLoopAddObserver(Current, v44, kCFRunLoopCommonModes);
    CFRelease(Mutable);
    if (!CFRunLoopContainsObserver(Current, v43, kCFRunLoopDefaultMode))
    {
      CFRunLoopAddObserver(Current, v43, kCFRunLoopDefaultMode);
      CFRunLoopAddObserver(Current, v44, kCFRunLoopDefaultMode);
    }
    if (v43)
      CFRelease(v43);
    if (v44)
      CFRelease(v44);
  }
  do
    v45 = CFRunLoopRunInMode(kCFRunLoopDefaultMode, 1.79769313e308, 0);
  while ((v45 - 3) < 0xFFFFFFFE);
  v46 = BKLogCommon(v45);
  v47 = objc_claimAutoreleasedReturnValue(v46);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
  {
    v49 = *a2;
    LODWORD(v62.version) = 136446210;
    *(CFIndex *)((char *)&v62.version + 4) = v49;
    _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%{public}s exiting...\n", (uint8_t *)&v62, 0xCu);
  }

  return 0;
}

void sub_100022D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100022D48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100022D58(uint64_t a1)
{

}

void sub_100022D60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  _QWORD v6[5];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000234D4;
  v6[3] = &unk_1000EBC00;
  v2 = *(_QWORD *)(a1 + 32);
  v6[4] = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    sub_100021B98(v2, CFSTR("HID system open"), 0, v6);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100023510;
    v5[3] = &unk_1000EBC00;
    v5[4] = v4;
    if (v3)
      sub_100021B98(v3, CFSTR("HID system start"), 0, v5);
  }
}

id sub_100022E18(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "startEventRouting");
}

id sub_100022E28(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "startEventProcessing");
}

id sub_100022E38(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "startServer");
}

void sub_100022E48(id a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[BKSecureDrawingMonitor sharedInstance](BKSecureDrawingMonitor, "sharedInstance"));
  objc_msgSend(v1, "startMonitoringSecureDrawing");

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKTouchDeliveryPolicyServer sharedServer](BKTouchDeliveryPolicyServer, "sharedServer"));
  objc_msgSend(v2, "run");

  v3 = +[BKTouchDeliveryObservationManager sharedInstance](BKTouchDeliveryObservationManager, "sharedInstance");
}

void sub_100022EAC(id a1)
{
  if (qword_1001174F0 != -1)
    dispatch_once(&qword_1001174F0, &stru_1000EBD30);
}

void sub_100022ED4(id a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[BKSystemShellSentinel sharedInstance](BKSystemShellSentinel, "sharedInstance"));
  objc_msgSend(v1, "startServerWithoutDataMigration");

  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKAlternateSystemAppServer sharedInstance](BKAlternateSystemAppServer, "sharedInstance"));
  objc_msgSend(v2, "run");

}

void sub_100022F2C(id a1)
{
  BKWatchdogService *v1;
  BKWatchdogService *v2;
  uint64_t v3;
  unsigned int v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  void *v12;
  void *v13;
  BKWatchdogService *v14;
  _QWORD handler[4];
  unsigned int v16;

  wd_endpoint_set_platform_controller(a1);
  v1 = objc_alloc_init(BKWatchdogService);
  wd_endpoint_register("com.apple.backboard.oswatchdog");
  -[BKWatchdogService registerClientsForMonitoring](v1, "registerClientsForMonitoring");
  v10 = _NSConcreteStackBlock;
  v11 = 3221225472;
  v12 = sub_100018B18;
  v13 = &unk_1000EA760;
  v14 = v1;
  v2 = v1;
  v3 = wd_endpoint_set_alive_func(&v10);
  wd_endpoint_activate(v3);

  v4 = GSRegisterPurpleNamedPort("com.apple.backboard.watchdog");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[BSDispatchQueueAttributes serial](BSDispatchQueueAttributes, "serial", v10, v11, v12, v13));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "serviceClass:", 25));
  v7 = BSDispatchQueueCreate(CFSTR("com.apple.backboard.watchdog"), v6);

  v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_mach_recv, v4, 0, v7);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100086B78;
  handler[3] = &unk_1000EC750;
  v16 = v4;
  dispatch_source_set_cancel_handler(v8, handler);
  v10 = _NSConcreteStackBlock;
  v11 = 3221225472;
  v12 = sub_100086B98;
  v13 = &unk_1000ECDA8;
  v14 = (BKWatchdogService *)v8;
  v9 = v8;
  dispatch_source_set_event_handler(v9, &v10);
  dispatch_resume(v9);

}

void sub_1000230B8(id a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = sub_10003D218("BKDisplayServices MiG Server", (uint64_t)"com.apple.backboard.display.services", (uint64_t)&off_1000EDF60);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_100117270;
  qword_100117270 = v2;

}

void sub_1000230F4(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessUpdateTransactionManager sharedInstance](BKDisplayBrightnessUpdateTransactionManager, "sharedInstance"));
  objc_msgSend(v1, "synchronizeALSPreferencesAndSystemDisplayBrightness");

}

void sub_100023128(id a1)
{
  id v1;

  v1 = +[BKButtonHapticsController sharedInstance](BKButtonHapticsController, "sharedInstance");
}

void sub_10002314C(id a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  _QWORD v23[11];
  _QWORD v24[11];
  uint8_t buf[4];
  id v26;
  __int16 v27;
  uint64_t v28;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  v2 = (void *)qword_1001172D8;
  qword_1001172D8 = (uint64_t)v1;
  v3 = v1;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "propertyForKey:", CFSTR("DisplayBrightnessFactor")));
  v6 = objc_opt_class(NSNumber, v5);

  v7 = v4;
  v8 = v7;
  if (v6)
  {
    if ((objc_opt_isKindOfClass(v7, v6) & 1) != 0)
      v9 = v8;
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  v10 = v9;

  if (v10)
  {
    os_unfair_lock_lock(&stru_1001172E0);
    objc_msgSend(v10, "floatValue");
    dword_1001172E4 = v11;
    os_unfair_lock_unlock(&stru_1001172E0);
  }

  v23[0] = BKDefaultKeyALSEnabled;
  v23[1] = CFSTR("BKALSWeightMax");
  v24[0] = CFSTR("DisplayBrightnessAuto");
  v24[1] = CFSTR("DisplayBrightnessAutoWeightMax");
  v23[2] = CFSTR("BKALSWeightMin");
  v23[3] = CFSTR("BKALSIntPeriod");
  v24[2] = CFSTR("DisplayBrightnessAutoWeightMin");
  v24[3] = CFSTR("ALSIntPeriod");
  v23[4] = CFSTR("BKALSIntPeriodOrientationEnabled");
  v23[5] = CFSTR("BKALSIntPeriodOrientationLandscape");
  v24[4] = CFSTR("ALSIntPeriodOrientationEnabled");
  v24[5] = CFSTR("ALSIntPeriodOrientationLandscape");
  v23[6] = CFSTR("BKALSIntPeriodOrientationPortrait");
  v23[7] = CFSTR("BKALSIntPeriodOrientationPortraitInv");
  v24[6] = CFSTR("ALSIntPeriodOrientationPortrait");
  v24[7] = CFSTR("ALSIntPeriodOrientationPortraitInv");
  v23[8] = CFSTR("BKHIDSessionLogLevel");
  v23[9] = CFSTR("BKALSFadeSlope");
  v24[8] = CFSTR("LogLevel");
  v24[9] = CFSTR("DisplayBrightnessFadeSlope");
  v23[10] = CFSTR("BKHIDALSInternalSettings");
  v24[10] = CFSTR("ALSInternalSettings");
  v12 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 11));
  v13 = (void *)qword_100117550;
  qword_100117550 = v12;

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
  v15 = objc_msgSend(v14, "ALSEpoch");
  if ((uint64_t)v15 <= 0)
  {
    v16 = v15;
    v17 = BKLogDetailed();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      v26 = v16;
      v27 = 2048;
      v28 = 1;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Resetting ALS preferences on upgrade from epoch %ld to %ld", buf, 0x16u);
    }

    objc_msgSend(v14, "setALSUserPreferences:", 0);
    objc_msgSend(v14, "setALSEnabled:", 1);
    objc_msgSend(v14, "setALSEpoch:", 1);
    sub_10007A2C0();
  }

  sub_10007A3A8();
  sub_10007A154(0);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "ALSEnabled"));
  v21 = objc_msgSend(v19, "observeDefault:onQueue:withBlock:", v20, &_dispatch_main_q, &stru_1000EC1C0);

  v22 = +[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance");
}

void sub_1000234A4(id a1)
{
  if (qword_100117298 != -1)
    dispatch_once(&qword_100117298, &stru_1000EA658);
}

void sub_1000234D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(+[BKHIDSystemInterface sharedInstance](BKHIDSystemInterface, "sharedInstance"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_100023510(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "startHIDSystem");
}

void sub_100023524(id a1)
{
  _xpc_connection_s *mach_service;
  xpc_object_t v2;
  _xpc_connection_s *connection;

  mach_service = xpc_connection_create_mach_service("com.apple.oscard", 0, 2uLL);
  if (mach_service)
  {
    connection = mach_service;
    xpc_connection_set_event_handler(mach_service, &stru_1000E9E28);
    xpc_connection_activate(connection);
    v2 = xpc_dictionary_create(0, 0, 0);
    xpc_connection_send_message(connection, v2);

    mach_service = connection;
  }

}

void sub_10002359C(id a1, OS_xpc_object *a2)
{
  OS_xpc_object *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  OS_xpc_object *v6;

  v2 = a2;
  v3 = BKLogCommon();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = 138543362;
    v6 = v2;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "oscard connection event: %{public}@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_10002394C(uint64_t a1)
{
  sub_100023958(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100023958(uint64_t a1, void *a2)
{
  void *v3;
  void *i;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  double v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  void *v69;
  id v70;
  float v71;
  void *v72;
  float v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  id v78;
  __CFString *v79;
  __CFString *v80;
  void *v81;
  id v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  void *v88;
  id v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  void *v94;
  void *v95;
  id v96;
  float v97;
  void *v98;
  float v99;
  void *v100;
  void *v101;
  char *v102;
  const __CFString *v103;
  void *v104;
  uint64_t v105;
  void *v106;
  __CFString *v107;
  id v108;
  float v109;
  void *v110;
  float v111;
  void *v112;
  void *v113;
  char *v114;
  const __CFString *v115;
  void *v116;
  id v117;
  id obj;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  id v122;
  uint64_t v123;
  void *v124;
  id v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _QWORD v134[4];
  _QWORD v135[4];
  _QWORD v136[4];
  _QWORD v137[4];
  _QWORD v138[6];
  _QWORD v139[6];
  _BYTE v140[128];
  _QWORD v141[3];
  _BYTE v142[128];

  v117 = a2;
  if (a1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v130 = 0u;
    v131 = 0u;
    v132 = 0u;
    v133 = 0u;
    v141[0] = CFSTR("com.apple.backboardd.trackpadPreferences");
    v141[1] = CFSTR("com.apple.backboardd.magicMousePreferences");
    v141[2] = CFSTR("com.apple.backboardd.ordinaryMousePreferences");
    obj = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v141, 3));
    v119 = a1;
    v122 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v130, v142, 16);
    if (v122)
    {
      v120 = *(_QWORD *)v131;
      v124 = v3;
      do
      {
        for (i = 0; i != v122; i = (char *)i + 1)
        {
          if (*(_QWORD *)v131 != v120)
            objc_enumerationMutation(obj);
          v5 = *(void **)(*((_QWORD *)&v130 + 1) + 8 * (_QWORD)i);
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "componentsSeparatedByString:", CFSTR(".")));
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));
          v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("BKAnalytics-LastSentDate-%@"), v7));

          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v8));
          v11 = objc_opt_class(NSDate, v10);
          v12 = v9;
          v13 = v12;
          if (v11)
          {
            if ((objc_opt_isKindOfClass(v12, v11) & 1) != 0)
              v14 = v13;
            else
              v14 = 0;
          }
          else
          {
            v14 = 0;
          }
          v15 = v14;

          if (v15)
            v16 = v15;
          else
            v16 = (id)objc_claimAutoreleasedReturnValue(+[NSDate distantPast](NSDate, "distantPast"));
          v17 = v16;

          objc_msgSend(v17, "timeIntervalSinceNow");
          if (v18 > 31540000.0)
          {
            objc_msgSend(v3, "removeObjectForKey:", v8);
            sub_100024550(a1, 0, v5);
          }
          v19 = sub_1000246B4(v5);
          v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v20));
          v23 = objc_opt_class(NSDate, v22);
          v24 = v21;
          v25 = v24;
          if (v23)
          {
            if ((objc_opt_isKindOfClass(v24, v23) & 1) != 0)
              v26 = v25;
            else
              v26 = 0;
          }
          else
          {
            v26 = 0;
          }
          v27 = v26;

          if (v27)
          {
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "dateByAddingUnit:value:toDate:options:", 16, 92, v17, 1024));
            if (objc_msgSend(*(id *)(a1 + 16), "compareDate:toDate:toUnitGranularity:", v28, v27, 16) == (id)-1)
            {
              v29 = sub_10002463C(v5);
              v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "objectForKey:", v30));
              v33 = objc_opt_class(NSDictionary, v32);
              v34 = v31;
              v35 = v34;
              if (v33)
              {
                if ((objc_opt_isKindOfClass(v34, v33) & 1) != 0)
                  v36 = v35;
                else
                  v36 = 0;
              }
              else
              {
                v36 = 0;
              }
              v37 = v36;

              if (v37)
              {
                AnalyticsSendEvent(v5, v37);
                objc_msgSend(v124, "setObject:forKey:", v27, v8);
              }

              a1 = v119;
            }

          }
          v3 = v124;
        }
        v122 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v130, v142, 16);
      }
      while (v122);
    }

    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "availableDevices"));
    v126 = 0u;
    v127 = 0u;
    v128 = 0u;
    v129 = 0u;
    v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v126, v140, 16);
    if (v39)
    {
      v40 = v39;
      v41 = *(_QWORD *)v127;
      v121 = v38;
      v123 = *(_QWORD *)v127;
      do
      {
        v42 = 0;
        v125 = v40;
        do
        {
          if (*(_QWORD *)v127 != v41)
            objc_enumerationMutation(v38);
          v43 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * (_QWORD)v42);
          if (objc_msgSend(v43, "eventSource") == 12)
          {
            if (!AnalyticsIsEventUsed(CFSTR("com.apple.backboardd.trackpadPreferences")))
              goto LABEL_88;
            v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 8));
            v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "propertyForKey:", CFSTR("ProductID")));
            v47 = objc_opt_class(NSNumber, v46);
            v48 = v45;
            v49 = v48;
            if (v47)
            {
              if ((objc_opt_isKindOfClass(v48, v47) & 1) != 0)
                v50 = v49;
              else
                v50 = 0;
            }
            else
            {
              v50 = 0;
            }
            v63 = v50;

            objc_msgSend(v44, "bs_setSafeObject:forKey:", v63, CFSTR("devicePid"));
            v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "propertyForKey:", CFSTR("VendorID")));
            v66 = objc_opt_class(NSNumber, v65);
            v67 = v64;
            v68 = v67;
            if (v66)
            {
              if ((objc_opt_isKindOfClass(v67, v66) & 1) != 0)
                v69 = v68;
              else
                v69 = 0;
            }
            else
            {
              v69 = 0;
            }
            v70 = v69;

            objc_msgSend(v44, "bs_setSafeObject:forKey:", v70, CFSTR("deviceVid"));
            v138[0] = CFSTR("pointerAcceleration");
            objc_msgSend(v117, "pointerAccelerationFactor");
            v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v71 * 10.0) / 10.0));
            v139[0] = v72;
            v138[1] = CFSTR("scrollAcceleration");
            objc_msgSend(v117, "scrollAccelerationFactor");
            v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v73 * 10.0) / 10.0));
            v139[1] = v74;
            v138[2] = CFSTR("naturalScrolling");
            v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v117, "enableNaturalScrolling")));
            v139[2] = v75;
            v138[3] = CFSTR("tapToClick");
            v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v117, "enableTapToClick")));
            v139[3] = v76;
            v138[4] = CFSTR("twoFingerSecondaryClick");
            v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v117, "enableTwoFingerSecondaryClick")));
            v139[4] = v77;
            v138[5] = CFSTR("doubleTapDragMode");
            v78 = objc_msgSend(v117, "doubleTapDragMode");
            v79 = CFSTR("Disabled");
            if (v78 == (id)1)
              v79 = CFSTR("Enabled");
            if (v78 == (id)2)
              v79 = CFSTR("WithDragLockEnabled");
            v139[5] = v79;
            v80 = v79;
            v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v139, v138, 6));

            objc_msgSend(v44, "addEntriesFromDictionary:", v81);
            sub_100024550(v119, v44, CFSTR("com.apple.backboardd.trackpadPreferences"));
            v38 = v121;
          }
          else
          {
            if (objc_msgSend(v43, "claimsToConformToUsagePage:usage:", 13, 12))
            {
              if (!AnalyticsIsEventUsed(CFSTR("com.apple.backboardd.magicMousePreferences")))
                goto LABEL_88;
              v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 6));
              v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "propertyForKey:", CFSTR("ProductID")));
              v53 = objc_opt_class(NSNumber, v52);
              v54 = v51;
              v55 = v54;
              if (v53)
              {
                if ((objc_opt_isKindOfClass(v54, v53) & 1) != 0)
                  v56 = v55;
                else
                  v56 = 0;
              }
              else
              {
                v56 = 0;
              }
              v82 = v56;

              objc_msgSend(v44, "bs_setSafeObject:forKey:", v82, CFSTR("devicePid"));
              v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "propertyForKey:", CFSTR("VendorID")));
              v85 = objc_opt_class(NSNumber, v84);
              v86 = v83;
              v87 = v86;
              if (v85)
              {
                if ((objc_opt_isKindOfClass(v86, v85) & 1) != 0)
                  v88 = v87;
                else
                  v88 = 0;
              }
              else
              {
                v88 = 0;
              }
              v96 = v88;

              objc_msgSend(v44, "bs_setSafeObject:forKey:", v96, CFSTR("deviceVid"));
              v136[0] = CFSTR("pointerAcceleration");
              objc_msgSend(v117, "pointerAccelerationFactor");
              v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v97 * 10.0) / 10.0));
              v137[0] = v98;
              v136[1] = CFSTR("scrollAcceleration");
              objc_msgSend(v117, "scrollAccelerationFactor");
              v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v99 * 10.0) / 10.0));
              v137[1] = v100;
              v136[2] = CFSTR("naturalScrolling");
              v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v117, "enableNaturalScrolling")));
              v137[2] = v101;
              v136[3] = CFSTR("buttonConfiguration");
              v102 = (char *)objc_msgSend(v117, "buttonConfigurationForVirtualButtonMice");
              v103 = CFSTR("Unspecified");
              if ((unint64_t)(v102 - 1) <= 2)
                v103 = *(&off_1000E9FC8 + (_QWORD)(v102 - 1));
              v137[3] = v103;
              v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v137, v136, 4));
              objc_msgSend(v44, "addEntriesFromDictionary:", v104);

              v105 = v119;
              v106 = v44;
              v107 = CFSTR("com.apple.backboardd.magicMousePreferences");
            }
            else
            {
              if (!AnalyticsIsEventUsed(CFSTR("com.apple.backboardd.ordinaryMousePreferences")))
                goto LABEL_88;
              v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 6));
              v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "propertyForKey:", CFSTR("ProductID")));
              v59 = objc_opt_class(NSNumber, v58);
              v60 = v57;
              v61 = v60;
              if (v59)
              {
                if ((objc_opt_isKindOfClass(v60, v59) & 1) != 0)
                  v62 = v61;
                else
                  v62 = 0;
              }
              else
              {
                v62 = 0;
              }
              v89 = v62;

              objc_msgSend(v44, "bs_setSafeObject:forKey:", v89, CFSTR("devicePid"));
              v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "propertyForKey:", CFSTR("VendorID")));
              v92 = objc_opt_class(NSNumber, v91);
              v93 = v90;
              v94 = v93;
              if (v92)
              {
                if ((objc_opt_isKindOfClass(v93, v92) & 1) != 0)
                  v95 = v94;
                else
                  v95 = 0;
              }
              else
              {
                v95 = 0;
              }
              v108 = v95;

              objc_msgSend(v44, "bs_setSafeObject:forKey:", v108, CFSTR("deviceVid"));
              v134[0] = CFSTR("pointerAcceleration");
              objc_msgSend(v117, "pointerAccelerationFactor");
              v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v109 * 10.0) / 10.0));
              v135[0] = v110;
              v134[1] = CFSTR("scrollAcceleration");
              objc_msgSend(v117, "scrollAccelerationFactor");
              v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v111 * 10.0) / 10.0));
              v135[1] = v112;
              v134[2] = CFSTR("naturalScrolling");
              v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v117, "enableNaturalScrolling")));
              v135[2] = v113;
              v134[3] = CFSTR("buttonConfiguration");
              v114 = (char *)objc_msgSend(v117, "buttonConfigurationForHardwareButtonMice");
              v115 = CFSTR("Unspecified");
              if ((unint64_t)(v114 - 1) <= 2)
                v115 = *(&off_1000E9FC8 + (_QWORD)(v114 - 1));
              v135[3] = v115;
              v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v135, v134, 4));
              objc_msgSend(v44, "addEntriesFromDictionary:", v116);

              v105 = v119;
              v106 = v44;
              v107 = CFSTR("com.apple.backboardd.ordinaryMousePreferences");
            }
            sub_100024550(v105, v106, v107);
          }
          v41 = v123;
          v40 = v125;

LABEL_88:
          v42 = (char *)v42 + 1;
        }
        while (v40 != v42);
        v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v126, v140, 16);
      }
      while (v40);
    }

  }
}

void sub_100024550(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;

  v5 = a3;
  v6 = a2;
  v14 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  if (v6)
  {
    v7 = *(void **)(a1 + 16);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "startOfDayForDate:", v8));

  }
  else
  {
    v9 = 0;
  }
  v10 = sub_10002463C(v5);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  objc_msgSend(v14, "setObject:forKey:", v6, v11);

  v12 = sub_1000246B4(v5);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

  objc_msgSend(v14, "setObject:forKey:", v9, v13);
}

id sub_10002463C(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(".")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "lastObject"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("BKAnalytics-MostRecentPayload-%@"), v2));

  return v3;
}

id sub_1000246B4(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(".")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "lastObject"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("BKAnalytics-MostRecentPayloadDate-%@"), v2));

  return v3;
}

void sub_10002472C(uint64_t a1)
{
  sub_100023958(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100024738(uint64_t a1)
{
  sub_100023958(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100025A98(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  BKTouchPadInfo *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;

  v3 = a2;
  v4 = BKLogTouchEvents(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138543362;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found a new touchpad %{public}@", (uint8_t *)&v9, 0xCu);
  }

  v6 = -[BKTouchPadInfo initWithService:]([BKTouchPadInfo alloc], "initWithService:", v3);
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v3, "senderID")));
  objc_msgSend(v7, "setObject:forKey:", v6, v8);

  objc_msgSend(v3, "addDisappearanceObserver:queue:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

id sub_100025BC0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100025C18;
  v4[3] = &unk_1000EA058;
  v4[4] = v1;
  return objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v4);
}

id sub_100025C18(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_sendCancelEventForTouchPad:");
}

void sub_100025C20(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "senderInfo"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "displayUUID"));

  if (v5 == *(void **)(a1 + 32) || objc_msgSend(v5, "isEqual:"))
    objc_msgSend(*(id *)(a1 + 40), "_queue_sendCancelEventForTouchPad:", v6);

}

void sub_100025C9C(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  int v16;
  id v17;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "senderID")));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v3));

  if (v4
    || (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "allValues")),
        v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject")),
        v5,
        v4))
  {
    v7 = *(_QWORD *)(a1 + 48);
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject overrideSenderDescriptor](v4, "overrideSenderDescriptor"));
    v9 = v8;
    if (v7)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "associatedDisplay"));
      v11 = BSEqualObjects(v10, *(_QWORD *)(a1 + 48));

      if ((v11 & 1) == 0)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "senderDescriptor"));
        v13 = objc_msgSend(v12, "mutableCopy");

        objc_msgSend(v13, "setAssociatedDisplay:", *(_QWORD *)(a1 + 48));
        -[NSObject setOverrideSenderDescriptor:](v4, "setOverrideSenderDescriptor:", v13);

      }
    }
    else
    {

      if (v9)
        -[NSObject setOverrideSenderDescriptor:](v4, "setOverrideSenderDescriptor:", 0);
    }
    objc_msgSend(*(id *)(a1 + 32), "_queue_handleEvent:fromTouchPad:dispatcher:", *(_QWORD *)(a1 + 64), v4, *(_QWORD *)(a1 + 56));
  }
  else
  {
    v14 = BKLogCommon(v6);
    v4 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v15 = objc_msgSend(*(id *)(a1 + 40), "senderID");
      v16 = 134217984;
      v17 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "unknown touch pad sender 0x%llX", (uint8_t *)&v16, 0xCu);
    }
  }

}

void sub_100025E64(id a1)
{
  BKTouchPadManager *v1;
  void *v2;

  v1 = objc_alloc_init(BKTouchPadManager);
  v2 = (void *)qword_100117230;
  qword_100117230 = (uint64_t)v1;

}

void sub_100026010(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(unsigned int *)(v3 + 8);
  else
    v4 = 0;
  v5 = objc_msgSend(v2, "appendUnsignedInteger:withName:format:", v4, CFSTR("contextID"), 1);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(v6 + 40);
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "appendString:withName:", v7, CFSTR("displayUUID"));
    v6 = *(_QWORD *)(a1 + 40);
  }
  v8 = *(void **)(a1 + 32);
  v9 = BSProcessDescriptionForPID(*(unsigned int *)(v6 + 32));
  v10 = (id)objc_claimAutoreleasedReturnValue(v9);
  objc_msgSend(v8, "appendString:withName:", v10, CFSTR("process"));

}

void sub_1000260C0(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 40), a2);
}

void sub_1000260D8(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 48), a2);
}

id sub_1000260F0(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, CGFloat a7, CGFloat a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id *v21;
  void *v22;
  id v23;
  id *p_obj;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  void *v33;
  id v34;
  __int128 v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  BKMouseDestination *v40;
  BKMouseDestination *v41;
  id v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  NSObject *v64;
  void *v65;
  void *v66;
  __int128 v68;
  void *v69;
  id v70;
  id v71;
  void *v72;
  id v73;
  void *v74;
  BKMouseDestination *v75;
  int v76;
  char v77;
  id obj;
  _OWORD v79[19];
  id v80;
  int buf;
  void *v82;
  _OWORD v83[19];

  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  objc_opt_self(a1);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "uniqueId"));
  v74 = v17;
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "displayController"));
  v21 = 0;
  v22 = 0;
  v80 = 0;
  memset(v79, 0, sizeof(v79));
  v76 = a2;
  if (a2)
  {
    v23 = sub_100005968((uint64_t)BKDisplayController, 0, 1, 0, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v23);
    v21 = &v80;
  }
  obj = 0;
  if (v21)
    p_obj = &obj;
  else
    p_obj = 0;
  v25 = objc_msgSend(v20, "contextIDAtCAScreenLocation:displayUUID:options:securityAnalysis:results:", v19, v22, p_obj, v79, a7, a8);
  v28 = (char)v25;
  if (v21)
    objc_storeStrong(v21, obj);
  if ((v28 & 1) != 0)
  {
    v69 = v22;
    v29 = (id)LODWORD(v79[0]);
    if (v76)
    {
      v30 = DWORD1(v79[0]);
      v31 = BKLogMousePointer(v25, v26, v27);
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v83[0]) = 67109120;
        DWORD1(v83[0]) = v30;
        _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "hit slot %X", (uint8_t *)v83, 8u);
      }

    }
    else
    {
      v30 = 0;
    }
    v34 = objc_alloc_init((Class)NSMutableArray);
    v36 = v34;
    if ((_DWORD)v29)
    {
      *(_QWORD *)&v35 = 138543362;
      v68 = v35;
      v72 = v20;
      v73 = v18;
      v70 = v16;
      v71 = v34;
      do
      {
        v37 = objc_msgSend(v20, "taskPortForContextID:displayUUID:", v29, v19, v68);
        if (((_DWORD)v37 - 1) >= 0xFFFFFFFE)
        {
          v63 = BKLogMousePointer(v37, v38, v39);
          v64 = objc_claimAutoreleasedReturnValue(v63);
          if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v83[0]) = 67109120;
            DWORD1(v83[0]) = (_DWORD)v29;
            _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "invalid client port for contextID %X", (uint8_t *)v83, 8u);
          }

          break;
        }
        v40 = -[BKCAContextDestination initWithContextID:clientPort:]([BKMouseDestination alloc], "initWithContextID:clientPort:", v29, v37);
        v41 = (BKMouseDestination *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "member:", v40));
        if (!v41)
        {
          v41 = v40;
          sub_1000266C4((uint64_t)v41, v74);
          sub_1000260C0((uint64_t)v41, v19);
        }
        if ((_DWORD)v29 == LODWORD(v79[0]))
        {
          v42 = v80;
          if (!v80)
            goto LABEL_25;
          v43 = (uint64_t)v41;
        }
        else
        {
          v43 = (uint64_t)v41;
          v42 = 0;
        }
        sub_1000266DC(v43, v42);
LABEL_25:
        if (v76)
        {
          if (v41)
          {
            v41->_slotID = v30;
LABEL_29:
            v41->_hitTestPoint.x = a7;
            v41->_hitTestPoint.y = a8;
          }
        }
        else if (v41)
        {
          goto LABEL_29;
        }
        sub_1000260D8((uint64_t)v41, v16);
        if ((_DWORD)v30)
        {
          v75 = v40;
          v77 = 0;
          v44 = v16;
          v45 = v19;
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
          v48 = objc_msgSend(v46, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v47));
          v49 = (void *)objc_claimAutoreleasedReturnValue(v48);

          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "authenticationSpecificationForSlotID:registrantEntitled:", v30, &v77));
          v51 = sub_100005968((uint64_t)BKDisplayController, 0, 0, v50, 0);
          v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
          memset(v83, 0, sizeof(v83));
          v53 = v20;
          v54 = v45;
          v55 = v45;
          v16 = v44;
          objc_msgSend(v53, "contextIDAtCAScreenLocation:displayUUID:options:securityAnalysis:results:", v55, v52, 0, v83, a7, a8);
          if (DWORD1(v83[0]) == (_DWORD)v30)
          {
            v56 = sub_10001C094((uint64_t)v83);
            v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
            v60 = v57;
            if (v41)
              objc_storeStrong((id *)&v41->_hitTestInformationAtButtonDown, v57);
            v61 = BKLogMousePointer(v57, v58, v59);
            v62 = objc_claimAutoreleasedReturnValue(v61);
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
            {
              buf = v68;
              v82 = v60;
              _os_log_debug_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "hit test info at down %{public}@", (uint8_t *)&buf, 0xCu);
            }

            v16 = v70;
          }

          v19 = v54;
          v20 = v72;
          v18 = v73;
          v36 = v71;
          v40 = v75;
        }
        objc_msgSend(v36, "addObject:", v41);
        v29 = objc_msgSend(v20, "hostContextIDForEmbeddedContextID:displayUUID:", v29, v19);

        v30 = 0;
      }
      while ((_DWORD)v29);
    }
    objc_msgSend(v20, "applySceneHostSettingsToHostingChain:", v36);
    if ((uint64_t)objc_msgSend(v36, "count") < 1)
    {
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    }
    else
    {
      v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "touchDeliveryPolicyServer"));
      v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "filterDestinations:", v36));
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v66));

    }
    v22 = v69;

  }
  else
  {
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
  }

  return v33;
}

void sub_1000266C4(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 72), a2);
}

void sub_1000266DC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 64), a2);
}

uint64_t sub_1000266F4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(unsigned int *)(a1 + 32);
    if ((int)v5 <= 0)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "clientForTaskPort:", *(unsigned int *)(a1 + 12)));
      *(_DWORD *)(a1 + 32) = objc_msgSend(v6, "pid");

      v5 = *(unsigned int *)(a1 + 32);
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_100026E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100026F84(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "removeIndex:", *(int *)(a1 + 40));
}

void sub_100026F98(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  uint64_t v4;
  id v5;
  _BOOL4 v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t v21[128];
  uint8_t buf[4];
  _BOOL4 v23;
  __int16 v24;
  void *v25;

  v3 = a2;
  if (a1)
  {
    v4 = (uint64_t)objc_msgSend(*(id *)(a1 + 48), "count");
    v3[2](v3);
    v5 = objc_msgSend(*(id *)(a1 + 48), "count");
    v6 = (uint64_t)v5 > 0;
    if (v4 < 1 == v6)
    {
      v7 = (uint64_t)v5;
      if (!objc_msgSend(*(id *)(a1 + 40), "count"))
      {
        v8 = sub_100059844();
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = NSStringFromBKSHIDTouchSensitiveButtonIdentifier(1);
          v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          *(_DWORD *)buf = 67109378;
          v23 = v6;
          v24 = 2114;
          v25 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "setScanningActive:%{BOOL}u button:%{public}@-- no services (yet?), pending", buf, 0x12u);

        }
      }
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v12 = *(id *)(a1 + 40);
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v18;
        do
        {
          for (i = 0; i != v14; i = (char *)i + 1)
          {
            if (*(_QWORD *)v18 != v15)
              objc_enumerationMutation(v12);
            sub_100027160(a1, v7 > 0, *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i));
          }
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        }
        while (v14);
      }

    }
  }

}

void sub_100027160(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;

  v5 = a3;
  if (a1)
  {
    v6 = sub_100059844();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = NSStringFromBKSHIDTouchSensitiveButtonIdentifier(1);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      *(_DWORD *)buf = 67109634;
      v15 = a2;
      v16 = 2114;
      v17 = v9;
      v18 = 2114;
      v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setScanningActive:%{BOOL}u button:%{public}@ posting to service %{public}@", buf, 0x1Cu);

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2, CFSTR("CameraButtonScanActive")));
    v13 = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1));
    objc_msgSend(v5, "asyncSetProperty:forKey:", v11, CFSTR("HostStateNotification"));

  }
}

void sub_1000272A8(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char isKindOfClass;

  v7 = *(void **)(a1 + 32);
  v8 = a3;
  if ((objc_msgSend(v7, "containsObject:", a2) & 1) == 0)
  {
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  v10 = objc_opt_class(NSNumber, v9);
  isKindOfClass = objc_opt_isKindOfClass(v8, v10);

  if ((isKindOfClass & 1) == 0)
  {
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_100027344(id a1, BKSMutableHIDEventSenderDescriptor *a2)
{
  -[BKSMutableHIDEventSenderDescriptor setPrimaryPage:primaryUsage:](a2, "setPrimaryPage:primaryUsage:", 65280, 102);
}

void sub_100027354(uint64_t a1)
{
  int v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v2 = *(unsigned __int8 *)(a1 + 44);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  v4 = *(int *)(a1 + 40);
  if (v2)
  {
    if ((objc_msgSend(v3, "containsIndex:", v4) & 1) == 0)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "addIndex:", *(int *)(a1 + 40));
      v5 = objc_msgSend(objc_alloc((Class)BSProcessDeathWatcher), "initWithPID:queue:deathHandler:");
      v6 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
      objc_msgSend(v6, "setObject:forKey:", v5, v7);

    }
  }
  else
  {
    objc_msgSend(v3, "removeIndex:", v4);
    v8 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v9));
    objc_msgSend(v10, "invalidate");

    v11 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    v12 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
    objc_msgSend(v11, "removeObjectForKey:", v12);

  }
}

id sub_1000274C0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "processDidTerminate:", *(unsigned int *)(a1 + 40));
}

void sub_100027544(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = +[BSProtobufSerialization buildSchemaForClass:builder:](BSProtobufSerialization, "buildSchemaForClass:builder:", objc_opt_class(*(_QWORD *)(a1 + 32), a2), &stru_1000EA148);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)qword_100117240;
  qword_100117240 = v3;

}

void sub_100027590(id a1, BSProtobufSchemaBuilder *a2)
{
  uint64_t v2;
  BSProtobufSchemaBuilder *v3;

  v3 = a2;
  -[BSProtobufSchemaBuilder addRepeatingField:containsClass:](v3, "addRepeatingField:containsClass:", "_props", objc_opt_class(BKSHIDKeyboardDeviceProperties, v2));

}

void sub_1000275FC(uint64_t a1)
{
  int v2;

  if (*(_QWORD *)(a1 + 32))
  {
    os_unfair_lock_lock(&stru_1001172E0);
    v2 = dword_1001172E4;
    os_unfair_lock_unlock(&stru_1001172E0);
    **(_DWORD **)(a1 + 32) = v2;
  }
}

void sub_100027650(uint64_t a1)
{
  float v1;
  float v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  double v6;
  void *v7;
  int v8;
  double v9;

  v1 = fminf(*(float *)(a1 + 32), 1.0);
  if (v1 >= 0.0)
    v2 = v1;
  else
    v2 = 0.0;
  v3 = BKLogBacklight(a1);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134217984;
    v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting backlight factor pending: %f", (uint8_t *)&v8, 0xCu);
  }

  v5 = (void *)qword_1001172D8;
  *(float *)&v6 = v2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6));
  objc_msgSend(v5, "setProperty:forKey:", v7, CFSTR("DisplayBrightnessFactorPending"));

  sub_10003FB68(1, v2);
}

void sub_100027754(uint64_t a1)
{
  sub_10003FD30(1, *(_BYTE *)(a1 + 40) != 0, *(_BYTE *)(a1 + 41) != 0, *(float *)(a1 + 32), *(float *)(a1 + 36));
}

void sub_100027778(uint64_t a1)
{
  sub_10003FD30(*(_BYTE *)(a1 + 40) != 0, *(_BYTE *)(a1 + 41) != 0, *(_BYTE *)(a1 + 42) != 0, *(float *)(a1 + 32), *(float *)(a1 + 36));
}

uint64_t sub_1000277A8(uint64_t a1, int a2, __int128 *a3)
{
  __int128 v3;
  _QWORD v5[5];
  int v6;
  __int128 v7;
  __int128 v8;

  v5[1] = 3221225472;
  v3 = a3[1];
  v7 = *a3;
  v5[0] = _NSConcreteStackBlock;
  v5[2] = sub_100027834;
  v5[3] = &unk_1000EA8C0;
  v6 = a2;
  v5[4] = a1;
  v8 = v3;
  if (!sub_10000A40C((uint64_t)"_BKHIDXXSetBacklightFeatures", BKBackBoardClientEntitlement, (uint64_t)a3))
    return 5;
  sub_100027834((uint64_t)v5);
  return 0;
}

void sub_100027834(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  if (*(_DWORD *)(a1 + 40))
  {
    v2 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), 0);
    v10 = 0;
    v4 = +[BSProtobufSerialization decodeObjectOfClass:fromData:error:](BSProtobufSerialization, "decodeObjectOfClass:fromData:error:", objc_opt_class(BKSBacklightFeatures, v3), v2, &v10);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
      v6 = BSPIDForAuditToken(a1 + 44);
      v7 = objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
      -[NSObject setBacklightFeatures:forPID:](v7, "setBacklightFeatures:forPID:", v5, v6);
    }
    else
    {
      v9 = BKLogBacklight(0);
      v7 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v12 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "cannot decode backlight features mode: %{public}@", buf, 0xCu);
      }
    }

  }
  else
  {
    v8 = BKLogBacklight(a1);
    v2 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "bad size for mode data", buf, 2u);
    }
  }

}

void sub_1000279BC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  **(_BYTE **)(a1 + 32) = objc_msgSend(v2, "isAutoBrightnessAvailable");

}

void sub_100027A04(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  **(_BYTE **)(a1 + 32) = objc_msgSend(v2, "isBrightnessLevelControlAvailable");

}

void sub_100027A4C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  **(_BYTE **)(a1 + 32) = objc_msgSend(v2, "isALSSupported");

}

void sub_100027A94(uint64_t a1)
{
  int v1;
  id v2;
  id v3;
  void *v4;
  float v5;
  float v6;
  double v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  _DWORD v12[2];
  __int16 v13;
  id v14;

  v1 = *(unsigned __int8 *)(a1 + 32);
  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = objc_msgSend(v2, "setObject:forKey:", &__kCFBooleanTrue, CFSTR("DisplayAutoBrightnessActive"));
  if (!v1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
    objc_msgSend(v4, "ALSDelayOnUnlock");
    v6 = v5;

    if (v6 > 0.0)
    {
      *(float *)&v7 = v6;
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v7));
      objc_msgSend(v2, "setObject:forKey:", v8, CFSTR("DisplayAutoBrightnessDelay"));

    }
  }
  v9 = BKLogBacklight(v3);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109378;
    v12[1] = v1 != 0;
    v13 = 2114;
    v14 = v2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BKAmbientLightSensorEnableAutoBrightness userInteractedWithUI:%{BOOL}u %{public}@", (uint8_t *)v12, 0x12u);
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  objc_msgSend(v11, "setProperty:forKey:", v2, CFSTR("DisplayAutoBrightnessStatus"));
  if (v1)
    objc_msgSend(v11, "setProperty:forKey:", &__kCFBooleanTrue, CFSTR("UserInteractedWithUI"));

}

uint64_t sub_100027C20(_BYTE *a1, _OWORD *a2)
{
  void *v4;
  void *v6;
  __int128 v7;
  _OWORD v8[2];

  if (!sub_100004EF8((uint64_t)"_BKHIDXXRequestProximityStatusEvent", BKProximityStatusEventEntitlement, BKBackBoardClientEntitlement, (uint64_t)a2))return 5;
  if (*a1)
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1));
  else
    v4 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDUISensorController sharedInstance](BKHIDUISensorController, "sharedInstance"));
  v7 = a2[1];
  v8[0] = *a2;
  v8[1] = v7;
  objc_msgSend(v6, "requestProximityStatusEventForReason:versionedPID:", v4, BSVersionedPIDForAuditToken(v8));

  return 0;
}

void sub_100027CEC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
  v4 = objc_msgSend(v2, "eventProcessorOfClass:", objc_opt_class(BKHIDProximityEventProcessor, v3));
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);

  objc_msgSend(v5, "setShouldSuppressTouchesWhileObjectWithinProximity:", *(_BYTE *)(a1 + 32) != 0);
}

uint64_t sub_100027D60(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  _BOOL8 v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint8_t buf[16];
  __int128 v36;

  v6 = a3[1];
  *(_OWORD *)buf = *a3;
  v36 = v6;
  v7 = BSVersionedPIDForAuditToken(buf);
  v8 = sub_1000125C8(BKBackBoardClientEntitlement, (uint64_t)a3);
  if ((v8 & 1) != 0)
  {
    v9 = 1;
LABEL_5:
    v11 = objc_claimAutoreleasedReturnValue(+[BKHIDUISensorController sharedInstance](BKHIDUISensorController, "sharedInstance"));
    v12 = v11;
    if (!a1 || !a2)
    {
      -[NSObject removeModesForVersionedPID:](v11, "removeModesForVersionedPID:", v7);
LABEL_24:
      v25 = 0;
      goto LABEL_25;
    }
    v13 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", a1, a2, 0);
    v34 = 0;
    v15 = +[BSProtobufSerialization decodeObjectOfClass:fromData:error:](BSProtobufSerialization, "decodeObjectOfClass:fromData:error:", objc_opt_class(BKSHIDUISensorMode, v14), v13, &v34);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = v34;
    v18 = v17;
    if (v16)
    {
      v19 = objc_msgSend(v16, "versionedPID");
      if (v19 != (id)v7)
      {
        v27 = BKLogUISensor(v19);
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          v32 = NSStringFromBSVersionedPID(v7);
          v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v33;
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "process not entitled to change UI sensor modes: %{public}@", buf, 0xCu);

        }
        goto LABEL_23;
      }
      if ((v8 & 1) != 0 || (v20 = objc_msgSend(v16, "isRestrictedToSystemShell"), !(_DWORD)v20))
      {
        -[NSObject applySensorMode:requestOrigin:](v12, "applySensorMode:requestOrigin:", v16, v9);
        goto LABEL_23;
      }
      v21 = BKLogUISensor(v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v16;
        v23 = "mode request reserved for system shell:%{public}@";
LABEL_27:
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, v23, buf, 0xCu);
      }
    }
    else
    {
      v26 = BKLogUISensor(v17);
      v22 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v18;
        v23 = "cannot decode UI sensor settings: %{public}@";
        goto LABEL_27;
      }
    }

LABEL_23:
    goto LABEL_24;
  }
  v10 = sub_10001261C(BKProximityDetectionEntitlement, (uint64_t)a3);
  if (v10)
  {
    v9 = 2;
    goto LABEL_5;
  }
  v24 = BKLogUISensor(v10);
  v12 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v30 = NSStringFromBSVersionedPID(v7);
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v31;
    _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "process not entitled to change UI sensor modes: %{public}@", buf, 0xCu);

  }
  v25 = 5;
LABEL_25:

  return v25;
}

uint64_t sub_100028068(_BYTE *a1, int a2, uint64_t a3)
{
  int v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void **v13;
  uint64_t v14;
  void (*v15)(uint64_t, void *);
  void *v16;
  id v17;
  int v18;
  int v19;
  uint8_t buf[16];

  v5 = BSPIDForAuditToken(a3);
  if (!*a1)
  {
    v6 = 0;
    goto LABEL_7;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1));
  if (v6)
  {
LABEL_7:
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[BKTouchDeliveryGenericGestureFocusObserver sharedInstance](BKTouchDeliveryGenericGestureFocusObserver, "sharedInstance"));
    v13 = _NSConcreteStackBlock;
    v14 = 3221225472;
    v15 = sub_1000281B8;
    v16 = &unk_1000EA108;
    v17 = v6;
    v18 = v5;
    v19 = a2;
    v8 = v6;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDEventDeferringResolution build:](BKSHIDEventDeferringResolution, "build:", &v13));
    objc_msgSend(v10, "setEventDestination:forDisplayUUID:", v11, v8, v13, v14, v15, v16);

    v9 = 0;
    goto LABEL_8;
  }
  v7 = BKLogCommon(0);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "ClaimGenericGestureFocus: could not convert UUID to UTF-8", buf, 2u);
  }
  v9 = 5;
LABEL_8:

  return v9;
}

void sub_1000281B8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  objc_msgSend(v6, "setPid:", *(unsigned int *)(a1 + 40));
  if (*(_QWORD *)(a1 + 32))
    v3 = objc_claimAutoreleasedReturnValue(+[BKSHIDEventDisplay displayWithHardwareIdentifier:](BKSHIDEventDisplay, "displayWithHardwareIdentifier:"));
  else
    v3 = objc_claimAutoreleasedReturnValue(+[BKSHIDEventDisplay builtinDisplay](BKSHIDEventDisplay, "builtinDisplay"));
  v4 = (void *)v3;
  objc_msgSend(v6, "setDisplay:", v3);
  if (*(_DWORD *)(a1 + 44))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDEventDeferringToken tokenForIdentifierOfCAContext:](BKSHIDEventDeferringToken, "tokenForIdentifierOfCAContext:"));
    objc_msgSend(v6, "setToken:", v5);

  }
}

uint64_t sub_100028254(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[8];
  int v11;
  int v12;
  uint8_t buf[16];

  if (a5 && a6)
  {
    *a5 = 0;
    *a6 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100028334;
    v10[3] = &unk_1000EA880;
    v11 = a2;
    v12 = a4;
    v10[4] = a1;
    v10[5] = a3;
    v10[6] = a5;
    v10[7] = a6;
    if (sub_10001261C(BKEventResolutionEntitlement, a7))
    {
      sub_100028334(v10);
      return 0;
    }
  }
  else
  {
    v8 = BKLogEventDelivery(a1);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "expected a valid place to put the description data", buf, 2u);
    }

  }
  return 5;
}

void sub_100028334(_QWORD *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  NSObject *v18;

  v1 = a1;
  if (*((_DWORD *)a1 + 16))
  {
    a1 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", a1[4], *((unsigned int *)a1 + 16), 0);
    v2 = a1;
  }
  else
  {
    v2 = 0;
  }
  if (*((_DWORD *)v1 + 17))
  {
    a1 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", v1[5], *((unsigned int *)v1 + 17), 0);
    v3 = a1;
    if (v2)
      goto LABEL_6;
LABEL_10:
    v7 = BKLogEventDelivery(a1);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    LOWORD(v17) = 0;
    v9 = "_BKHIDXXGetEventResolutionDescription: no event descriptor";
LABEL_14:
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v17, 2u);
    goto LABEL_21;
  }
  v3 = 0;
  if (!v2)
    goto LABEL_10;
LABEL_6:
  v4 = objc_claimAutoreleasedReturnValue(+[BKSHIDEventDescriptor bs_secureDecodedFromData:](BKSHIDEventDescriptor, "bs_secureDecodedFromData:", v2));
  if (!v4)
  {
    v10 = BKLogEventDelivery(0);
    v8 = objc_claimAutoreleasedReturnValue(v10);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    LOWORD(v17) = 0;
    v9 = "_BKHIDXXGetEventResolutionDescription: failed to decode event descriptor";
    goto LABEL_14;
  }
  v5 = (void *)v4;
  if (v3)
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDEventSenderDescriptor bs_secureDecodedFromData:](BKSHIDEventSenderDescriptor, "bs_secureDecodedFromData:", v3));
  else
    v6 = 0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDSystemInterface sharedInstance](BKHIDSystemInterface, "sharedInstance"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "deliveryManager"));

  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "descriptionOfResolutionPathForEventDescriptor:senderDescriptor:", v5, v6));
  v13 = objc_claimAutoreleasedReturnValue(-[NSObject bs_secureEncoded](v8, "bs_secureEncoded"));
  if (v13)
  {
    v14 = v13;

    *(_QWORD *)v1[6] = -[NSObject bs_bytesForMIG](v14, "bs_bytesForMIG");
    *(_DWORD *)v1[7] = -[NSObject bs_lengthForMIG](v14, "bs_lengthForMIG");
    v8 = v14;
  }
  else
  {
    v15 = BKLogEventDelivery(0);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = 138543362;
      v18 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "_BKHIDXXGetEventResolutionDescription: cannot encode %{public}@", (uint8_t *)&v17, 0xCu);
    }

  }
LABEL_21:

}

uint64_t sub_1000285A0(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[8];
  int v11;
  int v12;
  uint8_t buf[16];

  if (a5 && a6)
  {
    *a5 = 0;
    *a6 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100028680;
    v10[3] = &unk_1000EA880;
    v11 = a2;
    v12 = a4;
    v10[4] = a1;
    v10[5] = a3;
    v10[6] = a5;
    v10[7] = a6;
    if (sub_10001261C(BKEventResolutionEntitlement, a7))
    {
      sub_100028680(v10);
      return 0;
    }
  }
  else
  {
    v8 = BKLogEventDelivery(a1);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "expected a valid place to put the description data", buf, 2u);
    }

  }
  return 5;
}

void sub_100028680(_QWORD *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  NSObject *v18;

  v1 = a1;
  if (*((_DWORD *)a1 + 16))
  {
    a1 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", a1[4], *((unsigned int *)a1 + 16), 0);
    v2 = a1;
  }
  else
  {
    v2 = 0;
  }
  if (*((_DWORD *)v1 + 17))
  {
    a1 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", v1[5], *((unsigned int *)v1 + 17), 0);
    v3 = a1;
    if (v2)
      goto LABEL_6;
LABEL_10:
    v7 = BKLogEventDelivery(a1);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    LOWORD(v17) = 0;
    v9 = "_BKHIDXXGetEventResolutionDescription: no event descriptor";
LABEL_14:
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v17, 2u);
    goto LABEL_21;
  }
  v3 = 0;
  if (!v2)
    goto LABEL_10;
LABEL_6:
  v4 = objc_claimAutoreleasedReturnValue(+[BKSHIDEventKeyCommand bs_secureDecodedFromData:](BKSHIDEventKeyCommand, "bs_secureDecodedFromData:", v2));
  if (!v4)
  {
    v10 = BKLogEventDelivery(0);
    v8 = objc_claimAutoreleasedReturnValue(v10);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    LOWORD(v17) = 0;
    v9 = "_BKHIDXXGetEventResolutionDescription: failed to decode event descriptor";
    goto LABEL_14;
  }
  v5 = (void *)v4;
  if (v3)
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDEventSenderDescriptor bs_secureDecodedFromData:](BKSHIDEventSenderDescriptor, "bs_secureDecodedFromData:", v3));
  else
    v6 = 0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDSystemInterface sharedInstance](BKHIDSystemInterface, "sharedInstance"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "deliveryManager"));

  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "descriptionOfResolutionPathForKeyCommand:senderDescriptor:", v5, v6));
  v13 = objc_claimAutoreleasedReturnValue(-[NSObject bs_secureEncoded](v8, "bs_secureEncoded"));
  if (v13)
  {
    v14 = v13;

    *(_QWORD *)v1[6] = -[NSObject bs_bytesForMIG](v14, "bs_bytesForMIG");
    *(_DWORD *)v1[7] = -[NSObject bs_lengthForMIG](v14, "bs_lengthForMIG");
    v8 = v14;
  }
  else
  {
    v15 = BKLogEventDelivery(0);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = 138543362;
      v18 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "_BKHIDXXGetEventResolutionDescription: cannot encode %{public}@", (uint8_t *)&v17, 0xCu);
    }

  }
LABEL_21:

}

uint64_t sub_1000288EC(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD v4[5];
  int v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100028968;
  v4[3] = &unk_1000EA8A0;
  v5 = a2;
  v4[4] = a1;
  if (!sub_10001261C(BKSetAuthenticatedKeyCommandsEntitlement, a3))
    return 5;
  sub_100028968((uint64_t)v4);
  return 0;
}

void sub_100028968(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  _QWORD v16[2];

  if (*(_DWORD *)(a1 + 40))
  {
    v1 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), 0);
    v16[0] = objc_opt_class(NSSet, v2);
    v16[1] = objc_opt_class(BKSHIDAuthenticatedKeyCommandSpecification, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v16, 2));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet bs_secureObjectFromData:ofClasses:](NSSet, "bs_secureObjectFromData:ofClasses:", v1, v5));

    if (v6)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
      v10 = objc_msgSend(v8, "eventProcessorOfClass:", objc_opt_class(BKKeyboardHIDEventProcessor, v9));
      v11 = objc_claimAutoreleasedReturnValue(v10);

      -[NSObject setKeyCommandsToAuthenticate:](v11, "setKeyCommandsToAuthenticate:", v6);
    }
    else
    {
      v13 = BKLogKeyboard(v7);
      v11 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v14 = 138543362;
        v15 = v1;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "cannot decode authenticated key commands: %{public}@", (uint8_t *)&v14, 0xCu);
      }
    }

  }
  else
  {
    v12 = BKLogKeyboard(a1);
    v1 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "bad size for authenticated key command data", (uint8_t *)&v14, 2u);
    }
  }

}

uint64_t sub_100028B48(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD v4[5];
  int v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100028BD8;
  v4[3] = &unk_1000EA8A0;
  v5 = a2;
  v4[4] = a1;
  if (!sub_100004EF8((uint64_t)"_BKHIDXXCancelTouchesWithIdentifiers", BKCancelTouchesEntitlement, BKBackBoardClientEntitlement, a3))return 5;
  sub_100028BD8((uint64_t)v4);
  return 0;
}

void sub_100028BD8(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSSet *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint8_t buf[16];

  if (*(_DWORD *)(a1 + 40) && *(_QWORD *)(a1 + 32))
  {
    v1 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), 0);
    v3 = objc_opt_class(NSArray, v2);
    v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v3, objc_opt_class(NSNumber, v4), 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSObject bs_secureObjectFromData:ofClasses:](NSObject, "bs_secureObjectFromData:ofClasses:", v1, v6));

    if (v7)
    {
      v9 = objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
      v11 = -[NSObject eventProcessorOfClass:](v9, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v10));
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      objc_msgSend(v12, "cancelTouchesWithIdentifiers:", v7);

    }
    else
    {
      v13 = BKLogCommon(v8);
      v9 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Error unarchiving touchIdentifiers", buf, 2u);
      }
    }

  }
}

uint64_t sub_100028D28(uint64_t a1, int a2, __int128 *a3)
{
  __int128 v3;
  _QWORD v5[5];
  int v6;
  __int128 v7;
  __int128 v8;

  v5[1] = 3221225472;
  v3 = a3[1];
  v7 = *a3;
  v5[0] = _NSConcreteStackBlock;
  v5[2] = sub_100028DB0;
  v5[3] = &unk_1000EA8C0;
  v6 = a2;
  v5[4] = a1;
  v8 = v3;
  if (!sub_10001261C(BKExcludeZoomContextsFromHitTestingEntitlement, (uint64_t)a3))
    return 5;
  sub_100028DB0((uint64_t)v5);
  return 0;
}

void sub_100028DB0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  __int128 v16;
  uint8_t buf[16];
  __int128 v18;

  if (*(_DWORD *)(a1 + 40) && *(_QWORD *)(a1 + 32))
  {
    v2 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), 0);
    v4 = objc_opt_class(NSArray, v3);
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSNumber, v5), 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSObject bs_secureObjectFromData:ofClasses:](NSObject, "bs_secureObjectFromData:ofClasses:", v2, v7));

    if (!v8)
    {
      v10 = BKLogCommon(v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "_BKHIDXXExcludeCAContextsFromHitTestingForZoomSenders_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}s: error unarchiving contextIDs", buf, 0xCu);
      }

    }
  }
  else
  {
    v8 = 0;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
  v14 = objc_msgSend(v12, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v13));
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  v16 = *(_OWORD *)(a1 + 60);
  *(_OWORD *)buf = *(_OWORD *)(a1 + 44);
  v18 = v16;
  objc_msgSend(v15, "setExcludedZoomContextIDs:fromVersionedPID:", v8, BSVersionedPIDForAuditToken(buf));

}

uint64_t sub_100028F70(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD v4[5];
  int v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100028FF0;
  v4[3] = &unk_1000EA8A0;
  v5 = a2;
  v4[4] = a1;
  if (!sub_10000A40C((uint64_t)"_BKHIDXXApplyButtonDefinitions", BKBackBoardClientEntitlement, a3))
    return 5;
  sub_100028FF0((uint64_t)v4);
  return 0;
}

void sub_100028FF0(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSSet *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  const char *v13;

  if (*(_DWORD *)(a1 + 40) && *(_QWORD *)(a1 + 32))
  {
    v1 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), 0);
    v3 = objc_opt_class(NSArray, v2);
    v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v3, objc_opt_class(BKSButtonHapticsDefinition, v4), 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSObject bs_secureObjectFromData:ofClasses:](NSObject, "bs_secureObjectFromData:ofClasses:", v1, v6));

    if (v7)
    {
      v9 = objc_claimAutoreleasedReturnValue(+[BKButtonHapticsController sharedInstance](BKButtonHapticsController, "sharedInstance"));
      -[NSObject applyDefinitions:](v9, "applyDefinitions:", v7);
    }
    else
    {
      v11 = BKLogCommon(v8);
      v9 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v13 = "_BKHIDXXApplyButtonDefinitions_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s: Error unarchiving button definitions", buf, 0xCu);
      }
    }

  }
  else
  {
    v10 = BKLogCommon(a1);
    v1 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v13 = "_BKHIDXXApplyButtonDefinitions_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "%s: no data received", buf, 0xCu);
    }
  }

}

void sub_1000291B4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKButtonHapticsController sharedInstance](BKButtonHapticsController, "sharedInstance"));
  objc_msgSend(v2, "playHapticForClickState:clickSpeed:", *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36));

}

void sub_1000291F8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  const char *v13;

  if (a1 && a2)
  {
    v4 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", a1, a2, 0);
    v6 = +[NSObject bs_secureObjectFromData:ofClass:](NSObject, "bs_secureObjectFromData:ofClass:", v4, objc_opt_class(BKSHIDHapticFeedbackRequest, v5));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDHapticFeedbackController sharedInstance](BKHIDHapticFeedbackController, "sharedInstance"));
      objc_msgSend(v8, "postHapticFeedbackRequest:forAuditToken:", v7, a3);

    }
    else
    {
      v10 = BKLogCommon(0);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = 136315138;
        v13 = "_BKHIDXXRequestHapticFeedback";
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s: Error unarchiving feedback request", (uint8_t *)&v12, 0xCu);
      }

    }
  }
  else
  {
    v9 = BKLogCommon(a1);
    v4 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 136315138;
      v13 = "_BKHIDXXRequestHapticFeedback";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: no data received", (uint8_t *)&v12, 0xCu);
    }
  }

}

void sub_100029394(uint64_t a1, unsigned int a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint8_t buf[4];
  const char *v21;

  if (a1 && a2)
  {
    v4 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", a1, a2, 0);
    v6 = objc_opt_class(NSArray, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(BKSTouchAnnotation, v7), 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSObject bs_secureObjectFromData:ofClasses:](NSObject, "bs_secureObjectFromData:ofClasses:", v4, v9));

    if (v10)
    {
      v12 = BSPIDForAuditToken(a3);
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
      v15 = objc_msgSend(v13, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v14));
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

      objc_msgSend(v16, "postTouchAnnotations:sourcePID:", v10, v12);
    }
    else
    {
      v18 = BKLogCommon(v11);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v21 = "_BKHIDXXPostTouchAnnotations";
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%s: Error unarchiving touch annotations", buf, 0xCu);
      }

    }
  }
  else
  {
    v17 = BKLogCommon(a1);
    v4 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v21 = "_BKHIDXXPostTouchAnnotations";
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s: no data received", buf, 0xCu);
    }
  }

}

uint64_t sub_1000295A0(int a1, uint64_t a2, int a3, char a4, uint64_t a5, __int128 *a6)
{
  __int128 v6;
  _QWORD v8[6];
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  char v13;

  v8[1] = 3221225472;
  v6 = a6[1];
  v10 = *a6;
  v8[0] = _NSConcreteStackBlock;
  v8[2] = sub_100029648;
  v8[3] = &unk_1000EA168;
  v8[4] = a2;
  v8[5] = a5;
  v9 = a1;
  v11 = v6;
  v12 = a3;
  v13 = a4;
  if (!sub_100004EF8((uint64_t)"_BKHIDXXTouchStreamCreate", BKTouchStreamsEntitlement, BKBackBoardClientEntitlement, (uint64_t)a6))return 5;
  sub_100029648((uint64_t)v8);
  return 0;
}

void sub_100029648(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  _OWORD v9[2];

  if (**(_BYTE **)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v2 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
  v5 = objc_msgSend(v3, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  v7 = *(unsigned int *)(a1 + 48);
  v8 = *(_OWORD *)(a1 + 68);
  v9[0] = *(_OWORD *)(a1 + 52);
  v9[1] = v8;
  **(_DWORD **)(a1 + 40) = objc_msgSend(v6, "addTouchStreamForContextID:display:versionedPID:identifier:shouldSendAmbiguityRecommendations:", v7, v2, BSVersionedPIDForAuditToken(v9), *(unsigned int *)(a1 + 84), *(_BYTE *)(a1 + 88) != 0);

}

void sub_100029720(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
  v4 = objc_msgSend(v2, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v3));
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);

  objc_msgSend(v5, "invalidateTouchStreamReference:", *(unsigned int *)(a1 + 32));
}

uint64_t sub_10002978C(uint64_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, float a8, float a9)
{
  _QWORD v10[7];
  int v11;
  int v12;
  int v13;
  float v14;
  float v15;

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10002982C;
  v10[3] = &unk_1000EA8C0;
  v10[4] = a4;
  v10[5] = a6;
  v10[6] = a1;
  v11 = a5;
  v12 = a2;
  v13 = a3;
  v14 = a8;
  v15 = a9;
  if (!sub_100004EF8((uint64_t)"_BKHIDXXDigitizerTouchDetach", BKDetachTouchesEntitlement, BKBackBoardClientEntitlement, a7))return 5;
  sub_10002982C((uint64_t)v10);
  return 0;
}

void sub_10002982C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  const char *v13;

  if (*(_DWORD *)(a1 + 56) && *(_QWORD *)(a1 + 32))
  {
    v2 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 56), 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDTouchRoutingPolicy bs_secureDecodedFromData:](BKSHIDTouchRoutingPolicy, "bs_secureDecodedFromData:", v2));
    if (v3)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
      v6 = objc_msgSend(v4, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v5));
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

      **(_BYTE **)(a1 + 40) = objc_msgSend(v7, "detachTouchIdentifiers:count:assignUserIdentifier:policy:offset:", *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64), v3, *(float *)(a1 + 68), *(float *)(a1 + 72));
    }
    else
    {
      v10 = BKLogCommon(0);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = 136315138;
        v13 = "_BKHIDXXDigitizerTouchDetach_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s: Error unarchiving policy", (uint8_t *)&v12, 0xCu);
      }

    }
  }
  else
  {
    v8 = BKLogCommon(a1);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = 136315138;
      v13 = "_BKHIDXXDigitizerTouchDetach_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s: no policy data received", (uint8_t *)&v12, 0xCu);
    }

    **(_BYTE **)(a1 + 40) = 0;
  }
}

void sub_100029A0C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
  v4 = objc_msgSend(v2, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v3));
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);

  objc_msgSend(v5, "setOffset:forTouchesWithUserIdentifier:", *(unsigned int *)(a1 + 40), *(float *)(a1 + 32), *(float *)(a1 + 36));
}

uint64_t sub_100029A84(int a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD v5[5];
  int v6;
  int v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100029B14;
  v5[3] = &unk_1000EA7E0;
  v5[4] = a2;
  v6 = a3;
  v7 = a1;
  if (!sub_100004EF8((uint64_t)"_BKHIDXXDigitizerTouchSetRoutingPolicy", BKDetachTouchesEntitlement, BKBackBoardClientEntitlement, a4))return 5;
  sub_100029B14((uint64_t)v5);
  return 0;
}

void sub_100029B14(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint8_t buf[4];
  const char *v20;

  if (*(_DWORD *)(a1 + 40) && *(_QWORD *)(a1 + 32))
  {
    v2 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), 0);
    v4 = objc_opt_class(BKSHIDTouchRoutingPolicy, v3);
    v6 = objc_opt_class(NSArray, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v6, objc_opt_class(BSSettings, v7), 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSObject bs_secureObjectFromData:ofClasses:](NSObject, "bs_secureObjectFromData:ofClasses:", v2, v9));

    if (v10)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
      v14 = objc_msgSend(v12, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v13));
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

      objc_msgSend(v15, "setRoutingPolicy:forTouchesWithUserIdentifier:", v10, *(unsigned int *)(a1 + 44));
    }
    else
    {
      v17 = BKLogCommon(v11);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v20 = "_BKHIDXXDigitizerTouchSetRoutingPolicy_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%s: Error unarchiving policy", buf, 0xCu);
      }

    }
  }
  else
  {
    v16 = BKLogCommon(a1);
    v2 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v20 = "_BKHIDXXDigitizerTouchSetRoutingPolicy_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s: no policy data received", buf, 0xCu);
    }
  }

}

void sub_100029D28(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKUserEventTimer sharedInstance](BKUserEventTimer, "sharedInstance"));
  objc_msgSend(v2, "resetTimer:mode:", *(unsigned int *)(a1 + 40), *(double *)(a1 + 32));

}

void sub_100029D70(uint64_t a1)
{
  uint64_t v2;
  id v3;

  if (*(_QWORD *)(a1 + 32))
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[BKUserEventTimer sharedInstance](BKUserEventTimer, "sharedInstance"));
    objc_msgSend(v3, "lastUserEventTime");
    **(_QWORD **)(a1 + 32) = v2;

  }
}

void sub_100029DD0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  _QWORD block[6];

  v2 = sub_10001A7F4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)v3;
  if (v3)
  {
    v5 = *(unsigned __int8 *)(a1 + 32);
    v6 = *(NSObject **)(v3 + 8);
    block[1] = 3221225472;
    block[2] = sub_10008AF70;
    block[3] = &unk_1000ECB60;
    block[4] = v4;
    block[5] = v5;
    v7 = v4;
    block[0] = _NSConcreteStackBlock;
    dispatch_async(v6, block);
    v4 = v7;
  }

}

void sub_100029E50(uint64_t a1)
{
  id v2;
  id v3;

  v2 = sub_10001A7F4();
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10008BB0C((uint64_t)v3, *(unsigned __int8 *)(a1 + 32));

}

uint64_t sub_100029E94(uint64_t a1, char a2, __int128 *a3)
{
  __int128 v3;
  _QWORD v5[5];
  __int128 v6;
  __int128 v7;
  char v8;

  v5[1] = 3221225472;
  v3 = a3[1];
  v6 = *a3;
  v5[0] = _NSConcreteStackBlock;
  v5[2] = sub_100029F20;
  v5[3] = &unk_1000EA860;
  v5[4] = a1;
  v8 = a2;
  v7 = v3;
  if (!sub_10000A40C((uint64_t)"_BKHIDXXSetOrientationClient", BKBackBoardClientEntitlement, (uint64_t)a3))
    return 5;
  sub_100029F20((uint64_t)v5);
  return 0;
}

void sub_100029F20(uint64_t a1)
{
  void *v2;
  id v3;

  if (**(_BYTE **)(a1 + 32))
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v3 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKAccelerometerInterface sharedInstance](BKAccelerometerInterface, "sharedInstance"));
  objc_msgSend(v2, "systemAppSetOrientationEventsClient:wantsOrientationEvents:auditToken:", v3, *(_BYTE *)(a1 + 72) != 0, a1 + 40);

}

void sub_100029FA0(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];

  if (*(_BYTE *)(a1 + 68))
    v2 = 1;
  else
    v2 = 2;
  v3 = sub_10001A7F4();
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = *(int *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 52);
  v8[0] = *(_OWORD *)(a1 + 36);
  v8[1] = v6;
  v7 = BSVersionedPIDForAuditToken(v8);
  sub_10008B4BC((uint64_t)v4, v2, v5, v7);

}

void sub_10002A020(uint64_t a1)
{
  id v2;
  void *v3;
  __int128 v4;
  uint64_t v5;
  _OWORD v6[2];

  v2 = sub_10001A7F4();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = *(_OWORD *)(a1 + 48);
  v6[0] = *(_OWORD *)(a1 + 32);
  v6[1] = v4;
  v5 = BSVersionedPIDForAuditToken(v6);
  sub_10008BA9C((uint64_t)v3, 3, v5);

}

void sub_10002A07C(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = 0;
  v2 = sub_10001A7F4();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  **(_DWORD **)(a1 + 32) = sub_10008B3D8((uint64_t)v3, (uint64_t)&v4);

  **(_DWORD **)(a1 + 40) = v4;
}

void sub_10002A0D8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  void *v7;
  id v8;

  v8 = objc_msgSend(objc_alloc((Class)BSMachPortSendRight), "initWithPort:", a1);
  if (objc_msgSend(v8, "isUsable"))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[BKAccelerometerInterface sharedInstance](BKAccelerometerInterface, "sharedInstance"));
    objc_msgSend(v7, "bksAccelerometerClientRequestedOrientationEvents:enabled:passiveEvents:auditToken:", v8, a2 != 0, a3 != 0, a4);

  }
}

uint64_t sub_10002A168(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  BKDisplayBrightnessUpdateTransaction *v14;
  void *v15;
  BKDisplayBrightnessUpdateTransaction *v16;
  BKDisplayBrightnessUpdateTransaction *v17;
  uint64_t v18;
  _QWORD v20[4];
  BKDisplayBrightnessUpdateTransaction *v21;
  uint8_t buf[16];
  __int128 v23;

  v3 = a2[1];
  *(_OWORD *)buf = *a2;
  v23 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BSAuditToken tokenFromAuditToken:](BSAuditToken, "tokenFromAuditToken:", buf));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[BSProcessHandle processHandleForAuditToken:](BSProcessHandle, "processHandleForAuditToken:", v4));

  v6 = objc_msgSend(objc_alloc((Class)BSMachPortSendRight), "initWithPort:", a1);
  v7 = objc_msgSend(v6, "isUsable");
  v8 = (int)v7;
  v9 = BKLogBacklight(v7);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Beginning explicit brightness transaction on behalf of %{public}@", buf, 0xCu);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name"));
    v13 = v12;
    if (!v12)
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
    v11 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@:%d"), v13, objc_msgSend(v5, "pid")));
    if (!v12)

    v14 = [BKDisplayBrightnessUpdateTransaction alloc];
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessUpdateTransactionManager sharedInstance](BKDisplayBrightnessUpdateTransactionManager, "sharedInstance"));
    v16 = -[BKDisplayBrightnessUpdateTransaction initWithIdentifier:transactionManager:](v14, "initWithIdentifier:transactionManager:", v11, v15);

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10002A3D4;
    v20[3] = &unk_1000ECDA8;
    v21 = v16;
    v17 = v16;
    +[BSPortDeathSentinel monitorSendRight:withHandler:](BSPortDeathSentinel, "monitorSendRight:withHandler:", v6, v20);

    v18 = 0;
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Ignoring explicit brightness transaction request because sender is invalid: %{public}@", buf, 0xCu);
    }
    v18 = 5;
  }

  return v18;
}

id sub_10002A3D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_10002A3DC(uint64_t a1)
{
  double v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessUpdateTransactionManager sharedInstance](BKDisplayBrightnessUpdateTransactionManager, "sharedInstance"));
  LODWORD(v2) = *(_DWORD *)(a1 + 32);
  objc_msgSend(v3, "setDisplayBrightness:permanently:", *(_BYTE *)(a1 + 36) != 0, v2);

}

void sub_10002A42C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  objc_msgSend(v2, "setDisplayBrightnessCurve:", *(unsigned __int8 *)(a1 + 32));

}

void sub_10002A470(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  objc_msgSend(v2, "setAutoBrightnessEnabled:", *(_BYTE *)(a1 + 32) != 0);

}

uint64_t sub_10002A4BC(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, _OWORD *a5)
{
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSSet *v30;
  void *v31;
  id v32;
  NSObject *v33;
  id v34;
  NSObject *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  id v44;
  id v45;
  id v46;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint8_t v57[128];
  _BYTE buf[32];

  v10 = sub_10002A8B4((uint64_t)a5);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  if (objc_msgSend(v11, "count"))
  {
    v13 = objc_opt_class(BKSHIDEventSenderDescriptor, v12);
    v14 = sub_10002A954((uint64_t)"SetPersistentServiceProperties", v13, a1, a2);
    v16 = objc_claimAutoreleasedReturnValue(v14);
    if (v16)
    {
      v51 = v11;
      v52 = (void *)objc_opt_class(NSDictionary, v15);
      v18 = objc_opt_class(NSNumber, v17);
      v20 = objc_opt_class(NSDate, v19);
      v22 = objc_opt_class(NSData, v21);
      v24 = objc_opt_class(NSString, v23);
      v26 = objc_opt_class(NSSet, v25);
      v28 = objc_opt_class(NSArray, v27);
      v30 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v18, v20, v22, v24, v26, v28, objc_opt_class(NSDictionary, v29), 0);
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      v32 = sub_10002AB4C((uint64_t)"SetPersistentServiceProperties", v52, v31, a3, a4);
      v33 = objc_claimAutoreleasedReturnValue(v32);

      if (v33 && CFPropertyListIsValid(v33, kCFPropertyListXMLFormat_v1_0))
      {
        v34 = sub_1000599A0();
        v35 = objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          v36 = a5[1];
          *(_OWORD *)buf = *a5;
          *(_OWORD *)&buf[16] = v36;
          v37 = BSVersionedPIDForAuditToken(buf);
          v38 = BSProcessDescriptionForPID(v37);
          v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          *(_DWORD *)buf = 138543874;
          *(_QWORD *)&buf[4] = v39;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v33;
          *(_WORD *)&buf[22] = 2114;
          *(_QWORD *)&buf[24] = v16;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "SetPersistentServiceProperties process:%{public}@ set:%{public}@ for senders matching:%{public}@", buf, 0x20u);

        }
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v11 = v51;
        v40 = v51;
        v41 = (uint64_t)-[NSObject countByEnumeratingWithState:objects:count:](v40, "countByEnumeratingWithState:objects:count:", &v53, v57, 16);
        if (v41)
        {
          v42 = *(_QWORD *)v54;
          do
          {
            for (i = 0; i != v41; ++i)
            {
              if (*(_QWORD *)v54 != v42)
                objc_enumerationMutation(v40);
              objc_msgSend(*(id *)(*((_QWORD *)&v53 + 1) + 8 * i), "setPersistentProperties:forSenderDescriptor:", v33, v16);
            }
            v41 = (uint64_t)-[NSObject countByEnumeratingWithState:objects:count:](v40, "countByEnumeratingWithState:objects:count:", &v53, v57, 16);
          }
          while (v41);
        }
      }
      else
      {
        v45 = sub_1000599A0();
        v40 = objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v33;
          _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "SetPersistentServiceProperties: bad properties %{public}@", buf, 0xCu);
        }
        v41 = 5;
        v11 = v51;
      }

    }
    else
    {
      v46 = sub_1000599A0();
      v33 = objc_claimAutoreleasedReturnValue(v46);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "SetPersistentServiceProperties failed to decode sender descriptor", buf, 2u);
      }
      v41 = 5;
    }

  }
  else
  {
    v44 = sub_1000599A0();
    v16 = objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v48 = BSPIDForAuditToken(a5);
      v49 = BSProcessDescriptionForPID(v48);
      v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v50;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "SetPersistentServiceProperties: %{public}@ is not entitled", buf, 0xCu);

    }
    v41 = 5;
  }

  return v41;
}

id sub_10002A8B4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKIOHIDServicePersistentPropertyController sharedInstances](BKIOHIDServicePersistentPropertyController, "sharedInstances"));
  if ((sub_1000125C8(BKBackBoardClientEntitlement, a1) & 1) == 0)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10002AD20;
    v5[3] = &unk_1000EA208;
    v5[4] = a1;
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bs_filter:", v5));

    v2 = (void *)v3;
  }
  return v2;
}

id sub_10002A954(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  NSObject *v20;
  __int16 v21;
  id v22;

  if (a3 && a4)
  {
    v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", a3, a4, 0);
    if (v6)
    {
      v14 = 0;
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[BSProtobufSerialization decodeObjectOfClass:fromData:error:](BSProtobufSerialization, "decodeObjectOfClass:fromData:error:", a2, v6, &v14));
      v8 = v14;
      if (v7)
      {
LABEL_14:

        goto LABEL_15;
      }
      v9 = sub_1000599A0();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        v16 = a1;
        v17 = 2114;
        v18 = a2;
        v19 = 2114;
        v20 = v8;
        v21 = 2114;
        v22 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s: %{public}@ failed to protobuf decode (error:%{public}@) %{public}@", buf, 0x2Au);
      }
    }
    else
    {
      v12 = sub_1000599A0();
      v10 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v16 = a1;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s: could not get data", buf, 0xCu);
      }
      v8 = 0;
    }

    v7 = 0;
    goto LABEL_14;
  }
  v11 = sub_1000599A0();
  v8 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v16 = a1;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s: not specified", buf, 0xCu);
  }
  v7 = 0;
LABEL_15:

  return v7;
}

id sub_10002AB4C(uint64_t a1, void *a2, void *a3, uint64_t a4, unsigned int a5)
{
  id v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  id v19;
  int v21;
  uint64_t v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  NSObject *v26;

  v9 = a3;
  if (!a4 || !a5)
  {
    v13 = sub_1000599A0();
    v10 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v21 = 136446210;
      v22 = a1;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s: not specified", (uint8_t *)&v21, 0xCu);
    }
    goto LABEL_12;
  }
  v10 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", a4, a5, 0);
  if (!v10)
  {
    v14 = sub_1000599A0();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
LABEL_11:

LABEL_12:
      v12 = 0;
      goto LABEL_13;
    }
    v21 = 136446210;
    v22 = a1;
    v16 = "%{public}s: could not get data";
    v17 = v15;
    v18 = 12;
LABEL_15:
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v21, v18);
    goto LABEL_11;
  }
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "bs_secureDecodedFromData:withAdditionalClasses:", v10, v9));
  if (!v11)
  {
    v19 = sub_1000599A0();
    v15 = objc_claimAutoreleasedReturnValue(v19);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    v21 = 136446722;
    v22 = a1;
    v23 = 2114;
    v24 = a2;
    v25 = 2114;
    v26 = v10;
    v16 = "%{public}s: %{public}@ failed to secure decode %{public}@";
    v17 = v15;
    v18 = 32;
    goto LABEL_15;
  }
  v12 = (void *)v11;
LABEL_13:

  return v12;
}

BOOL sub_10002AD20(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "clientEntitlement"));
  v4 = sub_10001261C(v3, *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t sub_10002AD60(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, _QWORD *a5, _DWORD *a6, uint64_t a7)
{
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSSet *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *i;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  id v37;
  id v38;
  uint64_t v39;
  void *j;
  void *v41;
  void *v42;
  id v43;
  NSObject *v44;
  id v45;
  uint64_t v46;
  id v47;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _DWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[128];
  uint8_t v63[128];
  uint8_t buf[4];
  id v65;

  v14 = sub_10002A8B4(a7);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  if (objc_msgSend(v15, "count"))
  {
    v53 = a6;
    v17 = objc_opt_class(BKSHIDEventSenderDescriptor, v16);
    v18 = sub_10002A954((uint64_t)"GetPersistentServiceProperties", v17, a1, a2);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    v21 = (void *)objc_opt_class(NSSet, v20);
    v23 = +[NSSet setWithObject:](NSSet, "setWithObject:", objc_opt_class(NSString, v22));
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    v25 = sub_10002AB4C((uint64_t)"GetPersistentServiceProperties", v21, v24, a3, a4);
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);

    v27 = objc_msgSend(v26, "count");
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v28 = v26;
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v58, v63, 16);
    if (v29)
    {
      v31 = v29;
      v32 = *(_QWORD *)v59;
      while (2)
      {
        for (i = 0; i != v31; i = (char *)i + 1)
        {
          if (*(_QWORD *)v59 != v32)
            objc_enumerationMutation(v28);
          v34 = *(_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * (_QWORD)i);
          v35 = objc_opt_class(NSString, v30);
          if ((objc_opt_isKindOfClass(v34, v35) & 1) == 0)
          {

            goto LABEL_26;
          }
        }
        v31 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v58, v63, 16);
        if (v31)
          continue;
        break;
      }
    }

    if (v27)
    {
      if (!v19)
      {
LABEL_29:

        v46 = 0;
        goto LABEL_33;
      }
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v36 = v15;
      v37 = -[NSObject countByEnumeratingWithState:objects:count:](v36, "countByEnumeratingWithState:objects:count:", &v54, v62, 16);
      if (v37)
      {
        v38 = v37;
        v39 = *(_QWORD *)v55;
        while (2)
        {
          for (j = 0; j != v38; j = (char *)j + 1)
          {
            if (*(_QWORD *)v55 != v39)
              objc_enumerationMutation(v36);
            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v54 + 1) + 8 * (_QWORD)j), "persistentPropertiesForKeys:forSenderDescriptor:", v28, v19));
            if (objc_msgSend(v41, "count"))
            {
              v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "bs_secureEncoded"));
              if (v42)
              {
                v49 = v42;
                *a5 = objc_msgSend(v42, "bs_bytesForMIG");
                *v53 = objc_msgSend(v49, "bs_lengthForMIG");

                goto LABEL_28;
              }
              v43 = sub_1000599A0();
              v44 = objc_claimAutoreleasedReturnValue(v43);
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "GetPersistentServiceProperties failed to encode properties", buf, 2u);
              }

            }
          }
          v38 = -[NSObject countByEnumeratingWithState:objects:count:](v36, "countByEnumeratingWithState:objects:count:", &v54, v62, 16);
          if (v38)
            continue;
          break;
        }
      }
    }
    else
    {
LABEL_26:
      v45 = sub_1000599A0();
      v36 = objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v65 = v28;
        _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "GetPersistentServiceProperties: bad property keys %{public}@", buf, 0xCu);
      }
    }
LABEL_28:

    goto LABEL_29;
  }
  v47 = sub_1000599A0();
  v19 = objc_claimAutoreleasedReturnValue(v47);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    v50 = BSPIDForAuditToken(a7);
    v51 = BSProcessDescriptionForPID(v50);
    v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
    *(_DWORD *)buf = 138543362;
    v65 = v52;
    _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "GetPersistentServiceProperties: %{public}@ is not entitled", buf, 0xCu);

  }
  v46 = 5;
LABEL_33:

  return v46;
}

void sub_10002B148(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  _BOOL8 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSSet *v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t isKindOfClass;
  NSObject *v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *i;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t v47[128];
  _BYTE buf[32];

  v6 = +[BKSecurityManager hasEntitlement:forAuditToken:](BKSecurityManager, "hasEntitlement:forAuditToken:", BKSetAuthenticatedTouchesEntitlement, a3);
  v7 = a3[1];
  *(_OWORD *)buf = *a3;
  *(_OWORD *)&buf[16] = v7;
  v8 = BSVersionedPIDForAuditToken(buf);
  if (!a1 || !a2)
  {
    v30 = BKLogTouchEvents(v8);
    v11 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "_BKHIDXXTouchAddAuthenticationSpecifications";
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s: nil authspec data", buf, 0xCu);
    }
    goto LABEL_25;
  }
  v9 = v8;
  v11 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", a1, a2, 0);
  if (!v11)
  {
    v33 = BKLogTouchEvents(0);
    v16 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "_BKHIDXXTouchAddAuthenticationSpecifications";
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s: invalid authentication spec data received", buf, 0xCu);
    }
    goto LABEL_24;
  }
  v12 = objc_opt_class(NSSet, v10);
  v14 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v12, objc_opt_class(BKSTouchAuthenticationSpecification, v13), 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  v16 = objc_claimAutoreleasedReturnValue(+[NSObject bs_secureObjectFromData:ofClasses:](NSObject, "bs_secureObjectFromData:ofClasses:", v11, v15));

  v18 = objc_opt_class(NSSet, v17);
  isKindOfClass = objc_opt_isKindOfClass(v16, v18);
  if ((isKindOfClass & 1) == 0 || (isKindOfClass = (uint64_t)-[NSObject count](v16, "count")) == 0)
  {
    v31 = BKLogTouchEvents(isKindOfClass);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "_BKHIDXXTouchAddAuthenticationSpecifications";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%s: error corrupt authspec structure (%{public}@)", buf, 0x16u);
    }

LABEL_24:
    goto LABEL_25;
  }
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v20 = v16;
  v21 = -[NSObject countByEnumeratingWithState:objects:count:](v20, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (v21)
  {
    v23 = v21;
    v24 = *(_QWORD *)v44;
    while (2)
    {
      for (i = 0; i != v23; i = (char *)i + 1)
      {
        if (*(_QWORD *)v44 != v24)
          objc_enumerationMutation(v20);
        v26 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
        v27 = objc_opt_class(BKSTouchAuthenticationSpecification, v22);
        v28 = v26;
        v29 = v28;
        if (!v27 || (objc_opt_isKindOfClass(v28, v27) & 1) == 0)
        {

          goto LABEL_27;
        }

        if (!v29)
          goto LABEL_27;
      }
      v23 = -[NSObject countByEnumeratingWithState:objects:count:](v20, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
      if (v23)
        continue;
      break;
    }
  }
LABEL_27:

  v34 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
  v36 = objc_msgSend(v34, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v35));
  v37 = (void *)objc_claimAutoreleasedReturnValue(v36);

  v39 = BKLogTouchEvents(v38);
  v40 = objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    v41 = NSStringFromBSVersionedPID(v9);
    v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)&buf[4] = v42;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v6;
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v20;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "pid:%{public}@ adding (entitled:%{BOOL}u) slot registrations %{public}@", buf, 0x1Cu);

  }
  objc_msgSend(v37, "addTouchAuthenticationSpecifications:registrantEntitled:", v20, v6);

  v11 = v20;
LABEL_25:

}

void sub_10002B55C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  uint8_t buf[4];
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDUISensorController sharedInstance](BKHIDUISensorController, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "sensorCharacteristics"));
  v4 = objc_msgSend(v3, "copy");
  v9 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[BSProtobufSerialization encodeObject:error:](BSProtobufSerialization, "encodeObject:error:", v4, &v9));
  v6 = v9;

  if (v5)
  {
    **(_QWORD **)(a1 + 32) = objc_msgSend(v5, "bs_bytesForMIG");
    **(_DWORD **)(a1 + 40) = objc_msgSend(v5, "bs_lengthForMIG");
  }
  else
  {
    **(_QWORD **)(a1 + 32) = 0;
    **(_DWORD **)(a1 + 40) = 0;
    v7 = sub_1000599A0();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "cannot encode: %{public}@", buf, 0xCu);
    }

  }
}

void sub_10002B6B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;

  v2 = BSPIDForAuditToken(a1 + 32);
  if ((int)v2 >= 2)
  {
    v3 = v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v6 = objc_msgSend(v4, "eventProcessorOfClass:", objc_opt_class(BKHIDTouchSensitiveButtonEventProcessor, v5));
    v7 = (id)objc_claimAutoreleasedReturnValue(v6);

    objc_msgSend(v7, "setScanningActive:buttonIdentifier:forPID:", *(_DWORD *)(a1 + 64) != 0, *(unsigned int *)(a1 + 68), v3);
  }
}

void sub_10002B758(uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4)
{
  _BOOL8 v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  NSObject *v26;

  v8 = sub_10001261C(BKMessageAuthenticationVerificationEntitlement, a4);
  if (v8 || (v8 = sub_10001261C(BKMessageAuthenticationKeyEntitlement, a4)))
  {
    if (a1 && a2)
    {
      v10 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", a1, a2, 0);
      if (v10)
      {
        v22 = 0;
        v11 = +[BSProtobufSerialization decodeObjectOfClass:fromData:error:](BSProtobufSerialization, "decodeObjectOfClass:fromData:error:", objc_opt_class(BKSHIDEventAuthenticationMessage, v9), v10, &v22);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        v13 = v22;
        v14 = v13;
        if (v12)
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDSystemInterface sharedInstance](BKHIDSystemInterface, "sharedInstance"));
          v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "deliveryManager"));

          v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject authenticationOriginator](v16, "authenticationOriginator"));
          v18 = objc_msgSend(v17, "validateMessage:", v12);

        }
        else
        {
          v21 = BKLogCommon(v13);
          v16 = objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v24 = "_BKHIDXXVerifyEventAuthenticationMessage";
            v25 = 2114;
            v26 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s: Error decoding message (%{public}@)", buf, 0x16u);
          }
          v18 = 0;
        }

      }
      else
      {
        v20 = BKLogCommon(0);
        v14 = objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v24 = "_BKHIDXXVerifyEventAuthenticationMessage";
          v25 = 2114;
          v26 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s: Cannot create data from message (%{public}@)", buf, 0x16u);
        }
        v18 = 0;
      }

    }
    else
    {
      v19 = BKLogCommon(v8);
      v10 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v24 = "_BKHIDXXVerifyEventAuthenticationMessage";
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s: no data received", buf, 0xCu);
      }
      v18 = 0;
    }

    if (a3)
      goto LABEL_22;
  }
  else
  {
    v18 = 0;
    if (a3)
LABEL_22:
      *a3 = v18;
  }
}

__CFString *sub_10002DA38(uint64_t a1)
{
  __CFString *v1;

  if (!a1)
    return CFSTR("silent");
  if (a1 == 1)
    v1 = CFSTR("tone1");
  else
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("unknown:%lX"), a1));
  return v1;
}

void sub_10002E0C0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeObserver:forKeyPath:", *(_QWORD *)(a1 + 32), CFSTR("bounds"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setLayer:", 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "invalidate");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

}

void sub_10002E118(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  double v7;
  void *v8;
  CGColorSpace *DeviceRGB;
  CGColorSpace *v10;
  CGColorRef v11;
  CGColorRef v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[3];
  _QWORD v16[3];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "addObserver:forKeyPath:options:context:", *(_QWORD *)(a1 + 32), CFSTR("bounds"), 0, 0);
  v15[0] = kCAContextDisplayable;
  v15[1] = kCAContextSecure;
  v16[0] = kCFBooleanTrue;
  v16[1] = kCFBooleanTrue;
  v15[2] = kCAContextDisplayId;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "displayId")));
  v16[2] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 3));

  v4 = objc_claimAutoreleasedReturnValue(+[CAContext remoteContextWithOptions:](CAContext, "remoteContextWithOptions:", v3));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 16);
  *(_QWORD *)(v5 + 16) = v4;

  LODWORD(v7) = 2139095039;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setLevel:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[CALayer layer](CALayer, "layer"));
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v13 = xmmword_1000B3B18;
  v14 = unk_1000B3B28;
  if (DeviceRGB)
  {
    v10 = DeviceRGB;
    v11 = CGColorCreate(DeviceRGB, (const CGFloat *)&v13);
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v8, "setBackgroundColor:", v11, v13, v14);
      CFRelease(v12);
    }
    CFRelease(v10);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setLayer:", v8, v13, v14);
  objc_msgSend(*(id *)(a1 + 32), "_updateBounds");

}

void sub_10002F1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_10002F9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_10002FC7C(_QWORD *a1)
{
  id v2;
  NSObject *v3;
  unint64_t v4;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 v11;
  id v12;
  id v13;
  NSObject *v14;
  unint64_t v15;
  __CFString *v16;
  __CFString *v17;
  void *v18;
  id v19;
  uint8_t buf[4];
  __CFString *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  id v25;

  v2 = sub_100059844();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[5];
    if (v4 > 0x10)
      v5 = CFSTR("<unknown>");
    else
      v5 = off_1000EA328[v4];
    v6 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1[6]));
    *(_DWORD *)buf = 138543618;
    v21 = v6;
    v22 = 2114;
    v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "playing clickState:%{public}@ clickSpeed:%{public}@", buf, 0x16u);

  }
  v8 = a1[5];
  v9 = *(void **)(a1[4] + 40);
  v10 = a1[6];
  v19 = 0;
  v11 = objc_msgSend(v9, "playState:forSpeed:error:", v8, v10, &v19);
  v12 = v19;
  if ((v11 & 1) == 0)
  {
    v13 = sub_100059844();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = a1[5];
      if (v15 > 0x10)
        v16 = CFSTR("<unknown>");
      else
        v16 = off_1000EA328[v15];
      v17 = v16;
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1[6]));
      *(_DWORD *)buf = 138543874;
      v21 = v17;
      v22 = 2114;
      v23 = v18;
      v24 = 2114;
      v25 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "error playing clickState:%{public}@ clickSpeed:%{public}@ -- %{public}@", buf, 0x20u);

    }
  }

}

void sub_10002FE60(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), "setEnabled:", 0, (_QWORD)v7);
        objc_msgSend(*(id *)(a1 + 32), "_queue_applyConfigurationChanges");
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

id sub_10002FF5C(uint64_t a1)
{
  dispatch_group_wait(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 56), 0xFFFFFFFFFFFFFFFFLL);
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_applyDefinitions:", *(_QWORD *)(a1 + 40));
}

void sub_10002FF8C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BOOL8 v14;
  _BOOL8 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t IsYes;
  void *v21;
  id v22;
  id v23;

  v23 = a3;
  switch(a2)
  {
    case 10:
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 0));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 1));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 2));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 3));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 4));
      v10 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
      v11 = 5;
      goto LABEL_4;
    case 11:
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 6));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 7));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 8));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 9));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 10));
      v10 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
      v11 = 11;
LABEL_4:
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", v11));
      v13 = (uint64_t)objc_msgSend(v23, "integerValue");
      v14 = v13 > 0;
      objc_msgSend(v5, "setEnabled:", v14);
      objc_msgSend(v6, "setEnabled:", v14);
      objc_msgSend(v7, "setEnabled:", v13 > 1);
      objc_msgSend(v8, "setEnabled:", v13 > 1);
      v15 = v13 > 2;
      objc_msgSend(v9, "setEnabled:", v15);
      objc_msgSend(v12, "setEnabled:", v15);
      goto LABEL_12;
    case 12:
      objc_msgSend(v23, "doubleValue");
      v17 = v16;
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 2));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 4));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 8));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 10));
      objc_msgSend(v5, "setMinimumTimeInterval:", v17);
      objc_msgSend(v6, "setMinimumTimeInterval:", v17);
      objc_msgSend(v7, "setMinimumTimeInterval:", v17);
      objc_msgSend(v8, "setMinimumTimeInterval:", v17);
      goto LABEL_13;
    case 13:
      objc_msgSend(v23, "doubleValue");
      v19 = v18;
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 2));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 4));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 8));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 10));
      objc_msgSend(v5, "setMaximumTimeInterval:", v19);
      objc_msgSend(v6, "setMaximumTimeInterval:", v19);
      objc_msgSend(v7, "setMaximumTimeInterval:", v19);
      objc_msgSend(v8, "setMaximumTimeInterval:", v19);
      goto LABEL_13;
    case 14:
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 14));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 15));
      objc_msgSend(v23, "doubleValue");
      objc_msgSend(v5, "setMinimumTimeInterval:");
      goto LABEL_9;
    case 15:
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 14));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 15));
      objc_msgSend(v23, "doubleValue");
      objc_msgSend(v5, "setMaximumTimeInterval:");
LABEL_9:
      if (objc_msgSend(*(id *)(a1 + 40), "isLongPressEnabled") != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        IsYes = BSSettingFlagIsYes();
        objc_msgSend(v5, "setEnabled:", IsYes);
        objc_msgSend(v6, "setEnabled:", IsYes);
      }
      goto LABEL_14;
    case 16:
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 0));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 1));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 2));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 3));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 4));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 5));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 15));
      v22 = objc_msgSend(v23, "integerValue");
      objc_msgSend(v5, "setAssetType:", v22);
      objc_msgSend(v6, "setAssetType:", v22);
      objc_msgSend(v7, "setAssetType:", v22);
      objc_msgSend(v8, "setAssetType:", v22);
      objc_msgSend(v9, "setAssetType:", v22);
      objc_msgSend(v12, "setAssetType:", v22);
      objc_msgSend(v21, "setAssetType:", v22);

LABEL_12:
LABEL_13:

LABEL_14:
      break;
    default:
      break;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;

}

id sub_1000304C4(id a1, id a2)
{
  unint64_t v2;

  v2 = (unint64_t)objc_msgSend(a2, "integerValue");
  if (v2 > 0x10)
    return CFSTR("<unknown>");
  else
    return off_1000EA328[v2];
}

id sub_1000304FC(id a1, id a2)
{
  unint64_t v2;

  v2 = (unint64_t)objc_msgSend(a2, "integerValue");
  if (v2 > 0x10)
    return CFSTR("<unknown>");
  else
    return off_1000EA328[v2];
}

id sub_100030534(id a1, id a2)
{
  unint64_t v2;

  v2 = (unint64_t)objc_msgSend(a2, "integerValue");
  if (v2 > 0x10)
    return CFSTR("<unknown>");
  else
    return off_1000EA328[v2];
}

void sub_10003056C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;

  if ((unint64_t)(a2 - 4) < 2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    goto LABEL_6;
  }
  v2 = a2;
  if (a2 == 2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "isEnabled");
  }
  else
  {
    if (a2 == 3)
    {
      v3 = *(_QWORD *)(a1 + 48);
LABEL_6:
      *(_BYTE *)(*(_QWORD *)(v3 + 8) + 24) = 1;
      return;
    }
    v4 = sub_100059844();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 136315394;
      v7 = "-[BKButtonHapticsController _queue_addChangesForPendingState:configuredState:toStates:configs:assets:enable:d"
           "isable:]_block_invoke";
      v8 = 1024;
      v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s did you really intend to change setting %d?", (uint8_t *)&v6, 0x12u);
    }

  }
}

const __CFString *sub_100030684(uint64_t a1)
{
  const __CFString *result;

  switch(a1)
  {
    case 0:
      result = CFSTR("<default>");
      break;
    case 1:
      result = CFSTR("variant1/single/normal");
      break;
    case 2:
      result = CFSTR("variant1/single/soft");
      break;
    case 3:
      result = CFSTR("variant1/double/normal");
      break;
    case 4:
      result = CFSTR("variant1/double/soft");
      break;
    case 5:
      result = CFSTR("variant2/single/normal");
      break;
    case 6:
      result = CFSTR("variant2/single/soft");
      break;
    case 7:
      result = CFSTR("variant2/double/normal");
      break;
    case 8:
      result = CFSTR("variant2/double/soft");
      break;
    case 9:
      result = CFSTR("variant3/single/normal");
      break;
    case 10:
      result = CFSTR("variant3/single/soft");
      break;
    case 11:
      result = CFSTR("variant3/double/normal");
      break;
    case 12:
      result = CFSTR("variant3/double/soft");
      break;
    case 13:
      result = CFSTR("variant1/single/semisoft");
      break;
    case 14:
      result = CFSTR("variant1/double/semisoft");
      break;
    case 15:
      result = CFSTR("variant2/single/semisoft");
      break;
    case 16:
      result = CFSTR("variant2/double/semisoft");
      break;
    case 17:
      result = CFSTR("variant3/single/semisoft");
      break;
    case 18:
      result = CFSTR("variant3/double/semisoft");
      break;
    default:
      if (a1 == 100)
        result = CFSTR("latch");
      else
        result = CFSTR("<unknown>");
      break;
  }
  return result;
}

uint64_t sub_1000307A4(uint64_t a1)
{
  dispatch_group_wait(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 56), 0xFFFFFFFFFFFFFFFFLL);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1000307DC(uint64_t a1)
{
  dispatch_group_wait(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 56), 0xFFFFFFFFFFFFFFFFLL);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100030814(uint64_t a1)
{
  unsigned int v2;
  id v3;
  NSObject *v4;
  _DWORD v5[2];

  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 56));
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "maxAssetSlots");
  v3 = sub_100059844();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "_BRController ready: device haptic asset slot count:%d", (uint8_t *)v5, 8u);
  }

}

void sub_1000308D0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", 16));
  objc_msgSend(v2, "setEnabled:", 1);
  objc_msgSend(*(id *)(a1 + 32), "_queue_applyConfigurationChanges");

}

void sub_100030994(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_100117258;
  qword_100117258 = (uint64_t)v1;

}

uint64_t sub_1000316B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100032478(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observer"));
  if ((objc_opt_respondsToSelector(v2, "mousePointerIOHIDServicesRemoved:") & 1) != 0)
    objc_msgSend(v2, "mousePointerIOHIDServicesRemoved:", *(_QWORD *)(a1 + 40));

}

void sub_1000324CC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observer"));
  if ((objc_opt_respondsToSelector(v2, "mousePointerIOHIDServicesAdded:") & 1) != 0)
    objc_msgSend(v2, "mousePointerIOHIDServicesAdded:", *(_QWORD *)(a1 + 40));

}

void sub_100032520(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observer"));
  if ((objc_opt_respondsToSelector(v2, "mousePointerDeviceAvailabilityMonitorDidChangeAvailability:") & 1) != 0)
    objc_msgSend(v2, "mousePointerDeviceAvailabilityMonitorDidChangeAvailability:", *(_QWORD *)(a1 + 40));

}

id sub_100032574(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "mousePointerIOHIDServicesAdded:", *(_QWORD *)(a1 + 40));
}

id sub_100032580(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "mousePointerDeviceAvailabilityMonitorDidChangeAvailability:", *(_QWORD *)(a1 + 40));
}

void sub_1000326D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000328D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100032AB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100032B10(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_didRespondToTouchDelivery");

}

void sub_100032B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100032CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100032DEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100032F50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000330F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000331E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100033298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_100033358(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_postUpdate:toProcessPID:", *(_QWORD *)(a1 + 40), a2);
}

void sub_100033368(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v10;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v2);
        v6 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v5);
        if (v6)
        {
          if ((*(_BYTE *)(v6 + 32) & 1) != 0)
          {
            v7 = objc_msgSend(*(id *)(a1 + 40), "_pidForClientPort:", *(unsigned int *)(v6 + 12), (_QWORD)v9);
            if ((_DWORD)v7 != -1)
            {
              v8 = objc_alloc_init((Class)BKSTouchDeliveryUpdate);
              objc_msgSend(v8, "setType:", 2);
              objc_msgSend(v8, "setPid:", v7);
              objc_msgSend(v8, "setContextID:", *(unsigned int *)(v6 + 8));
              objc_msgSend(v8, "setIsDetached:", 1);
              objc_msgSend(*(id *)(a1 + 40), "_queue_postUpdate:forTouchIdentifier:", v8, *(unsigned int *)(a1 + 48));

            }
          }
        }
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }

}

void sub_1000334DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100033510(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "removeIndex:", *(int *)(a1 + 32));
}

void sub_100033520(id a1)
{
  BKTouchDeliveryObservationManager *v1;
  void *v2;

  v1 = objc_alloc_init(BKTouchDeliveryObservationManager);
  v2 = (void *)qword_100117260;
  qword_100117260 = (uint64_t)v1;

}

__CFString *sub_100033548(uint64_t a1)
{
  if (a1 >= 5)
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<invalid:%X>"), a1));
  else
    return off_1000EA528[a1];
}

void sub_100033598(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  __CFString *v5;
  id v6;

  v3 = **(unsigned int **)(a1 + 32);
  v4 = a2;
  v5 = sub_100033548(v3);
  v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  objc_msgSend(v4, "appendFormat:", CFSTR("%@ (%d)"), v6, **(unsigned int **)(a1 + 32));

}

id sub_100033608(uint64_t a1, int a2, int a3, void *a4)
{
  _QWORD *v5;
  _QWORD v7[5];
  int v8;
  int v9;
  _QWORD v10[5];

  if (a2 == 65280 && a3 == 102)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000336B4;
    v10[3] = &unk_1000EA738;
    v10[4] = a1;
    v5 = v10;
  }
  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000336E4;
    v7[3] = &unk_1000EA4E0;
    v7[4] = a1;
    v8 = a2;
    v9 = a3;
    v5 = v7;
  }
  return objc_msgSend(a4, "appendCustomFormatWithName:block:", 0, v5);
}

id sub_1000336B4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "appendFormat:", CFSTR("%llX/Tostada"), *(_QWORD *)(a1 + 32));
}

id sub_1000336E4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "appendFormat:", CFSTR("%llX/%X/%X"), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

uint64_t sub_10003371C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t TouchSensitiveButtonEvent;
  const void *ForceStageEvent;
  __n128 v12;

  TouchSensitiveButtonEvent = IOHIDEventCreateTouchSensitiveButtonEvent(kCFAllocatorDefault, a4, a3, a2, 0, 0, 0.0, 0.0);
  IOHIDEventSetSenderID(TouchSensitiveButtonEvent, a1);
  ForceStageEvent = (const void *)IOHIDEventCreateForceStageEvent(kCFAllocatorDefault, a4, a6, a5, 0, NAN, NAN, NAN, NAN, NAN);
  v12 = IOHIDEventSetSenderID(ForceStageEvent, a1);
  IOHIDEventAppendEvent(TouchSensitiveButtonEvent, ForceStageEvent, 0, v12);
  CFRelease(ForceStageEvent);
  return TouchSensitiveButtonEvent;
}

uint64_t sub_1000337E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v8;
  const void *VendorDefinedEvent;
  __n128 v10;
  _DWORD v12[2];
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  v12[0] = a6;
  v12[1] = a5;
  v13 = vdupq_n_s64(0x7FF8000000000000uLL);
  v14 = v13;
  v15 = 0x7FF8000000000000;
  v8 = IOHIDEventCreateVendorDefinedEvent(kCFAllocatorDefault, a4, a2, a3, 0, &v16, 8, 0);
  IOHIDEventSetSenderID(v8, a1);
  VendorDefinedEvent = (const void *)IOHIDEventCreateVendorDefinedEvent(kCFAllocatorDefault, a4, 65280, 17, 0, v12, 48, 0);
  v10 = IOHIDEventSetSenderID(VendorDefinedEvent, a1);
  IOHIDEventAppendEvent(v8, VendorDefinedEvent, 0, v10);
  CFRelease(VendorDefinedEvent);
  return v8;
}

void sub_1000338B4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[5];

  v2 = objc_msgSend(*(id *)(a1 + 32), "appendDouble:withName:decimalPrecision:", CFSTR("positionDelta"), 4, ***(double ***)(a1 + 40));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v11 = *(id *)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100033598;
  v12[3] = &unk_1000EA738;
  v12[4] = v3;
  objc_msgSend(v11, "appendCustomFormatWithName:block:", CFSTR("stage"), v12);
  v4 = NSStringFromBKSHIDForceStageTransition(*(unsigned int *)(v3 + 4));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v11, "appendString:withName:", v5, CFSTR("transition"));

  v6 = objc_msgSend(v11, "appendDouble:withName:decimalPrecision:", CFSTR("nextThreshold"), 4, *(double *)(v3 + 8));
  v7 = objc_msgSend(v11, "appendDouble:withName:decimalPrecision:", CFSTR("pressedThreshold"), 4, *(double *)(v3 + 16));
  v8 = objc_msgSend(v11, "appendDouble:withName:decimalPrecision:", CFSTR("releasedThreshold"), 4, *(double *)(v3 + 24));
  v9 = objc_msgSend(v11, "appendDouble:withName:decimalPrecision:", CFSTR("forceProgress"), 4, *(double *)(v3 + 32));
  v10 = objc_msgSend(v11, "appendDouble:withName:decimalPrecision:", CFSTR("forceProgressVelocity"), 4, *(double *)(v3 + 40));

}

id sub_100033A50(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];

  v2 = *(_DWORD *)(a1 + 96);
  v3 = *(void **)(a1 + 32);
  if (v2 == 42)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100033BF0;
    v13[3] = &unk_1000EA738;
    v13[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v3, "appendCustomFormatWithName:block:", 0, v13);
  }
  else
  {
    v4 = objc_msgSend(v3, "appendInteger:withName:", *(_QWORD *)(a1 + 40), CFSTR("stage"));
  }
  v5 = *(void **)(a1 + 32);
  v6 = NSStringFromBKSHIDForceStageTransition(*(unsigned int *)(a1 + 48));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(v5, "appendString:withName:", v7, CFSTR("transition"));

  if (!*(_BYTE *)(a1 + 100))
    v8 = objc_msgSend(*(id *)(a1 + 32), "appendDouble:withName:decimalPrecision:", CFSTR("nextThreshold"), 4, *(double *)(a1 + 56));
  if (!*(_BYTE *)(a1 + 101))
    v9 = objc_msgSend(*(id *)(a1 + 32), "appendDouble:withName:decimalPrecision:", CFSTR("pressedThreshold"), 4, *(double *)(a1 + 64));
  if (!*(_BYTE *)(a1 + 102))
    v10 = objc_msgSend(*(id *)(a1 + 32), "appendDouble:withName:decimalPrecision:", CFSTR("releasedThreshold"), 4, *(double *)(a1 + 72));
  v11 = objc_msgSend(*(id *)(a1 + 32), "appendDouble:withName:decimalPrecision:", CFSTR("progress"), 4, *(double *)(a1 + 80));
  return objc_msgSend(*(id *)(a1 + 32), "appendDouble:withName:decimalPrecision:", CFSTR("progressVelocity"), 4, *(double *)(a1 + 88));
}

id sub_100033BDC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "appendBodySectionWithName:block:", CFSTR("force"), *(_QWORD *)(a1 + 40));
}

void sub_100033BF0(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  __CFString *v5;
  id v6;

  v3 = *(unsigned int *)(a1 + 32);
  v4 = a2;
  v5 = sub_100033548(v3);
  v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  objc_msgSend(v4, "appendFormat:", CFSTR("%@ (%d)"), v6, *(_QWORD *)(a1 + 32));

}

BOOL sub_100033C58(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t Children;
  void *v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  unsigned __int16 IntegerValue;
  uint64_t v12;
  id v14;
  NSObject *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[8];
  _BYTE v22[128];

  v4 = sub_100033E60(a1, 8);
  if (v4)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    Children = IOHIDEventGetChildren(a1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(Children);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v18;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v18 != v8)
            objc_enumerationMutation(v6);
          v10 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
          IntegerValue = IOHIDEventGetIntegerValue(v10, 0x10000);
          v12 = (unsigned __int16)IOHIDEventGetIntegerValue(v10, 65537);
          if (IntegerValue == 65280 && v12 == 17)
          {
            v7 = (id)sub_100033E60(v10, 48);
            goto LABEL_15;
          }
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_15:

    *a2 = v4;
    a2[1] = (uint64_t)v7;
  }
  else
  {
    v14 = sub_100059844();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "data for TouchSensitiveButton event is corrupt", buf, 2u);
    }

  }
  return v4 != 0;
}

id sub_100033E04(uint64_t a1)
{
  uint64_t SenderID;
  int IntegerValue;
  int v4;

  SenderID = IOHIDEventGetSenderID(*(_QWORD *)(a1 + 40));
  IntegerValue = IOHIDEventGetIntegerValue(*(_QWORD *)(a1 + 40), 0x10000);
  v4 = IOHIDEventGetIntegerValue(*(_QWORD *)(a1 + 40), 65537);
  return sub_100033608(SenderID, IntegerValue, v4, *(void **)(a1 + 32));
}

uint64_t sub_100033E60(uint64_t a1, uint64_t a2)
{
  if (IOHIDEventGetType() == 1 && IOHIDEventGetIntegerValue(a1, 65539) >= a2)
    return IOHIDEventGetDataValue(a1, 65540);
  else
    return 0;
}

uint64_t sub_100033ED0(uint64_t a1)
{
  uint64_t Children;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  Children = IOHIDEventGetChildren(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(Children);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v10 != v5)
        objc_enumerationMutation(v2);
      v7 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v6);
      if (IOHIDEventGetType(v7) == 41)
        break;
      if (v4 == (id)++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v7 = 0;
  }

  return v7;
}

__CFString *sub_100033FCC(uint64_t a1)
{
  id v2;
  uint64_t SenderID;
  int IntegerValue;
  int v5;
  int v6;
  double DoubleValue;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  id v12;
  __CFString *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void ***v28;
  _QWORD v30[4];
  int v31;
  void **v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t *v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int v44;
  char v45;
  char v46;
  char v47;
  _QWORD v48[4];
  id v49;
  uint64_t v50;
  uint64_t v51[2];

  if (IOHIDEventGetType(a1) == 42)
  {
    v2 = objc_alloc_init((Class)BSDescriptionStream);
    SenderID = IOHIDEventGetSenderID(a1);
    IntegerValue = IOHIDEventGetIntegerValue(a1, 2752513);
    v5 = IOHIDEventGetIntegerValue(a1, 2752512);
    sub_100033608(SenderID, IntegerValue, v5, v2);
    v6 = IOHIDEventGetIntegerValue(a1, 2752517);
    DoubleValue = IOHIDEventGetDoubleValue(a1, 2752519);
    v8 = IOHIDEventGetDoubleValue(a1, 2752515);
    v9 = IOHIDEventGetDoubleValue(a1, 2752518);
    v10 = IOHIDEventGetDoubleValue(a1, 2752514);
    v11 = IOHIDEventGetIntegerValue(a1, 2752516);
    if (v6)
    {
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_1000344E4;
      v30[3] = &unk_1000EA718;
      v31 = v6;
      objc_msgSend(v2, "appendCustomFormatWithName:block:", CFSTR("eventMask"), v30);
    }
    else
    {
      objc_msgSend(v2, "appendString:withName:", CFSTR("()"), CFSTR("eventMask"));
    }
    v14 = objc_msgSend(v2, "appendPoint:withName:", CFSTR("position"), v9, v10);
    v15 = objc_msgSend(v2, "appendPoint:withName:", CFSTR("positionDelta"), DoubleValue, v8);
    v16 = objc_msgSend(v2, "appendBool:withName:", v11 > 0, CFSTR("touch"));
    v17 = sub_100033ED0(a1);
    if (v17)
    {
      v18 = v17;
      v19 = v2;
      if (IOHIDEventGetType(v18) == 41)
      {
        v20 = IOHIDEventGetDoubleValue(v18, 2686978);
        v21 = IOHIDEventGetDoubleValue(v18, 2686979);
        v22 = IOHIDEventGetDoubleValue(v18, 2686980);
        v23 = IOHIDEventGetDoubleValue(v18, 2686981);
        v24 = IOHIDEventGetDoubleValue(v18, 2686982);
        v25 = IOHIDEventGetIntegerValue(v18, 2686977);
        v26 = IOHIDEventGetIntegerValue(v18, 2686976);
        v32 = _NSConcreteStackBlock;
        v33 = 3221225472;
        v34 = sub_100033A50;
        v35 = &unk_1000EA508;
        v44 = 42;
        v27 = v19;
        v36 = v27;
        v37 = (uint64_t *)v26;
        v38 = v25;
        v45 = 0;
        v46 = 0;
        v39 = v20;
        v40 = v21;
        v47 = 0;
        v41 = v22;
        v42 = v23;
        v43 = v24;
        v28 = objc_retainBlock(&v32);
        objc_msgSend(v27, "appendBodySectionWithName:block:", CFSTR("force"), v28);

      }
      else
      {
        objc_msgSend(v19, "appendString:withName:", CFSTR("not a ForceStage event"), 0);
      }

    }
    else
    {
      objc_msgSend(v2, "appendString:withName:", CFSTR("<missing force subevent>"), 0);
    }
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "description"));
    goto LABEL_15;
  }
  v51[0] = 0;
  v51[1] = 0;
  if (sub_100033C58(a1, v51))
  {
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_100033E04;
    v48[3] = &unk_1000ECB60;
    v49 = objc_alloc_init((Class)BSDescriptionStream);
    v50 = a1;
    v12 = v49;
    objc_msgSend(v12, "appendProem:block:", 0, v48);
    v32 = _NSConcreteStackBlock;
    v33 = 3221225472;
    v34 = sub_1000338B4;
    v35 = &unk_1000ECB60;
    v36 = v12;
    v37 = v51;
    v2 = v36;
    objc_msgSend(v2, "appendBodySectionWithName:block:", 0, &v32);

    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "description"));
LABEL_15:

    return v13;
  }
  v13 = CFSTR("<not a TouchSensitiveButton event>");
  return v13;
}

void sub_1000344E4(uint64_t a1, void *a2)
{
  int v3;
  void *v4;
  int v5;
  id v6;

  v6 = a2;
  objc_msgSend(v6, "appendString:", CFSTR("("));
  v3 = *(_DWORD *)(a1 + 32);
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0)
    {
      v4 = v6;
      if ((v3 & 4) == 0)
      {
        if ((v3 & 8) == 0)
          goto LABEL_16;
        goto LABEL_15;
      }
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  objc_msgSend(v6, "appendString:", CFSTR("fastSwipe"));
  v5 = *(_DWORD *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    objc_msgSend(v6, "appendString:", CFSTR("|"));
LABEL_10:
    objc_msgSend(v6, "appendString:", CFSTR("lowSNRSwipe"));
    v4 = v6;
    v5 = *(_DWORD *)(a1 + 32);
    if ((v5 & 4) == 0)
      goto LABEL_13;
    goto LABEL_11;
  }
  v4 = v6;
  if ((v5 & 4) != 0)
  {
LABEL_11:
    objc_msgSend(v6, "appendString:", CFSTR("|"));
LABEL_12:
    objc_msgSend(v6, "appendString:", CFSTR("liftOffPredicted"));
    v4 = v6;
    v5 = *(_DWORD *)(a1 + 32);
  }
LABEL_13:
  if ((v5 & 8) != 0)
  {
    objc_msgSend(v6, "appendString:", CFSTR("|"));
LABEL_15:
    objc_msgSend(v6, "appendString:", CFSTR("clickDownPredicted"));
    v4 = v6;
  }
LABEL_16:
  objc_msgSend(v4, "appendString:", CFSTR(")"));

}

__CFString *sub_100034718(unsigned int a1)
{
  if (a1 >= 4)
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(%i)"), a1));
  else
    return *(&off_1000EA6B8 + a1);
}

void sub_100034884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000348CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000348DC(uint64_t a1)
{

}

void sub_1000348E4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "context"));
  v4 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "mutableCopy");
  objc_msgSend(v4, "minusSet:", v3);
  v5 = objc_msgSend(v3, "mutableCopy");
  objc_msgSend(v5, "minusSet:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v3);
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v21;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v21 != v9)
          objc_enumerationMutation(v6);
        sub_100034ACC(*(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v10), 1);
        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v8);
  }

  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v11 = v4;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v17;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v17 != v14)
          objc_enumerationMutation(v11);
        sub_100034ACC(*(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v15), 0);
        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
    }
    while (v13);
  }

}

void sub_100034ACC(void *a1, uint64_t a2)
{
  id v3;
  unsigned int v4;
  id v5;
  void *v6;
  id v7;
  id v8;

  v3 = a1;
  if (!v3
    || (v7 = v3,
        v4 = objc_msgSend(v3, "isEqualToString:", BKSDisplayUUIDMainKey),
        v7,
        v3 = v7,
        v4))
  {

    v3 = 0;
  }
  v8 = v3;
  v5 = sub_10000F5CC(v3, (uint64_t)"_BKDisplaySetDisabled");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  objc_msgSend(v6, "setDisabled:", a2);

}

void sub_100034B54(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "windowServerDisplay"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueId"));
  v2 = (void *)qword_100117278;
  qword_100117278 = v1;

}

id sub_100034B98(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void **v8;
  uint64_t v9;
  void (*v10)(uint64_t, void *, uint64_t, _BYTE *);
  void *v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v1 = a1;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = sub_1000348CC;
  v18 = sub_1000348DC;
  v19 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CADisplay displays](CADisplay, "displays"));
  v8 = _NSConcreteStackBlock;
  v9 = 3221225472;
  v10 = sub_100034CD0;
  v11 = &unk_1000EA558;
  v3 = v1;
  v12 = v3;
  v13 = &v14;
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", &v8);

  if (!v15[5] && sub_10000F94C(v3))
  {
    v4 = objc_claimAutoreleasedReturnValue(+[CADisplay mainDisplay](CADisplay, "mainDisplay", v8, v9, v10, v11));
    v5 = (void *)v15[5];
    v15[5] = v4;

  }
  v6 = (id)v15[5];

  _Block_object_dispose(&v14, 8);
  return v6;
}

void sub_100034CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100034CD0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  void *v9;
  id v10;

  v7 = a2;
  v8 = *(void **)(a1 + 32);
  v10 = v7;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uniqueId"));
  LODWORD(v8) = objc_msgSend(v8, "isEqualToString:", v9);

  if ((_DWORD)v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }

}

uint64_t sub_100034D5C(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", kCADisplayOrientationRotation90) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", kCADisplayOrientationRotation180) & 1) != 0)
  {
    v2 = 2;
  }
  else
  {
    v2 = (uint64_t)objc_msgSend(v1, "isEqualToString:", kCADisplayOrientationRotation270);
  }

  return v2;
}

void sub_100034DD8(uint64_t a1, void *a2)
{
  unsigned int v3;
  CGFloat v4;
  CGFloat v5;
  id v6;

  v3 = *(unsigned __int8 *)(a1 + 56);
  v4 = *(double *)(a1 + 32);
  v5 = *(double *)(a1 + 40);
  v6 = a2;
  sub_100034E3C(v3, v4, v5);
  objc_msgSend(v6, "setSize:");
  objc_msgSend(v6, "setScale:", *(double *)(a1 + 48));

}

void sub_100034E3C(unsigned int a1, CGFloat a2, CGFloat a3)
{
  uint64_t v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  NSString *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  NSSize v16;

  if ((a1 & 0xFFFFFFFD) == 1)
  {
    v6 = BKLogDisplay();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = sub_100034718(a1);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v16.width = a3;
      v16.height = a2;
      v10 = NSStringFromSize(v16);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v12 = 138543618;
      v13 = v9;
      v14 = 2114;
      v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Actually swapping the size because the display orientation is %{public}@ - new size:  %{public}@", (uint8_t *)&v12, 0x16u);

    }
  }
}

void sub_100034F4C(id a1)
{
  const __CFNumber *v1;
  const __CFNumber *v2;
  int v3;
  double v4;
  int valuePtr;

  valuePtr = 0;
  v1 = (const __CFNumber *)MGCopyAnswer(CFSTR("MainDisplayRotation"), 0);
  if (v1)
  {
    v2 = v1;
    CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
    CFRelease(v2);
    v3 = 11651 * ((360 - valuePtr) % 360);
    v4 = (double)(int)((v3 >> 20) + (v3 >> 31));
  }
  else
  {
    v4 = 0.0;
  }
  qword_1001172B0 = *(_QWORD *)&v4;
}

uint64_t sub_100034FF0(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  LODWORD(result) = dword_1001159B0;
  if (dword_1001159B0 != -1
    || (notify_register_check("com.apple.springboard.hasBlankedScreen", &dword_1001159B0),
        result = dword_1001159B0,
        dword_1001159B0 != -1))
  {
    notify_set_state(result, *(unsigned __int8 *)(v1 + 32));
    return notify_post("com.apple.springboard.hasBlankedScreen");
  }
  return result;
}

void sub_10003505C(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[BSDispatchQueueAttributes serial](BSDispatchQueueAttributes, "serial"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "serviceClass:", 33));
  v2 = BSDispatchQueueCreate(CFSTR("com.apple.backboardd.libnotify-workaround"), v1);
  v3 = (void *)qword_1001172C0;
  qword_1001172C0 = v2;

}

void sub_1000350C8(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_100117290;
  qword_100117290 = (uint64_t)v1;

}

void sub_1000350EC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v2 = BKLogDisplay(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v4;
    v9 = 2114;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ exited with display-disabled assertion on %{public}@, releasing", (uint8_t *)&v7, 0x16u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  sub_1000351E4(WeakRetained, *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 64));

}

id sub_1000351BC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  return objc_msgSend(*(id *)(a1 + 40), "invalidate");
}

BOOL sub_1000351E4(id *a1, void *a2, int a3, void *a4)
{
  os_unfair_lock_s *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  _BOOL8 v38;
  id v40;
  void *v41;
  id location;
  BOOL v43;
  _BYTE v44[24];
  void *v45;
  id v46;
  id v47;
  _BYTE buf[24];
  void *v49;
  id v50;
  id v51;
  id v52;
  id v53[3];

  if (!a1)
    return 0;
  v7 = (os_unfair_lock_s *)(a1 + 1);
  v8 = a2;
  os_unfair_lock_lock(v7);
  v9 = v8;
  os_unfair_lock_assert_owner(v7);
  v10 = v9;
  v11 = objc_msgSend(v10, "length");
  v12 = (void *)BKSDisplayUUIDMainKey;
  if (v11)
    v12 = v10;
  v13 = v12;

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a4));
  v15 = NSStringFromBSVersionedPID(a4);
  v41 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[2], "objectForKeyedSubscript:", v14));
  v17 = v16;
  if (a3)
  {
    if (!v16)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      objc_msgSend(a1[2], "setObject:forKeyedSubscript:", v17, v14);
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", v13));

    if (v18)
    {
      v20 = BKLogDisplay(v19);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v41;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}@ requested to disable %{public}@, but had existing assertion!", buf, 0x16u);
      }

      v43 = 0;
    }
    else
    {
      objc_initWeak(&location, a1);
      v26 = objc_alloc((Class)BSProcessDeathWatcher);
      v27 = &_dispatch_main_q;
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_1000350EC;
      v49 = &unk_1000EA610;
      v40 = v41;
      v50 = v40;
      v28 = v13;
      v51 = v28;
      objc_copyWeak(v53, &location);
      v52 = v10;
      v53[1] = a4;
      v29 = objc_msgSend(v26, "initWithPID:queue:deathHandler:", a4, &_dispatch_main_q, buf);

      v31 = BKLogDisplay(v30);
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v44 = 138543618;
        *(_QWORD *)&v44[4] = v40;
        *(_WORD *)&v44[12] = 2114;
        *(_QWORD *)&v44[14] = v28;
        _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%{public}@ acquiring display-disabled assertion on %{public}@", v44, 0x16u);
      }

      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[3], "acquireForReason:withContext:", v40, v28));
      v34 = objc_alloc((Class)BSSimpleAssertion);
      *(_QWORD *)v44 = _NSConcreteStackBlock;
      *(_QWORD *)&v44[8] = 3221225472;
      *(_QWORD *)&v44[16] = sub_1000351BC;
      v45 = &unk_1000EA638;
      v35 = v29;
      v46 = v35;
      v36 = v33;
      v47 = v36;
      v37 = objc_msgSend(v34, "initWithIdentifier:forReason:invalidationBlock:", v28, v40, v44);
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v37, v28);

      v43 = 1;
      objc_destroyWeak(v53);

      objc_destroyWeak(&location);
    }
  }
  else
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v13));
    v23 = BKLogDisplay(v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    v25 = v24;
    if (v22)
    {
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v41;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v13;
        _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "%{public}@ releasing display-disabled assertion on %{public}@", buf, 0x16u);
      }

      objc_msgSend(v22, "invalidate");
      if ((unint64_t)objc_msgSend(v17, "count") < 2)
        objc_msgSend(a1[2], "removeObjectForKey:", v14);
      else
        objc_msgSend(v17, "removeObjectForKey:", v13);
    }
    else
    {
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v41;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}@ requested to enable %{public}@ without previously disabling it!", buf, 0x16u);
      }

    }
    v43 = v22 != 0;

  }
  v38 = v43;

  os_unfair_lock_unlock(v7);
  return v38;
}

void sub_1000356F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, id a13)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a13);
  _Unwind_Resume(a1);
}

void sub_100035738(void *a1)
{
  id v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  NSObject *v5;
  _DWORD v6[2];

  v1 = sub_10000F5CC(a1, (uint64_t)"BKDisplayResetFlipBookEnabled");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = objc_msgSend(v2, "isFlipBookEnabled");
  v4 = BKLogDisplay();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BKDisplayResetFlipBookEnabled flipBookIsEnabled:%{BOOL}u", (uint8_t *)v6, 8u);
  }

  if (v3)
  {
    objc_msgSend(v2, "setFlipBookEnabled:", 0);
    objc_msgSend(v2, "setFlipBookEnabled:", 1);
  }

}

void sub_100035818(void *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  v2 = 0x3FF0000000000000;
  v1 = 0;
  sub_10000F834(a1, &v3, &v4, (double *)&v2, &v1, 0);
}

id sub_1000358C4(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CAWindowServer serverIfRunning](CAWindowServer, "serverIfRunning"));
  v3 = objc_msgSend(v2, "taskNamePortOfContextId:", a1);

  return v3;
}

void sub_100035908(id a1)
{
  _BKDisplayInfo *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _BKDisplayInfo *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  unsigned int v15;
  NSObject *v16;
  id v17;
  _BKDisplayInfo *v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  void *v24;
  double v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  uint64_t v34;
  NSObject *v35;
  __CFString *v36;
  void *v37;
  __CFString *v38;
  void *v39;
  id v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  NSObject *v52;
  NSString *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  _BKDisplayInfo *v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  void *v68;
  _BKDisplayInfo *v69;
  uint64_t v70;
  void *v71;
  uint8_t buf[4];
  _BYTE v73[10];
  double v74;
  __int16 v75;
  id v76;
  NSSize v77;

  v1 = objc_alloc_init(_BKDisplayInfo);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BSPathProviderFactory pathProviderForSystemContainerForCurrentProcess](BSPathProviderFactory, "pathProviderForSystemContainerForCurrentProcess"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cachesPath"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "path"));

  v5 = ((uint64_t (*)(void))BKLogDisplay)();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)v73 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "StartWindowServer: Initializing shader cache path: %{public}@", buf, 0xCu);
  }

  if (v4)
  {
    v7 = MTLSetShaderCachePath(v4);
    MTLMakeShaderCacheWritableByAllUsers(v7);
  }

  v8 = v1;
  v70 = kCAWindowServerDisableUpdatesOnMainDisplay;
  v71 = &__kCFBooleanTrue;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v71, &v70, 1));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[CAWindowServer serverWithOptions:](CAWindowServer, "serverWithOptions:", v9));

  objc_msgSend(v10, "setRendererFlags:", 3);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[CADisplay mainDisplay](CADisplay, "mainDisplay"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "displayWithDisplayId:", objc_msgSend(v11, "displayId")));
  v13 = ((uint64_t (*)(void))BKLogDisplay)();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    v15 = objc_msgSend(v12, "displayId");
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v73 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "StartWindowServer: disabling framebuffer changes on display (%d) at boot until we are ready for them.", buf, 8u);
  }

  if (v11 && v12)
  {
    v16 = v11;
    v17 = v12;
    v18 = v8;
    -[_BKDisplayInfo setWindowServerDisplay:](v18, "setWindowServerDisplay:", v17);
    -[_BKDisplayInfo setExternal:](v18, "setExternal:", -[NSObject isExternal](v16, "isExternal"));
    objc_msgSend(v17, "bounds");
    v20 = v19;
    v22 = v21;
    v23 = (double)(unint64_t)-[NSObject pointScale](v16, "pointScale");
    v24 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject currentMode](v16, "currentMode"));
    v25 = (double)(unint64_t)objc_msgSend(v24, "preferredScale");

    v26 = ((uint64_t (*)(void))BKLogDisplay)();
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)v73 = v23;
      *(_WORD *)&v73[8] = 2048;
      v74 = v25;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "StartWindowServer: MG scale:%g display preferredScale:%g", buf, 0x16u);
    }

    if (-[_BKDisplayInfo isExternal](v18, "isExternal"))
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject currentMode](v16, "currentMode"));

      if (v28)
        v23 = v25;
    }
    if (BSFloatLessThanFloat(v23, 1.0))
    {
      v29 = ((uint64_t (*)(void))BKLogDisplay)();
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)v73 = v23;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "StartWindowServer: Invalid point scale from CADisplay: %g; assuming 1.0",
          buf,
          0xCu);
      }

      v23 = 1.0;
    }
    v69 = v8;
    if (qword_1001172B8 != -1)
      dispatch_once(&qword_1001172B8, &stru_1000EA678);
    v31 = (int)*(double *)&qword_1001172B0;
    v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject nativeOrientation](v16, "nativeOrientation"));
    v33 = sub_100034D5C(v32);

    v34 = ((uint64_t (*)(void))BKLogDisplay)();
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      v36 = sub_100034718(v31);
      v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
      v38 = sub_100034718(v33);
      v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)v73 = v37;
      *(_WORD *)&v73[8] = 2114;
      v74 = *(double *)&v39;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "StartWindowServer: digitizerToPanelRotation=%{public}@ layoutRotation=%{public}@", buf, 0x16u);

    }
    v40 = objc_msgSend(v17, "touchScales");
    v43 = 1.0 - v42;
    if ((_DWORD)v31 == 1)
      v44 = 1.0 - v42;
    else
      v44 = 0.0;
    if ((_DWORD)v31 == 1)
      v45 = v42;
    else
      v45 = v41;
    if ((_DWORD)v31 == 1)
      v46 = v41;
    else
      v46 = v42;
    if ((_DWORD)v31 == 2)
      v44 = 1.0 - v41;
    else
      v43 = 0.0;
    if ((_DWORD)v31 == 2)
    {
      v45 = v41;
      v46 = v42;
    }
    if ((_DWORD)v31 == 3)
      v47 = 0.0;
    else
      v47 = v44;
    if ((_DWORD)v31 == 3)
      v48 = 1.0 - v41;
    else
      v48 = v43;
    if ((_DWORD)v31 == 3)
      v49 = v42;
    else
      v49 = v45;
    if ((_DWORD)v31 == 3)
      v50 = v41;
    else
      v50 = v46;
    v51 = BKLogDisplay(v40);
    v52 = objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      v77.width = v20;
      v77.height = v22;
      v53 = NSStringFromSize(v77);
      v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v23));
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)v73 = v54;
      *(_WORD *)&v73[8] = 2114;
      v74 = *(double *)&v55;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "StartWindowServer: initial main screen size:%{public}@ scale:%{public}@", buf, 0x16u);

    }
    v8 = v69;

    sub_100034E3C(v31, v20, v22);
    -[_BKDisplayInfo setSize:](v18, "setSize:");
    -[_BKDisplayInfo setScale:](v18, "setScale:", v23);
    -[_BKDisplayInfo setNativeRotation:](v18, "setNativeRotation:", v31);
    -[_BKDisplayInfo setNormalizedDigitizerRect:](v18, "setNormalizedDigitizerRect:", v47, v48, v49, v50);
    v56 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
    v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "forceMirroredOrientation"));

    if (v57)
      v58 = objc_msgSend(v17, "setOrientation:", v57);
    v59 = BKLogDisplay(v58);
    v60 = objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)v73 = v18;
      *(_WORD *)&v73[8] = 2114;
      v74 = *(double *)&v16;
      v75 = 2114;
      v76 = v17;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "StartWindowServer: main display info:%{public}@ -- display:%{public}@ serverDisplay:%{public}@", buf, 0x20u);
    }

  }
  else
  {
    v61 = ((uint64_t (*)(void))BKLogDisplay)();
    v16 = objc_claimAutoreleasedReturnValue(v61);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v73 = v11 == 0;
      *(_WORD *)&v73[4] = 1024;
      *(_DWORD *)&v73[6] = v12 == 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "StartWindowServer: headless (display:%{BOOL}u/server:%{BOOL}u)", buf, 0xEu);
    }
  }

  v62 = v8;
  os_unfair_lock_assert_not_owner((const os_unfair_lock *)&unk_1001172A8);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1001172A8);
  v63 = (void *)qword_1001172A0;
  qword_1001172A0 = (uint64_t)v62;

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001172A8);
  v64 = +[BKDisplayRenderOverlayManager sharedInstance](BKDisplayRenderOverlayManager, "sharedInstance");
  v65 = +[BKBootUIPresenter sharedInstance](BKBootUIPresenter, "sharedInstance");
  v66 = sub_10005FC2C();
  v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
  -[BKTVOutController _handleIapServerConnectionDied]_0((uint64_t)v67);

  v68 = (void *)objc_claimAutoreleasedReturnValue(+[BKTetherController sharedInstance](BKTetherController, "sharedInstance"));
  objc_msgSend(v68, "updatePreferencesIfNeeded");

}

void sub_100036058()
{
  id v0;

  v0 = (id)objc_claimAutoreleasedReturnValue(+[BKDisplayRenderOverlayManager sharedInstance](BKDisplayRenderOverlayManager, "sharedInstance"));
  objc_msgSend(v0, "prepareForRestart");

}

void sub_10003608C(__IOSurface *a1)
{
  IOSurfaceUnlock(a1, 0, 0);
  CFRelease(a1);
}

id *sub_1000360F4(id *a1)
{
  id *v1;
  id v2;
  void *v3;
  __CFString *v4;
  double v5;
  double v6;

  v1 = a1;
  if (a1)
  {
    v2 = objc_msgSend(a1[4], "count");
    if (v2)
    {
      if (v2 == (id)1)
      {
        v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[4], "anyObject"));
        v4 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "description"));

      }
      else
      {
        v4 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[4], "bs_map:", &stru_1000EA6F8));
      }
    }
    else
    {
      v4 = CFSTR("<none>");
    }
    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    v6 = v5 - *((double *)v1 + 5);
    if (v6 < 0.001)
      v6 = 0.0;
    v1 = (id *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("firstDown:%.3gs ago b%ue%uu%u destinations:%@"), *(_QWORD *)&v6, *((unsigned __int8 *)v1 + 8), *((unsigned __int8 *)v1 + 9), *((unsigned __int8 *)v1 + 10), v4));

  }
  return v1;
}

id sub_1000361E4(id a1, BKSHIDEventDeferringResolution *a2)
{
  return -[BKSHIDEventDeferringResolution description](a2, "description");
}

id sub_100037774(uint64_t a1)
{
  return sub_100033608(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 10), *(void **)(a1 + 40));
}

void sub_100037818(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 24), a2);
}

void sub_100037B54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100037C0C(uint64_t a1)
{
  id result;
  uint64_t i;
  int v4;
  void *v5;
  _QWORD v6[5];
  _QWORD v7[4];
  int v8;

  result = objc_msgSend(*(id *)(a1 + 32), "appendInteger:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 128), CFSTR("generation"));
  for (i = 2; i != 32; ++i)
  {
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * i);
    if (v4)
    {
      v5 = *(void **)(a1 + 32);
      v6[4] = i - 2;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100037CEC;
      v7[3] = &unk_1000EA718;
      v8 = v4;
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_100037D1C;
      v6[3] = &unk_1000EA738;
      result = objc_msgSend(v5, "appendCustomFormatForValue:withCustomFormatForName:", v7, v6);
    }
  }
  return result;
}

id sub_100037CEC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "appendFormat:", CFSTR("%X"), *(unsigned int *)(a1 + 32));
}

id sub_100037D1C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "appendFormat:", CFSTR("%d"), *(_QWORD *)(a1 + 32));
}

uint64_t sub_100037D4C(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSString *v5;
  id v6;
  uint64_t v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  uint8_t buf[4];
  id v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  const __CFString *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  void *v22;

  if (a2 >= 30)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d >= 32"), a2));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      v5 = NSStringFromSelector("updateMaskForPathIndex:");
      v6 = (id)objc_claimAutoreleasedReturnValue(v5);
      v8 = (objc_class *)objc_opt_class(a1, v7);
      v9 = NSStringFromClass(v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      *(_DWORD *)buf = 138544642;
      v12 = v6;
      v13 = 2114;
      v14 = v10;
      v15 = 2048;
      v16 = a1;
      v17 = 2114;
      v18 = CFSTR("BKDirectTouchUpdateEvents.mm");
      v19 = 1024;
      v20 = 76;
      v21 = 2114;
      v22 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

    }
    _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v4), "UTF8String"));
    __break(0);
    JUMPOUT(0x100037EA8);
  }
  return *(unsigned int *)(a1 + 4 * a2 + 8);
}

void sub_100037EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100037EDC(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  NSString *v5;
  id v6;
  uint64_t v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  uint8_t buf[4];
  id v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  const __CFString *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  void *v22;

  v3 = result;
  if (a3 >= 30)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d >= 32"), a3));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      v5 = NSStringFromSelector("setUpdateMask:forPathIndex:");
      v6 = (id)objc_claimAutoreleasedReturnValue(v5);
      v8 = (objc_class *)objc_opt_class(v3, v7);
      v9 = NSStringFromClass(v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      *(_DWORD *)buf = 138544642;
      v12 = v6;
      v13 = 2114;
      v14 = v10;
      v15 = 2048;
      v16 = v3;
      v17 = 2114;
      v18 = CFSTR("BKDirectTouchUpdateEvents.mm");
      v19 = 1024;
      v20 = 81;
      v21 = 2114;
      v22 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

    }
    _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v4), "UTF8String"));
    __break(0);
    JUMPOUT(0x100038038);
  }
  *(_DWORD *)(result + 4 * a3 + 8) = a2;
  return result;
}

void sub_100038040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_10003806C(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = *(id *)(a1 + 8);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v13;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v6);
        if (v7)
          v8 = v7[16];
        else
          v8 = 0;
        if (v8 == a2)
        {
          v10 = v7;
          goto LABEL_15;
        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v9 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      v4 = v9;
    }
    while (v9);
  }
  v10 = 0;
LABEL_15:

  return v10;
}

void sub_100038184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000381A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;

  v4 = (uint64_t)objc_msgSend(*(id *)(a1 + 8), "count");
  if (v4 < 1)
  {
LABEL_9:
    v8 = 0;
  }
  else
  {
    v5 = v4;
    v6 = 0;
    while (1)
    {
      v7 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "objectAtIndex:", v6));
      v8 = v7;
      v9 = v7 ? v7[16] : 0;
      if (v9 == a2)
        break;

      if (v5 == ++v6)
        goto LABEL_9;
    }
    objc_msgSend(*(id *)(a1 + 8), "removeObjectAtIndex:", v6);
  }
  return v8;
}

void sub_100038244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100038254(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  int v8;
  uint64_t v9;

  v4 = BKLogSystemShell();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v6)
    {
      v8 = 136446210;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "START WATCHDOG for %{public}s", (uint8_t *)&v8, 0xCu);
    }

    return wd_endpoint_begin_watchdog_monitoring_for_service(a1);
  }
  else
  {
    if (v6)
    {
      v8 = 136446210;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "STOP WATCHDOG for %{public}s", (uint8_t *)&v8, 0xCu);
    }

    return wd_endpoint_disable_monitoring_for_service(a1);
  }
}

void sub_1000398EC(int a1, CGContextRef c)
{
  _OWORD v3[2];
  CGRect v4;
  CGRect v5;

  v3[0] = xmmword_1000B3CE8;
  v3[1] = unk_1000B3CF8;
  CGContextSetFillColor(c, (const CGFloat *)v3);
  v4.origin.x = 0.0;
  v4.origin.y = 0.0;
  v4.size.width = 16.0;
  v4.size.height = 1.0;
  CGContextFillRect(c, v4);
  v5.origin.x = 0.0;
  v5.origin.y = 0.0;
  v5.size.width = 1.0;
  v5.size.height = 16.0;
  CGContextFillRect(c, v5);
}

CGColorRef sub_100039B8C(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGColorSpace *DeviceRGB;
  CGColorSpace *v9;
  CGColorRef v10;
  CGFloat components[4];

  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  if (!DeviceRGB)
    return 0;
  v9 = DeviceRGB;
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  v10 = CGColorCreate(DeviceRGB, components);
  CFRelease(v9);
  return v10;
}

uint64_t sub_100039C2C(uint64_t a1, char a2, char a3, uint64_t a4)
{
  _QWORD v5[5];
  char v6;
  char v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100039CB4;
  v5[3] = &unk_1000EA7C0;
  v5[4] = a1;
  v6 = a2;
  v7 = a3;
  if (!sub_10000A40C((uint64_t)"_BKDisplayXXNotifySetDisplayBlanked", BKBackBoardClientEntitlement, a4))
    return 5;
  sub_100039CB4((uint64_t)v5);
  return 0;
}

void sub_100039CB4(uint64_t a1)
{
  void *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const __CFString *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  const __CFString *v16;
  id v17;
  void *v18;
  void *v19;
  _BOOL8 v20;
  void *v21;
  id v22;
  _BYTE buf[24];
  const __CFString *v24;
  BOOL v25;

  if (**(_BYTE **)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v2 = 0;
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = *(unsigned __int8 *)(a1 + 41);
  v22 = v2;
  v5 = sub_10000F94C(v22);
  if ((_DWORD)v5)
  {
    v6 = BKLogDisplay(v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = "Set";
      if (!v4)
        v8 = "Notify";
      v9 = CFSTR("YES");
      if (!v3)
        v9 = CFSTR("NO");
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s Blanked: %@", buf, 0x16u);
    }

    if (v4)
    {
      v10 = sub_10000F6DC();
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      objc_msgSend(v11, "setBlanked:", v3 != 0);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayController sharedInstance](BKDisplayController, "sharedInstance"));
    sub_10001C1F8((uint64_t)v12, 0, v3 != 0);

    if (qword_1001172C8 != -1)
      dispatch_once(&qword_1001172C8, &stru_1000EA698);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_100034FF0;
    v24 = (const __CFString *)&unk_1000ECA60;
    v25 = v3 != 0;
    dispatch_async((dispatch_queue_t)qword_1001172C0, buf);
  }
  else
  {
    v13 = BKLogDisplay(v5);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = "Set";
      if (!v4)
        v15 = "Notify";
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v15;
      if (v3)
        v16 = CFSTR("YES");
      else
        v16 = CFSTR("NO");
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v22;
      *(_WORD *)&buf[22] = 2112;
      v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s %{public}@ Blanked: %@", buf, 0x20u);
    }

    v17 = sub_10000F5CC(v22, (uint64_t)"BKDisplayNotifySetDisplayBlanked");
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v19 = v18;
    if (v4)
      objc_msgSend(v18, "setBlanked:", v3 != 0);
    v20 = v3 != 0;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayController sharedInstance](BKDisplayController, "sharedInstance"));
    sub_10001C1F8((uint64_t)v21, v22, v20);

  }
}

uint64_t sub_100039F9C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10003A018;
  v3[3] = &unk_1000EBC38;
  v3[4] = a1;
  if (!sub_10000A40C((uint64_t)"_BKDisplayXXWillUnblank", BKBackBoardClientEntitlement, a2))
    return 5;
  sub_10003A018((uint64_t)v3);
  return 0;
}

void sub_10003A018(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  const __CFString *v7;
  __CFString *v8;
  uint8_t buf[4];
  const __CFString *v10;

  if (**(_BYTE **)(a1 + 32))
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v1 = 0;
  v8 = v1;
  v2 = sub_10000F5CC(v8, (uint64_t)"BKDisplayWillUnblank");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)v3;
  if (v3)
  {
    v5 = BKLogDisplay(v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = CFSTR("Main");
      if (v8)
        v7 = v8;
      *(_DWORD *)buf = 138543362;
      v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%{public}@ will unblank", buf, 0xCu);
    }

    objc_msgSend(v4, "willUnblank");
  }

}

uint64_t sub_10003A124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10003A1B0;
  v4[3] = &unk_1000EA7E0;
  v4[4] = a1;
  v4[5] = a2;
  if (!sub_100004EF8((uint64_t)"_BKDisplayXXGetBlankingRemovesPower", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5;
  sub_10003A1B0((uint64_t)v4);
  return 0;
}

void sub_10003A1B0(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;

  if (**(_BYTE **)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v2 = 0;
  v7 = v2;
  v3 = sub_10000F5CC(v2, (uint64_t)"BKDisplayGetBlankingRemovesPower");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(v4, "blankingRemovesPower");
  else
    v6 = 0;

  **(_BYTE **)(a1 + 40) = v6;
}

uint64_t sub_10003A240(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10003A2D0;
  v4[3] = &unk_1000EA800;
  v4[4] = a1;
  v5 = a2;
  if (!sub_100004EF8((uint64_t)"_BKDisplayXXSetBlankingRemovesPower", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5;
  sub_10003A2D0((uint64_t)v4);
  return 0;
}

void sub_10003A2D0(uint64_t a1)
{
  void *v2;
  int v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint8_t buf[4];
  _BOOL4 v10;

  if (**(_BYTE **)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v2 = 0;
  v3 = *(unsigned __int8 *)(a1 + 40);
  v8 = v2;
  v4 = sub_10000F5CC(v2, (uint64_t)"BKDisplaySetBlankingRemovesPower");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = BKLogDisplay(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BKDisplaySetBlankingRemovesPower setBlankingRemovesPower:%{BOOL}u", buf, 8u);
  }

  objc_msgSend(v5, "setBlankingRemovesPower:", v3 != 0);
}

uint64_t sub_10003A3DC(_BYTE *a1, _QWORD *a2, _DWORD *a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t v19[16];
  uint8_t buf[16];

  if (sub_10000A40C((uint64_t)"_BKDisplayXXGetSystemIdentifiers", BKBackBoardClientEntitlement, a4))
  {
    if (*a1)
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1));
    else
      v7 = 0;
    v9 = sub_10000F5CC(v7, (uint64_t)"BKDisplayGetSystemIdentifiers");
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "systemIdentifiers"));

    if (v11)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "bs_secureEncoded"));
      if (v13)
      {
        v14 = v13;
        *a2 = objc_msgSend(v13, "bs_bytesForMIG");
        *a3 = objc_msgSend(v14, "bs_lengthForMIG");

        v8 = 0;
LABEL_14:

        return v8;
      }
      v17 = BKLogDisplay(0);
      v16 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "GetSystemIdentifiers failed to encode system identifiers", buf, 2u);
      }
    }
    else
    {
      v15 = BKLogDisplay(v12);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "GetSystemIdentifiers: no active system identifiers", v19, 2u);
      }
    }

    v8 = 5;
    goto LABEL_14;
  }
  return 5;
}

uint64_t sub_10003A564(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD v5[6];
  int v6;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10003A5F4;
  v5[3] = &unk_1000EA820;
  v6 = a3;
  v5[4] = a1;
  v5[5] = a2;
  if (!sub_100004EF8((uint64_t)"_BKDisplayXXSetSystemIdentifiers", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a4))return 5;
  sub_10003A5F4((uint64_t)v5);
  return 0;
}

void sub_10003A5F4(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSSet *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isKindOfClass;
  _BOOL4 v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  void *v27;
  _BOOL4 v28;
  id v29;
  uint8_t buf[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  if (**(_BYTE **)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v2 = 0;
  if (!*(_DWORD *)(a1 + 48) || !*(_QWORD *)(a1 + 40))
  {
    v9 = 0;
LABEL_31:
    v9 = v9;
    v26 = sub_10000F5CC(v2, (uint64_t)"BKDisplaySetSystemIdentifiers");
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    objc_msgSend(v27, "setSystemIdentifiers:", v9);

    goto LABEL_32;
  }
  v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), 0);
  v5 = objc_opt_class(NSSet, v4);
  v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(NSString, v6), 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = (id)objc_claimAutoreleasedReturnValue(+[NSObject bs_secureObjectFromData:ofClasses:](NSObject, "bs_secureObjectFromData:ofClasses:", v3, v8));

  v11 = objc_opt_class(NSSet, v10);
  isKindOfClass = objc_opt_isKindOfClass(v9, v11);
  v13 = 0;
  if ((isKindOfClass & 1) != 0)
  {
    isKindOfClass = (uint64_t)objc_msgSend(v9, "count");
    v13 = isKindOfClass != 0;
    if (isKindOfClass)
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v14 = v9;
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      if (v15)
      {
        v17 = v15;
        v18 = *(_QWORD *)v32;
        v29 = v3;
        v28 = v13;
        while (2)
        {
          for (i = 0; i != v17; i = (char *)i + 1)
          {
            if (*(_QWORD *)v32 != v18)
              objc_enumerationMutation(v14);
            v20 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
            v21 = objc_opt_class(NSString, v16);
            v22 = v20;
            v23 = v22;
            if (!v21 || (objc_opt_isKindOfClass(v22, v21) & 1) == 0)
            {

LABEL_23:
              v13 = 0;
              v3 = v29;
              goto LABEL_24;
            }

            if (!v23)
              goto LABEL_23;
          }
          v17 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
          v3 = v29;
          v13 = v28;
          if (v17)
            continue;
          break;
        }
      }

      if (v14)
      {
        v13 = 1;
        goto LABEL_27;
      }
    }
    else
    {
      v13 = 0;
    }
  }
LABEL_24:
  v24 = BKLogDisplay(isKindOfClass);
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Error unarchiving system identifiers", buf, 2u);
  }

LABEL_27:
  if (v9 && v13 || !*(_DWORD *)(a1 + 48) || !*(_QWORD *)(a1 + 40))
    goto LABEL_31;
LABEL_32:

}

uint64_t sub_10003A8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10003A95C;
  v4[3] = &unk_1000EA7E0;
  v4[4] = a1;
  v4[5] = a2;
  if (!sub_100004EF8((uint64_t)"_BKDisplayXXIsFlipBookEnabled", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5;
  sub_10003A95C((uint64_t)v4);
  return 0;
}

void sub_10003A95C(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;

  if (**(_BYTE **)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v2 = 0;
  v7 = v2;
  v3 = sub_10000F5CC(v2, (uint64_t)"BKDisplayIsFlipBookEnabled");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(v4, "isFlipBookEnabled");
  else
    v6 = 0;

  **(_BYTE **)(a1 + 40) = v6;
}

uint64_t sub_10003A9EC(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10003AA7C;
  v4[3] = &unk_1000EA800;
  v4[4] = a1;
  v5 = a2;
  if (!sub_100004EF8((uint64_t)"_BKDisplayXXSetFlipBookEnabled", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5;
  sub_10003AA7C((uint64_t)v4);
  return 0;
}

void sub_10003AA7C(uint64_t a1)
{
  void *v2;
  int v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint8_t buf[4];
  _BOOL4 v10;

  if (**(_BYTE **)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v2 = 0;
  v3 = *(unsigned __int8 *)(a1 + 40);
  v8 = v2;
  v4 = sub_10000F5CC(v2, (uint64_t)"BKDisplaySetFlipBookEnabled");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = BKLogDisplay(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BKDisplaySetFlipBookEnabled setFlipBookEnabled:%{BOOL}u", buf, 8u);
  }

  objc_msgSend(v5, "setFlipBookEnabled:", v3 != 0);
}

uint64_t sub_10003AB88(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD v5[5];
  int v6;
  int v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10003AC18;
  v5[3] = &unk_1000EA7E0;
  v5[4] = a1;
  v6 = a2;
  v7 = a3;
  if (!sub_100004EF8((uint64_t)"_BKDisplayXXSetCalibrationPhase", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a4))return 5;
  sub_10003AC18((uint64_t)v5);
  return 0;
}

void sub_10003AC18(uint64_t a1)
{
  void *v1;

  if (**(_BYTE **)(a1 + 32))
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v1 = 0;

}

uint64_t sub_10003AC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10003ACD8;
  v4[3] = &unk_1000EA7E0;
  v4[4] = a1;
  v4[5] = a2;
  if (!sub_100004EF8((uint64_t)"_BKDisplayXXIsFlipBookSuppressed", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5;
  sub_10003ACD8((uint64_t)v4);
  return 0;
}

void sub_10003ACD8(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;

  if (**(_BYTE **)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v2 = 0;
  v7 = v2;
  v3 = sub_10000F5CC(v2, (uint64_t)"BKDisplayIsFlipBookSuppressed");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(v4, "isFlipBookSuppressed");
  else
    v6 = 0;

  **(_BYTE **)(a1 + 40) = v6;
}

uint64_t sub_10003AD68(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10003ADF8;
  v4[3] = &unk_1000EA800;
  v4[4] = a1;
  v5 = a2;
  if (!sub_100004EF8((uint64_t)"_BKDisplayXXSetFlipBookSuppressed", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5;
  sub_10003ADF8((uint64_t)v4);
  return 0;
}

void sub_10003ADF8(uint64_t a1)
{
  void *v2;
  int v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint8_t buf[4];
  _BOOL4 v10;

  if (**(_BYTE **)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v2 = 0;
  v3 = *(unsigned __int8 *)(a1 + 40);
  v8 = v2;
  v4 = sub_10000F5CC(v2, (uint64_t)"BKDisplaySetFlipBookSuppressed");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = BKLogDisplay(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BKDisplaySetFlipBookSuppressed setFlipBookSuppressed:%{BOOL}u", buf, 8u);
  }

  objc_msgSend(v5, "setFlipBookSuppressed:", v3 != 0);
}

uint64_t sub_10003AF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10003AF90;
  v4[3] = &unk_1000EA7E0;
  v4[4] = a1;
  v4[5] = a2;
  if (!sub_100004EF8((uint64_t)"_BKDisplayXXIsDisabled", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5;
  sub_10003AF90((uint64_t)v4);
  return 0;
}

void sub_10003AF90(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;

  if (**(_BYTE **)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v2 = 0;
  v7 = v2;
  v3 = sub_10000F5CC(v2, (uint64_t)"BKDisplayIsDisabled");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(v4, "disabled");
  else
    v6 = 1;

  **(_BYTE **)(a1 + 40) = v6;
}

uint64_t sub_10003B020(uint64_t a1, char a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  _QWORD v6[6];
  __int128 v7;
  __int128 v8;
  char v9;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10003B0BC;
  v6[3] = &unk_1000EA840;
  v6[4] = a1;
  v6[5] = a3;
  v9 = a2;
  v4 = a4[1];
  v7 = *a4;
  v8 = v4;
  if (!sub_100004EF8((uint64_t)"_BKDisplayXXSetDisabled", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, (uint64_t)a4))return 5;
  sub_10003B0BC((uint64_t)v6);
  return 0;
}

void sub_10003B0BC(uint64_t a1)
{
  void *v2;
  int v3;
  __int128 v4;
  void *v5;
  id v6;
  uint64_t v7;
  _BOOL4 v8;
  id *v9;
  BOOL v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  if (**(_BYTE **)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  else
    v2 = 0;
  v3 = *(unsigned __int8 *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 64);
  v11 = *(_OWORD *)(a1 + 48);
  v12 = v4;
  v5 = (void *)BSVersionedPIDForAuditToken(&v11);
  v6 = v2;
  v7 = objc_opt_self(_BKDisplayDisabledAssertions);
  *(_QWORD *)&v11 = _NSConcreteStackBlock;
  *((_QWORD *)&v11 + 1) = 3221225472;
  *(_QWORD *)&v12 = sub_1000350C8;
  *((_QWORD *)&v12 + 1) = &unk_1000EBC38;
  v13 = v7;
  if (qword_100117288 != -1)
    dispatch_once(&qword_100117288, &v11);
  v8 = v3 != 0;
  v9 = (id *)(id)qword_100117290;
  v10 = sub_1000351E4(v9, v6, v8, v5);

  **(_BYTE **)(a1 + 40) = v10;
}

uint64_t sub_10003B1DC(uint64_t a1, char a2, __int128 *a3)
{
  __int128 v3;
  _QWORD v5[5];
  __int128 v6;
  __int128 v7;
  char v8;

  v5[1] = 3221225472;
  v3 = a3[1];
  v6 = *a3;
  v5[0] = _NSConcreteStackBlock;
  v5[2] = sub_10003B264;
  v5[3] = &unk_1000EA860;
  v5[4] = a1;
  v8 = a2;
  v7 = v3;
  if (!sub_10001261C(BKVirtualDisplayEntitlement, (uint64_t)a3))
    return 5;
  sub_10003B264((uint64_t)v5);
  return 0;
}

void sub_10003B264(uint64_t a1)
{
  unint64_t v2;
  int v3;
  void *v4;
  id v5;
  _QWORD *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  id v14;
  _QWORD block[5];
  id v16;
  unint64_t v17;
  int v18;

  if (**(_BYTE **)(a1 + 32))
  {
    v2 = *(unsigned __int8 *)(a1 + 72);
    if (v2 >= 4)
    {
      v11 = BKLogDisplay(a1);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = *(unsigned __int8 *)(a1 + 72);
        LODWORD(block[0]) = 67109120;
        HIDWORD(block[0]) = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "SetCloneMirroringModeForDestinationDisplay: unknown mode value %X", (uint8_t *)block, 8u);
      }

    }
    else
    {
      v3 = BSPIDForAuditToken(a1 + 40);
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32)));
      v5 = sub_10005FC2C();
      v6 = (_QWORD *)objc_claimAutoreleasedReturnValue(v5);
      v7 = v4;
      v14 = v7;
      if (v6)
      {
        v8 = v6[1];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10005FCF0;
        block[3] = &unk_1000EB7C0;
        block[4] = v6;
        v17 = v2;
        v16 = v7;
        v18 = v3;
        dispatch_async(v8, block);

        v7 = v14;
      }

    }
  }
  else
  {
    v9 = BKLogDisplay(a1);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "SetCloneMirroringModeForDestinationDisplay: empty displayUUID not allowed", (uint8_t *)block, 2u);
    }

  }
}

uint64_t sub_10003B454(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  _QWORD v4[5];
  __int128 v5;
  __int128 v6;

  v4[1] = 3221225472;
  v2 = a2[1];
  v5 = *a2;
  v4[0] = _NSConcreteStackBlock;
  v4[2] = sub_10003B4D4;
  v4[3] = &unk_1000EA880;
  v4[4] = a1;
  v6 = v2;
  if (!sub_10001261C(BKVirtualDisplayEntitlement, (uint64_t)a2))
    return 5;
  sub_10003B4D4((uint64_t)v4);
  return 0;
}

void sub_10003B4D4(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;
  _QWORD *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  _QWORD block[5];
  id v11;
  int v12;

  if (**(_BYTE **)(a1 + 32))
  {
    v2 = BSPIDForAuditToken(a1 + 40);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32)));
    v4 = sub_10005FC2C();
    v5 = (_QWORD *)objc_claimAutoreleasedReturnValue(v4);
    v9 = v3;
    if (v5)
    {
      v6 = v5[1];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10005FD08;
      block[3] = &unk_1000ECDF8;
      block[4] = v5;
      v11 = v9;
      v12 = v2;
      dispatch_async(v6, block);

    }
  }
  else
  {
    v7 = BKLogDisplay(a1);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "RemoveCloneMirroringModeForDestinationDisplay: empty displayUUID not allowed", (uint8_t *)block, 2u);
    }

  }
}

void sub_10003B614(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[BKTetherController sharedInstance](BKTetherController, "sharedInstance"));
  if ((objc_msgSend(v3, "isTethered") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
    **(_BYTE **)(a1 + 32) = objc_msgSend(v2, "ignoreTetheringPreferences") ^ 1;

  }
  else
  {
    **(_BYTE **)(a1 + 32) = 0;
  }

}

void sub_10003B68C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKTetherController sharedInstance](BKTetherController, "sharedInstance"));
  objc_msgSend(v2, "setOrientationNotificationDisabled:", *(_BYTE *)(a1 + 32) != 0);

}

uint64_t sub_10003B6D8(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD v4[5];
  int v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10003B754;
  v4[3] = &unk_1000EA8A0;
  v5 = a2;
  v4[4] = a1;
  if (!sub_10001261C(BKDisplayArrangementEntitlement, a3))
    return 5;
  sub_10003B754((uint64_t)v4);
  return 0;
}

void sub_10003B754(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  uint8_t buf[16];

  if (!*(_DWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 32))
    goto LABEL_9;
  v2 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), 0);
  v4 = objc_opt_class(NSArray, v3);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(BKSDisplayArrangementItem, v5), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSObject bs_secureObjectFromData:ofClasses:](NSObject, "bs_secureObjectFromData:ofClasses:", v2, v7));

  if (v8)
  {

LABEL_10:
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
    if (v12)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
      v14 = (uint64_t)objc_msgSend(v13, "edge");

    }
    else
    {
      v14 = 1;
    }

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
    objc_msgSend(v15, "setPointerRegionArrangementEdge:", v14);

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v18 = objc_msgSend(v16, "eventProcessorOfClass:", objc_opt_class(BKHIDMousePointerEventProcessor, v17));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "mousePointerController"));
    objc_msgSend(v20, "setDisplayArrangement:", v8);

    return;
  }
  v10 = BKLogDisplay(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Error unarchiving display arrangement", buf, 2u);
  }

  if (!*(_DWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 32))
  {
LABEL_9:
    v8 = 0;
    goto LABEL_10;
  }
}

uint64_t sub_10003B938(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  BKDisplayRenderOverlayImage *v17;
  double v18;
  BKDisplayRenderOverlayImage *v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;

  if (!sub_10000A40C((uint64_t)"_BKDisplayXXApplyRenderOverlay", BKBackBoardClientEntitlement, a5))
    return 5;
  v9 = sub_10003BA74(a1, a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = sub_10003BAFC(a3, a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  if (v10)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "displayUUID"));
    v14 = sub_10003BB60(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayRenderOverlayManager sharedInstance](BKDisplayRenderOverlayManager, "sharedInstance"));
    objc_msgSend(v16, "removeOverlay:withAnimationSettings:", v15, 0);

    v17 = [BKDisplayRenderOverlayImage alloc];
    LODWORD(v18) = 2139095039;
    v19 = -[BKDisplayRenderOverlayImage initWithOverlayDescriptor:level:](v17, "initWithOverlayDescriptor:level:", v10, v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayRenderOverlayManager sharedInstance](BKDisplayRenderOverlayManager, "sharedInstance"));
    v21 = objc_msgSend(v20, "applyOverlay:withAnimationSettings:", v19, v12);

    if (v21)
      v22 = 0;
    else
      v22 = 5;

  }
  else
  {
    v22 = 4;
  }

  return v22;
}

id sub_10003BA74(uint64_t a1, unsigned int a2)
{
  void *v2;
  void *v3;
  void *v4;

  if (a2)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", a1, a2, 0));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDisplayRenderOverlayDescriptor _classesRequiredToDecode](BKSDisplayRenderOverlayDescriptor, "_classesRequiredToDecode"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDisplayRenderOverlayDescriptor bs_secureDecodedFromData:withAdditionalClasses:](BKSDisplayRenderOverlayDescriptor, "bs_secureDecodedFromData:withAdditionalClasses:", v2, v3));

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

id sub_10003BAFC(uint64_t a1, unsigned int a2)
{
  void *v2;
  void *v3;

  if (a2)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", a1, a2, 0));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BSAnimationSettings bs_secureDecodedFromData:](BSAnimationSettings, "bs_secureDecodedFromData:", v2));

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id sub_10003BB60(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v7[4];
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayRenderOverlayManager sharedInstance](BKDisplayRenderOverlayManager, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "activeOverlays"));

  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = sub_10003BC74;
  v14 = sub_10003BC84;
  v15 = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10003BC8C;
  v7[3] = &unk_1000EA8E8;
  v4 = v1;
  v8 = v4;
  v9 = &v10;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v7);
  v5 = (id)v11[5];

  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_10003BC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003BC74(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10003BC84(uint64_t a1)
{

}

void sub_10003BC8C(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  if (objc_msgSend(v9, "type") == (id)1)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "descriptor"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "displayUUID"));
    LODWORD(v6) = BSEqualStrings(v6, v8);

    if ((_DWORD)v6)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      *a3 = 1;
    }
  }

}

uint64_t sub_10003BD38(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  if (!sub_10000A40C((uint64_t)"_BKDisplayXXRemoveRenderOverlay", BKBackBoardClientEntitlement, a5))
    return 5;
  v9 = sub_10003BA74(a1, a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = sub_10003BAFC(a3, a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  if (v10)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayRenderOverlayManager sharedInstance](BKDisplayRenderOverlayManager, "sharedInstance"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "activeOverlayWithDescriptor:", v10));
    if (v14 && (objc_msgSend(v13, "removeOverlay:withAnimationSettings:", v14, v12) & 1) != 0)
      v15 = 0;
    else
      v15 = 5;

  }
  else
  {
    v15 = 4;
  }

  return v15;
}

uint64_t sub_10003BE28(uint64_t a1, unsigned int a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  if (!sub_10000A40C((uint64_t)"_BKDisplayXXFreezeRenderOverlay", BKBackBoardClientEntitlement, a3))
    return 5;
  v5 = sub_10003BA74(a1, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayRenderOverlayManager sharedInstance](BKDisplayRenderOverlayManager, "sharedInstance"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "activeOverlayWithDescriptor:", v6));
    if (v8 && (objc_msgSend(v7, "freezeOverlay:", v8) & 1) != 0)
      v9 = 0;
    else
      v9 = 5;

  }
  else
  {
    v9 = 4;
  }

  return v9;
}

uint64_t sub_10003BEE8(_BYTE *a1, _QWORD *a2, _DWORD *a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  if (!sub_10000A40C((uint64_t)"_BKDisplayXXRenderOverlay", BKBackBoardClientEntitlement, a4))
    return 5;
  if (*a1)
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1));
  else
    v7 = 0;
  v9 = sub_100034B98(v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if (v10 && (v11 = sub_10003BB60(v7), (v12 = (void *)objc_claimAutoreleasedReturnValue(v11)) != 0))
  {
    v13 = v12;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "descriptor"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "bs_secureEncoded"));

    if (a2 && a3)
    {
      *a2 = objc_msgSend(v15, "bs_bytesForMIG");
      *a3 = objc_msgSend(v15, "bs_lengthForMIG");
    }

    v8 = 0;
  }
  else
  {
    v8 = 5;
  }

  return v8;
}

uint64_t sub_10003BFF8(uint64_t a1, int a2, __int128 *a3)
{
  __int128 v3;
  _QWORD v5[5];
  int v6;
  __int128 v7;
  __int128 v8;

  v5[1] = 3221225472;
  v3 = a3[1];
  v7 = *a3;
  v5[0] = _NSConcreteStackBlock;
  v5[2] = sub_10003C084;
  v5[3] = &unk_1000EA8C0;
  v5[4] = a1;
  v6 = a2;
  v8 = v3;
  if (!sub_10000A40C((uint64_t)"_BKDisplayXXDismissInterstitialRenderOverlay", BKBackBoardClientEntitlement, (uint64_t)a3))return 5;
  sub_10003C084((uint64_t)v5);
  return 0;
}

void sub_10003C084(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;

  v2 = sub_10003BAFC(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40));
  v4 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKBootUIPresenter sharedInstance](BKBootUIPresenter, "sharedInstance"));
  objc_msgSend(v3, "dismissOverlayWithAnimationSettings:requstedByPID:", v4, BSPIDForAuditToken(a1 + 44));

}

void sub_10003C0F0(uint64_t a1)
{
  int v1;
  _BOOL8 v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  void *v8;
  _DWORD v9[2];

  v1 = *(unsigned __int8 *)(a1 + 32);
  v2 = *(_BYTE *)(a1 + 32) != 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKSecureDrawingMonitor sharedInstance](BKSecureDrawingMonitor, "sharedInstance"));
  objc_msgSend(v3, "setSecureModeEnabled:", v2);

  v5 = BKLogDisplay(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = v1 != 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Setting display secure mode: %u", (uint8_t *)v9, 8u);
  }

  v7 = sub_10000F6DC();
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v8, "setSecure:", v1 != 0);

}

void sub_10003C840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10003C868((id *)va);
  _Unwind_Resume(a1);
}

void sub_10003C868(id *a1)
{

}

void sub_10003C8A0(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v1 = *(unsigned int **)(a1 + 24);
  v2 = *v1;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    *(_DWORD *)(v3 + 8) = v2;
    v1 = *(unsigned int **)(a1 + 24);
  }
  v4 = v1[1];
  if (v4 == 2)
  {
    v6 = *(_QWORD **)(a1 + 8);
    if (v6)
      v6 = (_QWORD *)v6[2];
    v8 = v6;
    objc_msgSend(v8, "removeIndex:", v2);

  }
  else if (v4 == 1)
  {
    v5 = *(_QWORD **)(a1 + 8);
    if (v5)
      v5 = (_QWORD *)v5[2];
    v7 = v5;
    objc_msgSend(v7, "addIndex:", v2);

  }
}

void sub_10003C93C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  CFAllocatorRef v11;
  void *v12;
  uint64_t v13;
  const void *Copy;
  void *v15;
  id v16;
  NSObject *v17;
  __CFString *v18;
  const __CFAllocator *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  id obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  uint64_t v33;
  _BYTE v34[128];

  obj = a3;
  v7 = a4;
  if (a1)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v27;
      v11 = kCFAllocatorSystemDefault;
      do
      {
        v12 = 0;
        v24 = v9;
        do
        {
          if (*(_QWORD *)v27 != v10)
            objc_enumerationMutation(obj);
          v13 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v12);
          Copy = (const void *)IOHIDEventCreateCopy(v11, a2);
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDEventBaseAttributes baseAttributesFromProvider:](BKSHIDEventBaseAttributes, "baseAttributesFromProvider:", v13));
          BKSHIDEventSetAttributes(Copy, v15);
          v16 = sub_100059844();
          v17 = objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            v18 = sub_100033FCC((uint64_t)Copy);
            v19 = v11;
            v20 = v10;
            v21 = v7;
            v22 = a2;
            v23 = (void *)objc_claimAutoreleasedReturnValue(v18);
            *(_DWORD *)buf = 138543618;
            v31 = v23;
            v32 = 2114;
            v33 = v13;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "outgoing %{public}@ -> %{public}@", buf, 0x16u);

            a2 = v22;
            v7 = v21;
            v10 = v20;
            v11 = v19;
            v9 = v24;
          }

          objc_msgSend(v7, "postEvent:toDestination:", Copy, v13);
          CFRelease(Copy);

          v12 = (char *)v12 + 1;
        }
        while (v9 != v12);
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
      }
      while (v9);
    }
  }

}

void sub_10003CB4C(void *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _DWORD *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id *v19;
  id *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id *v33;
  id *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  NSString *v40;
  void *v41;
  uint64_t v42;
  objc_class *v43;
  NSString *v44;
  void *v45;
  void *v46;
  NSString *v47;
  void *v48;
  uint64_t v49;
  objc_class *v50;
  NSString *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  _BYTE buf[24];
  void *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v6 = *(id *)(a3 + 8);
  v7 = v6;
  if (v6)
  {
    if (v6[2] > 3u)
      goto LABEL_22;
    v8 = (void *)*((_QWORD *)v6 + 3);
  }
  else
  {
    v8 = 0;
  }
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a3 + 40), "destinationsForEvent:fromSender:", a2, *(_QWORD *)(a3 + 32)));
  if ((objc_msgSend(v10, "isEqual:", v9) & 1) == 0)
  {
    if (v7 && v7[2])
    {
      v11 = objc_msgSend(v9, "mutableCopy");
      objc_msgSend(v11, "minusSet:", v10);
      v12 = sub_100059844();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(id *)a3;
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v14;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@: removed destinations: %{public}@", buf, 0x16u);
      }

      v53 = v11;
      v55 = a1;
      if (objc_msgSend(v11, "count"))
      {
        v15 = *(void **)(a3 + 40);
        v16 = v11;
        v17 = v15;
        v18 = *(id *)a3;
        v19 = (id *)*(id *)(a3 + 8);
        if (!v19 || (v20 = v19, !*((_DWORD *)v19 + 2)))
        {
          v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bug: shouldn't have a record at idle stage"), v53));
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            v40 = NSStringFromSelector("_postCancelEventToDestinations:locals:dispatcher:");
            v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
            v43 = (objc_class *)objc_opt_class(v55, v42);
            v44 = NSStringFromClass(v43);
            v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
            *(_DWORD *)buf = 138544642;
            *(_QWORD *)&buf[4] = v41;
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v45;
            *(_WORD *)&buf[22] = 2048;
            v57 = v55;
            LOWORD(v58) = 2114;
            *(_QWORD *)((char *)&v58 + 2) = CFSTR("BKHIDVendorDefinedTouchSensitiveButtonEventProcessor.m");
            WORD5(v58) = 1024;
            HIDWORD(v58) = 271;
            LOWORD(v59) = 2114;
            *(_QWORD *)((char *)&v59 + 2) = v39;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

          }
          _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v39), "UTF8String"));
          __break(0);
          JUMPOUT(0x10003CFDCLL);
        }
        v21 = v19[2];
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_10003D17C;
        v57 = &unk_1000EAA38;
        v60 = a3;
        *(_QWORD *)&v58 = v18;
        *((_QWORD *)&v58 + 1) = v55;
        v22 = v16;
        *(_QWORD *)&v59 = v22;
        v23 = v17;
        *((_QWORD *)&v59 + 1) = v23;
        v24 = v18;
        objc_msgSend(v21, "enumerateIndexesWithOptions:usingBlock:", 2, buf);

        v11 = v53;
      }
      v25 = objc_msgSend(v10, "mutableCopy", v53);
      objc_msgSend(v25, "minusSet:", v9);
      v26 = sub_100059844();
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        v28 = *(id *)a3;
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v28;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v25;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%{public}@: added destinations: %{public}@", buf, 0x16u);
      }

      if (objc_msgSend(v25, "count"))
      {
        v29 = *(void **)(a3 + 40);
        v30 = v25;
        v31 = v29;
        v32 = *(id *)a3;
        v33 = (id *)*(id *)(a3 + 8);
        if (!v33 || (v34 = v33, !*((_DWORD *)v33 + 2)))
        {
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bug: shouldn't have a record at idle stage")));
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            v47 = NSStringFromSelector("_postEnterEventToDestinations:locals:dispatcher:");
            v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
            v50 = (objc_class *)objc_opt_class(v55, v49);
            v51 = NSStringFromClass(v50);
            v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
            *(_DWORD *)buf = 138544642;
            *(_QWORD *)&buf[4] = v48;
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v52;
            *(_WORD *)&buf[22] = 2048;
            v57 = v55;
            LOWORD(v58) = 2114;
            *(_QWORD *)((char *)&v58 + 2) = CFSTR("BKHIDVendorDefinedTouchSensitiveButtonEventProcessor.m");
            WORD5(v58) = 1024;
            HIDWORD(v58) = 256;
            LOWORD(v59) = 2114;
            *(_QWORD *)((char *)&v59 + 2) = v46;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

          }
          _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v46), "UTF8String"));
          __break(0);
          JUMPOUT(0x10003D0D0);
        }
        v35 = v33[2];
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_10003D0E0;
        v57 = &unk_1000EAA38;
        v60 = a3;
        *(_QWORD *)&v58 = v32;
        *((_QWORD *)&v58 + 1) = v55;
        v36 = v30;
        *(_QWORD *)&v59 = v36;
        v37 = v31;
        *((_QWORD *)&v59 + 1) = v37;
        v38 = v32;
        objc_msgSend(v35, "enumerateIndexesUsingBlock:", buf);

        v11 = v54;
      }

    }
    sub_100037818((uint64_t)v7, v10);
  }

LABEL_22:
}

void sub_10003D0E0(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;

  v4 = **(_QWORD **)(a1 + 64);
  if (v4)
    v5 = *(_QWORD *)(v4 + 16);
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = *(unsigned __int16 *)(v6 + 8);
    v8 = *(unsigned __int16 *)(v6 + 10);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = mach_absolute_time();
  v10 = (const void *)sub_1000337E4(v5, v7, v8, v9, 1, a2);
  sub_10003C93C(*(_QWORD *)(a1 + 40), (uint64_t)v10, *(void **)(a1 + 48), *(void **)(a1 + 56));
  CFRelease(v10);
}

void sub_10003D17C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;

  v4 = **(_QWORD **)(a1 + 64);
  if (v4)
    v5 = *(_QWORD *)(v4 + 16);
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = *(unsigned __int16 *)(v6 + 8);
    v8 = *(unsigned __int16 *)(v6 + 10);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = mach_absolute_time();
  v10 = (const void *)sub_1000337E4(v5, v7, v8, v9, 2, a2);
  sub_10003C93C(*(_QWORD *)(a1 + 40), (uint64_t)v10, *(void **)(a1 + 48), *(void **)(a1 + 56));
  CFRelease(v10);
}

id sub_10003D218(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *inactive;
  void *f;
  integer_t port_info;

  v5 = GSRegisterPurpleNamedPort(a2);
  port_info = 16;
  mach_port_set_attributes(mach_task_self_, v5, 1, &port_info, 1u);
  inactive = dispatch_workloop_create_inactive(a1);
  dispatch_set_qos_class_fallback(inactive, 33);
  dispatch_workloop_set_scheduler_priority(inactive, 53, 1);
  dispatch_activate(inactive);
  f = (void *)dispatch_mach_create_f(a1, inactive, a3, sub_1000089EC);

  dispatch_mach_connect(f, v5, 0, 0);
  return f;
}

void sub_10003E1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E58C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v2 = BKLogAlternateSystemApp();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 134217984;
    v11 = v9;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "launchFailed: %p", (uint8_t *)&v10, 0xCu);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "invalidate");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 32);
  *(_QWORD *)(v4 + 32) = 0;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 24);
  *(_QWORD *)(v6 + 24) = 0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10003E670(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject **WeakRetained;
  NSObject **v6;
  NSObject *v7;
  _QWORD v8[5];
  id v9;

  v4 = a3;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    v7 = WeakRetained[5];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10003E70C;
    v8[3] = &unk_1000ECD80;
    v8[4] = WeakRetained;
    v9 = v4;
    dispatch_async(v7, v8);

  }
}

id sub_10003E70C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_noteExitedWithContext:", *(_QWORD *)(a1 + 40));
}

id sub_10003E718(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), CFSTR("bundleID"));
  return objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:skipIfNil:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), CFSTR("options"), 1);
}

void sub_10003F030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003F650(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "appendBool:withName:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 36), CFSTR("visible"));
  return objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), CFSTR("descriptor"));
}

id sub_10003F6A8(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "animates"))
    objc_msgSend(*(id *)(a1 + 32), "_stopAnimating");
  return _objc_msgSend(*(id *)(a1 + 32), "_dismissWithAnimationSettings:", *(_QWORD *)(a1 + 40));
}

id sub_10003F6DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_freeze");
}

id sub_10003F6E4(uint64_t a1)
{
  id result;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "_presentWithAnimationSettings:", *(_QWORD *)(a1 + 40));
  result = objc_msgSend(*(id *)(a1 + 32), "animates");
  if ((_DWORD)result)
    return _objc_msgSend(*(id *)(a1 + 32), "_startAnimating");
  return result;
}

id sub_10003F734(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 32);
  if (v1[38])
    return _objc_msgSend(v1, "_startAnimating");
  else
    return objc_msgSend(v1, "_stopAnimating");
}

void sub_10003FB68(int a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char v14;
  int v15;
  double v16;

  v4 = kdebug_trace(730464736, (unint64_t)(float)(a2 * 100.0), 0, 0, 0);
  if (a1)
  {
    v5 = BKLogBacklight(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 134217984;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Update last requested backlight factor: %g permanently:YES", (uint8_t *)&v15, 0xCu);
    }

    os_unfair_lock_lock(&stru_1001172E0);
    dword_1001172E4 = LODWORD(a2);
    os_unfair_lock_unlock(&stru_1001172E0);
    v7 = a2 < 1.0 && _AXSVoiceOverTouchEnabled() == 0;
    os_unfair_lock_lock(&stru_1001172E0);
    if (!v7 || qword_1001172D0)
    {
      if (qword_1001172D0)
        v14 = v7;
      else
        v14 = 1;
      if ((v14 & 1) != 0)
        goto LABEL_16;
      objc_msgSend((id)qword_1001172D0, "invalidate");
      v11 = (void *)qword_1001172D0;
      qword_1001172D0 = 0;
    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
      v10 = objc_msgSend(v8, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v9));
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "cancelAndSuppressTouchesOnDisplay:reason:", 0, CFSTR("backlight dim/off")));
      v13 = (void *)qword_1001172D0;
      qword_1001172D0 = v12;

    }
LABEL_16:
    os_unfair_lock_unlock(&stru_1001172E0);
  }
}

void sub_10003FD30(uint64_t a1, int a2, char a3, float a4, float a5)
{
  int v7;
  float v10;
  float v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL4 v14;
  id v15;
  double v16;
  void *v17;
  double v18;
  const __CFString *v19;
  int64_t v20;
  dispatch_time_t v21;
  _QWORD block[4];
  float v23;
  float v24;
  uint8_t buf[4];
  double v26;
  __int16 v27;
  double v28;

  v7 = a1;
  v10 = fminf(a4, 1.0);
  if (v10 >= 0.0)
    v11 = v10;
  else
    v11 = 0.0;
  v12 = BKLogBacklight(a1);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v14)
    {
      *(_DWORD *)buf = 134218240;
      v26 = v11;
      v27 = 2048;
      v28 = a5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Setting CoreBrightness backlight factor:%f with fade duration:%f", buf, 0x16u);
    }

    v15 = (id)qword_1001172D8;
    if (a5 <= 0.0)
    {
      *(float *)&v16 = v11;
      v13 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v16));
      v19 = CFSTR("DisplayBrightnessFactor");
    }
    else
    {
      *(float *)&v16 = a5;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v16));
      objc_msgSend(v15, "setProperty:forKey:", v17, CFSTR("DisplayBrightnessFadePeriod"));

      *(float *)&v18 = v11;
      v13 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v18));
      v19 = CFSTR("DisplayBrightnessFactorWithFade");
    }
    objc_msgSend(v15, "setProperty:forKey:", v13, v19);

  }
  else if (v14)
  {
    *(_DWORD *)buf = 134218240;
    v26 = v11;
    v27 = 2048;
    v28 = a5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Notifying (but not setting) CoreBrightness backlight factor:%f with fade duration:%f", buf, 0x16u);
  }

  if (dword_100115BF8 == -1)
    notify_register_check("com.apple.backboardd.backlight.changed", &dword_100115BF8);
  sub_10003FB68(a2, v11);
  if (dword_100115BF8 != -1 && (a3 & 1) == 0)
  {
    if (a4 <= 0.9)
      v20 = (uint64_t)(float)(a5 * 1000000000.0);
    else
      v20 = 0;
    v21 = dispatch_time(0, v20);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10003FFC0;
    block[3] = &unk_1000EBC38;
    v23 = v11;
    v24 = a4;
    dispatch_after(v21, (dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_10003FFC0(uint64_t a1)
{
  float v2;

  os_unfair_lock_lock(&stru_1001172E0);
  v2 = *(float *)&dword_1001172E4;
  os_unfair_lock_unlock(&stru_1001172E0);
  if (v2 == *(float *)(a1 + 32))
  {
    notify_set_state(dword_100115BF8, (int)(float)(*(float *)(a1 + 36) * 100.0) & ~((int)(float)(*(float *)(a1 + 36) * 100.0) >> 31));
    notify_post("com.apple.backboardd.backlight.changed");
  }
}

void sub_1000413E8(uint64_t a1)
{
  uint64_t v1;
  void *i;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id obj;
  uint64_t v32;
  id v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 9))
  {
    objc_msgSend(*(id *)(v1 + 16), "removeAnnotationsForKeyPath:", CFSTR("hit-test-rgns"));
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    obj = *(id *)(a1 + 40);
    v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    if (v33)
    {
      v34 = 0;
      v32 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v33; i = (char *)i + 1)
        {
          if (*(_QWORD *)v36 != v32)
            objc_enumerationMutation(obj);
          v4 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v4, "rect");
          v6 = v5;
          v8 = v7;
          v10 = v9;
          v12 = v11;
          objc_msgSend(v4, "_exclusiveTouchNormalizedSubRectInReferenceSpace");
          v14 = v13;
          v16 = v15;
          v18 = v17;
          v20 = v19;
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayAnnotation annotationWithRectangleSize:](BKDisplayAnnotation, "annotationWithRectangleSize:", v10, v12));
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayAnnotationLocation relativeToTopLeftOfSuper:](BKDisplayAnnotationLocation, "relativeToTopLeftOfSuper:", v6, v8));
          objc_msgSend(v22, "setDefinedInReferenceSpace:", 1);
          objc_msgSend(v21, "setLocation:", v22);
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayAnnotationStyle colorVariationStyleWithIndex:](BKDisplayAnnotationStyle, "colorVariationStyleWithIndex:", (char *)i + v34));
          objc_msgSend(v21, "setStyleModifier:", v23);

          v24 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayAnnotation annotationWithRectangleSize:](BKDisplayAnnotation, "annotationWithRectangleSize:", v18, v20));
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayAnnotationLocation relativeToTopLeftOfSuper:](BKDisplayAnnotationLocation, "relativeToTopLeftOfSuper:", v14, v16));
          objc_msgSend(v25, "setDefinedInReferenceSpace:", 1);
          objc_msgSend(v24, "setLocation:", v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayAnnotationStyle crosshatchedBackgroundStyle](BKDisplayAnnotationStyle, "crosshatchedBackgroundStyle"));
          objc_msgSend(v24, "setStyleModifier:", v26);

          v27 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("hit-test-rgns.%d.full"), (char *)i + v34));
          objc_msgSend(v27, "setAnnotation:forKeyPath:", v21, v28);

          v29 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("hit-test-rgns.%d.exclusive"), (char *)i + v34));
          objc_msgSend(v29, "setAnnotation:forKeyPath:", v24, v30);

        }
        v34 += (uint64_t)i;
        v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
      }
      while (v33);
    }

  }
}

id sub_1000416D0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_touchWasSoftCanceled:", *(unsigned int *)(a1 + 40));
}

void sub_1000416E0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_stringDescribingContextID:clientPort:", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44)));
  v2 = *(void **)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 48);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("always %@"), v6));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("always-ctx.%X"), *(unsigned int *)(a1 + 40)));
  objc_msgSend(v2, "_queue_annotateTouch:withString:uniqueIdentifier:fromPID:", v3, v4, v5, 0xFFFFFFFFLL);

}

id sub_100041798(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_touchWasHardCanceled:", *(unsigned int *)(a1 + 40));
}

void sub_1000417A8(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_keyPathForTouchIdentifier:", *(unsigned int *)(a1 + 40)));
  objc_msgSend(v1, "removeAnnotationsForKeyPath:", v2);

}

id sub_1000417F4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_removeAnnotationForTouch:withUniqueIdentifier:", *(unsigned int *)(a1 + 40), CFSTR("touchDown"));
  return objc_msgSend(*(id *)(a1 + 32), "_queue_removeAnnotationForTouch:withUniqueIdentifier:", *(unsigned int *)(a1 + 40), CFSTR("detached"));
}

uint64_t sub_100041834(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "_queue_setCenter:forTouchIdentifier:", *(unsigned int *)(a1 + 72), *(double *)(a1 + 40), *(double *)(a1 + 48));
  result = BSFloatIsZero(*(double *)(a1 + 56));
  if ((result & 1) == 0)
    return (uint64_t)_objc_msgSend(*(id *)(a1 + 32), "_queue_updateHoverStateForTouchIdentifier:z:maxZ:", *(unsigned int *)(a1 + 72), *(double *)(a1 + 64), *(double *)(a1 + 56));
  return result;
}

void sub_100041884(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = *(unsigned int *)(a1 + 48);
  v3 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    v2 = *(unsigned int *)(v2 + 8);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("transferred to %X"), v2));
  objc_msgSend(v3, "_queue_annotateTouch:withUniqueString:", v1, v4);

}

id sub_1000418EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withUniqueString:", *(unsigned int *)(a1 + 40), CFSTR("detached"));
}

void sub_100041904(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_stringDescribingContextID:clientPort:", v4, v5));
  v6 = *(void **)(a1 + 32);
  v7 = *(unsigned int *)(a1 + 56);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ctx.%d"), *(_QWORD *)(a1 + 48)));
  objc_msgSend(v6, "_queue_annotateTouch:withString:uniqueIdentifier:fromPID:", v7, v9, v8, 0xFFFFFFFFLL);

}

id sub_1000419A4(uint64_t a1)
{
  id result;
  int v3;

  objc_msgSend(*(id *)(a1 + 32), "_queue_setCenter:forTouchIdentifier:", *(unsigned int *)(a1 + 64), *(double *)(a1 + 40), *(double *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_queue_applyBasicAnnotationTextForTouchIdentifier:pathIndex:", *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withString:uniqueIdentifier:fromPID:", *(unsigned int *)(a1 + 64), CFSTR("touch down"), CFSTR("touchDown"), 0xFFFFFFFFLL);
  v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x800) != 0)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withUniqueString:", *(unsigned int *)(a1 + 64), CFSTR("from edge"));
    v3 = *(_DWORD *)(a1 + 68);
    if ((v3 & 0x40000) == 0)
    {
LABEL_3:
      if ((v3 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v3 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  result = objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withUniqueString:", *(unsigned int *)(a1 + 64), CFSTR("swipe-locked"));
  v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x2000) == 0)
  {
LABEL_4:
    if ((v3 & 0x1000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withUniqueString:", *(unsigned int *)(a1 + 64), CFSTR("swipe-pending"));
  v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x1000000) == 0)
  {
LABEL_5:
    if ((v3 & 0x4000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withUniqueString:", *(unsigned int *)(a1 + 64), CFSTR("swipe up"));
  v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x4000000) == 0)
  {
LABEL_6:
    if ((v3 & 0x2000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withUniqueString:", *(unsigned int *)(a1 + 64), CFSTR("swipe left"));
  v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x2000000) == 0)
  {
LABEL_7:
    if ((v3 & 0x8000000) == 0)
      return result;
    return objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withUniqueString:", *(unsigned int *)(a1 + 64), CFSTR("swipe right"));
  }
LABEL_14:
  result = objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withUniqueString:", *(unsigned int *)(a1 + 64), CFSTR("swipe down"));
  if ((*(_DWORD *)(a1 + 68) & 0x8000000) != 0)
    return objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withUniqueString:", *(unsigned int *)(a1 + 64), CFSTR("swipe right"));
  return result;
}

id sub_100041AE4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_setCenter:forTouchIdentifier:", *(unsigned int *)(a1 + 80), *(double *)(a1 + 40), *(double *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_queue_applyBasicAnnotationTextForTouchIdentifier:pathIndex:", *(unsigned int *)(a1 + 80), *(_QWORD *)(a1 + 56));
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_updateHoverStateForTouchIdentifier:z:maxZ:", *(unsigned int *)(a1 + 80), *(double *)(a1 + 64), *(double *)(a1 + 72));
}

id sub_100041B2C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withString:uniqueIdentifier:fromPID:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 60));
}

id sub_100041B40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withString:uniqueIdentifier:fromPID:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0xFFFFFFFFLL);
}

id sub_100041B58(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_annotateTouch:withUniqueString:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

_QWORD *sub_100041B68(_QWORD *result)
{
  uint64_t v1;
  int v2;

  v1 = result[4];
  v2 = *((unsigned __int8 *)result + 40);
  if (*(unsigned __int8 *)(v1 + 9) != v2)
  {
    *(_BYTE *)(v1 + 9) = v2;
    if (!*((_BYTE *)result + 40))
      return objc_msgSend(*(id *)(result[4] + 16), "removeAnnotationsForKeyPath:", CFSTR("hit-test-rgns"));
  }
  return result;
}

_QWORD *sub_100041BA0(_QWORD *result)
{
  uint64_t v1;
  int v2;

  v1 = result[4];
  v2 = *((unsigned __int8 *)result + 40);
  if (*(unsigned __int8 *)(v1 + 8) != v2)
  {
    *(_BYTE *)(v1 + 8) = v2;
    if (!*((_BYTE *)result + 40))
      return objc_msgSend(*(id *)(result[4] + 16), "removeAnnotationsForKeyPath:", CFSTR("touch"));
  }
  return result;
}

uint64_t sub_100041BD8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 9);
  return result;
}

uint64_t sub_100041BEC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 8);
  return result;
}

void sub_100041C40(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = BSDispatchQueueCreateWithQualityOfService("BKTouchAnnotationController", 0, 33, 0);
  v2 = (void *)qword_1001172E8;
  qword_1001172E8 = v1;

}

id sub_100041DD8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "appendSuccinctDescriptionToFormatter:", *(_QWORD *)(a1 + 40));
}

void sub_1000424A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1000424F4((id *)va);
  _Unwind_Resume(a1);
}

void sub_1000424F4(id *a1)
{

}

void sub_10004252C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    *(_DWORD *)(v2 + 8) = v1;
  v3 = *(_DWORD *)(a1 + 20);
  if (v3 == 2)
  {
    v5 = *(_QWORD **)(a1 + 8);
    if (v5)
      v5 = (_QWORD *)v5[2];
    v7 = v5;
    objc_msgSend(v7, "removeIndex:", v1);

  }
  else if (v3 == 1)
  {
    v4 = *(_QWORD **)(a1 + 8);
    if (v4)
      v4 = (_QWORD *)v4[2];
    v6 = v4;
    objc_msgSend(v6, "addIndex:", v1);

  }
}

void sub_1000425C0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5, void *a6)
{
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  uint64_t v15;
  const void *Copy;
  void *v17;
  id v18;
  NSObject *v19;
  NSObject *v20;
  __CFString *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t TimeStamp;
  uint64_t v28;
  os_log_type_t type;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  _BYTE v39[128];

  v11 = a5;
  v12 = a6;
  if (a1)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    if (v30)
    {
      v13 = *(_QWORD *)v32;
      type = 2 * (a4 == 0);
      v28 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v30; i = (char *)i + 1)
        {
          if (*(_QWORD *)v32 != v13)
            objc_enumerationMutation(v11);
          v15 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
          Copy = (const void *)IOHIDEventCreateCopy(kCFAllocatorSystemDefault, a2);
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDEventBaseAttributes baseAttributesFromProvider:](BKSHIDEventBaseAttributes, "baseAttributesFromProvider:", v15));
          BKSHIDEventSetAttributes(Copy, v17);
          v18 = sub_100059844();
          v19 = objc_claimAutoreleasedReturnValue(v18);
          v20 = v19;
          if ((_DWORD)a3)
          {
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              v21 = sub_100033FCC((uint64_t)Copy);
              v22 = a2;
              v23 = v12;
              v24 = v11;
              v25 = a3;
              v26 = (void *)objc_claimAutoreleasedReturnValue(v21);
              *(_DWORD *)buf = 138543618;
              v36 = (uint64_t)v26;
              v37 = 2114;
              v38 = v15;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "out %{public}@ -> %{public}@", buf, 0x16u);

              a3 = v25;
              v11 = v24;
              v12 = v23;
              a2 = v22;
              v13 = v28;
            }
          }
          else if (os_log_type_enabled(v19, type))
          {
            TimeStamp = IOHIDEventGetTimeStamp(a2);
            *(_DWORD *)buf = 134218242;
            v36 = TimeStamp;
            v37 = 2114;
            v38 = v15;
            _os_log_impl((void *)&_mh_execute_header, v20, type, "out %llX -> %{public}@", buf, 0x16u);
          }

          objc_msgSend(v12, "postEvent:toDestination:", Copy, v15);
          CFRelease(Copy);

        }
        v30 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
      }
      while (v30);
    }
  }

}

void sub_100042850(void *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _DWORD *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id *v19;
  id *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id *v33;
  id *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  NSString *v40;
  void *v41;
  uint64_t v42;
  objc_class *v43;
  NSString *v44;
  void *v45;
  void *v46;
  NSString *v47;
  void *v48;
  uint64_t v49;
  objc_class *v50;
  NSString *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  _BYTE buf[24];
  void *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v6 = *(id *)(a3 + 8);
  v7 = v6;
  if (v6)
  {
    if (v6[2] > 3u)
      goto LABEL_22;
    v8 = (void *)*((_QWORD *)v6 + 3);
  }
  else
  {
    v8 = 0;
  }
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a3 + 48), "destinationsForEvent:fromSender:", a2, *(_QWORD *)(a3 + 40)));
  if ((objc_msgSend(v10, "isEqual:", v9) & 1) == 0)
  {
    if (v7 && v7[2])
    {
      v11 = objc_msgSend(v9, "mutableCopy");
      objc_msgSend(v11, "minusSet:", v10);
      v12 = sub_100059844();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(id *)a3;
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v14;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@: removed destinations: %{public}@", buf, 0x16u);
      }

      v53 = v11;
      v55 = a1;
      if (objc_msgSend(v11, "count"))
      {
        v15 = *(void **)(a3 + 48);
        v16 = v11;
        v17 = v15;
        v18 = *(id *)a3;
        v19 = (id *)*(id *)(a3 + 8);
        if (!v19 || (v20 = v19, !*((_DWORD *)v19 + 2)))
        {
          v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bug: shouldn't have a record at idle stage"), v53));
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            v40 = NSStringFromSelector("_postCancelEventToDestinations:locals:dispatcher:");
            v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
            v43 = (objc_class *)objc_opt_class(v55, v42);
            v44 = NSStringFromClass(v43);
            v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
            *(_DWORD *)buf = 138544642;
            *(_QWORD *)&buf[4] = v41;
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v45;
            *(_WORD *)&buf[22] = 2048;
            v57 = v55;
            LOWORD(v58) = 2114;
            *(_QWORD *)((char *)&v58 + 2) = CFSTR("BKHIDTouchSensitiveButtonEventProcessor.m");
            WORD5(v58) = 1024;
            HIDWORD(v58) = 278;
            LOWORD(v59) = 2114;
            *(_QWORD *)((char *)&v59 + 2) = v39;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

          }
          _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v39), "UTF8String"));
          __break(0);
          JUMPOUT(0x100042CE0);
        }
        v21 = v19[2];
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_100042E88;
        v57 = &unk_1000EAA38;
        v60 = a3;
        *(_QWORD *)&v58 = v18;
        *((_QWORD *)&v58 + 1) = v55;
        v22 = v16;
        *(_QWORD *)&v59 = v22;
        v23 = v17;
        *((_QWORD *)&v59 + 1) = v23;
        v24 = v18;
        objc_msgSend(v21, "enumerateIndexesWithOptions:usingBlock:", 2, buf);

        v11 = v53;
      }
      v25 = objc_msgSend(v10, "mutableCopy", v53);
      objc_msgSend(v25, "minusSet:", v9);
      v26 = sub_100059844();
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        v28 = *(id *)a3;
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v28;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v25;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%{public}@: added destinations: %{public}@", buf, 0x16u);
      }

      if (objc_msgSend(v25, "count"))
      {
        v29 = *(void **)(a3 + 48);
        v30 = v25;
        v31 = v29;
        v32 = *(id *)a3;
        v33 = (id *)*(id *)(a3 + 8);
        if (!v33 || (v34 = v33, !*((_DWORD *)v33 + 2)))
        {
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bug: shouldn't have a record at idle stage")));
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            v47 = NSStringFromSelector("_postEnterEventToDestinations:locals:dispatcher:");
            v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
            v50 = (objc_class *)objc_opt_class(v55, v49);
            v51 = NSStringFromClass(v50);
            v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
            *(_DWORD *)buf = 138544642;
            *(_QWORD *)&buf[4] = v48;
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v52;
            *(_WORD *)&buf[22] = 2048;
            v57 = v55;
            LOWORD(v58) = 2114;
            *(_QWORD *)((char *)&v58 + 2) = CFSTR("BKHIDTouchSensitiveButtonEventProcessor.m");
            WORD5(v58) = 1024;
            HIDWORD(v58) = 263;
            LOWORD(v59) = 2114;
            *(_QWORD *)((char *)&v59 + 2) = v46;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

          }
          _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v46), "UTF8String"));
          __break(0);
          JUMPOUT(0x100042DD4);
        }
        v35 = v33[2];
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_100042DE4;
        v57 = &unk_1000EAA38;
        v60 = a3;
        *(_QWORD *)&v58 = v32;
        *((_QWORD *)&v58 + 1) = v55;
        v36 = v30;
        *(_QWORD *)&v59 = v36;
        v37 = v31;
        *((_QWORD *)&v59 + 1) = v37;
        v38 = v32;
        objc_msgSend(v35, "enumerateIndexesUsingBlock:", buf);

        v11 = v54;
      }

    }
    sub_100037818((uint64_t)v7, v10);
  }

LABEL_22:
}

void sub_100042DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;

  v4 = **(_QWORD **)(a1 + 64);
  if (v4)
    v5 = *(_QWORD *)(v4 + 16);
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = *(unsigned __int16 *)(v6 + 8);
    v8 = *(unsigned __int16 *)(v6 + 10);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = mach_absolute_time();
  v10 = (const void *)sub_10003371C(v5, v7, v8, v9, 1, a2);
  sub_1000425C0(*(_QWORD *)(a1 + 40), (uint64_t)v10, 1, *(_DWORD *)(*(_QWORD *)(a1 + 64) + 20), *(void **)(a1 + 48), *(void **)(a1 + 56));
  CFRelease(v10);
}

void sub_100042E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;

  v4 = **(_QWORD **)(a1 + 64);
  if (v4)
    v5 = *(_QWORD *)(v4 + 16);
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = *(unsigned __int16 *)(v6 + 8);
    v8 = *(unsigned __int16 *)(v6 + 10);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = mach_absolute_time();
  v10 = (const void *)sub_10003371C(v5, v7, v8, v9, 2, a2);
  IOHIDEventSetPhase(v10, 8);
  sub_1000425C0(*(_QWORD *)(a1 + 40), (uint64_t)v10, 1, *(_DWORD *)(*(_QWORD *)(a1 + 64) + 20), *(void **)(a1 + 48), *(void **)(a1 + 56));
  CFRelease(v10);
}

void sub_100043248(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKGSEventSystem sharedInstance](BKGSEventSystem, "sharedInstance"));
  objc_msgSend(v2, "_handleEvent:", a1);

}

void sub_100043300(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001172F8;
  qword_1001172F8 = (uint64_t)v1;

}

void sub_1000440CC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  void *v5;
  id v6;
  BKUISensorClient *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  NSString *v14;
  void *v15;
  uint64_t v16;
  objc_class *v17;
  NSString *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  const __CFString *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  void *v31;

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    if (*(_QWORD *)(a1 + 56))
    {
      v2 = BKLogUISensor();
      v3 = objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v20) = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Estimated prox shutting off", (uint8_t *)&v20, 2u);
      }

      v4 = *(id *)(a1 + 56);
      v5 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;

      if ((objc_msgSend(*(id *)(a1 + 64), "estimatedProximityMode") & 1) == 0)
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("we shouldn't be here if the current mode isn't estimatedProx")));
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          v14 = NSStringFromSelector("_locked_cancelEstimatedProximityEventShutoffTimerAndResetMode:");
          v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          v17 = (objc_class *)objc_opt_class(a1, v16);
          v18 = NSStringFromClass(v17);
          v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
          v20 = 138544642;
          v21 = v15;
          v22 = 2114;
          v23 = v19;
          v24 = 2048;
          v25 = a1;
          v26 = 2114;
          v27 = CFSTR("BKHIDUISensorController.m");
          v28 = 1024;
          v29 = 371;
          v30 = 2114;
          v31 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", (uint8_t *)&v20, 0x3Au);

        }
        _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v13), "UTF8String"));
        __break(0);
        JUMPOUT(0x10004435CLL);
      }
      v6 = objc_msgSend(*(id *)(a1 + 64), "versionedPID");
      v7 = sub_100044364(a1, v6, 0);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      v9 = (_QWORD *)v8;
      if (!v8
        || (objc_storeStrong((id *)(v8 + 8), *(id *)(v8 + 16)),
            v10 = (void *)v9[2],
            v9[2] = 0,
            v10,
            !v9[1]))
      {
        sub_100044504(a1, v6);
      }
      sub_1000445B8(a1, *(void **)(a1 + 64));

      if (objc_msgSend((id)a1, "estimatedProxPowerAssertionID"))
      {
        v11 = BKLogUISensor();
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v20) = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Releasing estimated prox power assertion", (uint8_t *)&v20, 2u);
        }

        IOPMAssertionRelease(*(_DWORD *)(a1 + 12));
        objc_msgSend((id)a1, "setEstimatedProxPowerAssertionID:", 0);
      }
      dispatch_source_cancel(v4);

    }
  }
}

BKUISensorClient *sub_100044364(uint64_t a1, void *a2, int a3)
{
  void *v6;
  void *v7;
  BKUISensorClient *v8;
  BOOL v9;
  id v10;
  id v11;
  id v12;
  BKUISensorClient *v13;
  void *v14;
  void *v15;
  _QWORD v17[4];
  id v18[2];
  id location;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  v6 = *(void **)(a1 + 24);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a2));
  v8 = (BKUISensorClient *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));

  if (v8)
    v9 = 1;
  else
    v9 = a3 == 0;
  if (!v9)
  {
    objc_initWeak(&location, (id)a1);
    v10 = objc_alloc((Class)BSProcessDeathWatcher);
    v11 = &_dispatch_main_q;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100044918;
    v17[3] = &unk_1000ECA88;
    objc_copyWeak(v18, &location);
    v18[1] = a2;
    v12 = objc_msgSend(v10, "initWithPID:queue:deathHandler:", a2, &_dispatch_main_q, v17);

    v13 = objc_alloc_init(BKUISensorClient);
    v8 = v13;
    if (v13)
      objc_storeStrong((id *)&v13->_deathWatcher, v12);
    v14 = *(void **)(a1 + 24);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a2));
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v8, v15);

    objc_destroyWeak(v18);
    objc_destroyWeak(&location);
  }
  return v8;
}

void sub_1000444DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100044504(uint64_t a1, id a2)
{
  const os_unfair_lock *v4;
  void *v5;
  void *v6;
  id v7;

  if (a1)
  {
    v4 = (const os_unfair_lock *)(a1 + 8);
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v7 = *(id *)(a1 + 64);
    if (objc_msgSend(v7, "versionedPID") == a2)
    {
      if (objc_msgSend(v7, "estimatedProximityMode"))
      {
        os_unfair_lock_assert_owner(v4);
        sub_1000440CC(a1);
      }
    }
    v5 = *(void **)(a1 + 24);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a2));
    objc_msgSend(v5, "removeObjectForKey:", v6);

    sub_1000445B8(a1, v7);
  }
}

void sub_1000445B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  _BOOL4 v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *i;
  uint64_t v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t v28[128];
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "allValues"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bs_compactMap:", &stru_1000EAAF8));

  v6 = objc_claimAutoreleasedReturnValue(+[BKSHIDUISensorMode _prevailingMode:](BKSHIDUISensorMode, "_prevailingMode:", v5));
  v7 = (void *)v6;
  if (v3 && v6 && objc_msgSend(v3, "isEffectivelyEqualToMode:", v6))
  {
    v8 = BKLogUISensor();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", v5));
      *(_DWORD *)buf = 138543618;
      v30 = v7;
      v31 = 2114;
      v32 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "UISensor mode changing to: %{public}@ (no-op) -- all modes:%{public}@", buf, 0x16u);

    }
    v11 = v7;
    v12 = *(NSObject **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v11;
  }
  else
  {
    if ((objc_msgSend(v3, "estimatedProximityMode") & 1) == 0)
    {
      os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
      sub_1000440CC(a1);
    }
    v13 = objc_msgSend(v5, "count");
    v14 = BKLogUISensor();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v13 == (id)1)
    {
      if (v16)
      {
        *(_DWORD *)buf = 138543362;
        v30 = v7;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "UISensor mode changing to: %{public}@ (no other requested modes)", buf, 0xCu);
      }
    }
    else if (v16)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", v5));
      *(_DWORD *)buf = 138543618;
      v30 = v7;
      v31 = 2114;
      v32 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "UISensor mode changing to: %{public}@ (all requested modes: %{public}@)", buf, 0x16u);

    }
    if (v7)
    {
      objc_storeStrong((id *)(a1 + 64), v7);
      objc_msgSend(*(id *)(a1 + 16), "applyUIMode:", v7);
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context", 0));
      v18 = -[NSObject countByEnumeratingWithState:objects:count:](v12, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      if (v18)
      {
        v19 = v18;
        v20 = *(_QWORD *)v25;
        do
        {
          for (i = 0; i != v19; i = (char *)i + 1)
          {
            if (*(_QWORD *)v25 != v20)
              objc_enumerationMutation(v12);
            objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i), "sensorModeDidChange:", v7);
          }
          v19 = -[NSObject countByEnumeratingWithState:objects:count:](v12, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
        }
        while (v19);
      }
    }
    else
    {
      v22 = BKLogUISensor();
      v12 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v23 = *(void **)(a1 + 64);
        *(_DWORD *)buf = 138543362;
        v30 = v23;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "got a nil new prevailing mode -- leaving previous prevailing mode: %{public}@", buf, 0xCu);
      }
    }
  }

}

id sub_100044904(id a1, BKUISensorClient *a2)
{
  if (a2)
    return a2->_mode;
  else
    return 0;
}

void sub_100044918(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "removeModesForVersionedPID:", *(_QWORD *)(a1 + 40));
    WeakRetained = v3;
  }

}

void sub_100044958(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  BKUISensorClient *v7;
  void *v8;
  BKUISensorClient *v9;
  id v10;

  v3 = a2;
  if (a1)
  {
    v10 = v3;
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    if (!*(_QWORD *)(a1 + 24))
    {
      v4 = objc_alloc_init((Class)NSMutableDictionary);
      v5 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v4;

    }
    v6 = objc_msgSend(v10, "versionedPID");
    if (objc_msgSend(*(id *)(a1 + 64), "estimatedProximityMode")
      && objc_msgSend(*(id *)(a1 + 64), "versionedPID") == v6)
    {
      os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
      sub_1000440CC(a1);
    }
    v7 = sub_100044364(a1, v6, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if (!v8)
    {
      v9 = sub_100044364(a1, v6, 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v9);
    }
    sub_100044A54((uint64_t)v8, v10);
    sub_100044A64((uint64_t)v8, 0);
    sub_1000445B8(a1, *(void **)(a1 + 64));

    v3 = v10;
  }

}

void sub_100044A54(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 8), a2);
}

void sub_100044A64(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 16), a2);
}

void sub_100044A74(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 40);
  v5 = a2;
  objc_msgSend(v5, "setVersionedPID:", v3);
  objc_msgSend(v5, "setProximityDetectionMode:", 5);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "multitouchHostStateKeys"));
  objc_msgSend(v5, "setMultitouchHostStateKeys:", v4);

  objc_msgSend(v5, "setChangeSource:", objc_msgSend(*(id *)(a1 + 32), "changeSource"));
  objc_msgSend(v5, "setEstimatedProximityMode:", 1);

}

void sub_100044AFC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const os_unfair_lock *v4;
  uint8_t v5[16];

  os_unfair_lock_assert_not_owner((const os_unfair_lock *)(*(_QWORD *)(a1 + 32) + 8));
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  v2 = BKLogUISensor();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Estimated prox shutoff timer fired", v5, 2u);
  }

  v4 = *(const os_unfair_lock **)(a1 + 32);
  if (v4)
  {
    os_unfair_lock_assert_owner(v4 + 2);
    sub_1000440CC((uint64_t)v4);
  }
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_100044BA8(uint64_t a1)
{
  const os_unfair_lock *v2;
  os_unfair_lock_s *v3;

  os_unfair_lock_assert_not_owner((const os_unfair_lock *)(*(_QWORD *)(a1 + 32) + 8));
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  v2 = *(const os_unfair_lock **)(a1 + 32);
  if (v2)
  {
    os_unfair_lock_assert_owner(v2 + 2);
    sub_1000440CC((uint64_t)v2);
    v3 = *(os_unfair_lock_s **)(a1 + 32);
  }
  else
  {
    v3 = 0;
  }
  os_unfair_lock_unlock(v3 + 2);
}

void sub_100044C04(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  int v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  int v13;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "propertyForKey:", CFSTR("ALSRequiresProx")));
  v3 = objc_opt_class(NSNumber, v2);
  v4 = v1;
  v5 = v4;
  if (v3)
  {
    if ((objc_opt_isKindOfClass(v4, v3) & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v10 = v6;

  v7 = 4;
  if (v10)
  {
    if (objc_msgSend(v10, "BOOLValue"))
      v7 = 1;
    else
      v7 = 4;
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100044D00;
  v12[3] = &unk_1000EAAB8;
  v13 = v7;
  v8 = objc_claimAutoreleasedReturnValue(+[BKSHIDUISensorMode buildModeForReason:builder:](BKSHIDUISensorMode, "buildModeForReason:builder:", CFSTR("backboardd baseline"), v12, v10));
  v9 = (void *)qword_100117320;
  qword_100117320 = v8;

}

void sub_100044D00(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(unsigned int *)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "setProximityDetectionMode:", v2);
  objc_msgSend(v3, "setDigitizerEnabled:", 1);

}

void sub_100044D44(id a1, BKSMutableHIDUISensorMode *a2)
{
  -[BKSMutableHIDUISensorMode setProximityDetectionMode:](a2, "setProximityDetectionMode:", 5);
}

void sub_100044D90(id a1)
{
  BKHIDUISensorController *v1;
  void *v2;
  BKHIDUISensorController *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[BKHIDUISensorConfiguratorFactory sensorConfiguratorForCurrentPlatform](BKHIDUISensorConfiguratorFactory, "sensorConfiguratorForCurrentPlatform"));
  v1 = [BKHIDUISensorController alloc];
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  v3 = -[BKHIDUISensorController initWithSensorConfiguration:displayBrightnessController:](v1, "initWithSensorConfiguration:displayBrightnessController:", v5, v2);
  v4 = (void *)qword_100117310;
  qword_100117310 = (uint64_t)v3;

}

id sub_10004543C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_processDidTerminate:", *(_QWORD *)(a1 + 40));
}

void sub_1000454B0(id a1)
{
  BKSecurityManager *v1;
  void *v2;

  v1 = objc_alloc_init(BKSecurityManager);
  v2 = (void *)qword_100117328;
  qword_100117328 = (uint64_t)v1;

}

void sub_10004556C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  const __CFString *v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  uint64_t v11;
  id v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(int *)(v2 + 8);
  if (!(_DWORD)v3 && !*(_QWORD *)(v2 + 16))
  {
    v8 = *(void **)(a1 + 40);
    v7 = CFSTR("default");
    v9 = 0;
    goto LABEL_6;
  }
  v4 = *(void **)(a1 + 40);
  v5 = NSStringFromBSVersionedPID(v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  objc_msgSend(v4, "appendString:withName:", v6, CFSTR("pid"));

  v7 = *(const __CFString **)(*(_QWORD *)(a1 + 32) + 16);
  if (v7)
  {
    v8 = *(void **)(a1 + 40);
    v9 = CFSTR("displayUUID");
LABEL_6:
    objc_msgSend(v8, "appendString:withName:", v7, v9);
  }
  v10 = *(void **)(a1 + 40);
  v11 = NSStringFromBKSDisplayServicesCloneMirroringMode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  v12 = (id)objc_claimAutoreleasedReturnValue(v11);
  objc_msgSend(v10, "appendString:withName:", v12, CFSTR("mode"));

}

void sub_100045934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id WeakRetained;
  _DWORD v14[2];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(unsigned int *)(a1 + 40);
    v3 = (os_unfair_lock_s *)(v1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 8));
    v5 = BKLogDisplay(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v14[0] = 67109120;
      v14[1] = v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "clone mirror remove all for pid %d", (uint8_t *)v14, 8u);
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "objectForKey:", v7));
    v9 = v8;
    if (v8)
    {
      v10 = *(void **)(v1 + 40);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allValues"));
      objc_msgSend(v10, "removeObjectsInArray:", v11);

      objc_msgSend(*(id *)(v1 + 32), "removeObjectForKey:", v7);
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 48), "objectForKey:", v7));
    objc_msgSend(v12, "invalidate");

    objc_msgSend(*(id *)(v1 + 48), "removeObjectForKey:", v7);
    objc_msgSend((id)v1, "_lock_rebuildModeCache");
    WeakRetained = objc_loadWeakRetained((id *)(v1 + 16));
    os_unfair_lock_unlock(v3);
    objc_msgSend(WeakRetained, "cloneMirroringRequestsDidChange");

  }
}

void sub_100045AB0(id a1)
{
  BKDisplayCloneMirrorRequestClient *v1;
  void *v2;

  v1 = objc_alloc_init(BKDisplayCloneMirrorRequestClient);
  v2 = (void *)qword_100117338;
  qword_100117338 = (uint64_t)v1;

  if (qword_100117338)
    *(_QWORD *)(qword_100117338 + 24) = 0;
}

void sub_1000468F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100047E58(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "setTimestamp:", v3);
  objc_msgSend(v4, "setDetectionMask:", *(unsigned int *)(a1 + 40));
  objc_msgSend(v4, "setMode:", *(unsigned int *)(a1 + 44));

}

id sub_100047EAC(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("objectInProximity");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 32)));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

void sub_100047F4C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;

  v3 = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100048150;
  v4[3] = &unk_1000EC208;
  objc_copyWeak(&v5, (id *)(a1 + 32));
  objc_msgSend(v3, "logBlock:domain:", v4, CFSTR("com.apple.backboard.hid.proximity"));
  objc_destroyWeak(&v5);

}

void sub_100047FE0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100047FF4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;

  v3 = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10004809C;
  v4[3] = &unk_1000EC208;
  objc_copyWeak(&v5, (id *)(a1 + 32));
  objc_msgSend(v3, "logBlock:domain:", v4, CFSTR("com.apple.backboard.hid.proximity"));
  objc_destroyWeak(&v5);

}

void sub_100048088(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_10004809C(uint64_t a1)
{
  unsigned __int8 *WeakRetained;
  void *v2;
  void *v3;
  const __CFString *v5;
  void *v6;

  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = CFSTR("objectInProximity");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", WeakRetained[27]));
  v6 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));

  return v3;
}

id sub_100048150(uint64_t a1)
{
  unsigned __int8 *WeakRetained;
  void *v2;
  void *v3;
  const __CFString *v5;
  void *v6;

  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = CFSTR("objectInProximity");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", WeakRetained[27]));
  v6 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));

  return v3;
}

void sub_100048204(id a1, BKSMutableProximityEvent *a2)
{
  BKSMutableProximityEvent *v2;

  v2 = a2;
  -[BKSMutableProximityEvent setMode:](v2, "setMode:", 0);
  -[BKSMutableProximityEvent setDetectionMask:](v2, "setDetectionMask:", 0);
  -[BKSMutableProximityEvent setTimestamp:](v2, "setTimestamp:", mach_absolute_time());

}

void sub_10004832C(void *a1, uint64_t a2)
{
  __CFString *v3;
  uint64_t IntegerValue;
  uint64_t Data;
  void *v6;
  NSNumber *v7;
  void *v8;
  void *v9;
  id **v10;
  id **v11;
  void *v12;
  void *v13;
  NSNumber *v14;
  void *v15;
  NSNumber *v16;
  void *v17;
  double v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  const __CFString *v23;
  NSNumber *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  NSNumber *v30;
  void *v31;
  NSNumber *v32;
  void *v33;
  NSNumber *v34;
  void *v35;
  NSNumber *v36;
  void *v37;
  NSNumber *v38;
  void *v39;
  NSNumber *v40;
  void *v41;
  NSNumber *v42;
  void *v43;
  NSNumber *v44;
  void *v45;
  NSNumber *v46;
  void *v47;
  NSNumber *v48;
  void *v49;
  NSNumber *v50;
  void *v51;
  NSNumber *v52;
  void *v53;
  void *v54;
  NSNumber *v55;
  void *v56;
  NSNumber *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  NSNumber *v64;
  void *v65;
  id *v66;
  unsigned int *v67;
  uint64_t v68;
  void *v69;
  double v70;
  uint64_t v71;
  void *v72;
  NSNumber *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  const __CFString *v77;
  NSNumber *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  id v82;
  void *v83;
  uint64_t v84;
  void *v85;
  NSNumber *v86;
  void *v87;
  NSNumber *v88;
  void *v89;
  NSNumber *v90;
  void *v91;
  NSNumber *v92;
  void *v93;
  NSNumber *v94;
  void *v95;
  NSNumber *v96;
  void *v97;
  NSNumber *v98;
  void *v99;
  NSNumber *v100;
  void *v101;
  NSNumber *v102;
  void *v103;
  NSNumber *v104;
  void *v105;
  NSNumber *v106;
  void *v107;
  NSNumber *v108;
  void *v109;
  NSNumber *v110;
  void *v111;
  NSNumber *v112;
  void *v113;
  void *v114;
  NSNumber *v115;
  void *v116;
  NSNumber *v117;
  void *v118;
  NSNumber *v119;
  void *v120;
  NSNumber *v121;
  void *v122;
  NSNumber *v123;
  void *v124;
  NSNumber *v125;
  void *v126;
  double FloatValue;
  double v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t DigitizerAttributes;
  void *v137;
  id v138;
  unint64_t v139;
  void *v140;
  void *v141;
  void *v142;
  void *cf;
  uint64_t v144;
  void *v145;
  void *v146;
  id **v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  _OWORD v152[3];
  uint64_t v153;
  const __CFArray *v154[2];
  uint64_t v155;
  _QWORD v156[2];
  _QWORD v157[2];
  _QWORD v158[2];
  _QWORD v159[2];
  _QWORD v160[2];
  _QWORD v161[2];
  _QWORD v162[3];
  _QWORD v163[3];
  _QWORD v164[2];
  _QWORD v165[2];
  _QWORD v166[3];
  _QWORD v167[3];

  v147 = a1;
  v3 = CFSTR("FromHID");
  v144 = a2;
  sub_1000111B4(v154, a2);
  sub_100010FD0((unint64_t)v154);
  if (v155)
  {
    IntegerValue = IOHIDEventGetIntegerValue(a2, 720923);
    v145 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    Data = IOHIDEventCreateData(0, v144);
    cf = (void *)objc_claimAutoreleasedReturnValue(Data);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(cf, "base64EncodedStringWithOptions:", 16));
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v6, CFSTR("RawCollectionData"));

    CFRelease(cf);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", CFSTR("FromHID"), CFSTR("description"));
    v7 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", IOHIDEventGetType(v144));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v8, CFSTR("type"));

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v155));
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v9, CFSTR("pathCount"));

    v10 = v147;
    if (v147)
      v10 = (id **)v147[1];
    v11 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "displayUUID"));
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v12, CFSTR("displayUUID"));

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IntegerValue));
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v13, CFSTR("generation"));

    v14 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", IOHIDEventGetTimeStamp(v144));
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v15, CFSTR("timestamp"));

    v16 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", IOHIDEventGetSenderID(v144));
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v17, CFSTR("senderID"));

    *(_QWORD *)&v18 = IOHIDEventGetEventFlags(v144).n128_u64[0];
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v19, v18));
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v20, CFSTR("flags"));

    v21 = IOHIDEventGetIntegerValue(v144, 720900);
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v21));
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v22, CFSTR("transducerType"));

    if (v21 > 3)
      v23 = &stru_1000F0F50;
    else
      v23 = *(&off_1000EAC28 + (int)v21);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v23, CFSTR("transducerTypeName"));
    v24 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v144, 720901));
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v25, CFSTR("transducerIndex"));

    v26 = IOHIDEventGetIntegerValue(v144, 720903);
    LODWORD(v25) = v26;
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v26));
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v27, CFSTR("eventMask"));

    v28 = sub_1000498D4((int)v25);
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v29, CFSTR("eventMaskName"));

    v30 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v144, 720899));
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v31, CFSTR("buttonMask"));

    v32 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v144, 720905));
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v33, CFSTR("touch"));

    v34 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v144, 720904));
    v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v35, CFSTR("range"));

    v36 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v144, 720906));
    v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v37, CFSTR("pressure"));

    v38 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v144, 720907));
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v39, CFSTR("auxilliaryPressure"));

    v40 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v144, 720908));
    v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v41, CFSTR("twist"));

    v42 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v144, 720923));
    v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v43, CFSTR("generationCount"));

    v44 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v144, 720924));
    v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v45, CFSTR("willUpdateMask"));

    v46 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v144, 720925));
    v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v47, CFSTR("didUpdateMask"));

    v166[0] = CFSTR("x");
    v48 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v144, 720896));
    v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
    v167[0] = v49;
    v166[1] = CFSTR("y");
    v50 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v144, 720897));
    v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
    v167[1] = v51;
    v166[2] = CFSTR("z");
    v52 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v144, 720898));
    v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
    v167[2] = v53;
    v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v167, v166, 3));
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v54, CFSTR("location"));

    v164[0] = CFSTR("x");
    v55 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v144, 720909));
    v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
    v164[1] = CFSTR("y");
    v165[0] = v56;
    v57 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v144, 720910));
    v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
    v165[1] = v58;
    v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v165, v164, 2));
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v59, CFSTR("tilt"));

    v146 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    objc_msgSend(v145, "setObject:forKeyedSubscript:");
    sub_1000111B4((const __CFArray **)v152, v144);
    sub_100010FD0((unint64_t)v152);
    v148 = v152[0];
    v149 = v152[1];
    v150 = v152[2];
    v151 = v153;
    while (1)
    {
      v60 = *((_QWORD *)&v149 + 1);
      if (!*((_QWORD *)&v149 + 1))
        break;
      v61 = v150;
      *((_QWORD *)&v150 + 1) = *((_QWORD *)&v149 + 1);
      v151 = v150;
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      objc_msgSend(v146, "addObject:", v62);
      v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v61));
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v63, CFSTR("pathIndex"));

      v64 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", IOHIDEventGetType(v60));
      v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v65, CFSTR("type"));

      v66 = sub_100011258(v147[14], v61);
      v67 = (unsigned int *)objc_claimAutoreleasedReturnValue(v66);
      if (v67)
        v68 = v67[4];
      else
        v68 = 0;

      v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v68));
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v69, CFSTR("touchID"));

      *(_QWORD *)&v70 = IOHIDEventGetEventFlags(v60).n128_u64[0];
      v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v71, v70));
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v72, CFSTR("flags"));

      v73 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v60, 720902));
      v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v74, CFSTR("identity"));

      v75 = IOHIDEventGetIntegerValue(v60, 720900);
      v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v75));
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v76, CFSTR("transducerType"));

      v77 = &stru_1000F0F50;
      if (v75 <= 3)
        v77 = *(&off_1000EAC28 + (int)v75);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v77, CFSTR("transducerTypeName"));
      v78 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v60, 720901));
      v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v79, CFSTR("transducerIndex"));

      v80 = IOHIDEventGetIntegerValue(v60, 720903);
      LODWORD(v79) = v80;
      v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v80));
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v81, CFSTR("eventMask"));

      v82 = sub_1000498D4((int)v79);
      v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v83, CFSTR("eventMaskName"));

      v84 = IOHIDEventGetIntegerValue(v60, 720923);
      if (v84)
      {
        v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v84));
        objc_msgSend(v62, "setObject:forKeyedSubscript:", v85, CFSTR("generation"));

        v86 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v60, 720924));
        v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
        objc_msgSend(v62, "setObject:forKeyedSubscript:", v87, CFSTR("willUpdateMask"));

        v88 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v60, 720925));
        v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
        objc_msgSend(v62, "setObject:forKeyedSubscript:", v89, CFSTR("didUpdateMask"));

      }
      v90 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v60, 720899));
      v91 = (void *)objc_claimAutoreleasedReturnValue(v90);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v91, CFSTR("buttonMask"));

      v92 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v60, 720905));
      v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v93, CFSTR("touch"));

      v94 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v60, 720904));
      v95 = (void *)objc_claimAutoreleasedReturnValue(v94);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v95, CFSTR("range"));

      v96 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v60, 720906));
      v97 = (void *)objc_claimAutoreleasedReturnValue(v96);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v97, CFSTR("pressure"));

      v98 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v60, 720907));
      v99 = (void *)objc_claimAutoreleasedReturnValue(v98);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v99, CFSTR("auxilliaryPressure"));

      v100 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v60, 720908));
      v101 = (void *)objc_claimAutoreleasedReturnValue(v100);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v101, CFSTR("twist"));

      v102 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v60, 720923));
      v103 = (void *)objc_claimAutoreleasedReturnValue(v102);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v103, CFSTR("generationCount"));

      v104 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v60, 720924));
      v105 = (void *)objc_claimAutoreleasedReturnValue(v104);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v105, CFSTR("willUpdateMask"));

      v106 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", IOHIDEventGetIntegerValue(v60, 720925));
      v107 = (void *)objc_claimAutoreleasedReturnValue(v106);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v107, CFSTR("didUpdateMask"));

      v162[0] = CFSTR("x");
      v108 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v60, 720896));
      v109 = (void *)objc_claimAutoreleasedReturnValue(v108);
      v163[0] = v109;
      v162[1] = CFSTR("y");
      v110 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v60, 720897));
      v111 = (void *)objc_claimAutoreleasedReturnValue(v110);
      v163[1] = v111;
      v162[2] = CFSTR("z");
      v112 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v60, 720898));
      v113 = (void *)objc_claimAutoreleasedReturnValue(v112);
      v163[2] = v113;
      v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v163, v162, 3));
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v114, CFSTR("location"));

      v115 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v60, 720913));
      v116 = (void *)objc_claimAutoreleasedReturnValue(v115);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v116, CFSTR("quality"));

      v117 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v60, 720914));
      v118 = (void *)objc_claimAutoreleasedReturnValue(v117);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v118, CFSTR("density"));

      v119 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v60, 720915));
      v120 = (void *)objc_claimAutoreleasedReturnValue(v119);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v120, CFSTR("irregularity"));

      v121 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v60, 720916));
      v122 = (void *)objc_claimAutoreleasedReturnValue(v121);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v122, CFSTR("majorRadius"));

      v123 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v60, 720917));
      v124 = (void *)objc_claimAutoreleasedReturnValue(v123);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v124, CFSTR("minorRadius"));

      v125 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IOHIDEventGetFloatValue(v60, 720922));
      v126 = (void *)objc_claimAutoreleasedReturnValue(v125);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v126, CFSTR("accuracy"));

      FloatValue = IOHIDEventGetFloatValue(v60, 720896);
      v128 = IOHIDEventGetFloatValue(v60, 720897);
      v160[0] = CFSTR("precise");
      v158[0] = CFSTR("x");
      v129 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", FloatValue));
      v158[1] = CFSTR("y");
      v159[0] = v129;
      v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v128));
      v159[1] = v130;
      v131 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v159, v158, 2));
      v161[0] = v131;
      v160[1] = CFSTR("rounded");
      v156[0] = CFSTR("x");
      v132 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", FloatValue));
      v156[1] = CFSTR("y");
      v157[0] = v132;
      v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v128));
      v157[1] = v133;
      v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v157, v156, 2));
      v161[1] = v134;
      v135 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v161, v160, 2));
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v135, CFSTR("digitizerPoints"));

      sub_100010FD0((unint64_t)&v148);
    }
    DigitizerAttributes = BKSHIDEventGetDigitizerAttributes(v144);
    v137 = (void *)objc_claimAutoreleasedReturnValue(DigitizerAttributes);
    v138 = objc_msgSend(v137, "systemGestureStateChange");
    v139 = IOHIDEventGetIntegerValue(v144, 720903);
    v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v138));
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v140, CFSTR("systemGesturesPossible"));

    v141 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v139 >> 7) & 1));
    objc_msgSend(v145, "setObject:forKeyedSubscript:", v141, CFSTR("isCancelling"));

    v142 = (void *)objc_claimAutoreleasedReturnValue(+[SLGLog sharedInstance](SLGLog, "sharedInstance"));
    objc_msgSend(v142, "log:", v145);

  }
}

void sub_1000494D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1000498D4(int a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = v2;
  if ((a1 & 0x20000) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("Tap"));
  if ((a1 & 0x10) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("Peak"));
  if ((a1 & 8) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("Stop"));
  if ((a1 & 1) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("Range"));
  if ((a1 & 0x100) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("Start"));
  if ((a1 & 2) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("Touch"));
  if ((a1 & 0x80) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("Cancel"));
  if ((a1 & 0x200) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("Resting"));
  if ((a1 & 0x1000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("SwipeUp"));
  if ((a1 & 0x2000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("SwipeDown"));
  if ((a1 & 0x4000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("SwipeLeft"));
  if ((a1 & 0x8000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("SwipeRight"));
  if ((a1 & 0x40000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("SwipeLocked"));
  if ((a1 & 0x2000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("SwipePending"));
  if ((a1 & 0x20) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("Identity"));
  if ((a1 & 4) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("Position"));
  if ((a1 & 0x40) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("Attribute"));
  if ((a1 & 0x1000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("FromCorner"));
  if ((a1 & 0x800) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("FromEdgeTip"));
  if ((a1 & 0x400) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("FromEdgeFlat"));
  if ((a1 & 0x8000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("FromEdgeForceActive"));
  if ((a1 & 0x4000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("FromEdgeForcePending"));
  if ((a1 & 0x20000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("EstimatedAzimuth"));
  if ((a1 & 0x10000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("EstimatedAltitude"));
  if ((a1 & 0x40000000) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("EstimatedPressure"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "componentsJoinedByString:", CFSTR(" ")));

  return v4;
}

void sub_100049B18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10004A7DC(id a1)
{
  BKTouchEventServer *v1;
  void *v2;

  v1 = objc_alloc_init(BKTouchEventServer);
  v2 = (void *)qword_100117350;
  qword_100117350 = (uint64_t)v1;

}

id sub_10004AD44()
{
  objc_opt_self();
  if (qword_100117358 != -1)
    dispatch_once(&qword_100117358, &stru_1000EAC90);
  return (id)qword_100117360;
}

void sub_10004AD88(id a1)
{
  BKDisplayAnnotationDisplayController *v1;
  void *v2;

  v1 = objc_alloc_init(BKDisplayAnnotationDisplayController);
  v2 = (void *)qword_100117360;
  qword_100117360 = (uint64_t)v1;

}

uint64_t sub_10004ADB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

__CFString *sub_10004B74C(void *a1)
{
  id v1;
  __CFString *v2;

  v1 = a1;
  if ((sub_10000F94C(v1) & 1) != 0)
  {
    v2 = CFSTR("mainDisplay");
  }
  else if (v1)
  {
    v2 = (__CFString *)v1;
  }
  else
  {
    v2 = CFSTR("testDisplay");
  }

  return v2;
}

void sub_10004B7A0(uint64_t a1)
{
  void *v2;
  __CFString *v3;
  void *v4;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  id v9;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = sub_10004B74C(*(void **)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v4));

  v5 = *(_BYTE **)(a1 + 48);
  if (v9)
  {
    if (v5)
      **(_BYTE **)(a1 + 48) = objc_msgSend(v9, "humanIsPresent");
    if (*(_QWORD *)(a1 + 56))
    {
      objc_msgSend(v9, "proximityInCentimeters");
      **(_QWORD **)(a1 + 56) = v6;
    }
    if (*(_QWORD *)(a1 + 64))
      **(_QWORD **)(a1 + 64) = objc_msgSend(v9, "status");
  }
  else
  {
    if (v5)
      *v5 = 0;
    v7 = *(_QWORD **)(a1 + 56);
    if (v7)
      *v7 = 0;
    v8 = *(_QWORD **)(a1 + 64);
    if (v8)
      *v8 = 0;
  }

}

void sub_10004B870(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKey:", *(_QWORD *)(a1 + 40)));
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "setHumanIsPresent:", *(unsigned __int8 *)(a1 + 48));
  }
  else
  {
    v4 = BKLogCommon(0);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v7 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v6);
      v8 = *(_QWORD *)(a1 + 40);
      v10 = 138543618;
      v11 = v7;
      v12 = 2114;
      v13 = v8;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@: missing sensor record for displayUUID %{public}@", (uint8_t *)&v10, 0x16u);

    }
  }

}

void sub_10004B968(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKey:", *(_QWORD *)(a1 + 40)));
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "setProximityInCentimeters:", *(double *)(a1 + 48));
  }
  else
  {
    v4 = BKLogCommon(0);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v7 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v6);
      v8 = *(_QWORD *)(a1 + 40);
      v10 = 138543618;
      v11 = v7;
      v12 = 2114;
      v13 = v8;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@: missing sensor record for displayUUID %{public}@", (uint8_t *)&v10, 0x16u);

    }
  }

}

void sub_10004BC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10004C318(uint64_t a1)
{
  id v2;
  NSObject *v3;
  double v4;
  _DWORD *v5;
  _QWORD *v6;
  CFTimeInterval v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  id v12;
  NSObject *v13;
  int v15;
  double v16;
  __int16 v17;
  double v18;

  v2 = sub_100059A14();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(double *)(a1 + 40);
    v15 = 134217984;
    v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Checkpoint after interval: %gs", (uint8_t *)&v15, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_queue_clearTimer");
  v5 = *(_DWORD **)(a1 + 32);
  if (v5[11] == 1)
  {
    v6 = &kBKSHIDServicesUserEventPresenceExpired;
    return objc_msgSend(v5, "_queue_postNotification:", *v6);
  }
  v7 = CACurrentMediaTime();
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(double *)(v8 + 8);
  v10 = v7 - *(double *)(v8 + 16);
  if (v10 >= v9)
  {
    *(_BYTE *)(v8 + 40) = 1;
    v5 = *(_DWORD **)(a1 + 32);
    v6 = &kBKSHIDServicesUserEventIdled;
    return objc_msgSend(v5, "_queue_postNotification:", *v6);
  }
  v11 = v9 - v10;
  v12 = sub_100059A14();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 134218240;
    v16 = v11;
    v17 = 2048;
    v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Rescheduling checkpoint with new interval: %gs (last user event was %gs ago)", (uint8_t *)&v15, 0x16u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_queue_scheduleTimerWithTimeInterval:", v11);
}

uint64_t sub_10004C48C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 56) = 1;
  return result;
}

id sub_10004C49C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  double v7;
  uint64_t v8;
  int v9;
  double v10;
  double v12;
  double *v13;
  double v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  double v18;

  v2 = sub_100059A14();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = NSStringFromBKSHIDServicesUserEventTimerMode(*(unsigned int *)(a1 + 56));
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v6 = (void *)v5;
    v7 = *(double *)(a1 + 40);
    if (v7 == BKSHIDServicesUserEventTimerIntervalForever)
      v7 = INFINITY;
    v15 = 138543618;
    v16 = v5;
    v17 = 2048;
    v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "reset timer to mode:%{public}@ duration:%gs", (uint8_t *)&v15, 0x16u);

  }
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 44) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 56) != 3)
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_DWORD *)(v8 + 44);
  if (!v9)
    return objc_msgSend((id)v8, "_queue_clearTimer");
  v10 = *(double *)(v8 + 8);
  switch(v9)
  {
    case 1:
      *(_BYTE *)(v8 + 40) = 1;
      break;
    case 3:
      *(_BYTE *)(v8 + 40) = 0;
      v12 = CACurrentMediaTime();
      v13 = *(double **)(a1 + 32);
      v14 = v13[3];
      if (v13[2] >= v14)
        v14 = v13[2];
      v10 = fmax(v13[1] - (v12 - v14), 0.0);
      break;
    case 2:
      *(_BYTE *)(v8 + 40) = 0;
      break;
  }
  return objc_msgSend(*(id *)(a1 + 32), "_queue_scheduleTimerWithTimeInterval:", v10);
}

double sub_10004C628(uint64_t a1)
{
  double result;

  result = *(double *)(*(_QWORD *)(a1 + 32) + 16);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10004C63C(uint64_t a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 57) = 1;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, kBKSHIDServicesSafeToSetIdleTimerNotification, 0, 0, 1u);
}

id sub_10004C674(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "descriptionBuilderWithMultilinePrefix:", &stru_1000F0F50));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "build"));

  return v3;
}

void sub_10004C70C(id a1)
{
  BKUserEventTimer *v1;
  void *v2;

  v1 = objc_alloc_init(BKUserEventTimer);
  v2 = (void *)qword_100117368;
  qword_100117368 = (uint64_t)v1;

}

id sub_10004CD7C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_finishBootingIfNecessaryAndTellObservers:", 1);
}

id sub_10004CD88(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "removeObject:", *(_QWORD *)(a1 + 40));
}

id sub_10004CD94(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "addObject:", *(_QWORD *)(a1 + 40));
}

_QWORD *sub_10004CDA0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(result[4] + 8), "addSystemShellObserver:reason:", result[4], CFSTR("first boot detection")));
    v3 = v1[4];
    v4 = *(void **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = v2;

    return _objc_msgSend((id)v1[4], "_queue_finishBootingIfNecessaryAndTellObservers:", 0);
  }
  return result;
}

void sub_10004CE40(id a1)
{
  BKFirstBootDetector *v1;
  void *v2;
  void *v3;
  BKFirstBootDetector *v4;
  void *v5;
  id v6;

  v1 = [BKFirstBootDetector alloc];
  v6 = (id)objc_claimAutoreleasedReturnValue(+[BKSystemShellSentinel sharedInstance](BKSystemShellSentinel, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKFirstBootKernelSemaphoreToken token](BKFirstBootKernelSemaphoreToken, "token"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKAlternateSystemAppManager sharedInstance](BKAlternateSystemAppManager, "sharedInstance"));
  v4 = -[BKFirstBootDetector initWithSystemAppSentinel:firstBootToken:alternateSystemAppManager:](v1, "initWithSystemAppSentinel:firstBootToken:alternateSystemAppManager:", v6, v2, v3);
  v5 = (void *)qword_100117378;
  qword_100117378 = (uint64_t)v4;

}

id sub_10004D234(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "appendUInt64:withName:format:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), CFSTR("senderID"), 1);
  v3 = objc_msgSend(*(id *)(a1 + 32), "appendUnsignedInteger:withName:format:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), CFSTR("page"), 1);
  return objc_msgSend(*(id *)(a1 + 32), "appendUnsignedInteger:withName:format:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24), CFSTR("usage"), 1);
}

void sub_10004D828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004F4B0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100050BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  id *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

id sub_100051EDC(id a1, BKKeyboardInfo *a2)
{
  return sub_1000795E8(a2);
}

void sub_100051EE4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "appendString:", CFSTR("("));
  BSDescriptionStreamAppendBKSKeyModifierFlags(v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));
  objc_msgSend(v3, "appendString:", CFSTR(")"));

}

id sub_100051F40(id a1, BKIOHIDService *a2)
{
  BKIOHIDService *v3;
  uint64_t v4;
  void *v5;
  BKIOHIDService *v6;
  BKKeyboardInfo *v7;
  BKIOHIDService *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSString *transport;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSNumber *productID;
  uint64_t v17;
  id v18;
  uint64_t v19;
  NSNumber *vendorID;
  uint64_t v21;
  id v22;
  uint64_t v23;
  NSNumber *virtualDeviceID;
  void *v25;
  unsigned int v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  BKIOHIDService *service;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  NSString *v40;
  NSString *keyboardLanguage;
  uint64_t v42;
  id v43;
  void *v44;
  NSString *v45;
  NSString *exclusivityIdentifier;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  id v51;
  void *v52;
  unsigned __int8 v53;
  uint64_t v54;
  id v55;
  void *v56;
  unsigned __int8 v57;
  uint64_t v58;
  id v59;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  BKKeyboardInfo *v64;
  uint64_t v65;
  NSObject *v66;
  void *v67;
  void *v68;
  id *v70;
  void *v71;
  void *v72;
  BKIOHIDService *v73;
  uint8_t buf[4];
  void *v75;
  __int16 v76;
  void *v77;
  __int16 v78;
  BKIOHIDService *v79;

  v3 = a2;
  if (-[BKIOHIDService primaryUsagePage](v3, "primaryUsagePage") == 1
    && -[BKIOHIDService primaryUsage](v3, "primaryUsage") == 6
    || (-[BKIOHIDService claimsToConformToUsagePage:usage:](v3, "claimsToConformToUsagePage:usage:", 65, 1) & 1) != 0)
  {
LABEL_7:
    v6 = v3;
    objc_opt_self(BKKeyboardInfo);
    v7 = [BKKeyboardInfo alloc];
    v8 = v6;
    if (!v7)
    {
LABEL_21:

      goto LABEL_25;
    }
    objc_storeStrong((id *)&v7->_service, a2);
    v10 = -[BKIOHIDService propertyOfClass:forKey:](v8, "propertyOfClass:forKey:", objc_opt_class(NSString, v9), CFSTR("Transport"));
    v11 = objc_claimAutoreleasedReturnValue(v10);
    transport = v7->_transport;
    v7->_transport = (NSString *)v11;

    v14 = -[BKIOHIDService propertyOfClass:forKey:](v8, "propertyOfClass:forKey:", objc_opt_class(NSNumber, v13), CFSTR("ProductID"));
    v15 = objc_claimAutoreleasedReturnValue(v14);
    productID = v7->_productID;
    v7->_productID = (NSNumber *)v15;

    v18 = -[BKIOHIDService propertyOfClass:forKey:](v8, "propertyOfClass:forKey:", objc_opt_class(NSNumber, v17), CFSTR("VendorID"));
    v19 = objc_claimAutoreleasedReturnValue(v18);
    vendorID = v7->_vendorID;
    v7->_vendorID = (NSNumber *)v19;

    v22 = -[BKIOHIDService propertyOfClass:forKey:](v8, "propertyOfClass:forKey:", objc_opt_class(NSNumber, v21), CFSTR("HIDVirtualDevice"));
    v23 = objc_claimAutoreleasedReturnValue(v22);
    virtualDeviceID = v7->_virtualDeviceID;
    v7->_virtualDeviceID = (NSNumber *)v23;

    v7->_keyboardType = 0;
    v25 = (void *)objc_claimAutoreleasedReturnValue(-[BKIOHIDService propertyForKey:](v8, "propertyForKey:", CFSTR("StandardType")));
    v72 = v25;
    v73 = v3;
    if (v25)
    {
      v26 = objc_msgSend(v25, "unsignedIntValue");
      v7->_keyboardType = v26;
      if (v26 != -1)
        goto LABEL_13;
    }
    else
    {
      v7->_keyboardType = -1;
    }
    v7->_wantsStandardTypeOverride = 1;
LABEL_13:
    v71 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults", &v7->_service));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "keyboardTypeRemap"));
    v28 = sub_100078D10((uint64_t)v7);
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKey:", v29));

    if (v30 && objc_msgSend(v30, "unsignedIntValue") != v7->_keyboardType)
    {
      v32 = objc_msgSend(v30, "unsignedIntValue");
      v7->_keyboardType = v32;
      service = v7->_service;
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v32));
      -[BKIOHIDService setProperty:forKey:](service, "setProperty:forKey:", v34, CFSTR("StandardType"));

      v7->_wantsStandardTypeOverride = 1;
    }
    v35 = -[BKIOHIDService propertyOfClass:forKey:](v8, "propertyOfClass:forKey:", objc_opt_class(NSNumber, v31), CFSTR("CountryCode"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    v7->_countryCode = objc_msgSend(v36, "unsignedCharValue");
    v38 = -[BKIOHIDService propertyOfClass:forKey:](v8, "propertyOfClass:forKey:", objc_opt_class(NSString, v37), CFSTR("KeyboardLanguage"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    v40 = (NSString *)objc_msgSend(v39, "copy");
    keyboardLanguage = v7->_keyboardLanguage;
    v7->_keyboardLanguage = v40;

    v43 = -[BKIOHIDService propertyOfClass:forKey:](v8, "propertyOfClass:forKey:", objc_opt_class(NSString, v42), CFSTR("exclusivityIdentifier"));
    v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    v45 = (NSString *)objc_msgSend(v44, "copy");
    exclusivityIdentifier = v7->_exclusivityIdentifier;
    v7->_exclusivityIdentifier = v45;

    v48 = -[BKIOHIDService propertyOfClass:forKey:](v8, "propertyOfClass:forKey:", objc_opt_class(NSNumber, v47), CFSTR("HIDSubinterfaceID"));
    v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
    v7->_subinterfaceID = (int64_t)objc_msgSend(v49, "integerValue");
    v51 = -[BKIOHIDService propertyOfClass:forKey:](v8, "propertyOfClass:forKey:", objc_opt_class(NSNumber, v50), CFSTR("CapsLockLanguageSwitch"));
    v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
    v53 = objc_msgSend(v52, "BOOLValue");

    v7->_capsLockKeyHasLanguageSwitchLabel = v53;
    v55 = -[BKIOHIDService propertyOfClass:forKey:](v8, "propertyOfClass:forKey:", objc_opt_class(NSNumber, v54), CFSTR("SupportsGlobeKey"));
    v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
    v57 = objc_msgSend(v56, "BOOLValue");

    v7->_globeKeyLabelHasGlobeSymbol = v57;
    v59 = -[BKIOHIDService propertyOfClass:forKey:](v8, "propertyOfClass:forKey:", objc_opt_class(NSNumber, v58), CFSTR("KeyboardEnabledByEvent"));
    v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
    v61 = v60;
    if (v60)
      v7->_shouldActivateByGesture = objc_msgSend(v60, "BOOLValue");
    v62 = sub_100078D48(v7);
    v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
    if (v63)
      objc_msgSend(*v70, "setProperty:forKey:", v63, CFSTR("HIDKeyboardModifierMappingPairs"));

    v64 = v7;
    v3 = v73;
    goto LABEL_21;
  }
  v4 = objc_claimAutoreleasedReturnValue(-[BKIOHIDService propertyForKey:](v3, "propertyForKey:", CFSTR("DeviceTypeHint")));
  v5 = (void *)v4;
  if (v4)
  {
    v4 = (uint64_t)objc_msgSend((id)v4, "isEqualToString:", CFSTR("Trackpad"));
    if ((v4 & 1) != 0)
    {

      goto LABEL_7;
    }
  }
  v65 = BKLogKeyboard(v4);
  v66 = objc_claimAutoreleasedReturnValue(v65);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
  {
    v67 = (void *)objc_claimAutoreleasedReturnValue(-[BKIOHIDService propertyForKey:](v3, "propertyForKey:", CFSTR("Manufacturer")));
    v68 = (void *)objc_claimAutoreleasedReturnValue(-[BKIOHIDService propertyForKey:](v3, "propertyForKey:", CFSTR("Product")));
    *(_DWORD *)buf = 138543874;
    v75 = v67;
    v76 = 2114;
    v77 = v68;
    v78 = 2114;
    v79 = v3;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Ignoring service with secondary keyboard usage: %{public}@/%{public}@/%{public}@", buf, 0x20u);

  }
  v7 = 0;
LABEL_25:

  return v7;
}

id sub_100052480(uint64_t a1, uint64_t a2, void *a3)
{
  return _objc_msgSend(a3, "bufferDidDrain:", *(_QWORD *)(a1 + 32));
}

void sub_100052490(uint64_t a1)
{
  id v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v2, "smartKeyboardAttachmentStateDidChange:", WeakRetained);

  }
}

void sub_1000524E0(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "setEventType:", 3);
  objc_msgSend(v3, "setOriginIdentifier:", 0xC181BADB23D8497BLL);
  objc_msgSend(v3, "setContext:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v3, "setVersionedPID:", *(_QWORD *)(a1 + 40));
  objc_msgSend(v3, "setRegistrantEntitled:", 1);

}

void sub_100052554(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  const void *KeyboardEvent;
  id v9;
  void *v10;
  id v11;
  _QWORD *v12;

  v12 = a2;
  v5 = a3;
  if (!v12)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_5;
    v6 = 0;
    v7 = 0;
    goto LABEL_4;
  }
  if (v12[1] == *(_QWORD *)(a1 + 32))
  {
    v6 = *((unsigned __int16 *)v12 + 8);
    v7 = *((unsigned __int16 *)v12 + 12);
LABEL_4:
    KeyboardEvent = (const void *)IOHIDEventCreateKeyboardEvent(0, *(_QWORD *)(a1 + 40), v6, v7, 0, 0);
    v9 = objc_msgSend(v5, "firstAdditionalContext", IOHIDEventSetSenderID(KeyboardEvent, *(_QWORD *)(a1 + 32)).n128_f64[0]);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = objc_msgSend(v10, "copy");

    objc_msgSend(v5, "postEvent:position:additionalContext:", KeyboardEvent, 3, v11);
    CFRelease(KeyboardEvent);

  }
LABEL_5:

}

void sub_10005262C(_QWORD *a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 128), "objectForKeyedSubscript:", a1[5]));
  v3 = objc_msgSend(v2, "integerValue");

  if ((id)a1[6] == v3)
    objc_msgSend(*(id *)(a1[4] + 128), "removeObjectForKey:", a1[5]);
}

void sub_100052694(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a2;
  if (objc_msgSend(a3, "BOOLValue"))
    objc_msgSend(*(id *)(a1 + 32), "_lock_publishUsableKeyboards:toServiceConnection:", *(_QWORD *)(a1 + 40), v5);

}

id sub_1000526E0(id a1, BKKeyboardInfo *a2)
{
  return sub_1000795E8(a2);
}

void sub_1000526E8(uint64_t a1, void *a2)
{
  id v3;
  os_unfair_lock_s *WeakRetained;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  int v10;
  id v11;

  v3 = a2;
  WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 48));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    os_unfair_lock_lock(WeakRetained + 2);
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    if (v3)
    {
      v7 = BKLogKeyboard(v6);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v10 = 138412290;
        v11 = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "error in setConnectedKeyboards response:%@", (uint8_t *)&v10, 0xCu);
      }

    }
    else if (*(_QWORD *)(a1 + 56) != *(_QWORD *)&v5[6]._os_unfair_lock_opaque)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)&v5[10]._os_unfair_lock_opaque, "bs_map:", &stru_1000EAE58));
      -[os_unfair_lock_s _lock_publishUsableKeyboards:toServiceConnection:](v5, "_lock_publishUsableKeyboards:toServiceConnection:", v9, *(_QWORD *)(a1 + 32));

    }
    os_unfair_lock_unlock(v5 + 2);
  }

}

id sub_100052820(id a1, BKKeyboardInfo *a2)
{
  return sub_1000795E8(a2);
}

uint64_t sub_100052828(int a1, int a2)
{
  id v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  __int128 v29;
  char v30;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  uint64_t v38;
  _BYTE v39[128];

  if (qword_100117390 != -1)
    dispatch_once(&qword_100117390, &stru_1000EAFB8);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v2 = (id)qword_100117388;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
  if (v3)
  {
    v5 = v3;
    v30 = 0;
    v6 = *(_QWORD *)v34;
    *(_QWORD *)&v4 = 138543362;
    v29 = v4;
    while (1)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v34 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("productID"), v29));
        v11 = objc_opt_class(NSNumber, v10);
        v12 = v9;
        v13 = v12;
        if (v11)
        {
          if ((objc_opt_isKindOfClass(v12, v11) & 1) != 0)
            v14 = v13;
          else
            v14 = 0;
        }
        else
        {
          v14 = 0;
        }
        v15 = v14;

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("vendorID")));
        v18 = objc_opt_class(NSNumber, v17);
        v19 = v16;
        v20 = v19;
        if (v18)
        {
          if ((objc_opt_isKindOfClass(v19, v18) & 1) != 0)
            v21 = v20;
          else
            v21 = 0;
        }
        else
        {
          v21 = 0;
        }
        v22 = v21;

        if (!v15 || !v22)
        {
          v27 = BKLogKeyboard(v23);
          v26 = objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v29;
            v38 = qword_100117388;
            _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Unfamiliar MG query result format: %{public}@", buf, 0xCu);
          }
          goto LABEL_27;
        }
        if (objc_msgSend(v15, "unsignedIntValue") == a2)
        {
          v24 = objc_msgSend(v22, "unsignedIntValue");
          if ((_DWORD)v24 == a1)
          {
            v25 = BKLogKeyboard(v24);
            v26 = objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Keyboard requires HES workaround for open", buf, 2u);
            }
            v30 = 1;
LABEL_27:

          }
        }

      }
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
      if (!v5)
        goto LABEL_32;
    }
  }
  v30 = 0;
LABEL_32:

  return v30 & 1;
}

void sub_100052B10(id a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  void *v13;

  v1 = (void *)MGCopyAnswer(CFSTR("StrictWakeKeyboardCases"), 0);
  v4 = objc_opt_class(NSArray, v2, v3);
  v5 = v1;
  v6 = v5;
  if (v4)
  {
    if ((objc_opt_isKindOfClass(v5, v4) & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = v7;

  v9 = (void *)qword_100117388;
  qword_100117388 = (uint64_t)v8;

  if (!qword_100117388)
  {
    v10 = BKLogKeyboard();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = 138543362;
      v13 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Unfamiliar MG query result format: %{public}@", (uint8_t *)&v12, 0xCu);
    }

  }
}

void sub_100052C2C(uint64_t a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  _QWORD *v25;

  v3 = a2;
  v4 = v3;
  if (v3)
    v5 = (void *)v3[3];
  else
    v5 = 0;
  v6 = v5;
  v7 = objc_msgSend(v6, "senderID");

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v8));

  if (!v9)
  {
    if (v4)
      v10 = (void *)v4[3];
    else
      v10 = 0;
    v11 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "propertyForKey:", CFSTR("VendorID")));
    v13 = objc_msgSend(v12, "unsignedIntValue");
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "propertyForKey:", CFSTR("ProductID")));
    v15 = sub_100052828(v13, (int)objc_msgSend(v14, "unsignedIntValue"));

    if (v15)
    {
      ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96);
      v17 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(v17 + 96) == 1)
      {
        v18 = objc_msgSend(*(id *)(v17 + 168), "eventProcessorOfClass:", objc_opt_class(BKSmartCoverHIDEventProcessor, v16));
        v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        objc_msgSend(v19, "setAttachedCoverRequiresWorkaroundForOpenState:", 1);

      }
    }
    if (v4)
      v20 = (void *)v4[3];
    else
      v20 = 0;
    v21 = v20;
    objc_msgSend(v21, "addDisappearanceObserver:queue:", *(_QWORD *)(a1 + 32), &_dispatch_main_q);

    v22 = BKLogKeyboard(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setObject:forKeyedSubscript:", v4, v8));
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = 138543362;
      v25 = v4;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Keyboard attached: %{public}@", (uint8_t *)&v24, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_lock_watchForGestures:", v4);
    if (sub_10007920C((uint64_t)v4))
      objc_msgSend(*(id *)(a1 + 32), "_lock_usableKeyboardAttached:", v4);

  }
}

id sub_100052E74(id a1, NSNumber *a2, BKKeyboardInfo *a3)
{
  BKKeyboardInfo *v4;
  NSInteger v5;
  int64_t activeModifiers;

  v4 = a3;
  v5 = -[NSNumber integerValue](a2, "integerValue");
  if (v4)
    activeModifiers = v4->_activeModifiers;
  else
    activeModifiers = 0;

  return +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", activeModifiers | v5);
}

id sub_100052ED0(id a1, BKKeyboardInfo *a2)
{
  return sub_1000795E8(a2);
}

BOOL sub_100052ED8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "senderID") == *(id *)(a1 + 32);
}

id sub_100052F08(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeRecognizer:", a2);
}

id sub_100052F14(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = BKLogKeyboard();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "external defaults did change %@", (uint8_t *)&v6, 0xCu);
  }

  return objc_msgSend(*(id *)(a1 + 40), "_modifierRemappingsDidChange");
}

__CFString *sub_100052FC0(uint64_t a1)
{
  id WeakRetained;
  __CFString *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", WeakRetained));
  else
    v2 = CFSTR("<nil>");

  return v2;
}

void sub_100053060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000530F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005373C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id *location, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,id a46)
{
  id *v46;
  id *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;

  objc_destroyWeak(v47);
  objc_destroyWeak(v46);

  objc_destroyWeak(location);
  objc_destroyWeak(&a46);

  _Unwind_Resume(a1);
}

void sub_100053914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)BKHIDDirectTouchEventProcessor;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1000539BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_100053E94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100054030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_10005462C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000548F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100054ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100054D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_100055168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39,uint64_t a40,char a41)
{

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a41, 8);

  _Unwind_Resume(a1);
}

void sub_100055340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100055690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_10005575C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000558D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100055B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100055C84(uint64_t a1)
{
  id *WeakRetained;
  uint64_t v2;
  NSObject *v3;
  int v4;
  id *v5;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = BKLogTouchEvents(WeakRetained);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138543362;
    v5 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "invalidate touch stream (process-exit) %{public}@", (uint8_t *)&v4, 0xCu);
  }

  sub_10008C60C(WeakRetained);
}

void sub_100055D38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100055D54(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) = *(_QWORD *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100055DB4;
  v3[3] = &unk_1000EB298;
  v1 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v1, "_queue_enumerateDigitizersForAllDisplaysUsingBlock:", v3);
}

void sub_100055DB4(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *i;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  BKHitTestResultPathLocation *v15;
  void *v16;
  id v17;
  __n128 v18;
  const void *v19;
  BKHIDEventCollector *v20;
  id obj;
  uint64_t v22;
  id v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[26];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];

  if (a2)
  {
    *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 32);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 8), "displayUUID"));
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 120), "allValues"));
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    if (v4)
    {
      v22 = *(_QWORD *)v31;
      do
      {
        v23 = v4;
        for (i = 0; i != v23; i = (char *)i + 1)
        {
          if (*(_QWORD *)v31 != v22)
            objc_enumerationMutation(obj);
          v6 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
          if (v6)
            v7 = *(unsigned int *)(v6 + 8);
          else
            v7 = 0;
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 128), "objectForKey:", v7));
          if (objc_msgSend(v24, "count"))
          {
            sub_100083580((uint64_t)v29, (void *)a2, 0);
            v8 = objc_alloc_init((Class)NSMutableArray);
            v27 = 0u;
            v28 = 0u;
            v25 = 0u;
            v26 = 0u;
            v9 = v24;
            v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
            if (v10)
            {
              v11 = *(_QWORD *)v26;
              do
              {
                v12 = 0;
                do
                {
                  if (*(_QWORD *)v26 != v11)
                    objc_enumerationMutation(v9);
                  v13 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v12);
                  sub_100083B4C(v13, (uint64_t)v29, 4);
                  if (v6)
                    v14 = *(unsigned int *)(v6 + 8);
                  else
                    v14 = 0;
                  v15 = sub_100083E10(a2, v13, v14, (uint64_t)v3, 1);
                  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
                  objc_msgSend(v8, "addObject:", v16);

                  v12 = (char *)v12 + 1;
                }
                while (v10 != v12);
                v17 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
                v10 = v17;
              }
              while (v17);
            }

            v19 = (const void *)sub_1000836F8(v29, v18);
            v20 = objc_alloc_init(BKHIDEventCollector);
            sub_10000FCE0((void *)a2, (uint64_t)v19, v6, (uint64_t)v20, 0, v8, *(double *)(a2 + 96));
            sub_100015510(a2, (uint64_t)v20);

            if (v19)
              CFRelease(v19);

            sub_100083964((uint64_t)v29);
          }

        }
        v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
      }
      while (v4);
    }

  }
}

void sub_10005606C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

id sub_100056118(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_10005615C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10005616C(uint64_t a1)
{

}

void sub_100056174(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unsigned int v6;
  id v7;
  id v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  _BYTE *v12;
  uint64_t v13;
  NSObject *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[4];
  unsigned int v21;
  __int16 v22;
  _BYTE *v23;
  _BYTE v24[128];

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_servicesMatchingSenderDescriptor:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    v6 = objc_msgSend(v5, "BOOLValue");
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v7 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
    if (v8)
    {
      v10 = *(_QWORD *)v17;
      *(_QWORD *)&v9 = 67109378;
      v15 = v9;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v17 != v10)
            objc_enumerationMutation(v7);
          v12 = (_BYTE *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_digitizerStateForService:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v11), v15, (_QWORD)v16));
          v13 = BKLogTouchEvents(v12);
          v14 = objc_claimAutoreleasedReturnValue(v13);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = v15;
            v21 = v6;
            v22 = 2114;
            v23 = v12;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "apply hoverDisabled:%{BOOL}u to %{public}@", buf, 0x12u);
          }

          if (v12)
            v12[209] = v6;

          v11 = (char *)v11 + 1;
        }
        while (v8 != v11);
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
      }
      while (v8);
    }

  }
}

void sub_100056330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100056360(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", CFSTR("InputDetectionMode"), CFSTR("TouchDetectionMode"), CFSTR("HostStateNotification"), 0);
  v2 = (void *)qword_1001173A8;
  qword_1001173A8 = (uint64_t)v1;

}

void sub_1000563B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  id v5;

  if (a3)
    v4 = *(void **)(a3 + 24);
  else
    v4 = 0;
  v5 = v4;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10005640C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100056420(uint64_t a1, uint64_t a2, id *a3)
{
  id *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = sub_10000C210(a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (char *)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v5);
        (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
        ++v8;
      }
      while (v6 != v8);
      v6 = (char *)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

void sub_100056518(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100056538(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id *v5;
  id *v6;
  void *v7;
  uint64_t v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  id v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  unsigned __int8 v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  BKTouchContact *v30;
  id v31;
  uint64_t v32;
  BKSHIDEventHitTestLayerInformation *hitTestInformationAtDown;
  NSArray *v34;
  NSArray *hostingChain;
  CGFloat v36;
  CGFloat v37;
  id v38;
  void *v39;
  void *v40;
  int v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  _OWORD v46[20];

  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "length");
  v4 = (void *)BKSDisplayUUIDMainKey;
  if (v3)
    v4 = v2;
  v43 = v4;

  v5 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 120), "objectForKeyedSubscript:", v43));
  v6 = sub_10000C210(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
  if (v8)
  {
    v9 = *(double *)(a1 + 64);
    v10 = *(double *)(a1 + 72);
    v11 = *(_DWORD *)(a1 + 80);
    v12 = *(void **)(a1 + 56);
    v42 = *(void **)(a1 + 48);
    memset(v46, 0, 304);
    v13 = sub_100005968((uint64_t)BKDisplayController, 0, 1, 0, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = *(_QWORD **)(v8 + 40);
    if (v15)
      v15 = (_QWORD *)v15[1];
    v16 = v15;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v8 + 8), "displayUUID"));
    v41 = v11;
    v45 = 0;
    v18 = objc_msgSend(v16, "contextIDAtCAScreenLocation:displayUUID:options:securityAnalysis:results:", v17, v14, &v45, v46, v9, v10);
    v19 = v45;

    if ((v18 & 1) != 0)
    {
      if (v19)
        objc_msgSend(v42, "setSecurityAnalysis:", v19);
      if (DWORD1(v46[0]))
      {
        v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v8 + 16), "_queue_slotRecordForSlotID:"));
        v21 = (void *)v20;
        if (v20)
        {
          v22 = *(id *)(v20 + 16);
          v23 = sub_100005968((uint64_t)BKDisplayController, 0, 0, v22, v12);
          v24 = (void *)objc_claimAutoreleasedReturnValue(v23);

          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v8 + 8), "displayUUID"));
          v25 = *(_QWORD **)(v8 + 40);
          if (v25)
            v25 = (_QWORD *)v25[1];
          v26 = v25;
          v27 = objc_msgSend(v26, "contextIDAtCAScreenLocation:displayUUID:options:securityAnalysis:results:", v40, v24, 0, v46, v9, v10);

          if (DWORD1(v46[0]))
            v28 = v27;
          else
            v28 = 0;
          if (v28 == 1)
          {
            v29 = sub_100012FFC((uint64_t)BKTouchDestination, LODWORD(v46[0]), DWORD2(v46[0]));
            v44 = (id)objc_claimAutoreleasedReturnValue(v29);
            v30 = objc_alloc_init(BKTouchContact);
            v30->_slotID = DWORD1(v46[0]);
            v31 = sub_10001C094((uint64_t)v46);
            v32 = objc_claimAutoreleasedReturnValue(v31);
            hitTestInformationAtDown = v30->_hitTestInformationAtDown;
            v30->_hitTestInformationAtDown = (BKSHIDEventHitTestLayerInformation *)v32;

            v34 = (NSArray *)objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:count:", &v44, 1);
            hostingChain = v30->_hostingChain;
            v30->_hostingChain = v34;

            sub_100035818(v40);
            v30->_denormalizedLocation.hitTestLocation.x = v36;
            v30->_denormalizedLocation.hitTestLocation.y = v37;
            v38 = sub_100016868(v8, (uint64_t)v30, v41, (uint64_t)v44);
            v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
            objc_msgSend(v42, "setAuthenticationMessage:", v39);

          }
        }

      }
    }

  }
}

void sub_100056870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, id a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_100056918()
{
  JUMPOUT(0x1000568FCLL);
}

void sub_100056920()
{
  JUMPOUT(0x100056900);
}

void sub_100056928()
{
  JUMPOUT(0x100056904);
}

void sub_100056930()
{
  JUMPOUT(0x100056908);
}

void sub_100056938()
{
  JUMPOUT(0x100056908);
}

void sub_100056944(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  __int128 v7;
  uint64_t v8;
  void *i;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BKTouchAuthenticationSlotRecord *v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  int v29;
  _BYTE v30[128];

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 144))
  {
    v2 = objc_alloc_init((Class)NSMutableDictionary);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 144);
    *(_QWORD *)(v3 + 144) = v2;

  }
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v5 = *(id *)(a1 + 40);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  if (v6)
  {
    v8 = *(_QWORD *)v25;
    *(_QWORD *)&v7 = 67109120;
    v23 = v7;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v11 = objc_msgSend(v10, "slotID", v23, (_QWORD)v24);
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v11));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "objectForKeyedSubscript:", v12));
        v14 = v13 == 0;

        if (v14)
        {
          v18 = objc_alloc_init(_BKTouchAuthenticationSlotRecord);
          v17 = (uint64_t)v18;
          if (v18)
          {
            objc_storeStrong((id *)&v18->_authenticationSpecification, v10);
            *(_BYTE *)(v17 + 8) = *(_BYTE *)(a1 + 48);
            *(_QWORD *)(v17 + 24) = 1;
          }
          if (*(_BYTE *)(a1 + 48) && objc_msgSend(v10, "initialSampleEvent") == (id)2)
          {
            v19 = *(void **)(*(_QWORD *)(a1 + 32) + 152);
            if (!v19)
            {
              v20 = objc_alloc_init((Class)NSMutableOrderedSet);
              v21 = *(_QWORD *)(a1 + 32);
              v22 = *(void **)(v21 + 152);
              *(_QWORD *)(v21 + 152) = v20;

              v19 = *(void **)(*(_QWORD *)(a1 + 32) + 152);
            }
            objc_msgSend(v19, "removeObject:", v12);
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "insertObject:atIndex:", v12, 0);
          }
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "setObject:forKey:", v17, v12);
          objc_msgSend(*(id *)(a1 + 32), "_queue_resetTouchAuthenticationInitialSampleEvent");
        }
        else
        {
          v16 = BKLogTouchEvents(v15);
          v17 = objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v23;
            v29 = (int)v11;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v17, OS_LOG_TYPE_ERROR, "addTouchAuthenticationSpecifications: already registered authentication spec for slotID:%X", buf, 8u);
          }
        }

      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
    }
    while (v6);
  }

}

void sub_100056BC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100056C08(uint64_t a1)
{
  void *v2;
  void *v3;
  id *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id *v9;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 144);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 56)));
  v9 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v3));

  v4 = v9;
  if (v9)
  {
    v5 = v9[2];
    v6 = objc_msgSend(v5, "copy");
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    v4 = v9;
    **(_BYTE **)(a1 + 48) = *((_BYTE *)v9 + 8);
  }

}

void sub_100056CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100056CCC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[6];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "invalidate");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;

  v4 = objc_msgSend(*(id *)(a1 + 40), "copy");
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 168);
  *(_QWORD *)(v5 + 168) = v4;

  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v7 = ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 176);
    v8 = objc_alloc((Class)BSProcessDeathWatcher);
    v9 = *(unsigned int *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(v10 + 8);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100056DAC;
    v15[3] = &unk_1000ECB60;
    v15[4] = v10;
    v15[5] = v7;
    v12 = objc_msgSend(v8, "initWithPID:queue:deathHandler:", v9, v11, v15);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(v13 + 160);
    *(_QWORD *)(v13 + 160) = v12;

  }
}

void sub_100056DAC(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(v1 + 176))
  {
    v3 = *(void **)(v1 + 168);
    *(_QWORD *)(v1 + 168) = 0;

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "invalidate");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 160);
    *(_QWORD *)(v4 + 160) = 0;

  }
}

id sub_100056E08(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];
  int v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100056E6C;
  v3[3] = &unk_1000EB278;
  v1 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  v4 = *(_DWORD *)(a1 + 48);
  return objc_msgSend(v1, "_queue_enumerateDigitizersForAllDisplaysUsingBlock:", v3);
}

void sub_100056E6C(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id obj;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = *(unsigned int *)(a1 + 40);
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    obj = v3;
    v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v6)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "uniqueIdentifier"));
          v10 = v9;
          if (v9)
          {
            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringByReplacingOccurrencesOfString:withString:", CFSTR("."), CFSTR("_")));

            v12 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("from-client.pid-%d.%@"), v4, v11));
            v13 = (void *)v12;
          }
          else
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("from-client.pid-%d"), v4));
          }
          v14 = *(void **)(a2 + 80);
          v15 = objc_msgSend(v8, "touchIdentifier");
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "text"));
          objc_msgSend(v14, "annotateTouch:withString:uniqueIdentifier:fromPID:", v15, v16, v13, v4);

        }
        v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v5);
    }

  }
}

void sub_100057038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

id sub_100057078(uint64_t a1)
{
  void *v1;
  _QWORD v3[4];
  __int128 v4;
  int v5;

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000570DC;
  v3[3] = &unk_1000EB1D8;
  v4 = *(_OWORD *)(a1 + 40);
  v5 = *(_DWORD *)(a1 + 56);
  return objc_msgSend(v1, "_queue_enumerateDigitizersForAllDisplaysUsingBlock:", v3);
}

void sub_1000570DC(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  int v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  if (a2)
  {
    v3 = *(_OWORD *)(a1 + 32);
    v4 = *(_DWORD *)(a1 + 48);
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
    v12 = v3;
    v13 = 0u;
    v5 = *(id *)(a2 + 112);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v14;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v14 != v7)
            objc_enumerationMutation(v5);
          v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v8);
          if (*(_DWORD *)(v9 + 20) == v4)
            *(_OWORD *)(v9 + 152) = v12;
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v6);
    }

    v10 = sub_10000C768(*(id **)(a2 + 112));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    sub_1000831FC(a2, v11);

  }
}

void sub_100057210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100057234(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];
  int v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100057298;
  v3[3] = &unk_1000EB278;
  v1 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  v4 = *(_DWORD *)(a1 + 48);
  return objc_msgSend(v1, "_queue_enumerateDigitizersForAllDisplaysUsingBlock:", v3);
}

void sub_100057298(uint64_t a1, uint64_t a2)
{
  void *v3;
  int v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id obj;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = *(_DWORD *)(a1 + 40);
    v13 = objc_alloc_init((Class)NSMutableArray);
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    obj = *(id *)(a2 + 112);
    v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    v12 = a2;
    if (v5)
    {
      v6 = *(_QWORD *)v25;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v25 != v6)
            objc_enumerationMutation(obj);
          v8 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)v7);
          if (*(_DWORD *)(v8 + 20) == v4)
          {
            v9 = *(id *)(v8 + 248);
            v20 = 0;
            v21 = &v20;
            v22 = 0x2020000000;
            v23 = 0;
            v10 = objc_msgSend(v3, "shouldAvoidHitTesting");
            v11 = 2;
            if (!v10)
              v11 = 0;
            v23 = v11;
            v15[0] = _NSConcreteStackBlock;
            v15[1] = 3221225472;
            v15[2] = sub_100083DA8;
            v15[3] = &unk_1000EC380;
            v16 = v13;
            v17 = v8;
            v18 = v3;
            v19 = &v20;
            +[BKSHIDTouchRoutingPolicy inspectChangesWithOldPolicy:newPolicy:usingBlock:](BKSHIDTouchRoutingPolicy, "inspectChangesWithOldPolicy:newPolicy:usingBlock:", v9, v3, v15);
            *(_QWORD *)(v8 + 48) = v21[3];
            objc_storeStrong((id *)(v8 + 248), v3);

            _Block_object_dispose(&v20, 8);
          }
          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v5);
    }

    if (objc_msgSend(v13, "count"))
      sub_1000831FC(v12, v13);

  }
}

void sub_1000574AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

id sub_100057508(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v4[4];
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;

  v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100057580;
  v4[3] = &unk_1000EB228;
  v2 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v2;
  v9 = *(_DWORD *)(a1 + 88);
  v5 = *(_OWORD *)(a1 + 40);
  v8 = *(_OWORD *)(a1 + 72);
  return objc_msgSend(v1, "_queue_enumerateDigitizersForAllDisplaysUsingBlock:", v4);
}

void sub_100057580(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  void *v5;
  _DWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  void *i;
  int v27;
  BOOL v28;
  id v30;
  id obj;
  __int128 v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t v42[128];
  uint8_t buf[4];
  int v44;

  if (a2)
  {
    v3 = *(int **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    v33 = *(_DWORD *)(a1 + 80);
    v5 = *(void **)(a1 + 32);
    v32 = *(_OWORD *)(a1 + 64);
    v30 = objc_alloc_init((Class)NSMutableArray);
    if (v4 >= 1)
    {
      do
      {
        v6 = sub_10006D384(*(_QWORD *)(a2 + 112), *v3);
        v7 = objc_claimAutoreleasedReturnValue(v6);
        v8 = (void *)v7;
        if (v7)
        {
          if (*(_BYTE *)(v7 + 288))
          {
            v9 = BKLogTouchEvents(v7);
            v10 = objc_claimAutoreleasedReturnValue(v9);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              v11 = *v3;
              *(_DWORD *)buf = 67109120;
              v44 = v11;
              _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "tried to detach a touch (%d) that was already detached", buf, 8u);
            }

          }
          else
          {
            objc_msgSend(v30, "addObject:", v7);
          }
        }

        ++v3;
        --v4;
      }
      while (v4);
    }
    v12 = v30;
    v13 = objc_msgSend(v30, "count");
    v28 = v13 != 0;
    if (v13)
    {
      sub_1000828B8((id *)a2, v30, 1, 1);
      sub_1000828B8((id *)a2, v30, 6, 1);
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      obj = v30;
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
      v15 = v14;
      if (v14)
      {
        v16 = *(_QWORD *)v35;
        do
        {
          v17 = 0;
          do
          {
            if (*(_QWORD *)v35 != v16)
              objc_enumerationMutation(obj);
            v18 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v17);
            v19 = BKLogTouchEvents(v14);
            v20 = objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              v27 = *(_DWORD *)(v18 + 16);
              *(_DWORD *)buf = 67109120;
              v44 = v27;
              _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "detaching:%X", buf, 8u);
            }

            *(_DWORD *)(v18 + 20) = v33;
            *(_BYTE *)(v18 + 288) = 1;
            objc_storeStrong((id *)(v18 + 248), v5);
            v21 = objc_msgSend(v5, "shouldAvoidHitTesting");
            v22 = 2;
            if (!v21)
              v22 = 0;
            *(_QWORD *)(v18 + 48) = v22;
            *(_OWORD *)(v18 + 152) = v32;
            v38 = 0u;
            v39 = 0u;
            v40 = 0u;
            v41 = 0u;
            v23 = *(id *)(a2 + 72);
            v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v38, buf, 16);
            if (v24)
            {
              v25 = *(_QWORD *)v39;
              do
              {
                for (i = 0; i != v24; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v39 != v25)
                    objc_enumerationMutation(v23);
                  objc_msgSend(*(id *)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i), "touchDidDetach:destinations:", *(unsigned int *)(v18 + 16), *(_QWORD *)(v18 + 272));
                }
                v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v38, buf, 16);
              }
              while (v24);
            }

            v17 = (char *)v17 + 1;
          }
          while (v17 != v15);
          v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
          v15 = v14;
        }
        while (v14);
      }

      v12 = v30;
      sub_1000831FC(a2, obj);
    }

  }
  else
  {
    v28 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) |= v28;
}

void sub_10005790C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

id sub_10005796C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v4[6];
  int v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000579D0;
  v4[3] = &unk_1000EB1D8;
  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 48);
  v4[4] = *(_QWORD *)(a1 + 40);
  v4[5] = v2;
  v5 = *(_DWORD *)(a1 + 56);
  return objc_msgSend(v1, "_queue_enumerateDigitizersForAllDisplaysUsingBlock:", v4);
}

void sub_1000579D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  id *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *i;
  uint64_t v22;
  BKHitTestResultPathLocation *v23;
  void *v24;
  id v25;
  _DWORD *v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  void *j;
  BKHitTestResultPathLocation *v35;
  __n128 v36;
  const void *v37;
  BKHIDEventCollector *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  void *v45;
  NSString *v46;
  id v47;
  uint64_t v48;
  objc_class *v49;
  NSString *v50;
  void *v51;
  id *v52;
  void *v53;
  unsigned int v54;
  id obj;
  void *v56;
  id v57;
  void *v58;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD v68[4];
  _DWORD *v69;
  int v70;
  _DWORD *v71;
  _BYTE v72[128];
  uint8_t v73[128];
  uint8_t buf[4];
  _BYTE v75[18];
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  const __CFString *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  void *v83;

  if (a2)
  {
    v2 = *(unsigned int *)(a1 + 48);
    if (!(_DWORD)v2)
    {
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Invalid condition not satisfying: %@"), CFSTR("contextID != 0")));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        v46 = NSStringFromSelector("transferTouchIdentifiers:count:toContextID:");
        v47 = (id)objc_claimAutoreleasedReturnValue(v46);
        v49 = (objc_class *)objc_opt_class(a2, v48);
        v50 = NSStringFromClass(v49);
        v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
        *(_DWORD *)buf = 138544642;
        *(_QWORD *)v75 = v47;
        *(_WORD *)&v75[8] = 2114;
        *(_QWORD *)&v75[10] = v51;
        v76 = 2048;
        v77 = a2;
        v78 = 2114;
        v79 = CFSTR("BKDirectTouchState.mm");
        v80 = 1024;
        v81 = 836;
        v82 = 2114;
        v83 = v45;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

      }
      _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v45), "UTF8String"));
      __break(0);
      JUMPOUT(0x100058100);
    }
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
    {
      v4 = *(int **)(a1 + 32);
      v71 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 120), "objectForKey:", v2));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 8), "displayUUID"));
      v58 = (void *)v5;
      if (v71)
      {
        v6 = v71[3];
      }
      else
      {
        v7 = *(_QWORD **)(a2 + 40);
        if (v7)
          v7 = (_QWORD *)v7[1];
        v8 = v7;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 8), "displayUUID"));
        v6 = objc_msgSend(v8, "taskPortForContextID:displayUUID:", v2, v9);

      }
      v54 = v6;
      if (v6 - 1 >= 0xFFFFFFFE)
      {
        v39 = BKLogTouchEvents(v5);
        v40 = objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v75 = v6;
          *(_WORD *)&v75[4] = 1024;
          *(_DWORD *)&v75[6] = v2;
          _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "transfer: invalid client port %X for contextID %X", buf, 0xEu);
        }
      }
      else
      {
        v52 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 128), "objectForKey:", v2));
        v10 = sub_10006D4E4(*(_QWORD *)(a2 + 112), v4, v3);
        v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        v68[0] = _NSConcreteStackBlock;
        v68[1] = 3221225472;
        v68[2] = sub_100083E88;
        v68[3] = &unk_1000EC3E8;
        v69 = v71;
        v70 = v2;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "bs_filter:", v68));

        v53 = v12;
        v13 = objc_msgSend(v12, "count");
        if (v13)
        {
          v14 = BKLogTouchEvents(v13);
          v15 = objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)v75 = v2;
            *(_WORD *)&v75[4] = 2114;
            *(_QWORD *)&v75[6] = v12;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "transfer: transferring to contextID:%X contacts:%{public}@", buf, 0x12u);
          }

          sub_1000828B8((id *)a2, v12, 6, 1);
          sub_1000828B8((id *)a2, v12, 1, 1);
          sub_100083580((uint64_t)buf, (void *)a2, 0);
          v57 = objc_alloc_init((Class)NSMutableArray);
          v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v12));
          v16 = objc_msgSend(v12, "mutableCopy");
          if ((uint64_t)objc_msgSend(v52, "count") >= 1)
          {
            v17 = sub_10000C768(v52);
            v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
            objc_msgSend(v16, "addObjectsFromArray:", v18);

            objc_msgSend(v16, "sortUsingComparator:", &stru_1000EC428);
          }
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          obj = v16;
          v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v73, 16);
          if (v19)
          {
            v20 = *(_QWORD *)v65;
            do
            {
              for (i = 0; i != v19; i = (char *)i + 1)
              {
                if (*(_QWORD *)v65 != v20)
                  objc_enumerationMutation(obj);
                v22 = *(_QWORD *)(*((_QWORD *)&v64 + 1) + 8 * (_QWORD)i);
                if (objc_msgSend(v56, "containsObject:", v22))
                {
                  *(_BYTE *)(v22 + 289) = 1;
                  sub_100083B4C(v22, (uint64_t)buf, 35);
                  v23 = sub_100083E10(a2, v22, v2, (uint64_t)v58, 2);
                  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
                  objc_msgSend(v57, "addObject:", v24);
                  v25 = sub_100012F58(a2, v2, v54);
                  v26 = (_DWORD *)objc_claimAutoreleasedReturnValue(v25);
                  v27 = v71;
                  v71 = v26;

                  objc_msgSend(*(id *)(v22 + 272), "addObject:", v71);
                  *(_QWORD *)(v22 + 48) = 4;
                  v28 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:count:", &v71, 1);
                  v29 = *(void **)(v22 + 280);
                  *(_QWORD *)(v22 + 280) = v28;

                  v30 = v2;
                  v62 = 0u;
                  v63 = 0u;
                  v60 = 0u;
                  v61 = 0u;
                  v31 = *(id *)(a2 + 72);
                  v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v60, v72, 16);
                  if (v32)
                  {
                    v33 = *(_QWORD *)v61;
                    do
                    {
                      for (j = 0; j != v32; j = (char *)j + 1)
                      {
                        if (*(_QWORD *)v61 != v33)
                          objc_enumerationMutation(v31);
                        objc_msgSend(*(id *)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)j), "touchDidTransfer:destination:", *(unsigned int *)(v22 + 16), v71);
                      }
                      v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v60, v72, 16);
                    }
                    while (v32);
                  }

                  v2 = v30;
                }
                else
                {
                  sub_100083B4C(v22, (uint64_t)buf, 4);
                  v35 = sub_100083E10(a2, v22, v2, (uint64_t)v58, 1);
                  v24 = (void *)objc_claimAutoreleasedReturnValue(v35);
                  objc_msgSend(v57, "addObject:", v24);
                }

              }
              v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v73, 16);
            }
            while (v19);
          }

          v37 = (const void *)sub_1000836F8(buf, v36);
          v38 = objc_alloc_init(BKHIDEventCollector);
          sub_10000FCE0((void *)a2, (uint64_t)v37, (uint64_t)v71, (uint64_t)v38, 0, v57, *(double *)(a2 + 96));
          sub_100015510(a2, (uint64_t)v38);

          if (v37)
            CFRelease(v37);

          sub_100083964((uint64_t)buf);
        }
        else
        {
          v41 = BKLogTouchEvents(0);
          v42 = objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            v43 = *(_QWORD *)(a2 + 8);
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)v75 = v43;
            _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "transfer: no eligible contacts for service %{public}@", buf, 0xCu);
          }

        }
        v40 = v52;
      }

    }
  }
}

void sub_100058108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100058270(uint64_t a1)
{
  void **v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD v13[4];
  id v14;
  uint8_t buf[4];
  id v16;

  v1 = (void **)(a1 + 32);
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_touchStreamClientForReference:", *(unsigned int *)(a1 + 40)));
  v3 = (void *)v2;
  v4 = *v1;
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 32));
    v6 = WeakRetained;
    if (WeakRetained)
    {
      v7 = (void *)*((_QWORD *)WeakRetained + 1);
      goto LABEL_4;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 0;
LABEL_4:
  v8 = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000583FC;
  v13[3] = &unk_1000EB140;
  v9 = v3;
  v14 = v9;
  objc_msgSend(v4, "_queue_enumerateDigitizersForDisplay:usingBlock:", v8, v13);

  v11 = BKLogTouchEvents(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "invalidate touch stream (invalidated by client) %{public}@", buf, 0xCu);
  }

  sub_10008C60C((id *)v9);
}

void sub_1000583C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1000583FC(uint64_t a1, id *a2)
{
  uint64_t v3;
  void *v4;
  id *v5;
  id v6;
  id *v7;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if ((uint64_t)objc_msgSend(a2[14], "count") >= 1)
    {
      if (v3)
        v4 = *(void **)(v3 + 48);
      else
        v4 = 0;
      v6 = v4;
      sub_100082BC4(a2, (uint64_t)v6);

    }
    if (v3 && (v5 = (id *)*(id *)(v3 + 48)) != 0)
    {
      v7 = v5;
      objc_msgSend(v5[3], "removeObject:", v3);
      sub_10000F090((uint64_t)a2, (uint64_t)v7);
    }
    else
    {
      v7 = 0;
      sub_10000F090((uint64_t)a2, 0);
    }

  }
}

void sub_1000584B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1000584CC(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  _QWORD *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  BKDigitizerTouchStreamClient *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString *processName;
  uint64_t v17;
  uint64_t v18;
  BKDigitizerTouchStreamClient *v19;
  uint64_t v20;
  BKDigitizerTouchStreamClient *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  BKDigitizerTouchStreamClient *v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  uint64_t v32;
  void *v33;
  objc_class *v34;
  NSString *v35;
  void *v36;
  void *v37;
  NSString *v38;
  void *v39;
  uint64_t v40;
  objc_class *v41;
  NSString *v42;
  void *v43;
  objc_class *v44;
  uint64_t v45;
  NSString *v46;
  void *v47;
  uint64_t v48;
  objc_class *v49;
  NSString *v50;
  void *v51;
  void *v52;
  NSString *v53;
  void *v54;
  uint64_t v55;
  objc_class *v56;
  NSString *v57;
  void *v58;
  void *v59;
  NSString *v60;
  void *v61;
  uint64_t v62;
  objc_class *v63;
  NSString *v64;
  void *v65;
  _QWORD v66[4];
  BKDigitizerTouchStreamClient *v67;
  uint8_t buf[4];
  _BYTE v69[10];
  _BYTE v70[10];
  uint64_t v71;
  __int16 v72;
  const __CFString *v73;
  __int16 v74;
  int v75;
  __int16 v76;
  void *v77;

  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = objc_msgSend(v3, "length");
  v5 = (void *)BKSDisplayUUIDMainKey;
  if (v4)
    v5 = v3;
  v6 = v5;

  v7 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_displayInfoForDisplay:createIfNeeded:", v6, 1));
  if (v7)
    v8 = (void *)v7[1];
  else
    v8 = 0;
  v9 = v8;
  v10 = objc_msgSend(v9, "taskPortForContextID:displayUUID:", *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 40));
  v11 = (uint64_t)v10;
  if (((_DWORD)v10 - 1) >= 0xFFFFFFFE)
  {
    v29 = BKLogTouchEvents(v10);
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = *(_DWORD *)(a1 + 64);
      v32 = NSStringFromBKSTouchStreamIdentifier(*(unsigned __int8 *)(a1 + 68));
      v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)v69 = v11;
      *(_WORD *)&v69[4] = 1024;
      *(_DWORD *)&v69[6] = v31;
      *(_WORD *)v70 = 2114;
      *(_QWORD *)&v70[2] = v33;
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "BKDigitizerTouchStreamCreate: invalid taskPort (0x%X) for contextID:0x%X (touchstreamIdentifier:%{public}@)", buf, 0x18u);

    }
  }
  else
  {
    v12 = objc_alloc_init(BKDigitizerTouchStreamClient);
    if (v12)
    {
      v13 = *(_QWORD *)(a1 + 56);
      if (v12->_versionedPID != v13)
      {
        v12->_versionedPID = v13;
        v14 = BSProcessNameForPID(v13);
        v15 = objc_claimAutoreleasedReturnValue(v14);
        processName = v12->_processName;
        v12->_processName = (NSString *)v15;

      }
      v12->_shouldSendAmbiguityRecommendations = *(_BYTE *)(a1 + 72);
      v12->_touchStreamIdentifier = *(_DWORD *)(a1 + 68);
    }
    v17 = *(unsigned int *)(a1 + 64);
    v18 = objc_opt_self(BKTouchDestination);
    v19 = v12;
    if (!v12)
    {
      v34 = (objc_class *)objc_opt_class(BKDigitizerTouchStreamClient, v20);
      v35 = NSStringFromClass(v34);
      v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Value for '%@' was unexpectedly nil. Expected %@."), CFSTR("touchStream"), v36));

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        v38 = NSStringFromSelector("destinationWithTouchStream:contextID:clientPort:");
        v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
        v41 = (objc_class *)objc_opt_class(v18, v40);
        v42 = NSStringFromClass(v41);
        v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
        *(_DWORD *)buf = 138544642;
        *(_QWORD *)v69 = v39;
        *(_WORD *)&v69[8] = 2114;
        *(_QWORD *)v70 = v43;
        *(_WORD *)&v70[8] = 2048;
        v71 = v18;
        v72 = 2114;
        v73 = CFSTR("BKTouchDestination.m");
        v74 = 1024;
        v75 = 43;
        v76 = 2114;
        v77 = v37;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

      }
      _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v37), "UTF8String"));
      __break(0);
      JUMPOUT(0x1000588C4);
    }
    v21 = v19;
    v22 = objc_opt_class(BKDigitizerTouchStreamClient, v20);
    if ((objc_opt_isKindOfClass(v21, v22) & 1) == 0)
    {
      v44 = (objc_class *)-[BKDigitizerTouchStreamClient classForCoder](v21, "classForCoder");
      if (!v44)
        v44 = (objc_class *)objc_opt_class(v21, v45);
      v46 = NSStringFromClass(v44);
      v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
      v49 = (objc_class *)objc_opt_class(BKDigitizerTouchStreamClient, v48);
      v50 = NSStringFromClass(v49);
      v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Value for '%@' was of unexpected class %@. Expected %@."), CFSTR("touchStream"), v47, v51));

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        v53 = NSStringFromSelector("destinationWithTouchStream:contextID:clientPort:");
        v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
        v56 = (objc_class *)objc_opt_class(v18, v55);
        v57 = NSStringFromClass(v56);
        v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
        *(_DWORD *)buf = 138544642;
        *(_QWORD *)v69 = v54;
        *(_WORD *)&v69[8] = 2114;
        *(_QWORD *)v70 = v58;
        *(_WORD *)&v70[8] = 2048;
        v71 = v18;
        v72 = 2114;
        v73 = CFSTR("BKTouchDestination.m");
        v74 = 1024;
        v75 = 43;
        v76 = 2114;
        v77 = v52;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

      }
      _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v52), "UTF8String"));
      __break(0);
      JUMPOUT(0x100058A00);
    }

    if (!(_DWORD)v17)
    {
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Invalid condition not satisfying: %@"), CFSTR("contextID != 0")));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        v60 = NSStringFromSelector("destinationWithTouchStream:contextID:clientPort:");
        v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
        v63 = (objc_class *)objc_opt_class(v18, v62);
        v64 = NSStringFromClass(v63);
        v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
        *(_DWORD *)buf = 138544642;
        *(_QWORD *)v69 = v61;
        *(_WORD *)&v69[8] = 2114;
        *(_QWORD *)v70 = v65;
        *(_WORD *)&v70[8] = 2048;
        v71 = v18;
        v72 = 2114;
        v73 = CFSTR("BKTouchDestination.m");
        v74 = 1024;
        v75 = 44;
        v76 = 2114;
        v77 = v59;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

      }
      _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v59), "UTF8String"));
      __break(0);
      JUMPOUT(0x100058AF8);
    }
    v23 = sub_100013038([BKTouchDestination alloc], v17, v11);
    v24 = v23;
    if (v23)
    {
      objc_storeWeak((id *)v23 + 5, v21);
      v25 = 6;
      if (!v21->_shouldSendAmbiguityRecommendations)
        v25 = 2;
      v24[4] = v25;
    }
    objc_storeStrong((id *)&v21->_touchDestination, v24);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "_queue_addTouchStreamClient:toDisplayUUID:versionedPID:", v21, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
    v26 = *(void **)(a1 + 32);
    v27 = *(_QWORD *)(a1 + 40);
    v66[0] = _NSConcreteStackBlock;
    v66[1] = 3221225472;
    v66[2] = sub_100058B70;
    v66[3] = &unk_1000EB140;
    v28 = v21;
    v67 = v28;
    objc_msgSend(v26, "_queue_enumerateDigitizersForDisplay:usingBlock:", v27, v66);

  }
}

void sub_100058B08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_100058B70(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  id v4;
  id v5;
  _DWORD *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  uint64_t v14;
  uint64_t v15;
  BKHitTestResultPathLocation *v16;
  void *v17;
  __n128 v18;
  const void *v19;
  BKHIDEventCollector *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[26];
  _BYTE v26[128];

  if (!a2)
    return result;
  v3 = *(_QWORD *)(result + 32);
  sub_100083580((uint64_t)v25, (void *)a2, 2);
  v4 = objc_alloc_init((Class)NSMutableArray);
  if (!v3)
  {
    v6 = 0;
    goto LABEL_21;
  }
  v5 = *(id *)(v3 + 48);
  v6 = v5;
  if (!v5)
  {
LABEL_21:
    v7 = 0;
    goto LABEL_5;
  }
  objc_msgSend(*((id *)v5 + 3), "addObject:", v3);
  v7 = v6[2];
LABEL_5:
  objc_msgSend(*(id *)(a2 + 120), "setObject:forKey:", v6, v7);
  if ((uint64_t)objc_msgSend(*(id *)(a2 + 112), "count") >= 1)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 8), "displayUUID"));
    if (v6)
      v9 = v6[2];
    else
      v9 = 0;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v10 = *(id *)(a2 + 112);
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v12)
            objc_enumerationMutation(v10);
          v14 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
          v15 = sub_100083C04((uint64_t)v25, *(_QWORD *)(v14 + 8), 2, *(unsigned int *)(v14 + 56));
          IOHIDEventSetIntegerValue(v15, 720905, 1);
          v16 = sub_100083E10(a2, v14, v9, (uint64_t)v8, 0);
          v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
          objc_msgSend(v4, "addObject:", v17, (_QWORD)v21);

        }
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
      }
      while (v11);
    }

    v19 = (const void *)sub_1000836F8(v25, v18);
    v20 = objc_alloc_init(BKHIDEventCollector);
    sub_10000FCE0((void *)a2, (uint64_t)v19, (uint64_t)v6, (uint64_t)v20, 0, v4, *(double *)(a2 + 96));
    sub_100015510(a2, (uint64_t)v20);

    if (v19)
      CFRelease(v19);

  }
  return sub_100083964((uint64_t)v25);
}

void sub_100058DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  const void *v20;

  if (v20)
    CFRelease(v20);

  sub_100083964((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_100058E48(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100058EEC;
  v6[3] = &unk_1000EB0F0;
  v4 = *(id *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v2, "_queue_enumerateDigitizersForDisplay:usingBlock:", v3, v6);

}

void sub_100058EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

id sub_100058EDC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "makeObjectsPerformSelector:", "invalidate");
}

void sub_100058EEC(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;

  sub_10000C61C((id)a2, 2u, 0);
  v4 = *(void **)(a1 + 32);
  if (a2)
  {
    v5 = *(_QWORD *)(a1 + 40);
    sub_10000C61C((id)a2, 1u, 0);
    v6 = *(void **)(a2 + 32);
    if (!v6)
    {
      v13 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SuppressTouches-%llX"), objc_msgSend(*(id *)(a2 + 8), "senderID")));
      v7 = objc_claimAutoreleasedReturnValue(+[BSCompoundAssertion assertionWithIdentifier:](BSCompoundAssertion, "assertionWithIdentifier:"));
      v8 = *(void **)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v7;

      v9 = *(void **)(a2 + 32);
      v11 = BKLogTouchEvents(v10);
      v14 = (id)objc_claimAutoreleasedReturnValue(v11);
      objc_msgSend(v9, "setLog:");

      v6 = *(void **)(a2 + 32);
    }
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "acquireForReason:", v5));
  }
  else
  {
    v12 = 0;
  }
  v15 = (id)v12;
  objc_msgSend(v4, "addObject:", v12);

}

void sub_100059004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

id sub_100059020(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_enumerateDigitizersForAllDisplaysUsingBlock:", &stru_1000EB0C8);
}

void sub_100059030(id a1, BKDirectTouchState *a2)
{
  sub_10000C61C(a2, 2u, 0);
}

id sub_100059040(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[6];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  _DWORD v16[30];

  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)v12;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v16[v4 + (_QWORD)v6] = objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v6), "unsignedIntegerValue");
        v6 = (char *)v6 + 1;
      }
      while (v3 != v6);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      v4 += (uint64_t)v6;
    }
    while (v3);
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000591B0;
  v10[3] = &unk_1000EB068;
  v7 = *(void **)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v10[4] = v16;
  v10[5] = v8;
  return objc_msgSend(v7, "_queue_enumerateDigitizersForAllDisplaysUsingBlock:", v10);
}

void sub_100059190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000591B0(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  if (a2)
  {
    v3 = sub_10006D4E4(*(_QWORD *)(a2 + 112), *(int **)(a1 + 32), *(_QWORD *)(a1 + 40));
    v4 = (id)objc_claimAutoreleasedReturnValue(v3);
    sub_1000828B8((id *)a2, v4, 1, 0);

  }
}

void sub_100059214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100059228(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 72));
}

void sub_10005923C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 64));
}

void sub_100059250(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 56));
}

void sub_100059264(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "description"));
  v2 = objc_msgSend(v1, "appendObject:withName:");

}

void sub_1000592B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000592CC(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1000592DC(uint64_t a1)
{
  double *WeakRetained;
  double *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  double v7;
  int v8;
  double v9;

  WeakRetained = (double *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = BKLogTouchEvents(WeakRetained);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 0.0 - v3[10];
      v8 = 134217984;
      v9 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "*** still waiting for a main screen digitizer -- %gs elapsed ***", (uint8_t *)&v8, 0xCu);
    }

    v6 = (void *)*((_QWORD *)v3 + 11);
    v3[11] = 0.0;

  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void sub_1000593BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000593D8(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  _QWORD block[4];
  id v4;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[1];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100059544;
  block[3] = &unk_1000ECDA8;
  v4 = v1;
  dispatch_sync(v2, block);

}

__CFString *sub_100059444(uint64_t a1)
{
  id WeakRetained;
  __CFString *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", WeakRetained));
  else
    v2 = CFSTR("<nil>");

  return v2;
}

void sub_100059498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000594A8(uint64_t a1, int a2)
{
  id WeakRetained;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  int v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100059534;
  v7[3] = &unk_1000EC950;
  v8 = WeakRetained;
  v9 = a2;
  v6 = WeakRetained;
  dispatch_async(v5, v7);

}

id sub_100059534(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_windowServerDidDeleteSlotID:", *(unsigned int *)(a1 + 40));
}

id sub_100059544(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  _QWORD v8[4];
  unsigned __int8 v9;
  unsigned __int8 v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
  v3 = objc_msgSend(v2, "digitizerVisualizeTouches");

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
  v5 = objc_msgSend(v4, "digitizerVisualizeHitTestRegions");

  v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100059600;
  v8[3] = &unk_1000EB020;
  v9 = v3;
  v10 = v5;
  return objc_msgSend(v6, "_queue_enumerateDigitizersForAllDisplaysUsingBlock:", v8);
}

void sub_1000595EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100059600(uint64_t a1, uint64_t a2)
{
  sub_100009EB4(a2, *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33));
}

void sub_100059614(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
  byte_100117398 = objc_msgSend(v1, "isDigitizerSignpostsEnabled");

}

void sub_100059658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000597A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1000597D0()
{
  if (qword_1001173B8 != -1)
    dispatch_once(&qword_1001173B8, &stru_1000EB3D8);
  return (id)qword_1001173B0;
}

void sub_100059810(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(BKLoggingSubsystem, "BootUI");
  v2 = (void *)qword_1001173B0;
  qword_1001173B0 = (uint64_t)v1;

}

id sub_100059844()
{
  if (qword_1001173C8 != -1)
    dispatch_once(&qword_1001173C8, &stru_1000EB3F8);
  return (id)qword_1001173C0;
}

void sub_100059884(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(BKLoggingSubsystem, "Button");
  v2 = (void *)qword_1001173C0;
  qword_1001173C0 = (uint64_t)v1;

}

id sub_1000598B8()
{
  if (qword_1001173D8 != -1)
    dispatch_once(&qword_1001173D8, &stru_1000EB418);
  return (id)qword_1001173D0;
}

void sub_1000598F8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(BKLoggingSubsystem, "DisplayAnnotations");
  v2 = (void *)qword_1001173D0;
  qword_1001173D0 = (uint64_t)v1;

}

id sub_10005992C()
{
  if (qword_1001173E8 != -1)
    dispatch_once(&qword_1001173E8, &stru_1000EB438);
  return (id)qword_1001173E0;
}

void sub_10005996C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(BKLoggingSubsystem, "DisplayMonitor");
  v2 = (void *)qword_1001173E0;
  qword_1001173E0 = (uint64_t)v1;

}

id sub_1000599A0()
{
  if (qword_1001173F8 != -1)
    dispatch_once(&qword_1001173F8, &stru_1000EB458);
  return (id)qword_1001173F0;
}

void sub_1000599E0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(BKLoggingSubsystem, "HID");
  v2 = (void *)qword_1001173F0;
  qword_1001173F0 = (uint64_t)v1;

}

id sub_100059A14()
{
  if (qword_100117408 != -1)
    dispatch_once(&qword_100117408, &stru_1000EB478);
  return (id)qword_100117400;
}

void sub_100059A54(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(BKLoggingSubsystem, "IdleTimer");
  v2 = (void *)qword_100117400;
  qword_100117400 = (uint64_t)v1;

}

id sub_100059A88()
{
  if (qword_100117418 != -1)
    dispatch_once(&qword_100117418, &stru_1000EB498);
  return (id)qword_100117410;
}

void sub_100059AC8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(BKLoggingSubsystem, "RenderOverlay");
  v2 = (void *)qword_100117410;
  qword_100117410 = (uint64_t)v1;

}

id sub_100059AFC()
{
  if (qword_100117428 != -1)
    dispatch_once(&qword_100117428, &stru_1000EB4B8);
  return (id)qword_100117420;
}

void sub_100059B3C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(BKLoggingSubsystem, "HapticFeedback");
  v2 = (void *)qword_100117420;
  qword_100117420 = (uint64_t)v1;

}

void sub_100059B70(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(BKLoggingSubsystem, "Accelerometer");
  v2 = (void *)qword_100117430;
  qword_100117430 = (uint64_t)v1;

}

id sub_100059BA4()
{
  if (qword_100117448 != -1)
    dispatch_once(&qword_100117448, &stru_1000EB4F8);
  return (id)qword_100117440;
}

void sub_100059BE4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(BKLoggingSubsystem, "KeyPresses");
  v2 = (void *)qword_100117440;
  qword_100117440 = (uint64_t)v1;

}

void sub_10005AB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_10005AE14(_QWORD *result, uint64_t a2, int a3)
{
  _QWORD *v3;
  void *v4;
  const __CFString *v5;

  if (a2)
  {
    v3 = result;
    if (a3)
    {
      v4 = (void *)result[4];
      if (a3 != 1)
      {
        if (*(_BYTE *)(*(_QWORD *)(v3[5] + 8) + 24))
          result = objc_msgSend(v4, "appendFormat:", CFSTR(", %d"), (a3 + 1));
        else
          result = objc_msgSend(v4, "appendFormat:", CFSTR("%d"), (a3 + 1));
        goto LABEL_14;
      }
      if (*(_BYTE *)(*(_QWORD *)(v3[5] + 8) + 24))
        v5 = CFSTR(", secondary");
      else
        v5 = CFSTR("secondary");
    }
    else
    {
      v4 = (void *)result[4];
      if (*(_BYTE *)(*(_QWORD *)(v3[5] + 8) + 24))
        v5 = CFSTR(", primary");
      else
        v5 = CFSTR("primary");
    }
    result = objc_msgSend(v4, "appendString:", v5);
LABEL_14:
    *(_BYTE *)(*(_QWORD *)(v3[5] + 8) + 24) = 1;
  }
  return result;
}

uint64_t sub_10005B828(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10005B838(uint64_t a1)
{

}

id sub_10005B840(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[4];
  _QWORD v10[4];
  const __CFString *v11;
  void *v12;

  v11 = CFSTR("accelerometer");
  v9[0] = CFSTR("x");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32)));
  v10[0] = v2;
  v9[1] = CFSTR("y");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40)));
  v10[1] = v3;
  v9[2] = CFSTR("z");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  v10[2] = v4;
  v9[3] = CFSTR("type");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 56)));
  v10[3] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 4));
  v12 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));

  return v7;
}

void sub_10005B998(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "setWantsOrientationEvents:", v3);
  objc_msgSend(v4, "setPassiveOrientationEvents:", *(unsigned __int8 *)(a1 + 33));

}

void sub_10005B9E0(id a1)
{
  BKAccelerometerInterface *v1;
  void *v2;

  v1 = objc_alloc_init(BKAccelerometerInterface);
  v2 = (void *)qword_100117450;
  qword_100117450 = (uint64_t)v1;

}

uint64_t sub_10005C418(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 8) = *(_BYTE *)(result + 40);
  return result;
}

uint64_t sub_10005C428(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;

  v2 = BKLogAlternateSystemApp();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138543362;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Manager] Terminating alternate system app with bundleID: %{public}@", (uint8_t *)&v6, 0xCu);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "terminate");
  objc_msgSend(*(id *)(a1 + 40), "_queue_cleanUpAfterAlternativeSystemApp:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10005C4F4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  BKAlternateSystemApp *v5;
  void *v6;
  BKAlternateSystemApp *v7;
  _QWORD v8[4];
  BKAlternateSystemApp *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  BKAlternateSystemApp *v13;
  id v14;
  id v15;
  uint8_t buf[4];
  uint64_t v17;

  v2 = BKLogAlternateSystemApp();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Manager] Open alternate system app with bundleID: %{public}@", buf, 0xCu);
  }

  v5 = -[BKAlternateSystemApp initWithBundleId:options:queue:]([BKAlternateSystemApp alloc], "initWithBundleId:options:queue:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24));
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 48), "setOpenBundleId:", *(_QWORD *)(a1 + 32));
    objc_msgSend(*(id *)(a1 + 48), "setAlternateSystemApp:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BKSystemShellSentinel sharedInstance](BKSystemShellSentinel, "sharedInstance"));
    objc_msgSend(v6, "setActiveAlternateSystemAppBundleIdentifier:", *(_QWORD *)(a1 + 32));

    objc_initWeak((id *)buf, *(id *)(a1 + 48));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10005C74C;
    v12[3] = &unk_1000EB638;
    objc_copyWeak(&v15, (id *)buf);
    v7 = v5;
    v13 = v7;
    v14 = *(id *)(a1 + 56);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10005C79C;
    v8[3] = &unk_1000EB660;
    objc_copyWeak(&v11, (id *)buf);
    v9 = v7;
    v10 = *(id *)(a1 + 64);
    -[BKAlternateSystemApp launchWithResultBlock:exitBlock:](v9, "launchWithResultBlock:exitBlock:", v12, v8);

    objc_destroyWeak(&v11);
    objc_destroyWeak(&v15);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_10005C720(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_10005C74C(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(WeakRetained, "_queue_cleanUpAfterAlternativeSystemApp:", *(_QWORD *)(a1 + 32));

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005C79C(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  id v5;

  v3 = (id *)(a1 + 48);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "_queue_cleanUpAfterAlternativeSystemApp:", *(_QWORD *)(a1 + 32));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_10005C7F8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10005C808(uint64_t a1)
{

}

void sub_10005C810(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "bundleID"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_10005C84C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 8);
  return result;
}

void sub_10005C8A0(id a1)
{
  BKAlternateSystemAppManager *v1;
  void *v2;

  v1 = objc_alloc_init(BKAlternateSystemAppManager);
  v2 = (void *)qword_100117460;
  qword_100117460 = (uint64_t)v1;

}

void sub_10005D93C(id a1)
{
  byte_100117480 = BSSystemHasCapability(CFSTR("displayport"));
}

void sub_10005D960(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = sub_10001A7F4();
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(a2, "noteInterfaceOrientationChangedWithInterfaceOrientation:", sub_10008AEC0((uint64_t)v4));

}

id sub_10005D9AC(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "_handleDemoModeChanged");
}

void sub_10005D9B4(id a1)
{
  BKTetherController *v1;
  void *v2;

  if (!sub_100006268())
  {
    v1 = objc_alloc_init(BKTetherController);
    v2 = (void *)qword_100117470;
    qword_100117470 = (uint64_t)v1;

  }
}

BKHIDUISensorConfiguringService *__cdecl sub_10005E0B4(id a1, BKIOHIDService *a2)
{
  BKIOHIDService *v2;
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _BOOL8 v8;
  BOOL v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  unsigned int v22;
  __objc2_class **v23;
  int v25;
  id v26;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(-[BKIOHIDService propertyForKey:](v2, "propertyForKey:", CFSTR("Placement")));
  v4 = v3;
  if (v3 && (v3 = objc_msgSend(v3, "intValue"), (_DWORD)v3 == 1))
  {
    v5 = BKLogUISensor(v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v25 = 134217984;
      v26 = -[BKIOHIDService senderID](v2, "senderID");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "discrete prox service %llX top placement", (uint8_t *)&v25, 0xCu);
    }

    v7 = os_log_create("com.apple.AppleProxSupport", "hid-driver");
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    v9 = v8;
    v10 = BKLogUISensor(v8);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v12)
      {
        LOWORD(v25) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Prox debug mode enabled!", (uint8_t *)&v25, 2u);
      }

      -[BKIOHIDService setProperty:forKey:](v2, "setProperty:forKey:", &__kCFBooleanTrue, CFSTR("EnableDebugMode"));
    }
    else
    {
      if (v12)
      {
        LOWORD(v25) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Prox debug mode not enabled!", (uint8_t *)&v25, 2u);
      }

    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(-[BKIOHIDService propertyForKey:](v2, "propertyForKey:", CFSTR("NeedsHostState")));
    v17 = objc_opt_class(NSNumber, v16);
    v18 = v15;
    v19 = v18;
    if (v17)
    {
      if ((objc_opt_isKindOfClass(v18, v17) & 1) != 0)
        v20 = v19;
      else
        v20 = 0;
    }
    else
    {
      v20 = 0;
    }
    v21 = v20;

    v22 = objc_msgSend(v21, "BOOLValue");
    v23 = off_1000E8B38;
    if (!v22)
      v23 = off_1000E8B28;
    v14 = objc_msgSend(objc_alloc(*v23), "initWithIOHIDService:", v2);
  }
  else
  {
    v13 = BKLogUISensor(v3);
    v7 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v25 = 134217984;
      v26 = -[BKIOHIDService senderID](v2, "senderID");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ignoring discrete prox service %llX not top placement", (uint8_t *)&v25, 0xCu);
    }
    v14 = 0;
  }

  return (BKHIDUISensorConfiguringService *)v14;
}

void sub_10005EDC0(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[CAWindowServer serverIfRunning](CAWindowServer, "serverIfRunning"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "displayWithName:", CFSTR("TVOut")));
  if (v2)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "evaluateDisplay:reason:", v2, CFSTR("updateTVOutDisplaySettings"));

}

void sub_10005EE30(uint64_t a1, _QWORD *a2, _QWORD *a3, char a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  void *i;
  NSObject *v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  void *v29;
  void *v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[4];
  void *v37;
  _BYTE v38[128];

  if (a1)
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[CAWindowServer serverIfRunning](CAWindowServer, "serverIfRunning"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "displays"));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));

    v29 = (void *)v7;
    if (v7)
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[CADisplay displays](CADisplay, "displays"));
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
      if (v10)
      {
        v11 = v10;
        v27 = a3;
        v12 = 0;
        v13 = 0;
        v14 = *(_QWORD *)v33;
        do
        {
          for (i = 0; i != v11; i = (char *)i + 1)
          {
            v16 = v13;
            if (*(_QWORD *)v33 != v14)
              objc_enumerationMutation(v9);
            v17 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
            v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "name"));

            if (-[NSObject hasPrefix:](v13, "hasPrefix:", CFSTR("Wireless")))
            {
              if ((a4 & 1) != 0)
                v18 = objc_msgSend(v17, "immutableCopy");
              else
                v18 = v17;
              v20 = v18;
              if (v18)
              {
                if (!v12)
                  v12 = objc_alloc_init((Class)NSMutableArray);
                objc_msgSend(v12, "addObject:", v20);
              }
            }
            else if (-[NSObject isEqualToString:](v13, "isEqualToString:", CFSTR("TVOut"))
                   && !*(_BYTE *)(a1 + 40))
            {
              if ((a4 & 1) != 0)
                v24 = objc_msgSend(v17, "immutableCopy");
              else
                v24 = v17;
              v20 = v24;
              if (v27)
              {
                v20 = objc_retainAutorelease(v24);
                *v27 = v20;
              }
            }
            else
            {
              v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "displayWithDisplayId:", objc_msgSend(v17, "displayId")));
              if ((void *)v19 == v29)
              {
                v20 = v29;
              }
              else
              {
                v20 = (id)v19;
                v21 = BKLogDisplay(v19);
                v22 = objc_claimAutoreleasedReturnValue(v21);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "name"));
                  *(_DWORD *)buf = 138543362;
                  v37 = v23;
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Tagging unknown display %{public}@ with available modes", buf, 0xCu);

                }
                objc_msgSend(v20, "setTag:", 0x10000);
              }
            }

          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
        }
        while (v11);
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }

      v26 = objc_retainAutorelease(v12);
      *a2 = v26;

    }
    else
    {
      v25 = BKLogDisplay(v8);
      v13 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "We seeem to be headless", buf, 2u);
      }
    }

  }
}

void sub_10005F178(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CAWindowServer serverIfRunning](CAWindowServer, "serverIfRunning"));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 42) = 1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(id *)(a1 + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        sub_10005F2DC(*(_QWORD *)(a1 + 32), *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7), 2uLL);
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

  if (*(_QWORD *)(a1 + 48))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "displayWithName:", CFSTR("TVOut"), (_QWORD)v9));
    sub_10005F2DC(*(_QWORD *)(a1 + 32), *(void **)(a1 + 48), 1uLL);
    sub_10005F718(*(_QWORD *)(a1 + 32), 0, v8);

  }
}

void sub_10005F2DC(uint64_t a1, void *a2, unint64_t a3)
{
  __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL4 v17;
  const __CFString *v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  const __CFString *v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  int v40;
  const __CFString *v41;
  __int16 v42;
  __CFString *v43;
  __int16 v44;
  void *v45;

  v5 = a2;
  if (!a1)
    goto LABEL_36;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[CAWindowServer server](CAWindowServer, "server"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "displayWithDisplayId:", -[__CFString displayId](v5, "displayId")));
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString availableModes](v5, "availableModes"));
  v9 = objc_msgSend(v8, "count");

  if (!v9)
  {
    v19 = BKLogDisplay(v10);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v40 = 138543362;
      v41 = v5;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "AMDC No available modes; removing clone/tags if needed %{public}@",
        (uint8_t *)&v40,
        0xCu);
    }

    v21 = objc_msgSend(*(id *)(a1 + 16), "removeDisplay:", v7);
    if (a3 == 1)
      *(_BYTE *)(a1 + 41) = 0;
    goto LABEL_33;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "displays"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "clones"));
  v14 = objc_msgSend(v13, "count");
  v15 = BKLogDisplay(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (v17)
    {
      if (a3 > 2)
        v18 = CFSTR("<unknown>");
      else
        v18 = *(&off_1000EB800 + a3);
      v40 = 138543874;
      v41 = v18;
      v42 = 2114;
      v43 = v5;
      v44 = 2114;
      v45 = v13;
      v23 = "Available modes changed (%{public}@) on %{public}@; clones:%{public}@";
      v24 = v16;
      v25 = 32;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v40, v25);
    }
  }
  else if (v17)
  {
    if (a3 > 2)
      v22 = CFSTR("<unknown>");
    else
      v22 = *(&off_1000EB800 + a3);
    v40 = 138543618;
    v41 = v22;
    v42 = 2114;
    v43 = v5;
    v23 = "Available modes changed (%{public}@) on %{public}@; no clones";
    v24 = v16;
    v25 = 22;
    goto LABEL_18;
  }

  if (a3 == 2)
  {
    v34 = BKLogDisplay(v26);
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v40) = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "AMDC Wireless", (uint8_t *)&v40, 2u);
    }

    objc_msgSend(*(id *)(a1 + 16), "evaluateDisplay:reason:", v7, CFSTR("WirelessDisplayModeDidChange"));
  }
  else if (a3 == 1)
  {
    v27 = BKLogDisplay(v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v40) = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "AMDC TVOut", (uint8_t *)&v40, 2u);
    }

    v29 = *(NSObject **)(a1 + 8);
    v30 = v7;
    dispatch_assert_queue_V2(v29);
    v32 = BKLogDisplay(v31);
    v33 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v40) = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "availableModesDidChangeForPurpleTVOut", (uint8_t *)&v40, 2u);
    }

    objc_msgSend(*(id *)(a1 + 16), "evaluateDisplay:reason:", v30, CFSTR("PurpleTVOutDisplayModeChange"));
    *(_BYTE *)(a1 + 41) = 1;
  }
  else
  {
    v36 = BKLogDisplay(v26);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v40) = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "AMDC Unknown display", (uint8_t *)&v40, 2u);
    }

    objc_msgSend(v7, "setTag:", 0x10000);
  }

LABEL_33:
  v38 = BKLogDisplay(v21);
  v39 = objc_claimAutoreleasedReturnValue(v38);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v40) = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "AMDC done", (uint8_t *)&v40, 2u);
  }

LABEL_36:
}

void sub_10005F718(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a3;
  if (a1)
  {
    if (a2)
    {
      v5 = -[_BKDisplayBlankingContext initForDisplay:]([_BKDisplayBlankingContext alloc], "initForDisplay:", v7);
      v6 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v5;

      objc_msgSend(*(id *)(a1 + 24), "blank");
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 24), "clear");
    }
  }

}

void sub_10005F788(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _BYTE v17[24];
  void *v18;
  id v19;
  double v20;
  double v21;

  v2 = BKLogDisplay(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)v17 = 138543618;
    *(_QWORD *)&v17[4] = v4;
    *(_WORD *)&v17[12] = 2114;
    *(_QWORD *)&v17[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Current mode changed on %{public}@ -> %{public}@", v17, 0x16u);
  }

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  if (v6)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v6 + 8));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "currentMode"));
    v9 = objc_msgSend(v8, "width");
    v10 = objc_msgSend(v8, "height");
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
    if (objc_msgSend(v11, "isEqual:", CFSTR("TVOut")) && *(_BYTE *)(v6 + 40))
    {
      *(_QWORD *)v17 = _NSConcreteStackBlock;
      *(_QWORD *)&v17[8] = 3221225472;
      *(_QWORD *)&v17[16] = sub_10005F9D4;
      v18 = &unk_1000ECB88;
      v19 = v8;
      v20 = (double)(unint64_t)v9;
      v21 = (double)(unint64_t)v10;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v17);
      v12 = v19;
    }
    else
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[CAWindowServer server](CAWindowServer, "server"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "displayWithDisplayId:", objc_msgSend(v7, "displayId")));

      if (v12)
      {
        objc_msgSend(*(id *)(v6 + 16), "evaluateDisplay:reason:", v12, CFSTR("currentModeDidChangeForDisplay"));
      }
      else
      {
        v15 = BKLogDisplay(v14);
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v17 = 138543362;
          *(_QWORD *)&v17[4] = v7;
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "cannot find window server display for %{public}@", v17, 0xCu);
        }

        v12 = 0;
      }
    }

  }
}

void sub_10005F9C4(uint64_t a1)
{
  sub_10005F2DC(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10005F9D4(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  NSObject *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  _BYTE v14[24];
  void *v15;
  CGFloat v16;
  CGFloat v17;
  double v18;
  char v19;
  NSSize v20;

  v2 = (double)(unint64_t)objc_msgSend(*(id *)(a1 + 32), "preferredScale");
  v3 = BSFloatLessThanFloat(v2, 1.0);
  if ((_DWORD)v3)
  {
    v4 = BKLogDisplay(v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v2));
      *(_DWORD *)v14 = 138543362;
      *(_QWORD *)&v14[4] = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "preferredScale is %{public}@, using 1.0 instead", v14, 0xCu);

    }
    v2 = 1.0;
  }
  v6 = *(double *)(a1 + 40);
  v7 = *(double *)(a1 + 48);
  v8 = BKLogDisplay(v3);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v20.width = v6;
    v20.height = v7;
    v10 = NSStringFromSize(v20);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v2));
    *(_DWORD *)v14 = 138543618;
    *(_QWORD *)&v14[4] = v11;
    *(_WORD *)&v14[12] = 2114;
    *(_QWORD *)&v14[14] = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setting main screen size to %{public}@ and scale to %{public}@", v14, 0x16u);

  }
  if (qword_1001172B8 != -1)
    dispatch_once(&qword_1001172B8, &stru_1000EA678);
  *(_QWORD *)v14 = _NSConcreteStackBlock;
  *(_QWORD *)&v14[8] = 3221225472;
  *(_QWORD *)&v14[16] = sub_100034DD8;
  v15 = &unk_1000EA5C0;
  v16 = v6;
  v17 = v7;
  v19 = (int)*(double *)&qword_1001172B0;
  v18 = v2;
  sub_10000FA60(v14);
}

void sub_10005FBD4()
{
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_1000EB7E0);
}

void sub_10005FBE8()
{
  id v0;
  id v1;

  v0 = sub_10005FC2C();
  v1 = (id)objc_claimAutoreleasedReturnValue(v0);
  objc_msgSend(v1, "performSelectorOnMainThread:withObject:waitUntilDone:", "_handleIapServerConnectionDied", 0, 0);

}

id sub_10005FC2C()
{
  objc_opt_self();
  if (qword_100117498 != -1)
    dispatch_once(&qword_100117498, &stru_1000EB748);
  return (id)qword_100117490;
}

void sub_10005FC70(id a1)
{
  BKTVOutController *v1;
  void *v2;

  if (!sub_100006268())
  {
    v1 = objc_alloc_init(BKTVOutController);
    v2 = (void *)qword_100117490;
    qword_100117490 = (uint64_t)v1;

  }
}

void sub_10005FCA8(id a1)
{
  id v1;
  id v2;

  v1 = sub_10005FC2C();
  v2 = (id)objc_claimAutoreleasedReturnValue(v1);
  -[BKTVOutController _handleIapServerConnectionDied]_0((uint64_t)v2);

}

id sub_10005FCDC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setCloneRotationDisabled:", *(unsigned __int8 *)(a1 + 40));
}

id sub_10005FCF0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "addModeRequest:forDisplay:clientPID:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56));
}

id sub_10005FD08(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeModeRequestForDisplay:clientPID:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

void sub_100060020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000602A0(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a3, "pid");
  if (*(_DWORD *)(a1 + 40) == (_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_100060328(id a1)
{
  BKTouchDeliveryGenericGestureFocusObserver *v1;
  BKTouchDeliveryGenericGestureFocusObserver *v2;
  void *v3;
  id v4;

  v1 = [BKTouchDeliveryGenericGestureFocusObserver alloc];
  v4 = (id)objc_claimAutoreleasedReturnValue(+[BKHIDSystemInterface sharedInstance](BKHIDSystemInterface, "sharedInstance"));
  v2 = -[BKTouchDeliveryGenericGestureFocusObserver initWithHIDSystem:](v1, "initWithHIDSystem:", v4);
  v3 = (void *)qword_1001174A8;
  qword_1001174A8 = (uint64_t)v2;

}

void sub_100060BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  id *v10;
  id *v11;
  uint64_t v12;

  objc_destroyWeak(v11);
  objc_destroyWeak(v10);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v12 - 128));
  _Unwind_Resume(a1);
}

void sub_100061A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const os_unfair_lock *sub_100063E6C(const os_unfair_lock *result, void *a2)
{
  uint64_t v3;
  char v4;
  char v5;
  id v6;
  char v7;

  if (result)
  {
    v3 = (uint64_t)result;
    os_unfair_lock_assert_owner(result + 2);
    objc_msgSend(*(id *)(v3 + 208), "frameWillBegin");
    if (objc_msgSend(*(id *)(v3 + 208), "eventTypeMask"))
    {
      v4 = 0;
      do
      {
        v5 = 0;
        v7 = 0;
        if ((v4 & 1) == 0)
        {
          sub_100063F60(v3, &v7);
          if (v7)
          {
            v6 = objc_msgSend(*(id *)(v3 + 208), "shouldUseButtonDownRecenteringBehavior");
            v5 = 1;
            objc_msgSend(*(id *)(v3 + 208), "setShouldUseButtonDownRecenteringBehavior:", 1);
            sub_100064340(v3, a2, 1);
            objc_msgSend(*(id *)(v3 + 208), "setShouldUseButtonDownRecenteringBehavior:", v6);
          }
          else
          {
            v5 = 0;
          }
        }
        v4 |= v5;
        sub_100064340(v3, a2, v5);
        objc_msgSend(*(id *)(v3 + 208), "nextEvent");
      }
      while (objc_msgSend(*(id *)(v3 + 208), "eventTypeMask"));
      objc_msgSend(*(id *)(v3 + 328), "didPostEvent");
    }
    return (const os_unfair_lock *)objc_msgSend(*(id *)(v3 + 208), "frameDidEnd");
  }
  return result;
}

void sub_100063F60(uint64_t a1, _BYTE *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  id v11;
  id v12;
  void *v13;
  void *i;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  unsigned __int8 v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  unsigned int v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  double x;
  double y;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  void *v42;
  id obj;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[4];
  uint64_t v51;
  _BYTE v52[128];

  *a2 = 0;
  if (objc_msgSend(*(id *)(a1 + 208), "positionType") != (id)1
    && !objc_msgSend(*(id *)(a1 + 208), "previousButtonMask")
    && objc_msgSend(*(id *)(a1 + 208), "buttonMask")
    && objc_msgSend(*(id *)(a1 + 368), "count")
    && *(_QWORD *)(a1 + 112))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 368), "lastObject"));
    v5 = v4;
    if (v4)
    {
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "displayUUID"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "immutableDisplayForUUID:"));
      if (v6)
      {
        v42 = v5;
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "contextRelativePointerPosition"));
        v41 = v6;
        v8 = sub_100068410(a1, v7, v6);
        v10 = v9;

        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "regions"));
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
        if (!v11)
          goto LABEL_23;
        v12 = v11;
        v44 = *(_QWORD *)v47;
        v13 = (void *)BKSDisplayUUIDMainKey;
        while (2)
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(_QWORD *)v47 != v44)
              objc_enumerationMutation(obj);
            v15 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i);
            v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "displayUUID"));
            if (objc_msgSend(v16, "length"))
              v17 = v16;
            else
              v17 = v13;
            v18 = v17;

            v19 = v45;
            if (objc_msgSend(v19, "length"))
              v20 = v19;
            else
              v20 = v13;
            v21 = v20;

            v22 = objc_msgSend(v18, "isEqualToString:", v21);
            if ((v22 & 1) != 0)
            {
              v23 = v15;

              if (!v23)
                goto LABEL_28;
              objc_msgSend(*(id *)(a1 + 104), "convertToGlobalPoint:fromRegion:", v23, v8, v10);
              v25 = v24;
              v27 = v26;
              v5 = v42;
              v28 = objc_msgSend(v42, "restrictingToPID");
              if ((_DWORD)v28 != -1)
              {
                v29 = v28;
                v30 = sub_100068530(a1, v25, v27);
                v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
                v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v29));
                v33 = objc_msgSend(v31, "containsObject:", v32);

                v36 = *(_QWORD *)(a1 + 112);
                if (v36)
                {
                  v34 = objc_msgSend(*(id *)(a1 + 104), "convertToGlobalPoint:fromRegion:", *(double *)(a1 + 136), *(double *)(a1 + 144));
                }
                else
                {
                  x = CGPointZero.x;
                  y = CGPointZero.y;
                }
                if (sqrt((v25 - x) * (v25 - x) + (v27 - y) * (v27 - y)) > 160.0)
                {
                  v39 = BKLogMousePointer(v34, v35, v36);
                  v40 = objc_claimAutoreleasedReturnValue(v39);
                  v6 = v41;
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134217984;
                    v51 = 0x4064000000000000;
                    _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Not recentering on click because distance exceeds limit of %f pts.", buf, 0xCu);
                  }

                  goto LABEL_37;
                }

                if (!v33)
                  goto LABEL_36;
              }
              ++*(_QWORD *)(a1 + 128);
              sub_10006764C(a1, 0, (uint64_t)CFSTR("recenterModelPoint"), v25, v27);
              *a2 = 1;
              goto LABEL_36;
            }
          }
          v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
          if (v12)
            continue;
          break;
        }
LABEL_23:

        v23 = 0;
LABEL_28:
        v5 = v42;
LABEL_36:
        v6 = v41;
LABEL_37:

      }
    }

  }
}

void sub_100064340(uint64_t a1, void *a2, char a3)
{
  const os_unfair_lock *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double x;
  double y;
  id v25;
  id v26;
  uint64_t v27;
  void *i;
  id v29;
  unint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  id v55;
  char v56;
  id v57;
  id v58;
  uint64_t v59;
  void *j;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  void *k;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  void *m;
  id v91;
  id v92;
  void *v93;
  id v94;
  void *v95;
  id v96;
  id obj;
  id obja;
  id objb;
  BKHIDEventCollector *v100;
  _QWORD v101[5];
  id v102;
  CGFloat v103;
  CGFloat v104;
  char v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[128];
  const os_unfair_lock *v129[16];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint8_t buf[4];
  id v135;

  v6 = (const os_unfair_lock *)(a1 + 8);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  v111 = 0;
  v110 = 0u;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  obj = a2;
  v107 = (unint64_t)a2;
  *((_QWORD *)&v107 + 1) = objc_msgSend(*(id *)(a1 + 208), "eventSequenceStartTimestamp");
  objc_msgSend(*(id *)(a1 + 208), "unacceleratedRelativePointerPosition");
  *(_QWORD *)&v108 = v7;
  *((_QWORD *)&v108 + 1) = v8;
  objc_msgSend(*(id *)(a1 + 208), "acceleratedRelativePointerPosition");
  v10 = v9;
  v12 = v11;
  *(double *)&v109 = v9;
  *((double *)&v109 + 1) = v11;
  *(_QWORD *)&v110 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 208), "mostRecentSender"));
  *((_QWORD *)&v110 + 1) = objc_claimAutoreleasedReturnValue(+[BKTouchDeliveryPolicyServer sharedServer](BKTouchDeliveryPolicyServer, "sharedServer"));
  v105 = 0;
  sub_100063F60(a1, &v105);
  if ((a3 & 1) != 0)
    goto LABEL_19;
  v13 = objc_msgSend(*(id *)(a1 + 208), "absolutePositionIsValid");
  v14 = v13;
  if (v13)
  {
    objc_msgSend(*(id *)(a1 + 208), "pointerAbsolutePosition");
    v16 = v15;
    v18 = v17;
    os_unfair_lock_assert_owner(v6);
    objc_msgSend(*(id *)(a1 + 104), "denormalizedAbsoluteGlobalPosition:", v16, v18);
    v20 = v19;
    v22 = v21;
    if (*(_QWORD *)(a1 + 112))
    {
      objc_msgSend(*(id *)(a1 + 104), "convertToGlobalPoint:fromRegion:", *(double *)(a1 + 136), *(double *)(a1 + 144));
    }
    else
    {
      x = CGPointZero.x;
      y = CGPointZero.y;
    }
    if ((BSPointEqualToPoint(x, y, v20, v22) & 1) == 0)
    {
      sub_10006764C(a1, 0, (uint64_t)CFSTR("HID abs"), v20, v22);
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v25 = *(id *)(a1 + 344);
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v130, buf, 16);
      if (v26)
      {
        v27 = *(_QWORD *)v131;
        do
        {
          for (i = 0; i != v26; i = (char *)i + 1)
          {
            if (*(_QWORD *)v131 != v27)
              objc_enumerationMutation(v25);
            objc_msgSend(*(id *)(*((_QWORD *)&v130 + 1) + 8 * (_QWORD)i), "observeMouseAbsolutePointDidChange:", v20, v22);
          }
          v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v130, buf, 16);
        }
        while (v26);
      }

    }
    objc_msgSend(*(id *)(a1 + 208), "invalidateAbsolutePosition");
  }
  if (v10 != 0.0 || v12 != 0.0)
  {
    sub_100064EEC(a1, (uint64_t)CFSTR("HID r"), v10, v12);
LABEL_19:
    v14 = 0;
  }
  BYTE1(v111) = v14;
  v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 112), "displayUUID"));
  v103 = 0.0;
  v104 = 0.0;
  v102 = 0;
  sub_1000650C8(a1, &v103, &v102, (const os_unfair_lock **)&v106 + 1);
  v29 = v102;
  if (!v29)
    goto LABEL_98;
  v91 = v29;
  v30 = (unint64_t)objc_msgSend(*(id *)(a1 + 208), "hitTestReason");
  *(_QWORD *)&v106 = v30;
  v31 = v30;
  if (!v30)
  {
    if (objc_msgSend(*(id *)(a1 + 216), "count"))
    {
      if (!v105)
      {
        v30 = 0;
        v31 = 0;
        goto LABEL_28;
      }
      v30 = 5;
    }
    else
    {
      v30 = 4;
    }
    *(_QWORD *)&v106 = v30;
    v31 = 4;
  }
LABEL_28:
  LOBYTE(v111) = v31 != 0;
  v32 = v103;
  v33 = v104;
  if (v31)
  {
    v34 = sub_1000260F0((uint64_t)BKMouseDestination, (v30 > 6) | ((0xCu >> v30) & 1), v91, (void *)v110, *(void **)(a1 + 24), *(void **)(a1 + 216), v103, v104);
    v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    v36 = objc_msgSend(v35, "mutableCopy");
    objc_msgSend(v36, "minusSet:", *(_QWORD *)(a1 + 216));
    v37 = v36;
    v38 = objc_msgSend(v35, "mutableCopy");
    objc_msgSend(v38, "intersectSet:", *(_QWORD *)(a1 + 216));
    objc_msgSend(v38, "unionSet:", *(_QWORD *)(a1 + 392));
    v39 = *(void **)(a1 + 216);
    v40 = v38;
    v41 = objc_msgSend(v39, "mutableCopy");
    objc_msgSend(v41, "minusSet:", v35);
    v42 = *(void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v35;

  }
  else
  {
    v40 = *(id *)(a1 + 216);
    v41 = 0;
    v37 = 0;
  }
  v43 = objc_retainAutorelease(v37);
  v44 = objc_retainAutorelease(v40);
  v45 = objc_retainAutorelease(v41);

  v94 = v43;
  v92 = v44;
  v96 = v45;
  v100 = objc_alloc_init(BKHIDEventCollector);
  v46 = *(void **)(a1 + 376);
  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 112), "displayUUID"));
  v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", v47));

  sub_1000651EC(a1, v93, (uint64_t)&v106, (uint64_t)v100, v32, v33);
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 112), "displayUUID"));
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  v49 = objc_msgSend(*(id *)(a1 + 384), "copy");
  v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v130, buf, 16);
  if (v50)
  {
    v51 = *(_QWORD *)v131;
    do
    {
      v52 = 0;
      do
      {
        if (*(_QWORD *)v131 != v51)
          objc_enumerationMutation(v49);
        v53 = *(_QWORD *)(*((_QWORD *)&v130 + 1) + 8 * (_QWORD)v52);
        if (v53)
          v54 = *(void **)(v53 + 40);
        else
          v54 = 0;
        v55 = v54;
        v56 = BSEqualObjects(v55, v48);

        if ((v56 & 1) == 0)
        {
          sub_1000260D8(v53, (void *)v110);
          sub_100066E18(a1, v53, v129, (uint64_t)&v106, v32, v33);
          sub_100067530(a1, 0, (_DWORD *)v53, (uint64_t)&v106, (uint64_t)v100);
        }
        v52 = (char *)v52 + 1;
      }
      while (v50 != v52);
      v57 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v130, buf, 16);
      v50 = v57;
    }
    while (v57);
  }

  if ((_QWORD)v106 == 1)
    sub_100065440(a1, 0, (uint64_t)v95, 1, (uint64_t)obj, (uint64_t)v100);
  if (objc_msgSend(*(id *)(a1 + 344), "count"))
  {
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    obja = v94;
    v58 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v124, buf, 16);
    if (v58)
    {
      v59 = *(_QWORD *)v125;
      do
      {
        for (j = 0; j != v58; j = (char *)j + 1)
        {
          if (*(_QWORD *)v125 != v59)
            objc_enumerationMutation(obja);
          v61 = *(_QWORD *)(*((_QWORD *)&v124 + 1) + 8 * (_QWORD)j);
          v62 = sub_1000266F4(v61, *(void **)(a1 + 432));
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          v63 = *(id *)(a1 + 344);
          v64 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v120, &v130, 16);
          if (v64)
          {
            v65 = *(_QWORD *)v121;
            do
            {
              v66 = 0;
              do
              {
                if (*(_QWORD *)v121 != v65)
                  objc_enumerationMutation(v63);
                if (v61)
                  v67 = *(unsigned int *)(v61 + 8);
                else
                  v67 = 0;
                objc_msgSend(*(id *)(*((_QWORD *)&v120 + 1) + 8 * (_QWORD)v66), "observeMouseDidEnterContextID:pid:", v67, v62);
                v66 = (char *)v66 + 1;
              }
              while (v64 != v66);
              v68 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v120, &v130, 16);
              v64 = v68;
            }
            while (v68);
          }

        }
        v58 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v124, buf, 16);
      }
      while (v58);
    }

    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    objb = v96;
    v69 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v116, v129, 16);
    if (v69)
    {
      v70 = *(_QWORD *)v117;
      do
      {
        for (k = 0; k != v69; k = (char *)k + 1)
        {
          if (*(_QWORD *)v117 != v70)
            objc_enumerationMutation(objb);
          v72 = *(_QWORD *)(*((_QWORD *)&v116 + 1) + 8 * (_QWORD)k);
          v73 = sub_1000266F4(v72, *(void **)(a1 + 432));
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          v74 = *(id *)(a1 + 344);
          v75 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v112, v128, 16);
          if (v75)
          {
            v76 = *(_QWORD *)v113;
            do
            {
              v77 = 0;
              do
              {
                if (*(_QWORD *)v113 != v76)
                  objc_enumerationMutation(v74);
                if (v72)
                  v78 = *(unsigned int *)(v72 + 8);
                else
                  v78 = 0;
                objc_msgSend(*(id *)(*((_QWORD *)&v112 + 1) + 8 * (_QWORD)v77), "observeMouseDidExitContextID:pid:", v78, v73);
                v77 = (char *)v77 + 1;
              }
              while (v75 != v77);
              v79 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v112, v128, 16);
              v75 = v79;
            }
            while (v79);
          }

        }
        v69 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v116, v129, 16);
      }
      while (v69);
    }

  }
  sub_100065794(a1, 1, v94, (uint64_t)&v106, (uint64_t)v100, v32, v33);
  sub_100065794(a1, 0, v92, (uint64_t)&v106, (uint64_t)v100, v32, v33);
  if (objc_msgSend(v96, "count"))
  {
    v80 = objc_msgSend(*(id *)(a1 + 392), "count");
    objc_msgSend(*(id *)(a1 + 392), "minusSet:", v96);
    v81 = objc_msgSend(*(id *)(a1 + 392), "count");
    if (v81 != v80)
    {
      v84 = BKLogMousePointer(v81, v82, v83);
      v85 = objc_claimAutoreleasedReturnValue(v84);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        v135 = v96;
        _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "unpinning hit-test contexts (for context exit) %{public}@", buf, 0xCu);
      }

    }
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v86 = v96;
    v87 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v130, buf, 16);
    if (v87)
    {
      v88 = *(_QWORD *)v131;
      v89 = v107;
      do
      {
        for (m = 0; m != v87; m = (char *)m + 1)
        {
          if (*(_QWORD *)v131 != v88)
            objc_enumerationMutation(v86);
          sub_1000665CC(a1, *(void **)(*((_QWORD *)&v130 + 1) + 8 * (_QWORD)m), v89, (uint64_t)v100);
        }
        v87 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v130, buf, 16);
      }
      while (v87);
    }

  }
  v101[0] = _NSConcreteStackBlock;
  v101[1] = 3221225472;
  v101[2] = sub_100066498;
  v101[3] = &unk_1000EBA70;
  v101[4] = a1;
  sub_100015570((uint64_t)v100, v101);

  v29 = v91;
LABEL_98:

}

void sub_100064E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36)
{

  _Unwind_Resume(a1);
}

void sub_100064EEC(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double x;
  double y;
  double v10;
  double v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t v21[128];

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  if (*(_QWORD *)(a1 + 112))
  {
    objc_msgSend(*(id *)(a1 + 104), "convertToGlobalPoint:fromRegion:", *(double *)(a1 + 136), *(double *)(a1 + 144));
  }
  else
  {
    x = CGPointZero.x;
    y = CGPointZero.y;
  }
  if (a3 != 0.0 || a4 != 0.0)
  {
    v10 = a3 + x;
    v11 = a4 + y;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v12 = *(id *)(a1 + 344);
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v18;
      do
      {
        v16 = 0;
        do
        {
          if (*(_QWORD *)v18 != v15)
            objc_enumerationMutation(v12);
          objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v16), "observeMouseRelativePointDidChange:", a3, a4, (_QWORD)v17);
          v16 = (char *)v16 + 1;
        }
        while (v14 != v16);
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v14);
    }

    sub_10006764C(a1, 0, a2, v10, v11);
  }
}

void sub_1000650C8(uint64_t a1, double *a2, _QWORD *a3, const os_unfair_lock **a4)
{
  void *v8;
  void *v9;
  const os_unfair_lock *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  id v23;
  id v24;

  v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 112), "displayUUID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "immutableDisplayForUUID:", v24));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "uniqueId"));
  v10 = sub_10006718C((const os_unfair_lock *)a1, v24);
  sub_100067210(v8, (uint64_t)v10, *(void **)(a1 + 280));
  objc_msgSend(*(id *)(a1 + 280), "convertReferenceLocation:toCAScreenLocationForDisplayUUID:", v9);
  v12 = v11;
  v14 = v13;
  objc_msgSend(v8, "bounds");
  v18 = v17 + 1.0;
  v20 = v17 + v19 + -2.0;
  if (v12 < v20)
    v20 = v12;
  if (v18 >= v20)
    v20 = v18;
  v21 = v15 + 1.0;
  v22 = v15 + v16 + -2.0;
  if (v14 < v22)
    v22 = v14;
  if (v21 >= v22)
    v22 = v21;
  *a2 = v20;
  a2[1] = v22;
  *a4 = v10;
  v23 = objc_retainAutorelease(v8);
  *a3 = v23;

}

void sub_1000651EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  id v11;
  id v12;
  __int128 v13;
  id v14;
  uint64_t v15;
  char **v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _DWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  double *v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t buf[4];
  _DWORD *v44;
  _BYTE v45[128];

  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v11 = a2;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
  if (v12)
  {
    v14 = v12;
    v15 = *(_QWORD *)v40;
    *(_QWORD *)&v13 = 138543362;
    v37 = v13;
    v16 = &selRef_transformFromLayerId_inContextId_;
    do
    {
      v17 = 0;
      v38 = v14;
      do
      {
        if (*(_QWORD *)v40 != v15)
          objc_enumerationMutation(v11);
        v18 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)v17);
        if (v18)
          v19 = *(void **)(v18 + 24);
        else
          v19 = 0;
        v20 = v19;
        if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFFELL) == 2)
        {
          v21 = v18 ? *(void **)(v18 + 16) : 0;
          if (objc_msgSend(v21, "pinOnButtonDown", v37))
          {
            v22 = v15;
            v23 = a4;
            v24 = v16;
            v25 = v11;
            v26 = *(void **)(a1 + 384);
            if (!v26)
            {
              v27 = objc_alloc_init((Class)NSMutableSet);
              v28 = *(void **)(a1 + 384);
              *(_QWORD *)(a1 + 384) = v27;

              v26 = *(void **)(a1 + 384);
            }
            v29 = objc_msgSend(v26, "addObject:", v20);
            v32 = BKLogMousePointer(v29, v30, v31);
            v33 = objc_claimAutoreleasedReturnValue(v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v37;
              v44 = v20;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "pinning global destination: %{public}@", buf, 0xCu);
            }

            v11 = v25;
            v16 = v24;
            a4 = v23;
            v15 = v22;
            v14 = v38;
          }
        }
        sub_1000260D8((uint64_t)v20, *(void **)(a3 + 64));
        if (v20)
        {
          v34 = (double *)((char *)v20 + *((int *)v16 + 859));
          *v34 = a5;
          v34[1] = a6;
        }
        if (v18)
        {
          if (*(_BYTE *)(v18 + 8))
          {
            v35 = 0;
            goto LABEL_24;
          }
          *(_BYTE *)(v18 + 8) = 1;
        }
        v35 = 1;
LABEL_24:
        sub_100067530(a1, v35, v20, a3, a4);

        v17 = (char *)v17 + 1;
      }
      while (v14 != v17);
      v36 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
      v14 = v36;
    }
    while (v36);
  }

}

void sub_100065440(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  NSString *v24;
  void *v25;
  uint64_t v26;
  objc_class *v27;
  NSString *v28;
  void *v29;
  id obj;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint8_t v48[128];
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  void *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  const __CFString *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  void *v60;

  if (a2 && a3)
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("cannot set both filter UUIDs")));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      v24 = NSStringFromSelector("_locked_exitGlobalContextsOnlyOnDisplayUUID:exceptDisplayUUID:exitPinned:timestamp:eventPoster:");
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      v27 = (objc_class *)objc_opt_class(a1, v26);
      v28 = NSStringFromClass(v27);
      v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      *(_DWORD *)buf = 138544642;
      v50 = v25;
      v51 = 2114;
      v52 = v29;
      v53 = 2048;
      v54 = a1;
      v55 = 2114;
      v56 = CFSTR("BKMousePointerController.m");
      v57 = 1024;
      v58 = 1809;
      v59 = 2114;
      v60 = v23;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

    }
    _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v23), "UTF8String"));
    __break(0);
    JUMPOUT(0x10006578CLL);
  }
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 376), "allValues"));
  v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
  if (v32)
  {
    v31 = *(_QWORD *)v44;
    v8 = (void *)BKSDisplayUUIDMainKey;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v44 != v31)
          objc_enumerationMutation(obj);
        v33 = v9;
        v10 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * v9);
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v38 = v10;
        v11 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v40;
          do
          {
            v14 = 0;
            do
            {
              if (*(_QWORD *)v40 != v13)
                objc_enumerationMutation(v38);
              v15 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)v14);
              if (v15)
              {
                v16 = *(id *)(v15 + 24);
                v17 = v16;
                if (v16)
                {
                  v18 = (void *)*((_QWORD *)v16 + 5);
                  goto LABEL_16;
                }
              }
              else
              {
                v17 = 0;
              }
              v18 = 0;
LABEL_16:
              v19 = v18;
              if (objc_msgSend(v19, "length"))
                v20 = v19;
              else
                v20 = v8;
              v21 = v20;

              if ((!a2 || objc_msgSend(v21, "isEqual:", a2))
                && (!a3 || (objc_msgSend(v21, "isEqual:", a3) & 1) == 0))
              {
                sub_1000672BC(a1, v15, a5, a4, a6);
              }

              v14 = (char *)v14 + 1;
            }
            while (v12 != v14);
            v22 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
            v12 = v22;
          }
          while (v22);
        }

        v9 = v33 + 1;
      }
      while ((id)(v33 + 1) != v32);
      v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
    }
    while (v32);
  }

}

void sub_100065794(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  __IOHIDEvent *v28;
  id v29;
  void *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  int v44;
  int v45;
  uint64_t v46;
  NSObject *v47;
  id v48;
  uint64_t v49;
  id v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  id v58;
  void *v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  int v71;
  uint64_t v72;
  const void *ScrollEvent;
  __n128 v74;
  uint64_t v75;
  NSObject *v76;
  int v77;
  int v78;
  uint64_t v79;
  void *v80;
  char v81;
  int v82;
  int v83;
  uint64_t v84;
  void *v85;
  int v86;
  int v87;
  uint64_t v88;
  void *v89;
  int v90;
  int v91;
  uint64_t v92;
  void *v93;
  int v94;
  int v95;
  uint64_t v96;
  void *v97;
  int v98;
  int v99;
  uint64_t v100;
  void *v101;
  int v102;
  id v103;
  __int128 v104;
  void *v105;
  id v106;
  void *v107;
  void *v108;
  id obj;
  uint64_t v111;
  id v113;
  uint64_t v114;
  const os_unfair_lock *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  char v122;
  uint8_t v123[128];
  __int128 buf;
  void *v125;
  void *v126;
  uint64_t v127;
  _DWORD v128[76];
  id v129;
  __int128 v130;
  __int128 v131;
  char v132;
  _OWORD __src[19];

  v12 = objc_msgSend(a3, "count");
  if (v12)
  {
    if (*(_QWORD *)a4 == 1)
    {
      v19 = objc_msgSend(*(id *)(a1 + 392), "count");
      objc_msgSend(*(id *)(a1 + 392), "minusSet:", a3);
      v20 = objc_msgSend(*(id *)(a1 + 392), "count");
      if (v20 != v19)
      {
        v23 = BKLogMousePointer(v20, v21, v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138543362;
          *(_QWORD *)((char *)&buf + 4) = a3;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "unpinning hit-test contexts (mouse up) %{public}@", (uint8_t *)&buf, 0xCu);
        }

      }
    }
    else if (*(_QWORD *)a4 == 2)
    {
      if (!*(_QWORD *)(a1 + 392))
      {
        v15 = objc_alloc_init((Class)NSMutableSet);
        v16 = *(void **)(a1 + 392);
        *(_QWORD *)(a1 + 392) = v15;

      }
      v17 = BKLogMousePointer(v12, v13, v14);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138543362;
        *(_QWORD *)((char *)&buf + 4) = a3;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "pinning hit-test contexts (mouse down) %{public}@", (uint8_t *)&buf, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 392), "unionSet:", a3);
    }
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    obj = a3;
    v113 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v116, v123, 16);
    if (v113)
    {
      v111 = *(_QWORD *)v117;
      *(_QWORD *)&v25 = 138543362;
      v104 = v25;
      do
      {
        v26 = 0;
        do
        {
          if (*(_QWORD *)v117 != v111)
            objc_enumerationMutation(obj);
          v27 = *(_QWORD *)(*((_QWORD *)&v116 + 1) + 8 * (_QWORD)v26);
          sub_1000260D8(v27, *(void **)(a4 + 64));
          v115 = *(const os_unfair_lock **)(a4 + 8);
          sub_100066E18(a1, v27, &v115, a4, a6, a7);
          v28 = (__IOHIDEvent *)sub_100066774(a1, *(_QWORD *)(a4 + 16), v27);
          v29 = sub_1000668A8(a1, 1, a2, v27, a4);
          v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          v114 = 0;
          if (objc_msgSend(*(id *)(a1 + 208), "buttonMaskDidChange")
            && !objc_msgSend(*(id *)(a1 + 208), "buttonMask"))
          {
            if (!v27)
              goto LABEL_28;
            LOBYTE(v32) = 0;
LABEL_27:
            *(_BYTE *)(v27 + 25) = v32;
            goto LABEL_28;
          }
          if (v27)
          {
            if (*(_BYTE *)(v27 + 25))
              goto LABEL_104;
            v31 = *(unsigned int *)(v27 + 8);
          }
          else
          {
            v31 = 0;
          }
          v32 = (v27 != 0) & objc_msgSend(*(id *)(a4 + 72), "shouldCancelTouchesDeliveredToContextId:withInitialTouchTimestamp:", v31, BSMonotonicReferencedTimeFromMachTime(*(_QWORD *)(a4 + 24)));
          if (v32 == 1)
            goto LABEL_27;
LABEL_28:
          if ((objc_msgSend(*(id *)(a1 + 208), "eventTypeMask", v104) & 0x40) == 0)
            goto LABEL_29;
          v34 = objc_msgSend(*(id *)(a1 + 208), "scrollPhase");
          if (v27)
          {
            if (*(_BYTE *)(v27 + 24))
            {
              if ((v34 & 0x81) != 0)
                *(_BYTE *)(v27 + 24) = 0;
              goto LABEL_34;
            }
            if (!(_DWORD)v34)
              goto LABEL_29;
            v33 = 246;
            if ((v34 & 0xC) != 0)
              goto LABEL_36;
            v65 = *(unsigned int *)(v27 + 8);
          }
          else
          {
            if (!(_DWORD)v34)
            {
LABEL_29:
              v33 = 246;
              goto LABEL_36;
            }
            v33 = 246;
            if ((v34 & 0xC) != 0)
              goto LABEL_36;
            v65 = 0;
          }
          v66 = objc_msgSend(*(id *)(a4 + 72), "shouldCancelTouchesDeliveredToContextId:withInitialTouchTimestamp:", v65, BSMonotonicReferencedTimeFromMachTime(*(_QWORD *)(a4 + 24)));
          if (!(_DWORD)v66)
            goto LABEL_29;
          if (v27)
            *(_BYTE *)(v27 + 24) = 1;
          v69 = BKLogMousePointer(v66, v67, v68);
          v70 = objc_claimAutoreleasedReturnValue(v69);
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          {
            if (v27)
              v71 = *(_DWORD *)(v27 + 8);
            else
              v71 = 0;
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v71;
            _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "TDPS: scroll terminated for %X", (uint8_t *)&buf, 8u);
          }

          v72 = mach_absolute_time();
          ScrollEvent = (const void *)IOHIDEventCreateScrollEvent(0, v72, 0, 0.0, 0.0, 0.0);
          v74.n128_f64[0] = IOHIDEventSetPhase(ScrollEvent, 8);
          IOHIDEventAppendEvent(v28, ScrollEvent, 0, v74);
          CFRelease(ScrollEvent);
LABEL_34:
          v37 = BKLogMousePointer(v34, v35, v36);
          v38 = objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
          {
            if (v27)
              v102 = *(_DWORD *)(v27 + 8);
            else
              v102 = 0;
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v102;
            _os_log_debug_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "TDPS: skipping cancelled scroll for %X", (uint8_t *)&buf, 8u);
          }

          v33 = 182;
LABEL_36:
          v39 = objc_msgSend(*(id *)(a1 + 208), "appendSubeventsForEventTypeMask:toTopLevelEvent:interfaceOrientation:getEventSummary:", v33, v28, v115, &v114);
          if (!v27)
            goto LABEL_72;
          if (*(_BYTE *)(v27 + 25))
          {
            v39 = objc_msgSend(*(id *)(a1 + 208), "buttonMask");
            if ((_DWORD)v39)
            {
              v42 = BKLogMousePointer(v39, v40, v41);
              v43 = objc_claimAutoreleasedReturnValue(v42);
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                v44 = *(_DWORD *)(v27 + 8);
                LODWORD(buf) = 67109120;
                DWORD1(buf) = v44;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "TDPS: cancelling button up %X", (uint8_t *)&buf, 8u);
              }

              IOHIDEventSetIntegerValue(v28, 1114115, 0);
              IOHIDEventSetPhase(v28, 8);
            }
          }
          if ((v114 & 0x20) == 0)
            goto LABEL_72;
          v45 = *(_DWORD *)(v27 + 28);
          if (!v45)
            goto LABEL_72;
          v46 = BKLogMousePointer(v39, v40, v41);
          v47 = objc_claimAutoreleasedReturnValue(v46);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v45;
            _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "slotID up! %X", (uint8_t *)&buf, 8u);
          }

          v48 = *(id *)(v27 + 40);
          v49 = *(unsigned int *)(v27 + 12);
          os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
          v50 = *(id *)(v27 + 56);
          v51 = v50 == 0;

          if (v51)
          {
            v75 = BKLogMousePointer(v52, v53, v54);
            v76 = objc_claimAutoreleasedReturnValue(v75);
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(__src[0]) = v104;
              *(_QWORD *)((char *)__src + 4) = v27;
              _os_log_debug_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "missing test info at down for destination %{public}@", (uint8_t *)__src, 0xCu);
            }

            v64 = 0;
            goto LABEL_71;
          }
          v122 = 0;
          v55 = *(unsigned int *)(v27 + 28);
          v56 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
          v58 = objc_msgSend(v56, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v57));
          v108 = (void *)objc_claimAutoreleasedReturnValue(v58);

          v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "authenticationSpecificationForSlotID:registrantEntitled:", v55, &v122));
          v60 = v59;
          if (!v59)
            goto LABEL_66;
          v106 = objc_msgSend(v59, "authenticationMessageContext");
          memset(__src, 0, sizeof(__src));
          v61 = sub_100005968((uint64_t)BKDisplayController, 0, 0, v60, 0);
          v107 = (void *)objc_claimAutoreleasedReturnValue(v61);
          if (!objc_msgSend(*(id *)(a1 + 280), "contextIDAtCAScreenLocation:displayUUID:options:securityAnalysis:results:", v48, v107, 0, __src, *(double *)(v27 + 80), *(double *)(v27 + 88)))
          {

LABEL_66:
            v64 = 0;
            goto LABEL_69;
          }
          v120 = 0u;
          v121 = 0u;
          if (BSAuditTokenForTask(v49, &v120))
          {
            v62 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDSystemInterface sharedInstance](BKHIDSystemInterface, "sharedInstance"));
            v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "deliveryManager"));

            v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v105, "authenticationOriginator"));
            *(_QWORD *)&buf = _NSConcreteStackBlock;
            *((_QWORD *)&buf + 1) = 3221225472;
            v125 = sub_1000670A8;
            v126 = &unk_1000EBAC0;
            memcpy(v128, __src, sizeof(v128));
            v127 = v27;
            v129 = v106;
            v132 = v122;
            v130 = v120;
            v131 = v121;
            v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "buildMessage:", &buf));

          }
          else
          {
            v64 = 0;
          }

LABEL_69:
          if (v64)
            objc_msgSend(v30, "setAuthenticationMessage:", v64);
LABEL_71:

LABEL_72:
          if (*(double *)(a4 + 32) != 0.0 || *(double *)(a4 + 40) != 0.0)
          {
            if (v27)
            {
              v77 = *(_DWORD *)(v27 + 8);
              v78 = *(_DWORD *)(v27 + 32);
            }
            else
            {
              v77 = 0;
              v78 = 0;
            }
            v79 = *(_QWORD *)(a1 + 352);
            if (v79)
            {
              objc_initWeak((id *)__src, *(id *)(a1 + 352));
              v80 = *(void **)(v79 + 8);
              *(_QWORD *)&buf = _NSConcreteStackBlock;
              *((_QWORD *)&buf + 1) = 3221225472;
              v125 = sub_10008BF44;
              v126 = &unk_1000ECA88;
              objc_copyWeak((id *)&v127, (id *)__src);
              v128[0] = v77;
              v128[1] = v78;
              objc_msgSend(v80, "updateStatistics:", &buf);
              objc_destroyWeak((id *)&v127);
              objc_destroyWeak((id *)__src);
            }
          }
          v81 = v114;
          if ((v114 & 2) != 0)
          {
            if (v27)
            {
              v82 = *(_DWORD *)(v27 + 8);
              v83 = *(_DWORD *)(v27 + 32);
            }
            else
            {
              v82 = 0;
              v83 = 0;
            }
            v84 = *(_QWORD *)(a1 + 352);
            if (v84)
            {
              objc_initWeak((id *)__src, *(id *)(a1 + 352));
              v85 = *(void **)(v84 + 8);
              *(_QWORD *)&buf = _NSConcreteStackBlock;
              *((_QWORD *)&buf + 1) = 3221225472;
              v125 = sub_10008BFA4;
              v126 = &unk_1000ECA88;
              objc_copyWeak((id *)&v127, (id *)__src);
              v128[0] = v82;
              v128[1] = v83;
              objc_msgSend(v85, "updateStatistics:", &buf);
              objc_destroyWeak((id *)&v127);
              objc_destroyWeak((id *)__src);
              v81 = v114;
            }
          }
          if ((v81 & 4) != 0)
          {
            if (v27)
            {
              v86 = *(_DWORD *)(v27 + 8);
              v87 = *(_DWORD *)(v27 + 32);
            }
            else
            {
              v86 = 0;
              v87 = 0;
            }
            v88 = *(_QWORD *)(a1 + 352);
            if (v88)
            {
              objc_initWeak((id *)__src, *(id *)(a1 + 352));
              v89 = *(void **)(v88 + 8);
              *(_QWORD *)&buf = _NSConcreteStackBlock;
              *((_QWORD *)&buf + 1) = 3221225472;
              v125 = sub_10008C064;
              v126 = &unk_1000ECA88;
              objc_copyWeak((id *)&v127, (id *)__src);
              v128[0] = v86;
              v128[1] = v87;
              objc_msgSend(v89, "updateStatistics:", &buf);
              objc_destroyWeak((id *)&v127);
              objc_destroyWeak((id *)__src);
              v81 = v114;
            }
          }
          if ((v81 & 8) != 0)
          {
            if (v27)
            {
              v90 = *(_DWORD *)(v27 + 8);
              v91 = *(_DWORD *)(v27 + 32);
            }
            else
            {
              v90 = 0;
              v91 = 0;
            }
            v92 = *(_QWORD *)(a1 + 352);
            if (v92)
            {
              objc_initWeak((id *)__src, *(id *)(a1 + 352));
              v93 = *(void **)(v92 + 8);
              *(_QWORD *)&buf = _NSConcreteStackBlock;
              *((_QWORD *)&buf + 1) = 3221225472;
              v125 = sub_10008C124;
              v126 = &unk_1000ECA88;
              objc_copyWeak((id *)&v127, (id *)__src);
              v128[0] = v90;
              v128[1] = v91;
              objc_msgSend(v93, "updateStatistics:", &buf);
              objc_destroyWeak((id *)&v127);
              objc_destroyWeak((id *)__src);
              v81 = v114;
            }
          }
          if ((v81 & 0x10) != 0)
          {
            if (v27)
            {
              v94 = *(_DWORD *)(v27 + 8);
              v95 = *(_DWORD *)(v27 + 32);
            }
            else
            {
              v94 = 0;
              v95 = 0;
            }
            v96 = *(_QWORD *)(a1 + 352);
            if (v96)
            {
              objc_initWeak((id *)__src, *(id *)(a1 + 352));
              v97 = *(void **)(v96 + 8);
              *(_QWORD *)&buf = _NSConcreteStackBlock;
              *((_QWORD *)&buf + 1) = 3221225472;
              v125 = sub_10008C0C4;
              v126 = &unk_1000ECA88;
              objc_copyWeak((id *)&v127, (id *)__src);
              v128[0] = v94;
              v128[1] = v95;
              objc_msgSend(v97, "updateStatistics:", &buf);
              objc_destroyWeak((id *)&v127);
              objc_destroyWeak((id *)__src);
              v81 = v114;
            }
          }
          if ((v81 & 0x40) != 0)
          {
            if (v27)
            {
              v98 = *(_DWORD *)(v27 + 8);
              v99 = *(_DWORD *)(v27 + 32);
            }
            else
            {
              v98 = 0;
              v99 = 0;
            }
            v100 = *(_QWORD *)(a1 + 352);
            if (v100)
            {
              objc_initWeak((id *)__src, *(id *)(a1 + 352));
              v101 = *(void **)(v100 + 8);
              *(_QWORD *)&buf = _NSConcreteStackBlock;
              *((_QWORD *)&buf + 1) = 3221225472;
              v125 = sub_10008C004;
              v126 = &unk_1000ECA88;
              objc_copyWeak((id *)&v127, (id *)__src);
              v128[0] = v98;
              v128[1] = v99;
              objc_msgSend(v101, "updateStatistics:", &buf);
              objc_destroyWeak((id *)&v127);
              objc_destroyWeak((id *)__src);
            }
          }
          sub_1000113BC(a5, v28, v30, (void *)v27);
          CFRelease(v28);
LABEL_104:

          v26 = (char *)v26 + 1;
        }
        while (v113 != v26);
        v103 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v116, v123, 16);
        v113 = v103;
      }
      while (v103);
    }

  }
}

void sub_1000663FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)&STACK[0x320]);
  _Unwind_Resume(a1);
}

void sub_100066498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000664A0(*(_QWORD *)(a1 + 32), a2, a3, a4);
}

void sub_1000664A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t ConciseDescription;
  uint64_t v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  int v22;

  if (a1)
  {
    v7 = BKSHIDEventSetAttributes(a2, a3);
    v10 = BKLogMousePointer(v7, v8, v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      ConciseDescription = BKSHIDEventGetConciseDescription(a2);
      v16 = objc_claimAutoreleasedReturnValue(ConciseDescription);
      v17 = (void *)v16;
      if (a4)
        v18 = *(_DWORD *)(a4 + 8);
      else
        v18 = 0;
      v19 = 138543618;
      v20 = v16;
      v21 = 1024;
      v22 = v18;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%{public}@ -> contextID:%X", (uint8_t *)&v19, 0x12u);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "eventDispatcher"));
    v13 = v12;
    if (a4)
      v14 = *(unsigned int *)(a4 + 12);
    else
      v14 = 0;
    objc_msgSend(v12, "sendEvent:toClientTaskPort:", a2, v14);

  }
}

__IOHIDEvent *sub_1000665CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  __IOHIDEvent *v8;
  __int128 v10;
  __int128 v11;
  CGPoint v12;
  CGPoint v13;
  id v14;
  id v15;
  uint64_t v16;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  *((_QWORD *)&v11 + 1) = objc_msgSend(*(id *)(a1 + 208), "eventSequenceStartTimestamp", 0, 0, a3, 0, 0, 0, 0, 0, 0, 0, 0);
  v12 = CGPointZero;
  v13 = v12;
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 208), "mostRecentSender"));
  v15 = (id)objc_claimAutoreleasedReturnValue(+[BKTouchDeliveryPolicyServer sharedServer](BKTouchDeliveryPolicyServer, "sharedServer"));
  LOWORD(v16) = 0;
  v8 = sub_1000666B8(a1, 1, 2, a2, (uint64_t)&v10, a4);

  return v8;
}

void sub_10006669C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

__IOHIDEvent *sub_1000666B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  __IOHIDEvent *v12;
  id v13;
  void *v14;
  void *v15;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  v12 = (__IOHIDEvent *)sub_100066774(a1, *(_QWORD *)(a5 + 16), (uint64_t)a4);
  v13 = sub_1000668A8(a1, a2, a3, (uint64_t)a4, a5);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v15 = v14;
  if (a2 == 2)
    objc_msgSend(v14, "setPointerEdgeMask:", *(unsigned __int8 *)(a1 + 152));
  sub_1000113BC(a6, v12, v15, a4);
  CFRelease(v12);

  return v12;
}

uint64_t sub_100066774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  double v7;
  double v8;
  uint64_t v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;
  uint64_t v17;
  int EventFlags;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  if (a3)
  {
    v6 = *(id *)(a3 + 48);
    v8 = *(double *)(a3 + 80);
    v7 = *(double *)(a3 + 88);
    v9 = *(unsigned int *)(a3 + 8);
    v10 = *(void **)(a3 + 40);
  }
  else
  {
    v9 = 0;
    v6 = 0;
    v10 = 0;
    v7 = 0.0;
    v8 = 0.0;
  }
  v11 = v10;
  objc_msgSend(*(id *)(a1 + 280), "convertCAScreenLocation:toContextID:displayUUID:", v9, v11, v8, v7);
  v13 = v12;
  v15 = v14;
  v16 = objc_msgSend(v6, "senderID");
  v17 = IOHIDEventCreate(kCFAllocatorDefault, 17, a2, 0);
  IOHIDEventSetFloatValue(v17, 1114112, v13);
  IOHIDEventSetFloatValue(v17, 1114113, v15);
  EventFlags = IOHIDEventGetEventFlags(v17);
  IOHIDEventSetEventFlags(v17, EventFlags | 3u);
  IOHIDEventSetSenderID(v17, v16);

  return v17;
}

id sub_1000668A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;
  void *v18;
  unsigned int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  unsigned int v40;
  double v41;
  double v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  if (a4)
  {
    v9 = *(id *)(a4 + 48);
    v10 = *(unsigned int *)(a4 + 8);
    v11 = *(void **)(a4 + 40);
  }
  else
  {
    v10 = 0;
    v9 = 0;
    v11 = 0;
  }
  v12 = v11;
  v51 = objc_msgSend(v9, "senderID");
  v14 = *(double *)(a5 + 32);
  v13 = *(double *)(a5 + 40);
  v16 = *(double *)(a5 + 48);
  v15 = *(double *)(a5 + 56);
  v50 = objc_alloc_init((Class)BKSHIDEventPointerAttributes);
  v17 = v12;
  v49 = v17;
  if (v17
    && (v18 = v17,
        v19 = objc_msgSend(v17, "isEqualToString:", BKSDisplayUUIDMainKey),
        v18,
        !v19))
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDEventDisplay displayWithHardwareIdentifier:](BKSHIDEventDisplay, "displayWithHardwareIdentifier:", v18));
    v20 = v50;
    objc_msgSend(v50, "setDisplay:", v21);

  }
  else
  {
    v20 = v50;
    objc_msgSend(v50, "setDisplay:", 0);
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDEventDeferringToken tokenForIdentifierOfCAContext:](BKSHIDEventDeferringToken, "tokenForIdentifierOfCAContext:", v10));
  objc_msgSend(v20, "setToken:", v22);

  objc_msgSend(v20, "setSource:", objc_msgSend(v9, "eventSource"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDEventDeferringEnvironment keyboardFocusEnvironment](BKSHIDEventDeferringEnvironment, "keyboardFocusEnvironment"));
  objc_msgSend(v20, "setEnvironment:", v23);

  objc_msgSend(v20, "setContextType:", a2);
  objc_msgSend(v20, "setContextMove:", a3);
  if (a4)
  {
    v24 = *(id *)(a4 + 16);
    objc_msgSend(v20, "setSceneTouchBehavior:", objc_msgSend(v24, "touchBehavior"));

    v25 = *(void **)(a4 + 64);
  }
  else
  {
    objc_msgSend(v20, "setSceneTouchBehavior:", objc_msgSend(0, "touchBehavior"));
    v25 = 0;
  }
  v26 = v25;
  objc_msgSend(v20, "setHitTestSecurityAnalysis:", v26);

  if (a2 == 2)
  {
    v48 = a5;
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v28 = *(id *)(a1 + 216);
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v53, v57, 16);
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v54;
      do
      {
        for (i = 0; i != v30; i = (char *)i + 1)
        {
          if (*(_QWORD *)v54 != v31)
            objc_enumerationMutation(v28);
          v33 = *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)i);
          if (v33 && (*(_DWORD *)(v33 + 12) - 1) <= 0xFFFFFFFD)
          {
            v34 = *(unsigned int *)(v33 + 8);
            v35 = sub_1000266F4(v33, *(void **)(a1 + 432));
            v36 = objc_alloc_init((Class)BKSHIDEventHitTestClientContext);
            objc_msgSend(v36, "setContextID:", v34);
            objc_msgSend(v36, "setPid:", v35);
            objc_msgSend(v27, "addObject:", v36);

          }
        }
        v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v53, v57, 16);
      }
      while (v30);
    }

    v20 = v50;
    if (objc_msgSend(v27, "count"))
      objc_msgSend(v50, "setHitTestContexts:", v27);

    a5 = v48;
  }
  v37 = *(void **)(a1 + 240);
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v51));
  v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKey:", v38));

  v40 = 64;
  if (!v39 || (*(_BYTE *)(v39 + 8) ? (v40 = 68) : (v40 = 64), !*(_BYTE *)(v39 + 10)))
  {
    if (objc_msgSend(*(id *)(a1 + 208), "shouldScrollNaturally"))
      v40 |= 0x20u;
  }
  if (*(_BYTE *)(a5 + 81))
    v40 |= 0x400u;
  if (sub_100066DC0(a1))
    v40 |= 8u;
  if (objc_msgSend(*(id *)(a1 + 208), "senderPostsAtHighFrequency:", v51)
    && objc_msgSend(*(id *)(a1 + 24), "shouldUseHighFrequencyAttributeOption"))
  {
    v40 |= 0x10u;
  }
  if (v39)
  {
    v41 = *(double *)(v39 + 24);
    v42 = *(double *)(v39 + 32);
  }
  else
  {
    v42 = 0.0;
    v41 = 0.0;
  }
  objc_msgSend(v20, "setDigitizerSurfaceWidth:", v41);
  objc_msgSend(v20, "setDigitizerSurfaceHeight:", v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 208), "touchingPathIndexes"));
  v44 = v43;
  if (a3 == 2)
  {
    if (objc_msgSend(v43, "count"))
      v45 = v40 | 2;
    else
      v45 = v40;
  }
  else
  {
    objc_msgSend(v20, "setAcceleratedRelativePositionX:", v16);
    objc_msgSend(v20, "setAcceleratedRelativePositionY:", v15);
    objc_msgSend(v20, "setUnacceleratedRelativePositionX:", v14);
    objc_msgSend(v20, "setUnacceleratedRelativePositionY:", v13);
    objc_msgSend(v20, "setActiveModifiers:", *(_QWORD *)(a1 + 248));
    if (objc_msgSend(*(id *)(a1 + 208), "touchingPathIndexesDidChange"))
      v45 = v40 | 2;
    else
      v45 = v40;
    objc_msgSend(v20, "setFingerDownCount:", objc_msgSend(v44, "count"));
  }
  v46 = *(_QWORD *)(a5 + 24);
  if (v46)
    objc_msgSend(v20, "setInitialTouchTimestamp:", BSMonotonicReferencedTimeFromMachTime(v46));
  objc_msgSend(v20, "setOptions:", v45);

  return v20;
}

uint64_t sub_100066DC0(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  if (*(_BYTE *)(a1 + 409) || *(_BYTE *)(a1 + 412))
    return 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayController sharedInstance](BKDisplayController, "sharedInstance"));
  v1 = objc_msgSend(v3, "displayIsBlanked:", 0) ^ 1;

  return v1;
}

void sub_100066E18(uint64_t a1, uint64_t a2, const os_unfair_lock **a3, uint64_t a4, double a5, double a6)
{
  double v7;
  double v8;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  const os_unfair_lock *v22;
  double x;
  double y;
  uint64_t v25;
  NSObject *v26;
  double v27;
  double v28;
  uint64_t v29;
  id v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  uint64_t v34;

  v7 = a6;
  v8 = a5;
  *a3 = *(const os_unfair_lock **)(a4 + 8);
  if (*(_BYTE *)(a4 + 80))
  {
    if (a2)
    {
      *(double *)(a2 + 80) = a5;
      *(double *)(a2 + 88) = a6;
    }
  }
  else
  {
    if (a2)
      v11 = *(void **)(a2 + 40);
    else
      v11 = 0;
    v12 = v11;
    v13 = objc_msgSend(v12, "length");
    v14 = (void *)BKSDisplayUUIDMainKey;
    if (v13)
      v14 = v12;
    v30 = v14;

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 112), "displayUUID"));
    v16 = BSEqualObjects(v15, v30);

    if (!v16)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "regionForDisplayUUID:", v30));
      if (v19)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "immutableDisplayForUUID:", v30));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "uniqueId"));
        v22 = sub_10006718C((const os_unfair_lock *)a1, v30);
        if (*(_QWORD *)(a1 + 112))
        {
          objc_msgSend(*(id *)(a1 + 104), "convertToGlobalPoint:fromRegion:", *(double *)(a1 + 136), *(double *)(a1 + 144));
        }
        else
        {
          x = CGPointZero.x;
          y = CGPointZero.y;
        }
        objc_msgSend(*(id *)(a1 + 104), "convertFromGlobalPoint:toRegion:", v19, x, y);
        sub_100067210(v20, (uint64_t)v22, *(void **)(a1 + 280));
        objc_msgSend(*(id *)(a1 + 280), "convertReferenceLocation:toCAScreenLocationForDisplayUUID:", v21);
        v8 = v27;
        v7 = v28;
        *a3 = v22;

      }
      else
      {
        v25 = BKLogMousePointer(0, v17, v18);
        v26 = objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          v29 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)buf = 138543618;
          v32 = v30;
          v33 = 2114;
          v34 = v29;
          _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "getUnconstrainedHitTestPoint: no displayUUID:%{public}@ in arrangement:%{public}@", buf, 0x16u);
        }

        *a3 = (const os_unfair_lock *)1;
        v8 = 0.0;
        v7 = 0.0;
      }

    }
    if (a2)
    {
      *(double *)(a2 + 80) = v8;
      *(double *)(a2 + 88) = v7;
    }

  }
}

void sub_1000670A8(uint64_t a1, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  void *v7;
  __int128 v8;
  _OWORD v9[2];

  objc_msgSend(a2, "setOriginIdentifier:", 0xC181BADB23D8497BLL);
  objc_msgSend(a2, "setEventType:", 17);
  sub_10001C04C(a2, (unsigned int *)(a1 + 40));
  v4 = *(_QWORD **)(a1 + 32);
  if (v4)
    v4 = (_QWORD *)v4[7];
  v5 = v4;
  objc_msgSend(a2, "setHitTestInformationFromStartEvent:", v5);

  v6 = sub_10001C094(a1 + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(a2, "setHitTestInformationFromEndEvent:", v7);
  objc_msgSend(a2, "setContext:", *(_QWORD *)(a1 + 344));
  objc_msgSend(a2, "setRegistrantEntitled:", *(unsigned __int8 *)(a1 + 384));
  v8 = *(_OWORD *)(a1 + 368);
  v9[0] = *(_OWORD *)(a1 + 352);
  v9[1] = v8;
  objc_msgSend(a2, "setVersionedPID:", BSVersionedPIDForAuditToken(v9));

}

const os_unfair_lock *sub_10006718C(const os_unfair_lock *result, void *a2)
{
  const os_unfair_lock *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  unsigned int v8;

  if (result)
  {
    v3 = result;
    os_unfair_lock_assert_owner(result + 2);
    v4 = a2;
    v5 = objc_msgSend(v4, "length");
    v6 = (void *)BKSDisplayUUIDMainKey;
    if (v5)
      v6 = v4;
    v7 = v6;

    v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)&v3[18]._os_unfair_lock_opaque);
    if (v8)
      return *(const os_unfair_lock **)&v3[56]._os_unfair_lock_opaque;
    else
      return (const os_unfair_lock *)1;
  }
  return result;
}

id sub_100067210(id result, uint64_t a2, void *a3)
{
  if (a3)
    return objc_msgSend(a3, "transformLayerPropertiesForDisplay:displayInterfaceOrientation:", result, a2, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0);
  return result;
}

void sub_1000672BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  const os_unfair_lock *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  id v32;
  id v33;
  uint64_t v34;
  uint8_t buf[4];
  _QWORD *v36;

  if (a2 && *(_BYTE *)(a2 + 8))
  {
    v10 = objc_msgSend(*(id *)(a1 + 384), "containsObject:", *(_QWORD *)(a2 + 24));
    if (!v10 || a4 != 0)
    {
      v12 = v10;
      v13 = *(id *)(a2 + 24);
      v14 = v13;
      if (v13)
        v15 = (void *)v13[6];
      else
        v15 = 0;
      v16 = v15;

      if (v16)
      {
        if (v14)
          v17 = (void *)v14[5];
        else
          v17 = 0;
        v18 = v17;
        v19 = objc_msgSend(v18, "length");
        v20 = (void *)BKSDisplayUUIDMainKey;
        if (v19)
          v20 = v18;
        v21 = v20;

        v22 = sub_10006718C((const os_unfair_lock *)a1, v21);
        *(_BYTE *)(a2 + 8) = 0;
        *((_QWORD *)&v29 + 1) = objc_msgSend(*(id *)(a1 + 208), "eventSequenceStartTimestamp", 0, 0, a3, 0, 0, 0, 0, 0, 0, 0, 0);
        v30 = 0u;
        v31 = 0u;
        v32 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 208), "mostRecentSender"));
        v33 = (id)objc_claimAutoreleasedReturnValue(+[BKTouchDeliveryPolicyServer sharedServer](BKTouchDeliveryPolicyServer, "sharedServer"));
        LOWORD(v34) = 0;
        objc_msgSend(*(id *)(a1 + 208), "appendSubeventsForEventTypeMask:toTopLevelEvent:interfaceOrientation:getEventSummary:", 2294, sub_1000666B8(a1, 2, 2, v14, (uint64_t)&v28, a5), v22, 0);
        sub_1000260D8((uint64_t)v14, 0);
        if (v12)
        {
          v23 = objc_msgSend(*(id *)(a1 + 384), "removeObject:", v14);
          v26 = BKLogMousePointer(v23, v24, v25);
          v27 = objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            v36 = v14;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "unpinning global destination %{public}@", buf, 0xCu);
          }

        }
      }

    }
  }
}

void sub_100067508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_100067530(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  int v8;
  int v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  int v13;
  int v14;
  id location;

  objc_msgSend(*(id *)(a1 + 208), "appendSubeventsForEventTypeMask:toTopLevelEvent:interfaceOrientation:getEventSummary:", 2294, sub_1000666B8(a1, 2, a2, a3, a4, a5), *(_QWORD *)(a4 + 8), 0);
  v7 = *(_QWORD **)(a1 + 352);
  if (a3)
  {
    v8 = a3[8];
    v9 = a3[2];
    if (!v7)
      return;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    if (!v7)
      return;
  }
  objc_initWeak(&location, v7);
  v10 = (void *)v7[1];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10008C184;
  v11[3] = &unk_1000ECA88;
  objc_copyWeak(&v12, &location);
  v13 = v9;
  v14 = v8;
  objc_msgSend(v10, "updateStatistics:", v11);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
}

void sub_100067630(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006764C(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  const os_unfair_lock *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  CGPoint v42;
  uint8_t v43[128];
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  CGFloat x;
  __int16 v48;
  CGFloat y;

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v42 = CGPointZero;
    v41 = 0;
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "closestRegionForGlobalPoint:returningClosestContainingPoint:returningEdgeMask:", &v42, &v41, a4, a5));
    v13 = (void *)v10;
    if (*(_QWORD *)(a1 + 112) == v10
      && (v10 = BSPointEqualToPoint(*(double *)(a1 + 136), *(double *)(a1 + 144), v42.x, v42.y), (_DWORD)v10)
      && !a2)
    {
      v36 = BKLogMousePointer(v10, v11, v12);
      v16 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v45 = a3;
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, " -> ignoring model point update (%{public}@)", buf, 0xCu);
      }
    }
    else
    {
      v14 = BKLogMousePointer(v10, v11, v12);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543874;
        v45 = a3;
        v46 = 2048;
        x = v42.x;
        v48 = 2048;
        y = v42.y;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, " -> model point (%{public}@) %g,%g", buf, 0x20u);
      }

      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "displayUUID"));
      if ((a2 & 1) != 0
        || (v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 400), "objectForKeyedSubscript:", v16)),
            v18 = objc_msgSend(v17, "isActive"),
            v17,
            (v18 & 1) == 0))
      {
        kdebug_trace(730468360, *(_QWORD *)&v42.x, 0, 0, 0);
        kdebug_trace(730468364, *(_QWORD *)&v42.y, 0, 0, 0);
        *(CGPoint *)(a1 + 136) = v42;
        *(_BYTE *)(a1 + 152) = v41;
        if (*(void **)(a1 + 112) != v13 || a2)
        {
          objc_storeStrong((id *)(a1 + 112), v13);
          sub_1000679E4(a1, (uint64_t)CFSTR("pointer region/display change"));
        }
      }
      else
      {
        v22 = BKLogMousePointer(v19, v20, v21);
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "    suppressed", buf, 2u);
        }

      }
      if (v16)
      {
        v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "immutableDisplayForUUID:", v16));
        if (v24)
        {
          v25 = (void *)v24;
          v26 = sub_10006718C((const os_unfair_lock *)a1, v16);
          sub_100067210(v25, (uint64_t)v26, *(void **)(a1 + 280));
          v28 = v27;
          v30 = v29;
          v37 = 0u;
          v38 = 0u;
          v39 = 0u;
          v40 = 0u;
          v31 = *(id *)(a1 + 344);
          v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v37, v43, 16);
          if (v32)
          {
            v33 = v32;
            v34 = *(_QWORD *)v38;
            do
            {
              v35 = 0;
              do
              {
                if (*(_QWORD *)v38 != v34)
                  objc_enumerationMutation(v31);
                objc_msgSend(*(id *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)v35), "observeMouseModelPointDidChange:display:reason:", v25, a3, v28, v30, (_QWORD)v37);
                v35 = (char *)v35 + 1;
              }
              while (v33 != v35);
              v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v37, v43, 16);
            }
            while (v33);
          }

        }
      }
    }

  }
}

void sub_1000679E4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  void *v9;
  int v10;
  id v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  id v38;
  id v39;
  void *v40;
  unsigned __int8 v41;
  NSObject *v42;
  id v43;
  id v44;
  uint64_t v45;
  void *i;
  void *v47;
  void *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BKDisplayLink *v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  const __CFString *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  _BOOL4 v62;
  int v63;
  const char *v64;
  NSObject *v65;
  uint32_t v66;
  void *v67;
  NSString *v68;
  void *v69;
  uint64_t v70;
  objc_class *v71;
  NSString *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint8_t buf[4];
  _BYTE v85[10];
  void *v86;
  _BYTE v87[10];
  __int16 v88;
  _BYTE v89[10];
  _BYTE v90[14];
  _BYTE v91[128];

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v78 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 112), "displayUUID"));
    v4 = objc_msgSend(*(id *)(a1 + 40), "hasDeviceAvailable");
    v5 = sub_100068108((const os_unfair_lock *)a1);
    v6 = *(unsigned __int8 *)(a1 + 409);
    v7 = v5 ^ 1;
    if (*(_BYTE *)(a1 + 409))
      v7 = 0;
    if (!v4)
      v7 = 0;
    if (*(_QWORD *)(a1 + 112))
      v8 = v7;
    else
      v8 = 0;
    v9 = *(void **)(a1 + 176);
    v10 = *(unsigned __int8 *)(a1 + 411);
    v11 = objc_msgSend(v9, "isPaused");
    v12 = v11;
    v15 = BKLogMousePointer(v11, v13, v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110914;
      *(_DWORD *)v85 = v8;
      *(_WORD *)&v85[4] = 1024;
      *(_DWORD *)&v85[6] = v4;
      LOWORD(v86) = 1024;
      *(_DWORD *)((char *)&v86 + 2) = v5;
      HIWORD(v86) = 1024;
      *(_DWORD *)v87 = v10;
      *(_WORD *)&v87[4] = 1024;
      *(_DWORD *)&v87[6] = v6 == 0;
      v88 = 1024;
      *(_DWORD *)v89 = v9 != 0;
      *(_WORD *)&v89[4] = 1024;
      *(_DWORD *)&v89[6] = v12;
      *(_WORD *)v90 = 2114;
      *(_QWORD *)&v90[2] = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "reevaluateDisplayLink: wants:%{BOOL}u devices:%{BOOL}u eventsDisabled:%{BOOL}u eventsPaused:%{BOOL}u allowed:%{BOOL}u has:%{BOOL}u paused:%{BOOL}u -- %{public}@", buf, 0x36u);
    }

    v17 = v9 == 0;
    v18 = v9 == 0;
    if (v9)
      v19 = 0;
    else
      v19 = v8;
    v20 = v8 ^ 1;
    if (v17)
      v21 = 0;
    else
      v21 = v8 ^ 1;
    if (v17)
      v22 = 1;
    else
      v22 = v8 ^ 1;
    v23 = v12 ^ 1;
    if (!v10)
      v23 = 0;
    v79 = v23 & ~v22;
    if (v10)
      v24 = 0;
    else
      v24 = v12;
    if ((v22 & 1) != 0)
      v25 = 0;
    else
      v25 = v24;
    v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 176), "displayUUID"));
    v29 = (void *)v26;
    if (((v20 | v18) & 1) != 0)
    {
      v30 = (void *)v78;
      if (!v21)
        goto LABEL_30;
    }
    else
    {
      v30 = (void *)v78;
      v26 = BSEqualObjects(v78, v26);
      v19 |= v26 ^ 1;
      if (((v26 ^ 1 | v21) & 1) == 0)
      {
LABEL_30:
        v31 = 0;
        v32 = 0;
        if (!v19)
          goto LABEL_57;
        goto LABEL_36;
      }
    }
    v33 = BKLogMousePointer(v26, v27, v28);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)v85 = v29;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "reevaluateDisplayLink: destroy %{public}@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 176), "invalidate");
    v35 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = 0;

    sub_100068184(a1, (uint64_t)v29);
    v31 = 1;
    if ((v19 & 1) == 0)
    {
      v32 = 0;
      goto LABEL_57;
    }
LABEL_36:
    v77 = v31;
    v36 = BKLogMousePointer(v26, v27, v28);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)v85 = v30;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "reevaluateDisplayLink: create %{public}@", buf, 0xCu);
    }

    v38 = (id)objc_claimAutoreleasedReturnValue(+[CADisplay mainDisplay](CADisplay, "mainDisplay"));
    v39 = v30;
    if (v39)
    {
      v40 = v39;
      v41 = objc_msgSend(v39, "isEqualToString:", BKSDisplayUUIDMainKey);

      if ((v41 & 1) == 0)
      {
        v74 = v38;
        v75 = v25;
        v76 = v29;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v42 = objc_claimAutoreleasedReturnValue(+[CADisplay displays](CADisplay, "displays"));
        v43 = -[NSObject countByEnumeratingWithState:objects:count:](v42, "countByEnumeratingWithState:objects:count:", &v80, v91, 16);
        if (v43)
        {
          v44 = v43;
          v45 = *(_QWORD *)v81;
          while (2)
          {
            for (i = 0; i != v44; i = (char *)i + 1)
            {
              if (*(_QWORD *)v81 != v45)
                objc_enumerationMutation(v42);
              v47 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * (_QWORD)i);
              v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "uniqueId"));
              v49 = BSEqualObjects(v48, v40);

              if ((v49 & 1) != 0)
              {
                v38 = v47;

                v30 = (void *)v78;
                v25 = v75;
                v29 = v76;
                v31 = v77;
                goto LABEL_54;
              }
            }
            v44 = -[NSObject countByEnumeratingWithState:objects:count:](v42, "countByEnumeratingWithState:objects:count:", &v80, v91, 16);
            if (v44)
              continue;
            break;
          }
        }

        v53 = BKLogMousePointer(v50, v51, v52);
        v42 = objc_claimAutoreleasedReturnValue(v53);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)v85 = v40;
          _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "reevaluateDisplayLink: warning: missing CADisplay for %{public}@, using main display for displaylink", buf, 0xCu);
        }
        v30 = (void *)v78;
        v25 = v75;
        v29 = v76;
        v31 = v77;
        v38 = v74;
LABEL_54:

      }
    }
    if (*(_QWORD *)(a1 + 176))
    {
      v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("we should not have a display link here. c:%d d:%d p:%d u:%d"), 1, v31, v79, v25));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        v68 = NSStringFromSelector("_locked_reevaluateDisplayLinkForReason:");
        v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
        v71 = (objc_class *)objc_opt_class(a1, v70);
        v72 = NSStringFromClass(v71);
        v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
        *(_DWORD *)buf = 138544642;
        *(_QWORD *)v85 = v69;
        *(_WORD *)&v85[8] = 2114;
        v86 = v73;
        *(_WORD *)v87 = 2048;
        *(_QWORD *)&v87[2] = a1;
        v88 = 2114;
        *(_QWORD *)v89 = CFSTR("BKMousePointerController.m");
        *(_WORD *)&v89[8] = 1024;
        *(_DWORD *)v90 = 1984;
        *(_WORD *)&v90[4] = 2114;
        *(_QWORD *)&v90[6] = v67;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

      }
      _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v67), "UTF8String"));
      __break(0);
      JUMPOUT(0x100068100);
    }
    v54 = -[BKDisplayLink initWithDisplayLinkClass:display:target:action:]([BKDisplayLink alloc], "initWithDisplayLinkClass:display:target:action:", objc_msgSend(*(id *)(a1 + 24), "displayLinkClass"), v38, a1, "_displayLinkFired:");
    v55 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v54;

    *(_BYTE *)(a1 + 412) = 0;
    v32 = 1;
LABEL_57:
    if ((v79 | v25) == 1)
    {
      v56 = BKLogMousePointer(v26, v27, v28);
      v57 = objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        v58 = CFSTR("unpause");
        if ((_DWORD)v79)
          v58 = CFSTR("pause");
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)v85 = v58;
        *(_WORD *)&v85[8] = 2114;
        v86 = v30;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "reevaluateDisplayLink: %{public}@ %{public}@", buf, 0x16u);
      }

      v26 = (uint64_t)objc_msgSend(*(id *)(a1 + 176), "setPaused:", v10 != 0);
      if ((_DWORD)v79)
      {
        *(_BYTE *)(a1 + 412) = 1;
        v26 = mach_absolute_time();
        *(_QWORD *)(a1 + 184) = v26;
      }
      if ((_DWORD)v25)
      {
        *(_QWORD *)(a1 + 192) = mach_absolute_time();
LABEL_74:

        return;
      }
    }
    if (((v31 | v32 | v79 | v25) & 1) != 0)
      goto LABEL_74;
    v59 = *(_QWORD *)(a1 + 176);
    v60 = BKLogMousePointer(v26, v27, v28);
    v61 = objc_claimAutoreleasedReturnValue(v60);
    v62 = os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
    if (v59)
    {
      if (v62)
      {
        v63 = *(unsigned __int8 *)(a1 + 412);
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)v85 = v30;
        *(_WORD *)&v85[8] = 1024;
        LODWORD(v86) = v63;
        v64 = "reevaluateDisplayLink: no-op -- %{public}@ -- paused:%{BOOL}u";
        v65 = v61;
        v66 = 18;
LABEL_72:
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, v64, buf, v66);
      }
    }
    else if (v62)
    {
      *(_WORD *)buf = 0;
      v64 = "reevaluateDisplayLink: no-op -- no display link";
      v65 = v61;
      v66 = 2;
      goto LABEL_72;
    }

    goto LABEL_74;
  }
}

const os_unfair_lock *sub_100068108(const os_unfair_lock *result)
{
  const os_unfair_lock *v1;
  void *v2;
  void *v3;

  if (result)
  {
    v1 = result;
    os_unfair_lock_assert_owner(result + 2);
    if (*(_QWORD *)&v1[18]._os_unfair_lock_opaque
      && (v2 = *(void **)&v1[26]._os_unfair_lock_opaque,
          v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)&v1[20]._os_unfair_lock_opaque, "objectForKey:")),
          LODWORD(v2) = objc_msgSend(v2, "isEqual:", v3),
          v3,
          !(_DWORD)v2))
    {
      return 0;
    }
    else
    {
      return (const os_unfair_lock *)(objc_msgSend(*(id *)&v1[40]._os_unfair_lock_opaque, "count") != 0);
    }
  }
  return result;
}

void sub_100068184(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BKHIDEventCollector *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  _DWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  id v18;
  void *v19;
  id v20;
  _QWORD v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  int v28;
  _BYTE v29[128];

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v3 = mach_absolute_time();
    sub_100063E6C(a1, v3);
    objc_msgSend(*(id *)(a1 + 208), "frameWillBegin");
    v4 = objc_alloc_init(BKHIDEventCollector);
    v5 = objc_msgSend(*(id *)(a1 + 216), "mutableCopy");
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v6 = *(id *)(a1 + 216);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v24;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v24 != v9)
            objc_enumerationMutation(v6);
          v11 = *(_DWORD **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v10);
          if ((objc_msgSend(*(id *)(a1 + 384), "containsObject:", v11) & 1) == 0
            && (objc_msgSend(*(id *)(a1 + 392), "containsObject:", v11) & 1) == 0)
          {
            v12 = objc_msgSend(*(id *)(a1 + 208), "appendSubeventsForEventTypeMask:toTopLevelEvent:interfaceOrientation:getEventSummary:", 246, sub_1000665CC(a1, v11, v3, (uint64_t)v4), 1, 0);
            v15 = BKLogMousePointer(v12, v13, v14);
            v16 = objc_claimAutoreleasedReturnValue(v15);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              if (v11)
                v17 = v11[2];
              else
                v17 = 0;
              *(_DWORD *)buf = 67109120;
              v28 = v17;
              _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "exit context:%X", buf, 8u);
            }

            objc_msgSend(v5, "removeObject:", v11);
          }
          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v18 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
        v8 = v18;
      }
      while (v18);
    }

    v19 = *(void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v5;
    v20 = v5;

    sub_100065440(a1, a2, 0, 0, v3, (uint64_t)v4);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100068408;
    v22[3] = &unk_1000EBA70;
    v22[4] = a1;
    sub_100015570((uint64_t)v4, v22);
    objc_msgSend(*(id *)(a1 + 208), "frameDidEnd");

  }
}

void sub_100068408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000664A0(*(_QWORD *)(a1 + 32), a2, a3, a4);
}

double sub_100068410(uint64_t a1, void *a2, void *a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  const os_unfair_lock *v15;
  double v16;
  double v17;

  if (!a1)
    return 0.0;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  objc_msgSend(a2, "point");
  v7 = v6;
  v9 = v8;
  v10 = objc_msgSend(a2, "contextID");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "uniqueId"));
  v12 = sub_10000F5CC(v11, (uint64_t)"BKDisplayConvertContextLocationToCAScreen");
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  objc_msgSend(v13, "convertPoint:fromContextId:", v10, v7, v9);

  sub_100035818(v11);
  if (v11)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "immutableDisplayForUUID:", v11));
    v15 = sub_10006718C((const os_unfair_lock *)a1, v11);
  }
  else
  {
    v14 = 0;
    v15 = *(const os_unfair_lock **)(a1 + 224);
  }
  sub_100068748(v14, (uint64_t)v15, *(void **)(a1 + 280));
  v17 = v16;

  return v17;
}

id sub_100068530(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  const os_unfair_lock *v11;
  CGFloat v12;
  CGFloat v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  uint64_t v20;
  NSNumber *v21;
  void *v22;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 112), "displayUUID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "immutableDisplayForUUID:", v7));
    v9 = v8;
    if (v8)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "uniqueId"));
      v11 = sub_10006718C((const os_unfair_lock *)a1, v10);
      objc_msgSend(*(id *)(a1 + 104), "convertFromGlobalPoint:toRegion:", *(_QWORD *)(a1 + 112), a2, a3);
      sub_100067210(v9, (uint64_t)v11, *(void **)(a1 + 280));
      v24 = v10;
      sub_10000F7A0(v10);
      v14 = sub_1000260F0((uint64_t)BKMouseDestination, 0, v9, 0, *(void **)(a1 + 24), *(void **)(a1 + 216), v12, v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v26;
        do
        {
          for (i = 0; i != v17; i = (char *)i + 1)
          {
            if (*(_QWORD *)v26 != v18)
              objc_enumerationMutation(v15);
            v20 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
            if (v20 && (*(_DWORD *)(v20 + 12) - 1) <= 0xFFFFFFFD)
            {
              v21 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_1000266F4(v20, *(void **)(a1 + 432)));
              v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
              objc_msgSend(v6, "addObject:", v22);

            }
          }
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
        }
        while (v17);
      }

    }
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

id sub_100068748(id result, uint64_t a2, void *a3)
{
  if (a3)
    return objc_msgSend(a3, "transformLayerPropertiesForDisplay:displayInterfaceOrientation:", result, a2, 0, 0, 0, 0, 0, 0, 0, 0);
  return result;
}

const os_unfair_lock *sub_1000687EC(const os_unfair_lock *result, void *a2, int a3)
{
  uint64_t v4;

  if (result)
  {
    v4 = (uint64_t)result;
    if (a3)
      objc_msgSend(*(id *)&result[52]._os_unfair_lock_opaque, "addSyntheticTopLevelEventIfNeeded");
    if ((objc_msgSend(*(id *)(v4 + 208), "buttonMaskDidChange") & 1) != 0)
      return sub_100063E6C((const os_unfair_lock *)v4, a2);
    result = (const os_unfair_lock *)sub_100066DC0(v4);
    if ((result & 1) == 0)
      return sub_100063E6C((const os_unfair_lock *)v4, a2);
  }
  return result;
}

id sub_100068848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v11[3];
  _QWORD v12[3];

  if (!a1)
    return 0;
  v11[0] = CFSTR("ScreenOn");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  v12[0] = v6;
  v11[1] = CFSTR("DigitizerSurfaceCovered");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a3));
  v12[1] = v7;
  v11[2] = CFSTR("DeviceOrientation");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a4));
  v12[2] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 3));

  return v9;
}

id *sub_100068950(id *result, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (result)
  {
    v3 = (uint64_t)result;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(result[5], "deviceServices", 0));
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v10;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(v4);
          sub_100068A60(v3, *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8), a2);
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v6);
    }

    return (id *)objc_msgSend(*(id *)(v3 + 48), "evaluatePeriodicReportingTrigger");
  }
  return result;
}

void sub_100068A60(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(a2, "senderID")));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v6));

    if (v7 && *(_BYTE *)(v7 + 9))
    {
      v8 = *(id *)(v7 + 16);
      v9 = objc_msgSend(v8, "isEqual:", a3);
      if ((v9 & 1) == 0)
      {
        v11 = BKLogMousePointer(v9, v10);
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v13 = 138543618;
          v14 = a3;
          v15 = 2114;
          v16 = a2;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "view state update:%{public}@ for service:%{public}@", (uint8_t *)&v13, 0x16u);
        }

        objc_msgSend(a2, "asyncSetProperty:forKey:", a3, CFSTR("HostStateNotification"));
        objc_storeStrong((id *)(v7 + 16), a3);
      }

    }
  }
}

void sub_100068BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  id v7;
  id v8;
  char v9;
  char v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL4 v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t v38[4];
  id v39;
  __int16 v40;
  void *v41;
  __int128 buf;
  BOOL (*v43)(uint64_t, void *);
  void *v44;
  uint64_t v45;

  if (a1)
  {
    v4 = BKLogMousePointer(a1, a2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "reevaluateDisplayArrangementForReason(%{public}@)", (uint8_t *)&buf, 0xCu);
    }
    v32 = a2;

    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = a1;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceServices"));
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, &buf, 16);
    if (v7)
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      v11 = *(_QWORD *)v35;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v35 != v11)
            objc_enumerationMutation(v6);
          v13 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "displayUUID", v32));

          v17 = BKLogMousePointer(v15, v16);
          v18 = objc_claimAutoreleasedReturnValue(v17);
          v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          if (v14)
          {
            if (v19)
            {
              v20 = objc_msgSend(v13, "senderID");
              v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "displayUUID"));
              *(_DWORD *)v38 = 134218242;
              v39 = v20;
              v40 = 2114;
              v41 = v21;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "have display-specific device (sender:%llX display:%{public}@)", v38, 0x16u);

            }
            v9 = 1;
          }
          else
          {
            if (v19)
            {
              v22 = objc_msgSend(v13, "senderID");
              *(_DWORD *)v38 = 134217984;
              v39 = v22;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "have normal device (sender:%llX)", v38, 0xCu);
            }
            v10 = 1;
          }

        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, &buf, 16);
      }
      while (v8);
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }

    *(_BYTE *)(v33 + 413) = v10 & 1;
    *(_BYTE *)(v33 + 414) = v9 & 1;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[CADisplay mainDisplay](CADisplay, "mainDisplay"));
    v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "uniqueId"));
    v25 = objc_msgSend(v24, "length");
    v26 = (void *)BKSDisplayUUIDMainKey;
    if (v25)
      v26 = v24;
    v27 = v26;

    v28 = *(void **)(v33 + 72);
    *(_QWORD *)(v33 + 72) = v27;

    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v33 + 56), "activeDisplays"));
    *(_QWORD *)&buf = _NSConcreteStackBlock;
    *((_QWORD *)&buf + 1) = 3221225472;
    v43 = sub_100069A30;
    v44 = &unk_1000EBA20;
    v45 = v33;
    v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "bs_filter:", &buf));
    v31 = *(void **)(v33 + 88);
    *(_QWORD *)(v33 + 88) = v30;

    sub_100068F08(v33);
    sub_1000679E4(v33, v32);
    sub_10006932C(v33);
  }
}

void sub_100068F08(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  BKMutableMousePointerRegionArrangement *v5;
  id v6;
  BKMutableMousePointerRegionArrangement *v7;
  uint64_t v8;
  void *v9;
  void *i;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  double v16;
  void *v17;
  uint64_t v18;
  BKMousePointerRegion *v19;
  BKMousePointerRegion *v20;
  BKMutableMousePointerRegionArrangement *v21;
  void *v22;
  uint64_t v23;
  id v24;
  BKMutableMousePointerRegionArrangement *v25;
  id v26;
  id v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  BKMutableMousePointerRegionArrangement *v48;
  id v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t buf[16];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  double v59;
  _BYTE v60[128];

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v2 = *(void **)(a1 + 80);
    if (!v2)
    {
      v3 = objc_alloc_init((Class)NSMutableDictionary);
      v4 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v3;

      v2 = *(void **)(a1 + 80);
    }
    objc_msgSend(v2, "removeAllObjects");
    v5 = objc_alloc_init(BKMutableMousePointerRegionArrangement);
    v6 = *(id *)(a1 + 88);
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v49 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
    v7 = 0;
    if (v49)
    {
      v8 = *(_QWORD *)v51;
      v9 = (void *)BKSDisplayUUIDMainKey;
      do
      {
        for (i = 0; i != v49; i = (char *)i + 1)
        {
          if (*(_QWORD *)v51 != v8)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)i);
          v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uniqueId"));
          if (objc_msgSend(v12, "length"))
            v13 = v12;
          else
            v13 = v9;
          v14 = v13;

          if (objc_msgSend(v14, "isEqual:", *(_QWORD *)(a1 + 72)))
          {
            v15 = *(_QWORD *)(a1 + 224);
            v16 = *(double *)(a1 + 32);
          }
          else
          {
            v16 = 0.0;
            v15 = 1;
          }
          v17 = *(void **)(a1 + 280);
          if (v17)
          {
            objc_msgSend(v17, "transformLayerPropertiesForDisplay:displayInterfaceOrientation:", v11, v15);
            v18 = *(_QWORD *)(a1 + 280);
          }
          else
          {
            v18 = 0;
          }
          v59 = 0.0;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          *(_OWORD *)buf = 0u;
          +[BKMousePointerDisplayRenderer rootLayerPropertiesForDisplay:displayController:](BKMousePointerDisplayRenderer, "rootLayerPropertiesForDisplay:displayController:", v11, v18);
          v19 = [BKMousePointerRegion alloc];
          v20 = -[BKMousePointerRegion initWithPointSize:cornerRadius:scale:displayUUID:](v19, "initWithPointSize:cornerRadius:scale:displayUUID:", v14, (unsigned __int128)0, v16, v59);
          if (objc_msgSend(v11, "isExternal") && sub_10006955C(a1, v11))
          {
            v21 = objc_alloc_init(BKMutableMousePointerRegionArrangement);
            -[BKMutableMousePointerRegionArrangement addPrimaryRegion:](v21, "addPrimaryRegion:", v20);
            v48 = v7;
            v22 = v9;
            v23 = v8;
            v24 = v6;
            v25 = v5;
            v26 = -[BKMutableMousePointerRegionArrangement copy](v21, "copy");
            objc_msgSend(*(id *)(a1 + 80), "setObject:forKeyedSubscript:", v26, v14);

            v5 = v25;
            v6 = v24;
            v8 = v23;
            v9 = v22;
            v7 = v48;
          }
          else
          {
            if (v7)
            {
              v27 = objc_msgSend(*(id *)(a1 + 424), "pointerRegionArrangementEdge");
              -[BKMutableMousePointerRegionArrangement pointSize](v7, "pointSize");
              v29 = v28;
              v31 = v30;
              -[BKMousePointerRegion pointSize](v20, "pointSize");
              v33 = v31 - v32;
              v35 = v29 - v34;
              if ((v27 & 0xFFFFFFFD) == 0)
                v35 = v33;
              -[BKMutableMousePointerRegionArrangement addRegion:relativeToRegion:alongEdge:atPosition:](v5, "addRegion:relativeToRegion:alongEdge:atPosition:", v20, v7, v27, v35 * 0.5);
            }
            else
            {
              -[BKMutableMousePointerRegionArrangement addPrimaryRegion:](v5, "addPrimaryRegion:", v20);
            }
            v21 = v7;
            v7 = v20;
          }

        }
        v49 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
      }
      while (v49);
    }
    if (!*(_QWORD *)(a1 + 72))
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[CADisplay mainDisplay](CADisplay, "mainDisplay"));
      v37 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "uniqueId"));
      v38 = objc_msgSend(v37, "length");
      v39 = (void *)BKSDisplayUUIDMainKey;
      if (v38)
        v39 = v37;
      v40 = v39;

      v41 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v40;

    }
    v42 = -[BKMutableMousePointerRegionArrangement copy](v5, "copy");
    objc_msgSend(*(id *)(a1 + 80), "setObject:forKeyedSubscript:", v42, *(_QWORD *)(a1 + 72));

    v45 = BKLogMousePointer(v43, v44);
    v46 = objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      v47 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v47;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "new region arrangements:%{public}@", buf, 0xCu);
    }

    if (objc_msgSend(*(id *)(a1 + 80), "count") == (id)1)
      sub_10006970C(a1, *(void **)(a1 + 72));

  }
}

void sub_10006932C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  _BOOL4 v24;
  __int16 v25;
  void *v26;
  _BYTE v27[128];

  if (a1)
  {
    v2 = objc_msgSend(*(id *)(a1 + 160), "count");
    if (v2)
    {
      v4 = 0;
    }
    else
    {
      v2 = objc_msgSend(*(id *)(a1 + 88), "count");
      v4 = v2 != 0;
    }
    if (*(_BYTE *)(a1 + 410) != v4)
    {
      *(_BYTE *)(a1 + 410) = v4;
      v5 = BKLogMousePointer(v2, v3);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v24 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ready to receive events: %{BOOL}u", buf, 8u);
      }

      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceServices"));
      v8 = objc_msgSend(v7, "copy");

      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
      if (v9)
      {
        v11 = v9;
        v12 = *(_QWORD *)v20;
        do
        {
          v13 = 0;
          do
          {
            if (*(_QWORD *)v20 != v12)
              objc_enumerationMutation(v8);
            v14 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v13);
            v15 = BKLogMousePointer(v9, v10);
            v16 = objc_claimAutoreleasedReturnValue(v15);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              v17 = *(unsigned __int8 *)(a1 + 410);
              *(_DWORD *)buf = 67109378;
              v24 = v17;
              v25 = 2114;
              v26 = v14;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "set _readyToReceiveEvents:%{BOOL}u on %{public}@", buf, 0x12u);
            }

            v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v4));
            objc_msgSend(v14, "asyncSetProperty:forKey:", v18, CFSTR("BKReadyToReceivePointerEvents"));

            v13 = (char *)v13 + 1;
          }
          while (v11 != v13);
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
          v11 = v9;
        }
        while (v9);
      }

    }
  }
}

uint64_t sub_10006955C(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  id v17;
  unsigned __int8 v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceServices"));
  v5 = objc_msgSend(v4, "copy");

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uniqueId"));
  v7 = objc_msgSend(v6, "length");
  v8 = (void *)BKSDisplayUUIDMainKey;
  if (v7)
    v9 = v6;
  else
    v9 = (void *)BKSDisplayUUIDMainKey;
  v10 = v9;

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v11 = v5;
  v12 = (uint64_t)objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v21;
    while (2)
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v21 != v13)
          objc_enumerationMutation(v11);
        v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * i), "displayUUID", (_QWORD)v20));
        if (objc_msgSend(v15, "length"))
          v16 = v15;
        else
          v16 = v8;
        v17 = v16;

        v18 = objc_msgSend(v10, "isEqual:", v17);
        if ((v18 & 1) != 0)
        {
          v12 = 1;
          goto LABEL_17;
        }
      }
      v12 = (uint64_t)objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v12)
        continue;
      break;
    }
  }
LABEL_17:

  return v12;
}

void sub_10006970C(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  double x;
  double y;
  void *v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, void *, _BYTE *);
  void *v34;
  id v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;
  uint8_t buf[4];
  uint64_t v44;

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v4 = a2;
    if (!v4)
      v4 = *(id *)(a1 + 72);
    v37 = 0;
    v38 = &v37;
    v39 = 0x3032000000;
    v40 = sub_1000699B4;
    v41 = sub_1000699C4;
    v42 = 0;
    v5 = objc_msgSend(*(id *)(a1 + 80), "copy");
    v31 = _NSConcreteStackBlock;
    v32 = 3221225472;
    v33 = sub_1000699CC;
    v34 = &unk_1000EBA98;
    v6 = v4;
    v35 = v6;
    v36 = &v37;
    objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", &v31);

    x = CGPointZero.x;
    y = CGPointZero.y;
    v9 = *(void **)(a1 + 104);
    if (v9 && *(_QWORD *)(a1 + 112))
    {
      objc_msgSend(v9, "convertToGlobalPoint:fromRegion:", *(double *)(a1 + 136), *(double *)(a1 + 144), v31, v32, v33, v34);
      x = v10;
      y = v11;
    }
    v12 = (void *)v38[5];
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 112), "displayUUID", v31, v32, v33, v34));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "regionForDisplayUUID:", v13));

    if (v14)
    {
      objc_msgSend((id)v38[5], "convertToGlobalPoint:fromRegion:", v14, *(double *)(a1 + 136), *(double *)(a1 + 144));
      x = v17;
      y = v18;
    }
    v19 = (void *)v38[5];
    if (v19)
    {
      v20 = objc_msgSend(v19, "copy");
      v21 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v20;

      v25 = BKLogMousePointer(v22, v23, v24);
      v26 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v27 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)buf = 138543362;
        v44 = v27;
        v28 = "selected region arrangement:%{public}@";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v28, buf, 0xCu);
      }
    }
    else
    {
      v29 = BKLogMousePointer(0, v15, v16);
      v26 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v30 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)buf = 138543362;
        v44 = v30;
        v28 = "no region arrangement found; preserving previous:%{public}@";
        goto LABEL_14;
      }
    }

    sub_10006764C(a1, 1, (uint64_t)CFSTR("updateRegionArrangement"), x, y);
    _Block_object_dispose(&v37, 8);

  }
}

void sub_100069980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000699B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000699C4(uint64_t a1)
{

}

void sub_1000699CC(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "regionForDisplayUUID:", *(_QWORD *)(a1 + 32)));

  if (v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
  }
}

BOOL sub_100069A30(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  int v6;
  int v7;
  _BOOL8 v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  __CFString *v14;
  unsigned int v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *i;
  id v21;
  void *v22;
  id v23;
  unsigned __int8 v24;
  __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _BOOL4 v29;
  id v30;
  void *v31;
  id v32;
  const char *v33;
  void *v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t buf[4];
  id v41;
  __int16 v42;
  __CFString *v43;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 96);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(v3 + 8));
  v5 = *(id *)(v3 + 72);
  v6 = sub_10006955C(v3, a2);
  v7 = *(unsigned __int8 *)(v3 + 413);
  v8 = *(_BYTE *)(v3 + 413) != 0;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uniqueId"));
  v10 = objc_msgSend(v9, "length");
  v11 = (void *)BKSDisplayUUIDMainKey;
  if (v10)
    v12 = v9;
  else
    v12 = (void *)BKSDisplayUUIDMainKey;
  v13 = v12;

  if (BSEqualObjects(v13, v5))
  {
    if (v7)
      v14 = CFSTR("main display");
    else
      v14 = CFSTR("no standard coalition pointer device");
  }
  else if ((objc_msgSend(a2, "isExternal") & v6 & 1) != 0)
  {
    v8 = 1;
    v14 = CFSTR("external display with associated pointer device");
  }
  else
  {
    v15 = objc_msgSend(a2, "isExternal");
    v8 = 0;
    if (v15)
      v14 = CFSTR("no standard coalition pointer device");
    else
      v14 = CFSTR("non-external but non-main");
    if (v15 && v7)
    {
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v16 = v4;
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v36, buf, 16);
      if (v17)
      {
        v18 = v17;
        v19 = *(_QWORD *)v37;
        while (2)
        {
          for (i = 0; i != v18; i = (char *)i + 1)
          {
            if (*(_QWORD *)v37 != v19)
              objc_enumerationMutation(v16);
            v21 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i), "displayUUID", (_QWORD)v36));
            if (objc_msgSend(v21, "length"))
              v22 = v21;
            else
              v22 = v11;
            v23 = v22;

            v24 = objc_msgSend(v13, "isEqual:", v23);
            if ((v24 & 1) != 0)
            {

              v8 = 1;
              v14 = CFSTR("in current arragement");
              goto LABEL_28;
            }
          }
          v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v36, buf, 16);
          if (v18)
            continue;
          break;
        }
      }

      v8 = 0;
      v14 = CFSTR("not in current arrangement");
    }
  }
LABEL_28:

  v25 = v14;
  v27 = BKLogMousePointer(v25, v26);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v29)
    {
      v30 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uniqueId"));
      if (objc_msgSend(v30, "length"))
        v31 = v30;
      else
        v31 = v11;
      v32 = v31;

      *(_DWORD *)buf = 138543618;
      v41 = v32;
      v42 = 2114;
      v43 = v25;
      v33 = "display %{public}@ interesting because %{public}@";
LABEL_39:
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v33, buf, 0x16u);

    }
  }
  else if (v29)
  {
    v30 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uniqueId"));
    if (objc_msgSend(v30, "length"))
      v34 = v30;
    else
      v34 = v11;
    v32 = v34;

    *(_DWORD *)buf = 138543618;
    v41 = v32;
    v42 = 2114;
    v43 = v25;
    v33 = "display %{public}@ uninteresting because %{public}@";
    goto LABEL_39;
  }

  return v8;
}

id sub_100069D80(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "bs_compactMap:", &stru_1000EB9F8));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "componentsJoinedByString:", CFSTR(", ")));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a3, v5));

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

id sub_100069E14(id a1, BKIOHIDService *a2)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llX"), -[BKIOHIDService senderID](a2, "senderID"));
}

id sub_100069E58(const os_unfair_lock *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  id v13;
  uint8_t buf[4];
  NSObject *v15;

  if (a1)
  {
    os_unfair_lock_assert_owner(a1 + 3);
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "globalMouseDevicePreferences"));
    if (v3)
    {
      v13 = 0;
      v4 = +[BSProtobufSerialization decodeObjectOfClass:fromData:error:](BSProtobufSerialization, "decodeObjectOfClass:fromData:error:", objc_opt_class(BKSMousePointerDevicePreferences, v2), v3, &v13);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      v6 = v13;
      v8 = v6;
      if (v5)
      {

LABEL_11:
        return v5;
      }
      v10 = BKLogMousePointer(v6, v7);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v15 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "cannot decode global prefs: %{public}@", buf, 0xCu);
      }

    }
    else
    {
      v9 = BKLogMousePointer(0, v2);
      v8 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "returning default prefs", buf, 2u);
      }
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[BKSMousePointerDevicePreferences defaultPreferencesForHardwareType:](BKSMousePointerDevicePreferences, "defaultPreferencesForHardwareType:", 9));
    goto LABEL_11;
  }
  return 0;
}

void sub_100069FF4(const os_unfair_lock *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  float v10;
  unint64_t v11;
  float v12;
  unint64_t v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  const __CFString *v29;
  const __CFString *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _QWORD v35[3];
  _QWORD v36[3];
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;

  if (a1)
  {
    os_unfair_lock_assert_not_owner(a1 + 2);
    os_unfair_lock_assert_owner(a1 + 3);
    v8 = BKLogMousePointer(v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      v38 = a2;
      v39 = 2114;
      v40 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "apply prefs:%{public}@ to service:%{public}@", buf, 0x16u);
    }

    objc_msgSend(a2, "pointerAccelerationFactor");
    v11 = vcvtd_n_u64_f64(v10, 0x10uLL);
    objc_msgSend(a2, "scrollAccelerationFactor");
    v13 = vcvtd_n_u64_f64(v12, 0x10uLL);
    v14 = objc_alloc_init((Class)NSMutableDictionary);
    if (objc_msgSend(a3, "eventSource") != 12)
    {
      v21 = objc_msgSend(a2, "buttonConfigurationForHardwareButtonMice");
      if (objc_msgSend(a3, "claimsToConformToUsagePage:usage:", 13, 12))
        v21 = objc_msgSend(a2, "buttonConfigurationForVirtualButtonMice");
      if (v21)
      {
        v35[0] = &off_1000F7510;
        v35[1] = &off_1000F7528;
        v36[0] = CFSTR("OneButton");
        v36[1] = CFSTR("TwoButton");
        v35[2] = &off_1000F7540;
        v36[2] = CFSTR("TwoButtonSwapped");
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v36, v35, 3));
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v21));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v23));

        if (v24)
        {
          v25 = objc_msgSend(v14, "setObject:forKey:", v24, CFSTR("MouseButtonMode"));
          v27 = BKLogMousePointer(v25, v26);
          v28 = objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v38 = v24;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "set MouseButtonMode:%@", buf, 0xCu);
          }

        }
      }
      v29 = CFSTR("HIDMouseAcceleration");
      v30 = CFSTR("HIDMouseScrollAcceleration");
      goto LABEL_22;
    }
    v15 = objc_msgSend(a2, "enableTapToClick");
    v16 = objc_msgSend(a2, "enableTwoFingerSecondaryClick");
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v15));
    objc_msgSend(v14, "setObject:forKey:", v17, CFSTR("TapToClickEnabled"));

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v16));
    objc_msgSend(v14, "setObject:forKey:", v18, CFSTR("TwoFingersSecondaryClickEnabled"));

    v19 = objc_msgSend(a2, "clickHapticStrength");
    if (v19 == (id)1)
    {
      v20 = &__kCFBooleanTrue;
    }
    else
    {
      if (v19 != (id)2)
      {
LABEL_19:
        v31 = objc_msgSend(a2, "doubleTapDragMode");
        if ((unint64_t)v31 <= 2)
        {
          v32 = (uint64_t)*(&off_1000EBB20 + (_QWORD)v31);
          objc_msgSend(v14, "setObject:forKey:", *(&off_1000EBB08 + (_QWORD)v31), CFSTR("DoubleTapToDragEnabled"));
          objc_msgSend(v14, "setObject:forKey:", v32, CFSTR("DragLockEnabled"));
        }
        v29 = CFSTR("HIDTrackpadAcceleration");
        v30 = CFSTR("HIDTrackpadScrollAcceleration");
LABEL_22:
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v11));
        objc_msgSend(v14, "setObject:forKey:", v33, v29);

        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v13));
        objc_msgSend(v14, "setObject:forKey:", v34, v30);

        objc_msgSend(a3, "asyncSetProperties:", v14);
        return;
      }
      v20 = &__kCFBooleanFalse;
    }
    objc_msgSend(v14, "setObject:forKey:", v20, CFSTR("ActuationStrength"));
    goto LABEL_19;
  }
}

void sub_10006A3C0(uint64_t a1)
{
  os_unfair_lock_s *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id location;

  if (a1)
  {
    v2 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_assert_not_owner((const os_unfair_lock *)(a1 + 8));
    os_unfair_lock_lock(v2);
    objc_msgSend(*(id *)(a1 + 200), "invalidate");
    v3 = *(void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = 0;

    if (*(_BYTE *)(a1 + 411))
    {
      *(_BYTE *)(a1 + 411) = 0;
      sub_1000679E4(a1, (uint64_t)CFSTR("Events unpaused"));
    }
    objc_initWeak(&location, (id)a1);
    v4 = objc_msgSend(objc_alloc((Class)BSAbsoluteMachTimer), "initWithIdentifier:", CFSTR("BKMousePointerController.displayLinkPauseTimer"));
    v5 = *(void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v4;

    v6 = *(void **)(a1 + 200);
    v7 = &_dispatch_main_q;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10006A86C;
    v8[3] = &unk_1000EBED0;
    objc_copyWeak(&v9, &location);
    objc_msgSend(v6, "scheduleWithFireInterval:leewayInterval:queue:handler:", &_dispatch_main_q, v8, 3.0, 0.5);

    os_unfair_lock_unlock(v2);
    objc_destroyWeak(&v9);
    objc_destroyWeak(&location);
  }
}

void sub_10006A4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006A514(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  double v21;
  double v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  _BYTE v46[128];
  _BYTE v47[128];
  _BYTE v48[128];

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    if (objc_msgSend(*(id *)(a1 + 208), "scrollPhaseDidChange"))
    {
      v2 = objc_msgSend(*(id *)(a1 + 208), "scrollPhase");
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v3 = *(id *)(a1 + 344);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v41, v48, 16);
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD *)v42;
        do
        {
          v7 = 0;
          do
          {
            if (*(_QWORD *)v42 != v6)
              objc_enumerationMutation(v3);
            objc_msgSend(*(id *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)v7), "observeMouseScrollPhaseDidChange:", v2);
            v7 = (char *)v7 + 1;
          }
          while (v5 != v7);
          v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v41, v48, 16);
        }
        while (v5);
      }

    }
    if (objc_msgSend(*(id *)(a1 + 208), "buttonMaskDidChange"))
    {
      v8 = objc_msgSend(*(id *)(a1 + 208), "buttonMask");
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v9 = *(id *)(a1 + 344);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v37, v47, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v38;
        do
        {
          v13 = 0;
          do
          {
            if (*(_QWORD *)v38 != v12)
              objc_enumerationMutation(v9);
            objc_msgSend(*(id *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)v13), "observeMouseButtonMaskDidChange:", v8);
            v13 = (char *)v13 + 1;
          }
          while (v11 != v13);
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v37, v47, 16);
        }
        while (v11);
      }

    }
    if (objc_msgSend(*(id *)(a1 + 208), "touchingPathIndexesDidChange"))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 208), "touchingPathIndexes"));
      v15 = objc_msgSend(v14, "count");

      kdebug_trace(730468756, v15, 0, 0, 0);
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v16 = *(id *)(a1 + 344);
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v33, v46, 16);
      if (v17)
      {
        v18 = v17;
        v19 = *(_QWORD *)v34;
        do
        {
          v20 = 0;
          do
          {
            if (*(_QWORD *)v34 != v19)
              objc_enumerationMutation(v16);
            objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v20), "observeMouseTouchCountDidChange:", v15);
            v20 = (char *)v20 + 1;
          }
          while (v18 != v20);
          v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v33, v46, 16);
        }
        while (v18);
      }

    }
    if (objc_msgSend(*(id *)(a1 + 208), "forceDidChange"))
    {
      objc_msgSend(*(id *)(a1 + 208), "force");
      v22 = v21;
      v23 = objc_msgSend(*(id *)(a1 + 208), "stage");
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v24 = *(id *)(a1 + 344);
      v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v29, v45, 16);
      if (v25)
      {
        v26 = v25;
        v27 = *(_QWORD *)v30;
        do
        {
          v28 = 0;
          do
          {
            if (*(_QWORD *)v30 != v27)
              objc_enumerationMutation(v24);
            objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v28), "observeMouseForceDidChange:stage:", v23, v22, (_QWORD)v29);
            v28 = (char *)v28 + 1;
          }
          while (v26 != v28);
          v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v29, v45, 16);
        }
        while (v26);
      }

    }
  }
}

void sub_10006A86C(uint64_t a1)
{
  os_unfair_lock *WeakRetained;
  os_unfair_lock_s *v2;
  os_unfair_lock *v3;

  WeakRetained = (os_unfair_lock *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained + 2;
    v3 = WeakRetained;
    os_unfair_lock_assert_not_owner(WeakRetained + 2);
    os_unfair_lock_lock(v2);
    HIBYTE(v3[102]._os_unfair_lock_opaque) = 1;
    sub_1000679E4((uint64_t)v3, (uint64_t)CFSTR("Events paused"));
    os_unfair_lock_unlock(v2);
    WeakRetained = v3;
  }

}

void sub_10006A8D8(uint64_t a1)
{
  BKMouseEventAccumulator *v2;
  uint64_t v3;
  BKMouseEventAccumulator *v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id location;

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    objc_initWeak(&location, (id)a1);
    objc_msgSend(*(id *)(a1 + 208), "invalidate");
    v2 = [BKMouseEventAccumulator alloc];
    v3 = *(_QWORD *)(a1 + 168);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10006ABE8;
    v6[3] = &unk_1000EBA48;
    objc_copyWeak(&v7, &location);
    v6[4] = a1;
    v4 = -[BKMouseEventAccumulator initWithInterpolatedEventTypeMask:postEventsBlock:](v2, "initWithInterpolatedEventTypeMask:postEventsBlock:", v3, v6);
    v5 = *(void **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v4;

    sub_10006ACC8(a1);
    objc_destroyWeak(&v7);
    objc_destroyWeak(&location);
  }
}

void sub_10006A9B0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006A9D8(uint64_t a1)
{
  uint64_t v2;
  BKHIDEventCollector *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  __IOHIDEvent *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  id v15;
  void *v16;
  _QWORD v17[5];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  int v23;
  _BYTE v24[128];

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v2 = mach_absolute_time();
    v3 = objc_alloc_init(BKHIDEventCollector);
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v4 = *(id *)(a1 + 216);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v19;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v19 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_DWORD **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v8);
          v10 = sub_1000665CC(a1, v9, v2, (uint64_t)v3);
          v12 = BKLogMousePointer(v10, v11);
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            if (v9)
              v14 = v9[2];
            else
              v14 = 0;
            *(_DWORD *)buf = 67109120;
            v23 = v14;
            _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "exit context:%X", buf, 8u);
          }

          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v15 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
        v6 = v15;
      }
      while (v15);
    }

    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10006ABE0;
    v17[3] = &unk_1000EBA70;
    v17[4] = a1;
    sub_100015570((uint64_t)v3, v17);
    v16 = *(void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;

  }
}

id sub_10006ABC8(id a1, NSNumber *a2)
{
  return (id)BSProcessDescriptionForPID(-[NSNumber intValue](a2, "intValue"));
}

void sub_10006ABE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000664A0(*(_QWORD *)(a1 + 32), a2, a3, a4);
}

void sub_10006ABE8(uint64_t a1, uint64_t a2, double a3)
{
  os_unfair_lock *WeakRetained;
  void *v7;
  dispatch_time_t v8;
  uint64_t v9;
  _QWORD block[7];

  WeakRetained = (os_unfair_lock *)objc_loadWeakRetained((id *)(a1 + 40));
  if (a3 == 0.0)
  {
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    sub_10006A514((uint64_t)WeakRetained);
    v7 = (void *)mach_absolute_time();
    sub_1000687EC(WeakRetained, v7, 0);
  }
  else
  {
    v8 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006AD40;
    block[3] = &unk_1000EC060;
    v9 = *(_QWORD *)(a1 + 32);
    block[5] = WeakRetained;
    block[6] = a2;
    block[4] = v9;
    dispatch_after(v8, (dispatch_queue_t)&_dispatch_main_q, block);
  }

}

void sub_10006ACC8(uint64_t a1)
{
  id v2;

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "globalDevicePreferences"));
    objc_msgSend(*(id *)(a1 + 208), "setShouldScrollNaturally:", objc_msgSend(v2, "enableNaturalScrolling"));
    objc_msgSend(*(id *)(a1 + 208), "setShouldSwapPrimaryAndSecondaryButtons:", objc_msgSend(v2, "buttonConfigurationForHardwareButtonMice") == (id)3);

  }
}

void sub_10006AD40(_QWORD *a1)
{
  const os_unfair_lock *v2;
  void *v3;

  os_unfair_lock_assert_not_owner((const os_unfair_lock *)(a1[4] + 8));
  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 8));
  (*(void (**)(void))(a1[6] + 16))();
  sub_10006A514(a1[5]);
  v2 = (const os_unfair_lock *)a1[5];
  v3 = (void *)mach_absolute_time();
  sub_1000687EC(v2, v3, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 8));
}

void sub_10006ADA8(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    objc_msgSend(*(id *)(a1 + 344), "removeObject:", a2);
    if (!objc_msgSend(*(id *)(a1 + 344), "count"))
    {
      v4 = *(void **)(a1 + 344);
      *(_QWORD *)(a1 + 344) = 0;

    }
  }
}

const os_unfair_lock *sub_10006AE00(const os_unfair_lock *result, uint64_t a2)
{
  const os_unfair_lock *v3;
  void *v4;
  id v5;
  void *v6;

  if (result)
  {
    v3 = result;
    os_unfair_lock_assert_owner(result + 2);
    v4 = *(void **)&v3[86]._os_unfair_lock_opaque;
    if (!v4)
    {
      v5 = objc_alloc_init((Class)NSMutableArray);
      v6 = *(void **)&v3[86]._os_unfair_lock_opaque;
      *(_QWORD *)&v3[86]._os_unfair_lock_opaque = v5;

      v4 = *(void **)&v3[86]._os_unfair_lock_opaque;
    }
    return (const os_unfair_lock *)objc_msgSend(v4, "addObject:", a2);
  }
  return result;
}

void sub_10006AE58(uint64_t a1, void *a2)
{
  sub_10006AE70(*(_QWORD *)(a1 + 32), 0, *(unsigned int *)(a1 + 40), a2);
}

void sub_10006AE70(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  int v23;
  id v24;
  id v25;
  __int128 v26;
  uint64_t v27;
  void *i;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  NSObject *p_super;
  NSObject *v35;
  const char *v36;
  uint32_t v37;
  id v38;
  uint64_t v39;
  int v40;
  BKMouseDestination *v41;
  _BKMouseEventGlobalRoute *v42;
  BKMouseDestination *destination;
  BKMouseDestination *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  BKHIDEventCollector *v48;
  id v49;
  id v50;
  uint64_t v51;
  void *j;
  id v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  BKHIDEventCollector *v60;
  __int128 v61;
  void *v62;
  id obja;
  id v66;
  _QWORD v67[5];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];
  _QWORD v81[4];
  id v82;
  id v83;
  double v84;
  double v85;
  _BYTE v86[128];
  _BYTE v87[128];
  _BYTE v88[128];
  _BYTE buf[32];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v8 = BKLogMousePointer(v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = BSProcessDescriptionForPID(a3);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = a4;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v11;
      *(_WORD *)&buf[22] = 2114;
      *(_QWORD *)&buf[24] = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "global route update: display:%{public}@ -> process %{public}@ %{public}@", buf, 0x20u);

    }
    v12 = *(void **)(a1 + 376);
    if (!v12)
    {
      v13 = objc_alloc_init((Class)NSMutableDictionary);
      v14 = *(void **)(a1 + 376);
      *(_QWORD *)(a1 + 376) = v13;

      v12 = *(void **)(a1 + 376);
    }
    v66 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", a4));
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v15 = objc_msgSend(v66, "copy");
    v16 = 0;
    v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v77;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v77 != v18)
            objc_enumerationMutation(v15);
          v20 = *(_QWORD *)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)v19);
          if (v20)
          {
            v21 = *(id *)(v20 + 24);
            v22 = v21;
            if (v21)
            {
              v23 = *((_DWORD *)v21 + 8);
              goto LABEL_14;
            }
          }
          else
          {
            v22 = 0;
          }
          v23 = 0;
LABEL_14:
          if (v23 == (_DWORD)a3)
          {
            if (!v16)
              v16 = objc_alloc_init((Class)NSMutableSet);
            objc_msgSend(v16, "addObject:", v20);
            objc_msgSend(v66, "removeObject:", v20);
          }

          v19 = (char *)v19 + 1;
        }
        while (v17 != v19);
        v24 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
        v17 = v24;
      }
      while (v24);
    }

    if (!objc_msgSend(v66, "count"))
      objc_msgSend(*(id *)(a1 + 376), "removeObjectForKey:", a4);
    if (objc_msgSend(a2, "count"))
    {
      if (!v66)
      {
        v66 = objc_alloc_init((Class)NSMutableSet);
        objc_msgSend(*(id *)(a1 + 376), "setObject:forKeyedSubscript:", v66, a4);
      }
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      obja = a2;
      v25 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v72, v87, 16);
      if (!v25)
      {
        v62 = 0;
        goto LABEL_55;
      }
      v62 = 0;
      v27 = *(_QWORD *)v73;
      *(_QWORD *)&v26 = 67109376;
      v61 = v26;
      while (1)
      {
        for (i = 0; i != v25; i = (char *)i + 1)
        {
          if (*(_QWORD *)v73 != v27)
            objc_enumerationMutation(obja);
          v29 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * (_QWORD)i);
          v30 = objc_msgSend(v29, "contextID", v61);
          v32 = v30;
          if (((_DWORD)v30 + 1) <= 1)
          {
            v33 = BKLogMousePointer(v30, v31);
            p_super = objc_claimAutoreleasedReturnValue(v33);
            if (!os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
              goto LABEL_50;
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = (_DWORD)v32;
            v35 = p_super;
            v36 = "attempt to establish global route for contextID %X ignored";
            v37 = 8;
LABEL_45:
            _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, v36, buf, v37);
            goto LABEL_50;
          }
          v38 = objc_msgSend(*(id *)(a1 + 280), "taskPortForContextID:displayUUID:", v30, a4);
          v40 = (int)v38;
          if (((_DWORD)v38 - 1) >= 0xFFFFFFFE)
          {
            v45 = BKLogMousePointer(v38, v39);
            p_super = objc_claimAutoreleasedReturnValue(v45);
            if (!os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
              goto LABEL_50;
            *(_DWORD *)buf = v61;
            *(_DWORD *)&buf[4] = (_DWORD)v32;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v40;
            v35 = p_super;
            v36 = "attempt to establish global route for contextID %X ignored due to invalid corresponding port %X";
            v37 = 14;
            goto LABEL_45;
          }
          v41 = -[BKCAContextDestination initWithContextID:clientPort:]([BKMouseDestination alloc], "initWithContextID:clientPort:", v32, v38);
          p_super = &v41->super.super;
          if (v41)
          {
            v41->_cachedPID = a3;
            v41->super._contextID = v32;
          }
          sub_1000260C0((uint64_t)v41, a4);
          sub_1000266C4((uint64_t)p_super, *(void **)(a1 + 24));
          v42 = objc_alloc_init(_BKMouseEventGlobalRoute);
          destination = (BKMouseDestination *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "options"));
          if (v42)
          {
            objc_storeStrong((id *)&v42->_options, destination);

            v44 = p_super;
            destination = v42->_destination;
            v42->_destination = v44;
          }

          objc_msgSend(v66, "addObject:", v42);
          if (objc_msgSend(v16, "containsObject:", v42))
          {
            objc_msgSend(v16, "removeObject:", v42);
          }
          else
          {
            v46 = v62;
            if (!v62)
              v46 = objc_alloc_init((Class)NSMutableSet);
            v62 = v46;
            objc_msgSend(v46, "addObject:", v42);
          }

LABEL_50:
        }
        v25 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v72, v87, 16);
        if (!v25)
        {
LABEL_55:

          goto LABEL_56;
        }
      }
    }
    v62 = 0;
LABEL_56:
    if (objc_msgSend(v16, "count") || objc_msgSend(v62, "count"))
    {
      v47 = mach_absolute_time();
      v48 = objc_alloc_init(BKHIDEventCollector);
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v49 = v16;
      v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v68, v86, 16);
      if (v50)
      {
        v51 = *(_QWORD *)v69;
        do
        {
          for (j = 0; j != v50; j = (char *)j + 1)
          {
            if (*(_QWORD *)v69 != v51)
              objc_enumerationMutation(v49);
            sub_1000672BC(a1, *(_QWORD *)(*((_QWORD *)&v68 + 1) + 8 * (_QWORD)j), v47, 1, (uint64_t)v48);
          }
          v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v68, v86, 16);
        }
        while (v50);
      }

      if (objc_msgSend(*(id *)(a1 + 208), "buttonMask") && objc_msgSend(v62, "count"))
      {
        v91 = 0u;
        v92 = 0u;
        *(_OWORD *)&buf[16] = 0u;
        v90 = 0u;
        *(_OWORD *)buf = 0u;
        v93 = 0;
        *(_QWORD *)&buf[16] = v47;
        *(_QWORD *)&buf[24] = objc_msgSend(*(id *)(a1 + 208), "eventSequenceStartTimestamp");
        v90 = 0u;
        v91 = 0u;
        *(_QWORD *)&v92 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 208), "mostRecentSender"));
        *((_QWORD *)&v92 + 1) = objc_claimAutoreleasedReturnValue(+[BKTouchDeliveryPolicyServer sharedServer](BKTouchDeliveryPolicyServer, "sharedServer"));
        LOWORD(v93) = 0;
        v84 = 0.0;
        v85 = 0.0;
        v83 = 0;
        sub_1000650C8(a1, &v84, &v83, (const os_unfair_lock **)&buf[8]);
        v53 = v83;
        if (v53)
        {
          if (objc_msgSend(*(id *)(a1 + 208), "buttonMask"))
            *(_QWORD *)buf = 2;
          v54 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "uniqueId"));
          v55 = objc_msgSend(v54, "length");
          v56 = (void *)BKSDisplayUUIDMainKey;
          if (v55)
            v56 = v54;
          v57 = v56;

          v81[0] = _NSConcreteStackBlock;
          v81[1] = 3221225472;
          v81[2] = sub_10006B680;
          v81[3] = &unk_1000EBAE8;
          v58 = v57;
          v82 = v58;
          v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "bs_filter:", v81));
          if (objc_msgSend(v59, "count"))
          {
            v60 = objc_alloc_init(BKHIDEventCollector);
            sub_1000651EC(a1, v59, (uint64_t)buf, (uint64_t)v60, v84, v85);
            v80[0] = _NSConcreteStackBlock;
            v80[1] = 3221225472;
            v80[2] = sub_10006B6F0;
            v80[3] = &unk_1000EBA70;
            v80[4] = a1;
            sub_100015570((uint64_t)v60, v80);

          }
        }

      }
      v67[0] = _NSConcreteStackBlock;
      v67[1] = 3221225472;
      v67[2] = sub_10006B678;
      v67[3] = &unk_1000EBA70;
      v67[4] = a1;
      sub_100015570((uint64_t)v48, v67);

    }
  }
}

void sub_10006B648(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_10006B678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000664A0(*(_QWORD *)(a1 + 32), a2, a3, a4);
}

uint64_t sub_10006B680(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  if (!a2)
  {
    v4 = 0;
    goto LABEL_6;
  }
  v3 = *(id *)(a2 + 24);
  v4 = v3;
  if (!v3)
  {
LABEL_6:
    v5 = 0;
    goto LABEL_4;
  }
  v5 = (void *)*((_QWORD *)v3 + 5);
LABEL_4:
  v6 = v5;
  v7 = BSEqualObjects(v6, *(_QWORD *)(a1 + 32));

  return v7;
}

void sub_10006B6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000664A0(*(_QWORD *)(a1 + 32), a2, a3, a4);
}

void sub_10006B6F8(uint64_t a1, uint64_t a2)
{
  os_unfair_lock *WeakRetained;
  os_unfair_lock_s *v4;
  id v5;
  id *v6;

  WeakRetained = (os_unfair_lock *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained + 2;
    v6 = (id *)WeakRetained;
    os_unfair_lock_assert_not_owner(WeakRetained + 2);
    os_unfair_lock_lock(v4);
    objc_msgSend(v6[46], "removeObject:", a2);
    if (!objc_msgSend(v6[46], "count"))
    {
      v5 = v6[46];
      v6[46] = 0;

    }
    os_unfair_lock_unlock(v4);
    WeakRetained = (os_unfair_lock *)v6;
  }

}

BKMousePointerScrollAnimationDriver *sub_10006B77C(double *a1, double a2, double a3)
{
  return -[BKMousePointerScrollAnimationDriver initWithRelativeTranslation:initialVelocity:decelerationRate:]([BKMousePointerScrollAnimationDriver alloc], "initWithRelativeTranslation:initialVelocity:decelerationRate:", a2, a3, a1[4], a1[5], a1[6]);
}

void sub_10006B7C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(_QWORD, double, double), double a6, double a7)
{
  os_unfair_lock_s *v14;
  double v15;
  double x;
  double v17;
  double y;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  BKMousePointerAnimation *v53;
  uint64_t v54;
  BKMousePointerAnimation *v55;
  uint64_t v56;
  NSObject *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  _QWORD v68[5];
  _QWORD v69[4];
  id v70;
  id v71[2];
  int v72;
  _BYTE location[12];
  __int16 v74;
  void *v75;
  __int16 v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  void *v81;
  __int16 v82;
  void *v83;
  __int16 v84;
  void *v85;
  __int16 v86;
  void *v87;

  if (a1)
  {
    v14 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_assert_not_owner((const os_unfair_lock *)(a1 + 8));
    os_unfair_lock_lock(v14);
    if (*(_QWORD *)(a1 + 112))
    {
      objc_msgSend(*(id *)(a1 + 104), "convertToGlobalPoint:fromRegion:", *(double *)(a1 + 136), *(double *)(a1 + 144));
      x = v15;
      y = v17;
    }
    else
    {
      x = CGPointZero.x;
      y = CGPointZero.y;
    }
    v19 = *(void **)(a1 + 104);
    v20 = a2;
    v21 = objc_msgSend(v20, "length");
    v22 = (void *)BKSDisplayUUIDMainKey;
    if (v21)
      v22 = v20;
    v23 = v22;

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "regionForDisplayUUID:", v23));
    if (v24)
    {
      if (objc_msgSend(*(id *)(a1 + 208), "positionType") != (id)1)
      {
        kdebug_trace(730468752, *(_QWORD *)&a6, *(_QWORD *)&a7, 0, 0);
        if (objc_msgSend(*(id *)(a1 + 120), "count"))
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "lastObject"));
          objc_msgSend(v32, "destinationPoint");
          x = v33;
          y = v34;

        }
        objc_msgSend(*(id *)(a1 + 104), "convertToGlobalPoint:fromRegion:", v24, a6, a7);
        v36 = v35;
        v38 = v37;
        v39 = v35 - x;
        v40 = v37 - y;
        v41 = *(void **)(a1 + 128);
        os_unfair_lock_unlock(v14);
        if ((int)a3 < 1)
        {
          objc_initWeak((id *)location, (id)a1);
          v49 = BSProcessDescriptionForPID(a4);
          v45 = (void *)objc_claimAutoreleasedReturnValue(v49);
          v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("setPosition %@"), v45));
        }
        else
        {
          if (sqrt(v39 * v39 + v40 * v40) > 160.0)
          {
            v56 = BKLogMousePointer(v42, v43);
            v57 = objc_claimAutoreleasedReturnValue(v56);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
            {
              v59 = BSStringFromCGPoint(a6, a7);
              v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
              v61 = *(_QWORD *)(a1 + 112);
              v62 = BSStringFromCGPoint(*(double *)(a1 + 136), *(double *)(a1 + 144));
              v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
              v64 = BSStringFromCGPoint(v36, v38);
              v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
              v66 = BSStringFromCGPoint(x, y);
              v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
              *(_DWORD *)location = 134219778;
              *(_QWORD *)&location[4] = 0x4064000000000000;
              v74 = 2114;
              v75 = v60;
              v76 = 1024;
              v77 = a3;
              v78 = 2114;
              v79 = v61;
              v80 = 2114;
              v81 = v63;
              v82 = 2114;
              v83 = v24;
              v84 = 2114;
              v85 = v65;
              v86 = 2114;
              v87 = v67;
              _os_log_error_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "Stopping pointer movement because request exceeds limit of %f pts. Pointer position:%{public}@, pid:%d, region:%{public}@, region point:%{public}@, target region:%{public}@, desired location %{public}@, current location:%{public}@", location, 0x4Eu);

            }
            goto LABEL_34;
          }
          objc_initWeak((id *)location, (id)a1);
          v44 = BSProcessDescriptionForPID(a4);
          v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
          v46 = BSProcessDescriptionForPID(a3);
          v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
          v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("setPosition %@ restrict:%@"), v45, v47));

        }
        v69[0] = _NSConcreteStackBlock;
        v69[1] = 3221225472;
        v69[2] = sub_10006BD94;
        v69[3] = &unk_1000EB900;
        objc_copyWeak(v71, (id *)location);
        v71[1] = v41;
        v72 = a3;
        v50 = v48;
        v70 = v50;
        v51 = objc_retainBlock(v69);
        if (a5
          && (v52 = a5[2](a5, v39, v40),
              (a5 = (uint64_t (**)(_QWORD, double, double))objc_claimAutoreleasedReturnValue(v52)) != 0)
          && (unint64_t)objc_msgSend(*(id *)(a1 + 120), "count") <= 0x63)
        {
          v53 = [BKMousePointerAnimation alloc];
          if (*(_BYTE *)(a1 + 409))
            v54 = 120;
          else
            v54 = 0;
          v68[0] = _NSConcreteStackBlock;
          v68[1] = 3221225472;
          v68[2] = sub_10006C154;
          v68[3] = &unk_1000EB928;
          v68[4] = a1;
          v55 = -[BKMousePointerAnimation initWithRelativeTranslation:destinationPoint:animationDriver:updateRate:applierBlock:completionBlock:](v53, "initWithRelativeTranslation:destinationPoint:animationDriver:updateRate:applierBlock:completionBlock:", a5, v54, v51, v68, v39, v40, v36, v38);
          os_unfair_lock_lock(v14);
          objc_msgSend(*(id *)(a1 + 120), "addObject:", v55);
          -[BKMousePointerAnimation start](v55, "start");
          os_unfair_lock_unlock(v14);

        }
        else
        {
          ((void (*)(_QWORD *, double, double))v51[2])(v51, v39, v40);
        }

        objc_destroyWeak(v71);
        objc_destroyWeak((id *)location);
LABEL_34:

        return;
      }
      v28 = BKLogMousePointer(1, v27);
      v29 = objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)location = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "_setPointerPosition: cannot reposition model point when the user is using a pointing device with absolute positioning", location, 2u);
      }

    }
    else
    {
      v30 = BKLogMousePointer(v25, v26);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v58 = *(void **)(a1 + 104);
        *(_DWORD *)location = 138543618;
        *(_QWORD *)&location[4] = v20;
        v74 = 2114;
        v75 = v58;
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "_setPointerPosition: no displayUUID:%{public}@ in arrangement:%{public}@", location, 0x16u);
      }

    }
    os_unfair_lock_unlock(v14);
    goto LABEL_34;
  }
}

void sub_10006BD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10006BD94(uint64_t a1, double a2, double a3)
{
  void *v6;
  os_unfair_lock_s *WeakRetained;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  double x;
  double y;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  void *i;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  void *j;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t buf[8];
  _BYTE v49[128];
  _BYTE v50[128];

  v6 = (void *)mach_absolute_time();
  WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (uint64_t)WeakRetained;
  if (!WeakRetained)
  {
LABEL_13:
    v21 = 1;
    goto LABEL_34;
  }
  os_unfair_lock_lock(WeakRetained + 2);
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v8 + 216), "anyObject"));
  v10 = (void *)v9;
  if (v9)
    v11 = *(void **)(v9 + 48);
  else
    v11 = 0;
  v12 = v11;

  if (!v12)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v8 + 40), "deviceServices"));
    v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "lastObject"));

    if (!v12)
    {
      v19 = BKLogMousePointer(v13, v14);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "no device found during pointer animation -- is IOHIDService termination in progress?", buf, 2u);
      }

      os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 8));
      goto LABEL_13;
    }
  }
  if (*(_QWORD *)(v8 + 128) != *(_QWORD *)(a1 + 48))
    goto LABEL_17;
  v16 = *(unsigned int *)(a1 + 56);
  if ((v16 & 0x80000000) != 0)
    goto LABEL_16;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(v8 + 8));
  if (*(_QWORD *)(v8 + 112))
  {
    objc_msgSend(*(id *)(v8 + 104), "convertToGlobalPoint:fromRegion:", *(double *)(v8 + 136), *(double *)(v8 + 144));
  }
  else
  {
    x = CGPointZero.x;
    y = CGPointZero.y;
  }
  v22 = sub_100068530(v8, a2 + x, a3 + y);
  v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v16));
  v25 = objc_msgSend(v23, "containsObject:", v24);

  if ((v25 & 1) != 0)
  {
LABEL_16:
    sub_100064EEC(v8, *(_QWORD *)(a1 + 32), a2, a3);
    v21 = 1;
    sub_1000687EC((const os_unfair_lock *)v8, v6, 1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 8));

  }
  else
  {
LABEL_17:
    v26 = BKLogMousePointer(v13, v14);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Attempting to animate across process boundaries when that is not allowed. Terminating animation.", buf, 2u);
    }

    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v29 = *(id *)(v8 + 120);
    v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
    if (v30)
    {
      v31 = v30;
      v32 = *(_QWORD *)v45;
      do
      {
        for (i = 0; i != v31; i = (char *)i + 1)
        {
          if (*(_QWORD *)v45 != v32)
            objc_enumerationMutation(v29);
          objc_msgSend(v28, "addObject:", *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i));
        }
        v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
      }
      while (v31);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 8));
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v34 = v28;
    v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v40, v49, 16);
    if (v35)
    {
      v36 = v35;
      v37 = *(_QWORD *)v41;
      do
      {
        for (j = 0; j != v36; j = (char *)j + 1)
        {
          if (*(_QWORD *)v41 != v37)
            objc_enumerationMutation(v34);
          objc_msgSend(*(id *)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)j), "stop", (_QWORD)v40);
        }
        v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v40, v49, 16);
      }
      while (v36);
    }

    v21 = 0;
  }
LABEL_34:

  return v21;
}

void sub_10006C154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "removeObject:", a3);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
}

BKMousePointerCAAnimationDriver *sub_10006C198(uint64_t a1, double a2, double a3)
{
  BKMousePointerCAAnimationDriver *v3;

  if (*(_QWORD *)(a1 + 32))
    v3 = -[BKMousePointerCAAnimationDriver initWithRelativeTranslation:animationSettings:]([BKMousePointerCAAnimationDriver alloc], "initWithRelativeTranslation:animationSettings:", *(_QWORD *)(a1 + 32), a2, a3);
  else
    v3 = 0;
  return v3;
}

BKMousePointerCAAnimationDriver *sub_10006C1F0(uint64_t a1, double a2, double a3)
{
  BKMousePointerCAAnimationDriver *v3;

  if (*(_QWORD *)(a1 + 32))
    v3 = -[BKMousePointerCAAnimationDriver initWithRelativeTranslation:animationSettings:]([BKMousePointerCAAnimationDriver alloc], "initWithRelativeTranslation:animationSettings:", *(_QWORD *)(a1 + 32), a2, a3);
  else
    v3 = 0;
  return v3;
}

void sub_10006C248(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;

  v4 = BKLogMousePointer(a1, a2);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(a2, "isActive");
    v7 = *(_QWORD *)(a1 + 32);
    v8[0] = 67109378;
    v8[1] = v6;
    v9 = 2114;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "pointer updates are suppressed: (%{BOOL}u): display:%{public}@", (uint8_t *)v8, 0x12u);
  }

}

void sub_10006C30C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_10006C3A8((uint64_t)WeakRetained);

}

void sub_10006C338(uint64_t a1)
{
  id WeakRetained;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  sub_100068F08((uint64_t)WeakRetained);

  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_10006C37C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_10006C3A8((uint64_t)WeakRetained);

}

void sub_10006C3A8(uint64_t a1)
{
  os_unfair_lock_s *v2;
  int v3;
  unsigned int v4;
  BKMousePointerAnnotationController *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  _BOOL4 v22;
  void *v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  uint64_t v33;
  _BYTE v34[128];
  _QWORD v35[5];
  _QWORD v36[5];

  if (a1)
  {
    v2 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_assert_not_owner((const os_unfair_lock *)(a1 + 8));
    os_unfair_lock_lock(v2);
    v3 = *(unsigned __int8 *)(a1 + 408);
    v4 = objc_msgSend(*(id *)(a1 + 424), "visualizeMousePointer");
    *(_BYTE *)(a1 + 408) = v4;
    if (v3 != v4)
    {
      if (v4)
      {
        v5 = objc_alloc_init(BKMousePointerAnnotationController);
        v6 = *(void **)(a1 + 328);
        *(_QWORD *)(a1 + 328) = v5;

        sub_10006AE00((const os_unfair_lock *)a1, *(_QWORD *)(a1 + 328));
      }
      else
      {
        sub_10006ADA8(a1, *(_QWORD *)(a1 + 328));
        objc_msgSend(*(id *)(a1 + 328), "invalidate");
        v7 = *(void **)(a1 + 328);
        *(_QWORD *)(a1 + 328) = 0;

      }
    }
    v8 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 424), "mouseInterpolation"));
    v35[0] = BKMouseInterpolationPointer;
    v35[1] = BKMouseInterpolationScroll;
    v36[0] = &off_1000F7498;
    v36[1] = &off_1000F74B0;
    v35[2] = BKMouseInterpolationScale;
    v35[3] = BKMouseInterpolationTranslation;
    v36[2] = &off_1000F74C8;
    v36[3] = &off_1000F74E0;
    v35[4] = BKMouseInterpolationRotation;
    v36[4] = &off_1000F74F8;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v36, v35, 5));
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v11 = v9;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v27;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v27 != v14)
            objc_enumerationMutation(v11);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v15), (_QWORD)v26));
          *(_QWORD *)(a1 + 168) |= (unint64_t)objc_msgSend(v16, "unsignedLongLongValue");

          v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
      }
      while (v13);
    }

    v19 = *(_QWORD *)(a1 + 168);
    if (v19 != v8)
    {
      v20 = BKLogMousePointer(v17, v18);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      if (v19)
      {
        if (v22)
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "componentsJoinedByString:", CFSTR(", ")));
          v24 = *(_QWORD *)(a1 + 168);
          *(_DWORD *)buf = 138543618;
          v31 = v23;
          v32 = 2048;
          v33 = v24;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "now interpolating [%{public}@] events: %llX", buf, 0x16u);

        }
        v25 = 0;
      }
      else
      {
        if (v22)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "interpolation disabled", buf, 2u);
        }
        v25 = 1;
      }

      *(_BYTE *)(a1 + 409) = v25;
      sub_10006A8D8(a1);
      sub_100068BB8(a1, (uint64_t)CFSTR("defaults changed"));
    }
    os_unfair_lock_unlock(v2);

  }
}

void sub_10006CD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  _Block_object_dispose((const void *)(v34 - 112), 8);
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10006CDEC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10006CDFC(uint64_t a1)
{

}

void sub_10006CE04(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;

  v3 = kCASecureModeViolationProcessId;
  v4 = a2;
  v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kCASecureModeViolationContextId));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kCASecureModeViolationLayerNames));

  v7 = objc_msgSend(v18, "intValue");
  if (v7 >= 1 && v7 != getpid())
  {
    v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (!v8)
    {
      v9 = objc_alloc_init((Class)NSMutableDictionary);
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;

      v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    }
    v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v18));
    if (!v12)
      v12 = objc_alloc_init((Class)NSMutableArray);
    objc_msgSend(v12, "addObject:", v5);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKey:", v12, v18);
    if (objc_msgSend(v6, "count"))
    {
      v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      if (!v13)
      {
        v14 = objc_alloc_init((Class)NSMutableDictionary);
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v16 = *(void **)(v15 + 40);
        *(_QWORD *)(v15 + 40) = v14;

        v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      }
      v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v5));
      if (!v17)
      {
        v17 = objc_alloc_init((Class)NSMutableSet);
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setObject:forKeyedSubscript:", v17, v5);
      }
      objc_msgSend(v17, "addObjectsFromArray:", v6);

    }
  }

}

void sub_10006CFE0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void **v11;
  uint64_t v12;
  id (*v13)(uint64_t, void *, void *);
  void *v14;
  id v15;

  v9 = a3;
  v5 = a2;
  v6 = objc_msgSend(objc_alloc((Class)BKSSecureModeViolation), "initWithProcessId:contextIds:", v5, v9);

  v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v7)
  {
    v11 = _NSConcreteStackBlock;
    v12 = 3221225472;
    v13 = sub_10006D2A4;
    v14 = &unk_1000EBBB0;
    v15 = v9;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bs_filter:", &v11));
    if (objc_msgSend(v8, "count"))
      objc_msgSend(v6, "setLayerNamesByContext:", v8);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v6, v9, v11, v12, v13, v14);

}

void sub_10006D0DC(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_10006D1A0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("FBSSystemService");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1001174C0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getFBSSystemServiceClass(void)_block_invoke"));
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BKSecureDrawingMonitor.m"), 26, CFSTR("Unable to find class %s"), "FBSSystemService");

    __break(1u);
  }
}

void *sub_10006D1A0()
{
  void *v0;
  void *v1;
  void *v3;
  void *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1001174C8)
  {
    v5 = off_1000EBC20;
    v6 = 0;
    qword_1001174C8 = _sl_dlopen(&v5, &v4);
  }
  v0 = (void *)qword_1001174C8;
  if (!qword_1001174C8)
  {
    v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *FrontBoardServicesLibrary(void)"));
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BKSecureDrawingMonitor.m"), 25, CFSTR("%s"), v4);

    __break(1u);
    goto LABEL_7;
  }
  v1 = v4;
  if (v4)
LABEL_7:
    free(v1);
  return v0;
}

id sub_10006D2A4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a2;
  if (objc_msgSend(a3, "count"))
    v6 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", v5);
  else
    v6 = 0;

  return v6;
}

id sub_10006D300(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "reportAndKillInsecureProcesses");
}

void sub_10006D348(id a1)
{
  BKSecureDrawingMonitor *v1;
  void *v2;

  v1 = objc_alloc_init(BKSecureDrawingMonitor);
  v2 = (void *)qword_1001174B0;
  qword_1001174B0 = (uint64_t)v1;

}

_DWORD *sub_10006D384(uint64_t a1, int a2)
{
  NSObject *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[8];
  _BYTE v17[128];

  if (!a1)
    return 0;
  if (a2)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v3 = *(id *)(a1 + 8);
    v4 = -[NSObject countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v3);
          v8 = *(_DWORD **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
          if (v8[4] == a2)
          {
            v9 = v8;
            goto LABEL_16;
          }
        }
        v5 = -[NSObject countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
        if (v5)
          continue;
        break;
      }
    }
  }
  else
  {
    v10 = BKLogTouchEvents(a1);
    v3 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ignoring zero touchID", buf, 2u);
    }
  }
  v9 = 0;
LABEL_16:

  return v9;
}

id sub_10006D4E4(uint64_t a1, int *a2, uint64_t a3)
{
  id v6;
  int v7;
  _DWORD *v8;
  void *v9;

  if (a1)
  {
    v6 = objc_alloc_init((Class)NSMutableArray);
    if (a3 >= 1)
    {
      do
      {
        v7 = *a2++;
        v8 = sub_10006D384(a1, v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        if (v9)
          objc_msgSend(v6, "addObject:", v9);

        --a3;
      }
      while (a3);
    }
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

void sub_10006D968(uint64_t a1)
{
  id v1;
  id v2;
  void *v3;
  BKHIDHapticFeedbackInterface *v4;

  v1 = objc_alloc(*(Class *)(a1 + 32));
  v4 = objc_alloc_init(BKHIDHapticFeedbackInterface);
  v2 = objc_msgSend(v1, "initWithHIDHapticFeedbackInterface:", v4);
  v3 = (void *)qword_1001174E0;
  qword_1001174E0 = (uint64_t)v2;

}

id sub_100070ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;

  v4 = *(void **)(a1 + 32);
  if (a3)
    a3 = *(_QWORD *)(a3 + 24);
  return objc_msgSend(v4, "_lock_evaluateDisplay:reason:", a3, *(_QWORD *)(a1 + 40));
}

void sub_100071048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100071CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

int64_t sub_100072024(id a1, BKNamespaceNode *a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[BKNamespaceNode object](a2, "object"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "renderer"));
  objc_msgSend(v3, "locationDidChange");

  return 0;
}

uint64_t sub_100072068(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100072078(uint64_t a1)
{

}

void sub_100072080(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;

  v7 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "object"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "renderer"));
  v6 = objc_msgSend(v5, "shouldRenderWithSupernode");

  if ((v6 & 1) == 0)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);

}

uint64_t sub_100072104(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

int64_t sub_100072110(id a1, BKNamespaceNode *a2)
{
  void *v2;
  void *v3;
  int64_t v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[BKNamespaceNode object](a2, "object"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "renderer"));

  if ((objc_msgSend(v3, "shouldRenderWithSupernode") & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(v3, "didAddAnnotation");
    v4 = 1;
  }

  return v4;
}

id sub_100072170(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _OWORD v9[3];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  +[CATransaction setDisableActions:](CATransaction, "setDisableActions:", 1);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayController sharedInstance](BKDisplayController, "sharedInstance"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  v4 = sub_10001A7F4();
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = sub_100019D70((uint64_t)v5);
  if (v2)
  {
    objc_msgSend(v2, "transformLayerPropertiesForDisplay:displayInterfaceOrientation:", v3, v6);
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v10 = 0u;
  }

  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 88);
  v9[0] = v10;
  v9[1] = v11;
  v9[2] = v12;
  objc_msgSend(v7, "setAffineTransform:", v9);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "setBounds:", v13, v14);
  return objc_msgSend(*(id *)(a1 + 32), "_lock_locationDidChanges");
}

void sub_100072260(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  double v6;
  dispatch_time_t v7;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[4];
  id v25;
  _BYTE v26[128];

  +[CATransaction setDisableActions:](CATransaction, "setDisableActions:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "nodeAtKeyPath:", *(_QWORD *)(a1 + 40)));
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1000724DC;
  v24[3] = &unk_1000EBD10;
  v4 = v2;
  v25 = v4;
  objc_msgSend(v3, "enumerateNodesWithOptions:usingBlock:", 3, v24);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_lock_supernodeForRenderingAtKeyPath:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "removeNodeAtKeyPath:", *(_QWORD *)(a1 + 40));
  v6 = *(double *)(a1 + 56);
  if (v6 > 0.0 && *(_QWORD *)(a1 + 48))
  {
    v7 = dispatch_time(0, (uint64_t)(v6 * 1000000000.0));
    v8 = *(NSObject **)(a1 + 48);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000725B4;
    v18[3] = &unk_1000ECD80;
    v18[4] = *(_QWORD *)(a1 + 32);
    v19 = v4;
    dispatch_after(v7, v8, v18);

  }
  else
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v9 = v4;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v21;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v21 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(a1 + 32);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v13), "object"));
          objc_msgSend(v14, "_lock_removeAnnotation:", v15);

          v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
      }
      while (v11);
    }

  }
  if (v5 != v3)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "object"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "renderer"));

    objc_msgSend(v17, "didRemoveSubannotations");
  }

}

uint64_t sub_1000724DC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v8;
  void *v9;

  v3 = a2;
  v4 = sub_1000598B8();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
    v8 = 138543362;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "  remove %{public}@", (uint8_t *)&v8, 0xCu);

  }
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

  return 0;
}

void sub_1000725B4(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100072628;
  v5[3] = &unk_1000ECD80;
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "performSynchronizedWithCATransaction:", v5);

}

void sub_100072628(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(a1 + 40);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6), "object", (_QWORD)v9));
        objc_msgSend(v7, "_lock_removeAnnotation:", v8);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

void sub_100072738(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  +[CATransaction setDisableActions:](CATransaction, "setDisableActions:", 1);
  objc_msgSend(*(id *)(a1 + 32), "setAnnotationController:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "objectAtKeyPath:", *(_QWORD *)(a1 + 48)));
  v3 = v2;
  if (v2)
  {
    if ((objc_msgSend(v2, "isEqual:", *(_QWORD *)(a1 + 32)) & 1) != 0)
      goto LABEL_9;
    objc_msgSend(*(id *)(a1 + 40), "_lock_removeAnnotation:", v3);
  }
  v4 = sub_1000598B8();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 32);
    v13 = 138543618;
    v14 = v6;
    v15 = 2114;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "set %{public}@ to %{public}@", (uint8_t *)&v13, 0x16u);
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "setObject:atKeyPath:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48)));
  objc_msgSend(*(id *)(a1 + 32), "setNamespaceNode:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_lock_supernodeForRenderingAtKeyPath:", *(_QWORD *)(a1 + 48)));
  v10 = v9;
  if (v9)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "object"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "renderer"));

    objc_msgSend(v12, "didAddAnnotation");
  }

LABEL_9:
}

void sub_1000728B8(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "nodeAtKeyPath:", *(_QWORD *)(a1 + 40)));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100072944;
  v3[3] = &unk_1000EBD10;
  v4 = *(id *)(a1 + 48);
  objc_msgSend(v2, "enumerateNodesWithOptions:usingBlock:", 3, v3);

}

uint64_t sub_100072944(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  objc_msgSend(v2, "addObject:", v3);

  return 0;
}

void sub_100072984(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 56), "objectAtKeyPath:", a1[5]));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_100073B04(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "renderer"));
  v5 = objc_msgSend(v4, "shouldRenderWithSupernode");

  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
    v6 = 0;
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "renderer"));
    objc_msgSend(v7, "regenerateLayerTree");

    v6 = 1;
  }

  return v6;
}

void sub_100073F94(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = BSSystemRootDirectory(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("System/Library/AccessibilityBundles/BackBoard.axbundle")));
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", v3));

  if (objc_msgSend(v4, "load"))
    objc_msgSend(objc_msgSend(v4, "principalClass"), "initialize");

}

id sub_1000741A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), 0);
}

id sub_1000741D0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id result;

  v2 = objc_msgSend(*(id *)(a1 + 32), "appendBool:withName:ifEqualTo:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 11), CFSTR("isAlternateShell"), 1);
  v3 = objc_msgSend(*(id *)(a1 + 32), "appendBool:withName:ifEqualTo:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 9), CFSTR("checkedIn"), 1);
  v4 = objc_msgSend(*(id *)(a1 + 32), "appendBool:withName:ifEqualTo:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 8), CFSTR("pendingCheckIn"), 1);
  v5 = objc_msgSend(*(id *)(a1 + 32), "appendBool:withName:ifEqualTo:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 10), CFSTR("finishedStartup"), 1);
  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "watchdogType"))
    v6 = objc_msgSend(*(id *)(a1 + 32), "appendBool:withName:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 12), CFSTR("wasAlive"));
  result = objc_msgSend(*(id *)(a1 + 32), "hasDebugStyle");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24), CFSTR("connection"));
  return result;
}

id sub_1000742C4(id a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStyle succinctStyle](BSDescriptionStyle, "succinctStyle"));
    v1 = (id)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:withStyle:](BSDescriptionStream, "descriptionForRootObject:withStyle:", v1, v2));

  }
  return v1;
}

void sub_100074328(uint64_t a1, int a2)
{
  id v4;

  if (a1)
  {
    if (objc_msgSend(*(id *)(a1 + 16), "watchdogType") == (id)1)
    {
      v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "jobLabel")));
      sub_100038254((uint64_t)objc_msgSend(v4, "UTF8String"), a2);

    }
  }
}

id sub_100074688(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "appendDescriptionToFormatter:", *(_QWORD *)(a1 + 32));
}

BOOL sub_100074694(id a1, BKEventStatistic *a2)
{
  return -[BKEventStatistic needsLogging](a2, "needsLogging");
}

id sub_100074DC0(id a1, BKEventStatistic *a2)
{
  return -[BKEventStatistic copy](a2, "copy");
}

void sub_100074DD8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100074E70;
  v6[3] = &unk_1000ECD80;
  v7 = v3;
  v8 = v4;
  v5 = v3;
  objc_msgSend(v8, "appendProem:block:", 0, v6);

}

void sub_100074E70(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v7 = objc_msgSend(*(id *)(a1 + 40), "appendObject:withName:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), 0, (_QWORD)v8);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

}

id sub_100074F6C(id a1, NSArray *a2)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray bs_filter:](a2, "bs_filter:", &stru_1000EBD90));
  if (objc_msgSend(v2, "count"))
    v3 = v2;
  else
    v3 = 0;

  return v3;
}

BOOL sub_100074FBC(id a1, BKEventStatistic *a2)
{
  return -[BKEventStatistic needsLogging](a2, "needsLogging");
}

void sub_100074FCC(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    sub_10001A39C((uint64_t)WeakRetained);
    WeakRetained = v2;
  }

}

void sub_100074FFC(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.backboard.BKEventStatistics", 0);
  v2 = (void *)qword_100117500;
  qword_100117500 = (uint64_t)v1;

}

uint64_t sub_100077814(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = BKLogSystemShell(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138543362;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Killing %{public}@.", (uint8_t *)&v6, 0xCu);
  }

  return kill((pid_t)objc_msgSend(*(id *)(a1 + 32), "pid"), 9);
}

id sub_1000778C8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "start");
}

uint64_t sub_1000778D4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_lock_completeCheckInForShell:", *(_QWORD *)(a1 + 40));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100077908(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint8_t buf[4];
  void *v14;
  _BYTE v15[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v15, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        v7 = BKLogSystemShell();
        v8 = objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          v14 = v6;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Killing %{public}@.", buf, 0xCu);
        }

        kill((pid_t)objc_msgSend(v6, "pid"), 9);
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v15, 16);
    }
    while (v3);
  }

}

BKSystemShellDescriptor *__cdecl sub_100077A6C(id a1, BKSystemShellClient *a2)
{
  if (a2)
    return a2->_descriptor;
  else
    return 0;
}

BKSystemShellDescriptor *__cdecl sub_100077A80(id a1, BKSystemShellClient *a2)
{
  if (a2)
    return a2->_descriptor;
  else
    return 0;
}

id sub_100077A94(id a1, BKSystemShellClient *a2)
{
  if (a2)
    return a2->_descriptor;
  else
    return 0;
}

id sub_100077AA8(id a1, BKSystemShellClient *a2)
{
  if (a2)
    return a2->_descriptor;
  else
    return 0;
}

id sub_100077ABC(id a1, BKSystemShellClient *a2)
{
  if (a2)
    return a2->_descriptor;
  else
    return 0;
}

id sub_100077AD0(id a1, BKSystemShellClient *a2)
{
  if (a2)
    return a2->_descriptor;
  else
    return 0;
}

void sub_100077AE4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "primarySystemShell"));
  v4 = objc_msgSend(v2, "appendObject:withName:", v3, CFSTR("systemApp"));

  v5 = *(void **)(a1 + 32);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "systemShells"));
  objc_msgSend(v5, "appendArraySection:withName:skipIfEmpty:", v6, CFSTR("connectedSystemApps"), 1);

}

void sub_100077BAC(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = BSDispatchQueueCreateWithQualityOfService("com.apple.backboardd.migration", 0, 33, 0);
  v2 = (void *)qword_100117520;
  qword_100117520 = v1;

}

void sub_100077BE0(id a1)
{
  BKSystemShellSentinel *v1;
  void *v2;

  v1 = objc_alloc_init(BKSystemShellSentinel);
  v2 = (void *)qword_100117508;
  qword_100117508 = (uint64_t)v1;

}

id sub_100078158(uint64_t a1)
{
  double v2;
  double *v3;
  double v4;

  v2 = BSAbsoluteMachTimeNow(a1);
  v3 = *(double **)(a1 + 32);
  v4 = v3[5];
  if (v4 <= 0.0 || v4 <= v2)
    return _objc_msgSend(v3, "_queue_invalidate", v2);
  else
    return _objc_msgSend(v3, "_queue_setTimerWithTimeIntervalSinceNow:", v4 - v2);
}

id sub_10007819C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_invalidate");
}

void sub_100078220(id a1)
{
  uint64_t Serial;
  void *v2;

  Serial = BSDispatchQueueCreateSerial(CFSTR("BKDisplayBrightnessUpdateTransaction"));
  v2 = (void *)qword_100117530;
  qword_100117530 = Serial;

}

void sub_100078248(id a1)
{
  void *v1;
  BKDisplayBrightnessUpdateTransaction *v2;
  void *v3;
  BKDisplayBrightnessUpdateTransaction *v4;
  void *v5;

  v1 = (void *)qword_100117528;
  if (!qword_100117528)
  {
    v2 = [BKDisplayBrightnessUpdateTransaction alloc];
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessUpdateTransactionManager sharedInstance](BKDisplayBrightnessUpdateTransactionManager, "sharedInstance"));
    v4 = -[BKDisplayBrightnessUpdateTransaction initWithIdentifier:transactionManager:](v2, "initWithIdentifier:transactionManager:", CFSTR("(implicit)"), v3);
    v5 = (void *)qword_100117528;
    qword_100117528 = (uint64_t)v4;

    v1 = (void *)qword_100117528;
  }
  _objc_msgSend(v1, "_queue_updateExpirationTimeWithIntervalSinceNow:", 1.0);
}

void sub_100078998(id a1)
{
  BKDisplayBrightnessUpdateTransactionManager *v1;
  id v2;
  void *v3;
  id v4;

  v1 = [BKDisplayBrightnessUpdateTransactionManager alloc];
  v4 = (id)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  v2 = -[BKDisplayBrightnessUpdateTransactionManager _initWithBrightnessController:](v1, "_initWithBrightnessController:", v4);
  v3 = (void *)qword_100117540;
  qword_100117540 = (uint64_t)v2;

}

id sub_100078B60(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v2 = objc_msgSend(*(id *)(a1 + 32), "appendBool:withName:ifEqualTo:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 14), CFSTR("shouldActivateByGesture"), 1);
  v3 = objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:skipIfNil:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64), CFSTR("transport"), 1);
  v4 = objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:skipIfNil:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56), CFSTR("keyboardLanguage"), 1);
  v5 = objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:skipIfNil:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), CFSTR("keyboardLayout"), 1);
  v6 = objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:skipIfNil:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72), CFSTR("exclusivityIdentifier"), 1);
  v7 = objc_msgSend(*(id *)(a1 + 32), "appendInt:withName:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 12), CFSTR("countryCode"));
  v8 = objc_msgSend(*(id *)(a1 + 32), "appendInt:withName:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 16), CFSTR("keyboardType"));
  v9 = objc_msgSend(*(id *)(a1 + 32), "appendInteger:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), CFSTR("subinterfaceID"));
  v10 = objc_msgSend(*(id *)(a1 + 32), "appendBool:withName:ifEqualTo:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 8), CFSTR("capsLockOn"), 1);
  v11 = objc_msgSend(*(id *)(a1 + 32), "appendBool:withName:ifEqualTo:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 9), CFSTR("capsLockRomanSwitchMode"), 1);
  v12 = objc_msgSend(*(id *)(a1 + 32), "appendBool:withName:ifEqualTo:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 10), CFSTR("capsLockKeyHasLanguageSwitchLabel"), 1);
  v13 = objc_msgSend(*(id *)(a1 + 32), "appendBool:withName:ifEqualTo:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 11), CFSTR("globeKeyLabelHasGlobeSymbol"), 1);
  return objc_msgSend(*(id *)(a1 + 32), "appendPointer:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80), CFSTR("gsKeyboard"));
}

id sub_100078D10(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 120))
    {
      v3 = BKSHIDServicesProductIdentifierFromServiceProperties();
      v2 = (void *)objc_claimAutoreleasedReturnValue(v3);
    }
    else
    {
      v2 = 0;
    }
  }
  return v2;
}

id sub_100078D48(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *i;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char isKindOfClass;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  id v39;
  void *v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t buf[4];
  id v47;
  _BYTE v48[128];

  if (!a1[14])
    return 0;
  v1 = a1[15];
  if (!v1)
    return 0;
  v2 = BKSHIDServicesProductIdentifierFromServiceProperties(a1[14], v1, a1[16]);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults externalDefaults](BKSDefaults, "externalDefaults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "keyboardDefaults"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "modifierKeyRemapping"));
  v7 = v6;
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", v3));
    v10 = objc_opt_class(NSArray, v9);
    v11 = v8;
    v12 = v11;
    if (v10)
    {
      if ((objc_opt_isKindOfClass(v11, v10) & 1) != 0)
        v13 = v12;
      else
        v13 = 0;
    }
    else
    {
      v13 = 0;
    }
    v16 = v13;

    if (objc_msgSend(v16, "count"))
    {
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v15 = v16;
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v42, v48, 16);
      if (v17)
      {
        v19 = v17;
        v39 = v16;
        v40 = v7;
        v41 = v5;
        v20 = *(_QWORD *)v43;
        while (2)
        {
          for (i = 0; i != v19; i = (char *)i + 1)
          {
            if (*(_QWORD *)v43 != v20)
              objc_enumerationMutation(v15);
            v22 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)i);
            v23 = objc_opt_class(NSDictionary, v18);
            v24 = v22;
            v25 = v24;
            if (v23)
            {
              if ((objc_opt_isKindOfClass(v24, v23) & 1) != 0)
                v26 = v25;
              else
                v26 = 0;
            }
            else
            {
              v26 = 0;
            }
            v27 = v26;

            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "allKeys"));
            if (objc_msgSend(v28, "count") != (id)2)
              goto LABEL_30;
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKey:", CFSTR("HIDKeyboardModifierMappingSrc")));
            v31 = objc_opt_class(NSNumber, v30);
            if ((objc_opt_isKindOfClass(v29, v31) & 1) == 0)
            {

LABEL_30:
LABEL_31:
              v37 = BKLogKeyboard(v36);
              v38 = objc_claimAutoreleasedReturnValue(v37);
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                v47 = v27;
                _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "invalid key remapping dictionary: %{public}@", buf, 0xCu);
              }

              v15 = 0;
              goto LABEL_34;
            }
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKey:", CFSTR("HIDKeyboardModifierMappingDst")));
            v34 = objc_opt_class(NSNumber, v33);
            isKindOfClass = objc_opt_isKindOfClass(v32, v34);

            if ((isKindOfClass & 1) == 0)
              goto LABEL_31;

          }
          v19 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v42, v48, 16);
          if (v19)
            continue;
          break;
        }
LABEL_34:
        v5 = v41;
        v16 = v39;
        v7 = v40;
      }
    }
    else
    {
      v15 = 0;
    }

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

uint64_t sub_100079078(_QWORD *a1)
{
  id v1;
  id v2;
  id v3;
  char v4;
  char v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  char v13;
  id obj;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  if (a1)
  {
    v1 = sub_100078D48(a1);
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(v1);
    v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v2)
    {
      v3 = v2;
      v4 = 0;
      v5 = 0;
      v6 = *(_QWORD *)v17;
      do
      {
        for (i = 0; i != v3; i = (char *)i + 1)
        {
          if (*(_QWORD *)v17 != v6)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("HIDKeyboardModifierMappingSrc")));
          v10 = objc_msgSend(v9, "unsignedLongLongValue");

          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("HIDKeyboardModifierMappingDst")));
          v12 = objc_msgSend(v11, "unsignedLongLongValue");

          v5 |= v10 == (id)0x700000039;
          v4 |= v12 == (id)0x700000039;
        }
        v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v3);
      v13 = v5 ^ 1 | v4;
    }
    else
    {
      v13 = 1;
    }

  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_10007920C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  if (!a1)
    return 0;
  if (!*(_BYTE *)(a1 + 14))
    return 1;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "propertyForKey:", CFSTR("KeyboardEnabled")));
  v3 = objc_opt_class(NSNumber, v2);
  v4 = v1;
  v5 = v4;
  if (v3)
  {
    if ((objc_opt_isKindOfClass(v4, v3) & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6;

  if (v8)
    v7 = objc_msgSend(v8, "BOOLValue");
  else
    v7 = 0;

  return (uint64_t)v7;
}

void sub_1000792C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  v3 = a2;
  v4 = v3;
  if (a1 && v3)
  {
    v5 = objc_msgSend(v3, "copy");
    v6 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v5;

    if (*(_QWORD *)(a1 + 80))
    {
      if ((objc_msgSend(v4, "isEqualToString:", GSKeyboardGetLayout()) & 1) != 0)
        goto LABEL_12;
      v8 = *(_QWORD *)(a1 + 80);
      if (v8)
        GSKeyboardRelease(v8, v7);
    }
    v9 = *(unsigned int *)(a1 + 16);
    if (v9 > 2)
      v10 = 0;
    else
      v10 = dword_1000B3D20[v9];
    v11 = GSKeyboardCreateWithCountryCode(v4, v10, *(unsigned __int8 *)(a1 + 12));
    *(_QWORD *)(a1 + 80) = v11;
    if (*(_BYTE *)(a1 + 8))
    {
      v12 = 0;
      GSKeyboardTranslateKeyExtendedCommandWithUsagePage(v11, 57, 0, 0, &v12, 0, &v12);
      GSKeyboardTranslateKeyExtendedCommandWithUsagePage(*(_QWORD *)(a1 + 80), 57, 1, 0, &v12, 0, &v12);
    }
  }
LABEL_12:

}

void sub_1000793E4(uint64_t a1, int a2)
{
  void *v4;
  id v5;

  if (a1 && *(unsigned __int8 *)(a1 + 9) != a2)
  {
    *(_BYTE *)(a1 + 9) = a2;
    v5 = *(id *)(a1 + 24);
    objc_msgSend(v5, "setProperty:forKey:", &__kCFBooleanFalse, CFSTR("HIDCapsLockState"));
    if (a2)
      v4 = &__kCFBooleanTrue;
    else
      v4 = &__kCFBooleanFalse;
    objc_msgSend(v5, "setProperty:forKey:", v4, CFSTR("HIDCapsLockLEDInhibit"));
    if (*(_BYTE *)(a1 + 8))
    {
      *(_BYTE *)(a1 + 8) = 0;
      objc_msgSend(*(id *)(a1 + 24), "setElementValue:forUsagePage:usage:", 0, 8, 2);
    }

  }
}

void sub_1000794A4(uint64_t a1, double a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  _DWORD v7[2];

  if (a1)
  {
    v3 = *(id *)(a1 + 24);
    v4 = v3;
    if (a2 != -1.0)
      a2 = a2 * 1000.0;
    if (a2 == -1.0 || a2 >= 0.0 && a2 <= 3000.0)
    {
      v5 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)a2));
      objc_msgSend(v4, "setProperty:forKey:", v5, CFSTR("CapsLockDelayOverride"));
    }
    else
    {
      v6 = BKLogKeyboard(v3);
      v5 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        v7[0] = 67109120;
        v7[1] = (int)a2;
        _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "setCapsLockDelayOverride called with invalid interval %d", (uint8_t *)v7, 8u);
      }
    }

  }
}

id sub_1000795CC(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = sub_100078D10((uint64_t)a1);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }
  return a1;
}

id sub_1000795E8(void *a1)
{
  _QWORD v2[5];

  if (a1)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10007964C;
    v2[3] = &unk_1000EC110;
    v2[4] = a1;
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDKeyboardDeviceProperties build:](BKSHIDKeyboardDeviceProperties, "build:", v2));
  }
  return a1;
}

void sub_10007964C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v4 = a2;
  objc_msgSend(v4, "setSenderID:", objc_msgSend(v3, "senderID"));
  objc_msgSend(v4, "setTransport:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  objc_msgSend(v4, "setLayout:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
  objc_msgSend(v4, "setLanguage:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
  objc_msgSend(v4, "setExclusivityIdentifier:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
  objc_msgSend(v4, "setCountryCode:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 12));
  objc_msgSend(v4, "setStandardType:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend(v4, "setSubinterfaceID:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
  objc_msgSend(v4, "setCapsLockKeyHasLanguageSwitchLabel:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 10));
  objc_msgSend(v4, "setGlobeKeyLabelHasGlobeSymbol:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 11));

}

void sub_100079A14(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "setPid:", objc_msgSend(v2, "pid"));

}

void sub_10007A154(uint64_t a1)
{
  void *v1;
  id v2;

  if (a1)
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", a1));
  else
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100117550, "allKeys"));
  v2 = v1;
  objc_msgSend(v1, "enumerateObjectsUsingBlock:", &stru_1000EC1A0);

}

void sub_10007A1AC(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  __CFString *v4;
  const __CFBoolean *v5;
  CFBooleanRef v6;
  id v7;
  id v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  NSObject *v12;
  uint8_t v13[16];

  v4 = a2;
  v5 = (const __CFBoolean *)CFPreferencesCopyAppValue(v4, kCFPreferencesCurrentApplication);
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend((id)qword_100117550, "objectForKey:", v4);
    if (v7)
    {
      v8 = v7;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
      objc_msgSend(v9, "setProperty:forKey:", v6, v8);

      if (-[__CFString isEqualToString:](v4, "isEqualToString:", BKDefaultKeyALSEnabled))
        v10 = v6 == kCFBooleanFalse;
      else
        v10 = 0;
      if (v10)
      {
        v11 = BKLogDetailed();
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v13 = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "resetting ALS curve", v13, 2u);
        }

        sub_10007A2C0();
      }
      sub_10007A300();
    }
    CFRelease(v6);
  }

}

void sub_10007A2C0()
{
  id v0;

  v0 = (id)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  objc_msgSend(v0, "setProperty:forKey:", 0, CFSTR("ALSResetCurve"));

}

void sub_10007A300()
{
  void *v0;
  void *v1;
  unsigned int v2;
  void *v3;
  id v4;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "propertyForKey:", CFSTR("ALSUserPreference")));

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v2 = objc_msgSend(v4, "isEqual:", v1);

  if (v2)
  {

    v4 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
  objc_msgSend(v3, "setALSUserPreferences:", v4);

}

BOOL sub_10007A3A8()
{
  void *v0;
  void *v1;
  void *v2;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "ALSUserPreferences"));

  if (v1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
    objc_msgSend(v2, "setProperty:forKey:", v1, CFSTR("ALSUserPreference"));

  }
  return v1 != 0;
}

void sub_10007A420(id a1)
{
  sub_10007A154(BKDefaultKeyALSEnabled);
}

void sub_10007A430(int a1, uint64_t a2, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v6;
  const void *ValueAtIndex;
  const void *v8;

  if (a2 == 1)
    goto LABEL_6;
  if (a2 == 128 || a2 == 32)
  {
    Count = CFArrayGetCount(theArray);
    if (Count <= 0)
      __assert_rtn("_wrapRunLoopWithAutoreleasePoolHandler", "BKAutoreleasePoolRunLoopSupport.m", 27, "count > 0");
    v6 = Count - 1;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1);
    NSPopAutoreleasePool(ValueAtIndex);
    CFArrayRemoveValueAtIndex(theArray, v6);
    if (a2 == 32)
    {
LABEL_6:
      v8 = (const void *)NSPushAutoreleasePool(0);
      CFArrayAppendValue(theArray, v8);
    }
  }
}

id sub_10007B040(id a1, void *a2)
{
  uint64_t v3;
  id *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;

  v4 = a2;
  if (a1)
  {
    a1 = sub_10007B0D4(a1, v3);
    if (a1)
    {
      v5 = objc_msgSend(v4[1], "copy");
      v6 = (void *)*((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = v5;

      v7 = objc_msgSend(v4[2], "copy");
      v8 = (void *)*((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v7;

      v9 = objc_msgSend(v4[3], "copy");
      v10 = (void *)*((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = v9;

      *((_DWORD *)a1 + 8) = *((_DWORD *)v4 + 8);
      *((_QWORD *)a1 + 5) = v4[5];
      *((_QWORD *)a1 + 6) = v4[6];
    }
  }

  return a1;
}

id sub_10007B0D4(id result, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString *v9;
  void *v10;
  uint64_t v11;
  objc_class *v12;
  NSString *v13;
  void *v14;
  objc_super v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  const __CFString *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  void *v27;

  if (result)
  {
    v2 = result;
    v3 = objc_opt_class(result, a2);
    if (v3 != objc_opt_class(BKSystemShellDescriptor, v4))
    {
      v6 = objc_opt_class(v2, v5);
      if (v6 != objc_opt_class(BKMutableSystemShellDescriptor, v7))
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("BKSystemShellDescriptor cannot be subclassed")));
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          v9 = NSStringFromSelector("_init");
          v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
          v12 = (objc_class *)objc_opt_class(v2, v11);
          v13 = NSStringFromClass(v12);
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          *(_DWORD *)buf = 138544642;
          v17 = v10;
          v18 = 2114;
          v19 = v14;
          v20 = 2048;
          v21 = v2;
          v22 = 2114;
          v23 = CFSTR("BKSystemShellDescriptor.m");
          v24 = 1024;
          v25 = 44;
          v26 = 2114;
          v27 = v8;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

        }
        _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
        __break(0);
        JUMPOUT(0x10007B270);
      }
    }
    v15.receiver = v2;
    v15.super_class = (Class)BKSystemShellDescriptor;
    return objc_msgSendSuper2(&v15, "init");
  }
  return result;
}

void sub_10007B6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007C714(uint64_t a1, void *a2)
{
  sub_10007C764(a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
}

void sub_10007C728(uint64_t a1, void *a2)
{
  sub_10007C764(a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
}

void sub_10007C73C(uint64_t a1, void *a2)
{
  sub_10007C764(a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
}

void sub_10007C750(uint64_t a1, void *a2)
{
  sub_10007C764(a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
}

void sub_10007C764(void *a1, char a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  int v7;
  id v8;
  id v9;
  id v10;

  v3 = a1;
  objc_msgSend(v3, "appendString:", CFSTR("{"));
  if ((a2 & 1) != 0)
  {
    objc_msgSend(v3, "appendString:", CFSTR("open"));
    v8 = v3;
    if ((a2 & 4) == 0)
      goto LABEL_8;
    objc_msgSend(v8, "appendString:", CFSTR(","));
  }
  else
  {
    v4 = v3;
    if ((a2 & 4) == 0)
    {
      v5 = v4;

      v6 = v5;
      if ((a2 & 8) == 0)
      {
        v7 = 0;
        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }
  objc_msgSend(v3, "appendString:", CFSTR("flap1"));
LABEL_8:

  v9 = v3;
  if ((a2 & 8) != 0)
  {
    objc_msgSend(v9, "appendString:", CFSTR(","));
LABEL_10:
    objc_msgSend(v3, "appendString:", CFSTR("flap2"));
  }
  v7 = 1;
LABEL_12:

  v10 = v3;
  if ((a2 & 0x10) != 0)
  {
    if (v7)
      objc_msgSend(v10, "appendString:", CFSTR(","));
    objc_msgSend(v10, "appendString:", CFSTR("flap3"));
  }

  objc_msgSend(v10, "appendString:", CFSTR("}"));
}

id sub_10007C878(char a1)
{
  id v2;

  v2 = objc_alloc_init((Class)NSMutableString);
  sub_10007C764(v2, a1);
  return v2;
}

__CFString *sub_10007C8B0(uint64_t a1)
{
  id WeakRetained;
  __CFString *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", WeakRetained));
  else
    v2 = CFSTR("<nil>");

  return v2;
}

void sub_10007C944(id a1)
{
  byte_100117558 = BSSystemHasCapability(CFSTR("hall-effect-sensor"));
}

void sub_10007CA74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007CAEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10007CC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, objc_super a11)
{
  void *v11;

  a11.super_class = (Class)BKMouseEventAccumulator;
  -[_Unwind_Exception dealloc](&a11, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10007CCCC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000592CC(a1);
  _Unwind_Resume(a1);
}

void sub_10007D454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_10007DD8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10007E420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_10007EABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007EBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10007ECBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007EF80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007F120(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007F230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10007F314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_10007FDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{

  _Unwind_Resume(a1);
}

void sub_100080220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000804D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000807C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100080C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100080D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100080F90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t sub_100081128(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t Name;

  v8 = a3;
  v10 = v8;
  if (*(_QWORD *)a1)
  {
    v11 = objc_msgSend(v8, "senderID");
    v12 = objc_msgSend(*(id *)a1, "senderID");
    if (v11 != v12)
    {
      v14 = BKLogMousePointer(v12, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v21 = 138543362;
        Name = IOHIDEventTypeGetName(6);
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ event from a different sender during phased scroll", (uint8_t *)&v21, 0xCu);
      }
LABEL_15:

      v18 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    if ((a2 & 0x81) == 0)
    {
      v19 = BKLogMousePointer(v8, v9);
      v15 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v21 = 138543362;
        Name = IOHIDEventTypeGetName(6);
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ non-begin-phase phased event; no established sender",
          (uint8_t *)&v21,
          0xCu);
      }
      goto LABEL_15;
    }
    v16 = BKLogMousePointer(v8, v9);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v21 = 138543362;
      Name = IOHIDEventTypeGetName(6);
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%{public}@ sender locked", (uint8_t *)&v21, 0xCu);
    }

    objc_storeStrong((id *)a1, a3);
  }
  *(_WORD *)(a1 + 8) = a2;
  if (a2 == 1)
  {
    v18 = 1;
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 16) = a4;
  }
  else
  {
    v18 = 1;
  }
LABEL_16:

  return v18;
}

void sub_100081320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100081360(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t Name;

  v8 = a3;
  v10 = v8;
  if (*(_QWORD *)a1)
  {
    v11 = objc_msgSend(v8, "senderID");
    v12 = objc_msgSend(*(id *)a1, "senderID");
    if (v11 != v12)
    {
      v14 = BKLogMousePointer(v12, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v21 = 138543362;
        Name = IOHIDEventTypeGetName(4);
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ event from a different sender during phased scroll", (uint8_t *)&v21, 0xCu);
      }
LABEL_15:

      v18 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    if ((a2 & 0x81) == 0)
    {
      v19 = BKLogMousePointer(v8, v9);
      v15 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v21 = 138543362;
        Name = IOHIDEventTypeGetName(4);
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ non-begin-phase phased event; no established sender",
          (uint8_t *)&v21,
          0xCu);
      }
      goto LABEL_15;
    }
    v16 = BKLogMousePointer(v8, v9);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v21 = 138543362;
      Name = IOHIDEventTypeGetName(4);
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%{public}@ sender locked", (uint8_t *)&v21, 0xCu);
    }

    objc_storeStrong((id *)a1, a3);
  }
  *(_WORD *)(a1 + 8) = a2;
  if (a2 == 1)
  {
    v18 = 1;
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 16) = a4;
  }
  else
  {
    v18 = 1;
  }
LABEL_16:

  return v18;
}

void sub_100081558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100081598(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t Name;

  v8 = a3;
  v10 = v8;
  if (*(_QWORD *)a1)
  {
    v11 = objc_msgSend(v8, "senderID");
    v12 = objc_msgSend(*(id *)a1, "senderID");
    if (v11 != v12)
    {
      v14 = BKLogMousePointer(v12, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v21 = 138543362;
        Name = IOHIDEventTypeGetName(5);
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ event from a different sender during phased scroll", (uint8_t *)&v21, 0xCu);
      }
LABEL_15:

      v18 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    if ((a2 & 0x81) == 0)
    {
      v19 = BKLogMousePointer(v8, v9);
      v15 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v21 = 138543362;
        Name = IOHIDEventTypeGetName(5);
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ non-begin-phase phased event; no established sender",
          (uint8_t *)&v21,
          0xCu);
      }
      goto LABEL_15;
    }
    v16 = BKLogMousePointer(v8, v9);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v21 = 138543362;
      Name = IOHIDEventTypeGetName(5);
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%{public}@ sender locked", (uint8_t *)&v21, 0xCu);
    }

    objc_storeStrong((id *)a1, a3);
  }
  *(_WORD *)(a1 + 8) = a2;
  if (a2 == 1)
  {
    v18 = 1;
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 16) = a4;
  }
  else
  {
    v18 = 1;
  }
LABEL_16:

  return v18;
}

void sub_100081790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1000817D0(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t Name;

  v8 = a3;
  v10 = v8;
  if (*(_QWORD *)a1)
  {
    v11 = objc_msgSend(v8, "senderID");
    v12 = objc_msgSend(*(id *)a1, "senderID");
    if (v11 != v12)
    {
      v14 = BKLogMousePointer(v12, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v21 = 138543362;
        Name = IOHIDEventTypeGetName(7);
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ event from a different sender during phased scroll", (uint8_t *)&v21, 0xCu);
      }
LABEL_15:

      v18 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    if ((a2 & 0x81) == 0)
    {
      v19 = BKLogMousePointer(v8, v9);
      v15 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v21 = 138543362;
        Name = IOHIDEventTypeGetName(7);
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ non-begin-phase phased event; no established sender",
          (uint8_t *)&v21,
          0xCu);
      }
      goto LABEL_15;
    }
    v16 = BKLogMousePointer(v8, v9);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v21 = 138543362;
      Name = IOHIDEventTypeGetName(7);
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%{public}@ sender locked", (uint8_t *)&v21, 0xCu);
    }

    objc_storeStrong((id *)a1, a3);
  }
  *(_WORD *)(a1 + 8) = a2;
  if (a2 == 1)
  {
    v18 = 1;
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 16) = a4;
  }
  else
  {
    v18 = 1;
  }
LABEL_16:

  return v18;
}

void sub_1000819C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double sub_100081A08(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  double v8;

  if (!a1)
    return 0.0;
  v2 = objc_msgSend(*(id *)(a1 + 24), "count");
  v3 = (uint64_t)v2;
  if ((uint64_t)v2 >= 0)
    v4 = (uint64_t)v2;
  else
    v4 = (uint64_t)v2 + 1;
  v5 = *(void **)(a1 + 24);
  if (v4 >> 1 >= v3)
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastObject"));
  else
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndex:"));
  objc_msgSend(v6, "doubleValue");
  v8 = v7;

  return v8;
}

void sub_100081A8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100081AA0(uint64_t a1, uint64_t a2, double a3)
{
  double v6;
  BOOL v7;
  double v8;

  *(_QWORD *)(a1 + 8) = mach_absolute_time();
  v6 = BSMonotonicReferencedTimeFromMachTime(a2 - *(_QWORD *)a1);
  *(double *)(a1 + 16) = v6;
  *(_QWORD *)a1 = a2;
  v7 = v6 <= a3 * 1.5;
  if (v6 > a3 * 1.5)
    v6 = a3;
  v8 = a3 * 0.5;
  if (!v7 || v6 < v8)
  {
    if (v6 < v8)
      v6 = a3;
    *(double *)(a1 + 16) = v6;
  }
}

id sub_100081B14(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;

  if (a1)
  {
    v2 = objc_msgSend(*(id *)(a1 + 40), "mutableCopy");
    v3 = objc_msgSend(*(id *)(a1 + 64), "mutableCopy");
    v4 = v3;
    if (*(_QWORD *)(a1 + 56))
      objc_msgSend(v3, "removeIndexes:");
    objc_msgSend(v2, "removeIndexes:", v4);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void sub_100081B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100081B9C(int a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v5 = a3;
  v6 = v5;
  if (a1)
  {
    if (!v5)
      v6 = objc_alloc_init((Class)NSMutableIndexSet);
    objc_msgSend(v6, "addIndex:", a2);
  }
  else
  {
    objc_msgSend(v5, "removeIndex:", a2);
  }
  v7 = v6;

  return v7;
}

void sub_100081C14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100081C24(uint64_t a1)
{
  id v2;
  int IntegerValue;
  const __CFString *v4;
  const __CFString *v5;
  void *v6;

  v2 = objc_alloc_init((Class)NSMutableArray);
  IntegerValue = IOHIDEventGetIntegerValue(a1, 720903);
  if ((IntegerValue & 0x80) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("cancel"));
  if ((IntegerValue & 1) != 0)
  {
    if (IOHIDEventGetIntegerValue(a1, 720904))
      v4 = CFSTR("range in");
    else
      v4 = CFSTR("range out");
    objc_msgSend(v2, "addObject:", v4);
  }
  if ((IntegerValue & 2) != 0)
  {
    if (IOHIDEventGetIntegerValue(a1, 720905))
      v5 = CFSTR("touch down");
    else
      v5 = CFSTR("touch up");
    objc_msgSend(v2, "addObject:", v5);
  }
  if ((IntegerValue & 0x20000) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("tap"));
  if ((IntegerValue & 0x200) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("resting"));
  if ((IntegerValue & 4) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("move"));
  if ((IntegerValue & 0x20) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("identity"));
  if ((IntegerValue & 0x40) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("attribute"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR(", ")));

  return v6;
}

void sub_100081D6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CFString *sub_100081D88(void *a1)
{
  id v1;
  id v2;
  void *v3;
  __CFString *v4;
  _QWORD v6[4];
  id v7;

  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100081EB8;
    v6[3] = &unk_1000EC358;
    v2 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
    v7 = v2;
    objc_msgSend(v1, "enumerateIndexesUsingBlock:", v6);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet"));
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByTrimmingCharactersInSet:", v3));

  }
  else
  {
    v4 = &stru_1000F0F50;
  }

  return v4;
}

void sub_100081E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_100081E98(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "containsIndex:", a2) ^ 1;
}

id sub_100081EB8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("%d "), a2);
}

id sub_100081EE4(id a1, NSMutableIndexSet *a2, _BKMouseDeviceEventState *a3)
{
  NSMutableIndexSet *v4;
  id v5;
  void *v6;

  v4 = a2;
  v5 = sub_100081B14((uint64_t)a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  -[NSMutableIndexSet addIndexes:](v4, "addIndexes:", v6);

  return v4;
}

void sub_100081F34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_100081F50(id a1, NSNumber *a2, _BKMouseDeviceEventState *a3)
{
  NSNumber *v4;
  _BKMouseDeviceEventState *v5;
  unsigned int v6;
  int64_t buttonMask;
  void *v8;

  v4 = a2;
  v5 = a3;
  v6 = -[NSNumber unsignedIntValue](v4, "unsignedIntValue");
  if (v5)
    buttonMask = v5->_buttonMask;
  else
    buttonMask = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", buttonMask | v6));

  return v8;
}

void sub_100081FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double sub_100081FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double v5;
  double v6;
  double v7;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = 0.0;
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2 - 1;
    v5 = BSMonotonicReferencedTimeFromMachTime(a2 - *(_QWORD *)(a1 + 8)) / *(double *)(a1 + 16);
    if (v5 <= 1.0)
    {
      v6 = *(double *)(a1 + 24);
      v7 = (v6 + *(double *)(a1 + 32)) * 0.500378425
         + ((*(double *)(a1 + 32) - v6) * 1.0062109
          + ((v6 + *(double *)(a1 + 32)) * -0.00454110206 + (*(double *)(a1 + 32) - v6) * -1.57015627 * (v5 + -0.5))
          * (v5 + -0.5))
         * (v5 + -0.5);
      v3 = v7 - *(double *)(a1 + 40);
      *(double *)(a1 + 40) = v7;
    }
  }
  return v3;
}

void sub_100082094(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  NSObject *v8;
  double v9;
  double v10;
  int v11;
  double v12;

  if (*(_QWORD *)(a1 + 72))
  {
    v6 = BSMonotonicReferencedTimeFromMachTime(a2 - *(_QWORD *)(a1 + 8)) / *(double *)(a1 + 16);
    if (v6 <= 1.0)
    {
      v9 = *(double *)(a1 + 24);
      v10 = *(double *)(a1 + 48);
      *(double *)(a1 + 40) = (v9 + *(double *)(a1 + 32)) * 0.500378425
                           + ((*(double *)(a1 + 32) - v9) * 1.0062109
                            + ((v9 + *(double *)(a1 + 32)) * -0.00454110206
                             + (*(double *)(a1 + 32) - v9) * -1.57015627 * (v6 + -0.5))
                            * (v6 + -0.5))
                           * (v6 + -0.5);
      *(double *)(a1 + 64) = (v10 + *(double *)(a1 + 56)) * 0.500378425
                           + ((*(double *)(a1 + 56) - v10) * 1.0062109
                            + ((v10 + *(double *)(a1 + 56)) * -0.00454110206
                             + (*(double *)(a1 + 56) - v10) * -1.57015627 * (v6 + -0.5))
                            * (v6 + -0.5))
                           * (v6 + -0.5);
    }
    else
    {
      v7 = BKLogMousePointer(v3, v4, v5);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v11 = 134217984;
        v12 = v6;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "skipping interpolation: %g", (uint8_t *)&v11, 0xCu);
      }

    }
    --*(_QWORD *)(a1 + 72);
  }
}

void sub_100082218(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7)
{
  double v12;
  double v13;

  sub_100081AA0(a1, a2, a7);
  v12 = *(double *)(a1 + 32);
  *(double *)(a1 + 24) = v12;
  *(double *)(a1 + 32) = a3 + v12;
  v13 = *(double *)(a1 + 56);
  *(double *)(a1 + 48) = v13;
  *(double *)(a1 + 56) = a4 + v13;
  *(_QWORD *)(a1 + 72) = 3;
  *(double *)(a1 + 80) = a5 / a3;
  *(double *)(a1 + 88) = a6 / a4;
}

void sub_1000822A8(uint64_t a1, double a2)
{
  void *v4;
  id v5;
  void *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  id v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  void *v25;

  if (a1)
  {
    if ((unint64_t)objc_msgSend(*(id *)(a1 + 16), "count") >= *(_QWORD *)(a1 + 8))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "firstObject"));
      objc_msgSend(*(id *)(a1 + 16), "removeObjectAtIndex:", 0);
      v5 = objc_msgSend(*(id *)(a1 + 24), "indexOfObject:inSortedRange:options:usingComparator:", v4, 0, objc_msgSend(*(id *)(a1 + 24), "count"), 256, &stru_1000EC268);
      if (v5 == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("this should exist")));
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          v7 = NSStringFromSelector("addValue:");
          v8 = (id)objc_claimAutoreleasedReturnValue(v7);
          v10 = (objc_class *)objc_opt_class(a1, v9);
          v11 = NSStringFromClass(v10);
          v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
          *(_DWORD *)buf = 138544642;
          v15 = v8;
          v16 = 2114;
          v17 = v12;
          v18 = 2048;
          v19 = a1;
          v20 = 2114;
          v21 = CFSTR("BKMousePointerEventAccumulator.mm");
          v22 = 1024;
          v23 = 93;
          v24 = 2114;
          v25 = v6;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);

        }
        _bs_set_crash_log_message(objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));
        __break(0);
        JUMPOUT(0x1000824E8);
      }
      objc_msgSend(*(id *)(a1 + 24), "removeObjectAtIndex:", v5);

    }
    v13 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a2));
    objc_msgSend(*(id *)(a1 + 24), "insertObject:atIndex:", v13, objc_msgSend(*(id *)(a1 + 24), "indexOfObject:inSortedRange:options:usingComparator:", v13, 0, objc_msgSend(*(id *)(a1 + 24), "count"), 1024, &stru_1000EC288));
    objc_msgSend(*(id *)(a1 + 16), "addObject:", v13);

  }
}

void sub_100082524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

int64_t sub_100082574(id a1, id a2, id a3)
{
  return (int64_t)_objc_msgSend(a2, "compare:", a3);
}

int64_t sub_10008257C(id a1, id a2, id a3)
{
  return (int64_t)_objc_msgSend(a2, "compare:", a3);
}

_QWORD *sub_100082584(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint8_t v6[16];

  if (result[7] == *(_QWORD *)(result[4] + 368))
  {
    v2 = result;
    v3 = BKLogMousePointer(result, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v6 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, " -> discrete scroll -- end phase", v6, 2u);
    }

    v5 = v2[5];
    if (v5)
      *(_WORD *)(v5 + 18) = 4;
    return objc_msgSend((id)v2[4], "_terminateScrollingForSender:", v2[6]);
  }
  return result;
}

void sub_1000827AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id sub_1000827E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  if (a4)
    v8 = *(unsigned int *)(a4 + 8);
  else
    v8 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDEventDeferringToken tokenForIdentifierOfCAContext:](BKSHIDEventDeferringToken, "tokenForIdentifierOfCAContext:", v8));
  objc_msgSend(a3, "setToken:", v9);

  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD **)(v10 + 40);
  if (v11)
    v11 = (_QWORD *)v11[2];
  v12 = v11;
  sub_1000123E4((double *)v10, a3, v12);

  BKSHIDEventSetAttributes(a2, a3);
  if (a4)
    v13 = *(unsigned int *)(a4 + 12);
  else
    v13 = 0;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "sendEvent:toClientTaskPort:", a2, v13);
}

void sub_1000828A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000828B8(id *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  BKHIDEventCollector *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  id obj;
  uint64_t v24;
  id v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];
  _BYTE v42[128];

  v7 = mach_absolute_time();
  v8 = objc_alloc_init(BKHIDEventCollector);
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  obj = a2;
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
  if (v9)
  {
    v24 = *(_QWORD *)v37;
    do
    {
      v10 = 0;
      v26 = v9;
      do
      {
        if (*(_QWORD *)v37 != v24)
          objc_enumerationMutation(obj);
        v11 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * v10);
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v35 = 0u;
        v12 = *(id *)(v11 + 272);
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
        v27 = v10;
        if (v13)
        {
          v14 = *(_QWORD *)v33;
          do
          {
            v15 = 0;
            do
            {
              if (*(_QWORD *)v33 != v14)
                objc_enumerationMutation(v12);
              v16 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)v15);
              if (v16)
                v17 = *(_QWORD *)(v16 + 32);
              else
                v17 = 0;
              if ((a3 & ~v17) == 0)
                sub_100082DAC(a1, v11, (__IOHIDEvent *)v16, (uint64_t)v8, v7, 0);
              v15 = (char *)v15 + 1;
            }
            while (v13 != v15);
            v18 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
            v13 = v18;
          }
          while (v18);
        }

        if ((a4 & 1) == 0)
          *(_QWORD *)(v11 + 48) = 2;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v19 = a1[9];
        v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v28, v40, 16);
        if (v20)
        {
          v21 = *(_QWORD *)v29;
          do
          {
            v22 = 0;
            do
            {
              if (*(_QWORD *)v29 != v21)
                objc_enumerationMutation(v19);
              objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v22), "touchDidSoftCancel:", *(unsigned int *)(v11 + 16));
              v22 = (char *)v22 + 1;
            }
            while (v20 != v22);
            v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v28, v40, 16);
          }
          while (v20);
        }

        v10 = v27 + 1;
      }
      while ((id)(v27 + 1) != v26);
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
    }
    while (v9);
  }

  sub_100015340((uint64_t)a1, obj, a3);
  sub_100015510((uint64_t)a1, (uint64_t)v8);

}

void sub_100082B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100082BC4(id *a1, uint64_t a2)
{
  BKHIDEventCollector *v4;

  v4 = objc_alloc_init(BKHIDEventCollector);
  sub_100082C34(a1, a2, (uint64_t)v4, 0);
  sub_100015510((uint64_t)a1, (uint64_t)v4);

}

void sub_100082C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100082C34(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  if (a1)
  {
    v8 = mach_absolute_time();
    if (a2)
      v9 = *(unsigned int *)(a2 + 8);
    else
      v9 = 0;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[16], "objectForKey:", v9, 0));
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v15;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v15 != v12)
            objc_enumerationMutation(v10);
          sub_100082DAC(a1, *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v13), (__IOHIDEvent *)a2, a3, v8, a4);
          v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v11);
    }

    objc_msgSend(a1[16], "removeObjectForKey:", v9);
    sub_10000F090((uint64_t)a1, a2);
  }
}

void sub_100082D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100082DAC(void *a1, uint64_t a2, __IOHIDEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __IOHIDEvent *DigitizerEvent;
  __IOHIDEvent *v11;
  __IOHIDEvent *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  id v21;
  id *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  const void *v27;
  id v28;
  __n128 v29;
  void *v30;
  id v31;
  unsigned int v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];

  DigitizerEvent = a3;
  if (a3)
    v32 = *((_DWORD *)a3 + 2);
  else
    v32 = 0;
  v11 = a3;
  v12 = v11;
  if (!a4)
  {

    v20 = 0;
LABEL_20:
    v22 = a1;
    DigitizerEvent = (__IOHIDEvent *)IOHIDEventCreateDigitizerEvent(0, a5, 3, 0, 0, 131, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0x4400000000);
    v23 = v22[1];
    IOHIDEventSetSenderID(DigitizerEvent, objc_msgSend(v23, "senderID"));

    IOHIDEventSetIntegerValue(DigitizerEvent, 720921, *((unsigned __int8 *)v22 + 206));
    IOHIDEventSetIntegerValue(DigitizerEvent, 4, *((unsigned __int8 *)v22 + 207));

    if (a6)
      IOHIDEventSetIntegerValue(DigitizerEvent, 720923, a6);
    v21 = objc_alloc_init((Class)BKSHIDEventDigitizerAttributes);

    v24 = (void *)objc_claimAutoreleasedReturnValue(+[BKSHIDEventDeferringToken tokenForIdentifierOfCAContext:](BKSHIDEventDeferringToken, "tokenForIdentifierOfCAContext:", v32));
    objc_msgSend(v21, "setToken:", v24);

    objc_msgSend(v21, "setInitialTouchTimestamp:", *((double *)v22 + 12));
    v25 = objc_alloc_init((Class)NSMutableArray);
    objc_msgSend(v21, "setPathAttributes:", v25);

    sub_1000113BC(a4, DigitizerEvent, v21, v12);
    CFRelease(DigitizerEvent);
    goto LABEL_23;
  }
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v13 = *(id *)(a4 + 16);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v35;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v35 != v15)
          objc_enumerationMutation(v13);
        v17 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v16);
        if (v17)
        {
          if (*(__IOHIDEvent **)(v17 + 24) == v12)
          {
            DigitizerEvent = *(__IOHIDEvent **)(v17 + 8);
            v31 = *(id *)(v17 + 16);
            goto LABEL_18;
          }
        }
        else if (!DigitizerEvent)
        {
          v31 = 0;
LABEL_18:
          v14 = v31;
          v19 = 1;
          goto LABEL_19;
        }
        v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      v18 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      v14 = v18;
    }
    while (v18);
  }
  DigitizerEvent = 0;
  v19 = 0;
LABEL_19:

  v20 = v14;
  v21 = v20;
  if ((v19 & 1) == 0)
    goto LABEL_20;
LABEL_23:
  v26 = IOHIDEventCreateDigitizerEvent(0, a5, *(unsigned int *)(a2 + 56), *(unsigned int *)(a2 + 8), 0, 131, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0x4400000000);
  v27 = (const void *)v26;
  if (a6)
    IOHIDEventSetIntegerValue(v26, 720923, a6);
  v28 = objc_alloc_init((Class)BKSHIDEventDigitizerPathAttributes);
  objc_msgSend(v28, "setPathIndex:", *(_QWORD *)(a2 + 8));
  objc_msgSend(v28, "setTouchIdentifier:", *(unsigned int *)(a2 + 16));
  objc_msgSend(v28, "setUserIdentifier:", *(unsigned int *)(a2 + 20));
  objc_msgSend(v28, "setLocus:", *(unsigned __int8 *)(a2 + 288));
  IOHIDEventAppendEvent(DigitizerEvent, v27, 0, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "pathAttributes"));
  objc_msgSend(v30, "addObject:", v28);

  CFRelease(v27);
}

void sub_100083158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1000831D8(id a1, BKTouchContact *a2)
{
  return a2->_presence == 2 && !a2->_touchDetached;
}

uint64_t sub_1000831FC(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  __n128 v10;
  const void *v11;
  id *v12;
  void *v13;
  BKTouchHitTestContextMap *v14;
  uint64_t v15;
  uint64_t v16;
  BKHIDEventCollector *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD v24[5];
  NSObject *v25;
  const void *v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  uint8_t v35[8];
  _QWORD *v36;

  v4 = BKLogTouchEvents(a1);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    v34 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "synth and post:%{public}@", buf, 0xCu);
  }

  sub_100083580((uint64_t)buf, (void *)a1, 0);
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v6 = a2;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v30 != v8)
          objc_enumerationMutation(v6);
        sub_100083B4C(*(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i), (uint64_t)buf, 4);
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
    }
    while (v7);
  }

  v11 = (const void *)sub_1000836F8(buf, v10);
  v12 = sub_1000155EC(a1, (uint64_t)v11, *(void **)(a1 + 112));
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v14 = sub_100013600(*(_QWORD *)(a1 + 24), (uint64_t)v11, v13, *(void **)(a1 + 176), *(void **)(a1 + 120), *(void **)(a1 + 128));
  v15 = objc_claimAutoreleasedReturnValue(v14);
  v16 = v15;
  if (!v15)
  {
    objc_storeStrong((id *)(a1 + 112), v13);
LABEL_14:
    v17 = objc_alloc_init(BKHIDEventCollector);
    *(_QWORD *)v35 = v17;
    v18 = (id)a1;
    v36 = v18;
    v28 = 0;
    v19 = (_QWORD *)v18[5];
    if (v19)
      v19 = (_QWORD *)v19[3];
    v20 = v19;
    sub_1000173F4((uint64_t)v20, &v28, (unsigned __int8 *)&v29);

    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100083754;
    v24[3] = &unk_1000EC4F0;
    v24[4] = v18;
    v21 = v17;
    v25 = v21;
    v26 = v11;
    v27 = v28;
    sub_100013420((_QWORD *)v16, (uint64_t)v24);

    sub_100013358((uint64_t *)v35);
    goto LABEL_19;
  }
  if (*(_BYTE *)(v15 + 8))
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(v15 + 16);
  objc_storeStrong((id *)(a1 + 112), v13);
  if (objc_msgSend(*(id *)(v16 + 24), "count"))
    goto LABEL_14;
  v22 = BKLogTouchEvents(0);
  v21 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v35 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "no events for regular clients", v35, 2u);
  }
LABEL_19:

  if (v11)
    CFRelease(v11);
  return sub_100083964((uint64_t)buf);
}

void sub_1000834F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  const void *v17;
  void *v18;
  void *v19;
  va_list va;

  va_start(va, a17);

  if (v17)
    CFRelease(v17);
  sub_100083964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100083580(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  id *v7;
  uint64_t DigitizerEvent;
  id v9;

  v5 = a2;
  *(_OWORD *)(a1 + 16) = xmmword_1000B3D90;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 200) = 0;
  v6 = mach_absolute_time();
  *(_QWORD *)(a1 + 200) = v6;
  v7 = (id *)v5;
  DigitizerEvent = IOHIDEventCreateDigitizerEvent(0, v6, 3, 0, 0, a3, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0x4400000000);
  v9 = v7[1];
  IOHIDEventSetSenderID(DigitizerEvent, objc_msgSend(v9, "senderID"));

  IOHIDEventSetIntegerValue(DigitizerEvent, 720921, *((unsigned __int8 *)v7 + 206));
  IOHIDEventSetIntegerValue(DigitizerEvent, 4, *((unsigned __int8 *)v7 + 207));

  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  *(_QWORD *)a1 = DigitizerEvent;

  return a1;
}

void sub_1000836B0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(_BYTE *)(v2 + 192))
  {
    free(*(void **)(v2 + 8));
    *(_BYTE *)(v2 + 192) = 0;
  }
  if (*(_QWORD *)v2)
    CFRelease(*(CFTypeRef *)v2);

  _Unwind_Resume(a1);
}

uint64_t sub_1000836F8(_QWORD *a1, __n128 a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = a1[2];
  if (v3)
  {
    v4 = (uint64_t *)a1[1];
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      IOHIDEventAppendEvent(*a1, v6, 0, a2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_1000839D4((uint64_t)a1);
  result = *a1;
  *a1 = 0;
  return result;
}

void sub_100083754(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  id *v13;
  uint64_t IntegerValue;
  int v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  int v19;

  if (a2)
    v7 = *(unsigned int *)(a2 + 8);
  else
    v7 = 0;
  v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "shouldCancelTouchesDeliveredToContextId:withInitialTouchTimestamp:", v7, *(double *)(*(_QWORD *)(a1 + 32) + 96));
  if ((_DWORD)v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "objectForKey:", v7));
    if ((uint64_t)objc_msgSend(v9, "count") >= 1)
    {
      v10 = BKLogTouchDeliveryPolicy();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v18 = 67109120;
        v19 = v7;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "(Synth) TDPS said this context should cancel: %X", (uint8_t *)&v18, 8u);
      }

      v13 = *(id **)(a1 + 32);
      v12 = *(_QWORD *)(a1 + 40);
      IntegerValue = IOHIDEventGetIntegerValue(*(_QWORD *)(a1 + 48), 720923);
      sub_100082C34(v13, a2, v12, IntegerValue);
    }

  }
  else if (a2)
  {
    v15 = *(unsigned __int8 *)(a1 + 56);
    sub_10000FCE0(*(void **)(a1 + 32), *(_QWORD *)(a1 + 48), a2, *(_QWORD *)(a1 + 40), v15 == 1, a4, *(double *)(*(_QWORD *)(a1 + 32) + 96));
    if (v15 == 1)
      sub_10000AE94(*(_QWORD *)(a1 + 32), a2);
  }
  else
  {
    v16 = BKLogTouchEvents(v8);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = 67109120;
      v19 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "(Synth) Missing destination for hit tested context: %X", (uint8_t *)&v18, 8u);
    }

  }
}

void sub_100083948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100083964(uint64_t a1)
{
  sub_1000839D4(a1);
  if (*(_BYTE *)(a1 + 192))
  {
    free(*(void **)(a1 + 8));
    *(_BYTE *)(a1 + 192) = 0;
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  return a1;
}

void sub_1000839A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 192))
  {
    free(*(void **)(v1 + 8));
    *(_BYTE *)(v1 + 192) = 0;
  }
  if (*(_QWORD *)v1)
    CFRelease(*(CFTypeRef *)v1);
  _Unwind_Resume(exception_object);
}

double sub_1000839D4(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef *v3;
  uint64_t v4;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(CFTypeRef **)(a1 + 8);
    v4 = 8 * v2;
    do
    {
      if (*v3)
        CFRelease(*v3);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  if (*(_BYTE *)(a1 + 192))
  {
    free(*(void **)(a1 + 8));
    *(_BYTE *)(a1 + 192) = 0;
  }
  result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_1000B3D90;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  return result;
}

void sub_100083A48(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  _BOOL8 v8;
  _OWORD v9[2];

  objc_msgSend(a2, "setOriginIdentifier:", 0xC181BADB23D8497BLL);
  objc_msgSend(a2, "setEventType:", 11);
  sub_10001C04C(a2, (unsigned int *)(a1 + 56));
  v4 = sub_10001C094(a1 + 56);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(a2, "setHitTestInformationFromStartEvent:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(a2, "setHitTestInformationFromEndEvent:", v5);
  objc_msgSend(a2, "setSecureNameStatus:", *(_QWORD *)(a1 + 360));
  objc_msgSend(a2, "setContext:", objc_msgSend(*(id *)(a1 + 40), "authenticationMessageContext"));
  v6 = *(_OWORD *)(a1 + 384);
  v9[0] = *(_OWORD *)(a1 + 368);
  v9[1] = v6;
  objc_msgSend(a2, "setVersionedPID:", BSVersionedPIDForAuditToken(v9));
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    v8 = *(unsigned __int8 *)(v7 + 8) != 0;
  else
    v8 = 0;
  objc_msgSend(a2, "setRegistrantEntitled:", v8);

}

void sub_100083B3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100083B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_100083C04(a2, *(_QWORD *)(a1 + 8), a3, *(unsigned int *)(a1 + 56));
  IOHIDEventSetFloatValue(v4, 720896, *(double *)(a1 + 128));
  IOHIDEventSetFloatValue(v4, 720897, *(double *)(a1 + 136));
  result = IOHIDEventSetFloatValue(v4, 720898, *(double *)(a1 + 144));
  v6 = *(_QWORD *)(a1 + 32);
  if (v6 == 2)
  {
    result = IOHIDEventSetIntegerValue(v4, 720905, 1);
    v6 = *(_QWORD *)(a1 + 32);
  }
  if (v6 >= 1)
    return IOHIDEventSetIntegerValue(v4, 720904, 1);
  return result;
}

uint64_t sub_100083C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DigitizerEvent;
  void **v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t i;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  int v19;

  DigitizerEvent = IOHIDEventCreateDigitizerEvent(0, *(_QWORD *)(a1 + 200), a4, a2, 0, a3, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0x4400000000);
  v6 = (void **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 < *(_QWORD *)(a1 + 24))
  {
    v8 = *v6;
LABEL_12:
    v8[v7] = DigitizerEvent;
    *(_QWORD *)(a1 + 16) = v7 + 1;
    return DigitizerEvent;
  }
  v9 = BKLogTouchEvents();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 134218240;
    v17 = a1 + 8;
    v18 = 1024;
    v19 = v15;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "array:%p exceeded capacity:%d; moving to heap",
      buf,
      0x12u);
  }

  v11 = *(_QWORD *)(a1 + 24);
  v12 = malloc_type_calloc(2 * v11, 8uLL, 0x2004093837F09uLL);
  if (v12)
  {
    v8 = v12;
    if (v11)
    {
      for (i = 0; i != v11; ++i)
        v12[i] = *((_QWORD *)*v6 + i);
    }
    if (*(_BYTE *)(a1 + 192))
      free(*v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 24) = 2 * v11;
    *(_BYTE *)(a1 + 192) = 1;
    v7 = *(_QWORD *)(a1 + 16);
    goto LABEL_12;
  }
  return DigitizerEvent;
}

id *sub_100083DA8(id *result, uint64_t a2)
{
  id *v2;

  v2 = result;
  if (a2 == 3)
  {
    objc_msgSend(result[4], "addObject:", result[5]);
    result = (id *)objc_msgSend(v2[6], "shouldAvoidHitTesting");
    if ((_DWORD)result)
      *(_QWORD *)(*((_QWORD *)v2[7] + 1) + 24) = 1;
  }
  else if (a2 == 2 || a2 == 1)
  {
    return (id *)objc_msgSend(result[4], "addObject:", result[5]);
  }
  return result;
}

BKHitTestResultPathLocation *sub_100083E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  BKHitTestResultPathLocation *v7;
  int64_t v8;
  __int128 v9;
  _OWORD v11[3];
  CGFloat v12;

  sub_10000F364((uint64_t)v11, a1, a2 + 192, a3, a4);
  v7 = objc_alloc_init(BKHitTestResultPathLocation);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v9 = v11[1];
    *(_OWORD *)&v7->_pathLocation.locationsAreValid = v11[0];
    *(_OWORD *)&v7->_pathLocation.location.y = v9;
    *(_OWORD *)&v7->_pathLocation.hitTestLocation.y = v11[2];
    v7->_pathLocation.preciseLocation.y = v12;
    v7->_pathIndex = v8;
    v7->_contextRelationship = a5;
  }
  return v7;
}

uint64_t sub_100083E88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;
  id v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  uint32_t v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  int v20;

  if (*(_BYTE *)(a2 + 288))
  {
    v3 = BKLogTouchEvents(a1);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_DWORD *)(a2 + 16);
      v17 = 67109120;
      v18 = v5;
      v6 = "transfer: touch %X detached";
LABEL_14:
      v14 = v4;
      v15 = 8;
      goto LABEL_15;
    }
  }
  else if (*(_BYTE *)(a2 + 289))
  {
    v7 = BKLogTouchEvents(a1);
    v4 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_DWORD *)(a2 + 16);
      v17 = 67109120;
      v18 = v16;
      v6 = "transfer: touch %X already transferred once";
      goto LABEL_14;
    }
  }
  else
  {
    if (!*(_QWORD *)(a1 + 32))
      return 1;
    v10 = objc_msgSend(*(id *)(a2 + 272), "containsObject:");
    if (!(_DWORD)v10)
      return 1;
    v11 = BKLogTouchEvents(v10);
    v4 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_DWORD *)(a2 + 16);
      v13 = *(_DWORD *)(a1 + 40);
      v17 = 67109376;
      v18 = v12;
      v19 = 1024;
      v20 = v13;
      v6 = "transfer: touch %X already in contextID:%X";
      v14 = v4;
      v15 = 14;
LABEL_15:
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v17, v15);
    }
  }

  return 0;
}

int64_t sub_10008400C(id a1, BKTouchContact *a2, BKTouchContact *a3)
{
  int64_t pathIndex;
  int64_t v4;
  BOOL v5;
  int64_t v6;

  pathIndex = a2->_pathIndex;
  v4 = a3->_pathIndex;
  v5 = pathIndex <= v4;
  if (pathIndex >= v4)
    v6 = 0;
  else
    v6 = -1;
  if (v5)
    return v6;
  else
    return 1;
}

void sub_100084024(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "succinctDescription"));
  objc_msgSend(v2, "appendString:withName:");

}

void sub_10008406C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_100085154(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "monitor:displayDidBecomeActive:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

id sub_100085160(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "monitor:activeDisplayPropertiesDidChange:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

id sub_10008516C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "monitor:displayDidBecomeInactive:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1000851B8(id a1)
{
  BKSharedCADisplayProvider *v1;
  void *v2;

  v1 = objc_alloc_init(BKSharedCADisplayProvider);
  v2 = (void *)qword_100117578;
  qword_100117578 = (uint64_t)v1;

}

void sub_100086434(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;

  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(a3, "displayId")));
  objc_msgSend(v4, "setObject:forKey:", v5, v6);

}

id sub_1000864AC(id a1, CADisplay *a2)
{
  return -[CADisplay immutableCopy](a2, "immutableCopy");
}

void sub_1000864C4(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;

  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(a3, "displayId")));
  objc_msgSend(v4, "setObject:forKey:", v5, v6);

}

id sub_1000869DC(void *a1, char a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  char *v7;
  void *v8;
  unsigned int v10;

  v3 = a1;
  v4 = objc_alloc_init((Class)NSMutableDictionary);
  if (objc_msgSend(v3, "digitizerEnabled"))
    objc_msgSend(v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("ScreenOn"));
  if ((a2 & 1) != 0)
    goto LABEL_8;
  if (objc_msgSend(v3, "proximityDetectionMode") == 6)
  {
    v5 = 6;
    goto LABEL_9;
  }
  if (!v3)
    goto LABEL_16;
  if ((objc_msgSend(v3, "estimatedProximityMode") & 1) != 0)
  {
LABEL_8:
    v5 = 3;
    goto LABEL_9;
  }
  v10 = objc_msgSend(v3, "proximityDetectionMode") - 1;
  if (v10 <= 0xC)
    v5 = dword_1000B3D2C[v10];
  else
LABEL_16:
    v5 = 0;
LABEL_9:
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v5));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("ProxDetectionMode"));

  v7 = (char *)objc_msgSend(v3, "displayState");
  if ((unint64_t)(v7 - 1) <= 2)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v7));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v8, CFSTR("DisplayState"));

  }
  if (objc_msgSend(v3, "changeSource") == (id)4)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", &off_1000F75A0, CFSTR("ChangeSource"));

  return v4;
}

void sub_100086B34(id a1)
{
  BKWatchdogService *v1;
  void *v2;

  if (!qword_100117580)
  {
    v1 = objc_alloc_init(BKWatchdogService);
    v2 = (void *)qword_100117580;
    qword_100117580 = (uint64_t)v1;

  }
}

uint64_t sub_100086B78(uint64_t a1)
{
  return mach_port_mod_refs(mach_task_self_, *(_DWORD *)(a1 + 32), 1u, -1);
}

uint64_t sub_100086B98(uint64_t a1)
{
  return dispatch_mig_server(*(_QWORD *)(a1 + 32), 40, sub_10009CE9C);
}

id sub_100086F88(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), CFSTR("displayUUID"));
}

void sub_10008740C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_100087994(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[5];
  id v5;

  v1 = *(void **)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(void **)(v2 + 32);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100087A20;
    v4[3] = &unk_1000ECD80;
    v4[4] = v2;
    v5 = v1;
    objc_msgSend(v3, "terminateAlternateSystemApp:forReason:andReport:withDescription:completion:", v5, 0, 0, 0, v4);

  }
}

void sub_100087A20(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "remoteObjectProxy"));
  objc_msgSend(v2, "alternateSystemAppWithBundleIDDidTerminate:", *(_QWORD *)(a1 + 40));

  v4 = BKLogAlternateSystemApp(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543362;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Server] Sent notification that alternate system app \"%{public}@\" did terminate", (uint8_t *)&v7, 0xCu);
  }

}

void sub_100087AE4(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD v11[5];
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100087C28;
  v16[3] = &unk_1000EC808;
  v2 = *(void **)(a1 + 40);
  v16[4] = *(_QWORD *)(a1 + 32);
  v17 = v2;
  v3 = objc_retainBlock(v16);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    v6 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100087D2C;
    v13[3] = &unk_1000EC830;
    v7 = v3;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(a1 + 40);
    v15 = v7;
    v13[4] = v8;
    v14 = v9;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100087E24;
    v11[3] = &unk_1000EC858;
    v10 = *(void **)(a1 + 40);
    v11[4] = *(_QWORD *)(a1 + 32);
    v12 = v10;
    objc_msgSend(v6, "openAlternateSystemApp:options:withResult:andExitBlock:", v5, 0, v13, v11);

  }
  else
  {
    ((void (*)(_QWORD *, uint64_t))v3[2])(v3, 2);
  }

}

void sub_100087C28(uint64_t a1, unsigned int a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  void *v12;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.backboardd.altsysapp"), a2, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "remoteObjectProxy"));
  objc_msgSend(v4, "alternateSystemAppWithBundleID:failedToOpenWithResult:", *(_QWORD *)(a1 + 40), v3);

  v6 = BKLogAlternateSystemApp(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = 138543618;
    v10 = v8;
    v11 = 2114;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Server] Sent notification that alternate system app \"%{public}@\" failed to open with error %{public}@", (uint8_t *)&v9, 0x16u);
  }

}

void sub_100087D2C(_QWORD *a1, int a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if (a2)
  {
    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 16), "remoteObjectProxy"));
    objc_msgSend(v3, "alternateSystemAppWithBundleIDDidOpen:", a1[5]);

    v5 = BKLogAlternateSystemApp(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = a1[5];
      v8 = 138543362;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[Server] Sent notification that alternate system app \"%{public}@\" did open", (uint8_t *)&v8, 0xCu);
    }

  }
}

void sub_100087E24(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  id v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "remoteObjectProxy"));
  objc_msgSend(v4, "alternateSystemAppWithBundleID:didExitWithContext:", *(_QWORD *)(a1 + 40), v3);

  v6 = BKLogAlternateSystemApp(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = 138543618;
    v10 = v8;
    v11 = 2114;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Server] Sent notification that alternate system app \"%{public}@\" did exit with reason %{public}@", (uint8_t *)&v9, 0x16u);
  }

}

id sub_100087F0C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[5];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "terminateAnyAlternateSystemApp");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100087F7C;
  v5[3] = &unk_1000ECDA8;
  v5[4] = v2;
  return objc_msgSend(v3, "unblockSystemAppForAlternateSystemAppWithCompletion:", v5);
}

void sub_100087F7C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "remoteObjectProxy"));
  objc_msgSend(v1, "didUnblockSystemAppForAlternateSystemApp");

  v3 = BKLogAlternateSystemApp(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[Server] Sent notification that system app is no longer blocked for alternate system app", v5, 2u);
  }

}

id sub_100087FFC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100088054;
  v4[3] = &unk_1000ECDA8;
  v4[4] = v1;
  return objc_msgSend(v2, "blockSystemAppForAlternateSystemAppWithCompletion:", v4);
}

void sub_100088054(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "remoteObjectProxy"));
  objc_msgSend(v1, "didBlockSystemAppForAlternateSystemApp");

  v3 = BKLogAlternateSystemApp(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[Server] Sent notification that system app is blocked for alternate system app", v5, 2u);
  }

}

id sub_1000880D4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_queue_listener:shouldAcceptNewConnection:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100088108(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleInterruptedOrInvalidatedConnection");

}

void sub_100088134(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleInterruptedOrInvalidatedConnection");

}

id sub_100088160(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setClientConnection:", 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "terminateAnyAlternateSystemApp");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "unblockSystemAppForAlternateSystemAppWithCompletion:", 0);
}

void sub_1000881E0(id a1)
{
  BKAlternateSystemAppServer *v1;
  void *v2;

  v1 = objc_alloc_init(BKAlternateSystemAppServer);
  v2 = (void *)qword_100117590;
  qword_100117590 = (uint64_t)v1;

}

id sub_1000884D4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "appendSuccinctDescriptionToFormatter:", *(_QWORD *)(a1 + 32));
}

void sub_100088B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008969C(uint64_t a1)
{
  void *v2;
  NSMutableDictionary *v3;
  void *v4;
  id v5;
  void *v6;
  float v7;
  void *v8;
  float v9;
  void *v10;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  BKSBacklightFeatures *v17;

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    v12 = 0;
    v13 = &v12;
    v14 = 0x3032000000;
    v15 = sub_100089874;
    v16 = sub_100089884;
    v17 = objc_opt_new(BKSBacklightFeatures);
    v2 = *(void **)(a1 + 88);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10008988C;
    v11[3] = &unk_1000EC908;
    v11[4] = a1;
    v11[5] = &v12;
    objc_msgSend(v2, "enumerateWithBlock:", v11);
    v3 = objc_opt_new(NSMutableDictionary);
    v4 = (void *)v13[5];
    if (v4)
      v5 = objc_msgSend(v4, "disableFeatures");
    else
      v5 = 0;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v6, CFSTR("Status"));

    objc_msgSend((id)v13[5], "fixedBrightnessNitsWhileDisabled");
    if (v7 >= 0.0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v7));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v8, CFSTR("FixBrightnessNits"));

    }
    objc_msgSend((id)v13[5], "fixedBrightnessLevelWhileDisabled");
    if (v9 >= 0.0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v9));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v10, CFSTR("FixBrightness"));

    }
    sub_10000A674(a1, v3, CFSTR("CoreBrightnessFeaturesDisabled"));

    _Block_object_dispose(&v12, 8);
  }
}

void sub_100089850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100089874(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100089884(uint64_t a1)
{

}

void sub_10008988C(uint64_t a1, uint64_t a2, void *a3)
{
  id *v4;
  id *v5;
  id v6;
  id v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  id v14;
  uint64_t v15;
  float v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  v4 = a3;
  v5 = v4;
  if (v4 && (v6 = v4[1]) != 0)
  {
    v7 = v6;
    if (objc_msgSend(v6, "disableFeatures")
      && (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "disableFeatures") & 1) == 0)
    {
      goto LABEL_24;
    }
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "fixedBrightnessNitsWhileDisabled");
    v9 = v8;
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "fixedBrightnessLevelWhileDisabled");
    v11 = v10;
    objc_msgSend(v7, "fixedBrightnessNitsWhileDisabled");
    v13 = v12;
    v14 = objc_msgSend(v7, "fixedBrightnessLevelWhileDisabled");
    if (v9 < 0.0 && v11 < 0.0 && (v13 >= 0.0 || v16 >= 0.0))
      goto LABEL_24;
    if ((v11 >= 0.0 || v16 < 0.0)
      && (v11 >= 0.0 ? (v17 = v16 <= v11) : (v17 = 1), v17 && (v9 >= 0.0 ? (v18 = v13 <= v9) : (v18 = 1), v18)))
    {
      v19 = BKLogBacklight(v14, v15);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88);
        v27 = 138543618;
        v28 = v21;
        v29 = 2114;
        v30 = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "effective backlight features:%{public}@ clients:(%{public}@)", (uint8_t *)&v27, 0x16u);
      }

    }
    else
    {
LABEL_24:
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v24 = *(void **)(v23 + 40);
      *(_QWORD *)(v23 + 40) = v7;
      v7 = v7;

    }
  }
  else
  {
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v26 = *(void **)(v25 + 40);
    *(_QWORD *)(v25 + 40) = 0;

  }
}

void sub_100089A64(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  void *v6;
  id v7;

  if (a1 && (*(_DWORD *)(a1 + 16) != (_DWORD)a2 || !*(_BYTE *)(a1 + 80)))
  {
    *(_DWORD *)(a1 + 16) = a2;
    *(_BYTE *)(a1 + 80) = 1;
    v5 = *(void **)(a1 + 96);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
    objc_msgSend(v5, "setProperty:forKey:", v6, CFSTR("BrightnessCurveLevel"));

    if (a3)
    {
      v7 = (id)objc_claimAutoreleasedReturnValue(+[BKSDefaults localDefaults](BKSDefaults, "localDefaults"));
      objc_msgSend(v7, "setBrightnessCurve:", a2);

    }
  }
}

void sub_100089B24(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  id v7;
  id WeakRetained;
  _QWORD block[4];
  id v10;
  id v11;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  v7 = v5;
  if (WeakRetained)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100089BE4;
    block[3] = &unk_1000ECD80;
    v10 = v7;
    v11 = WeakRetained;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_100089BE4(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  id v19;

  v3 = *(void **)(a1 + 32);
  v4 = objc_opt_class(NSDictionary, a2);
  v5 = v3;
  v6 = v5;
  if (v4)
  {
    if ((objc_opt_isKindOfClass(v5, v4) & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = v7;

  if (v8)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("Brightness")));
    v13 = objc_opt_class(NSNumber, v12);
    v14 = v11;
    v15 = v14;
    if (v13 && (objc_opt_isKindOfClass(v14, v13) & 1) != 0)
    {

      if (v15)
      {
        objc_msgSend(v15, "floatValue");
        objc_msgSend(*(id *)(a1 + 40), "setBrightnessLevel:reason:options:", CFSTR("BrightnessSystemDidChange"), 4);

        goto LABEL_16;
      }
    }
    else
    {

    }
  }
  v16 = BKLogBacklight(v9, v10);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    v18 = 138543362;
    v19 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "property change handler arguments seem bogus: %{public}@", (uint8_t *)&v18, 0xCu);
  }

LABEL_16:
}

void sub_100089D58(id a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  BKDisplayBrightnessController *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint8_t v10[16];

  v1 = BKLogBacklight(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "instantiating BrightnessSystem", v10, 2u);
  }

  v3 = objc_alloc_init((Class)BrightnessSystem);
  v4 = [BKDisplayBrightnessController alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[BKSystemShellSentinel sharedInstance](BKSystemShellSentinel, "sharedInstance"));
  v6 = sub_10001A7F4();
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = -[BKDisplayBrightnessController _initWithBrightnessSystem:systemShellSentinel:orientationManager:](v4, "_initWithBrightnessSystem:systemShellSentinel:orientationManager:", v3, v5, v7);
  v9 = (void *)qword_1001175A0;
  qword_1001175A0 = (uint64_t)v8;

}

void sub_10008A2A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  int v6;
  void *v7;

  v1 = a1;
  LODWORD(a1) = dword_1001168B4;
  if (dword_1001168B4 != -1
    || (notify_register_check("com.apple.backboardd.rawOrientation", &dword_1001168B4),
        a1 = dword_1001168B4,
        dword_1001168B4 != -1))
  {
    notify_set_state(a1, *(_QWORD *)(v1 + 40));
    a1 = notify_post("com.apple.backboardd.rawOrientation");
  }
  v2 = BKLogOrientationDevice(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = BSDeviceOrientationDescription(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 72));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = 138543362;
    v7 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Current raw accelerometer device orientation changed to: %{public}@", (uint8_t *)&v6, 0xCu);

  }
}

void sub_10008A3A8(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (!a1[12])
  {
    v2 = BKLogOrientationDevice(a1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v4 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Resetting device orientation.", v4, 2u);
    }

    kdebug_trace(730464776, 0, 0, 0, 0);
    sub_10008A468(a1, 0, 1);
    if (a1[7] != 1)
    {
      a1[7] = 1;
      sub_10008A5B8((uint64_t)a1, 1);
    }
  }
}

void sub_10008A468(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  NSObject *v6;
  uint64_t IsValid;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  void (*v13)(uint64_t);
  void *v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = a2;
  if (a1[11] != a2)
  {
    a1[11] = a2;
    v6 = a1[18];
    *(_QWORD *)&v12 = _NSConcreteStackBlock;
    *((_QWORD *)&v12 + 1) = 3221225472;
    v13 = sub_10008A714;
    v14 = &unk_1000ECB60;
    v15 = a1;
    v16 = a2;
    dispatch_async(v6, &v12);
    a2 = a1[11];
  }
  if (a2)
  {
    if (a1[7] != a2)
    {
      a1[7] = a2;
      sub_10008A5B8((uint64_t)a1, a2);
    }
    if ((a3 & 1) != 0 || a1[10] == -1)
    {
      IsValid = BSInterfaceOrientationIsValid(v4);
      if ((_DWORD)IsValid)
      {
        a1[10] = v4;
        v8 = BKLogOrientationDevice(IsValid);
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = BSInterfaceOrientationDescription(a1[10]);
          v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          LODWORD(v12) = 138543362;
          *(_QWORD *)((char *)&v12 + 4) = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Last effective interface orientation changed to: %{public}@", (uint8_t *)&v12, 0xCu);

        }
      }
    }
  }
}

void sub_10008A5B8(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 144);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10008A610;
  v3[3] = &unk_1000ECB60;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_async(v2, v3);
}

void sub_10008A610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  int v6;
  void *v7;

  v1 = a1;
  LODWORD(a1) = dword_1001168B8;
  if (dword_1001168B8 != -1
    || (notify_register_check("com.apple.backboardd.unambiguousOrientation", &dword_1001168B8),
        a1 = dword_1001168B8,
        dword_1001168B8 != -1))
  {
    notify_set_state(a1, *(_QWORD *)(v1 + 40));
    a1 = notify_post("com.apple.backboardd.unambiguousOrientation");
  }
  v2 = BKLogOrientationDevice(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = BSDeviceOrientationDescription(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 56));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = 138543362;
    v7 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Last unambiguous device orientation changed to: %{public}@", (uint8_t *)&v6, 0xCu);

  }
}

void sub_10008A714(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  int v6;
  void *v7;

  v1 = a1;
  LODWORD(a1) = dword_1001168B0;
  if (dword_1001168B0 != -1
    || (notify_register_check("com.apple.backboardd.orientation", &dword_1001168B0),
        a1 = dword_1001168B0,
        dword_1001168B0 != -1))
  {
    notify_set_state(a1, *(_QWORD *)(v1 + 40));
    a1 = notify_post("com.apple.backboardd.orientation");
  }
  v2 = BKLogOrientationDevice(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = BSDeviceOrientationDescription(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 88));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = 138543362;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Effective device orientation changed to: %{public}@", (uint8_t *)&v6, 0xCu);

  }
}

__CFString *sub_10008A814(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  __CFString *v6;

  if (!a1)
  {
    v6 = CFSTR("none");
    return v6;
  }
  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("user"));
    v1 &= ~1uLL;
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
LABEL_12:
      objc_msgSend(v3, "addObject:", CFSTR("overlay"));
      v1 &= ~4uLL;
      if (!v1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("system"));
  v1 &= ~2uLL;
  if ((v1 & 4) != 0)
    goto LABEL_12;
LABEL_5:
  if (v1)
  {
LABEL_6:
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v1));
    objc_msgSend(v3, "addObject:", v4);

  }
LABEL_7:
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", ")));
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(%@)"), v5));

  return v6;
}

void sub_10008A930(id a1)
{
  BKOrientationManager *v1;
  void *v2;

  v1 = objc_alloc_init(BKOrientationManager);
  v2 = (void *)qword_1001175B0;
  qword_1001175B0 = (uint64_t)v1;

}

uint64_t sub_10008A958(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 52);
  return result;
}

void sub_10008A96C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = a2;
  BSDispatchQueueAssert(v3, v4);
  sub_10008AA64(*(_QWORD *)(a1 + 32), v5);

}

void sub_10008A9B8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  uint8_t buf[16];

  if (*(_BYTE *)(a1 + 52))
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "deviceOrientationBlocking"));
    sub_10008AA64(a1, v4);

  }
  else
  {
    v2 = BKLogOrientationDevice(a1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "WARNING: Attempting synchronous device orientation update while events disabled!", buf, 2u);
    }

    sub_10008AB5C(a1);
  }
}

void sub_10008AA64(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;

  if (a1)
  {
    v3 = objc_msgSend(a2, "orientation");
    v4 = v3;
    v5 = BKLogOrientationDevice(v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = BSDeviceOrientationDescription(v4);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = 138543362;
      v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Updating device orientation from CoreMotion to: %{public}@", (uint8_t *)&v9, 0xCu);

    }
    kdebug_trace(730464780, v4, 0, 0, 0);
    sub_10008AC78(a1, v4, 1);
  }
}

void sub_10008AB5C(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;

  if (a1)
  {
    v2 = objc_alloc_init((Class)CMDeviceOrientationManager);
    objc_msgSend(v2, "startDeviceOrientationUpdatesToQueue:withHandler:", *(_QWORD *)(a1 + 112), 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "deviceOrientationBlocking"));
    v4 = BKLogOrientationDevice(objc_msgSend(v2, "stopDeviceOrientationUpdates"));
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v6 = BSDeviceOrientationDescription(objc_msgSend(v3, "orientation"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = 138543362;
      v9 = v7;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fetching effective device orientation with temporary manager: %{public}@", (uint8_t *)&v8, 0xCu);

    }
    sub_10008AA64(a1, v3);

  }
}

void sub_10008AC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && !*(_BYTE *)(a1 + 104))
  {
    if (*(_QWORD *)(a1 + 72) != a2)
    {
      *(_QWORD *)(a1 + 72) = a2;
      objc_msgSend((id)a1, "_queue_postUpdatedRawAccelerometerDeviceOrientation:", a2);
    }
    if (!*(_QWORD *)(a1 + 96))
      sub_10008A468((_QWORD *)a1, a2, 1);
    sub_10008AD00(a1, a2, a3);
  }
}

void sub_10008AD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  id obj;
  _QWORD block[8];
  BOOL v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v6 = *(_QWORD *)(a1 + 96) != 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "orderedContext"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "array"));

  obj = v8;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v19;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v19 != v11)
          objc_enumerationMutation(obj);
        v13 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v12);
        v14 = *(NSObject **)(a1 + 16);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10008AE78;
        block[3] = &unk_1000ECA18;
        block[4] = v13;
        block[5] = a1;
        block[6] = a2;
        block[7] = a3;
        v17 = v6;
        dispatch_async(v14, block);
        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v10);
  }

}

uint64_t sub_10008AE78(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "orientationManager:deviceOrientationMayHaveChanged:changeSource:isDeviceOrientationLocked:");
  if ((result & 1) != 0)
    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "orientationManager:deviceOrientationMayHaveChanged:changeSource:isDeviceOrientationLocked:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
  return result;
}

uint64_t sub_10008AEC0(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return 0;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10008AF5C;
  v4[3] = &unk_1000ECDD0;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_10008AF5C(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 64);
  return result;
}

void sub_10008AF70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  __CFNotificationCenter *DarwinNotifyCenter;
  BOOL v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _QWORD block[7];
  BOOL v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(v1 + 64);
    if (v3 != v2)
    {
      v4 = BKLogOrientationDevice(a1);
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        v20 = BSInterfaceOrientationDescription(*(_QWORD *)(v1 + 64));
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        v22 = BSInterfaceOrientationDescription(v2);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        *(_DWORD *)buf = 138543618;
        v32 = v21;
        v33 = 2114;
        v34 = v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Current user interface orientation is changing from %{public}@ to %{public}@", buf, 0x16u);

      }
    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v8 = objc_msgSend(v6, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v7));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

    objc_msgSend(v9, "setBuiltInDisplayInterfaceOrientation:", v2);
    kdebug_trace(730464788, v2, 0, 0, 0);
    *(_QWORD *)(v1 + 64) = v2;
    if (v3 != v2)
    {
      v24 = v9;
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.backboardd.deviceinterfaceorientation"), 0, 0, 1u);
      v11 = *(_QWORD *)(v1 + 96) != 0;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 24), "orderedContext"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "array"));

      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v27, buf, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v28;
        do
        {
          v17 = 0;
          do
          {
            if (*(_QWORD *)v28 != v16)
              objc_enumerationMutation(v13);
            v18 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v17);
            v19 = *(NSObject **)(v1 + 16);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_10008B20C;
            block[3] = &unk_1000ECA40;
            block[4] = v18;
            block[5] = v1;
            block[6] = v2;
            v26 = v11;
            dispatch_async(v19, block);
            v17 = (char *)v17 + 1;
          }
          while (v15 != v17);
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v27, buf, 16);
        }
        while (v15);
      }

      v9 = v24;
    }

  }
}

uint64_t sub_10008B20C(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "orientationManager:userInterfaceOrientationMayHaveChanged:isDeviceOrientationLocked:");
  if ((result & 1) != 0)
    return (uint64_t)_objc_msgSend(*(id *)(a1 + 32), "orientationManager:userInterfaceOrientationMayHaveChanged:isDeviceOrientationLocked:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  return result;
}

uint64_t sub_10008B254(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return 0;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10008B2F0;
  v4[3] = &unk_1000ECDD0;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_10008B2F0(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 72);
  return result;
}

uint64_t sub_10008B304(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return 0;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10008B3A0;
  v4[3] = &unk_1000ECDD0;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_10008B3A0(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 88);
  return result;
}

uint64_t sub_10008B3B4(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
    LOBYTE(v1) = *(_QWORD *)(v1 + 96) != 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = v1;
  return result;
}

BOOL sub_10008B3D8(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _BOOL8 v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  if (!a1)
    return 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008B480;
  block[3] = &unk_1000EC9A0;
  block[4] = a1;
  block[5] = &v6;
  block[6] = a2;
  dispatch_sync(v2, block);
  v3 = *((_BYTE *)v7 + 24) != 0;
  _Block_object_dispose(&v6, 8);
  return v3;
}

_QWORD *sub_10008B480(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = result[4];
  if (v1)
    LOBYTE(v1) = *(_QWORD *)(v1 + 96) != 0;
  v2 = (_QWORD *)result[6];
  *(_BYTE *)(*(_QWORD *)(result[5] + 8) + 24) = v1;
  if (v2)
  {
    v3 = *(_QWORD *)(result[4] + 88);
    if (v3 == -1)
      v3 = 0;
    *v2 = v3;
  }
  return result;
}

void sub_10008B4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v4;
  _QWORD v5[8];

  if (a1)
  {
    v4 = *(NSObject **)(a1 + 8);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10008B51C;
    v5[3] = &unk_1000EC9C8;
    v5[4] = a1;
    v5[5] = a2;
    v5[6] = a3;
    v5[7] = a4;
    dispatch_sync(v4, v5);
  }
}

void sub_10008B51C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  __CFString *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  BOOL v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  __CFString *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[6];
  _BYTE buf[24];
  void *v29;
  BOOL v30;

  v2 = a1[4];
  v1 = a1[5];
  if (v2)
    v3 = v1 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = a1[6];
    if (v1 == 2)
    {
      v5 = a1[7];
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 32), "objectForKey:", v6));

      if (!v7)
      {
        v8 = objc_alloc((Class)BSProcessDeathWatcher);
        v9 = *(_QWORD *)(v2 + 8);
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_10008B808;
        v27[3] = &unk_1000ECB60;
        v27[4] = v2;
        v27[5] = v5;
        v10 = objc_msgSend(v8, "initWithPID:queue:deathHandler:", v5, v9, v27);
        objc_msgSend(*(id *)(v2 + 32), "setObject:forKey:", v10, v6);

      }
    }
    if ((*(_QWORD *)(v2 + 96) & v1) == 0)
    {
      v11 = BKLogOrientationDevice(a1);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = sub_10008A814(v1);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        v15 = BSDeviceOrientationDescription(v4);
        v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v14;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Locking device orientation for lock type: %{public}@ to: %{public}@", buf, 0x16u);

      }
      kdebug_trace(730464784, v1, v4, 0, 0);
      v17 = *(_QWORD *)(v2 + 96);
      if (v17)
      {
        *(_QWORD *)(v2 + 96) = v17 | v1;
        v18 = 1;
      }
      else
      {
        sub_10008A468((_QWORD *)v2, v4, v1 != 2);
        sub_10008AD00(v2, v4, 3);
        *(_QWORD *)(v2 + 96) |= v1;
        sub_10008AD00(v2, v4, 3);
        v18 = *(_QWORD *)(v2 + 96) != 0;
      }
      v19 = *(NSObject **)(v2 + 144);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_10008B890;
      v29 = &unk_1000ECA60;
      v30 = v18;
      dispatch_async(v19, buf);
      v21 = BKLogOrientationDevice(v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        v23 = sub_10008A814(v1);
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        v25 = BSDeviceOrientationDescription(v4);
        v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v24;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v26;
        _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Locked device orientation for lock type: %{public}@ to: %{public}@", buf, 0x16u);

      }
    }
  }
}

void sub_10008B808(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "count") == (id)1)
  {
    v2 = BKLogOrientationDevice(1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Last system shell with an orientation lock exited -- unlocking system device orientation", v4, 2u);
    }

    sub_10008B8FC(*(_QWORD *)(a1 + 32), 2, *(_QWORD *)(a1 + 40));
  }
}

uint64_t sub_10008B890(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  LODWORD(result) = dword_1001168BC;
  if (dword_1001168BC != -1
    || (notify_register_check("com.apple.backboardd.orientationlock", &dword_1001168BC),
        result = dword_1001168BC,
        dword_1001168BC != -1))
  {
    notify_set_state(result, *(unsigned __int8 *)(v1 + 32));
    return notify_post("com.apple.backboardd.orientationlock");
  }
  return result;
}

void sub_10008B8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  NSObject *v13;
  __int128 v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  BOOL v17;

  if (a1 && (*(_QWORD *)(a1 + 96) & a2) != 0)
  {
    v6 = BKLogOrientationDevice(a1);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = sub_10008A814(a2);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      LODWORD(v14) = 138543362;
      *(_QWORD *)((char *)&v14 + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Unlocking device orientation for lock type: %{public}@", (uint8_t *)&v14, 0xCu);

    }
    kdebug_trace(730464788, a2, 0, 0, 0);
    *(_QWORD *)(a1 + 96) &= ~a2;
    if ((a2 & 2) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v10));
      objc_msgSend(*(id *)(a1 + 32), "removeObjectForKey:", v10);
      objc_msgSend(v11, "invalidate");

    }
    sub_10008A9B8(a1);
    v12 = *(_QWORD *)(a1 + 96) != 0;
    v13 = *(NSObject **)(a1 + 144);
    *(_QWORD *)&v14 = _NSConcreteStackBlock;
    *((_QWORD *)&v14 + 1) = 3221225472;
    v15 = sub_10008B890;
    v16 = &unk_1000ECA60;
    v17 = v12;
    dispatch_async(v13, &v14);
  }
}

void sub_10008BA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  if (a1)
  {
    v3 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008BAFC;
    block[3] = &unk_1000ECB88;
    block[4] = a1;
    block[5] = a2;
    block[6] = a3;
    dispatch_sync(v3, block);
  }
}

void sub_10008BAFC(uint64_t *a1)
{
  sub_10008B8FC(a1[4], a1[5], a1[6]);
}

void sub_10008BB0C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[7];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008BB70;
    block[3] = &unk_1000ECB88;
    block[4] = a1;
    block[5] = a2;
    block[6] = 2;
    dispatch_sync(v2, block);
  }
}

void sub_10008BB70(uint64_t *a1)
{
  sub_10008AC78(a1[4], a1[5], a1[6]);
}

void sub_10008BB80(uint64_t a1)
{
  sub_10008AB5C(*(_QWORD *)(a1 + 32));
}

id *sub_10008BB88(id *a1, void *a2)
{
  id v3;

  v3 = a2;
  if (a1)
    a1 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[3], "acquireForReason:withContext:", CFSTR("observing"), v3));

  return a1;
}

void sub_10008BF44(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[2], "increment");
    objc_msgSend(v3[8], "setValue:", *(unsigned int *)(a1 + 40));
    objc_msgSend(v3[9], "setValue:", *(int *)(a1 + 44));
    WeakRetained = v3;
  }

}

void sub_10008BFA4(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[3], "increment");
    objc_msgSend(v3[8], "setValue:", *(unsigned int *)(a1 + 40));
    objc_msgSend(v3[9], "setValue:", *(int *)(a1 + 44));
    WeakRetained = v3;
  }

}

void sub_10008C004(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[7], "increment");
    objc_msgSend(v3[8], "setValue:", *(unsigned int *)(a1 + 40));
    objc_msgSend(v3[9], "setValue:", *(int *)(a1 + 44));
    WeakRetained = v3;
  }

}

void sub_10008C064(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[4], "increment");
    objc_msgSend(v3[8], "setValue:", *(unsigned int *)(a1 + 40));
    objc_msgSend(v3[9], "setValue:", *(int *)(a1 + 44));
    WeakRetained = v3;
  }

}

void sub_10008C0C4(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[6], "increment");
    objc_msgSend(v3[8], "setValue:", *(unsigned int *)(a1 + 40));
    objc_msgSend(v3[9], "setValue:", *(int *)(a1 + 44));
    WeakRetained = v3;
  }

}

void sub_10008C124(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[5], "increment");
    objc_msgSend(v3[8], "setValue:", *(unsigned int *)(a1 + 40));
    objc_msgSend(v3[9], "setValue:", *(int *)(a1 + 44));
    WeakRetained = v3;
  }

}

void sub_10008C184(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  id v5;
  void *v6;
  _QWORD v7[2];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[11], "setValue:", *(unsigned int *)(a1 + 40));
    objc_msgSend(v3[12], "setValue:", *(int *)(a1 + 44));
    v4 = v3[10];
    v5 = v3[12];
    v7[0] = v3[11];
    v7[1] = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v7, 2));
    objc_msgSend(v4, "pushStatistics:", v6);

  }
}

id sub_10008C4BC(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  unint64_t v9;
  const __CFString *v10;
  id v11;
  unint64_t v12;
  const __CFString *v13;

  v2 = objc_msgSend(*(id *)(a1 + 32), "appendVersionedPID:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), CFSTR("pid"));
  objc_msgSend(*(id *)(a1 + 32), "appendString:withName:skipIfEmpty:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64), 0, 1);
  v3 = *(void **)(a1 + 32);
  v4 = NSStringFromBKSTouchStreamIdentifier(*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 8));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "appendString:withName:", v5, 0);

  v6 = objc_msgSend(*(id *)(a1 + 32), "appendDouble:withName:decimalPrecision:", CFSTR("creationTime"), 4, *(double *)(*(_QWORD *)(a1 + 40) + 24));
  v7 = objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), CFSTR("touchDestination"));
  v8 = objc_msgSend(*(id *)(a1 + 32), "appendBool:withName:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 12), CFSTR("valid"));
  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 10);
  if (v9 > 3)
    v10 = CFSTR("<unknown>");
  else
    v10 = off_1000ECAA8[v9];
  v11 = objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:", v10, CFSTR("dispatchMode"));
  v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 11);
  if (v12 > 2)
    v13 = CFSTR("<unknown>");
  else
    v13 = off_1000ECAC8[v12];
  return objc_msgSend(*(id *)(a1 + 32), "appendObject:withName:", v13, CFSTR("ambiguityRecommendation"));
}

id *sub_10008C60C(id *result)
{
  id *v1;
  id v2;
  id *WeakRetained;
  id *v4;

  if (result)
  {
    v1 = result;
    if ((*((_BYTE *)result + 12) & 1) != 0)
    {
      *((_BYTE *)result + 12) = 0;
      objc_msgSend(result[7], "invalidate");
      v2 = v1[7];
      v1[7] = 0;

      WeakRetained = (id *)objc_loadWeakRetained(v1 + 4);
      v4 = WeakRetained;
      if (WeakRetained)
        objc_msgSend(WeakRetained[2], "removeObject:", v1);

      return (id *)objc_storeWeak(v1 + 4, 0);
    }
  }
  return result;
}

id sub_10008CFD8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "increment");
}

id sub_10008CFE4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "increment");
}

id sub_10008CFF0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "increment");
}

id sub_10008CFFC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "increment");
}

BOOL sub_10008D008(id a1, BKTouchDestination *a2)
{
  return !a2 || (a2->_predicate & 1) == 0;
}

void sub_10008D02C(void *a1, void *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  id v11;
  id *v12;
  int v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  _OWORD v25[19];
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;

  v11 = a1;
  v12 = a2;
  v13 = *(unsigned __int8 *)(a4 + 89);
  v14 = v12[2];
  v15 = sub_100005968((uint64_t)BKDisplayController, v13, 0, v14, *(void **)(a4 + 16));
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

  memset(v25, 0, sizeof(v25));
  v17 = objc_msgSend(*(id *)a4, "contextIDAtCAScreenLocation:displayUUID:options:securityAnalysis:results:", *(_QWORD *)(a4 + 8), v16, 0, v25, a5, a6);
  if (DWORD1(v25[0]) == *(_DWORD *)(a3 + 4))
  {
    v18 = BKLogTouchEvents(v17);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v27 = DWORD1(v25[0]);
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "auth: recording hit test info for slotID:%X", buf, 8u);
    }

    *((_DWORD *)v11 + 6) = DWORD1(v25[0]);
    v20 = sub_10001C094((uint64_t)v25);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    v22 = *((_QWORD *)v11 + 32);
    *((_QWORD *)v11 + 32) = v21;
  }
  else
  {
    v23 = BKLogTouchEvents(v17);
    v22 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v24 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)buf = 67109376;
      v27 = v24;
      v28 = 1024;
      v29 = DWORD1(v25[0]);
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "auth: slotID mismatch between down hit tests: %X vs %X", buf, 0xEu);
    }
  }

}

void sub_10008D23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__n128 sub_10008D270(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

id sub_10008D4D4(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 32), "appendSuccinctDescriptionToFormatter:", *(_QWORD *)(a1 + 40));
  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count");
  if (result)
    return objc_msgSend(*(id *)(a1 + 40), "appendInteger:withName:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count"), CFSTR("externalReferences"));
  return result;
}

void sub_10008D89C(id a1)
{
  BKDisplayAnnotationLocation *v1;
  void *v2;

  v1 = objc_alloc_init(BKDisplayAnnotationLocation);
  v2 = (void *)qword_1001175C0;
  qword_1001175C0 = (uint64_t)v1;

}

void sub_10008E2A0(id a1)
{
  BKDisplayRenderOverlayPersistenceCoordinator *v1;
  void *v2;

  v1 = objc_alloc_init(BKDisplayRenderOverlayPersistenceCoordinator);
  v2 = (void *)qword_1001175D0;
  qword_1001175D0 = (uint64_t)v1;

}

void sub_10008F018(id a1)
{
  BKBootUIOverlayVendor *v1;
  BKBootUIOverlayVendor *v2;
  void *v3;
  id v4;

  v1 = [BKBootUIOverlayVendor alloc];
  v4 = (id)objc_claimAutoreleasedReturnValue(+[BKFirstBootDetector sharedInstance](BKFirstBootDetector, "sharedInstance"));
  v2 = -[BKBootUIOverlayVendor initWithFirstBootDetector:](v1, "initWithFirstBootDetector:", v4);
  v3 = (void *)qword_1001175E0;
  qword_1001175E0 = (uint64_t)v2;

}

void sub_100090688(id a1)
{
  BKDisplayRenderOverlayManager *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  if (!sub_100006268())
  {
    v1 = [BKDisplayRenderOverlayManager alloc];
    v8 = (id)objc_claimAutoreleasedReturnValue(+[BKDisplayRenderOverlayPersistenceCoordinator sharedInstance](BKDisplayRenderOverlayPersistenceCoordinator, "sharedInstance"));
    v2 = sub_10001A7F4();
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[CAWindowServer serverIfRunning](CAWindowServer, "serverIfRunning"));
    v6 = -[BKDisplayRenderOverlayManager _initWithPersistenceCoordinator:orientationManager:backlightManager:windowServer:](v1, "_initWithPersistenceCoordinator:orientationManager:backlightManager:windowServer:", v8, v3, v4, v5);
    v7 = (void *)qword_1001175F0;
    qword_1001175F0 = (uint64_t)v6;

  }
}

void sub_100091DAC(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "appendPoint:withName:", CFSTR("baseTranslation"), *(double *)(*(_QWORD *)(a1 + 40) + 8), *(double *)(*(_QWORD *)(a1 + 40) + 16));
  v3 = objc_msgSend(*(id *)(a1 + 32), "appendRect:withName:", CFSTR("globalBounds"), *(double *)(*(_QWORD *)(a1 + 40) + 24), *(double *)(*(_QWORD *)(a1 + 40) + 32), *(double *)(*(_QWORD *)(a1 + 40) + 40), *(double *)(*(_QWORD *)(a1 + 40) + 48));
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100091E7C;
    v6[3] = &unk_1000ECD10;
    v7 = v4;
    objc_msgSend(v7, "appendDictionary:withName:itemBlock:", v5, CFSTR("regionToComputedFrame"), v6);

  }
}

id sub_100091E7C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[8];

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = objc_msgSend(v5, "appendObject:withName:", a2, 0);
  v8 = BSRectFromValue(v6);
  v10 = v9;
  v12 = v11;
  v14 = v13;

  objc_msgSend(*(id *)(a1 + 32), "appendRightArrow");
  v15 = *(void **)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100091F4C;
  v17[3] = &unk_1000ECCE8;
  *(double *)&v17[4] = v8;
  v17[5] = v10;
  v17[6] = v12;
  v17[7] = v14;
  return objc_msgSend(v15, "appendCustomFormatWithName:block:", &stru_1000F0F50, v17);
}

id sub_100091F4C(_QWORD *a1, void *a2)
{
  return objc_msgSend(a2, "appendFormat:", CFSTR("(%g,%g,%g,%g)"), a1[4], a1[5], a1[6], a1[7]);
}

void sub_100093B58(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v3 = a2;
  v10[0] = _NSConcreteStackBlock;
  v4 = a1[4];
  v5 = (void *)a1[5];
  v6 = *(NSObject **)(v4 + 8);
  v10[2] = sub_100093BF8;
  v10[3] = &unk_1000ECE90;
  v10[1] = 3221225472;
  v11 = v3;
  v12 = v4;
  v7 = v5;
  v8 = a1[6];
  v13 = v7;
  v14 = v8;
  v9 = v3;
  dispatch_async(v6, v10);

}

id sub_100093BF8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 40);
  if (v3 == v2[9])
    return _objc_msgSend(v2, "_queue_continueAddingOverlayForReason:generation:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v4 = sub_1000597D0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v9[0] = 67109378;
    v9[1] = v7;
    v10 = 2114;
    v11 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "addOverlay(%d-%{public}@): this overlay was removed or canceled; not continuing",
      (uint8_t *)v9,
      0x12u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_100093CF0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  double v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  double v20;

  v4 = a3;
  v5 = BSContinuousMachTimeNow(v4);
  v6 = sub_1000597D0();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 32);
    v10 = v5 - *(double *)(a1 + 64);
    v15 = 67109634;
    v16 = v8;
    v17 = 2114;
    v18 = v9;
    v19 = 2048;
    v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "addOverlay(%d-%{public}@): acquire returned in %gs", (uint8_t *)&v15, 0x1Cu);
  }

  if (v4)
  {
    v11 = sub_1000597D0();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 32);
      v15 = 67109634;
      v16 = v13;
      v17 = 2114;
      v18 = v14;
      v19 = 2114;
      v20 = *(double *)&v4;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "addOverlay(%d-%{public}@): could not acquire activity assertion (but we shall continue anyway): %{public}@", (uint8_t *)&v15, 0x1Cu);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100093E60(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint8_t buf[4];
  uint64_t v8;

  v2 = sub_1000597D0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "systemShellChangedWithPrimary: %{public}@", buf, 0xCu);
  }

  v5 = *(void **)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("shell changed (%@)"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v5, "_queue_updateOverlayForReason:", v6);

}

void sub_100093F38(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint8_t buf[4];
  uint64_t v8;

  v2 = sub_1000597D0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "systemShellDidFinishLaunching: - %{public}@", buf, 0xCu);
  }

  v5 = *(void **)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("shell launched (%@)"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v5, "_queue_updateOverlayForReason:", v6);

}

id sub_100094010(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  int v9;
  uint64_t v10;

  v2 = sub_1000597D0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v9 = 138543362;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Re-evalutate - firstBootDetectorDidFinishFirstBoot - %{public}@", (uint8_t *)&v9, 0xCu);
  }

  v5 = *(_QWORD **)(a1 + 40);
  if (v5[7])
  {
    v6 = BKLogDetailed();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Toggling underlay.", (uint8_t *)&v9, 2u);
    }

    objc_msgSend(*(id *)(a1 + 40), "_queue_removeUnderlay");
    objc_msgSend(*(id *)(a1 + 40), "_queue_addUnderlay");
    v5 = *(_QWORD **)(a1 + 40);
  }
  return objc_msgSend(v5, "_queue_updateOverlayForReason:", CFSTR("didFinishFirstBoot"));
}

void sub_100094124(uint64_t a1)
{
  int v2;
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 104);
  v3 = sub_1000597D0();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v9 = 138543362;
      v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unsustaining the boot overlay: %{public}@", (uint8_t *)&v9, 0xCu);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 104) = 0;
    v7 = *(_BYTE **)(a1 + 32);
    if (v7[105])
    {
      objc_msgSend(v7, "_queue_removeOverlayWithAnimationSettings:", 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 105) = 0;
    }
  }
  else
  {
    if (v5)
    {
      v8 = *(_QWORD *)(a1 + 40);
      v9 = 138543362;
      v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Can't unsustain nonexistent boot overlay: %{public}@", (uint8_t *)&v9, 0xCu);
    }

  }
}

void sub_100094244(_QWORD *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1[4] + 72);
  v3 = sub_1000597D0();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      v6 = a1[5];
      v8 = 138543362;
      v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sustaining the boot overlay: %{public}@", (uint8_t *)&v8, 0xCu);
    }

    *(_BYTE *)(a1[4] + 104) = 1;
    *(_BYTE *)(a1[4] + 105) = 0;
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  }
  else
  {
    if (v5)
    {
      v7 = a1[5];
      v8 = 138543362;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Can't persist a boot overlay that isn't there: %{public}@", (uint8_t *)&v8, 0xCu);
    }

  }
}

void sub_100094360(uint64_t a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  v3 = sub_1000597D0();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      v6 = *(_DWORD *)(a1 + 48);
      v8 = 67109120;
      v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dismissing boot logo (pid:%d)", (uint8_t *)&v8, 8u);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 104) = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 105) = 0;
    objc_msgSend(*(id *)(a1 + 32), "_queue_setScreenOwnerPID:", *(unsigned int *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "_queue_removeOverlayWithAnimationSettings:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (v5)
    {
      v7 = *(_DWORD *)(a1 + 48);
      v8 = 67109120;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cannot dismiss nonexistent boot logo (pid:%d)", (uint8_t *)&v8, 8u);
    }

  }
}

uint64_t sub_100094480(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 72) != 0;
  return result;
}

id sub_10009449C(uint64_t a1)
{
  unsigned int v2;
  void *v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "hideAppleLogoOnLaunch");
  v3 = *(void **)(a1 + 40);
  if (v2)
    objc_msgSend(v3, "_queue_removeUnderlay");
  else
    objc_msgSend(v3, "_queue_addUnderlay");
  return objc_msgSend(*(id *)(a1 + 40), "_queue_updateOverlayForReason:", CFSTR("init"));
}

id sub_1000944E4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_addUnderlay");
  return objc_msgSend(*(id *)(a1 + 32), "_queue_updateOverlayForReason:", CFSTR("init 2"));
}

void sub_100094554(id a1)
{
  void *v1;
  BKBootUIPresenter *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  BKBootUIPresenter *v7;
  void *v8;
  id v9;

  if (sub_100006268())
  {
    v1 = (void *)qword_100117600;
    qword_100117600 = 0;
  }
  else
  {
    v2 = [BKBootUIPresenter alloc];
    v9 = (id)objc_claimAutoreleasedReturnValue(+[BKSystemShellSentinel sharedInstance](BKSystemShellSentinel, "sharedInstance"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKAlternateSystemAppManager sharedInstance](BKAlternateSystemAppManager, "sharedInstance"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKFirstBootDetector sharedInstance](BKFirstBootDetector, "sharedInstance"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[BKBootUIOverlayVendor sharedInstance](BKBootUIOverlayVendor, "sharedInstance"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayRenderOverlayManager sharedInstance](BKDisplayRenderOverlayManager, "sharedInstance"));
    v7 = -[BKBootUIPresenter initWithSystemAppSentinel:alternateSystemAppManager:firstBootDetector:bootUIOverlayVendor:renderOverlayManager:](v2, "initWithSystemAppSentinel:alternateSystemAppManager:firstBootDetector:bootUIOverlayVendor:renderOverlayManager:", v9, v3, v4, v5, v6);
    v8 = (void *)qword_100117600;
    qword_100117600 = (uint64_t)v7;

    v1 = v9;
  }

}

void sub_1000949B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(+[BSObjCProtocol protocolForProtocol:](BSObjCProtocol, "protocolForProtocol:", &OBJC_PROTOCOL___BKSSystemShellControlClientInterface));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BSObjCProtocol protocolForProtocol:](BSObjCProtocol, "protocolForProtocol:", &OBJC_PROTOCOL___BKSSystemShellControlServerInterface));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[BSMutableServiceInterface interfaceWithIdentifier:](BSMutableServiceInterface, "interfaceWithIdentifier:", BKSSystemShellControllerServiceName));
  objc_msgSend(v5, "setServer:", v4);
  objc_msgSend(v5, "setClient:", v7);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[BSServiceQuality userInitiated](BSServiceQuality, "userInitiated"));
  objc_msgSend(v3, "setServiceQuality:", v6);

  objc_msgSend(v3, "setInterface:", v5);
  objc_msgSend(v3, "setInterfaceTarget:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend(v3, "setTargetQueue:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  objc_msgSend(v3, "setInvalidationHandler:", &stru_1000ECF20);
  objc_msgSend(v3, "setInterruptionHandler:", &stru_1000ECF40);

}

void sub_100094AEC(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = BKSSystemShellServiceDomainName;
  v4 = a2;
  objc_msgSend(v4, "setDomain:", v3);
  objc_msgSend(v4, "setService:", BKSSystemShellControllerServiceName);
  objc_msgSend(v4, "setDelegate:", *(_QWORD *)(a1 + 32));

}

void sub_100094F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BKNamespaceNode *__cdecl sub_100095684(id a1, NSString *a2, BKNamespaceNode *a3, BOOL a4)
{
  NSString *v4;
  BKNamespaceNode *v5;

  v4 = a2;
  v5 = objc_alloc_init(BKNamespaceNode);
  -[BKNamespaceNode setName:](v5, "setName:", v4);

  return v5;
}

uint64_t sub_1000956C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000956D8(uint64_t a1)
{

}

void sub_1000956E0(uint64_t a1, int a2, id obj)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
}

id sub_1000956F4(id a1, id a2)
{
  return +[BSDescriptionBuilder descriptionForObject:](BSDescriptionBuilder, "descriptionForObject:", a2);
}

void sub_100095EB0(id a1)
{
  BKHIDSystemInterface *v1;
  void *v2;

  v1 = objc_alloc_init(BKHIDSystemInterface);
  v2 = (void *)qword_100117610;
  qword_100117610 = (uint64_t)v1;

}

NSNumber *sub_100096448(uint64_t a1, int a2, double a3)
{
  _BOOL8 v3;

  v3 = *(_DWORD *)(a1 + 40) == a2 && *(double *)(a1 + 32) == a3;
  return +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3);
}

id sub_100096478(id a1, unsigned int a2, unsigned int a3)
{
  return &__kCFBooleanFalse;
}

NSNumber *sub_100096484(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    LODWORD(v3) = *(_DWORD *)(v3 + 8);
  if ((_DWORD)v3 == a2)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
      LODWORD(v4) = *(_DWORD *)(v4 + 8);
    v5 = (_DWORD)v4 == a3;
  }
  else
  {
    v5 = 0;
  }
  return +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5);
}

id sub_1000964C4(id a1, unsigned int a2, double a3)
{
  return &__kCFBooleanFalse;
}

uint64_t sub_1000964D0(uint64_t a1, void *a2)
{
  id v3;
  _xpc_endpoint_s *v4;
  void *v5;
  _xpc_connection_s *v6;
  xpc_object_t v7;
  _QWORD handler[4];
  id v10;
  id v11;
  id v12;
  id from;
  id location;

  v3 = a2;
  v4 = (_xpc_endpoint_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "assertionEndpoint"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "assertionEndpoint"));

  if (v5)
  {
    v6 = xpc_connection_create_from_endpoint(v4);
    xpc_connection_set_target_queue(v6, *(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 8));
    objc_initWeak(&location, *(id *)(a1 + 32));
    objc_initWeak(&from, v6);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100096668;
    handler[3] = &unk_1000ED150;
    objc_copyWeak(&v11, &location);
    v10 = v3;
    objc_copyWeak(&v12, &from);
    xpc_connection_set_event_handler(v6, handler);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "addObject:", v6);
    xpc_connection_resume(v6);
    v7 = xpc_dictionary_create(0, 0, 0);
    xpc_connection_send_message(v6, v7);

    objc_destroyWeak(&v12);
    objc_destroyWeak(&v11);
    objc_destroyWeak(&from);
    objc_destroyWeak(&location);

  }
  return 0;
}

void sub_100096638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_100096668(uint64_t a1, void *a2)
{
  _QWORD *WeakRetained;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (a2 == &_xpc_error_connection_invalid || a2 == &_xpc_error_connection_interrupted)
  {
    v6 = BKLogTouchDeliveryPolicy();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(void **)(a1 + 32);
      v19 = 138543362;
      v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TDPS server received policy invalidation %{public}@", (uint8_t *)&v19, 0xCu);
    }

    v9 = (void *)WeakRetained[3];
    v10 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(v9, "removeObject:", v10);

    v11 = BKLogTouchDeliveryPolicy();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_policy"));
      v19 = 138543362;
      v20 = v17;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Policy was %{public}@", (uint8_t *)&v19, 0xCu);

    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_policy"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "policyExcludingPolicyIdenticalTo:", *(_QWORD *)(a1 + 32)));
    objc_msgSend(WeakRetained, "_queue_setPolicy:", v14);

    v15 = BKLogTouchDeliveryPolicy();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_policy"));
      v19 = 138543362;
      v20 = v18;
      _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Policy is %{public}@", (uint8_t *)&v19, 0xCu);

    }
  }

}

id sub_100096868(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD v6[4];
  id v7;
  _QWORD v8[4];
  id v9;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100096934;
  v8[3] = &unk_1000ED098;
  v9 = *(id *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000969AC;
  v6[3] = &unk_1000ED0C0;
  v7 = *(id *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "matchSharingTouchesPolicy:orCancelTouchesPolicy:orCombinedPolicy:", v8, v6, &stru_1000ED100));

  return v4;
}

id sub_100096934(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = BKHostRequiresTouchesFromHostedContentEntitlement;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_xpcConnection"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[BKSecurityManager hasEntitlement:forConnection:](BKSecurityManager, "hasEntitlement:forConnection:", v1, v2)));

  return v3;
}

id sub_1000969AC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = BKCancelsTouchesInHostedContentEntitlement;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_xpcConnection"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[BKSecurityManager hasEntitlement:forConnection:](BKSecurityManager, "hasEntitlement:forConnection:", v1, v2)));

  return v3;
}

id sub_100096A24(id a1, NSArray *a2)
{
  NSArray *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = a2;
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        if (!objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v6), "BOOLValue", (_QWORD)v10))
        {
          v7 = 0;
          goto LABEL_11;
        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  v7 = 1;
LABEL_11:

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7));
  return v8;
}

void sub_100096B44(id a1)
{
  BKTouchDeliveryPolicyServer *v1;
  void *v2;

  v1 = objc_alloc_init(BKTouchDeliveryPolicyServer);
  v2 = (void *)qword_100117628;
  qword_100117628 = (uint64_t)v1;

}

uint64_t sub_100096B6C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 6000080) >= 0xFFFFFFB0)
    return (uint64_t)*(&off_1000ED2C0 + 5 * (v1 - 6000000) + 5);
  else
    return 0;
}

void sub_100096BAC(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  _OWORD v7[2];
  _QWORD v8[5];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
  }
  else
  {
    v4 = a1[6];
    v3 = a1 + 6;
    if (v4 || v3[1] <= 0x1Fu)
    {
      v5 = -309;
    }
    else
    {
      v6 = *(_OWORD *)(v3 + 9);
      v7[0] = *(_OWORD *)(v3 + 5);
      v7[1] = v6;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1000275FC;
      v8[3] = &unk_1000EBC38;
      v8[4] = a2 + 36;
      if ((sub_10000A40C((uint64_t)"_BKHIDXXGetBacklightFactor", BKBackBoardClientEntitlement, (uint64_t)v7) & 1) != 0)
      {
        sub_1000275FC((uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 40;
        return;
      }
      v5 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100096CA8(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  _QWORD v8[4];
  int v9;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100027650;
  v8[3] = &unk_1000EC750;
  v9 = v4;
  if (sub_10000A40C((uint64_t)"_BKHIDXXSetBacklightFactorPending", BKBackBoardClientEntitlement, (uint64_t)v7))
  {
    sub_100027650((uint64_t)v8);
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
}

void sub_100096D94(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];
  _QWORD v9[5];
  char v10;
  char v11;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 48)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 48) || *(_DWORD *)(a1 + 52) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v4 = *(_BYTE *)(a1 + 40);
    v5 = *(_BYTE *)(a1 + 44);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_OWORD *)(a1 + 84);
    v8[0] = *(_OWORD *)(a1 + 68);
    v8[1] = v7;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100027754;
    v9[3] = &unk_1000EA7C0;
    v9[4] = v6;
    v10 = v4;
    v11 = v5;
    if (sub_10000A40C((uint64_t)"_BKHIDXXSetBacklightFactorWithFadeDuration", BKBackBoardClientEntitlement, (uint64_t)v8))
    {
      sub_100027754((uint64_t)v9);
      v3 = 0;
    }
    else
    {
      v3 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100096E8C(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  _OWORD v10[2];
  _QWORD v11[5];
  char v12;
  char v13;
  char v14;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 52)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 56) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_BYTE *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 44);
  v6 = *(_BYTE *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 88);
  v10[0] = *(_OWORD *)(a1 + 72);
  v10[1] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100027778;
  v11[3] = &unk_1000EA0E0;
  v11[4] = v7;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  if (sub_10000A40C((uint64_t)"_BKHIDXXNotifySetBacklightFactorWithFadeDurationAsync", BKBackBoardClientEntitlement, (uint64_t)v10))
  {
    sub_100027778((uint64_t)v11);
    v9 = 0;
  }
  else
  {
    v9 = 5;
  }
  *(_DWORD *)(a2 + 32) = v9;
}

void sub_100096F90(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  _OWORD v7[2];
  _QWORD v8[5];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
  }
  else
  {
    v4 = a1[6];
    v3 = a1 + 6;
    if (v4 || v3[1] <= 0x1Fu)
    {
      v5 = -309;
    }
    else
    {
      v6 = *(_OWORD *)(v3 + 9);
      v7[0] = *(_OWORD *)(v3 + 5);
      v7[1] = v6;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1000279BC;
      v8[3] = &unk_1000EBC38;
      v8[4] = a2 + 36;
      if (sub_10001261C(BKDisplayBrightnessEntitlement, (uint64_t)v7))
      {
        sub_1000279BC((uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 40;
        return;
      }
      v5 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100097084(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  _OWORD v7[2];
  _QWORD v8[5];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
  }
  else
  {
    v4 = a1[6];
    v3 = a1 + 6;
    if (v4 || v3[1] <= 0x1Fu)
    {
      v5 = -309;
    }
    else
    {
      v6 = *(_OWORD *)(v3 + 9);
      v7[0] = *(_OWORD *)(v3 + 5);
      v7[1] = v6;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100027A04;
      v8[3] = &unk_1000EBC38;
      v8[4] = a2 + 36;
      if (sub_10001261C(BKDisplayBrightnessEntitlement, (uint64_t)v7))
      {
        sub_100027A04((uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 40;
        return;
      }
      v5 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100097178(_DWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  unsigned __int8 v10;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001172D8, "propertyForKey:", CFSTR("DisplayBackLightArchitecture")));
    v5 = objc_opt_class(NSNumber, v4);
    v6 = v3;
    v7 = v6;
    if (v5)
    {
      if ((objc_opt_isKindOfClass(v6, v5) & 1) != 0)
        v8 = v7;
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    v9 = v8;

    v10 = objc_msgSend(v9, "unsignedCharValue");
    *(_BYTE *)(a2 + 36) = v10;
    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_100097260(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_1000277A8(v6, v4, v8);
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100097338(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  _OWORD v7[2];
  _QWORD v8[5];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
  }
  else
  {
    v4 = a1[6];
    v3 = a1 + 6;
    if (v4 || v3[1] <= 0x1Fu)
    {
      v5 = -309;
    }
    else
    {
      v6 = *(_OWORD *)(v3 + 9);
      v7[0] = *(_OWORD *)(v3 + 5);
      v7[1] = v6;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100027A4C;
      v8[3] = &unk_1000EBC38;
      v8[4] = a2 + 36;
      if ((sub_10000A40C((uint64_t)"_BKHIDXXAmbientLightSensorExists", BKBackBoardClientEntitlement, (uint64_t)v7) & 1) != 0)
      {
        sub_100027A4C((uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 40;
        return;
      }
      v5 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100097434(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  _OWORD v13[2];
  const __CFString *v14;
  uint8_t buf[8];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
    goto LABEL_7;
  }
  v4 = a1[6];
  v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v6 = *(_OWORD *)(v3 + 9);
  v13[0] = *(_OWORD *)(v3 + 5);
  v13[1] = v6;
  v7 = sub_10000A40C((uint64_t)"_BKHIDXXAmbientLightSensorDisableAutoBrightness", BKBackBoardClientEntitlement, (uint64_t)v13);
  if ((_DWORD)v7)
  {
    v8 = BKLogBacklight(v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BKAmbientLightSensorDisableAutoBrightness", buf, 2u);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
    v14 = CFSTR("DisplayAutoBrightnessActive");
    *(_QWORD *)buf = &__kCFBooleanFalse;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v14, 1));
    objc_msgSend(v10, "setProperty:forKey:", v11, CFSTR("DisplayAutoBrightnessStatus"));

    v12 = 0;
  }
  else
  {
    v12 = 5;
  }
  *(_DWORD *)(a2 + 32) = v12;
}

void sub_1000975C0(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  _QWORD v8[4];
  char v9;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100027A94;
  v8[3] = &unk_1000ECA60;
  v9 = v4;
  if (sub_10000A40C((uint64_t)"_BKHIDXXAmbientLightSensorEnableAutoBrightness", BKBackBoardClientEntitlement, (uint64_t)v7))
  {
    sub_100027A94((uint64_t)v8);
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
}

void sub_1000976AC(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  _QWORD v8[4];
  char v9;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100029DD0;
  v8[3] = &unk_1000ECA60;
  v9 = v4;
  if (sub_10000A40C((uint64_t)"_BKHIDXXSetDeviceInterfaceOrientation", BKBackBoardClientEntitlement, (uint64_t)v7))
  {
    sub_100029DD0((uint64_t)v8);
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
}

void sub_100097798(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  _QWORD v8[4];
  char v9;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100029E50;
  v8[3] = &unk_1000ECA60;
  v9 = v4;
  if (sub_10001261C(BKBackBoardSetDeviceOrientationEntitlement, (uint64_t)v7))
  {
    sub_100029E50((uint64_t)v8);
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
}

void sub_10009787C(uint64_t a1, uint64_t a2)
{
  int v3;
  float v4;
  __int128 v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(float *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7 = *(_OWORD *)(a1 + 56);
  v8 = v5;
  if ((sub_100004EF8((uint64_t)"_BKHIDXXRequestEstimatedProximityEvents", BKEstimatedProximityDetectionEntitlement, BKBackBoardClientEntitlement, (uint64_t)&v7) & 1) == 0)
  {
    v3 = 5;
    goto LABEL_7;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDUISensorController sharedInstance](BKHIDUISensorController, "sharedInstance"));
  v9[0] = v7;
  v9[1] = v8;
  *(_DWORD *)(a2 + 36) = objc_msgSend(v6, "requestEstimatedProximityEventsWithTimeout:versionedPID:", BSVersionedPIDForAuditToken(v9), v4);

  *(_DWORD *)(a2 + 32) = 0;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  *(_DWORD *)(a2 + 4) = 40;
}

_DWORD *sub_100097998(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  char *v10;
  __int128 v11;
  _OWORD v12[2];

  if ((*result & 0x80000000) == 0
    && (v3 = result, v4 = result[1], v4 >= 0x28)
    && v4 <= 0x428
    && ((v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        v8 && (result = memchr(result + 10, 0, v4 - 40)) != 0))
  {
    v10 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v10 && *((_DWORD *)v10 + 1) > 0x1Fu)
    {
      v11 = *(_OWORD *)(v10 + 36);
      v12[0] = *(_OWORD *)(v10 + 20);
      v12[1] = v11;
      result = (_DWORD *)sub_100027C20((_BYTE *)v3 + 40, v12);
      *(_DWORD *)(a2 + 32) = (_DWORD)result;
      return result;
    }
    v9 = -309;
  }
  else
  {
    v9 = -304;
  }
  *(_DWORD *)(a2 + 32) = v9;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_100097A80(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  void *v7;
  int v8;
  _OWORD v9[2];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
    goto LABEL_7;
  }
  v4 = a1[6];
  v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v6 = *(_OWORD *)(v3 + 9);
  v9[0] = *(_OWORD *)(v3 + 5);
  v9[1] = v6;
  if (sub_10000A40C((uint64_t)"_BKHIDXXResetProximityCalibration", BKBackBoardClientEntitlement, (uint64_t)v9))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDUISensorController sharedInstance](BKHIDUISensorController, "sharedInstance"));
    objc_msgSend(v7, "resetCalibration");

    v8 = 0;
  }
  else
  {
    v8 = 5;
  }
  *(_DWORD *)(a2 + 32) = v8;
}

void sub_100097B48(_DWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v5 = objc_msgSend(v3, "eventProcessorOfClass:", objc_opt_class(BKHIDProximityEventProcessor, v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    *(_BYTE *)(a2 + 36) = objc_msgSend(v6, "isObjectWithinProximity");
    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_100097C00(_DWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v5 = objc_msgSend(v3, "eventProcessorOfClass:", objc_opt_class(BKHIDProximityEventProcessor, v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    *(_BYTE *)(a2 + 36) = objc_msgSend(v6, "isProximityDetectionActive");
    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_100097CB8(_DWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v5 = objc_msgSend(v3, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    *(_BYTE *)(a2 + 36) = objc_msgSend(v6, "shouldIgnoreTouchesWhileObjectInProximity");
    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_100097D70(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  _QWORD v8[4];
  char v9;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100027CEC;
  v8[3] = &unk_1000ECA60;
  v9 = v4;
  if (sub_10000A40C((uint64_t)"_BKHIDXXSetObjectInProximityIgnoresTouches", BKBackBoardClientEntitlement, (uint64_t)v7))
  {
    sub_100027CEC((uint64_t)v8);
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
}

void sub_100097E5C(_DWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v5 = objc_msgSend(v3, "eventProcessorOfClass:", objc_opt_class(BKButtonHIDEventProcessor, v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    *(_DWORD *)(a2 + 36) = objc_msgSend(v6, "ringerState");

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_100097F10(_DWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v5 = objc_msgSend(v3, "eventProcessorOfClass:", objc_opt_class(BKSmartCoverHIDEventProcessor, v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    *(_BYTE *)(a2 + 36) = objc_msgSend(v6, "isSmartCoverClosed");

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_100097FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  int v10;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 48)
  {
    v10 = -304;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(unsigned __int16 *)(a1 + 40);
    v5 = *(unsigned __int16 *)(a1 + 44);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v8 = objc_msgSend(v6, "eventProcessorOfClass:", objc_opt_class(BKButtonHIDEventProcessor, v7));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    objc_msgSend(v9, "cancelButtonForSenderID:uagePage:usage:", v3, v4, v5);

    v10 = 0;
  }
  *(_DWORD *)(a2 + 32) = v10;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

_DWORD *sub_10009807C(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  __int128 v12;
  _OWORD v13[2];

  if ((*result & 0x80000000) != 0)
    goto LABEL_16;
  v3 = result;
  v4 = result[1];
  if (v4 < 0x2C)
    goto LABEL_16;
  if (v4 > 0x42C)
    goto LABEL_16;
  v5 = result[9];
  if (v5 > 0x400)
    goto LABEL_16;
  v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 44 < v5 || (_DWORD)v4 != v6 + 44)
    goto LABEL_16;
  v8 = 1064;
  if (result[1] < 0x428uLL)
    v8 = result[1];
  result = memchr(result + 10, 0, v8 - 40);
  if (result)
  {
    v9 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v9 && *((_DWORD *)v9 + 1) > 0x1Fu)
    {
      v11 = *(_DWORD *)((char *)v3 + v6 + 40);
      v12 = *(_OWORD *)(v9 + 36);
      v13[0] = *(_OWORD *)(v9 + 20);
      v13[1] = v12;
      result = (_DWORD *)sub_100028068((_BYTE *)v3 + 40, v11, (uint64_t)v13);
      *(_DWORD *)(a2 + 32) = (_DWORD)result;
      return result;
    }
    v10 = -309;
  }
  else
  {
LABEL_16:
    v10 = -304;
  }
  *(_DWORD *)(a2 + 32) = v10;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_100098188(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  int v11;
  _OWORD v12[2];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
    goto LABEL_7;
  }
  v4 = a1[6];
  v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v6 = *(_OWORD *)(v3 + 9);
  v12[0] = *(_OWORD *)(v3 + 5);
  v12[1] = v6;
  if (sub_10001261C(BKBackBoardClientEntitlement, (uint64_t)v12))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v9 = objc_msgSend(v7, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v8));
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

    objc_msgSend(v10, "cancelTouchesOnAllDisplays");
    v11 = 0;
  }
  else
  {
    v11 = 5;
  }
  *(_DWORD *)(a2 + 32) = v11;
}

void sub_100098278(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_100028B48(v6, v4, (uint64_t)v8);
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100098350(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_100028D28(v6, v4, v8);
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100098428(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_100028F70(v6, v4, (uint64_t)v8);
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100098500(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        sub_100029394(v6, v4, (uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000985D8(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  _QWORD v8[5];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 76);
  v7[0] = *(_OWORD *)(a1 + 60);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000291B4;
  v8[3] = &unk_1000EBC38;
  v8[4] = v4;
  if (sub_100004EF8((uint64_t)"_BKHIDXXPlayHaptic", BKFastHapticPlayEntitlement, BKBackBoardClientEntitlement, (uint64_t)v7))
  {
    sub_1000291B4((uint64_t)v8);
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
}

void sub_1000986D0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        sub_1000291F8(v6, v4, (uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

_DWORD *sub_1000987A8(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  char *v9;
  int v10;
  NDR_record_t v11;
  int v12;
  int v13;
  char v14;
  __int128 v15;
  __int128 v16[2];

  if ((*result & 0x80000000) != 0)
    goto LABEL_16;
  v3 = result;
  v4 = result[1];
  if (v4 < 0x34)
    goto LABEL_16;
  if (v4 > 0x434)
    goto LABEL_16;
  v5 = result[10];
  if (v5 > 0x400)
    goto LABEL_16;
  v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 52 < v5 || (_DWORD)v4 != v6 + 52)
    goto LABEL_16;
  v8 = 1068;
  if (result[1] < 0x42CuLL)
    v8 = result[1];
  result = memchr(result + 11, 0, v8 - 44);
  if (!result)
  {
LABEL_16:
    v10 = -304;
    goto LABEL_17;
  }
  v9 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v9 || *((_DWORD *)v9 + 1) <= 0x1Fu)
  {
    v10 = -309;
LABEL_17:
    *(_DWORD *)(a2 + 32) = v10;
    v11 = NDR_record;
    goto LABEL_18;
  }
  v12 = v3[8];
  v13 = *(_DWORD *)((char *)v3 + v6 + 44);
  v14 = *((_BYTE *)v3 + v6 + 48);
  v15 = *(_OWORD *)(v9 + 36);
  v16[0] = *(_OWORD *)(v9 + 20);
  v16[1] = v15;
  result = (_DWORD *)sub_1000295A0(v12, (uint64_t)(v3 + 11), v13, v14, a2 + 36, v16);
  *(_DWORD *)(a2 + 32) = (_DWORD)result;
  v11 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_18:
  *(NDR_record_t *)(a2 + 24) = v11;
  return result;
}

void sub_1000988DC(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  __int128 v5;
  _OWORD v6[2];
  _QWORD v7[4];
  int v8;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 72);
    v6[0] = *(_OWORD *)(a1 + 56);
    v6[1] = v5;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100029720;
    v7[3] = &unk_1000EC750;
    v8 = v4;
    if (sub_100004EF8((uint64_t)"_BKHIDXXTouchStreamInvalidate", BKTouchStreamsEntitlement, BKBackBoardClientEntitlement, (uint64_t)v6))
    {
      sub_100029720((uint64_t)v7);
      v3 = 0;
    }
    else
    {
      v3 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000989D0(_DWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t ClientConnectionManager;
  void *v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint8_t buf[4];
  NSObject *v33;

  v3 = -304;
  if ((*a1 & 0x80000000) == 0)
  {
    v5 = a1[1];
    if (v5 >= 0x28 && v5 <= 0xA8)
    {
      v6 = a1[8];
      if (v6 > 0x20
        || (v6 <= (v5 - 40) >> 2 ? (v7 = (_DWORD)v5 == 4 * (_DWORD)v6 + 40) : (v7 = 0), !v7))
      {
        v3 = -304;
        goto LABEL_13;
      }
      v8 = (char *)a1 + ((v5 + 3) & 0x1FFFFFFFCLL);
      if (*(_DWORD *)v8 || *((_DWORD *)v8 + 1) < 0x20u)
      {
        v3 = -309;
        goto LABEL_13;
      }
      v9 = *(unsigned int *)((char *)a1 + (4 * v6) + 36);
      v10 = *(_OWORD *)(v8 + 36);
      v31[0] = *(_OWORD *)(v8 + 20);
      v31[1] = v10;
      v11 = BSPIDForAuditToken(v31);
      v12 = sub_1000125C8(BKTransferTouchesEntitlement, (uint64_t)v31);
      if ((_DWORD)v12)
      {
        ClientConnectionManager = BKHIDEventRoutingGetClientConnectionManager(v12, v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue(ClientConnectionManager);
        v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "bundleIDForPID:", v11));

        v17 = -[NSObject isEqual:](v16, "isEqual:", CFSTR("com.apple.springboard"));
        if ((_DWORD)v17)
        {
          if ((_DWORD)v6)
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
            v20 = objc_msgSend(v18, "eventProcessorOfClass:", objc_opt_class(BKHIDDirectTouchEventProcessor, v19));
            v21 = (void *)objc_claimAutoreleasedReturnValue(v20);

            objc_msgSend(v21, "transferTouchIdentifiers:count:toContextID:", a1 + 9, v6, v9);
            v3 = 0;
LABEL_25:

            goto LABEL_13;
          }
          v29 = BKLogTouchEvents(v17);
          v24 = objc_claimAutoreleasedReturnValue(v29);
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            goto LABEL_23;
          v30 = BSProcessDescriptionForPID(v11);
          v27 = objc_claimAutoreleasedReturnValue(v30);
          *(_DWORD *)buf = 138543362;
          v33 = v27;
          v28 = "TouchTransfer: %{public}@ requested transfer of no touches";
          goto LABEL_27;
        }
        v25 = BKLogTouchEvents(v17);
        v24 = objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v26 = BSProcessDescriptionForPID(v11);
          v27 = objc_claimAutoreleasedReturnValue(v26);
          *(_DWORD *)buf = 138543362;
          v33 = v27;
          v28 = "TouchTransfer: %{public}@ is not an authorized client";
LABEL_27:
          _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v28, buf, 0xCu);

        }
      }
      else
      {
        v22 = BKLogTouchEvents(v12);
        v16 = objc_claimAutoreleasedReturnValue(v22);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
LABEL_24:
          v3 = 5;
          goto LABEL_25;
        }
        v23 = BSProcessDescriptionForPID(v11);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        *(_DWORD *)buf = 138543362;
        v33 = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "TouchTransfer: %{public}@ is not an authorized client", buf, 0xCu);
      }
LABEL_23:

      goto LABEL_24;
    }
  }
LABEL_13:
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100098CB0(uint64_t a1, uint64_t a2)
{
  int v3;
  NDR_record_t v4;
  uint64_t v6;
  unsigned int v7;
  float *v8;
  int v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  uint64_t v14;
  __int128 v15;
  _OWORD v16[2];

  if ((*(_DWORD *)a1 & 0x80000000) == 0)
    goto LABEL_2;
  v3 = -304;
  if (*(_DWORD *)(a1 + 24) != 1)
    goto LABEL_3;
  v6 = *(unsigned int *)(a1 + 4);
  if (v6 < 0x48 || v6 > 0xC8)
    goto LABEL_3;
  if (*(_BYTE *)(a1 + 39) != 1)
    goto LABEL_17;
  v7 = *(_DWORD *)(a1 + 52);
  if (v7 > 0x20)
  {
LABEL_2:
    v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = NDR_record;
    goto LABEL_4;
  }
  v3 = -304;
  if (v7 > (v6 - 72) >> 2 || (_DWORD)v6 != 4 * v7 + 72)
    goto LABEL_3;
  v8 = (float *)(a1 + 4 * v7);
  v9 = *(_DWORD *)(a1 + 40);
  if (v9 != *((_DWORD *)v8 + 17))
  {
LABEL_17:
    v3 = -300;
    goto LABEL_3;
  }
  v10 = ((v6 + 3) & 0x1FFFFFFFCLL) + a1;
  if (*(_DWORD *)v10 || *(_DWORD *)(v10 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_3;
  }
  v11 = *((_DWORD *)v8 + 14);
  v12 = v8[15];
  v13 = v8[16];
  v14 = *(_QWORD *)(a1 + 28);
  v15 = *(_OWORD *)(v10 + 36);
  v16[0] = *(_OWORD *)(v10 + 20);
  v16[1] = v15;
  *(_DWORD *)(a2 + 32) = sub_10002978C(a1 + 56, v7, v11, v14, v9, a2 + 36, (uint64_t)v16, v12, v13);
  mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  v4 = NDR_record;
  if (!*(_DWORD *)(a2 + 32))
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return;
  }
LABEL_4:
  *(NDR_record_t *)(a2 + 24) = v4;
}

void sub_100098E00(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  _OWORD v8[2];
  _QWORD v9[5];
  int v10;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 44) || *(_DWORD *)(a1 + 48) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 36);
  v6 = *(_OWORD *)(a1 + 80);
  v8[0] = *(_OWORD *)(a1 + 64);
  v8[1] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100029A0C;
  v9[3] = &unk_1000EA8A0;
  v9[4] = v5;
  v10 = v4;
  if (sub_100004EF8((uint64_t)"_BKHIDXXDigitizerTouchSetOffset", BKDetachTouchesEntitlement, BKBackBoardClientEntitlement, (uint64_t)v8))
  {
    sub_100029A0C((uint64_t)v9);
    v7 = 0;
  }
  else
  {
    v7 = 5;
  }
  *(_DWORD *)(a2 + 32) = v7;
}

void sub_100098F00(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  _OWORD v9[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 60)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 56)))
    {
      if (!*(_DWORD *)(a1 + 60) && *(_DWORD *)(a1 + 64) > 0x1Fu)
      {
        v6 = *(_DWORD *)(a1 + 52);
        v7 = *(_QWORD *)(a1 + 28);
        v8 = *(_OWORD *)(a1 + 96);
        v9[0] = *(_OWORD *)(a1 + 80);
        v9[1] = v8;
        *(_DWORD *)(a2 + 32) = sub_100029A84(v6, v7, v4, (uint64_t)v9);
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100098FDC(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  int v7;
  _OWORD v8[2];
  _QWORD v9[5];
  int v10;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 44) || *(_DWORD *)(a1 + 48) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 40);
  v6 = *(_OWORD *)(a1 + 80);
  v8[0] = *(_OWORD *)(a1 + 64);
  v8[1] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100029D28;
  v9[3] = &unk_1000EA8A0;
  v9[4] = v4;
  v10 = v5;
  if (sub_10000A40C((uint64_t)"_BKHIDXXResetUserEventTimer", BKBackBoardClientEntitlement, (uint64_t)v8))
  {
    sub_100029D28((uint64_t)v9);
    v7 = 0;
  }
  else
  {
    v7 = 5;
  }
  *(_DWORD *)(a2 + 32) = v7;
}

void sub_1000990D0(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  void *v7;
  int v8;
  _OWORD v9[2];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
    goto LABEL_7;
  }
  v4 = a1[6];
  v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v6 = *(_OWORD *)(v3 + 9);
  v9[0] = *(_OWORD *)(v3 + 5);
  v9[1] = v6;
  if (sub_10000A40C((uint64_t)"_BKHIDXXNotifyOnNextUserEvent", BKBackBoardClientEntitlement, (uint64_t)v9))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[BKUserEventTimer sharedInstance](BKUserEventTimer, "sharedInstance"));
    objc_msgSend(v7, "notifyOnNextUserEvent");

    v8 = 0;
  }
  else
  {
    v8 = 5;
  }
  *(_DWORD *)(a2 + 32) = v8;
}

void sub_100099198(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  _OWORD v7[2];
  _QWORD v8[5];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
  }
  else
  {
    v4 = a1[6];
    v3 = a1 + 6;
    if (v4 || v3[1] <= 0x1Fu)
    {
      v5 = -309;
    }
    else
    {
      v6 = *(_OWORD *)(v3 + 9);
      v7[0] = *(_OWORD *)(v3 + 5);
      v7[1] = v6;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100029D70;
      v8[3] = &unk_1000EBC38;
      v8[4] = a2 + 36;
      if (sub_10001261C(BKBackBoardLastUserEventTimeEntitlement, (uint64_t)v7))
      {
        sub_100029D70((uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 44;
        return;
      }
      v5 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009928C(_DWORD *a1, uint64_t a2)
{
  void *v3;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKUserEventTimer sharedInstance](BKUserEventTimer, "sharedInstance"));
    *(_BYTE *)(a2 + 36) = objc_msgSend(v3, "isSafeToResetIdleTimer");

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_100099314(_DWORD *a1, uint64_t a2)
{
  id v3;
  void *v4;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = sub_10001A7F4();
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    *(_DWORD *)(a2 + 36) = sub_10008B304((uint64_t)v4);

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

_DWORD *sub_10009939C(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  char *v9;
  int v10;
  char v11;
  __int128 v12;
  __int128 v13[2];

  if ((*result & 0x80000000) != 0)
    goto LABEL_16;
  v3 = result;
  v4 = result[1];
  if (v4 < 0x2C)
    goto LABEL_16;
  if (v4 > 0x42C)
    goto LABEL_16;
  v5 = result[9];
  if (v5 > 0x400)
    goto LABEL_16;
  v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 44 < v5 || (_DWORD)v4 != v6 + 44)
    goto LABEL_16;
  v8 = 1064;
  if (result[1] < 0x428uLL)
    v8 = result[1];
  result = memchr(result + 10, 0, v8 - 40);
  if (result)
  {
    v9 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v9 && *((_DWORD *)v9 + 1) > 0x1Fu)
    {
      v11 = *((_BYTE *)v3 + v6 + 40);
      v12 = *(_OWORD *)(v9 + 36);
      v13[0] = *(_OWORD *)(v9 + 20);
      v13[1] = v12;
      result = (_DWORD *)sub_100029E94((uint64_t)(v3 + 10), v11, v13);
      *(_DWORD *)(a2 + 32) = (_DWORD)result;
      return result;
    }
    v10 = -309;
  }
  else
  {
LABEL_16:
    v10 = -304;
  }
  *(_DWORD *)(a2 + 32) = v10;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_1000994A8(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  char v5;
  __int128 v6;
  _OWORD v7[2];
  _QWORD v8[4];
  int v9;
  __int128 v10;
  __int128 v11;
  char v12;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 32);
    v5 = *(_BYTE *)(a1 + 36);
    v6 = *(_OWORD *)(a1 + 76);
    v7[0] = *(_OWORD *)(a1 + 60);
    v7[1] = v6;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100029FA0;
    v8[3] = &unk_1000EA1A8;
    v12 = v5;
    v9 = v4;
    v10 = *(_OWORD *)(a1 + 60);
    v11 = *(_OWORD *)(a1 + 76);
    if (sub_10000A40C((uint64_t)"_BKHIDXXLockOrientation", BKBackBoardClientEntitlement, (uint64_t)v7))
    {
      sub_100029FA0((uint64_t)v8);
      v3 = 0;
    }
    else
    {
      v3 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000995A8(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  int v8;
  _OWORD v9[2];
  _QWORD v10[4];
  __int128 v11;
  __int128 v12;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
    goto LABEL_7;
  }
  v4 = a1[6];
  v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v6 = *(_OWORD *)(v3 + 9);
  v9[0] = *(_OWORD *)(v3 + 5);
  v9[1] = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10002A020;
  v10[3] = &unk_1000EA1C8;
  v7 = *(_OWORD *)(v3 + 9);
  v11 = *(_OWORD *)(v3 + 5);
  v12 = v7;
  if (sub_10000A40C((uint64_t)"_BKHIDXXUnlockOrientation", BKBackBoardClientEntitlement, (uint64_t)v9))
  {
    sub_10002A020((uint64_t)v10);
    v8 = 0;
  }
  else
  {
    v8 = 5;
  }
  *(_DWORD *)(a2 + 32) = v8;
}

void sub_100099694(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  _OWORD v7[2];
  _QWORD v8[6];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
  }
  else
  {
    v4 = a1[6];
    v3 = a1 + 6;
    if (v4 || v3[1] <= 0x1Fu)
    {
      v5 = -309;
    }
    else
    {
      v6 = *(_OWORD *)(v3 + 9);
      v7[0] = *(_OWORD *)(v3 + 5);
      v7[1] = v6;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10002A07C;
      v8[3] = &unk_1000EA7E0;
      v8[4] = a2 + 36;
      v8[5] = a2 + 40;
      if ((sub_10000A40C((uint64_t)"_BKHIDXXIsOrientationLockedWithOrientation", BKBackBoardClientEntitlement, (uint64_t)v7) & 1) != 0)
      {
        sub_10002A07C((uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 44;
        return;
      }
      v5 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100099794(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  __int128 v7;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v4 = *(unsigned int *)(a1 + 28);
        v5 = *(unsigned __int8 *)(a1 + 48);
        v6 = *(unsigned __int8 *)(a1 + 52);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        sub_10002A0D8(v4, v5, v6, (uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        return;
      }
      v3 = -309;
    }
    else
    {
      v3 = -300;
    }
  }
  else
  {
    v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

uint64_t sub_100099854(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  _OWORD v7[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 40)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112)
    {
      v3 = a1 + 40;
      if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) < 0x20u)
      {
        result = 4294966987;
      }
      else
      {
        v5 = *(unsigned int *)(a1 + 28);
        v6 = *(_OWORD *)(v3 + 36);
        v7[0] = *(_OWORD *)(v3 + 20);
        v7[1] = v6;
        result = sub_10002A168(v5, v7);
      }
    }
    else
    {
      result = 4294966996;
    }
  }
  else
  {
    result = 4294966992;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_100099904(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  double v9;
  uint64_t v10;
  __int128 v11;
  uint8_t buf[16];
  __int128 v13;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 32);
    v11 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)buf = *(_OWORD *)(a1 + 56);
    v13 = v11;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[BSAuditToken tokenFromAuditToken:](BSAuditToken, "tokenFromAuditToken:", buf, *(_QWORD *)buf, *(_QWORD *)&buf[8], v11));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BSProcessHandle processHandleForAuditToken:](BSProcessHandle, "processHandleForAuditToken:", v5));

    v7 = objc_msgSend(v6, "isValid");
    if ((_DWORD)v7)
    {
      +[BKDisplayBrightnessUpdateTransaction beginImplicitTransaction](BKDisplayBrightnessUpdateTransaction, "beginImplicitTransaction");
      v8 = objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessUpdateTransactionManager sharedInstance](BKDisplayBrightnessUpdateTransactionManager, "sharedInstance"));
      LODWORD(v9) = v4;
      -[NSObject setDisplayBrightness:permanently:](v8, "setDisplayBrightness:permanently:", 0, v9);
      v3 = 0;
    }
    else
    {
      v10 = BKLogBacklight(v7);
      v8 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Ignoring implicit brightness transaction request because sender is invalid: %{public}@", buf, 0xCu);
      }
      v3 = 5;
    }

  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_100099A9C(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  char v5;
  __int128 v6;
  int v7;
  _OWORD v8[2];
  _QWORD v9[4];
  int v10;
  char v11;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 36);
  v6 = *(_OWORD *)(a1 + 76);
  v8[0] = *(_OWORD *)(a1 + 60);
  v8[1] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10002A3DC;
  v9[3] = &unk_1000EA1E8;
  v10 = v4;
  v11 = v5;
  if (sub_10001261C(BKDisplayBrightnessEntitlement, (uint64_t)v8))
  {
    sub_10002A3DC((uint64_t)v9);
    v7 = 0;
  }
  else
  {
    v7 = 5;
  }
  *(_DWORD *)(a2 + 32) = v7;
}

_DWORD *sub_100099B88(_DWORD *result, uint64_t a2)
{
  int v2;

  v2 = -304;
  if ((*result & 0x80000000) == 0)
  {
    if (result[1] == 24)
      v2 = 0;
    else
      v2 = -304;
  }
  *(_DWORD *)(a2 + 32) = v2;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_100099BB8(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  void *v7;
  int v8;
  _OWORD v9[2];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
    goto LABEL_7;
  }
  v4 = a1[6];
  v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v6 = *(_OWORD *)(v3 + 9);
  v9[0] = *(_OWORD *)(v3 + 5);
  v9[1] = v6;
  if (sub_10001261C(BKDisplayBrightnessEntitlement, (uint64_t)v9))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessUpdateTransactionManager sharedInstance](BKDisplayBrightnessUpdateTransactionManager, "sharedInstance"));
    objc_msgSend(v7, "restoreSystemDisplayBrightness");

    v8 = 0;
  }
  else
  {
    v8 = 5;
  }
  *(_DWORD *)(a2 + 32) = v8;
}

void sub_100099C78(_DWORD *a1, uint64_t a2)
{
  void *v3;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayBrightnessController sharedInstance](BKDisplayBrightnessController, "sharedInstance"));
    *(_BYTE *)(a2 + 36) = objc_msgSend(v3, "displayBrightnessCurve");

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_100099D00(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  _QWORD v8[4];
  char v9;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10002A42C;
  v8[3] = &unk_1000ECA60;
  v9 = v4;
  if (sub_10001261C(BKDisplayBrightnessEntitlement, (uint64_t)v7))
  {
    sub_10002A42C((uint64_t)v8);
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
}

void sub_100099DE4(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  _QWORD v8[4];
  char v9;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10002A470;
  v8[3] = &unk_1000ECA60;
  v9 = v4;
  if (sub_10001261C(BKDisplayBrightnessEntitlement, (uint64_t)v7))
  {
    sub_10002A470((uint64_t)v8);
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
}

void sub_100099EC8(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;
  _BYTE *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  float v14;
  char v15;
  uint64_t v16;
  double v17;

  if ((*a1 & 0x80000000) == 0
    && (v3 = a1[1], v3 >= 0x28)
    && v3 <= 0x428
    && ((v4 = a1[9], v4 <= 0x400) ? (v5 = (int)v3 - 40 >= v4) : (v5 = 0),
        (v6 = ((v4 + 3) & 0xFFFFFFFC) + 40, v5) ? (v7 = (_DWORD)v3 == v6) : (v7 = 0),
        v7 && (v8 = a1 + 10, memchr(a1 + 10, 0, v3 - 40))))
  {
    if (*v8)
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
    else
      v9 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v12 = objc_msgSend(v10, "eventProcessorOfClass:", objc_opt_class(BKHumanPresenceHIDEventProcessor, v11));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

    v16 = 0;
    v17 = 0.0;
    v15 = 0;
    objc_msgSend(v13, "getStatus:presence:proximityInCentimeters:forDisplayUUID:", &v16, &v15, &v17, v9);
    *(_DWORD *)(a2 + 36) = v16;
    *(_BYTE *)(a2 + 40) = v15;
    v14 = v17;
    *(float *)(a2 + 44) = v14;

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 48;
  }
  else
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
}

void sub_10009A028(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  unsigned __int8 v8;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v6 = objc_msgSend(v4, "eventProcessorOfClass:", objc_opt_class(BKKeyboardHIDEventProcessor, v5));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

    if (v3)
      v8 = objc_msgSend(v7, "isCapsLockLightOnForSenderID:", v3);
    else
      v8 = objc_msgSend(v7, "isCapsLockLightOn");
    *(_BYTE *)(a2 + 36) = v8;

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_10009A0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  _BOOL8 v9;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v7 = objc_msgSend(v5, "eventProcessorOfClass:", objc_opt_class(BKKeyboardHIDEventProcessor, v6));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    v9 = v4 != 0;
    if (v3)
      objc_msgSend(v8, "setRomanCapsLockSwitchModeActive:forSenderID:", v9, v3);
    else
      objc_msgSend(v8, "setRomanCapsLockSwitchModeActive:", v9);

    *(_DWORD *)(a2 + 32) = 0;
  }
}

void sub_10009A1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 48)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(double *)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v7 = objc_msgSend(v5, "eventProcessorOfClass:", objc_opt_class(BKKeyboardHIDEventProcessor, v6));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    if (v3)
      objc_msgSend(v8, "setCapsLockDelayOverride:forSenderID:", v3, v4);
    else
      objc_msgSend(v8, "setCapsLockDelayOverride:", v4);

    *(_DWORD *)(a2 + 32) = 0;
  }
}

void sub_10009A278(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(unsigned int *)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v7 = objc_msgSend(v5, "eventProcessorOfClass:", objc_opt_class(BKKeyboardHIDEventProcessor, v6));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    objc_msgSend(v8, "setStandardType:forSenderID:", v4, v3);
    *(_DWORD *)(a2 + 32) = 0;
  }
}

void sub_10009A32C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v7 = objc_msgSend(v5, "eventProcessorOfClass:", objc_opt_class(BKKeyboardHIDEventProcessor, v6));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    objc_msgSend(v8, "setCapsLockActive:onSenderID:", v4 != 0, v3);
    *(_DWORD *)(a2 + 32) = 0;
  }
}

void sub_10009A3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
    v6 = objc_msgSend(v4, "eventProcessorOfClass:", objc_opt_class(BKKeyboardHIDEventProcessor, v5));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

    *(_BYTE *)(a2 + 36) = objc_msgSend(v7, "keyboardWantsStandardTypeOverrideForSenderID:", v3);
    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_10009A4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;

  if ((*(_DWORD *)a1 & 0x80000000) == 0
    && (v4 = *(unsigned int *)(a1 + 4), v4 >= 0x30)
    && v4 <= 0x430
    && ((v5 = *(_DWORD *)(a1 + 44), v5 <= 0x400) ? (v6 = (int)v4 - 48 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 48, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        v8 && memchr((void *)(a1 + 48), 0, v4 - 48)))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1 + 48));
      if (objc_msgSend(v10, "length"))
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[BKHIDEventProcessorRegistry sharedInstance](BKHIDEventProcessorRegistry, "sharedInstance"));
        v13 = objc_msgSend(v11, "eventProcessorOfClass:", objc_opt_class(BKKeyboardHIDEventProcessor, v12));
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

        if (v9)
          objc_msgSend(v14, "setKeyboardLayout:forSenderID:", v10, v9);
        else
          objc_msgSend(v14, "setKeyboardLayout:", v10);

      }
    }
    else
    {
      v10 = 0;
    }

    *(_DWORD *)(a2 + 32) = 0;
  }
  else
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
}

void sub_10009A5DC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_1000288EC(v6, v4, (uint64_t)v8);
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009A6B4(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  int v12;
  _OWORD v13[2];

  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 2 || *(_DWORD *)(a1 + 4) != 76)
  {
    v4 = -304;
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 39) != 1
    || *(_BYTE *)(a1 + 55) != 1
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a1 + 68)
    || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 72))
  {
    v4 = -300;
    goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 76) || *(_DWORD *)(a1 + 80) <= 0x1Fu)
  {
    v4 = -309;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v4;
    goto LABEL_13;
  }
  *(_DWORD *)(a2 + 52) = 0;
  v5 = (_DWORD *)(a2 + 52);
  v6 = (_QWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 36) = 16777472;
  v7 = *(_QWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 44);
  v10 = *(_DWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 112);
  v13[0] = *(_OWORD *)(a1 + 96);
  v13[1] = v11;
  v12 = sub_100028254(v7, v8, v9, v10, v6, v5, (uint64_t)v13);
  mig_deallocate(*(_QWORD *)(a1 + 44), *(unsigned int *)(a1 + 56));
  *(_QWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (!v12)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return;
  }
  *(_DWORD *)(a2 + 32) = v12;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009A820(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  int v12;
  _OWORD v13[2];

  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 2 || *(_DWORD *)(a1 + 4) != 76)
  {
    v4 = -304;
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 39) != 1
    || *(_BYTE *)(a1 + 55) != 1
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a1 + 68)
    || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 72))
  {
    v4 = -300;
    goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 76) || *(_DWORD *)(a1 + 80) <= 0x1Fu)
  {
    v4 = -309;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v4;
    goto LABEL_13;
  }
  *(_DWORD *)(a2 + 52) = 0;
  v5 = (_DWORD *)(a2 + 52);
  v6 = (_QWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 36) = 16777472;
  v7 = *(_QWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 44);
  v10 = *(_DWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 112);
  v13[0] = *(_OWORD *)(a1 + 96);
  v13[1] = v11;
  v12 = sub_1000285A0(v7, v8, v9, v10, v6, v5, (uint64_t)v13);
  mig_deallocate(*(_QWORD *)(a1 + 44), *(unsigned int *)(a1 + 56));
  *(_QWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (!v12)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return;
  }
  *(_DWORD *)(a2 + 32) = v12;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009A98C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD v10[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 76)
  {
    if (*(_BYTE *)(a1 + 39) == 1
      && *(_BYTE *)(a1 + 55) == 1
      && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 68))
      && (v5 = *(_DWORD *)(a1 + 56), v5 == *(_DWORD *)(a1 + 72)))
    {
      if (!*(_DWORD *)(a1 + 76) && *(_DWORD *)(a1 + 80) > 0x1Fu)
      {
        v7 = *(_QWORD *)(a1 + 28);
        v8 = *(_QWORD *)(a1 + 44);
        v9 = *(_OWORD *)(a1 + 112);
        v10[0] = *(_OWORD *)(a1 + 96);
        v10[1] = v9;
        *(_DWORD *)(a2 + 32) = sub_10002A4BC(v7, v4, v8, v5, v10);
        mig_deallocate(*(_QWORD *)(a1 + 44), *(unsigned int *)(a1 + 56));
        *(_QWORD *)(a1 + 44) = 0;
        *(_DWORD *)(a1 + 56) = 0;
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      v6 = -309;
    }
    else
    {
      v6 = -300;
    }
  }
  else
  {
    v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009AA98(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  __int128 v11;
  int v12;
  _OWORD v13[2];

  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 2 || *(_DWORD *)(a1 + 4) != 76)
  {
    v4 = -304;
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 39) != 1
    || *(_BYTE *)(a1 + 55) != 1
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a1 + 68)
    || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 72))
  {
    v4 = -300;
    goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 76) || *(_DWORD *)(a1 + 80) <= 0x1Fu)
  {
    v4 = -309;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v4;
    goto LABEL_13;
  }
  *(_DWORD *)(a2 + 52) = 0;
  v5 = (_DWORD *)(a2 + 52);
  v6 = (_QWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 36) = 16777472;
  v7 = *(_QWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 44);
  v10 = *(_DWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 112);
  v13[0] = *(_OWORD *)(a1 + 96);
  v13[1] = v11;
  v12 = sub_10002AD60(v7, v8, v9, v10, v6, v5, (uint64_t)v13);
  mig_deallocate(*(_QWORD *)(a1 + 44), *(unsigned int *)(a1 + 56));
  *(_QWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (!v12)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return;
  }
  *(_DWORD *)(a2 + 32) = v12;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009AC04(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  NDR_record_t v6;
  uint64_t v7;
  __int128 v8;
  _OWORD v9[2];

  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 1 || *(_DWORD *)(a1 + 4) != 56)
  {
    v5 = -304;
    goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 39) != 1 || (v4 = *(_DWORD *)(a1 + 40), v4 != *(_DWORD *)(a1 + 52)))
  {
    v5 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 56) || *(_DWORD *)(a1 + 60) <= 0x1Fu)
  {
    v5 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v5;
    v6 = NDR_record;
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(a1 + 28);
  v8 = *(_OWORD *)(a1 + 92);
  v9[0] = *(_OWORD *)(a1 + 76);
  v9[1] = v8;
  sub_10002B758(v7, v4, (unsigned int *)(a2 + 36), (uint64_t)v9);
  *(_DWORD *)(a2 + 32) = 0;
  mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  v6 = NDR_record;
  if (!*(_DWORD *)(a2 + 32))
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v6;
}

void sub_10009AD00(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        sub_10002B148(v6, v4, v8);
        *(_DWORD *)(a2 + 32) = 0;
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009ADD8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_100027D60(v6, v4, v8);
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009AEB0(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  _OWORD v7[2];
  _QWORD v8[6];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
  }
  else
  {
    v4 = a1[6];
    v3 = a1 + 6;
    if (v4 || v3[1] <= 0x1Fu)
    {
      v5 = -309;
    }
    else
    {
      *(_DWORD *)(a2 + 52) = 0;
      *(_DWORD *)(a2 + 36) = 16777472;
      v6 = *(_OWORD *)(v3 + 9);
      v7[0] = *(_OWORD *)(v3 + 5);
      v7[1] = v6;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10002B55C;
      v8[3] = &unk_1000EA7E0;
      v8[4] = a2 + 28;
      v8[5] = a2 + 52;
      if ((sub_10000A40C((uint64_t)"_BKHIDXXGetUISensorCharacteristics", BKBackBoardClientEntitlement, (uint64_t)v7) & 1) != 0)
      {
        sub_10002B55C((uint64_t)v8);
        *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
        *(NDR_record_t *)(a2 + 44) = NDR_record;
        *(_DWORD *)a2 |= 0x80000000;
        *(_DWORD *)(a2 + 4) = 56;
        *(_DWORD *)(a2 + 24) = 1;
        return;
      }
      v5 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009AFD0(uint64_t a1, uint64_t a2)
{
  int v3;
  int32x2_t v4;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  _QWORD v8[4];
  __int128 v9;
  __int128 v10;
  int32x2_t v11;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v4 = *(int32x2_t *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 76);
  v7[0] = *(_OWORD *)(a1 + 60);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10002B6B0;
  v8[3] = &unk_1000EA880;
  v9 = v7[0];
  v10 = v5;
  v11 = vrev64_s32(v4);
  if (sub_10000A40C((uint64_t)"_BKHIDXXTouchSensitiveButtonSetScanMode", BKBackBoardClientEntitlement, (uint64_t)v7))
  {
    sub_10002B6B0((uint64_t)v8);
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
}

uint64_t sub_10009B0C8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 6001030) >= 0xFFFFFFE2)
    return (uint64_t)*(&off_1000EDF60 + 5 * (v1 - 6001000) + 5);
  else
    return 0;
}

_DWORD *sub_10009B108(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  NDR_record_t v10;
  char *v11;
  __int128 v12;
  _OWORD v13[2];

  if ((*result & 0x80000000) != 0
    || (v3 = result, v4 = result[1], v4 < 0x28)
    || v4 > 0x428
    || ((v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        !v8 || (result = memchr(result + 10, 0, v4 - 40)) == 0))
  {
    v9 = -304;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v9;
    v10 = NDR_record;
    goto LABEL_13;
  }
  v11 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) <= 0x1Fu)
  {
    v9 = -309;
    goto LABEL_12;
  }
  v12 = *(_OWORD *)(v11 + 36);
  v13[0] = *(_OWORD *)(v11 + 20);
  v13[1] = v12;
  result = (_DWORD *)sub_10003AF04((uint64_t)(v3 + 10), a2 + 36, (uint64_t)v13);
  *(_DWORD *)(a2 + 32) = (_DWORD)result;
  v10 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = v10;
  return result;
}

_DWORD *sub_10009B210(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  char *v9;
  int v10;
  NDR_record_t v11;
  char v12;
  __int128 v13;
  __int128 v14[2];

  if ((*result & 0x80000000) != 0)
    goto LABEL_16;
  v3 = result;
  v4 = result[1];
  if (v4 < 0x2C)
    goto LABEL_16;
  if (v4 > 0x42C)
    goto LABEL_16;
  v5 = result[9];
  if (v5 > 0x400)
    goto LABEL_16;
  v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 44 < v5 || (_DWORD)v4 != v6 + 44)
    goto LABEL_16;
  v8 = 1064;
  if (result[1] < 0x428uLL)
    v8 = result[1];
  result = memchr(result + 10, 0, v8 - 40);
  if (!result)
  {
LABEL_16:
    v10 = -304;
    goto LABEL_17;
  }
  v9 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v9 || *((_DWORD *)v9 + 1) <= 0x1Fu)
  {
    v10 = -309;
LABEL_17:
    *(_DWORD *)(a2 + 32) = v10;
    v11 = NDR_record;
    goto LABEL_18;
  }
  v12 = *((_BYTE *)v3 + v6 + 40);
  v13 = *(_OWORD *)(v9 + 36);
  v14[0] = *(_OWORD *)(v9 + 20);
  v14[1] = v13;
  result = (_DWORD *)sub_10003B020((uint64_t)(v3 + 10), v12, a2 + 36, v14);
  *(_DWORD *)(a2 + 32) = (_DWORD)result;
  v11 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_18:
  *(NDR_record_t *)(a2 + 24) = v11;
  return result;
}

_DWORD *sub_10009B33C(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  char *v9;
  int v10;
  char v11;
  char v12;
  __int128 v13;
  _OWORD v14[2];

  if ((*result & 0x80000000) != 0)
    goto LABEL_16;
  v3 = result;
  v4 = result[1];
  if (v4 < 0x30)
    goto LABEL_16;
  if (v4 > 0x430)
    goto LABEL_16;
  v5 = result[9];
  if (v5 > 0x400)
    goto LABEL_16;
  v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 48 < v5 || (_DWORD)v4 != v6 + 48)
    goto LABEL_16;
  v8 = 1064;
  if (result[1] < 0x428uLL)
    v8 = result[1];
  result = memchr(result + 10, 0, v8 - 40);
  if (result)
  {
    v9 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v9 && *((_DWORD *)v9 + 1) > 0x1Fu)
    {
      v11 = *((_BYTE *)v3 + v6 + 40);
      v12 = *((_BYTE *)v3 + v6 + 44);
      v13 = *(_OWORD *)(v9 + 36);
      v14[0] = *(_OWORD *)(v9 + 20);
      v14[1] = v13;
      result = (_DWORD *)sub_100039C2C((uint64_t)(v3 + 10), v11, v12, (uint64_t)v14);
      *(_DWORD *)(a2 + 32) = (_DWORD)result;
      return result;
    }
    v10 = -309;
  }
  else
  {
LABEL_16:
    v10 = -304;
  }
  *(_DWORD *)(a2 + 32) = v10;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10009B44C(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  char *v10;
  __int128 v11;
  _OWORD v12[2];

  if ((*result & 0x80000000) == 0
    && (v3 = result, v4 = result[1], v4 >= 0x28)
    && v4 <= 0x428
    && ((v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        v8 && (result = memchr(result + 10, 0, v4 - 40)) != 0))
  {
    v10 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v10 && *((_DWORD *)v10 + 1) > 0x1Fu)
    {
      v11 = *(_OWORD *)(v10 + 36);
      v12[0] = *(_OWORD *)(v10 + 20);
      v12[1] = v11;
      result = (_DWORD *)sub_100039F9C((uint64_t)(v3 + 10), (uint64_t)v12);
      *(_DWORD *)(a2 + 32) = (_DWORD)result;
      return result;
    }
    v9 = -309;
  }
  else
  {
    v9 = -304;
  }
  *(_DWORD *)(a2 + 32) = v9;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10009B534(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  NDR_record_t v10;
  char *v11;
  __int128 v12;
  _OWORD v13[2];

  if ((*result & 0x80000000) != 0
    || (v3 = result, v4 = result[1], v4 < 0x28)
    || v4 > 0x428
    || ((v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        !v8 || (result = memchr(result + 10, 0, v4 - 40)) == 0))
  {
    v9 = -304;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v9;
    v10 = NDR_record;
    goto LABEL_13;
  }
  v11 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) <= 0x1Fu)
  {
    v9 = -309;
    goto LABEL_12;
  }
  v12 = *(_OWORD *)(v11 + 36);
  v13[0] = *(_OWORD *)(v11 + 20);
  v13[1] = v12;
  result = (_DWORD *)sub_10003A124((uint64_t)(v3 + 10), a2 + 36, (uint64_t)v13);
  *(_DWORD *)(a2 + 32) = (_DWORD)result;
  v10 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_10009B63C(_DWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  char *v11;
  char v12;
  __int128 v13;
  _OWORD v14[2];

  v4 = *a1;
  result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    v6 = a1[1];
    if (v6 >= 0x2C && v6 <= 0x42C)
    {
      v7 = a1[9];
      if (v7 <= 0x400)
      {
        v8 = (v7 + 3) & 0xFFFFFFFC;
        if ((int)v6 - 44 >= v7 && (_DWORD)v6 == v8 + 44)
        {
          v10 = 1064;
          if (a1[1] < 0x428uLL)
            v10 = a1[1];
          if (memchr(a1 + 10, 0, v10 - 40))
          {
            v11 = (char *)a1 + ((v6 + 3) & 0x1FFFFFFFCLL);
            if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) < 0x20u)
            {
              result = 4294966987;
            }
            else
            {
              v12 = *((_BYTE *)a1 + v8 + 40);
              v13 = *(_OWORD *)(v11 + 36);
              v14[0] = *(_OWORD *)(v11 + 20);
              v14[1] = v13;
              result = sub_10003A240((uint64_t)(a1 + 10), v12, (uint64_t)v14);
            }
          }
          else
          {
            result = 4294966992;
          }
        }
      }
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10009B748(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  char *v10;
  __int128 v11;
  _OWORD v12[2];

  if ((*result & 0x80000000) != 0
    || (v3 = result, v4 = result[1], v4 < 0x28)
    || v4 > 0x428
    || ((v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        !v8 || (result = memchr(result + 10, 0, v4 - 40)) == 0))
  {
    v9 = -304;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v9;
    goto LABEL_13;
  }
  v10 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v10 || *((_DWORD *)v10 + 1) <= 0x1Fu)
  {
    v9 = -309;
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + 36) = 16777472;
  v11 = *(_OWORD *)(v10 + 36);
  v12[0] = *(_OWORD *)(v10 + 20);
  v12[1] = v11;
  result = (_DWORD *)sub_10003A3DC((_BYTE *)v3 + 40, (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (uint64_t)v12);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_10009B87C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];

  if ((*(_DWORD *)a1 & 0x80000000) == 0)
    goto LABEL_2;
  v3 = -304;
  if (*(_DWORD *)(a1 + 24) != 1)
    goto LABEL_3;
  v5 = *(unsigned int *)(a1 + 4);
  if (v5 < 0x40 || v5 > 0x440)
    goto LABEL_3;
  if (*(_BYTE *)(a1 + 39) != 1)
    goto LABEL_19;
  v6 = *(_DWORD *)(a1 + 56);
  if (v6 > 0x400)
  {
LABEL_2:
    v3 = -304;
    goto LABEL_3;
  }
  v3 = -304;
  if ((int)v5 - 64 < v6)
    goto LABEL_3;
  v7 = (v6 + 3) & 0xFFFFFFFC;
  if ((_DWORD)v5 != v7 + 64)
    goto LABEL_3;
  v8 = *(_DWORD *)(a1 + 40);
  if (v8 != *(_DWORD *)(a1 + v7 + 60))
  {
LABEL_19:
    v3 = -300;
    goto LABEL_3;
  }
  v9 = 1084;
  if (*(unsigned int *)(a1 + 4) < 0x43CuLL)
    v9 = *(unsigned int *)(a1 + 4);
  if (!memchr((void *)(a1 + 60), 0, v9 - 60))
    goto LABEL_2;
  v10 = ((v5 + 3) & 0x1FFFFFFFCLL) + a1;
  if (!*(_DWORD *)v10 && *(_DWORD *)(v10 + 4) > 0x1Fu)
  {
    v11 = *(_QWORD *)(a1 + 28);
    v12 = *(_OWORD *)(v10 + 36);
    v13[0] = *(_OWORD *)(v10 + 20);
    v13[1] = v12;
    *(_DWORD *)(a2 + 32) = sub_10003A564(a1 + 60, v11, v8, (uint64_t)v13);
    mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
    *(_QWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    return;
  }
  v3 = -309;
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

_DWORD *sub_10009B9D8(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  NDR_record_t v10;
  char *v11;
  __int128 v12;
  _OWORD v13[2];

  if ((*result & 0x80000000) != 0
    || (v3 = result, v4 = result[1], v4 < 0x28)
    || v4 > 0x428
    || ((v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        !v8 || (result = memchr(result + 10, 0, v4 - 40)) == 0))
  {
    v9 = -304;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v9;
    v10 = NDR_record;
    goto LABEL_13;
  }
  v11 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) <= 0x1Fu)
  {
    v9 = -309;
    goto LABEL_12;
  }
  v12 = *(_OWORD *)(v11 + 36);
  v13[0] = *(_OWORD *)(v11 + 20);
  v13[1] = v12;
  result = (_DWORD *)sub_10003A8D0((uint64_t)(v3 + 10), a2 + 36, (uint64_t)v13);
  *(_DWORD *)(a2 + 32) = (_DWORD)result;
  v10 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_10009BAE0(_DWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  char *v11;
  char v12;
  __int128 v13;
  _OWORD v14[2];

  v4 = *a1;
  result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    v6 = a1[1];
    if (v6 >= 0x2C && v6 <= 0x42C)
    {
      v7 = a1[9];
      if (v7 <= 0x400)
      {
        v8 = (v7 + 3) & 0xFFFFFFFC;
        if ((int)v6 - 44 >= v7 && (_DWORD)v6 == v8 + 44)
        {
          v10 = 1064;
          if (a1[1] < 0x428uLL)
            v10 = a1[1];
          if (memchr(a1 + 10, 0, v10 - 40))
          {
            v11 = (char *)a1 + ((v6 + 3) & 0x1FFFFFFFCLL);
            if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) < 0x20u)
            {
              result = 4294966987;
            }
            else
            {
              v12 = *((_BYTE *)a1 + v8 + 40);
              v13 = *(_OWORD *)(v11 + 36);
              v14[0] = *(_OWORD *)(v11 + 20);
              v14[1] = v13;
              result = sub_10003A9EC((uint64_t)(a1 + 10), v12, (uint64_t)v14);
            }
          }
          else
          {
            result = 4294966992;
          }
        }
      }
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10009BBEC(int *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  __int128 v14;
  _OWORD v15[2];

  v4 = *a1;
  result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    v6 = a1[1];
    if (v6 >= 0x30 && v6 <= 0x430)
    {
      v7 = a1[9];
      if (v7 <= 0x400)
      {
        v8 = (v7 + 3) & 0xFFFFFFFC;
        if ((int)v6 - 48 >= v7 && (_DWORD)v6 == v8 + 48)
        {
          v10 = 1064;
          if (a1[1] < 0x428uLL)
            v10 = a1[1];
          if (memchr(a1 + 10, 0, v10 - 40))
          {
            v11 = (char *)a1 + ((v6 + 3) & 0x1FFFFFFFCLL);
            if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) < 0x20u)
            {
              result = 4294966987;
            }
            else
            {
              v12 = *(int *)((char *)a1 + v8 + 40);
              v13 = *(int *)((char *)a1 + v8 + 44);
              v14 = *(_OWORD *)(v11 + 36);
              v15[0] = *(_OWORD *)(v11 + 20);
              v15[1] = v14;
              result = sub_10003AB88((uint64_t)(a1 + 10), v12, v13, (uint64_t)v15);
            }
          }
          else
          {
            result = 4294966992;
          }
        }
      }
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10009BCFC(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  NDR_record_t v10;
  char *v11;
  __int128 v12;
  _OWORD v13[2];

  if ((*result & 0x80000000) != 0
    || (v3 = result, v4 = result[1], v4 < 0x28)
    || v4 > 0x428
    || ((v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        !v8 || (result = memchr(result + 10, 0, v4 - 40)) == 0))
  {
    v9 = -304;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v9;
    v10 = NDR_record;
    goto LABEL_13;
  }
  v11 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) <= 0x1Fu)
  {
    v9 = -309;
    goto LABEL_12;
  }
  v12 = *(_OWORD *)(v11 + 36);
  v13[0] = *(_OWORD *)(v11 + 20);
  v13[1] = v12;
  result = (_DWORD *)sub_10003AC4C((uint64_t)(v3 + 10), a2 + 36, (uint64_t)v13);
  *(_DWORD *)(a2 + 32) = (_DWORD)result;
  v10 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_10009BE04(_DWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  char *v11;
  char v12;
  __int128 v13;
  _OWORD v14[2];

  v4 = *a1;
  result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    v6 = a1[1];
    if (v6 >= 0x2C && v6 <= 0x42C)
    {
      v7 = a1[9];
      if (v7 <= 0x400)
      {
        v8 = (v7 + 3) & 0xFFFFFFFC;
        if ((int)v6 - 44 >= v7 && (_DWORD)v6 == v8 + 44)
        {
          v10 = 1064;
          if (a1[1] < 0x428uLL)
            v10 = a1[1];
          if (memchr(a1 + 10, 0, v10 - 40))
          {
            v11 = (char *)a1 + ((v6 + 3) & 0x1FFFFFFFCLL);
            if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) < 0x20u)
            {
              result = 4294966987;
            }
            else
            {
              v12 = *((_BYTE *)a1 + v8 + 40);
              v13 = *(_OWORD *)(v11 + 36);
              v14[0] = *(_OWORD *)(v11 + 20);
              v14[1] = v13;
              result = sub_10003AD68((uint64_t)(a1 + 10), v12, (uint64_t)v14);
            }
          }
          else
          {
            result = 4294966992;
          }
        }
      }
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_10009BF10(uint64_t a1, uint64_t a2)
{
  int v3;
  id v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  _QWORD v8[5];
  BOOL v9;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 32);
    v4 = sub_10005FC2C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v6 = (void *)v5;
    if (v5)
    {
      v7 = *(NSObject **)(v5 + 8);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10005FCDC;
      v8[3] = &unk_1000EC978;
      v8[4] = v6;
      v9 = v3 != 0;
      dispatch_async(v7, v8);
    }

    *(_DWORD *)(a2 + 32) = 0;
  }
}

_DWORD *sub_10009BFD8(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  char *v9;
  int v10;
  char v11;
  __int128 v12;
  __int128 v13[2];

  if ((*result & 0x80000000) != 0)
    goto LABEL_16;
  v3 = result;
  v4 = result[1];
  if (v4 < 0x2C)
    goto LABEL_16;
  if (v4 > 0x42C)
    goto LABEL_16;
  v5 = result[9];
  if (v5 > 0x400)
    goto LABEL_16;
  v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 44 < v5 || (_DWORD)v4 != v6 + 44)
    goto LABEL_16;
  v8 = 1064;
  if (result[1] < 0x428uLL)
    v8 = result[1];
  result = memchr(result + 10, 0, v8 - 40);
  if (result)
  {
    v9 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v9 && *((_DWORD *)v9 + 1) > 0x1Fu)
    {
      v11 = *((_BYTE *)v3 + v6 + 40);
      v12 = *(_OWORD *)(v9 + 36);
      v13[0] = *(_OWORD *)(v9 + 20);
      v13[1] = v12;
      result = (_DWORD *)sub_10003B1DC((uint64_t)(v3 + 10), v11, v13);
      *(_DWORD *)(a2 + 32) = (_DWORD)result;
      return result;
    }
    v10 = -309;
  }
  else
  {
LABEL_16:
    v10 = -304;
  }
  *(_DWORD *)(a2 + 32) = v10;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10009C0E4(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  char *v10;
  __int128 v11;
  __int128 v12[2];

  if ((*result & 0x80000000) == 0
    && (v3 = result, v4 = result[1], v4 >= 0x28)
    && v4 <= 0x428
    && ((v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        v8 && (result = memchr(result + 10, 0, v4 - 40)) != 0))
  {
    v10 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v10 && *((_DWORD *)v10 + 1) > 0x1Fu)
    {
      v11 = *(_OWORD *)(v10 + 36);
      v12[0] = *(_OWORD *)(v10 + 20);
      v12[1] = v11;
      result = (_DWORD *)sub_10003B454((uint64_t)(v3 + 10), v12);
      *(_DWORD *)(a2 + 32) = (_DWORD)result;
      return result;
    }
    v9 = -309;
  }
  else
  {
    v9 = -304;
  }
  *(_DWORD *)(a2 + 32) = v9;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_10009C1CC(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  _OWORD v7[2];
  _QWORD v8[5];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
  }
  else
  {
    v4 = a1[6];
    v3 = a1 + 6;
    if (v4 || v3[1] <= 0x1Fu)
    {
      v5 = -309;
    }
    else
    {
      v6 = *(_OWORD *)(v3 + 9);
      v7[0] = *(_OWORD *)(v3 + 5);
      v7[1] = v6;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10003B614;
      v8[3] = &unk_1000EBC38;
      v8[4] = a2 + 36;
      if ((sub_10000A40C((uint64_t)"_BKDisplayXXTetherPrefsNeedImmediateUpdate", BKBackBoardClientEntitlement, (uint64_t)v7) & 1) != 0)
      {
        sub_10003B614((uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 40;
        return;
      }
      v5 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009C2C8(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  _OWORD v6[2];
  _QWORD v7[4];
  char v8;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v4 = *(_BYTE *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 72);
    v6[0] = *(_OWORD *)(a1 + 56);
    v6[1] = v5;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10003B68C;
    v7[3] = &unk_1000ECA60;
    v8 = v4;
    if (sub_10000A40C((uint64_t)"_BKDisplayXXSetTetheredOrientationNotificationsDisabled", BKBackBoardClientEntitlement, (uint64_t)v6))
    {
      sub_10003B68C((uint64_t)v7);
      v3 = 0;
    }
    else
    {
      v3 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009C3B0(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  _OWORD v6[2];
  _QWORD v7[4];
  char v8;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v4 = *(_BYTE *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 72);
    v6[0] = *(_OWORD *)(a1 + 56);
    v6[1] = v5;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10003C0F0;
    v7[3] = &unk_1000ECA60;
    v8 = v4;
    if (sub_10000A40C((uint64_t)"_BKDisplayXXSetSecureMode", BKBackBoardClientEntitlement, (uint64_t)v6))
    {
      sub_10003C0F0((uint64_t)v7);
      v3 = 0;
    }
    else
    {
      v3 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

_DWORD *sub_10009C498(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  char *v10;
  __int128 v11;
  _OWORD v12[2];

  if ((*result & 0x80000000) != 0
    || (v3 = result, v4 = result[1], v4 < 0x28)
    || v4 > 0x428
    || ((v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        !v8 || (result = memchr(result + 10, 0, v4 - 40)) == 0))
  {
    v9 = -304;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v9;
    goto LABEL_13;
  }
  v10 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v10 || *((_DWORD *)v10 + 1) <= 0x1Fu)
  {
    v9 = -309;
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + 36) = 16777472;
  v11 = *(_OWORD *)(v10 + 36);
  v12[0] = *(_OWORD *)(v10 + 20);
  v12[1] = v11;
  result = (_DWORD *)sub_10003BEE8((_BYTE *)v3 + 40, (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (uint64_t)v12);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_10009C5CC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD v10[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 76)
  {
    if (*(_BYTE *)(a1 + 39) == 1
      && *(_BYTE *)(a1 + 55) == 1
      && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 68))
      && (v5 = *(_DWORD *)(a1 + 56), v5 == *(_DWORD *)(a1 + 72)))
    {
      if (!*(_DWORD *)(a1 + 76) && *(_DWORD *)(a1 + 80) > 0x1Fu)
      {
        v7 = *(_QWORD *)(a1 + 28);
        v8 = *(_QWORD *)(a1 + 44);
        v9 = *(_OWORD *)(a1 + 112);
        v10[0] = *(_OWORD *)(a1 + 96);
        v10[1] = v9;
        *(_DWORD *)(a2 + 32) = sub_10003B938(v7, v4, v8, v5, (uint64_t)v10);
        mig_deallocate(*(_QWORD *)(a1 + 44), *(unsigned int *)(a1 + 56));
        *(_QWORD *)(a1 + 44) = 0;
        *(_DWORD *)(a1 + 56) = 0;
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        goto LABEL_13;
      }
      v6 = -309;
    }
    else
    {
      v6 = -300;
    }
  }
  else
  {
    v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009C6D8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD v10[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 76)
  {
    if (*(_BYTE *)(a1 + 39) == 1
      && *(_BYTE *)(a1 + 55) == 1
      && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 68))
      && (v5 = *(_DWORD *)(a1 + 56), v5 == *(_DWORD *)(a1 + 72)))
    {
      if (!*(_DWORD *)(a1 + 76) && *(_DWORD *)(a1 + 80) > 0x1Fu)
      {
        v7 = *(_QWORD *)(a1 + 28);
        v8 = *(_QWORD *)(a1 + 44);
        v9 = *(_OWORD *)(a1 + 112);
        v10[0] = *(_OWORD *)(a1 + 96);
        v10[1] = v9;
        *(_DWORD *)(a2 + 32) = sub_10003BD38(v7, v4, v8, v5, (uint64_t)v10);
        mig_deallocate(*(_QWORD *)(a1 + 44), *(unsigned int *)(a1 + 56));
        *(_QWORD *)(a1 + 44) = 0;
        *(_DWORD *)(a1 + 56) = 0;
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        goto LABEL_13;
      }
      v6 = -309;
    }
    else
    {
      v6 = -300;
    }
  }
  else
  {
    v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009C7E4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_10003BE28(v6, v4, (uint64_t)v8);
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        goto LABEL_11;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009C8BC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_10003BFF8(v6, v4, v8);
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        goto LABEL_11;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_10009C994(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  float v19;
  void *v20;
  id v21;
  id v22;
  NSObject *v23;
  _BOOL4 v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  void *v36;
  _BYTE v37[128];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
    goto LABEL_7;
  }
  v4 = a1[6];
  v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  *(_DWORD *)(a2 + 36) = 16777472;
  *(_DWORD *)(a2 + 52) = 0;
  v6 = *(_OWORD *)(v3 + 9);
  v30[0] = *(_OWORD *)(v3 + 5);
  v30[1] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[BKBootUIPresenter sharedInstance](BKBootUIPresenter, "sharedInstance"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[BKDisplayRenderOverlayManager sharedInstance](BKDisplayRenderOverlayManager, "sharedInstance"));
  v9 = BSPIDForAuditToken(v30);
  v10 = 0;
  if ((objc_msgSend(v8, "isShowingNonBootUIOverlays") & 1) == 0)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("pid %d"), v9));
    v10 = objc_msgSend(v7, "sustainOverlayForReason:", v11);

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "activeOverlays"));
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(_QWORD *)v32 != v16)
          objc_enumerationMutation(v13);
        v18 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v18, "level");
        if (v19 > 0.0)
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "descriptor"));
          objc_msgSend(v12, "addObject:", v20);

        }
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
    }
    while (v15);
  }

  v21 = objc_msgSend(v12, "count");
  v22 = sub_1000597D0();
  v23 = objc_claimAutoreleasedReturnValue(v22);
  v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
  if (!v21)
  {
    if (v24)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "GetRenderOverlayDismissActions: no active overlays", buf, 2u);
    }

    if (!v10)
      goto LABEL_28;
LABEL_27:
    objc_msgSend(v7, "unsustainOverlayForReason:", CFSTR("failed to encode dismiss actions"));
LABEL_28:

    v5 = 5;
    goto LABEL_7;
  }
  if (v24)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[BSDescriptionStream descriptionForRootObject:](BSDescriptionStream, "descriptionForRootObject:", v12));
    *(_DWORD *)buf = 138543362;
    v36 = v25;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "GetRenderOverlayDismissActions: returning %{public}@", buf, 0xCu);

  }
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "bs_secureEncoded"));
  if (!v26)
  {
    v28 = sub_1000597D0();
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "GetRenderOverlayDismissActions failed to encode actions", buf, 2u);
    }

    if ((v10 & 1) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  v27 = v26;
  *(_QWORD *)(a2 + 28) = objc_msgSend(v26, "bs_bytesForMIG");
  *(_DWORD *)(a2 + 52) = objc_msgSend(v27, "bs_lengthForMIG");

  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
}

void sub_10009CD3C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_10003B6D8(v6, v4, (uint64_t)v8);
        mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(_QWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      v5 = -309;
    }
    else
    {
      v5 = -300;
    }
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

uint64_t sub_10009CE14(mach_port_t a1, int a2, double a3, float a4, float a5, float a6)
{
  mach_msg_header_t msg;
  NDR_record_t v8;
  double v9;
  float v10;
  float v11;
  float v12;
  int v13;

  v8 = NDR_record;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  v13 = a2;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 980665;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set(&msg);
  return mach_msg(&msg, 17, 0x38u, 0, 0, 0, 0);
}

uint64_t sub_10009CE9C(_DWORD *a1, uint64_t a2)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  NDR_record_t v7;
  uint64_t result;

  v3 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v4 = a1[5] + 100;
  *(_QWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v4;
  if (a1[5] != 6002000)
  {
    result = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
    return result;
  }
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v7 = NDR_record;
LABEL_13:
    *(NDR_record_t *)(a2 + 24) = v7;
    return 1;
  }
  if (qword_100117588 != -1)
    dispatch_once(&qword_100117588, &stru_1000EC770);
  v5 = objc_msgSend((id)qword_100117580, "isAlive");
  *(_BYTE *)(a2 + 36) = 1;
  if (v5)
    v6 = 0;
  else
    v6 = 5;
  *(_DWORD *)(a2 + 32) = v6;
  v7 = NDR_record;
  if ((v5 & 1) == 0)
    goto LABEL_13;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  *(_DWORD *)(a2 + 4) = 40;
  return 1;
}

id objc_msgSend_ALSDelayOnUnlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ALSDelayOnUnlock");
}

id objc_msgSend_ALSEpoch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ALSEpoch");
}

id objc_msgSend_ALSUserPreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ALSUserPreferences");
}

id objc_msgSend_CATransform3DValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CATransform3DValue");
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGColor");
}

id objc_msgSend_HIDSystemChannel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "HIDSystemChannel");
}

id objc_msgSend_TVOutDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "TVOutDisplay");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend__accessStateForReason_entitlement_logEntitlementOnFailure_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessStateForReason:entitlement:logEntitlementOnFailure:usingBlock:");
}

id objc_msgSend__activateConnection_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateConnection:withContext:");
}

id objc_msgSend__addSystemShellToCollectivePingSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addSystemShellToCollectivePingSet:");
}

id objc_msgSend__animationForBackgroundLayerCrossfading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animationForBackgroundLayerCrossfading:");
}

id objc_msgSend__animationForContentLayerCrossfading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animationForContentLayerCrossfading:");
}

id objc_msgSend__animationForKeyPath_withSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animationForKeyPath:withSettings:");
}

id objc_msgSend__applyExtendedHitTestInformationForCAScreenCoordinates_displayUUID_toPathAttributes_secureName_excludeContextIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyExtendedHitTestInformationForCAScreenCoordinates:displayUUID:toPathAttributes:secureName:excludeContextIDs:");
}

id objc_msgSend__applyGainForHapticType_toConfigDictionary_clickSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyGainForHapticType:toConfigDictionary:clickSpeed:");
}

id objc_msgSend__assertModelUpdatesSuppressed_displayUUID_clientDisplayInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_assertModelUpdatesSuppressed:displayUUID:clientDisplayInfo:");
}

id objc_msgSend__assetPrefix(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_assetPrefix");
}

id objc_msgSend__baseConfigDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_baseConfigDictionary");
}

id objc_msgSend__beginUpdateTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginUpdateTransaction:");
}

id objc_msgSend__bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bounds");
}

id objc_msgSend__bundleInfoOverrides(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bundleInfoOverrides");
}

id objc_msgSend__classesRequiredToDecode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_classesRequiredToDecode");
}

id objc_msgSend__cleanUpContentLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanUpContentLayer");
}

id objc_msgSend__cleanup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanup");
}

id objc_msgSend__collectivePingSystemShellSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_collectivePingSystemShellSet");
}

id objc_msgSend__commonInitWithContext_server_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commonInitWithContext:server:");
}

id objc_msgSend__computeFrameForRegionLayoutDescriptor_accumulatedFrames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeFrameForRegionLayoutDescriptor:accumulatedFrames:");
}

id objc_msgSend__configureAsyncWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureAsyncWithBlock:");
}

id objc_msgSend__configureReferenceSpaceLayerTransformWithScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureReferenceSpaceLayerTransformWithScale:");
}

id objc_msgSend__configureSyncWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureSyncWithBlock:");
}

id objc_msgSend__createImageForIndex_basename_scale_idiom_bundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createImageForIndex:basename:scale:idiom:bundle:");
}

id objc_msgSend__currentMaskForUsage_HIDSystem_mask_maskIfEngaged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentMaskForUsage:HIDSystem:mask:maskIfEngaged:");
}

id objc_msgSend__dataMigrationCheckInListener_didReceiveConnection_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dataMigrationCheckInListener:didReceiveConnection:withContext:");
}

id objc_msgSend__demoCardConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_demoCardConnection");
}

id objc_msgSend__determineServiceForEvent_sender_fromTouchPad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineServiceForEvent:sender:fromTouchPad:");
}

id objc_msgSend__didRespondToTouchDelivery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didRespondToTouchDelivery");
}

id objc_msgSend__digitizerServiceWrapper(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_digitizerServiceWrapper");
}

id objc_msgSend__dumpNodeTree_level_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dumpNodeTree:level:");
}

id objc_msgSend__endUpdateTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endUpdateTransaction:");
}

id objc_msgSend__enumerateKeyPathNodesByComponent_options_ifFound_ifMissing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateKeyPathNodesByComponent:options:ifFound:ifMissing:");
}

id objc_msgSend__enumerateNodesWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateNodesWithOptions:usingBlock:");
}

id objc_msgSend__eventSourceForKeyboardInfo_sender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventSourceForKeyboardInfo:sender:");
}

id objc_msgSend__eventStateForSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventStateForSender:");
}

id objc_msgSend__exclusiveTouchNormalizedSubRectInReferenceSpace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_exclusiveTouchNormalizedSubRectInReferenceSpace");
}

id objc_msgSend__fileNameForOverlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileNameForOverlay:");
}

id objc_msgSend__filePathForOverlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filePathForOverlay:");
}

id objc_msgSend__filterDisplay_usingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filterDisplay:usingPredicate:");
}

id objc_msgSend__filterDisplays_usingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filterDisplays:usingPredicate:");
}

id objc_msgSend__frameForRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_frameForRegion:");
}

id objc_msgSend__getFrames_ofAnnotations_fixSuperlayer_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getFrames:ofAnnotations:fixSuperlayer:scale:");
}

id objc_msgSend__handleAccelerometerRequestForPort_auditToken_updateBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAccelerometerRequestForPort:auditToken:updateBlock:");
}

id objc_msgSend__handleDirectTouchEvent_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDirectTouchEvent:service:");
}

id objc_msgSend__handleEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEvent:");
}

id objc_msgSend__handleInterruptedOrInvalidatedConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleInterruptedOrInvalidatedConnection");
}

id objc_msgSend__hardwareIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hardwareIdentifier");
}

id objc_msgSend__idiomSuffix(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_idiomSuffix");
}

id objc_msgSend__imageAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageAtIndex:");
}

id objc_msgSend__immutableDisplays(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_immutableDisplays");
}

id objc_msgSend__init(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_init");
}

id objc_msgSend__initWithBrightnessController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithBrightnessController:");
}

id objc_msgSend__initWithBrightnessSystem_systemShellSentinel_orientationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithBrightnessSystem:systemShellSentinel:orientationManager:");
}

id objc_msgSend__initWithDescriptor_overlayType_imageData_level_frozen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithDescriptor:overlayType:imageData:level:frozen:");
}

id objc_msgSend__initWithDeviceOrientationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithDeviceOrientationManager:");
}

id objc_msgSend__initWithPersistenceCoordinator_orientationManager_backlightManager_windowServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithPersistenceCoordinator:orientationManager:backlightManager:windowServer:");
}

id objc_msgSend__initWithPersistenceData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithPersistenceData:");
}

id objc_msgSend__initWithSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithSettings:");
}

id objc_msgSend__isBuiltinDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBuiltinDisplay");
}

id objc_msgSend__isModifierKeyWithPage_usage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isModifierKeyWithPage:usage:");
}

id objc_msgSend__isNullDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isNullDisplay");
}

id objc_msgSend__isUpClickStateType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isUpClickStateType:");
}

id objc_msgSend__keyPathForTouchIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyPathForTouchIdentifier:");
}

id objc_msgSend__layoutDescriptorForRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutDescriptorForRegion:");
}

id objc_msgSend__loadAllImages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadAllImages");
}

id objc_msgSend__lock_CATransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_CATransaction:");
}

id objc_msgSend__lock_activeModifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_activeModifiers");
}

id objc_msgSend__lock_addDeathWatcherForPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_addDeathWatcherForPid:");
}

id objc_msgSend__lock_addModifierKeyDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_addModifierKeyDown:");
}

id objc_msgSend__lock_addObserversToDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_addObserversToDisplay:");
}

id objc_msgSend__lock_anyKeyboardHasCapsLockActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_anyKeyboardHasCapsLockActive");
}

id objc_msgSend__lock_applyDeliveryInformation_resolution_toEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_applyDeliveryInformation:resolution:toEvent:");
}

id objc_msgSend__lock_applyUIMode_toWrappers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_applyUIMode:toWrappers:");
}

id objc_msgSend__lock_blockSystemApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_blockSystemApp");
}

id objc_msgSend__lock_bootstrapSystemApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_bootstrapSystemApp");
}

id objc_msgSend__lock_cancelKeyDownEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_cancelKeyDownEvents:");
}

id objc_msgSend__lock_checkInWithRemoteCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_checkInWithRemoteCompletionBlock:");
}

id objc_msgSend__lock_clearSystemAppOrientationClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_clearSystemAppOrientationClient");
}

id objc_msgSend__lock_clearWindowServerDisplayTags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_clearWindowServerDisplayTags:");
}

id objc_msgSend__lock_cloneMirroringOptionsFromSourceDisplay_destinationDisplay_virtualMode_isStevenote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_cloneMirroringOptionsFromSourceDisplay:destinationDisplay:virtualMode:isStevenote:");
}

id objc_msgSend__lock_cloneMirroringOptionsSteveNote_contextIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_cloneMirroringOptionsSteveNote:contextIDs:");
}

id objc_msgSend__lock_commitDisplayBrightness(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_commitDisplayBrightness");
}

id objc_msgSend__lock_completeCheckInForShell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_completeCheckInForShell:");
}

id objc_msgSend__lock_completeCheckInForShell_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_completeCheckInForShell:completionBlock:");
}

id objc_msgSend__lock_currentConnectionShell(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_currentConnectionShell");
}

id objc_msgSend__lock_dispatchKeyEvent_keyCommand_keyboardInfo_eventSource_fromSender_dispatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_dispatchKeyEvent:keyCommand:keyboardInfo:eventSource:fromSender:dispatcher:");
}

id objc_msgSend__lock_evaluateAllDisplaysForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_evaluateAllDisplaysForReason:");
}

id objc_msgSend__lock_evaluateCarPlayDisplay_label_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_evaluateCarPlayDisplay:label:");
}

id objc_msgSend__lock_evaluateConnectedDisplay_because_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_evaluateConnectedDisplay:because:");
}

id objc_msgSend__lock_evaluateContinuityDisplay_label_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_evaluateContinuityDisplay:label:");
}

id objc_msgSend__lock_evaluateDisplay_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_evaluateDisplay:reason:");
}

id objc_msgSend__lock_evaluateExistingClonesForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_evaluateExistingClonesForReason:");
}

id objc_msgSend__lock_existingClientForSendRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_existingClientForSendRight:");
}

id objc_msgSend__lock_freezeOverlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_freezeOverlay:");
}

id objc_msgSend__lock_handleKeyEvent_fromSender_dispatcher_bypassCapsLockChecks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_handleKeyEvent:fromSender:dispatcher:bypassCapsLockChecks:");
}

id objc_msgSend__lock_handleRelaunchRequestFromSystemApp_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_handleRelaunchRequestFromSystemApp:withOptions:");
}

id objc_msgSend__lock_handleUnicodeEvent_fromSender_dispatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_handleUnicodeEvent:fromSender:dispatcher:");
}

id objc_msgSend__lock_hasEntitlement_usingCacheForAuditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_hasEntitlement:usingCacheForAuditToken:");
}

id objc_msgSend__lock_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_invalidate");
}

id objc_msgSend__lock_keyboardRemoved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_keyboardRemoved:");
}

id objc_msgSend__lock_keyboardsDetected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_keyboardsDetected:");
}

id objc_msgSend__lock_locationDidChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_locationDidChanges");
}

id objc_msgSend__lock_postSyntheticCapsLockPressForKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_postSyntheticCapsLockPressForKeyboard:");
}

id objc_msgSend__lock_postSyntheticEventWithDetectionMaskToClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_postSyntheticEventWithDetectionMaskToClients:");
}

id objc_msgSend__lock_publishUsableKeyboards_toServiceConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_publishUsableKeyboards:toServiceConnection:");
}

id objc_msgSend__lock_publishUsableKeyboardsToServiceConnections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_publishUsableKeyboardsToServiceConnections");
}

id objc_msgSend__lock_rebuildModeCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_rebuildModeCache");
}

id objc_msgSend__lock_recomputeTagsForDisplay_shouldHide_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_recomputeTagsForDisplay:shouldHide:");
}

id objc_msgSend__lock_removeAnnotation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_removeAnnotation:");
}

id objc_msgSend__lock_removeCapsLockEntryIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_removeCapsLockEntryIfNeeded:");
}

id objc_msgSend__lock_removeClone_fromWindowServerDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_removeClone:fromWindowServerDisplay:");
}

id objc_msgSend__lock_removeDisplayCloneDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_removeDisplayCloneDestination:");
}

id objc_msgSend__lock_removeModifierKeyDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_removeModifierKeyDown:");
}

id objc_msgSend__lock_removeObserversFromDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_removeObserversFromDisplay:");
}

id objc_msgSend__lock_removeSenderIDFromTracking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_removeSenderIDFromTracking:");
}

id objc_msgSend__lock_restoreCapsLockStateToKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_restoreCapsLockStateToKeyboard:");
}

id objc_msgSend__lock_sendQueuedUpdatesToClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_sendQueuedUpdatesToClient");
}

id objc_msgSend__lock_setBacklightLocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_setBacklightLocked:");
}

id objc_msgSend__lock_setCapsLockActive_onSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_setCapsLockActive:onSenderID:");
}

id objc_msgSend__lock_setCapsLockState_forKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_setCapsLockState:forKeyboard:");
}

id objc_msgSend__lock_setKeyboardLightsSuspended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_setKeyboardLightsSuspended:");
}

id objc_msgSend__lock_setLockedOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_setLockedOrientation:");
}

id objc_msgSend__lock_setOverlaysDisablingUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_setOverlaysDisablingUpdates:");
}

id objc_msgSend__lock_setPrimaryKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_setPrimaryKeyboard:");
}

id objc_msgSend__lock_setupCloningToDestination_fromVirtualMode_hideByDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_setupCloningToDestination:fromVirtualMode:hideByDefault:");
}

id objc_msgSend__lock_setupLayerTree(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_setupLayerTree");
}

id objc_msgSend__lock_smartKeyboardAttachmentStateDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_smartKeyboardAttachmentStateDidChange:");
}

id objc_msgSend__lock_stopWatchingForGestures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_stopWatchingForGestures:");
}

id objc_msgSend__lock_supernodeForRenderingAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_supernodeForRenderingAtKeyPath:");
}

id objc_msgSend__lock_systemAppSetOrientationEventsClient_wantsOrientationEvents_auditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_systemAppSetOrientationEventsClient:wantsOrientationEvents:auditToken:");
}

id objc_msgSend__lock_tearDownLayerTree(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_tearDownLayerTree");
}

id objc_msgSend__lock_unblockSystemApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_unblockSystemApp");
}

id objc_msgSend__lock_updateGlobalModifierState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_updateGlobalModifierState");
}

id objc_msgSend__lock_updateLayerTree(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_updateLayerTree");
}

id objc_msgSend__lock_updateObservingState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_updateObservingState");
}

id objc_msgSend__lock_updatePrimarySystemApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_updatePrimarySystemApp");
}

id objc_msgSend__lock_updateStateForActiveOverlayChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_updateStateForActiveOverlayChange");
}

id objc_msgSend__lock_usableKeyboardAttached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_usableKeyboardAttached:");
}

id objc_msgSend__lock_usableKeyboardDetached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_usableKeyboardDetached:");
}

id objc_msgSend__lock_virtualDisplayModeFromClientParametersForDisplay_shouldHide_shouldDisable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_virtualDisplayModeFromClientParametersForDisplay:shouldHide:shouldDisable:");
}

id objc_msgSend__lock_watchForGestures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lock_watchForGestures:");
}

id objc_msgSend__locked_notifyIfNeededCurrentDetectionMaskChangeWithTimstamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_locked_notifyIfNeededCurrentDetectionMaskChangeWithTimstamp:");
}

id objc_msgSend__locked_notifyObserversDidAddDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_locked_notifyObserversDidAddDevices:");
}

id objc_msgSend__locked_notifyObserversDidChangeAvailability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_locked_notifyObserversDidChangeAvailability");
}

id objc_msgSend__locked_notifyObserversDidRemoveDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_locked_notifyObserversDidRemoveDevices:");
}

id objc_msgSend__locked_postEventWithDetectionMask_toDestinations_dispatcher_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_locked_postEventWithDetectionMask:toDestinations:dispatcher:reason:");
}

id objc_msgSend__locked_setObjectWithinProximity_notify_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_locked_setObjectWithinProximity:notify:");
}

id objc_msgSend__locked_updateTouchSuppressionAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_locked_updateTouchSuppressionAssertion");
}

id objc_msgSend__migrateBackBoard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migrateBackBoard");
}

id objc_msgSend__modifierRemappingsDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_modifierRemappingsDidChange");
}

id objc_msgSend__moveRestoredFileAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveRestoredFileAtPath:");
}

id objc_msgSend__passesThresholdForX_y_z_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_passesThresholdForX:y:z:");
}

id objc_msgSend__perDisplayClientInfoForCurrentConnectionWithDisplayUUID_createIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_perDisplayClientInfoForCurrentConnectionWithDisplayUUID:createIfNeeded:");
}

id objc_msgSend__persistenceCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistenceCoordinator");
}

id objc_msgSend__persistenceData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistenceData");
}

id objc_msgSend__persistentPropertyKeyDenylist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistentPropertyKeyDenylist");
}

id objc_msgSend__pidForClientPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pidForClientPort:");
}

id objc_msgSend__pingSystemShellForCollectiveWatchdog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pingSystemShellForCollectiveWatchdog:");
}

id objc_msgSend__pointerDevicesFromIOHIDServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pointerDevicesFromIOHIDServices:");
}

id objc_msgSend__policy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_policy");
}

id objc_msgSend__postDisplayPortNotificationCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postDisplayPortNotificationCode:");
}

id objc_msgSend__postEvent_sender_dispatcher_destination_cancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postEvent:sender:dispatcher:destination:cancelled:");
}

id objc_msgSend__prepareContentLayerForPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareContentLayerForPresentation:");
}

id objc_msgSend__presentWithAnimationSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentWithAnimationSettings:");
}

id objc_msgSend__prevailingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prevailingMode:");
}

id objc_msgSend__processRingerSwitchEvent_down_sender_dispatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processRingerSwitchEvent:down:sender:dispatcher:");
}

id objc_msgSend__proximityServiceWrapper(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_proximityServiceWrapper");
}

id objc_msgSend__queue_acquireActivityAssertionForReason_generation_continuation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_acquireActivityAssertionForReason:generation:continuation:");
}

id objc_msgSend__queue_addChangesForPendingState_configuredState_toStates_configs_assets_enable_disable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_addChangesForPendingState:configuredState:toStates:configs:assets:enable:disable:");
}

id objc_msgSend__queue_addConfigsAndAssetsForClickState_toStates_configs_assets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_addConfigsAndAssetsForClickState:toStates:configs:assets:");
}

id objc_msgSend__queue_addDigitizerStateForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_addDigitizerStateForService:");
}

id objc_msgSend__queue_addOverlayForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_addOverlayForReason:");
}

id objc_msgSend__queue_addServicesMatchingSenderDescriptor_inPerDisplayInfo_toArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_addServicesMatchingSenderDescriptor:inPerDisplayInfo:toArray:");
}

id objc_msgSend__queue_addTouchStreamClient_toDisplayUUID_versionedPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_addTouchStreamClient:toDisplayUUID:versionedPID:");
}

id objc_msgSend__queue_addUnderlay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_addUnderlay");
}

id objc_msgSend__queue_annotateTouch_withString_uniqueIdentifier_fromPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_annotateTouch:withString:uniqueIdentifier:fromPID:");
}

id objc_msgSend__queue_annotateTouch_withUniqueString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_annotateTouch:withUniqueString:");
}

id objc_msgSend__queue_applyBasicAnnotationTextForTouchIdentifier_pathIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_applyBasicAnnotationTextForTouchIdentifier:pathIndex:");
}

id objc_msgSend__queue_applyCachedPropertiesToMultitouchService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_applyCachedPropertiesToMultitouchService:");
}

id objc_msgSend__queue_applyConfigurationChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_applyConfigurationChanges");
}

id objc_msgSend__queue_assetOfType_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_assetOfType:parameters:");
}

id objc_msgSend__queue_cleanUpAfterAlternativeSystemApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_cleanUpAfterAlternativeSystemApp:");
}

id objc_msgSend__queue_clearTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_clearTimer");
}

id objc_msgSend__queue_contextIDsToIgnoreForZoomSenders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_contextIDsToIgnoreForZoomSenders");
}

id objc_msgSend__queue_digitizerStateForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_digitizerStateForService:");
}

id objc_msgSend__queue_displayInfoForDisplay_createIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_displayInfoForDisplay:createIfNeeded:");
}

id objc_msgSend__queue_enumerateDigitizersForAllDisplaysUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_enumerateDigitizersForAllDisplaysUsingBlock:");
}

id objc_msgSend__queue_enumerateDigitizersForDisplay_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_enumerateDigitizersForDisplay:usingBlock:");
}

id objc_msgSend__queue_getSlowHapticType_getMediumHapticType_getFastHapticType_fromAssetType_clickCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_getSlowHapticType:getMediumHapticType:getFastHapticType:fromAssetType:clickCount:");
}

id objc_msgSend__queue_handleEvent_fromTouchPad_dispatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_handleEvent:fromTouchPad:dispatcher:");
}

id objc_msgSend__queue_hasTouchEnterSlots(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_hasTouchEnterSlots");
}

id objc_msgSend__queue_listener_shouldAcceptNewConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_listener:shouldAcceptNewConnection:");
}

id objc_msgSend__queue_pendUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_pendUpdate:");
}

id objc_msgSend__queue_postNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_postNotification:");
}

id objc_msgSend__queue_postUpdate_forTouchIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_postUpdate:forTouchIdentifier:");
}

id objc_msgSend__queue_postUpdatedRawAccelerometerDeviceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_postUpdatedRawAccelerometerDeviceOrientation:");
}

id objc_msgSend__queue_removeAnnotationForTouch_withUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_removeAnnotationForTouch:withUniqueIdentifier:");
}

id objc_msgSend__queue_removeConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_removeConnection:");
}

id objc_msgSend__queue_removeOverlayWithAnimationSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_removeOverlayWithAnimationSettings:");
}

id objc_msgSend__queue_removeUnderlay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_removeUnderlay");
}

id objc_msgSend__queue_resetTouchAuthenticationInitialSampleEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_resetTouchAuthenticationInitialSampleEvent");
}

id objc_msgSend__queue_scheduleTimerWithTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_scheduleTimerWithTimeInterval:");
}

id objc_msgSend__queue_sendCancelEventForTouchPad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_sendCancelEventForTouchPad:");
}

id objc_msgSend__queue_sendEvent_fromTouchPad_toDestination_dispatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_sendEvent:fromTouchPad:toDestination:dispatcher:");
}

id objc_msgSend__queue_servicesMatchingSenderDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_servicesMatchingSenderDescriptor:");
}

id objc_msgSend__queue_setCenter_forTouchIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_setCenter:forTouchIdentifier:");
}

id objc_msgSend__queue_setPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_setPolicy:");
}

id objc_msgSend__queue_setProcessPID_observesGlobalTouches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_setProcessPID:observesGlobalTouches:");
}

id objc_msgSend__queue_setProcessPID_observesTouch_withIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_setProcessPID:observesTouch:withIdentifier:");
}

id objc_msgSend__queue_setScreenOwnerPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_setScreenOwnerPID:");
}

id objc_msgSend__queue_slotRecordForSlotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_slotRecordForSlotID:");
}

id objc_msgSend__queue_touchPadRemoved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_touchPadRemoved:");
}

id objc_msgSend__queue_touchPadsDetected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_touchPadsDetected:");
}

id objc_msgSend__queue_touchStreamClientForReference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_touchStreamClientForReference:");
}

id objc_msgSend__queue_touchStreamInfoForDisplayUUID_createIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_touchStreamInfoForDisplayUUID:createIfNeeded:");
}

id objc_msgSend__queue_updateOverlayForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_updateOverlayForReason:");
}

id objc_msgSend__queue_userEventOccurredInIdleMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_userEventOccurredInIdleMode");
}

id objc_msgSend__queue_userEventOccurredInPresenceMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queue_userEventOccurredInPresenceMode");
}

id objc_msgSend__remoteProcessIsAlreadyConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_remoteProcessIsAlreadyConnected:");
}

id objc_msgSend__removeSystemShellFromCollectivePingSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeSystemShellFromCollectivePingSet:");
}

id objc_msgSend__removeUnusedFiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeUnusedFiles");
}

id objc_msgSend__resetServiceStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetServiceStatus");
}

id objc_msgSend__reverseTetheringActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reverseTetheringActive");
}

id objc_msgSend__routeSqueezeEventToSystem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_routeSqueezeEventToSystem");
}

id objc_msgSend__scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scale");
}

id objc_msgSend__serviceExists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serviceExists:");
}

id objc_msgSend__setAdditionalEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAdditionalEnvironment:");
}

id objc_msgSend__setAdditionalMachServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAdditionalMachServices:");
}

id objc_msgSend__setBlockingSystemApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBlockingSystemApp:");
}

id objc_msgSend__setBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBounds:");
}

id objc_msgSend__setInterstitial_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInterstitial:");
}

id objc_msgSend__setOverrideExecutablePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOverrideExecutablePath:");
}

id objc_msgSend__setPresence_forDisplayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPresence:forDisplayUUID:");
}

id objc_msgSend__setProximityInCentimeters_forDisplayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setProximityInCentimeters:forDisplayUUID:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__setTetherState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTetherState:");
}

id objc_msgSend__setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setType:");
}

id objc_msgSend__sharedQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sharedQueue");
}

id objc_msgSend__shellListener_didReceiveConnection_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shellListener:didReceiveConnection:withContext:");
}

id objc_msgSend__shouldHitTestForGestureBegan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldHitTestForGestureBegan");
}

id objc_msgSend__shouldMatchKeyCommandsForEvent_gsKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldMatchKeyCommandsForEvent:gsKeyboard:");
}

id objc_msgSend__shouldPostLPATransitionEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldPostLPATransitionEvents");
}

id objc_msgSend__shouldSendSampleEventWithTimestamp_samplingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSendSampleEventWithTimestamp:samplingInterval:");
}

id objc_msgSend__shouldUseDoublePressAssetForClickStateType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUseDoublePressAssetForClickStateType:");
}

id objc_msgSend__shouldUseHapticForClickState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUseHapticForClickState:");
}

id objc_msgSend__shouldUseSplitGainForClickState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUseSplitGainForClickState:");
}

id objc_msgSend__smartCoverSensorsDidDisengage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_smartCoverSensorsDidDisengage:");
}

id objc_msgSend__smartCoverSensorsDidEngage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_smartCoverSensorsDidEngage:");
}

id objc_msgSend__spinnyImageSequence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spinnyImageSequence");
}

id objc_msgSend__stopAnimating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopAnimating");
}

id objc_msgSend__stringByRemovingPrefix_fromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringByRemovingPrefix:fromString:");
}

id objc_msgSend__stringDescribingContextID_clientPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringDescribingContextID:clientPort:");
}

id objc_msgSend__stringDescribingContextID_pid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringDescribingContextID:pid:");
}

id objc_msgSend__stringDescribingPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringDescribingPID:");
}

id objc_msgSend__terminateAllGesturesForSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_terminateAllGesturesForSender:");
}

id objc_msgSend__terminateScrollingForSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_terminateScrollingForSender:");
}

id objc_msgSend__unloadSpinnyImageSequence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unloadSpinnyImageSequence");
}

id objc_msgSend__updateBounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBounds");
}

id objc_msgSend__updateFrames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFrames");
}

id objc_msgSend__updateSceneHostSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSceneHostSettings");
}

id objc_msgSend__updateSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSettings");
}

id objc_msgSend__updateTouchingPathIndexesFromDeviceEventState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTouchingPathIndexesFromDeviceEventState");
}

id objc_msgSend__updateTransformLayerPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTransformLayerPosition");
}

id objc_msgSend__updateWindowServerUpdatesForOverlays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWindowServerUpdatesForOverlays:");
}

id objc_msgSend__useLightBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useLightBackground");
}

id objc_msgSend__validateConnection_withContext_forListenerLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateConnection:withContext:forListenerLabel:");
}

id objc_msgSend__validateHapticFeedbackRequest_forAuditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateHapticFeedbackRequest:forAuditToken:");
}

id objc_msgSend__validatePencilHapticFeedbackRequest_forPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validatePencilHapticFeedbackRequest:forPID:");
}

id objc_msgSend__validateTrackpadHapticFeedbackRequest_forPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateTrackpadHapticFeedbackRequest:forPID:");
}

id objc_msgSend__wakeAnimationStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wakeAnimationStyle");
}

id objc_msgSend__wrapInCATransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wrapInCATransaction:");
}

id objc_msgSend__xpcConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xpcConnection");
}

id objc_msgSend_absolutePositionIsValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absolutePositionIsValid");
}

id objc_msgSend_acceleratedRelativePointerPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceleratedRelativePointerPosition");
}

id objc_msgSend_accelerometerUpdateInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accelerometerUpdateInterval");
}

id objc_msgSend_accessPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessPort:");
}

id objc_msgSend_accessibilityHIDServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityHIDServices");
}

id objc_msgSend_acquireButtonDownPointerRepositionAssertionForReason_contextRelativePointerPosition_onDisplay_restrictingToPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireButtonDownPointerRepositionAssertionForReason:contextRelativePointerPosition:onDisplay:restrictingToPID:");
}

id objc_msgSend_acquireForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireForReason:");
}

id objc_msgSend_acquireForReason_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireForReason:withContext:");
}

id objc_msgSend_acquireWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireWithError:");
}

id objc_msgSend_acquireWithTimeout_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireWithTimeout:handler:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activate");
}

id objc_msgSend_activateWithMousePointerController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithMousePointerController:");
}

id objc_msgSend_activeDisplays(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeDisplays");
}

id objc_msgSend_activeMultilinePrefix(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeMultilinePrefix");
}

id objc_msgSend_activeOverlayWithDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeOverlayWithDescriptor:");
}

id objc_msgSend_activeOverlays(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeOverlays");
}

id objc_msgSend_addAnimation_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnimation:forKey:");
}

id objc_msgSend_addBeginNotification_endNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBeginNotification:endNotification:");
}

id objc_msgSend_addButtonEvent_fromSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addButtonEvent:fromSender:");
}

id objc_msgSend_addButtonNumber_down_fromSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addButtonNumber:down:fromSender:");
}

id objc_msgSend_addClone_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addClone:options:");
}

id objc_msgSend_addDigitizerEvent_fromSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDigitizerEvent:fromSender:");
}

id objc_msgSend_addDisappearanceObserver_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDisappearanceObserver:queue:");
}

id objc_msgSend_addDisplayBlankingObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDisplayBlankingObserver:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addForceEvent_fromSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addForceEvent:fromSender:");
}

id objc_msgSend_addGlobalDevicePreferencesObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGlobalDevicePreferencesObserver:");
}

id objc_msgSend_addGlobalKeyboardObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGlobalKeyboardObserver:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndexes:");
}

id objc_msgSend_addMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMonitor:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObject_toCollectionClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:toCollectionClass:forKey:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:queue:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addPrimaryRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPrimaryRegion:");
}

id objc_msgSend_addRecognizer_recognitionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecognizer:recognitionBlock:");
}

id objc_msgSend_addRegion_relativeToRegion_alongEdge_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRegion:relativeToRegion:alongEdge:atPosition:");
}

id objc_msgSend_addRepeatingField_containsClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRepeatingField:containsClass:");
}

id objc_msgSend_addRotationEvent_fromSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRotationEvent:fromSender:");
}

id objc_msgSend_addScaleEvent_fromSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addScaleEvent:fromSender:");
}

id objc_msgSend_addScrollEvent_fromSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addScrollEvent:fromSender:");
}

id objc_msgSend_addSenderInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSenderInfo:");
}

id objc_msgSend_addSensorModeChangeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSensorModeChangeObserver:");
}

id objc_msgSend_addService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addService:");
}

id objc_msgSend_addSmartCoverObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSmartCoverObserver:");
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSublayer:");
}

id objc_msgSend_addSyntheticTopLevelEventIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSyntheticTopLevelEventIfNeeded");
}

id objc_msgSend_addSystemShellObserver_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSystemShellObserver:reason:");
}

id objc_msgSend_addToRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addToRunLoop:forMode:");
}

id objc_msgSend_addTopLevelEvent_fromSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTopLevelEvent:fromSender:");
}

id objc_msgSend_addTouchAuthenticationSpecifications_registrantEntitled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTouchAuthenticationSpecifications:registrantEntitled:");
}

id objc_msgSend_addTouchStreamForContextID_display_versionedPID_identifier_shouldSendAmbiguityRecommendations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTouchStreamForContextID:display:versionedPID:identifier:shouldSendAmbiguityRecommendations:");
}

id objc_msgSend_addTranslationEvent_fromSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTranslationEvent:fromSender:");
}

id objc_msgSend_allAnnotationsForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allAnnotationsForKeyPath:");
}

id objc_msgSend_allImages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allImages");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allPersistentPropertiesForServicesMatchingDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allPersistentPropertiesForServicesMatchingDescriptor:");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allValues");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_alternateSystemApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alternateSystemApp");
}

id objc_msgSend_alternateSystemAppBundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alternateSystemAppBundleIdentifier");
}

id objc_msgSend_alternateSystemAppWithBundleID_didExitWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alternateSystemAppWithBundleID:didExitWithContext:");
}

id objc_msgSend_alternateSystemAppWithBundleID_failedToOpenWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alternateSystemAppWithBundleID:failedToOpenWithResult:");
}

id objc_msgSend_alternateSystemAppWithBundleIDDidOpen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alternateSystemAppWithBundleIDDidOpen:");
}

id objc_msgSend_alternateSystemAppWithBundleIDDidTerminate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alternateSystemAppWithBundleIDDidTerminate:");
}

id objc_msgSend_analyticsReporter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsReporter");
}

id objc_msgSend_anchorPoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anchorPoint");
}

id objc_msgSend_animates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animates");
}

id objc_msgSend_animationWithKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationWithKeyPath:");
}

id objc_msgSend_annotateTouch_withString_uniqueIdentifier_fromPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotateTouch:withString:uniqueIdentifier:fromPID:");
}

id objc_msgSend_annotation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotation");
}

id objc_msgSend_annotationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotationController");
}

id objc_msgSend_annotationControllerForDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotationControllerForDisplay:");
}

id objc_msgSend_annotationForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotationForKeyPath:");
}

id objc_msgSend_annotationWithEllipseSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotationWithEllipseSize:");
}

id objc_msgSend_annotationWithRectangleSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotationWithRectangleSize:");
}

id objc_msgSend_annotationWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotationWithString:");
}

id objc_msgSend_anyBuiltinTouchscreenDigitizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyBuiltinTouchscreenDigitizer");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyObject");
}

id objc_msgSend_appendArraySection_withName_multilinePrefix_skipIfEmpty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendArraySection:withName:multilinePrefix:skipIfEmpty:");
}

id objc_msgSend_appendArraySection_withName_multilinePrefix_skipIfEmpty_objectTransformer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendArraySection:withName:multilinePrefix:skipIfEmpty:objectTransformer:");
}

id objc_msgSend_appendArraySection_withName_skipIfEmpty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendArraySection:withName:skipIfEmpty:");
}

id objc_msgSend_appendBodySectionWithName_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBodySectionWithName:block:");
}

id objc_msgSend_appendBodySectionWithName_multilinePrefix_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBodySectionWithName:multilinePrefix:block:");
}

id objc_msgSend_appendBodySectionWithName_openDelimiter_closeDelimiter_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBodySectionWithName:openDelimiter:closeDelimiter:block:");
}

id objc_msgSend_appendBool_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBool:withName:");
}

id objc_msgSend_appendBool_withName_ifEqualTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBool:withName:ifEqualTo:");
}

id objc_msgSend_appendCollection_withName_itemBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendCollection:withName:itemBlock:");
}

id objc_msgSend_appendCustomFormatForValue_withCustomFormatForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendCustomFormatForValue:withCustomFormatForName:");
}

id objc_msgSend_appendCustomFormatWithName_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendCustomFormatWithName:block:");
}

id objc_msgSend_appendDictionary_withName_itemBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDictionary:withName:itemBlock:");
}

id objc_msgSend_appendDouble_withName_decimalPrecision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDouble:withName:decimalPrecision:");
}

id objc_msgSend_appendFloat_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFloat:withName:");
}

id objc_msgSend_appendFloat_withName_decimalPrecision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFloat:withName:decimalPrecision:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendInt_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendInt:withName:");
}

id objc_msgSend_appendInteger_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendInteger:withName:");
}

id objc_msgSend_appendIntegerMap_withName_keyFormat_valueBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendIntegerMap:withName:keyFormat:valueBlock:");
}

id objc_msgSend_appendObject_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendObject:withName:");
}

id objc_msgSend_appendObject_withName_skipIfNil_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendObject:withName:skipIfNil:");
}

id objc_msgSend_appendPoint_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendPoint:withName:");
}

id objc_msgSend_appendPointer_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendPointer:withName:");
}

id objc_msgSend_appendProem_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendProem:block:");
}

id objc_msgSend_appendRect_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendRect:withName:");
}

id objc_msgSend_appendRightArrow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendRightArrow");
}

id objc_msgSend_appendSize_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendSize:withName:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appendString_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:withName:");
}

id objc_msgSend_appendString_withName_skipIfEmpty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:withName:skipIfEmpty:");
}

id objc_msgSend_appendSubeventsForEventTypeMask_toTopLevelEvent_interfaceOrientation_getEventSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendSubeventsForEventTypeMask:toTopLevelEvent:interfaceOrientation:getEventSummary:");
}

id objc_msgSend_appendSuccinctDescriptionToFormatter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendSuccinctDescriptionToFormatter:");
}

id objc_msgSend_appendTimeInterval_withName_decomposeUnits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendTimeInterval:withName:decomposeUnits:");
}

id objc_msgSend_appendUInt64_withName_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendUInt64:withName:format:");
}

id objc_msgSend_appendUnsignedInteger_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendUnsignedInteger:withName:");
}

id objc_msgSend_appendUnsignedInteger_withName_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendUnsignedInteger:withName:format:");
}

id objc_msgSend_appendVersionedPID_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendVersionedPID:withName:");
}

id objc_msgSend_applyAppearanceToShapeLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyAppearanceToShapeLayer:");
}

id objc_msgSend_applyAppearanceToTextLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyAppearanceToTextLayer:");
}

id objc_msgSend_applyDefinitions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyDefinitions:");
}

id objc_msgSend_applyExtendedHitTestInformationForCAScreenCoordinates_displayUUID_toPathAttributes_secureName_excludeContextIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyExtendedHitTestInformationForCAScreenCoordinates:displayUUID:toPathAttributes:secureName:excludeContextIDs:");
}

id objc_msgSend_applyForTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyForTime:");
}

id objc_msgSend_applyForTime_presentationObject_modelObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyForTime:presentationObject:modelObject:");
}

id objc_msgSend_applyOverlay_withAnimationSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyOverlay:withAnimationSettings:");
}

id objc_msgSend_applySceneHostSettingsToHostingChain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applySceneHostSettingsToHostingChain:");
}

id objc_msgSend_applySensorMode_requestOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applySensorMode:requestOrigin:");
}

id objc_msgSend_applyToCAAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyToCAAnimation:");
}

id objc_msgSend_applyToLayer_forContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyToLayer:forContent:");
}

id objc_msgSend_applyUIMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyUIMode:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assertionEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assertionEndpoint");
}

id objc_msgSend_assertionWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assertionWithIdentifier:");
}

id objc_msgSend_assertionWithIdentifier_stateDidChangeHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assertionWithIdentifier:stateDidChangeHandler:");
}

id objc_msgSend_assetType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetType");
}

id objc_msgSend_associatedDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associatedDisplay");
}

id objc_msgSend_asyncSetProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asyncSetProperties:");
}

id objc_msgSend_asyncSetProperty_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asyncSetProperty:forKey:");
}

id objc_msgSend_asyncSetProperty_forKey_andDelayForSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asyncSetProperty:forKey:andDelayForSeconds:");
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auditToken");
}

id objc_msgSend_auditTokenRepresentsSystemApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auditTokenRepresentsSystemApp:");
}

id objc_msgSend_authenticationMessage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticationMessage");
}

id objc_msgSend_authenticationMessageContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticationMessageContext");
}

id objc_msgSend_authenticationOriginator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticationOriginator");
}

id objc_msgSend_authenticationSpecificationForSlotID_registrantEntitled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticationSpecificationForSlotID:registrantEntitled:");
}

id objc_msgSend_automaticResetDisabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "automaticResetDisabled");
}

id objc_msgSend_availableDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableDevices");
}

id objc_msgSend_availableDevicesDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableDevicesDidChange");
}

id objc_msgSend_availableModes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableModes");
}

id objc_msgSend_backgroundStatisticsFailingContrast(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundStatisticsFailingContrast");
}

id objc_msgSend_backgroundStatisticsForeground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundStatisticsForeground");
}

id objc_msgSend_backgroundStatisticsPassingContrast(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundStatisticsPassingContrast");
}

id objc_msgSend_backgroundStatisticsRegion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundStatisticsRegion");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseAttributesFromProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseAttributesFromProvider:");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "begin");
}

id objc_msgSend_beginImplicitTransaction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginImplicitTransaction");
}

id objc_msgSend_beginTransactionForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTransactionForReason:");
}

id objc_msgSend_bk_setBackgroundColorRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bk_setBackgroundColorRed:green:blue:alpha:");
}

id objc_msgSend_bk_setForegroundColorRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bk_setForegroundColorRed:green:blue:alpha:");
}

id objc_msgSend_bksAccelerometerClientRequestedAccelerometerEvents_updateInterval_xThreshold_yThreshold_zThreshold_auditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bksAccelerometerClientRequestedAccelerometerEvents:updateInterval:xThreshold:yThreshold:zThreshold:auditToken:");
}

id objc_msgSend_bksAccelerometerClientRequestedOrientationEvents_enabled_passiveEvents_auditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bksAccelerometerClientRequestedOrientationEvents:enabled:passiveEvents:auditToken:");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blackColor");
}

id objc_msgSend_blank(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blank");
}

id objc_msgSend_blankingRemovesPower(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blankingRemovesPower");
}

id objc_msgSend_blockSystemApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockSystemApp");
}

id objc_msgSend_blockSystemAppForAlternateSystemAppWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockSystemAppForAlternateSystemAppWithCompletion:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_brightness(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brightness");
}

id objc_msgSend_brightnessCurve(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brightnessCurve");
}

id objc_msgSend_brightnessLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brightnessLevel");
}

id objc_msgSend_bs_CGPointValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_CGPointValue");
}

id objc_msgSend_bs_bytesForMIG(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_bytesForMIG");
}

id objc_msgSend_bs_compactMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_compactMap:");
}

id objc_msgSend_bs_containsObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_containsObjectPassingTest:");
}

id objc_msgSend_bs_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_filter:");
}

id objc_msgSend_bs_lengthForMIG(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_lengthForMIG");
}

id objc_msgSend_bs_map_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_map:");
}

id objc_msgSend_bs_reduce_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_reduce:block:");
}

id objc_msgSend_bs_safeDictionaryForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_safeDictionaryForKey:");
}

id objc_msgSend_bs_safeStringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_safeStringForKey:");
}

id objc_msgSend_bs_secureDecodedFromData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_secureDecodedFromData:");
}

id objc_msgSend_bs_secureDecodedFromData_withAdditionalClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_secureDecodedFromData:withAdditionalClasses:");
}

id objc_msgSend_bs_secureEncoded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_secureEncoded");
}

id objc_msgSend_bs_secureObjectFromData_ofClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_secureObjectFromData:ofClass:");
}

id objc_msgSend_bs_secureObjectFromData_ofClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_secureObjectFromData:ofClasses:");
}

id objc_msgSend_bs_setSafeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_setSafeObject:forKey:");
}

id objc_msgSend_bs_valueWithCGPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bs_valueWithCGPoint:");
}

id objc_msgSend_build(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "build");
}

id objc_msgSend_build_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "build:");
}

id objc_msgSend_buildMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildMessage:");
}

id objc_msgSend_buildModeForReason_builder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildModeForReason:builder:");
}

id objc_msgSend_buildSchemaForClass_builder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildSchemaForClass:builder:");
}

id objc_msgSend_builderWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "builderWithObject:");
}

id objc_msgSend_builtinDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "builtinDisplay");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleID");
}

id objc_msgSend_bundleIDForPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIDForPID:");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundlePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundlePath");
}

id objc_msgSend_bundleRecordWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleRecordWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_buttonConfigurationForHardwareButtonMice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonConfigurationForHardwareButtonMice");
}

id objc_msgSend_buttonConfigurationForVirtualButtonMice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonConfigurationForVirtualButtonMice");
}

id objc_msgSend_buttonDownRepositionUniqueIdentifierToAssertionMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonDownRepositionUniqueIdentifierToAssertionMap");
}

id objc_msgSend_buttonMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonMask");
}

id objc_msgSend_buttonMaskDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonMaskDidChange");
}

id objc_msgSend_cachesPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachesPath");
}

id objc_msgSend_calendarWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarWithIdentifier:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelAndSuppressTouchesOnDisplay_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAndSuppressTouchesOnDisplay:reason:");
}

id objc_msgSend_cancelButtonForSenderID_uagePage_usage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelButtonForSenderID:uagePage:usage:");
}

id objc_msgSend_cancelTouchesOnAllDisplays(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelTouchesOnAllDisplays");
}

id objc_msgSend_cancelTouchesOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelTouchesOnDisplay:");
}

id objc_msgSend_cancelTouchesWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelTouchesWithIdentifiers:");
}

id objc_msgSend_canceledStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canceledStyle");
}

id objc_msgSend_centerAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerAtPoint:");
}

id objc_msgSend_changeSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeSource");
}

id objc_msgSend_claimsToConformToUsagePage_usage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "claimsToConformToUsagePage:usage:");
}

id objc_msgSend_classForCoder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classForCoder");
}

id objc_msgSend_classesRequiredToDecode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classesRequiredToDecode");
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clear");
}

id objc_msgSend_clickHapticStrength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clickHapticStrength");
}

id objc_msgSend_clickState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clickState");
}

id objc_msgSend_clickStateWithState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clickStateWithState:");
}

id objc_msgSend_clientConnectionManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientConnectionManager");
}

id objc_msgSend_clientEntitlement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientEntitlement");
}

id objc_msgSend_clientForTaskPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientForTaskPort:");
}

id objc_msgSend_cloneMaster(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloneMaster");
}

id objc_msgSend_cloneMirroringRequestsDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloneMirroringRequestsDidChange");
}

id objc_msgSend_clones(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clones");
}

id objc_msgSend_closestRegionForGlobalPoint_returningClosestContainingPoint_returningEdgeMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closestRegionForGlobalPoint:returningClosestContainingPoint:returningEdgeMask:");
}

id objc_msgSend_collectionLineBreakNoneStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionLineBreakNoneStyle");
}

id objc_msgSend_collectiveWatchdogPing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectiveWatchdogPing");
}

id objc_msgSend_colorVariationStyleWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorVariationStyleWithIndex:");
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commit");
}

id objc_msgSend_compareDate_toDate_toUnitGranularity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compareDate:toDate:toUnitGranularity:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configuration");
}

id objc_msgSend_configureConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureConnection:");
}

id objc_msgSend_connectionForPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionForPID:");
}

id objc_msgSend_containsIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsIndex:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "content");
}

id objc_msgSend_contentLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentLayer");
}

id objc_msgSend_contentWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentWithSize:");
}

id objc_msgSend_contentWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentWithString:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "context");
}

id objc_msgSend_contextID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextID");
}

id objc_msgSend_contextIDAtCAScreenLocation_displayUUID_options_securityAnalysis_results_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextIDAtCAScreenLocation:displayUUID:options:securityAnalysis:results:");
}

id objc_msgSend_contextIDsToAlwaysSendTouches(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextIDsToAlwaysSendTouches");
}

id objc_msgSend_contextIDsToExcludeFromHitTesting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextIDsToExcludeFromHitTesting");
}

id objc_msgSend_contextId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextId");
}

id objc_msgSend_contextIdHostingContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextIdHostingContextId:");
}

id objc_msgSend_contextRelativePointerPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextRelativePointerPosition");
}

id objc_msgSend_contextWithIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextWithIdentity:");
}

id objc_msgSend_controlledBySupernode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlledBySupernode");
}

id objc_msgSend_convertCAScreenLocation_toContextID_displayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertCAScreenLocation:toContextID:displayUUID:");
}

id objc_msgSend_convertFromGlobalPoint_toRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertFromGlobalPoint:toRegion:");
}

id objc_msgSend_convertPoint_fromContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:fromContextId:");
}

id objc_msgSend_convertPoint_fromLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:fromLayer:");
}

id objc_msgSend_convertPoint_toContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:toContextId:");
}

id objc_msgSend_convertReferenceLocation_toCAScreenLocationForDisplayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertReferenceLocation:toCAScreenLocationForDisplayUUID:");
}

id objc_msgSend_convertToGlobalPoint_fromRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToGlobalPoint:fromRegion:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyPropertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPropertyForKey:");
}

id objc_msgSend_cornerRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cornerRadius");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_crosshatchedBackgroundStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crosshatchedBackgroundStyle");
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentConnection");
}

id objc_msgSend_currentContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentContext");
}

id objc_msgSend_currentDestinations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDestinations");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentHandler");
}

id objc_msgSend_currentMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentMode");
}

id objc_msgSend_currentOverlayWithLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentOverlayWithLevel:");
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentRunLoop");
}

id objc_msgSend_currentSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentSession");
}

id objc_msgSend_currentTranslation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentTranslation");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_dataMigrationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataMigrationQueue");
}

id objc_msgSend_dataMigratorDidComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataMigratorDidComplete");
}

id objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateByAddingUnit_value_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingUnit:value:toDate:options:");
}

id objc_msgSend_deathWatcher(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deathWatcher");
}

id objc_msgSend_debugStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugStyle");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeDoubleForKey:");
}

id objc_msgSend_decodeFloatForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeFloatForKey:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:fromData:error:");
}

id objc_msgSend_decodeStringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeStringForKey:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultDownGainForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultDownGainForType:");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultPreferencesForHardwareType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultPreferencesForHardwareType:");
}

id objc_msgSend_defaultUpGainForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultUpGainForType:");
}

id objc_msgSend_definedInReferenceSpace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "definedInReferenceSpace");
}

id objc_msgSend_definitionForHomeButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "definitionForHomeButton");
}

id objc_msgSend_deliveryManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliveryManager");
}

id objc_msgSend_denormalizedAbsoluteGlobalPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "denormalizedAbsoluteGlobalPosition:");
}

id objc_msgSend_describes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "describes:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_descriptionBuilderWithMultilinePrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionBuilderWithMultilinePrefix:");
}

id objc_msgSend_descriptionForRootObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForRootObject:");
}

id objc_msgSend_descriptionForRootObject_withStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForRootObject:withStyle:");
}

id objc_msgSend_descriptionOfResolutionPathForEventDescriptor_senderDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionOfResolutionPathForEventDescriptor:senderDescriptor:");
}

id objc_msgSend_descriptionOfResolutionPathForKeyCommand_senderDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionOfResolutionPathForKeyCommand:senderDescriptor:");
}

id objc_msgSend_descriptionWithMultilinePrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionWithMultilinePrefix:");
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptor");
}

id objc_msgSend_descriptorByAddingSenderIDToMatchCriteria_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptorByAddingSenderIDToMatchCriteria:");
}

id objc_msgSend_descriptorForHIDEventType_page_usage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptorForHIDEventType:page:usage:");
}

id objc_msgSend_destinationPoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationPoint");
}

id objc_msgSend_destinationsForEvent_fromSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationsForEvent:fromSender:");
}

id objc_msgSend_destinationsForEvent_fromSender_overrideSenderDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationsForEvent:fromSender:overrideSenderDescriptor:");
}

id objc_msgSend_destinationsForEvent_sender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationsForEvent:sender:");
}

id objc_msgSend_destroyOverlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destroyOverlay:");
}

id objc_msgSend_detachTouchIdentifiers_count_assignUserIdentifier_policy_offset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detachTouchIdentifiers:count:assignUserIdentifier:policy:offset:");
}

id objc_msgSend_detectionMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detectionMask");
}

id objc_msgSend_deviceAvailabilityMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceAvailabilityMonitor");
}

id objc_msgSend_deviceClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceClass");
}

id objc_msgSend_deviceOrientationBlocking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceOrientationBlocking");
}

id objc_msgSend_deviceServiceDidAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceServiceDidAppear:");
}

id objc_msgSend_deviceServiceDidTerminate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceServiceDidTerminate:");
}

id objc_msgSend_deviceServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceServices");
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceType");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didAddAnnotation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAddAnnotation");
}

id objc_msgSend_didBlockSystemAppForAlternateSystemApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didBlockSystemAppForAlternateSystemApp");
}

id objc_msgSend_didPostEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didPostEvent");
}

id objc_msgSend_didReceiveEventFromDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveEventFromDevice");
}

id objc_msgSend_didRemoveAnnotation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRemoveAnnotation");
}

id objc_msgSend_didRemoveSubannotations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRemoveSubannotations");
}

id objc_msgSend_didRespondBlockForConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRespondBlockForConnection:");
}

id objc_msgSend_didUnblockSystemAppForAlternateSystemApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUnblockSystemAppForAlternateSystemApp");
}

id objc_msgSend_diffFromSettings_toSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diffFromSettings:toSettings:");
}

id objc_msgSend_digitizerEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "digitizerEnabled");
}

id objc_msgSend_digitizerEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "digitizerEvents");
}

id objc_msgSend_digitizerMatchingDictionaries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "digitizerMatchingDictionaries");
}

id objc_msgSend_digitizerServicePersistentPropertyController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "digitizerServicePersistentPropertyController");
}

id objc_msgSend_digitizerSurfaceDimensions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "digitizerSurfaceDimensions");
}

id objc_msgSend_digitizerVisualizeHitTestRegions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "digitizerVisualizeHitTestRegions");
}

id objc_msgSend_digitizerVisualizeTouches(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "digitizerVisualizeTouches");
}

id objc_msgSend_disableCAOverscan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableCAOverscan");
}

id objc_msgSend_disableCAScaling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableCAScaling");
}

id objc_msgSend_disableCAYUV(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableCAYUV");
}

id objc_msgSend_disableCloneMirroring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableCloneMirroring");
}

id objc_msgSend_disableFeatures(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableFeatures");
}

id objc_msgSend_disableStates_clearAsset_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableStates:clearAsset:error:");
}

id objc_msgSend_disableStudyLogALSLogging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableStudyLogALSLogging");
}

id objc_msgSend_disableStudyLogAccelerometerLogging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableStudyLogAccelerometerLogging");
}

id objc_msgSend_disableStudyLogBTKeyboardEventLogging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableStudyLogBTKeyboardEventLogging");
}

id objc_msgSend_disableStudyLogBTKeyboardEventRedirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableStudyLogBTKeyboardEventRedirection");
}

id objc_msgSend_disableStudyLogButtonLogging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableStudyLogButtonLogging");
}

id objc_msgSend_disableStudyLogCameraKeyLogging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableStudyLogCameraKeyLogging");
}

id objc_msgSend_disableStudyLogGyroLogging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableStudyLogGyroLogging");
}

id objc_msgSend_disableStudyLogPowerButtonLogging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableStudyLogPowerButtonLogging");
}

id objc_msgSend_disableStudyLogVolumeKeyLogging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableStudyLogVolumeKeyLogging");
}

id objc_msgSend_disableUpdateMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableUpdateMask");
}

id objc_msgSend_disabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disabled");
}

id objc_msgSend_disablesDisplayUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disablesDisplayUpdates");
}

id objc_msgSend_disablesUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disablesUpdates");
}

id objc_msgSend_dismissOverlayWithAnimationSettings_requstedByPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissOverlayWithAnimationSettings:requstedByPID:");
}

id objc_msgSend_dismissWithAnimationSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissWithAnimationSettings:");
}

id objc_msgSend_dispatcher(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatcher");
}

id objc_msgSend_display(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "display");
}

id objc_msgSend_display_didBecomeBlank_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "display:didBecomeBlank:");
}

id objc_msgSend_displayBrightnessCurve(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayBrightnessCurve");
}

id objc_msgSend_displayController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayController");
}

id objc_msgSend_displayId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayId");
}

id objc_msgSend_displayIsBlanked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayIsBlanked:");
}

id objc_msgSend_displayIsConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayIsConnected:");
}

id objc_msgSend_displayLinkClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayLinkClass");
}

id objc_msgSend_displayLinkDisabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayLinkDisabled");
}

id objc_msgSend_displayLinkFired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayLinkFired:");
}

id objc_msgSend_displayLinkWithDisplay_target_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayLinkWithDisplay:target:selector:");
}

id objc_msgSend_displayLinkWithTarget_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayLinkWithTarget:selector:");
}

id objc_msgSend_displayProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayProvider");
}

id objc_msgSend_displayState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayState");
}

id objc_msgSend_displayUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayUUID");
}

id objc_msgSend_displayUUIDIsActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayUUIDIsActive:");
}

id objc_msgSend_displayWithDisplayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayWithDisplayId:");
}

id objc_msgSend_displayWithHardwareIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayWithHardwareIdentifier:");
}

id objc_msgSend_displayWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayWithName:");
}

id objc_msgSend_displayWithUniqueId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayWithUniqueId:");
}

id objc_msgSend_displays(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displays");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distantPast");
}

id objc_msgSend_doItHide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doItHide");
}

id objc_msgSend_doubleTapDragMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleTapDragMode");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duration");
}

id objc_msgSend_edge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "edge");
}

id objc_msgSend_edgePosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "edgePosition");
}

id objc_msgSend_ellipseStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ellipseStyle");
}

id objc_msgSend_emphasizedStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emphasizedStyle");
}

id objc_msgSend_enableNaturalScrolling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableNaturalScrolling");
}

id objc_msgSend_enableStates_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableStates:error:");
}

id objc_msgSend_enableTapToClick(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableTapToClick");
}

id objc_msgSend_enableTwoFingerSecondaryClick(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableTwoFingerSecondaryClick");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeFloat_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeFloat:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:error:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_entitlementCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entitlementCache");
}

id objc_msgSend_enumerateIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateIndexesUsingBlock:");
}

id objc_msgSend_enumerateIndexesWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateIndexesWithOptions:usingBlock:");
}

id objc_msgSend_enumerateKeyPathNodes_options_ifFound_ifMissing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeyPathNodes:options:ifFound:ifMissing:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsWithIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsWithIndexesUsingBlock:");
}

id objc_msgSend_enumerateNodesWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateNodesWithOptions:usingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateRangesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateRangesUsingBlock:");
}

id objc_msgSend_enumerateUserInfoWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateUserInfoWithBlock:");
}

id objc_msgSend_enumerateWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateWithBlock:");
}

id objc_msgSend_enumeratorAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtPath:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environment");
}

id objc_msgSend_environmentRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environmentRepresentation");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_estimatedProxPowerAssertionID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedProxPowerAssertionID");
}

id objc_msgSend_estimatedProximityMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedProximityMode");
}

id objc_msgSend_evaluateDisplay_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateDisplay:reason:");
}

id objc_msgSend_evaluatePeriodicReportingTrigger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluatePeriodicReportingTrigger");
}

id objc_msgSend_eventDispatcher(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventDispatcher");
}

id objc_msgSend_eventProcessorOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventProcessorOfClass:");
}

id objc_msgSend_eventProcessorRegistry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventProcessorRegistry");
}

id objc_msgSend_eventSequenceStartTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventSequenceStartTimestamp");
}

id objc_msgSend_eventSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventSource");
}

id objc_msgSend_eventSourceForSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventSourceForSender:");
}

id objc_msgSend_eventTypeMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventTypeMask");
}

id objc_msgSend_executablePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executablePath");
}

id objc_msgSend_execute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "execute:");
}

id objc_msgSend_execute_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "execute:error:");
}

id objc_msgSend_externalDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "externalDefaults");
}

id objc_msgSend_fastConfigDictionaryForHAButtonHapticType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fastConfigDictionaryForHAButtonHapticType:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSystemRepresentation");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_filterDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterDestinations:");
}

id objc_msgSend_firstAdditionalContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstAdditionalContext");
}

id objc_msgSend_firstBootDetectorDidFinishFirstBoot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstBootDetectorDidFinishFirstBoot:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_fixedBrightnessLevelWhileDisabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fixedBrightnessLevelWhileDisabled");
}

id objc_msgSend_fixedBrightnessNitsWhileDisabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fixedBrightnessNitsWhileDisabled");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flush");
}

id objc_msgSend_force(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "force");
}

id objc_msgSend_forceCloneMirroring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceCloneMirroring");
}

id objc_msgSend_forceDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceDidChange");
}

id objc_msgSend_forceMirroredOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceMirroredOrientation");
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frame");
}

id objc_msgSend_frameDidEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameDidEnd");
}

id objc_msgSend_frameWillBegin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameWillBegin");
}

id objc_msgSend_freeze(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freeze");
}

id objc_msgSend_freezeOverlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freezeOverlay:");
}

id objc_msgSend_geometryForDisplayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geometryForDisplayUUID:");
}

id objc_msgSend_getArgument_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getArgument:atIndex:");
}

id objc_msgSend_getHitTestContextsAtPoint_withAdditionalContexts_onDisplay_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHitTestContextsAtPoint:withAdditionalContexts:onDisplay:withCompletion:");
}

id objc_msgSend_getStatus_presence_proximityInCentimeters_forDisplayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatus:presence:proximityInCentimeters:forDisplayUUID:");
}

id objc_msgSend_globalDevicePreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "globalDevicePreferences");
}

id objc_msgSend_globalKeyboardModifiersDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "globalKeyboardModifiersDidChange:");
}

id objc_msgSend_globalMouseDevicePreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "globalMouseDevicePreferences");
}

id objc_msgSend_globalPointerPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "globalPointerPosition");
}

id objc_msgSend_grant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grant");
}

id objc_msgSend_grantWithForegroundPriority(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grantWithForegroundPriority");
}

id objc_msgSend_grantWithNamespace_endowment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grantWithNamespace:endowment:");
}

id objc_msgSend_grantWithResistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grantWithResistance:");
}

id objc_msgSend_grantWithUserInteractivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grantWithUserInteractivity");
}

id objc_msgSend_handleAccelerometerEventWithTimestamp_x_y_z_samplingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAccelerometerEventWithTimestamp:x:y:z:samplingInterval:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleOrientationEvent_orientationLocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleOrientationEvent:orientationLocked:");
}

id objc_msgSend_hapticClickCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapticClickCount");
}

id objc_msgSend_hapticGainForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapticGainForType:");
}

id objc_msgSend_hardwareType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hardwareType");
}

id objc_msgSend_hasDebugStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDebugStyle");
}

id objc_msgSend_hasDeviceAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDeviceAvailable");
}

id objc_msgSend_hasEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasEntitlement:");
}

id objc_msgSend_hasEntitlement_forAuditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasEntitlement:forAuditToken:");
}

id objc_msgSend_hasEntitlement_forConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasEntitlement:forConnection:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasSuccinctStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuccinctStyle");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_height(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "height");
}

id objc_msgSend_hideAppleLogoOnLaunch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideAppleLogoOnLaunch");
}

id objc_msgSend_hitTestAtPosition_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hitTestAtPosition:options:");
}

id objc_msgSend_hitTestInformationMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hitTestInformationMask");
}

id objc_msgSend_hitTestReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hitTestReason");
}

id objc_msgSend_hitTestRegionsDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hitTestRegionsDidChange:");
}

id objc_msgSend_hitTestRegionsDidChange_forDisplayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hitTestRegionsDidChange:forDisplayUUID:");
}

id objc_msgSend_homeButtonType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeButtonType");
}

id objc_msgSend_hostContextIDForEmbeddedContextID_displayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hostContextIDForEmbeddedContextID:displayUUID:");
}

id objc_msgSend_humanIsPresent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "humanIsPresent");
}

id objc_msgSend_iapDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iapDefaults");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_identityForEmbeddedApplicationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityForEmbeddedApplicationIdentifier:");
}

id objc_msgSend_ignoreAccelerometerAndOrientationEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreAccelerometerAndOrientationEvents");
}

id objc_msgSend_ignoreTetheringPreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreTetheringPreferences");
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "image");
}

id objc_msgSend_imageAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageAtIndex:");
}

id objc_msgSend_immutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "immutableCopy");
}

id objc_msgSend_immutableDisplayForUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "immutableDisplayForUUID:");
}

id objc_msgSend_includeBitNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "includeBitNumber:");
}

id objc_msgSend_increment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "increment");
}

id objc_msgSend_indexOfObject_inSortedRange_options_usingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:inSortedRange:options:usingComparator:");
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSet");
}

id objc_msgSend_indexesPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexesPassingTest:");
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "infoDictionary");
}

id objc_msgSend_infoForDisplayUUID_createIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "infoForDisplayUUID:createIfNeeded:");
}

id objc_msgSend_inhibitRotation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inhibitRotation");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init");
}

id objc_msgSend_initForAllManagedWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForAllManagedWithReason:");
}

id objc_msgSend_initForDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForDisplay:");
}

id objc_msgSend_initWithBHButtonHapticsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBHButtonHapticsController:");
}

id objc_msgSend_initWithBasename_bundle_imageCount_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBasename:bundle:imageCount:scale:");
}

id objc_msgSend_initWithBundleId_options_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleId:options:queue:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithConnection_pid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnection:pid:");
}

id objc_msgSend_initWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfFile:options:error:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithContextID_clientPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContextID:clientPort:");
}

id objc_msgSend_initWithController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:");
}

id objc_msgSend_initWithDelegate_serverTarget_serverProtocol_clientProtocol_serviceName_queue_log_entitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:serverTarget:serverProtocol:clientProtocol:serviceName:queue:log:entitlement:");
}

id objc_msgSend_initWithDeliveryManager_ruleChangeAuthority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeliveryManager:ruleChangeAuthority:");
}

id objc_msgSend_initWithDisplayLinkClass_display_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDisplayLinkClass:display:target:action:");
}

id objc_msgSend_initWithDisplayProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDisplayProvider:");
}

id objc_msgSend_initWithDisplayProvider_log_filterPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDisplayProvider:log:filterPredicate:");
}

id objc_msgSend_initWithDisplayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDisplayUUID:");
}

id objc_msgSend_initWithExplanation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExplanation:");
}

id objc_msgSend_initWithExplanation_target_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExplanation:target:attributes:");
}

id objc_msgSend_initWithFireInterval_queue_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFireInterval:queue:handler:");
}

id objc_msgSend_initWithFirstBootDetector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFirstBootDetector:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithHIDHapticFeedbackInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHIDHapticFeedbackInterface:");
}

id objc_msgSend_initWithHIDSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHIDSystem:");
}

id objc_msgSend_initWithIOHIDService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIOHIDService:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_forReason_contextRelativePointerPosition_displayUUID_restrictingToPID_invalidationBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:forReason:contextRelativePointerPosition:displayUUID:restrictingToPID:invalidationBlock:");
}

id objc_msgSend_initWithIdentifier_forReason_invalidationBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:forReason:invalidationBlock:");
}

id objc_msgSend_initWithIdentifier_transactionManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:transactionManager:");
}

id objc_msgSend_initWithInterpolatedEventTypeMask_postEventsBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInterpolatedEventTypeMask:postEventsBlock:");
}

id objc_msgSend_initWithLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLabel:");
}

id objc_msgSend_initWithLabel_logCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLabel:logCategory:");
}

id objc_msgSend_initWithLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLog:");
}

id objc_msgSend_initWithLogger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLogger:");
}

id objc_msgSend_initWithLogger_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLogger:duration:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMatchingDictionary_dataProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMatchingDictionary:dataProvider:");
}

id objc_msgSend_initWithMatchingDictionary_instantiateWrapperUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMatchingDictionary:instantiateWrapperUsingBlock:");
}

id objc_msgSend_initWithName_display_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:display:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:count:");
}

id objc_msgSend_initWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:forKeys:");
}

id objc_msgSend_initWithObserver_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObserver:queue:");
}

id objc_msgSend_initWithObserverService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObserverService:");
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:");
}

id objc_msgSend_initWithOptions_capacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:capacity:");
}

id objc_msgSend_initWithOverlayDescriptor_level_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOverlayDescriptor:level:");
}

id objc_msgSend_initWithPID_queue_deathHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPID:queue:deathHandler:");
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:");
}

id objc_msgSend_initWithPid_sendRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPid:sendRight:");
}

id objc_msgSend_initWithPid_sendRight_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPid:sendRight:queue:");
}

id objc_msgSend_initWithPoint_contextID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPoint:contextID:");
}

id objc_msgSend_initWithPointSize_cornerRadius_scale_displayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPointSize:cornerRadius:scale:displayUUID:");
}

id objc_msgSend_initWithPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPort:");
}

id objc_msgSend_initWithPredicate_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPredicate:context:");
}

id objc_msgSend_initWithProcessId_contextIds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProcessId:contextIds:");
}

id objc_msgSend_initWithProgressBarVisibility_createContext_contextLevel_appearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProgressBarVisibility:createContext:contextLevel:appearance:");
}

id objc_msgSend_initWithRed_green_blue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRed:green:blue:");
}

id objc_msgSend_initWithRegion_relativeRegion_edge_edgePosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRegion:relativeRegion:edge:edgePosition:");
}

id objc_msgSend_initWithRelativeTranslation_animationSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRelativeTranslation:animationSettings:");
}

id objc_msgSend_initWithRelativeTranslation_destinationPoint_animationDriver_updateRate_applierBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRelativeTranslation:destinationPoint:animationDriver:updateRate:applierBlock:completionBlock:");
}

id objc_msgSend_initWithRelativeTranslation_initialVelocity_decelerationRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRelativeTranslation:initialVelocity:decelerationRate:");
}

id objc_msgSend_initWithSecureModeViolations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSecureModeViolations:");
}

id objc_msgSend_initWithSenderDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSenderDescriptor:");
}

id objc_msgSend_initWithSenderDescriptor_matcherDataProvider_persistentPropertyController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSenderDescriptor:matcherDataProvider:persistentPropertyController:");
}

id objc_msgSend_initWithSensorConfiguration_displayBrightnessController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSensorConfiguration:displayBrightnessController:");
}

id objc_msgSend_initWithSentinel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSentinel:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithSupportedHES_disengagedHES_attached_unknownState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSupportedHES:disengagedHES:attached:unknownState:");
}

id objc_msgSend_initWithSystemAppSentinel_alternateSystemAppManager_firstBootDetector_bootUIOverlayVendor_renderOverlayManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSystemAppSentinel:alternateSystemAppManager:firstBootDetector:bootUIOverlayVendor:renderOverlayManager:");
}

id objc_msgSend_initWithSystemAppSentinel_firstBootToken_alternateSystemAppManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSystemAppSentinel:firstBootToken:alternateSystemAppManager:");
}

id objc_msgSend_initWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:selector:object:");
}

id objc_msgSend_initWithUsagePage_usage_builtIn_dataProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUsagePage:usage:builtIn:dataProvider:");
}

id objc_msgSend_initialSampleEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialSampleEvent");
}

id objc_msgSend_initialize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialize");
}

id objc_msgSend_injectGSEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "injectGSEvent:");
}

id objc_msgSend_injectHIDEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "injectHIDEvent:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertSublayer_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSublayer:atIndex:");
}

id objc_msgSend_inspectChangesFromState_toState_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inspectChangesFromState:toState:withBlock:");
}

id objc_msgSend_inspectChangesWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inspectChangesWithBlock:");
}

id objc_msgSend_inspectChangesWithOldPolicy_newPolicy_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inspectChangesWithOldPolicy:newPolicy:usingBlock:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interface");
}

id objc_msgSend_interfaceOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceOrientation");
}

id objc_msgSend_interfaceWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithIdentifier:");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectSet:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateAbsolutePosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateAbsolutePosition");
}

id objc_msgSend_invalidateTouchStreamReference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateTouchStreamReference:");
}

id objc_msgSend_invoke(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invoke");
}

id objc_msgSend_isALSSupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isALSSupported");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActive");
}

id objc_msgSend_isAlive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAlive");
}

id objc_msgSend_isAlsSupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAlsSupported");
}

id objc_msgSend_isAuthenticated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthenticated");
}

id objc_msgSend_isAutoBrightnessAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAutoBrightnessAvailable");
}

id objc_msgSend_isBlanked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBlanked");
}

id objc_msgSend_isBrightnessLevelControlAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBrightnessLevelControlAvailable");
}

id objc_msgSend_isBuiltIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBuiltIn");
}

id objc_msgSend_isCapsLockLightOn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCapsLockLightOn");
}

id objc_msgSend_isCapsLockLightOnForSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCapsLockLightOnForSenderID:");
}

id objc_msgSend_isComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isComplete");
}

id objc_msgSend_isDigitizerSignpostsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDigitizerSignpostsEnabled");
}

id objc_msgSend_isDitheringEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDitheringEnabled");
}

id objc_msgSend_isEffectivelyEqualToMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEffectivelyEqualToMode:");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToIndexSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToIndexSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExternal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExternal");
}

id objc_msgSend_isFirstBoot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFirstBoot");
}

id objc_msgSend_isFlipBookEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFlipBookEnabled");
}

id objc_msgSend_isFlipBookSuppressed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFlipBookSuppressed");
}

id objc_msgSend_isFrozen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFrozen");
}

id objc_msgSend_isLongPressEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLongPressEnabled");
}

id objc_msgSend_isObjectWithinProximity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isObjectWithinProximity");
}

id objc_msgSend_isPaused(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPaused");
}

id objc_msgSend_isPencilDigitizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPencilDigitizer");
}

id objc_msgSend_isProximityDetectionActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isProximityDetectionActive");
}

id objc_msgSend_isRequired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRequired");
}

id objc_msgSend_isRestrictedToSystemShell(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRestrictedToSystemShell");
}

id objc_msgSend_isSafeToResetIdleTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSafeToResetIdleTimer");
}

id objc_msgSend_isSecureModeEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSecureModeEnabled");
}

id objc_msgSend_isSenderLocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSenderLocked");
}

id objc_msgSend_isShowingNonBootUIOverlays(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isShowingNonBootUIOverlays");
}

id objc_msgSend_isSmartCoverClosed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSmartCoverClosed");
}

id objc_msgSend_isSmartCoverSupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSmartCoverSupported");
}

id objc_msgSend_isSpringAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSpringAnimation");
}

id objc_msgSend_isSqueezeForSystemShortcutEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSqueezeForSystemShortcutEnabled");
}

id objc_msgSend_isSteveNoteOverscanEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSteveNoteOverscanEnabled");
}

id objc_msgSend_isSteveNoteRotationEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSteveNoteRotationEnabled");
}

id objc_msgSend_isTethered(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTethered");
}

id objc_msgSend_isTokenSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTokenSet");
}

id objc_msgSend_isUsable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUsable");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValid");
}

id objc_msgSend_isVirtualService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isVirtualService");
}

id objc_msgSend_jobLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jobLabel");
}

id objc_msgSend_keyCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyCommand");
}

id objc_msgSend_keyCommandForEvent_gsKeyboard_activeModifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyCommandForEvent:gsKeyboard:activeModifiers:");
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyEnumerator");
}

id objc_msgSend_keyPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyPath");
}

id objc_msgSend_keyboardDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardDefaults");
}

id objc_msgSend_keyboardEventProcessor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardEventProcessor");
}

id objc_msgSend_keyboardFocusEnvironment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardFocusEnvironment");
}

id objc_msgSend_keyboardTypeRemap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardTypeRemap");
}

id objc_msgSend_keyboardWantsStandardTypeOverrideForSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardWantsStandardTypeOverrideForSenderID:");
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "label");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastUserEventTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastUserEventTime");
}

id objc_msgSend_launchPreboardWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchPreboardWithCompletion:");
}

id objc_msgSend_launchWithResultBlock_exitBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchWithResultBlock:exitBlock:");
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layer");
}

id objc_msgSend_layoutAnnotationStack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutAnnotationStack:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_level(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "level");
}

id objc_msgSend_listenerWithConfigurator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listenerWithConfigurator:");
}

id objc_msgSend_load(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "load");
}

id objc_msgSend_localDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localDefaults");
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "location");
}

id objc_msgSend_locationDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationDidChange");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lock");
}

id objc_msgSend_lockBacklight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockBacklight");
}

id objc_msgSend_lockdownDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockdownDefaults");
}

id objc_msgSend_log_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "log:");
}

id objc_msgSend_logBlock_domain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logBlock:domain:");
}

id objc_msgSend_mainDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainDisplay");
}

id objc_msgSend_mainDisplayCornerRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainDisplayCornerRadius");
}

id objc_msgSend_mainDisplayDigitizerService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainDisplayDigitizerService");
}

id objc_msgSend_mainDisplayPencilDigitizerService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainDisplayPencilDigitizerService");
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainRunLoop");
}

id objc_msgSend_makeObjectsPerformSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:withObject:");
}

id objc_msgSend_matchSharingTouchesPolicy_orCancelTouchesPolicy_orCombinedPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchSharingTouchesPolicy:orCancelTouchesPolicy:orCombinedPolicy:");
}

id objc_msgSend_matchesDescriptor_failureReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesDescriptor:failureReason:");
}

id objc_msgSend_matchesPortOfRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesPortOfRight:");
}

id objc_msgSend_maxAssetSlots(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxAssetSlots");
}

id objc_msgSend_maxForce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxForce");
}

id objc_msgSend_maximumTimeInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumTimeInterval");
}

id objc_msgSend_member_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "member:");
}

id objc_msgSend_migrateDefaultsIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateDefaultsIfNecessary");
}

id objc_msgSend_migrateIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateIfNecessary");
}

id objc_msgSend_migrateIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateIfNeeded");
}

id objc_msgSend_minimalStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimalStyle");
}

id objc_msgSend_minimumTimeInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumTimeInterval");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_modelUpdateAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelUpdateAssertion");
}

id objc_msgSend_modifierKeyRemapping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifierKeyRemapping");
}

id objc_msgSend_monitor_activeDisplayPropertiesDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitor:activeDisplayPropertiesDidChange:");
}

id objc_msgSend_monitor_displayDidBecomeActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitor:displayDidBecomeActive:");
}

id objc_msgSend_monitor_displayDidBecomeInactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitor:displayDidBecomeInactive:");
}

id objc_msgSend_monitorForDeath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitorForDeath:");
}

id objc_msgSend_monitorSendRight_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitorSendRight:withHandler:");
}

id objc_msgSend_mostRecentSender(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mostRecentSender");
}

id objc_msgSend_mouseInterpolation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mouseInterpolation");
}

id objc_msgSend_mousePointerController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mousePointerController");
}

id objc_msgSend_mousePointerDeviceAvailabilityMonitorDidChangeAvailability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mousePointerDeviceAvailabilityMonitorDidChangeAvailability:");
}

id objc_msgSend_mousePointerGlobalDevicePreferencesDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mousePointerGlobalDevicePreferencesDidChange:");
}

id objc_msgSend_mousePointerIOHIDServicesAdded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mousePointerIOHIDServicesAdded:");
}

id objc_msgSend_mousePointerIOHIDServicesRemoved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mousePointerIOHIDServicesRemoved:");
}

id objc_msgSend_moveItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtPath:toPath:error:");
}

id objc_msgSend_multitouchHostStateKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multitouchHostStateKeys");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_namespaceNode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "namespaceNode");
}

id objc_msgSend_nativeOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nativeOrientation");
}

id objc_msgSend_nativeRotation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nativeRotation");
}

id objc_msgSend_needsLogging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsLogging");
}

id objc_msgSend_new(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "new");
}

id objc_msgSend_newLayerForContent_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newLayerForContent:scale:");
}

id objc_msgSend_nextEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextEvent");
}

id objc_msgSend_nodeAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nodeAtKeyPath:");
}

id objc_msgSend_normalConfigDictionaryForHAButtonHapticType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalConfigDictionaryForHAButtonHapticType:");
}

id objc_msgSend_normalizedDigitizerRect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalizedDigitizerRect");
}

id objc_msgSend_normalizedGlobalPointerPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalizedGlobalPointerPosition");
}

id objc_msgSend_noteInterfaceOrientationChangedWithInterfaceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteInterfaceOrientationChangedWithInterfaceOrientation:");
}

id objc_msgSend_noteTouchUpOccurred_detached_context_clientPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteTouchUpOccurred:detached:context:clientPort:");
}

id objc_msgSend_notifyOnNextUserEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyOnNextUserEvent");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "null");
}

id objc_msgSend_nullAsset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nullAsset");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "object");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtKeyPath:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectEnumerator");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForSetting:");
}

id objc_msgSend_observeDefault_onQueue_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeDefault:onQueue:withBlock:");
}

id objc_msgSend_observeDefaults_onQueue_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeDefaults:onQueue:withBlock:");
}

id objc_msgSend_observeMouseAbsolutePointDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeMouseAbsolutePointDidChange:");
}

id objc_msgSend_observeMouseAvailabilityDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeMouseAvailabilityDidChange:");
}

id objc_msgSend_observeMouseButtonMaskDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeMouseButtonMaskDidChange:");
}

id objc_msgSend_observeMouseDidEnterContextID_pid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeMouseDidEnterContextID:pid:");
}

id objc_msgSend_observeMouseDidExitContextID_pid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeMouseDidExitContextID:pid:");
}

id objc_msgSend_observeMouseForceDidChange_stage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeMouseForceDidChange:stage:");
}

id objc_msgSend_observeMouseModelPointDidChange_display_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeMouseModelPointDidChange:display:reason:");
}

id objc_msgSend_observeMouseRelativePointDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeMouseRelativePointDidChange:");
}

id objc_msgSend_observeMouseScrollPhaseDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeMouseScrollPhaseDidChange:");
}

id objc_msgSend_observeMouseTouchCountDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeMouseTouchCountDidChange:");
}

id objc_msgSend_observeTouchEventDeliveryDidOccur_response_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeTouchEventDeliveryDidOccur:response:");
}

id objc_msgSend_observeValueForKeyPath_ofObject_change_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeValueForKeyPath:ofObject:change:context:");
}

id objc_msgSend_observer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observer");
}

id objc_msgSend_openAlternateSystemApp_options_withResult_andExitBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openAlternateSystemApp:options:withResult:andExitBlock:");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "options");
}

id objc_msgSend_orderedContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedContext");
}

id objc_msgSend_orderedSetWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithArray:");
}

id objc_msgSend_orderedSetWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithCapacity:");
}

id objc_msgSend_orientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientation");
}

id objc_msgSend_orientationManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientationManager");
}

id objc_msgSend_orientationManager_deviceOrientationMayHaveChanged_changeSource_isDeviceOrientationLocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientationManager:deviceOrientationMayHaveChanged:changeSource:isDeviceOrientationLocked:");
}

id objc_msgSend_overlayStyle_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayStyle:block:");
}

id objc_msgSend_overlayType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayType");
}

id objc_msgSend_overlayWithLevel_display_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayWithLevel:display:");
}

id objc_msgSend_overrideSenderDescriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideSenderDescriptor");
}

id objc_msgSend_passiveOrientationEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passiveOrientationEvents");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_pathAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathAttributes");
}

id objc_msgSend_pathIndexInRangeMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathIndexInRangeMask");
}

id objc_msgSend_pathIndexTouchingMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathIndexTouchingMask");
}

id objc_msgSend_pathProviderForSystemContainerForCurrentProcess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathProviderForSystemContainerForCurrentProcess");
}

id objc_msgSend_pattern(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pattern");
}

id objc_msgSend_perDisplayUUIDInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "perDisplayUUIDInfo");
}

id objc_msgSend_performSelector_onThread_withObject_waitUntilDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:onThread:withObject:waitUntilDone:");
}

id objc_msgSend_performSelector_onThread_withObject_waitUntilDone_modes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:onThread:withObject:waitUntilDone:modes:");
}

id objc_msgSend_performSelectorOnMainThread_withObject_waitUntilDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelectorOnMainThread:withObject:waitUntilDone:");
}

id objc_msgSend_performSynchronized_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSynchronized:");
}

id objc_msgSend_performSynchronizedWithCATransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSynchronizedWithCATransaction:");
}

id objc_msgSend_persistentConnectionDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentConnectionDefaults");
}

id objc_msgSend_persistentPropertiesForKeys_forSenderDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentPropertiesForKeys:forSenderDescriptor:");
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pid");
}

id objc_msgSend_pidForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pidForBundleID:");
}

id objc_msgSend_pinOnButtonDown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pinOnButtonDown");
}

id objc_msgSend_playFeedback_powerSourceID_timestamp_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playFeedback:powerSourceID:timestamp:error:");
}

id objc_msgSend_playFeedback_senderID_timestamp_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playFeedback:senderID:timestamp:error:");
}

id objc_msgSend_playHapticFeedbackRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playHapticFeedbackRequest:");
}

id objc_msgSend_playHapticForClickState_clickSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playHapticForClickState:clickSpeed:");
}

id objc_msgSend_playState_forSpeed_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playState:forSpeed:error:");
}

id objc_msgSend_pocketTouchesExpected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pocketTouchesExpected");
}

id objc_msgSend_point(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "point");
}

id objc_msgSend_pointScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointScale");
}

id objc_msgSend_pointSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointSize");
}

id objc_msgSend_pointerAbsolutePosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointerAbsolutePosition");
}

id objc_msgSend_pointerAccelerationFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointerAccelerationFactor");
}

id objc_msgSend_pointerArrayWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointerArrayWithOptions:");
}

id objc_msgSend_pointerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointerAtIndex:");
}

id objc_msgSend_pointerGlobalDevicePreferencesDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointerGlobalDevicePreferencesDidChange:");
}

id objc_msgSend_pointerRegionArrangementEdge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointerRegionArrangementEdge");
}

id objc_msgSend_pointerStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointerStyle");
}

id objc_msgSend_pointingDevicesDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointingDevicesDidChange:");
}

id objc_msgSend_policyByCombiningPolicies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "policyByCombiningPolicies:");
}

id objc_msgSend_policyExcludingPolicyIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "policyExcludingPolicyIdenticalTo:");
}

id objc_msgSend_policyIncludingPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "policyIncludingPolicy:");
}

id objc_msgSend_position(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "position");
}

id objc_msgSend_positionType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "positionType");
}

id objc_msgSend_postEvent_fromSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postEvent:fromSender:");
}

id objc_msgSend_postEvent_position_additionalContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postEvent:position:additionalContext:");
}

id objc_msgSend_postEvent_position_additionalContext_fromBuffer_toResolution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postEvent:position:additionalContext:fromBuffer:toResolution:");
}

id objc_msgSend_postEvent_toDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postEvent:toDestination:");
}

id objc_msgSend_postEventWithCurrentDetectionMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postEventWithCurrentDetectionMask");
}

id objc_msgSend_postHapticFeedbackRequest_forAuditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postHapticFeedbackRequest:forAuditToken:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postTouchAnnotations_sourcePID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postTouchAnnotations:sourcePID:");
}

id objc_msgSend_powerSourceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "powerSourceID");
}

id objc_msgSend_predicateMatchingIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateMatchingIdentifier:");
}

id objc_msgSend_preferencesForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferencesForDevice:");
}

id objc_msgSend_preferredFrameSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFrameSize");
}

id objc_msgSend_preferredScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredScale");
}

id objc_msgSend_prepareForRestart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForRestart");
}

id objc_msgSend_presentWithAnimationSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentWithAnimationSettings:");
}

id objc_msgSend_previousButtonMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousButtonMask");
}

id objc_msgSend_primaryPage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryPage");
}

id objc_msgSend_primarySystemShell(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primarySystemShell");
}

id objc_msgSend_primaryUsage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryUsage");
}

id objc_msgSend_primaryUsagePage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryUsagePage");
}

id objc_msgSend_principalClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "principalClass");
}

id objc_msgSend_processDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processDescription");
}

id objc_msgSend_processEvent_sender_dispatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processEvent:sender:dispatcher:");
}

id objc_msgSend_processEvent_sender_display_dispatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processEvent:sender:display:dispatcher:");
}

id objc_msgSend_processHandleForAuditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processHandleForAuditToken:");
}

id objc_msgSend_processId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processId");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processIdentifier");
}

id objc_msgSend_progressIndicatorProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressIndicatorProperties");
}

id objc_msgSend_progressIndicatorWithStyle_position_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressIndicatorWithStyle:position:");
}

id objc_msgSend_propertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyForKey:");
}

id objc_msgSend_propertyOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyOfClass:forKey:");
}

id objc_msgSend_protocolForProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolForProtocol:");
}

id objc_msgSend_proximityDetectionMaskDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proximityDetectionMaskDidChange:");
}

id objc_msgSend_proximityDetectionMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proximityDetectionMode");
}

id objc_msgSend_proximityInCentimeters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proximityInCentimeters");
}

id objc_msgSend_pushStatistics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushStatistics:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queue");
}

id objc_msgSend_rasterizationScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rasterizationScale");
}

id objc_msgSend_realToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "realToken");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reason");
}

id objc_msgSend_reasons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reasons");
}

id objc_msgSend_rebuildPersistentOverlays(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rebuildPersistentOverlays");
}

id objc_msgSend_recognizerForEventDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recognizerForEventDescriptor:");
}

id objc_msgSend_rect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rect");
}

id objc_msgSend_rectangleStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rectangleStyle");
}

id objc_msgSend_reducePolicyToObjectWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reducePolicyToObjectWithBlock:");
}

id objc_msgSend_reevaluateActiveDisplaysWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reevaluateActiveDisplaysWithReason:");
}

id objc_msgSend_referenceSpaceLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referenceSpaceLayer");
}

id objc_msgSend_regenerateLayerTree(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regenerateLayerTree");
}

id objc_msgSend_region(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "region");
}

id objc_msgSend_regionForDisplayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionForDisplayUUID:");
}

id objc_msgSend_regions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regions");
}

id objc_msgSend_registerClientsForMonitoring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClientsForMonitoring");
}

id objc_msgSend_registerHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerHandler:");
}

id objc_msgSend_registerNotificationBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerNotificationBlock:");
}

id objc_msgSend_registerWatchdog(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerWatchdog");
}

id objc_msgSend_relativeRegion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relativeRegion");
}

id objc_msgSend_relativeToTopLeftOfSuper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relativeToTopLeftOfSuper:");
}

id objc_msgSend_remoteContextWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteContextWithOptions:");
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxy");
}

id objc_msgSend_remoteProcess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteProcess");
}

id objc_msgSend_remoteTarget(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteTarget");
}

id objc_msgSend_removeAllAnimations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllAnimations");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeAnnotationsForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAnnotationsForKeyPath:");
}

id objc_msgSend_removeAnnotationsForKeyPath_afterDelay_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAnnotationsForKeyPath:afterDelay:queue:");
}

id objc_msgSend_removeClone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeClone:");
}

id objc_msgSend_removeDisappearanceObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDisappearanceObserver:");
}

id objc_msgSend_removeDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDisplay:");
}

id objc_msgSend_removeFromSuperlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFromSuperlayer");
}

id objc_msgSend_removeGlobalDevicePreferencesObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeGlobalDevicePreferencesObserver:");
}

id objc_msgSend_removeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeIndex:");
}

id objc_msgSend_removeIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeIndexes:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeModesForVersionedPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeModesForVersionedPID:");
}

id objc_msgSend_removeMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeMonitor:");
}

id objc_msgSend_removeNodeAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeNodeAtKeyPath:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectIdenticalTo:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:");
}

id objc_msgSend_removeObserver_forKeyPath_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:context:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeOverlay_withAnimationSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeOverlay:withAnimationSettings:");
}

id objc_msgSend_removeRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRecognizer:");
}

id objc_msgSend_removeService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeService:");
}

id objc_msgSend_renderer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderer");
}

id objc_msgSend_renderingAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderingAssertion");
}

id objc_msgSend_replacePointerAtIndex_withPointer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replacePointerAtIndex:withPointer:");
}

id objc_msgSend_repostFirstEventToBufferedTargets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "repostFirstEventToBufferedTargets:");
}

id objc_msgSend_representsHomeButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "representsHomeButton");
}

id objc_msgSend_requestEstimatedProximityEventsWithTimeout_versionedPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestEstimatedProximityEventsWithTimeout:versionedPID:");
}

id objc_msgSend_requestProximityStatusEventForReason_versionedPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestProximityStatusEventForReason:versionedPID:");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reset");
}

id objc_msgSend_resetCalibration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCalibration");
}

id objc_msgSend_resetForCancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetForCancel");
}

id objc_msgSend_resetTimer_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetTimer:mode:");
}

id objc_msgSend_responsePendingForConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responsePendingForConnection:");
}

id objc_msgSend_restoreSystemDisplayBrightness(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreSystemDisplayBrightness");
}

id objc_msgSend_restrictingToPID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictingToPID");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_ringerState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ringerState");
}

id objc_msgSend_rootLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootLayer");
}

id objc_msgSend_rootLayerPropertiesForDisplay_displayController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootLayerPropertiesForDisplay:displayController:");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "run");
}

id objc_msgSend_saveOverlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveOverlay:");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scale");
}

id objc_msgSend_schedule(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "schedule");
}

id objc_msgSend_scheduleReadyNotificationOnDispatchQueue_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleReadyNotificationOnDispatchQueue:withBlock:");
}

id objc_msgSend_scheduleWithFireInterval_leewayInterval_queue_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleWithFireInterval:leewayInterval:queue:handler:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_screenInfoForScreenID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenInfoForScreenID:");
}

id objc_msgSend_scrollAccelerationFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollAccelerationFactor");
}

id objc_msgSend_scrollPhase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollPhase");
}

id objc_msgSend_scrollPhaseDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollPhaseDidChange");
}

id objc_msgSend_section(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "section");
}

id objc_msgSend_secureModeViolations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secureModeViolations");
}

id objc_msgSend_secureName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secureName");
}

id objc_msgSend_securityAnalysisFromCAHitTestDictionary_errorString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "securityAnalysisFromCAHitTestDictionary:errorString:");
}

id objc_msgSend_selector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selector");
}

id objc_msgSend_sendActions_withResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendActions:withResult:");
}

id objc_msgSend_sendCancelEventForAllDisplays(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCancelEventForAllDisplays");
}

id objc_msgSend_sendCancelEventForDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCancelEventForDisplay:");
}

id objc_msgSend_sendEvent_toClientTaskPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEvent:toClientTaskPort:");
}

id objc_msgSend_sendRight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRight");
}

id objc_msgSend_sendTouchUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTouchUpdate:");
}

id objc_msgSend_senderCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "senderCache");
}

id objc_msgSend_senderDescriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "senderDescriptor");
}

id objc_msgSend_senderDescriptorForEventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "senderDescriptorForEventType:");
}

id objc_msgSend_senderID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "senderID");
}

id objc_msgSend_senderInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "senderInfo");
}

id objc_msgSend_senderPostsAtHighFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "senderPostsAtHighFrequency:");
}

id objc_msgSend_sensorCharacteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sensorCharacteristics");
}

id objc_msgSend_sensorConfiguratorForCurrentPlatform(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sensorConfiguratorForCurrentPlatform");
}

id objc_msgSend_sensorModeDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sensorModeDidChange:");
}

id objc_msgSend_sensorsRequiredForOpenState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sensorsRequiredForOpenState");
}

id objc_msgSend_sequenceForFirstEvent_sender_processor_dispatcher_additionalContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sequenceForFirstEvent:sender:processor:dispatcher:additionalContext:");
}

id objc_msgSend_sequenceForKeyCommand_sender_processor_dispatcher_additionalContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sequenceForKeyCommand:sender:processor:dispatcher:additionalContext:");
}

id objc_msgSend_serial(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serial");
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "server");
}

id objc_msgSend_serverIfRunning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverIfRunning");
}

id objc_msgSend_serverWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverWithOptions:");
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "service");
}

id objc_msgSend_serviceClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceClass:");
}

id objc_msgSend_serviceMatcherDataProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceMatcherDataProvider");
}

id objc_msgSend_serviceQuality(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceQuality");
}

id objc_msgSend_serviceServer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceServer");
}

id objc_msgSend_serviceStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceStatus");
}

id objc_msgSend_services(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "services");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set");
}

id objc_msgSend_setALSEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setALSEnabled:");
}

id objc_msgSend_setALSEpoch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setALSEpoch:");
}

id objc_msgSend_setALSUserPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setALSUserPreferences:");
}

id objc_msgSend_setAcceleratedRelativePositionX_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcceleratedRelativePositionX:");
}

id objc_msgSend_setAcceleratedRelativePositionY_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcceleratedRelativePositionY:");
}

id objc_msgSend_setAccelerometerUpdateInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccelerometerUpdateInterval:");
}

id objc_msgSend_setActivationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivationHandler:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setActiveAlternateSystemAppBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveAlternateSystemAppBundleIdentifier:");
}

id objc_msgSend_setActiveModifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveModifiers:");
}

id objc_msgSend_setAffineTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAffineTransform:");
}

id objc_msgSend_setAlternateSystemApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlternateSystemApp:");
}

id objc_msgSend_setAlternateSystemAppManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlternateSystemAppManager:");
}

id objc_msgSend_setAnalyticsReporter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnalyticsReporter:");
}

id objc_msgSend_setAnchorPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnchorPoint:");
}

id objc_msgSend_setAnimates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnimates:");
}

id objc_msgSend_setAnnotation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnnotation:");
}

id objc_msgSend_setAnnotation_forKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnnotation:forKeyPath:");
}

id objc_msgSend_setAnnotationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnnotationController:");
}

id objc_msgSend_setAssetType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetType:");
}

id objc_msgSend_setAssociatedDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssociatedDisplay:");
}

id objc_msgSend_setAttachedCoverRequiresWorkaroundForOpenState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttachedCoverRequiresWorkaroundForOpenState:");
}

id objc_msgSend_setAuthenticationMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticationMessage:");
}

id objc_msgSend_setAutoBrightnessEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoBrightnessEnabled:");
}

id objc_msgSend_setAutomaticResetDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutomaticResetDisabled:");
}

id objc_msgSend_setBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackground:");
}

id objc_msgSend_setBackgroundAverage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundAverage:");
}

id objc_msgSend_setBackgroundAverageContrastThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundAverageContrastThreshold:");
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundColor:");
}

id objc_msgSend_setBackgroundStandardDeviation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundStandardDeviation:");
}

id objc_msgSend_setBacklightFeatures_forPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBacklightFeatures:forPID:");
}

id objc_msgSend_setBacklightLocked_forReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBacklightLocked:forReason:");
}

id objc_msgSend_setBaseStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBaseStyle:");
}

id objc_msgSend_setBeginTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeginTime:");
}

id objc_msgSend_setBeginTimeMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeginTimeMode:");
}

id objc_msgSend_setBlanked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlanked:");
}

id objc_msgSend_setBlankingRemovesPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlankingRemovesPower:");
}

id objc_msgSend_setBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBounds:");
}

id objc_msgSend_setBrightness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrightness:");
}

id objc_msgSend_setBrightnessCurve_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrightnessCurve:");
}

id objc_msgSend_setBrightnessLevel_reason_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrightnessLevel:reason:options:");
}

id objc_msgSend_setBuiltInDisplayInterfaceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBuiltInDisplayInterfaceOrientation:");
}

id objc_msgSend_setBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleID:");
}

id objc_msgSend_setBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIdentifier:");
}

id objc_msgSend_setBundlePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundlePath:");
}

id objc_msgSend_setButtonDownRepositionUniqueIdentifierToAssertionMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setButtonDownRepositionUniqueIdentifierToAssertionMap:");
}

id objc_msgSend_setCalculationMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalculationMode:");
}

id objc_msgSend_setCapsLockActive_onSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCapsLockActive:onSenderID:");
}

id objc_msgSend_setCapsLockDelayOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCapsLockDelayOverride:");
}

id objc_msgSend_setCapsLockDelayOverride_forSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCapsLockDelayOverride:forSenderID:");
}

id objc_msgSend_setCapsLockKeyHasLanguageSwitchLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCapsLockKeyHasLanguageSwitchLabel:");
}

id objc_msgSend_setCapsLockLightOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCapsLockLightOn:");
}

id objc_msgSend_setChangeSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeSource:");
}

id objc_msgSend_setClickHapticAssetType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClickHapticAssetType:");
}

id objc_msgSend_setClickState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClickState:");
}

id objc_msgSend_setClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClient:");
}

id objc_msgSend_setClientConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientConnection:");
}

id objc_msgSend_setClientConnectionManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientConnectionManager:");
}

id objc_msgSend_setConfigs_withAssets_forStates_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigs:withAssets:forStates:error:");
}

id objc_msgSend_setConnectedKeyboards_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectedKeyboards:withReply:");
}

id objc_msgSend_setContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContent:");
}

id objc_msgSend_setContents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContents:");
}

id objc_msgSend_setContentsFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentsFormat:");
}

id objc_msgSend_setContentsScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentsScale:");
}

id objc_msgSend_setContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContext:");
}

id objc_msgSend_setContextID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextID:");
}

id objc_msgSend_setContextMove_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextMove:");
}

id objc_msgSend_setContextRelativePointerPosition_onDisplay_withAnimationParameters_restrictingToPID_auditPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextRelativePointerPosition:onDisplay:withAnimationParameters:restrictingToPID:auditPID:");
}

id objc_msgSend_setContextRelativePointerPosition_withInitialVelocity_onDisplay_withDecelerationRate_restrictingToPID_auditPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextRelativePointerPosition:withInitialVelocity:onDisplay:withDecelerationRate:restrictingToPID:auditPID:");
}

id objc_msgSend_setContextType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextType:");
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCount:");
}

id objc_msgSend_setCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCountryCode:");
}

id objc_msgSend_setCumulativeContentsTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCumulativeContentsTransform:");
}

id objc_msgSend_setCumulativeLayerTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCumulativeLayerTransform:");
}

id objc_msgSend_setCumulativeOpacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCumulativeOpacity:");
}

id objc_msgSend_setCurrentDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentDestinations:");
}

id objc_msgSend_setDeactivationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeactivationHandler:");
}

id objc_msgSend_setDeathWatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeathWatcher:");
}

id objc_msgSend_setDefinedInReferenceSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefinedInReferenceSpace:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDescriptor:");
}

id objc_msgSend_setDetectedOcclusion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectedOcclusion:");
}

id objc_msgSend_setDetectionMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectionMask:");
}

id objc_msgSend_setDeviceAvailabilityMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceAvailabilityMonitor:");
}

id objc_msgSend_setDigitizerEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDigitizerEnabled:");
}

id objc_msgSend_setDigitizerSurfaceHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDigitizerSurfaceHeight:");
}

id objc_msgSend_setDigitizerSurfaceSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDigitizerSurfaceSize:");
}

id objc_msgSend_setDigitizerSurfaceWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDigitizerSurfaceWidth:");
}

id objc_msgSend_setDisableActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableActions:");
}

id objc_msgSend_setDisableUpdateMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableUpdateMask:");
}

id objc_msgSend_setDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabled:");
}

id objc_msgSend_setDisablesUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisablesUpdates:");
}

id objc_msgSend_setDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplay:");
}

id objc_msgSend_setDisplayArrangement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayArrangement:");
}

id objc_msgSend_setDisplayBrightness_permanently_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayBrightness:permanently:");
}

id objc_msgSend_setDisplayBrightnessCurve_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayBrightnessCurve:");
}

id objc_msgSend_setDisplayController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayController:");
}

id objc_msgSend_setDisplayLinkClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayLinkClass:");
}

id objc_msgSend_setDisplayProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayProvider:");
}

id objc_msgSend_setDitheringEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDitheringEnabled:");
}

id objc_msgSend_setDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomain:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setElementValue_forUsagePage_usage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementValue:forUsagePage:usage:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEntitlementCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntitlementCache:");
}

id objc_msgSend_setEntitlements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntitlements:");
}

id objc_msgSend_setEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnvironment:");
}

id objc_msgSend_setEstimatedProxPowerAssertionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedProxPowerAssertionID:");
}

id objc_msgSend_setEstimatedProximityMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedProximityMode:");
}

id objc_msgSend_setEventDestination_forDisplayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventDestination:forDisplayUUID:");
}

id objc_msgSend_setEventDispatchMode_ambiguityRecommendation_lastTouchTimestamp_forTouchStreamIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventDispatchMode:ambiguityRecommendation:lastTouchTimestamp:forTouchStreamIdentifier:");
}

id objc_msgSend_setEventDispatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventDispatcher:");
}

id objc_msgSend_setEventProcessorRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventProcessorRegistry:");
}

id objc_msgSend_setEventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventType:");
}

id objc_msgSend_setEventsDisabled_pid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventsDisabled:pid:");
}

id objc_msgSend_setExcludedZoomContextIDs_fromVersionedPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExcludedZoomContextIDs:fromVersionedPID:");
}

id objc_msgSend_setExclusivityIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExclusivityIdentifier:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExternal:");
}

id objc_msgSend_setFillColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFillColor:");
}

id objc_msgSend_setFillMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFillMode:");
}

id objc_msgSend_setFingerDownCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingerDownCount:");
}

id objc_msgSend_setFlipBookEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlipBookEnabled:");
}

id objc_msgSend_setFlipBookSuppressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlipBookSuppressed:");
}

id objc_msgSend_setFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFont:");
}

id objc_msgSend_setFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFontSize:");
}

id objc_msgSend_setForceDemoMaxHBI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceDemoMaxHBI:");
}

id objc_msgSend_setForegroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForegroundColor:");
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrame:");
}

id objc_msgSend_setFromValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFromValue:");
}

id objc_msgSend_setFrozen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrozen:");
}

id objc_msgSend_setGSModifierState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGSModifierState:");
}

id objc_msgSend_setGlobalMouseDevicePreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGlobalMouseDevicePreferences:");
}

id objc_msgSend_setGlobalPointerEventRoutes_forPID_displayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGlobalPointerEventRoutes:forPID:displayUUID:");
}

id objc_msgSend_setGlobalPointerPosition_process_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGlobalPointerPosition:process:");
}

id objc_msgSend_setGlobeKeyLabelHasGlobeSymbol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGlobeKeyLabelHasGlobeSymbol:");
}

id objc_msgSend_setHasDiscreteProximitySensor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasDiscreteProximitySensor:");
}

id objc_msgSend_setHasInsecureFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasInsecureFilter:");
}

id objc_msgSend_setHasVirtualMouseButtons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasVirtualMouseButtons:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHideAppleLogoOnLaunch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHideAppleLogoOnLaunch:");
}

id objc_msgSend_setHitTestContexts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHitTestContexts:");
}

id objc_msgSend_setHitTestInformationFromEndEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHitTestInformationFromEndEvent:");
}

id objc_msgSend_setHitTestInformationFromStartEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHitTestInformationFromStartEvent:");
}

id objc_msgSend_setHitTestLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHitTestLocation:");
}

id objc_msgSend_setHitTestRegions_forDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHitTestRegions:forDisplay:");
}

id objc_msgSend_setHitTestSecurityAnalysis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHitTestSecurityAnalysis:");
}

id objc_msgSend_setHumanIsPresent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHumanIsPresent:");
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:");
}

id objc_msgSend_setInitialTouchTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialTouchTimestamp:");
}

id objc_msgSend_setInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterface:");
}

id objc_msgSend_setInterfaceTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterfaceTarget:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsDetached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsDetached:");
}

id objc_msgSend_setJobLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setJobLabel:");
}

id objc_msgSend_setKeyCommandsToAuthenticate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyCommandsToAuthenticate:");
}

id objc_msgSend_setKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyPath:");
}

id objc_msgSend_setKeyboardEventProcessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardEventProcessor:");
}

id objc_msgSend_setKeyboardLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardLayout:");
}

id objc_msgSend_setKeyboardLayout_forSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardLayout:forSenderID:");
}

id objc_msgSend_setKeyboardTypeRemap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardTypeRemap:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLanguage:");
}

id objc_msgSend_setLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLayer:");
}

id objc_msgSend_setLayerNamesByContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLayerNamesByContext:");
}

id objc_msgSend_setLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLayout:");
}

id objc_msgSend_setLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLevel:");
}

id objc_msgSend_setLineDashPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineDashPattern:");
}

id objc_msgSend_setLineWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineWidth:");
}

id objc_msgSend_setLocalDefaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalDefaults:");
}

id objc_msgSend_setLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocation:");
}

id objc_msgSend_setLockBacklight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLockBacklight:");
}

id objc_msgSend_setLocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocus:");
}

id objc_msgSend_setLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLog:");
}

id objc_msgSend_setMainDisplayCornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMainDisplayCornerRadius:");
}

id objc_msgSend_setManufacturerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManufacturerName:");
}

id objc_msgSend_setMaximumForce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumForce:");
}

id objc_msgSend_setMaximumLongPressTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumLongPressTimeInterval:");
}

id objc_msgSend_setMaximumMultiplePressTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumMultiplePressTimeInterval:");
}

id objc_msgSend_setMaximumPositionZ_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumPositionZ:");
}

id objc_msgSend_setMaximumPressCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumPressCount:");
}

id objc_msgSend_setMaximumTapCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumTapCount:");
}

id objc_msgSend_setMaximumTerminationResistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumTerminationResistance:");
}

id objc_msgSend_setMaximumTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumTimeInterval:");
}

id objc_msgSend_setMinimumBrightnessLevel_fadeDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumBrightnessLevel:fadeDuration:");
}

id objc_msgSend_setMinimumLongPressTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumLongPressTimeInterval:");
}

id objc_msgSend_setMinimumMultiplePressTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumMultiplePressTimeInterval:");
}

id objc_msgSend_setMinimumTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumTimeInterval:");
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMode:");
}

id objc_msgSend_setModelUpdateAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModelUpdateAssertion:");
}

id objc_msgSend_setMousePointerController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMousePointerController:");
}

id objc_msgSend_setMultitouchHostStateKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMultitouchHostStateKeys:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNamespaceNode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNamespaceNode:");
}

id objc_msgSend_setNativeRotation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNativeRotation:");
}

id objc_msgSend_setNeedsDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsDisplay");
}

id objc_msgSend_setNeedsLogging_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsLogging:");
}

id objc_msgSend_setNormalizedDigitizerRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNormalizedDigitizerRect:");
}

id objc_msgSend_setObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atKeyPath:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObject_forSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forSetting:");
}

id objc_msgSend_setOffset_forTouchesWithUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOffset:forTouchesWithUserIdentifier:");
}

id objc_msgSend_setOpacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpacity:");
}

id objc_msgSend_setOpenBundleId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpenBundleId:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrientation:");
}

id objc_msgSend_setOrientationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrientationManager:");
}

id objc_msgSend_setOrientationNotificationDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrientationNotificationDisabled:");
}

id objc_msgSend_setOriginIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginIdentifier:");
}

id objc_msgSend_setOverlayType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverlayType:");
}

id objc_msgSend_setOverrideSenderDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideSenderDescriptor:");
}

id objc_msgSend_setPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPID:");
}

id objc_msgSend_setPassiveOrientationEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassiveOrientationEvents:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPathAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPathAttributes:");
}

id objc_msgSend_setPathIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPathIndex:");
}

id objc_msgSend_setPathIndexInRangeMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPathIndexInRangeMask:");
}

id objc_msgSend_setPathIndexTouchingMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPathIndexTouchingMask:");
}

id objc_msgSend_setPaused_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPaused:");
}

id objc_msgSend_setPersistentProperties_forSenderDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentProperties:forSenderDescriptor:");
}

id objc_msgSend_setPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPid:");
}

id objc_msgSend_setPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPoint:");
}

id objc_msgSend_setPointerEdgeMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointerEdgeMask:");
}

id objc_msgSend_setPointerPosition_onDisplay_withAnimationParameters_auditPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointerPosition:onDisplay:withAnimationParameters:auditPID:");
}

id objc_msgSend_setPointerRegionArrangementEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointerRegionArrangementEdge:");
}

id objc_msgSend_setPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPosition:");
}

id objc_msgSend_setPostEventWithCurrentDetectionMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPostEventWithCurrentDetectionMask:");
}

id objc_msgSend_setPreciseLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreciseLocation:");
}

id objc_msgSend_setPreferenceKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferenceKey:");
}

id objc_msgSend_setPreferredFramesPerSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredFramesPerSecond:");
}

id objc_msgSend_setProcessDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessDescription:");
}

id objc_msgSend_setProcessId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessId:");
}

id objc_msgSend_setProductName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProductName:");
}

id objc_msgSend_setProgressIndicatorProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressIndicatorProperties:");
}

id objc_msgSend_setProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProperties:");
}

id objc_msgSend_setProperty_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProperty:forKey:");
}

id objc_msgSend_setProximityDetectionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProximityDetectionMode:");
}

id objc_msgSend_setProximityInCentimeters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProximityInCentimeters:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setRasterizationScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRasterizationScale:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setRegistrantEntitled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegistrantEntitled:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRemovedOnCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemovedOnCompletion:");
}

id objc_msgSend_setRenderer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRenderer:");
}

id objc_msgSend_setRendererFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRendererFlags:");
}

id objc_msgSend_setRepeatCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRepeatCount:");
}

id objc_msgSend_setReportType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReportType:");
}

id objc_msgSend_setResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceValue:forKey:error:");
}

id objc_msgSend_setRomanCapsLockSwitchModeActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRomanCapsLockSwitchModeActive:");
}

id objc_msgSend_setRomanCapsLockSwitchModeActive_forSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRomanCapsLockSwitchModeActive:forSenderID:");
}

id objc_msgSend_setRoutingPolicy_forTouchesWithUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoutingPolicy:forTouchesWithUserIdentifier:");
}

id objc_msgSend_setScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScale:");
}

id objc_msgSend_setScanningActive_buttonIdentifier_forPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanningActive:buttonIdentifier:forPID:");
}

id objc_msgSend_setSceneHostSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSceneHostSettings:");
}

id objc_msgSend_setSceneTouchBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSceneTouchBehavior:");
}

id objc_msgSend_setSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSection:");
}

id objc_msgSend_setSecure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecure:");
}

id objc_msgSend_setSecureModeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecureModeEnabled:");
}

id objc_msgSend_setSecureNameStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecureNameStatus:");
}

id objc_msgSend_setSecurityAnalysis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecurityAnalysis:");
}

id objc_msgSend_setSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSenderID:");
}

id objc_msgSend_setServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServer:");
}

id objc_msgSend_setService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setService:");
}

id objc_msgSend_setService_forAlias_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setService:forAlias:");
}

id objc_msgSend_setServiceConfigurings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceConfigurings:");
}

id objc_msgSend_setServiceMatcherDataProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceMatcherDataProvider:");
}

id objc_msgSend_setServiceQuality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceQuality:");
}

id objc_msgSend_setServiceServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceServer:");
}

id objc_msgSend_setShapeSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShapeSize:");
}

id objc_msgSend_setShouldAutoposition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAutoposition:");
}

id objc_msgSend_setShouldConsumeEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldConsumeEvents:");
}

id objc_msgSend_setShouldScrollNaturally_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldScrollNaturally:");
}

id objc_msgSend_setShouldSuppressTouchesWhileObjectWithinProximity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSuppressTouchesWhileObjectWithinProximity:");
}

id objc_msgSend_setShouldSwapPrimaryAndSecondaryButtons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSwapPrimaryAndSecondaryButtons:");
}

id objc_msgSend_setShouldUseButtonDownRecenteringBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUseButtonDownRecenteringBehavior:");
}

id objc_msgSend_setShouldUseHighFrequencyAttributeOption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUseHighFrequencyAttributeOption:");
}

id objc_msgSend_setShouldVisualizeHitTestRegions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldVisualizeHitTestRegions:");
}

id objc_msgSend_setShouldVisualizeTouches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldVisualizeTouches:");
}

id objc_msgSend_setSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSize:");
}

id objc_msgSend_setSlotDeletionCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSlotDeletionCallback:");
}

id objc_msgSend_setSmartCoverEventProcessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmartCoverEventProcessor:");
}

id objc_msgSend_setSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSource:");
}

id objc_msgSend_setSpawnType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpawnType:");
}

id objc_msgSend_setStandardType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStandardType:");
}

id objc_msgSend_setStandardType_forSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStandardType:forSenderID:");
}

id objc_msgSend_setStatistics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatistics:");
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setString:");
}

id objc_msgSend_setStrokeColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeColor:");
}

id objc_msgSend_setStyleModifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStyleModifier:");
}

id objc_msgSend_setStyleSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStyleSheet:");
}

id objc_msgSend_setSubinterfaceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubinterfaceID:");
}

id objc_msgSend_setSubnodeScreenEdgeTreatment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubnodeScreenEdgeTreatment:");
}

id objc_msgSend_setSuggestedSystemApertureGracePeriodForScreenOff_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuggestedSystemApertureGracePeriodForScreenOff:");
}

id objc_msgSend_setSuperBias_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuperBias:");
}

id objc_msgSend_setSupportsDragLock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsDragLock:");
}

id objc_msgSend_setSupportsLightClick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsLightClick:");
}

id objc_msgSend_setSupportsSystemHaptics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsSystemHaptics:");
}

id objc_msgSend_setSystemGestureStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemGestureStateChange:");
}

id objc_msgSend_setSystemGesturesPossible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemGesturesPossible:");
}

id objc_msgSend_setSystemIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemIdentifiers:");
}

id objc_msgSend_setSystemIdleSleepInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemIdleSleepInterval:");
}

id objc_msgSend_setSystemInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemInterface:");
}

id objc_msgSend_setTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTag:");
}

id objc_msgSend_setTargetContextID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetContextID:");
}

id objc_msgSend_setTargetQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetQueue:");
}

id objc_msgSend_setTargetSlotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetSlotID:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToValue:");
}

id objc_msgSend_setToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:");
}

id objc_msgSend_setTouchDeliveryPolicyServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchDeliveryPolicyServer:");
}

id objc_msgSend_setTouchIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchIdentifier:");
}

id objc_msgSend_setTouchPadManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchPadManager:");
}

id objc_msgSend_setTouchStreamIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchStreamIdentifier:");
}

id objc_msgSend_setTracksCarPlayRegions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTracksCarPlayRegions:");
}

id objc_msgSend_setTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransform:");
}

id objc_msgSend_setTransport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransport:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUnacceleratedRelativePositionX_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnacceleratedRelativePositionX:");
}

id objc_msgSend_setUnacceleratedRelativePositionY_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnacceleratedRelativePositionY:");
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlyingQueue:");
}

id objc_msgSend_setUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserIdentifier:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserInfo_forConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:forConnection:");
}

id objc_msgSend_setValidMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValidMask:");
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:");
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValues:");
}

id objc_msgSend_setVersionedPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersionedPID:");
}

id objc_msgSend_setVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisible:");
}

id objc_msgSend_setWantsAccelerometerEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWantsAccelerometerEvents:");
}

id objc_msgSend_setWantsOrientationEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWantsOrientationEvents:");
}

id objc_msgSend_setWatchdogType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWatchdogType:");
}

id objc_msgSend_setWifiInterfaceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiInterfaceName:");
}

id objc_msgSend_setWindowServerDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWindowServerDisplay:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_setXThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXThreshold:");
}

id objc_msgSend_setYThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setYThreshold:");
}

id objc_msgSend_setZGradient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZGradient:");
}

id objc_msgSend_setZThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZThreshold:");
}

id objc_msgSend_settings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settings");
}

id objc_msgSend_settlingDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settlingDuration");
}

id objc_msgSend_shapeSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shapeSize");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedInstances(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstances");
}

id objc_msgSend_sharedServer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedServer");
}

id objc_msgSend_shouldAutoposition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAutoposition");
}

id objc_msgSend_shouldAvoidHitTesting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAvoidHitTesting");
}

id objc_msgSend_shouldCancelTouchesDeliveredToContextId_withInitialTouchTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCancelTouchesDeliveredToContextId:withInitialTouchTimestamp:");
}

id objc_msgSend_shouldCreateStudyLogger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCreateStudyLogger");
}

id objc_msgSend_shouldIgnoreTouchesWhileObjectInProximity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldIgnoreTouchesWhileObjectInProximity");
}

id objc_msgSend_shouldRenderWithSupernode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRenderWithSupernode");
}

id objc_msgSend_shouldScrollNaturally(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldScrollNaturally");
}

id objc_msgSend_shouldUseButtonDownRecenteringBehavior(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseButtonDownRecenteringBehavior");
}

id objc_msgSend_shouldUseHaptic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseHaptic");
}

id objc_msgSend_shouldUseHighFrequencyAttributeOption(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseHighFrequencyAttributeOption");
}

id objc_msgSend_shouldVisualizeHitTestRegions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldVisualizeHitTestRegions");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_sizeLayer_toFitAtScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeLayer:toFitAtScale:");
}

id objc_msgSend_sizeLayerToFitAtScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeLayerToFitAtScale:");
}

id objc_msgSend_slotID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slotID");
}

id objc_msgSend_slowConfigDictionaryForHAButtonHapticType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slowConfigDictionaryForHAButtonHapticType:");
}

id objc_msgSend_smartCoverEventProcessor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "smartCoverEventProcessor");
}

id objc_msgSend_smartCoverStateDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "smartCoverStateDidChange:");
}

id objc_msgSend_smartKeyboardAttachmentStateDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "smartKeyboardAttachmentStateDidChange:");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_springBoardDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "springBoardDefaults");
}

id objc_msgSend_stage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stage");
}

id objc_msgSend_standardConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardConfiguration");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start");
}

id objc_msgSend_startDeviceOrientationUpdatesToQueue_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDeviceOrientationUpdatesToQueue:withHandler:");
}

id objc_msgSend_startEventProcessor_mainDisplayObserver_deliveryManager_dispatcherProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startEventProcessor:mainDisplayObserver:deliveryManager:dispatcherProvider:");
}

id objc_msgSend_startMonitoringSecureDrawing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringSecureDrawing");
}

id objc_msgSend_startObserving_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startObserving:queue:");
}

id objc_msgSend_startOfDayForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOfDayForDate:");
}

id objc_msgSend_startServerWithChannel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startServerWithChannel:");
}

id objc_msgSend_startServerWithDataMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startServerWithDataMigration");
}

id objc_msgSend_startServerWithoutDataMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startServerWithoutDataMigration");
}

id objc_msgSend_statisticWithLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statisticWithLabel:");
}

id objc_msgSend_statisticWithLabel_hexFormatModifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statisticWithLabel:hexFormatModifier:");
}

id objc_msgSend_statisticWithLabel_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statisticWithLabel:scale:");
}

id objc_msgSend_statisticsWithLabel_capacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statisticsWithLabel:capacity:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "status");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stop");
}

id objc_msgSend_stopDeviceOrientationUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopDeviceOrientationUpdates");
}

id objc_msgSend_stopRoutingGlobalEventsForPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopRoutingGlobalEventsForPID:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByDeletingPathExtension");
}

id objc_msgSend_stringByExpandingTildeInPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByExpandingTildeInPath");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strongToStrongObjectsMapTable");
}

id objc_msgSend_style(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "style");
}

id objc_msgSend_styleSheet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "styleSheet");
}

id objc_msgSend_styleSheetDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "styleSheetDidChange");
}

id objc_msgSend_stylusOpaqueTouchDigitizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stylusOpaqueTouchDigitizer");
}

id objc_msgSend_subannotationWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subannotationWithString:");
}

id objc_msgSend_subnodeScreenEdgeTreatment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subnodeScreenEdgeTreatment");
}

id objc_msgSend_subnodeStyleModifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subnodeStyleModifier");
}

id objc_msgSend_subnodes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subnodes");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_succinctDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "succinctDescription");
}

id objc_msgSend_succinctDescriptionBuilder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "succinctDescriptionBuilder");
}

id objc_msgSend_succinctStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "succinctStyle");
}

id objc_msgSend_superBias(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "superBias");
}

id objc_msgSend_superlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "superlayer");
}

id objc_msgSend_supportCloningToDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportCloningToDisplay:");
}

id objc_msgSend_supportedSensors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedSensors");
}

id objc_msgSend_supportsLayerTracking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsLayerTracking");
}

id objc_msgSend_supportsProximityLPAEventTransitions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsProximityLPAEventTransitions");
}

id objc_msgSend_suppressBrightnessNotificationsForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suppressBrightnessNotificationsForReason:");
}

id objc_msgSend_suppressPointerModelUpdatesAssertionForDisplay_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suppressPointerModelUpdatesAssertionForDisplay:reason:");
}

id objc_msgSend_sustainOverlayForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sustainOverlayForReason:");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronize");
}

id objc_msgSend_synchronizeALSPreferencesAndSystemDisplayBrightness(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeALSPreferencesAndSystemDisplayBrightness");
}

id objc_msgSend_systemAppSetOrientationEventsClient_wantsOrientationEvents_auditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemAppSetOrientationEventsClient:wantsOrientationEvents:auditToken:");
}

id objc_msgSend_systemApplicationBundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemApplicationBundleIdentifier");
}

id objc_msgSend_systemEventOfType_matchingEvent_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemEventOfType:matchingEvent:options:");
}

id objc_msgSend_systemGestureStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemGestureStateChange");
}

id objc_msgSend_systemIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemIdentifiers");
}

id objc_msgSend_systemIdleSleepInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemIdleSleepInterval");
}

id objc_msgSend_systemInterface(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemInterface");
}

id objc_msgSend_systemShellChangedWithPrimary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemShellChangedWithPrimary:");
}

id objc_msgSend_systemShellDidConnect_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemShellDidConnect:connection:");
}

id objc_msgSend_systemShellDidFinishLaunching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemShellDidFinishLaunching:");
}

id objc_msgSend_systemShellDidTerminate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemShellDidTerminate:");
}

id objc_msgSend_systemShellState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemShellState");
}

id objc_msgSend_systemShellWillBootstrap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemShellWillBootstrap");
}

id objc_msgSend_systemShells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemShells");
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tag");
}

id objc_msgSend_tapToWakeEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tapToWakeEnabled");
}

id objc_msgSend_targetWithPid_environmentIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetWithPid:environmentIdentifier:");
}

id objc_msgSend_taskNamePortOfContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskNamePortOfContextId:");
}

id objc_msgSend_taskPortForContextID_displayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskPortForContextID:displayUUID:");
}

id objc_msgSend_terminate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "terminate");
}

id objc_msgSend_terminateAlternateSystemApp_forReason_andReport_withDescription_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "terminateAlternateSystemApp:forReason:andReport:withDescription:completion:");
}

id objc_msgSend_terminateAnyAlternateSystemApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "terminateAnyAlternateSystemApp");
}

id objc_msgSend_terminateWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "terminateWithCompletion:");
}

id objc_msgSend_tetheredDisplayPortMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tetheredDisplayPortMode");
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "text");
}

id objc_msgSend_textBackgroundStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textBackgroundStyle");
}

id objc_msgSend_textStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textStyle");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestamp");
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "token");
}

id objc_msgSend_tokenForIdentifierOfCAContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenForIdentifierOfCAContext:");
}

id objc_msgSend_tokenFromAuditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenFromAuditToken:");
}

id objc_msgSend_touch_didHitTestToDestination_hostingChainIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touch:didHitTestToDestination:hostingChainIndex:");
}

id objc_msgSend_touch_didMoveToPoint_eventMask_z_maxZ_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touch:didMoveToPoint:eventMask:z:maxZ:");
}

id objc_msgSend_touch_pathIndex_downAtPoint_eventMask_transducerType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touch:pathIndex:downAtPoint:eventMask:transducerType:");
}

id objc_msgSend_touch_pathIndex_rangeInAtPoint_eventMask_z_maxZ_transducerType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touch:pathIndex:rangeInAtPoint:eventMask:z:maxZ:transducerType:");
}

id objc_msgSend_touch_pathIndex_rangeOutAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touch:pathIndex:rangeOutAtPoint:");
}

id objc_msgSend_touch_pathIndex_upAtPoint_detached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touch:pathIndex:upAtPoint:detached:");
}

id objc_msgSend_touchBehavior(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchBehavior");
}

id objc_msgSend_touchDeliveryPolicyServer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchDeliveryPolicyServer");
}

id objc_msgSend_touchDidDetach_destinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchDidDetach:destinations:");
}

id objc_msgSend_touchDidFinishProcessingTouchCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchDidFinishProcessingTouchCollection");
}

id objc_msgSend_touchDidHIDCancel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchDidHIDCancel:");
}

id objc_msgSend_touchDidSoftCancel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchDidSoftCancel:");
}

id objc_msgSend_touchDidTransfer_destination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchDidTransfer:destination:");
}

id objc_msgSend_touchIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchIdentifier");
}

id objc_msgSend_touchIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchIdentifiers");
}

id objc_msgSend_touchPadManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchPadManager");
}

id objc_msgSend_touchScales(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchScales");
}

id objc_msgSend_touchSensitiveButtonServicePersistentPropertyController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchSensitiveButtonServicePersistentPropertyController");
}

id objc_msgSend_touchWillStartProcessingTouchCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchWillStartProcessingTouchCollection");
}

id objc_msgSend_touchingPathIndexes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchingPathIndexes");
}

id objc_msgSend_touchingPathIndexesDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchingPathIndexesDidChange");
}

id objc_msgSend_transferTouchIdentifiers_count_toContextID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transferTouchIdentifiers:count:toContextID:");
}

id objc_msgSend_transformFromLayerId_inContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transformFromLayerId:inContextId:");
}

id objc_msgSend_transformLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transformLayer");
}

id objc_msgSend_transformLayerPropertiesForDisplay_displayInterfaceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transformLayerPropertiesForDisplay:displayInterfaceOrientation:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_unacceleratedRelativePointerPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unacceleratedRelativePointerPosition");
}

id objc_msgSend_unblockSystemApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unblockSystemApp");
}

id objc_msgSend_unblockSystemAppForAlternateSystemAppWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unblockSystemAppForAlternateSystemAppWithCompletion:");
}

id objc_msgSend_unentitledBrightnessLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unentitledBrightnessLevel");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueId");
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueIdentifier");
}

id objc_msgSend_uniqueProductIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueProductIdentifier");
}

id objc_msgSend_unknownSenderInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unknownSenderInfo");
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlock");
}

id objc_msgSend_unsetToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsetToken");
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedCharValue");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unsustainOverlayForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsustainOverlayForReason:");
}

id objc_msgSend_unusedAssetSlots(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unusedAssetSlots");
}

id objc_msgSend_updateCharacteristics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCharacteristics:");
}

id objc_msgSend_updateFromDefinition_withChangeInspectorBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFromDefinition:withChangeInspectorBlock:");
}

id objc_msgSend_updatePreferencesIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePreferencesIfNeeded");
}

id objc_msgSend_updateStatistics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStatistics:");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userInfoForConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfoForConnection:");
}

id objc_msgSend_userInitiated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInitiated");
}

id objc_msgSend_usesDisplayPortTethering(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usesDisplayPortTethering");
}

id objc_msgSend_validateMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateMessage:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_versionedPID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "versionedPID");
}

id objc_msgSend_versionedPIDForPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "versionedPIDForPID:");
}

id objc_msgSend_videoTVOutReservedForIPodOut(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "videoTVOutReservedForIPodOut");
}

id objc_msgSend_videoTVOutReservedForRemoteUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "videoTVOutReservedForRemoteUI");
}

id objc_msgSend_virtualDisplayMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "virtualDisplayMode");
}

id objc_msgSend_visualizeMousePointer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visualizeMousePointer");
}

id objc_msgSend_wantsAccelerometerEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wantsAccelerometerEvents");
}

id objc_msgSend_wantsOrientationEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wantsOrientationEvents");
}

id objc_msgSend_watchdogType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "watchdogType");
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakObjectsHashTable");
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whitespaceCharacterSet");
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "width");
}

id objc_msgSend_willUnblank(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willUnblank");
}

id objc_msgSend_windowServerDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowServerDisplay");
}

id objc_msgSend_windowServerDisplayForDisplayIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowServerDisplayForDisplayIdentifier:");
}

id objc_msgSend_windowServerDisplays(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowServerDisplays");
}

id objc_msgSend_withType_andParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "withType:andParameters:");
}

id objc_msgSend_workQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workQueue");
}

id objc_msgSend_xThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xThreshold");
}

id objc_msgSend_yThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "yThreshold");
}

id objc_msgSend_zThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zThreshold");
}
