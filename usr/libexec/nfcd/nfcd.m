void sub_100003594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000035AC(id *a1, void *a2, void *a3)
{
  id v5;
  unsigned __int8 v6;
  id v7;
  BOOL v8;
  void *v9;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  id v23;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v27;
  const char *ClassName;
  const char *Name;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  id v39;
  id v40;
  uint64_t v41;
  void *i;
  id v43;
  id v44;
  void *v46;
  void (*v47)(uint64_t, const char *, ...);
  objc_class *v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  objc_class *v55;
  int v56;
  const char *v57;
  const char *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  void *v63;
  _BOOL4 v64;
  id v65;
  uint64_t v66;
  id v67;
  unsigned int v68;
  void *v69;
  void (*v70)(uint64_t, const char *, ...);
  objc_class *v71;
  uint64_t v72;
  const char *v73;
  const char *v74;
  void *v75;
  uint64_t v76;
  NSObject *v77;
  objc_class *v78;
  int v79;
  const char *v80;
  const char *v81;
  void *v82;
  unsigned int v83;
  unsigned __int8 v84;
  void *v85;
  void (*v86)(uint64_t, const char *, ...);
  objc_class *v87;
  uint64_t v88;
  const char *v89;
  const char *v90;
  void *v91;
  uint64_t v92;
  NSObject *v93;
  objc_class *v94;
  int v95;
  const char *v96;
  const char *v97;
  id v98;
  id v99;
  id v100;
  void *v101;
  _BYTE *v102;
  _BOOL4 v103;
  id v104;
  void *v105;
  void (*v106)(uint64_t, const char *, ...);
  objc_class *v107;
  uint64_t v108;
  const char *v109;
  const char *v110;
  void *v111;
  uint64_t v112;
  NSObject *v113;
  objc_class *v114;
  int v115;
  const char *v116;
  const char *v117;
  id obj;
  id v119;
  void *v120;
  id v121;
  id v122;
  id v123;
  id *v124;
  _QWORD v125[4];
  id v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  char v131;
  _QWORD v132[4];
  id v133;
  id *v134;
  id v135;
  uint64_t *v136;
  const char *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  id *v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t, uint64_t);
  void (*v146)(uint64_t);
  id v147;
  unsigned __int8 v148;
  uint8_t v149[128];
  uint8_t buf[4];
  int v151;
  __int16 v152;
  const char *v153;
  __int16 v154;
  const char *v155;
  __int16 v156;
  int v157;
  __int16 v158;
  id v159;

  v5 = a2;
  v119 = a3;
  v120 = v5;
  v121 = a3;
  v124 = a1;
  if (!a1)
  {
    v37 = 0;
    goto LABEL_29;
  }
  v142 = 0;
  v143 = (id *)&v142;
  v144 = 0x3032000000;
  v145 = sub_1001C8DE0;
  v146 = sub_1001C8DF0;
  v147 = 0;
  v6 = objc_msgSend(v5, "cachedBeforeRFReset");
  if (!sub_100009180(a1))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(a1);
      if (class_isMetaClass(Class))
        v27 = 43;
      else
        v27 = 45;
      ClassName = object_getClassName(a1);
      Name = sel_getName("resumeSessionWaitingOnField:forceStartSession:");
      Logger(6, "%c[%{public}s %{public}s]:%i Ignore field due to first unlock not completed", v27, ClassName, Name, 203);
    }
    v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v31 = NFSharedLogGetLogger(v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33 = object_getClass(a1);
      if (class_isMetaClass(v33))
        v34 = 43;
      else
        v34 = 45;
      v35 = object_getClassName(v124);
      v36 = sel_getName("resumeSessionWaitingOnField:forceStartSession:");
      *(_DWORD *)buf = 67109890;
      v151 = v34;
      v152 = 2082;
      v153 = v35;
      v154 = 2082;
      v155 = v36;
      v156 = 1024;
      v157 = 203;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Ignore field due to first unlock not completed", buf, 0x22u);
    }

    v148 = 0;
    goto LABEL_28;
  }
  obj = a1[23];
  objc_sync_enter(obj);
  v7 = a1[14];
  v8 = v7 == 0;

  if (!v8)
  {
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v9);
    if (v10)
    {
      v11 = object_getClass(a1);
      if (class_isMetaClass(v11))
        v12 = 43;
      else
        v12 = 45;
      v13 = object_getClassName(a1);
      v14 = sel_getName("resumeSessionWaitingOnField:forceStartSession:");
      v15 = a1[14];
      v10(4, "%c[%{public}s %{public}s]:%i Active session running, %{public}@", v12, v13, v14, 211, v15);

    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = object_getClass(a1);
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      v21 = object_getClassName(v124);
      v22 = sel_getName("resumeSessionWaitingOnField:forceStartSession:");
      v23 = v124[14];
      *(_DWORD *)buf = 67110146;
      v151 = v20;
      v152 = 2082;
      v153 = v21;
      v154 = 2082;
      v155 = v22;
      v156 = 1024;
      v157 = 211;
      v158 = 2114;
      v159 = v23;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Active session running, %{public}@", buf, 0x2Cu);

    }
    v122 = 0;
    v123 = 0;
LABEL_15:
    v148 = 0;
    goto LABEL_16;
  }
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v39 = a1[24];
  v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v138, v149, 16);
  if (!v40)
  {
    v122 = 0;
    v123 = 0;
    goto LABEL_75;
  }
  v122 = 0;
  v123 = 0;
  v41 = *(_QWORD *)v139;
  do
  {
    for (i = 0; i != v40; i = (char *)i + 1)
    {
      if (*(_QWORD *)v139 != v41)
        objc_enumerationMutation(v39);
      v43 = *(id *)(*((_QWORD *)&v138 + 1) + 8 * (_QWORD)i);
      v44 = v143[5];
      if (v121)
      {
        if (!v44 && v43 == v121)
        {
          v46 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v47 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v46);
          if (v47)
          {
            v48 = object_getClass(v124);
            if (class_isMetaClass(v48))
              v49 = 43;
            else
              v49 = 45;
            v50 = object_getClassName(v124);
            v51 = sel_getName("resumeSessionWaitingOnField:forceStartSession:");
            v47(5, "%c[%{public}s %{public}s]:%i Force start session found", v49, v50, v51, 218);
          }
          v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v53 = NFSharedLogGetLogger(v52);
          v54 = objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            v55 = object_getClass(v124);
            if (class_isMetaClass(v55))
              v56 = 43;
            else
              v56 = 45;
            v57 = object_getClassName(v124);
            v58 = sel_getName("resumeSessionWaitingOnField:forceStartSession:");
            *(_DWORD *)buf = 67109890;
            v151 = v56;
            v152 = 2082;
            v153 = v57;
            v154 = 2082;
            v155 = v58;
            v156 = 1024;
            v157 = 218;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Force start session found", buf, 0x22u);
          }

          objc_storeStrong(v143 + 5, v119);
          v44 = v143[5];
        }
      }
      if (v44)
        v59 = 1;
      else
        v59 = v6;
      if ((v59 & 1) == 0)
      {
        v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "startOnFieldList"));
        v132[0] = _NSConcreteStackBlock;
        v132[1] = 3221225472;
        v132[2] = sub_1001C8DF8;
        v132[3] = &unk_1002EAA80;
        v133 = v120;
        v134 = v124;
        v135 = v43;
        v136 = &v142;
        v137 = "resumeSessionWaitingOnField:forceStartSession:";
        objc_msgSend(v60, "enumerateObjectsUsingBlock:", v132);

      }
      if (v123)
        v61 = 1;
      else
        v61 = v6;
      if ((v61 & 1) == 0)
      {
        if ((objc_msgSend(v43, "fieldHandlingInSuspension") & 1) != 0
          && (objc_opt_respondsToSelector(v43, "handleFieldNotification:") & 1) != 0)
        {
          v123 = v43;
        }
        else
        {
          v123 = 0;
        }
      }
      if (!v122)
      {
        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "startOnFieldList"));
        if (objc_msgSend(v62, "count"))
        {
          v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "parentToken"));
          v64 = v63 == 0;

          if (v64)
          {
            v122 = v43;
            continue;
          }
        }
        else
        {

        }
        v122 = 0;
      }
    }
    v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v138, v149, 16);
  }
  while (v40);
LABEL_75:

  v65 = v143[5];
  if (!v65)
  {
    if (!v121)
    {
      if (v122)
      {
        v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "lastKnownRoutingConfig"));
        v83 = objc_msgSend(v82, "fdOn");

        if (v83)
        {
          v84 = objc_msgSend(v122, "fieldHandlingInSuspension");
          v128 = 0;
          v129 = &v128;
          v130 = 0x2020000000;
          v131 = 0;
          if ((v84 & 2) != 0)
          {
            v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "startOnFieldList"));
            v125[0] = _NSConcreteStackBlock;
            v125[1] = 3221225472;
            v125[2] = sub_1001C8FFC;
            v125[3] = &unk_1002EAAA8;
            v126 = v120;
            v127 = &v128;
            objc_msgSend(v101, "enumerateObjectsUsingBlock:", v125);

          }
          else
          {
            v131 = 1;
          }
          if ((v6 & 1) == 0)
          {
            if (*((_BYTE *)v129 + 24))
            {
              v102 = v124[3];
              if (!v102 || (v103 = v102[172] == 0, v102, v103))
              {
                v104 = objc_msgSend(v120, "chFieldType");
                if (v104 != (id)3 && v104 != (id)5)
                {
                  v105 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v106 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v105);
                  if (v106)
                  {
                    v107 = object_getClass(v124);
                    if (class_isMetaClass(v107))
                      v108 = 43;
                    else
                      v108 = 45;
                    v109 = object_getClassName(v124);
                    v110 = sel_getName("resumeSessionWaitingOnField:forceStartSession:");
                    v106(6, "%c[%{public}s %{public}s]:%i Restart discovery & field detect", v108, v109, v110, 283);
                  }
                  v111 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v112 = NFSharedLogGetLogger(v111);
                  v113 = objc_claimAutoreleasedReturnValue(v112);
                  if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
                  {
                    v114 = object_getClass(v124);
                    if (class_isMetaClass(v114))
                      v115 = 43;
                    else
                      v115 = 45;
                    v116 = object_getClassName(v124);
                    v117 = sel_getName("resumeSessionWaitingOnField:forceStartSession:");
                    *(_DWORD *)buf = 67109890;
                    v151 = v115;
                    v152 = 2082;
                    v153 = v116;
                    v154 = 2082;
                    v155 = v117;
                    v156 = 1024;
                    v157 = 283;
                    _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Restart discovery & field detect", buf, 0x22u);
                  }

                  objc_msgSend(v124, "restartDiscovery");
                }
              }
            }
          }
          _Block_object_dispose(&v128, 8);
        }
      }
      if (v123)
        objc_msgSend(v123, "handleFieldNotification:", v120);
    }
    goto LABEL_15;
  }
  v66 = objc_opt_class(_NFHCESession);
  if ((objc_opt_isKindOfClass(v65, v66) & 1) != 0)
  {
    v67 = v143[5];
    v68 = objc_msgSend(v67, "disableAutoStartOnField") ^ 1;
    if (v121)
      LOBYTE(v68) = 1;
    if ((v68 & 1) == 0)
    {
      v69 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v70 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v69);
      if (v70)
      {
        v71 = object_getClass(v124);
        if (class_isMetaClass(v71))
          v72 = 43;
        else
          v72 = 45;
        v73 = object_getClassName(v124);
        v74 = sel_getName("resumeSessionWaitingOnField:forceStartSession:");
        v70(5, "%c[%{public}s %{public}s]:%i Session resume disabled", v72, v73, v74, 302);
      }
      v75 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v76 = NFSharedLogGetLogger(v75);
      v77 = objc_claimAutoreleasedReturnValue(v76);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        v78 = object_getClass(v124);
        if (class_isMetaClass(v78))
          v79 = 43;
        else
          v79 = 45;
        v80 = object_getClassName(v124);
        v81 = sel_getName("resumeSessionWaitingOnField:forceStartSession:");
        *(_DWORD *)buf = 67109890;
        v151 = v79;
        v152 = 2082;
        v153 = v80;
        v154 = 2082;
        v155 = v81;
        v156 = 1024;
        v157 = 302;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Session resume disabled", buf, 0x22u);
      }

      if (v120)
        objc_msgSend(v67, "suspensionStateUpdate:triggeredByField:", 0, v120);
      v148 = 0;

      goto LABEL_16;
    }
    if (v120)
      objc_msgSend(v67, "suspensionStateUpdate:triggeredByField:", 1, v120);

  }
  if (objc_msgSend(v143[5], "didStart"))
  {
    v85 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v86 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v85);
    if (v86)
    {
      v87 = object_getClass(v124);
      if (class_isMetaClass(v87))
        v88 = 43;
      else
        v88 = 45;
      v89 = object_getClassName(v124);
      v90 = sel_getName("resumeSessionWaitingOnField:forceStartSession:");
      v86(5, "%c[%{public}s %{public}s]:%i Resume session", v88, v89, v90, 315);
    }
    v91 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v92 = NFSharedLogGetLogger(v91);
    v93 = objc_claimAutoreleasedReturnValue(v92);
    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
    {
      v94 = object_getClass(v124);
      if (class_isMetaClass(v94))
        v95 = 43;
      else
        v95 = 45;
      v96 = object_getClassName(v124);
      v97 = sel_getName("resumeSessionWaitingOnField:forceStartSession:");
      *(_DWORD *)buf = 67109890;
      v151 = v95;
      v152 = 2082;
      v153 = v96;
      v154 = 2082;
      v155 = v97;
      v156 = 1024;
      v157 = 315;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Resume session", buf, 0x22u);
    }

    v98 = v124[51];
    objc_msgSend(v98, "stop");

    v148 = objc_msgSend(v124, "_syncResumeSession:field:", v143[5], v120);
LABEL_16:
    objc_sync_exit(obj);

  }
  else
  {
    v99 = v124[23];
    objc_msgSend(v99, "insertObject:atIndex:", v143[5], 0);

    v100 = v124[24];
    objc_msgSend(v100, "removeObject:", v143[5]);

    objc_sync_exit(obj);
    sub_1000E8458(v124, v120);
    v148 = 1;

  }
LABEL_28:
  _Block_object_dispose(&v142, 8);

  v37 = v148;
LABEL_29:

  return v37;
}

void sub_100004288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  _Block_object_dispose(&a32, 8);
  objc_sync_exit(obj);
  _Block_object_dispose(&a54, 8);
  _Unwind_Resume(a1);
}

void sub_10000432C(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *specific;
  uint64_t Logger;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  objc_class *v22;
  int v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  const char *v37;
  const char *v38;
  void *v39;
  uint64_t v40;
  void (*v41)(uint64_t, const char *, ...);
  objc_class *v42;
  _BOOL4 v43;
  const char *v44;
  const char *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  objc_class *v51;
  int v52;
  const char *v53;
  const char *v54;
  void *v55;
  unint64_t v56;
  NSObject *v57;
  id v58;
  id v59;
  uint64_t v60;
  void *i;
  void *v62;
  void *v63;
  uint64_t v64;
  void (*v65)(uint64_t, const char *, ...);
  objc_class *v66;
  _BOOL4 v67;
  const char *v68;
  const char *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  objc_class *v75;
  int v76;
  const char *v77;
  const char *v78;
  void *v79;
  id v80;
  unsigned int v81;
  void *v82;
  uint64_t v83;
  void (*v84)(uint64_t, const char *, ...);
  objc_class *v85;
  _BOOL4 v86;
  const char *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  objc_class *v91;
  int v92;
  const char *v93;
  const char *v94;
  const char *v95;
  const char *v96;
  const char *v97;
  id v98;
  id v99;
  id v100;
  void *v101;
  id *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint8_t v107[128];
  uint8_t buf[4];
  int v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  int v115;
  __int16 v116;
  id v117;
  __int16 v118;
  uint64_t v119;

  v7 = a2;
  v100 = a3;
  v8 = a4;
  v9 = v7;
  v99 = v8;
  if (a1)
  {
    v10 = sub_100008658(v7);
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v13 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_notifyFieldDetectPresentment:sessionOverridingAppLaunch:walletIntentSessions:");
      v98 = objc_msgSend(v7, "category");
      v18 = 45;
      if (isMetaClass)
        v18 = 43;
      v13(6, "%c[%{public}s %{public}s]:%i CategoryFromField=0x%lx, ResultFieldDetectCategory=0x%lx", v18, ClassName, Name, 316, v98, v10, v99);
    }
    v101 = v7;
    v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v20 = NFSharedLogGetLogger(v19);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = object_getClass(a1);
      if (class_isMetaClass(v22))
        v23 = 43;
      else
        v23 = 45;
      *(_DWORD *)buf = 67110402;
      v109 = v23;
      v110 = 2082;
      v111 = object_getClassName(a1);
      v112 = 2082;
      v113 = sel_getName("_notifyFieldDetectPresentment:sessionOverridingAppLaunch:walletIntentSessions:");
      v114 = 1024;
      v115 = 316;
      v116 = 2048;
      v117 = objc_msgSend(v101, "category");
      v118 = 2048;
      v119 = v10;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i CategoryFromField=0x%lx, ResultFieldDetectCategory=0x%lx", buf, 0x36u);
    }

    v24 = v100;
    if ((v10 & 4) == 0)
    {
      v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v26 = NFLogGetLogger(v25);
      if (v26)
      {
        v27 = (void (*)(uint64_t, const char *, ...))v26;
        v28 = object_getClass(a1);
        v29 = class_isMetaClass(v28);
        v30 = object_getClassName(a1);
        v96 = sel_getName("_notifyFieldDetectPresentment:sessionOverridingAppLaunch:walletIntentSessions:");
        v31 = 45;
        if (v29)
          v31 = 43;
        v27(6, "%c[%{public}s %{public}s]:%i Field not intent for wallet processing", v31, v30, v96, 319);
      }
      v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v33 = NFSharedLogGetLogger(v32);
      v34 = objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        v35 = object_getClass(a1);
        if (class_isMetaClass(v35))
          v36 = 43;
        else
          v36 = 45;
        v37 = object_getClassName(a1);
        v38 = sel_getName("_notifyFieldDetectPresentment:sessionOverridingAppLaunch:walletIntentSessions:");
        *(_DWORD *)buf = 67109890;
        v109 = v36;
        v24 = v100;
        v110 = 2082;
        v111 = v37;
        v112 = 2082;
        v113 = v38;
        v114 = 1024;
        v115 = 319;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Field not intent for wallet processing", buf, 0x22u);
      }

    }
    v9 = v101;
    if (v24)
    {
      if ((objc_msgSend(a1, "_shouldWalletIntentSessionIgnoreField:session:", v101, v24) & 1) == 0)
      {
        v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v40 = NFLogGetLogger(v39);
        if (v40)
        {
          v41 = (void (*)(uint64_t, const char *, ...))v40;
          v42 = object_getClass(a1);
          v43 = class_isMetaClass(v42);
          v44 = object_getClassName(a1);
          v45 = sel_getName("_notifyFieldDetectPresentment:sessionOverridingAppLaunch:walletIntentSessions:");
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "clientName"));
          v47 = 45;
          if (v43)
            v47 = 43;
          v41(6, "%c[%{public}s %{public}s]:%i Notify %{public}@ without app launch trigger", v47, v44, v45, 325, v46);

        }
        v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v49 = NFSharedLogGetLogger(v48);
        v50 = objc_claimAutoreleasedReturnValue(v49);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          v51 = object_getClass(a1);
          if (class_isMetaClass(v51))
            v52 = 43;
          else
            v52 = 45;
          v53 = object_getClassName(a1);
          v54 = sel_getName("_notifyFieldDetectPresentment:sessionOverridingAppLaunch:walletIntentSessions:");
          v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "clientName"));
          *(_DWORD *)buf = 67110146;
          v109 = v52;
          v24 = v100;
          v110 = 2082;
          v111 = v53;
          v112 = 2082;
          v113 = v54;
          v114 = 1024;
          v115 = 325;
          v116 = 2114;
          v117 = v55;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Notify %{public}@ without app launch trigger", buf, 0x2Cu);

        }
        v9 = v101;
        objc_msgSend(v24, "handleFieldNotification:", v101);
      }
      objc_msgSend(a1[15], "walletDomain");
    }
    else
    {
      v56 = (unint64_t)objc_msgSend(a1[15], "walletDomain");
      if ((v56 > 4 || ((1 << v56) & 0x19) == 0) && (v10 & 4) != 0)
      {
        v80 = a1[15];
        v81 = objc_msgSend(v80, "notifyFieldDetectPresentmentWithFieldNotification:", v101);

        v9 = v101;
        if (v81)
        {
          v82 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v83 = NFLogGetLogger(v82);
          if (v83)
          {
            v84 = (void (*)(uint64_t, const char *, ...))v83;
            v85 = object_getClass(a1);
            v86 = class_isMetaClass(v85);
            v87 = object_getClassName(a1);
            v97 = sel_getName("_notifyFieldDetectPresentment:sessionOverridingAppLaunch:walletIntentSessions:");
            v88 = 45;
            if (v86)
              v88 = 43;
            v84(6, "%c[%{public}s %{public}s]:%i App launch in progress; skipping notifications to other sessions",
              v88,
              v87,
              v97,
              336);
          }
          v89 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v90 = NFSharedLogGetLogger(v89);
          v57 = objc_claimAutoreleasedReturnValue(v90);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            v91 = object_getClass(a1);
            if (class_isMetaClass(v91))
              v92 = 43;
            else
              v92 = 45;
            v93 = object_getClassName(a1);
            v94 = sel_getName("_notifyFieldDetectPresentment:sessionOverridingAppLaunch:walletIntentSessions:");
            *(_DWORD *)buf = 67109890;
            v109 = v92;
            v110 = 2082;
            v111 = v93;
            v112 = 2082;
            v113 = v94;
            v114 = 1024;
            v115 = 336;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i App launch in progress; skipping notifications to other sessions",
              buf,
              0x22u);
          }
          v9 = v101;
          goto LABEL_55;
        }
      }
    }
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v57 = v99;
    v58 = -[NSObject countByEnumeratingWithState:objects:count:](v57, "countByEnumeratingWithState:objects:count:", &v103, v107, 16);
    if (v58)
    {
      v59 = v58;
      v60 = *(_QWORD *)v104;
      v102 = a1;
      do
      {
        for (i = 0; i != v59; i = (char *)i + 1)
        {
          if (*(_QWORD *)v104 != v60)
            objc_enumerationMutation(v57);
          v62 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * (_QWORD)i);
          if ((objc_msgSend(a1, "_shouldWalletIntentSessionIgnoreField:session:", v9, v62) & 1) == 0)
          {
            v63 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v64 = NFLogGetLogger(v63);
            if (v64)
            {
              v65 = (void (*)(uint64_t, const char *, ...))v64;
              v66 = object_getClass(a1);
              v67 = class_isMetaClass(v66);
              v68 = object_getClassName(a1);
              v69 = sel_getName("_notifyFieldDetectPresentment:sessionOverridingAppLaunch:walletIntentSessions:");
              v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "clientName"));
              v95 = v68;
              v71 = 45;
              if (v67)
                v71 = 43;
              a1 = v102;
              v65(6, "%c[%{public}s %{public}s]:%i Notify %{public}@", v71, v95, v69, 347, v70);

            }
            v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v73 = NFSharedLogGetLogger(v72);
            v74 = objc_claimAutoreleasedReturnValue(v73);
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
            {
              v75 = object_getClass(a1);
              if (class_isMetaClass(v75))
                v76 = 43;
              else
                v76 = 45;
              v77 = object_getClassName(a1);
              v78 = sel_getName("_notifyFieldDetectPresentment:sessionOverridingAppLaunch:walletIntentSessions:");
              v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "clientName"));
              *(_DWORD *)buf = 67110146;
              v109 = v76;
              v110 = 2082;
              v111 = v77;
              v112 = 2082;
              v113 = v78;
              v114 = 1024;
              v115 = 347;
              v116 = 2114;
              v117 = v79;
              _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Notify %{public}@", buf, 0x2Cu);

              a1 = v102;
            }

            v9 = v101;
            objc_msgSend(v62, "handleFieldNotification:", v101);
          }
        }
        v59 = -[NSObject countByEnumeratingWithState:objects:count:](v57, "countByEnumeratingWithState:objects:count:", &v103, v107, 16);
      }
      while (v59);
    }
LABEL_55:

  }
}

void sub_100004BBC(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  void *v27;
  void (*v28)(uint64_t, const char *, ...);
  objc_class *v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  int v37;
  const char *v38;
  const char *v39;
  const char *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint32_t v43;
  int v44;
  char v45;
  NSMutableSet *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  id v53;
  void *v54;
  void (*v55)(uint64_t, const char *, ...);
  objc_class *v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  void *v60;
  uint64_t v61;
  NSObject *v62;
  objc_class *v63;
  int v64;
  const char *v65;
  const char *v66;
  NSObject *v67;
  void *v68;
  void (*v69)(uint64_t, const char *, ...);
  objc_class *v70;
  uint64_t v71;
  const char *v72;
  const char *v73;
  void *v74;
  uint64_t v75;
  objc_class *v76;
  int v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  _QWORD v81[5];
  id v82;
  NSObject *v83;
  id v84;
  _BYTE *v85;
  uint64_t v86;
  char v87;
  char v88;
  uint8_t v89[8];
  _BYTE v90[10];
  __int16 v91;
  const char *v92;
  __int16 v93;
  int v94;
  _BYTE buf[48];

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 6847, *(_QWORD *)(a1 + 40));
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 48));
    v17 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v14;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = v15;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v16;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = 6847;
    *(_WORD *)&buf[34] = 2114;
    *(_QWORD *)&buf[36] = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }

  v18 = kdebug_trace(724566232, 0, 0, 0, 0);
  v19 = NFSharedSignpostLog(v18);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_signpost_enabled(v20))
  {
    v21 = objc_msgSend(*(id *)(a1 + 40), "notificationType");
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v21;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FIELD_NOTIFICATION", "type %lu", buf, 0xCu);
  }

  v22 = *(_QWORD **)(a1 + 32);
  v23 = v22[46];
  if (v23 && (*(_QWORD *)(v23 + 272) & 0x400) != 0)
  {
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v27);
    if (v28)
    {
      v29 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v29))
        v30 = 43;
      else
        v30 = 45;
      v31 = object_getClassName(*(id *)(a1 + 32));
      v32 = sel_getName(*(SEL *)(a1 + 48));
      v28(4, "%c[%{public}s %{public}s]:%i Ignoring technology event due to ExpressModeDebug setting!", v30, v31, v32, 6853);
    }
    v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v34 = NFSharedLogGetLogger(v33);
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v36))
        v37 = 43;
      else
        v37 = 45;
      v38 = object_getClassName(*(id *)(a1 + 32));
      v39 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v37;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v38;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v39;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 6853;
      v40 = "%c[%{public}s %{public}s]:%i Ignoring technology event due to ExpressModeDebug setting!";
      v41 = v35;
      v42 = OS_LOG_TYPE_ERROR;
      v43 = 34;
      goto LABEL_29;
    }
  }
  else
  {
    sub_1000086F4(v22, *(void **)(a1 + 40));
    sub_10000934C(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
    if (!sub_1001701C8(*(_QWORD *)(a1 + 32)) || objc_msgSend(*(id *)(a1 + 40), "chFieldType") == (id)1)
    {
      v24 = *(_QWORD *)(a1 + 32);
      if (v24 && (v25 = (unint64_t)objc_msgSend(*(id *)(v24 + 120), "walletDomain"), v25 <= 4))
        v26 = (0x19u >> v25) & 1;
      else
        v26 = 0;
      v44 = sub_100170214(*(_QWORD *)(a1 + 32));
      if ((v44 & 1) == 0)
      {
        sub_100008E7C(*(void **)(a1 + 32), *(void **)(a1 + 40));
        sub_100008F34(*(id **)(a1 + 32), *(void **)(a1 + 40));
        if (v26)
          sub_100008E20(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
      }
      v45 = objc_opt_respondsToSelector(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112), "handleFieldNotification:");
      if ((v45 & 1) != 0)
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "handleFieldNotification:", *(_QWORD *)(a1 + 40));
      v46 = objc_opt_new(NSMutableSet);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      *(_QWORD *)&buf[24] = sub_1000E3C80;
      *(_QWORD *)&buf[32] = sub_1000E3C90;
      *(_QWORD *)&buf[40] = 0;
      v47 = *(_QWORD **)(a1 + 32);
      if (v47)
        v47 = (_QWORD *)v47[15];
      v48 = v47;
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "walletBundleIdentifier"));

      v50 = *(_QWORD **)(a1 + 32);
      if (v50)
        v50 = (_QWORD *)v50[2];
      v51 = v50;
      v81[0] = _NSConcreteStackBlock;
      v81[1] = 3221225472;
      v81[2] = sub_100112AA4;
      v81[3] = &unk_1002E8640;
      v87 = v44;
      v52 = *(_QWORD *)(a1 + 48);
      v81[4] = *(_QWORD *)(a1 + 32);
      v86 = v52;
      v53 = v49;
      v82 = v53;
      v85 = buf;
      v35 = v46;
      v83 = v35;
      v88 = v26;
      v84 = *(id *)(a1 + 40);
      objc_msgSend(v51, "enumerateFieldDetectSessionsUsingBlock:", v81);

      if (v44)
      {
        v54 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v55 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v54);
        if (v55)
        {
          v56 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v56))
            v57 = 43;
          else
            v57 = 45;
          v58 = object_getClassName(*(id *)(a1 + 32));
          v59 = sel_getName(*(SEL *)(a1 + 48));
          v55(5, "%c[%{public}s %{public}s]:%i Field detect default app presentment suppression in place", v57, v58, v59, 6938);
        }
        v60 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v61 = NFSharedLogGetLogger(v60);
        v62 = objc_claimAutoreleasedReturnValue(v61);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          v63 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v63))
            v64 = 43;
          else
            v64 = 45;
          v65 = object_getClassName(*(id *)(a1 + 32));
          v66 = sel_getName(*(SEL *)(a1 + 48));
          *(_DWORD *)v89 = 67109890;
          *(_DWORD *)&v89[4] = v64;
          *(_WORD *)v90 = 2082;
          *(_QWORD *)&v90[2] = v65;
          v91 = 2082;
          v92 = v66;
          v93 = 1024;
          v94 = 6938;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Field detect default app presentment suppression in place", v89, 0x22u);
        }

      }
      else if (sub_10000949C(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40)) & 1 | ((v45 & 1) == 0))
      {
        v67 = _os_activity_create((void *)&_mh_execute_header, "resumeSessionWaitingOnField:forceStartSession:", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
        *(_QWORD *)v89 = 0;
        *(_QWORD *)v90 = 0;
        os_activity_scope_enter(v67, (os_activity_scope_state_t)v89);
        os_activity_scope_leave((os_activity_scope_state_t)v89);

        sub_1000035AC(*(id **)(a1 + 32), *(void **)(a1 + 40), 0);
      }
      sub_10000432C(*(id **)(a1 + 32), *(void **)(a1 + 40), *(void **)(*(_QWORD *)&buf[8] + 40), v35);

      _Block_object_dispose(buf, 8);
      goto LABEL_55;
    }
    v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v69 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v68);
    if (v69)
    {
      v70 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v70))
        v71 = 43;
      else
        v71 = 45;
      v72 = object_getClassName(*(id *)(a1 + 32));
      v73 = sel_getName(*(SEL *)(a1 + 48));
      v69(5, "%c[%{public}s %{public}s]:%i Dropping field due to connection handover assertion: %@", v71, v72, v73, 6861, *(_QWORD *)(a1 + 40));
    }
    v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v75 = NFSharedLogGetLogger(v74);
    v35 = objc_claimAutoreleasedReturnValue(v75);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      v76 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v76))
        v77 = 43;
      else
        v77 = 45;
      v78 = object_getClassName(*(id *)(a1 + 32));
      v79 = sel_getName(*(SEL *)(a1 + 48));
      v80 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v77;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v78;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v79;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 6861;
      *(_WORD *)&buf[34] = 2112;
      *(_QWORD *)&buf[36] = v80;
      v40 = "%c[%{public}s %{public}s]:%i Dropping field due to connection handover assertion: %@";
      v41 = v35;
      v42 = OS_LOG_TYPE_DEFAULT;
      v43 = 44;
LABEL_29:
      _os_log_impl((void *)&_mh_execute_header, v41, v42, v40, buf, v43);
    }
  }
LABEL_55:

}

void sub_1000053A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100005518(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100005538(uint64_t a1)
{
  id v2;
  id v3;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 104), "lock");
    if (*(_DWORD *)(a1 + 192) == 2)
      *(_DWORD *)(a1 + 192) = 1;
    if (*(_BYTE *)(a1 + 176))
    {
      *(_QWORD *)(a1 + 144) = mach_absolute_time();
      *(_BYTE *)(a1 + 176) = 0;
      *(_BYTE *)(a1 + 136) = 0;
      objc_msgSend(*(id *)(a1 + 112), "stopTimer");
    }
    objc_msgSend(*(id *)(a1 + 104), "unlock");
    if (!*(_BYTE *)(a1 + 137))
      objc_msgSend(*(id *)(a1 + 264), "driverFieldExited");
    v2 = +[NFPowerAssertion sharedPowerAssertion](NFPowerAssertion, "sharedPowerAssertion", PLLogRegisteredEvent(47, CFSTR("Field"), &off_100306BC8, 0).n128_f64[0]);
    v3 = (id)objc_claimAutoreleasedReturnValue(v2);
    objc_msgSend(v3, "releasePowerAssertion:", CFSTR("FieldDetect"));

  }
}

BOOL sub_1000055F8(void *a1, void *a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *Name;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;

  v3 = a2;
  v4 = v3;
  if (!v3)
  {
LABEL_14:
    v5 = 0;
    goto LABEL_15;
  }
  if (objc_msgSend(v3, "integerValueForField:", 65539) != (id)1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_screenStateFromEvent:");
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v8(4, "%c[%{public}s %{public}s]:%i Ignore unexpected touch event", v12, ClassName, Name, 197);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = object_getClass(a1);
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      *(_DWORD *)buf = 67109890;
      v21 = v17;
      v22 = 2082;
      v23 = object_getClassName(a1);
      v24 = 2082;
      v25 = sel_getName("_screenStateFromEvent:");
      v26 = 1024;
      v27 = 197;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Ignore unexpected touch event", buf, 0x22u);
    }

    goto LABEL_14;
  }
  v5 = *(_BYTE *)objc_msgSend(v4, "dataValueForField:", 65540) != 0;
LABEL_15:

  return v5;
}

void sub_1000057D4(void *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  _BOOL4 v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  objc_class *v28;
  int v29;
  const char *v30;
  const char *v31;
  const char *v32;
  void *v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, ...);
  objc_class *v36;
  _BOOL4 v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  objc_class *v43;
  int v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  void *v50;
  uint64_t v51;
  void (*v52)(uint64_t, const char *, ...);
  objc_class *v53;
  _BOOL4 v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  NSObject *v58;
  objc_class *v59;
  int v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void (*v67)(uint64_t, const char *, ...);
  objc_class *v68;
  _BOOL4 v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  objc_class *v73;
  int v74;
  const char *v75;
  const char *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *Name;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  int out_token;
  uint8_t buf[4];
  int v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  const char *v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;

  if (a1)
  {
    out_token = 0;
    if (notify_register_check("com.apple.request.hipuncap", &out_token))
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v4 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("_postCLTMNotification");
        v8 = 45;
        if (isMetaClass)
          v8 = 43;
        v4(3, "%c[%{public}s %{public}s]:%i Fail to set client ID for CTLM notification, continue to post notification", v8, ClassName, Name, 6324);
      }
      v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v10 = NFSharedLogGetLogger(v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = object_getClass(a1);
        if (class_isMetaClass(v12))
          v13 = 43;
        else
          v13 = 45;
        v14 = object_getClassName(a1);
        v15 = sel_getName("_postCLTMNotification");
        *(_DWORD *)buf = 67109890;
        v87 = v13;
        v88 = 2082;
        v89 = v14;
        v90 = 2082;
        v91 = v15;
        v92 = 1024;
        v93 = 6324;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Fail to set client ID for CTLM notification, continue to post notification", buf, 0x22u);
      }

      v16 = notify_post("com.apple.request.hipuncap");
      v17 = NFSharedSignpostLog();
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_signpost_enabled(v18))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLTM_DEALY_PERFORMANCE_RESTRICTION_NOTIFICATION", "com.apple.request.hipuncap", buf, 2u);
      }

      if ((_DWORD)v16)
      {
        v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v20 = NFLogGetLogger(v19);
        if (v20)
        {
          v21 = (void (*)(uint64_t, const char *, ...))v20;
          v22 = object_getClass(a1);
          v23 = class_isMetaClass(v22);
          v77 = object_getClassName(a1);
          v81 = sel_getName("_postCLTMNotification");
          v24 = 45;
          if (v23)
            v24 = 43;
          v21(3, "%c[%{public}s %{public}s]:%i Failed to notify : %d", v24, v77, v81, 6328, v16);
        }
        v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v26 = NFSharedLogGetLogger(v25);
        v27 = objc_claimAutoreleasedReturnValue(v26);
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          goto LABEL_59;
        v28 = object_getClass(a1);
        if (class_isMetaClass(v28))
          v29 = 43;
        else
          v29 = 45;
        v30 = object_getClassName(a1);
        v31 = sel_getName("_postCLTMNotification");
        *(_DWORD *)buf = 67110146;
        v87 = v29;
        v88 = 2082;
        v89 = v30;
        v90 = 2082;
        v91 = v31;
        v92 = 1024;
        v93 = 6328;
        v94 = 1024;
        v95 = v16;
        v32 = "%c[%{public}s %{public}s]:%i Failed to notify : %d";
LABEL_58:
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, v32, buf, 0x28u);
LABEL_59:

      }
    }
    else
    {
      if (notify_set_state(out_token, 1uLL))
      {
        v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v34 = NFLogGetLogger(v33);
        if (v34)
        {
          v35 = (void (*)(uint64_t, const char *, ...))v34;
          v36 = object_getClass(a1);
          v37 = class_isMetaClass(v36);
          v38 = object_getClassName(a1);
          v82 = sel_getName("_postCLTMNotification");
          v39 = 45;
          if (v37)
            v39 = 43;
          v35(3, "%c[%{public}s %{public}s]:%i Fail to set client ID for CTLM notification", v39, v38, v82, 6310);
        }
        v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v41 = NFSharedLogGetLogger(v40);
        v42 = objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          v43 = object_getClass(a1);
          if (class_isMetaClass(v43))
            v44 = 43;
          else
            v44 = 45;
          v45 = object_getClassName(a1);
          v46 = sel_getName("_postCLTMNotification");
          *(_DWORD *)buf = 67109890;
          v87 = v44;
          v88 = 2082;
          v89 = v45;
          v90 = 2082;
          v91 = v46;
          v92 = 1024;
          v93 = 6310;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Fail to set client ID for CTLM notification", buf, 0x22u);
        }

      }
      v47 = notify_post("com.apple.request.hipuncap");
      v48 = NFSharedSignpostLog();
      v49 = objc_claimAutoreleasedReturnValue(v48);
      if (os_signpost_enabled(v49))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v49, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLTM_DEALY_PERFORMANCE_RESTRICTION_NOTIFICATION", "com.apple.request.hipuncap", buf, 2u);
      }

      if ((_DWORD)v47)
      {
        v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v51 = NFLogGetLogger(v50);
        if (v51)
        {
          v52 = (void (*)(uint64_t, const char *, ...))v51;
          v53 = object_getClass(a1);
          v54 = class_isMetaClass(v53);
          v78 = object_getClassName(a1);
          v83 = sel_getName("_postCLTMNotification");
          v55 = 45;
          if (v54)
            v55 = 43;
          v52(3, "%c[%{public}s %{public}s]:%i Failed to notify : %d", v55, v78, v83, 6316, v47);
        }
        v56 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v57 = NFSharedLogGetLogger(v56);
        v58 = objc_claimAutoreleasedReturnValue(v57);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          v59 = object_getClass(a1);
          if (class_isMetaClass(v59))
            v60 = 43;
          else
            v60 = 45;
          v61 = object_getClassName(a1);
          v62 = sel_getName("_postCLTMNotification");
          *(_DWORD *)buf = 67110146;
          v87 = v60;
          v88 = 2082;
          v89 = v61;
          v90 = 2082;
          v91 = v62;
          v92 = 1024;
          v93 = 6316;
          v94 = 1024;
          v95 = v47;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to notify : %d", buf, 0x28u);
        }

      }
      v63 = notify_cancel(out_token);
      if ((_DWORD)v63)
      {
        v64 = v63;
        v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v66 = NFLogGetLogger(v65);
        if (v66)
        {
          v67 = (void (*)(uint64_t, const char *, ...))v66;
          v68 = object_getClass(a1);
          v69 = class_isMetaClass(v68);
          v79 = object_getClassName(a1);
          v84 = sel_getName("_postCLTMNotification");
          v70 = 45;
          if (v69)
            v70 = 43;
          v67(3, "%c[%{public}s %{public}s]:%i Failed to cancel notify : %d", v70, v79, v84, 6321, v64);
        }
        v71 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v72 = NFSharedLogGetLogger(v71);
        v27 = objc_claimAutoreleasedReturnValue(v72);
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          goto LABEL_59;
        v73 = object_getClass(a1);
        if (class_isMetaClass(v73))
          v74 = 43;
        else
          v74 = 45;
        v75 = object_getClassName(a1);
        v76 = sel_getName("_postCLTMNotification");
        *(_DWORD *)buf = 67110146;
        v87 = v74;
        v88 = 2082;
        v89 = v75;
        v90 = 2082;
        v91 = v76;
        v92 = 1024;
        v93 = 6321;
        v94 = 1024;
        v95 = v64;
        v32 = "%c[%{public}s %{public}s]:%i Failed to cancel notify : %d";
        goto LABEL_58;
      }
    }
  }
}

id sub_100005ED0(void *a1)
{
  id v1;
  uint64_t v2;
  id VendorDefinedEvent;
  void *v4;

  v1 = a1;
  v2 = mach_absolute_time();
  VendorDefinedEvent = (id)IOHIDEventCreateVendorDefinedEvent(kCFAllocatorDefault, v2, 65376, 9, 1, 0, 0, 0);
  if (VendorDefinedEvent)
  {
    v4 = (void *)IOHIDServiceClientCopyEvent(v1, 1, VendorDefinedEvent, 0);
    CFRelease(VendorDefinedEvent);
    if (v4)
    {
      if (sub_100006F14(v4))
        VendorDefinedEvent = v4;
      else
        VendorDefinedEvent = 0;

    }
    else
    {
      VendorDefinedEvent = 0;
    }
  }

  return VendorDefinedEvent;
}

id sub_100005F88(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "driverDidDetectFieldChange:", a2);
}

void sub_100005F90(uint64_t a1, int a2)
{
  const char *v4;
  NSObject *v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t ElapsedTimeInMillisecondsFromMachTime;
  void *v24;
  id v25;
  const char *Name;
  _BYTE state[18];
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;

  if (a2)
    v4 = "NFCC field on";
  else
    v4 = "NFCC field off";
  v5 = _os_activity_create((void *)&_mh_execute_header, v4, (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v5, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  if (a1)
  {
    if (*(_BYTE *)(a1 + 137))
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v8 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("driverDidDetectFieldChange:");
        v12 = 45;
        if (isMetaClass)
          v12 = 43;
        v8(3, "%c[%{public}s %{public}s]:%i Driver session is closed", v12, ClassName, Name, 661);
      }
      v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v14 = NFSharedLogGetLogger(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = object_getClass((id)a1);
        if (class_isMetaClass(v16))
          v17 = 43;
        else
          v17 = 45;
        v18 = object_getClassName((id)a1);
        v19 = sel_getName("driverDidDetectFieldChange:");
        *(_DWORD *)state = 67109890;
        *(_DWORD *)&state[4] = v17;
        *(_WORD *)&state[8] = 2082;
        *(_QWORD *)&state[10] = v18;
        v28 = 2082;
        v29 = v19;
        v30 = 1024;
        v31 = 661;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Driver session is closed", state, 0x22u);
      }

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 104), "lock");
      v20 = *(void **)(a1 + 120);
      if (!a2)
      {
        objc_msgSend(v20, "startTimer:", 0.5);
        objc_msgSend(*(id *)(a1 + 104), "unlock");
        objc_msgSend(*(id *)(a1 + 248), "handleFieldReset");
        return;
      }
      objc_msgSend(v20, "stopTimer");
      if (*(_DWORD *)(a1 + 192) == 1)
        *(_DWORD *)(a1 + 192) = 2;
      if (*(_BYTE *)(a1 + 176))
      {
        objc_msgSend(*(id *)(a1 + 104), "unlock");
        return;
      }
      *(_BYTE *)(a1 + 176) = 1;
      *(_QWORD *)(a1 + 152) = mach_absolute_time();
      PLLogRegisteredEvent(47, CFSTR("Field"), &off_100306BA0, 0);
      objc_msgSend(*(id *)(a1 + 112), "startTimer:leeway:", 60.0, 0.5);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NFPowerAssertion sharedPowerAssertion](NFPowerAssertion, "sharedPowerAssertion"));
      objc_msgSend(v21, "holdPowerAssertion:", CFSTR("FieldDetect"));

      v22 = mach_absolute_time();
      ElapsedTimeInMillisecondsFromMachTime = GetElapsedTimeInMillisecondsFromMachTime(v22, *(_QWORD *)(a1 + 144));
      v24 = *(void **)(a1 + 160);
      if (v24)
      {
        if (*(_QWORD *)(a1 + 144) && ElapsedTimeInMillisecondsFromMachTime <= 0x3E8)
        {
          if (!*(_BYTE *)(a1 + 136))
          {
            *(_BYTE *)(a1 + 136) = 1;
            *(_QWORD *)(a1 + 144) = 0;
            objc_msgSend(*(id *)(a1 + 104), "unlock");
            objc_msgSend(*(id *)(a1 + 264), "driverFieldEntered");
            v25 = objc_msgSend(*(id *)(a1 + 160), "copy");
            objc_msgSend(v25, "setCachedBeforeRFReset:", 1);
            objc_msgSend(*(id *)(a1 + 248), "handleFieldNotification:", v25);

            return;
          }
        }
        else
        {
          *(_BYTE *)(a1 + 136) = 0;
          *(_QWORD *)(a1 + 160) = 0;

        }
      }
      *(_QWORD *)(a1 + 144) = 0;
      objc_msgSend(*(id *)(a1 + 104), "unlock");
      objc_msgSend(*(id *)(a1 + 264), "driverFieldEntered");
    }
  }
}

void sub_1000062BC(uint64_t a1, double a2)
{
  NSObject *v4;
  os_activity_scope_state_s v5;

  v4 = _os_activity_create((void *)&_mh_execute_header, "NFCC temperature ntf", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v5.opaque[0] = 0;
  v5.opaque[1] = 0;
  os_activity_scope_enter(v4, &v5);
  os_activity_scope_leave(&v5);

  if (a1)
    objc_msgSend(*(id *)(a1 + 248), "handleTemperatureChange:", a2);
}

void sub_100006394(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[8];
  _QWORD v17[8];

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
    v3 = objc_msgSend(v2, "getDurationFrom:", *(_QWORD *)(a1 + 8));

    v16[0] = CFSTR("duration");
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v3));
    v17[0] = v4;
    v16[1] = CFSTR("technology");
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 16)));
    v17[1] = v5;
    v16[2] = CFSTR("ECPInformation");
    v6 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 20)));
    v7 = (void *)v6;
    v8 = *(const __CFString **)(a1 + 24);
    if (!v8)
      v8 = &stru_1002ED8A8;
    v17[2] = v6;
    v17[3] = v8;
    v16[3] = CFSTR("ECPPayload");
    v16[4] = CFSTR("ECPType");
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 32)));
    v17[4] = v9;
    v16[5] = CFSTR("terminalSubType");
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 36)));
    v17[5] = v10;
    v16[6] = CFSTR("terminalType");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40)));
    v17[6] = v11;
    v16[7] = CFSTR("terminalMode");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 44)));
    v17[7] = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 8));

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
    objc_msgSend(v14, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.fieldTechnology"), v13);

    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 20) = 0;
    v15 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;

    *(_OWORD *)(a1 + 32) = xmmword_10026AA00;
  }
}

void sub_1000065D8(void *a1, io_registry_entry_t a2, int a3)
{
  NSObject *v6;
  CFBooleanRef CFProperty;
  CFTypeID TypeID;
  CFTypeID v9;
  uint64_t v11;
  CFBooleanRef v12;
  CFTypeID v13;
  _BOOL4 v15;
  CFBooleanRef v16;
  CFTypeID v17;
  CFTypeID v18;
  int v20;
  CFBooleanRef v21;
  CFTypeID v22;
  CFTypeID v23;
  int v25;
  NSObject *v26;
  int isa;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v31;
  const char *ClassName;
  const char *Name;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *v39;
  const char *v40;
  int v41;
  void *v42;
  void (*v43)(uint64_t, const char *, ...);
  objc_class *v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  objc_class *v51;
  int v52;
  const char *v53;
  const char *v54;
  _BYTE state[18];
  __int16 v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;

  v6 = _os_activity_create((void *)&_mh_execute_header, "Camera state updated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v6, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  if (a3 == -536870608)
  {
    CFProperty = (CFBooleanRef)IORegistryEntryCreateCFProperty(a2, CFSTR("FrontCameraActive"), kCFAllocatorDefault, 0);
    if (CFProperty)
    {
      TypeID = CFBooleanGetTypeID();
      v9 = CFGetTypeID(CFProperty);
      if (CFProperty == kCFBooleanTrue && TypeID == v9)
        v11 = 2;
      else
        v11 = 0;
      CFRelease(CFProperty);
    }
    else
    {
      v11 = 0;
    }
    v12 = (CFBooleanRef)IORegistryEntryCreateCFProperty(a2, CFSTR("BackCameraActive"), kCFAllocatorDefault, 0);
    if (v12)
    {
      v13 = CFBooleanGetTypeID();
      v15 = v13 == CFGetTypeID(v12) && v12 == kCFBooleanTrue;
      CFRelease(v12);
      v11 = v11 | v15;
    }
    v16 = (CFBooleanRef)IORegistryEntryCreateCFProperty(a2, CFSTR("BackTeleCameraActive"), kCFAllocatorDefault, 0);
    if (v16)
    {
      v17 = CFBooleanGetTypeID();
      v18 = CFGetTypeID(v16);
      if (v16 == kCFBooleanTrue && v17 == v18)
        v20 = 4;
      else
        v20 = 0;
      CFRelease(v16);
      v11 = v20 | v11;
    }
    v21 = (CFBooleanRef)IORegistryEntryCreateCFProperty(a2, CFSTR("BackSuperWideCameraActive"), kCFAllocatorDefault, 0);
    if (v21)
    {
      v22 = CFBooleanGetTypeID();
      v23 = CFGetTypeID(v21);
      if (v21 == kCFBooleanTrue && v22 == v23)
        v25 = 8;
      else
        v25 = 0;
      CFRelease(v21);
      v11 = v25 | v11;
    }
    if (a1)
    {
      v26 = a1;
      objc_sync_enter(v26);
      isa = (int)v26[7].isa;
      if (isa == (_DWORD)v11 || BYTE4(v26[7].isa))
      {
        objc_sync_exit(v26);
      }
      else
      {
        LODWORD(v26[7].isa) = v11;
        -[objc_class startTimer:](v26[1].isa, "startTimer:", 0.100000001);
        if (LODWORD(v26[8].isa) == -1)
        {
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
          if (Logger)
          {
            Class = object_getClass(v26);
            if (class_isMetaClass(Class))
              v31 = 43;
            else
              v31 = 45;
            ClassName = object_getClassName(v26);
            Name = sel_getName("_updateCameraStateValue:");
            Logger(6, "%c[%{public}s %{public}s]:%i Initial state before debounce=%d", v31, ClassName, Name, 284, isa);
          }
          v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v35 = NFSharedLogGetLogger(v34);
          v36 = objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            v37 = object_getClass(v26);
            if (class_isMetaClass(v37))
              v38 = 43;
            else
              v38 = 45;
            v39 = object_getClassName(v26);
            v40 = sel_getName("_updateCameraStateValue:");
            v41 = isa;
            *(_DWORD *)state = 67110146;
            *(_DWORD *)&state[4] = v38;
            *(_WORD *)&state[8] = 2082;
            *(_QWORD *)&state[10] = v39;
            v56 = 2082;
            v57 = v40;
            v58 = 1024;
            v59 = 284;
            v60 = 1024;
            v61 = isa;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Initial state before debounce=%d", state, 0x28u);
          }
          else
          {
            v41 = isa;
          }

          LODWORD(v26[8].isa) = v41;
        }
        objc_sync_exit(v26);

        v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v43 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v42);
        if (v43)
        {
          v44 = object_getClass(v26);
          if (class_isMetaClass(v44))
            v45 = 43;
          else
            v45 = 45;
          v46 = object_getClassName(v26);
          v47 = sel_getName("_updateCameraStateValue:");
          v43(6, "%c[%{public}s %{public}s]:%i current=%d, new=%d", v45, v46, v47, 291, isa, v11);
        }
        v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v49 = NFSharedLogGetLogger(v48);
        v50 = objc_claimAutoreleasedReturnValue(v49);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          v51 = object_getClass(v26);
          if (class_isMetaClass(v51))
            v52 = 43;
          else
            v52 = 45;
          v53 = object_getClassName(v26);
          v54 = sel_getName("_updateCameraStateValue:");
          *(_DWORD *)state = 67110402;
          *(_DWORD *)&state[4] = v52;
          *(_WORD *)&state[8] = 2082;
          *(_QWORD *)&state[10] = v53;
          v56 = 2082;
          v57 = v54;
          v58 = 1024;
          v59 = 291;
          v60 = 1024;
          v61 = isa;
          v62 = 1024;
          v63 = v11;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i current=%d, new=%d", state, 0x2Eu);
        }
        v26 = v50;
      }

    }
  }
}

void sub_100006AB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100006ADC(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *Name;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i Touch service stopped", v8, ClassName, Name, 94);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67109890;
    v19 = v13;
    v20 = 2082;
    v21 = v14;
    v22 = 2082;
    v23 = v15;
    v24 = 1024;
    v25 = 94;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Touch service stopped", buf, 0x22u);
  }

  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
    *(_BYTE *)(v16 + 8) = 0;
}

void sub_100006E40(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id *WeakRetained;
  _BOOL8 v6;
  const char *v7;
  NSObject *v8;
  id v9;
  os_activity_scope_state_s v10;

  v4 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && sub_100006F14(v4))
  {
    v6 = sub_1000055F8(WeakRetained, v4);
    if (v6)
      v7 = "touch sensor is ready";
    else
      v7 = "touch sensor is not ready";
    v8 = _os_activity_create((void *)&_mh_execute_header, v7, (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    v10.opaque[0] = 0;
    v10.opaque[1] = 0;
    os_activity_scope_enter(v8, &v10);
    os_activity_scope_leave(&v10);

    v9 = objc_loadWeakRetained(WeakRetained + 2);
    objc_msgSend(v9, "touchSystemReady:", v6);

  }
}

BOOL sub_100006F14(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;

  v1 = a1;
  v2 = v1;
  v3 = v1
    && objc_msgSend(v1, "type") == 1
    && objc_msgSend(v2, "integerValueForField:", 0x10000) == (id)65376
    && objc_msgSend(v2, "integerValueForField:", 65537) == (id)9;

  return v3;
}

void sub_100006F84(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  _QWORD *WeakRetained;
  void *v12;
  NSObject *v13;
  _QWORD v14[4];
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  os_activity_scope_state_s state;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = _os_activity_create((void *)&_mh_execute_header, "NFScreenStateMonitor blanked screen state update", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v10, &state);
  os_activity_scope_leave(&state);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v12 = WeakRetained;
  if (WeakRetained)
  {
    v13 = WeakRetained[1];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100007F68;
    v14[3] = &unk_1002EAED8;
    v15 = WeakRetained;
    v16 = v7;
    v17 = v8;
    v18 = v9;
    dispatch_async(v13, v14);

  }
}

void sub_100007548(void *a1, char *name)
{
  uint64_t v4;
  uint64_t v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  void *v18;
  void *v19;
  id v20;
  const char *v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;

  if (a1)
  {
    v4 = notify_post(name);
    if ((_DWORD)v4)
    {
      v5 = v4;
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v8 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        v21 = sel_getName("_postEvent:");
        v12 = 45;
        if (isMetaClass)
          v12 = 43;
        v8(3, "%c[%{public}s %{public}s]:%i Failed to notify %s: %d", v12, ClassName, v21, 2673, name, v5);
      }
      v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v14 = NFSharedLogGetLogger(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = object_getClass(a1);
        if (class_isMetaClass(v16))
          v17 = 43;
        else
          v17 = 45;
        *(_DWORD *)buf = 67110402;
        v23 = v17;
        v24 = 2082;
        v25 = object_getClassName(a1);
        v26 = 2082;
        v27 = sel_getName("_postEvent:");
        v28 = 1024;
        v29 = 2673;
        v30 = 2080;
        v31 = name;
        v32 = 1024;
        v33 = v5;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to notify %s: %d", buf, 0x32u);
      }

    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NFSecureXPCEventPublisherManager sharedManager](NFSecureXPCEventPublisherManager, "sharedManager"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "wallet"));
    v20 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", name);
    objc_msgSend(v19, "sendSimpleEvent:", v20);

  }
}

id sub_1000078A4()
{
  objc_opt_self();
  if (qword_10032AC18 != -1)
    dispatch_once(&qword_10032AC18, &stru_1002EB758);
  return (id)qword_10032AC10;
}

void sub_1000078E8(uint64_t a1)
{
  id *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  sub_100007A64(*(void **)(*(_QWORD *)(a1 + 32) + 368), *(double *)(a1 + 40));
  v2 = sub_100007A04(*(id **)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allValues", 0));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8), "temperatureChanged:", *(double *)(a1 + 40));
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

id *sub_100007A04(id *a1)
{
  id *v1;
  id v2;

  v1 = a1;
  if (a1)
  {
    v2 = a1[20];
    objc_sync_enter(v2);
    v1 = (id *)objc_msgSend(v1[20], "copy");
    objc_sync_exit(v2);

  }
  return v1;
}

void sub_100007A50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100007A64(void *a1, double a2)
{
  float v3;
  uint64_t v4;
  float v5;
  id v6;
  uint64_t *obj;

  if (a1)
  {
    obj = a1;
    objc_sync_enter(obj);
    if (!*((_BYTE *)obj + 137))
    {
      v4 = obj[10];
      if (v4)
      {
        v5 = a2;
        v6 = sub_100007AFC(v4, v5, v3);
      }
    }
    objc_sync_exit(obj);

  }
}

void sub_100007AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_100007AFC(uint64_t a1, float a2, float a3)
{
  unsigned __int8 v4;
  mach_port_t v5;
  uint64_t v6;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  void (*v14)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  objc_class *v22;
  int v23;
  const char *v24;
  const char *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  const char *Name;
  size_t outputStructCnt;
  char v36[8];
  _QWORD v37[4];
  _QWORD v38[4];
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  _OWORD outputStruct[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int inputStruct;
  __int128 v54;
  _BYTE v55[28];
  __int16 v56;
  __int16 v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  int v62;

  if (!a1)
    return 0;
  v4 = byte_10032AB58++;
  LOBYTE(a3) = *(_BYTE *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8);
  outputStructCnt = 80;
  memset(v55, 0, sizeof(v55));
  v54 = 0u;
  memset(outputStruct, 0, sizeof(outputStruct));
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  strcpy(v36, "zENc");
  v55[22] = 6;
  inputStruct = 2051362403;
  *(_DWORD *)&v55[8] = 32;
  v56 = 258;
  v57 = v4;
  v58 = a2;
  v59 = (float)LODWORD(a3);
  v61 = 0;
  v60 = 0;
  v62 = 0;
  v6 = IOConnectCallStructMethod(v5, 2u, &inputStruct, 0x50uLL, outputStruct, &outputStructCnt);
  if (!(_DWORD)v6 && !BYTE8(v50))
    return 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
  if (Logger)
    Logger(3, "%s:%i Write failed for key '%s' (0x%X, 0x%X)\n", "_writeSMCKey", 94, v36, v6, BYTE8(v50));
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136447234;
    v40 = "_writeSMCKey";
    v41 = 1024;
    v42 = 94;
    v43 = 2080;
    v44 = v36;
    v45 = 1024;
    v46 = v6;
    v47 = 1024;
    v48 = BYTE8(v50);
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i Write failed for key '%s' (0x%X, 0x%X)\n", buf, 0x28u);
  }

  if (!(_DWORD)v6)
    return 0;
  v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v13 = NFLogGetLogger(v12);
  if (v13)
  {
    v14 = (void (*)(uint64_t, const char *, ...))v13;
    Class = object_getClass((id)a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName((id)a1);
    Name = sel_getName("updateTemperature:");
    v18 = 45;
    if (isMetaClass)
      v18 = 43;
    v14(3, "%c[%{public}s %{public}s]:%i Error writing temperature : 0x%x", v18, ClassName, Name, 173, v6);
  }
  v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v20 = NFSharedLogGetLogger(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    v22 = object_getClass((id)a1);
    if (class_isMetaClass(v22))
      v23 = 43;
    else
      v23 = 45;
    v24 = object_getClassName((id)a1);
    v25 = sel_getName("updateTemperature:");
    inputStruct = 67110146;
    LODWORD(v54) = v23;
    WORD2(v54) = 2082;
    *(_QWORD *)((char *)&v54 + 6) = v24;
    HIWORD(v54) = 2082;
    *(_QWORD *)v55 = v25;
    *(_WORD *)&v55[8] = 1024;
    *(_DWORD *)&v55[10] = 173;
    *(_WORD *)&v55[14] = 1024;
    *(_DWORD *)&v55[16] = v6;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error writing temperature : 0x%x", (uint8_t *)&inputStruct, 0x28u);
  }

  v26 = objc_alloc((Class)NSError);
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v37[0] = NSLocalizedDescriptionKey;
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
  v38[0] = v28;
  v38[1] = &off_100302BD0;
  v37[1] = CFSTR("Line");
  v37[2] = CFSTR("Method");
  v29 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("updateTemperature:"));
  v38[2] = v29;
  v37[3] = NSDebugDescriptionErrorKey;
  v30 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("updateTemperature:"), 174);
  v38[3] = v30;
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v38, v37, 4));
  v32 = objc_msgSend(v26, "initWithDomain:code:userInfo:", v27, 13, v31);

  return v32;
}

void sub_100007F68(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *specific;
  uint64_t Logger;
  void (*v14)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  objc_class *v24;
  int v25;
  const char *v26;
  const char *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  void *i;
  id v34;
  uint64_t (*v35)(id);
  unint64_t v36;
  id *v37;
  id *v38;
  id WeakRetained;
  char v40;
  void *v41;
  void *v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE buf[28];
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  void *v54;

  v1 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 48);
  v3 = *(void **)(a1 + 56);
  v4 = *(id *)(a1 + 40);
  v5 = v2;
  v6 = v3;
  if (!v1)
    goto LABEL_44;
  if (!v5)
  {
    MKBGetDeviceLockState(0);
    goto LABEL_36;
  }
  v7 = (uint64_t)objc_msgSend(v5, "displayBacklightLevel");
  v8 = MKBGetDeviceLockState(0);
  if (v7 < 1)
  {
LABEL_36:
    v9 = 0;
    goto LABEL_39;
  }
  v9 = 1;
  if (!v6)
    goto LABEL_39;
  v10 = v8;
  if (!(_DWORD)v8)
    goto LABEL_39;
  if (!qword_10032ABC0)
  {
    *(_OWORD *)buf = off_1002EAF38;
    *(_QWORD *)&buf[16] = 0;
    qword_10032ABC0 = _sl_dlopen(buf, 0);
  }
  if (!qword_10032ABC0)
    goto LABEL_38;
  v11 = sub_1000083E0();
  if (!v11)
    goto LABEL_38;
  if (NFIsInternalBuild(v11))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v14 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v1);
      Name = sel_getName("_frontBoardServiceMonitorHandler:layout:transitionContext:");
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "transitionReasons"));
      v20 = 45;
      if (isMetaClass)
        v20 = 43;
      v14(6, "%c[%{public}s %{public}s]:%i devLockState=%d, transitionReasons: %@", v20, ClassName, Name, 206, v10, v19);

    }
    v21 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v22 = NFSharedLogGetLogger(v21);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = object_getClass(v1);
      if (class_isMetaClass(v24))
        v25 = 43;
      else
        v25 = 45;
      v26 = object_getClassName(v1);
      v27 = sel_getName("_frontBoardServiceMonitorHandler:layout:transitionContext:");
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "transitionReasons"));
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v25;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v26;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v27;
      v49 = 1024;
      v50 = 206;
      v51 = 1024;
      v52 = v10;
      v53 = 2112;
      v54 = v28;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i devLockState=%d, transitionReasons: %@", buf, 0x32u);

    }
  }
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "transitionReasons"));
  v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v44, buf, 16);
  if (!v30)
  {
LABEL_37:

    goto LABEL_38;
  }
  v31 = v30;
  v32 = *(_QWORD *)v45;
  v43 = 1;
  do
  {
    for (i = 0; i != v31; i = (char *)i + 1)
    {
      if (*(_QWORD *)v45 != v32)
        objc_enumerationMutation(v29);
      v34 = *(id *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
      v35 = (uint64_t (*)(id))sub_1000083E0();
      if (!v35)
      {
        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
        v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SBSBacklightChangeSource NFLayoutTransitionReason(NSString *__strong)"));
        objc_msgSend(v41, "handleFailureInFunction:file:lineNumber:description:", v42, CFSTR("NFScreenStateMonitor.m"), 27, CFSTR("%s"), dlerror());

        __break(1u);
      }
      v36 = v35(v34);

      if (v36 <= 0x25)
      {
        if (!v36)
          continue;
        if (((1 << v36) & 0x26601122FCLL) != 0)
          goto LABEL_37;
      }
      v43 = 0;
    }
    v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v44, buf, 16);
  }
  while (v31);

  if ((v43 & 1) == 0)
  {
    v9 = 2;
    goto LABEL_39;
  }
LABEL_38:
  v9 = 1;
LABEL_39:
  v37 = v1;
  objc_sync_enter(v37);
  if ((id)v9 == v37[5])
  {
    objc_sync_exit(v37);
    goto LABEL_43;
  }
  v37[5] = (id)v9;
  objc_sync_exit(v37);

  v38 = v37 + 2;
  WeakRetained = objc_loadWeakRetained(v38);
  v40 = objc_opt_respondsToSelector(WeakRetained, "didScreenStateChange:");

  if ((v40 & 1) != 0)
  {
    v37 = (id *)objc_loadWeakRetained(v38);
    objc_msgSend(v37, "didScreenStateChange:", v9);
LABEL_43:

  }
LABEL_44:

}

uint64_t sub_1000083E0()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = qword_10032ABC8;
  v6 = qword_10032ABC8;
  if (!qword_10032ABC8)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1001ECBA8;
    v2[3] = &unk_1002E5E30;
    v2[4] = &v3;
    sub_1001ECBA8(v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100008478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100008490(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  else
    WeakRetained = 0;
  v4 = WeakRetained;
  objc_msgSend(WeakRetained, "touchSystemReady:", *(unsigned __int8 *)(a1 + 40));

}

void sub_1000084DC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[7];
  v3 = v2;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "defaultAppIdentifier"));
  v4 = objc_msgSend(v7, "copy");
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

uint64_t sub_100008540(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  return result;
}

void sub_100008554(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  int v5;
  char v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 32))
      v3 = *(_BYTE *)(v2 + 152) != 0;
    else
      v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(*(id *)(v2 + 48), "stopTimer");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (v4 && *(_QWORD *)(v4 + 32))
  {
    *(_BYTE *)(v4 + 152) = v5;
    v5 = *(unsigned __int8 *)(a1 + 40);
  }
  if (v5)
    v6 = v3;
  else
    v6 = 1;
  if ((v6 & 1) == 0)
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    objc_msgSend(v7, "maybeStartNextSession");

  }
}

id sub_100008600(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "handleFieldChanged:", 1);
}

uint64_t sub_100008610(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112), "handleFieldReset");
  if ((result & 1) != 0)
    return (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "handleFieldReset");
  return result;
}

uint64_t sub_100008658(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  id v4;

  v1 = a1;
  v2 = (unint64_t)objc_msgSend(v1, "category");
  if (v2 > 8)
    v3 = 0;
  else
    v3 = qword_100269930[v2];
  if (objc_msgSend(v1, "notificationType") == (id)3)
  {
    v4 = v1;
    if (objc_msgSend(v4, "terminalType") == (id)2
      && (objc_msgSend(v4, "terminalSubType") == 9
       || objc_msgSend(v4, "terminalSubType") == 11))
    {
      v3 |= 8uLL;
    }

  }
  return v3;
}

uint64_t sub_1000086F4(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v8;
  os_unfair_lock_s *v9;
  id v10;
  void *v11;
  id v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  void *specific;
  uint64_t Logger;
  void (*v17)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  void (*v33)(uint64_t, const char *, ...);
  objc_class *v34;
  _BOOL4 v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  objc_class *v41;
  int v42;
  const char *v43;
  const char *v44;
  int v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  void (*v50)(uint64_t, const char *, ...);
  objc_class *v51;
  _BOOL4 v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  objc_class *v57;
  int v58;
  const char *v59;
  const char *v60;
  int v61;
  void *v62;
  void *v63;
  const char *v64;
  const char *Name;
  const char *v66;
  const char *v67;
  id v68;
  id v69;
  id v70;
  uint8_t buf[4];
  int v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  void *v82;

  v3 = a2;
  v4 = v3;
  if (!a1 || objc_msgSend(v3, "notificationType") != (id)3)
  {
    v6 = 0;
    goto LABEL_8;
  }
  v5 = v4;
  if (objc_msgSend(v5, "terminalType") == (id)5 && !objc_msgSend(v5, "terminalSubType"))
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));

    if (!v6)
      goto LABEL_6;
    v8 = sub_100172E84((uint64_t)NFLPCDRandomGenerator);
    v9 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue(v8);
    v10 = sub_100173588(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

    v12 = sub_100172E84((uint64_t)NFLPCDRandomGenerator);
    v13 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue(v12);
    v14 = sub_100173268(v13);

    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v17 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("updateFieldNotificationWithCHInfo:");
      v21 = 45;
      if (isMetaClass)
        v21 = 43;
      v17(6, "%c[%{public}s %{public}s]:%i Setting local random  in CH field : %llu   %@", v21, ClassName, Name, 146, v14, v11);
    }
    v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v23 = NFSharedLogGetLogger(v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = object_getClass(a1);
      if (class_isMetaClass(v25))
        v26 = 43;
      else
        v26 = 45;
      *(_DWORD *)buf = 67110402;
      v72 = v26;
      v73 = 2082;
      v74 = object_getClassName(a1);
      v75 = 2082;
      v76 = sel_getName("updateFieldNotificationWithCHInfo:");
      v77 = 1024;
      v78 = 146;
      v79 = 2048;
      v80 = v14;
      v81 = 2112;
      v82 = v11;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Setting local random  in CH field : %llu   %@", buf, 0x36u);
    }

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
    objc_msgSend(v27, "setValue:forKey:", v11, CFSTR("CHLocalRandom"));

    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKey:", CFSTR("CHRemoteRandom")));

    if (!v29 || !v11)
    {
LABEL_56:

      v6 = 1;
      goto LABEL_6;
    }
    if ((unint64_t)objc_msgSend(v29, "length") > 8)
    {
      v30 = 0;
      v68 = 0;
    }
    else
    {
      v70 = 0;
      v68 = objc_msgSend(v29, "NF_toUint64:", &v70);
      v30 = v70;
      if (!v30)
      {
        v45 = 1;
LABEL_35:
        if ((unint64_t)objc_msgSend(v11, "length") <= 8)
        {
          v69 = v30;
          v46 = objc_msgSend(v11, "NF_toUint64:", &v69);
          v47 = v69;

          if (v47)
          {
            v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v49 = NFLogGetLogger(v48);
            if (v49)
            {
              v50 = (void (*)(uint64_t, const char *, ...))v49;
              v51 = object_getClass(a1);
              v52 = class_isMetaClass(v51);
              v64 = object_getClassName(a1);
              v67 = sel_getName("updateFieldNotificationWithCHInfo:");
              v53 = 45;
              if (v52)
                v53 = 43;
              v50(3, "%c[%{public}s %{public}s]:%i Invalid value: %@", v53, v64, v67, 169, v11);
            }
            v54 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v55 = NFSharedLogGetLogger(v54);
            v56 = objc_claimAutoreleasedReturnValue(v55);
            if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
            {
              v57 = object_getClass(a1);
              if (class_isMetaClass(v57))
                v58 = 43;
              else
                v58 = 45;
              v59 = object_getClassName(a1);
              v60 = sel_getName("updateFieldNotificationWithCHInfo:");
              *(_DWORD *)buf = 67110146;
              v72 = v58;
              v73 = 2082;
              v74 = v59;
              v75 = 2082;
              v76 = v60;
              v77 = 1024;
              v78 = 169;
              v79 = 2112;
              v80 = (uint64_t)v11;
              _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid value: %@", buf, 0x2Cu);
            }

            v30 = v47;
          }
          else
          {
            if (v68 < v46)
              v61 = v45;
            else
              v61 = 0;
            if (v61 == 1)
            {
              v30 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
              v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
              objc_msgSend(v30, "setValue:forKey:", v62, CFSTR("CHInitiatorDetected"));
LABEL_55:

              goto LABEL_56;
            }
            v30 = 0;
          }
        }
        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
        v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
        objc_msgSend(v62, "setValue:forKey:", v63, CFSTR("CHReceiverDetected"));

        goto LABEL_55;
      }
      v31 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v32 = NFLogGetLogger(v31);
      if (v32)
      {
        v33 = (void (*)(uint64_t, const char *, ...))v32;
        v34 = object_getClass(a1);
        v35 = class_isMetaClass(v34);
        v36 = object_getClassName(a1);
        v66 = sel_getName("updateFieldNotificationWithCHInfo:");
        v37 = 45;
        if (v35)
          v37 = 43;
        v33(3, "%c[%{public}s %{public}s]:%i Invalid value: %@", v37, v36, v66, 159, v29);
      }
      v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v39 = NFSharedLogGetLogger(v38);
      v40 = objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        v41 = object_getClass(a1);
        if (class_isMetaClass(v41))
          v42 = 43;
        else
          v42 = 45;
        v43 = object_getClassName(a1);
        v44 = sel_getName("updateFieldNotificationWithCHInfo:");
        *(_DWORD *)buf = 67110146;
        v72 = v42;
        v73 = 2082;
        v74 = v43;
        v75 = 2082;
        v76 = v44;
        v77 = 1024;
        v78 = 159;
        v79 = 2112;
        v80 = (uint64_t)v29;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid value: %@", buf, 0x2Cu);
      }

    }
    v45 = 0;
    goto LABEL_35;
  }
  v6 = 0;
LABEL_6:

LABEL_8:
  return v6;
}

void sub_100008E20(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  if (a1 && (objc_msgSend(v4, "cachedBeforeRFReset") & 1) == 0)
  {
    v3 = *(id *)(a1 + 120);
    objc_msgSend(v3, "forceNotifyFieldDetectPresentmentWithFieldNotification:walletDomain:", v4, 3);

  }
}

void sub_100008E7C(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[16];

  v3 = a2;
  v4 = v3;
  if (a1 && objc_msgSend(v3, "notificationType") == (id)2 && objc_msgSend(v4, "terminalType") == 3)
  {
    sub_100007548(a1, "com.apple.nearfield.handoff.terminal");
    v6 = NFSharedSignpostLog(v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)v8 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "HANDOFF_FIELD_ON_NOTIFICATION", "", v8, 2u);
    }

  }
}

void sub_100008F34(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *specific;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  const char *Name;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;

  v3 = a2;
  v4 = v3;
  if (a1 && objc_msgSend(v3, "notificationType") == (id)3)
  {
    v5 = v4;
    if (objc_msgSend(v5, "terminalType") == (id)2 && objc_msgSend(v5, "terminalSubType") == 4)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "homeKitSchemeDataPayload"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "NF_asHexString"));

      if (v7)
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
        objc_msgSend(v8, "postNotificationName:object:userInfo:options:", CFSTR("com.apple.nfcd.homekit.field"), v7, 0, 3);

        v9 = a1[13];
        objc_msgSend(v9, "sendXpcNotificationEventWithString:", v7);

      }
      else
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v12 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("_notifyHKAndUAWithFieldNotification:");
          v16 = 45;
          if (isMetaClass)
            v16 = 43;
          v12(3, "%c[%{public}s %{public}s]:%i Invalid ecp payload ", v16, ClassName, Name, 243);
        }
        v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v18 = NFSharedLogGetLogger(v17);
        v19 = objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          v20 = object_getClass(a1);
          if (class_isMetaClass(v20))
            v21 = 43;
          else
            v21 = 45;
          *(_DWORD *)buf = 67109890;
          v24 = v21;
          v25 = 2082;
          v26 = object_getClassName(a1);
          v27 = 2082;
          v28 = sel_getName("_notifyHKAndUAWithFieldNotification:");
          v29 = 1024;
          v30 = 243;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid ecp payload ", buf, 0x22u);
        }

      }
    }

  }
}

BOOL sub_100009180(void **a1)
{
  void *v2;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *Name;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;

  if (a1)
  {
    v2 = a1[11];
    if (v2)
    {
      if (sub_1000098F0(v2))
        return sub_10000993C(a1[11]);
    }
    else
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v6 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("_hasBeenFirstUnlocked");
        v10 = 45;
        if (isMetaClass)
          v10 = 43;
        v6(4, "%c[%{public}s %{public}s]:%i Not init'ed", v10, ClassName, Name, 2754);
      }
      v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v12 = NFSharedLogGetLogger(v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = object_getClass(a1);
        if (class_isMetaClass(v14))
          v15 = 43;
        else
          v15 = 45;
        *(_DWORD *)buf = 67109890;
        v18 = v15;
        v19 = 2082;
        v20 = object_getClassName(a1);
        v21 = 2082;
        v22 = sel_getName("_hasBeenFirstUnlocked");
        v23 = 1024;
        v24 = 2754;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Not init'ed", buf, 0x22u);
      }

    }
  }
  return 0;
}

void sub_10000934C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  unsigned int v6;
  id v7;
  void *v8;
  unsigned int v9;
  id v10;
  unsigned int v11;
  id v12;

  v3 = a2;
  if (a1)
  {
    v12 = v3;
    v4 = sub_1000078A4();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v6 = objc_msgSend(v12, "rfTechnology");
    if (v5)
      *(_DWORD *)(v5 + 16) = v6;
    if (!sub_1001701C8(a1) || objc_msgSend(v12, "chFieldType") == (id)1)
    {
      if (objc_msgSend(v12, "notificationType") == (id)2)
      {
        v7 = v12;
        v8 = v7;
        if (v5)
        {
          *(_DWORD *)(v5 + 32) = 2;
          *(_BYTE *)(v5 + 20) = 1;
          *(_DWORD *)(v5 + 40) = objc_msgSend(v7, "terminalType");
          v9 = objc_msgSend(v8, "terminalMode");

          *(_DWORD *)(v5 + 44) = v9;
LABEL_12:

          v3 = v12;
          goto LABEL_13;
        }
        objc_msgSend(v7, "terminalType");
        objc_msgSend(v8, "terminalMode");
LABEL_16:

        goto LABEL_12;
      }
      if (objc_msgSend(v12, "notificationType") != (id)3)
        goto LABEL_12;
    }
    v10 = v12;
    v8 = v10;
    if (v5)
    {
      *(_DWORD *)(v5 + 32) = 3;
      *(_BYTE *)(v5 + 20) = 1;
      *(_DWORD *)(v5 + 40) = objc_msgSend(v10, "terminalType");
      v11 = objc_msgSend(v8, "terminalSubType");

      *(_DWORD *)(v5 + 36) = v11;
      goto LABEL_12;
    }
    objc_msgSend(v10, "terminalType");
    objc_msgSend(v8, "terminalSubType");
    goto LABEL_16;
  }
LABEL_13:

}

uint64_t sub_10000949C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *specific;
  uint64_t Logger;
  void (*v16)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  objc_class *v26;
  int v27;
  const char *v28;
  const char *v29;
  id v30;
  id v31;
  _QWORD v33[5];
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  id v48;
  _BYTE v49[128];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if ((objc_msgSend(v3, "cachedBeforeRFReset") & 1) != 0
      || (v5 = *(id *)(a1 + 112),
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "suspendOnFieldList")),
          v7 = objc_msgSend(v6, "count"),
          v6,
          v5,
          !v7))
    {
      a1 = 0;
    }
    else
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v8 = *(id *)(a1 + 112);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "suspendOnFieldList"));

      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v49, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v36;
        while (2)
        {
          for (i = 0; i != v11; i = (char *)i + 1)
          {
            if (*(_QWORD *)v36 != v12)
              objc_enumerationMutation(v9);
            if (objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i), "isEqual:", v4))
            {
              specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              Logger = NFLogGetLogger(specific);
              if (Logger)
              {
                v16 = (void (*)(uint64_t, const char *, ...))Logger;
                Class = object_getClass((id)a1);
                isMetaClass = class_isMetaClass(Class);
                ClassName = object_getClassName((id)a1);
                Name = sel_getName("_checkActiveSessionForSuspensionWithFieldNotification:");
                v21 = *(id *)(a1 + 112);
                v22 = 45;
                if (isMetaClass)
                  v22 = 43;
                v16(6, "%c[%{public}s %{public}s]:%i Suspend active session %{public}@ on field", v22, ClassName, Name, 258, v21);

              }
              v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v24 = NFSharedLogGetLogger(v23);
              v25 = objc_claimAutoreleasedReturnValue(v24);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
              {
                v26 = object_getClass((id)a1);
                if (class_isMetaClass(v26))
                  v27 = 43;
                else
                  v27 = 45;
                v28 = object_getClassName((id)a1);
                v29 = sel_getName("_checkActiveSessionForSuspensionWithFieldNotification:");
                v30 = *(id *)(a1 + 112);
                *(_DWORD *)buf = 67110146;
                v40 = v27;
                v41 = 2082;
                v42 = v28;
                v43 = 2082;
                v44 = v29;
                v45 = 1024;
                v46 = 258;
                v47 = 2114;
                v48 = v30;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Suspend active session %{public}@ on field", buf, 0x2Cu);

              }
              v31 = *(id *)(a1 + 112);
              v33[0] = _NSConcreteStackBlock;
              v33[1] = 3221225472;
              v33[2] = sub_100098BE4;
              v33[3] = &unk_1002E7400;
              v33[4] = a1;
              v34 = v4;
              objc_msgSend(v31, "createHandoffTokenWithCompletion:", v33);

              a1 = 1;
              goto LABEL_24;
            }
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v49, 16);
          if (v11)
            continue;
          break;
        }
      }
      a1 = 0;
LABEL_24:

    }
  }

  return a1;
}

id sub_1000097F8(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v1;
  _QWORD *v2;
  id v3;
  _QWORD v5[2];
  void (*v6)(uint64_t);
  void *v7;
  os_unfair_lock_s *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  if (!a1)
    return 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = sub_100054E0C;
  v14 = sub_100054E1C;
  v15 = 0;
  v1 = a1 + 4;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v6 = sub_1000084DC;
  v7 = &unk_1002E5EA8;
  v8 = a1;
  v9 = &v10;
  v2 = v5;
  os_unfair_lock_lock(v1);
  v6((uint64_t)v2);
  os_unfair_lock_unlock(v1);

  v3 = (id)v11[5];
  _Block_object_dispose(&v10, 8);

  return v3;
}

void sub_1000098D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1000098F0(void *a1)
{
  _BYTE *v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  v1 = a1;
  objc_sync_enter(v1);
  v2 = v1[12] != 0;
  objc_sync_exit(v1);

  return v2;
}

BOOL sub_10000993C(void *a1)
{
  _BYTE *v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  v1 = a1;
  objc_sync_enter(v1);
  v2 = v1[13] != 0;
  objc_sync_exit(v1);

  return v2;
}

void sub_100009988(uint64_t a1)
{
  void *v2;
  id v3;

  if (a1)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 20) = 0;
    v2 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;

    *(_OWORD *)(a1 + 32) = xmmword_10026AA00;
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
    *(_QWORD *)(a1 + 8) = objc_msgSend(v3, "getTimestamp");

  }
}

unint64_t DEREncodeLengthSized(unint64_t result, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;

  if (result >= 0x80)
  {
    v5 = 0;
    v6 = result;
    do
    {
      --v5;
      v7 = v6 > 0xFF;
      v6 >>= 8;
    }
    while (v7);
    v8 = -v5;
    v9 = 7;
    if (-v5 < a3 && v8 <= 0x7E)
    {
      if (*a4)
      {
        v4 = 1 - v5;
        *(_BYTE *)a2 = -(char)v5 | 0x80;
        if (v8 < ~a2)
        {
          v10 = (_BYTE *)(a2 - v5);
          if (a2 - v5 != -2)
          {
            v11 = (_BYTE *)(a2 + *a4);
            while (v10 != (_BYTE *)-1)
            {
              if (v10 >= v11 || (unint64_t)v10 < a2)
                goto LABEL_23;
              *v10-- = result;
              v7 = result > 0xFF;
              result >>= 8;
              if (!v7)
              {
                if (v8 >= *a4)
                  goto LABEL_23;
                goto LABEL_19;
              }
            }
          }
        }
        __break(0x5513u);
      }
      goto LABEL_23;
    }
    return v9;
  }
  if (!a3)
    return 7;
  if (*a4)
  {
    *(_BYTE *)a2 = result;
    if (*a4)
    {
      v4 = 1;
LABEL_19:
      v9 = 0;
      *a4 = v4;
      return v9;
    }
  }
LABEL_23:
  __break(0x5519u);
  return result;
}

uint64_t sub_100009FEC(uint64_t result, unint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;

  v3 = result & 0x1FFFFFFFFFFFFFFFLL;
  if ((result & 0x1FFFFFFFFFFFFFFFuLL) < 0x1F)
  {
    if (*a3)
    {
      *(_BYTE *)a2 = HIBYTE(result) & 0xE0 | result;
      v8 = 1;
      goto LABEL_17;
    }
    return 7;
  }
  v4 = 0;
  v5 = result & 0x1FFFFFFFFFFFFFFFLL;
  do
  {
    ++v4;
    v6 = v5 > 0x7F;
    v5 >>= 7;
  }
  while (v6);
  v7 = *a3;
  if (v4 >= *a3)
    return 7;
  if (v4 >= ~a2 || (*(_BYTE *)a2 = HIBYTE(result) | 0x1F, a2 + v4 == -2))
  {
LABEL_20:
    __break(0x5513u);
    goto LABEL_21;
  }
  if (a2 + v4 >= a2)
  {
    v8 = v4 + 1;
    *(_BYTE *)(a2 + v4) = result & 0x7F;
    if (v3 >= 0x80)
    {
      v9 = (_BYTE *)(a2 + v4 - 1);
      v10 = (_BYTE *)(a2 + v7);
      while (v9 != (_BYTE *)-2)
      {
        if (v9 >= v10 || (unint64_t)v9 < a2)
          goto LABEL_21;
        v11 = v3 >> 14;
        v3 >>= 7;
        *v9-- = v3 | 0x80;
        if (!v11)
          goto LABEL_17;
      }
      goto LABEL_20;
    }
LABEL_17:
    if (v8 <= *a3)
    {
      result = 0;
      *a3 = v8;
      return result;
    }
  }
LABEL_21:
  __break(0x5519u);
  return result;
}

uint64_t DEREncodeSequenceFromObject(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t *a8)
{
  unint64_t v8;
  unint64_t v11;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  const void **v27;
  __int16 v28;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  size_t v36;
  unint64_t v37;
  size_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  unint64_t v45;

  v8 = ~a6;
  if (~a6 < a7)
    goto LABEL_73;
  v11 = *a8;
  v44 = a7;
  v45 = 0;
  if (v11 < a7)
    goto LABEL_74;
  result = sub_100009FEC(a1, a6, &v44);
  if ((_DWORD)result)
    return result;
  if (v44 > v8)
    goto LABEL_73;
  v17 = a7 - v44;
  if (a7 < v44)
    goto LABEL_75;
  v18 = a6 + a7;
  v19 = a6 + v44;
  if (a6 + v44 < v18)
  {
    result = sub_10000A4B0(a2, a3, a4, a5, &v45);
    if ((_DWORD)result)
      return result;
    v44 = v17;
    if (v19 > a6 + v11 || v19 < a6 || v17 > a6 + v11 - v19)
      goto LABEL_74;
    v42 = a6 + v11;
    v20 = v45;
    result = DEREncodeLengthSized(v45, v19, v17, (uint64_t *)&v44);
    if ((_DWORD)result)
      return result;
    v21 = v42;
    if (__CFADD__(v19, v44))
    {
LABEL_73:
      __break(0x5513u);
      goto LABEL_74;
    }
    v22 = v17 - v44;
    if (v17 >= v44)
    {
      v23 = (_BYTE *)(v19 + v44);
      if (!__CFADD__(v19 + v44, v20))
      {
        if ((unint64_t)&v23[v20] > v18)
          return 7;
        if (a4)
        {
          v24 = 0;
          v25 = a2 + a3;
          v41 = 24 * a4;
          while (1)
          {
            if (v24 > ~a5)
              goto LABEL_73;
            v26 = *(_QWORD *)(a5 + v24);
            if (v26 > ~a2)
              goto LABEL_73;
            v27 = (const void **)(a2 + v26);
            v28 = *(_WORD *)(a5 + v24 + 16);
            if ((v28 & 0x200) != 0)
              break;
            if ((v28 & 1) == 0)
              goto LABEL_29;
            if ((unint64_t)v27 < a2 || (unint64_t)(v27 + 2) > v25)
              goto LABEL_74;
            if (v27[1])
            {
LABEL_29:
              v44 = v22;
              if ((unint64_t)v23 > v21 || (unint64_t)v23 < a6 || v22 > v21 - (unint64_t)v23)
                goto LABEL_74;
              result = sub_100009FEC(*(_QWORD *)(a5 + v24 + 8), (unint64_t)v23, &v44);
              if ((_DWORD)result)
                return result;
              if (__CFADD__(v23, v44))
                goto LABEL_73;
              v30 = v22 - v44;
              if (v22 < v44)
                goto LABEL_75;
              if ((unint64_t)v27 < a2 || (unint64_t)(v27 + 2) > v25)
                goto LABEL_74;
              v31 = (unint64_t)v27[1];
              v45 = v31;
              v32 = 1;
              if ((v28 & 0x100) != 0 && v31 && *(char *)*v27 < 0)
              {
                v32 = 0;
                v45 = ++v31;
              }
              v33 = (unint64_t)&v23[v44];
              v44 = v30;
              if (v33 > v42 || v33 < a6 || v30 > v42 - v33)
                goto LABEL_74;
              result = DEREncodeLengthSized(v31, v33, v30, (uint64_t *)&v44);
              if ((_DWORD)result)
                return result;
              v34 = v44;
              if (__CFADD__(v33, v44))
                goto LABEL_73;
              v35 = v30 - v44;
              if (v30 < v44)
                goto LABEL_75;
              v23 = (_BYTE *)(v33 + v44);
              if ((v32 & 1) == 0)
              {
                if (v23 == (_BYTE *)-1)
                  goto LABEL_73;
                if ((unint64_t)v23 >= v42 || (unint64_t)v23 < a6)
                  goto LABEL_74;
                *v23 = 0;
                --v35;
                if (v30 == v34)
                  goto LABEL_75;
                ++v23;
              }
              if ((unint64_t)v23 > v42)
                goto LABEL_74;
              if ((unint64_t)v23 < a6)
                goto LABEL_74;
              v36 = (size_t)v27[1];
              if (v36 > v42 - (unint64_t)v23)
                goto LABEL_74;
              result = (uint64_t)memmove(v23, *v27, v36);
              v21 = v42;
              v37 = (unint64_t)v27[1];
              if (__CFADD__(v23, v37))
                goto LABEL_73;
              v22 = v35 - v37;
              if (v35 < v37)
                goto LABEL_75;
              goto LABEL_69;
            }
LABEL_70:
            v24 += 24;
            if (v41 == v24)
              goto LABEL_71;
          }
          if ((unint64_t)v27 < a2 || (unint64_t)(v27 + 2) > v25)
            goto LABEL_74;
          if ((unint64_t)v23 > v21)
            goto LABEL_74;
          if ((unint64_t)v23 < a6)
            goto LABEL_74;
          v39 = (size_t)v27[1];
          if (v39 > v21 - (unint64_t)v23)
            goto LABEL_74;
          result = (uint64_t)memmove(v23, *v27, v39);
          v21 = v42;
          v37 = (unint64_t)v27[1];
          if (__CFADD__(v23, v37))
            goto LABEL_73;
          v40 = v22 >= v37;
          v22 -= v37;
          if (!v40)
            goto LABEL_75;
LABEL_69:
          v23 += v37;
          goto LABEL_70;
        }
LABEL_71:
        if ((unint64_t)&v23[-a6] <= *a8)
        {
          result = 0;
          *a8 = (unint64_t)&v23[-a6];
          return result;
        }
LABEL_74:
        __break(0x5519u);
      }
      goto LABEL_73;
    }
LABEL_75:
    __break(0x5515u);
    return result;
  }
  return 7;
}

unint64_t sub_10000A4B0(unint64_t result, unint64_t a2, int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unsigned __int8 **v10;
  __int16 v11;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;

  v5 = 0;
  if (!a3)
  {
LABEL_38:
    result = 0;
LABEL_40:
    *a5 = v5;
    return result;
  }
  v6 = 0;
  v7 = result + a2;
  while (24 * (unint64_t)v6 <= ~a4)
  {
    v8 = *(_QWORD *)(a4 + 24 * v6);
    v9 = v8 > 0xFFFFFFFFFFFFFFEFLL || v8 + 16 > a2;
    if (v9)
    {
      v5 = 0;
      result = 7;
      goto LABEL_40;
    }
    if (v8 > ~result)
      break;
    v10 = (unsigned __int8 **)(result + v8);
    v11 = *(_WORD *)(a4 + 24 * v6 + 16);
    if ((v11 & 0x200) == 0)
    {
      if ((v11 & 1) != 0)
      {
        if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7)
          goto LABEL_43;
        if (!v10[1])
          goto LABEL_37;
      }
      v13 = *(_QWORD *)(a4 + 24 * v6 + 8) & 0x1FFFFFFFFFFFFFFFLL;
      v14 = 1;
      if (v13 >= 0x1F)
      {
        do
        {
          ++v14;
          v9 = v13 > 0x7F;
          v13 >>= 7;
        }
        while (v9);
      }
      v15 = __CFADD__(v5, v14);
      v16 = v5 + v14;
      if (v15)
        goto LABEL_42;
      if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7)
        goto LABEL_43;
      v17 = (unint64_t)v10[1];
      if ((*(_WORD *)(a4 + 24 * v6 + 16) & 0x100) != 0)
      {
        if (v17)
        {
          v17 += (unint64_t)**v10 >> 7;
          goto LABEL_24;
        }
LABEL_25:
        v18 = 1;
      }
      else
      {
LABEL_24:
        if (v17 < 0x80)
          goto LABEL_25;
        v18 = 1;
        v21 = v17;
        do
        {
          ++v18;
          v9 = v21 > 0xFF;
          v21 >>= 8;
        }
        while (v9);
      }
      v15 = __CFADD__(v16, v18);
      v22 = v16 + v18;
      if (v15)
        goto LABEL_42;
      v15 = __CFADD__(v22, v17);
      v5 = v22 + v17;
      if (v15)
        goto LABEL_42;
      goto LABEL_37;
    }
    if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7)
      goto LABEL_43;
    v20 = v10[1];
    v15 = __CFADD__(v5, v20);
    v5 += (uint64_t)v20;
    if (v15)
      goto LABEL_42;
LABEL_37:
    if (++v6 == a3)
      goto LABEL_38;
  }
  __break(0x5513u);
LABEL_42:
  __break(0x5500u);
LABEL_43:
  __break(0x5519u);
  return result;
}

uint64_t DEREncodeSequence(uint64_t result, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, unint64_t *a6)
{
  if ((a2 | 0x7FFFFFFFFFFFFFFFLL) >= a2)
    return DEREncodeSequenceFromObject(result, a2, ~a2 & 0x7FFFFFFFFFFFFFFFLL, a3, a4, a5, *a6, a6);
  __break(0x5519u);
  return result;
}

unint64_t DERLengthOfEncodedSequenceFromObject(uint64_t a1, unint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6)
{
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v17 = 0;
  result = sub_10000A4B0(a2, a3, a4, a5, &v17);
  if (!(_DWORD)result)
  {
    v9 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    v10 = 1;
    if ((a1 & 0x1FFFFFFFFFFFFFFFuLL) >= 0x1F)
    {
      do
      {
        ++v10;
        v11 = v9 > 0x7F;
        v9 >>= 7;
      }
      while (v11);
    }
    v12 = 1;
    if (v17 >= 0x80)
    {
      v13 = v17;
      do
      {
        ++v12;
        v11 = v13 > 0xFF;
        v13 >>= 8;
      }
      while (v11);
    }
    v14 = __CFADD__(v10, v12);
    v15 = v10 + v12;
    if (v14 || (v14 = __CFADD__(v15, v17), v16 = v15 + v17, v14))
    {
      __break(0x5500u);
    }
    else
    {
      result = 0;
      *a6 = v16;
    }
  }
  return result;
}

unint64_t DERLengthOfEncodedSequence(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5;

  v5 = 0;
  if ((a2 | 0x7FFFFFFFFFFFFFFFLL) < a2)
    __break(0x5519u);
  if (DERLengthOfEncodedSequenceFromObject(a1, a2, ~a2 & 0x7FFFFFFFFFFFFFFFLL, a3, a4, &v5))
    return 0;
  else
    return v5;
}

uint64_t SSEIsFeatureSupported(int a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;

  v11 = 0;
  v10 = 0;
  sub_10000AC40();
  if (byte_10032A7C8)
  {
    v2 = SSEGetVersion(&v11);
    if ((_DWORD)v2)
    {
      v3 = v2;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_1000105C0();
    }
    else
    {
      v3 = 0;
      switch(a1)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 10:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
          return v3;
        case 7:
        case 11:
        case 15:
        case 26:
        case 27:
        case 28:
          v4 = HIWORD(v11);
          goto LABEL_8;
        case 12:
        case 25:
          v5 = v11 > 1;
          goto LABEL_26;
        case 13:
        case 14:
          v5 = v11 > 2;
          goto LABEL_26;
        case 16:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
          v4 = v11 >> 18;
          goto LABEL_8;
        case 17:
        case 40:
          v6 = v11;
          v7 = 393215;
          goto LABEL_25;
        case 29:
        case 30:
        case 31:
          v4 = v11 >> 17;
          goto LABEL_8;
        case 32:
        case 45:
        case 46:
        case 47:
        case 48:
          v4 = v11 >> 19;
LABEL_8:
          if (v4)
            return 0;
          else
            return 4294967279;
        case 33:
          v6 = v11;
          v7 = 655359;
          goto LABEL_25;
        case 34:
          v8 = sub_10000AAB8(&v10);
          if ((_DWORD)v8)
          {
            v3 = v8;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              sub_100010530();
          }
          else if ((v10 & 1) != 0)
          {
            return 0;
          }
          else
          {
            return 4294967279;
          }
          return v3;
        case 41:
        case 42:
          v5 = HIWORD(v11) > 4u;
          goto LABEL_26;
        case 43:
        case 44:
          v6 = v11;
          v7 = 458751;
          goto LABEL_25;
        case 49:
          v6 = v11;
          v7 = 589823;
LABEL_25:
          v5 = v6 > v7;
LABEL_26:
          if (v5)
            v3 = 0;
          else
            v3 = 4294967279;
          break;
        default:
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_1000104A0();
          return 4294967279;
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100010410();
    return 4294967279;
  }
  return v3;
}

uint64_t SSEGetVersion(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  size_t outputStructCnt;
  unsigned int outputStruct;
  uint64_t inputStruct;

  if (dword_10032A7B0)
  {
    v2 = 0;
    goto LABEL_10;
  }
  inputStruct = 0x153534563;
  outputStruct = 0;
  v3 = sub_10000AC40();
  if ((_DWORD)v3)
  {
    v2 = v3;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100010800();
  }
  else
  {
    outputStructCnt = 4;
    v4 = IOConnectCallStructMethod(dword_10032A7B4, 0, &inputStruct, 8uLL, &outputStruct, &outputStructCnt);
    if (!(_DWORD)v4)
    {
      if (outputStructCnt == 4)
      {
        v5 = outputStruct;
        if (outputStruct)
        {
          v2 = 0;
          if (outputStruct >= 0xA0000)
            v5 = 655360;
          dword_10032A7B0 = v5;
          goto LABEL_10;
        }
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          sub_100010650();
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1000106E0();
      }
      v2 = 4294967290;
      goto LABEL_10;
    }
    v2 = v4;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100010770();
  }
LABEL_10:
  if (a1)
    *a1 = dword_10032A7B0;
  return v2;
}

uint64_t sub_10000AAB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v7;
  uint64_t outputStruct;
  uint64_t inputStruct;
  unsigned int v10;

  if (a1)
  {
    if ((byte_10032A7D8 & 1) != 0)
    {
LABEL_10:
      v5 = 0;
      *a1 = qword_10032A7D0;
      return v5;
    }
    v10 = 0;
    v2 = SSEGetVersion(&v10);
    if ((_DWORD)v2)
    {
      v5 = v2;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100010AD0();
    }
    else
    {
      if (v10 < 0x30000)
      {
LABEL_9:
        byte_10032A7D8 = 1;
        goto LABEL_10;
      }
      outputStruct = 0;
      inputStruct = 0x1E53534563;
      v3 = sub_10000AC40();
      if ((_DWORD)v3)
      {
        v5 = v3;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          sub_100010A40();
      }
      else
      {
        v7 = 8;
        v4 = IOConnectCallStructMethod(dword_10032A7B4, 0, &inputStruct, 8uLL, &outputStruct, &v7);
        if ((_DWORD)v4)
        {
          v5 = v4;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_1000109B0();
        }
        else
        {
          if (v7 == 8)
          {
            qword_10032A7D0 = outputStruct;
            goto LABEL_9;
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_100010920();
          return 4294967290;
        }
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100010890();
    return 4294967292;
  }
  return v5;
}

uint64_t sub_10000AC40()
{
  uint64_t v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  io_object_t v3;
  uint64_t v4;
  IONotificationPort *v5;
  NSObject *v6;
  FILE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  size_t v17;
  _QWORD v18[2];
  int v19[2];

  if ((byte_10032A7D9 & 1) == 0)
  {
    if (qword_10032A7F0 != -1)
      dispatch_once(&qword_10032A7F0, &stru_1002E5058);
    if ((byte_10032A7EC & 1) != 0 || byte_10032AC98)
    {
      byte_10032A7C8 = 1;
    }
    else
    {
      if (qword_10032A800 != -1)
        dispatch_once(&qword_10032A800, &stru_1002E5078);
      byte_10032A7C8 = byte_10032A7F8;
      if (!byte_10032A7F8)
      {
        byte_10032A7D9 = 1;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          sub_100010DA0();
        goto LABEL_13;
      }
    }
    v1 = IOServiceMatching("AppleSSE");
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100010B60();
      v0 = 4294967276;
      goto LABEL_14;
    }
    v3 = MatchingService;
    v4 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_10032A7B4);
    if ((_DWORD)v4)
    {
      v0 = v4;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100010D10();
      IOObjectRelease(v3);
      goto LABEL_14;
    }
    v5 = IONotificationPortCreate(kIOMasterPortDefault);
    qword_10032A7E0 = (uint64_t)v5;
    if (v5)
      goto LABEL_24;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100010C80();
    v5 = (IONotificationPort *)qword_10032A7E0;
    if (qword_10032A7E0)
    {
LABEL_24:
      v6 = dispatch_get_global_queue(21, 0);
      IONotificationPortSetDispatchQueue(v5, v6);

      if (IOServiceAddInterestNotification((IONotificationPortRef)qword_10032A7E0, v3, "IOGeneralInterest", (IOServiceInterestCallback)sub_10000FAB8, 0, (io_object_t *)&dword_10032A7E8)&& os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_100010BF0();
      }
    }
    if (qword_10032A800 != -1)
      dispatch_once(&qword_10032A800, &stru_1002E5078);
    if (byte_10032A7F9)
    {
      if (qword_10032A7F0 != -1)
        dispatch_once(&qword_10032A7F0, &stru_1002E5058);
      if ((byte_10032A7EC & 1) == 0)
      {
        v7 = fopen("/var/mobile/Library/Logs/AppleSSE.log", "a");
        qword_10032A808 = (uint64_t)v7;
        if (v7)
        {
          if (ftell(v7) < 1)
            chmod("/var/mobile/Library/Logs/AppleSSE.log", 0x1B6u);
          else
            fputs("\n", (FILE *)qword_10032A808);
          v18[1] = 0;
          *(_QWORD *)v19 = 0x4100000001;
          v17 = 16;
          v18[0] = 0;
          sysctl(v19, 2u, v18, &v17, 0, 0);
          sub_10000FDDC("AppleSSE Log Starts - System Version %s", v8, v9, v10, v11, v12, v13, v14, (char)v18);
          sub_10000FEC4(0, 0);
        }
      }
    }
    byte_10032A7D9 = 1;
    v15 = dispatch_get_global_queue(21, 0);
    dispatch_async(v15, &stru_1002E5038);

    IOObjectRelease(v3);
    return 0;
  }
  if (byte_10032A7C8)
    return 0;
LABEL_13:
  v0 = 4294967279;
LABEL_14:
  if (dword_10032A7E8)
  {
    IOObjectRelease(dword_10032A7E8);
    dword_10032A7E8 = 0;
  }
  if (qword_10032A7E0)
  {
    IONotificationPortDestroy((IONotificationPortRef)qword_10032A7E0);
    qword_10032A7E0 = 0;
  }
  if (dword_10032A7B4)
  {
    IOServiceClose(dword_10032A7B4);
    dword_10032A7B4 = 0;
  }
  return v0;
}

uint64_t SSEGetHostChallenge(CFDataRef *a1)
{
  uint64_t v2;
  uint64_t v3;
  CFDataRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v10;
  uint64_t inputStruct;
  uint64_t outputStruct;

  inputStruct = 0;
  outputStruct = 0;
  v10 = 0;
  if (a1)
  {
    v2 = sub_10000AC40();
    if ((_DWORD)v2)
    {
      v8 = v2;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100011070();
    }
    else
    {
      LODWORD(inputStruct) = 1397966179;
      WORD2(inputStruct) = 2;
      v10 = 8;
      v3 = IOConnectCallStructMethod(dword_10032A7B4, 0, &inputStruct, 8uLL, &outputStruct, &v10);
      if ((_DWORD)v3)
      {
        v8 = v3;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          sub_100010FE0();
      }
      else if (v10 == 8)
      {
        v4 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&outputStruct, 8);
        *a1 = v4;
        if (v4)
        {
          v8 = 0;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_100010EC0();
          v8 = 4294967291;
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          sub_100010F50();
        v8 = 4294967290;
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100010E30();
    v8 = 4294967292;
  }
  sub_10000B1F8((uint64_t)"SSEGetHostChallenge", v8, 0, 0, 0, v5, v6, v7);
  return v8;
}

uint64_t sub_10000B1F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a2 || (_DWORD)a3)
  {
    if (qword_10032A808)
    {
      sub_10000FDDC("%s() -> %d", a2, a3, a4, a5, a6, a7, a8, result);
      return sub_10000FEC4(a4, a5);
    }
  }
  return result;
}

uint64_t SSEAuthorize(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, _DWORD *a8, CFDataRef *a9)
{
  return sub_10000B2B0(0, a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, 0, 0, 0);
}

uint64_t sub_10000B2B0(int a1, int a2, const __CFData *a3, int a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, char a9, _DWORD *a10, CFDataRef *a11, CFDataRef *a12, CFDataRef *a13, CFTypeRef *a14)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  UInt8 *v25;
  uint64_t v26;
  CFDataRef v27;
  CFDataRef v28;
  CFIndex v29;
  CFDataRef v30;
  CFDataRef v31;
  const UInt8 *v32;
  CFDataRef v33;
  CFDataRef v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  UInt8 *v40;
  int v41;
  CFTypeRef cf;
  size_t outputStructCnt;
  int v44;
  __int128 inputStruct;
  _OWORD v46[8];
  CFRange v47;
  CFRange v48;
  CFRange v49;
  CFRange v50;
  CFRange v51;

  v44 = a4;
  memset(v46, 0, 126);
  inputStruct = 0u;
  cf = 0;
  outputStructCnt = 0;
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011100();
    goto LABEL_76;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011190();
    goto LABEL_76;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011220();
    goto LABEL_76;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000112B0();
    goto LABEL_76;
  }
  if (!a8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011340();
    goto LABEL_76;
  }
  if (!a10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000113D0();
    goto LABEL_76;
  }
  if (!a11)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011460();
    goto LABEL_76;
  }
  if (a1)
  {
    if (a12)
    {
      if (a13)
        goto LABEL_11;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100011580();
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1000114F0();
    }
LABEL_76:
    v25 = 0;
LABEL_77:
    v35 = 4294967292;
    goto LABEL_78;
  }
LABEL_11:
  v40 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x722A5B9EuLL);
  if (!v40)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011610();
    v25 = 0;
    goto LABEL_92;
  }
  v22 = sub_10000AC40();
  if ((_DWORD)v22)
  {
    v35 = v22;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011DF0();
    goto LABEL_61;
  }
  if (a9 == 2 && a1)
  {
    v23 = SSEIsFeatureSupported(7);
    if ((_DWORD)v23)
    {
      v35 = v23;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100011D60();
      goto LABEL_61;
    }
    v24 = sub_10000C6B8();
    if ((_DWORD)v24)
    {
      v35 = v24;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100011CD0();
      goto LABEL_61;
    }
  }
  LODWORD(inputStruct) = 1397966179;
  WORD2(inputStruct) = 3;
  DWORD2(inputStruct) = a2;
  if ((unint64_t)CFDataGetLength(a3) >= 0x41)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000116A0();
    goto LABEL_60;
  }
  v47.length = CFDataGetLength(a3);
  v47.location = 0;
  CFDataGetBytes(a3, v47, (UInt8 *)v46);
  HIDWORD(inputStruct) = CFDataGetLength(a3);
  LODWORD(v46[4]) = a4;
  if ((unint64_t)CFDataGetLength(a5) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011730();
LABEL_60:
    v35 = 4294967292;
LABEL_61:
    v25 = v40;
    goto LABEL_78;
  }
  v48.length = CFDataGetLength(a5);
  v48.location = 0;
  CFDataGetBytes(a5, v48, (UInt8 *)&v46[4] + 4);
  if (CFDataGetLength(a6) != 8)
  {
    v25 = v40;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011C40();
    goto LABEL_77;
  }
  v49.length = CFDataGetLength(a6);
  v49.location = 0;
  CFDataGetBytes(a6, v49, (UInt8 *)&v46[5] + 12);
  v25 = v40;
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011BB0();
    goto LABEL_77;
  }
  v50.length = CFDataGetLength(a7);
  v50.location = 0;
  CFDataGetBytes(a7, v50, (UInt8 *)&v46[6] + 4);
  if (CFDataGetLength(a8) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011B20();
    goto LABEL_77;
  }
  v51.length = CFDataGetLength(a8);
  v51.location = 0;
  CFDataGetBytes(a8, v51, (UInt8 *)&v46[6] + 12);
  *(_QWORD *)((char *)&v46[7] + 4) = 0;
  if (a1)
  {
    BYTE12(v46[7]) = 1;
    BYTE13(v46[7]) = a9;
  }
  outputStructCnt = 0x4000;
  v26 = IOConnectCallStructMethod(dword_10032A7B4, 0, &inputStruct, 0x8EuLL, v40, &outputStructCnt);
  if ((_DWORD)v26)
  {
    v35 = v26;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011A90();
    goto LABEL_78;
  }
  v27 = CFDataCreate(kCFAllocatorDefault, v40 + 4, 8);
  if (!v27)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000117C0();
    goto LABEL_92;
  }
  v28 = v27;
  if (!a1)
  {
    v35 = 0;
    *a10 = *(_DWORD *)v40;
    *a11 = v27;
    goto LABEL_35;
  }
  v29 = *((unsigned int *)v40 + 3);
  if (outputStructCnt < v29 + (unint64_t)*((unsigned int *)v40 + 4) + 20)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011850();
    CFRelease(v28);
    v35 = 4294967290;
    goto LABEL_78;
  }
  v30 = CFDataCreate(kCFAllocatorDefault, v40 + 20, v29);
  if (!v30)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000118E0();
    CFRelease(v28);
LABEL_92:
    v35 = 4294967291;
    goto LABEL_78;
  }
  v31 = v30;
  v32 = &v40[*((unsigned int *)v40 + 3) + 20];
  v33 = CFDataCreate(kCFAllocatorDefault, v32, *((unsigned int *)v40 + 4));
  v34 = v33;
  if (v33)
  {
    if (!a14)
    {
      v35 = 0;
      *a10 = *(_DWORD *)v40;
      *a11 = v28;
      *a12 = v31;
      *a13 = v33;
      goto LABEL_35;
    }
    v41 = 0;
    v35 = sub_10000C708((int *)&v32[*((unsigned int *)v40 + 4)], (unint64_t)&v40[outputStructCnt], &cf, &v41);
    if (!(_DWORD)v35)
    {
      *a10 = *(_DWORD *)v40;
      *a11 = v28;
      *a12 = v31;
      *a13 = v34;
      *a14 = cf;
LABEL_35:
      free(v25);
      goto LABEL_36;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011A00();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011970();
    v35 = 4294967291;
  }
  CFRelease(v28);
  CFRelease(v31);
  if (v34)
    CFRelease(v34);
LABEL_78:
  if (cf)
    CFRelease(cf);
  if (v25)
    goto LABEL_35;
LABEL_36:
  sub_10000B1F8((uint64_t)"authorize", v35, 0, (uint64_t)&v44, (uint64_t)&v46[4] + 4, v36, v37, v38);
  return v35;
}

uint64_t sub_10000B9D4(int a1, int a2, const __CFData *a3, int a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, char a9, _DWORD *a10, CFDataRef *a11, CFDataRef *a12, CFDataRef *a13, CFDataRef *a14, CFTypeRef *a15)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  UInt8 *v26;
  uint64_t v27;
  CFDataRef v28;
  CFDataRef v29;
  CFDataRef v30;
  CFDataRef v31;
  CFIndex v32;
  CFDataRef v33;
  CFDataRef v34;
  const UInt8 *v35;
  CFDataRef v36;
  CFDataRef v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  UInt8 *v43;
  int v44;
  CFTypeRef cf;
  size_t outputStructCnt;
  int v47;
  __int128 inputStruct;
  _OWORD v49[8];
  CFRange v50;
  CFRange v51;
  CFRange v52;
  CFRange v53;
  CFRange v54;

  v47 = a4;
  memset(v49, 0, 126);
  inputStruct = 0u;
  cf = 0;
  outputStructCnt = 0;
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011E80();
    goto LABEL_83;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011F10();
    goto LABEL_83;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100011FA0();
    goto LABEL_83;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012030();
    goto LABEL_83;
  }
  if (!a8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000120C0();
    goto LABEL_83;
  }
  if (!a10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012150();
    goto LABEL_83;
  }
  if (!a11)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000121E0();
    goto LABEL_83;
  }
  if (!a12)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012270();
    goto LABEL_83;
  }
  if (a1)
  {
    if (a13)
    {
      if (a14)
        goto LABEL_12;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100012390();
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_100012300();
    }
LABEL_83:
    v26 = 0;
LABEL_84:
    v38 = 4294967292;
    goto LABEL_85;
  }
LABEL_12:
  v43 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x468DD742uLL);
  if (!v43)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012420();
    v26 = 0;
    goto LABEL_78;
  }
  v23 = sub_10000AC40();
  if ((_DWORD)v23)
  {
    v38 = v23;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012C90();
    goto LABEL_93;
  }
  if (a9 == 2 && a1)
  {
    v24 = SSEIsFeatureSupported(11);
    if ((_DWORD)v24)
    {
      v38 = v24;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100012C00();
      goto LABEL_93;
    }
    v25 = sub_10000C6B8();
    if ((_DWORD)v25)
    {
      v38 = v25;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100012B70();
      goto LABEL_93;
    }
  }
  strcpy((char *)&inputStruct, "cESS\b");
  DWORD2(inputStruct) = a2;
  if ((unint64_t)CFDataGetLength(a3) >= 0x41)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000124B0();
    v38 = 4294967292;
LABEL_93:
    v26 = v43;
    goto LABEL_85;
  }
  v50.length = CFDataGetLength(a3);
  v50.location = 0;
  CFDataGetBytes(a3, v50, (UInt8 *)v49);
  HIDWORD(inputStruct) = CFDataGetLength(a3);
  LODWORD(v49[4]) = a4;
  if ((unint64_t)CFDataGetLength(a5) >= 0x19)
  {
    v26 = v43;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012540();
    goto LABEL_84;
  }
  v51.length = CFDataGetLength(a5);
  v51.location = 0;
  CFDataGetBytes(a5, v51, (UInt8 *)&v49[4] + 4);
  v26 = v43;
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012AE0();
    goto LABEL_84;
  }
  v52.length = CFDataGetLength(a6);
  v52.location = 0;
  CFDataGetBytes(a6, v52, (UInt8 *)&v49[5] + 12);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012A50();
    goto LABEL_84;
  }
  v53.length = CFDataGetLength(a7);
  v53.location = 0;
  CFDataGetBytes(a7, v53, (UInt8 *)&v49[6] + 4);
  if (CFDataGetLength(a8) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000129C0();
    goto LABEL_84;
  }
  v54.length = CFDataGetLength(a8);
  v54.location = 0;
  CFDataGetBytes(a8, v54, (UInt8 *)&v49[6] + 12);
  *(_QWORD *)((char *)&v49[7] + 4) = 0;
  if (a1)
  {
    BYTE12(v49[7]) = 1;
    BYTE13(v49[7]) = a9;
  }
  outputStructCnt = 0x4000;
  v27 = IOConnectCallStructMethod(dword_10032A7B4, 0, &inputStruct, 0x8EuLL, v43, &outputStructCnt);
  if (!(_DWORD)v27)
  {
    v28 = CFDataCreate(kCFAllocatorDefault, v43 + 4, 16);
    if (v28)
    {
      v29 = v28;
      v30 = CFDataCreate(kCFAllocatorDefault, v43 + 20, 8);
      if (v30)
      {
        v31 = v30;
        if (!a1)
        {
          v38 = 0;
          *a10 = *(_DWORD *)v43;
          *a11 = v29;
          *a12 = v30;
          goto LABEL_37;
        }
        v32 = *((unsigned int *)v43 + 7);
        if (outputStructCnt < v32 + (unint64_t)*((unsigned int *)v43 + 8) + 36)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_1000126F0();
          v37 = 0;
          v34 = 0;
          v38 = 4294967290;
        }
        else
        {
          v33 = CFDataCreate(kCFAllocatorDefault, v43 + 36, v32);
          if (v33)
          {
            v34 = v33;
            v35 = &v43[*((unsigned int *)v43 + 7) + 36];
            v36 = CFDataCreate(kCFAllocatorDefault, v35, *((unsigned int *)v43 + 8));
            if (v36)
            {
              v37 = v36;
              if (!a15)
              {
                v38 = 0;
                *a10 = *(_DWORD *)v43;
                *a11 = v29;
                *a12 = v31;
                *a13 = v34;
                *a14 = v36;
                goto LABEL_37;
              }
              v44 = 0;
              v38 = sub_10000C708((int *)&v35[*((unsigned int *)v43 + 8)], (unint64_t)&v43[outputStructCnt], &cf, &v44);
              if (!(_DWORD)v38)
              {
                *a10 = *(_DWORD *)v43;
                *a11 = v29;
                *a12 = v31;
                *a13 = v34;
                *a14 = v37;
                *a15 = cf;
LABEL_37:
                free(v26);
                goto LABEL_38;
              }
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                sub_1000128A0();
              goto LABEL_106;
            }
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              sub_100012810();
            v37 = 0;
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              sub_100012780();
            v37 = 0;
            v34 = 0;
          }
          v38 = 4294967291;
        }
LABEL_106:
        CFRelease(v29);
        CFRelease(v31);
        if (v34)
          CFRelease(v34);
        if (v37)
          CFRelease(v37);
        goto LABEL_85;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100012660();
      CFRelease(v29);
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1000125D0();
    }
LABEL_78:
    v38 = 4294967291;
    goto LABEL_85;
  }
  v38 = v27;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_100012930();
LABEL_85:
  if (cf)
    CFRelease(cf);
  if (v26)
    goto LABEL_37;
LABEL_38:
  sub_10000B1F8((uint64_t)"authorizeWithPIN", v38, 0, (uint64_t)&v47, (uint64_t)&v49[4] + 4, v39, v40, v41);
  return v38;
}

uint64_t SSEAuthorizeAndSignECommerceBlob(const __CFData *a1, int a2, const __CFData *a3, char a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, const __CFData **a9)
{
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  size_t v20;
  UInt8 *v21;
  uint64_t v22;
  CFIndex v23;
  const __CFData *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  UInt8 *outputStruct;
  size_t outputStructCnt;
  int v32;
  CFRange v33;
  CFRange v34;
  CFRange v35;
  CFRange v36;
  CFRange v37;
  CFRange v38;

  v32 = a2;
  outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012D20();
    goto LABEL_38;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012DB0();
    goto LABEL_38;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012E40();
    goto LABEL_38;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012ED0();
    goto LABEL_38;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012F60();
    goto LABEL_38;
  }
  if (!a8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100012FF0();
    goto LABEL_38;
  }
  if (!a9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013080();
LABEL_38:
    v25 = 4294967292;
    goto LABEL_23;
  }
  v17 = malloc_type_calloc(0x4000uLL, 1uLL, 0x27E86296uLL);
  if (!v17)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013110();
    goto LABEL_44;
  }
  v18 = v17;
  outputStruct = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x1855B243uLL);
  if (!outputStruct)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000131A0();
    free(v18);
LABEL_44:
    v25 = 4294967291;
    goto LABEL_23;
  }
  v19 = sub_10000AC40();
  if ((_DWORD)v19)
  {
    v25 = v19;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000137D0();
    goto LABEL_60;
  }
  *v18 = 1397966179;
  *((_WORD *)v18 + 2) = 15;
  if ((unint64_t)CFDataGetLength(a1) >= 0x41)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013230();
    goto LABEL_59;
  }
  v33.length = CFDataGetLength(a1);
  v33.location = 0;
  CFDataGetBytes(a1, v33, (UInt8 *)v18 + 12);
  v18[2] = CFDataGetLength(a1);
  v18[19] = a2;
  if ((unint64_t)CFDataGetLength(a3) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000132C0();
    goto LABEL_59;
  }
  v34.length = CFDataGetLength(a3);
  v34.location = 0;
  CFDataGetBytes(a3, v34, (UInt8 *)v18 + 80);
  *((_BYTE *)v18 + 104) = a4;
  if (CFDataGetLength(a5) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013740();
    goto LABEL_59;
  }
  v35.length = CFDataGetLength(a5);
  v35.location = 0;
  CFDataGetBytes(a5, v35, (UInt8 *)v18 + 105);
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000136B0();
    goto LABEL_59;
  }
  v36.length = CFDataGetLength(a6);
  v36.location = 0;
  CFDataGetBytes(a6, v36, (UInt8 *)v18 + 113);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013620();
    goto LABEL_59;
  }
  v37.length = CFDataGetLength(a7);
  v37.location = 0;
  CFDataGetBytes(a7, v37, (UInt8 *)v18 + 121);
  if ((unint64_t)CFDataGetLength(a8) >> 2 >= 0xFDD)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013350();
LABEL_59:
    v25 = 4294967292;
LABEL_60:
    v21 = outputStruct;
    goto LABEL_22;
  }
  *(_DWORD *)((char *)v18 + 137) = CFDataGetLength(a8);
  v38.length = CFDataGetLength(a8);
  v38.location = 0;
  CFDataGetBytes(a8, v38, (UInt8 *)v18 + 141);
  *(_QWORD *)((char *)v18 + 129) = 0;
  v20 = *(unsigned int *)((char *)v18 + 137) + 141;
  outputStructCnt = 0x4000;
  v21 = outputStruct;
  v22 = IOConnectCallStructMethod(dword_10032A7B4, 0, v18, v20, outputStruct, &outputStructCnt);
  if ((_DWORD)v22)
  {
    v25 = v22;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013590();
    goto LABEL_22;
  }
  if (outputStructCnt <= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000133E0();
  }
  else
  {
    v23 = *(unsigned int *)outputStruct;
    if (outputStructCnt == v23 + 4)
    {
      v24 = CFDataCreate(kCFAllocatorDefault, outputStruct + 4, v23);
      if (v24)
      {
        v25 = 0;
        *a9 = v24;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          sub_100013470();
        v25 = 4294967291;
      }
      goto LABEL_22;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013500();
  }
  v25 = 4294967290;
LABEL_22:
  free(v18);
  free(v21);
LABEL_23:
  sub_10000B1F8((uint64_t)"SSEAuthorizeAndSignECommerceBlob", v25, 0, (uint64_t)&v32, 0, v26, v27, v28);
  return v25;
}

uint64_t sub_10000C6B8()
{
  if (qword_10032A818 != -1)
    dispatch_once(&qword_10032A818, &stru_1002E50D8);
  if (qword_10032A810)
    return (uint64_t)objc_msgSend((id)qword_10032A810, "prepare");
  else
    return 4294967290;
}

uint64_t sub_10000C708(int *a1, unint64_t a2, _QWORD *a3, _DWORD *a4)
{
  id v8;
  int v9;
  int v10;
  unsigned int *v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  NSData *v15;
  uint64_t v16;

  v8 = +[NSMutableArray array](NSMutableArray, "array");
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013860();
    goto LABEL_32;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000138F0();
    goto LABEL_32;
  }
  if ((unint64_t)a1 > a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013980();
    goto LABEL_32;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013A10();
    goto LABEL_32;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013AA0();
LABEL_32:
    v16 = 4294967292;
    goto LABEL_16;
  }
  if ((unint64_t)a1 < a2)
  {
    if (a2 - (unint64_t)a1 <= 3)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100013B30();
LABEL_21:
      v16 = 4294967290;
      goto LABEL_16;
    }
    v9 = *a1;
    if (*a1)
    {
      v10 = 0;
      v11 = (unsigned int *)(a1 + 1);
      while (a2 - (unint64_t)v11 > 3)
      {
        v14 = *v11;
        v12 = v11 + 1;
        v13 = v14;
        if ((uint64_t)(a2 - (_QWORD)v12) < v14)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_100013C50();
          goto LABEL_21;
        }
        v15 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v12, v13);
        objc_msgSend(v8, "addObject:", v15);

        v11 = (_DWORD *)((char *)v12 + v13);
        v10 += v13 + 4;
        if (!--v9)
          goto LABEL_15;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100013BC0();
      goto LABEL_21;
    }
  }
  v10 = 0;
LABEL_15:
  v16 = 0;
  *a3 = v8;
  *a4 = v10;
LABEL_16:

  return v16;
}

uint64_t SSEAuthorizeAndSignAPDU(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, CFDataRef *a9)
{
  UInt8 *v17;
  UInt8 *v18;
  uint64_t v19;
  size_t v20;
  UInt8 *v21;
  uint64_t v22;
  CFIndex v23;
  CFDataRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  UInt8 *outputStruct;
  size_t outputStructCnt;
  int v32;
  CFRange v33;
  CFRange v34;
  CFRange v35;
  CFRange v36;
  CFRange v37;
  CFRange v38;

  v32 = a3;
  outputStructCnt = 0;
  if (a1 != 8 && !a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013CE0();
    goto LABEL_41;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013D70();
    goto LABEL_41;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013E00();
    goto LABEL_41;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013E90();
    goto LABEL_41;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013F20();
    goto LABEL_41;
  }
  if (!a8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100013FB0();
    goto LABEL_41;
  }
  if (!a9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100014040();
LABEL_41:
    v25 = 4294967292;
    goto LABEL_26;
  }
  v17 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xE7B35AA9uLL);
  if (!v17)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000140D0();
    goto LABEL_47;
  }
  v18 = v17;
  outputStruct = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x939AC92CuLL);
  if (!outputStruct)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100014160();
    free(v18);
LABEL_47:
    v25 = 4294967291;
    goto LABEL_26;
  }
  v19 = sub_10000AC40();
  if ((_DWORD)v19)
  {
    v25 = v19;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100014790();
    goto LABEL_73;
  }
  *(_DWORD *)v18 = 1397966179;
  *((_WORD *)v18 + 2) = 31;
  *((_DWORD *)v18 + 2) = a1;
  if (a1 != 8)
  {
    if ((unint64_t)CFDataGetLength(a2) >= 0x41)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100014700();
      goto LABEL_72;
    }
    v33.length = CFDataGetLength(a2);
    v33.location = 0;
    CFDataGetBytes(a2, v33, v18 + 16);
    *((_DWORD *)v18 + 3) = CFDataGetLength(a2);
  }
  *((_DWORD *)v18 + 20) = a3;
  if ((unint64_t)CFDataGetLength(a4) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000141F0();
    goto LABEL_72;
  }
  v34.length = CFDataGetLength(a4);
  v34.location = 0;
  CFDataGetBytes(a4, v34, v18 + 84);
  if (CFDataGetLength(a5) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100014670();
    goto LABEL_72;
  }
  v35.length = CFDataGetLength(a5);
  v35.location = 0;
  CFDataGetBytes(a5, v35, v18 + 108);
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000145E0();
    goto LABEL_72;
  }
  v36.length = CFDataGetLength(a6);
  v36.location = 0;
  CFDataGetBytes(a6, v36, v18 + 116);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100014550();
    goto LABEL_72;
  }
  v37.length = CFDataGetLength(a7);
  v37.location = 0;
  CFDataGetBytes(a7, v37, v18 + 124);
  if ((unint64_t)CFDataGetLength(a8) >= 0x3F79)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100014280();
LABEL_72:
    v25 = 4294967292;
LABEL_73:
    v21 = outputStruct;
    goto LABEL_25;
  }
  *((_DWORD *)v18 + 33) = CFDataGetLength(a8);
  v38.length = CFDataGetLength(a8);
  v38.location = 0;
  CFDataGetBytes(a8, v38, v18 + 136);
  v20 = *((unsigned int *)v18 + 33) + 136;
  outputStructCnt = 0x4000;
  v21 = outputStruct;
  v22 = IOConnectCallStructMethod(dword_10032A7B4, 0, v18, v20, outputStruct, &outputStructCnt);
  if ((_DWORD)v22)
  {
    v25 = v22;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000144C0();
    goto LABEL_25;
  }
  if (outputStructCnt <= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100014310();
  }
  else
  {
    v23 = *(unsigned int *)outputStruct;
    if (outputStructCnt == v23 + 4)
    {
      v24 = CFDataCreate(kCFAllocatorDefault, outputStruct + 4, v23);
      if (v24)
      {
        v25 = 0;
        *a9 = v24;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          sub_1000143A0();
        v25 = 4294967291;
      }
      goto LABEL_25;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100014430();
  }
  v25 = 4294967290;
LABEL_25:
  free(v18);
  free(v21);
LABEL_26:
  sub_10000B1F8((uint64_t)"SSEAuthorizeAndSignAPDU", v25, 0, (uint64_t)&v32, 0, v26, v27, v28);
  return v25;
}

uint64_t SSEGetActivationTimeout(int a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, unsigned __int16 *a6, const __CFData **a7)
{
  uint64_t v14;
  uint64_t v15;
  const __CFData *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v22;
  int v23;
  uint64_t outputStruct;
  __int16 v25;
  _BYTE inputStruct[68];
  CFRange v27;
  CFRange v28;
  CFRange v29;
  CFRange v30;

  v23 = a1;
  memset(inputStruct, 0, sizeof(inputStruct));
  v25 = 0;
  outputStruct = 0;
  v22 = 0;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100014820();
    goto LABEL_39;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000148B0();
    goto LABEL_39;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100014940();
    goto LABEL_39;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000149D0();
    goto LABEL_39;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100014A60();
    goto LABEL_39;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100014AF0();
    goto LABEL_39;
  }
  v14 = sub_10000AC40();
  if (!(_DWORD)v14)
  {
    *(_DWORD *)inputStruct = 1397966179;
    *(_WORD *)&inputStruct[4] = 4;
    *(_DWORD *)&inputStruct[8] = a1;
    if ((unint64_t)CFDataGetLength(a2) >= 0x19)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100014B80();
    }
    else
    {
      v27.length = CFDataGetLength(a2);
      v27.location = 0;
      CFDataGetBytes(a2, v27, (UInt8 *)((unint64_t)inputStruct | 0xC));
      if (CFDataGetLength(a3) == 8)
      {
        v28.length = CFDataGetLength(a3);
        v28.location = 0;
        CFDataGetBytes(a3, v28, &inputStruct[36]);
        if (CFDataGetLength(a4) == 8)
        {
          v29.length = CFDataGetLength(a4);
          v29.location = 0;
          CFDataGetBytes(a4, v29, &inputStruct[44]);
          if (CFDataGetLength(a5) == 8)
          {
            v30.length = CFDataGetLength(a5);
            v30.location = 0;
            CFDataGetBytes(a5, v30, &inputStruct[52]);
            *(_QWORD *)&inputStruct[60] = 0;
            v22 = 10;
            v15 = IOConnectCallStructMethod(dword_10032A7B4, 0, inputStruct, 0x44uLL, &outputStruct, &v22);
            if ((_DWORD)v15)
            {
              v20 = v15;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                sub_100014D30();
            }
            else if (v22 == 10)
            {
              v16 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&outputStruct + 2, 8);
              *a7 = v16;
              if (v16)
              {
                v20 = 0;
                *a6 = outputStruct;
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  sub_100014C10();
                v20 = 4294967291;
              }
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                sub_100014CA0();
              v20 = 4294967290;
            }
            goto LABEL_16;
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_100014DC0();
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_100014E50();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_100014EE0();
      }
    }
LABEL_39:
    v20 = 4294967292;
    goto LABEL_16;
  }
  v20 = v14;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_100014F70();
LABEL_16:
  sub_10000B1F8((uint64_t)"SSEGetActivationTimeout", v20, 0, (uint64_t)&v23, (unint64_t)inputStruct | 0xC, v17, v18, v19);
  return v20;
}

uint64_t SSEUseEntangledAuthorizationRandom(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v10 = 0;
  v9 = 0;
  v2 = sub_10000AC40();
  if ((_DWORD)v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100015090();
  }
  else
  {
    strcpy((char *)&v9, "cESS!");
    v10 = a1;
    v3 = IOConnectCallStructMethod(dword_10032A7B4, 0, &v9, 9uLL, 0, 0);
    if ((_DWORD)v3)
    {
      v8 = v3;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100015000();
      v2 = v8;
    }
  }
  sub_10000B1F8((uint64_t)"SSEUseEntangledAuthorizationRandom", v2, 0, 0, 0, v4, v5, v6);
  return v2;
}

uint64_t SSEGetAuthorizationRandom(int a1, const __CFData *a2, const __CFData **a3, const __CFData **a4)
{
  uint64_t v8;
  uint64_t v9;
  CFDataRef v10;
  const __CFData *v11;
  const __CFData *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t outputStructCnt;
  int v19;
  _QWORD outputStruct[2];
  uint64_t v21;
  _OWORD inputStruct[3];
  CFRange v23;

  v19 = a1;
  memset(inputStruct, 0, 44);
  outputStruct[0] = 0;
  outputStruct[1] = 0;
  v21 = 0;
  outputStructCnt = 0;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100015120();
    goto LABEL_22;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000151B0();
    goto LABEL_22;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100015240();
    goto LABEL_22;
  }
  v8 = sub_10000AC40();
  if ((_DWORD)v8)
  {
    v16 = v8;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000155A0();
    goto LABEL_11;
  }
  LODWORD(inputStruct[0]) = 1397966179;
  WORD2(inputStruct[0]) = 5;
  DWORD2(inputStruct[0]) = a1;
  if ((unint64_t)CFDataGetLength(a2) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000152D0();
LABEL_22:
    v16 = 4294967292;
    goto LABEL_11;
  }
  v23.length = CFDataGetLength(a2);
  v23.location = 0;
  CFDataGetBytes(a2, v23, (UInt8 *)((unint64_t)inputStruct | 0xC));
  *(_QWORD *)((char *)&inputStruct[2] + 4) = 0;
  outputStructCnt = 24;
  v9 = IOConnectCallStructMethod(dword_10032A7B4, 0, inputStruct, 0x2CuLL, outputStruct, &outputStructCnt);
  if ((_DWORD)v9)
  {
    v16 = v9;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100015510();
  }
  else
  {
    if (outputStructCnt == 24)
    {
      v10 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)outputStruct, 16);
      if (v10)
      {
        v11 = v10;
        v12 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&v21, 8);
        if (v12)
        {
          v16 = 0;
          *a3 = v11;
          *a4 = v12;
          goto LABEL_11;
        }
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          sub_1000153F0();
        CFRelease(v11);
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_100015360();
      }
      v16 = 4294967291;
      goto LABEL_11;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100015480();
    v16 = 4294967290;
  }
LABEL_11:
  sub_10000B1F8((uint64_t)"SSEGetAuthorizationRandom", v16, 1, (uint64_t)&v19, (unint64_t)inputStruct | 0xC, v13, v14, v15);
  return v16;
}

uint64_t SSEGetEntangledAuthorizationRandom(int a1, const __CFData *a2, char a3, CFDataRef *a4, CFDataRef *a5)
{
  UInt8 *v10;
  UInt8 *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  CFDataRef v16;
  CFDataRef v17;
  CFIndex v18;
  CFDataRef v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v25;
  int v26;
  _BYTE inputStruct[37];
  CFRange v28;

  v26 = a1;
  memset(inputStruct, 0, sizeof(inputStruct));
  v25 = 0;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100015630();
    goto LABEL_23;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000156C0();
    goto LABEL_23;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100015750();
LABEL_23:
    v20 = 4294967292;
    goto LABEL_16;
  }
  v10 = (UInt8 *)malloc_type_calloc(0x108uLL, 1uLL, 0x2AD6A872uLL);
  if (v10)
  {
    v11 = v10;
    v12 = sub_10000AC40();
    if ((_DWORD)v12)
    {
      v20 = v12;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100015CF0();
      goto LABEL_15;
    }
    strcpy(inputStruct, "cESS\"");
    *(_DWORD *)&inputStruct[8] = a1;
    if ((unint64_t)CFDataGetLength(a2) >= 0x19)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100015870();
      v20 = 4294967292;
      goto LABEL_15;
    }
    v28.length = CFDataGetLength(a2);
    v28.location = 0;
    CFDataGetBytes(a2, v28, (UInt8 *)((unint64_t)inputStruct | 0xC));
    inputStruct[36] = a3;
    v25 = 264;
    v13 = IOConnectCallStructMethod(dword_10032A7B4, 0, inputStruct, 0x25uLL, v11, &v25);
    if ((_DWORD)v13)
    {
      v20 = v13;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100015C60();
      goto LABEL_15;
    }
    v14 = v25;
    if (v25 <= 7)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100015900();
    }
    else if (v25 >= 0x109)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100015990();
    }
    else
    {
      v15 = *(unsigned int *)v11;
      if (v25 - 8 >= v15)
      {
        v16 = CFDataCreate(kCFAllocatorDefault, v11 + 8, v15);
        if (!v16)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_100015AB0();
          v20 = 4294967291;
          goto LABEL_15;
        }
        v17 = v16;
        v18 = *((unsigned int *)v11 + 1);
        if ((uint64_t)(v14 - (*(unsigned int *)v11 + 8)) < v18)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_100015B40();
          v20 = 4294967290;
        }
        else
        {
          v19 = CFDataCreate(kCFAllocatorDefault, &v11[*(unsigned int *)v11 + 8], v18);
          if (v19)
          {
            v20 = 0;
            *a4 = v17;
            *a5 = v19;
LABEL_15:
            free(v11);
            goto LABEL_16;
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_100015BD0();
          v20 = 4294967291;
        }
        CFRelease(v17);
        goto LABEL_15;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100015A20();
    }
    v20 = 4294967290;
    goto LABEL_15;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_1000157E0();
  v20 = 4294967291;
LABEL_16:
  sub_10000B1F8((uint64_t)"SSEGetEntangledAuthorizationRandom", v20, 1, (uint64_t)&v26, (unint64_t)inputStruct | 0xC, v21, v22, v23);
  return v20;
}

uint64_t SSEEffaceAuthorizationRandom()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t inputStruct;

  inputStruct = 0;
  v0 = sub_10000AC40();
  if ((_DWORD)v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100015E10();
  }
  else
  {
    LODWORD(inputStruct) = 1397966179;
    WORD2(inputStruct) = 6;
    v1 = IOConnectCallStructMethod(dword_10032A7B4, 0, &inputStruct, 8uLL, 0, 0);
    if ((_DWORD)v1)
    {
      v6 = v1;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100015D80();
      v0 = v6;
    }
  }
  sub_10000B1F8((uint64_t)"SSEEffaceAuthorizationRandom", v0, 1, 0, 0, v2, v3, v4);
  return v0;
}

uint64_t SSEGetSignedDeviceData(const __CFData *a1, CFDataRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFDataRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t outputStructCnt;
  _OWORD outputStruct[16];
  int v14;
  _DWORD inputStruct[8];
  uint64_t v16;
  CFRange v17;

  v16 = 0;
  memset(inputStruct, 0, sizeof(inputStruct));
  v14 = 0;
  memset(outputStruct, 0, sizeof(outputStruct));
  outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100015EA0();
    goto LABEL_19;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100015F30();
    goto LABEL_19;
  }
  v4 = sub_10000AC40();
  if ((_DWORD)v4)
  {
    v10 = v4;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100016290();
    goto LABEL_10;
  }
  inputStruct[0] = 1397966179;
  LOWORD(inputStruct[1]) = 16;
  if ((unint64_t)CFDataGetLength(a1) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100015FC0();
LABEL_19:
    v10 = 4294967292;
    goto LABEL_10;
  }
  v17.length = CFDataGetLength(a1);
  v17.location = 0;
  CFDataGetBytes(a1, v17, (UInt8 *)&inputStruct[2]);
  v16 = 0;
  outputStructCnt = 260;
  v5 = IOConnectCallStructMethod(dword_10032A7B4, 0, inputStruct, 0x28uLL, outputStruct, &outputStructCnt);
  if (!(_DWORD)v5)
  {
    if (outputStructCnt <= 3)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100016050();
    }
    else
    {
      if (outputStructCnt == LODWORD(outputStruct[0]) + 4)
      {
        v6 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)outputStruct + 4, LODWORD(outputStruct[0]));
        if (v6)
        {
          v10 = 0;
          *a2 = v6;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_1000160E0();
          v10 = 4294967291;
        }
        goto LABEL_10;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100016170();
    }
    v10 = 4294967290;
    goto LABEL_10;
  }
  v10 = v5;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_100016200();
LABEL_10:
  sub_10000B1F8((uint64_t)"SSEGetSignedDeviceData", v10, 0, 0, (uint64_t)&inputStruct[2], v7, v8, v9);
  return v10;
}

uint64_t sub_10000DCBC()
{
  if (qword_10032A818 != -1)
    dispatch_once(&qword_10032A818, &stru_1002E50D8);
  if (qword_10032A810)
    return (uint64_t)objc_msgSend((id)qword_10032A810, "issueNewCertificate");
  else
    return 4294967290;
}

uint64_t SSEEvaluateSecureElementACL(const __CFData *a1, int a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, const __CFString *a6, const __CFData *a7, unsigned int a8, const __CFData **a9, const __CFData **a10)
{
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t Length;
  int v23;
  unint64_t v24;
  char *v25;
  UInt8 *v26;
  unint64_t v27;
  unint64_t v28;
  UInt8 *v29;
  unint64_t v30;
  unint64_t v31;
  UInt8 *v32;
  unint64_t v33;
  unint64_t v34;
  UInt8 *v35;
  unint64_t v36;
  unint64_t v37;
  UInt8 *v38;
  uint64_t v39;
  size_t v40;
  unint64_t v41;
  CFDataRef v42;
  const __CFData *v43;
  CFIndex v44;
  const __CFData *v45;
  uint64_t v46;
  UInt8 *outputStruct;
  size_t outputStructCnt;
  CFRange v50;
  CFRange v51;
  CFRange v52;
  CFRange v53;
  CFRange v54;
  CFRange v55;

  outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100016320();
    return 4294967292;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000163B0();
    return 4294967292;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100016440();
    return 4294967292;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000164D0();
    return 4294967292;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100016560();
    return 4294967292;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000165F0();
    return 4294967292;
  }
  if (a8 - 4 <= 0xFFFFFFFC)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100016680();
    return 4294967292;
  }
  if (!a9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100016710();
    return 4294967292;
  }
  if (!a10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000167A0();
    return 4294967292;
  }
  if (a8 < 2 || (v18 = SSEIsFeatureSupported(32), !(_DWORD)v18))
  {
    v19 = (char *)malloc_type_calloc(0x4000uLL, 1uLL, 0x29CD736uLL);
    if (v19)
    {
      v20 = v19;
      outputStruct = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xAE84491FuLL);
      if (outputStruct)
      {
        v21 = sub_10000AC40();
        if ((_DWORD)v21)
        {
          v46 = v21;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_100017130();
          goto LABEL_73;
        }
        *(_DWORD *)v20 = 1397966179;
        v20[4] = 27;
        v20[5] = a8 > 1;
        Length = CFDataGetLength(a1);
        if (Length >= 0x41)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_100016950();
        }
        else
        {
          v23 = Length;
          v50.location = 0;
          v50.length = Length;
          CFDataGetBytes(a1, v50, (UInt8 *)v20 + 12);
          *((_DWORD *)v20 + 2) = v23;
          *((_DWORD *)v20 + 19) = a2;
          v24 = CFDataGetLength(a3);
          if (v24 >= 0x19)
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              sub_1000169E0();
          }
          else
          {
            v51.length = v24;
            v51.location = 0;
            CFDataGetBytes(a3, v51, (UInt8 *)v20 + 80);
            v25 = v20 + 0x4000;
            if (a8 < 2)
            {
              v26 = (UInt8 *)(v20 + 120);
            }
            else
            {
              v20[120] = a8;
              v26 = (UInt8 *)(v20 + 121);
            }
            v27 = CFDataGetLength(a4);
            if (v25 - (char *)v26 < v27)
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                sub_100016A70();
            }
            else
            {
              v28 = v27;
              *((_DWORD *)v20 + 26) = v27;
              v52.location = 0;
              v52.length = v27;
              CFDataGetBytes(a4, v52, v26);
              v29 = &v26[v28];
              v30 = CFDataGetLength(a5);
              if (v25 - (char *)v29 < v30)
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  sub_100016B00();
              }
              else
              {
                v31 = v30;
                *((_DWORD *)v20 + 27) = v30;
                v53.location = 0;
                v53.length = v30;
                CFDataGetBytes(a5, v53, v29);
                v32 = &v29[v31];
                v33 = CFStringGetLength(a6);
                if (v25 - (char *)v32 >= v33)
                {
                  v34 = v33;
                  v54.location = 0;
                  v54.length = v33;
                  if (CFStringGetBytes(a6, v54, 0x8000100u, 0, 0, v32, v25 - (char *)v32, 0) == v33)
                  {
                    *((_DWORD *)v20 + 28) = v34;
                    v35 = &v32[v34];
                    v36 = CFDataGetLength(a7);
                    if (v25 - (char *)v35 < v36)
                    {
                      v38 = outputStruct;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        sub_100016C20();
                      v46 = 4294967292;
                      goto LABEL_33;
                    }
                    v37 = v36;
                    *((_DWORD *)v20 + 29) = v36;
                    v55.location = 0;
                    v55.length = v36;
                    CFDataGetBytes(a7, v55, v35);
                    outputStructCnt = 0x4000;
                    v38 = outputStruct;
                    v39 = IOConnectCallStructMethod(dword_10032A7B4, 0, v20, &v35[v37] - (UInt8 *)v20, outputStruct, &outputStructCnt);
                    if ((_DWORD)v39)
                    {
                      v46 = v39;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        sub_100017010();
                      goto LABEL_33;
                    }
                    v40 = outputStructCnt;
                    if (outputStructCnt <= 7)
                    {
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        sub_100016CB0();
                    }
                    else if (outputStructCnt > 0x4000)
                    {
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        sub_100016D40();
                    }
                    else
                    {
                      v41 = *(unsigned int *)outputStruct;
                      if (outputStructCnt - 8 >= v41)
                      {
                        v42 = CFDataCreate(kCFAllocatorDefault, outputStruct + 8, v41);
                        if (!v42)
                        {
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                            sub_100016E60();
                          v46 = 4294967291;
                          goto LABEL_33;
                        }
                        v43 = v42;
                        v44 = *((unsigned int *)outputStruct + 1);
                        if ((uint64_t)(v40 - (*(unsigned int *)outputStruct + 8)) < v44)
                        {
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                            sub_100016EF0();
                          v46 = 4294967290;
                        }
                        else
                        {
                          v45 = CFDataCreate(kCFAllocatorDefault, &outputStruct[*(unsigned int *)outputStruct + 8], v44);
                          if (v45)
                          {
                            v46 = 0;
                            *a9 = v43;
                            *a10 = v45;
LABEL_33:
                            free(v20);
                            free(v38);
                            return v46;
                          }
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                            sub_100016F80();
                          v46 = 4294967291;
                        }
                        CFRelease(v43);
                        goto LABEL_33;
                      }
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        sub_100016DD0();
                    }
                    v46 = 4294967290;
                    goto LABEL_33;
                  }
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    sub_1000170A0();
                  v46 = 4294967290;
LABEL_73:
                  v38 = outputStruct;
                  goto LABEL_33;
                }
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  sub_100016B90();
              }
            }
          }
        }
        v46 = 4294967292;
        goto LABEL_73;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_1000168C0();
      free(v20);
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_100016830();
    }
    return 4294967291;
  }
  v46 = v18;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_1000171C0();
  return v46;
}

uint64_t SSESetSEPubKey(const __CFData *a1, const __CFData *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t Length;
  NSMutableData *v8;
  unint64_t v9;
  unsigned int v10;
  NSMutableData *v11;
  uint64_t v12;
  uint64_t v13;
  UInt8 buffer[8];
  uint64_t v16;
  uint64_t v17;
  int v18;
  CFRange v19;

  *(_QWORD *)buffer = 0;
  v16 = 0;
  v18 = 0;
  v17 = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017250();
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000172E0();
    return 4294967292;
  }
  v4 = (char *)malloc_type_calloc(0x4000uLL, 1uLL, 0xB0967022uLL);
  if (v4)
  {
    v5 = v4;
    v6 = sub_10000AC40();
    if ((_DWORD)v6)
    {
      v13 = v6;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100017644();
    }
    else
    {
      Length = CFDataGetLength(a1);
      if (Length >= 0x19)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          sub_100017400();
      }
      else
      {
        v19.length = Length;
        v19.location = 0;
        CFDataGetBytes(a1, v19, buffer);
        if (CFDataGetLength(a2) >= (uint64_t)&_mh_execute_header)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_100017490();
        }
        else
        {
          v18 = CFDataGetLength(a2);
          v8 = +[NSMutableData dataWithBytes:length:](NSMutableData, "dataWithBytes:length:", buffer, 28);
          -[NSMutableData appendData:](v8, "appendData:", a2);
          if (!(-[NSMutableData length](v8, "length") >> 32))
          {
            LODWORD(v9) = 0;
            while (1)
            {
              strcpy(v5, "cESS%");
              v10 = (-[NSMutableData length](v8, "length") - v9) >> 2 > 0xFFA
                  ? 16364
                  : -[NSMutableData length](v8, "length") - v9;
              *((_DWORD *)v5 + 2) = -[NSMutableData length](v8, "length");
              *((_DWORD *)v5 + 3) = v9;
              *((_DWORD *)v5 + 4) = v10;
              v11 = objc_retainAutorelease(v8);
              __memcpy_chk(v5 + 20, (char *)-[NSMutableData bytes](v11, "bytes") + v9, v10, 16364);
              v12 = IOConnectCallStructMethod(dword_10032A7B4, 0, v5, v10 + 20, 0, 0);
              if ((_DWORD)v12)
                break;
              v9 = v9 + v10;
              if (-[NSMutableData length](v11, "length") <= v9)
              {

                v13 = 0;
                goto LABEL_15;
              }
            }
            v13 = v12;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              sub_1000175B0();

            goto LABEL_15;
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_100017520();

        }
      }
      v13 = 4294967292;
    }
LABEL_15:
    free(v5);
    return v13;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_100017370();
  return 4294967291;
}

uint64_t SSEGetAuthKeySharingState(const __CFData *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t outputStructCnt;
  int outputStruct;
  _BYTE inputStruct[12];
  uint64_t v11;
  uint64_t v12;
  int v13;
  CFRange v14;

  v11 = 0;
  *(_QWORD *)&inputStruct[4] = 0;
  v13 = 0;
  v12 = 0;
  outputStruct = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000176D4();
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017764();
    return 4294967292;
  }
  v4 = sub_10000AC40();
  if (!(_DWORD)v4)
  {
    strcpy(inputStruct, "cESS&");
    if ((unint64_t)CFDataGetLength(a1) < 0x19)
    {
      v14.length = CFDataGetLength(a1);
      v14.location = 0;
      CFDataGetBytes(a1, v14, &inputStruct[8]);
      outputStructCnt = 4;
      v5 = IOConnectCallStructMethod(dword_10032A7B4, 0, inputStruct, 0x20uLL, &outputStruct, &outputStructCnt);
      if ((_DWORD)v5)
      {
        v6 = v5;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          sub_100017914();
      }
      else if (outputStructCnt == 4)
      {
        v6 = 0;
        *a2 = outputStruct;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          sub_100017884();
        return 4294967290;
      }
      return v6;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000177F4();
    return 4294967292;
  }
  v6 = v4;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_1000179A4();
  return v6;
}

uint64_t SSEPerformAuthKeySharing(const __CFData *a1, const __CFData *a2, const __CFData *a3, CFDataRef *a4, CFDataRef *a5)
{
  UInt8 *v10;
  UInt8 *v11;
  UInt8 *v12;
  UInt8 *v13;
  uint64_t v14;
  unint64_t Length;
  unint64_t v16;
  UInt8 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  CFDataRef v23;
  CFDataRef v24;
  CFIndex v25;
  CFDataRef v26;
  uint64_t v27;
  size_t outputStructCnt;
  CFRange v30;
  CFRange v31;
  CFRange v32;

  outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017A34();
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017AC4();
    return 4294967292;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017B54();
    return 4294967292;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017BE4();
    return 4294967292;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017C74();
    return 4294967292;
  }
  v10 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xD2063E45uLL);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017D04();
    return 4294967291;
  }
  v11 = v10;
  v12 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x43BFE140uLL);
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017D94();
    free(v11);
    return 4294967291;
  }
  v13 = v12;
  v14 = sub_10000AC40();
  if ((_DWORD)v14)
  {
    v27 = v14;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000183C4();
    goto LABEL_20;
  }
  strcpy((char *)v11, "cESS$");
  if ((unint64_t)CFDataGetLength(a1) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017E24();
    goto LABEL_47;
  }
  v30.length = CFDataGetLength(a1);
  v30.location = 0;
  CFDataGetBytes(a1, v30, v11 + 8);
  Length = CFDataGetLength(a2);
  if (Length >= 0x3FD9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017EB4();
    goto LABEL_47;
  }
  v16 = Length;
  *((_DWORD *)v11 + 8) = Length;
  v31.location = 0;
  v31.length = Length;
  CFDataGetBytes(a2, v31, v11 + 40);
  v17 = &v11[v16 + 40];
  v18 = CFDataGetLength(a3);
  if (v11 - v17 + 0x4000 < v18)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017F44();
LABEL_47:
    v27 = 4294967292;
    goto LABEL_20;
  }
  v19 = v18;
  *((_DWORD *)v11 + 9) = v18;
  v32.location = 0;
  v32.length = v18;
  CFDataGetBytes(a3, v32, v17);
  outputStructCnt = 0x4000;
  v20 = IOConnectCallStructMethod(dword_10032A7B4, 0, v11, &v17[v19] - v11, v13, &outputStructCnt);
  if ((_DWORD)v20)
  {
    v27 = v20;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100018334();
    goto LABEL_20;
  }
  v21 = outputStructCnt;
  if (outputStructCnt <= 7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100017FD4();
    goto LABEL_56;
  }
  if (outputStructCnt > 0x4000)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100018064();
    goto LABEL_56;
  }
  v22 = *(unsigned int *)v13;
  if (outputStructCnt - 8 < v22)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000180F4();
LABEL_56:
    v27 = 4294967290;
    goto LABEL_20;
  }
  v23 = CFDataCreate(kCFAllocatorDefault, v13 + 8, v22);
  if (!v23)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100018184();
    v27 = 4294967291;
    goto LABEL_20;
  }
  v24 = v23;
  v25 = *((unsigned int *)v13 + 1);
  if ((uint64_t)(v21 - (*(unsigned int *)v13 + 8)) < v25)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100018214();
    v27 = 4294967290;
    goto LABEL_66;
  }
  v26 = CFDataCreate(kCFAllocatorDefault, &v13[*(unsigned int *)v13 + 8], v25);
  if (!v26)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000182A4();
    v27 = 4294967291;
LABEL_66:
    CFRelease(v24);
    goto LABEL_20;
  }
  v27 = 0;
  *a4 = v24;
  *a5 = v26;
LABEL_20:
  free(v11);
  free(v13);
  return v27;
}

uint64_t SSEAuthorizeWithPIN(int a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, _DWORD *a7, CFDataRef *a8, CFDataRef *a9)
{
  return sub_10000B9D4(0, a1, a2, -1, a3, a4, a5, a6, 0, a7, a8, a9, 0, 0, 0);
}

uint64_t SSEGetActivationTimeout(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, unsigned __int16 *a5, const __CFData **a6)
{
  return SSEGetActivationTimeout(-1, a1, a2, a3, a4, a5, a6);
}

uint64_t SSEEvaluateSecureElementACL(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFString *a5, const __CFData *a6, unsigned int a7, const __CFData **a8, const __CFData **a9)
{
  return SSEEvaluateSecureElementACL(a1, -1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_10000FAB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  _QWORD *v7;
  NSObject *v8;
  _QWORD v9[5];
  _QWORD v10[5];

  if (a3 == -469794813)
  {
    v5 = (id)qword_10032A7C0;
    v6 = v5;
    if (!v5)
      v6 = dispatch_get_global_queue(21, 0);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10000FDBC;
    v9[3] = &unk_1002E5098;
    v9[4] = a4;
    v7 = v9;
    goto LABEL_10;
  }
  if (a3 == -469794814)
  {
    if (!byte_10032AC99)
    {
      v8 = dispatch_get_global_queue(21, 0);
      dispatch_async(v8, &stru_1002E50B8);

    }
    goto LABEL_14;
  }
  if (a3 != -469794815)
  {
LABEL_14:
    v5 = 0;
    goto LABEL_15;
  }
  v5 = (id)qword_10032A7B8;
  v6 = v5;
  if (!v5)
    v6 = dispatch_get_global_queue(21, 0);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10000FD98;
  v10[3] = &unk_1002E5098;
  v10[4] = a4;
  v7 = v10;
LABEL_10:
  dispatch_async(v6, v7);
  if (!v5)

LABEL_15:
}

void sub_10000FC40(id a1)
{
  char *v1;
  char *__lasts;
  size_t v3;
  char __str[1024];

  v3 = 1024;
  if (!sysctlbyname("kern.bootargs", __str, &v3, 0, 0))
  {
    __lasts = 0;
    v1 = strtok_r(__str, " \t", &__lasts);
    if (v1)
    {
      while (strcmp(v1, "rd=md0"))
      {
        v1 = strtok_r(0, " \t", &__lasts);
        if (!v1)
          return;
      }
      byte_10032A7EC = 1;
    }
  }
}

void sub_10000FD1C(id a1)
{
  void *v1;
  void *v2;
  uint64_t (*v3)(const __CFString *);
  uint64_t (*v4)(const __CFString *);

  v1 = dlopen("/usr/lib/libMobileGestalt.dylib", 1);
  if (v1)
  {
    v2 = v1;
    v3 = (uint64_t (*)(const __CFString *))dlsym(v1, "MGGetBoolAnswer");
    if (v3)
    {
      v4 = v3;
      byte_10032A7F8 = v3(CFSTR("0dnM19zBqLw5ZPhIo4GEkg"));
      byte_10032A7F9 = v4(CFSTR("InternalBuild"));
    }
    dlclose(v2);
  }
}

uint64_t sub_10000FD98()
{
  uint64_t result;

  result = qword_10032A7A0;
  if (qword_10032A7A0)
    return (*(uint64_t (**)(void))(qword_10032A7A0 + 16))();
  return result;
}

uint64_t sub_10000FDBC()
{
  uint64_t result;

  result = qword_10032A7A8;
  if (qword_10032A7A8)
    return (*(uint64_t (**)(void))(qword_10032A7A8 + 16))();
  return result;
}

const char *sub_10000FDDC(const char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const char *v9;
  tm *v10;
  FILE *v11;
  const char *v12;
  time_t v13;
  char v14[16];
  __int128 v15;

  if (qword_10032A808)
  {
    v9 = result;
    *(_OWORD *)v14 = 0u;
    v15 = 0u;
    v13 = time(0);
    v10 = localtime(&v13);
    strftime(v14, 0x20uLL, "%F %T (%z)", v10);
    v11 = (FILE *)qword_10032A808;
    v12 = getprogname();
    fprintf(v11, "%s [%s]: ", v14, v12);
    vfprintf((FILE *)qword_10032A808, v9, &a9);
    fputs("\n", (FILE *)qword_10032A808);
    return (const char *)fflush((FILE *)qword_10032A808);
  }
  return result;
}

uint64_t sub_10000FEC4(uint64_t result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t i;
  size_t outputStructCnt;
  __int128 outputStruct;
  __int128 v7;
  __int128 v8;
  uint64_t inputStruct;

  if (qword_10032A808)
  {
    v3 = (_DWORD *)result;
    inputStruct = 0x953534563;
    v7 = 0u;
    v8 = 0u;
    outputStruct = 0u;
    outputStructCnt = 48;
    result = IOConnectCallStructMethod(dword_10032A7B4, 0, &inputStruct, 8uLL, &outputStruct, &outputStructCnt);
    if (!(_DWORD)result)
    {
      if (v3)
        fprintf((FILE *)qword_10032A808, "\tuserID        = %u\n", *v3);
      if (a2)
      {
        fwrite("\tseid          = ", 0x11uLL, 1uLL, (FILE *)qword_10032A808);
        for (i = 0; i != 24; ++i)
          fprintf((FILE *)qword_10032A808, "%02x", *(unsigned __int8 *)(a2 + i));
        fputs("\n", (FILE *)qword_10032A808);
      }
      fprintf((FILE *)qword_10032A808, "\tsseKey hash   = %016llx\n", (_QWORD)outputStruct);
      fprintf((FILE *)qword_10032A808, "\tauthRand hash = %016llx\n", *((_QWORD *)&outputStruct + 1));
      fprintf((FILE *)qword_10032A808, "\tsubcounter    = %llu\n", (_QWORD)v7);
      fprintf((FILE *)qword_10032A808, "\tentropy hash  = %016llx\n", *((_QWORD *)&v7 + 1));
      fprintf((FILE *)qword_10032A808, "\tkeybag hash   = %016llx\n", (_QWORD)v8);
      fprintf((FILE *)qword_10032A808, "\tnoPasscodeCnt = %u\n", DWORD2(v8));
      return fflush((FILE *)qword_10032A808);
    }
  }
  return result;
}

void sub_100010054(id a1)
{
  Class Class;

  if (qword_10032A7F0 != -1)
    dispatch_once(&qword_10032A7F0, &stru_1002E5058);
  if ((byte_10032A7EC & 1) == 0)
  {
    sub_10000AC40();
    if (byte_10032A7C8)
    {
      if (qword_10032A828 != -1)
        dispatch_once(&qword_10032A828, &stru_1002E50F8);
      if (byte_10032A820 == 1)
      {
        if (dlopen("/usr/lib/libAppleSSEExt.dylib", 1))
        {
          Class = objc_getClass("BAASupport");
          qword_10032A810 = (uint64_t)Class;
          if (!Class)
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              sub_100019804();
            Class = (Class)qword_10032A810;
          }
          -[objc_class setDelegate:](Class, "setDelegate:", objc_opt_class(BAADelegateImpl));
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_100019774();
        }
      }
    }
  }
}

void sub_100010174(id a1)
{
  NSProcessInfo *v1;
  NSString *v2;
  unsigned int v3;
  void *v4;
  void *v5;
  uint64_t (*v6)(const CFAllocatorRef);
  uint64_t v7;
  const void *v8;
  uint64_t (*v9)(const void *, const __CFString *, _QWORD);
  uint64_t (*v10)(const void *, const __CFString *, _QWORD);
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD v15[2];

  v1 = +[NSProcessInfo processInfo](NSProcessInfo, "processInfo");
  v2 = -[NSProcessInfo processName](v1, "processName");
  v3 = -[NSString isEqualToString:](v2, "isEqualToString:", CFSTR("nfcd"));

  if (v3)
  {
    byte_10032A820 = 1;
  }
  else
  {
    v4 = dlopen("/System/Library/Frameworks/Security.framework/Security", 1);
    if (v4)
    {
      v5 = v4;
      v6 = (uint64_t (*)(const CFAllocatorRef))dlsym(v4, "SecTaskCreateFromSelf");
      if (v6)
      {
        v7 = v6(kCFAllocatorDefault);
        if (v7)
        {
          v8 = (const void *)v7;
          v9 = (uint64_t (*)(const void *, const __CFString *, _QWORD))dlsym(v5, "SecTaskCopyValueForEntitlement");
          if (v9)
          {
            v10 = v9;
            v11 = (void *)v9(v8, CFSTR("com.apple.private.applesse.allow"), 0);
            v12 = (void *)v10(v8, CFSTR("com.apple.private.applesse.baa"), 0);
            v13 = objc_opt_class(NSNumber);
            if ((objc_opt_isKindOfClass(v11, v13) & 1) != 0)
            {
              if (objc_msgSend(v11, "BOOLValue"))
              {
                v14 = objc_opt_class(NSNumber);
                if ((objc_opt_isKindOfClass(v12, v14) & 1) != 0)
                {
                  if (objc_msgSend(v12, "BOOLValue"))
                    byte_10032A820 = 1;
                }
              }
            }

          }
          CFRelease(v8);
        }
      }
      dlclose(v5);
    }
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 67109120;
    v15[1] = byte_10032A820;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "isEntitledForBAA(): entitled = %u", (uint8_t *)v15, 8u);
  }
}

void sub_1000103A4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x30u);
}

void sub_100010410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000104A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000105C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000106E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000109B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010AD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010B60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010C80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010D10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100010FE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000112B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000113D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000114F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000116A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000117C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000118E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011CD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011DF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100011FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000120C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000121E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000124B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000125D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000126F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000128A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000129C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012AE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012DB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012ED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012F60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100012FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000131A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000132C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000133E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000136B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000137D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000138F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013BC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013E90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100013FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000140D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000141F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000143A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000144C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000145E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000148B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000149D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014AF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100014F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000151B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000152D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000153F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000155A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000156C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000157E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015F30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100015FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000160E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000163B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000164D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000165F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000167A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000168C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000169E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016A70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016CB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100016F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000170A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000171C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000172E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000175B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000103F0();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, 2u);
  sub_1000103E8();
}

void sub_100017644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000176D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000177F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000179A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017A34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017C74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100017FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000180F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000182A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000183C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000184E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000187B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000188D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000189F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018A84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018B14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018CC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018E74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100018F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100019024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000190B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100019144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000191D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100019264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000192F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100019384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100019414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000194A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100019534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000195C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100019654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_1000196E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000103C8();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100019774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void sub_100019804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_100010384();
  sub_1000103B4();
  sub_1000103A4((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  sub_1000103E8();
}

void *acm_mem_alloc_data(size_t size)
{
  void *result;

  result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result)
    qword_10032A838 += size;
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  uint64_t v4;

  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    v4 = qword_10032A838 - __n;
    if (qword_10032A838 < __n)
      v4 = 0;
    qword_10032A838 = v4;
  }
}

void *acm_mem_alloc(size_t size)
{
  void *result;

  result = malloc_type_calloc(1uLL, size, 0xDB9956F0uLL);
  if (result)
    qword_10032A840 += size;
  return result;
}

void acm_mem_free(void *a1, rsize_t __n)
{
  uint64_t v4;

  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    v4 = qword_10032A840 - __n;
    if (qword_10032A840 < __n)
      v4 = 0;
    qword_10032A840 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  const char *v6;
  const char *v7;
  const char *v8;

  if (a2)
    qword_10032A830 += a3;
  if (gACMLoggingLevel <= 0x1Eu)
  {
    v6 = "NULL";
    if (result)
      v7 = result;
    else
      v7 = "NULL";
    if (a4)
      v8 = a4;
    else
      v8 = "NULL";
    if (a6)
      v6 = a6;
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, qword_10032A830, 0, qword_10032A838, qword_10032A840, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  uint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;

  if (a2)
  {
    v6 = qword_10032A830 - a3;
    if (qword_10032A830 < a3)
      v6 = 0;
    qword_10032A830 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    v7 = "NULL";
    if (result)
      v8 = result;
    else
      v8 = "NULL";
    if (a4)
      v9 = a4;
    else
      v9 = "NULL";
    if (a6)
      v7 = a6;
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, qword_10032A830, 0, qword_10032A838, qword_10032A840, v9, a5, v7);
  }
  return result;
}

uint64_t GetSerializedVerifyPolicySize(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, _DWORD *a5, unsigned int a6, _QWORD *a7)
{
  uint64_t result;
  size_t v12;
  size_t v13;
  unsigned int v14;

  v14 = 0;
  result = 4294967293;
  if (a1 && __s1 && a7)
  {
    v12 = strnlen(__s1, 0x81uLL);
    if (v12 > 0x80)
    {
      return 4294967293;
    }
    else
    {
      v13 = v12;
      result = sub_100019B98(a5, a6, &v14);
      if (!(_DWORD)result)
        *a7 = v13 + v14 + 26;
    }
  }
  return result;
}

uint64_t sub_100019B98(_DWORD *a1, unsigned int a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "getLengthOfParameters");
  if (a3)
  {
    *a3 = 0;
    v6 = 0;
    if (a2)
    {
      v7 = a2;
      while (1)
      {
        v8 = sub_10001A330(a1);
        if ((_DWORD)v8)
          break;
        v9 = v6 + 8;
        v10 = a1[4];
        v6 += v10 + 8;
        if (__CFADD__(v10, v9))
          goto LABEL_10;
        a1 += 6;
        if (!--v7)
          goto LABEL_9;
      }
      v11 = v8;
      v12 = 70;
    }
    else
    {
LABEL_9:
      v11 = 0;
      *a3 = v6;
      v12 = 10;
    }
  }
  else
  {
LABEL_10:
    v12 = 70;
    v11 = 4294967293;
  }
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "getLengthOfParameters", (int)v11);
  return v11;
}

uint64_t SerializeVerifyPolicy(_OWORD *a1, char *__s1, char a3, uint64_t a4, _DWORD *a5, unsigned int a6, _OWORD *a7, size_t *a8)
{
  uint64_t result;
  int v15;
  size_t v17;
  size_t v18;
  char *v19;
  size_t v20;
  unint64_t v21;

  v21 = 0;
  result = 4294967293;
  if (a1)
  {
    if (__s1)
    {
      if (a8)
      {
        if (a7)
        {
          if (a6 <= 0xA && (a5 != 0) == (a6 != 0))
          {
            v15 = a4;
            result = GetSerializedVerifyPolicySize((uint64_t)a1, __s1, 0, a4, a5, a6, &v21);
            if (!(_DWORD)result)
            {
              if (*a8 < v21)
                return 4294967293;
              *a7 = *a1;
              v17 = strnlen(__s1, 0x81uLL);
              if (v17 > 0x80)
              {
                return 4294967293;
              }
              else
              {
                v18 = v17;
                memcpy(a7 + 1, __s1, v17 + 1);
                v19 = (char *)a7 + v18;
                v19[17] = a3;
                *(_DWORD *)(v19 + 18) = v15;
                v20 = v18 + 22;
                result = sub_100019DC0((uint64_t)a5, a6, (uint64_t)a7, (uint64_t *)&v20);
                if (!(_DWORD)result)
                  *a8 = v20;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100019DC0(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  size_t v14;
  void *__src[2];
  size_t __n;

  LODWORD(v6) = a2;
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "serializeParameters");
  v8 = 70;
  v9 = 4294967293;
  if (a3 && a4)
  {
    v10 = *a4;
    *(_DWORD *)(a3 + v10) = v6;
    v11 = v10 + 4;
    if ((_DWORD)v6)
    {
      v6 = v6;
      while (1)
      {
        *(_OWORD *)__src = *(_OWORD *)a1;
        __n = *(_QWORD *)(a1 + 16);
        v12 = sub_10001A330(__src);
        if ((_DWORD)v12)
          break;
        v13 = (_DWORD *)(a3 + v11);
        v14 = __n;
        *v13 = __src[0];
        v13[1] = v14;
        v11 += 8;
        if ((_DWORD)v14)
        {
          memcpy((void *)(a3 + v11), __src[1], v14);
          v11 += v14;
        }
        a1 += 24;
        if (!--v6)
          goto LABEL_11;
      }
      v9 = v12;
      v8 = 70;
    }
    else
    {
LABEL_11:
      v9 = 0;
      *a4 = v11;
      v8 = 10;
    }
  }
  if (v8 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "serializeParameters", (int)v9);
  return v9;
}

uint64_t DeserializeRequirement(unsigned int *a1, unint64_t a2, void **a3, size_t *a4)
{
  uint64_t v4;
  unsigned int v9;
  size_t v10;
  uint64_t v11;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__dst;

  __dst = 0;
  v4 = 4294967293;
  if (a1)
  {
    if (a2 >= 0x10)
    {
      if (a3)
      {
        if (a4)
        {
          v9 = *a1;
          if (v9 <= 0x1C)
          {
            if (((1 << v9) & 0x1FFCFF4E) != 0)
            {
              v10 = a1[3] + 16;
              if (v10 > a2)
                goto LABEL_36;
              v11 = Util_AllocRequirement(v9, 0, &__dst);
              if (!(_DWORD)v11)
              {
                if (__dst)
                {
                  memcpy(__dst, a1, v10);
LABEL_11:
                  v4 = 0;
                  *a4 = v10;
                  *a3 = __dst;
                  return v4;
                }
                return 4294967292;
              }
              goto LABEL_35;
            }
            if (((1 << v9) & 0x30) != 0)
            {
              v13 = a1[4];
              if (8 * v13 + 20 > a2)
                goto LABEL_36;
              v11 = Util_AllocRequirement(v9, v13, &__dst);
              if ((_DWORD)v11)
                goto LABEL_35;
              v14 = __dst;
              if (!__dst)
                return 4294967292;
              if (*((_DWORD *)__dst + 3) == 84)
              {
                v15 = *(_OWORD *)a1;
                *((_DWORD *)__dst + 4) = a1[4];
                *v14 = v15;
                *((_DWORD *)__dst + 3) = 84;
                if (!a1[4])
                {
                  v10 = 20;
                  goto LABEL_11;
                }
                v16 = 0;
                v10 = 20;
                while (1)
                {
                  v21 = 0;
                  v22 = 0;
                  v11 = DeserializeRequirement((char *)a1 + v10, a2 - v10, &v22, &v21);
                  if ((_DWORD)v11)
                    goto LABEL_35;
                  *(_QWORD *)((char *)__dst + 8 * v16 + 20) = v22;
                  v10 += v21;
                  if (++v16 >= (unint64_t)a1[4])
                    goto LABEL_11;
                }
              }
              goto LABEL_39;
            }
            if (v9 == 7)
            {
              v17 = a1[5];
              if (8 * v17 + 24 <= a2)
              {
                v11 = Util_AllocRequirement(7, v17, &__dst);
                if (!(_DWORD)v11)
                {
                  v18 = __dst;
                  if (!__dst)
                    return 4294967292;
                  if (*((_DWORD *)__dst + 3) != 88)
                  {
LABEL_39:
                    v4 = 4294967291;
                    goto LABEL_36;
                  }
                  v19 = *(_OWORD *)a1;
                  *((_QWORD *)__dst + 2) = *((_QWORD *)a1 + 2);
                  *v18 = v19;
                  *((_DWORD *)__dst + 3) = 88;
                  if (!a1[5])
                  {
                    v10 = 24;
                    goto LABEL_11;
                  }
                  v20 = 0;
                  v10 = 24;
                  while (1)
                  {
                    v21 = 0;
                    v22 = 0;
                    v11 = DeserializeRequirement((char *)a1 + v10, a2 - v10, &v22, &v21);
                    if ((_DWORD)v11)
                      break;
                    *((_QWORD *)__dst + v20 + 3) = v22;
                    v10 += v21;
                    if (++v20 >= (unint64_t)a1[5])
                      goto LABEL_11;
                  }
                }
LABEL_35:
                v4 = v11;
              }
            }
          }
        }
      }
    }
  }
LABEL_36:
  if (__dst)
    Util_DeallocRequirement((int *)__dst);
  return v4;
}

uint64_t SerializeCredential(unsigned int *__src, void *__dst, size_t *a3)
{
  uint64_t result;
  unsigned int v6;
  size_t v8;

  result = 4294967293;
  if (__src && __dst && a3)
  {
    v6 = *__src;
    if (*__src <= 0x17 && ((1 << *__src) & 0xFFF7FE) != 0)
    {
      v8 = __src[7] + 32;
      if (v8 <= *a3 && v6 <= 0x17 && ((1 << v6) & 0xFFF7FE) != 0)
      {
        memcpy(__dst, __src, v8);
        result = 0;
        *a3 = __src[7] + 32;
      }
    }
  }
  return result;
}

uint64_t GetSerializedAddCredentialSize(uint64_t a1, _DWORD *a2, int a3, _QWORD *a4)
{
  BOOL v4;
  char v5;
  uint64_t result;

  if (a1)
    v4 = 1;
  else
    v4 = a3 == 2;
  v5 = !v4;
  result = 4294967293;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    result = 0;
    *a4 = a2[7] + 52;
  }
  return result;
}

uint64_t SerializeAddCredential(_OWORD *a1, unsigned int *__src, int a3, uint64_t a4, _QWORD *a5)
{
  BOOL v6;
  char v7;
  uint64_t result;
  size_t v12;
  uint64_t v13;

  if (a1)
    v6 = 1;
  else
    v6 = a3 == 2;
  v7 = !v6;
  result = 4294967293;
  if (a5)
  {
    if (a4)
    {
      if (__src)
      {
        if ((v7 & 1) == 0)
        {
          result = 4294967293;
          if (*__src <= 0x17 && ((1 << *__src) & 0xFFF7FE) != 0 && *a5 >= (unint64_t)__src[7] + 52)
          {
            if (a1)
            {
              *(_OWORD *)a4 = *a1;
            }
            else
            {
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
            }
            v13 = *a5 - 16;
            result = SerializeCredential(__src, (void *)(a4 + 16), (size_t *)&v13);
            if (!(_DWORD)result)
            {
              v12 = v13;
              *(_DWORD *)(v13 + a4 + 16) = a3;
              *a5 = v12 + 20;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10001A330(_DWORD *a1)
{
  if (!a1)
    return 4294967293;
  switch(*a1)
  {
    case 0:
    case 0xC:
      if (a1[4])
        return 4294967293;
      break;
    case 1:
    case 4:
    case 5:
    case 0xA:
      if (a1[4] != 4)
        return 4294967293;
      break;
    case 2:
    case 6:
    case 7:
      if (a1[4] != 16)
        return 4294967293;
      break;
    case 3:
      if ((a1[4] - 1001) < 0xFFFFFC18)
        return 4294967293;
      break;
    case 8:
    case 9:
      if (a1[4] != 1)
        return 4294967293;
      break;
    case 0xB:
      if (a1[4] > 0x400u)
        return 4294967293;
      break;
    default:
      return 4294967293;
  }
  return 0;
}

int *LibCall_ACMContextVerifyPolicyEx_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  _BOOL8 v17;
  int *v18;
  uint64_t v19;
  int *result;
  BOOL v21;
  int *v22;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx_Block");
  v17 = 0;
  v18 = 0;
  v22 = 0;
  v21 = 0;
  v19 = 4294967293;
  if (a3 && __s1 && a9)
  {
    v19 = LibCall_ACMContextVerifyPolicyEx(a1, a2, a3, __s1, a5, a6, a7, a8, &v21, &v22);
    v18 = v22;
    v17 = v21;
  }
  (*(void (**)(uint64_t, uint64_t, _BOOL8, int *))(a9 + 16))(a9, v19, v17, v18);
  result = v22;
  if (v22)
    result = (int *)Util_DeallocRequirement(v22);
  if (gACMLoggingLevel <= 0xAu)
    return (int *)printf("%s: %s: returning.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx_Block");
  return result;
}

uint64_t Util_DeallocCredential(_DWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  const char *v4;
  rsize_t v5;
  const void *v6;
  unint64_t v7;
  int v8;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_DeallocCredential");
  if (a1)
  {
    v2 = 4294967293;
    v3 = 70;
    switch(*a1)
    {
      case 1:
        v4 = "ACMCredential - ACMCredentialDataPasscodeValidated";
        v5 = 60;
        v6 = a1;
        v7 = 60;
        v8 = 144;
        goto LABEL_6;
      case 2:
        v4 = "ACMCredential - ACMCredentialDataPassphraseEntered";
        v5 = 168;
        v6 = a1;
        v7 = 168;
        v8 = 136;
        goto LABEL_6;
      case 3:
        v4 = "ACMCredential - ACMCredentialDataBiometryMatched";
        v5 = 337;
        v6 = a1;
        v7 = 337;
        v8 = 140;
        goto LABEL_6;
      case 4:
      case 5:
      case 6:
      case 8:
      case 0xE:
      case 0x10:
      case 0x13:
      case 0x16:
      case 0x17:
        v4 = "ACMCredential";
        v5 = 32;
        v6 = a1;
        v7 = 32;
        v8 = 189;
        goto LABEL_6;
      case 7:
        v4 = "ACMCredential - ACMCredentialDataUserOutputDisplayed";
        v5 = 88;
        v6 = a1;
        v7 = 88;
        v8 = 152;
        goto LABEL_6;
      case 9:
        v4 = "ACMCredential - ACMCredentialDataContinuityUnlock";
        v5 = 56;
        v6 = a1;
        v7 = 56;
        v8 = 156;
        goto LABEL_6;
      case 0xA:
        v4 = "ACMCredential - ACMCredentialDataPasscodeValidated2";
        v5 = 84;
        v6 = a1;
        v7 = 84;
        v8 = 148;
        goto LABEL_6;
      case 0xC:
      case 0xF:
        v4 = "ACMCredential - ACMCredentialDataKextDenyList";
        v5 = 40;
        v6 = a1;
        v7 = 40;
        v8 = 161;
        goto LABEL_6;
      case 0xD:
        v4 = "ACMCredential - ACMCredentialDataPassphraseExtractable";
        v5 = 164;
        v6 = a1;
        v7 = 164;
        v8 = 132;
        goto LABEL_6;
      case 0x11:
        v4 = "ACMCredential - ACMCredentialDataSecureIntent";
        v5 = 113;
        v6 = a1;
        v7 = 113;
        v8 = 165;
        goto LABEL_6;
      case 0x12:
        v4 = "ACMCredential - ACMCredentialDataBiometryMatchAttempted";
        v5 = 52;
        v6 = a1;
        v7 = 52;
        v8 = 169;
        goto LABEL_6;
      case 0x14:
        v4 = "ACMCredential - ACMCredentialDataAP";
        v5 = 64;
        v6 = a1;
        v7 = 64;
        v8 = 173;
        goto LABEL_6;
      case 0x15:
        v4 = "ACMCredential - ACMCredentialDataSignature";
        v5 = 164;
        v6 = a1;
        v7 = 164;
        v8 = 177;
LABEL_6:
        acm_mem_free_info(v4, v6, v7, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v8, "Util_DeallocCredential");
        acm_mem_free(a1, v5);
        v2 = 0;
        v3 = 10;
        break;
      default:
        break;
    }
  }
  else
  {
    v2 = 4294967293;
    v3 = 70;
  }
  if (v3 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_DeallocCredential", (int)v2);
  return v2;
}

uint64_t Util_AllocCredential(int a1, _QWORD *a2)
{
  uint64_t result;
  _DWORD *v5;
  int v6;
  const char *v7;
  const void *v8;
  int v9;

  if (!a2)
    return 4294967293;
  result = 4294967293;
  switch(a1)
  {
    case 1:
      v5 = acm_mem_alloc(0x3CuLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPasscodeValidated", v5, 60, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 226, "Util_AllocCredential");
      v6 = 28;
      goto LABEL_4;
    case 2:
      v5 = acm_mem_alloc(0xA8uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPassphraseEntered", v5, 168, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 216, "Util_AllocCredential");
      v6 = 136;
      goto LABEL_4;
    case 3:
      v5 = acm_mem_alloc(0x151uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataBiometryMatched", v5, 337, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 221, "Util_AllocCredential");
      v6 = 305;
      goto LABEL_4;
    case 4:
    case 5:
    case 6:
    case 8:
    case 14:
    case 16:
    case 19:
    case 22:
    case 23:
      v5 = acm_mem_alloc(0x20uLL);
      acm_mem_alloc_info("ACMCredential", v5, 32, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 280, "Util_AllocCredential");
      v6 = 0;
      goto LABEL_4;
    case 7:
      v5 = acm_mem_alloc(0x58uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataUserOutputDisplayed", v5, 88, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 236, "Util_AllocCredential");
      v6 = 56;
      goto LABEL_4;
    case 9:
      v5 = acm_mem_alloc(0x38uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataContinuityUnlock", v5, 56, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 241, "Util_AllocCredential");
      v6 = 24;
      goto LABEL_4;
    case 10:
      v5 = acm_mem_alloc(0x54uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPasscodeValidated2", v5, 84, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 231, "Util_AllocCredential");
      v6 = 52;
      goto LABEL_4;
    case 12:
    case 15:
      v5 = acm_mem_alloc(0x28uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataKextDenyList", v5, 40, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 247, "Util_AllocCredential");
      v6 = 8;
      goto LABEL_4;
    case 13:
      v5 = acm_mem_alloc(0xA4uLL);
      v7 = "ACMCredential - ACMCredentialDataPassphraseExtractable";
      v8 = v5;
      v9 = 211;
      goto LABEL_18;
    case 17:
      v5 = acm_mem_alloc(0x71uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataSecureIntent", v5, 113, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 252, "Util_AllocCredential");
      v6 = 81;
      goto LABEL_4;
    case 18:
      v5 = acm_mem_alloc(0x34uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataBiometryMatchAttempted", v5, 52, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 257, "Util_AllocCredential");
      v6 = 20;
      goto LABEL_4;
    case 20:
      v5 = acm_mem_alloc(0x40uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataAP", v5, 64, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 262, "Util_AllocCredential");
      v6 = 32;
      goto LABEL_4;
    case 21:
      v5 = acm_mem_alloc(0xA4uLL);
      v7 = "ACMCredential - ACMCredentialDataSignature";
      v8 = v5;
      v9 = 267;
LABEL_18:
      acm_mem_alloc_info(v7, v8, 164, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v9, "Util_AllocCredential");
      v6 = 132;
LABEL_4:
      if (v5)
      {
        result = 0;
        *v5 = a1;
        v5[1] = 1;
        v5[7] = v6;
        v5[3] = -1;
        *a2 = v5;
      }
      else
      {
        result = 4294967292;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Util_AllocRequirement(int a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  int v9;
  const char *v11;
  const void *v12;
  int v13;
  const char *v14;
  const void *v15;
  int v16;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_AllocRequirement");
  if (a3)
  {
    v6 = 4294967293;
    v7 = 70;
    switch(a1)
    {
      case 1:
        v8 = acm_mem_alloc(0x14uLL);
        v11 = "ACMRequirement - ACMRequirementDataPasscodeValidated";
        v12 = v8;
        v13 = 338;
        goto LABEL_49;
      case 2:
        v8 = acm_mem_alloc(0x14uLL);
        v11 = "ACMRequirement - ACMRequirementDataPassphraseEntered";
        v12 = v8;
        v13 = 343;
        goto LABEL_49;
      case 3:
        v8 = acm_mem_alloc(0xACuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataBiometryMatched", v8, 172, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 348, "Util_AllocRequirement");
        v9 = 156;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 4:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6)
          goto LABEL_53;
        v8 = acm_mem_alloc(0x64uLL);
        v14 = "ACMRequirement - ACMRequirementDataOr";
        v15 = v8;
        v16 = 406;
        goto LABEL_28;
      case 5:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6)
          goto LABEL_53;
        v8 = acm_mem_alloc(0x64uLL);
        v14 = "ACMRequirement - ACMRequirementDataAnd";
        v15 = v8;
        v16 = 398;
LABEL_28:
        acm_mem_alloc_info(v14, v15, 100, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v16, "Util_AllocRequirement");
        v9 = 84;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 18:
      case 19:
      case 22:
      case 23:
      case 27:
      case 28:
        v8 = acm_mem_alloc(0x10uLL);
        acm_mem_alloc_info("ACMRequirement", v8, 16, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 333, "Util_AllocRequirement");
        v9 = 0;
        if (v8)
          goto LABEL_6;
        goto LABEL_50;
      case 7:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6)
          goto LABEL_53;
        v8 = acm_mem_alloc(0x68uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKofN", v8, 104, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 391, "Util_AllocRequirement");
        v9 = 88;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 8:
        v8 = acm_mem_alloc(0x410uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataAccessGroups", v8, 1040, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 378, "Util_AllocRequirement");
        v9 = 1024;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 13:
        v8 = acm_mem_alloc(0x30uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataUserOutputDisplayed", v8, 48, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 363, "Util_AllocRequirement");
        v9 = 32;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 16:
      case 17:
        break;
      case 20:
        v8 = acm_mem_alloc(0x14uLL);
        v11 = "ACMRequirement - ACMRequirementDataSecureIntent";
        v12 = v8;
        v13 = 353;
        goto LABEL_49;
      case 21:
        v8 = acm_mem_alloc(0x14uLL);
        v11 = "ACMRequirement - ACMRequirementDataBiometryMatchAttempted";
        v12 = v8;
        v13 = 358;
LABEL_49:
        acm_mem_alloc_info(v11, v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v13, "Util_AllocRequirement");
        v9 = 4;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 24:
        v8 = acm_mem_alloc(0x434uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataAP", v8, 1076, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 368, "Util_AllocRequirement");
        v9 = 1060;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 25:
        v8 = acm_mem_alloc(0x3BuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKeyRef", v8, 59, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 373, "Util_AllocRequirement");
        v9 = 43;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 26:
        v8 = acm_mem_alloc(0x2CuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataRatchet", v8, 44, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 384, "Util_AllocRequirement");
        v9 = 28;
        if (!v8)
        {
LABEL_50:
          v6 = 4294967292;
          goto LABEL_54;
        }
LABEL_6:
        *v8 = a1;
        *(_QWORD *)(v8 + 1) = 0x100000001;
        v8[3] = v9;
        if ((a1 & 0xFFFFFFFE) == 4)
        {
          v8[4] = a2;
        }
        else if (a1 == 1000)
        {
          v8[13] = a2;
        }
        else if (a1 == 7)
        {
          v8[5] = a2;
        }
        v6 = 0;
        *a3 = v8;
        v7 = 10;
        break;
      default:
        switch(a1)
        {
          case 1000:
            if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6)
              goto LABEL_53;
            v8 = acm_mem_alloc(0x88uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKofNWithAttributes", v8, 136, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 414, "Util_AllocRequirement");
            v9 = 120;
            if (!v8)
              goto LABEL_50;
            goto LABEL_6;
          case 1001:
            v8 = acm_mem_alloc(0xB8uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataBiometryMatchedWithAttributes", v8, 184, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 419, "Util_AllocRequirement");
            v9 = 168;
            if (!v8)
              goto LABEL_50;
            goto LABEL_6;
          case 1002:
            v8 = acm_mem_alloc(0x14uLL);
            v11 = "ACMRequirement - ACMRequirementDataPushButtonWithAttributes";
            v12 = v8;
            v13 = 424;
            goto LABEL_49;
          case 1003:
            v8 = acm_mem_alloc(0x14uLL);
            v11 = "ACMRequirement - ACMRequirementDataSecureStateWithAttributes";
            v12 = v8;
            v13 = 429;
            goto LABEL_49;
          case 1004:
            v8 = acm_mem_alloc(0x20uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataPasscodeValidatedWithAttributes", v8, 32, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 434, "Util_AllocRequirement");
            v9 = 16;
            if (!v8)
              goto LABEL_50;
            goto LABEL_6;
          default:
            goto LABEL_17;
        }
    }
  }
  else
  {
LABEL_53:
    v6 = 4294967293;
LABEL_54:
    v7 = 70;
  }
LABEL_17:
  if (v7 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_AllocRequirement", (int)v6);
  return v6;
}

uint64_t Util_DeallocRequirement(int *a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  rsize_t v10;
  int *v11;
  unint64_t v12;
  int v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_DeallocRequirement");
  if (!a1)
  {
    v7 = 4294967293;
    v8 = 70;
    goto LABEL_28;
  }
  v2 = *a1;
  if (*a1 > 6)
  {
    if (v2 == 7)
    {
      if (a1[5])
      {
        v6 = 0;
        do
          Util_DeallocRequirement(*(_QWORD *)&a1[2 * v6++ + 6]);
        while (v6 < a1[5]);
      }
    }
    else
    {
      if (v2 != 1000)
        goto LABEL_25;
      if (a1[13])
      {
        v4 = 0;
        do
          Util_DeallocRequirement(*(_QWORD *)&a1[2 * v4++ + 14]);
        while (v4 < a1[13]);
      }
    }
  }
  else if (v2 == 4)
  {
    if (a1[4])
    {
      v5 = 0;
      do
        Util_DeallocRequirement(*(_QWORD *)&a1[2 * v5++ + 5]);
      while (v5 < a1[4]);
    }
  }
  else
  {
    if (v2 != 5)
      goto LABEL_25;
    if (a1[4])
    {
      v3 = 0;
      do
        Util_DeallocRequirement(*(_QWORD *)&a1[2 * v3++ + 5]);
      while (v3 < a1[4]);
    }
  }
  v2 = *a1;
LABEL_25:
  v7 = 4294967293;
  v8 = 70;
  switch(v2)
  {
    case 1:
      v9 = "ACMRequirement - ACMRequirementDataPasscodeValidated";
      v10 = 20;
      v11 = a1;
      v12 = 20;
      v13 = 542;
      goto LABEL_27;
    case 2:
      v9 = "ACMRequirement - ACMRequirementDataPassphraseEntered";
      v10 = 20;
      v11 = a1;
      v12 = 20;
      v13 = 546;
      goto LABEL_27;
    case 3:
      v9 = "ACMRequirement - ACMRequirementDataBiometryMatched";
      v10 = 172;
      v11 = a1;
      v12 = 172;
      v13 = 550;
      goto LABEL_27;
    case 4:
      v9 = "ACMRequirement - ACMRequirementDataOr";
      v10 = 100;
      v11 = a1;
      v12 = 100;
      v13 = 595;
      goto LABEL_27;
    case 5:
      v9 = "ACMRequirement - ACMRequirementDataAnd";
      v10 = 100;
      v11 = a1;
      v12 = 100;
      v13 = 589;
      goto LABEL_27;
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 18:
    case 19:
    case 22:
    case 23:
    case 27:
    case 28:
      v9 = "ACMRequirement";
      v10 = 16;
      v11 = a1;
      v12 = 16;
      v13 = 538;
      goto LABEL_27;
    case 7:
      v9 = "ACMRequirement - ACMRequirementDataKofN";
      v10 = 104;
      v11 = a1;
      v12 = 104;
      v13 = 584;
      goto LABEL_27;
    case 8:
      v9 = "ACMRequirement - ACMRequirementDataAccessGroups";
      v10 = 1040;
      v11 = a1;
      v12 = 1040;
      v13 = 574;
      goto LABEL_27;
    case 13:
      v9 = "ACMRequirement - ACMRequirementDataUserOutputDisplayed";
      v10 = 48;
      v11 = a1;
      v12 = 48;
      v13 = 562;
      goto LABEL_27;
    case 16:
    case 17:
      break;
    case 20:
      v9 = "ACMRequirement - ACMRequirementDataSecureIntent";
      v10 = 20;
      v11 = a1;
      v12 = 20;
      v13 = 554;
      goto LABEL_27;
    case 21:
      v9 = "ACMRequirement - ACMRequirementDataBiometryMatchAttempted";
      v10 = 20;
      v11 = a1;
      v12 = 20;
      v13 = 558;
      goto LABEL_27;
    case 24:
      v9 = "ACMRequirement - ACMRequirementDataAP";
      v10 = 1076;
      v11 = a1;
      v12 = 1076;
      v13 = 566;
      goto LABEL_27;
    case 25:
      v9 = "ACMRequirement - ACMRequirementDataKeyRef";
      v10 = 59;
      v11 = a1;
      v12 = 59;
      v13 = 570;
      goto LABEL_27;
    case 26:
      v9 = "ACMRequirement - ACMRequirementDataRatchet";
      v10 = 44;
      v11 = a1;
      v12 = 44;
      v13 = 579;
LABEL_27:
      acm_mem_free_info(v9, v11, v12, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v13, "Util_DeallocRequirement");
      acm_mem_free(a1, v10);
      v7 = 0;
      v8 = 10;
      break;
    default:
      switch(v2)
      {
        case 1000:
          v9 = "ACMRequirement - ACMRequirementDataKofNWithAttributes";
          v10 = 136;
          v11 = a1;
          v12 = 136;
          v13 = 601;
          goto LABEL_27;
        case 1001:
          v9 = "ACMRequirement - ACMRequirementDataBiometryMatchedWithAttributes";
          v10 = 184;
          v11 = a1;
          v12 = 184;
          v13 = 605;
          goto LABEL_27;
        case 1002:
          v9 = "ACMRequirement - ACMRequirementDataPushButtonWithAttributes";
          v10 = 20;
          v11 = a1;
          v12 = 20;
          v13 = 609;
          goto LABEL_27;
        case 1003:
          v9 = "ACMRequirement - ACMRequirementDataSecureStateWithAttributes";
          v10 = 20;
          v11 = a1;
          v12 = 20;
          v13 = 613;
          goto LABEL_27;
        case 1004:
          v9 = "ACMRequirement - ACMRequirementDataPasscodeValidatedWithAttributes";
          v10 = 32;
          v11 = a1;
          v12 = 32;
          v13 = 617;
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
  }
LABEL_28:
  if (v8 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_DeallocRequirement", (int)v7);
  return v7;
}

uint64_t ACMContextCreate(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  if (byte_100327ED9 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMContextCreate";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 0;
  v2 = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *))sub_10001B8F4, (uint64_t)&v6, a1, &byte_100327ED9, 1);
  if ((_DWORD)v2)
  {
    sub_10001C8A4();
    v3 = 70;
  }
  else
  {
    v3 = 10;
    if (a1 && byte_100327ED9 <= 0x28u)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        v4 = *a1;
        if (*a1)
          LODWORD(v4) = *(_DWORD *)(v4 + 16);
        *(_DWORD *)buf = 136315650;
        v8 = "ACMLib";
        v9 = 2080;
        v10 = "ACMContextCreate";
        v11 = 1024;
        LODWORD(v12) = v4;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] created.\n", buf, 0x1Cu);
      }
      v3 = 10;
    }
  }
  if (v3 >= byte_100327ED9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMContextCreate";
    v11 = 2048;
    v12 = (int)v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v2;
}

uint64_t sub_10001B8F4(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  if (byte_100327ED9 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = 136315394;
    v19 = "ACMLib";
    v20 = 2080;
    v21 = "ioKitTransport";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    v14 = sub_10001BF20();
    v15 = 70;
    if ((_DWORD)v14)
    {
      v16 = v14;
    }
    else
    {
      v16 = sub_10001C100(*a1, a2, a3, a4, a5, a6, a7);
      if ((_DWORD)v16)
        v15 = 70;
      else
        v15 = 10;
    }
  }
  else
  {
    v15 = 70;
    v16 = 4294967293;
  }
  if (v15 >= byte_100327ED9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = 136315650;
    v19 = "ACMLib";
    v20 = 2080;
    v21 = "ioKitTransport";
    v22 = 2048;
    v23 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

_DWORD *ACMContextCreateWithExternalForm(_OWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  _DWORD *v14;

  if (byte_100327ED9 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v10 = "ACMLib";
    v11 = 2080;
    v12 = "ACMContextCreateWithExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v8 = 0;
  v4 = LibCall_ACMContextCreateWithExternalForm((uint64_t (*)(uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD *, uint64_t *))sub_10001B8F4, (uint64_t)&v8, a1, a2, &byte_100327ED9, 1);
  if (v4)
  {
    if (byte_100327ED9 <= 0x28u && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      v5 = v4[4];
      *(_DWORD *)buf = 136315650;
      v10 = "ACMLib";
      v11 = 2080;
      v12 = "ACMContextCreateWithExternalForm";
      v13 = 1024;
      LODWORD(v14) = v5;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] acquired.\n", buf, 0x1Cu);
    }
    v6 = 30;
  }
  else
  {
    sub_10001C8A4();
    v6 = 70;
  }
  if (v6 >= byte_100327ED9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v10 = "ACMLib";
    v11 = 2080;
    v12 = "ACMContextCreateWithExternalForm";
    v13 = 2048;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, -> ctx = %p.\n", buf, 0x20u);
  }
  return v4;
}

uint64_t ACMContextDelete(_DWORD *a1, int a2)
{
  unsigned int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  _QWORD v16[2];

  v4 = byte_100327ED9;
  if (byte_100327ED9 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextDelete";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
    v4 = byte_100327ED9;
  }
  if (a1 && v4 <= 0x28 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v5 = a1[4];
    v6 = "deleted";
    *(_DWORD *)buf = 136315906;
    v12 = "ACMLib";
    v14 = "ACMContextDelete";
    v13 = 2080;
    if (a2)
      v6 = "destroyed";
    v15 = 1024;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2080;
    *(_QWORD *)((char *)v16 + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] %s.\n", buf, 0x26u);
  }
  v10 = a1;
  v7 = LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD))sub_10001B8F4, (uint64_t)&v10, a1, a2);
  if ((_DWORD)v7)
    v8 = 70;
  else
    v8 = 10;
  if (v8 >= byte_100327ED9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextDelete";
    v15 = 2048;
    v16[0] = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

uint64_t sub_10001BF20()
{
  uint64_t v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  io_object_t v3;
  unsigned int v4;
  int v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  if (byte_100327ED9 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v6 = 136315394;
    v7 = "ACMLib";
    v8 = 2080;
    v9 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v6, 0x16u);
  }
  if ((byte_10032A84C & 1) != 0)
  {
    v0 = 0;
  }
  else
  {
    v1 = IOServiceMatching("AppleCredentialManager");
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      v4 = 70;
      v0 = 4294967291;
      goto LABEL_10;
    }
    v3 = MatchingService;
    v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_10032A848);
    if ((_DWORD)v0)
    {
      v4 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v3);
    byte_10032A84C = 1;
  }
  v4 = 10;
LABEL_10:
  if (v4 >= byte_100327ED9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v6 = 136315650;
    v7 = "ACMLib";
    v8 = 2080;
    v9 = "init";
    v10 = 2048;
    v11 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v6, 0x20u);
  }
  return v0;
}

uint64_t sub_10001C100(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  _BYTE *v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  unsigned int v20;
  size_t v22;
  size_t inputStructCnt;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  _BYTE v29[10];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  if (byte_100327ED9 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v25 = "ACMLib";
    v26 = 2080;
    v27 = "performCommand";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  inputStructCnt = 0;
  v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    v15 = v14;
    if (!a6 && a7)
    {
      v18 = 4294967293;
    }
    else
    {
      if (a7)
        v16 = *a7;
      else
        v16 = 0;
      v22 = v16;
      v17 = IOConnectCallStructMethod(dword_10032A848, 0, v14, inputStructCnt, a6, &v22);
      v18 = v17;
      if (a1)
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      if ((_DWORD)v17)
      {
        if (byte_100327ED9 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          v25 = "ACMLib";
          v26 = 2080;
          v27 = "performCommand";
          v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          v30 = 1024;
          v31 = v18;
          v32 = 1024;
          v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (byte_100327ED9 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          v25 = "ACMLib";
          v26 = 2080;
          v27 = "performCommand";
          v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        v18 = 0;
        if (a7)
          *a7 = v22;
      }
    }
    v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if ((_DWORD)v18)
      v20 = 70;
    else
      v20 = 10;
  }
  else
  {
    v20 = 70;
    v18 = 4294967291;
  }
  if (v20 >= byte_100327ED9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v25 = "ACMLib";
    v26 = 2080;
    v27 = "performCommand";
    v28 = 2048;
    *(_QWORD *)v29 = (int)v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

uint64_t ACMContextAddCredentialWithScope(_OWORD *a1, unsigned int *a2, int a3)
{
  BOOL v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t SerializedAddCredentialSize;
  size_t v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  size_t size;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;

  if (byte_100327ED9 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextAddCredentialWithScope";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size = 0;
  if (a1)
    v6 = 1;
  else
    v6 = a3 == 2;
  v7 = !v6;
  v8 = 70;
  v9 = 4294967293;
  if (a2 && (v7 & 1) == 0)
  {
    SerializedAddCredentialSize = sub_10001BF20();
    if ((_DWORD)SerializedAddCredentialSize
      || (SerializedAddCredentialSize = GetSerializedAddCredentialSize((uint64_t)a1, a2, a3, &size),
          (_DWORD)SerializedAddCredentialSize))
    {
      v9 = SerializedAddCredentialSize;
      v8 = 70;
    }
    else
    {
      v11 = size;
      v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 325, "ACMContextAddCredentialWithScope");
      if (v12)
      {
        v13 = SerializeAddCredential(a1, a2, a3, (uint64_t)v12, &size);
        if (!(_DWORD)v13)
          v13 = sub_10001C100((uint64_t)a1, 5, 0, v12, size, 0, 0);
        v9 = v13;
        v14 = size;
        acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 338, "ACMContextAddCredentialWithScope");
        acm_mem_free_data(v12, v14);
        if ((_DWORD)v9)
          v8 = 70;
        else
          v8 = 10;
      }
      else
      {
        v8 = 70;
        v9 = 4294967292;
      }
    }
  }
  if (v8 >= byte_100327ED9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextAddCredentialWithScope";
    v21 = 2048;
    v22 = (int)v9;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v9;
}

void ACMContextVerifyPolicyEx(_OWORD *a1, char *__s1, uint64_t a3, _DWORD *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  _OWORD *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;

  if (byte_100327ED9 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextVerifyPolicyEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v14 = a1;
  LibCall_ACMContextVerifyPolicyEx_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *))sub_10001B8F4, (uint64_t)&v14, a1, __s1, a3, a4, a5, a6, a7);
  if (byte_100327ED9 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextVerifyPolicyEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

void sub_10001C8A4()
{
  unsigned __int8 v0;
  unsigned int v1;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (byte_100327ED9 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  output = 0;
  outputCnt = 1;
  if (IOConnectCallScalarMethod(dword_10032A848, 2u, 0, 0, &output, &outputCnt))
    goto LABEL_8;
  v0 = output;
  v1 = output;
  byte_100327ED9 = output;
  if (output <= 0x1EuLL && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    v8 = 1024;
    v9 = v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: log level set to %d.\n", buf, 0x1Cu);
LABEL_8:
    v1 = byte_100327ED9;
  }
  if (v1 <= 0xA && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

_BYTE *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, _QWORD *a6)
{
  _BYTE *v12;
  BOOL v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  v12 = 0;
  if (a5)
    v13 = a4 == 0;
  else
    v13 = 0;
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      v12 = 0;
    }
    else
    {
      v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)v12 = 1396920900;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5)
          memcpy(v12 + 8, a4, a5);
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  return v12;
}

uint64_t LibCall_ACMContextCreate(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *), uint64_t a2, _QWORD *a3, _BYTE *a4, int a5)
{
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  _BYTE v19[21];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreate");
  v10 = 70;
  v11 = 4294967293;
  if (!a1 || !a3)
    goto LABEL_25;
  v12 = acm_mem_alloc(0x14uLL);
  acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 50, "LibCall_ACMContextCreate");
  if (!v12)
  {
    v10 = 70;
    v11 = 4294967292;
    goto LABEL_25;
  }
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    v18 = 21;
    v13 = a1(a2, 36, 0, 0, 0, v19, &v18);
    if (!(_DWORD)v13)
    {
      if (v18 != 21)
      {
        v11 = 4294967291;
        goto LABEL_23;
      }
      v11 = 0;
      goto LABEL_20;
    }
    v11 = v13;
    if ((_DWORD)v13 != -3)
    {
LABEL_23:
      acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 89, "LibCall_ACMContextCreate");
      acm_mem_free(v12, 0x14uLL);
      v10 = 70;
      goto LABEL_25;
    }
  }
  v18 = 17;
  v14 = a1(a2, 1, 0, 0, 0, v19, &v18);
  if (v18 == 17)
    v15 = 0;
  else
    v15 = -5;
  if (v14)
    v11 = v14;
  else
    v11 = v15;
  if (!v14 && v18 == 17)
  {
LABEL_20:
    v16 = *(_DWORD *)&v19[17];
    *(_OWORD *)v12 = *(_OWORD *)v19;
    v12[4] = v16;
    *a3 = v12;
    if (a4)
      *a4 = v19[16];
  }
  if ((_DWORD)v11)
    goto LABEL_23;
  v10 = 10;
LABEL_25:
  if (v10 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreate", (int)v11);
  return v11;
}

_DWORD *LibCall_ACMContextCreateWithExternalForm(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD *, uint64_t *), uint64_t a2, _OWORD *a3, uint64_t a4, _BYTE *a5, int a6)
{
  _DWORD *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  _QWORD v21[2];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm");
  v12 = 0;
  v13 = 70;
  v14 = -3;
  if (a1 && a3 && a4 == 16)
  {
    memset(v21, 0, 9);
    if (a6)
    {
      v20 = 9;
      v15 = a1(a2, 37, 0, a3, 16, v21, &v20);
      if (!v15)
      {
        if (v20 == 9)
        {
          v14 = 0;
          goto LABEL_19;
        }
        v14 = -5;
        goto LABEL_28;
      }
      v14 = v15;
      if (v15 != -3)
        goto LABEL_28;
    }
    v20 = 5;
    v16 = a1(a2, 18, 0, a3, 16, v21, &v20);
    if (v20 == 5)
      v17 = 0;
    else
      v17 = -5;
    if (v16)
      v14 = v16;
    else
      v14 = v17;
    if (!v16 && v20 == 5)
    {
LABEL_19:
      if (LODWORD(v21[0]))
      {
        v12 = acm_mem_alloc(0x14uLL);
        acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 128, "LibCall_ACMContextCreateWithExternalForm");
        if (!v12)
        {
          v13 = 70;
          v14 = -4;
          goto LABEL_31;
        }
        v18 = *(_DWORD *)((char *)v21 + 5);
        *(_OWORD *)v12 = *a3;
        v12[4] = v18;
        if (a5)
          *a5 = BYTE4(v21[0]);
        if (v14)
        {
          acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 147, "LibCall_ACMContextCreateWithExternalForm");
          acm_mem_free(v12, 0x14uLL);
LABEL_29:
          v13 = 70;
          goto LABEL_31;
        }
      }
      else
      {
        v12 = 0;
      }
      goto LABEL_30;
    }
LABEL_28:
    v12 = 0;
    if (v14)
      goto LABEL_29;
LABEL_30:
    v14 = 0;
    v13 = 10;
  }
LABEL_31:
  if (v13 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm", v14);
  return v12;
}

uint64_t LibCall_ACMContextDelete(void (*a1)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD), uint64_t a2, void *a3, int a4)
{
  uint64_t v8;
  unsigned int v9;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextDelete");
  if (a1 && a3)
  {
    if (a4)
      a1(a2, 2, 0, a3, 16, 0, 0);
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    acm_mem_free_info("ACMHandleWithPayload", a3, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 172, "LibCall_ACMContextDelete");
    acm_mem_free(a3, 0x14uLL);
    v8 = 0;
    v9 = 10;
    goto LABEL_8;
  }
  v9 = 70;
  v8 = 4294967293;
LABEL_8:
  if (v9 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextDelete", (int)v8);
  return v8;
}

_DWORD *LibCall_ACMCredentialDelete(_DWORD *a1)
{
  if (a1)
    return (_DWORD *)Util_DeallocCredential(a1);
  return a1;
}

uint64_t LibCall_ACMContextVerifyPolicyEx(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, BOOL *a9, int **a10)
{
  uint64_t v18;
  uint64_t SerializedVerifyPolicySize;
  size_t v20;
  _OWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  unsigned int v27;
  size_t v29;
  int *v30;
  unint64_t v31;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx");
  v31 = 4096;
  size = 0;
  v29 = 0;
  v30 = 0;
  v18 = 4294967293;
  if (!a3 || !__s1 || !a9)
  {
LABEL_18:
    if (!(_DWORD)v18)
      goto LABEL_21;
    goto LABEL_19;
  }
  SerializedVerifyPolicySize = GetSerializedVerifyPolicySize((uint64_t)a3, __s1, a5, a8, a6, a7, &size);
  if (!(_DWORD)SerializedVerifyPolicySize)
  {
    v20 = size;
    v21 = acm_mem_alloc_data(size);
    acm_mem_alloc_info("<data>", v21, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1257, "LibCall_ACMContextVerifyPolicyEx");
    if (v21)
    {
      v22 = SerializeVerifyPolicy(a3, __s1, a5, a8, a6, a7, v21, &size);
      if ((_DWORD)v22)
      {
        v18 = v22;
        v23 = 0;
      }
      else
      {
        v23 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
        acm_mem_alloc_info("<data>", v23, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1263, "LibCall_ACMContextVerifyPolicyEx");
        if (v23)
        {
          v24 = a1(a2, 3, 0, v21, size, v23, &v31);
          if ((_DWORD)v24)
          {
            v18 = v24;
          }
          else
          {
            v25 = v31 - 4;
            if (v31 < 4)
            {
              v18 = 4294967291;
            }
            else
            {
              *a9 = *v23 != 0;
              if (a10)
              {
                v18 = DeserializeRequirement(v23 + 1, v25, (void **)&v30, &v29);
                if (!(_DWORD)v18)
                  *a10 = v30;
              }
              else
              {
                v18 = 0;
              }
            }
          }
        }
        else
        {
          v18 = 4294967292;
        }
      }
      v26 = size;
      acm_mem_free_info("<data>", v21, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1288, "LibCall_ACMContextVerifyPolicyEx");
      acm_mem_free_data(v21, v26);
      if (v23)
      {
        acm_mem_free_info("<data>", v23, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1291, "LibCall_ACMContextVerifyPolicyEx");
        acm_mem_free_data(v23, 0x1000uLL);
      }
    }
    else
    {
      v18 = 4294967292;
    }
    goto LABEL_18;
  }
  v18 = SerializedVerifyPolicySize;
LABEL_19:
  if (v30)
    Util_DeallocRequirement(v30);
LABEL_21:
  if ((_DWORD)v18)
    v27 = 70;
  else
    v27 = 10;
  if (v27 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx", (int)v18);
  return v18;
}

void sub_10001D4E0(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 44) = 0;
    *(_WORD *)(a1 + 85) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
    *(_QWORD *)(a1 + 32) = objc_msgSend(v2, "getTimestamp");

    ++*(_DWORD *)(a1 + 48);
  }
}

void sub_10001D544(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v7 = v3;
      if (((unint64_t)objc_msgSend(v3, "code") & 0x8000000000000000) != 0)
      {
        v6 = 6;
      }
      else
      {
        v5 = (uint64_t)objc_msgSend(v7, "code");
        v4 = v7;
        if (v5 > 70)
        {
          v6 = 6;
          goto LABEL_10;
        }
        v6 = objc_msgSend(v7, "code");
      }
      v4 = v7;
    }
    else
    {
      v6 = 0;
    }
LABEL_10:
    *(_DWORD *)(a1 + 44) = v6;
  }

}

int32x2_t sub_10001D5C4(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int32x2_t result;
  void *v14;
  void *v15;
  _QWORD v16[9];
  _QWORD v17[9];

  if (a1)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
      v3 = objc_msgSend(v2, "getDurationFrom:", *(_QWORD *)(a1 + 32));

      v16[0] = CFSTR("connectedDuration");
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v3));
      v17[0] = v15;
      v16[1] = CFSTR("rawBytesRx");
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 16)));
      v17[1] = v14;
      v16[2] = CFSTR("rawBytesTx");
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 8)));
      v17[2] = v4;
      v16[3] = CFSTR("rawCommandCount");
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 24)));
      v17[3] = v5;
      v16[4] = CFSTR("isConnectionHandover");
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 84)));
      v17[4] = v6;
      v16[5] = CFSTR("wasRead");
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40)));
      v17[5] = v7;
      v16[6] = CFSTR("resultCode");
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 44)));
      v17[6] = v8;
      v16[7] = CFSTR("isCoreNFC");
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 85)));
      v17[7] = v9;
      v16[8] = CFSTR("didUsePaymentAID");
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 86)));
      v17[8] = v10;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 9));

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
      objc_msgSend(v12, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.hceTagRead"), v11);

    }
    else
    {
      LODWORD(v3) = 0;
    }
    *(_DWORD *)(a1 + 68) += (_DWORD)v3;
    result = vadd_s32(*(int32x2_t *)(a1 + 72), vrev64_s32(vmovn_s64(*(int64x2_t *)(a1 + 8))));
    *(int32x2_t *)(a1 + 72) = result;
    *(_DWORD *)(a1 + 80) += *(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 44) = 0;
    *(_WORD *)(a1 + 85) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_10001D878(uint64_t a1)
{
  id v2;

  if (a1)
  {
    *(_DWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 77) = 0;
    v2 = (id)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
    *(_QWORD *)(a1 + 56) = objc_msgSend(v2, "getTimestamp");

  }
}

void sub_10001D8D4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[8];
  _QWORD v14[8];

  if (a1)
  {
    if (*(_QWORD *)(a1 + 32))
      sub_10001D5C4(a1);
    if (*(_QWORD *)(a1 + 56))
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
      *(_DWORD *)(a1 + 64) = objc_msgSend(v2, "getDurationFrom:", *(_QWORD *)(a1 + 56));

      v13[0] = CFSTR("sessionDuration");
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 64)));
      v14[0] = v12;
      v13[1] = CFSTR("connectedDuration");
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 68)));
      v14[1] = v3;
      v13[2] = CFSTR("rawBytesRx");
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 72)));
      v14[2] = v4;
      v13[3] = CFSTR("rawBytesTx");
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 76)));
      v14[3] = v5;
      v13[4] = CFSTR("rawCommandCount");
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 80)));
      v14[4] = v6;
      v13[5] = CFSTR("isConnectionHandover");
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 84)));
      v14[5] = v7;
      v13[6] = CFSTR("isCoreNFC");
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 85)));
      v14[6] = v8;
      v13[7] = CFSTR("didUsePaymentAID");
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 86)));
      v14[7] = v9;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 8));

      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
      objc_msgSend(v11, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.hceSessionEvent"), v10);

    }
    *(_DWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 77) = 0;
  }
}

id sub_10001DB2C(_BYTE *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  unsigned __int8 v28;
  id v29;
  const char *Name;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  id v37;
  uint8_t v38[128];
  uint8_t buf[4];
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;

  v3 = a2;
  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getSecureElementWrapperAndSetRouting"));
    v5 = v4;
    if (a1[88])
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v8 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("_getAppletForAid:");
        v12 = 45;
        if (isMetaClass)
          v12 = 43;
        v8(6, "%c[%{public}s %{public}s]:%i Factory test mode", v12, ClassName, Name, 98);
      }
      v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v14 = NFSharedLogGetLogger(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = object_getClass(a1);
        if (class_isMetaClass(v16))
          v17 = 43;
        else
          v17 = 45;
        *(_DWORD *)buf = 67109890;
        v40 = v17;
        v41 = 2082;
        v42 = object_getClassName(a1);
        v43 = 2082;
        v44 = sel_getName("_getAppletForAid:");
        v45 = 1024;
        v46 = 98;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Factory test mode", buf, 0x22u);
      }

      v37 = 0;
      v18 = sub_10022EE68(v5, &v37);
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v19 = v37;
      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
      if (v20)
      {
        v21 = v20;
        v32 = v5;
        v22 = 0;
        v23 = *(_QWORD *)v34;
LABEL_14:
        v24 = 0;
        v25 = v22;
        while (1)
        {
          if (*(_QWORD *)v34 != v23)
            objc_enumerationMutation(v19);
          v22 = *(id *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v24);

          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "identifierAsData"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v3));
          v28 = objc_msgSend(v26, "isEqualToData:", v27);

          if ((v28 & 1) != 0)
            break;
          v24 = (char *)v24 + 1;
          v25 = v22;
          if (v21 == v24)
          {
            v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
            if (v21)
              goto LABEL_14;

            v22 = 0;
            break;
          }
        }
        v5 = v32;
      }
      else
      {
        v22 = 0;
      }

    }
    else
    {
      v29 = sub_10022F2F0(v4, v3);
      v22 = (id)objc_claimAutoreleasedReturnValue(v29);
    }

  }
  else
  {
    v22 = 0;
  }

  return v22;
}

void sub_1000211FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100021228(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100021238(uint64_t a1)
{

}

void sub_100021240(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", v5);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ClosedLoopTCIs")));
  if (v7)
  {
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, CFSTR("TCIs"));
    objc_msgSend(v6, "removeObjectForKey:", CFSTR("ClosedLoopTCIs"));
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v6, v8);

}

id sub_1000217DC(void *a1, void *a2, void *a3, int a4, void *a5, unsigned int a6)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *specific;
  uint64_t Logger;
  void (*v27)(_QWORD, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *v39;
  const char *v40;
  __CFString *v41;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  void *v48;
  int v49;
  __CFString *v50;
  const __CFString *v51;
  _UNKNOWN **v52;
  void *i;
  __CFString *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  __CFString *v63;
  __CFString *v64;
  void *v65;
  uint64_t v66;
  void (*v67)(_QWORD, const char *, ...);
  objc_class *v68;
  _BOOL4 v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  objc_class *v75;
  int v76;
  const char *v77;
  const char *v78;
  id v79;
  __CFString *v80;
  id v81;
  id v82;
  id v83;
  void *v84;
  void *v85;
  uint64_t v86;
  void (*v87)(_QWORD, const char *, ...);
  objc_class *v88;
  _BOOL4 v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  NSObject *v94;
  objc_class *v95;
  int v96;
  const char *v97;
  const char *v98;
  id v99;
  id v100;
  id v101;
  void *v102;
  int v103;
  void *v104;
  uint64_t v105;
  void (*v106)(_QWORD, const char *, ...);
  objc_class *v107;
  _BOOL4 v108;
  const char *v109;
  const char *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  NSObject *v115;
  objc_class *v116;
  int v117;
  const char *v118;
  const char *v119;
  __CFString *v120;
  id v121;
  void *v122;
  void *v123;
  uint64_t v124;
  void (*v125)(_QWORD, const char *, ...);
  objc_class *v126;
  _BOOL4 v127;
  const char *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  NSObject *v132;
  objc_class *v133;
  int v134;
  const char *v135;
  const char *v136;
  void *v137;
  uint64_t v138;
  void (*v139)(_QWORD, const char *, ...);
  objc_class *v140;
  _BOOL4 v141;
  const char *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  NSObject *v146;
  objc_class *v147;
  int v148;
  const char *v149;
  const char *v150;
  id v151;
  uint64_t v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  void (*v161)(_QWORD, const char *, ...);
  objc_class *v162;
  _BOOL4 v163;
  const char *v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  NSObject *v168;
  objc_class *v169;
  int v170;
  const char *v171;
  const char *v172;
  id v173;
  id v174;
  id v175;
  void *v176;
  void *v177;
  id v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  void (*v182)(_QWORD, const char *, ...);
  objc_class *v183;
  _BOOL4 v184;
  const char *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  NSObject *v189;
  objc_class *v190;
  int v191;
  const char *v192;
  const char *v193;
  id v194;
  const char *v196;
  const char *v197;
  const char *v198;
  const char *v199;
  const char *v200;
  const char *v201;
  const char *v202;
  id v203;
  __CFString *v204;
  unsigned int v205;
  const __CFString *v206;
  id v207;
  void *v210;
  void *v211;
  int v212;
  int v213;
  void *v214;
  void *v215;
  id v216;
  void *v217;
  id v218;
  __CFString *v219;
  id v220;
  uint64_t v221;
  __CFString *v222;
  id obj;
  void *v224;
  void *v225;
  id v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int16 v231;
  char v232;
  _QWORD v233[5];
  _QWORD v234[5];
  _QWORD v235[5];
  _QWORD v236[5];
  uint8_t buf[8];
  __int16 v238;
  const char *v239;
  __int16 v240;
  const char *v241;
  __int16 v242;
  int v243;
  __int16 v244;
  const __CFString *v245;
  __int16 v246;
  __CFString *v247;
  __int16 v248;
  __CFString *v249;
  __int16 v250;
  id v251;
  _QWORD v252[5];
  _QWORD v253[5];
  _QWORD v254[5];
  _QWORD v255[5];
  _QWORD v256[5];
  _QWORD v257[5];
  _BYTE v258[128];
  _QWORD v259[5];
  _QWORD v260[5];
  _QWORD v261[5];
  _QWORD v262[5];

  v9 = a2;
  v10 = a3;
  v11 = a5;
  v226 = a1;
  if (!a1)
  {
    v45 = 0;
    goto LABEL_140;
  }
  v12 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269878, 13);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "NF_asHexString"));

  v14 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269885, 7);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "NF_asHexString"));

  v16 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026988C, 7);
  v215 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "NF_asHexString"));

  v17 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269893, 9);
  v214 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "NF_asHexString"));

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
  v211 = v13;
  v19 = objc_msgSend(v18, "compare:options:range:", v13, 1, 0, objc_msgSend(v13, "length"));

  v224 = v10;
  v217 = v15;
  if (v19)
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
    if (objc_msgSend(v20, "compare:options:range:", v15, 1, 0, objc_msgSend(v15, "length")))
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
      v22 = objc_msgSend(v21, "compare:options:range:", v215, 1, 0, objc_msgSend(v215, "length"));

      if (v22)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
        v24 = objc_msgSend(v23, "compare:options:range:", v214, 1, 0, objc_msgSend(v214, "length"));

        if (v24)
        {
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = NFLogGetLogger(specific);
          if (Logger)
          {
            v27 = (void (*)(_QWORD, const char *, ...))Logger;
            Class = object_getClass(v226);
            isMetaClass = class_isMetaClass(Class);
            ClassName = object_getClassName(v226);
            Name = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
            v33 = 45;
            if (isMetaClass)
              v33 = 43;
            v27(3, "%c[%{public}s %{public}s]:%i keys are not supported on %{public}@", v33, ClassName, Name, 663, v32);

          }
          v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v35 = NFSharedLogGetLogger(v34);
          v36 = objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            v37 = object_getClass(v226);
            if (class_isMetaClass(v37))
              v38 = 43;
            else
              v38 = 45;
            v39 = object_getClassName(v226);
            v40 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
            v41 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)&buf[4] = v38;
            v238 = 2082;
            v239 = v39;
            v240 = 2082;
            v241 = v40;
            v242 = 1024;
            v243 = 663;
            v244 = 2114;
            v245 = v41;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i keys are not supported on %{public}@", buf, 0x2Cu);

          }
          v42 = objc_alloc((Class)NSError);
          v43 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v261[0] = NSLocalizedDescriptionKey;
          v219 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
          v262[0] = v219;
          v262[1] = &off_1002FD5F0;
          v261[1] = CFSTR("Line");
          v261[2] = CFSTR("Method");
          v218 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"));
          v262[2] = v218;
          v261[3] = NSDebugDescriptionErrorKey;
          v216 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 664);
          v262[3] = v216;
          v261[4] = NSLocalizedFailureReasonErrorKey;
          obj = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("keys are not supported on the applet"));
          v262[4] = obj;
          v44 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v262, v261, 5));
          v222 = (__CFString *)v43;
          v45 = objc_msgSend(v42, "initWithDomain:code:userInfo:", v43, 10, v44);
LABEL_137:

          v48 = v217;
LABEL_138:

          goto LABEL_139;
        }
        v177 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
        if (objc_msgSend(v177, "BOOLForKey:", CFSTR("debugAcwgSpecCompliance")))
        {
          LOBYTE(v231) = 1;
          buf[2] = 3;
          *(_WORD *)buf = 513;
          v222 = (__CFString *)objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", buf, 3);
          v178 = objc_alloc((Class)NSData);
          v179 = 1;
        }
        else
        {
          v232 = 8;
          v231 = 1798;
          *(_QWORD *)buf = 0x807060504030201;
          v222 = (__CFString *)objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", buf, 8);
          v178 = objc_alloc((Class)NSData);
          v179 = 3;
        }
        v219 = (__CFString *)objc_msgSend(v178, "initWithBytes:length:", &v231, v179);

        v212 = 1;
        goto LABEL_20;
      }
    }
    else
    {

    }
    LOBYTE(v231) = -17;
    *(_DWORD *)buf = 50463215;
    v46 = objc_alloc((Class)NSData);
    v47 = 4;
  }
  else
  {
    LOBYTE(v231) = 6;
    *(_WORD *)&buf[4] = 1540;
    *(_DWORD *)buf = 50462976;
    v46 = objc_alloc((Class)NSData);
    v47 = 6;
  }
  v222 = (__CFString *)objc_msgSend(v46, "initWithBytes:length:", buf, v47);
  v219 = (__CFString *)objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v231, 1);
  v212 = 0;
LABEL_20:
  v48 = v217;
  v218 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v226, "getSecureElementWrapperAndSetRouting"));
  if (!v218)
  {
    v137 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v138 = NFLogGetLogger(v137);
    if (v138)
    {
      v139 = (void (*)(_QWORD, const char *, ...))v138;
      v140 = object_getClass(v226);
      v141 = class_isMetaClass(v140);
      v142 = object_getClassName(v226);
      v200 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
      v143 = 45;
      if (v141)
        v143 = 43;
      v139(3, "%c[%{public}s %{public}s]:%i Failed to initialize eSE wrapper", v143, v142, v200, 669);
    }
    v144 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v145 = NFSharedLogGetLogger(v144);
    v146 = objc_claimAutoreleasedReturnValue(v145);
    if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
    {
      v147 = object_getClass(v226);
      if (class_isMetaClass(v147))
        v148 = 43;
      else
        v148 = 45;
      v149 = object_getClassName(v226);
      v150 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v148;
      v238 = 2082;
      v239 = v149;
      v240 = 2082;
      v241 = v150;
      v242 = 1024;
      v243 = 669;
      _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to initialize eSE wrapper", buf, 0x22u);
    }

    v151 = objc_alloc((Class)NSError);
    v152 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v259[0] = NSLocalizedDescriptionKey;
    obj = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v260[0] = obj;
    v260[1] = &off_1002FD608;
    v259[1] = CFSTR("Line");
    v259[2] = CFSTR("Method");
    v44 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"));
    v260[2] = v44;
    v259[3] = NSDebugDescriptionErrorKey;
    v153 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 670);
    v260[3] = v153;
    v259[4] = NSLocalizedFailureReasonErrorKey;
    v154 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Failed to initialize eSE wrapper"));
    v260[4] = v154;
    v155 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v260, v259, 5));
    v216 = (id)v152;
    v45 = objc_msgSend(v151, "initWithDomain:code:userInfo:", v152, 15, v155);
LABEL_136:

    goto LABEL_137;
  }
  v210 = v11;
  v229 = 0u;
  v230 = 0u;
  v227 = 0u;
  v228 = 0u;
  obj = v9;
  v220 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v227, v258, 16);
  if (!v220)
  {
    v205 = 0;
    v216 = 0;
    goto LABEL_106;
  }
  v205 = 0;
  v216 = 0;
  v49 = v212;
  if (!v19)
    v49 = 1;
  v213 = v49;
  v221 = *(_QWORD *)v228;
  v50 = v222;
  if (a4)
    v50 = v219;
  v204 = v50;
  v51 = CFSTR("enable");
  if (!a4)
    v51 = CFSTR("disable");
  v206 = v51;
  v52 = &AMFDRSealingMapCopyLocalData_ptr;
  v203 = v9;
  while (2)
  {
    for (i = 0; i != v220; i = (char *)i + 1)
    {
      if (*(_QWORD *)v228 != v221)
        objc_enumerationMutation(obj);
      v54 = *(__CFString **)(*((_QWORD *)&v227 + 1) + 8 * (_QWORD)i);
      v55 = objc_opt_class(NSDictionary);
      if ((objc_opt_isKindOfClass(v54, v55) & 1) == 0)
      {
        v180 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v181 = NFLogGetLogger(v180);
        if (v181)
        {
          v182 = (void (*)(_QWORD, const char *, ...))v181;
          v183 = object_getClass(v226);
          v184 = class_isMetaClass(v183);
          v185 = object_getClassName(v226);
          v202 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
          v186 = 45;
          if (v184)
            v186 = 43;
          v182(3, "%c[%{public}s %{public}s]:%i Invalid type", v186, v185, v202, 680);
        }
        v187 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v188 = NFSharedLogGetLogger(v187);
        v189 = objc_claimAutoreleasedReturnValue(v188);
        v9 = v203;
        if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
        {
          v190 = object_getClass(v226);
          if (class_isMetaClass(v190))
            v191 = 43;
          else
            v191 = 45;
          v192 = object_getClassName(v226);
          v193 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v191;
          v238 = 2082;
          v239 = v192;
          v240 = 2082;
          v241 = v193;
          v242 = 1024;
          v243 = 680;
          _os_log_impl((void *)&_mh_execute_header, v189, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid type", buf, 0x22u);
        }

        v194 = objc_alloc((Class)NSError);
        v44 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v256[0] = NSLocalizedDescriptionKey;
        v153 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
        v257[0] = v153;
        v257[1] = &off_1002FD620;
        v256[1] = CFSTR("Line");
        v256[2] = CFSTR("Method");
        v154 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"));
        v257[2] = v154;
        v256[3] = NSDebugDescriptionErrorKey;
        v155 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 681);
        v257[3] = v155;
        v256[4] = NSLocalizedFailureReasonErrorKey;
        v174 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid key type"));
        v257[4] = v174;
        v175 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v257, v256, 5));
        v45 = objc_msgSend(v194, "initWithDomain:code:userInfo:", v44, 10, v175);
        goto LABEL_131;
      }
      v44 = (id)objc_claimAutoreleasedReturnValue(-[__CFString objectForKeyedSubscript:](v54, "objectForKeyedSubscript:", CFSTR("keyIdentifier")));
      if (!v44 || (v56 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v44, v56) & 1) == 0))
      {
        v159 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v160 = NFLogGetLogger(v159);
        if (v160)
        {
          v161 = (void (*)(_QWORD, const char *, ...))v160;
          v162 = object_getClass(v226);
          v163 = class_isMetaClass(v162);
          v164 = object_getClassName(v226);
          v201 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
          v165 = 45;
          if (v163)
            v165 = 43;
          v161(3, "%c[%{public}s %{public}s]:%i key ID is missing or has an invalid type ?!", v165, v164, v201, 759);
        }
        v166 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v167 = NFSharedLogGetLogger(v166);
        v168 = objc_claimAutoreleasedReturnValue(v167);
        v9 = v203;
        if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
        {
          v169 = object_getClass(v226);
          if (class_isMetaClass(v169))
            v170 = 43;
          else
            v170 = 45;
          v171 = object_getClassName(v226);
          v172 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v170;
          v238 = 2082;
          v239 = v171;
          v240 = 2082;
          v241 = v172;
          v242 = 1024;
          v243 = 759;
          _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i key ID is missing or has an invalid type ?!", buf, 0x22u);
        }

        v173 = objc_alloc((Class)NSError);
        v153 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v235[0] = NSLocalizedDescriptionKey;
        v154 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
        v236[0] = v154;
        v236[1] = &off_1002FD668;
        v235[1] = CFSTR("Line");
        v235[2] = CFSTR("Method");
        v155 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"));
        v236[2] = v155;
        v235[3] = NSDebugDescriptionErrorKey;
        v174 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 760);
        v236[3] = v174;
        v235[4] = NSLocalizedFailureReasonErrorKey;
        v175 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("key ID is missing or has an invalid type ?!"));
        v236[4] = v175;
        v176 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v236, v235, 5));
        v45 = objc_msgSend(v173, "initWithDomain:code:userInfo:", v153, 10, v176);

LABEL_131:
        v10 = v224;
        v11 = v210;
        goto LABEL_136;
      }
      v57 = v52[260];
      v58 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKeyedSubscript:](v54, "objectForKeyedSubscript:", CFSTR("UWBExpressEnabled")));
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "numberWithBool:", objc_msgSend(v58, "BOOLValue")));

      v225 = v59;
      if (v59)
      {
        v60 = objc_opt_class(v52[260]);
        if ((objc_opt_isKindOfClass(v59, v60) & 1) == 0)
        {
          v85 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v86 = NFLogGetLogger(v85);
          if (v86)
          {
            v87 = (void (*)(_QWORD, const char *, ...))v86;
            v88 = object_getClass(v226);
            v89 = class_isMetaClass(v88);
            v90 = object_getClassName(v226);
            v198 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
            v91 = 45;
            if (v89)
              v91 = 43;
            v87(3, "%c[%{public}s %{public}s]:%i Invalid UWB type", v91, v90, v198, 693);
          }
          v92 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v93 = NFSharedLogGetLogger(v92);
          v94 = objc_claimAutoreleasedReturnValue(v93);
          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            v95 = object_getClass(v226);
            if (class_isMetaClass(v95))
              v96 = 43;
            else
              v96 = 45;
            v97 = object_getClassName(v226);
            v98 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v96;
            v238 = 2082;
            v239 = v97;
            v240 = 2082;
            v241 = v98;
            v242 = 1024;
            v243 = 693;
            _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid UWB type", buf, 0x22u);
          }

          v99 = objc_alloc((Class)NSError);
          v63 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v254[0] = NSLocalizedDescriptionKey;
          v80 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
          v255[0] = v80;
          v255[1] = &off_1002FD638;
          v254[1] = CFSTR("Line");
          v254[2] = CFSTR("Method");
          v81 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"));
          v255[2] = v81;
          v254[3] = NSDebugDescriptionErrorKey;
          v100 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 694);
          v255[3] = v100;
          v254[4] = NSLocalizedFailureReasonErrorKey;
          v101 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid UWB value type"));
          v255[4] = v101;
          v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v255, v254, 5));
          v207 = objc_msgSend(v99, "initWithDomain:code:userInfo:", v63, 10, v102);

          goto LABEL_62;
        }
      }
      v61 = objc_msgSend(v59, "BOOLValue");
      if (((v61 ^ 1 | v213) & 1) == 0)
      {
        v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v66 = NFLogGetLogger(v65);
        if (v66)
        {
          v67 = (void (*)(_QWORD, const char *, ...))v66;
          v68 = object_getClass(v226);
          v69 = class_isMetaClass(v68);
          v70 = object_getClassName(v226);
          v197 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
          v71 = 45;
          if (v69)
            v71 = 43;
          v67(3, "%c[%{public}s %{public}s]:%i what you talking 'bout Willis?!", v71, v70, v197, 699);
        }
        v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v73 = NFSharedLogGetLogger(v72);
        v74 = objc_claimAutoreleasedReturnValue(v73);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        {
          v75 = object_getClass(v226);
          if (class_isMetaClass(v75))
            v76 = 43;
          else
            v76 = 45;
          v77 = object_getClassName(v226);
          v78 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v76;
          v238 = 2082;
          v239 = v77;
          v240 = 2082;
          v241 = v78;
          v242 = 1024;
          v243 = 699;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i what you talking 'bout Willis?!", buf, 0x22u);
        }

        v79 = objc_alloc((Class)NSError);
        v63 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v252[0] = NSLocalizedDescriptionKey;
        v80 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
        v253[0] = v80;
        v253[1] = &off_1002FD650;
        v252[1] = CFSTR("Line");
        v252[2] = CFSTR("Method");
        v81 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"));
        v253[2] = v81;
        v252[3] = NSDebugDescriptionErrorKey;
        v82 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 700);
        v253[3] = v82;
        v252[4] = NSLocalizedFailureReasonErrorKey;
        v83 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("what you talking 'bout Willis?!"));
        v253[4] = v83;
        v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v253, v252, 5));
        v207 = objc_msgSend(v79, "initWithDomain:code:userInfo:", v63, 10, v84);

LABEL_62:
        v103 = 0;
        v10 = v224;
        goto LABEL_91;
      }
      v62 = v61;
      if (v212)
      {
        v63 = v204;
        if (v62)
          v64 = v219;
        else
          v64 = v222;
      }
      else if (a4)
      {
        if (v61)
        {
          v63 = v222;
          v64 = v219;
        }
        else
        {
          v63 = v219;
          v64 = v222;
        }
      }
      else
      {
        v64 = v222;
        v63 = v64;
      }
      v80 = v64;
      v104 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v105 = NFLogGetLogger(v104);
      if (v105)
      {
        v106 = (void (*)(_QWORD, const char *, ...))v105;
        v107 = object_getClass(v226);
        v108 = class_isMetaClass(v107);
        v109 = object_getClassName(v226);
        v110 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
        v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
        v112 = 45;
        if (v108)
          v112 = 43;
        v106(6, "%c[%{public}s %{public}s]:%i %{public}@ express for key:%{public}@ AID:%{public}@", v112, v109, v110, 740, v206, v54, v111);

        v10 = v224;
      }
      v113 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v114 = NFSharedLogGetLogger(v113);
      v115 = objc_claimAutoreleasedReturnValue(v114);
      if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
      {
        v116 = object_getClass(v226);
        if (class_isMetaClass(v116))
          v117 = 43;
        else
          v117 = 45;
        v118 = object_getClassName(v226);
        v119 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
        v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v224, "identifier"));
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v117;
        v238 = 2082;
        v239 = v118;
        v240 = 2082;
        v241 = v119;
        v10 = v224;
        v242 = 1024;
        v243 = 740;
        v244 = 2114;
        v245 = v206;
        v246 = 2114;
        v247 = v54;
        v248 = 2114;
        v249 = (__CFString *)v120;
        _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@ express for key:%{public}@ AID:%{public}@", buf, 0x40u);

      }
      v121 = sub_100233204(v218, v63, v80, v44, v10, v210, a6);
      v122 = (void *)objc_claimAutoreleasedReturnValue(v121);
      v81 = v122;
      if (!v122)
        goto LABEL_80;
      if (objc_msgSend(v122, "code") == (id)65)
      {
        ++v205;
LABEL_80:
        v103 = 1;
        goto LABEL_91;
      }
      v123 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v124 = NFLogGetLogger(v123);
      if (v124)
      {
        v125 = (void (*)(_QWORD, const char *, ...))v124;
        v126 = object_getClass(v226);
        v127 = class_isMetaClass(v126);
        v128 = object_getClassName(v226);
        v199 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
        v129 = 45;
        if (v127)
          v129 = 43;
        v196 = v128;
        v10 = v224;
        v125(3, "%c[%{public}s %{public}s]:%i failed to setup transaction codes contactless:%{public}@ wired:%{public}@ on key %{public}@: %{public}@", v129, v196, v199, 753, v63, v80, v54, v81);
      }
      v130 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v131 = NFSharedLogGetLogger(v130);
      v132 = objc_claimAutoreleasedReturnValue(v131);
      if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
      {
        v133 = object_getClass(v226);
        if (class_isMetaClass(v133))
          v134 = 43;
        else
          v134 = 45;
        v135 = object_getClassName(v226);
        v136 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
        *(_DWORD *)buf = 67110914;
        *(_DWORD *)&buf[4] = v134;
        v10 = v224;
        v238 = 2082;
        v239 = v135;
        v240 = 2082;
        v241 = v136;
        v242 = 1024;
        v243 = 753;
        v244 = 2114;
        v245 = v63;
        v246 = 2114;
        v247 = v80;
        v248 = 2114;
        v249 = v54;
        v250 = 2114;
        v251 = v81;
        _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i failed to setup transaction codes contactless:%{public}@ wired:%{public}@ on key %{public}@: %{public}@", buf, 0x4Au);
      }

      v81 = v81;
      v103 = 1;
      v216 = v81;
LABEL_91:

      if (!v103)
      {
        v9 = v203;
        v11 = v210;
        v48 = v217;
        v45 = v207;
        goto LABEL_138;
      }
      v52 = &AMFDRSealingMapCopyLocalData_ptr;
    }
    v9 = v203;
    v48 = v217;
    v220 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v227, v258, 16);
    if (v220)
      continue;
    break;
  }
LABEL_106:

  +[NFGeneralStatisticsCALogger postAnalyticsSetupEndpoints:totalUnknowntoSE:](NFGeneralStatisticsCALogger, "postAnalyticsSetupEndpoints:totalUnknowntoSE:", objc_msgSend(obj, "count"), v205);
  if (v216)
  {
    v156 = objc_alloc((Class)NSError);
    obj = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v157 = objc_msgSend(v216, "code");
    v233[0] = NSLocalizedDescriptionKey;
    v11 = v210;
    if ((uint64_t)objc_msgSend(v216, "code") > 70)
      v158 = 71;
    else
      v158 = (uint64_t)objc_msgSend(v216, "code");
    v44 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E5140[v158]));
    v234[0] = v44;
    v234[1] = v216;
    v233[1] = NSUnderlyingErrorKey;
    v233[2] = CFSTR("Line");
    v234[2] = &off_1002FD680;
    v233[3] = CFSTR("Method");
    v153 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"));
    v234[3] = v153;
    v233[4] = NSDebugDescriptionErrorKey;
    v154 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 766);
    v234[4] = v154;
    v155 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v234, v233, 5));
    v45 = objc_msgSend(v156, "initWithDomain:code:userInfo:", obj, v157, v155);
    v10 = v224;
    goto LABEL_136;
  }
  v45 = 0;
  v11 = v210;
LABEL_139:

LABEL_140:
  return v45;
}

id sub_100025280(id *a1, int a2)
{
  id v4;
  id v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  id v18;
  void *v19;
  NSMutableArray *v20;
  NSMutableDictionary *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *v32;
  _BOOL4 v33;
  const char *v34;
  const char *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  objc_class *v41;
  int v42;
  const char *v43;
  const char *v44;
  NSMutableArray *v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void (*v53)(uint64_t, const char *, ...);
  objc_class *v54;
  _BOOL4 v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  NSObject *v60;
  objc_class *v61;
  int v62;
  id v63;
  id v64;
  id v65;
  void *v66;
  NSMutableDictionary *v67;
  NSMutableDictionary *v68;
  void *v69;
  id v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void (*v76)(uint64_t, const char *, ...);
  objc_class *v77;
  _BOOL4 v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  NSObject *v83;
  objc_class *v84;
  int v85;
  const char *v86;
  const char *v87;
  id v88;
  const char *Name;
  const char *v91;
  const char *v92;
  unint64_t v93;
  uint8_t buf[4];
  int v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  int v101;
  __int16 v102;
  NSMutableArray *v103;
  __int16 v104;
  id v105;
  _QWORD v106[5];
  _QWORD v107[5];
  _QWORD v108[4];
  _QWORD v109[4];
  _QWORD v110[5];
  _QWORD v111[5];

  if (!a1)
    return 0;
  v4 = a1[2];
  v5 = objc_msgSend(v4, "count");

  if (v5)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("setFactoryTestConfigInECP2Mode:");
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v8(3, "%c[%{public}s %{public}s]:%i Config is not empty, cannot configure factory test mode", v12, ClassName, Name, 937);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = object_getClass(a1);
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      *(_DWORD *)buf = 67109890;
      v95 = v17;
      v96 = 2082;
      v97 = object_getClassName(a1);
      v98 = 2082;
      v99 = sel_getName("setFactoryTestConfigInECP2Mode:");
      v100 = 1024;
      v101 = 937;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Config is not empty, cannot configure factory test mode", buf, 0x22u);
    }

    v18 = objc_alloc((Class)NSError);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v110[0] = NSLocalizedDescriptionKey;
    v20 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v111[0] = v20;
    v111[1] = &off_1002FD6C8;
    v110[1] = CFSTR("Line");
    v110[2] = CFSTR("Method");
    v21 = (NSMutableDictionary *)objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setFactoryTestConfigInECP2Mode:"));
    v111[2] = v21;
    v110[3] = NSDebugDescriptionErrorKey;
    v22 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setFactoryTestConfigInECP2Mode:"), 938);
    v111[3] = v22;
    v110[4] = NSLocalizedFailureReasonErrorKey;
    v23 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Config is not empty"));
    v111[4] = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v111, v110, 5));
    v25 = objc_msgSend(v18, "initWithDomain:code:userInfo:", v19, 12, v24);

  }
  else
  {
    v26 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", "FACTORYTESTAPP", 14);
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "NF_asHexString"));
    v28 = sub_10001DB2C(a1, v27);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v28);

    if (v19)
    {
      if (objc_msgSend(v19, "authTransientSupport"))
      {
        v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v30 = NFLogGetLogger(v29);
        if (v30)
        {
          v31 = (void (*)(uint64_t, const char *, ...))v30;
          v32 = object_getClass(a1);
          v33 = class_isMetaClass(v32);
          v34 = object_getClassName(a1);
          v35 = sel_getName("setFactoryTestConfigInECP2Mode:");
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "identifier"));
          v37 = 45;
          if (v33)
            v37 = 43;
          v31(3, "%c[%{public}s %{public}s]:%i Authorization is enabled for %{public}@", v37, v34, v35, 948, v36);

        }
        v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v39 = NFSharedLogGetLogger(v38);
        v40 = objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          v41 = object_getClass(a1);
          if (class_isMetaClass(v41))
            v42 = 43;
          else
            v42 = 45;
          v43 = object_getClassName(a1);
          v44 = sel_getName("setFactoryTestConfigInECP2Mode:");
          v45 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "identifier"));
          *(_DWORD *)buf = 67110146;
          v95 = v42;
          v96 = 2082;
          v97 = v43;
          v98 = 2082;
          v99 = v44;
          v100 = 1024;
          v101 = 948;
          v102 = 2114;
          v103 = v45;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Authorization is enabled for %{public}@", buf, 0x2Cu);

        }
        v46 = objc_alloc((Class)NSError);
        v20 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v106[0] = NSLocalizedDescriptionKey;
        v21 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
        v107[0] = v21;
        v107[1] = &off_1002FD6F8;
        v106[1] = CFSTR("Line");
        v106[2] = CFSTR("Method");
        v47 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setFactoryTestConfigInECP2Mode:"));
        v107[2] = v47;
        v106[3] = NSDebugDescriptionErrorKey;
        v48 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setFactoryTestConfigInECP2Mode:"), 949);
        v107[3] = v48;
        v106[4] = NSLocalizedFailureReasonErrorKey;
        v49 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Authorization enabled on express applet"));
        v107[4] = v49;
        v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v107, v106, 5));
        v25 = objc_msgSend(v46, "initWithDomain:code:userInfo:", v20, 10, v50);

      }
      else
      {
        v20 = objc_opt_new(NSMutableArray);
        v67 = objc_opt_new(NSMutableDictionary);
        v21 = v67;
        if (a2)
        {
          -[NSMutableDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", CFSTR("ECP2"), CFSTR("ExpressType"));
          v68 = objc_opt_new(NSMutableDictionary);
          v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", CFSTR("020000")));
          v70 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v69, 0);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v68, "setObject:forKeyedSubscript:", v70, CFSTR("primaryTCIs"));

          -[NSMutableDictionary setObject:forKeyedSubscript:](v21, "setObject:forKeyedSubscript:", v68, CFSTR("ECP2Info"));
        }
        else
        {
          -[NSMutableDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", CFSTR("GenericA"), CFSTR("ExpressType"));
        }
        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "identifier"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v21, "setObject:forKeyedSubscript:", v71, CFSTR("appletIdentifier"));

        -[NSMutableDictionary setObject:forKeyedSubscript:](v21, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("expressEnabled"));
        v72 = arc4random();
        v93 = arc4random() | (unint64_t)(v72 << 32);
        v47 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v93, 8);
        v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "NF_asHexString"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v21, "setObject:forKeyedSubscript:", v73, CFSTR("passUniqueID"));

        -[NSMutableArray addObject:](v20, "addObject:", v21);
        objc_msgSend(a1, "dumpConfig:logLevel:prefix:", v20, 6, CFSTR("factory test config"));
        v25 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "reconfigureWithArray:restoreAuthorization:updateStorage:", v20, 0, 1));
        if (v25)
        {
          v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v75 = NFLogGetLogger(v74);
          if (v75)
          {
            v76 = (void (*)(uint64_t, const char *, ...))v75;
            v77 = object_getClass(a1);
            v78 = class_isMetaClass(v77);
            v79 = object_getClassName(a1);
            v92 = sel_getName("setFactoryTestConfigInECP2Mode:");
            v80 = 45;
            if (v78)
              v80 = 43;
            v76(3, "%c[%{public}s %{public}s]:%i Failed to set express config: %{public}@; error: %{public}@",
              v80,
              v79,
              v92,
              979,
              v20,
              v25);
          }
          v81 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v82 = NFSharedLogGetLogger(v81);
          v83 = objc_claimAutoreleasedReturnValue(v82);
          if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
          {
            v84 = object_getClass(a1);
            if (class_isMetaClass(v84))
              v85 = 43;
            else
              v85 = 45;
            v86 = object_getClassName(a1);
            v87 = sel_getName("setFactoryTestConfigInECP2Mode:");
            *(_DWORD *)buf = 67110402;
            v95 = v85;
            v96 = 2082;
            v97 = v86;
            v98 = 2082;
            v99 = v87;
            v100 = 1024;
            v101 = 979;
            v102 = 2114;
            v103 = v20;
            v104 = 2114;
            v105 = v25;
            _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set express config: %{public}@; error: %{public}@",
              buf,
              0x36u);
          }

          v88 = v25;
        }

      }
    }
    else
    {
      v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v52 = NFLogGetLogger(v51);
      if (v52)
      {
        v53 = (void (*)(uint64_t, const char *, ...))v52;
        v54 = object_getClass(a1);
        v55 = class_isMetaClass(v54);
        v56 = object_getClassName(a1);
        v91 = sel_getName("setFactoryTestConfigInECP2Mode:");
        v57 = 45;
        if (v55)
          v57 = 43;
        v53(3, "%c[%{public}s %{public}s]:%i Failed to find FTA applet", v57, v56, v91, 943);
      }
      v58 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v59 = NFSharedLogGetLogger(v58);
      v60 = objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        v61 = object_getClass(a1);
        if (class_isMetaClass(v61))
          v62 = 43;
        else
          v62 = 45;
        *(_DWORD *)buf = 67109890;
        v95 = v62;
        v96 = 2082;
        v97 = object_getClassName(a1);
        v98 = 2082;
        v99 = sel_getName("setFactoryTestConfigInECP2Mode:");
        v100 = 1024;
        v101 = 943;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to find FTA applet", buf, 0x22u);
      }

      v63 = objc_alloc((Class)NSError);
      v20 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v108[0] = NSLocalizedDescriptionKey;
      v21 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v109[0] = v21;
      v109[1] = &off_1002FD6E0;
      v108[1] = CFSTR("Line");
      v108[2] = CFSTR("Method");
      v64 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setFactoryTestConfigInECP2Mode:"));
      v109[2] = v64;
      v108[3] = NSDebugDescriptionErrorKey;
      v65 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setFactoryTestConfigInECP2Mode:"), 944);
      v109[3] = v65;
      v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v109, v108, 4));
      v25 = objc_msgSend(v63, "initWithDomain:code:userInfo:", v20, 12, v66);

      v19 = 0;
    }
  }

  return v25;
}

BOOL sub_100025DE8(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  _BOOL8 v11;
  id v13;

  if (!a1)
    return 0;
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getSecureElementWrapperAndSetRouting"));
  v13 = 0;
  v7 = sub_10023B324(v6, v5, &v13);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v9 = v13;
  v10 = objc_msgSend(v8, "mutableCopy");

  *a3 = v10;
  v11 = v9 == 0;

  return v11;
}

uint64_t sub_100026500(void *a1, int a2, _QWORD *a3)
{
  __CFString *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _OWORD *v12;
  int v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v41;
  const char *ClassName;
  const char *Name;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  objc_class *v47;
  int v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  _BOOL8 v60;
  char v61;
  void *v64;
  void *v66;
  id v67;
  id v68;
  int v69;
  __CFString *v70;
  uint8_t buf[4];
  int v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  int v78;
  _OWORD v79[195];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int16 v85;
  unsigned __int8 v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned __int16 v96;
  unsigned __int16 v97;
  unsigned __int16 v98;
  unsigned __int16 v99;
  unsigned __int16 v100;
  unsigned __int16 v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  unsigned __int8 v106;

  if (!a1)
    return 0;
  v6 = CFSTR("embedded");
  if (a2 != 1)
    v6 = 0;
  v70 = v6;
  v7 = a1;
  objc_sync_enter(v7);
  if (!v7[5])
  {
    v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    objc_msgSend(v66, "handleFailureInMethod:object:file:lineNumber:description:", "getSecureElementInfo:info:", v7, CFSTR("NFDriverWrapper+SE.m"), 33, CFSTR("driver not open"));

  }
  memset(v79, 0, 512);
  if ((NFDriverGetSecureElementInfo() & 1) != 0)
  {
    v68 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v82, 24);
    v67 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v83, 24);
    v69 = a2;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = &v79[v8];
      if (*(_QWORD *)&v79[v8 + 64])
      {
        v13 = *((unsigned __int8 *)v12 + 1032);
        if (v13 == 1)
        {
          v14 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v79[v8], *((_QWORD *)v12 + 128));

          v13 = *((unsigned __int8 *)v12 + 1032);
          v11 = v14;
        }
        if (v13 == 2)
        {
          v15 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v79[v8], *((_QWORD *)v12 + 128));

          v13 = *((unsigned __int8 *)v12 + 1032);
          v10 = v15;
        }
        if (v13 == 3)
        {
          v16 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v79[v8], *((_QWORD *)v12 + 128));

          v9 = v16;
        }
      }
      v8 += 65;
    }
    while (v8 != 195);
    v17 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 32);
    v18 = v17;
    if (v69 == 1)
    {
      objc_msgSend(v17, "setObject:forKey:", CFSTR("embedded"), CFSTR("identifier"));
      v19 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", &v81);
      objc_msgSend(v18, "setObject:forKey:", v19, CFSTR("platformIdentifier"));

      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", __rev16(v85)));
      objc_msgSend(v18, "setObject:forKey:", v20, CFSTR("OSVersion"));

      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", ((unint64_t)v85 << 16) | ((unint64_t)HIBYTE(v85) << 8) | v86));
      objc_msgSend(v18, "setObject:forKey:", v21, CFSTR("fullOSVersion"));

      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v93));
      objc_msgSend(v18, "setObject:forKey:", v22, CFSTR("firmwareVersion"));

      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v96));
      objc_msgSend(v18, "setObject:forKey:", v23, CFSTR("compiledFWVersion"));

      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v94));
      objc_msgSend(v18, "setObject:forKey:", v24, CFSTR("hardwareVersion"));

      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v102));
      objc_msgSend(v18, "setObject:forKey:", v25, CFSTR("deviceType"));

      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v97));
      objc_msgSend(v18, "setObject:forKey:", v26, CFSTR("sequenceCounter"));

      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v98));
      objc_msgSend(v18, "setObject:forKey:", v27, CFSTR("referenceCounter"));

      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v103));
      objc_msgSend(v18, "setObject:forKey:", v28, CFSTR("osid"));

      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v104));
      objc_msgSend(v18, "setObject:forKey:", v29, CFSTR("otherOSValid"));

      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v105));
      objc_msgSend(v18, "setObject:forKey:", v30, CFSTR("restrictedMode"));

      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v87));
      objc_msgSend(v18, "setObject:forKey:", v31, CFSTR("OSMode"));

      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v88));
      objc_msgSend(v18, "setObject:forKey:", v32, CFSTR("signingKeyType"));

      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v89));
      objc_msgSend(v18, "setObject:forKey:", v33, CFSTR("migrationState"));

      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v99));
      objc_msgSend(v18, "setObject:forKey:", v34, CFSTR("migrationPackages"));

      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v100));
      objc_msgSend(v18, "setObject:forKey:", v35, CFSTR("migrationInstances"));

      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v90));
      objc_msgSend(v18, "setObject:forKey:", v36, CFSTR("migrationContext"));

      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v95));
      objc_msgSend(v18, "setObject:forKey:", v37, CFSTR("persistentConfigID"));

      if (v68)
      {
        objc_msgSend(v18, "setObject:forKey:", v68, CFSTR("serialNumber"));
      }
      else
      {
        v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
        objc_msgSend(v18, "setObject:forKey:", v50, CFSTR("serialNumber"));

      }
      if (v67)
      {
        objc_msgSend(v18, "setObject:forKey:", v67, CFSTR("systemOSSerialNumber"));
      }
      else
      {
        v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
        objc_msgSend(v18, "setObject:forKey:", v51, CFSTR("systemOSSerialNumber"));

      }
      if (v11)
        objc_msgSend(v18, "setObject:forKey:", v11, CFSTR("rsaCertificate"));
      if (v10)
        objc_msgSend(v18, "setObject:forKey:", v10, CFSTR("ecdsaCertificate"));
      if (v9)
        objc_msgSend(v18, "setObject:forKey:", v9, CFSTR("eckaCertificate"));
      v52 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", &v84);
      objc_msgSend(v18, "setObject:forKey:", v52, CFSTR("atrString"));

    }
    if (v101)
    {
      v53 = objc_alloc((Class)NSData);
      v54 = objc_msgSend(v53, "initWithBytes:length:", &v80, v101);
    }
    else
    {
      v54 = (id)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
    }
    objc_msgSend(v18, "setObject:forKey:", v54, CFSTR("manifestQuery"));

    v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    objc_msgSend(v18, "setObject:forKey:", v55, CFSTR("personalisable"));

    v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v91));
    objc_msgSend(v18, "setObject:forKey:", v56, CFSTR("supportedTechnologies"));

    v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v92));
    objc_msgSend(v18, "setObject:forKey:", v57, CFSTR("seType"));

    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v106));
    objc_msgSend(v18, "setObject:forKey:", v58, CFSTR("osUpdateMode"));

    v59 = objc_msgSend(v7, "isJCOPTooOld:prod:version:", v102, v88 == 2, v97);
    v60 = (_BOOL8)v59;
    if (v69 == 1)
      v61 = (char)v59;
    else
      v61 = 1;
    if ((v61 & 1) == 0)
      v60 = v90 == 3 && v89 != 0 && v89 != 1;
    v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v60));
    objc_msgSend(v18, "setObject:forKey:", v64, CFSTR("jcopTooOld"));

    *a3 = -[NFHardwareSecureElementInfo initWithDictionary:]([NFHardwareSecureElementInfo alloc], "initWithDictionary:", v18);
    v49 = 1;
  }
  else
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(v7);
      if (class_isMetaClass(Class))
        v41 = 43;
      else
        v41 = 45;
      ClassName = object_getClassName(v7);
      Name = sel_getName("getSecureElementInfo:info:");
      Logger(3, "%c[%{public}s %{public}s]:%i Failed to get info", v41, ClassName, Name, 37);
    }
    v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v45 = NFSharedLogGetLogger(v44);
    v46 = objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v47 = object_getClass(v7);
      if (class_isMetaClass(v47))
        v48 = 43;
      else
        v48 = 45;
      *(_DWORD *)buf = 67109890;
      v72 = v48;
      v73 = 2082;
      v74 = object_getClassName(v7);
      v75 = 2082;
      v76 = sel_getName("getSecureElementInfo:info:");
      v77 = 1024;
      v78 = 37;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get info", buf, 0x22u);
    }

    v49 = 0;
  }
  objc_sync_exit(v7);

  return v49;
}

void sub_100026EE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100026F2C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = objc_opt_self();
  if (a2)
    *a2 = (id)NFDriverCopySEIDFromFDR(v3);
  return a2 != 0;
}

uint64_t sub_100026FAC(void *a1)
{
  id v1;
  uint64_t v2;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v6;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  void *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;

  if (!a1)
    return 0;
  v1 = a1;
  objc_sync_enter(v1);
  if (*((_BYTE *)v1 + 137))
    goto LABEL_18;
  if (!*((_QWORD *)v1 + 5))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", "setSecureElement:alwaysOn:", v1, CFSTR("NFDriverWrapper+SE.m"), 172, CFSTR("driver not open"));

  }
  if ((NFDriverSetSecureElementAlwaysOn() & 1) == 0)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(v1);
      if (class_isMetaClass(Class))
        v6 = 43;
      else
        v6 = 45;
      ClassName = object_getClassName(v1);
      Name = sel_getName("setSecureElement:alwaysOn:");
      Logger(3, "%c[%{public}s %{public}s]:%i Failed to send command", v6, ClassName, Name, 175);
    }
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFSharedLogGetLogger(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = object_getClass(v1);
      if (class_isMetaClass(v12))
        v13 = 43;
      else
        v13 = 45;
      *(_DWORD *)buf = 67109890;
      v17 = v13;
      v18 = 2082;
      v19 = object_getClassName(v1);
      v20 = 2082;
      v21 = sel_getName("setSecureElement:alwaysOn:");
      v22 = 1024;
      v23 = 175;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send command", buf, 0x22u);
    }

LABEL_18:
    v2 = 0;
    goto LABEL_19;
  }
  v2 = 1;
LABEL_19:
  objc_sync_exit(v1);

  return v2;
}

void sub_1000271B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000271E0(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v15;
  const char *ClassName;
  const char *Name;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  id v23;
  void *v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  id v35;
  void *v36;
  _QWORD v37[4];
  _QWORD v38[4];
  _QWORD v39[4];
  _QWORD v40[4];
  uint8_t buf[4];
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  int v48;
  _QWORD v49[4];
  _QWORD v50[4];

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (!*((_BYTE *)v3 + 137))
  {
    if ((NFDriverSetSecureElementPower(*((_QWORD *)v3 + 5), a2, 0) & 1) == 0)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass(v3);
        if (class_isMetaClass(Class))
          v15 = 43;
        else
          v15 = 45;
        ClassName = object_getClassName(v3);
        Name = sel_getName("sePowerCycle:");
        Logger(3, "%c[%{public}s %{public}s]:%i Failed to power SE off", v15, ClassName, Name, 191);
      }
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFSharedLogGetLogger(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = object_getClass(v3);
        if (class_isMetaClass(v21))
          v22 = 43;
        else
          v22 = 45;
        *(_DWORD *)buf = 67109890;
        v42 = v22;
        v43 = 2082;
        v44 = object_getClassName(v3);
        v45 = 2082;
        v46 = sel_getName("sePowerCycle:");
        v47 = 1024;
        v48 = 191;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to power SE off", buf, 0x22u);
      }

      v23 = objc_alloc((Class)NSError);
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v39[0] = NSLocalizedDescriptionKey;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v40[0] = v6;
      v40[1] = &off_1002FD728;
      v39[1] = CFSTR("Line");
      v39[2] = CFSTR("Method");
      v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("sePowerCycle:"));
      v40[2] = v7;
      v39[3] = NSDebugDescriptionErrorKey;
      v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("sePowerCycle:"), 192);
      v40[3] = v8;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v40, v39, 4));
      v10 = objc_msgSend(v23, "initWithDomain:code:userInfo:", v5, 15, v9);
      goto LABEL_30;
    }
    if ((NFDriverSetSecureElementPower(*((_QWORD *)v3 + 5), a2, 1) & 1) == 0)
    {
      v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v24);
      if (v25)
      {
        v26 = object_getClass(v3);
        if (class_isMetaClass(v26))
          v27 = 43;
        else
          v27 = 45;
        v28 = object_getClassName(v3);
        v29 = sel_getName("sePowerCycle:");
        v25(3, "%c[%{public}s %{public}s]:%i Failed to power SE back on", v27, v28, v29, 195);
      }
      v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v31 = NFSharedLogGetLogger(v30);
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        v33 = object_getClass(v3);
        if (class_isMetaClass(v33))
          v34 = 43;
        else
          v34 = 45;
        *(_DWORD *)buf = 67109890;
        v42 = v34;
        v43 = 2082;
        v44 = object_getClassName(v3);
        v45 = 2082;
        v46 = sel_getName("sePowerCycle:");
        v47 = 1024;
        v48 = 195;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to power SE back on", buf, 0x22u);
      }

      NFDriverSimulateCrash(*((_QWORD *)v3 + 5), 57054, "Power cycle error");
      v35 = objc_alloc((Class)NSError);
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v37[0] = NSLocalizedDescriptionKey;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v38[0] = v6;
      v38[1] = &off_1002FD740;
      v37[1] = CFSTR("Line");
      v37[2] = CFSTR("Method");
      v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("sePowerCycle:"));
      v38[2] = v7;
      v37[3] = NSDebugDescriptionErrorKey;
      v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("sePowerCycle:"), 197);
      v38[3] = v8;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v38, v37, 4));
      v10 = objc_msgSend(v35, "initWithDomain:code:userInfo:", v5, 15, v9);
      goto LABEL_30;
    }
    objc_sync_exit(v3);

    return 0;
  }
  v4 = objc_alloc((Class)NSError);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v49[0] = NSLocalizedDescriptionKey;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
  v50[0] = v6;
  v50[1] = &off_1002FD710;
  v49[1] = CFSTR("Line");
  v49[2] = CFSTR("Method");
  v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("sePowerCycle:"));
  v50[2] = v7;
  v49[3] = NSDebugDescriptionErrorKey;
  v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("sePowerCycle:"), 187);
  v50[3] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v50, v49, 4));
  v10 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v5, 3, v9);
LABEL_30:
  v36 = v10;

  objc_sync_exit(v3);
  return v36;
}

void sub_100027868(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10002789C(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *ErrorCode;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v15;
  const char *ClassName;
  const char *Name;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  id v23;
  _QWORD v25[2];
  _QWORD v26[2];
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  _QWORD v35[4];
  _QWORD v36[4];

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (!*((_BYTE *)v3 + 137))
  {
    v11 = NFDriverHCISoftReset(*((_QWORD *)v3 + 5), a2);
    if ((_DWORD)v11)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass(v3);
        if (class_isMetaClass(Class))
          v15 = 43;
        else
          v15 = 45;
        ClassName = object_getClassName(v3);
        Name = sel_getName("seSoftReset:");
        Logger(3, "%c[%{public}s %{public}s]:%i Failed to soft reset the SE", v15, ClassName, Name, 215);
      }
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFSharedLogGetLogger(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = object_getClass(v3);
        if (class_isMetaClass(v21))
          v22 = 43;
        else
          v22 = 45;
        *(_DWORD *)buf = 67109890;
        v28 = v22;
        v29 = 2082;
        v30 = object_getClassName(v3);
        v31 = 2082;
        v32 = sel_getName("seSoftReset:");
        v33 = 1024;
        v34 = 215;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to soft reset the SE", buf, 0x22u);
      }

      ErrorCode = (void *)NFDriverCreateErrorCode(v11);
      v23 = objc_alloc((Class)NSError);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v25[0] = NSLocalizedDescriptionKey;
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v25[1] = NSUnderlyingErrorKey;
      v26[0] = v7;
      v26[1] = ErrorCode;
      v8 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v26, v25, 2));
      v10 = objc_msgSend(v23, "initWithDomain:code:userInfo:", v6, 15, v8);
      goto LABEL_16;
    }
    objc_sync_exit(v3);

    return 0;
  }
  v4 = objc_alloc((Class)NSError);
  ErrorCode = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v35[0] = NSLocalizedDescriptionKey;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
  v36[0] = v6;
  v36[1] = &off_1002FD758;
  v35[1] = CFSTR("Line");
  v35[2] = CFSTR("Method");
  v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("seSoftReset:"));
  v36[2] = v7;
  v35[3] = NSDebugDescriptionErrorKey;
  v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("seSoftReset:"), 210);
  v36[3] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v36, v35, 4));
  v10 = objc_msgSend(v4, "initWithDomain:code:userInfo:", ErrorCode, 3, v9);

LABEL_16:
  objc_sync_exit(v3);

  return v10;
}

void sub_100027C5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100027C88(void *a1, uint64_t a2, void *a3, uint64_t a4, _QWORD *a5)
{
  id v5;

  if (a1)
  {
    v5 = sub_100027CB0(a1, a2, a3, 0, a4, a5);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }
  return a1;
}

id sub_100027CB0(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v23;
  const char *ClassName;
  const char *Name;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *Ownership;
  void *v41;
  void (*v42)(uint64_t, const char *, ...);
  objc_class *v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  objc_class *v50;
  int v51;
  id v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  void *v59;
  void (*v60)(uint64_t, const char *, ...);
  objc_class *v61;
  uint64_t v62;
  const char *v63;
  const char *v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  objc_class *v68;
  int v69;
  id v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  void *v75;
  void *v76;
  void (*v77)(uint64_t, const char *, ...);
  objc_class *v78;
  uint64_t v79;
  const char *v80;
  const char *v81;
  void *v82;
  uint64_t v83;
  NSObject *v84;
  objc_class *v85;
  int v86;
  const char *v87;
  const char *v88;
  void *ErrorCode;
  void *v90;
  void *v91;
  id v92;
  id v93;
  void *v94;
  id v95;
  id v96;
  void *v97;
  void *v98;
  id v99;
  id v100;
  void *v101;
  id v102;
  id v103;
  uint64_t v104;
  void *v105;
  id v106;
  id v107;
  id v108;
  id v109;
  unsigned int v110;
  _QWORD v111[4];
  _QWORD v112[4];
  _QWORD v113[5];
  _QWORD v114[5];
  _QWORD v115[5];
  _QWORD v116[5];
  _QWORD v117[5];
  _QWORD v118[5];
  _QWORD v119[5];
  _QWORD v120[5];
  _QWORD v121[4];
  _QWORD v122[4];
  uint8_t buf[4];
  int v124;
  __int16 v125;
  const char *v126;
  __int16 v127;
  const char *v128;
  __int16 v129;
  int v130;
  __int16 v131;
  id v132;
  _QWORD v133[4];
  _QWORD v134[4];
  _QWORD v135[4];
  _QWORD v136[4];
  _QWORD v137[4];
  _QWORD v138[4];

  v11 = a3;
  if (!a1)
  {
    Ownership = 0;
    goto LABEL_45;
  }
  v12 = a1;
  objc_sync_enter(v12);
  if (*((_BYTE *)v12 + 137))
  {
    if (a6)
    {
      v13 = objc_alloc((Class)NSError);
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v137[0] = NSLocalizedDescriptionKey;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
      v138[0] = v15;
      v138[1] = &off_1002FD770;
      v137[1] = CFSTR("Line");
      v137[2] = CFSTR("Method");
      v16 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"));
      v138[2] = v16;
      v137[3] = NSDebugDescriptionErrorKey;
      v17 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 243);
      v138[3] = v17;
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v138, v137, 4));
      *a6 = objc_msgSend(v13, "initWithDomain:code:userInfo:", v14, 3, v18);

    }
    goto LABEL_43;
  }
  if (!*((_QWORD *)v12 + 5))
  {
    v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    objc_msgSend(v105, "handleFailureInMethod:object:file:lineNumber:description:", "secureElement:transceive:toOS:allowInVirtual:error:", v12, CFSTR("NFDriverWrapper+SE.m"), 247, CFSTR("driver not open"));

  }
  if (!objc_msgSend(v11, "length"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(v12);
      if (class_isMetaClass(Class))
        v23 = 43;
      else
        v23 = 45;
      ClassName = object_getClassName(v12);
      Name = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
      Logger(3, "%c[%{public}s %{public}s]:%i Missing command", v23, ClassName, Name, 250);
    }
    v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v27 = NFSharedLogGetLogger(v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = object_getClass(v12);
      if (class_isMetaClass(v29))
        v30 = 43;
      else
        v30 = 45;
      *(_DWORD *)buf = 67109890;
      v124 = v30;
      v125 = 2082;
      v126 = object_getClassName(v12);
      v127 = 2082;
      v128 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
      v129 = 1024;
      v130 = 250;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing command", buf, 0x22u);
    }

    if (a6)
    {
      v31 = objc_alloc((Class)NSError);
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v135[0] = NSLocalizedDescriptionKey;
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v136[0] = v33;
      v136[1] = &off_1002FD788;
      v135[1] = CFSTR("Line");
      v135[2] = CFSTR("Method");
      v34 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"));
      v136[2] = v34;
      v135[3] = NSDebugDescriptionErrorKey;
      v35 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 251);
      v136[3] = v35;
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v136, v135, 4));
      *a6 = objc_msgSend(v31, "initWithDomain:code:userInfo:", v32, 10, v36);

    }
    goto LABEL_43;
  }
  v19 = *((_QWORD *)v12 + 5);
  if (*(_BYTE *)(v19 + 52))
  {
    if ((_DWORD)a2 != 1 || (*(_DWORD *)(v19 + 44) - 1) >= 2)
    {
LABEL_31:
      v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v42 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v41);
      if (v42)
      {
        v43 = object_getClass(v12);
        if (class_isMetaClass(v43))
          v44 = 43;
        else
          v44 = 45;
        v45 = object_getClassName(v12);
        v46 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
        v42(3, "%c[%{public}s %{public}s]:%i SE not in proper mode", v44, v45, v46, 269);
      }
      v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v48 = NFSharedLogGetLogger(v47);
      v49 = objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v50 = object_getClass(v12);
        if (class_isMetaClass(v50))
          v51 = 43;
        else
          v51 = 45;
        *(_DWORD *)buf = 67109890;
        v124 = v51;
        v125 = 2082;
        v126 = object_getClassName(v12);
        v127 = 2082;
        v128 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
        v129 = 1024;
        v130 = 269;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i SE not in proper mode", buf, 0x22u);
      }

      if (a6)
      {
        v52 = objc_alloc((Class)NSError);
        v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v133[0] = NSLocalizedDescriptionKey;
        v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
        v134[0] = v54;
        v134[1] = &off_1002FD7A0;
        v133[1] = CFSTR("Line");
        v133[2] = CFSTR("Method");
        v55 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"));
        v134[2] = v55;
        v133[3] = NSDebugDescriptionErrorKey;
        v56 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 270);
        v134[3] = v56;
        v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v134, v133, 4));
        *a6 = objc_msgSend(v52, "initWithDomain:code:userInfo:", v53, 12, v57);

      }
      goto LABEL_43;
    }
  }
  else if ((_DWORD)a2 != 1 || *(_DWORD *)(v19 + 44) != 1)
  {
    goto LABEL_31;
  }
  v37 = objc_retainAutorelease(v11);
  v38 = NFDataCreateWithBytesNoCopy(objc_msgSend(v37, "bytes"), objc_msgSend(v37, "length"), 0);
  if (!v38)
  {
    v59 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v60 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v59);
    if (v60)
    {
      v61 = object_getClass(v12);
      if (class_isMetaClass(v61))
        v62 = 43;
      else
        v62 = 45;
      v63 = object_getClassName(v12);
      v64 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
      v60(3, "%c[%{public}s %{public}s]:%i Failed to create CAPDU of length=%lu", v62, v63, v64, 276, objc_msgSend(v37, "length"));
    }
    v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v66 = NFSharedLogGetLogger(v65);
    v67 = objc_claimAutoreleasedReturnValue(v66);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      v68 = object_getClass(v12);
      if (class_isMetaClass(v68))
        v69 = 43;
      else
        v69 = 45;
      *(_DWORD *)buf = 67110146;
      v124 = v69;
      v125 = 2082;
      v126 = object_getClassName(v12);
      v127 = 2082;
      v128 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
      v129 = 1024;
      v130 = 276;
      v131 = 2048;
      v132 = objc_msgSend(v37, "length");
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create CAPDU of length=%lu", buf, 0x2Cu);
    }

    if (a6)
    {
      v70 = objc_alloc((Class)NSError);
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v121[0] = NSLocalizedDescriptionKey;
      v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v122[0] = v72;
      v122[1] = &off_1002FD7B8;
      v121[1] = CFSTR("Line");
      v121[2] = CFSTR("Method");
      v73 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"));
      v122[2] = v73;
      v121[3] = NSDebugDescriptionErrorKey;
      v74 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 277);
      v122[3] = v74;
      v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v122, v121, 4));
      *a6 = objc_msgSend(v70, "initWithDomain:code:userInfo:", v71, 34, v75);

    }
    goto LABEL_43;
  }
  v110 = 0;
  v39 = NFDriverSecureElementTransceive(*((_QWORD *)v12 + 5), a2, a4, v38, &v110, a5);
  if (!v39)
  {
    v76 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v77 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v76);
    if (v77)
    {
      v78 = object_getClass(v12);
      if (class_isMetaClass(v78))
        v79 = 43;
      else
        v79 = 45;
      v80 = object_getClassName(v12);
      v81 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
      v77(3, "%c[%{public}s %{public}s]:%i Transceive failed", v79, v80, v81, 284);
    }
    v82 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v83 = NFSharedLogGetLogger(v82);
    v84 = objc_claimAutoreleasedReturnValue(v83);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
    {
      v85 = object_getClass(v12);
      if (class_isMetaClass(v85))
        v86 = 43;
      else
        v86 = 45;
      v87 = object_getClassName(v12);
      v88 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
      *(_DWORD *)buf = 67109890;
      v124 = v86;
      v125 = 2082;
      v126 = v87;
      v127 = 2082;
      v128 = v88;
      v129 = 1024;
      v130 = 284;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Transceive failed", buf, 0x22u);
    }

    NFDataRelease(v38);
    if (a6)
    {
      ErrorCode = (void *)NFDriverCreateErrorCode(v110);
      switch(v110)
      {
        case 4u:
          v107 = objc_alloc((Class)NSError);
          v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v115[0] = NSLocalizedDescriptionKey;
          v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SE not available"));
          v116[0] = v91;
          v116[1] = ErrorCode;
          v115[1] = NSUnderlyingErrorKey;
          v115[2] = CFSTR("Line");
          v116[2] = &off_1002FD800;
          v115[3] = CFSTR("Method");
          v92 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"));
          v116[3] = v92;
          v115[4] = NSDebugDescriptionErrorKey;
          v93 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 293);
          v116[4] = v93;
          v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v116, v115, 5));
          v95 = objc_msgSend(v107, "initWithDomain:code:userInfo:", v90, 35, v94);
          break;
        case 0x17u:
          v108 = objc_alloc((Class)NSError);
          v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v117[0] = NSLocalizedDescriptionKey;
          v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Reader mode prohibit timer"));
          v118[0] = v91;
          v118[1] = ErrorCode;
          v117[1] = NSUnderlyingErrorKey;
          v117[2] = CFSTR("Line");
          v118[2] = &off_1002FD7E8;
          v117[3] = CFSTR("Method");
          v92 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"));
          v118[3] = v92;
          v117[4] = NSDebugDescriptionErrorKey;
          v93 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 291);
          v118[4] = v93;
          v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v118, v117, 5));
          v95 = objc_msgSend(v108, "initWithDomain:code:userInfo:", v90, 64, v94);
          break;
        case 0x16u:
          v106 = objc_alloc((Class)NSError);
          v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v119[0] = NSLocalizedDescriptionKey;
          v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SE OS reset"));
          v120[0] = v91;
          v120[1] = ErrorCode;
          v119[1] = NSUnderlyingErrorKey;
          v119[2] = CFSTR("Line");
          v120[2] = &off_1002FD7D0;
          v119[3] = CFSTR("Method");
          v92 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"));
          v120[3] = v92;
          v119[4] = NSDebugDescriptionErrorKey;
          v93 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 289);
          v120[4] = v93;
          v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v120, v119, 5));
          v95 = objc_msgSend(v106, "initWithDomain:code:userInfo:", v90, 63, v94);
          break;
        default:
          v109 = objc_alloc((Class)NSError);
          v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v103 = objc_msgSend(ErrorCode, "code");
          v113[0] = NSLocalizedDescriptionKey;
          if ((uint64_t)objc_msgSend(ErrorCode, "code") > 70)
            v104 = 71;
          else
            v104 = (uint64_t)objc_msgSend(ErrorCode, "code");
          v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E5380[v104]));
          v114[0] = v91;
          v114[1] = ErrorCode;
          v113[1] = NSUnderlyingErrorKey;
          v113[2] = CFSTR("Line");
          v114[2] = &off_1002FD818;
          v113[3] = CFSTR("Method");
          v92 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"));
          v114[3] = v92;
          v113[4] = NSDebugDescriptionErrorKey;
          v93 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 295);
          v114[4] = v93;
          v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v114, v113, 5));
          v95 = objc_msgSend(v109, "initWithDomain:code:userInfo:", v90, v103, v94);
          break;
      }
      *a6 = v95;

    }
    goto LABEL_43;
  }
  NFDataRelease(v38);
  Ownership = (void *)NFDataToCFDataCreateOwnership(v39, 1);
  NFDataRelease(v39);
  if (a6)
  {
    if (!Ownership)
    {
      v96 = objc_alloc((Class)NSError);
      v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v111[0] = NSLocalizedDescriptionKey;
      v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v112[0] = v98;
      v112[1] = &off_1002FD830;
      v111[1] = CFSTR("Line");
      v111[2] = CFSTR("Method");
      v99 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"));
      v112[2] = v99;
      v111[3] = NSDebugDescriptionErrorKey;
      v100 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 306);
      v112[3] = v100;
      v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v112, v111, 4));
      v102 = objc_retainAutorelease(objc_msgSend(v96, "initWithDomain:code:userInfo:", v97, 34, v101));
      *a6 = v102;

LABEL_43:
      Ownership = 0;
      goto LABEL_44;
    }
    *a6 = 0;
  }
LABEL_44:
  objc_sync_exit(v12);

LABEL_45:
  return Ownership;
}

void sub_100028EF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100028F50(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t OSUpdateLog;
  uint64_t v14;
  id v15;
  _QWORD v17[4];
  _QWORD v18[4];
  _QWORD v19[4];
  _QWORD v20[4];

  if (!a1)
    return 0;
  v5 = a1;
  objc_sync_enter(v5);
  if (!*((_BYTE *)v5 + 137))
  {
    OSUpdateLog = NFDriverGetOSUpdateLog(*((_QWORD *)v5 + 5), a2);
    v14 = OSUpdateLog;
    if (!a3 || OSUpdateLog)
      goto LABEL_10;
    v15 = objc_alloc((Class)NSError);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v17[0] = NSLocalizedDescriptionKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v18[0] = v8;
    v18[1] = &off_1002FD860;
    v17[1] = CFSTR("Line");
    v17[2] = CFSTR("Method");
    v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getOSUpdateLogFromSecureElement:error:"));
    v18[2] = v9;
    v17[3] = NSDebugDescriptionErrorKey;
    v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getOSUpdateLogFromSecureElement:error:"), 322);
    v18[3] = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 4));
    v12 = objc_msgSend(v15, "initWithDomain:code:userInfo:", v7, 15, v11);
    goto LABEL_8;
  }
  if (a3)
  {
    v6 = objc_alloc((Class)NSError);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v19[0] = NSLocalizedDescriptionKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v20[0] = v8;
    v20[1] = &off_1002FD848;
    v19[1] = CFSTR("Line");
    v19[2] = CFSTR("Method");
    v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getOSUpdateLogFromSecureElement:error:"));
    v20[2] = v9;
    v19[3] = NSDebugDescriptionErrorKey;
    v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getOSUpdateLogFromSecureElement:error:"), 316);
    v20[3] = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 4));
    v12 = objc_msgSend(v6, "initWithDomain:code:userInfo:", v7, 12, v11);
LABEL_8:
    *a3 = v12;

  }
  v14 = 0;
LABEL_10:
  objc_sync_exit(v5);

  return v14;
}

void sub_10002926C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

NSMutableDictionary *sub_10002928C(void *a1, uint64_t a2, int a3, _QWORD *a4)
{
  NSMutableDictionary *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  NSMutableDictionary *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  unint64_t v33;
  void *v34;
  _QWORD v35[4];
  _QWORD v36[4];
  _QWORD v37[4];
  _QWORD v38[4];

  if (!a1)
    return (NSMutableDictionary *)0;
  v33 = 0;
  v34 = 0;
  v7 = objc_opt_new(NSMutableDictionary);
  v8 = a1;
  objc_sync_enter(v8);
  if (*((_BYTE *)v8 + 137))
  {
    if (a4)
    {
      v9 = objc_alloc((Class)NSError);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v37[0] = NSLocalizedDescriptionKey;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v38[0] = v11;
      v38[1] = &off_1002FD878;
      v37[1] = CFSTR("Line");
      v37[2] = CFSTR("Method");
      v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAttackCounterLogFromSecureElement:asBinary:error:"));
      v38[2] = v12;
      v37[3] = NSDebugDescriptionErrorKey;
      v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAttackCounterLogFromSecureElement:asBinary:error:"), 339);
      v38[3] = v13;
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v38, v37, 4));
      *a4 = objc_msgSend(v9, "initWithDomain:code:userInfo:", v10, 12, v14);

    }
    v15 = 0;
  }
  else
  {
    if ((NFDriverSecureElementGetAttackCounterLog(*((_QWORD *)v8 + 5), a2, &v34, &v33) & 1) != 0)
    {
      objc_sync_exit(v8);

      v16 = v33;
      if (v33)
      {
        v17 = 0;
        v18 = 0;
        do
        {
          if (*(_QWORD *)((char *)v34 + v17))
          {
            v19 = objc_alloc((Class)NSData);
            v20 = objc_msgSend(v19, "initWithBytes:length:", **(_QWORD **)((char *)v34 + v17), *(_QWORD *)(*(_QWORD *)((char *)v34 + v17) + 8));
            NFDataRelease(*(_QWORD *)((char *)v34 + v17));
            if (a3)
            {
              v21 = objc_alloc((Class)NSString);
              v22 = objc_msgSend(v21, "initWithFormat:", CFSTR("%X"), *(unsigned int *)((char *)v34 + v17 + 8));
              -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", v20, v22);
            }
            else
            {
              v22 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "NF_asHexString"));
              v23 = objc_alloc((Class)NSString);
              v24 = objc_msgSend(v23, "initWithFormat:", CFSTR("%X"), *(unsigned int *)((char *)v34 + v17 + 8));
              -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", v22, v24);

            }
            v16 = v33;
          }
          ++v18;
          v17 += 16;
        }
        while (v16 > v18);
      }
      free(v34);
      if (a4)
        *a4 = 0;
      v15 = v7;
      goto LABEL_22;
    }
    if (a4)
    {
      v25 = objc_alloc((Class)NSError);
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v35[0] = NSLocalizedDescriptionKey;
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v36[0] = v27;
      v36[1] = &off_1002FD890;
      v35[1] = CFSTR("Line");
      v35[2] = CFSTR("Method");
      v28 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAttackCounterLogFromSecureElement:asBinary:error:"));
      v36[2] = v28;
      v35[3] = NSDebugDescriptionErrorKey;
      v29 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAttackCounterLogFromSecureElement:asBinary:error:"), 344);
      v36[3] = v29;
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v36, v35, 4));
      *a4 = objc_msgSend(v25, "initWithDomain:code:userInfo:", v26, 15, v30);

    }
    v15 = v7;
  }
  objc_sync_exit(v8);

LABEL_22:
  return v15;
}

void sub_100029728(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100029744(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t PresenceOfAttackLog;

  if (!a1)
    return 0;
  v5 = a1;
  objc_sync_enter(v5);
  if (*((_BYTE *)v5 + 137))
    PresenceOfAttackLog = 0;
  else
    PresenceOfAttackLog = NFDriverSecureElementGetPresenceOfAttackLog(*((_QWORD *)v5 + 5), a2, a3);
  objc_sync_exit(v5);

  return PresenceOfAttackLog;
}

void sub_1000297B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000297CC(void *a1, uint64_t a2)
{
  id v3;
  uint64_t UnlockRequestInfo;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (*((_BYTE *)v3 + 137))
    UnlockRequestInfo = 0;
  else
    UnlockRequestInfo = NFDriverGetUnlockRequestInfo(*((_QWORD *)v3 + 5), a2);
  objc_sync_exit(v3);

  return UnlockRequestInfo;
}

void sub_100029830(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100029844(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  unsigned int ReaderProhibitTimer;
  id v12;
  int v13;
  void *v14;
  _QWORD v16[4];
  _QWORD v17[4];
  _QWORD v18[4];
  _QWORD v19[4];

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (*((_BYTE *)v3 + 137))
  {
    v4 = objc_alloc((Class)NSError);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v18[0] = NSLocalizedDescriptionKey;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v19[0] = v6;
    v19[1] = &off_1002FD8A8;
    v18[1] = CFSTR("Line");
    v18[2] = CFSTR("Method");
    v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getReaderProhibitTimerInfo:"));
    v19[2] = v7;
    v18[3] = NSDebugDescriptionErrorKey;
    v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getReaderProhibitTimerInfo:"), 392);
    v19[3] = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v18, 4));
    v10 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v5, 12, v9);
  }
  else
  {
    ReaderProhibitTimer = NFDriverGetReaderProhibitTimer(*((_QWORD *)v3 + 5), a2);
    if (!ReaderProhibitTimer)
    {
      v14 = 0;
      goto LABEL_10;
    }
    v12 = objc_alloc((Class)NSError);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v16[0] = NSLocalizedDescriptionKey;
    if (ReaderProhibitTimer >= 0x47)
      v13 = 71;
    else
      v13 = ReaderProhibitTimer;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E5380[v13]));
    v17[0] = v6;
    v17[1] = &off_1002FD8C0;
    v16[1] = CFSTR("Line");
    v16[2] = CFSTR("Method");
    v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getReaderProhibitTimerInfo:"));
    v17[2] = v7;
    v16[3] = NSDebugDescriptionErrorKey;
    v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getReaderProhibitTimerInfo:"), 397);
    v17[3] = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 4));
    v10 = objc_msgSend(v12, "initWithDomain:code:userInfo:", v5, ReaderProhibitTimer, v9);
  }
  v14 = v10;

LABEL_10:
  objc_sync_exit(v3);

  return v14;
}

void sub_100029B64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100029B84(id a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;

  v3 = a2;
  if (a1)
  {
    v4 = (void *)qword_10032ACA0;
    if (!qword_10032ACA0)
    {
      v5 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.nfcd.hwmanager"));
      v6 = (void *)qword_10032ACA0;
      qword_10032ACA0 = (uint64_t)v5;

      objc_msgSend((id)qword_10032ACA0, "setDelegate:", a1);
      v4 = (void *)qword_10032ACA0;
      if (v3)
      {
        objc_msgSend((id)qword_10032ACA0, "_setQueue:", v3);
        v4 = (void *)qword_10032ACA0;
      }
    }
    a1 = v4;
  }

  return a1;
}

id sub_100029C14(id a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;

  v3 = a2;
  if (a1)
  {
    v4 = (void *)qword_10032ACA8;
    if (!qword_10032ACA8)
    {
      v5 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.nfcd.service.corenfc"));
      v6 = (void *)qword_10032ACA8;
      qword_10032ACA8 = (uint64_t)v5;

      objc_msgSend((id)qword_10032ACA8, "setDelegate:", a1);
      v4 = (void *)qword_10032ACA8;
      if (v3)
      {
        objc_msgSend((id)qword_10032ACA8, "_setQueue:", v3);
        v4 = (void *)qword_10032ACA8;
      }
    }
    a1 = v4;
  }

  return a1;
}

void sub_10002A460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  objc_sync_exit(v31);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002A490(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002A4A0(uint64_t a1)
{

}

void sub_10002A4A8(uint64_t a1)
{
  NSObject *v2;
  os_activity_scope_state_s v3;

  v2 = _os_activity_create((void *)&_mh_execute_header, "_NFHardwareManger xpcInvalidated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  v3.opaque[0] = 0;
  v3.opaque[1] = 0;
  os_activity_scope_enter(v2, &v3);
  os_activity_scope_leave(&v3);

  sub_1000E506C(*(uint64_t **)(a1 + 32), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_10002A518(uint64_t a1)
{
  NSObject *v2;
  os_activity_scope_state_s v3;

  v2 = _os_activity_create((void *)&_mh_execute_header, "_NFHardwareManger xpcInterrupted", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  v3.opaque[0] = 0;
  v3.opaque[1] = 0;
  os_activity_scope_enter(v2, &v3);
  os_activity_scope_leave(&v3);

  sub_1000E506C(*(uint64_t **)(a1 + 32), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

id sub_10002D320(id *a1)
{
  __CFString *v2;
  NFTrustDBApplet *v3;
  NFTrustDBApplet *v4;
  void *v5;
  KeyInSlot *v6;
  KeyInSlot *v7;
  NFTrustDBApplet *v8;
  objc_class *v9;
  id v10;
  NSMutableDictionary *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t, const char *, ...);
  objc_class *v16;
  _BOOL4 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  objc_class *v22;
  int v23;
  const char *v24;
  const char *v25;
  id v26;
  void *specific;
  uint64_t Logger;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void (*v43)(uint64_t, const char *, ...);
  objc_class *v44;
  _BOOL4 v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  objc_class *v51;
  int v52;
  id v53;
  id v54;
  objc_class *v55;
  NSString *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v65;
  void (*v66)(uint64_t, const char *, ...);
  objc_class *v67;
  _BOOL4 v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  objc_class *v74;
  int v75;
  const char *v76;
  const char *v77;
  id v78;
  const char *v80;
  const char *v81;
  const char *Name;
  const char *v83;
  const char *v84;
  id v85;
  uint8_t buf[4];
  int v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  const char *v91;
  __int16 v92;
  int v93;
  __int16 v94;
  id v95;

  v2 = CFSTR("A000000704C0000000000002");
  objc_opt_self(NFTrustDBApplet);
  v3 = [NFTrustDBApplet alloc];
  v4 = v3;
  if (v3)
  {
    -[NFTrustDBApplet setInstanceAID:](v3, "setInstanceAID:", CFSTR("A000000704C0000000000002"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 2));
    v6 = [KeyInSlot alloc];
    objc_msgSend(v5, "addObject:", v6);

    v7 = [KeyInSlot alloc];
    objc_msgSend(v5, "addObject:", v7);

    -[NFTrustDBApplet setMap:](v4, "setMap:", v5);
  }

  v8 = v4;
  if (!a1[1])
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v29 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("addApplet:");
      v33 = 45;
      if (isMetaClass)
        v33 = 43;
      v29(3, "%c[%{public}s %{public}s]:%i Could not add object to NFTrustDataBase, failed to connect to database", v33, ClassName, Name, 281);
    }
    v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v35 = NFSharedLogGetLogger(v34);
    v36 = objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = object_getClass(a1);
      if (class_isMetaClass(v37))
        v38 = 43;
      else
        v38 = 45;
      *(_DWORD *)buf = 67109890;
      v87 = v38;
      v88 = 2082;
      v89 = object_getClassName(a1);
      v90 = 2082;
      v91 = sel_getName("addApplet:");
      v92 = 1024;
      v93 = 281;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not add object to NFTrustDataBase, failed to connect to database", buf, 0x22u);
    }

    v39 = sub_1001308D0();
    v40 = objc_claimAutoreleasedReturnValue(v39);
    goto LABEL_36;
  }
  if (!v4)
  {
    v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v42 = NFLogGetLogger(v41);
    if (v42)
    {
      v43 = (void (*)(uint64_t, const char *, ...))v42;
      v44 = object_getClass(a1);
      v45 = class_isMetaClass(v44);
      v46 = object_getClassName(a1);
      v83 = sel_getName("addApplet:");
      v47 = 45;
      if (v45)
        v47 = 43;
      v43(3, "%c[%{public}s %{public}s]:%i Can not add nil object to NFTrust DB", v47, v46, v83, 286);
    }
    v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v49 = NFSharedLogGetLogger(v48);
    v50 = objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      v51 = object_getClass(a1);
      if (class_isMetaClass(v51))
        v52 = 43;
      else
        v52 = 45;
      *(_DWORD *)buf = 67109890;
      v87 = v52;
      v88 = 2082;
      v89 = object_getClassName(a1);
      v90 = 2082;
      v91 = sel_getName("addApplet:");
      v92 = 1024;
      v93 = 286;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Can not add nil object to NFTrust DB", buf, 0x22u);
    }

    v53 = sub_100130D58(CFSTR("Can not add nil object to NFTrust DB"));
    v40 = objc_claimAutoreleasedReturnValue(v53);
LABEL_36:
    v26 = (id)v40;
    goto LABEL_44;
  }
  v9 = (objc_class *)objc_opt_class(NFTrustDBApplet);
  v85 = 0;
  v10 = sub_10002ED58(a1, v9, &v85);
  v11 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v10);
  v12 = v85;
  if (v12)
  {
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFLogGetLogger(v13);
    if (v14)
    {
      v15 = (void (*)(uint64_t, const char *, ...))v14;
      v16 = object_getClass(a1);
      v17 = class_isMetaClass(v16);
      v80 = object_getClassName(a1);
      v81 = sel_getName("addApplet:");
      v18 = 45;
      if (v17)
        v18 = 43;
      v15(3, "%c[%{public}s %{public}s]:%i Error while looking for objects of type NFTrustDBApplet in DataBase : %{public}@", v18, v80, v81, 295, v12);
    }
    v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v20 = NFSharedLogGetLogger(v19);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = object_getClass(a1);
      if (class_isMetaClass(v22))
        v23 = 43;
      else
        v23 = 45;
      v24 = object_getClassName(a1);
      v25 = sel_getName("addApplet:");
      *(_DWORD *)buf = 67110146;
      v87 = v23;
      v88 = 2082;
      v89 = v24;
      v90 = 2082;
      v91 = v25;
      v92 = 1024;
      v93 = 295;
      v94 = 2114;
      v95 = v12;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while looking for objects of type NFTrustDBApplet in DataBase : %{public}@", buf, 0x2Cu);
    }

    v26 = v12;
  }
  else
  {
    if (!v11)
    {
      v11 = objc_opt_new(NSMutableDictionary);
      v54 = a1[1];
      v55 = (objc_class *)objc_opt_class(NFTrustDBApplet);
      v56 = NSStringFromClass(v55);
      v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
      objc_msgSend(v54, "setValue:forKey:", v11, v57);

    }
    v58 = (void *)objc_claimAutoreleasedReturnValue(-[NFTrustDBApplet instanceAID](v8, "instanceAID"));
    v59 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v11, "objectForKeyedSubscript:", v58));

    if (v59)
    {
      v60 = objc_alloc((Class)NSString);
      v61 = (void *)objc_claimAutoreleasedReturnValue(-[NFTrustDBApplet instanceAID](v8, "instanceAID"));
      v62 = objc_msgSend(v60, "initWithFormat:", CFSTR("Could not add NFTrustDBApplet with identifier %@, object already exists"), v61);
      v63 = sub_100130704(v62);
      v26 = (id)objc_claimAutoreleasedReturnValue(v63);

    }
    else
    {
      v61 = (void *)objc_claimAutoreleasedReturnValue(-[NFTrustDBApplet instanceAID](v8, "instanceAID"));
      -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v8, v61);
      v26 = 0;
    }

  }
LABEL_44:

  if (v26)
  {
    v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v65 = NFLogGetLogger(v64);
    if (v65)
    {
      v66 = (void (*)(uint64_t, const char *, ...))v65;
      v67 = object_getClass(a1);
      v68 = class_isMetaClass(v67);
      v69 = object_getClassName(a1);
      v84 = sel_getName("addNFTrustApplet");
      v70 = 45;
      if (v68)
        v70 = 43;
      v66(3, "%c[%{public}s %{public}s]:%i Could not add NFTrustDBAppelt to DB", v70, v69, v84, 62);
    }
    v71 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v72 = NFSharedLogGetLogger(v71);
    v73 = objc_claimAutoreleasedReturnValue(v72);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      v74 = object_getClass(a1);
      if (class_isMetaClass(v74))
        v75 = 43;
      else
        v75 = 45;
      v76 = object_getClassName(a1);
      v77 = sel_getName("addNFTrustApplet");
      *(_DWORD *)buf = 67109890;
      v87 = v75;
      v88 = 2082;
      v89 = v76;
      v90 = 2082;
      v91 = v77;
      v92 = 1024;
      v93 = 62;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not add NFTrustDBAppelt to DB", buf, 0x22u);
    }

    v78 = v26;
  }

  return v26;
}

void sub_10002DA48(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  id *v9;
  NSObject *v10;
  id v11;
  void *v12;
  void *specific;
  uint64_t Logger;
  void (*v15)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  NSObject *v24;
  int v25;
  const char *v26;
  const char *v27;
  id *v28;
  objc_class *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, ...);
  objc_class *v36;
  _BOOL4 v37;
  void *v38;
  const char *v39;
  const char *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  objc_class *v46;
  int v47;
  const char *v48;
  const char *v49;
  void *v50;
  NSObject *v51;
  id v52;
  id v53;
  uint64_t v54;
  void *i;
  _QWORD *v56;
  void *v57;
  void *v58;
  void *v59;
  unsigned int v60;
  id v61;
  uint64_t v62;
  id v63;
  void *v64;
  void *v65;
  id v66;
  objc_class *v67;
  NSString *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void (*v76)(uint64_t, const char *, ...);
  objc_class *v77;
  uint64_t v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  NSObject *v84;
  objc_class *v85;
  int v86;
  const char *v87;
  const char *v88;
  void *v89;
  id v90;
  void *v91;
  uint64_t v92;
  void (*v93)(uint64_t, const char *, ...);
  objc_class *v94;
  _BOOL4 v95;
  void *v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  NSObject *v102;
  objc_class *v103;
  int v104;
  const char *v105;
  const char *v106;
  id v107;
  void *v108;
  uint64_t v109;
  void (*v110)(uint64_t, const char *, ...);
  objc_class *v111;
  _BOOL4 v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  NSObject *v117;
  objc_class *v118;
  int v119;
  const char *v120;
  const char *v121;
  id v122;
  void *v123;
  uint64_t v124;
  void (*v125)(uint64_t, const char *, ...);
  objc_class *v126;
  const char *v127;
  void *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  NSObject *v132;
  objc_class *v133;
  int v134;
  const char *v135;
  const char *v136;
  void *v137;
  id v138;
  void *v139;
  id v140;
  id v141;
  void *v142;
  uint64_t v143;
  void (*v144)(uint64_t, const char *, ...);
  objc_class *v145;
  _BOOL4 v146;
  void *v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  NSObject *v153;
  objc_class *v154;
  int v155;
  const char *v156;
  const char *v157;
  id v158;
  void *v159;
  void *v160;
  uint64_t v161;
  void (*v162)(uint64_t, const char *, ...);
  objc_class *v163;
  _BOOL4 v164;
  void *v165;
  void *v166;
  const char *v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  objc_class *v171;
  int v172;
  const char *v173;
  const char *v174;
  const char *v175;
  id v176;
  void *v177;
  void *v178;
  uint64_t v179;
  void (*v180)(uint64_t, const char *, ...);
  objc_class *v181;
  _BOOL4 v182;
  void *v183;
  void *v184;
  const char *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  objc_class *v189;
  int v190;
  const char *v191;
  const char *v192;
  const char *v193;
  const char *v194;
  const char *v195;
  const char *v196;
  const char *v197;
  const char *Name;
  const char *v199;
  const char *v200;
  const char *v201;
  const char *v202;
  const char *v203;
  _BOOL4 v204;
  const char *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  NSObject *v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  id v215;
  id v216;
  uint8_t v217[128];
  uint8_t buf[4];
  int v219;
  __int16 v220;
  const char *v221;
  __int16 v222;
  const char *v223;
  __int16 v224;
  int v225;
  __int16 v226;
  void *v227;
  __int16 v228;
  NSObject *v229;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (!v3
      || (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "moduleIdentifier")),
          v6 = objc_msgSend(&off_100305C98, "containsObject:", v5),
          v5,
          v6))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
      objc_msgSend(v7, "postNotificationName:object:userInfo:", CFSTR("com.apple.stockholm.se.mfd"), 0, 0);

      notify_post("com.apple.stockholm.se.mfd");
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
    if (!v8)
    {
      v28 = sub_10002FE48((id *)a1);

LABEL_33:
      goto LABEL_34;
    }
    v216 = 0;
    v9 = sub_10002E9F4((id *)a1, v8, &v216);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = v216;
    v12 = v11;
    if (v10)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v15 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("markApplicationForDelete:");
        v19 = 45;
        if (isMetaClass)
          v19 = 43;
        v15(3, "%c[%{public}s %{public}s]:%i Could not find PurpleTrust instance with AID %{public}@ in DB : %{public}@", v19, ClassName, Name, 92, v8, v10);
      }
      v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v21 = NFSharedLogGetLogger(v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = object_getClass((id)a1);
        v24 = v10;
        if (class_isMetaClass(v23))
          v25 = 43;
        else
          v25 = 45;
        v26 = object_getClassName((id)a1);
        v27 = sel_getName("markApplicationForDelete:");
        *(_DWORD *)buf = 67110402;
        v219 = v25;
        v10 = v24;
        v220 = 2082;
        v221 = v26;
        v222 = 2082;
        v223 = v27;
        v224 = 1024;
        v225 = 92;
        v226 = 2114;
        v227 = v8;
        v228 = 2114;
        v229 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not find PurpleTrust instance with AID %{public}@ in DB : %{public}@", buf, 0x36u);
      }
      goto LABEL_30;
    }
    if (!v11)
    {
LABEL_32:

      goto LABEL_33;
    }
    v29 = (objc_class *)objc_opt_class(NFTrustDBKey);
    v215 = 0;
    v30 = sub_10002ED58((_QWORD *)a1, v29, &v215);
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    v22 = v215;
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "allValues"));

    v210 = v10;
    if (v22)
    {
      v209 = v4;
      v32 = v12;
      v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v34 = NFLogGetLogger(v33);
      if (v34)
      {
        v35 = (void (*)(uint64_t, const char *, ...))v34;
        v36 = object_getClass((id)a1);
        v37 = class_isMetaClass(v36);
        v38 = v8;
        v39 = object_getClassName((id)a1);
        v40 = sel_getName("markApplicationForDelete:");
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "instanceAID"));
        v42 = 45;
        if (v37)
          v42 = 43;
        v193 = v39;
        v8 = v38;
        v10 = v210;
        v35(3, "%c[%{public}s %{public}s]:%i Could not get PurpleTrust keys of instance '%{public}@' : %{public}@", v42, v193, v40, 104, v41, v22);

      }
      v43 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v44 = NFSharedLogGetLogger(v43);
      v45 = objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        v46 = object_getClass((id)a1);
        if (class_isMetaClass(v46))
          v47 = 43;
        else
          v47 = 45;
        v48 = object_getClassName((id)a1);
        v49 = sel_getName("markApplicationForDelete:");
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "instanceAID"));
        *(_DWORD *)buf = 67110402;
        v219 = v47;
        v10 = v210;
        v220 = 2082;
        v221 = v48;
        v222 = 2082;
        v223 = v49;
        v224 = 1024;
        v225 = 104;
        v226 = 2114;
        v227 = v50;
        v228 = 2114;
        v229 = v22;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not get PurpleTrust keys of instance '%{public}@' : %{public}@", buf, 0x36u);

      }
      v12 = v32;
LABEL_29:
      v4 = v209;
      goto LABEL_30;
    }
    if (v10)
    {
      v206 = v8;
      v209 = v4;
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      v51 = v10;
      v52 = -[NSObject countByEnumeratingWithState:objects:count:](v51, "countByEnumeratingWithState:objects:count:", &v211, v217, 16);
      if (v52)
      {
        v53 = v52;
        v54 = *(_QWORD *)v212;
        while (2)
        {
          for (i = 0; i != v53; i = (char *)i + 1)
          {
            if (*(_QWORD *)v212 != v54)
              objc_enumerationMutation(v51);
            v56 = *(_QWORD **)(*((_QWORD *)&v211 + 1) + 8 * (_QWORD)i);
            v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "instanceAID"));
            v58 = v12;
            v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "instanceAID"));
            v60 = objc_msgSend(v57, "isEqualToString:", v59);

            if (v60)
            {
              v61 = sub_10002F0B0((_QWORD *)a1, v56);
              v62 = objc_claimAutoreleasedReturnValue(v61);
              if (v62)
              {
                v22 = v62;
                v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v75 = NFLogGetLogger(v74);
                if (v75)
                {
                  v76 = (void (*)(uint64_t, const char *, ...))v75;
                  v77 = object_getClass((id)a1);
                  if (class_isMetaClass(v77))
                    v78 = 43;
                  else
                    v78 = 45;
                  v79 = object_getClassName((id)a1);
                  v80 = sel_getName("markApplicationForDelete:");
                  if (v56)
                    v81 = v56[1];
                  else
                    v81 = 0;
                  v76(3, "%c[%{public}s %{public}s]:%i Could not delete PurpleTrust Key '%{public}@' from DB : %{public}@", v78, v79, v80, 116, v81, v22);
                }
                v82 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v83 = NFSharedLogGetLogger(v82);
                v84 = objc_claimAutoreleasedReturnValue(v83);
                v8 = v206;
                if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
                {
                  v85 = object_getClass((id)a1);
                  if (class_isMetaClass(v85))
                    v86 = 43;
                  else
                    v86 = 45;
                  v87 = object_getClassName((id)a1);
                  v88 = sel_getName("markApplicationForDelete:");
                  if (v56)
                    v89 = (void *)v56[1];
                  else
                    v89 = 0;
                  *(_DWORD *)buf = 67110402;
                  v219 = v86;
                  v220 = 2082;
                  v221 = v87;
                  v222 = 2082;
                  v223 = v88;
                  v224 = 1024;
                  v225 = 116;
                  v226 = 2114;
                  v227 = v89;
                  v228 = 2114;
                  v229 = v22;
                  v90 = v89;
                  _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not delete PurpleTrust Key '%{public}@' from DB : %{public}@", buf, 0x36u);

                }
                v10 = v51;
                v12 = v58;
                goto LABEL_29;
              }
            }
            v12 = v58;
          }
          v53 = -[NSObject countByEnumeratingWithState:objects:count:](v51, "countByEnumeratingWithState:objects:count:", &v211, v217, 16);
          if (v53)
            continue;
          break;
        }
      }

      v8 = v206;
      v4 = v209;
      v10 = v210;
    }
    v63 = v12;
    v64 = *(void **)(a1 + 8);
    if (v64)
    {
      v65 = v12;
      v66 = v64;
      v67 = (objc_class *)objc_opt_class(NFTrustDBApplet);
      v68 = NSStringFromClass(v67);
      v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
      v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "valueForKey:", v69));

      if (v70)
      {
        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "instanceAID"));
        v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "valueForKey:", v71));

        if (v72)
        {
          v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "instanceAID"));
          objc_msgSend(v70, "removeObjectForKey:", v73);

          v22 = 0;
        }
        else
        {
          v208 = v8;
          v123 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v124 = NFLogGetLogger(v123);
          if (v124)
          {
            v125 = (void (*)(uint64_t, const char *, ...))v124;
            v126 = object_getClass((id)a1);
            v204 = class_isMetaClass(v126);
            v205 = object_getClassName((id)a1);
            v127 = sel_getName("removeApplet:");
            v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "instanceAID"));
            v129 = 45;
            if (v204)
              v129 = 43;
            v125(3, "%c[%{public}s %{public}s]:%i Could not remove NFTrustDBApplet with identifier %{public}@, object does not exists", v129, v205, v127, 339, v128);

          }
          v130 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v131 = NFSharedLogGetLogger(v130);
          v132 = objc_claimAutoreleasedReturnValue(v131);
          if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
          {
            v133 = object_getClass((id)a1);
            if (class_isMetaClass(v133))
              v134 = 43;
            else
              v134 = 45;
            v135 = object_getClassName((id)a1);
            v136 = sel_getName("removeApplet:");
            v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "instanceAID"));
            *(_DWORD *)buf = 67110146;
            v219 = v134;
            v10 = v210;
            v220 = 2082;
            v221 = v135;
            v222 = 2082;
            v223 = v136;
            v224 = 1024;
            v225 = 339;
            v226 = 2114;
            v227 = v137;
            _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not remove NFTrustDBApplet with identifier %{public}@, object does not exists", buf, 0x2Cu);

          }
          v138 = objc_alloc((Class)NSString);
          v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "instanceAID"));
          v140 = objc_msgSend(v138, "initWithFormat:", CFSTR("Could not remove NFTrustDBApplet with identifier %@, object does not exists"), v139);
          v141 = sub_100130704(v140);
          v22 = objc_claimAutoreleasedReturnValue(v141);

          v8 = v208;
        }
        v12 = v65;
      }
      else
      {
        v207 = v8;
        v108 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v109 = NFLogGetLogger(v108);
        if (v109)
        {
          v110 = (void (*)(uint64_t, const char *, ...))v109;
          v111 = object_getClass((id)a1);
          v112 = class_isMetaClass(v111);
          v113 = object_getClassName((id)a1);
          v200 = sel_getName("removeApplet:");
          v114 = 45;
          if (v112)
            v114 = 43;
          v110(3, "%c[%{public}s %{public}s]:%i Trying to remove a NFTrustDBApplet that does not exists", v114, v113, v200, 334);
        }
        v115 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v116 = NFSharedLogGetLogger(v115);
        v117 = objc_claimAutoreleasedReturnValue(v116);
        if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
        {
          v118 = object_getClass((id)a1);
          if (class_isMetaClass(v118))
            v119 = 43;
          else
            v119 = 45;
          v120 = object_getClassName((id)a1);
          v121 = sel_getName("removeApplet:");
          *(_DWORD *)buf = 67109890;
          v219 = v119;
          v220 = 2082;
          v221 = v120;
          v222 = 2082;
          v223 = v121;
          v224 = 1024;
          v225 = 334;
          _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Trying to remove a NFTrustDBApplet that does not exists", buf, 0x22u);
        }

        v122 = sub_100130704(CFSTR("Trying to remove a NFTrustDBApplet that does not exists"));
        v22 = objc_claimAutoreleasedReturnValue(v122);
        v8 = v207;
        v12 = v65;
        v10 = v210;
      }

    }
    else
    {
      v91 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v92 = NFLogGetLogger(v91);
      if (v92)
      {
        v93 = (void (*)(uint64_t, const char *, ...))v92;
        v94 = object_getClass((id)a1);
        v95 = class_isMetaClass(v94);
        v96 = v4;
        v97 = v12;
        v98 = object_getClassName((id)a1);
        v199 = sel_getName("removeApplet:");
        v99 = 45;
        if (v95)
          v99 = 43;
        v194 = v98;
        v12 = v97;
        v4 = v96;
        v93(3, "%c[%{public}s %{public}s]:%i Could not remove NFTrustDBApplet from NFTrustDataBase, failed to connect to database", v99, v194, v199, 321);
      }
      v100 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v101 = NFSharedLogGetLogger(v100);
      v102 = objc_claimAutoreleasedReturnValue(v101);
      if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
      {
        v103 = object_getClass((id)a1);
        if (class_isMetaClass(v103))
          v104 = 43;
        else
          v104 = 45;
        v105 = object_getClassName((id)a1);
        v106 = sel_getName("removeApplet:");
        *(_DWORD *)buf = 67109890;
        v219 = v104;
        v220 = 2082;
        v221 = v105;
        v222 = 2082;
        v223 = v106;
        v224 = 1024;
        v225 = 321;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not remove NFTrustDBApplet from NFTrustDataBase, failed to connect to database", buf, 0x22u);
      }

      v107 = sub_1001308D0();
      v22 = objc_claimAutoreleasedReturnValue(v107);
      v10 = v210;
    }

    if (v22)
    {
      v142 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v143 = NFLogGetLogger(v142);
      if (v143)
      {
        v144 = (void (*)(uint64_t, const char *, ...))v143;
        v145 = object_getClass((id)a1);
        v146 = class_isMetaClass(v145);
        v147 = v4;
        v148 = v12;
        v149 = object_getClassName((id)a1);
        v201 = sel_getName("markApplicationForDelete:");
        v150 = 45;
        if (v146)
          v150 = 43;
        v195 = v149;
        v12 = v148;
        v4 = v147;
        v10 = v210;
        v144(3, "%c[%{public}s %{public}s]:%i Could not delete PurpleTrust instance with AID %{public}@ from DB : %{public}@", v150, v195, v201, 123, v8, v22);
      }
      v151 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v152 = NFSharedLogGetLogger(v151);
      v153 = objc_claimAutoreleasedReturnValue(v152);
      if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
      {
        v154 = object_getClass((id)a1);
        if (class_isMetaClass(v154))
          v155 = 43;
        else
          v155 = 45;
        v156 = object_getClassName((id)a1);
        v157 = sel_getName("markApplicationForDelete:");
        *(_DWORD *)buf = 67110402;
        v219 = v155;
        v10 = v210;
        v220 = 2082;
        v221 = v156;
        v222 = 2082;
        v223 = v157;
        v224 = 1024;
        v225 = 123;
        v226 = 2114;
        v227 = v8;
        v228 = 2114;
        v229 = v22;
        _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not delete PurpleTrust instance with AID %{public}@ from DB : %{public}@", buf, 0x36u);
      }

      goto LABEL_30;
    }
    v158 = sub_10002D320((id *)a1);
    v159 = (void *)objc_claimAutoreleasedReturnValue(v158);

    if (v159)
    {
      v160 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v161 = NFLogGetLogger(v160);
      if (v161)
      {
        v162 = (void (*)(uint64_t, const char *, ...))v161;
        v163 = object_getClass((id)a1);
        v164 = class_isMetaClass(v163);
        v165 = v4;
        v166 = v12;
        v167 = object_getClassName((id)a1);
        v202 = sel_getName("markApplicationForDelete:");
        v168 = 45;
        if (v164)
          v168 = 43;
        v196 = v167;
        v12 = v166;
        v4 = v165;
        v162(3, "%c[%{public}s %{public}s]:%i Could not addNFTrustApplet after MFD", v168, v196, v202, 128);
      }
      v169 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v170 = NFSharedLogGetLogger(v169);
      v22 = objc_claimAutoreleasedReturnValue(v170);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        goto LABEL_129;
      v171 = object_getClass((id)a1);
      if (class_isMetaClass(v171))
        v172 = 43;
      else
        v172 = 45;
      v173 = object_getClassName((id)a1);
      v174 = sel_getName("markApplicationForDelete:");
      *(_DWORD *)buf = 67109890;
      v219 = v172;
      v220 = 2082;
      v221 = v173;
      v222 = 2082;
      v223 = v174;
      v224 = 1024;
      v225 = 128;
      v175 = "%c[%{public}s %{public}s]:%i Could not addNFTrustApplet after MFD";
    }
    else
    {
      v176 = sub_10002F654(a1);
      v177 = (void *)objc_claimAutoreleasedReturnValue(v176);

      if (!v177)
        goto LABEL_31;
      v178 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v179 = NFLogGetLogger(v178);
      if (v179)
      {
        v180 = (void (*)(uint64_t, const char *, ...))v179;
        v181 = object_getClass((id)a1);
        v182 = class_isMetaClass(v181);
        v183 = v4;
        v184 = v12;
        v185 = object_getClassName((id)a1);
        v203 = sel_getName("markApplicationForDelete:");
        v186 = 45;
        if (v182)
          v186 = 43;
        v197 = v185;
        v12 = v184;
        v4 = v183;
        v180(3, "%c[%{public}s %{public}s]:%i Could not commit after MFD", v186, v197, v203, 133);
      }
      v187 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v188 = NFSharedLogGetLogger(v187);
      v22 = objc_claimAutoreleasedReturnValue(v188);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        goto LABEL_129;
      v189 = object_getClass((id)a1);
      if (class_isMetaClass(v189))
        v190 = 43;
      else
        v190 = 45;
      v191 = object_getClassName((id)a1);
      v192 = sel_getName("markApplicationForDelete:");
      *(_DWORD *)buf = 67109890;
      v219 = v190;
      v220 = 2082;
      v221 = v191;
      v222 = 2082;
      v223 = v192;
      v224 = 1024;
      v225 = 133;
      v175 = "%c[%{public}s %{public}s]:%i Could not commit after MFD";
    }
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, v175, buf, 0x22u);
LABEL_129:
    v10 = v210;
LABEL_30:

LABEL_31:
    goto LABEL_32;
  }
LABEL_34:

}

id *sub_10002E9F4(id *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *specific;
  uint64_t Logger;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void (*v26)(uint64_t, const char *, ...);
  objc_class *v27;
  _BOOL4 v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  objc_class *v34;
  int v35;
  id v36;
  const char *ClassName;
  const char *Name;
  const char *v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  id v50;

  v5 = a2;
  if (!a1)
    goto LABEL_28;
  if (!a1[1])
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v13 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("getAppletWithIdentifier:object:");
      v16 = 45;
      if (isMetaClass)
        v16 = 43;
      v13(3, "%c[%{public}s %{public}s]:%i Could not getNFTrustDBAppletWithIdentifier %{public}@, failed to connect to database", v16, ClassName, Name, 355, v5);
    }
    v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v18 = NFSharedLogGetLogger(v17);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = object_getClass(a1);
      if (class_isMetaClass(v20))
        v21 = 43;
      else
        v21 = 45;
      *(_DWORD *)buf = 67110146;
      v42 = v21;
      v43 = 2082;
      v44 = object_getClassName(a1);
      v45 = 2082;
      v46 = sel_getName("getAppletWithIdentifier:object:");
      v47 = 1024;
      v48 = 355;
      v49 = 2114;
      v50 = v5;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not getNFTrustDBAppletWithIdentifier %{public}@, failed to connect to database", buf, 0x2Cu);
    }

    v22 = sub_1001308D0();
    v23 = objc_claimAutoreleasedReturnValue(v22);
    goto LABEL_27;
  }
  if (!a3)
  {
    v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v25 = NFLogGetLogger(v24);
    if (v25)
    {
      v26 = (void (*)(uint64_t, const char *, ...))v25;
      v27 = object_getClass(a1);
      v28 = class_isMetaClass(v27);
      v29 = object_getClassName(a1);
      v40 = sel_getName("getAppletWithIdentifier:object:");
      v30 = 45;
      if (v28)
        v30 = 43;
      v26(3, "%c[%{public}s %{public}s]:%i NFTrustDBApplet can not be nil", v30, v29, v40, 360);
    }
    v31 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v32 = NFSharedLogGetLogger(v31);
    v33 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v34 = object_getClass(a1);
      if (class_isMetaClass(v34))
        v35 = 43;
      else
        v35 = 45;
      *(_DWORD *)buf = 67109890;
      v42 = v35;
      v43 = 2082;
      v44 = object_getClassName(a1);
      v45 = 2082;
      v46 = sel_getName("getAppletWithIdentifier:object:");
      v47 = 1024;
      v48 = 360;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i NFTrustDBApplet can not be nil", buf, 0x22u);
    }

    v36 = sub_100130704(&stru_1002ED8A8);
    v23 = objc_claimAutoreleasedReturnValue(v36);
LABEL_27:
    a1 = (id *)v23;
    goto LABEL_28;
  }
  *a3 = 0;
  v6 = a1[1];
  v7 = (objc_class *)objc_opt_class(NFTrustDBApplet);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", v9));

  if (v10)
    *a3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "valueForKey:", v5));

  a1 = 0;
LABEL_28:

  return a1;
}

id sub_10002ED58(_QWORD *a1, objc_class *a2, _QWORD *a3)
{
  void *v6;
  id v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v12;
  uint64_t v13;
  void (*v14)(uint64_t, const char *, ...);
  objc_class *v15;
  _BOOL4 v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  objc_class *v22;
  int v23;
  void *specific;
  uint64_t Logger;
  void (*v26)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  NSString *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *v39;
  const char *v40;
  NSString *v41;
  void *v42;
  id v43;
  const char *v44;
  uint8_t buf[4];
  int v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  void *v54;

  if (a1)
  {
    if (a3)
    {
      v6 = (void *)a1[1];
      if (v6)
      {
        v7 = v6;
        v8 = NSStringFromClass(a2);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "valueForKey:", v9));

        return v10;
      }
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v26 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("getDictionaryOfObjectOfType:error:");
        v31 = NSStringFromClass(a2);
        v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        v33 = 45;
        if (isMetaClass)
          v33 = 43;
        v26(3, "%c[%{public}s %{public}s]:%i Could not getDictionaryOfObjectOfType %{public}@, failed to connect to database", v33, ClassName, Name, 387, v32);

      }
      v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v35 = NFSharedLogGetLogger(v34);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        v37 = object_getClass(a1);
        if (class_isMetaClass(v37))
          v38 = 43;
        else
          v38 = 45;
        v39 = object_getClassName(a1);
        v40 = sel_getName("getDictionaryOfObjectOfType:error:");
        v41 = NSStringFromClass(a2);
        v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
        *(_DWORD *)buf = 67110146;
        v46 = v38;
        v47 = 2082;
        v48 = v39;
        v49 = 2082;
        v50 = v40;
        v51 = 1024;
        v52 = 387;
        v53 = 2114;
        v54 = v42;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not getDictionaryOfObjectOfType %{public}@, failed to connect to database", buf, 0x2Cu);

      }
      v43 = sub_1001308D0();
      *a3 = (id)objc_claimAutoreleasedReturnValue(v43);
    }
    else
    {
      v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v13 = NFLogGetLogger(v12);
      if (v13)
      {
        v14 = (void (*)(uint64_t, const char *, ...))v13;
        v15 = object_getClass(a1);
        v16 = class_isMetaClass(v15);
        v17 = object_getClassName(a1);
        v44 = sel_getName("getDictionaryOfObjectOfType:error:");
        v18 = 45;
        if (v16)
          v18 = 43;
        v14(3, "%c[%{public}s %{public}s]:%i Error can not be nil", v18, v17, v44, 382);
      }
      v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v20 = NFSharedLogGetLogger(v19);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v22 = object_getClass(a1);
        if (class_isMetaClass(v22))
          v23 = 43;
        else
          v23 = 45;
        *(_DWORD *)buf = 67109890;
        v46 = v23;
        v47 = 2082;
        v48 = object_getClassName(a1);
        v49 = 2082;
        v50 = sel_getName("getDictionaryOfObjectOfType:error:");
        v51 = 1024;
        v52 = 382;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error can not be nil", buf, 0x22u);
      }

    }
  }
  return 0;
}

id sub_10002F0B0(_QWORD *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  objc_class *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *v12;
  _BOOL4 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  id v22;
  void *specific;
  uint64_t Logger;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void (*v39)(uint64_t, const char *, ...);
  objc_class *v40;
  _BOOL4 v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  objc_class *v47;
  int v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  id v63;
  const char *v65;
  const char *v66;
  const char *Name;
  const char *v68;
  void *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  id v74;
  uint8_t v75[128];
  uint8_t buf[4];
  int v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  const char *v81;
  __int16 v82;
  int v83;
  __int16 v84;
  id v85;

  v3 = a2;
  v4 = v3;
  if (!a1)
  {
    v22 = 0;
    goto LABEL_54;
  }
  if (!a1[1])
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v25 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("removeKey:");
      v29 = 45;
      if (isMetaClass)
        v29 = 43;
      v25(3, "%c[%{public}s %{public}s]:%i Could not remove object to NFTrustDataBase, failed to connect to database", v29, ClassName, Name, 415);
    }
    v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v31 = NFSharedLogGetLogger(v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = object_getClass(a1);
      if (class_isMetaClass(v33))
        v34 = 43;
      else
        v34 = 45;
      *(_DWORD *)buf = 67109890;
      v77 = v34;
      v78 = 2082;
      v79 = object_getClassName(a1);
      v80 = 2082;
      v81 = sel_getName("removeKey:");
      v82 = 1024;
      v83 = 415;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not remove object to NFTrustDataBase, failed to connect to database", buf, 0x22u);
    }

    v35 = sub_1001308D0();
    v36 = objc_claimAutoreleasedReturnValue(v35);
    goto LABEL_35;
  }
  if (!v3)
  {
    v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v38 = NFLogGetLogger(v37);
    if (v38)
    {
      v39 = (void (*)(uint64_t, const char *, ...))v38;
      v40 = object_getClass(a1);
      v41 = class_isMetaClass(v40);
      v42 = object_getClassName(a1);
      v68 = sel_getName("removeKey:");
      v43 = 45;
      if (v41)
        v43 = 43;
      v39(3, "%c[%{public}s %{public}s]:%i Can not remove nil NFTrustDBKey from DB", v43, v42, v68, 420);
    }
    v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v45 = NFSharedLogGetLogger(v44);
    v46 = objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v47 = object_getClass(a1);
      if (class_isMetaClass(v47))
        v48 = 43;
      else
        v48 = 45;
      *(_DWORD *)buf = 67109890;
      v77 = v48;
      v78 = 2082;
      v79 = object_getClassName(a1);
      v80 = 2082;
      v81 = sel_getName("removeKey:");
      v82 = 1024;
      v83 = 420;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Can not remove nil NFTrustDBKey from DB", buf, 0x22u);
    }

    v49 = sub_100130D58(CFSTR("Can not remove nil NFTrustDBKey from DB"));
    v36 = objc_claimAutoreleasedReturnValue(v49);
LABEL_35:
    v22 = (id)v36;
    goto LABEL_54;
  }
  v5 = (objc_class *)objc_opt_class(NFTrustDBKey);
  v74 = 0;
  v6 = sub_10002ED58(a1, v5, &v74);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = v74;
  if (v8)
  {
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFLogGetLogger(v9);
    if (v10)
    {
      v11 = (void (*)(uint64_t, const char *, ...))v10;
      v12 = object_getClass(a1);
      v13 = class_isMetaClass(v12);
      v65 = object_getClassName(a1);
      v66 = sel_getName("removeKey:");
      v14 = 45;
      if (v13)
        v14 = 43;
      v11(3, "%c[%{public}s %{public}s]:%i Error while looking for objects of type NFTrustDBKey in DataBase : %{public}@", v14, v65, v66, 429, v8);
    }
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = object_getClass(a1);
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      v20 = object_getClassName(a1);
      v21 = sel_getName("removeKey:");
      *(_DWORD *)buf = 67110146;
      v77 = v19;
      v78 = 2082;
      v79 = v20;
      v80 = 2082;
      v81 = v21;
      v82 = 1024;
      v83 = 429;
      v84 = 2114;
      v85 = v8;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while looking for objects of type NFTrustDBKey in DataBase : %{public}@", buf, 0x2Cu);
    }

    v22 = v8;
  }
  else if (v7)
  {
    v69 = v7;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v50 = v7;
    v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v70, v75, 16);
    if (v51)
    {
      v52 = v51;
      v53 = *(_QWORD *)v71;
      do
      {
        v54 = 0;
        do
        {
          if (*(_QWORD *)v71 != v53)
            objc_enumerationMutation(v50);
          v55 = *(_QWORD *)(*((_QWORD *)&v70 + 1) + 8 * (_QWORD)v54);
          v56 = objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectForKeyedSubscript:", v55));
          v57 = (void *)v56;
          if (v56)
            v58 = *(void **)(v56 + 8);
          else
            v58 = 0;
          v59 = v4[1];
          v60 = v58;
          LODWORD(v59) = objc_msgSend(v60, "isEqualToString:", v59);

          if ((_DWORD)v59)
          {
            objc_msgSend(v50, "removeObjectForKey:", v55);
            goto LABEL_51;
          }
          v54 = (char *)v54 + 1;
        }
        while (v52 != v54);
        v61 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v70, v75, 16);
        v52 = v61;
      }
      while (v61);
    }
LABEL_51:

    v22 = 0;
    v8 = 0;
    v7 = v69;
  }
  else
  {
    v62 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Could not remove NFTrustDBKey with identifier %@, object does not exists"), v4[1]);
    v63 = sub_100130704(v62);
    v22 = (id)objc_claimAutoreleasedReturnValue(v63);

  }
LABEL_54:

  return v22;
}

id sub_10002F654(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v9;
  const char *ClassName;
  const char *Name;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  id v19;
  void *v20;
  void *v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *v25;
  _BOOL4 isMetaClass;
  const char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  id v34;
  id v35;
  void *v36;
  void (*v37)(uint64_t, const char *, ...);
  objc_class *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  objc_class *v45;
  int v46;
  const char *v47;
  const char *v48;
  id v49;
  const char *v50;
  id v51;
  uint8_t buf[4];
  int v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  id v61;

  if (!a1)
    return 0;
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = v2;
    v51 = 0;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v3, 1, &v51));
    v5 = v51;

    if (v5)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass((id)a1);
        if (class_isMetaClass(Class))
          v9 = 43;
        else
          v9 = 45;
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("commit");
        Logger(3, "%c[%{public}s %{public}s]:%i Error while archiving NFTrustDataBase : %{public}@", v9, ClassName, Name, 243, v5);
      }
      v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v13 = NFSharedLogGetLogger(v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = object_getClass((id)a1);
        if (class_isMetaClass(v15))
          v16 = 43;
        else
          v16 = 45;
        v17 = object_getClassName((id)a1);
        v18 = sel_getName("commit");
        *(_DWORD *)buf = 67110146;
        v53 = v16;
        v54 = 2082;
        v55 = v17;
        v56 = 2082;
        v57 = v18;
        v58 = 1024;
        v59 = 243;
        v60 = 2114;
        v61 = v5;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while archiving NFTrustDataBase : %{public}@", buf, 0x2Cu);
      }

      v19 = v5;
LABEL_15:
      v20 = v19;

      return v20;
    }
    if (!v4)
    {
      v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v37 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v36);
      if (v37)
      {
        v38 = object_getClass((id)a1);
        if (class_isMetaClass(v38))
          v39 = 43;
        else
          v39 = 45;
        v40 = object_getClassName((id)a1);
        v41 = sel_getName("commit");
        v37(3, "%c[%{public}s %{public}s]:%i Archiving NFTrustDataBase resulted in nil data, do not commit", v39, v40, v41, 248);
      }
      v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v43 = NFSharedLogGetLogger(v42);
      v44 = objc_claimAutoreleasedReturnValue(v43);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        v45 = object_getClass((id)a1);
        if (class_isMetaClass(v45))
          v46 = 43;
        else
          v46 = 45;
        v47 = object_getClassName((id)a1);
        v48 = sel_getName("commit");
        *(_DWORD *)buf = 67109890;
        v53 = v46;
        v54 = 2082;
        v55 = v47;
        v56 = 2082;
        v57 = v48;
        v58 = 1024;
        v59 = 248;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Archiving NFTrustDataBase resulted in nil data, do not commit", buf, 0x22u);
      }

      v49 = sub_1001308D0();
      v19 = (id)objc_claimAutoreleasedReturnValue(v49);
      goto LABEL_15;
    }
    v35 = *(id *)(a1 + 16);
    objc_msgSend(v35, "setObject:forKey:", v4, CFSTR("PurpleTrustData"));

    return 0;
  }
  v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v23 = NFLogGetLogger(v22);
  if (v23)
  {
    v24 = (void (*)(uint64_t, const char *, ...))v23;
    v25 = object_getClass((id)a1);
    isMetaClass = class_isMetaClass(v25);
    v27 = object_getClassName((id)a1);
    v50 = sel_getName("commit");
    v28 = 45;
    if (isMetaClass)
      v28 = 43;
    v24(3, "%c[%{public}s %{public}s]:%i Could not commit NFTrustDataBase, database seems to be empty", v28, v27, v50, 234);
  }
  v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v30 = NFSharedLogGetLogger(v29);
  v31 = objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    v32 = object_getClass((id)a1);
    if (class_isMetaClass(v32))
      v33 = 43;
    else
      v33 = 45;
    *(_DWORD *)buf = 67109890;
    v53 = v33;
    v54 = 2082;
    v55 = object_getClassName((id)a1);
    v56 = 2082;
    v57 = sel_getName("commit");
    v58 = 1024;
    v59 = 234;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not commit NFTrustDataBase, database seems to be empty", buf, 0x22u);
  }

  v34 = sub_1001308D0();
  return (id)objc_claimAutoreleasedReturnValue(v34);
}

void sub_10002FAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int buf, int a16, __int128 a17, int a18, int a19, __int128 a20)
{
  const char *v20;
  void *v21;
  id v22;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *ClassName;
  const char *Name;
  id v33;

  if (a2 == 1)
  {
    v22 = objc_begin_catch(exception_object);
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(v21);
      class_isMetaClass(Class);
      object_getClassName(v21);
      sel_getName(v20);
      Logger(3, "%c[%{public}s %{public}s]:%i Error while archiving NFTrustDataBase : %{public}@");
    }
    v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v27 = NFSharedLogGetLogger(v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = object_getClass(v21);
      if (class_isMetaClass(v29))
        v30 = 43;
      else
        v30 = 45;
      ClassName = object_getClassName(v21);
      Name = sel_getName(v20);
      buf = 67110146;
      a16 = v30;
      LOWORD(a17) = 2082;
      *(_QWORD *)((char *)&a17 + 2) = ClassName;
      WORD5(a17) = 2082;
      *(_QWORD *)((char *)&a17 + 12) = Name;
      LOWORD(a19) = 1024;
      *(int *)((char *)&a19 + 2) = 255;
      WORD1(a20) = 2114;
      *(_QWORD *)((char *)&a20 + 4) = v22;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while archiving NFTrustDataBase : %{public}@", (uint8_t *)&buf, 0x2Cu);
    }

    v33 = sub_1001308D0();
    objc_claimAutoreleasedReturnValue(v33);

    objc_end_catch();
    JUMPOUT(0x10002F968);
  }
  _Unwind_Resume(exception_object);
}

id *sub_10002FC68(id *a1)
{
  id *v1;

  if (a1)
  {
    v1 = sub_10002FE48(a1);
    a1 = (id *)objc_claimAutoreleasedReturnValue(v1);
  }
  return a1;
}

id sub_10002FC84()
{
  objc_opt_self();
  if (qword_10032A850 != -1)
    dispatch_once(&qword_10032A850, &stru_1002E5628);
  return (id)qword_10032A858;
}

void sub_10002FCC8(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v17 = objc_alloc((Class)NSSet);
  v16 = objc_opt_class(NSArray);
  v15 = objc_opt_class(NSMutableArray);
  v14 = objc_opt_class(NSDictionary);
  v13 = objc_opt_class(NSMutableDictionary);
  v1 = objc_opt_class(NSString);
  v2 = objc_opt_class(NSMutableString);
  v3 = objc_opt_class(NSData);
  v4 = objc_opt_class(NSMutableData);
  v5 = objc_opt_class(NSNumber);
  v6 = objc_opt_class(NSDate);
  v7 = objc_opt_class(NSDateComponents);
  v8 = objc_opt_class(NFTrustDBApplet);
  v9 = objc_opt_class(KeyInSlot);
  v10 = objc_opt_class(NFTrustDBKey);
  v11 = objc_msgSend(v17, "initWithObjects:", v16, v15, v14, v13, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, objc_opt_class(NFTrustLocalValidation), 0);
  v12 = (void *)qword_10032A858;
  qword_10032A858 = (uint64_t)v11;

}

id *sub_10002FE48(id *a1)
{
  id *v1;
  NSMutableDictionary *v2;
  id v3;
  id v4;
  void *v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  _QWORD *v17;
  id v18;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  void *v31;

  v1 = a1;
  if (a1)
  {
    v2 = objc_opt_new(NSMutableDictionary);
    v3 = v1[1];
    v1[1] = v2;

    v4 = sub_10002D320(v1);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v8 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v1);
        Name = sel_getName("create");
        v11 = 45;
        if (isMetaClass)
          v11 = 43;
        v8(3, "%c[%{public}s %{public}s]:%i Could not add NFTrustDBAppelt to DB : %{public}@", v11, ClassName, Name, 269, v5);
      }
      v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v13 = NFSharedLogGetLogger(v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = object_getClass(v1);
        if (class_isMetaClass(v15))
          v16 = 43;
        else
          v16 = 45;
        *(_DWORD *)buf = 67110146;
        v23 = v16;
        v24 = 2082;
        v25 = object_getClassName(v1);
        v26 = 2082;
        v27 = sel_getName("create");
        v28 = 1024;
        v29 = 269;
        v30 = 2114;
        v31 = v5;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not add NFTrustDBAppelt to DB : %{public}@", buf, 0x2Cu);
      }

      v17 = v5;
    }
    else
    {
      v18 = sub_10002F654((uint64_t)v1);
      v17 = (_QWORD *)objc_claimAutoreleasedReturnValue(v18);
    }
    v1 = (id *)v17;

  }
  return v1;
}

id sub_100030030(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000300A8;
  block[3] = &unk_1002E5098;
  block[4] = objc_opt_self(a1);
  if (qword_10032A860 != -1)
    dispatch_once(&qword_10032A860, block);
  return (id)qword_10032A868;
}

void sub_1000300A8(uint64_t a1)
{
  NFTrustDataBase *v1;
  NSUserDefaults *v2;
  NSUserDefaults *userDefaults;
  NSUserDefaults *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  NSMutableDictionary *v11;
  NSMutableDictionary *dictionary;
  id v13;
  void *v14;
  id v15[8];

  objc_opt_self(*(_QWORD *)(a1 + 32));
  v1 = [NFTrustDataBase alloc];
  if (v1)
  {
    v2 = (NSUserDefaults *)objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.stockholm"));
    userDefaults = v1->_userDefaults;
    v1->_userDefaults = v2;

    v4 = v1->_userDefaults;
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSUserDefaults dataForKey:](v4, "dataForKey:", CFSTR("PurpleTrustData")));

    if (v5 && objc_msgSend(v5, "length"))
    {
      v6 = objc_alloc((Class)NSMutableDictionary);
      v7 = sub_10002FC84();
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v15[0] = 0;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v8, v5, v15));
      v10 = v15[0];
      v11 = (NSMutableDictionary *)objc_msgSend(v6, "initWithDictionary:", v9);
      dictionary = v1->_dictionary;
      v1->_dictionary = v11;

    }
    else
    {
      v13 = sub_10002FE48((id *)&v1->super.isa);
    }

  }
  v14 = (void *)qword_10032A868;
  qword_10032A868 = (uint64_t)v1;

}

id sub_1000303B0(void *a1)
{
  if (a1)
    a1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "instanceAID"));
  return a1;
}

void sub_1000303CC(_QWORD *a1, objc_class *a2, void *a3)
{
  void (**v5)(id, _QWORD, id);
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v5 = a3;
  if (a1)
  {
    v10 = 0;
    v6 = sub_10002ED58(a1, a2, &v10);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = v10;
    if (v8)
    {
      v5[2](v5, 0, v8);
    }
    else
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allValues"));
      ((void (**)(id, void *, id))v5)[2](v5, v9, 0);

    }
  }

}

id sub_100030480(id *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  NSMutableDictionary *v9;
  void *v10;
  uint64_t v11;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *v13;
  _BOOL4 v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  const char *v22;
  const char *v23;
  id v24;
  void *specific;
  uint64_t Logger;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void (*v41)(uint64_t, const char *, ...);
  objc_class *v42;
  _BOOL4 v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  NSObject *v48;
  objc_class *v49;
  int v50;
  id v51;
  id v53;
  id v54;
  objc_class *v55;
  id v56;
  void *v57;
  uint64_t v58;
  void (*v59)(uint64_t, const char *, ...);
  objc_class *v60;
  _BOOL4 v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  NSObject *v65;
  objc_class *v66;
  int v67;
  const char *v68;
  const char *v69;
  id v70;
  id v71;
  objc_class *v72;
  NSString *v73;
  void *v74;
  const char *v75;
  const char *v76;
  const char *Name;
  const char *v78;
  const char *v79;
  id v80;
  id v81;
  uint8_t buf[4];
  int v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  int v89;
  __int16 v90;
  id v91;

  v3 = a2;
  v4 = v3;
  if (!a1)
  {
    v24 = 0;
    goto LABEL_37;
  }
  if (!a1[1])
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v27 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("addKey:");
      v31 = 45;
      if (isMetaClass)
        v31 = 43;
      v27(3, "%c[%{public}s %{public}s]:%i Could not add object to NFTrustDataBase, failed to connect to database", v31, ClassName, Name, 454);
    }
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = NFSharedLogGetLogger(v32);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v35 = object_getClass(a1);
      if (class_isMetaClass(v35))
        v36 = 43;
      else
        v36 = 45;
      *(_DWORD *)buf = 67109890;
      v83 = v36;
      v84 = 2082;
      v85 = object_getClassName(a1);
      v86 = 2082;
      v87 = sel_getName("addKey:");
      v88 = 1024;
      v89 = 454;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not add object to NFTrustDataBase, failed to connect to database", buf, 0x22u);
    }

    v37 = sub_1001308D0();
    v38 = objc_claimAutoreleasedReturnValue(v37);
    goto LABEL_36;
  }
  if (!v3)
  {
    v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v40 = NFLogGetLogger(v39);
    if (v40)
    {
      v41 = (void (*)(uint64_t, const char *, ...))v40;
      v42 = object_getClass(a1);
      v43 = class_isMetaClass(v42);
      v44 = object_getClassName(a1);
      v78 = sel_getName("addKey:");
      v45 = 45;
      if (v43)
        v45 = 43;
      v41(3, "%c[%{public}s %{public}s]:%i Can not add nil NFTrustDBKey to DB", v45, v44, v78, 459);
    }
    v46 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v47 = NFSharedLogGetLogger(v46);
    v48 = objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      v49 = object_getClass(a1);
      if (class_isMetaClass(v49))
        v50 = 43;
      else
        v50 = 45;
      *(_DWORD *)buf = 67109890;
      v83 = v50;
      v84 = 2082;
      v85 = object_getClassName(a1);
      v86 = 2082;
      v87 = sel_getName("addKey:");
      v88 = 1024;
      v89 = 459;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Can not add nil NFTrustDBKey to DB", buf, 0x22u);
    }

    v51 = sub_100130D58(CFSTR("Can not add nil NFTrustDBKey to DB"));
    v38 = objc_claimAutoreleasedReturnValue(v51);
LABEL_36:
    v24 = (id)v38;
    goto LABEL_37;
  }
  v5 = (void *)v3[1];
  v81 = 0;
  v6 = v5;
  v7 = sub_100030AF4(a1, v6, &v81);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = (NSMutableDictionary *)v81;

  if (v8)
  {
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFLogGetLogger(v10);
    if (v11)
    {
      v12 = (void (*)(uint64_t, const char *, ...))v11;
      v13 = object_getClass(a1);
      v14 = class_isMetaClass(v13);
      v15 = object_getClassName(a1);
      v76 = sel_getName("addKey:");
      v16 = 45;
      if (v14)
        v16 = 43;
      v12(3, "%c[%{public}s %{public}s]:%i Can not add NFTrustDBKey to DB, could not check if key already exist", v16, v15, v76, 468);
    }
    v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v18 = NFSharedLogGetLogger(v17);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = object_getClass(a1);
      if (class_isMetaClass(v20))
        v21 = 43;
      else
        v21 = 45;
      v22 = object_getClassName(a1);
      v23 = sel_getName("addKey:");
      *(_DWORD *)buf = 67109890;
      v83 = v21;
      v84 = 2082;
      v85 = v22;
      v86 = 2082;
      v87 = v23;
      v88 = 1024;
      v89 = 468;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Can not add NFTrustDBKey to DB, could not check if key already exist", buf, 0x22u);
    }

    v24 = v8;
  }
  else
  {
    if (v9)
    {
      v53 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Could not add NFTrustDBKey with identifier %@, object already exists"), v4[1]);
      v54 = sub_100130704(v53);
      v24 = (id)objc_claimAutoreleasedReturnValue(v54);

      goto LABEL_37;
    }
    v55 = (objc_class *)objc_opt_class(NFTrustDBKey);
    v80 = 0;
    v56 = sub_10002ED58(a1, v55, &v80);
    v9 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v56);
    v24 = v80;
    if (v24)
    {
      v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v58 = NFLogGetLogger(v57);
      if (v58)
      {
        v59 = (void (*)(uint64_t, const char *, ...))v58;
        v60 = object_getClass(a1);
        v61 = class_isMetaClass(v60);
        v75 = object_getClassName(a1);
        v79 = sel_getName("addKey:");
        v62 = 45;
        if (v61)
          v62 = 43;
        v59(3, "%c[%{public}s %{public}s]:%i Error while looking for objects of type NFTrustDBKey in DataBase : %{public}@", v62, v75, v79, 479, v24);
      }
      v63 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v64 = NFSharedLogGetLogger(v63);
      v65 = objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      {
        v66 = object_getClass(a1);
        if (class_isMetaClass(v66))
          v67 = 43;
        else
          v67 = 45;
        v68 = object_getClassName(a1);
        v69 = sel_getName("addKey:");
        *(_DWORD *)buf = 67110146;
        v83 = v67;
        v84 = 2082;
        v85 = v68;
        v86 = 2082;
        v87 = v69;
        v88 = 1024;
        v89 = 479;
        v90 = 2114;
        v91 = v24;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while looking for objects of type NFTrustDBKey in DataBase : %{public}@", buf, 0x2Cu);
      }

      v70 = v24;
    }
    else
    {
      if (!v9)
      {
        v9 = objc_opt_new(NSMutableDictionary);
        v71 = a1[1];
        v72 = (objc_class *)objc_opt_class(NFTrustDBKey);
        v73 = NSStringFromClass(v72);
        v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
        objc_msgSend(v71, "setValue:forKey:", v9, v74);

      }
      -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v4, v4[1]);
    }
  }

LABEL_37:
  return v24;
}

id sub_100030AF4(_QWORD *a1, void *a2, _QWORD *a3)
{
  id v5;
  objc_class *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *specific;
  uint64_t Logger;
  void (*v14)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  objc_class *v22;
  int v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, const char *, ...);
  objc_class *v29;
  _BOOL4 v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  int v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  void *i;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  id v47;
  unsigned int v48;
  const char *Name;
  const char *v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  id v57;
  uint8_t v58[128];
  uint8_t buf[4];
  int v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  int v66;

  v5 = a2;
  if (!a1)
  {
    v11 = 0;
    goto LABEL_43;
  }
  if (!a1[1])
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v14 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("getKeyWithIdentifier:object:");
      v18 = 45;
      if (isMetaClass)
        v18 = 43;
      v14(3, "%c[%{public}s %{public}s]:%i Could not getNFTrustDBKeyWithIdentifier, failed to connect to database", v18, ClassName, Name, 503);
    }
    v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v20 = NFSharedLogGetLogger(v19);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = object_getClass(a1);
      if (class_isMetaClass(v22))
        v23 = 43;
      else
        v23 = 45;
      *(_DWORD *)buf = 67109890;
      v60 = v23;
      v61 = 2082;
      v62 = object_getClassName(a1);
      v63 = 2082;
      v64 = sel_getName("getKeyWithIdentifier:object:");
      v65 = 1024;
      v66 = 503;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not getNFTrustDBKeyWithIdentifier, failed to connect to database", buf, 0x22u);
    }

    v24 = sub_1001308D0();
    v25 = objc_claimAutoreleasedReturnValue(v24);
    goto LABEL_26;
  }
  if (!a3)
  {
    v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v27 = NFLogGetLogger(v26);
    if (v27)
    {
      v28 = (void (*)(uint64_t, const char *, ...))v27;
      v29 = object_getClass(a1);
      v30 = class_isMetaClass(v29);
      v31 = object_getClassName(a1);
      v51 = sel_getName("getKeyWithIdentifier:object:");
      v32 = 45;
      if (v30)
        v32 = 43;
      v28(3, "%c[%{public}s %{public}s]:%i trustDBKey can not be nil", v32, v31, v51, 508);
    }
    v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v34 = NFSharedLogGetLogger(v33);
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = object_getClass(a1);
      if (class_isMetaClass(v36))
        v37 = 43;
      else
        v37 = 45;
      *(_DWORD *)buf = 67109890;
      v60 = v37;
      v61 = 2082;
      v62 = object_getClassName(a1);
      v63 = 2082;
      v64 = sel_getName("getKeyWithIdentifier:object:");
      v65 = 1024;
      v66 = 508;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i trustDBKey can not be nil", buf, 0x22u);
    }

    v38 = sub_100130704(&stru_1002ED8A8);
    v25 = objc_claimAutoreleasedReturnValue(v38);
LABEL_26:
    v11 = (id)v25;
    goto LABEL_43;
  }
  *a3 = 0;
  v6 = (objc_class *)objc_opt_class(NFTrustDBKey);
  v57 = 0;
  v7 = sub_10002ED58(a1, v6, &v57);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = v57;
  v10 = v9;
  if (v9)
  {
    v11 = v9;
  }
  else if (v8)
  {
    v52 = v8;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v39 = v8;
    v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
    if (v40)
    {
      v41 = v40;
      v42 = *(_QWORD *)v54;
      while (2)
      {
        for (i = 0; i != v41; i = (char *)i + 1)
        {
          if (*(_QWORD *)v54 != v42)
            objc_enumerationMutation(v39);
          v44 = *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)i);
          v45 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "objectForKeyedSubscript:", v44));
          v46 = v45;
          if (v45)
            v45 = (_QWORD *)v45[1];
          v47 = v5;
          v48 = objc_msgSend(v45, "isEqualToString:", v5);

          if (v48)
          {
            *a3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "objectForKeyedSubscript:", v44));

            v11 = 0;
            v5 = v47;
            goto LABEL_40;
          }
          v5 = v47;
        }
        v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
        if (v41)
          continue;
        break;
      }
    }

    v11 = 0;
LABEL_40:
    v10 = 0;
    v8 = v52;
  }
  else
  {
    v11 = 0;
  }

LABEL_43:
  return v11;
}

void sub_100031044(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 8), a2);
}

id sub_100031364(id a1, _QWORD *a2)
{
  id v2;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v11;
  const char *ClassName;
  const char *Name;
  int *v14;
  char *v15;
  int *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  const char *v22;
  const char *v23;
  int *v24;
  char *v25;
  int v26;
  id v27;
  _QWORD v29[5];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  char *v43;
  __int16 v44;
  int v45;

  v2 = a1;
  if (a1)
  {
    v30 = 0;
    v31 = &v30;
    v32 = 0x2020000000;
    v33 = -1;
    if (a2)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "map"));
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_100031650;
      v29[3] = &unk_1002E5650;
      v29[4] = &v30;
      objc_msgSend(v4, "enumerateObjectsUsingBlock:", v29);

      v5 = v31[3];
      if (v5 != -1)
      {
        v2 = 0;
        *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v5 + 1));
LABEL_18:
        _Block_object_dispose(&v30, 8);
        return v2;
      }
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass(v2);
        if (class_isMetaClass(Class))
          v11 = 43;
        else
          v11 = 45;
        ClassName = object_getClassName(v2);
        Name = sel_getName("getSlot:");
        v14 = __error();
        v15 = strerror(*v14);
        v16 = __error();
        Logger(3, "%c[%{public}s %{public}s]:%i \"%s\" errno=%d Could not find available slot", v11, ClassName, Name, 738, v15, *v16);
      }
      v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v18 = NFSharedLogGetLogger(v17);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = object_getClass(v2);
        if (class_isMetaClass(v20))
          v21 = 43;
        else
          v21 = 45;
        v22 = object_getClassName(v2);
        v23 = sel_getName("getSlot:");
        v24 = __error();
        v25 = strerror(*v24);
        v26 = *__error();
        *(_DWORD *)buf = 67110402;
        v35 = v21;
        v36 = 2082;
        v37 = v22;
        v38 = 2082;
        v39 = v23;
        v40 = 1024;
        v41 = 738;
        v42 = 2080;
        v43 = v25;
        v44 = 1024;
        v45 = v26;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i \"%s\" errno=%d Could not find available slot", buf, 0x32u);
      }

      v27 = sub_100130A88(CFSTR("create key, no availble slot"));
      v7 = objc_claimAutoreleasedReturnValue(v27);
    }
    else
    {
      v6 = sub_100130D58(CFSTR("slot shall not be nil"));
      v7 = objc_claimAutoreleasedReturnValue(v6);
    }
    v2 = (id)v7;
    goto LABEL_18;
  }
  return v2;
}

void sub_100031624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100031650(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (!a2 || !*(_QWORD *)(a2 + 8))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

id sub_100031680(void *a1, void *a2, void *a3)
{
  _QWORD *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  unsigned int v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  __CFString *v16;
  id v17;
  void *v18;
  _QWORD *v19;
  void *v20;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!a1)
    goto LABEL_14;
  if (!v6)
  {
    v16 = CFSTR("Could not pushKey with nil slot");
LABEL_8:
    v17 = sub_100130D58(v16);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v17);
    goto LABEL_14;
  }
  if ((objc_msgSend(v6, "charValue") & 0x80000000) != 0)
  {
    v16 = CFSTR("Could not pushKey with negative slot");
    goto LABEL_8;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "map"));
  v9 = objc_msgSend(v8, "count");
  v10 = objc_msgSend(v7, "unsignedCharValue");

  if ((unint64_t)v9 >= v10)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "map"));
    v19 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndex:", objc_msgSend(v7, "unsignedCharValue") - 1));

    if (v5)
      v20 = (void *)v5[1];
    else
      v20 = 0;
    sub_100031044((uint64_t)v19, v20);
    if (v19)
      v19[2] = 0;

    a1 = 0;
  }
  else
  {
    v11 = objc_alloc((Class)NSString);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "instanceAID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "map"));
    v14 = objc_msgSend(v11, "initWithFormat:", CFSTR("Could pushKey in slot %@ of PTApplet %@, applet has %lu slots"), v7, v12, objc_msgSend(v13, "count"));
    v15 = sub_100130D58(v14);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v15);

  }
LABEL_14:

  return a1;
}

id sub_100031814(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  unsigned int v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  __CFString *v13;
  id v14;
  void *v15;
  _QWORD *v16;

  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_12;
  if (!v3)
  {
    v13 = CFSTR("Could not clean with nil slot");
LABEL_8:
    v14 = sub_100130D58(v13);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v14);
    goto LABEL_12;
  }
  if ((objc_msgSend(v3, "charValue") & 0x80000000) != 0)
  {
    v13 = CFSTR("Could not clean with negative slot");
    goto LABEL_8;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "map"));
  v6 = objc_msgSend(v5, "count");
  v7 = objc_msgSend(v4, "unsignedCharValue");

  if ((unint64_t)v6 >= v7)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "map"));
    v16 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectAtIndex:", objc_msgSend(v4, "unsignedCharValue") - 1));

    sub_100031044((uint64_t)v16, 0);
    if (v16)
      v16[2] = 0;

    a1 = 0;
  }
  else
  {
    v8 = objc_alloc((Class)NSString);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "instanceAID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "map"));
    v11 = objc_msgSend(v8, "initWithFormat:", CFSTR("Could not clean slot %@ of PTApplet %@, applet has %lu slots"), v4, v9, objc_msgSend(v10, "count"));
    v12 = sub_100130D58(v11);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v12);

  }
LABEL_12:

  return a1;
}

NFTrustDBKey *sub_100031EC8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  NFTrustDBKey *v14;
  NFTrustDBKey *v15;
  void *v16;
  uint64_t v17;
  NSNumber *counterLimit;
  uint64_t v19;
  NSNumber *counterValue;
  void *specific;
  uint64_t Logger;
  void (*v23)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  void (*v36)(uint64_t, const char *, ...);
  objc_class *v37;
  _BOOL4 v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  objc_class *v43;
  int v44;
  void *v45;
  uint64_t v46;
  void (*v47)(uint64_t, const char *, ...);
  objc_class *v48;
  _BOOL4 v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  objc_class *v54;
  int v55;
  void *v56;
  uint64_t v57;
  void (*v58)(uint64_t, const char *, ...);
  objc_class *v59;
  _BOOL4 v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  objc_class *v65;
  int v66;
  void *v67;
  uint64_t v68;
  void (*v69)(uint64_t, const char *, ...);
  objc_class *v70;
  _BOOL4 v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  objc_class *v76;
  int v77;
  const char *Name;
  const char *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  uint8_t buf[4];
  int v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  int v91;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void *)objc_opt_self(a1);
  if (!v9)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v23 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v13);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v13);
      Name = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
      v27 = 45;
      if (isMetaClass)
        v27 = 43;
      v23(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil identifier", v27, ClassName, Name, 860);
    }
    v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v29 = NFSharedLogGetLogger(v28);
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_53;
    v31 = object_getClass(v13);
    if (class_isMetaClass(v31))
      v32 = 43;
    else
      v32 = 45;
    *(_DWORD *)buf = 67109890;
    v85 = v32;
    v86 = 2082;
    v87 = object_getClassName(v13);
    v88 = 2082;
    v89 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
    v90 = 1024;
    v91 = 860;
    v33 = "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil identifier";
    goto LABEL_52;
  }
  if (!v10)
  {
    v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v35 = NFLogGetLogger(v34);
    if (v35)
    {
      v36 = (void (*)(uint64_t, const char *, ...))v35;
      v37 = object_getClass(v13);
      v38 = class_isMetaClass(v37);
      v39 = object_getClassName(v13);
      v80 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
      v40 = 45;
      if (v38)
        v40 = 43;
      v36(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil applicationIdentifier", v40, v39, v80, 865);
    }
    v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v42 = NFSharedLogGetLogger(v41);
    v30 = objc_claimAutoreleasedReturnValue(v42);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_53;
    v43 = object_getClass(v13);
    if (class_isMetaClass(v43))
      v44 = 43;
    else
      v44 = 45;
    *(_DWORD *)buf = 67109890;
    v85 = v44;
    v86 = 2082;
    v87 = object_getClassName(v13);
    v88 = 2082;
    v89 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
    v90 = 1024;
    v91 = 865;
    v33 = "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil applicationIdentifier";
    goto LABEL_52;
  }
  if (!v11)
  {
    v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v46 = NFLogGetLogger(v45);
    if (v46)
    {
      v47 = (void (*)(uint64_t, const char *, ...))v46;
      v48 = object_getClass(v13);
      v49 = class_isMetaClass(v48);
      v50 = object_getClassName(v13);
      v81 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
      v51 = 45;
      if (v49)
        v51 = 43;
      v47(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil instanceAID", v51, v50, v81, 870);
    }
    v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v53 = NFSharedLogGetLogger(v52);
    v30 = objc_claimAutoreleasedReturnValue(v53);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_53;
    v54 = object_getClass(v13);
    if (class_isMetaClass(v54))
      v55 = 43;
    else
      v55 = 45;
    *(_DWORD *)buf = 67109890;
    v85 = v55;
    v86 = 2082;
    v87 = object_getClassName(v13);
    v88 = 2082;
    v89 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
    v90 = 1024;
    v91 = 870;
    v33 = "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil instanceAID";
    goto LABEL_52;
  }
  if (!v12)
  {
    v56 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v57 = NFLogGetLogger(v56);
    if (v57)
    {
      v58 = (void (*)(uint64_t, const char *, ...))v57;
      v59 = object_getClass(v13);
      v60 = class_isMetaClass(v59);
      v61 = object_getClassName(v13);
      v82 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
      v62 = 45;
      if (v60)
        v62 = 43;
      v58(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil NFTrustCreateKeyRequest", v62, v61, v82, 875);
    }
    v63 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v64 = NFSharedLogGetLogger(v63);
    v30 = objc_claimAutoreleasedReturnValue(v64);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_53;
    v65 = object_getClass(v13);
    if (class_isMetaClass(v65))
      v66 = 43;
    else
      v66 = 45;
    *(_DWORD *)buf = 67109890;
    v85 = v66;
    v86 = 2082;
    v87 = object_getClassName(v13);
    v88 = 2082;
    v89 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
    v90 = 1024;
    v91 = 875;
    v33 = "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil NFTrustCreateKeyRequest";
    goto LABEL_52;
  }
  v14 = [NFTrustDBKey alloc];
  if (!v14)
  {
    v67 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v68 = NFLogGetLogger(v67);
    if (v68)
    {
      v69 = (void (*)(uint64_t, const char *, ...))v68;
      v70 = object_getClass(v13);
      v71 = class_isMetaClass(v70);
      v72 = object_getClassName(v13);
      v83 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
      v73 = 45;
      if (v71)
        v73 = 43;
      v69(3, "%c[%{public}s %{public}s]:%i Could not create DB NFTrustKey", v73, v72, v83, 880);
    }
    v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v75 = NFSharedLogGetLogger(v74);
    v30 = objc_claimAutoreleasedReturnValue(v75);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_53;
    v76 = object_getClass(v13);
    if (class_isMetaClass(v76))
      v77 = 43;
    else
      v77 = 45;
    *(_DWORD *)buf = 67109890;
    v85 = v77;
    v86 = 2082;
    v87 = object_getClassName(v13);
    v88 = 2082;
    v89 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
    v90 = 1024;
    v91 = 880;
    v33 = "%c[%{public}s %{public}s]:%i Could not create DB NFTrustKey";
LABEL_52:
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, v33, buf, 0x22u);
LABEL_53:

    v15 = 0;
    goto LABEL_54;
  }
  v15 = v14;
  -[NFTrustDBKey setIdentifier:](v14, "setIdentifier:", v9);
  -[NFTrustDBKey setApplicationIdentifier:](v15, "setApplicationIdentifier:", v10);
  -[NFTrustDBKey setInstanceAID:](v15, "setInstanceAID:", v11);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localValidations"));
  -[NFTrustDBKey setLocalValidations:](v15, "setLocalValidations:", v16);

  v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "counterLimit"));
  counterLimit = v15->_counterLimit;
  v15->_counterLimit = (NSNumber *)v17;

  v19 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", 0));
  counterValue = v15->_counterValue;
  v15->_counterValue = (NSNumber *)v19;

LABEL_54:
  return v15;
}

void sub_100032568(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 48), a2);
}

BOOL sub_100032580(void *a1)
{
  void *v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localValidations"));
  v2 = v1 != 0;

  return v2;
}

id sub_1000325BC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NFTrustKey keyWithIdentifier:](NFTrustKey, "keyWithIdentifier:", *(_QWORD *)(a1 + 8)));
    v3 = v2;
    if (v2)
    {
      objc_msgSend(v2, "setKeyAttestationAuthority:", *(_QWORD *)(a1 + 16));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "NF_asHexString"));
      objc_msgSend(v3, "setKeyAttestation:", v4);

      objc_msgSend(v3, "setCounterLimit:", *(_QWORD *)(a1 + 40));
      objc_msgSend(v3, "setCounterValue:", *(_QWORD *)(a1 + 48));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "localValidations"));
      objc_msgSend(v3, "setLocalValidations:", v5);

      v6 = v3;
    }

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_1000326B4(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 16), a2);
}

void sub_1000326CC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 24), a2);
}

void sub_1000326E4(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 32), a2);
}

void sub_100032E18(id a1)
{
  NFSecureXPCEventPublisherManager *v1;
  void *v2;

  v1 = objc_alloc_init(NFSecureXPCEventPublisherManager);
  v2 = (void *)qword_10032A878;
  qword_10032A878 = (uint64_t)v1;

}

void sub_10003A418(_BYTE *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *Name;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;

  if (a1 && a1[25])
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("cancelOutstandingActivity");
      v8 = 45;
      if (isMetaClass)
        v8 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i Marking activity cancelled", v8, ClassName, Name, 47);
    }
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFSharedLogGetLogger(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = object_getClass(a1);
      if (class_isMetaClass(v12))
        v13 = 43;
      else
        v13 = 45;
      *(_DWORD *)buf = 67109890;
      v16 = v13;
      v17 = 2082;
      v18 = object_getClassName(a1);
      v19 = 2082;
      v20 = sel_getName("cancelOutstandingActivity");
      v21 = 1024;
      v22 = 47;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Marking activity cancelled", buf, 0x22u);
    }

    a1[24] = 1;
  }
}

void sub_10003A5AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSDateFormatter *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  timeval v14;

  v14.tv_sec = 0;
  *(_QWORD *)&v14.tv_usec = 0;
  v5 = a3;
  v6 = a2;
  gettimeofday(&v14, 0);
  v13 = (id)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)v14.tv_sec));
  v7 = objc_opt_new(NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v7, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss"));
  v8 = objc_alloc((Class)NSString);
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v7, "stringFromDate:", v13));
  v10 = (v14.tv_usec / 1000);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "NF_asHexString"));

  v12 = objc_msgSend(v8, "initWithFormat:", CFSTR("%@.%03d %@ : %@"), v9, v10, v5, v11);
  objc_msgSend(*(id *)(a1 + 16), "addObject:", v12);

}

void sub_10003A6D8(void *a1, void *a2)
{
  id v3;
  id *v4;
  id v5;

  v3 = a2;
  if (a1)
  {
    v5 = v3;
    v4 = a1;
    objc_sync_enter(v4);
    objc_msgSend(v4[1], "addObject:", v5);
    if ((objc_opt_respondsToSelector(v5, "setManager:") & 1) != 0)
      objc_msgSend(v5, "setManager:", v4);
    objc_sync_exit(v4);

    v3 = v5;
  }

}

void sub_10003A750(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10003A764(void *a1, void *a2)
{
  id v3;
  id *v4;
  id v5;

  v3 = a2;
  if (a1)
  {
    v4 = a1;
    objc_sync_enter(v4);
    v5 = objc_msgSend(v4[1], "containsObject:", v3);
    objc_sync_exit(v4);

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_10003A7CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10003A7E0(void *a1, void *a2)
{
  id v3;
  id *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  uint64_t v11;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v15;
  const char *ClassName;
  const char *Name;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  const char *v23;
  const char *v24;
  id v25;
  id obj;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  _BYTE v41[128];

  v3 = a2;
  if (a1)
  {
    v4 = a1;
    objc_sync_enter(v4);
    v25 = v3;
    objc_msgSend(v4[1], "removeObject:", v3);
    if ((objc_opt_respondsToSelector(v3, "setManager:") & 1) != 0)
      objc_msgSend(v3, "setManager:", 0);
    v5 = objc_msgSend(v4[1], "count");
    if (!v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
      v7 = objc_msgSend(v6, "setHostEmulationEnabled:", 0);

    }
    if (NFIsInternalBuild(v5) && objc_msgSend(v4[2], "count"))
    {
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      obj = v4[2];
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v41, 16);
      if (v8)
      {
        v9 = *(_QWORD *)v28;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(_QWORD *)v28 != v9)
              objc_enumerationMutation(obj);
            v11 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
            specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
            if (Logger)
            {
              Class = object_getClass(v4);
              if (class_isMetaClass(Class))
                v15 = 43;
              else
                v15 = 45;
              ClassName = object_getClassName(v4);
              Name = sel_getName("removeApplet:");
              Logger(6, "%c[%{public}s %{public}s]:%i %@", v15, ClassName, Name, 105, v11);
            }
            v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v19 = NFSharedLogGetLogger(v18);
            v20 = objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              v21 = object_getClass(v4);
              if (class_isMetaClass(v21))
                v22 = 43;
              else
                v22 = 45;
              v23 = object_getClassName(v4);
              v24 = sel_getName("removeApplet:");
              *(_DWORD *)buf = 67110146;
              v32 = v22;
              v33 = 2082;
              v34 = v23;
              v35 = 2082;
              v36 = v24;
              v37 = 1024;
              v38 = 105;
              v39 = 2112;
              v40 = v11;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %@", buf, 0x2Cu);
            }

          }
          v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v41, 16);
        }
        while (v8);
      }

    }
    objc_sync_exit(v4);

    v3 = v25;
  }

}

void sub_10003AAB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_10003AAE8(id *a1)
{
  id *v1;
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  id v17;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  if (a1)
  {
    v1 = a1;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v1);
      Name = sel_getName("getAPDULog");
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 121, v1[2]);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(v1);
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(v1);
      v16 = sel_getName("getAPDULog");
      v17 = v1[2];
      *(_DWORD *)buf = 67110146;
      v20 = v14;
      v21 = 2082;
      v22 = v15;
      v23 = 2082;
      v24 = v16;
      v25 = 1024;
      v26 = 121;
      v27 = 2114;
      v28 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
    }

    a1 = (id *)v1[2];
  }
  return a1;
}

void sub_10003AC8C(void *a1, void *a2, char a3)
{
  id v5;
  _WORD *v6;
  dispatch_queue_global_t global_queue;
  NSObject *v8;
  _QWORD block[5];
  id v10;
  char v11;

  v5 = a2;
  if (a1)
  {
    v6 = a1;
    objc_sync_enter(v6);
    v6[12] = 256;
    global_queue = dispatch_get_global_queue(33, 0);
    v8 = objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10003AD54;
    block[3] = &unk_1002E58D8;
    block[4] = v6;
    v10 = v5;
    v11 = a3;
    dispatch_async(v8, block);

    objc_sync_exit(v6);
  }

}

void sub_10003AD54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void (*v23)(uint64_t, const char *, ...);
  objc_class *v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void (*v40)(uint64_t, const char *, ...);
  objc_class *v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  objc_class *v48;
  int v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v58;
  const char *ClassName;
  const char *Name;
  void *v61;
  uint64_t v62;
  NSObject *v63;
  objc_class *v64;
  int v65;
  const char *v66;
  const char *v67;
  const char *v68;
  void *v69;
  void (*v70)(uint64_t, const char *, ...);
  objc_class *v71;
  uint64_t v72;
  const char *v73;
  const char *v74;
  void *v75;
  uint64_t v76;
  objc_class *v77;
  int v78;
  const char *v79;
  const char *v80;
  void *v81;
  void (*v82)(uint64_t, const char *, ...);
  objc_class *v83;
  uint64_t v84;
  const char *v85;
  const char *v86;
  void *v87;
  uint64_t v88;
  NSObject *v89;
  objc_class *v90;
  int v91;
  const char *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  void *context;
  id obj;
  uint64_t v99;
  char v101;
  int v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _DWORD v107[2];
  __int16 v108;
  const char *v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  int v113;
  __int16 v114;
  void *v115;
  uint8_t buf[128];

  obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  v1 = kdebug_trace(724566132, 0, 0, 0, 0);
  v2 = NFSharedSignpostLog(v1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "VAS_START", "", buf, 2u);
  }

  v4 = *(_QWORD *)(a1 + 32);
  v102 = *(unsigned __int8 *)(a1 + 48);
  v5 = *(id *)(a1 + 40);
  if (!v4)
    goto LABEL_92;
  context = objc_autoreleasePoolPush();
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v101 = 0;
  v10 = 0;
  v99 = v4;
  while (!*(_BYTE *)(v4 + 24))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "readAPDU"));

    v9 = v11;
    if (!v11 || *(_BYTE *)(v4 + 24))
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass((id)v4);
        if (class_isMetaClass(Class))
          v58 = 43;
        else
          v58 = 45;
        ClassName = object_getClassName((id)v4);
        Name = sel_getName("runHostCardEmulation:paymentEnabled:");
        Logger(6, "%c[%{public}s %{public}s]:%i no response or cancelled, abort", v58, ClassName, Name, 170);
      }
      v61 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v62 = NFSharedLogGetLogger(v61);
      v63 = objc_claimAutoreleasedReturnValue(v62);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        v64 = object_getClass((id)v4);
        if (class_isMetaClass(v64))
          v65 = 43;
        else
          v65 = 45;
        v66 = object_getClassName((id)v4);
        v67 = sel_getName("runHostCardEmulation:paymentEnabled:");
        v107[0] = 67109890;
        v107[1] = v65;
        v108 = 2082;
        v109 = v66;
        v110 = 2082;
        v111 = v67;
        v112 = 1024;
        v113 = 170;
        v68 = "%c[%{public}s %{public}s]:%i no response or cancelled, abort";
LABEL_75:
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, v68, (uint8_t *)v107, 0x22u);
        goto LABEL_76;
      }
      goto LABEL_76;
    }
    sub_10003A5AC(v4, v11, CFSTR("[<RX]"));
    v12 = objc_msgSend(objc_alloc((Class)NFCommandAPDU), "initWithData:uniformLengthCheck:", v11, 0);

    v7 = v12;
    if (objc_msgSend(v12, "instruction") == 164 && objc_msgSend(v12, "p1") == 4)
    {
      objc_msgSend(v10, "handleDeselect");

      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v13 = *(id *)(v4 + 8);
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v103, buf, 16);
      if (v14)
      {
        v15 = *(_QWORD *)v104;
LABEL_12:
        v16 = v5;
        v17 = 0;
        while (1)
        {
          if (*(_QWORD *)v104 != v15)
            objc_enumerationMutation(v13);
          v18 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * v17);
          if ((objc_opt_respondsToSelector(v18, "supportPayment:") & 1) != 0)
            objc_msgSend(v18, "supportPayment:", v102 != 0);
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "handleSelect:", v7));
          if (v6)
            break;
          if (v14 == (id)++v17)
          {
            v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v103, buf, 16);
            v5 = v16;
            if (v14)
              goto LABEL_12;
            goto LABEL_20;
          }
        }
        v10 = v18;

        v5 = v16;
        v4 = v99;
        v101 = 1;
        if (!v10)
          goto LABEL_38;
        v35 = v8;
      }
      else
      {
LABEL_20:

        v4 = v99;
        v6 = 0;
LABEL_38:
        v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v39);
        if (v40)
        {
          v41 = object_getClass((id)v4);
          if (class_isMetaClass(v41))
            v42 = 43;
          else
            v42 = 45;
          v43 = object_getClassName((id)v4);
          v44 = sel_getName("runHostCardEmulation:paymentEnabled:");
          v40(6, "%c[%{public}s %{public}s]:%i Failed to find suitable applet", v42, v43, v44, 198);
        }
        v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v46 = NFSharedLogGetLogger(v45);
        v47 = objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          v48 = object_getClass((id)v4);
          if (class_isMetaClass(v48))
            v49 = 43;
          else
            v49 = 45;
          v50 = object_getClassName((id)v4);
          v51 = sel_getName("runHostCardEmulation:paymentEnabled:");
          v107[0] = 67109890;
          v107[1] = v49;
          v108 = 2082;
          v109 = v50;
          v110 = 2082;
          v111 = v51;
          v112 = 1024;
          v113 = 198;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Failed to find suitable applet", (uint8_t *)v107, 0x22u);
        }

        LOWORD(v107[0]) = -32150;
        v35 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v107, 2);

        v52 = objc_claimAutoreleasedReturnValue(+[NFResponseAPDU responseWithData:](NFResponseAPDU, "responseWithData:", v35));
        v10 = 0;
        v6 = (void *)v52;
      }
      if (!*(_BYTE *)(v4 + 24))
      {
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "data"));
        objc_msgSend(v5, "sendAPDU:", v53);

        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "data"));
        sub_10003A5AC(v4, v54, CFSTR("[>TX]"));

      }
    }
    else
    {
      if (v10)
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "handleAPDU:", v12));

        if (!*(_BYTE *)(v4 + 24))
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "data"));
          objc_msgSend(v5, "sendAPDU:", v20);

          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "data"));
          sub_10003A5AC(v4, v21, CFSTR("[>TX]"));

        }
        v6 = v19;
        goto LABEL_52;
      }
      v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v22);
      if (v23)
      {
        v24 = object_getClass((id)v4);
        if (class_isMetaClass(v24))
          v25 = 43;
        else
          v25 = 45;
        v26 = object_getClassName((id)v4);
        v27 = sel_getName("runHostCardEmulation:paymentEnabled:");
        v23(6, "%c[%{public}s %{public}s]:%i Invalid command: %{public}@", v25, v26, v27, 216, v9);
      }
      v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v29 = NFSharedLogGetLogger(v28);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        v31 = object_getClass((id)v4);
        if (class_isMetaClass(v31))
          v32 = 43;
        else
          v32 = 45;
        v33 = object_getClassName((id)v4);
        v34 = sel_getName("runHostCardEmulation:paymentEnabled:");
        v107[0] = 67110146;
        v107[1] = v32;
        v108 = 2082;
        v109 = v33;
        v110 = 2082;
        v111 = v34;
        v112 = 1024;
        v113 = 216;
        v114 = 2114;
        v115 = v9;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Invalid command: %{public}@", (uint8_t *)v107, 0x2Cu);
      }

      strcpy((char *)v107, "i");
      v35 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v107, 2);

      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NFResponseAPDU responseWithData:](NFResponseAPDU, "responseWithData:", v35));
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "data"));
      objc_msgSend(v5, "sendAPDU:", v37);

      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "data"));
      sub_10003A5AC(v4, v38, CFSTR("[>TX]"));

      v10 = 0;
      v6 = v36;
    }
    v8 = v35;
LABEL_52:
    if ((v101 & 1) != 0 && !v10)
      goto LABEL_77;
  }
  v69 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v70 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v69);
  if (v70)
  {
    v71 = object_getClass((id)v4);
    if (class_isMetaClass(v71))
      v72 = 43;
    else
      v72 = 45;
    v73 = object_getClassName((id)v4);
    v74 = sel_getName("runHostCardEmulation:paymentEnabled:");
    v70(6, "%c[%{public}s %{public}s]:%i cancelled", v72, v73, v74, 162);
  }
  v75 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v76 = NFSharedLogGetLogger(v75);
  v63 = objc_claimAutoreleasedReturnValue(v76);
  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
  {
    v77 = object_getClass((id)v4);
    if (class_isMetaClass(v77))
      v78 = 43;
    else
      v78 = 45;
    v79 = object_getClassName((id)v4);
    v80 = sel_getName("runHostCardEmulation:paymentEnabled:");
    v107[0] = 67109890;
    v107[1] = v78;
    v108 = 2082;
    v109 = v79;
    v110 = 2082;
    v111 = v80;
    v112 = 1024;
    v113 = 162;
    v68 = "%c[%{public}s %{public}s]:%i cancelled";
    goto LABEL_75;
  }
LABEL_76:

LABEL_77:
  if (*(_BYTE *)(v4 + 24))
  {
    v81 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v82 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v81);
    if (v82)
    {
      v83 = object_getClass((id)v4);
      if (class_isMetaClass(v83))
        v84 = 43;
      else
        v84 = 45;
      v85 = object_getClassName((id)v4);
      v86 = sel_getName("runHostCardEmulation:paymentEnabled:");
      v82(6, "%c[%{public}s %{public}s]:%i activity cancelled", v84, v85, v86, 230);
    }
    v87 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v88 = NFSharedLogGetLogger(v87);
    v89 = objc_claimAutoreleasedReturnValue(v88);
    if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
    {
      v90 = object_getClass((id)v4);
      if (class_isMetaClass(v90))
        v91 = 43;
      else
        v91 = 45;
      v92 = object_getClassName((id)v4);
      v93 = sel_getName("runHostCardEmulation:paymentEnabled:");
      v107[0] = 67109890;
      v107[1] = v91;
      v108 = 2082;
      v109 = v92;
      v110 = 2082;
      v111 = v93;
      v112 = 1024;
      v113 = 230;
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i activity cancelled", (uint8_t *)v107, 0x22u);
    }

  }
  if (v10)
    objc_msgSend(v10, "handleDeselect");

  objc_autoreleasePoolPop(context);
LABEL_92:

  v94 = kdebug_trace(724566136, 0, 0, 0, 0);
  v95 = NFSharedSignpostLog(v94);
  v96 = objc_claimAutoreleasedReturnValue(v95);
  if (os_signpost_enabled(v96))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v96, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "VAS_END", "", buf, 2u);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 25) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
  objc_sync_exit(obj);

}

void sub_10003B854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

__CFString *sub_10003BE0C(__CFString *result)
{
  unsigned int v1;

  if (result)
  {
    v1 = BYTE5(result[4].length) - 1;
    if (v1 > 5)
      return 0;
    else
      return off_1002E5CF0[(char)v1];
  }
  return result;
}

void sub_10003BE3C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *v26;
  _BOOL4 v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  const char *v35;
  const char *v36;
  id v37;
  void *v38;
  id v39;
  int v40;
  void *v41;
  uint64_t v42;
  void (*v43)(uint64_t, const char *, ...);
  objc_class *v44;
  _BOOL4 v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  objc_class *v51;
  int v52;
  const char *v53;
  const char *v54;
  void *v55;
  uint64_t v56;
  void (*v57)(uint64_t, const char *, ...);
  objc_class *v58;
  _BOOL4 v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  objc_class *v65;
  int v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void (*v74)(uint64_t, const char *, ...);
  objc_class *v75;
  _BOOL4 v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  NSObject *v80;
  objc_class *v81;
  int v82;
  const char *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  const char *v88;
  id v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void (*v93)(uint64_t, const char *, ...);
  objc_class *v94;
  _BOOL4 v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  NSObject *v99;
  objc_class *v100;
  int v101;
  const char *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void (*v109)(uint64_t, const char *, ...);
  objc_class *v110;
  _BOOL4 v111;
  const char *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  NSObject *v116;
  objc_class *v117;
  int v118;
  const char *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *ClassName;
  const char *v125;
  const char *v126;
  const char *Name;
  const char *v128;
  const char *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  const char *v133;
  uint8_t buf[4];
  int v135;
  __int16 v136;
  const char *v137;
  __int16 v138;
  const char *v139;
  __int16 v140;
  int v141;
  __int16 v142;
  void *v143;

  if (a1)
  {
    v2 = NFSharedSignpostLog(a1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "updateExpressConfigs", "", buf, 2u);
    }

    v4 = sub_1001F84C8(*(void **)(a1 + 16), CFSTR("Express config"), 1uLL);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
      v6 = (void *)v5;
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v9 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("updateExpressConfigs");
        v12 = 45;
        if (isMetaClass)
          v12 = 43;
        v9(3, "%c[%{public}s %{public}s]:%i Failed to open session : %@", v12, ClassName, Name, 170, v6);
      }
      v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v14 = NFSharedLogGetLogger(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = object_getClass((id)a1);
        if (class_isMetaClass(v16))
          v17 = 43;
        else
          v17 = 45;
        v18 = object_getClassName((id)a1);
        v19 = sel_getName("updateExpressConfigs");
        *(_DWORD *)buf = 67110146;
        v135 = v17;
        v136 = 2082;
        v137 = v18;
        v138 = 2082;
        v139 = v19;
        v140 = 1024;
        v141 = 170;
        v142 = 2112;
        v143 = v6;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session : %@", buf, 0x2Cu);
      }

      v21 = NFSharedSignpostLog(v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_signpost_enabled(v22))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "updateExpressConfigs", "failed to open session", buf, 2u);
      }
      goto LABEL_101;
    }
    v22 = objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v24 = NFLogGetLogger(v23);
    if (v24)
    {
      v25 = (void (*)(uint64_t, const char *, ...))v24;
      v26 = object_getClass((id)a1);
      v27 = class_isMetaClass(v26);
      v28 = object_getClassName((id)a1);
      v128 = sel_getName("updateExpressConfigs");
      v29 = 45;
      if (v27)
        v29 = 43;
      v25(6, "%c[%{public}s %{public}s]:%i Creating eSE config", v29, v28, v128, 177);
    }
    v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v31 = NFSharedLogGetLogger(v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33 = object_getClass((id)a1);
      if (class_isMetaClass(v33))
        v34 = 43;
      else
        v34 = 45;
      v35 = object_getClassName((id)a1);
      v36 = sel_getName("updateExpressConfigs");
      *(_DWORD *)buf = 67109890;
      v135 = v34;
      v136 = 2082;
      v137 = v35;
      v138 = 2082;
      v139 = v36;
      v140 = 1024;
      v141 = 177;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Creating eSE config", buf, 0x22u);
    }

    v37 = -[NFExpressConfig initFromStorageWithDriverWrapper:]([NFExpressConfigESE alloc], "initFromStorageWithDriverWrapper:", *(_QWORD *)(a1 + 16));
    v38 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v37;

    v39 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.stockholm"));
    v40 = objc_msgSend(v39, "BOOLForKey:", CFSTR("ecp2ExpressTestMode"));
    if ((v40 & 1) != 0)
    {
      v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v42 = NFLogGetLogger(v41);
      if (v42)
      {
        v43 = (void (*)(uint64_t, const char *, ...))v42;
        v44 = object_getClass((id)a1);
        v45 = class_isMetaClass(v44);
        v46 = object_getClassName((id)a1);
        v129 = sel_getName("updateExpressConfigs");
        v47 = 45;
        if (v45)
          v47 = 43;
        v43(6, "%c[%{public}s %{public}s]:%i ECP2 FTA test mode!", v47, v46, v129, 185);
      }
      v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v49 = NFSharedLogGetLogger(v48);
      v50 = objc_claimAutoreleasedReturnValue(v49);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        v51 = object_getClass((id)a1);
        if (class_isMetaClass(v51))
          v52 = 43;
        else
          v52 = 45;
        v53 = object_getClassName((id)a1);
        v54 = sel_getName("updateExpressConfigs");
        *(_DWORD *)buf = 67109890;
        v135 = v52;
        v136 = 2082;
        v137 = v53;
        v138 = 2082;
        v139 = v54;
        v140 = 1024;
        v141 = 185;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ECP2 FTA test mode!", buf, 0x22u);
      }

      if (!*(_BYTE *)(a1 + 170))
        goto LABEL_48;
    }
    else if (!*(_BYTE *)(a1 + 170))
    {
      goto LABEL_78;
    }
    v55 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v56 = NFLogGetLogger(v55);
    if (v56)
    {
      v57 = (void (*)(uint64_t, const char *, ...))v56;
      v58 = object_getClass((id)a1);
      v59 = class_isMetaClass(v58);
      v60 = object_getClassName((id)a1);
      v130 = sel_getName("updateExpressConfigs");
      v61 = 45;
      if (v59)
        v61 = 43;
      v57(6, "%c[%{public}s %{public}s]:%i Factory test mode", v61, v60, v130, 188);
    }
    v62 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v63 = NFSharedLogGetLogger(v62);
    v64 = objc_claimAutoreleasedReturnValue(v63);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      v65 = object_getClass((id)a1);
      if (class_isMetaClass(v65))
        v66 = 43;
      else
        v66 = 45;
      v67 = object_getClassName((id)a1);
      v68 = sel_getName("updateExpressConfigs");
      *(_DWORD *)buf = 67109890;
      v135 = v66;
      v136 = 2082;
      v137 = v67;
      v138 = 2082;
      v139 = v68;
      v140 = 1024;
      v141 = 188;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Factory test mode", buf, 0x22u);
    }

LABEL_48:
    v69 = *(_QWORD *)(a1 + 40);
    if (v69)
    {
      *(_BYTE *)(v69 + 88) = 1;
      v70 = *(void **)(a1 + 40);
    }
    else
    {
      v70 = 0;
    }
    v71 = objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "reconfigureWithArray:restoreAuthorization:updateStorage:", &__NSArray0__struct, 0, 1));
    if (v71)
    {
      v6 = (void *)v71;
      v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v73 = NFLogGetLogger(v72);
      if (v73)
      {
        v74 = (void (*)(uint64_t, const char *, ...))v73;
        v75 = object_getClass((id)a1);
        v76 = class_isMetaClass(v75);
        v125 = object_getClassName((id)a1);
        v131 = sel_getName("updateExpressConfigs");
        v77 = 45;
        if (v76)
          v77 = 43;
        v74(3, "%c[%{public}s %{public}s]:%i Failed to clear express applets on eSE: %{public}@", v77, v125, v131, 195, v6);
      }
      v78 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v79 = NFSharedLogGetLogger(v78);
      v80 = objc_claimAutoreleasedReturnValue(v79);
      if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
      {
        v81 = object_getClass((id)a1);
        if (class_isMetaClass(v81))
          v82 = 43;
        else
          v82 = 45;
        v83 = object_getClassName((id)a1);
        v84 = sel_getName("updateExpressConfigs");
        *(_DWORD *)buf = 67110146;
        v135 = v82;
        v136 = 2082;
        v137 = v83;
        v138 = 2082;
        v139 = v84;
        v140 = 1024;
        v141 = 195;
        v142 = 2114;
        v143 = v6;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to clear express applets on eSE: %{public}@", buf, 0x2Cu);
      }

      v86 = NFSharedSignpostLog(v85);
      v87 = objc_claimAutoreleasedReturnValue(v86);
      if (!os_signpost_enabled(v87))
        goto LABEL_100;
      *(_WORD *)buf = 0;
      v88 = "failed to remove old config";
LABEL_76:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v87, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "updateExpressConfigs", v88, buf, 2u);
LABEL_100:

LABEL_101:
      return;
    }
    v89 = sub_100025280(*(id **)(a1 + 40), v40);
    v90 = objc_claimAutoreleasedReturnValue(v89);
    if (v90)
    {
      v6 = (void *)v90;
      v91 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v92 = NFLogGetLogger(v91);
      if (v92)
      {
        v93 = (void (*)(uint64_t, const char *, ...))v92;
        v94 = object_getClass((id)a1);
        v95 = class_isMetaClass(v94);
        v126 = object_getClassName((id)a1);
        v132 = sel_getName("updateExpressConfigs");
        v96 = 45;
        if (v95)
          v96 = 43;
        v93(3, "%c[%{public}s %{public}s]:%i Failed to set factory test config: %{public}@", v96, v126, v132, 202, v6);
      }
      v97 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v98 = NFSharedLogGetLogger(v97);
      v99 = objc_claimAutoreleasedReturnValue(v98);
      if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
      {
        v100 = object_getClass((id)a1);
        if (class_isMetaClass(v100))
          v101 = 43;
        else
          v101 = 45;
        v102 = object_getClassName((id)a1);
        v103 = sel_getName("updateExpressConfigs");
        *(_DWORD *)buf = 67110146;
        v135 = v101;
        v136 = 2082;
        v137 = v102;
        v138 = 2082;
        v139 = v103;
        v140 = 1024;
        v141 = 202;
        v142 = 2114;
        v143 = v6;
        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set factory test config: %{public}@", buf, 0x2Cu);
      }

      v105 = *(_QWORD *)(a1 + 40);
      if (v105)
        *(_BYTE *)(v105 + 88) = 0;
      v106 = NFSharedSignpostLog(v104);
      v87 = objc_claimAutoreleasedReturnValue(v106);
      if (!os_signpost_enabled(v87))
        goto LABEL_100;
      *(_WORD *)buf = 0;
      v88 = "failed to set factory mode";
      goto LABEL_76;
    }
    *(_WORD *)(a1 + 170) = 257;
LABEL_78:
    sub_10003C984(a1);
    sub_10003CF20((_DWORD *)a1);
    if (*(_BYTE *)(a1 + 170))
    {
      v107 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v108 = NFLogGetLogger(v107);
      if (v108)
      {
        v109 = (void (*)(uint64_t, const char *, ...))v108;
        v110 = object_getClass((id)a1);
        v111 = class_isMetaClass(v110);
        v112 = object_getClassName((id)a1);
        v133 = sel_getName("updateExpressConfigs");
        v113 = 45;
        if (v111)
          v113 = 43;
        v109(6, "%c[%{public}s %{public}s]:%i Enabling NFC express for LPM factory test mode", v113, v112, v133, 215);
      }
      v114 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v115 = NFSharedLogGetLogger(v114);
      v116 = objc_claimAutoreleasedReturnValue(v115);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
      {
        v117 = object_getClass((id)a1);
        if (class_isMetaClass(v117))
          v118 = 43;
        else
          v118 = 45;
        v119 = object_getClassName((id)a1);
        v120 = sel_getName("updateExpressConfigs");
        *(_DWORD *)buf = 67109890;
        v135 = v118;
        v136 = 2082;
        v137 = v119;
        v138 = 2082;
        v139 = v120;
        v140 = 1024;
        v141 = 215;
        _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Enabling NFC express for LPM factory test mode", buf, 0x22u);
      }

      if (*(_BYTE *)(a1 + 170))
      {
        if (*(_BYTE *)(a1 + 171))
          v121 = 16;
        else
          v121 = 4;
      }
      else
      {
        v121 = *(unsigned int *)(a1 + 152);
      }
      sub_1001FEC70(*(void **)(a1 + 16), v121, 1);
      sub_100197C58(*(void **)(a1 + 16), 1);
    }
    if (*(_QWORD *)(a1 + 136) == 1 && (-[NSObject hasSession](v22, "hasSession") & 1) == 0)
      sub_10003D1FC(a1);
    sub_1001FABB8(*(void **)(a1 + 16), CFSTR("Express config"));
    v123 = NFSharedSignpostLog(v122);
    v87 = objc_claimAutoreleasedReturnValue(v123);
    if (os_signpost_enabled(v87))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v87, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "updateExpressConfigs", "", buf, 2u);
    }
    v6 = 0;
    goto LABEL_100;
  }
}

void sub_10003C984(uint64_t a1)
{
  NSMutableDictionary *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BOOL4 v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *v12;
  _BOOL4 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *specific;
  uint64_t Logger;
  void (*v26)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  objc_class *v32;
  int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void (*v37)(uint64_t, const char *, ...);
  objc_class *v38;
  _BOOL4 v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  objc_class *v43;
  int v44;
  NSObject *v45;
  os_log_type_t v46;
  uint32_t v47;
  objc_class *v48;
  _BOOL4 v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  objc_class *v53;
  int v54;
  const char *v55;
  const char *ClassName;
  const char *v57;
  const char *v58;
  const char *v59;
  const char *Name;
  const char *v61;
  const char *v62;
  uint8_t buf[4];
  int v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  int v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;

  v2 = objc_opt_new(NSMutableDictionary);
  objc_msgSend(*(id *)(a1 + 40), "updateAppletCountOnMap:", v2);
  objc_storeStrong((id *)(a1 + 48), v2);
  v3 = *(_QWORD **)(a1 + 40);
  if (v3)
    v3 = (_QWORD *)v3[2];
  v4 = v3;
  v5 = objc_msgSend(v4, "count") != 0;

  v6 = objc_msgSend(*(id *)(a1 + 48), "count") != 0;
  if (notify_is_valid_token(*(_DWORD *)(a1 + 164))
    || (v7 = notify_register_check("com.apple.stockholm.express.state", (int *)(a1 + 164)), !(_DWORD)v7))
  {
    v21 = v5 | (2 * v6);
    v22 = notify_set_state(*(_DWORD *)(a1 + 164), v21);
    if ((_DWORD)v22)
    {
      v23 = v22;
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v26 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("_updateAppletCount");
        v29 = 45;
        if (isMetaClass)
          v29 = 43;
        v26(3, "%c[%{public}s %{public}s]:%i Failed to notify set state : %d", v29, ClassName, Name, 403, v23);
      }
      v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v31 = NFSharedLogGetLogger(v30);
      v17 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v32 = object_getClass((id)a1);
        if (class_isMetaClass(v32))
          v33 = 43;
        else
          v33 = 45;
        *(_DWORD *)buf = 67110146;
        v64 = v33;
        v65 = 2082;
        v66 = object_getClassName((id)a1);
        v67 = 2082;
        v68 = sel_getName("_updateAppletCount");
        v69 = 1024;
        v70 = 403;
        v71 = 1024;
        LODWORD(v72) = v23;
        v20 = "%c[%{public}s %{public}s]:%i Failed to notify set state : %d";
        goto LABEL_34;
      }
    }
    else
    {
      v34 = notify_post("com.apple.stockholm.express.state");
      v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v36 = NFLogGetLogger(v35);
      v37 = (void (*)(uint64_t, const char *, ...))v36;
      if ((_DWORD)v34)
      {
        if (v36)
        {
          v38 = object_getClass((id)a1);
          v39 = class_isMetaClass(v38);
          v57 = object_getClassName((id)a1);
          v61 = sel_getName("_updateAppletCount");
          v40 = 45;
          if (v39)
            v40 = 43;
          v37(3, "%c[%{public}s %{public}s]:%i Failed to notify : %d", v40, v57, v61, 396, v34);
        }
        v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v42 = NFSharedLogGetLogger(v41);
        v17 = objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v43 = object_getClass((id)a1);
          if (class_isMetaClass(v43))
            v44 = 43;
          else
            v44 = 45;
          *(_DWORD *)buf = 67110146;
          v64 = v44;
          v65 = 2082;
          v66 = object_getClassName((id)a1);
          v67 = 2082;
          v68 = sel_getName("_updateAppletCount");
          v69 = 1024;
          v70 = 396;
          v71 = 1024;
          LODWORD(v72) = v34;
          v20 = "%c[%{public}s %{public}s]:%i Failed to notify : %d";
          goto LABEL_34;
        }
      }
      else
      {
        if (v36)
        {
          v48 = object_getClass((id)a1);
          v49 = class_isMetaClass(v48);
          v58 = object_getClassName((id)a1);
          v62 = sel_getName("_updateAppletCount");
          v50 = 43;
          if (!v49)
            v50 = 45;
          v37(6, "%c[%{public}s %{public}s]:%i posted %s expressState: 0x%x; status: %u",
            v50,
            v58,
            v62,
            399,
            "com.apple.stockholm.express.state",
            v21,
            0);
        }
        v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v52 = NFSharedLogGetLogger(v51);
        v17 = objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v53 = object_getClass((id)a1);
          if (class_isMetaClass(v53))
            v54 = 43;
          else
            v54 = 45;
          *(_DWORD *)buf = 67110658;
          v64 = v54;
          v65 = 2082;
          v66 = object_getClassName((id)a1);
          v67 = 2082;
          v68 = sel_getName("_updateAppletCount");
          v69 = 1024;
          v70 = 399;
          v71 = 2080;
          v72 = "com.apple.stockholm.express.state";
          v73 = 1024;
          v74 = v21;
          v75 = 1024;
          v76 = 0;
          v20 = "%c[%{public}s %{public}s]:%i posted %s expressState: 0x%x; status: %u";
          v45 = v17;
          v46 = OS_LOG_TYPE_DEFAULT;
          v47 = 56;
          goto LABEL_35;
        }
      }
    }
  }
  else
  {
    v8 = v7;
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFLogGetLogger(v9);
    if (v10)
    {
      v11 = (void (*)(uint64_t, const char *, ...))v10;
      v12 = object_getClass((id)a1);
      v13 = class_isMetaClass(v12);
      v55 = object_getClassName((id)a1);
      v59 = sel_getName("_updateAppletCount");
      v14 = 45;
      if (v13)
        v14 = 43;
      v11(3, "%c[%{public}s %{public}s]:%i Failed to notify register check : %d", v14, v55, v59, 407, v8);
    }
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = object_getClass((id)a1);
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      *(_DWORD *)buf = 67110146;
      v64 = v19;
      v65 = 2082;
      v66 = object_getClassName((id)a1);
      v67 = 2082;
      v68 = sel_getName("_updateAppletCount");
      v69 = 1024;
      v70 = 407;
      v71 = 1024;
      LODWORD(v72) = v8;
      v20 = "%c[%{public}s %{public}s]:%i Failed to notify register check : %d";
LABEL_34:
      v45 = v17;
      v46 = OS_LOG_TYPE_ERROR;
      v47 = 40;
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v45, v46, v20, buf, v47);
    }
  }

  sub_10003E234(a1);
}

void sub_10003CF20(_DWORD *val)
{
  id inited;
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;
  id location;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;

  if (val)
  {
    val[40] = 0;
    *((_BYTE *)val + 157) = 0;
    inited = objc_initWeak(&location, val);
    if (!*((_QWORD *)val + 12))
    {
      v3 = objc_alloc((Class)NFTimer);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_10003D6F8;
      v19[3] = &unk_1002E5C08;
      objc_copyWeak(&v20, &location);
      v4 = objc_msgSend(v3, "initWithCallback:queue:", v19, 0);
      v5 = (void *)*((_QWORD *)val + 12);
      *((_QWORD *)val + 12) = v4;

      objc_destroyWeak(&v20);
    }
    if (!*((_QWORD *)val + 11))
    {
      *((_QWORD *)val + 16) = 0x4056800000000000;
      if (NFIsInternalBuild(inited))
      {
        v6 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.stockholm"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("expressModeMaxTimeout")));

        if (v7)
        {
          *((double *)val + 16) = (double)(uint64_t)objc_msgSend(v6, "integerForKey:", CFSTR("expressModeMaxTimeout"));
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
          if (Logger)
            Logger(5, "%s:%i Overriding maximum express mode timeout to %f", "-[NFExpressModeManager initExpressTransactionsStates]", 256, *((_QWORD *)val + 16));
          v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v11 = NFSharedLogGetLogger(v10);
          v12 = objc_claimAutoreleasedReturnValue(v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            v13 = *((_QWORD *)val + 16);
            *(_DWORD *)buf = 136446722;
            v23 = "-[NFExpressModeManager initExpressTransactionsStates]";
            v24 = 1024;
            v25 = 256;
            v26 = 2048;
            v27 = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Overriding maximum express mode timeout to %f", buf, 0x1Cu);
          }

        }
      }
      v14 = objc_alloc((Class)NFTimer);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10003D888;
      v17[3] = &unk_1002E5C08;
      objc_copyWeak(&v18, &location);
      v15 = objc_msgSend(v14, "initWithCallback:queue:", v17, 0);
      v16 = (void *)*((_QWORD *)val + 11);
      *((_QWORD *)val + 11) = v15;

      objc_destroyWeak(&v18);
    }
    objc_destroyWeak(&location);
  }
}

void sub_10003D1B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 88));
  _Unwind_Resume(a1);
}

BOOL sub_10003D1FC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _BOOL8 v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  _BOOL4 v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  int v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  NSObject *v45;
  void *v46;
  const char *v48;
  const char *Name;
  const char *v50;
  char v51;
  uint8_t buf[4];
  int v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  void *v61;

  if (!a1)
    return 0;
  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EXPRESS_ACTIVATE_APPLETS", "in", buf, 2u);
  }

  if (*(_QWORD *)(a1 + 136) != 1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("activateConfig");
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v6(5, "%c[%{public}s %{public}s]:%i Express mode not enabled", v10, ClassName, Name, 1101);
    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = object_getClass((id)a1);
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName((id)a1);
      v17 = sel_getName("activateConfig");
      *(_DWORD *)buf = 67109890;
      v53 = v15;
      v54 = 2082;
      v55 = v16;
      v56 = 2082;
      v57 = v17;
      v58 = 1024;
      v59 = 1101;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode not enabled", buf, 0x22u);
    }

  }
  sub_10023B69C((uint64_t)NFSecureElementWrapper);
  v18 = *(_QWORD *)(a1 + 40);
  if (v18)
    v19 = vaddvq_s64(vaddq_s64(*(int64x2_t *)(v18 + 24), *(int64x2_t *)(v18 + 40)))
        + *(_QWORD *)(v18 + 56)
        + *(_QWORD *)(v18 + 64);
  else
    v19 = 0;
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    *(_BYTE *)(v20 + 220) = v19 != 0;
    v18 = *(_QWORD *)(a1 + 40);
  }
  v51 = 0;
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifier"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v18, "updateExpressConfigLimitedTo:andActivate:hasChanged:", v21, 1, &v51));

  v24 = v22 == 0;
  if (v22)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "localizedDescription"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("File: NFExpressModeManager, Function: activateApplets, Error: %@"), v25));
    sub_100187E84((uint64_t)NFBugCapture, CFSTR("Failed to update express config on eSE"), v26, 0);

    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFLogGetLogger(v27);
    if (v28)
    {
      v29 = (void (*)(uint64_t, const char *, ...))v28;
      v30 = object_getClass((id)a1);
      v31 = class_isMetaClass(v30);
      v48 = object_getClassName((id)a1);
      v50 = sel_getName("activateConfig");
      v32 = 45;
      if (v31)
        v32 = 43;
      v29(3, "%c[%{public}s %{public}s]:%i failed to activate express config on eSE: %{public}@", v32, v48, v50, 1119, v22);
    }
    v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v34 = NFSharedLogGetLogger(v33);
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = object_getClass((id)a1);
      if (class_isMetaClass(v36))
        v37 = 43;
      else
        v37 = 45;
      v38 = object_getClassName((id)a1);
      v39 = sel_getName("activateConfig");
      *(_DWORD *)buf = 67110146;
      v53 = v37;
      v54 = 2082;
      v55 = v38;
      v56 = 2082;
      v57 = v39;
      v58 = 1024;
      v59 = 1119;
      v60 = 2114;
      v61 = v22;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i failed to activate express config on eSE: %{public}@", buf, 0x2Cu);
    }

  }
  v40 = *(_QWORD *)(a1 + 16);
  if (v40)
    *(_BYTE *)(v40 + 220) = 0;
  if (v51)
  {
    sub_100043B30((uint64_t)"com.apple.stockholm.express.applets.updated");
    v42 = NFSharedSignpostLog(v41);
    v43 = objc_claimAutoreleasedReturnValue(v42);
    if (os_signpost_enabled(v43))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EXPRESS_MODE_APPLETS_UPDATED_NOTIFICATION", "com.apple.stockholm.express.applets.updated", buf, 2u);
    }

  }
  else if (v22)
  {
    sub_100043B30((uint64_t)"com.apple.stockholm.express.config.failure");
  }
  v44 = NFSharedSignpostLog(v23);
  v45 = objc_claimAutoreleasedReturnValue(v44);
  if (os_signpost_enabled(v45))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v45, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EXPRESS_ACTIVATE_APPLETS", "out", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 80), "stopTimer");
  v46 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;

  return v24;
}

void sub_10003D6F8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *WeakRetained;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  _BYTE state[24];
  void *v11;
  _QWORD *v12;
  const char *v13;

  v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.express.txn.typeFTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v2, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
  if (Logger)
    Logger(5, "%s:%i Express Mode timeout.", "-[NFExpressModeManager initExpressTransactionsStates]_block_invoke", 245);
  v6 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v7 = NFSharedLogGetLogger(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)state = 136446466;
    *(_QWORD *)&state[4] = "-[NFExpressModeManager initExpressTransactionsStates]_block_invoke";
    *(_WORD *)&state[12] = 1024;
    *(_DWORD *)&state[14] = 245;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Express Mode timeout.", state, 0x12u);
  }

  if (WeakRetained)
  {
    v9 = WeakRetained[15];
    *(_QWORD *)state = _NSConcreteStackBlock;
    *(_QWORD *)&state[8] = 3221225472;
    *(_QWORD *)&state[16] = sub_10004904C;
    v11 = &unk_1002E5C30;
    v12 = WeakRetained;
    v13 = "_handleExpressModeTimeout";
    dispatch_async(v9, state);
  }

}

void sub_10003D888(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v6;
  uint64_t v7;
  NSObject *v8;
  _BYTE state[18];

  v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.express.txn.exitTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v2, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
  if (Logger)
    Logger(5, "%s:%i Max express mode operation timeout", "-[NFExpressModeManager initExpressTransactionsStates]_block_invoke", 264);
  v6 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v7 = NFSharedLogGetLogger(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)state = 136446466;
    *(_QWORD *)&state[4] = "-[NFExpressModeManager initExpressTransactionsStates]_block_invoke";
    *(_WORD *)&state[12] = 1024;
    *(_DWORD *)&state[14] = 264;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Max express mode operation timeout", state, 0x12u);
  }

  sub_10003D9DC((uint64_t)WeakRetained, 1);
}

void sub_10003D9DC(uint64_t a1, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 120);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10004A3F0;
    v3[3] = &unk_1002E5BB8;
    v3[4] = a1;
    v4 = a2;
    dispatch_async(v2, v3);
  }
}

void sub_10003DA3C(_QWORD *a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    sub_10003DA78(a1);
    v2 = (void *)a1[12];
    a1[12] = 0;

    v3 = (void *)a1[11];
    a1[11] = 0;

  }
}

BOOL sub_10003DA78(void *a1)
{
  id *v2;
  id v3;

  if (a1)
  {
    v2 = a1;
    objc_sync_enter(v2);
    objc_msgSend(v2[12], "stopTimer");
    objc_msgSend(v2[11], "stopTimer");
    *((_DWORD *)v2 + 40) = 0;
    *((_BYTE *)v2 + 157) = 0;
    *((_WORD *)v2 + 86) = 0;
    v3 = v2[8];
    v2[8] = 0;

    objc_sync_exit(v2);
  }
  return a1 != 0;
}

void sub_10003DAE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10003DAF4(id a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  _BOOL4 v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  objc_class *v28;
  int v29;
  const char *v30;
  const char *v31;
  void *v32;
  uint64_t v33;
  void (*v34)(uint64_t, const char *, ...);
  objc_class *v35;
  _BOOL4 v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  objc_class *v41;
  int v42;
  const char *v43;
  const char *v44;
  const char *v45;
  void *v46;
  uint64_t v47;
  void (*v48)(uint64_t, const char *, ...);
  objc_class *v49;
  _BOOL4 v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  objc_class *v55;
  int v56;
  const char *v57;
  const char *v58;
  void *v59;
  void *v61;
  unsigned int v62;
  void *v63;
  BOOL v64;
  void *specific;
  uint64_t Logger;
  void (*v67)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  NSObject *v75;
  objc_class *v76;
  int v77;
  const char *v78;
  const char *v79;
  NSObject *v80;
  int v81;
  id v82;
  const char *v83;
  const char *v84;
  const char *v85;
  objc_super v86;
  uint8_t buf[4];
  int v88;
  __int16 v89;
  const char *v90;
  __int16 v91;
  const char *v92;
  __int16 v93;
  int v94;
  __int16 v95;
  NSObject *v96;

  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  if (a1)
  {
    v86.receiver = a1;
    v86.super_class = (Class)NFExpressModeManager;
    a1 = objc_msgSendSuper2(&v86, "init");
    if (a1)
    {
      if ((NF_isFeatureSupported(1) & 1) != 0)
      {
        if (v11 && v12 && v13)
        {
          objc_storeStrong((id *)a1 + 1, a2);
          objc_storeStrong((id *)a1 + 2, a3);
          objc_storeStrong((id *)a1 + 3, a4);
          objc_storeStrong((id *)a1 + 15, a5);
          v14 = *((_QWORD *)a1 + 2);
          if (v14)
            *(_QWORD *)(v14 + 264) = a1;
          objc_msgSend(*((id *)a1 + 3), "setDelegate:", a1);
          *((_DWORD *)a1 + 41) = -1;
          v15 = sub_1001F84C8(v11, CFSTR("Express init"), 1uLL);
          v16 = objc_claimAutoreleasedReturnValue(v15);
          if (!v16)
          {
            *((_QWORD *)a1 + 17) = 0;
            v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
            v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKey:", CFSTR("ExpressModeEnabled")));

            if (v61)
            {
              v62 = objc_msgSend(v59, "BOOLForKey:", CFSTR("ExpressModeEnabled"));
              objc_msgSend(v59, "removeObjectForKey:", CFSTR("ExpressModeEnabled"));
              *((_QWORD *)a1 + 17) = v62;
              objc_msgSend(v59, "setInteger:forKey:");
            }
            else
            {
              v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKey:", CFSTR("ExpressModeControlState")));

              if (v63)
                *((_QWORD *)a1 + 17) = objc_msgSend(v59, "integerForKey:", CFSTR("ExpressModeControlState"));
            }
            *((_BYTE *)a1 + 171) = objc_msgSend(v59, "BOOLForKey:", CFSTR("ecp2ExpressTestMode"));
            v64 = (objc_msgSend(v59, "BOOLForKey:", CFSTR("ExpressModeFactoryTest")) & 1) != 0
               || *((_BYTE *)a1 + 171) != 0;
            *((_BYTE *)a1 + 170) = v64;
            *((_QWORD *)a1 + 18) = 0;
            specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            Logger = NFLogGetLogger(specific);
            if (Logger)
            {
              v67 = (void (*)(uint64_t, const char *, ...))Logger;
              Class = object_getClass(a1);
              isMetaClass = class_isMetaClass(Class);
              ClassName = object_getClassName(a1);
              Name = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
              v72 = 45;
              if (isMetaClass)
                v72 = 43;
              v67(6, "%c[%{public}s %{public}s]:%i Enabled=%ld", v72, ClassName, Name, 345, *((_QWORD *)a1 + 17));
            }
            v73 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v74 = NFSharedLogGetLogger(v73);
            v75 = objc_claimAutoreleasedReturnValue(v74);
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
            {
              v76 = object_getClass(a1);
              if (class_isMetaClass(v76))
                v77 = 43;
              else
                v77 = 45;
              v78 = object_getClassName(a1);
              v79 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
              v80 = *((_QWORD *)a1 + 17);
              *(_DWORD *)buf = 67110146;
              v88 = v77;
              v89 = 2082;
              v90 = v78;
              v91 = 2082;
              v92 = v79;
              v93 = 1024;
              v94 = 345;
              v95 = 2048;
              v96 = v80;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Enabled=%ld", buf, 0x2Cu);
            }

            v81 = MKBDeviceUnlockedSinceBoot();
            if (*((_QWORD *)a1 + 17) == 1)
              *((_QWORD *)a1 + 17) = v81 == 1;
            if (v81 == 1)
              sub_10003BE3C((uint64_t)a1);
            sub_1001FABB8(v11, CFSTR("Express init"));
            v82 = objc_alloc_init((Class)NSMutableDictionary);
            v17 = *((_QWORD *)a1 + 14);
            *((_QWORD *)a1 + 14) = v82;
            goto LABEL_40;
          }
          v17 = v16;
          v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v19 = NFLogGetLogger(v18);
          if (v19)
          {
            v20 = (void (*)(uint64_t, const char *, ...))v19;
            v21 = object_getClass(a1);
            v22 = class_isMetaClass(v21);
            v23 = object_getClassName(a1);
            v83 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
            v24 = 45;
            if (v22)
              v24 = 43;
            v20(3, "%c[%{public}s %{public}s]:%i Failed to open session : %@", v24, v23, v83, 324, v17);
          }
          v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v26 = NFSharedLogGetLogger(v25);
          v27 = objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            v28 = object_getClass(a1);
            if (class_isMetaClass(v28))
              v29 = 43;
            else
              v29 = 45;
            v30 = object_getClassName(a1);
            v31 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
            *(_DWORD *)buf = 67110146;
            v88 = v29;
            v89 = 2082;
            v90 = v30;
            v91 = 2082;
            v92 = v31;
            v93 = 1024;
            v94 = 324;
            v95 = 2112;
            v96 = v17;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session : %@", buf, 0x2Cu);
          }

LABEL_39:
          v59 = a1;
          a1 = 0;
LABEL_40:

          goto LABEL_41;
        }
        v46 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v47 = NFLogGetLogger(v46);
        if (v47)
        {
          v48 = (void (*)(uint64_t, const char *, ...))v47;
          v49 = object_getClass(a1);
          v50 = class_isMetaClass(v49);
          v51 = object_getClassName(a1);
          v85 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
          v52 = 45;
          if (v50)
            v52 = 43;
          v48(3, "%c[%{public}s %{public}s]:%i incorrect arguments", v52, v51, v85, 308);
        }
        v53 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v54 = NFSharedLogGetLogger(v53);
        v17 = objc_claimAutoreleasedReturnValue(v54);
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          goto LABEL_39;
        v55 = object_getClass(a1);
        if (class_isMetaClass(v55))
          v56 = 43;
        else
          v56 = 45;
        v57 = object_getClassName(a1);
        v58 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
        *(_DWORD *)buf = 67109890;
        v88 = v56;
        v89 = 2082;
        v90 = v57;
        v91 = 2082;
        v92 = v58;
        v93 = 1024;
        v94 = 308;
        v45 = "%c[%{public}s %{public}s]:%i incorrect arguments";
      }
      else
      {
        v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v33 = NFLogGetLogger(v32);
        if (v33)
        {
          v34 = (void (*)(uint64_t, const char *, ...))v33;
          v35 = object_getClass(a1);
          v36 = class_isMetaClass(v35);
          v37 = object_getClassName(a1);
          v84 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
          v38 = 45;
          if (v36)
            v38 = 43;
          v34(3, "%c[%{public}s %{public}s]:%i Express is not supported", v38, v37, v84, 303);
        }
        v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v40 = NFSharedLogGetLogger(v39);
        v17 = objc_claimAutoreleasedReturnValue(v40);
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          goto LABEL_39;
        v41 = object_getClass(a1);
        if (class_isMetaClass(v41))
          v42 = 43;
        else
          v42 = 45;
        v43 = object_getClassName(a1);
        v44 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
        *(_DWORD *)buf = 67109890;
        v88 = v42;
        v89 = 2082;
        v90 = v43;
        v91 = 2082;
        v92 = v44;
        v93 = 1024;
        v94 = 303;
        v45 = "%c[%{public}s %{public}s]:%i Express is not supported";
      }
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v45, buf, 0x22u);
      goto LABEL_39;
    }
  }
LABEL_41:

  return a1;
}

void sub_10003E234(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void (*v17)(uint64_t, const char *, ...);
  objc_class *v18;
  _BOOL4 v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  objc_class *v26;
  int v27;
  const char *v28;
  const char *v29;
  int v30;
  const char *v31;
  void *v32;
  uint64_t v33;
  void (*v34)(uint64_t, const char *, ...);
  objc_class *v35;
  _BOOL4 v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  objc_class *v42;
  int v43;
  void *v44;
  int64x2_t *v45;
  uint64_t v46;
  int64x2_t v47;
  void *v48;
  uint64_t v49;
  void (*v50)(uint64_t, const char *, ...);
  objc_class *v51;
  _BOOL4 v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  objc_class *v57;
  int v58;
  NSObject *v59;
  uint32_t v60;
  void *v61;
  uint64_t v62;
  void (*v63)(uint64_t, const char *, ...);
  objc_class *v64;
  _BOOL4 v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  NSObject *v70;
  objc_class *v71;
  int v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void (*v76)(uint64_t, const char *, ...);
  objc_class *v77;
  _BOOL4 v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  objc_class *v84;
  int v85;
  const char *v86;
  const char *v87;
  int v88;
  void *v89;
  uint64_t v90;
  void (*v91)(uint64_t, const char *, ...);
  objc_class *v92;
  _BOOL4 v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  NSObject *v98;
  objc_class *v99;
  int v100;
  void *v101;
  void *v102;
  uint64_t v103;
  void (*v104)(uint64_t, const char *, ...);
  objc_class *v105;
  _BOOL4 v106;
  const char *v107;
  const char *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  objc_class *v112;
  int v113;
  const char *v114;
  const char *v115;
  int v116;
  void *v117;
  uint64_t v118;
  void (*v119)(uint64_t, const char *, ...);
  objc_class *v120;
  _BOOL4 v121;
  const char *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  NSObject *v126;
  objc_class *v127;
  int v128;
  void *v129;
  void *v130;
  uint64_t v131;
  void (*v132)(uint64_t, const char *, ...);
  objc_class *v133;
  _BOOL4 v134;
  const char *v135;
  const char *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  objc_class *v140;
  int v141;
  const char *v142;
  const char *v143;
  int v144;
  void *v145;
  uint64_t v146;
  void (*v147)(uint64_t, const char *, ...);
  objc_class *v148;
  _BOOL4 v149;
  const char *v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  NSObject *v154;
  objc_class *v155;
  int v156;
  void *v157;
  void *v158;
  uint64_t v159;
  void (*v160)(uint64_t, const char *, ...);
  objc_class *v161;
  _BOOL4 v162;
  const char *v163;
  const char *v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  objc_class *v168;
  int v169;
  const char *v170;
  const char *v171;
  int v172;
  void *v173;
  uint64_t v174;
  void (*v175)(uint64_t, const char *, ...);
  objc_class *v176;
  _BOOL4 v177;
  const char *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  NSObject *v182;
  objc_class *v183;
  int v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  void (*v188)(uint64_t, const char *, ...);
  objc_class *v189;
  _BOOL4 v190;
  const char *v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  NSObject *v195;
  objc_class *v196;
  int v197;
  const char *v198;
  const char *v199;
  void *v200;
  uint64_t v201;
  void (*v202)(uint64_t, const char *, ...);
  objc_class *v203;
  _BOOL4 v204;
  const char *v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  NSObject *v209;
  objc_class *v210;
  int v211;
  const char *v212;
  const char *v213;
  void *v214;
  uint64_t v215;
  void (*v216)(uint64_t, const char *, ...);
  objc_class *v217;
  _BOOL4 v218;
  const char *v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  NSObject *v223;
  objc_class *v224;
  int v225;
  const char *v226;
  const char *v227;
  void *v228;
  uint64_t v229;
  void (*v230)(uint64_t, const char *, ...);
  objc_class *v231;
  _BOOL4 v232;
  const char *v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  NSObject *v237;
  objc_class *v238;
  int v239;
  const char *v240;
  const char *v241;
  void *v242;
  uint64_t v243;
  void (*v244)(uint64_t, const char *, ...);
  objc_class *v245;
  _BOOL4 v246;
  const char *v247;
  const char *v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  objc_class *v252;
  int v253;
  const char *v254;
  const char *v255;
  int v256;
  const char *Name;
  const char *v258;
  const char *v259;
  const char *v260;
  const char *v261;
  const char *v262;
  const char *v263;
  const char *v264;
  const char *v265;
  const char *v266;
  const char *v267;
  const char *v268;
  uint8_t buf[4];
  int v270;
  __int16 v271;
  const char *v272;
  __int16 v273;
  const char *v274;
  __int16 v275;
  int v276;
  __int16 v277;
  int v278;

  if (*(_QWORD *)(a1 + 136) == 1)
  {
    switch(*(_BYTE *)(a1 + 156))
    {
      case 1:
      case 5:
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v4 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass((id)a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName((id)a1);
          Name = sel_getName("_updateExpressModeDriverConfiguration");
          v8 = 45;
          if (isMetaClass)
            v8 = 43;
          v4(6, "%c[%{public}s %{public}s]:%i Override transit express only", v8, ClassName, Name, 1567);
        }
        v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v10 = NFSharedLogGetLogger(v9);
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12 = object_getClass((id)a1);
          if (class_isMetaClass(v12))
            v13 = 43;
          else
            v13 = 45;
          *(_DWORD *)buf = 67109890;
          v270 = v13;
          v271 = 2082;
          v272 = object_getClassName((id)a1);
          v273 = 2082;
          v274 = sel_getName("_updateExpressModeDriverConfiguration");
          v275 = 1024;
          v276 = 1567;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Override transit express only", buf, 0x22u);
        }

        *(_DWORD *)(a1 + 152) = 1;
        v14 = *(void **)(a1 + 16);
        if (v14)
          sub_1001FEC70(v14, 1, 0);
        v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v16 = NFLogGetLogger(v15);
        if (v16)
        {
          v17 = (void (*)(uint64_t, const char *, ...))v16;
          v18 = object_getClass((id)a1);
          v19 = class_isMetaClass(v18);
          v20 = object_getClassName((id)a1);
          v21 = sel_getName("_updateExpressModeDriverConfiguration");
          v22 = 45;
          if (v19)
            v22 = 43;
          v17(6, "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x", v22, v20, v21, 1570, *(unsigned int *)(a1 + 152));
        }
        v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v24 = NFSharedLogGetLogger(v23);
        v25 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v26 = object_getClass((id)a1);
          if (class_isMetaClass(v26))
            v27 = 43;
          else
            v27 = 45;
          v28 = object_getClassName((id)a1);
          v29 = sel_getName("_updateExpressModeDriverConfiguration");
          v30 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)buf = 67110146;
          v270 = v27;
          v271 = 2082;
          v272 = v28;
          v273 = 2082;
          v274 = v29;
          v275 = 1024;
          v276 = 1570;
          v277 = 1024;
          v278 = v30;
          v31 = "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x";
          goto LABEL_191;
        }
        goto LABEL_193;
      case 2:
        v61 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v62 = NFLogGetLogger(v61);
        if (v62)
        {
          v63 = (void (*)(uint64_t, const char *, ...))v62;
          v64 = object_getClass((id)a1);
          v65 = class_isMetaClass(v64);
          v66 = object_getClassName((id)a1);
          v260 = sel_getName("_updateExpressModeDriverConfiguration");
          v67 = 45;
          if (v65)
            v67 = 43;
          v63(6, "%c[%{public}s %{public}s]:%i Override access express only", v67, v66, v260, 1575);
        }
        v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v69 = NFSharedLogGetLogger(v68);
        v70 = objc_claimAutoreleasedReturnValue(v69);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          v71 = object_getClass((id)a1);
          if (class_isMetaClass(v71))
            v72 = 43;
          else
            v72 = 45;
          *(_DWORD *)buf = 67109890;
          v270 = v72;
          v271 = 2082;
          v272 = object_getClassName((id)a1);
          v273 = 2082;
          v274 = sel_getName("_updateExpressModeDriverConfiguration");
          v275 = 1024;
          v276 = 1575;
          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Override access express only", buf, 0x22u);
        }

        *(_DWORD *)(a1 + 152) = 2;
        v73 = *(void **)(a1 + 16);
        if (v73)
          sub_1001FEC70(v73, 2, 0);
        v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v75 = NFLogGetLogger(v74);
        if (v75)
        {
          v76 = (void (*)(uint64_t, const char *, ...))v75;
          v77 = object_getClass((id)a1);
          v78 = class_isMetaClass(v77);
          v79 = object_getClassName((id)a1);
          v80 = sel_getName("_updateExpressModeDriverConfiguration");
          v81 = 45;
          if (v78)
            v81 = 43;
          v76(6, "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x", v81, v79, v80, 1578, *(unsigned int *)(a1 + 152));
        }
        v82 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v83 = NFSharedLogGetLogger(v82);
        v25 = objc_claimAutoreleasedReturnValue(v83);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v84 = object_getClass((id)a1);
          if (class_isMetaClass(v84))
            v85 = 43;
          else
            v85 = 45;
          v86 = object_getClassName((id)a1);
          v87 = sel_getName("_updateExpressModeDriverConfiguration");
          v88 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)buf = 67110146;
          v270 = v85;
          v271 = 2082;
          v272 = v86;
          v273 = 2082;
          v274 = v87;
          v275 = 1024;
          v276 = 1578;
          v277 = 1024;
          v278 = v88;
          v31 = "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x";
          goto LABEL_191;
        }
        goto LABEL_193;
      case 3:
        v89 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v90 = NFLogGetLogger(v89);
        if (v90)
        {
          v91 = (void (*)(uint64_t, const char *, ...))v90;
          v92 = object_getClass((id)a1);
          v93 = class_isMetaClass(v92);
          v94 = object_getClassName((id)a1);
          v261 = sel_getName("_updateExpressModeDriverConfiguration");
          v95 = 45;
          if (v93)
            v95 = 43;
          v91(6, "%c[%{public}s %{public}s]:%i Override Generic-A express only", v95, v94, v261, 1583);
        }
        v96 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v97 = NFSharedLogGetLogger(v96);
        v98 = objc_claimAutoreleasedReturnValue(v97);
        if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
        {
          v99 = object_getClass((id)a1);
          if (class_isMetaClass(v99))
            v100 = 43;
          else
            v100 = 45;
          *(_DWORD *)buf = 67109890;
          v270 = v100;
          v271 = 2082;
          v272 = object_getClassName((id)a1);
          v273 = 2082;
          v274 = sel_getName("_updateExpressModeDriverConfiguration");
          v275 = 1024;
          v276 = 1583;
          _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Override Generic-A express only", buf, 0x22u);
        }

        *(_DWORD *)(a1 + 152) = 4;
        v101 = *(void **)(a1 + 16);
        if (v101)
          sub_1001FEC70(v101, 4, 0);
        v102 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v103 = NFLogGetLogger(v102);
        if (v103)
        {
          v104 = (void (*)(uint64_t, const char *, ...))v103;
          v105 = object_getClass((id)a1);
          v106 = class_isMetaClass(v105);
          v107 = object_getClassName((id)a1);
          v108 = sel_getName("_updateExpressModeDriverConfiguration");
          v109 = 45;
          if (v106)
            v109 = 43;
          v104(6, "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x", v109, v107, v108, 1586, *(unsigned int *)(a1 + 152));
        }
        v110 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v111 = NFSharedLogGetLogger(v110);
        v25 = objc_claimAutoreleasedReturnValue(v111);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v112 = object_getClass((id)a1);
          if (class_isMetaClass(v112))
            v113 = 43;
          else
            v113 = 45;
          v114 = object_getClassName((id)a1);
          v115 = sel_getName("_updateExpressModeDriverConfiguration");
          v116 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)buf = 67110146;
          v270 = v113;
          v271 = 2082;
          v272 = v114;
          v273 = 2082;
          v274 = v115;
          v275 = 1024;
          v276 = 1586;
          v277 = 1024;
          v278 = v116;
          v31 = "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x";
          goto LABEL_191;
        }
        goto LABEL_193;
      case 4:
        v117 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v118 = NFLogGetLogger(v117);
        if (v118)
        {
          v119 = (void (*)(uint64_t, const char *, ...))v118;
          v120 = object_getClass((id)a1);
          v121 = class_isMetaClass(v120);
          v122 = object_getClassName((id)a1);
          v262 = sel_getName("_updateExpressModeDriverConfiguration");
          v123 = 45;
          if (v121)
            v123 = 43;
          v119(6, "%c[%{public}s %{public}s]:%i Override ECP2 express only", v123, v122, v262, 1599);
        }
        v124 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v125 = NFSharedLogGetLogger(v124);
        v126 = objc_claimAutoreleasedReturnValue(v125);
        if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
        {
          v127 = object_getClass((id)a1);
          if (class_isMetaClass(v127))
            v128 = 43;
          else
            v128 = 45;
          *(_DWORD *)buf = 67109890;
          v270 = v128;
          v271 = 2082;
          v272 = object_getClassName((id)a1);
          v273 = 2082;
          v274 = sel_getName("_updateExpressModeDriverConfiguration");
          v275 = 1024;
          v276 = 1599;
          _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Override ECP2 express only", buf, 0x22u);
        }

        *(_DWORD *)(a1 + 152) = 16;
        v129 = *(void **)(a1 + 16);
        if (v129)
          sub_1001FEC70(v129, 16, 0);
        v130 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v131 = NFLogGetLogger(v130);
        if (v131)
        {
          v132 = (void (*)(uint64_t, const char *, ...))v131;
          v133 = object_getClass((id)a1);
          v134 = class_isMetaClass(v133);
          v135 = object_getClassName((id)a1);
          v136 = sel_getName("_updateExpressModeDriverConfiguration");
          v137 = 45;
          if (v134)
            v137 = 43;
          v132(6, "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x", v137, v135, v136, 1602, *(unsigned int *)(a1 + 152));
        }
        v138 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v139 = NFSharedLogGetLogger(v138);
        v25 = objc_claimAutoreleasedReturnValue(v139);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v140 = object_getClass((id)a1);
          if (class_isMetaClass(v140))
            v141 = 43;
          else
            v141 = 45;
          v142 = object_getClassName((id)a1);
          v143 = sel_getName("_updateExpressModeDriverConfiguration");
          v144 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)buf = 67110146;
          v270 = v141;
          v271 = 2082;
          v272 = v142;
          v273 = 2082;
          v274 = v143;
          v275 = 1024;
          v276 = 1602;
          v277 = 1024;
          v278 = v144;
          v31 = "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x";
          goto LABEL_191;
        }
        goto LABEL_193;
      case 6:
        v145 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v146 = NFLogGetLogger(v145);
        if (v146)
        {
          v147 = (void (*)(uint64_t, const char *, ...))v146;
          v148 = object_getClass((id)a1);
          v149 = class_isMetaClass(v148);
          v150 = object_getClassName((id)a1);
          v263 = sel_getName("_updateExpressModeDriverConfiguration");
          v151 = 45;
          if (v149)
            v151 = 43;
          v147(6, "%c[%{public}s %{public}s]:%i Override SinglePoll express only", v151, v150, v263, 1591);
        }
        v152 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v153 = NFSharedLogGetLogger(v152);
        v154 = objc_claimAutoreleasedReturnValue(v153);
        if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
        {
          v155 = object_getClass((id)a1);
          if (class_isMetaClass(v155))
            v156 = 43;
          else
            v156 = 45;
          *(_DWORD *)buf = 67109890;
          v270 = v156;
          v271 = 2082;
          v272 = object_getClassName((id)a1);
          v273 = 2082;
          v274 = sel_getName("_updateExpressModeDriverConfiguration");
          v275 = 1024;
          v276 = 1591;
          _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Override SinglePoll express only", buf, 0x22u);
        }

        *(_DWORD *)(a1 + 152) = 32;
        v157 = *(void **)(a1 + 16);
        if (v157)
          sub_1001FEC70(v157, 32, 0);
        v158 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v159 = NFLogGetLogger(v158);
        if (v159)
        {
          v160 = (void (*)(uint64_t, const char *, ...))v159;
          v161 = object_getClass((id)a1);
          v162 = class_isMetaClass(v161);
          v163 = object_getClassName((id)a1);
          v164 = sel_getName("_updateExpressModeDriverConfiguration");
          v165 = 45;
          if (v162)
            v165 = 43;
          v160(6, "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x", v165, v163, v164, 1594, *(unsigned int *)(a1 + 152));
        }
        v166 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v167 = NFSharedLogGetLogger(v166);
        v25 = objc_claimAutoreleasedReturnValue(v167);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v168 = object_getClass((id)a1);
          if (class_isMetaClass(v168))
            v169 = 43;
          else
            v169 = 45;
          v170 = object_getClassName((id)a1);
          v171 = sel_getName("_updateExpressModeDriverConfiguration");
          v172 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)buf = 67110146;
          v270 = v169;
          v271 = 2082;
          v272 = v170;
          v273 = 2082;
          v274 = v171;
          v275 = 1024;
          v276 = 1594;
          v277 = 1024;
          v278 = v172;
          v31 = "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x";
          goto LABEL_191;
        }
        goto LABEL_193;
      default:
        *(_DWORD *)(a1 + 152) = 0;
        v45 = *(int64x2_t **)(a1 + 40);
        if (!v45 || (v46 = v45[1].i64[1], v47 = v45[2], !(vaddvq_s64(vaddq_s64(v47, v45[3])) + v46 + v45[4].i64[0])))
        {
          v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v49 = NFLogGetLogger(v48);
          if (v49)
          {
            v50 = (void (*)(uint64_t, const char *, ...))v49;
            v51 = object_getClass((id)a1);
            v52 = class_isMetaClass(v51);
            v53 = object_getClassName((id)a1);
            v259 = sel_getName("_updateExpressModeDriverConfiguration");
            v54 = 45;
            if (v52)
              v54 = 43;
            v50(6, "%c[%{public}s %{public}s]:%i No express modes active", v54, v53, v259, 1609);
          }
          v55 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v56 = NFSharedLogGetLogger(v55);
          v25 = objc_claimAutoreleasedReturnValue(v56);
          if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            goto LABEL_193;
          v57 = object_getClass((id)a1);
          if (class_isMetaClass(v57))
            v58 = 43;
          else
            v58 = 45;
          *(_DWORD *)buf = 67109890;
          v270 = v58;
          v271 = 2082;
          v272 = object_getClassName((id)a1);
          v273 = 2082;
          v274 = sel_getName("_updateExpressModeDriverConfiguration");
          v275 = 1024;
          v276 = 1609;
          v31 = "%c[%{public}s %{public}s]:%i No express modes active";
          v59 = v25;
          v60 = 34;
LABEL_192:
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, v31, buf, v60);
LABEL_193:

          return;
        }
        if (v46 | v47.i64[0])
        {
          v173 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v174 = NFLogGetLogger(v173);
          if (v174)
          {
            v175 = (void (*)(uint64_t, const char *, ...))v174;
            v176 = object_getClass((id)a1);
            v177 = class_isMetaClass(v176);
            v178 = object_getClassName((id)a1);
            v264 = sel_getName("_updateExpressModeDriverConfiguration");
            v179 = 45;
            if (v177)
              v179 = 43;
            v175(6, "%c[%{public}s %{public}s]:%i Express mode configured for typeF Transit", v179, v178, v264, 1615);
          }
          v180 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v181 = NFSharedLogGetLogger(v180);
          v182 = objc_claimAutoreleasedReturnValue(v181);
          if (os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
          {
            v183 = object_getClass((id)a1);
            if (class_isMetaClass(v183))
              v184 = 43;
            else
              v184 = 45;
            *(_DWORD *)buf = 67109890;
            v270 = v184;
            v271 = 2082;
            v272 = object_getClassName((id)a1);
            v273 = 2082;
            v274 = sel_getName("_updateExpressModeDriverConfiguration");
            v275 = 1024;
            v276 = 1615;
            _os_log_impl((void *)&_mh_execute_header, v182, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode configured for typeF Transit", buf, 0x22u);
          }

          v185 = *(_DWORD *)(a1 + 152) | 1u;
          *(_DWORD *)(a1 + 152) = v185;
          v45 = *(int64x2_t **)(a1 + 40);
          if (!v45)
            goto LABEL_182;
        }
        else
        {
          v185 = 0;
        }
        if (!v45[2].i64[1])
          goto LABEL_196;
        v186 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v187 = NFLogGetLogger(v186);
        if (v187)
        {
          v188 = (void (*)(uint64_t, const char *, ...))v187;
          v189 = object_getClass((id)a1);
          v190 = class_isMetaClass(v189);
          v191 = object_getClassName((id)a1);
          v265 = sel_getName("_updateExpressModeDriverConfiguration");
          v192 = 45;
          if (v190)
            v192 = 43;
          v188(6, "%c[%{public}s %{public}s]:%i Express mode configured for ECPAccess", v192, v191, v265, 1619);
        }
        v193 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v194 = NFSharedLogGetLogger(v193);
        v195 = objc_claimAutoreleasedReturnValue(v194);
        if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
        {
          v196 = object_getClass((id)a1);
          if (class_isMetaClass(v196))
            v197 = 43;
          else
            v197 = 45;
          v198 = object_getClassName((id)a1);
          v199 = sel_getName("_updateExpressModeDriverConfiguration");
          *(_DWORD *)buf = 67109890;
          v270 = v197;
          v271 = 2082;
          v272 = v198;
          v273 = 2082;
          v274 = v199;
          v275 = 1024;
          v276 = 1619;
          _os_log_impl((void *)&_mh_execute_header, v195, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode configured for ECPAccess", buf, 0x22u);
        }

        v185 = *(_DWORD *)(a1 + 152) | 2u;
        *(_DWORD *)(a1 + 152) = v185;
        v45 = *(int64x2_t **)(a1 + 40);
        if (v45)
        {
LABEL_196:
          if (!v45[3].i64[0])
            goto LABEL_197;
          v200 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v201 = NFLogGetLogger(v200);
          if (v201)
          {
            v202 = (void (*)(uint64_t, const char *, ...))v201;
            v203 = object_getClass((id)a1);
            v204 = class_isMetaClass(v203);
            v205 = object_getClassName((id)a1);
            v266 = sel_getName("_updateExpressModeDriverConfiguration");
            v206 = 45;
            if (v204)
              v206 = 43;
            v202(6, "%c[%{public}s %{public}s]:%i Express mode configured for Generic-A", v206, v205, v266, 1623);
          }
          v207 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v208 = NFSharedLogGetLogger(v207);
          v209 = objc_claimAutoreleasedReturnValue(v208);
          if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT))
          {
            v210 = object_getClass((id)a1);
            if (class_isMetaClass(v210))
              v211 = 43;
            else
              v211 = 45;
            v212 = object_getClassName((id)a1);
            v213 = sel_getName("_updateExpressModeDriverConfiguration");
            *(_DWORD *)buf = 67109890;
            v270 = v211;
            v271 = 2082;
            v272 = v212;
            v273 = 2082;
            v274 = v213;
            v275 = 1024;
            v276 = 1623;
            _os_log_impl((void *)&_mh_execute_header, v209, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode configured for Generic-A", buf, 0x22u);
          }

          v185 = *(_DWORD *)(a1 + 152) | 4u;
          *(_DWORD *)(a1 + 152) = v185;
          v45 = *(int64x2_t **)(a1 + 40);
          if (v45)
          {
LABEL_197:
            if (!v45[4].i64[0])
              goto LABEL_198;
            v214 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v215 = NFLogGetLogger(v214);
            if (v215)
            {
              v216 = (void (*)(uint64_t, const char *, ...))v215;
              v217 = object_getClass((id)a1);
              v218 = class_isMetaClass(v217);
              v219 = object_getClassName((id)a1);
              v267 = sel_getName("_updateExpressModeDriverConfiguration");
              v220 = 45;
              if (v218)
                v220 = 43;
              v216(6, "%c[%{public}s %{public}s]:%i Express mode configured for SinglePoll", v220, v219, v267, 1627);
            }
            v221 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v222 = NFSharedLogGetLogger(v221);
            v223 = objc_claimAutoreleasedReturnValue(v222);
            if (os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT))
            {
              v224 = object_getClass((id)a1);
              if (class_isMetaClass(v224))
                v225 = 43;
              else
                v225 = 45;
              v226 = object_getClassName((id)a1);
              v227 = sel_getName("_updateExpressModeDriverConfiguration");
              *(_DWORD *)buf = 67109890;
              v270 = v225;
              v271 = 2082;
              v272 = v226;
              v273 = 2082;
              v274 = v227;
              v275 = 1024;
              v276 = 1627;
              _os_log_impl((void *)&_mh_execute_header, v223, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode configured for SinglePoll", buf, 0x22u);
            }

            v185 = *(_DWORD *)(a1 + 152) | 0x20u;
            *(_DWORD *)(a1 + 152) = v185;
            v45 = *(int64x2_t **)(a1 + 40);
            if (v45)
            {
LABEL_198:
              if (v45[3].i64[1])
              {
                v228 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v229 = NFLogGetLogger(v228);
                if (v229)
                {
                  v230 = (void (*)(uint64_t, const char *, ...))v229;
                  v231 = object_getClass((id)a1);
                  v232 = class_isMetaClass(v231);
                  v233 = object_getClassName((id)a1);
                  v268 = sel_getName("_updateExpressModeDriverConfiguration");
                  v234 = 45;
                  if (v232)
                    v234 = 43;
                  v230(6, "%c[%{public}s %{public}s]:%i Express mode configured for ECP2", v234, v233, v268, 1631);
                }
                v235 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v236 = NFSharedLogGetLogger(v235);
                v237 = objc_claimAutoreleasedReturnValue(v236);
                if (os_log_type_enabled(v237, OS_LOG_TYPE_DEFAULT))
                {
                  v238 = object_getClass((id)a1);
                  if (class_isMetaClass(v238))
                    v239 = 43;
                  else
                    v239 = 45;
                  v240 = object_getClassName((id)a1);
                  v241 = sel_getName("_updateExpressModeDriverConfiguration");
                  *(_DWORD *)buf = 67109890;
                  v270 = v239;
                  v271 = 2082;
                  v272 = v240;
                  v273 = 2082;
                  v274 = v241;
                  v275 = 1024;
                  v276 = 1631;
                  _os_log_impl((void *)&_mh_execute_header, v237, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode configured for ECP2", buf, 0x22u);
                }

                v185 = *(_DWORD *)(a1 + 152) | 0x10u;
                *(_DWORD *)(a1 + 152) = v185;
              }
            }
          }
        }
LABEL_182:
        sub_1001FEC70(*(void **)(a1 + 16), v185, 0);
        v242 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v243 = NFLogGetLogger(v242);
        if (v243)
        {
          v244 = (void (*)(uint64_t, const char *, ...))v243;
          v245 = object_getClass((id)a1);
          v246 = class_isMetaClass(v245);
          v247 = object_getClassName((id)a1);
          v248 = sel_getName("_updateExpressModeDriverConfiguration");
          v249 = 45;
          if (v246)
            v249 = 43;
          v244(6, "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x", v249, v247, v248, 1636, *(unsigned int *)(a1 + 152));
        }
        v250 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v251 = NFSharedLogGetLogger(v250);
        v25 = objc_claimAutoreleasedReturnValue(v251);
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          goto LABEL_193;
        v252 = object_getClass((id)a1);
        if (class_isMetaClass(v252))
          v253 = 43;
        else
          v253 = 45;
        v254 = object_getClassName((id)a1);
        v255 = sel_getName("_updateExpressModeDriverConfiguration");
        v256 = *(_DWORD *)(a1 + 152);
        *(_DWORD *)buf = 67110146;
        v270 = v253;
        v271 = 2082;
        v272 = v254;
        v273 = 2082;
        v274 = v255;
        v275 = 1024;
        v276 = 1636;
        v277 = 1024;
        v278 = v256;
        v31 = "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x";
LABEL_191:
        v59 = v25;
        v60 = 40;
        goto LABEL_192;
    }
  }
  v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v33 = NFLogGetLogger(v32);
  if (v33)
  {
    v34 = (void (*)(uint64_t, const char *, ...))v33;
    v35 = object_getClass((id)a1);
    v36 = class_isMetaClass(v35);
    v37 = object_getClassName((id)a1);
    v258 = sel_getName("_updateExpressModeDriverConfiguration");
    v38 = 45;
    if (v36)
      v38 = 43;
    v34(6, "%c[%{public}s %{public}s]:%i Disabling express config", v38, v37, v258, 1560);
  }
  v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v40 = NFSharedLogGetLogger(v39);
  v41 = objc_claimAutoreleasedReturnValue(v40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    v42 = object_getClass((id)a1);
    if (class_isMetaClass(v42))
      v43 = 43;
    else
      v43 = 45;
    *(_DWORD *)buf = 67109890;
    v270 = v43;
    v271 = 2082;
    v272 = object_getClassName((id)a1);
    v273 = 2082;
    v274 = sel_getName("_updateExpressModeDriverConfiguration");
    v275 = 1024;
    v276 = 1560;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Disabling express config", buf, 0x22u);
  }

  v44 = *(void **)(a1 + 16);
  if (v44)
    sub_1001FEC70(v44, 0, 0);
}

NSObject *sub_10003F7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  uint64_t v27;
  __CFString *v28;
  void *v29;
  uint64_t v30;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *v32;
  _BOOL4 v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  _BOOL4 v52;
  id v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  void *v59;
  void *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  void *v68;
  void *v69;
  unsigned int v70;
  void *v71;
  uint64_t v72;
  void (*v73)(uint64_t, const char *, ...);
  objc_class *v74;
  _BOOL4 v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  NSObject *v80;
  objc_class *v81;
  int v82;
  const char *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  void *v89;
  id v90;
  id v91;
  void *v92;
  id v93;
  NSObject *v94;
  NSObject *v95;
  _QWORD *v96;
  void *v97;
  id v98;
  unsigned int v99;
  void *v100;
  uint64_t v101;
  void (*v102)(uint64_t, const char *, ...);
  objc_class *v103;
  _BOOL4 v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  NSObject *v108;
  objc_class *v109;
  int v110;
  const char *v111;
  const char *v112;
  void *v113;
  void *v114;
  uint64_t v115;
  const char *v117;
  const char *v118;
  const char *Name;
  const char *v120;
  const char *v121;
  const char *v122;
  _QWORD v123[5];
  _QWORD v124[5];
  uint8_t buf[4];
  int v126;
  __int16 v127;
  const char *v128;
  __int16 v129;
  const char *v130;
  __int16 v131;
  int v132;
  __int16 v133;
  const __CFString *v134;

  if (a1)
  {
    v4 = NFSharedSignpostLog(a1);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "", buf, 2u);
    }

    if (!*(_QWORD *)(a1 + 40))
      sub_10003BE3C(a1);
    if (*(_BYTE *)(a1 + 170))
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v9 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("setExpressModeControlState:");
        v13 = 45;
        if (isMetaClass)
          v13 = 43;
        v9(4, "%c[%{public}s %{public}s]:%i Forcing express mode on when factoryTestMode is enabled", v13, ClassName, Name, 423);
      }
      v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v15 = NFSharedLogGetLogger(v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v17 = object_getClass((id)a1);
        if (class_isMetaClass(v17))
          v18 = 43;
        else
          v18 = 45;
        v19 = object_getClassName((id)a1);
        v20 = sel_getName("setExpressModeControlState:");
        *(_DWORD *)buf = 67109890;
        v126 = v18;
        v127 = 2082;
        v128 = v19;
        v129 = 2082;
        v130 = v20;
        v131 = 1024;
        v132 = 423;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Forcing express mode on when factoryTestMode is enabled", buf, 0x22u);
      }

      a2 = 1;
    }
    if (a2 != *(_QWORD *)(a1 + 136))
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKey:", CFSTR("ExpressModeEnabled")));

      if (v22)
        objc_msgSend(v21, "removeObjectForKey:", CFSTR("ExpressModeEnabled"));
      v23 = objc_msgSend(v21, "setInteger:forKey:", a2, CFSTR("ExpressModeControlState"));
      if (a2 == 1)
      {
        v24 = NFSharedSignpostLog(v23);
        v25 = objc_claimAutoreleasedReturnValue(v24);
        if (os_signpost_enabled(v25))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "enabling express", buf, 2u);
        }

        v26 = sub_1001F84C8(*(void **)(a1 + 16), CFSTR("Enable Express"), 1uLL);
        v27 = objc_claimAutoreleasedReturnValue(v26);
        if (v27)
        {
          v28 = (__CFString *)v27;
          v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v30 = NFLogGetLogger(v29);
          if (v30)
          {
            v31 = (void (*)(uint64_t, const char *, ...))v30;
            v32 = object_getClass((id)a1);
            v33 = class_isMetaClass(v32);
            v117 = object_getClassName((id)a1);
            v120 = sel_getName("setExpressModeControlState:");
            v34 = 45;
            if (v33)
              v34 = 43;
            v31(4, "%c[%{public}s %{public}s]:%i Failed to open session : %@", v34, v117, v120, 441, v28);
          }
          v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v36 = NFSharedLogGetLogger(v35);
          v37 = objc_claimAutoreleasedReturnValue(v36);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            v38 = object_getClass((id)a1);
            if (class_isMetaClass(v38))
              v39 = 43;
            else
              v39 = 45;
            v40 = object_getClassName((id)a1);
            v41 = sel_getName("setExpressModeControlState:");
            *(_DWORD *)buf = 67110146;
            v126 = v39;
            v127 = 2082;
            v128 = v40;
            v129 = 2082;
            v130 = v41;
            v131 = 1024;
            v132 = 441;
            v133 = 2112;
            v134 = v28;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session : %@", buf, 0x2Cu);
          }

          v43 = NFSharedSignpostLog(v42);
          v44 = objc_claimAutoreleasedReturnValue(v43);
          if (os_signpost_enabled(v44))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v44, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "failed to open session", buf, 2u);
          }

          *(_QWORD *)(a1 + 136) = 0;
          v45 = objc_alloc((Class)NSError);
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v47 = -[__CFString code](v28, "code");
          v123[0] = NSLocalizedDescriptionKey;
          if ((uint64_t)-[__CFString code](v28, "code") > 70)
            v48 = 71;
          else
            v48 = (uint64_t)-[__CFString code](v28, "code");
          v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E58F8[v48]));
          v124[0] = v89;
          v124[1] = v28;
          v123[1] = NSUnderlyingErrorKey;
          v123[2] = CFSTR("Line");
          v124[2] = &off_1002FDCC8;
          v123[3] = CFSTR("Method");
          v90 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setExpressModeControlState:"));
          v124[3] = v90;
          v123[4] = NSDebugDescriptionErrorKey;
          v91 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setExpressModeControlState:"), 444);
          v124[4] = v91;
          v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v124, v123, 5));
          v93 = objc_msgSend(v45, "initWithDomain:code:userInfo:", v46, v47, v92);

          v94 = v93;
          v95 = v94;
LABEL_91:

          return v95;
        }
        *(_QWORD *)(a1 + 136) = 1;
        sub_10003C984(a1);
        v68 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
        v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "controllerInfo"));
        v70 = objc_msgSend(v69, "hasLPEMSupport");

        if (v70)
        {
          v71 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v72 = NFLogGetLogger(v71);
          if (v72)
          {
            v73 = (void (*)(uint64_t, const char *, ...))v72;
            v74 = object_getClass((id)a1);
            v75 = class_isMetaClass(v74);
            v76 = object_getClassName((id)a1);
            v121 = sel_getName("setExpressModeControlState:");
            v77 = 45;
            if (v75)
              v77 = 43;
            v73(6, "%c[%{public}s %{public}s]:%i Updating LPEM config after enabling express", v77, v76, v121, 454);
          }
          v78 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v79 = NFSharedLogGetLogger(v78);
          v80 = objc_claimAutoreleasedReturnValue(v79);
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
          {
            v81 = object_getClass((id)a1);
            if (class_isMetaClass(v81))
              v82 = 43;
            else
              v82 = 45;
            v83 = object_getClassName((id)a1);
            v84 = sel_getName("setExpressModeControlState:");
            *(_DWORD *)buf = 67109890;
            v126 = v82;
            v127 = 2082;
            v128 = v83;
            v129 = 2082;
            v130 = v84;
            v131 = 1024;
            v132 = 454;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Updating LPEM config after enabling express", buf, 0x22u);
          }

          v86 = NFSharedSignpostLog(v85);
          v87 = objc_claimAutoreleasedReturnValue(v86);
          if (os_signpost_enabled(v87))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v87, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "enabling LPEM", buf, 2u);
          }

          if (*(_BYTE *)(a1 + 170))
          {
            if (*(_BYTE *)(a1 + 171))
              v88 = 16;
            else
              v88 = 4;
          }
          else
          {
            v88 = *(unsigned int *)(a1 + 152);
          }
          sub_1001FEC70(*(void **)(a1 + 16), v88, 1);
          sub_100197C58(*(void **)(a1 + 16), 1);
        }
      }
      else
      {
        v49 = *(_QWORD *)(a1 + 136);
        v50 = NFSharedSignpostLog(v23);
        v51 = objc_claimAutoreleasedReturnValue(v50);
        v52 = os_signpost_enabled(v51);
        if (v49 == 1)
        {
          if (v52)
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v51, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "disabling express", buf, 2u);
          }

          v53 = objc_msgSend(*(id *)(a1 + 40), "deactivateExpressConfig");
          *(_QWORD *)(a1 + 136) = a2;
          v54 = NFSharedSignpostLog(v53);
          v55 = objc_claimAutoreleasedReturnValue(v54);
          if (os_signpost_enabled(v55))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v55, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "expressConfig deactivated", buf, 2u);
          }

          sub_10003E234(a1);
          v57 = NFSharedSignpostLog(v56);
          v58 = objc_claimAutoreleasedReturnValue(v57);
          if (os_signpost_enabled(v58))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v58, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "driver config updated", buf, 2u);
          }

          v59 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
          v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "controllerInfo"));
          v61 = objc_msgSend(v60, "hasLPEMSupport");

          if (v61)
          {
            v63 = NFSharedSignpostLog(v62);
            v64 = objc_claimAutoreleasedReturnValue(v63);
            if (os_signpost_enabled(v64))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v64, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "disabling LPEM", buf, 2u);
            }

            sub_1001980AC(*(_QWORD *)(a1 + 16), 1);
          }
          sub_1001FABB8(*(void **)(a1 + 16), CFSTR("Enable Express"));
          v66 = NFSharedSignpostLog(v65);
          v67 = objc_claimAutoreleasedReturnValue(v66);
          if (os_signpost_enabled(v67))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v67, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "express disabled", buf, 2u);
          }

        }
        else
        {
          if (v52)
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v51, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "in bio-lock", buf, 2u);
          }

          *(_QWORD *)(a1 + 136) = a2;
        }
      }
      v96 = *(_QWORD **)(a1 + 40);
      if (v96)
        v97 = (void *)v96[2];
      else
        v97 = 0;
      v98 = v97;
      v99 = objc_msgSend(v96, "hasUWBKeys:", v98);

      if (v99)
      {
        v100 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v101 = NFLogGetLogger(v100);
        if (v101)
        {
          v102 = (void (*)(uint64_t, const char *, ...))v101;
          v103 = object_getClass((id)a1);
          v104 = class_isMetaClass(v103);
          v118 = object_getClassName((id)a1);
          v122 = sel_getName("setExpressModeControlState:");
          v105 = 45;
          if (v104)
            v105 = 43;
          v102(6, "%c[%{public}s %{public}s]:%i posting %{public}@ to SESD", v105, v118, v122, 489, CFSTR("com.apple.stockholm.express.keys.uwb.changed"));
        }
        v106 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v107 = NFSharedLogGetLogger(v106);
        v108 = objc_claimAutoreleasedReturnValue(v107);
        if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
        {
          v109 = object_getClass((id)a1);
          if (class_isMetaClass(v109))
            v110 = 43;
          else
            v110 = 45;
          v111 = object_getClassName((id)a1);
          v112 = sel_getName("setExpressModeControlState:");
          *(_DWORD *)buf = 67110146;
          v126 = v110;
          v127 = 2082;
          v128 = v111;
          v129 = 2082;
          v130 = v112;
          v131 = 1024;
          v132 = 489;
          v133 = 2114;
          v134 = CFSTR("com.apple.stockholm.express.keys.uwb.changed");
          _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i posting %{public}@ to SESD", buf, 0x2Cu);
        }

        v113 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
        v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "sesdEventPublisher"));
        objc_msgSend(v114, "sendXpcNotificationEventWithString:", CFSTR("com.apple.stockholm.express.keys.uwb.changed"));

      }
    }
    v115 = NFSharedSignpostLog(v6);
    v94 = objc_claimAutoreleasedReturnValue(v115);
    if (os_signpost_enabled(v94))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v94, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "", buf, 2u);
    }
    v95 = 0;
    goto LABEL_91;
  }
  return 0;
}

void sub_100040428(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  const char *Name;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  unsigned int v34;
  __int16 v35;
  unsigned int v36;

  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("pauseExpressMode:suspendFieldDetect:");
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v8(6, "%c[%{public}s %{public}s]:%i pause=%{public}d, suspendFD=%{public}d", v12, ClassName, Name, 510, a2, a3);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = object_getClass(a1);
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      *(_DWORD *)buf = 67110402;
      v26 = v17;
      v27 = 2082;
      v28 = object_getClassName(a1);
      v29 = 2082;
      v30 = sel_getName("pauseExpressMode:suspendFieldDetect:");
      v31 = 1024;
      v32 = 510;
      v33 = 1026;
      v34 = a2;
      v35 = 1026;
      v36 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i pause=%{public}d, suspendFD=%{public}d", buf, 0x2Eu);
    }

    a1[168] = a2;
    v18 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v19 = v18;
    if ((a3 & 1) != 0)
    {
      if (v18)
        v20 = (void *)v18[2];
      else
        v20 = 0;
      v21 = v20;
      v22 = v21;
      if (a2)
      {
        objc_msgSend(v21, "suspend:", CFSTR("NFExpressModeManager"));

        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig routingOffWithFD:](NFRoutingConfig, "routingOffWithFD:", 0));
        v23 = objc_msgSend(v19, "setRoutingConfig:", v22);
      }
      else
      {
        objc_msgSend(v21, "resume:", CFSTR("NFExpressModeManager"));
      }

    }
    else
    {
      objc_msgSend(v18, "maybeStartNextSession");
    }

  }
}

void sub_10004066C(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  void *v14;
  const char *Name;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;

  if (a1)
  {
    *(_BYTE *)(a1 + 174) = 0;
    if (*(_QWORD *)(a1 + 104))
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v4 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("cancelSinglePollAssertion");
        v8 = 45;
        if (isMetaClass)
          v8 = 43;
        v4(6, "%c[%{public}s %{public}s]:%i Cancelling express mode assertion", v8, ClassName, Name, 581);
      }
      v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v10 = NFSharedLogGetLogger(v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = object_getClass((id)a1);
        if (class_isMetaClass(v12))
          v13 = 43;
        else
          v13 = 45;
        *(_DWORD *)buf = 67109890;
        v17 = v13;
        v18 = 2082;
        v19 = object_getClassName((id)a1);
        v20 = 2082;
        v21 = sel_getName("cancelSinglePollAssertion");
        v22 = 1024;
        v23 = 581;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Cancelling express mode assertion", buf, 0x22u);
      }

      objc_msgSend(*(id *)(a1 + 104), "stopTimer");
      v14 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = 0;

    }
  }
}

id sub_100040810(uint64_t a1, void *a2, _BOOL8 a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  NSObject *v9;
  void *specific;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *v26;
  _BOOL4 v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  id v40;
  void *v41;
  NSObject *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void (*v66)(uint64_t, const char *, ...);
  objc_class *v67;
  _BOOL4 v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  NSObject *v72;
  objc_class *v73;
  int v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *ClassName;
  const char *v81;
  const char *Name;
  const char *v83;
  const char *v84;
  void *v85;
  _QWORD v86[5];
  _QWORD v87[5];
  _QWORD v88[4];
  _QWORD v89[4];
  uint8_t buf[4];
  int v91;
  __int16 v92;
  const char *v93;
  __int16 v94;
  const char *v95;
  __int16 v96;
  int v97;
  __int16 v98;
  _BOOL4 v99;

  v7 = a2;
  v85 = v7;
  if (a1)
  {
    v8 = NFSharedSignpostLog(v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "setExpressPassConfig", "", buf, 2u);
    }

    if (!*(_QWORD *)(a1 + 40))
      sub_10003BE3C(a1);
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v12 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:");
      v15 = 45;
      if (isMetaClass)
        v15 = 43;
      v12(6, "%c[%{public}s %{public}s]:%i restoreAuthorization=%d", v15, ClassName, Name, 596, a3);
    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = object_getClass((id)a1);
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      v21 = object_getClassName((id)a1);
      v22 = sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:");
      *(_DWORD *)buf = 67110146;
      v91 = v20;
      v92 = 2082;
      v93 = v21;
      v94 = 2082;
      v95 = v22;
      v96 = 1024;
      v97 = 596;
      v98 = 1024;
      v99 = a3;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i restoreAuthorization=%d", buf, 0x28u);
    }

    if (*(_BYTE *)(a1 + 170))
    {
      v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v24 = NFLogGetLogger(v23);
      if (v24)
      {
        v25 = (void (*)(uint64_t, const char *, ...))v24;
        v26 = object_getClass((id)a1);
        v27 = class_isMetaClass(v26);
        v28 = object_getClassName((id)a1);
        v83 = sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:");
        v29 = 45;
        if (v27)
          v29 = 43;
        v25(3, "%c[%{public}s %{public}s]:%i Can't change express applets when factory test mode is enabled", v29, v28, v83, 599);
      }
      v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v31 = NFSharedLogGetLogger(v30);
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        v33 = object_getClass((id)a1);
        if (class_isMetaClass(v33))
          v34 = 43;
        else
          v34 = 45;
        v35 = object_getClassName((id)a1);
        v36 = sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:");
        *(_DWORD *)buf = 67109890;
        v91 = v34;
        v92 = 2082;
        v93 = v35;
        v94 = 2082;
        v95 = v36;
        v96 = 1024;
        v97 = 599;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Can't change express applets when factory test mode is enabled", buf, 0x22u);
      }

      v38 = NFSharedSignpostLog(v37);
      v39 = objc_claimAutoreleasedReturnValue(v38);
      if (os_signpost_enabled(v39))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "setExpressPassConfig", "skip due to factory mode", buf, 2u);
      }

      v40 = objc_alloc((Class)NSError);
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v88[0] = NSLocalizedDescriptionKey;
      v42 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v89[0] = v42;
      v89[1] = &off_1002FDCE0;
      v88[1] = CFSTR("Line");
      v88[2] = CFSTR("Method");
      v43 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:"));
      v89[2] = v43;
      v88[3] = NSDebugDescriptionErrorKey;
      v44 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:"), 601);
      v89[3] = v44;
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v89, v88, 4));
      v46 = objc_msgSend(v40, "initWithDomain:code:userInfo:", v41, 12, v45);

    }
    else
    {
      v47 = NFSharedSignpostLog(objc_msgSend(*(id *)(a1 + 40), "dumpConfig:logLevel:prefix:", v85, 6, CFSTR("new config")));
      v48 = objc_claimAutoreleasedReturnValue(v47);
      if (os_signpost_enabled(v48))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v48, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressPassConfig", "reconfiguring", buf, 2u);
      }

      v49 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "reconfigureWithArray:restoreAuthorization:updateStorage:", v85, a3, a4));
      v41 = (void *)v49;
      if (v49)
      {
        v50 = objc_alloc((Class)NSError);
        v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v52 = objc_msgSend(v41, "code");
        v86[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)objc_msgSend(v41, "code") > 70)
          v53 = 71;
        else
          v53 = (uint64_t)objc_msgSend(v41, "code");
        v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E58F8[v53]));
        v87[0] = v54;
        v87[1] = v41;
        v86[1] = NSUnderlyingErrorKey;
        v86[2] = CFSTR("Line");
        v87[2] = &off_1002FDCF8;
        v86[3] = CFSTR("Method");
        v55 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:"));
        v87[3] = v55;
        v86[4] = NSDebugDescriptionErrorKey;
        v56 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:"), 612);
        v87[4] = v56;
        v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v87, v86, 5));
        v46 = objc_msgSend(v50, "initWithDomain:code:userInfo:", v51, v52, v57);

      }
      else
      {
        v46 = 0;
      }
      v58 = NFSharedSignpostLog(v49);
      v59 = objc_claimAutoreleasedReturnValue(v58);
      if (os_signpost_enabled(v59))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v59, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressPassConfig", "updating counters", buf, 2u);
      }

      sub_10003C984(a1);
      v61 = NFSharedSignpostLog(v60);
      v62 = objc_claimAutoreleasedReturnValue(v61);
      if (os_signpost_enabled(v62))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v62, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressPassConfig", "updating LPEM", buf, 2u);
      }

      v63 = sub_100197958(*(_QWORD *)(a1 + 16));
      v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v65 = NFLogGetLogger(v64);
      if (v65)
      {
        v66 = (void (*)(uint64_t, const char *, ...))v65;
        v67 = object_getClass((id)a1);
        v68 = class_isMetaClass(v67);
        v81 = object_getClassName((id)a1);
        v84 = sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:");
        v69 = 45;
        if (v68)
          v69 = 43;
        v66(6, "%c[%{public}s %{public}s]:%i Updating express mode config after setting passes : update lpem: %d", v69, v81, v84, 621, v63 != 0);
      }
      v70 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v71 = NFSharedLogGetLogger(v70);
      v72 = objc_claimAutoreleasedReturnValue(v71);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        v73 = object_getClass((id)a1);
        if (class_isMetaClass(v73))
          v74 = 43;
        else
          v74 = 45;
        v75 = object_getClassName((id)a1);
        v76 = sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:");
        *(_DWORD *)buf = 67110146;
        v91 = v74;
        v92 = 2082;
        v93 = v75;
        v94 = 2082;
        v95 = v76;
        v96 = 1024;
        v97 = 621;
        v98 = 1024;
        v99 = v63 != 0;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Updating express mode config after setting passes : update lpem: %d", buf, 0x28u);
      }

      sub_1001FEC70(*(void **)(a1 + 16), *(unsigned int *)(a1 + 152), v63 != 0);
      v78 = NFSharedSignpostLog(v77);
      v42 = objc_claimAutoreleasedReturnValue(v78);
      if (os_signpost_enabled(v42))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "setExpressPassConfig", "", buf, 2u);
      }
    }

  }
  else
  {
    v46 = 0;
  }

  return v46;
}

id sub_100041150(_QWORD *a1, void *a2)
{
  id v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  id v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a2;
  if (a1)
  {
    v4 = sub_1000412C0(a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = v5;
    if (v5)
    {
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v7 = v5;
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v17;
        while (2)
        {
          for (i = 0; i != v9; i = (char *)i + 1)
          {
            if (*(_QWORD *)v17 != v10)
              objc_enumerationMutation(v7);
            v12 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("appletIdentifier"), (_QWORD)v16));
            if ((objc_msgSend(v13, "isEqualToString:", v3) & 1) != 0)
            {
              v14 = v12;

              goto LABEL_13;
            }

          }
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
          if (v9)
            continue;
          break;
        }
      }
      v14 = 0;
LABEL_13:

    }
    else
    {
      v14 = 0;
    }

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

_QWORD *sub_1000412C0(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = a1;
  if (a1)
  {
    v2 = (_QWORD *)a1[5];
    if (v2 || (sub_10003BE3C((uint64_t)a1), (v2 = (_QWORD *)v1[5]) != 0))
      v2 = (_QWORD *)v2[2];
    v3 = v2;
    v1 = objc_msgSend(v3, "copy");

  }
  return v1;
}

BOOL sub_100041314(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig embeddedWiredMode](NFRoutingConfig, "embeddedWiredMode"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "setRoutingConfig:", v2));

  if (v4)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_setRoutingForWrapper:");
      v11 = 45;
      if (isMetaClass)
        v11 = 43;
      v7(3, "%c[%{public}s %{public}s]:%i Failed to set secure element to wired mode", v11, ClassName, Name, 668);
    }
    v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v13 = NFSharedLogGetLogger(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = object_getClass(a1);
      if (class_isMetaClass(v15))
        v16 = 43;
      else
        v16 = 45;
      *(_DWORD *)buf = 67109890;
      v20 = v16;
      v21 = 2082;
      v22 = object_getClassName(a1);
      v23 = 2082;
      v24 = sel_getName("_setRoutingForWrapper:");
      v25 = 1024;
      v26 = 668;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set secure element to wired mode", buf, 0x22u);
    }

  }
  return v4 == 0;
}

uint64_t sub_1000414F0(_QWORD *a1, void *a2, unsigned int a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *specific;
  uint64_t Logger;
  void (*v15)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  id v31;
  const char *Name;
  char v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;

  if (!a1)
    return 0;
  v5 = a2;
  v6 = NFSharedSignpostLog(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "restoreAuthorizationForAllAppletsExcept", "", buf, 2u);
  }

  if (!a1[5])
    sub_10003BE3C((uint64_t)a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "secureElementWrapper"));
  v10 = v5;
  v11 = v9;
  if (v11)
  {
    if (sub_100041314(a1))
    {
      v33 = 0;
      v12 = sub_1001E9748(v11, v10, a3, &v33);
      if ((_DWORD)v12)
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v15 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("_restoreAuthorizationForAllAppletsExcept:forSEWrapper:uid:");
          v19 = 45;
          if (isMetaClass)
            v19 = 43;
          v15(3, "%c[%{public}s %{public}s]:%i Failed to restore authorization on all applets", v19, ClassName, Name, 690);
        }
        v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v21 = NFSharedLogGetLogger(v20);
        v22 = objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v23 = object_getClass(a1);
          if (class_isMetaClass(v23))
            v24 = 43;
          else
            v24 = 45;
          v25 = object_getClassName(a1);
          v26 = sel_getName("_restoreAuthorizationForAllAppletsExcept:forSEWrapper:uid:");
          *(_DWORD *)buf = 67109890;
          v35 = v24;
          v36 = 2082;
          v37 = v25;
          v38 = 2082;
          v39 = v26;
          v40 = 1024;
          v41 = 690;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to restore authorization on all applets", buf, 0x22u);
        }

      }
      else if (v33)
      {
        v31 = sub_10022BED0(v11);
      }
    }
    else
    {
      v12 = 6;
    }
  }
  else
  {
    v12 = 0;
  }

  v28 = NFSharedSignpostLog(v27);
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_signpost_enabled(v29))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "restoreAuthorizationForAllAppletsExcept", "", buf, 2u);
  }

  return v12;
}

id sub_1000417F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  _BYTE *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint8_t buf[8];
  _QWORD v28[5];
  _QWORD v29[5];

  v5 = a2;
  if (a1)
  {
    v6 = a3;
    v7 = NFSharedSignpostLog(v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "restoreAuthorizarionForKeys", "", buf, 2u);
    }

    v9 = sub_1000443EC((_BYTE *)a1, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

    if (v10)
    {
      v12 = *(void **)(a1 + 40);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects"));
      v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "disableExpressForKeys:onApplet:", v13, v10));

      v16 = NFSharedSignpostLog(v15);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_signpost_enabled(v17))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "restoreAuthorizarionForKeys", "", buf, 2u);
      }
    }
    else
    {
      v18 = NFSharedSignpostLog(v11);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_signpost_enabled(v19))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "restoreAuthorizarionForKeys", "invalid aid", buf, 2u);
      }

      v20 = objc_alloc((Class)NSError);
      v17 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v28[0] = NSLocalizedDescriptionKey;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v29[0] = v21;
      v29[1] = &off_1002FDD10;
      v28[1] = CFSTR("Line");
      v28[2] = CFSTR("Method");
      v22 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("restoreAuthorizarionForKeys:onApplet:"));
      v29[2] = v22;
      v28[3] = NSDebugDescriptionErrorKey;
      v23 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("restoreAuthorizarionForKeys:onApplet:"), 723);
      v29[3] = v23;
      v28[4] = NSLocalizedFailureReasonErrorKey;
      v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Incorrect applet identifier!"));
      v29[4] = v24;
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 5));
      v14 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v17, 10, v25);

    }
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

BOOL sub_100041B44(_BOOL8 result)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *v7;
  _BOOL4 v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  void *specific;
  uint64_t Logger;
  void (*v18)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  objc_class *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void (*v32)(uint64_t, const char *, ...);
  objc_class *v33;
  _BOOL4 v34;
  const char *v35;
  const char *v36;
  const __CFString *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  objc_class *v42;
  int v43;
  const char *v44;
  const char *v45;
  const __CFString *v46;
  uint64_t v47;
  int v48;
  int v49;
  const char *v51;
  const char *Name;
  const __CFString *v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  const __CFString *v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;

  if (!result)
    return result;
  v1 = result;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  v3 = objc_msgSend(v2, "nfcRadioEnabled:showUIPopup:", 0, 0);

  if (!v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v18 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)v1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)v1);
      Name = sel_getName("expressModesActive");
      v22 = 45;
      if (isMetaClass)
        v22 = 43;
      v18(6, "%c[%{public}s %{public}s]:%i NFC radio disabled", v22, ClassName, Name, 734);
    }
    v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v24 = NFSharedLogGetLogger(v23);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v26 = object_getClass((id)v1);
      if (class_isMetaClass(v26))
        v27 = 43;
      else
        v27 = 45;
      *(_DWORD *)buf = 67109890;
      v55 = v27;
      v56 = 2082;
      v57 = object_getClassName((id)v1);
      v58 = 2082;
      v59 = sel_getName("expressModesActive");
      v60 = 1024;
      v61 = 734;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i NFC radio disabled", buf, 0x22u);
    }

    return 0;
  }
  if (!*(_BYTE *)(v1 + 170))
  {
    v28 = *(_QWORD *)(v1 + 40);
    if (v28)
      v29 = vaddvq_s64(vaddq_s64(*(int64x2_t *)(v28 + 24), *(int64x2_t *)(v28 + 40)))
          + *(_QWORD *)(v28 + 56)
          + *(_QWORD *)(v28 + 64);
    else
      v29 = 0;
    if (!*(_BYTE *)(v1 + 169) && *(_QWORD *)(v1 + 136) != 1 && !*(_BYTE *)(v1 + 168) && !*(_BYTE *)(v1 + 174) && !v29)
      goto LABEL_49;
    v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v31 = NFLogGetLogger(v30);
    if (v31)
    {
      v32 = (void (*)(uint64_t, const char *, ...))v31;
      v33 = object_getClass((id)v1);
      v34 = class_isMetaClass(v33);
      v35 = object_getClassName((id)v1);
      v36 = sel_getName("expressModesActive");
      if (*(_BYTE *)(v1 + 169))
        v37 = CFSTR("YES");
      else
        v37 = CFSTR("NO");
      v53 = v37;
      v38 = 43;
      if (!v34)
        v38 = 45;
      v32(6, "%c[%{public}s %{public}s]:%i Delayed=%{public}@ controlState=%ld paused=%d spAssertion=%d numberOfApplets=%d", v38, v35, v36, 750, v53, *(_QWORD *)(v1 + 136), *(unsigned __int8 *)(v1 + 168), *(unsigned __int8 *)(v1 + 174), v29);
    }
    v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v40 = NFSharedLogGetLogger(v39);
    v41 = objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      v42 = object_getClass((id)v1);
      if (class_isMetaClass(v42))
        v43 = 43;
      else
        v43 = 45;
      v44 = object_getClassName((id)v1);
      v45 = sel_getName("expressModesActive");
      if (*(_BYTE *)(v1 + 169))
        v46 = CFSTR("YES");
      else
        v46 = CFSTR("NO");
      v47 = *(_QWORD *)(v1 + 136);
      v48 = *(unsigned __int8 *)(v1 + 168);
      v49 = *(unsigned __int8 *)(v1 + 174);
      *(_DWORD *)buf = 67111170;
      v55 = v43;
      v56 = 2082;
      v57 = v44;
      v58 = 2082;
      v59 = v45;
      v60 = 1024;
      v61 = 750;
      v62 = 2114;
      v63 = v46;
      v64 = 2048;
      v65 = v47;
      v66 = 1024;
      v67 = v48;
      v68 = 1024;
      v69 = v49;
      v70 = 1024;
      v71 = v29;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Delayed=%{public}@ controlState=%ld paused=%d spAssertion=%d numberOfApplets=%d", buf, 0x48u);
    }

    if (!*(_BYTE *)(v1 + 169) && !*(_BYTE *)(v1 + 168))
    {
LABEL_49:
      if (!*(_BYTE *)(v1 + 174))
        return *(_QWORD *)(v1 + 136) == 1 && v29 != 0;
    }
    return 0;
  }
  v4 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v5 = NFLogGetLogger(v4);
  if (v5)
  {
    v6 = (void (*)(uint64_t, const char *, ...))v5;
    v7 = object_getClass((id)v1);
    v8 = class_isMetaClass(v7);
    v9 = object_getClassName((id)v1);
    v51 = sel_getName("expressModesActive");
    v10 = 45;
    if (v8)
      v10 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i EMM Test mode : YES", v10, v9, v51, 738);
  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass((id)v1);
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    *(_DWORD *)buf = 67109890;
    v55 = v15;
    v56 = 2082;
    v57 = object_getClassName((id)v1);
    v58 = 2082;
    v59 = sel_getName("expressModesActive");
    v60 = 1024;
    v61 = 738;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i EMM Test mode : YES", buf, 0x22u);
  }

  return 1;
}

uint64_t sub_100042050(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v9;
  id v10;
  void *v11;

  v1 = a1;
  if (a1)
  {
    v2 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_1002699AA, 7);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "NF_asHexString"));

    v4 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_1002699B1, 7);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "NF_asHexString"));

    v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_1002699B8, 9);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "NF_asHexString"));

    if ((sub_1000421D0(v1, v3) & 1) != 0 || (sub_1000421D0(v1, v5) & 1) != 0 || (sub_1000421D0(v1, v7) & 1) != 0)
    {
      v1 = 1;
    }
    else
    {
      v9 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.stockholm"));
      if (objc_msgSend(v9, "BOOLForKey:", CFSTR("PtaAidForStepUpOperation")))
      {
        v10 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_1002699C1, 13);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "NF_asHexString"));

        v1 = sub_1000421D0(v1, v11);
      }
      else
      {
        v1 = 0;
      }

    }
  }
  return v1;
}

uint64_t sub_1000421D0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v3 = a2;
  v4 = objc_msgSend(v3, "length");
  v5 = *(_QWORD **)(a1 + 40);
  if (v5)
    v5 = (_QWORD *)v5[9];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v16;
LABEL_5:
    v10 = 0;
    while (1)
    {
      if (*(_QWORD *)v16 != v9)
        objc_enumerationMutation(v6);
      v11 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v10);
      v12 = objc_msgSend(v3, "length", (_QWORD)v15);
      if (v12 <= objc_msgSend(v11, "length"))
      {
        v13 = 1;
        if (!objc_msgSend(v11, "compare:options:range:", v3, 1, 0, v4))
          break;
      }
      if (v8 == (id)++v10)
      {
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v8)
          goto LABEL_5;
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v13 = 0;
  }

  return v13;
}

id sub_100042330(_QWORD *a1)
{
  id v1;
  _QWORD *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  uint64_t v13;
  char isKindOfClass;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  char v18;
  void *v19;
  void *specific;
  uint64_t Logger;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  void *v33;
  uint64_t v34;
  char v35;
  void *v36;
  uint64_t v37;
  char v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  const char *Name;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  id obj;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[6];
  _QWORD v63[6];
  uint8_t buf[4];
  int v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  int v71;
  _BYTE v72[128];

  v1 = a1;
  if (!a1)
    return v1;
  v2 = sub_1000412C0(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (!v3)
  {
    v1 = 0;
    goto LABEL_34;
  }
  v4 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_1002699AA, 7);
  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "NF_asHexString"));

  v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_1002699B1, 7);
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "NF_asHexString"));

  v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_1002699B8, 9);
  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "NF_asHexString"));

  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  obj = v3;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v72, 16);
  v47 = v3;
  if (!v7)
  {
    v49 = 0;
    v50 = 0;
    v48 = 0;
    v52 = 0;
    v53 = 0;
    v55 = 0;
    goto LABEL_33;
  }
  v8 = v7;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v52 = 0;
  v53 = 0;
  v55 = 0;
  v9 = *(_QWORD *)v59;
  do
  {
    for (i = 0; i != v8; i = (char *)i + 1)
    {
      if (*(_QWORD *)v59 != v9)
        objc_enumerationMutation(obj);
      v11 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * (_QWORD)i);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
      v13 = objc_opt_class(NSString);
      isKindOfClass = objc_opt_isKindOfClass(v12, v13);

      if ((isKindOfClass & 1) != 0)
      {
        v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
        if (-[NSObject hasPrefix:](v15, "hasPrefix:", v56))
        {
          ++v55;
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
          v17 = objc_opt_class(NSNumber);
          v18 = objc_opt_isKindOfClass(v16, v17);

          if ((v18 & 1) == 0)
            goto LABEL_28;
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
          v52 += objc_msgSend(v19, "BOOLValue");
          goto LABEL_27;
        }
        if (-[NSObject hasPrefix:](v15, "hasPrefix:", v54))
        {
          ++v53;
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
          v34 = objc_opt_class(NSNumber);
          v35 = objc_opt_isKindOfClass(v33, v34);

          if ((v35 & 1) == 0)
            goto LABEL_28;
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
          v49 += objc_msgSend(v19, "BOOLValue");
          goto LABEL_27;
        }
        if (-[NSObject hasPrefix:](v15, "hasPrefix:", v51))
        {
          ++v50;
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
          v37 = objc_opt_class(NSNumber);
          v38 = objc_opt_isKindOfClass(v36, v37);

          if ((v38 & 1) != 0)
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
            v48 += objc_msgSend(v19, "BOOLValue");
LABEL_27:

          }
        }
      }
      else
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v22 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(v1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(v1);
          Name = sel_getName("unifiedAccessKeysStatistics");
          v26 = 45;
          if (isMetaClass)
            v26 = 43;
          v22(3, "%c[%{public}s %{public}s]:%i pass found with invalid AID. Skipping...", v26, ClassName, Name, 831);
        }
        v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v28 = NFSharedLogGetLogger(v27);
        v15 = objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          v29 = object_getClass(v1);
          if (class_isMetaClass(v29))
            v30 = 43;
          else
            v30 = 45;
          v31 = object_getClassName(v1);
          v32 = sel_getName("unifiedAccessKeysStatistics");
          *(_DWORD *)buf = 67109890;
          v65 = v30;
          v66 = 2082;
          v67 = v31;
          v68 = 2082;
          v69 = v32;
          v70 = 1024;
          v71 = 831;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i pass found with invalid AID. Skipping...", buf, 0x22u);
        }
      }
LABEL_28:

    }
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v72, 16);
  }
  while (v8);
LABEL_33:

  v62[0] = CFSTR("totalHomePasses");
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v55));
  v63[0] = v39;
  v62[1] = CFSTR("totalHomeExpressEnabledPasses");
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v52));
  v63[1] = v40;
  v62[2] = CFSTR("totalServerPasses");
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v53));
  v63[2] = v41;
  v62[3] = CFSTR("totalServerExpressEnabledPasses");
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v49));
  v63[3] = v42;
  v62[4] = CFSTR("totalAcwgPasses");
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v50));
  v63[4] = v43;
  v62[5] = CFSTR("totalAcwgExpressEnabledPasses");
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v48));
  v63[5] = v44;
  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v63, v62, 6));

  v3 = v47;
LABEL_34:

  return v1;
}

id sub_100042948(_QWORD *a1)
{
  id v2;
  id v3;
  id v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  char isKindOfClass;
  void *v14;
  uint64_t v15;
  char v16;
  void *v17;
  void *v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  char v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  char v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  char v39;
  void *v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  char v44;
  void *v45;
  void *v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  char v50;
  void *v51;
  BOOL v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  id obj;
  uint64_t v75;
  void *v76;
  id v77;
  void *v78;
  NSMutableDictionary *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[5];
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _QWORD v104[12];
  _QWORD v105[12];
  _BYTE v106[128];
  _BYTE v107[128];

  if (!a1)
    return 0;
  v79 = objc_opt_new(NSMutableDictionary);
  v2 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_1002699AA, 7);
  v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "NF_asHexString"));

  v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_1002699B1, 7);
  v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "NF_asHexString"));

  v4 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_1002699B8, 9);
  v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "NF_asHexString"));

  v5 = sub_1000412C0(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v65 = v6;
  if (!v6)
  {
    v55 = 0;
    goto LABEL_55;
  }
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  obj = v6;
  v77 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v100, v107, 16);
  if (!v77)
  {
    v86 = 0;
    v87 = 0;
    v66 = 0;
    v89 = 0;
    v90 = 0;
    v88 = 0;
    v7 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v72 = 0;
    goto LABEL_54;
  }
  v86 = 0;
  v87 = 0;
  v66 = 0;
  v89 = 0;
  v90 = 0;
  v88 = 0;
  v7 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v72 = 0;
  v75 = *(_QWORD *)v101;
  do
  {
    v8 = 0;
    do
    {
      if (*(_QWORD *)v101 != v75)
      {
        v9 = v8;
        objc_enumerationMutation(obj);
        v8 = v9;
      }
      v80 = v8;
      v10 = *(void **)(*((_QWORD *)&v100 + 1) + 8 * v8);
      v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("passUniqueID")));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
      v12 = objc_opt_class(NSString);
      isKindOfClass = objc_opt_isKindOfClass(v11, v12);

      if ((isKindOfClass & 1) != 0)
      {
        v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
        if (objc_msgSend(v82, "hasPrefix:", v76))
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
          v15 = objc_opt_class(NSNumber);
          v16 = objc_opt_isKindOfClass(v14, v15);

          ++v72;
          if ((v16 & 1) != 0)
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
            v69 += objc_msgSend(v17, "BOOLValue");
            goto LABEL_41;
          }
          goto LABEL_42;
        }
        if (objc_msgSend(v82, "hasPrefix:", v73))
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
          v19 = objc_opt_class(NSNumber);
          v20 = objc_opt_isKindOfClass(v18, v19);

          ++v70;
          if ((v20 & 1) != 0)
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
            v68 += objc_msgSend(v17, "BOOLValue");
            goto LABEL_41;
          }
          goto LABEL_42;
        }
        if (!objc_msgSend(v82, "hasPrefix:", v71))
          goto LABEL_42;
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("associatedReaders")));
        v22 = objc_opt_class(NSArray);
        v23 = objc_opt_isKindOfClass(v21, v22);

        if ((v23 & 1) != 0)
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("associatedReaders")));
          v25 = v24;
          if (v24)
            v66 += (uint64_t)objc_msgSend(v24, "count");

        }
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("ECP2Info")));
        v27 = objc_opt_class(NSDictionary);
        v28 = objc_opt_isKindOfClass(v26, v27);

        if ((v28 & 1) == 0)
        {
LABEL_42:
          if ((objc_msgSend(v82, "hasPrefix:", v76) & 1) != 0
            || (objc_msgSend(v82, "hasPrefix:", v73) & 1) != 0
            || objc_msgSend(v82, "hasPrefix:", v71))
          {
            v51 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary valueForKey:](v79, "valueForKey:", v84));
            v52 = v51 == 0;

            if (v52)
            {
              -[NSMutableDictionary setObject:forKeyedSubscript:](v79, "setObject:forKeyedSubscript:", &off_1002FDD28, v84);
            }
            else
            {
              v53 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary valueForKey:](v79, "valueForKey:", v84));
              v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v53, "intValue") + 1));

              -[NSMutableDictionary setObject:forKeyedSubscript:](v79, "setObject:forKeyedSubscript:", v54, v84);
            }
          }

          goto LABEL_49;
        }
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("ECP2Info")));
        v67 = v29;
        if (!v29)
        {
          v17 = 0;
LABEL_41:

          goto LABEL_42;
        }
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKeyedSubscript:", CFSTR("TCIs")));
        v98 = 0u;
        v99 = 0u;
        v96 = 0u;
        v97 = 0u;
        v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v96, v106, 16);
        if (!v31)
          goto LABEL_39;
        v32 = *(_QWORD *)v97;
        while (2)
        {
          v33 = 0;
LABEL_25:
          if (*(_QWORD *)v97 != v32)
            objc_enumerationMutation(v30);
          v34 = *(void **)(*((_QWORD *)&v96 + 1) + 8 * v33);
          v35 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_1002699CE, 3);
          v36 = objc_msgSend(v34, "isEqual:", v35);

          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
          v38 = objc_opt_class(NSNumber);
          v39 = objc_opt_isKindOfClass(v37, v38);

          if (v36)
          {
            if ((v39 & 1) != 0)
            {
              v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
              v41 = objc_msgSend(v40, "BOOLValue");

              v88 += v41;
            }
            v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("UWBExpressEnabled")));
            v43 = objc_opt_class(NSNumber);
            v44 = objc_opt_isKindOfClass(v42, v43);

            ++v7;
            if ((v44 & 1) != 0)
            {
              v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("UWBExpressEnabled")));
              v86 += objc_msgSend(v45, "BOOLValue");
              goto LABEL_36;
            }
          }
          else
          {
            if ((v39 & 1) != 0)
            {
              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
              v47 = objc_msgSend(v46, "BOOLValue");

              v89 += v47;
            }
            v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("UWBExpressEnabled")));
            v49 = objc_opt_class(NSNumber);
            v50 = objc_opt_isKindOfClass(v48, v49);

            ++v90;
            if ((v50 & 1) != 0)
            {
              v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("UWBExpressEnabled")));
              v87 += objc_msgSend(v45, "BOOLValue");
LABEL_36:

            }
          }
          if (v31 == (id)++v33)
          {
            v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v96, v106, 16);
            if (!v31)
            {
LABEL_39:

              v17 = v67;
              goto LABEL_41;
            }
            continue;
          }
          goto LABEL_25;
        }
      }
LABEL_49:

      v8 = v80 + 1;
    }
    while ((id)(v80 + 1) != v77);
    v77 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v100, v107, 16);
  }
  while (v77);
LABEL_54:

  v92 = 0;
  v93 = &v92;
  v94 = 0x2020000000;
  v95 = 0;
  v91[0] = _NSConcreteStackBlock;
  v91[1] = 3221225472;
  v91[2] = sub_1000433A8;
  v91[3] = &unk_1002E5120;
  v91[4] = &v92;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](v79, "enumerateKeysAndObjectsUsingBlock:", v91);
  v104[0] = CFSTR("uaHomePasses");
  v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v72));
  v105[0] = v85;
  v104[1] = CFSTR("uaHomeExpressEnabledPasses");
  v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v69));
  v105[1] = v83;
  v104[2] = CFSTR("uaServerPasses");
  v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v70));
  v105[2] = v81;
  v104[3] = CFSTR("uaServerExpressEnabledPasses");
  v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v68));
  v105[3] = v78;
  v104[4] = CFSTR("aliroHomePasses");
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v7));
  v105[4] = v56;
  v104[5] = CFSTR("aliroHomeExpressEnabledPasses");
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v88));
  v105[5] = v57;
  v104[6] = CFSTR("aliroServerPasses");
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v90));
  v105[6] = v58;
  v104[7] = CFSTR("aliroServerExpressEnabledPasses");
  v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v89));
  v105[7] = v59;
  v104[8] = CFSTR("aliroHomeUWBExpressEnabledPasses");
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v86));
  v105[8] = v60;
  v104[9] = CFSTR("aliroServerUWBExpressEnabledPasses");
  v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v87));
  v105[9] = v61;
  v104[10] = CFSTR("aliroAuxKeyCount");
  v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v66));
  v105[10] = v62;
  v104[11] = CFSTR("multiHomePasses");
  v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v93[3]));
  v105[11] = v63;
  v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v105, v104, 12));

  _Block_object_dispose(&v92, 8);
LABEL_55:

  return v55;
}

void sub_100043384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_1000433A8(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  uint64_t v8;
  char isKindOfClass;
  uint64_t v10;
  BOOL v11;
  void *v12;
  id v13;

  v13 = a3;
  v7 = a2;
  v8 = objc_opt_class(NSString);
  isKindOfClass = objc_opt_isKindOfClass(v7, v8);

  if ((isKindOfClass & 1) != 0
    && (v10 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v13, v10) & 1) != 0))
  {
    v11 = (int)objc_msgSend(v13, "intValue") < 2;
    v12 = v13;
    if (!v11)
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    *a4 = 1;
    v12 = v13;
  }

}

id sub_100043468(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  _QWORD *obj;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  _BYTE v37[128];

  v5 = a2;
  v6 = a3;
  v7 = 0;
  if (!a1 || !v5)
    goto LABEL_22;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v8 = *(_QWORD **)(a1 + 40);
  if (v8)
    v8 = (_QWORD *)v8[2];
  obj = v8;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
  if (!v7)
    goto LABEL_21;
  v9 = *(_QWORD *)v30;
  while (2)
  {
    for (i = 0; i != v7; i = (char *)i + 1)
    {
      if (*(_QWORD *)v30 != v9)
        objc_enumerationMutation(obj);
      v11 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
      v13 = objc_msgSend(v5, "caseInsensitiveCompare:", v12);
      v14 = v13;
      if (v6)
      {
        if (v13)
        {

          continue;
        }
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("keyIdentifier")));
        v16 = objc_msgSend(v6, "caseInsensitiveCompare:", v15);

        if (!v16)
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("UWBExpressEnabled")));
          v24 = objc_msgSend(v23, "BOOLValue");

          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
          v26 = objc_msgSend(v25, "BOOLValue");

          v35[0] = CFSTR("supportsUWB");
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v24));
          v35[1] = CFSTR("expressEnabled");
          v36[0] = v19;
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v26));
          v36[1] = v20;
          v21 = v36;
          v22 = v35;
          goto LABEL_20;
        }
      }
      else
      {

        if (!v14)
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
          v18 = objc_msgSend(v17, "BOOLValue");

          v33[0] = CFSTR("supportsUWB");
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
          v33[1] = CFSTR("expressEnabled");
          v34[0] = v19;
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v18));
          v34[1] = v20;
          v21 = v34;
          v22 = v33;
LABEL_20:
          v7 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v22, 2));

          goto LABEL_21;
        }
      }
    }
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
    if (v7)
      continue;
    break;
  }
LABEL_21:

LABEL_22:
  return v7;
}

uint64_t sub_100043748(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v3 = a2;
  if (a1)
  {
    v4 = *(_QWORD **)(a1 + 40);
    if (v4)
      v4 = (_QWORD *)v4[9];
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v5 = v4;
    v6 = (uint64_t)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v11;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v11 != v7)
            objc_enumerationMutation(v5);
          if (!objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "caseInsensitiveCompare:", v3, (_QWORD)v10))
          {
            v6 = 1;
            goto LABEL_14;
          }
        }
        v6 = (uint64_t)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_14:

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t sub_100043870(uint64_t a1, void *a2, void *a3)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned __int8 v22;
  id v24;
  void *v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  v26 = a2;
  v24 = a3;
  if (a1)
  {
    v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_1002699B8, 9);
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "NF_asHexString"));

    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v6 = *(_QWORD **)(a1 + 40);
    if (v6)
      v6 = (_QWORD *)v6[2];
    v7 = v6;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v28;
LABEL_6:
      v11 = 0;
      while (1)
      {
        if (*(_QWORD *)v28 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
        v14 = objc_msgSend(v13, "BOOLValue");

        if (!v14)
          goto LABEL_22;
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("keyIdentifier")));

        if (!v15)
          goto LABEL_22;
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
        if (objc_msgSend(v16, "hasPrefix:", v25))
        {
          if (!objc_msgSend(v26, "caseInsensitiveCompare:", v16))
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("keyIdentifier")));
            v18 = objc_msgSend(v24, "containsObject:", v17);

            if ((v18 & 1) != 0)
            {
LABEL_25:

              a1 = 1;
              goto LABEL_26;
            }
          }
          goto LABEL_21;
        }
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
        if (!objc_msgSend(v26, "caseInsensitiveCompare:", v19))
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("keyIdentifier")));
          if ((objc_msgSend(v24, "containsObject:", v20) & 1) != 0)
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("UWBExpressEnabled")));
            v22 = objc_msgSend(v21, "BOOLValue");

            if ((v22 & 1) == 0)
              goto LABEL_25;
            goto LABEL_21;
          }

        }
LABEL_21:

LABEL_22:
        if (v9 == (id)++v11)
        {
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
          if (v9)
            goto LABEL_6;
          break;
        }
      }
    }
    a1 = 0;
LABEL_26:

  }
  return a1;
}

void sub_100043B30(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  sub_1000EC8E8(v2, a1, 0);

}

void sub_100043B7C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  void *v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  const char *ClassName;
  const char *Name;
  char v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  void *v40;

  if (a1)
  {
    v2 = NFSharedSignpostLog(a1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EXPRESS_UPDATE_APPLETS", "in", buf, 2u);
    }

    v4 = sub_1001F84C8(*(void **)(a1 + 16), CFSTR("ExpressUpdate"), 1uLL);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v8 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("updateExpressAppletCache");
        v11 = 45;
        if (isMetaClass)
          v11 = 43;
        v8(3, "%c[%{public}s %{public}s]:%i Failed to open session : %@", v11, ClassName, Name, 1079, v5);
      }
      v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v13 = NFSharedLogGetLogger(v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = object_getClass((id)a1);
        if (class_isMetaClass(v15))
          v16 = 43;
        else
          v16 = 45;
        v17 = object_getClassName((id)a1);
        v18 = sel_getName("updateExpressAppletCache");
        *(_DWORD *)buf = 67110146;
        v32 = v16;
        v33 = 2082;
        v34 = v17;
        v35 = 2082;
        v36 = v18;
        v37 = 1024;
        v38 = 1079;
        v39 = 2112;
        v40 = v5;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session : %@", buf, 0x2Cu);
      }

    }
    else
    {
      v30 = 0;
      v19 = *(void **)(a1 + 40);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifier"));
      v21 = objc_msgSend(v19, "updateExpressConfigLimitedTo:andActivate:hasChanged:", v20, 0, &v30);

      if (v30)
      {
        sub_100043B30((uint64_t)"com.apple.stockholm.express.applets.updated");
        v23 = NFSharedSignpostLog(v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_signpost_enabled(v24))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EXPRESS_MODE_APPLETS_UPDATED_NOTIFICATION", "com.apple.stockholm.express.applets.updated", buf, 2u);
        }

      }
      sub_1001FABB8(*(void **)(a1 + 16), CFSTR("ExpressUpdate"));
      v26 = NFSharedSignpostLog(v25);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_signpost_enabled(v27))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EXPRESS_UPDATE_APPLETS", "out", buf, 2u);
      }

    }
  }
}

uint64_t sub_100043E98(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    if (a2)
    {
      v2 = *(_QWORD *)(result + 40);
      if (v2)
        LOBYTE(v2) = vaddvq_s64(vaddq_s64(*(int64x2_t *)(v2 + 24), *(int64x2_t *)(v2 + 40)))
                   + *(_QWORD *)(v2 + 56)
                   + *(_QWORD *)(v2 + 64) != 0;
    }
    else
    {
      LOBYTE(v2) = 0;
    }
    v3 = *(_QWORD *)(result + 16);
    if (v3)
      *(_BYTE *)(v3 + 220) = v2;
  }
  return result;
}

BOOL sub_100043EE4(id val, double a2)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *Name;
  _QWORD v22[4];
  id v23[3];
  id location;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;

  if (val)
  {
    if (*((_QWORD *)val + 17) == 1)
    {
      *((_BYTE *)val + 169) = 1;
      v4 = (void *)*((_QWORD *)val + 9);
      if (!v4)
      {
        objc_initWeak(&location, val);
        v5 = objc_alloc((Class)NFTimer);
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472;
        v22[2] = sub_100044170;
        v22[3] = &unk_1002E5B40;
        objc_copyWeak(v23, &location);
        v23[1] = "restartExpressModeAfter:";
        v23[2] = *(id *)&a2;
        v6 = objc_msgSend(v5, "initWithCallback:queue:", v22, *((_QWORD *)val + 15));
        v7 = (void *)*((_QWORD *)val + 9);
        *((_QWORD *)val + 9) = v6;

        objc_destroyWeak(v23);
        objc_destroyWeak(&location);
        v4 = (void *)*((_QWORD *)val + 9);
      }
      objc_msgSend(v4, "stopTimer");
      objc_msgSend(*((id *)val + 9), "startTimer:leeway:", a2, 0.5);
    }
    else
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v10 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(val);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(val);
        Name = sel_getName("restartExpressModeAfter:");
        v14 = 45;
        if (isMetaClass)
          v14 = 43;
        v10(6, "%c[%{public}s %{public}s]:%i express is disabled - skipping", v14, ClassName, Name, 1149);
      }
      v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v16 = NFSharedLogGetLogger(v15);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = object_getClass(val);
        if (class_isMetaClass(v18))
          v19 = 43;
        else
          v19 = 45;
        LODWORD(location) = 67109890;
        HIDWORD(location) = v19;
        v25 = 2082;
        v26 = object_getClassName(val);
        v27 = 2082;
        v28 = sel_getName("restartExpressModeAfter:");
        v29 = 1024;
        v30 = 1149;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i express is disabled - skipping", (uint8_t *)&location, 0x22u);
      }

    }
  }
  return val != 0;
}

void sub_100044144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100044170(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  void *v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  _BYTE state[18];
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;

  v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.express.restartTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v2, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    *((_BYTE *)WeakRetained + 169) = 0;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v4);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v4);
      Name = sel_getName(*(SEL *)(a1 + 40));
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v7(6, "%c[%{public}s %{public}s]:%i Attempt to re-enabling express mode after %f", v12, ClassName, Name, 1169, *(_QWORD *)(a1 + 48));
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = object_getClass(v4);
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      v18 = object_getClassName(v4);
      v19 = sel_getName(*(SEL *)(a1 + 40));
      v20 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)state = 67110146;
      *(_DWORD *)&state[4] = v17;
      *(_WORD *)&state[8] = 2082;
      *(_QWORD *)&state[10] = v18;
      v23 = 2082;
      v24 = v19;
      v25 = 1024;
      v26 = 1169;
      v27 = 2048;
      v28 = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Attempt to re-enabling express mode after %f", state, 0x2Cu);
    }

    v21 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    objc_msgSend(v21, "maybeStartNextSession");

  }
}

BOOL sub_100044370(_BOOL8 result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = *(_QWORD **)(result + 40);
    return v1
        && (v1[5] && (*(_BYTE *)(result + 152) & 2) != 0
         || v1[6] && (*(_BYTE *)(result + 152) & 4) != 0
         || v1[8] && (*(_BYTE *)(result + 152) & 0x20) != 0
         || v1[7] && (*(_BYTE *)(result + 152) & 0x10) != 0
         || v1[3] && (*(_BYTE *)(result + 152) & 1) != 0
         || v1[4] && (*(_BYTE *)(result + 152) & 1) != 0);
  }
  return result;
}

_BYTE *sub_1000443EC(_BYTE *a1, void *a2)
{
  _BYTE *v2;

  if (a1)
  {
    v2 = sub_10004440C(a1, a2, 1);
    a1 = (_BYTE *)objc_claimAutoreleasedReturnValue(v2);
  }
  return a1;
}

_BYTE *sub_10004440C(_BYTE *a1, void *a2, int a3)
{
  _BYTE *v3;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  id v10;

  v3 = a1;
  if (a1)
  {
    v5 = a2;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "secureElementWrapper"));
    v8 = v7;
    if (a3)
      v9 = v3[170] == 0;
    else
      v9 = 0;
    v10 = sub_10022F310(v7, v5, v9);
    v3 = (_BYTE *)objc_claimAutoreleasedReturnValue(v10);

  }
  return v3;
}

id sub_1000444A8(_BYTE *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void (*v26)(uint64_t, const char *, ...);
  objc_class *v27;
  _BOOL4 v28;
  id v29;
  _QWORD *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  id v37;
  _QWORD *v38;
  int v39;
  objc_class *v40;
  _BOOL4 v41;
  id v42;
  _QWORD *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  NSObject *v48;
  objc_class *v49;
  id v50;
  _QWORD *v51;
  int v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void (*v58)(uint64_t, const char *, ...);
  objc_class *v59;
  _BOOL4 v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  NSObject *v65;
  objc_class *v66;
  int v67;
  const char *v68;
  const char *v69;
  void *v70;
  id v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void (*v76)(uint64_t, const char *, ...);
  objc_class *v77;
  _BOOL4 v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  NSObject *v82;
  objc_class *v83;
  int v84;
  const char *v85;
  const char *v86;
  id v87;
  id v88;
  id v89;
  void *v90;
  id v91;
  void *v92;
  id v93;
  id v94;
  void *v95;
  const char *v97;
  const char *v98;
  const char *v99;
  const char *Name;
  const char *v101;
  const char *v102;
  const char *v103;
  const char *v104;
  id v105;
  id v106;
  _QWORD v107[5];
  _QWORD v108[5];
  _QWORD v109[4];
  _QWORD v110[4];
  uint8_t buf[4];
  int v112;
  __int16 v113;
  const char *v114;
  __int16 v115;
  const char *v116;
  __int16 v117;
  int v118;
  __int16 v119;
  id v120;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "secureElementWrapper"));
  if (a1[170])
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v10 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_secureElementWrapperForApplet:");
      v14 = 45;
      if (isMetaClass)
        v14 = 43;
      v10(6, "%c[%{public}s %{public}s]:%i Test mode - USING ESE", v14, ClassName, Name, 1223);
    }
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = object_getClass(a1);
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      *(_DWORD *)buf = 67109890;
      v112 = v19;
      v113 = 2082;
      v114 = object_getClassName(a1);
      v115 = 2082;
      v116 = sel_getName("_secureElementWrapperForApplet:");
      v117 = 1024;
      v118 = 1223;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Test mode - USING ESE", buf, 0x22u);
    }

    v20 = v7;
  }
  else
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    v22 = sub_10022F2F0(v7, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

    v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v25 = NFLogGetLogger(v24);
    v26 = (void (*)(uint64_t, const char *, ...))v25;
    if (v23)
    {
      if (v25)
      {
        v27 = object_getClass(a1);
        v28 = class_isMetaClass(v27);
        v29 = v5;
        v30 = a3;
        v31 = object_getClassName(a1);
        v101 = sel_getName("_secureElementWrapperForApplet:");
        v32 = 45;
        if (v28)
          v32 = 43;
        v97 = v31;
        a3 = v30;
        v5 = v29;
        v26(6, "%c[%{public}s %{public}s]:%i USING ESE", v32, v97, v101, 1229);
      }
      v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v34 = NFSharedLogGetLogger(v33);
      v35 = objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        v36 = object_getClass(a1);
        v37 = v5;
        v38 = a3;
        if (class_isMetaClass(v36))
          v39 = 43;
        else
          v39 = 45;
        *(_DWORD *)buf = 67109890;
        v112 = v39;
        a3 = v38;
        v5 = v37;
        v113 = 2082;
        v114 = object_getClassName(a1);
        v115 = 2082;
        v116 = sel_getName("_secureElementWrapperForApplet:");
        v117 = 1024;
        v118 = 1229;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i USING ESE", buf, 0x22u);
      }

      v20 = v7;
    }
    else
    {
      if (v25)
      {
        v40 = object_getClass(a1);
        v41 = class_isMetaClass(v40);
        v42 = v5;
        v43 = a3;
        v44 = object_getClassName(a1);
        v102 = sel_getName("_secureElementWrapperForApplet:");
        v45 = 45;
        if (v41)
          v45 = 43;
        v98 = v44;
        a3 = v43;
        v5 = v42;
        v26(3, "%c[%{public}s %{public}s]:%i NO SE FOUND", v45, v98, v102, 1233);
      }
      v46 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v47 = NFSharedLogGetLogger(v46);
      v48 = objc_claimAutoreleasedReturnValue(v47);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        v49 = object_getClass(a1);
        v50 = v5;
        v51 = a3;
        if (class_isMetaClass(v49))
          v52 = 43;
        else
          v52 = 45;
        *(_DWORD *)buf = 67109890;
        v112 = v52;
        a3 = v51;
        v5 = v50;
        v113 = 2082;
        v114 = object_getClassName(a1);
        v115 = 2082;
        v116 = sel_getName("_secureElementWrapperForApplet:");
        v117 = 1024;
        v118 = 1233;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i NO SE FOUND", buf, 0x22u);
      }

      v20 = 0;
    }

  }
  if (v20)
  {
    v53 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig embeddedWiredMode](NFRoutingConfig, "embeddedWiredMode"));
    v54 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "setRoutingConfig:", v53));

    if (!v55)
    {
      v91 = v20;
      goto LABEL_64;
    }
    v56 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v57 = NFLogGetLogger(v56);
    if (v57)
    {
      v58 = (void (*)(uint64_t, const char *, ...))v57;
      v59 = object_getClass(a1);
      v60 = class_isMetaClass(v59);
      v61 = object_getClassName(a1);
      v103 = sel_getName("_activateSecureElementForApplet:outError:");
      v62 = 45;
      if (v60)
        v62 = 43;
      v58(3, "%c[%{public}s %{public}s]:%i Failed to set SE to wired mode", v62, v61, v103, 1267);
    }
    v63 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v64 = NFSharedLogGetLogger(v63);
    v65 = objc_claimAutoreleasedReturnValue(v64);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      v66 = object_getClass(a1);
      if (class_isMetaClass(v66))
        v67 = 43;
      else
        v67 = 45;
      v68 = object_getClassName(a1);
      v69 = sel_getName("_activateSecureElementForApplet:outError:");
      *(_DWORD *)buf = 67109890;
      v112 = v67;
      v113 = 2082;
      v114 = v68;
      v115 = 2082;
      v116 = v69;
      v117 = 1024;
      v118 = 1267;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set SE to wired mode", buf, 0x22u);
    }

    if (a3)
    {
      v106 = v5;
      v105 = objc_alloc((Class)NSError);
      v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v71 = objc_msgSend(v55, "code");
      v107[0] = NSLocalizedDescriptionKey;
      v72 = a3;
      if ((uint64_t)objc_msgSend(v55, "code") > 70)
        v73 = 71;
      else
        v73 = (uint64_t)objc_msgSend(v55, "code");
      v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E58F8[v73]));
      v108[0] = v92;
      v108[1] = v55;
      v107[1] = NSUnderlyingErrorKey;
      v107[2] = CFSTR("Line");
      v108[2] = &off_1002FDD58;
      v107[3] = CFSTR("Method");
      v93 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_activateSecureElementForApplet:outError:"));
      v108[3] = v93;
      v107[4] = NSDebugDescriptionErrorKey;
      v94 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_activateSecureElementForApplet:outError:"), 1269);
      v108[4] = v94;
      v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v108, v107, 5));
      *v72 = objc_msgSend(v105, "initWithDomain:code:userInfo:", v70, v71, v95);

      v91 = 0;
      v5 = v106;
      goto LABEL_64;
    }
LABEL_59:
    v91 = 0;
LABEL_64:

    goto LABEL_65;
  }
  v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v75 = NFLogGetLogger(v74);
  if (v75)
  {
    v76 = (void (*)(uint64_t, const char *, ...))v75;
    v77 = object_getClass(a1);
    v78 = class_isMetaClass(v77);
    v99 = object_getClassName(a1);
    v104 = sel_getName("_activateSecureElementForApplet:outError:");
    v79 = 45;
    if (v78)
      v79 = 43;
    v76(3, "%c[%{public}s %{public}s]:%i Failed to find SE for applet: %{public}@", v79, v99, v104, 1256, v5);
  }
  v80 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v81 = NFSharedLogGetLogger(v80);
  v82 = objc_claimAutoreleasedReturnValue(v81);
  if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
  {
    v83 = object_getClass(a1);
    if (class_isMetaClass(v83))
      v84 = 43;
    else
      v84 = 45;
    v85 = object_getClassName(a1);
    v86 = sel_getName("_activateSecureElementForApplet:outError:");
    *(_DWORD *)buf = 67110146;
    v112 = v84;
    v113 = 2082;
    v114 = v85;
    v115 = 2082;
    v116 = v86;
    v117 = 1024;
    v118 = 1256;
    v119 = 2114;
    v120 = v5;
    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to find SE for applet: %{public}@", buf, 0x2Cu);
  }

  if (a3)
  {
    v87 = objc_alloc((Class)NSError);
    v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v109[0] = NSLocalizedDescriptionKey;
    v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v110[0] = v55;
    v110[1] = &off_1002FDD40;
    v109[1] = CFSTR("Line");
    v109[2] = CFSTR("Method");
    v88 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_activateSecureElementForApplet:outError:"));
    v110[2] = v88;
    v109[3] = NSDebugDescriptionErrorKey;
    v89 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_activateSecureElementForApplet:outError:"), 1258);
    v110[3] = v89;
    v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v110, v109, 4));
    *a3 = objc_msgSend(v87, "initWithDomain:code:userInfo:", v53, 10, v90);

    goto LABEL_59;
  }
  v91 = 0;
LABEL_65:

  return v91;
}

id sub_100044EE4(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  void *specific;
  uint64_t Logger;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  const char *v25;
  const char *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  NSObject *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  id v51;
  id v52;
  id v53;
  _QWORD *v54;
  _QWORD *v55;
  id v56;
  uint64_t v57;
  NSObject *v58;
  id v59;
  void *v60;
  void *v61;
  id v63;
  id v64;
  void *v65;
  id v66;
  _QWORD v67[5];
  _QWORD v68[5];
  _QWORD v69[4];
  _QWORD v70[4];
  _QWORD v71[5];
  _QWORD v72[5];
  _QWORD v73[4];
  _QWORD v74[4];
  uint8_t buf[8];
  _BYTE v76[10];
  __int16 v77;
  const char *v78;
  __int16 v79;
  int v80;
  __int16 v81;
  void *v82;
  __int16 v83;
  id v84;
  _QWORD v85[2];

  v7 = a2;
  v66 = a3;
  v8 = a4;
  v65 = v8;
  if (!a1)
    goto LABEL_31;
  v9 = NFSharedSignpostLog(v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForApplets", "", buf, 2u);
  }

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v13 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("disableAuthorizationForApplets:andKey:authorization:");
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NFApplet aidListForPrinting:](NFApplet, "aidListForPrinting:", v7));
    v19 = 45;
    if (isMetaClass)
      v19 = 43;
    v13(6, "%c[%{public}s %{public}s]:%i applets: %{public}@  key: %{public}@", v19, ClassName, Name, 1283, v18, v66);

  }
  v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v21 = NFSharedLogGetLogger(v20);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = object_getClass(a1);
    if (class_isMetaClass(v23))
      v24 = 43;
    else
      v24 = 45;
    v25 = object_getClassName(a1);
    v26 = sel_getName("disableAuthorizationForApplets:andKey:authorization:");
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NFApplet aidListForPrinting:](NFApplet, "aidListForPrinting:", v7));
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = v24;
    *(_WORD *)v76 = 2082;
    *(_QWORD *)&v76[2] = v25;
    v77 = 2082;
    v78 = v26;
    v79 = 1024;
    v80 = 1283;
    v81 = 2114;
    v82 = v27;
    v83 = 2114;
    v84 = v66;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i applets: %{public}@  key: %{public}@", buf, 0x36u);

  }
  if (!a1[5])
    sub_10003BE3C((uint64_t)a1);
  v28 = objc_msgSend(v7, "count");
  if (!v66)
  {
    if (v28)
    {
      v44 = sub_1000458E8(a1, v7, v65);
      v37 = (void *)objc_claimAutoreleasedReturnValue(v44);
      v45 = NFSharedSignpostLog(v37);
      v46 = objc_claimAutoreleasedReturnValue(v45);
      if (os_signpost_enabled(v46))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForApplets", "for applets", buf, 2u);
      }

      if (v37)
      {
        v47 = objc_alloc((Class)NSError);
        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v64 = objc_msgSend(v37, "code");
        v71[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)objc_msgSend(v37, "code") > 70)
          v48 = 71;
        else
          v48 = (uint64_t)objc_msgSend(v37, "code");
        v52 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E58F8[v48]));
        v72[0] = v52;
        v72[1] = v37;
        v71[1] = NSUnderlyingErrorKey;
        v71[2] = CFSTR("Line");
        v72[2] = &off_1002FDD88;
        v71[3] = CFSTR("Method");
        v53 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("disableAuthorizationForApplets:andKey:authorization:"));
        v72[3] = v53;
        v71[4] = NSDebugDescriptionErrorKey;
        v59 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("disableAuthorizationForApplets:andKey:authorization:"), 1297);
        v72[4] = v59;
        v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v72, v71, 5));
        v56 = objc_msgSend(v47, "initWithDomain:code:userInfo:", v41, v64, v61);

        goto LABEL_40;
      }
      goto LABEL_31;
    }
    v57 = NFSharedSignpostLog(0);
    v58 = objc_claimAutoreleasedReturnValue(v57);
    if (os_signpost_enabled(v58))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v58, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForApplets", "no keys no applets", buf, 2u);
    }

    v51 = objc_alloc((Class)NSError);
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v73[0] = NSLocalizedDescriptionKey;
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v74[0] = v41;
    v74[1] = &off_1002FDD70;
    v73[1] = CFSTR("Line");
    v73[2] = CFSTR("Method");
    v52 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("disableAuthorizationForApplets:andKey:authorization:"));
    v74[2] = v52;
    v73[3] = NSDebugDescriptionErrorKey;
    v53 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("disableAuthorizationForApplets:andKey:authorization:"), 1293);
    v74[3] = v53;
    v54 = v74;
    v55 = v73;
LABEL_35:
    v59 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v54, v55, 4));
    v56 = objc_msgSend(v51, "initWithDomain:code:userInfo:", v37, 10, v59);
LABEL_40:

    goto LABEL_41;
  }
  if (v28 != (id)1)
  {
    v49 = NFSharedSignpostLog(v28);
    v50 = objc_claimAutoreleasedReturnValue(v49);
    if (os_signpost_enabled(v50))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForApplets", "too many applets", buf, 2u);
    }

    v51 = objc_alloc((Class)NSError);
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v69[0] = NSLocalizedDescriptionKey;
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v70[0] = v41;
    v70[1] = &off_1002FDDA0;
    v69[1] = CFSTR("Line");
    v69[2] = CFSTR("Method");
    v52 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("disableAuthorizationForApplets:andKey:authorization:"));
    v70[2] = v52;
    v69[3] = NSDebugDescriptionErrorKey;
    v53 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("disableAuthorizationForApplets:andKey:authorization:"), 1303);
    v70[3] = v53;
    v54 = v70;
    v55 = v69;
    goto LABEL_35;
  }
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", 0));
  v30 = v66;
  v31 = v29;
  v32 = v65;
  v85[0] = CFSTR("appletIdentifier");
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "identifier"));
  v85[1] = CFSTR("keyIdentifier");
  *(_QWORD *)buf = v33;
  *(_QWORD *)v76 = v30;
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, v85, 2));
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", v34));

  v36 = sub_100047718((void **)a1, v35, v31, v32);
  v37 = (void *)objc_claimAutoreleasedReturnValue(v36);

  v39 = NFSharedSignpostLog(v38);
  v40 = objc_claimAutoreleasedReturnValue(v39);
  if (os_signpost_enabled(v40))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForApplets", "for keys", buf, 2u);
  }

  if (v37)
  {
    v63 = objc_alloc((Class)NSError);
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v42 = objc_msgSend(v37, "code");
    v67[0] = NSLocalizedDescriptionKey;
    if ((uint64_t)objc_msgSend(v37, "code") > 70)
      v43 = 71;
    else
      v43 = (uint64_t)objc_msgSend(v37, "code");
    v52 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E58F8[v43]));
    v68[0] = v52;
    v68[1] = v37;
    v67[1] = NSUnderlyingErrorKey;
    v67[2] = CFSTR("Line");
    v68[2] = &off_1002FDDB8;
    v67[3] = CFSTR("Method");
    v53 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("disableAuthorizationForApplets:andKey:authorization:"));
    v68[3] = v53;
    v67[4] = NSDebugDescriptionErrorKey;
    v59 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("disableAuthorizationForApplets:andKey:authorization:"), 1308);
    v68[4] = v59;
    v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v68, v67, 5));
    v56 = objc_msgSend(v63, "initWithDomain:code:userInfo:", v41, v42, v60);

    goto LABEL_40;
  }
LABEL_31:
  v56 = 0;
LABEL_41:

  return v56;
}

id sub_1000458E8(_BYTE *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  void (*v23)(uint64_t, const char *, ...);
  objc_class *v24;
  _BOOL4 v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  void (*v41)(uint64_t, const char *, ...);
  objc_class *v42;
  _BOOL4 v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  objc_class *v48;
  int v49;
  const char *v50;
  const char *v51;
  id v52;
  void *v53;
  uint64_t v54;
  int v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  void *specific;
  uint64_t Logger;
  void (*v63)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  NSObject *v69;
  objc_class *v70;
  int v71;
  const char *v72;
  const char *v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  void *v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  void *v86;
  uint64_t v87;
  void (*v88)(uint64_t, const char *, ...);
  objc_class *v89;
  _BOOL4 v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  NSObject *v94;
  objc_class *v95;
  int v96;
  const char *v97;
  const char *v98;
  void *v99;
  void *v100;
  id v101;
  id v102;
  _QWORD *v103;
  _QWORD *v104;
  void *v105;
  uint64_t v106;
  void (*v107)(uint64_t, const char *, ...);
  objc_class *v108;
  _BOOL4 v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  NSObject *v113;
  objc_class *v114;
  int v115;
  const char *v116;
  const char *v117;
  void *v118;
  uint64_t v119;
  void (*v120)(uint64_t, const char *, ...);
  objc_class *v121;
  _BOOL4 v122;
  const char *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  NSObject *v127;
  objc_class *v128;
  int v129;
  const char *v130;
  const char *v131;
  void *v132;
  id v134;
  const char *v135;
  const char *ClassName;
  const char *v137;
  const char *v138;
  const char *v139;
  const char *Name;
  const char *v141;
  const char *v142;
  const char *v143;
  id v144;
  id v145;
  id v146;
  id v147;
  void *v148;
  id v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  id v154;
  _QWORD v155[4];
  _QWORD v156[4];
  _QWORD v157[4];
  _QWORD v158[4];
  _QWORD v159[4];
  _QWORD v160[4];
  _QWORD v161[4];
  _QWORD v162[4];
  _BYTE v163[128];
  _QWORD v164[4];
  _QWORD v165[4];
  _QWORD v166[5];
  _QWORD v167[5];
  uint8_t buf[4];
  int v169;
  __int16 v170;
  const char *v171;
  __int16 v172;
  const char *v173;
  __int16 v174;
  int v175;
  __int16 v176;
  id v177;

  v5 = a2;
  v149 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", 0));
  v154 = 0;
  v7 = sub_1000444A8(a1, v6, &v154);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = v154;

  if (!v8 || v9)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v63 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_disableAuthOnApplets:authorization:uid:");
      v66 = 45;
      if (isMetaClass)
        v66 = 43;
      v63(3, "%c[%{public}s %{public}s]:%i Failed to load SE for applets: %{public}@", v66, ClassName, Name, 1378, v5);
    }
    v148 = v8;
    v67 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v68 = NFSharedLogGetLogger(v67);
    v69 = objc_claimAutoreleasedReturnValue(v68);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      v70 = object_getClass(a1);
      if (class_isMetaClass(v70))
        v71 = 43;
      else
        v71 = 45;
      v72 = object_getClassName(a1);
      v73 = sel_getName("_disableAuthOnApplets:authorization:uid:");
      *(_DWORD *)buf = 67110146;
      v169 = v71;
      v170 = 2082;
      v171 = v72;
      v172 = 2082;
      v173 = v73;
      v174 = 1024;
      v175 = 1378;
      v176 = 2114;
      v177 = v5;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to load SE for applets: %{public}@", buf, 0x2Cu);
    }

    v74 = objc_alloc((Class)NSError);
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v9)
    {
      v75 = objc_msgSend(v9, "code");
      v166[0] = NSLocalizedDescriptionKey;
      v76 = v10;
      if ((uint64_t)objc_msgSend(v9, "code") > 70)
        v77 = 71;
      else
        v77 = (uint64_t)objc_msgSend(v9, "code");
      v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E58F8[v77]));
      v167[0] = v78;
      v167[1] = v9;
      v166[1] = NSUnderlyingErrorKey;
      v166[2] = CFSTR("Line");
      v167[2] = &off_1002FDE18;
      v166[3] = CFSTR("Method");
      v82 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_disableAuthOnApplets:authorization:uid:"));
      v167[3] = v82;
      v166[4] = NSDebugDescriptionErrorKey;
      v83 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_disableAuthOnApplets:authorization:uid:"), 1379);
      v167[4] = v83;
      v84 = v9;
      v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v167, v166, 5));
      v60 = objc_msgSend(v74, "initWithDomain:code:userInfo:", v76, v75, v85);

      v9 = v84;
      v10 = v76;

    }
    else
    {
      v164[0] = NSLocalizedDescriptionKey;
      v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
      v165[0] = v78;
      v165[1] = &off_1002FDE18;
      v164[1] = CFSTR("Line");
      v164[2] = CFSTR("Method");
      v79 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_disableAuthOnApplets:authorization:uid:"));
      v165[2] = v79;
      v164[3] = NSDebugDescriptionErrorKey;
      v80 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_disableAuthOnApplets:authorization:uid:"), 1379);
      v165[3] = v80;
      v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v165, v164, 4));
      v60 = objc_msgSend(v74, "initWithDomain:code:userInfo:", v10, 6, v81);

    }
    v8 = v148;
  }
  else
  {
    v10 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v5, "count"));
    v150 = 0u;
    v151 = 0u;
    v152 = 0u;
    v153 = 0u;
    v147 = v5;
    v11 = v5;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v150, v163, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v151;
      v146 = 0;
LABEL_5:
      v15 = 0;
      while (1)
      {
        if (*(_QWORD *)v151 != v14)
          objc_enumerationMutation(v11);
        v16 = *(id *)(*((_QWORD *)&v150 + 1) + 8 * v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "identifier"));
        v18 = sub_10022F2F0(v8, v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

        if (v19)
        {
          if ((objc_msgSend(v19, "authTransientConfigurable") & 1) == 0)
          {
            v105 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v106 = NFLogGetLogger(v105);
            if (v106)
            {
              v107 = (void (*)(uint64_t, const char *, ...))v106;
              v108 = object_getClass(a1);
              v109 = class_isMetaClass(v108);
              v138 = object_getClassName(a1);
              v142 = sel_getName("_disableAuthOnApplets:authorization:uid:");
              v110 = 45;
              if (v109)
                v110 = 43;
              v107(3, "%c[%{public}s %{public}s]:%i Applet %{public}@ is not auth transient configurable", v110, v138, v142, 1388, v19);
            }
            v111 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v112 = NFSharedLogGetLogger(v111);
            v113 = objc_claimAutoreleasedReturnValue(v112);
            if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
            {
              v114 = object_getClass(a1);
              if (class_isMetaClass(v114))
                v115 = 43;
              else
                v115 = 45;
              v116 = object_getClassName(a1);
              v117 = sel_getName("_disableAuthOnApplets:authorization:uid:");
              *(_DWORD *)buf = 67110146;
              v169 = v115;
              v170 = 2082;
              v171 = v116;
              v172 = 2082;
              v173 = v117;
              v174 = 1024;
              v175 = 1388;
              v176 = 2114;
              v177 = v19;
              _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Applet %{public}@ is not auth transient configurable", buf, 0x2Cu);
            }

            v145 = objc_alloc((Class)NSError);
            v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v161[0] = NSLocalizedDescriptionKey;
            v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
            v162[0] = v100;
            v162[1] = &off_1002FDE30;
            v161[1] = CFSTR("Line");
            v161[2] = CFSTR("Method");
            v101 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_disableAuthOnApplets:authorization:uid:"));
            v162[2] = v101;
            v161[3] = NSDebugDescriptionErrorKey;
            v102 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_disableAuthOnApplets:authorization:uid:"), 1389);
            v162[3] = v102;
            v103 = v162;
            v104 = v161;
            goto LABEL_88;
          }
          if (objc_msgSend(v19, "lifecycleState") == 130
            || objc_msgSend(v19, "lifecycleState") == 129)
          {
            v86 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v87 = NFLogGetLogger(v86);
            if (v87)
            {
              v88 = (void (*)(uint64_t, const char *, ...))v87;
              v89 = object_getClass(a1);
              v90 = class_isMetaClass(v89);
              v137 = object_getClassName(a1);
              v141 = sel_getName("_disableAuthOnApplets:authorization:uid:");
              v91 = 45;
              if (v90)
                v91 = 43;
              v88(3, "%c[%{public}s %{public}s]:%i Applet %{public}@ is frozen or terminated", v91, v137, v141, 1393, v19);
            }
            v92 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v93 = NFSharedLogGetLogger(v92);
            v94 = objc_claimAutoreleasedReturnValue(v93);
            if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
            {
              v95 = object_getClass(a1);
              if (class_isMetaClass(v95))
                v96 = 43;
              else
                v96 = 45;
              v97 = object_getClassName(a1);
              v98 = sel_getName("_disableAuthOnApplets:authorization:uid:");
              *(_DWORD *)buf = 67110146;
              v169 = v96;
              v170 = 2082;
              v171 = v97;
              v172 = 2082;
              v173 = v98;
              v174 = 1024;
              v175 = 1393;
              v176 = 2114;
              v177 = v19;
              _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Applet %{public}@ is frozen or terminated", buf, 0x2Cu);
            }

            v145 = objc_alloc((Class)NSError);
            v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v159[0] = NSLocalizedDescriptionKey;
            v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
            v160[0] = v100;
            v160[1] = &off_1002FDE48;
            v159[1] = CFSTR("Line");
            v159[2] = CFSTR("Method");
            v101 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_disableAuthOnApplets:authorization:uid:"));
            v160[2] = v101;
            v159[3] = NSDebugDescriptionErrorKey;
            v102 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_disableAuthOnApplets:authorization:uid:"), 1394);
            v160[3] = v102;
            v103 = v160;
            v104 = v159;
            goto LABEL_88;
          }
          v20 = objc_msgSend(v19, "authTransientSupport");
          if (!v149 && v20)
          {
            v118 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v119 = NFLogGetLogger(v118);
            if (v119)
            {
              v120 = (void (*)(uint64_t, const char *, ...))v119;
              v121 = object_getClass(a1);
              v122 = class_isMetaClass(v121);
              v123 = object_getClassName(a1);
              v143 = sel_getName("_disableAuthOnApplets:authorization:uid:");
              v124 = 45;
              if (v122)
                v124 = 43;
              v120(3, "%c[%{public}s %{public}s]:%i Missing authorization", v124, v123, v143, 1398);
            }
            v125 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v126 = NFSharedLogGetLogger(v125);
            v127 = objc_claimAutoreleasedReturnValue(v126);
            if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
            {
              v128 = object_getClass(a1);
              if (class_isMetaClass(v128))
                v129 = 43;
              else
                v129 = 45;
              v130 = object_getClassName(a1);
              v131 = sel_getName("_disableAuthOnApplets:authorization:uid:");
              *(_DWORD *)buf = 67109890;
              v169 = v129;
              v170 = 2082;
              v171 = v130;
              v172 = 2082;
              v173 = v131;
              v174 = 1024;
              v175 = 1398;
              _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing authorization", buf, 0x22u);
            }

            v145 = objc_alloc((Class)NSError);
            v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v157[0] = NSLocalizedDescriptionKey;
            v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
            v158[0] = v100;
            v158[1] = &off_1002FDE60;
            v157[1] = CFSTR("Line");
            v157[2] = CFSTR("Method");
            v101 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_disableAuthOnApplets:authorization:uid:"));
            v158[2] = v101;
            v157[3] = NSDebugDescriptionErrorKey;
            v102 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_disableAuthOnApplets:authorization:uid:"), 1399);
            v158[3] = v102;
            v103 = v158;
            v104 = v157;
LABEL_88:
            v132 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v103, v104, 4));
            v60 = objc_msgSend(v145, "initWithDomain:code:userInfo:", v99, 10, v132);

            goto LABEL_89;
          }
        }
        if (objc_msgSend(v19, "authTransientSupport"))
          objc_msgSend(v10, "addObject:", v19);

        if (v13 == (id)++v15)
        {
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v150, v163, 16);
          v9 = 0;
          if (v13)
            goto LABEL_5;
          break;
        }
      }
    }

    if (objc_msgSend(v10, "count"))
    {
      v146 = v9;
      v21 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v22 = NFLogGetLogger(v21);
      if (v22)
      {
        v23 = (void (*)(uint64_t, const char *, ...))v22;
        v24 = object_getClass(a1);
        v25 = class_isMetaClass(v24);
        v26 = object_getClassName(a1);
        v27 = sel_getName("_disableAuthOnApplets:authorization:uid:");
        v144 = objc_msgSend(v10, "count");
        v28 = 45;
        if (v25)
          v28 = 43;
        v23(6, "%c[%{public}s %{public}s]:%i Disabling transient authorization on %u applets", v28, v26, v27, 1410, v144);
      }
      v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v30 = NFSharedLogGetLogger(v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v32 = object_getClass(a1);
        if (class_isMetaClass(v32))
          v33 = 43;
        else
          v33 = 45;
        v34 = object_getClassName(a1);
        v35 = sel_getName("_disableAuthOnApplets:authorization:uid:");
        v36 = objc_msgSend(v10, "count");
        *(_DWORD *)buf = 67110146;
        v169 = v33;
        v170 = 2082;
        v171 = v34;
        v172 = 2082;
        v173 = v35;
        v174 = 1024;
        v175 = 1410;
        v176 = 1024;
        LODWORD(v177) = v36;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Disabling transient authorization on %u applets", buf, 0x28u);
      }

      v37 = sub_1001E8534(v8, 0, 0xFFFFFFFF, v10, v149);
      v5 = v147;
      if (v37)
      {
        v38 = v37;
        v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v40 = NFLogGetLogger(v39);
        if (v40)
        {
          v41 = (void (*)(uint64_t, const char *, ...))v40;
          v42 = object_getClass(a1);
          v43 = class_isMetaClass(v42);
          v135 = object_getClassName(a1);
          v139 = sel_getName("_disableAuthOnApplets:authorization:uid:");
          v44 = 45;
          if (v43)
            v44 = 43;
          v41(3, "%c[%{public}s %{public}s]:%i Failed to disable transient auth for applets: %{public}@", v44, v135, v139, 1417, v10);
        }
        v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v46 = NFSharedLogGetLogger(v45);
        v47 = objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          v48 = object_getClass(a1);
          if (class_isMetaClass(v48))
            v49 = 43;
          else
            v49 = 45;
          v50 = object_getClassName(a1);
          v51 = sel_getName("_disableAuthOnApplets:authorization:uid:");
          *(_DWORD *)buf = 67110146;
          v169 = v49;
          v170 = 2082;
          v171 = v50;
          v172 = 2082;
          v173 = v51;
          v174 = 1024;
          v175 = 1417;
          v176 = 2114;
          v177 = v10;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to disable transient auth for applets: %{public}@", buf, 0x2Cu);
        }

        v52 = objc_alloc((Class)NSError);
        v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v54 = v38;
        v155[0] = NSLocalizedDescriptionKey;
        if (v38 >= 0x47)
          v55 = 71;
        else
          v55 = v38;
        v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E58F8[v55]));
        v156[0] = v56;
        v156[1] = &off_1002FDE78;
        v155[1] = CFSTR("Line");
        v155[2] = CFSTR("Method");
        v57 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_disableAuthOnApplets:authorization:uid:"));
        v156[2] = v57;
        v155[3] = NSDebugDescriptionErrorKey;
        v58 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_disableAuthOnApplets:authorization:uid:"), 1418);
        v156[3] = v58;
        v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v156, v155, 4));
        v60 = objc_msgSend(v52, "initWithDomain:code:userInfo:", v53, v54, v59);

LABEL_89:
        v5 = v147;
      }
      else
      {
        v134 = sub_10022BED0(v8);
        v60 = 0;
      }
      v9 = v146;
    }
    else
    {
      v60 = 0;
      v5 = v147;
    }
  }

  return v60;
}

id sub_1000469C4(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  id v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v42;
  const char *ClassName;
  const char *Name;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  objc_class *v48;
  int v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  void *v63;
  void (*v64)(uint64_t, const char *, ...);
  objc_class *v65;
  uint64_t v66;
  const char *v67;
  const char *v68;
  void *v69;
  uint64_t v70;
  NSObject *v71;
  objc_class *v72;
  int v73;
  const char *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  id v79;
  id v80;
  void *v81;
  uint64_t v82;
  id v83;
  id v84;
  void *v85;
  void *v87;
  id v88;
  id v89;
  id v90;
  id obj;
  _QWORD v92[5];
  id v93;
  uint8_t *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint8_t buf[8];
  uint8_t *v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  void (*v103)(uint64_t);
  id v104;
  _QWORD v105[5];
  _QWORD v106[5];
  _QWORD v107[5];
  _QWORD v108[5];
  uint8_t v109[4];
  int v110;
  __int16 v111;
  const char *v112;
  __int16 v113;
  const char *v114;
  __int16 v115;
  int v116;
  __int16 v117;
  NSObject *v118;
  _QWORD v119[5];
  _QWORD v120[5];
  _BYTE v121[128];

  v88 = a2;
  v5 = a3;
  v87 = v5;
  if (a1)
  {
    v6 = NFSharedSignpostLog(v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForPasses", "", buf, 2u);
    }

    *(_QWORD *)buf = 0;
    v100 = buf;
    v101 = 0x3032000000;
    v102 = sub_1000476A0;
    v103 = sub_1000476B0;
    v104 = 0;
    if (!a1[5])
      sub_10003BE3C((uint64_t)a1);
    v89 = objc_alloc_init((Class)NSMutableArray);
    v90 = objc_alloc_init((Class)NSMutableDictionary);
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    obj = v88;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v95, v121, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v96;
      while (2)
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v96 != v9)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v95 + 1) + 8 * (_QWORD)i);
          v12 = objc_opt_class(NSDictionary);
          if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0)
          {
            v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
            if (!v13 || (v14 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v13, v14) & 1) == 0))
            {
              specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
              if (Logger)
              {
                Class = object_getClass(a1);
                if (class_isMetaClass(Class))
                  v42 = 43;
                else
                  v42 = 45;
                ClassName = object_getClassName(a1);
                Name = sel_getName("disableAuthorizationForPasses:authorization:");
                Logger(3, "%c[%{public}s %{public}s]:%i Invalid AID type.", v42, ClassName, Name, 1333);
              }
              v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v46 = NFSharedLogGetLogger(v45);
              v47 = objc_claimAutoreleasedReturnValue(v46);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              {
                v48 = object_getClass(a1);
                if (class_isMetaClass(v48))
                  v49 = 43;
                else
                  v49 = 45;
                v50 = object_getClassName(a1);
                v51 = sel_getName("disableAuthorizationForPasses:authorization:");
                *(_DWORD *)v109 = 67109890;
                v110 = v49;
                v111 = 2082;
                v112 = v50;
                v113 = 2082;
                v114 = v51;
                v115 = 1024;
                v116 = 1333;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid AID type.", v109, 0x22u);
              }

              v53 = NFSharedSignpostLog(v52);
              v54 = objc_claimAutoreleasedReturnValue(v53);
              if (os_signpost_enabled(v54))
              {
                *(_WORD *)v109 = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForPasses", "invalid aid", v109, 2u);
              }

              v55 = objc_alloc((Class)NSError);
              v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v119[0] = NSLocalizedDescriptionKey;
              v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
              v120[0] = v57;
              v120[1] = &off_1002FDDD0;
              v119[1] = CFSTR("Line");
              v119[2] = CFSTR("Method");
              v58 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("disableAuthorizationForPasses:authorization:"));
              v120[2] = v58;
              v119[3] = NSDebugDescriptionErrorKey;
              v59 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("disableAuthorizationForPasses:authorization:"), 1335);
              v120[3] = v59;
              v119[4] = NSLocalizedFailureReasonErrorKey;
              v60 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid AID type."));
              v120[4] = v60;
              v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v120, v119, 5));
              v62 = objc_msgSend(v55, "initWithDomain:code:userInfo:", v56, 10, v61);
              goto LABEL_68;
            }
            v15 = sub_1000443EC(a1, v13);
            v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
            if (!v16)
            {
              v63 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v64 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v63);
              if (v64)
              {
                v65 = object_getClass(a1);
                if (class_isMetaClass(v65))
                  v66 = 43;
                else
                  v66 = 45;
                v67 = object_getClassName(a1);
                v68 = sel_getName("disableAuthorizationForPasses:authorization:");
                v64(3, "%c[%{public}s %{public}s]:%i no applet exist for AID: %{public}@", v66, v67, v68, 1340, v13);
              }
              v69 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v70 = NFSharedLogGetLogger(v69);
              v71 = objc_claimAutoreleasedReturnValue(v70);
              if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
              {
                v72 = object_getClass(a1);
                if (class_isMetaClass(v72))
                  v73 = 43;
                else
                  v73 = 45;
                v74 = object_getClassName(a1);
                v75 = sel_getName("disableAuthorizationForPasses:authorization:");
                *(_DWORD *)v109 = 67110146;
                v110 = v73;
                v111 = 2082;
                v112 = v74;
                v113 = 2082;
                v114 = v75;
                v115 = 1024;
                v116 = 1340;
                v117 = 2114;
                v118 = v13;
                _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i no applet exist for AID: %{public}@", v109, 0x2Cu);
              }

              v77 = NFSharedSignpostLog(v76);
              v78 = objc_claimAutoreleasedReturnValue(v77);
              if (os_signpost_enabled(v78))
              {
                *(_WORD *)v109 = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v78, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForPasses", "invalid aid", v109, 2u);
              }

              v79 = objc_alloc((Class)NSError);
              v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v107[0] = NSLocalizedDescriptionKey;
              v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
              v108[0] = v57;
              v108[1] = &off_1002FDDE8;
              v107[1] = CFSTR("Line");
              v107[2] = CFSTR("Method");
              v58 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("disableAuthorizationForPasses:authorization:"));
              v108[2] = v58;
              v107[3] = NSDebugDescriptionErrorKey;
              v59 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("disableAuthorizationForPasses:authorization:"), 1342);
              v108[3] = v59;
              v107[4] = NSLocalizedFailureReasonErrorKey;
              v60 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("no applet for %@"), v13);
              v108[4] = v60;
              v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v108, v107, 5));
              v62 = objc_msgSend(v79, "initWithDomain:code:userInfo:", v56, 10, v61);
LABEL_68:
              v80 = v62;

              goto LABEL_73;
            }
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("keyIdentifier")));

            if (v17)
            {
              v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "objectForKeyedSubscript:", v16));
              if (!v18)
              {
                v18 = objc_alloc_init((Class)NSMutableArray);
                objc_msgSend(v90, "setObject:forKeyedSubscript:", v18, v16);
              }
              objc_msgSend(v18, "addObject:", v11);

            }
            else
            {
              objc_msgSend(v89, "addObject:", v16);
            }

          }
          else
          {
            v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v19);
            if (v20)
            {
              v21 = object_getClass(a1);
              if (class_isMetaClass(v21))
                v22 = 43;
              else
                v22 = 45;
              v23 = object_getClassName(a1);
              v24 = sel_getName("disableAuthorizationForPasses:authorization:");
              v20(3, "%c[%{public}s %{public}s]:%i Invalid pass type.", v22, v23, v24, 1327);
            }
            v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v26 = NFSharedLogGetLogger(v25);
            v13 = objc_claimAutoreleasedReturnValue(v26);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              v27 = object_getClass(a1);
              if (class_isMetaClass(v27))
                v28 = 43;
              else
                v28 = 45;
              v29 = object_getClassName(a1);
              v30 = sel_getName("disableAuthorizationForPasses:authorization:");
              *(_DWORD *)v109 = 67109890;
              v110 = v28;
              v111 = 2082;
              v112 = v29;
              v113 = 2082;
              v114 = v30;
              v115 = 1024;
              v116 = 1327;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid pass type.", v109, 0x22u);
            }
          }

        }
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v95, v121, 16);
        if (v8)
          continue;
        break;
      }
    }

    if (objc_msgSend(v89, "count"))
    {
      v31 = sub_1000458E8(a1, v89, v87);
      v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      if (v32)
        objc_storeStrong((id *)v100 + 5, v32);

    }
    v92[0] = _NSConcreteStackBlock;
    v92[1] = 3221225472;
    v92[2] = sub_1000476B8;
    v92[3] = &unk_1002E5B68;
    v92[4] = a1;
    v93 = v87;
    v94 = buf;
    v33 = NFSharedSignpostLog(objc_msgSend(v90, "enumerateKeysAndObjectsUsingBlock:", v92));
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_signpost_enabled(v34))
    {
      *(_WORD *)v109 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForPasses", "", v109, 2u);
    }

    if (*((_QWORD *)v100 + 5))
    {
      v35 = objc_alloc((Class)NSError);
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v37 = objc_msgSend(*((id *)v100 + 5), "code");
      v105[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(*((id *)v100 + 5), "code") > 70)
        v38 = 71;
      else
        v38 = (uint64_t)objc_msgSend(*((id *)v100 + 5), "code");
      v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E58F8[v38]));
      v82 = *((_QWORD *)v100 + 5);
      v106[0] = v81;
      v106[1] = v82;
      v105[1] = NSUnderlyingErrorKey;
      v105[2] = CFSTR("Line");
      v106[2] = &off_1002FDE00;
      v105[3] = CFSTR("Method");
      v83 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("disableAuthorizationForPasses:authorization:"));
      v106[3] = v83;
      v105[4] = NSDebugDescriptionErrorKey;
      v84 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("disableAuthorizationForPasses:authorization:"), 1368);
      v106[4] = v84;
      v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v106, v105, 5));
      v80 = objc_msgSend(v35, "initWithDomain:code:userInfo:", v36, v37, v85);

    }
    else
    {
      v80 = 0;
    }

LABEL_73:
    _Block_object_dispose(buf, 8);

  }
  else
  {
    v80 = 0;
  }

  return v80;
}

void sub_100047624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000476A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000476B0(uint64_t a1)
{

}

void sub_1000476B8(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;

  v4 = sub_100047718(*(void ***)(a1 + 32), a3, a2, *(void **)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
  {
    v6 = v5;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v5);
    v5 = v6;
  }

}

id sub_100047718(void **a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *specific;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  const char *v22;
  const char *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void (*v33)(uint64_t, const char *, ...);
  objc_class *v34;
  void *v35;
  _BOOL4 v36;
  BOOL v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  objc_class *v42;
  int v43;
  void *v44;
  const char *v45;
  const char *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  uint64_t v56;
  void (*v57)(uint64_t, const char *, ...);
  objc_class *v58;
  _BOOL4 v59;
  void *v60;
  const char *v61;
  const char *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  objc_class *v68;
  int v69;
  const char *v70;
  const char *v71;
  void *v72;
  id v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  const char *v84;
  const char *v85;
  const char *Name;
  const char *v87;
  id v88;
  id v89;
  SEL sel;
  char *sela;
  void *v92;
  void *v93;
  id v94;
  id v95;
  id v96;
  _QWORD v97[5];
  _QWORD v98[5];
  _QWORD v99[4];
  _QWORD v100[4];
  _QWORD v101[4];
  _QWORD v102[4];
  _QWORD v103[5];
  _QWORD v104[5];
  _QWORD v105[4];
  _QWORD v106[4];
  uint8_t buf[4];
  int v108;
  __int16 v109;
  const char *v110;
  __int16 v111;
  const char *v112;
  __int16 v113;
  int v114;
  __int16 v115;
  id v116;
  __int16 v117;
  id v118;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!a1)
  {
    v53 = 0;
    goto LABEL_54;
  }
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v12 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:");
    v16 = 45;
    if (isMetaClass)
      v16 = 43;
    v12(6, "%c[%{public}s %{public}s]:%i AID: %{public}@ keys: %{public}@", v16, ClassName, Name, 1451, v8, v7);
  }
  v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v18 = NFSharedLogGetLogger(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = object_getClass(a1);
    if (class_isMetaClass(v20))
      v21 = 43;
    else
      v21 = 45;
    v22 = object_getClassName(a1);
    v23 = sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:");
    *(_DWORD *)buf = 67110402;
    v108 = v21;
    v109 = 2082;
    v110 = v22;
    v111 = 2082;
    v112 = v23;
    v113 = 1024;
    v114 = 1451;
    v115 = 2114;
    v116 = v8;
    v117 = 2114;
    v118 = v7;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i AID: %{public}@ keys: %{public}@", buf, 0x36u);
  }

  v95 = v9;
  if (!v7 || !objc_msgSend(v7, "count"))
  {
    v47 = v8;
    v54 = objc_alloc((Class)NSError);
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v105[0] = NSLocalizedDescriptionKey;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Success"));
    v106[0] = v30;
    v106[1] = &off_1002FDE90;
    v105[1] = CFSTR("Line");
    v105[2] = CFSTR("Method");
    v48 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"));
    v106[2] = v48;
    v105[3] = NSDebugDescriptionErrorKey;
    v49 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"), 1454);
    v106[3] = v49;
    v50 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v106, v105, 4));
    v53 = objc_msgSend(v54, "initWithDomain:code:userInfo:", v25, 0, v50);
LABEL_52:

    v8 = v47;
    goto LABEL_53;
  }
  v96 = 0;
  v24 = sub_1000444A8(a1, v8, &v96);
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  v26 = v96;
  v27 = v26;
  v94 = v7;
  if (!v25 || v26)
  {
    v55 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v56 = NFLogGetLogger(v55);
    v92 = v27;
    if (v56)
    {
      v57 = (void (*)(uint64_t, const char *, ...))v56;
      v58 = object_getClass(a1);
      v59 = class_isMetaClass(v58);
      v60 = v25;
      v61 = object_getClassName(a1);
      v62 = sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:");
      v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
      v85 = v61;
      v64 = 45;
      if (v59)
        v64 = 43;
      v25 = v60;
      v57(3, "%c[%{public}s %{public}s]:%i Failed to load SE for applet: %{public}@", v64, v85, v62, 1461, v63);

      v27 = v92;
    }
    v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v66 = NFSharedLogGetLogger(v65);
    v67 = objc_claimAutoreleasedReturnValue(v66);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      v68 = object_getClass(a1);
      if (class_isMetaClass(v68))
        v69 = 43;
      else
        v69 = 45;
      v70 = object_getClassName(a1);
      v71 = sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:");
      v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
      *(_DWORD *)buf = 67110146;
      v108 = v69;
      v109 = 2082;
      v110 = v70;
      v27 = v92;
      v111 = 2082;
      v112 = v71;
      v113 = 1024;
      v114 = 1461;
      v115 = 2114;
      v116 = v72;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to load SE for applet: %{public}@", buf, 0x2Cu);

    }
    v73 = objc_alloc((Class)NSError);
    v74 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v27)
    {
      sel = (SEL)objc_msgSend(v27, "code");
      v103[0] = NSLocalizedDescriptionKey;
      v75 = v73;
      v47 = v8;
      if ((uint64_t)objc_msgSend(v27, "code") > 70)
        v76 = 71;
      else
        v76 = (uint64_t)objc_msgSend(v27, "code");
      v49 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E58F8[v76]));
      v104[0] = v49;
      v104[1] = v27;
      v103[1] = NSUnderlyingErrorKey;
      v103[2] = CFSTR("Line");
      v104[2] = &off_1002FDEA8;
      v103[3] = CFSTR("Method");
      v50 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"));
      v104[3] = v50;
      v103[4] = NSDebugDescriptionErrorKey;
      v51 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"), 1462);
      v104[4] = v51;
      v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v104, v103, 5));
      v53 = objc_msgSend(v75, "initWithDomain:code:userInfo:", v74, sel, v81);

      v30 = v92;
      v48 = (id)v74;
    }
    else
    {
      v47 = v8;
      v101[0] = NSLocalizedDescriptionKey;
      v48 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
      v102[0] = v48;
      v102[1] = &off_1002FDEA8;
      v101[1] = CFSTR("Line");
      v101[2] = CFSTR("Method");
      v80 = v73;
      v49 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"));
      v102[2] = v49;
      v101[3] = NSDebugDescriptionErrorKey;
      v50 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"), 1462);
      v102[3] = v50;
      v51 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v102, v101, 4));
      v53 = objc_msgSend(v80, "initWithDomain:code:userInfo:", v74, 6, v51);
      v30 = (void *)v74;
    }
    goto LABEL_51;
  }
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
  v29 = sub_10022F2F0(v25, v28);
  v30 = (void *)objc_claimAutoreleasedReturnValue(v29);

  if (v30
    && (objc_msgSend(v30, "lifecycleState") == 130
     || objc_msgSend(v30, "lifecycleState") == 129))
  {
    v31 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v32 = NFLogGetLogger(v31);
    if (v32)
    {
      v33 = (void (*)(uint64_t, const char *, ...))v32;
      v34 = object_getClass(a1);
      v35 = v30;
      v36 = class_isMetaClass(v34);
      v84 = object_getClassName(a1);
      v87 = sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:");
      v37 = !v36;
      v30 = v35;
      v38 = 45;
      if (!v37)
        v38 = 43;
      v33(3, "%c[%{public}s %{public}s]:%i Applet %{public}@ is frozen or terminated", v38, v84, v87, 1467, v8);
    }
    v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v40 = NFSharedLogGetLogger(v39);
    v41 = objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v42 = object_getClass(a1);
      if (class_isMetaClass(v42))
        v43 = 43;
      else
        v43 = 45;
      v44 = v30;
      v45 = object_getClassName(a1);
      v46 = sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:");
      *(_DWORD *)buf = 67110146;
      v108 = v43;
      v109 = 2082;
      v110 = v45;
      v30 = v44;
      v111 = 2082;
      v112 = v46;
      v113 = 1024;
      v114 = 1467;
      v115 = 2114;
      v116 = v8;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Applet %{public}@ is frozen or terminated", buf, 0x2Cu);
    }
    v47 = v8;

    v88 = objc_alloc((Class)NSError);
    v48 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v99[0] = NSLocalizedDescriptionKey;
    v49 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v100[0] = v49;
    v100[1] = &off_1002FDEC0;
    v99[1] = CFSTR("Line");
    v99[2] = CFSTR("Method");
    v50 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"));
    v100[2] = v50;
    v99[3] = NSDebugDescriptionErrorKey;
    v51 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"), 1468);
    v100[3] = v51;
    v52 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v100, v99, 4));
    v53 = objc_msgSend(v88, "initWithDomain:code:userInfo:", v48, 10, v52);
    goto LABEL_50;
  }
  v77 = sub_1000217DC(a1[5], v7, v30, 1, v9, 0xFFFFFFFF);
  v78 = objc_claimAutoreleasedReturnValue(v77);
  if (v78)
  {
    v48 = (id)v78;
    sela = (char *)objc_alloc((Class)NSError);
    v49 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v89 = objc_msgSend(v48, "code");
    v97[0] = NSLocalizedDescriptionKey;
    v93 = v30;
    v47 = v8;
    if ((uint64_t)objc_msgSend(v48, "code") > 70)
      v79 = 71;
    else
      v79 = (uint64_t)objc_msgSend(v48, "code");
    v50 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E58F8[v79]));
    v98[0] = v50;
    v98[1] = v48;
    v97[1] = NSUnderlyingErrorKey;
    v97[2] = CFSTR("Line");
    v98[2] = &off_1002FDED8;
    v97[3] = CFSTR("Method");
    v51 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"));
    v98[3] = v51;
    v97[4] = NSDebugDescriptionErrorKey;
    v52 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"), 1477);
    v98[4] = v52;
    v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v98, v97, 5));
    v53 = objc_msgSend(sela, "initWithDomain:code:userInfo:", v49, v89, v82);

    v30 = v93;
LABEL_50:

LABEL_51:
    v7 = v94;
    goto LABEL_52;
  }
  v53 = 0;
LABEL_53:

  v9 = v95;
LABEL_54:

  return v53;
}

NSMutableArray *sub_1000482D8(uint64_t a1, uint64_t a2)
{
  NSMutableArray *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v4 = objc_opt_new(NSMutableArray);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getExpressAidsForType:onlyInExpress:", 1, a2));
    if (v5)
      -[NSMutableArray addObjectsFromArray:](v4, "addObjectsFromArray:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getExpressAidsForType:onlyInExpress:", 5, a2));

    if (v6)
      -[NSMutableArray addObjectsFromArray:](v4, "addObjectsFromArray:", v6);

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

NSMutableDictionary *sub_100048378(uint64_t a1)
{
  NSMutableDictionary *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (a1)
  {
    if (!*(_QWORD *)(a1 + 40))
      sub_10003BE3C(a1);
    v2 = objc_opt_new(NSMutableDictionary);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getExpressAidsForType:", 1));
    if (v3)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v3, v4);

    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getExpressAidsForType:", 5));

    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 5));
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v5, v6);

    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getExpressAidsForType:", 2));

    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 2));
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v7, v8);

    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getExpressAidsForType:", 3));

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 3));
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v9, v10);

    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getExpressAidsForType:", 4));

    if (v11)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4));
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v11, v12);

    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getExpressAidsForType:", 6));

    if (v13)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 6));
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v13, v14);

    }
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

NSMutableDictionary *sub_100048570(uint64_t a1)
{
  NSMutableDictionary *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  const __CFString *v22;
  const __CFString *v23;

  if (a1)
  {
    v2 = objc_opt_new(NSMutableDictionary);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 136)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v3, CFSTR("controlState"));

    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
      v5 = *(_QWORD *)(v4 + 24);
    else
      v5 = 0;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v5));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v6, CFSTR("numberOfExpressFelicaTransitApplets"));

    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
      v8 = *(_QWORD *)(v7 + 40);
    else
      v8 = 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v9, CFSTR("numberOfExpressECPAccessApplets"));

    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = *(_QWORD *)(v10 + 48);
    else
      v11 = 0;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v11));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v12, CFSTR("numberOfExpressGenericAApplets"));

    v13 = *(_QWORD *)(a1 + 40);
    if (v13)
      v14 = *(_QWORD *)(v13 + 56);
    else
      v14 = 0;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v14));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v15, CFSTR("numberOfExpressECP2Applets"));

    v16 = *(_QWORD *)(a1 + 40);
    if (v16)
      v17 = *(_QWORD *)(v16 + 64);
    else
      v17 = 0;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v17));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v18, CFSTR("numberOfExpressSinglePollApplets"));

    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 169)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v19, CFSTR("delayed"));

    v20 = *(_QWORD **)(a1 + 40);
    if (v20)
      v20 = (_QWORD *)v20[2];
    v21 = v20;
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v21, CFSTR("eseConfig"));

    if (*(_BYTE *)(a1 + 168))
      v22 = CFSTR("YES");
    else
      v22 = CFSTR("NO");
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v22, CFSTR("paused"));
    if (*(_BYTE *)(a1 + 170))
      v23 = CFSTR("YES");
    else
      v23 = CFSTR("NO");
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v23, CFSTR("factoryTestMode"));
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

BOOL sub_1000487B0(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  _QWORD *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;
  void *v11;
  void *v12;
  _BOOL8 v13;
  _QWORD v15[6];

  v4 = a2;
  if (a1)
  {
    v5 = *(unsigned __int8 *)(a1 + 156);
    v6 = *(id *)(a1 + 56);
    v7 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;

    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100048940;
    v15[3] = &unk_1002E5B90;
    v15[4] = a1;
    v15[5] = "restrictToTypeForApplet:";
    v8 = objc_retainBlock(v15);
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))v8;
    if (v4)
    {
      v10 = *(void **)(a1 + 48);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v11));

      v13 = v12 != 0;
      if (v12)
      {
        *(_BYTE *)(a1 + 156) = objc_msgSend(v12, "integerValue");
        sub_10003E234(a1);
        objc_storeStrong((id *)(a1 + 56), a2);
        ((void (**)(_QWORD, uint64_t, id))v9)[2](v9, v5, v6);
      }
      else
      {
        *(_BYTE *)(a1 + 156) = 0;
        ((void (**)(_QWORD, uint64_t, id))v9)[2](v9, v5, v6);
        sub_10003E234(a1);
      }

    }
    else
    {
      *(_BYTE *)(a1 + 156) = 0;
      ((void (*)(_QWORD *, uint64_t, id))v8[2])(v8, v5, v6);
      sub_10003E234(a1);
      v13 = 0;
    }

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_100048940(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;

  v4 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 156) != a2 || *(_QWORD *)(v4 + 56) != a3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v12 = *(_QWORD *)(a1 + 32);
      v24 = *(unsigned __int8 *)(v12 + 156);
      v25 = *(_QWORD *)(v12 + 56);
      v13 = 45;
      if (isMetaClass)
        v13 = 43;
      v7(6, "%c[%{public}s %{public}s]:%i Express mode limited to type: %d   applet: %{public}@", v13, ClassName, Name, 1649, v24, v25);
    }
    v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v15 = NFSharedLogGetLogger(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v17))
        v18 = 43;
      else
        v18 = 45;
      v19 = object_getClassName(*(id *)(a1 + 32));
      v20 = sel_getName(*(SEL *)(a1 + 40));
      v21 = *(_QWORD *)(a1 + 32);
      v22 = *(unsigned __int8 *)(v21 + 156);
      v23 = *(_QWORD *)(v21 + 56);
      *(_DWORD *)buf = 67110402;
      v27 = v18;
      v28 = 2082;
      v29 = v19;
      v30 = 2082;
      v31 = v20;
      v32 = 1024;
      v33 = 1649;
      v34 = 1024;
      v35 = v22;
      v36 = 2114;
      v37 = v23;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode limited to type: %d   applet: %{public}@", buf, 0x32u);
    }

  }
}

uint64_t sub_100048B04(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  id v22;
  _BYTE v23[128];

  if (!a1)
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "secureElementWrapper"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "getExpressAidsForType:", 3));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "getExpressAidsForType:", 6));
  v5 = sub_10022B938(v3);
  v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  if (!v6)
  {
    if (!sub_100041314(a1))
    {
      v9 = 0;
      goto LABEL_19;
    }
    v22 = 0;
    v7 = sub_10022C46C(v3, &v22);
    v6 = v22;
  }
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v6;
  v9 = (uint64_t)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
  if (!v9)
    goto LABEL_18;
  v10 = *(_QWORD *)v19;
  while (2)
  {
    for (i = 0; i != v9; ++i)
    {
      if (*(_QWORD *)v19 != v10)
        objc_enumerationMutation(v8);
      v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "identifier"));
      if (objc_msgSend(v4, "containsObject:", v13))
      {

      }
      else
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "identifier"));
        v15 = objc_msgSend(v17, "containsObject:", v14);

        if (!v15)
          continue;
      }
      if ((sub_10023A858((uint64_t)v3, v12) & 1) != 0)
      {
        v9 = 1;
        goto LABEL_18;
      }
    }
    v9 = (uint64_t)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    if (v9)
      continue;
    break;
  }
LABEL_18:

LABEL_19:
  return v9;
}

void sub_100048D18(uint64_t a1, char a2)
{
  id v3;

  *(_BYTE *)(a1 + 170) = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", *(unsigned __int8 *)(a1 + 170), CFSTR("ExpressModeFactoryTest"));
  objc_msgSend(v3, "synchronize");

}

unsigned __int8 *sub_100048D70(unsigned __int8 *a1, unsigned int a2)
{
  unsigned __int8 *v2;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *specific;
  uint64_t Logger;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  void *v38;

  v2 = a1;
  if (a1)
  {
    if (!*((_QWORD *)a1 + 5))
      sub_10003BE3C((uint64_t)a1);
    v4 = v2[170];
    if (a2)
    {
      sub_100048D18((uint64_t)v2, 1);
      v5 = *((_QWORD *)v2 + 5);
      if (v5)
      {
        *(_BYTE *)(v5 + 88) = 1;
        v6 = (void *)*((_QWORD *)v2 + 5);
      }
      else
      {
        v6 = 0;
      }
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "reconfigureWithArray:restoreAuthorization:updateStorage:", &__NSArray0__struct, 0, 1));
      if (v7)
      {
        v8 = (void *)v7;
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v11 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(v2);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(v2);
          Name = sel_getName("setTestMode:");
          v14 = 45;
          if (isMetaClass)
            v14 = 43;
          v11(3, "%c[%{public}s %{public}s]:%i Failed to clear express applets on eSE: %{public}@", v14, ClassName, Name, 1761, v8);
        }
        v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v16 = NFSharedLogGetLogger(v15);
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v18 = object_getClass(v2);
          if (class_isMetaClass(v18))
            v19 = 43;
          else
            v19 = 45;
          *(_DWORD *)buf = 67110146;
          v30 = v19;
          v31 = 2082;
          v32 = object_getClassName(v2);
          v33 = 2082;
          v34 = sel_getName("setTestMode:");
          v35 = 1024;
          v36 = 1761;
          v37 = 2114;
          v38 = v8;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to clear express applets on eSE: %{public}@", buf, 0x2Cu);
        }

        sub_100048D18((uint64_t)v2, 0);
        goto LABEL_30;
      }
      v22 = sub_100025280(*((id **)v2 + 5), 0);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      v8 = (void *)v23;
      if (!v4 && v23)
      {
        v24 = *((_QWORD *)v2 + 5);
        if (v24)
          *(_BYTE *)(v24 + 88) = 0;
        sub_100048D18((uint64_t)v2, 0);
        goto LABEL_29;
      }
    }
    else
    {
      v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v2 + 5), "reconfigureWithArray:restoreAuthorization:updateStorage:", &__NSArray0__struct, 0, 1));
      v8 = (void *)v20;
      if (v4 && v20)
        goto LABEL_29;
      v21 = *((_QWORD *)v2 + 5);
      if (v21)
        *(_BYTE *)(v21 + 88) = 0;
      sub_100048D18((uint64_t)v2, 0);
    }

    v8 = 0;
LABEL_29:
    v25 = sub_10003F7D8((uint64_t)v2, a2);
    sub_10003C984((uint64_t)v2);
    sub_10003D1FC((uint64_t)v2);
LABEL_30:
    v2 = v8;

  }
  return v2;
}

void sub_10004904C(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  int v17;
  id v18;
  uint64_t v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i express mode state %d", v9, ClassName, Name, 1803, *(unsigned int *)(*(_QWORD *)(a1 + 32) + 160));
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    v17 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 160);
    *(_DWORD *)buf = 67110146;
    v22 = v14;
    v23 = 2082;
    v24 = v15;
    v25 = 2082;
    v26 = v16;
    v27 = 1024;
    v28 = 1803;
    v29 = 1024;
    v30 = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i express mode state %d", buf, 0x28u);
  }

  v18 = *(id *)(a1 + 32);
  objc_sync_enter(v18);
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_DWORD *)(v19 + 160);
  if ((v20 - 1) <= 1)
  {
    *(_DWORD *)(v19 + 160) = 3;
    v20 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 160);
  }
  objc_sync_exit(v18);

  if (v20 == 5)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "handleAppletInactivityTimeout:atlData:caData:", 0, 0, 0);
  }
  else if (v20 == 3)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "handleExpressModeTimeout");
  }
}

void sub_1000492B4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v7;
  const char *ClassName;
  const char *Name;
  __CFString *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  __CFString *v18;
  id *v19;
  void *v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  __CFString *v42;
  __int16 v43;
  int v44;

  v1 = *(void **)(a1 + 32);
  if (v1)
  {
    v2 = *(unsigned __int8 *)(a1 + 40);
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v1);
      if (class_isMetaClass(Class))
        v7 = 43;
      else
        v7 = 45;
      ClassName = object_getClassName(v1);
      Name = sel_getName("driverExpressModeEnteredSync:");
      if ((v2 - 1) > 5)
        v10 = 0;
      else
        v10 = off_1002E5CF0[(char)(v2 - 1)];
      v5(6, "%c[%{public}s %{public}s]:%i %{public}@ express mode entered (%d)", v7, ClassName, Name, 1825, v10, v2);
    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = object_getClass(v1);
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(v1);
      v17 = sel_getName("driverExpressModeEnteredSync:");
      if ((v2 - 1) > 5)
        v18 = 0;
      else
        v18 = off_1002E5CF0[(char)(v2 - 1)];
      *(_DWORD *)buf = 67110402;
      v34 = v15;
      v35 = 2082;
      v36 = v16;
      v37 = 2082;
      v38 = v17;
      v39 = 1024;
      v40 = 1825;
      v41 = 2114;
      v42 = v18;
      v43 = 1024;
      v44 = v2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@ express mode entered (%d)", buf, 0x32u);
    }

    v19 = v1;
    objc_sync_enter(v19);
    if (*((_BYTE *)v19 + 172))
    {
      v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v20);
      if (v21)
      {
        v22 = object_getClass(v19);
        if (class_isMetaClass(v22))
          v23 = 43;
        else
          v23 = 45;
        v24 = object_getClassName(v19);
        v25 = sel_getName("driverExpressModeEnteredSync:");
        v21(3, "%c[%{public}s %{public}s]:%i Express mode is already entered?", v23, v24, v25, 1829);
      }
      v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v27 = NFSharedLogGetLogger(v26);
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v29 = object_getClass(v19);
        if (class_isMetaClass(v29))
          v30 = 43;
        else
          v30 = 45;
        v31 = object_getClassName(v19);
        v32 = sel_getName("driverExpressModeEnteredSync:");
        *(_DWORD *)buf = 67109890;
        v34 = v30;
        v35 = 2082;
        v36 = v31;
        v37 = 2082;
        v38 = v32;
        v39 = 1024;
        v40 = 1829;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Express mode is already entered?", buf, 0x22u);
      }

      objc_sync_exit(v19);
    }
    else
    {
      objc_msgSend(v19[11], "stopTimer");
      objc_msgSend(v19[11], "startTimer:leeway:", *((double *)v19 + 16), 0.5);
      *((_DWORD *)v19 + 40) = 1;
      *((_BYTE *)v19 + 157) = v2;
      *((_WORD *)v19 + 86) = 1;
      objc_msgSend(v19[14], "removeAllObjects");
      objc_sync_exit(v19);

      objc_msgSend(v19[1], "handleExpressModeStarted");
    }
  }
}

void sub_100049614(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000496B8(uint64_t a1)
{
  void *v1;
  id v2;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  _DWORD *v14;
  int v15;
  id *v16;
  _DWORD *v17;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  id v29;

  v1 = *(void **)(a1 + 32);
  v2 = *(id *)(a1 + 40);
  if (v1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v1);
      Name = sel_getName("_sync_driverRequestService:");
      v8 = 45;
      if (isMetaClass)
        v8 = 43;
      v5(6, "%c[%{public}s %{public}s]:%i service requested %{public}@", v8, ClassName, Name, 1857, v2);
    }
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFSharedLogGetLogger(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = object_getClass(v1);
      if (class_isMetaClass(v12))
        v13 = 43;
      else
        v13 = 45;
      *(_DWORD *)buf = 67110146;
      v21 = v13;
      v22 = 2082;
      v23 = object_getClassName(v1);
      v24 = 2082;
      v25 = sel_getName("_sync_driverRequestService:");
      v26 = 1024;
      v27 = 1857;
      v28 = 2114;
      v29 = v2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i service requested %{public}@", buf, 0x2Cu);
    }

    v14 = v1;
    objc_sync_enter(v14);
    v15 = v14[40];
    objc_sync_exit(v14);

    if (v15)
    {
      if (v15 == 1)
      {
        v16 = v14;
        objc_sync_enter(v16);
        v14[40] = 2;
        objc_sync_exit(v16);

        objc_msgSend(v16[12], "stopTimer");
        objc_msgSend(v16[1], "handleRequestService:inExpress:", v2, 1);
        objc_msgSend(v16[12], "startTimer:", 0.25);
      }
    }
    else
    {
      v17 = v14;
      objc_sync_enter(v17);
      v14[40] = 5;
      objc_sync_exit(v17);

    }
  }

}

void sub_1000498F8(void *a1, int a2)
{
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  id *v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  void *v33;
  NSMutableDictionary *v34;
  id v35;
  BOOL v36;
  NSObject *v37;
  void *v38;
  void *v39;
  NSObject *v40;
  int v41;
  void *v42;
  void (*v43)(uint64_t, const char *, ...);
  objc_class *v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  objc_class *v51;
  int v52;
  const char *v53;
  const char *v54;
  id v55;
  uint64_t v56;
  void *v57;
  void *v58;
  NSMutableDictionary *v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  void (*v65)(uint64_t, const char *, ...);
  objc_class *v66;
  uint64_t v67;
  const char *v68;
  const char *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  objc_class *v73;
  int v74;
  const char *v75;
  const char *v76;
  void *v77;
  void *v78;
  _BYTE *v79;
  void *v80;
  void (*v81)(uint64_t, const char *, ...);
  objc_class *v82;
  uint64_t v83;
  const char *v84;
  const char *v85;
  void *v86;
  uint64_t v87;
  objc_class *v88;
  int v89;
  const char *v90;
  const char *v91;
  void *v92;
  void (*v93)(uint64_t, const char *, ...);
  objc_class *v94;
  uint64_t v95;
  const char *v96;
  const char *v97;
  void *v98;
  uint64_t v99;
  NSObject *v100;
  objc_class *v101;
  int v102;
  const char *v103;
  const char *v104;
  id v105;
  void *v106;
  const char *Name;
  int v108;
  NSMutableDictionary *v110;
  _QWORD v111[2];
  _QWORD v112[2];
  uint8_t buf[4];
  int v114;
  __int16 v115;
  const char *v116;
  __int16 v117;
  const char *v118;
  __int16 v119;
  int v120;
  __int16 v121;
  void *v122;

  if (!a1)
    return;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v5(6, "%c[%{public}s %{public}s]:%i express mode exited", v9, ClassName, Name, 1897);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(a1);
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    *(_DWORD *)buf = 67109890;
    v114 = v14;
    v115 = 2082;
    v116 = object_getClassName(a1);
    v117 = 2082;
    v118 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
    v119 = 1024;
    v120 = 1897;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i express mode exited", buf, 0x22u);
  }

  v15 = a1;
  objc_sync_enter(v15);
  if (*((_BYTE *)v15 + 172))
  {
    objc_msgSend(v15[11], "stopTimer");
    v108 = *((_DWORD *)v15 + 40);
    v16 = *((unsigned __int8 *)v15 + 157);
    *((_DWORD *)v15 + 40) = 0;
    *((_BYTE *)v15 + 157) = 0;
    *((_WORD *)v15 + 86) = 0;
    objc_msgSend(v15[4], "invalidate");
    v17 = v15[4];
    v15[4] = 0;

    objc_sync_exit(v15);
    objc_msgSend(v15[12], "stopTimer");
    switch((int)v16)
    {
      case 1:
      case 5:
        v18 = v15[8];
        if (v18)
          goto LABEL_14;
        v59 = sub_100048378((uint64_t)v15);
        v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
        v61 = v60;
        if ((_DWORD)v16 == 1)
        {
          v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectForKeyedSubscript:", &off_1002FDF08));
          v63 = objc_msgSend(v62, "count");
        }
        else
        {
          if ((_DWORD)v16 != 5)
            goto LABEL_64;
          v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectForKeyedSubscript:", &off_1002FDEF0));
          v63 = objc_msgSend(v62, "count");
        }
        if (v63)
        {
          v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectAtIndexedSubscript:", 0));

          if (v78)
          {
            v79 = sub_1000443EC(v15, v78);
            v18 = (id)objc_claimAutoreleasedReturnValue(v79);

            if (!v18)
              goto LABEL_65;
LABEL_14:
            v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v19);
            if (v20)
            {
              v21 = object_getClass(v15);
              if (class_isMetaClass(v21))
                v22 = 43;
              else
                v22 = 45;
              v23 = object_getClassName(v15);
              v24 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
              v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
              v20(6, "%c[%{public}s %{public}s]:%i changing to wired and calling to ATL end of transaction for %{public}@", v22, v23, v24, 1947, v25);

            }
            v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v27 = NFSharedLogGetLogger(v26);
            v28 = objc_claimAutoreleasedReturnValue(v27);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              v29 = object_getClass(v15);
              if (class_isMetaClass(v29))
                v30 = 43;
              else
                v30 = 45;
              v31 = object_getClassName(v15);
              v32 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
              v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
              *(_DWORD *)buf = 67110146;
              v114 = v30;
              v115 = 2082;
              v116 = v31;
              v117 = 2082;
              v118 = v32;
              v119 = 1024;
              v120 = 1947;
              v121 = 2114;
              v122 = v33;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i changing to wired and calling to ATL end of transaction for %{public}@", buf, 0x2Cu);

            }
            v34 = objc_opt_new(NSMutableDictionary);
            v35 = v15[5];
            v110 = v34;
            v36 = sub_100025DE8(v35, v18, &v110);
            v37 = v110;

            if (v36)
            {
              if (!v37)
              {
LABEL_76:

                if ((v108 - 1) <= 1)
                {
                  v92 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v93 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v92);
                  if (v93)
                  {
                    v94 = object_getClass(v15);
                    if (class_isMetaClass(v94))
                      v95 = 43;
                    else
                      v95 = 45;
                    v96 = object_getClassName(v15);
                    v97 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
                    v93(6, "%c[%{public}s %{public}s]:%i Transit express mode finished before timeout - posting timeout", v95, v96, v97, 1966);
                  }
                  v98 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v99 = NFSharedLogGetLogger(v98);
                  v100 = objc_claimAutoreleasedReturnValue(v99);
                  if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
                  {
                    v101 = object_getClass(v15);
                    if (class_isMetaClass(v101))
                      v102 = 43;
                    else
                      v102 = 45;
                    v103 = object_getClassName(v15);
                    v104 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
                    *(_DWORD *)buf = 67109890;
                    v114 = v102;
                    v115 = 2082;
                    v116 = v103;
                    v117 = 2082;
                    v118 = v104;
                    v119 = 1024;
                    v120 = 1966;
                    _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Transit express mode finished before timeout - posting timeout", buf, 0x22u);
                  }

                  objc_msgSend(v15[1], "handleExpressModeTimeout");
                }
                v105 = v15[8];
                if (v105)
                {
                  v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v105, "identifierAsData"));
                  objc_msgSend(v15[14], "setObject:forKeyedSubscript:", v106, CFSTR("AID"));

                }
                +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:](NFGeneralStatisticsCALogger, "updateGeneralDeviceStatistic:", &off_100306010);

LABEL_91:
                if (a2)
                  objc_msgSend(v15[1], "handleForceExpressModeEndEvent");
                objc_msgSend(v15[1], "handleExpressModeExited");
                sub_10023B69C((uint64_t)NFSecureElementWrapper);
                return;
              }
              v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v16));
              -[NSObject setObject:forKeyedSubscript:](v37, "setObject:forKeyedSubscript:", v38, CFSTR("expressType"));

              v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
              -[NSObject setObject:forKeyedSubscript:](v37, "setObject:forKeyedSubscript:", v39, CFSTR("aid"));

              -[NSObject setObject:forKeyedSubscript:](v37, "setObject:forKeyedSubscript:", CFSTR("ActivityTimeout"), CFSTR("EventType"));
              v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
              v41 = sub_100043748((uint64_t)v15, v40);
              sub_1002289EC((uint64_t)NFHciTransactionEventCALogger, v37, v41);
            }
            else
            {
              v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v65 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v64);
              if (v65)
              {
                v66 = object_getClass(v15);
                if (class_isMetaClass(v66))
                  v67 = 43;
                else
                  v67 = 45;
                v68 = object_getClassName(v15);
                v69 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
                v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
                v65(3, "%c[%{public}s %{public}s]:%i Failed to handle Felica V2 End of Transaction for %{public}@", v67, v68, v69, 1950, v70);

              }
              v71 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v72 = NFSharedLogGetLogger(v71);
              v40 = objc_claimAutoreleasedReturnValue(v72);
              if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
              {
                v73 = object_getClass(v15);
                if (class_isMetaClass(v73))
                  v74 = 43;
                else
                  v74 = 45;
                v75 = object_getClassName(v15);
                v76 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
                v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
                *(_DWORD *)buf = 67110146;
                v114 = v74;
                v115 = 2082;
                v116 = v75;
                v117 = 2082;
                v118 = v76;
                v119 = 1024;
                v120 = 1950;
                v121 = 2114;
                v122 = v77;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to handle Felica V2 End of Transaction for %{public}@", buf, 0x2Cu);

              }
            }

            goto LABEL_76;
          }
        }
        else
        {

        }
LABEL_64:

LABEL_65:
        v80 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v81 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v80);
        if (v81)
        {
          v82 = object_getClass(v15);
          if (class_isMetaClass(v82))
            v83 = 43;
          else
            v83 = 45;
          v84 = object_getClassName(v15);
          v85 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
          v81(6, "%c[%{public}s %{public}s]:%i No Applet used for NFExpressTypeFelicaTransit or NFExpressTypeCathayTransit", v83, v84, v85, 1961);
        }
        v86 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v87 = NFSharedLogGetLogger(v86);
        v37 = objc_claimAutoreleasedReturnValue(v87);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          v88 = object_getClass(v15);
          if (class_isMetaClass(v88))
            v89 = 43;
          else
            v89 = 45;
          v90 = object_getClassName(v15);
          v91 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
          *(_DWORD *)buf = 67109890;
          v114 = v89;
          v115 = 2082;
          v116 = v90;
          v117 = 2082;
          v118 = v91;
          v119 = 1024;
          v120 = 1961;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No Applet used for NFExpressTypeFelicaTransit or NFExpressTypeCathayTransit", buf, 0x22u);
        }
        v18 = 0;
        goto LABEL_76;
      case 2:
        +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306038);
        +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:](NFGeneralStatisticsCALogger, "updateGeneralDeviceStatistic:", &off_100306060);
        goto LABEL_91;
      case 3:
      case 6:
        +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306088);
        +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:](NFGeneralStatisticsCALogger, "updateGeneralDeviceStatistic:", &off_1003060B0);
        goto LABEL_91;
      default:
        v55 = v15[8];
        if (v55)
        {
          v56 = objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "identifier"));
          v57 = (void *)v56;
          if (v56)
          {
            v111[0] = CFSTR("EventType");
            v111[1] = CFSTR("appletIdentifier");
            v112[0] = CFSTR("ActivityTimeout");
            v112[1] = v56;
            v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v112, v111, 2));
            sub_1000A87F8((uint64_t)NFUnifiedAccessTransactionCALogger, v58);

          }
        }
        goto LABEL_91;
    }
  }
  v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v43 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v42);
  if (v43)
  {
    v44 = object_getClass(v15);
    if (class_isMetaClass(v44))
      v45 = 43;
    else
      v45 = 45;
    v46 = object_getClassName(v15);
    v47 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
    v43(6, "%c[%{public}s %{public}s]:%i Express mode is not in progress.", v45, v46, v47, 1903);
  }
  v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v49 = NFSharedLogGetLogger(v48);
  v50 = objc_claimAutoreleasedReturnValue(v49);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    v51 = object_getClass(v15);
    if (class_isMetaClass(v51))
      v52 = 43;
    else
      v52 = 45;
    v53 = object_getClassName(v15);
    v54 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
    *(_DWORD *)buf = 67109890;
    v114 = v52;
    v115 = 2082;
    v116 = v53;
    v117 = 2082;
    v118 = v54;
    v119 = 1024;
    v120 = 1903;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode is not in progress.", buf, 0x22u);
  }

  objc_sync_exit(v15);
}

void sub_10004A3C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004A3F0(uint64_t a1)
{
  return sub_1000498F8(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10004A400(uint64_t a1)
{
  void *v2;
  NFStepUpController *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  void *v21;
  uint64_t v22;
  void (*v23)(uint64_t, const char *, ...);
  objc_class *v24;
  _BOOL4 v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  const char *ClassName;
  const char *Name;
  const char *v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  void *v47;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  if (v2)
  {
LABEL_15:
    objc_msgSend(v2, "handleStepUpEvent:transactionType:forApplet:", *(_QWORD *)(a1 + 40), 4, *(_QWORD *)(a1 + 48));
    return;
  }
  v3 = -[NFStepUpController initWithQueue:driverWrapper:]([NFStepUpController alloc], "initWithQueue:driverWrapper:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 32);
  *(_QWORD *)(v4 + 32) = v3;

  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "startISO18013WithConnectionHandoverConfiguration"));
    if (v7)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v10 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(*(id *)(a1 + 32));
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 56));
        v13 = 45;
        if (isMetaClass)
          v13 = 43;
        v10(3, "%c[%{public}s %{public}s]:%i Reader start error: %{public}@", v13, ClassName, Name, 2061, v7);
      }
      v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v15 = NFSharedLogGetLogger(v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v17 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v17))
          v18 = 43;
        else
          v18 = 45;
        v19 = object_getClassName(*(id *)(a1 + 32));
        v20 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67110146;
        v39 = v18;
        v40 = 2082;
        v41 = v19;
        v42 = 2082;
        v43 = v20;
        v44 = 1024;
        v45 = 2061;
        v46 = 2114;
        v47 = v7;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reader start error: %{public}@", buf, 0x2Cu);
      }

    }
    v2 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    goto LABEL_15;
  }
  v21 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v22 = NFLogGetLogger(v21);
  if (v22)
  {
    v23 = (void (*)(uint64_t, const char *, ...))v22;
    v24 = object_getClass(*(id *)(a1 + 32));
    v25 = class_isMetaClass(v24);
    v26 = object_getClassName(*(id *)(a1 + 32));
    v37 = sel_getName(*(SEL *)(a1 + 56));
    v27 = 45;
    if (v25)
      v27 = 43;
    v23(3, "%c[%{public}s %{public}s]:%i Could not allocate unified access helper object", v27, v26, v37, 2057);
  }
  v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v29 = NFSharedLogGetLogger(v28);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    v31 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v31))
      v32 = 43;
    else
      v32 = 45;
    v33 = object_getClassName(*(id *)(a1 + 32));
    v34 = sel_getName(*(SEL *)(a1 + 56));
    *(_DWORD *)buf = 67109890;
    v39 = v32;
    v40 = 2082;
    v41 = v33;
    v42 = 2082;
    v43 = v34;
    v44 = 1024;
    v45 = 2057;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not allocate unified access helper object", buf, 0x22u);
  }

}

id sub_10004A79C(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  const char *Name;
  _QWORD v22[6];
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 2071);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v24 = v13;
    v25 = 2082;
    v26 = v14;
    v27 = 2082;
    v28 = v15;
    v29 = 1024;
    v30 = 2071;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v16 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v16 + 172) || *(_QWORD *)(v16 + 56))
    return objc_msgSend(*(id *)(v16 + 8), "handleHostCardReaderDetected:", *(_QWORD *)(a1 + 40));
  v18 = *(void **)(v16 + 32);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10004A978;
  v22[3] = &unk_1002E5BE0;
  v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(a1 + 48);
  v22[4] = v16;
  v22[5] = v20;
  return objc_msgSend(v18, "hceReadWithHandle:completion:", v19, v22);
}

void sub_10004A978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "handleTransactionEndEvent:atlData:caData:", a2, a3, 0);
  }
  else
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v6(3, "%c[%{public}s %{public}s]:%i Invalid decoded event for posting EndEvent.", v10, ClassName, Name, 2079);
    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      v20 = v15;
      v21 = 2082;
      v22 = v16;
      v23 = 2082;
      v24 = v17;
      v25 = 1024;
      v26 = 2079;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid decoded event for posting EndEvent.", buf, 0x22u);
    }

  }
}

void sub_10004ADC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004BA8C(uint64_t a1, double a2)
{
  id v4;
  id v5;
  void *v6;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v10;
  const char *ClassName;
  const char *Name;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  _QWORD v20[4];
  id v21;
  id location;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  double v32;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 80), "stopTimer");
    objc_initWeak(&location, (id)a1);
    v4 = objc_alloc((Class)NFTimer);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10004BD14;
    v20[3] = &unk_1002E5C08;
    objc_copyWeak(&v21, &location);
    v5 = objc_msgSend(v4, "initWithCallback:queue:", v20, *(_QWORD *)(a1 + 120));
    v6 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v5;

    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass((id)a1);
      if (class_isMetaClass(Class))
        v10 = 43;
      else
        v10 = 45;
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("activateAppletsAfter:");
      Logger(6, "%c[%{public}s %{public}s]:%i Activate applet after %fs", v10, ClassName, Name, 2310, *(_QWORD *)&a2);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = object_getClass((id)a1);
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      v18 = object_getClassName((id)a1);
      v19 = sel_getName("activateAppletsAfter:");
      *(_DWORD *)buf = 67110146;
      v24 = v17;
      v25 = 2082;
      v26 = v18;
      v27 = 2082;
      v28 = v19;
      v29 = 1024;
      v30 = 2310;
      v31 = 2048;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Activate applet after %fs", buf, 0x2Cu);
    }

    objc_msgSend(*(id *)(a1 + 80), "startTimer:", a2);
    objc_destroyWeak(&v21);
    objc_destroyWeak(&location);
  }
}

void sub_10004BCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004BD14(uint64_t a1)
{
  NSObject *v2;
  unsigned __int8 *WeakRetained;
  unsigned __int8 *v4;
  os_activity_scope_state_s v5;

  v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.express.reactivationTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v5.opaque[0] = 0;
  v5.opaque[1] = 0;
  os_activity_scope_enter(v2, &v5);
  os_activity_scope_leave(&v5);

  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    sub_10004BD90(WeakRetained);

}

void sub_10004BD90(unsigned __int8 *a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  _BOOL4 v5;
  _BOOL4 v6;
  int v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *v23;
  _BOOL4 v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  objc_class *v30;
  int v31;
  const char *v32;
  const char *v33;
  void *v34;
  const char *ClassName;
  const char *Name;
  const char *v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  unsigned int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  _BOOL4 v51;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v3 = objc_msgSend(v2, "hasSession");

    v4 = a1[172];
    v5 = a1[172] == 0;
    v6 = sub_100041B44((_BOOL8)a1);
    v7 = v5 & ~v3;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v10 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("activateAppletsIfPossible");
      v13 = 45;
      if (isMetaClass)
        v13 = 43;
      v10(6, "%c[%{public}s %{public}s]:%i activeSession=%d,expressInProgress=%d,expressModesActive=%d", v13, ClassName, Name, 2328, v3, v4, v6);
    }
    v14 = v7 & v6;
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = object_getClass(a1);
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      *(_DWORD *)buf = 67110658;
      v39 = v19;
      v40 = 2082;
      v41 = object_getClassName(a1);
      v42 = 2082;
      v43 = sel_getName("activateAppletsIfPossible");
      v44 = 1024;
      v45 = 2328;
      v46 = 1024;
      v47 = v3;
      v48 = 1024;
      v49 = v4;
      v50 = 1024;
      v51 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i activeSession=%d,expressInProgress=%d,expressModesActive=%d", buf, 0x34u);
    }

    if (v14)
    {
      v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v21 = NFLogGetLogger(v20);
      if (v21)
      {
        v22 = (void (*)(uint64_t, const char *, ...))v21;
        v23 = object_getClass(a1);
        v24 = class_isMetaClass(v23);
        v25 = object_getClassName(a1);
        v37 = sel_getName("activateAppletsIfPossible");
        v26 = 45;
        if (v24)
          v26 = 43;
        v22(6, "%c[%{public}s %{public}s]:%i Express mode reactivation required", v26, v25, v37, 2331);
      }
      v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v28 = NFSharedLogGetLogger(v27);
      v29 = objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        v30 = object_getClass(a1);
        if (class_isMetaClass(v30))
          v31 = 43;
        else
          v31 = 45;
        v32 = object_getClassName(a1);
        v33 = sel_getName("activateAppletsIfPossible");
        *(_DWORD *)buf = 67109890;
        v39 = v31;
        v40 = 2082;
        v41 = v32;
        v42 = 2082;
        v43 = v33;
        v44 = 1024;
        v45 = 2331;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode reactivation required", buf, 0x22u);
      }

      sub_10003D1FC((uint64_t)a1);
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
      objc_msgSend(v34, "maybeStartNextSession");

    }
  }
}

uint64_t sub_10004C0C4(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  NSObject *v17;
  void *specific;
  uint64_t Logger;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void (*v41)(uint64_t, const char *, ...);
  objc_class *v42;
  _BOOL4 v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  objc_class *v48;
  int v49;
  const char *v50;
  const char *v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  BOOL v54;
  const char *ClassName;
  const char *Name;
  const char *v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  NSObject *v73;
  _BYTE v74[128];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!a1)
  {
    v38 = 0;
    goto LABEL_59;
  }
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v8 = (_QWORD *)a1[5];
  v59 = v6;
  if (v8)
    v8 = (_QWORD *)v8[2];
  v9 = v8;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v60, v74, 16);
  if (!v10)
    goto LABEL_12;
  v11 = v10;
  v12 = *(_QWORD *)v61;
  while (2)
  {
    for (i = 0; i != v11; i = (char *)i + 1)
    {
      if (*(_QWORD *)v61 != v12)
        objc_enumerationMutation(v9);
      v14 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)i);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
      v16 = objc_msgSend(v15, "isEqualToString:", v5);

      if ((v16 & 1) != 0)
      {
        v17 = v14;

        if (!v17)
          goto LABEL_30;
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v20 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("matchApplet:toField:");
          v23 = 45;
          if (isMetaClass)
            v23 = 43;
          v20(6, "%c[%{public}s %{public}s]:%i Checking passInfo %{public}@", v23, ClassName, Name, 2356, v17);
        }
        v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v25 = NFSharedLogGetLogger(v24);
        v26 = objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          v27 = object_getClass(a1);
          if (class_isMetaClass(v27))
            v28 = 43;
          else
            v28 = 45;
          v29 = object_getClassName(a1);
          v30 = sel_getName("matchApplet:toField:");
          *(_DWORD *)buf = 67110146;
          v65 = v28;
          v66 = 2082;
          v67 = v29;
          v68 = 2082;
          v69 = v30;
          v70 = 1024;
          v71 = 2356;
          v72 = 2114;
          v73 = v17;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Checking passInfo %{public}@", buf, 0x2Cu);
        }

        v31 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v17, "objectForKeyedSubscript:", CFSTR("ExpressType")));
        v7 = v59;
        v32 = objc_msgSend(v59, "notificationType");
        if (v32 != (id)1)
        {
          if (v32 != (id)2)
          {
            if (v32 == (id)3 && objc_msgSend(v31, "isEqualToString:", CFSTR("ECP2")))
            {
              v33 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v17, "objectForKeyedSubscript:", CFSTR("ECP2Info")));
              v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("primaryTCIs")));
              v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("TCIs")));
              v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "tciArray"));
              v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "firstObject"));

              if (v37)
              {
                if ((objc_msgSend(v34, "containsObject:", v37) & 1) != 0)
                  v38 = 1;
                else
                  v38 = (uint64_t)objc_msgSend(v35, "containsObject:", v37);
              }
              else
              {
                v38 = 0;
              }

              goto LABEL_57;
            }
            goto LABEL_56;
          }
          if ((objc_msgSend(v31, "isEqualToString:", CFSTR("ECP1.Access")) & 1) != 0)
          {
            v38 = 1;
LABEL_57:

            goto LABEL_58;
          }
LABEL_56:
          v38 = 0;
          goto LABEL_57;
        }
        v52 = objc_msgSend(v59, "rfTechnology");
        v53 = objc_msgSend(v59, "rfTechnology");
        if (objc_msgSend(v31, "isEqualToString:", CFSTR("Suica")))
        {
          if ((v52 & 4) == 0)
            goto LABEL_56;
          v54 = objc_msgSend(v59, "typeFSystemCode") == 3;
        }
        else
        {
          v38 = v53 & 1;
          if ((objc_msgSend(v31, "isEqualToString:", CFSTR("GenericA")) & 1) != 0)
            goto LABEL_57;
          if (!objc_msgSend(v31, "isEqualToString:", CFSTR("Cathay")))
          {
            if ((objc_msgSend(v31, "isEqualToString:", CFSTR("QuickMode")) & 1) != 0)
              goto LABEL_57;
            goto LABEL_56;
          }
          if ((v52 & 4) == 0)
            goto LABEL_56;
          v54 = objc_msgSend(v59, "typeFSystemCode") == 32776;
        }
        v38 = v54;
        goto LABEL_57;
      }
    }
    v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v60, v74, 16);
    if (v11)
      continue;
    break;
  }
LABEL_12:

LABEL_30:
  v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v40 = NFLogGetLogger(v39);
  if (v40)
  {
    v41 = (void (*)(uint64_t, const char *, ...))v40;
    v42 = object_getClass(a1);
    v43 = class_isMetaClass(v42);
    v44 = object_getClassName(a1);
    v58 = sel_getName("matchApplet:toField:");
    v45 = 45;
    if (v43)
      v45 = 43;
    v41(4, "%c[%{public}s %{public}s]:%i Applet exists in group config but not configured in passinfo?!", v45, v44, v58, 2353);
  }
  v46 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v47 = NFSharedLogGetLogger(v46);
  v17 = objc_claimAutoreleasedReturnValue(v47);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    v48 = object_getClass(a1);
    if (class_isMetaClass(v48))
      v49 = 43;
    else
      v49 = 45;
    v50 = object_getClassName(a1);
    v51 = sel_getName("matchApplet:toField:");
    *(_DWORD *)buf = 67109890;
    v65 = v49;
    v66 = 2082;
    v67 = v50;
    v68 = 2082;
    v69 = v51;
    v70 = 1024;
    v71 = 2353;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Applet exists in group config but not configured in passinfo?!", buf, 0x22u);
  }
  v38 = 0;
  v7 = v59;
LABEL_58:

LABEL_59:
  return v38;
}

void sub_10004D054(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004D268(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004DAA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004E230(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004E510(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10004E538(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 299, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 48));
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 299;
    v27 = 2114;
    v28 = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }

  return objc_msgSend(*(id *)(a1 + 32), "internalEndSession:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_10004E778(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  void *v16;
  uint64_t v17;
  void (*v18)(uint64_t, const char *, ...);
  objc_class *v19;
  _BOOL4 v20;
  const char *v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  objc_class *v28;
  int v29;
  const char *v30;
  const char *v31;
  void *v32;
  uint64_t result;
  const char *Name;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  void *v44;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 311);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v36 = v13;
    v37 = 2082;
    v38 = v14;
    v39 = 2082;
    v40 = v15;
    v41 = 1024;
    v42 = 311;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFLogGetLogger(v16);
    if (v17)
    {
      v18 = (void (*)(uint64_t, const char *, ...))v17;
      v19 = object_getClass(*(id *)(a1 + 32));
      v20 = class_isMetaClass(v19);
      v21 = object_getClassName(*(id *)(a1 + 32));
      v22 = sel_getName(*(SEL *)(a1 + 48));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v24 = 45;
      if (v20)
        v24 = 43;
      v18(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v24, v21, v22, 313, v23);

    }
    v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v26 = NFSharedLogGetLogger(v25);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v28 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v28))
        v29 = 43;
      else
        v29 = 45;
      v30 = object_getClassName(*(id *)(a1 + 32));
      v31 = sel_getName(*(SEL *)(a1 + 48));
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v36 = v29;
      v37 = 2082;
      v38 = v30;
      v39 = 2082;
      v40 = v31;
      v41 = 1024;
      v42 = 313;
      v43 = 2114;
      v44 = v32;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
  }
  else
  {
    v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
    -[NSObject prioritizeSession:](v27, "prioritizeSession:", *(_QWORD *)(a1 + 32));
  }

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10004EB60(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  uint64_t v33;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i Requesting to active %{public}@ using token %{public}@", v10, ClassName, Name, 323, v9, *(_QWORD *)(a1 + 40));

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 56));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v19 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 67110402;
    v23 = v15;
    v24 = 2082;
    v25 = v16;
    v26 = 2082;
    v27 = v17;
    v28 = 1024;
    v29 = 323;
    v30 = 2114;
    v31 = v18;
    v32 = 2114;
    v33 = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Requesting to active %{public}@ using token %{public}@", buf, 0x36u);

  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "switchToSession:withToken:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10004F330(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10004F548(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  NSMutableSet *v5;
  void *v6;
  objc_super v8;

  v3 = a2;
  if (a1)
  {
    v8.receiver = a1;
    v8.super_class = (Class)NFClientAppStateObserver;
    v4 = objc_msgSendSuper2(&v8, "init");
    a1 = v4;
    if (v4)
    {
      objc_storeWeak((id *)v4 + 3, v3);
      v5 = objc_opt_new(NSMutableSet);
      v6 = (void *)a1[2];
      a1[2] = v5;

    }
  }

  return a1;
}

void sub_10004F678(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v9;
  const char *ClassName;
  const char *Name;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  id location;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE buf[40];

  v3 = a2;
  if (a1)
  {
    v4 = *(id *)(a1 + 16);
    objc_sync_enter(v4);
    objc_msgSend(*(id *)(a1 + 16), "addObject:", v3);
    if (!qword_10032ACB0)
    {
      *(_OWORD *)buf = off_1002E5E10;
      *(_QWORD *)&buf[16] = 0;
      qword_10032ACB0 = _sl_dlopen(buf, 0);
    }
    if (qword_10032ACB0)
    {
      v5 = *(void **)(a1 + 8);
      if (v5)
      {
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_10005105C;
        *(_QWORD *)&buf[24] = &unk_1002E5DF0;
        *(_QWORD *)&buf[32] = a1;
        objc_msgSend(v5, "updateConfiguration:", buf);
      }
      else
      {
        objc_initWeak(&location, (id)a1);
        v26 = 0;
        v27 = &v26;
        v28 = 0x2050000000;
        v19 = (void *)qword_10032A880;
        v29 = qword_10032A880;
        if (!qword_10032A880)
        {
          *(_QWORD *)buf = _NSConcreteStackBlock;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = sub_100051590;
          *(_QWORD *)&buf[24] = &unk_1002E5E30;
          *(_QWORD *)&buf[32] = &v26;
          sub_100051590((uint64_t)buf);
          v19 = (void *)v27[3];
        }
        v20 = objc_retainAutorelease(v19);
        _Block_object_dispose(&v26, 8);
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        v23[2] = sub_10004FA0C;
        v23[3] = &unk_1002E5DC8;
        v23[4] = a1;
        objc_copyWeak(&v24, &location);
        v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "monitorWithConfiguration:", v23));
        v22 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v21;

        objc_destroyWeak(&v24);
        objc_destroyWeak(&location);
      }
    }
    else
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass((id)a1);
        if (class_isMetaClass(Class))
          v9 = 43;
        else
          v9 = 45;
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("registerForStateChangesToConnection:");
        Logger(3, "%c[%{public}s %{public}s]:%i RB not available.", v9, ClassName, Name, 72);
      }
      v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v13 = NFSharedLogGetLogger(v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = object_getClass((id)a1);
        if (class_isMetaClass(v15))
          v16 = 43;
        else
          v16 = 45;
        v17 = object_getClassName((id)a1);
        v18 = sel_getName("registerForStateChangesToConnection:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v16;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = v17;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v18;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 72;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i RB not available.", buf, 0x22u);
      }

    }
    objc_sync_exit(v4);

  }
}

void sub_10004F9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21)
{
  void *v21;

  _Block_object_dispose(&a21, 8);
  objc_destroyWeak(&location);
  objc_sync_exit(v21);
  _Unwind_Resume(a1);
}

void sub_10004FA0C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  NSMutableArray *v16;
  _QWORD v17[5];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = sub_10004FC1C;
  v15 = sub_10004FC2C;
  v16 = objc_opt_new(NSMutableArray);
  v18 = 0;
  v19 = &v18;
  v20 = 0x2050000000;
  v4 = (void *)qword_10032A888;
  v21 = qword_10032A888;
  if (!qword_10032A888)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100051754;
    v17[3] = &unk_1002E5E30;
    v17[4] = &v18;
    sub_100051754((uint64_t)v17);
    v4 = (void *)v19[3];
  }
  v5 = objc_retainAutorelease(v4);
  _Block_object_dispose(&v18, 8);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "descriptor"));
  objc_msgSend(v6, "setValues:", 1);
  objc_msgSend(v6, "setEndowmentNamespaces:", &off_100305CB0);
  objc_msgSend(v3, "setStateDescriptor:", v6);
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004FC34;
  v10[3] = &unk_1002E5D78;
  v10[4] = &v11;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v10);
  objc_msgSend(v3, "setPredicates:", v12[5]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10004FE38;
  v8[3] = &unk_1002E5DA0;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  objc_msgSend(v3, "setUpdateHandler:", v8);
  objc_destroyWeak(&v9);

  _Block_object_dispose(&v11, 8);
}

void sub_10004FBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  _Block_object_dispose((const void *)(v12 - 96), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004FC1C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10004FC2C(uint64_t a1)
{

}

void sub_10004FC34(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = sub_10004FCC8();
  v5 = objc_msgSend(v3, "processIdentifier");

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifierWithPid:", v5));
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v7 = objc_msgSend(sub_10004FD80(), "predicateMatchingIdentifier:", v9);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v6, "addObject:", v8);

}

id sub_10004FCC8()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_10032A890;
  v7 = qword_10032A890;
  if (!qword_10032A890)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100051818;
    v3[3] = &unk_1002E5E30;
    v3[4] = &v4;
    sub_100051818((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10004FD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004FD80()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_10032A898;
  v7 = qword_10032A898;
  if (!qword_10032A898)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000518DC;
    v3[3] = &unk_1002E5E30;
    v3[4] = &v4;
    sub_1000518DC((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10004FE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004FE38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  NSObject *v6;
  id *WeakRetained;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned __int8 v15;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v19;
  const char *ClassName;
  const char *Name;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  const char *v27;
  const char *v28;
  NSMutableArray *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  void *i;
  void *v35;
  NSMutableArray *v36;
  id v37;
  uint64_t v38;
  void *j;
  uint64_t v40;
  id v41;
  id v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  _BYTE state[18];
  __int16 v54;
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  void *v63;

  v5 = a4;
  v6 = _os_activity_create((void *)&_mh_execute_header, "app suspension state changed", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v6, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v8 = v5;
  v9 = v8;
  if (WeakRetained)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "process"));
    v11 = objc_msgSend(v10, "pid");

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "state"));
    v13 = objc_msgSend(v12, "taskState");

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "state"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "endowmentNamespaces"));

    v15 = objc_msgSend(v43, "containsObject:", CFSTR("com.apple.frontboard.visibility"));
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(WeakRetained);
      if (class_isMetaClass(Class))
        v19 = 43;
      else
        v19 = 45;
      ClassName = object_getClassName(WeakRetained);
      Name = sel_getName("_applicationStateChanged:");
      Logger(6, "%c[%{public}s %{public}s]:%i state=%d for pid %d visibility = %{public}@", v19, ClassName, Name, 211, v13, v11, v43);
    }
    v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v23 = NFSharedLogGetLogger(v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = object_getClass(WeakRetained);
      if (class_isMetaClass(v25))
        v26 = 43;
      else
        v26 = 45;
      v27 = object_getClassName(WeakRetained);
      v28 = sel_getName("_applicationStateChanged:");
      *(_DWORD *)state = 67110658;
      *(_DWORD *)&state[4] = v26;
      *(_WORD *)&state[8] = 2082;
      *(_QWORD *)&state[10] = v27;
      v54 = 2082;
      v55 = v28;
      v56 = 1024;
      v57 = 211;
      v58 = 1024;
      v59 = v13;
      v60 = 1024;
      v61 = (int)v11;
      v62 = 2114;
      v63 = v43;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i state=%d for pid %d visibility = %{public}@", state, 0x38u);
    }

    if (v13 == 3 || v13 == 4 && (v15 & 1) == 0)
    {
      v29 = objc_opt_new(NSMutableArray);
      v30 = WeakRetained[2];
      objc_sync_enter(v30);
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v31 = WeakRetained[2];
      v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v48, state, 16);
      if (v32)
      {
        v33 = *(_QWORD *)v49;
        do
        {
          for (i = 0; i != v32; i = (char *)i + 1)
          {
            if (*(_QWORD *)v49 != v33)
              objc_enumerationMutation(v31);
            v35 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v35, "processIdentifier") == (_DWORD)v11)
              -[NSMutableArray addObject:](v29, "addObject:", v35);
          }
          v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v48, state, 16);
        }
        while (v32);
      }

      objc_sync_exit(v30);
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v36 = v29;
      v37 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v36, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
      if (v37)
      {
        v38 = *(_QWORD *)v45;
        do
        {
          for (j = 0; j != v37; j = (char *)j + 1)
          {
            if (*(_QWORD *)v45 != v38)
              objc_enumerationMutation(v36);
            v40 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)j);
            v41 = objc_loadWeakRetained(WeakRetained + 3);

            if (v41)
            {
              v42 = objc_loadWeakRetained(WeakRetained + 3);
              objc_msgSend(v42, "clientAppIsSuspended:", v40);

            }
          }
          v37 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v36, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
        }
        while (v37);
      }

    }
  }

}

void sub_100050270(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100050294(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  __int128 v7;
  void (*v8)(uint64_t, void *);
  void *v9;
  uint64_t v10;

  v3 = a2;
  if (a1)
  {
    v4 = *(id *)(a1 + 16);
    objc_sync_enter(v4);
    objc_msgSend(*(id *)(a1 + 16), "removeObject:", v3);
    if (!qword_10032ACB0)
    {
      v7 = off_1002E5E10;
      v8 = 0;
      qword_10032ACB0 = _sl_dlopen(&v7, 0);
    }
    if (qword_10032ACB0)
    {
      if (objc_msgSend(*(id *)(a1 + 16), "count"))
      {
        v5 = *(void **)(a1 + 8);
        *(_QWORD *)&v7 = _NSConcreteStackBlock;
        *((_QWORD *)&v7 + 1) = 3221225472;
        v8 = sub_10005105C;
        v9 = &unk_1002E5DF0;
        v10 = a1;
        objc_msgSend(v5, "updateConfiguration:", &v7);
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 8), "invalidate");
        v6 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

      }
    }
    objc_sync_exit(v4);

  }
}

void sub_1000503C0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000503DC(unint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v16;
  const char *ClassName;
  const char *Name;
  void *v19;
  uint64_t v20;
  objc_class *v21;
  int v22;
  const char *v23;
  const char *v24;
  _BYTE buf[28];
  __int16 v27;
  int v28;

  v3 = a2;
  if (a1)
  {
    if (!qword_10032ACB0)
    {
      *(_OWORD *)buf = off_1002E5E10;
      *(_QWORD *)&buf[16] = 0;
      qword_10032ACB0 = _sl_dlopen(buf, 0);
    }
    if (qword_10032ACB0)
    {
      v4 = *(id *)(a1 + 16);
      objc_sync_enter(v4);
      v5 = sub_10005068C();
      v6 = sub_10004FD80();
      v7 = objc_msgSend(sub_10004FCC8(), "identifierWithPid:", objc_msgSend(v3, "processIdentifier"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "predicateMatchingIdentifier:", v8));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "handleForPredicate:error:", v9, 0));

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "currentState"));
      v12 = v11;
      if (v11)
        a1 = objc_msgSend(v11, "taskState") == 3;
      else
        a1 = 1;

      objc_sync_exit(v4);
    }
    else
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass((id)a1);
        if (class_isMetaClass(Class))
          v16 = 43;
        else
          v16 = 45;
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("isClientSuspended:");
        Logger(3, "%c[%{public}s %{public}s]:%i No RB, faking result", v16, ClassName, Name, 122);
      }
      v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v20 = NFSharedLogGetLogger(v19);
      v4 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v21 = object_getClass((id)a1);
        if (class_isMetaClass(v21))
          v22 = 43;
        else
          v22 = 45;
        v23 = object_getClassName((id)a1);
        v24 = sel_getName("isClientSuspended:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v22;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = v23;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v24;
        v27 = 1024;
        v28 = 122;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No RB, faking result", buf, 0x22u);
      }
      a1 = 0;
    }

  }
  return a1;
}

void sub_10005066C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10005068C()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_10032A8A0;
  v7 = qword_10032A8A0;
  if (!qword_10032A8A0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000519A0;
    v3[3] = &unk_1002E5E30;
    v3[4] = &v4;
    sub_1000519A0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10005072C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t sub_100050744(unint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v15;
  const char *ClassName;
  const char *Name;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  const char *v23;
  const char *v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  void (*v28)(uint64_t, const char *, ...);
  objc_class *v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  int v37;
  const char *v38;
  const char *v39;
  unsigned int v41;
  void *v42;
  NSObject *obj;
  _BYTE buf[28];
  __int16 v45;
  int v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  unsigned int v50;
  __int16 v51;
  unsigned int v52;
  __int16 v53;
  void *v54;

  v3 = a2;
  if (a1)
  {
    if (!qword_10032ACB0)
    {
      *(_OWORD *)buf = off_1002E5E10;
      *(_QWORD *)&buf[16] = 0;
      qword_10032ACB0 = _sl_dlopen(buf, 0);
    }
    if (qword_10032ACB0)
    {
      obj = *(id *)(a1 + 16);
      objc_sync_enter(obj);
      v4 = sub_10005068C();
      v5 = sub_10004FD80();
      v6 = objc_msgSend(sub_10004FCC8(), "identifierWithPid:", objc_msgSend(v3, "processIdentifier"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "predicateMatchingIdentifier:", v7));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "handleForPredicate:error:", v8, 0));

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "currentState"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "endowmentNamespaces"));
      v41 = objc_msgSend(v11, "containsObject:", CFSTR("com.apple.frontboard.visibility"));
      v42 = v9;
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass((id)a1);
        if (class_isMetaClass(Class))
          v15 = 43;
        else
          v15 = 45;
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("isClientBackground:");
        Logger(6, "%c[%{public}s %{public}s]:%i State=%{public}@ task_state=%d for pid %d visibility = %{public}@", v15, ClassName, Name, 151, v10, objc_msgSend(v10, "taskState"), objc_msgSend(v3, "processIdentifier"), v11);
      }
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFSharedLogGetLogger(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v21 = object_getClass((id)a1);
        if (class_isMetaClass(v21))
          v22 = 43;
        else
          v22 = 45;
        v23 = object_getClassName((id)a1);
        v24 = sel_getName("isClientBackground:");
        v25 = objc_msgSend(v10, "taskState");
        v26 = objc_msgSend(v3, "processIdentifier");
        *(_DWORD *)buf = 67110914;
        *(_DWORD *)&buf[4] = v22;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = v23;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v24;
        v45 = 1024;
        v46 = 151;
        v47 = 2114;
        v48 = v10;
        v49 = 1024;
        v50 = v25;
        v51 = 1024;
        v52 = v26;
        v53 = 2114;
        v54 = v11;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i State=%{public}@ task_state=%d for pid %d visibility = %{public}@", buf, 0x42u);
      }

      if (v10)
      {
        if (objc_msgSend(v10, "taskState") == 3)
        {
          a1 = 1;
        }
        else if (objc_msgSend(v10, "taskState") == 4)
        {
          a1 = v41 ^ 1;
        }
        else
        {
          a1 = 0;
        }
      }
      else
      {
        a1 = 0;
      }

      v35 = obj;
      objc_sync_exit(obj);
    }
    else
    {
      v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v27);
      if (v28)
      {
        v29 = object_getClass((id)a1);
        if (class_isMetaClass(v29))
          v30 = 43;
        else
          v30 = 45;
        v31 = object_getClassName((id)a1);
        v32 = sel_getName("isClientBackground:");
        v28(3, "%c[%{public}s %{public}s]:%i No RB, faking result", v30, v31, v32, 141);
      }
      v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v34 = NFSharedLogGetLogger(v33);
      v35 = objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        v36 = object_getClass((id)a1);
        if (class_isMetaClass(v36))
          v37 = 43;
        else
          v37 = 45;
        v38 = object_getClassName((id)a1);
        v39 = sel_getName("isClientBackground:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v37;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = v38;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v39;
        v45 = 1024;
        v46 = 141;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No RB, faking result", buf, 0x22u);
      }
      a1 = 0;
    }

  }
  return a1;
}

void sub_100050BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_100050BD4(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v15;
  const char *ClassName;
  const char *Name;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  objc_class *v22;
  int v23;
  const char *v24;
  const char *v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  objc_class *v36;
  int v37;
  const char *v38;
  const char *v39;
  NSObject *v41;
  void *v42;
  unsigned int v43;
  _BYTE buf[28];
  __int16 v45;
  int v46;
  __int16 v47;
  unsigned int v48;
  __int16 v49;
  unsigned int v50;
  __int16 v51;
  void *v52;

  v3 = a2;
  if (a1)
  {
    if (!qword_10032ACB0)
    {
      *(_OWORD *)buf = off_1002E5E10;
      *(_QWORD *)&buf[16] = 0;
      qword_10032ACB0 = _sl_dlopen(buf, 0);
    }
    if (qword_10032ACB0)
    {
      v41 = a1[2];
      objc_sync_enter(v41);
      v4 = sub_10005068C();
      v5 = sub_10004FD80();
      v6 = objc_msgSend(sub_10004FCC8(), "identifierWithPid:", objc_msgSend(v3, "processIdentifier"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "predicateMatchingIdentifier:", v7));
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "handleForPredicate:error:", v8, 0));

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "currentState"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "endowmentNamespaces"));
      v43 = objc_msgSend(v10, "containsObject:", CFSTR("com.apple.frontboard.visibility"));
      v11 = v3;
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass(a1);
        if (class_isMetaClass(Class))
          v15 = 43;
        else
          v15 = 45;
        ClassName = object_getClassName(a1);
        Name = sel_getName("isClientForeground:");
        Logger(6, "%c[%{public}s %{public}s]:%i task_state=%d for pid %d visibility = %{public}@", v15, ClassName, Name, 176, objc_msgSend(v9, "taskState"), objc_msgSend(v11, "processIdentifier"), v10);
      }
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFSharedLogGetLogger(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      v21 = v41;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v22 = object_getClass(a1);
        if (class_isMetaClass(v22))
          v23 = 43;
        else
          v23 = 45;
        v24 = object_getClassName(a1);
        v25 = sel_getName("isClientForeground:");
        v26 = objc_msgSend(v9, "taskState");
        v27 = objc_msgSend(v11, "processIdentifier");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v23;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = v24;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v25;
        v45 = 1024;
        v46 = 176;
        v47 = 1024;
        v48 = v26;
        v49 = 1024;
        v50 = v27;
        v51 = 2114;
        v52 = v10;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i task_state=%d for pid %d visibility = %{public}@", buf, 0x38u);
      }

      v3 = v11;
      if (!v9 || objc_msgSend(v9, "taskState") != 2 && objc_msgSend(v9, "taskState") != 4)
        v43 = 0;

      objc_sync_exit(v41);
    }
    else
    {
      v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v28);
      if (v29)
      {
        v30 = object_getClass(a1);
        if (class_isMetaClass(v30))
          v31 = 43;
        else
          v31 = 45;
        v32 = object_getClassName(a1);
        v33 = sel_getName("isClientForeground:");
        v29(3, "%c[%{public}s %{public}s]:%i No RB, faking result", v31, v32, v33, 166);
      }
      v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v35 = NFSharedLogGetLogger(v34);
      v21 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v36 = object_getClass(a1);
        if (class_isMetaClass(v36))
          v37 = 43;
        else
          v37 = 45;
        v38 = object_getClassName(a1);
        v39 = sel_getName("isClientForeground:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v37;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = v38;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v39;
        v45 = 1024;
        v46 = 166;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No RB, faking result", buf, 0x22u);
      }
      v43 = 0;
    }

  }
  else
  {
    v43 = 0;
  }

  return v43;
}

void sub_100051028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10005105C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  NSMutableArray *v11;

  v3 = a2;
  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = sub_10004FC1C;
  v10 = sub_10004FC2C;
  v11 = objc_opt_new(NSMutableArray);
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100051148;
  v5[3] = &unk_1002E5D78;
  v5[4] = &v6;
  objc_msgSend(v4, "enumerateObjectsUsingBlock:", v5);
  objc_msgSend(v3, "setPredicates:", v7[5]);
  _Block_object_dispose(&v6, 8);

}

void sub_100051130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100051148(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = sub_10004FCC8();
  v5 = objc_msgSend(v3, "processIdentifier");

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifierWithPid:", v5));
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v7 = objc_msgSend(sub_10004FD80(), "predicateMatchingIdentifier:", v9);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v6, "addObject:", v8);

}

id sub_1000511DC(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t, const char *, ...);
  objc_class *v16;
  _BOOL4 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  objc_class *v22;
  int v23;
  const char *v24;
  const char *v25;
  void *v26;
  void *v27;
  void *specific;
  uint64_t Logger;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  const char *v40;
  const char *v41;
  const char *v43;
  const char *v44;
  const char *Name;
  id v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  id v56;

  v5 = a2;
  v6 = (void *)objc_opt_self(a1);
  v7 = sub_10004FCC8();
  v8 = objc_msgSend(v5, "processIdentifier");

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifierWithPid:", v8));
  v46 = 0;
  v10 = objc_msgSend(sub_10005068C(), "handleForIdentifier:error:", v9, &v46);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = v46;
  if (!v12)
  {
    if (v11)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "bundle"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "identifier"));

      goto LABEL_26;
    }
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v30 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v6);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v6);
      Name = sel_getName("bundleIdentifierFromConnection:error:");
      v34 = 45;
      if (isMetaClass)
        v34 = 43;
      v30(6, "%c[%{public}s %{public}s]:%i nil handle", v34, ClassName, Name, 242);
    }
    v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v36 = NFSharedLogGetLogger(v35);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v38 = object_getClass(v6);
      if (class_isMetaClass(v38))
        v39 = 43;
      else
        v39 = 45;
      v40 = object_getClassName(v6);
      v41 = sel_getName("bundleIdentifierFromConnection:error:");
      *(_DWORD *)buf = 67109890;
      v48 = v39;
      v49 = 2082;
      v50 = v40;
      v51 = 2082;
      v52 = v41;
      v53 = 1024;
      v54 = 242;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i nil handle", buf, 0x22u);
    }

LABEL_25:
    v26 = 0;
    goto LABEL_26;
  }
  v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v14 = NFLogGetLogger(v13);
  if (v14)
  {
    v15 = (void (*)(uint64_t, const char *, ...))v14;
    v16 = object_getClass(v6);
    v17 = class_isMetaClass(v16);
    v43 = object_getClassName(v6);
    v44 = sel_getName("bundleIdentifierFromConnection:error:");
    v18 = 45;
    if (v17)
      v18 = 43;
    v15(4, "%c[%{public}s %{public}s]:%i %@", v18, v43, v44, 238, v12);
  }
  v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v20 = NFSharedLogGetLogger(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    v22 = object_getClass(v6);
    if (class_isMetaClass(v22))
      v23 = 43;
    else
      v23 = 45;
    v24 = object_getClassName(v6);
    v25 = sel_getName("bundleIdentifierFromConnection:error:");
    *(_DWORD *)buf = 67110146;
    v48 = v23;
    v49 = 2082;
    v50 = v24;
    v51 = 2082;
    v52 = v25;
    v53 = 1024;
    v54 = 238;
    v55 = 2112;
    v56 = v12;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@", buf, 0x2Cu);
  }

  if (!a3)
    goto LABEL_25;
  v26 = 0;
  *a3 = objc_retainAutorelease(v12);
LABEL_26:

  return v26;
}

void sub_100051590(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_100051654();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("RBSProcessMonitor");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_10032A880 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getRBSProcessMonitorClass(void)_block_invoke"));
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("NFClientAppStateObserver.m"), 22, CFSTR("Unable to find class %s"), "RBSProcessMonitor");

    __break(1u);
  }
}

void sub_100051654()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_10032ACB0)
  {
    v4 = off_1002E5E10;
    v5 = 0;
    qword_10032ACB0 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_10032ACB0)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *RunningBoardServicesLibrary(void)"));
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("NFClientAppStateObserver.m"), 21, CFSTR("%s"), v3);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3;
  if (v3)
LABEL_7:
    free(v0);
}

void sub_100051754(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_100051654();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("RBSProcessStateDescriptor");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_10032A888 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getRBSProcessStateDescriptorClass(void)_block_invoke"));
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("NFClientAppStateObserver.m"), 23, CFSTR("Unable to find class %s"), "RBSProcessStateDescriptor");

    __break(1u);
  }
}

void sub_100051818(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_100051654();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("RBSProcessIdentifier");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_10032A890 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getRBSProcessIdentifierClass(void)_block_invoke"));
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("NFClientAppStateObserver.m"), 25, CFSTR("Unable to find class %s"), "RBSProcessIdentifier");

    __break(1u);
  }
}

void sub_1000518DC(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_100051654();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("RBSProcessPredicate");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_10032A898 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getRBSProcessPredicateClass(void)_block_invoke"));
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("NFClientAppStateObserver.m"), 24, CFSTR("Unable to find class %s"), "RBSProcessPredicate");

    __break(1u);
  }
}

void sub_1000519A0(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_100051654();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("RBSProcessHandle");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_10032A8A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getRBSProcessHandleClass(void)_block_invoke"));
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("NFClientAppStateObserver.m"), 26, CFSTR("Unable to find class %s"), "RBSProcessHandle");

    __break(1u);
  }
}

_QWORD *sub_100051A64(_QWORD *a1, void *a2)
{
  id v3;
  _QWORD *v4;
  NFWalletPresentationServiceAssertionCounter *v5;
  void *v6;
  objc_super v8;

  v3 = a2;
  if (a1)
  {
    v8.receiver = a1;
    v8.super_class = (Class)NFWalletPresentationService;
    v4 = objc_msgSendSuper2(&v8, "init");
    a1 = v4;
    if (v4)
    {
      v4[2] = v3;
      v5 = objc_opt_new(NFWalletPresentationServiceAssertionCounter);
      v6 = (void *)a1[5];
      a1[5] = v5;

    }
  }

  return a1;
}

void sub_100051ADC(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  void *v14;
  uint64_t v15;
  void (*v16)(uint64_t, const char *, ...);
  objc_class *v17;
  _BOOL4 v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  objc_class *v24;
  int v25;
  const char *v26;
  const char *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  id v32;
  uint64_t v33;
  NFKeyBag *v34;
  void *v35;
  const char *Name;
  const char *v37;
  _QWORD v38[6];
  uint8_t buf[8];
  _BYTE v40[10];
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;

  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("start");
      v8 = 45;
      if (isMetaClass)
        v8 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 49);
    }
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFSharedLogGetLogger(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = object_getClass((id)a1);
      if (class_isMetaClass(v12))
        v13 = 43;
      else
        v13 = 45;
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v40 = 2082;
      *(_QWORD *)&v40[2] = object_getClassName((id)a1);
      v41 = 2082;
      v42 = sel_getName("start");
      v43 = 1024;
      v44 = 49;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    if (*(_QWORD *)(a1 + 8))
    {
      v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v15 = NFLogGetLogger(v14);
      if (v15)
      {
        v16 = (void (*)(uint64_t, const char *, ...))v15;
        v17 = object_getClass((id)a1);
        v18 = class_isMetaClass(v17);
        v19 = object_getClassName((id)a1);
        v37 = sel_getName("start");
        v20 = 45;
        if (v18)
          v20 = 43;
        v16(4, "%c[%{public}s %{public}s]:%i Previously started", v20, v19, v37, 52);
      }
      v21 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v22 = NFSharedLogGetLogger(v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = object_getClass((id)a1);
        if (class_isMetaClass(v24))
          v25 = 43;
        else
          v25 = 45;
        v26 = object_getClassName((id)a1);
        v27 = sel_getName("start");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v25;
        *(_WORD *)v40 = 2082;
        *(_QWORD *)&v40[2] = v26;
        v41 = 2082;
        v42 = v27;
        v43 = 1024;
        v44 = 52;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Previously started", buf, 0x22u);
      }

    }
    else
    {
      v28 = _os_activity_create((void *)&_mh_execute_header, "NFWalletPresentmentMonitor started", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
      *(_QWORD *)buf = 0;
      *(_QWORD *)v40 = 0;
      os_activity_scope_enter(v28, (os_activity_scope_state_t)buf);
      os_activity_scope_leave((os_activity_scope_state_t)buf);

      v30 = NFSharedSignpostLog(v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_signpost_enabled(v31))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFWalletPresentmentMonitor_START", "", buf, 2u);
      }

      v32 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.nfcd.wallet.presentation"));
      objc_storeStrong((id *)(a1 + 8), v32);

      objc_msgSend(*(id *)(a1 + 8), "setDelegate:", a1);
      v33 = *(_QWORD *)(a1 + 40);
      if (v33)
      {
        *(_BYTE *)(v33 + 10) = 0;
        *(_WORD *)(v33 + 8) = 0;
      }
      objc_msgSend(*(id *)(a1 + 8), "activate");
      if (!*(_QWORD *)(a1 + 32))
      {
        v34 = objc_opt_new(NFKeyBag);
        objc_storeStrong((id *)(a1 + 32), v34);

        v35 = *(void **)(a1 + 32);
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472;
        v38[2] = sub_100051F00;
        v38[3] = &unk_1002E5E58;
        v38[4] = a1;
        v38[5] = "start";
        sub_1001EB334(v35, &_dispatch_main_q, v38);
      }
      objc_msgSend(*(id *)(a1 + 24), "addObserver:forKeyPath:options:context:", a1, CFSTR("walletDomain"), 5, off_100328360);
    }
  }
}

void sub_100051EF0(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 32), a2);
}

void sub_100051F00(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  NFWalletPresentationEventPublisher *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  const char *Name;
  _QWORD *v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[4];
  v29 = v2;
  if (!sub_1000098F0(v29))
    goto LABEL_29;
  v3 = *(_QWORD **)(a1 + 32);
  if (v3)
    v3 = (_QWORD *)v3[4];
  v4 = v3;
  if (!sub_10000993C(v4))
  {

LABEL_29:
    return;
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    v6 = *(_QWORD *)(v5 + 24);
  else
    v6 = 0;

  if (!v6)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v13 = 45;
      if (isMetaClass)
        v13 = 43;
      v9(6, "%c[%{public}s %{public}s]:%i Starting event publisher", v13, ClassName, Name, 70);
    }
    v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v15 = NFSharedLogGetLogger(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v17))
        v18 = 43;
      else
        v18 = 45;
      v19 = object_getClassName(*(id *)(a1 + 32));
      v20 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      v31 = v18;
      v32 = 2082;
      v33 = v19;
      v34 = 2082;
      v35 = v20;
      v36 = 1024;
      v37 = 70;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Starting event publisher", buf, 0x22u);
    }

    v21 = objc_opt_new(NFWalletPresentationEventPublisher);
    v22 = *(_QWORD *)(a1 + 32);
    if (v22)
      objc_storeStrong((id *)(v22 + 24), v21);

    v23 = *(_QWORD *)(a1 + 32);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 24);
      v25 = *(id *)(v23 + 16);
      if (v24)
        *(_QWORD *)(v24 + 40) = v25;
    }
    else
    {
      v25 = 0;
    }

    v26 = *(_QWORD *)(a1 + 32);
    if (v26)
      v27 = *(void **)(v26 + 32);
    else
      v27 = 0;
    sub_1001EB470(v27);
    sub_100051EF0(*(_QWORD *)(a1 + 32), 0);
  }
}

void sub_10005217C(id *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;

  if (a1)
  {
    v2 = a1[1];
    if (v2)
    {
      objc_msgSend(v2, "invalidate");
      objc_msgSend(a1[1], "setDelegate:", 0);
      v3 = a1[1];
      a1[1] = 0;

      sub_1001EB470(a1[4]);
      v4 = a1[4];
      a1[4] = 0;

      v5 = a1[3];
      a1[3] = 0;

      objc_msgSend(a1[3], "removeObserver:forKeyPath:", a1, CFSTR("walletDomain"));
    }
    else
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v8 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("stop");
        v12 = 45;
        if (isMetaClass)
          v12 = 43;
        v8(4, "%c[%{public}s %{public}s]:%i Previously stopped", v12, ClassName, Name, 89);
      }
      v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v14 = NFSharedLogGetLogger(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = object_getClass(a1);
        if (class_isMetaClass(v16))
          v17 = 43;
        else
          v17 = 45;
        *(_DWORD *)buf = 67109890;
        v20 = v17;
        v21 = 2082;
        v22 = object_getClassName(a1);
        v23 = 2082;
        v24 = sel_getName("stop");
        v25 = 1024;
        v26 = 89;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Previously stopped", buf, 0x22u);
      }

    }
  }
}

void sub_10005283C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id *a18, id *location)
{
  uint64_t v19;

  objc_destroyWeak(location);
  objc_destroyWeak(a18);
  objc_destroyWeak((id *)(v19 - 184));
  _Unwind_Resume(a1);
}

void sub_100052890(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v8;
  const char *ClassName;
  const char *Name;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  _BYTE state[18];
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  id v34;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = _os_activity_create((void *)&_mh_execute_header, "NFWalletPresentmentMonitor xpcInvalidated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    *(_QWORD *)state = 0;
    *(_QWORD *)&state[8] = 0;
    os_activity_scope_enter(v3, (os_activity_scope_state_t)state);
    os_activity_scope_leave((os_activity_scope_state_t)state);

    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(Class))
        v8 = 43;
      else
        v8 = 45;
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v11 = sub_1001CE3DC(WeakRetained);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      v13 = (void *)v12;
      if (v12)
        v14 = *(void **)(v12 + 8);
      else
        v14 = 0;
      v15 = v14;
      v6(6, "%c[%{public}s %{public}s]:%i XPC (%{public}@) invalidated", v8, ClassName, Name, 127, v15);

    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      v21 = object_getClassName(*(id *)(a1 + 32));
      v22 = sel_getName(*(SEL *)(a1 + 48));
      v23 = sub_1001CE3DC(WeakRetained);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      v25 = (void *)v24;
      if (v24)
        v26 = *(void **)(v24 + 8);
      else
        v26 = 0;
      v27 = v26;
      *(_DWORD *)state = 67110146;
      *(_DWORD *)&state[4] = v20;
      *(_WORD *)&state[8] = 2082;
      *(_QWORD *)&state[10] = v21;
      v29 = 2082;
      v30 = v22;
      v31 = 1024;
      v32 = 127;
      v33 = 2114;
      v34 = v27;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i XPC (%{public}@) invalidated", state, 0x2Cu);

    }
    objc_msgSend(WeakRetained, "setUserInfo:", 0);
  }

}

void sub_100052AE8(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v8;
  const char *ClassName;
  const char *Name;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  _BYTE state[18];
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  id v34;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = _os_activity_create((void *)&_mh_execute_header, "NFWalletPresentmentMonitor xpcInterrupted", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    *(_QWORD *)state = 0;
    *(_QWORD *)&state[8] = 0;
    os_activity_scope_enter(v3, (os_activity_scope_state_t)state);
    os_activity_scope_leave((os_activity_scope_state_t)state);

    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(Class))
        v8 = 43;
      else
        v8 = 45;
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v11 = sub_1001CE3DC(WeakRetained);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      v13 = (void *)v12;
      if (v12)
        v14 = *(void **)(v12 + 8);
      else
        v14 = 0;
      v15 = v14;
      v6(6, "%c[%{public}s %{public}s]:%i XPC (%{public}@) invalidated", v8, ClassName, Name, 138, v15);

    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      v21 = object_getClassName(*(id *)(a1 + 32));
      v22 = sel_getName(*(SEL *)(a1 + 48));
      v23 = sub_1001CE3DC(WeakRetained);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      v25 = (void *)v24;
      if (v24)
        v26 = *(void **)(v24 + 8);
      else
        v26 = 0;
      v27 = v26;
      *(_DWORD *)state = 67110146;
      *(_DWORD *)&state[4] = v20;
      *(_WORD *)&state[8] = 2082;
      *(_QWORD *)&state[10] = v21;
      v29 = 2082;
      v30 = v22;
      v31 = 1024;
      v32 = 138;
      v33 = 2114;
      v34 = v27;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i XPC (%{public}@) invalidated", state, 0x2Cu);

    }
  }

}

id sub_100053DF4(uint64_t a1)
{
  void *v2;
  NFUIService *v3;
  void *v4;

  v2 = *(void **)(a1 + 8);
  if (!v2)
  {
    v3 = objc_opt_new(NFUIService);
    v4 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;

    v2 = *(void **)(a1 + 8);
  }
  return v2;
}

void sub_100053E34(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v1;
  _QWORD v2[6];

  if (a1)
  {
    v1 = a1 + 4;
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100053EAC;
    v2[3] = &unk_1002E5C30;
    v2[4] = a1;
    v2[5] = "_updatePresenterAvailable";
    os_unfair_lock_lock(a1 + 4);
    sub_100053EAC((uint64_t)v2);
    os_unfair_lock_unlock(v1);
  }
}

void sub_100053EAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *v10;
  _BOOL4 v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *specific;
  uint64_t Logger;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  const char *ClassName;
  const char *v37;
  const char *Name;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  unint64_t v50;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 > 4)
  {
    v5 = 0;
    if (*(_BYTE *)(v2 + 32))
    {
LABEL_6:
      *(_BYTE *)(v2 + 32) = v5;
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 33))
          v5 = 0;
        else
          v5 = v5;
      }
      goto LABEL_10;
    }
LABEL_26:
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v25 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v28 = 45;
      if (isMetaClass)
        v28 = 43;
      v25(6, "%c[%{public}s %{public}s]:%i No change (%{public}d)", v28, ClassName, Name, 150, v5);
    }
    v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v30 = NFSharedLogGetLogger(v29);
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      v32 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v32))
        v33 = 43;
      else
        v33 = 45;
      v34 = object_getClassName(*(id *)(a1 + 32));
      v35 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      v40 = v33;
      v41 = 2082;
      v42 = v34;
      v43 = 2082;
      v44 = v35;
      v45 = 1024;
      v46 = 150;
      v47 = 1026;
      v48 = v5;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No change (%{public}d)", buf, 0x28u);
    }

    return;
  }
  v4 = objc_msgSend(*(id *)(v2 + qword_100269A08[v3]), "isEligibleForDoubleClick");
  v5 = (uint64_t)v4;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (((v4 ^ (*(_BYTE *)(v2 + 32) != 0)) & 1) == 0)
      goto LABEL_26;
    goto LABEL_6;
  }
  if ((v4 & 1) == 0)
  {
    v5 = 0;
    goto LABEL_26;
  }
  v5 = 1;
LABEL_10:
  v7 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v8 = NFLogGetLogger(v7);
  if (v8)
  {
    v9 = (void (*)(uint64_t, const char *, ...))v8;
    v10 = object_getClass(*(id *)(a1 + 32));
    v11 = class_isMetaClass(v10);
    v12 = object_getClassName(*(id *)(a1 + 32));
    v37 = sel_getName(*(SEL *)(a1 + 40));
    v13 = 45;
    if (v11)
      v13 = 43;
    v9(5, "%c[%{public}s %{public}s]:%i Consumer available=%{public}d, domain=%{public}lu", v13, v12, v37, 158, v5, v3);
  }
  v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v15 = NFSharedLogGetLogger(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v17))
      v18 = 43;
    else
      v18 = 45;
    v19 = object_getClassName(*(id *)(a1 + 32));
    v20 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110402;
    v40 = v18;
    v41 = 2082;
    v42 = v19;
    v43 = 2082;
    v44 = v20;
    v45 = 1024;
    v46 = 158;
    v47 = 1026;
    v48 = v5;
    v49 = 2050;
    v50 = v3;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Consumer available=%{public}d, domain=%{public}lu", buf, 0x32u);
  }

  v21 = *(_QWORD *)(a1 + 32);
  if (v21)
    v22 = *(void **)(v21 + 64);
  else
    v22 = 0;
  objc_msgSend(v22, "setBool:forKey:", v5, CFSTR("walletDoubleButtonPressedConsumerAvailable"));
}

id sub_100054948(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *Name;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(4, "%c[%{public}s %{public}s]:%i No settings found; init to default value", v8, ClassName, Name, 183);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67109890;
    v22 = v13;
    v23 = 2082;
    v24 = v14;
    v25 = 2082;
    v26 = v15;
    v27 = 1024;
    v28 = 183;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No settings found; init to default value",
      buf,
      0x22u);
  }

  v16 = *(_QWORD *)(a1 + 32);
  if (v16 && (*(_BYTE *)(v16 + 32) = 0, (v17 = *(_QWORD *)(a1 + 32)) != 0))
    v18 = *(void **)(v17 + 64);
  else
    v18 = 0;
  return objc_msgSend(v18, "setBool:forKey:", 0, CFSTR("walletDoubleButtonPressedConsumerAvailable"));
}

id sub_100054AF0(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *v8;
  _BOOL4 isMetaClass;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *specific;
  uint64_t Logger;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v26;
  const char *ClassName;
  const char *Name;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  const char *v41;
  uint8_t buf[4];
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;

  v2 = objc_msgSend(*(id *)(a1 + 40), "BOOLValue");
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3 || (*(_BYTE *)(v3 + 33) = v2, (v4 = *(_QWORD *)(a1 + 32)) == 0) || !*(_BYTE *)(v4 + 33))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v24 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(Class))
        v26 = 43;
      else
        v26 = 45;
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v29 = *(_QWORD *)(a1 + 32);
      if (v29)
        v29 = *(unsigned __int8 *)(v29 + 32);
      v24(5, "%c[%{public}s %{public}s]:%i [Resume] Consumer available=%{public}d", v26, ClassName, Name, 210, v29);
    }
    v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v31 = NFSharedLogGetLogger(v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v33))
        v34 = 43;
      else
        v34 = 45;
      v35 = object_getClassName(*(id *)(a1 + 32));
      v36 = sel_getName(*(SEL *)(a1 + 48));
      v37 = *(_QWORD *)(a1 + 32);
      if (v37)
        LODWORD(v37) = *(unsigned __int8 *)(v37 + 32);
      *(_DWORD *)buf = 67110146;
      v43 = v34;
      v44 = 2082;
      v45 = v35;
      v46 = 2082;
      v47 = v36;
      v48 = 1024;
      v49 = 210;
      v50 = 1026;
      v51 = v37;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i [Resume] Consumer available=%{public}d", buf, 0x28u);
    }

    v38 = *(_QWORD *)(a1 + 32);
    if (v38)
    {
      v20 = *(void **)(v38 + 64);
      v21 = *(unsigned __int8 *)(v38 + 32);
      goto LABEL_31;
    }
LABEL_33:
    v20 = 0;
    v39 = 0;
    return objc_msgSend(v20, "setBool:forKey:", v39, CFSTR("walletDoubleButtonPressedConsumerAvailable"));
  }
  v5 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v6 = NFLogGetLogger(v5);
  if (v6)
  {
    v7 = (void (*)(uint64_t, const char *, ...))v6;
    v8 = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(v8);
    v10 = object_getClassName(*(id *)(a1 + 32));
    v41 = sel_getName(*(SEL *)(a1 + 48));
    v11 = 45;
    if (isMetaClass)
      v11 = 43;
    v7(5, "%c[%{public}s %{public}s]:%i [Suspension] Consumer available=0", v11, v10, v41, 206);
  }
  v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v13 = NFSharedLogGetLogger(v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v15))
      v16 = 43;
    else
      v16 = 45;
    v17 = object_getClassName(*(id *)(a1 + 32));
    v18 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v43 = v16;
    v44 = 2082;
    v45 = v17;
    v46 = 2082;
    v47 = v18;
    v48 = 1024;
    v49 = 206;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i [Suspension] Consumer available=0", buf, 0x22u);
  }

  v19 = *(_QWORD *)(a1 + 32);
  if (!v19)
    goto LABEL_33;
  v20 = *(void **)(v19 + 64);
  v21 = *(unsigned __int8 *)(v19 + 33);
LABEL_31:
  v39 = v21 != 0;
  return objc_msgSend(v20, "setBool:forKey:", v39, CFSTR("walletDoubleButtonPressedConsumerAvailable"));
}

uint64_t sub_100054E0C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100054E1C(uint64_t a1)
{

}

void sub_100054E24(id *a1)
{
  os_unfair_lock_s *v2;
  _QWORD *v3;
  void *v4;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v20;
  const char *ClassName;
  const char *Name;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  objc_class *v26;
  int v27;
  const char *v28;
  const char *v29;
  void *v30;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  objc_class *v39;
  int v40;
  const char *v41;
  const char *v42;
  void *v43;
  void (*v44)(uint64_t, const char *, ...);
  objc_class *v45;
  uint64_t v46;
  const char *v47;
  const char *v48;
  void *v49;
  uint64_t v50;
  NSObject *v51;
  objc_class *v52;
  int v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void (*v62)(uint64_t, const char *, ...);
  objc_class *v63;
  uint64_t v64;
  const char *v65;
  const char *v66;
  void *v67;
  uint64_t v68;
  NSObject *v69;
  objc_class *v70;
  int v71;
  const char *v72;
  const char *v73;
  void *v74;
  void (*v75)(uint64_t, const char *, ...);
  objc_class *v76;
  uint64_t v77;
  const char *v78;
  const char *v79;
  void *v80;
  uint64_t v81;
  NSObject *v82;
  objc_class *v83;
  int v84;
  const char *v85;
  const char *v86;
  void *v87;
  void (*v88)(uint64_t, const char *, ...);
  objc_class *v89;
  uint64_t v90;
  const char *v91;
  const char *v92;
  void *v93;
  uint64_t v94;
  NSObject *v95;
  objc_class *v96;
  int v97;
  const char *v98;
  const char *v99;
  void *v100;
  void (*v101)(uint64_t, const char *, ...);
  objc_class *v102;
  uint64_t v103;
  const char *v104;
  const char *v105;
  void *v106;
  uint64_t v107;
  NSObject *v108;
  objc_class *v109;
  int v110;
  const char *v111;
  const char *v112;
  uint64_t v113;
  id v114;
  _QWORD v115[2];
  void (*v116)(_QWORD *);
  void *v117;
  id *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t (*v129)(uint64_t, uint64_t);
  void (*v130)(uint64_t);
  id v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  char v135;
  unsigned int *v136;
  _DWORD *v137;
  uint8_t buf[4];
  int v139;
  __int16 v140;
  const char *v141;
  __int16 v142;
  const char *v143;
  __int16 v144;
  int v145;
  __int16 v146;
  uint64_t v147;

  if (a1)
  {
    v132 = 0;
    v133 = &v132;
    v134 = 0x2020000000;
    v135 = 0;
    v126 = 0;
    v127 = &v126;
    v128 = 0x3032000000;
    v129 = sub_100054E0C;
    v130 = sub_100054E1C;
    v131 = 0;
    v122 = 0;
    v123 = &v122;
    v124 = 0x2020000000;
    v125 = 0;
    v2 = (os_unfair_lock_s *)(a1 + 2);
    v115[0] = _NSConcreteStackBlock;
    v115[1] = 3221225472;
    v116 = sub_100055A1C;
    v117 = &unk_1002E5ED0;
    v118 = a1;
    v119 = &v132;
    v120 = &v126;
    v121 = &v122;
    v3 = v115;
    os_unfair_lock_lock(v2);
    v116(v3);
    os_unfair_lock_unlock(v2);

    if (!*((_BYTE *)v133 + 24))
    {
      switch(v123[3])
      {
        case 0:
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
          if (Logger)
          {
            Class = object_getClass(a1);
            if (class_isMetaClass(Class))
              v20 = 43;
            else
              v20 = 45;
            ClassName = object_getClassName(a1);
            Name = sel_getName("signalPresentation");
            Logger(6, "%c[%{public}s %{public}s]:%i Routing to passkit in unknown config", v20, ClassName, Name, 300);
          }
          v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v24 = NFSharedLogGetLogger(v23);
          v25 = objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            v26 = object_getClass(a1);
            if (class_isMetaClass(v26))
              v27 = 43;
            else
              v27 = 45;
            v28 = object_getClassName(a1);
            v29 = sel_getName("signalPresentation");
            *(_DWORD *)buf = 67109890;
            v139 = v27;
            v140 = 2082;
            v141 = v28;
            v142 = 2082;
            v143 = v29;
            v144 = 1024;
            v145 = 300;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Routing to passkit in unknown config", buf, 0x22u);
          }

          goto LABEL_25;
        case 1:
          v43 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v44 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v43);
          if (v44)
          {
            v45 = object_getClass(a1);
            if (class_isMetaClass(v45))
              v46 = 43;
            else
              v46 = 45;
            v47 = object_getClassName(a1);
            v48 = sel_getName("signalPresentation");
            v44(6, "%c[%{public}s %{public}s]:%i Notifying %{public}@", v46, v47, v48, 293, v127[5]);
          }
          v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v50 = NFSharedLogGetLogger(v49);
          v51 = objc_claimAutoreleasedReturnValue(v50);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            v52 = object_getClass(a1);
            if (class_isMetaClass(v52))
              v53 = 43;
            else
              v53 = 45;
            v54 = object_getClassName(a1);
            v55 = sel_getName("signalPresentation");
            v56 = v127[5];
            *(_DWORD *)buf = 67110146;
            v139 = v53;
            v140 = 2082;
            v141 = v54;
            v142 = 2082;
            v143 = v55;
            v144 = 1024;
            v145 = 293;
            v146 = 2114;
            v147 = v56;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Notifying %{public}@", buf, 0x2Cu);
          }

          v57 = sub_100053DF4((uint64_t)a1);
          v12 = objc_claimAutoreleasedReturnValue(v57);
          -[NSObject launchBundleWithIdentifier:launchReason:launchDomain:](v12, "launchBundleWithIdentifier:launchReason:launchDomain:", v127[5], 2, 1);
          goto LABEL_97;
        case 2:
          v136 = 0;
          v137 = 0;
          v58 = ACMContextCreate((uint64_t *)&v137);
          if ((_DWORD)v58 || !v137)
          {
            v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v75 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v74);
            if (v75)
            {
              v76 = object_getClass(a1);
              if (class_isMetaClass(v76))
                v77 = 43;
              else
                v77 = 45;
              v78 = object_getClassName(a1);
              v79 = sel_getName("_consumeDoubleButtonCredential");
              v75(4, "%c[%{public}s %{public}s]:%i Failed to create ACMContext? %d", v77, v78, v79, 492, v58);
            }
            v80 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v81 = NFSharedLogGetLogger(v80);
            v82 = objc_claimAutoreleasedReturnValue(v81);
            if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
            {
              v83 = object_getClass(a1);
              if (class_isMetaClass(v83))
                v84 = 43;
              else
                v84 = 45;
              v85 = object_getClassName(a1);
              v86 = sel_getName("_consumeDoubleButtonCredential");
              *(_DWORD *)buf = 67110146;
              v139 = v84;
              v140 = 2082;
              v141 = v85;
              v142 = 2082;
              v143 = v86;
              v144 = 1024;
              v145 = 492;
              v146 = 1024;
              LODWORD(v147) = v58;
              _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create ACMContext? %d", buf, 0x28u);
            }

          }
          else
          {
            v59 = ACMCredentialCreate(5, &v136);
            if ((_DWORD)v59 || !v136)
            {
              v87 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v88 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v87);
              if (v88)
              {
                v89 = object_getClass(a1);
                if (class_isMetaClass(v89))
                  v90 = 43;
                else
                  v90 = 45;
                v91 = object_getClassName(a1);
                v92 = sel_getName("_consumeDoubleButtonCredential");
                v88(4, "%c[%{public}s %{public}s]:%i Failed to create ACMCredential? %d", v90, v91, v92, 498, v59);
              }
              v93 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v94 = NFSharedLogGetLogger(v93);
              v95 = objc_claimAutoreleasedReturnValue(v94);
              if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
              {
                v96 = object_getClass(a1);
                if (class_isMetaClass(v96))
                  v97 = 43;
                else
                  v97 = 45;
                v98 = object_getClassName(a1);
                v99 = sel_getName("_consumeDoubleButtonCredential");
                *(_DWORD *)buf = 67110146;
                v139 = v97;
                v140 = 2082;
                v141 = v98;
                v142 = 2082;
                v143 = v99;
                v144 = 1024;
                v145 = 498;
                v146 = 1024;
                LODWORD(v147) = v59;
                _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create ACMCredential? %d", buf, 0x28u);
              }

              ACMContextDelete(v137, 1);
            }
            else
            {
              v60 = ACMContextAddCredentialWithScope(v137, v136, 1);
              if ((_DWORD)v60)
              {
                v61 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v62 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v61);
                if (v62)
                {
                  v63 = object_getClass(a1);
                  if (class_isMetaClass(v63))
                    v64 = 43;
                  else
                    v64 = 45;
                  v65 = object_getClassName(a1);
                  v66 = sel_getName("_consumeDoubleButtonCredential");
                  v62(4, "%c[%{public}s %{public}s]:%i Failed to AddCredentialWithScope? %d", v64, v65, v66, 505, v60);
                }
                v67 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v68 = NFSharedLogGetLogger(v67);
                v69 = objc_claimAutoreleasedReturnValue(v68);
                if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
                {
                  v70 = object_getClass(a1);
                  if (class_isMetaClass(v70))
                    v71 = 43;
                  else
                    v71 = 45;
                  v72 = object_getClassName(a1);
                  v73 = sel_getName("_consumeDoubleButtonCredential");
                  *(_DWORD *)buf = 67110146;
                  v139 = v71;
                  v140 = 2082;
                  v141 = v72;
                  v142 = 2082;
                  v143 = v73;
                  v144 = 1024;
                  v145 = 505;
                  v146 = 1024;
                  LODWORD(v147) = v60;
                  _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to AddCredentialWithScope? %d", buf, 0x28u);
                }

              }
              ACMContextDelete(v137, 1);
              ACMCredentialDelete(v136);
            }
          }
          v100 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v101 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v100);
          if (v101)
          {
            v102 = object_getClass(a1);
            if (class_isMetaClass(v102))
              v103 = 43;
            else
              v103 = 45;
            v104 = object_getClassName(a1);
            v105 = sel_getName("signalPresentation");
            v101(6, "%c[%{public}s %{public}s]:%i Notifying %{public}@", v103, v104, v105, 286, v127[5]);
          }
          v106 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v107 = NFSharedLogGetLogger(v106);
          v108 = objc_claimAutoreleasedReturnValue(v107);
          if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
          {
            v109 = object_getClass(a1);
            if (class_isMetaClass(v109))
              v110 = 43;
            else
              v110 = 45;
            v111 = object_getClassName(a1);
            v112 = sel_getName("signalPresentation");
            v113 = v127[5];
            *(_DWORD *)buf = 67110146;
            v139 = v110;
            v140 = 2082;
            v141 = v111;
            v142 = 2082;
            v143 = v112;
            v144 = 1024;
            v145 = 286;
            v146 = 2114;
            v147 = v113;
            _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Notifying %{public}@", buf, 0x2Cu);
          }

          v114 = sub_100053DF4((uint64_t)a1);
          v12 = objc_claimAutoreleasedReturnValue(v114);
          -[NSObject launchBundleWithIdentifier:launchReason:launchDomain:](v12, "launchBundleWithIdentifier:launchReason:launchDomain:", v127[5], 2, 0);
          goto LABEL_97;
        case 3:
        case 4:
LABEL_25:
          v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v31 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v30);
          if (v31)
          {
            v32 = object_getClass(a1);
            if (class_isMetaClass(v32))
              v33 = 43;
            else
              v33 = 45;
            v34 = object_getClassName(a1);
            v35 = sel_getName("signalPresentation");
            v31(6, "%c[%{public}s %{public}s]:%i Notifying passkit", v33, v34, v35, 304);
          }
          v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v37 = NFSharedLogGetLogger(v36);
          v38 = objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            v39 = object_getClass(a1);
            if (class_isMetaClass(v39))
              v40 = 43;
            else
              v40 = 45;
            v41 = object_getClassName(a1);
            v42 = sel_getName("signalPresentation");
            *(_DWORD *)buf = 67109890;
            v139 = v40;
            v140 = 2082;
            v141 = v41;
            v142 = 2082;
            v143 = v42;
            v144 = 1024;
            v145 = 304;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Notifying passkit", buf, 0x22u);
          }

          v12 = a1[5];
          -[NSObject syncSendSimpleEvent:](v12, "syncSendSimpleEvent:", CFSTR("com.apple.stockholm.wallet.pre-arm"));
          goto LABEL_97;
        default:
          goto LABEL_98;
      }
    }
    v4 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v5 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v4);
    if (v5)
    {
      v6 = object_getClass(a1);
      if (class_isMetaClass(v6))
        v7 = 43;
      else
        v7 = 45;
      v8 = object_getClassName(a1);
      v9 = sel_getName("signalPresentation");
      v5(5, "%c[%{public}s %{public}s]:%i Presentment intent suppression active", v7, v8, v9, 278);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(a1);
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(a1);
      v16 = sel_getName("signalPresentation");
      *(_DWORD *)buf = 67109890;
      v139 = v14;
      v140 = 2082;
      v141 = v15;
      v142 = 2082;
      v143 = v16;
      v144 = 1024;
      v145 = 278;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Presentment intent suppression active", buf, 0x22u);
    }
LABEL_97:

LABEL_98:
    _Block_object_dispose(&v122, 8);
    _Block_object_dispose(&v126, 8);

    _Block_object_dispose(&v132, 8);
  }
}

void sub_1000559A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_100055A1C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = a1[4];
  if (v2)
    LOBYTE(v2) = *(_BYTE *)(v2 + 33) != 0;
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = v2;
  v3 = (_QWORD *)a1[4];
  if (v3)
    v3 = (_QWORD *)v3[7];
  v4 = v3;
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "defaultAppIdentifier"));
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = *(_QWORD *)(a1[4] + 24);
}

void sub_100055AA0(void *a1)
{
  void *v2;
  NSKeyValueChangeKey v3;
  void *v4;

  if (a1)
  {
    v3 = NSKeyValueChangeNewKey;
    v4 = &__kCFBooleanTrue;
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, &v3, 1));
    objc_msgSend(a1, "observeValueForKeyPath:ofObject:change:context:", 0, 0, v2, off_1003283E0);

  }
}

void sub_100055B50(void *a1)
{
  void *v2;
  NSKeyValueChangeKey v3;
  void *v4;

  if (a1)
  {
    v3 = NSKeyValueChangeNewKey;
    v4 = &__kCFBooleanFalse;
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, &v3, 1));
    objc_msgSend(a1, "observeValueForKeyPath:ofObject:change:context:", 0, 0, v2, off_1003283E0);

  }
}

void sub_100055C00(void *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  void *v14;
  const char *Name;
  NSKeyValueChangeKey v16;
  _UNKNOWN **v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;

  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("assertPKForegroundPresentment");
      v8 = 45;
      if (isMetaClass)
        v8 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 322);
    }
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFSharedLogGetLogger(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = object_getClass(a1);
      if (class_isMetaClass(v12))
        v13 = 43;
      else
        v13 = 45;
      *(_DWORD *)buf = 67109890;
      v19 = v13;
      v20 = 2082;
      v21 = object_getClassName(a1);
      v22 = 2082;
      v23 = sel_getName("assertPKForegroundPresentment");
      v24 = 1024;
      v25 = 322;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    v16 = NSKeyValueChangeNewKey;
    v17 = &off_1002FDF20;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));
    objc_msgSend(a1, "observeValueForKeyPath:ofObject:change:context:", 0, 0, v14, off_1003283D8);

  }
}

void sub_100055DDC(id *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  id v14;
  void *v15;
  void *v16;
  const char *Name;
  NSKeyValueChangeKey v18;
  void *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;

  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("deassertPKForegroundPresentment");
      v8 = 45;
      if (isMetaClass)
        v8 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 332);
    }
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFSharedLogGetLogger(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = object_getClass(a1);
      if (class_isMetaClass(v12))
        v13 = 43;
      else
        v13 = 45;
      *(_DWORD *)buf = 67109890;
      v21 = v13;
      v22 = 2082;
      v23 = object_getClassName(a1);
      v24 = 2082;
      v25 = sel_getName("deassertPKForegroundPresentment");
      v26 = 1024;
      v27 = 332;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    v14 = objc_msgSend(a1[7], "walletDomain");
    v18 = NSKeyValueChangeNewKey;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v14));
    v19 = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
    objc_msgSend(a1, "observeValueForKeyPath:ofObject:change:context:", 0, 0, v16, off_1003283D8);

  }
}

BOOL sub_100055FD8(uint64_t a1, void *a2)
{
  id v3;
  os_unfair_lock_s *v4;
  _QWORD *v5;
  _BOOL8 v6;
  void *v7;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v23;
  const char *ClassName;
  const char *Name;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  id v33;
  void *v34;
  _QWORD *v35;
  id v36;
  id v37;
  _QWORD v39[2];
  void (*v40)(uint64_t);
  void *v41;
  uint64_t v42;
  const char *v43;
  _QWORD v44[2];
  void (*v45)(_QWORD *);
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  id v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  _QWORD v66[2];
  uint8_t buf[4];
  int v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  int v74;

  v3 = a2;
  if (a1)
  {
    v61 = 0;
    v62 = &v61;
    v63 = 0x2020000000;
    v64 = 0;
    v57 = 0;
    v58 = &v57;
    v59 = 0x2020000000;
    v60 = 0;
    v51 = 0;
    v52 = &v51;
    v53 = 0x3032000000;
    v54 = sub_100054E0C;
    v55 = sub_100054E1C;
    v56 = 0;
    v4 = (os_unfair_lock_s *)(a1 + 16);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v45 = sub_10005652C;
    v46 = &unk_1002E5ED0;
    v47 = a1;
    v48 = &v61;
    v49 = &v57;
    v50 = &v51;
    v5 = v44;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v45(v5);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));

    v6 = *((_BYTE *)v58 + 24) == 0;
    if (!*((_BYTE *)v58 + 24))
    {
      switch(v62[3])
      {
        case 0:
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
          if (Logger)
          {
            Class = object_getClass((id)a1);
            if (class_isMetaClass(Class))
              v23 = 43;
            else
              v23 = 45;
            ClassName = object_getClassName((id)a1);
            Name = sel_getName("notifyPresentmentWithFieldNotification:");
            Logger(6, "%c[%{public}s %{public}s]:%i Routing to passkit in unknown config", v23, ClassName, Name, 379);
          }
          v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v27 = NFSharedLogGetLogger(v26);
          v28 = objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            v29 = object_getClass((id)a1);
            if (class_isMetaClass(v29))
              v30 = 43;
            else
              v30 = 45;
            v31 = object_getClassName((id)a1);
            v32 = sel_getName("notifyPresentmentWithFieldNotification:");
            *(_DWORD *)buf = 67109890;
            v68 = v30;
            v69 = 2082;
            v70 = v31;
            v71 = 2082;
            v72 = v32;
            v73 = 1024;
            v74 = 379;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Routing to passkit in unknown config", buf, 0x22u);
          }

          goto LABEL_25;
        case 1:
          v37 = sub_100053DF4(a1);
          v15 = objc_claimAutoreleasedReturnValue(v37);
          -[NSObject launchBundleWithIdentifier:launchReason:launchDomain:](v15, "launchBundleWithIdentifier:launchReason:launchDomain:", v52[5], 1, 1);
          goto LABEL_28;
        case 2:
          v36 = sub_100053DF4(a1);
          v15 = objc_claimAutoreleasedReturnValue(v36);
          -[NSObject launchBundleWithIdentifier:launchReason:launchDomain:](v15, "launchBundleWithIdentifier:launchReason:launchDomain:", v52[5], 1, 0);
          goto LABEL_28;
        case 3:
        case 4:
LABEL_25:
          v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "asXPCObject"));
          v33 = *(id *)(a1 + 40);
          v65[0] = CFSTR("xpcEventName");
          v65[1] = CFSTR("field");
          v66[0] = CFSTR("com.apple.stockholm.wallet.presentment.field-detect");
          v66[1] = v15;
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v66, v65, 2));
          objc_msgSend(v33, "sendDictionary:", v34);

          v39[0] = _NSConcreteStackBlock;
          v39[1] = 3221225472;
          v40 = sub_1000565B4;
          v41 = &unk_1002E5C30;
          v42 = a1;
          v43 = "notifyPresentmentWithFieldNotification:";
          v35 = v39;
          os_unfair_lock_lock(v4);
          v40((uint64_t)v35);
          os_unfair_lock_unlock(v4);

          goto LABEL_28;
        default:
          goto LABEL_29;
      }
    }
    v7 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v7);
    if (v8)
    {
      v9 = object_getClass((id)a1);
      if (class_isMetaClass(v9))
        v10 = 43;
      else
        v10 = 45;
      v11 = object_getClassName((id)a1);
      v12 = sel_getName("notifyPresentmentWithFieldNotification:");
      v8(5, "%c[%{public}s %{public}s]:%i Presentment is currently suspended", v10, v11, v12, 360);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = object_getClass((id)a1);
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      v18 = object_getClassName((id)a1);
      v19 = sel_getName("notifyPresentmentWithFieldNotification:");
      *(_DWORD *)buf = 67109890;
      v68 = v17;
      v69 = 2082;
      v70 = v18;
      v71 = 2082;
      v72 = v19;
      v73 = 1024;
      v74 = 360;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Presentment is currently suspended", buf, 0x22u);
    }
LABEL_28:

LABEL_29:
    _Block_object_dispose(&v51, 8);

    _Block_object_dispose(&v57, 8);
    _Block_object_dispose(&v61, 8);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1000564D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_10005652C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;

  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_QWORD *)(a1[4] + 24);
  v2 = a1[4];
  if (v2)
    LOBYTE(v2) = *(_BYTE *)(v2 + 33) != 0;
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = v2;
  v3 = (_QWORD *)a1[4];
  if (v3)
    v3 = (_QWORD *)v3[7];
  v7 = v3;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "defaultAppIdentifier"));
  v5 = *(_QWORD *)(a1[7] + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1000565B4(uint64_t a1)
{
  uint64_t v1;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *Name;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    if (!*(_BYTE *)(v1 + 34))
      goto LABEL_13;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v5(4, "%c[%{public}s %{public}s]:%i Unexpected duplicated notification", v9, ClassName, Name, 392);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      v19 = v14;
      v20 = 2082;
      v21 = v15;
      v22 = 2082;
      v23 = v16;
      v24 = 1024;
      v25 = 392;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected duplicated notification", buf, 0x22u);
    }

    v1 = *(_QWORD *)(a1 + 32);
    if (v1)
LABEL_13:
      *(_BYTE *)(v1 + 34) = 1;
  }
}

BOOL sub_10005674C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  os_unfair_lock_s *v6;
  _QWORD *v7;
  _BOOL8 v8;
  void *v9;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v25;
  const char *ClassName;
  const char *Name;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  id v35;
  void *v36;
  _QWORD *v37;
  id v38;
  id v39;
  _QWORD v41[2];
  void (*v42)(uint64_t);
  void *v43;
  uint64_t v44;
  const char *v45;
  _QWORD v46[2];
  void (*v47)(_QWORD *);
  void *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t);
  id v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char v61;
  _QWORD v62[2];
  _QWORD v63[2];
  uint8_t buf[4];
  int v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  int v71;

  v5 = a2;
  if (a1)
  {
    v58 = 0;
    v59 = &v58;
    v60 = 0x2020000000;
    v61 = 0;
    v52 = 0;
    v53 = &v52;
    v54 = 0x3032000000;
    v55 = sub_100054E0C;
    v56 = sub_100054E1C;
    v57 = 0;
    v6 = (os_unfair_lock_s *)(a1 + 16);
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v47 = sub_100056C74;
    v48 = &unk_1002E5EF8;
    v49 = a1;
    v50 = &v58;
    v51 = &v52;
    v7 = v46;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v47(v7);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));

    v8 = *((_BYTE *)v59 + 24) == 0;
    if (!*((_BYTE *)v59 + 24))
    {
      switch(a3)
      {
        case 0:
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
          if (Logger)
          {
            Class = object_getClass((id)a1);
            if (class_isMetaClass(Class))
              v25 = 43;
            else
              v25 = 45;
            ClassName = object_getClassName((id)a1);
            Name = sel_getName("notifyPresentmentWithFieldNotification:walletDomain:");
            Logger(6, "%c[%{public}s %{public}s]:%i Routing to passkit in unknown config", v25, ClassName, Name, 437);
          }
          v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v29 = NFSharedLogGetLogger(v28);
          v30 = objc_claimAutoreleasedReturnValue(v29);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            v31 = object_getClass((id)a1);
            if (class_isMetaClass(v31))
              v32 = 43;
            else
              v32 = 45;
            v33 = object_getClassName((id)a1);
            v34 = sel_getName("notifyPresentmentWithFieldNotification:walletDomain:");
            *(_DWORD *)buf = 67109890;
            v65 = v32;
            v66 = 2082;
            v67 = v33;
            v68 = 2082;
            v69 = v34;
            v70 = 1024;
            v71 = 437;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Routing to passkit in unknown config", buf, 0x22u);
          }

          goto LABEL_25;
        case 1:
          v39 = sub_100053DF4(a1);
          v17 = objc_claimAutoreleasedReturnValue(v39);
          -[NSObject launchBundleWithIdentifier:launchReason:launchDomain:](v17, "launchBundleWithIdentifier:launchReason:launchDomain:", v53[5], 1, 1);
          goto LABEL_28;
        case 2:
          v38 = sub_100053DF4(a1);
          v17 = objc_claimAutoreleasedReturnValue(v38);
          -[NSObject launchBundleWithIdentifier:launchReason:launchDomain:](v17, "launchBundleWithIdentifier:launchReason:launchDomain:", v53[5], 1, 0);
          goto LABEL_28;
        case 3:
        case 4:
LABEL_25:
          v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "asXPCObject"));
          v35 = *(id *)(a1 + 40);
          v62[0] = CFSTR("xpcEventName");
          v62[1] = CFSTR("field");
          v63[0] = CFSTR("com.apple.stockholm.wallet.presentment.field-detect");
          v63[1] = v17;
          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v63, v62, 2));
          objc_msgSend(v35, "sendDictionary:", v36);

          v41[0] = _NSConcreteStackBlock;
          v41[1] = 3221225472;
          v42 = sub_100056CEC;
          v43 = &unk_1002E5C30;
          v44 = a1;
          v45 = "notifyPresentmentWithFieldNotification:walletDomain:";
          v37 = v41;
          os_unfair_lock_lock(v6);
          v42((uint64_t)v37);
          os_unfair_lock_unlock(v6);

          goto LABEL_28;
        default:
          goto LABEL_29;
      }
    }
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v9);
    if (v10)
    {
      v11 = object_getClass((id)a1);
      if (class_isMetaClass(v11))
        v12 = 43;
      else
        v12 = 45;
      v13 = object_getClassName((id)a1);
      v14 = sel_getName("notifyPresentmentWithFieldNotification:walletDomain:");
      v10(5, "%c[%{public}s %{public}s]:%i Presentment is currently suspended", v12, v13, v14, 418);
    }
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = object_getClass((id)a1);
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      v20 = object_getClassName((id)a1);
      v21 = sel_getName("notifyPresentmentWithFieldNotification:walletDomain:");
      *(_DWORD *)buf = 67109890;
      v65 = v19;
      v66 = 2082;
      v67 = v20;
      v68 = 2082;
      v69 = v21;
      v70 = 1024;
      v71 = 418;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Presentment is currently suspended", buf, 0x22u);
    }
LABEL_28:

LABEL_29:
    _Block_object_dispose(&v52, 8);

    _Block_object_dispose(&v58, 8);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_100056C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_100056C74(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;

  v2 = a1[4];
  if (v2)
    LOBYTE(v2) = *(_BYTE *)(v2 + 33) != 0;
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = v2;
  v3 = (_QWORD *)a1[4];
  if (v3)
    v3 = (_QWORD *)v3[7];
  v7 = v3;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "defaultAppIdentifier"));
  v5 = *(_QWORD *)(a1[6] + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_100056CEC(uint64_t a1)
{
  uint64_t v1;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *Name;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    if (!*(_BYTE *)(v1 + 34))
      goto LABEL_13;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v5(4, "%c[%{public}s %{public}s]:%i Unexpected duplicated notification", v9, ClassName, Name, 450);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      v19 = v14;
      v20 = 2082;
      v21 = v15;
      v22 = 2082;
      v23 = v16;
      v24 = 1024;
      v25 = 450;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected duplicated notification", buf, 0x22u);
    }

    v1 = *(_QWORD *)(a1 + 32);
    if (v1)
LABEL_13:
      *(_BYTE *)(v1 + 34) = 1;
  }
}

void sub_100056E84(uint64_t a1)
{
  os_unfair_lock_s *v2;
  _QWORD *v3;
  id v4;
  _QWORD v5[2];
  uint64_t (*v6)(uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  if (a1)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v2 = (os_unfair_lock_s *)(a1 + 16);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v6 = sub_100056F78;
    v7 = &unk_1002E55C8;
    v8 = a1;
    v9 = &v10;
    v3 = v5;
    os_unfair_lock_lock(v2);
    v6((uint64_t)v3);
    os_unfair_lock_unlock(v2);

    if (*((_BYTE *)v11 + 24))
    {
      v4 = *(id *)(a1 + 40);
      objc_msgSend(v4, "sendDictionary:", &off_1003060D8);

    }
    _Block_object_dispose(&v10, 8);
  }
}

void sub_100056F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100056F78(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1 && *(_BYTE *)(v1 + 34))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 1;
    v2 = *(_QWORD *)(result + 32);
    if (v2)
      *(_BYTE *)(v2 + 34) = 0;
  }
  return result;
}

NSMutableDictionary *sub_100056FA8(uint64_t a1)
{
  NSMutableDictionary *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v2 = objc_opt_new(NSMutableDictionary);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 32)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v3, CFSTR("PresenterAvailable"));

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 33)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v4, CFSTR("PresenterSuspension"));

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 24)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v5, CFSTR("WalletDomain"));

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id sub_1000584B8(uint64_t a1)
{
  void *v1;

  objc_opt_self(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFReaderSessionInternalInterface));
  +[NFReaderSessionInterface _configureInterface:](NFReaderSessionInterface, "_configureInterface:", v1);
  return v1;
}

id *sub_100058504(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t a8)
{
  id v16;
  id v17;
  id *v18;
  id *v19;
  objc_super v21;

  v16 = a6;
  v17 = a7;
  if (a1)
  {
    v21.receiver = a1;
    v21.super_class = (Class)_NFSecureTransactionServicesHandoverSession;
    v18 = (id *)objc_msgSendSuper2(&v21, "initWithRemoteObject:workQueue:expressModeManager:allowsBackgroundMode:", a2, a8, a5, 1);
    v19 = v18;
    if (v18)
    {
      v18[20] = a3;
      v18[21] = a4;
      objc_storeStrong(v18 + 24, a6);
      objc_storeStrong(v19 + 23, a7);
    }
  }
  else
  {
    v19 = 0;
  }

  return v19;
}

void sub_100058658(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 200), a2);
}

void sub_100058AA8(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 120, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 120;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

id sub_100058C3C(id a1, void *a2)
{
  id v2;
  id v3;
  void *v4;

  v2 = a1;
  if (a1)
  {
    v3 = a2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "remoteObject"));
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteObjectProxyWithErrorHandler:", v3));

  }
  return v2;
}

void sub_100058D18(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 128, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 128;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100059964(uint64_t a1)
{
  NFSecureElementProxyListener *v2;
  id v3;
  NFSecureElementProxyListener *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *specific;
  uint64_t Logger;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  void *v33;

  if (a1)
  {
    v2 = [NFSecureElementProxyListener alloc];
    v3 = *(id *)(a1 + 184);
    v4 = -[NFSecureElementProxyListener initWithDriverWrapper:](v2, "initWithDriverWrapper:", v3);
    v5 = *(void **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = v4;

    v6 = *(void **)(a1 + 200);
    v7 = *(id *)(a1 + 224);
    v8 = v6;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "workQueue"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "startSEProxyListener:parameters:workQueue:", v7, &__NSDictionary0__struct, v9));

    if (v10)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v13 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("_startSEProxyListener");
        v16 = 45;
        if (isMetaClass)
          v16 = 43;
        v13(3, "%c[%{public}s %{public}s]:%i SE proxy listener start error=%{public}@", v16, ClassName, Name, 249, v10);
      }
      v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v18 = NFSharedLogGetLogger(v17);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = object_getClass((id)a1);
        if (class_isMetaClass(v20))
          v21 = 43;
        else
          v21 = 45;
        *(_DWORD *)buf = 67110146;
        v25 = v21;
        v26 = 2082;
        v27 = object_getClassName((id)a1);
        v28 = 2082;
        v29 = sel_getName("_startSEProxyListener");
        v30 = 1024;
        v31 = 249;
        v32 = 2114;
        v33 = v10;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i SE proxy listener start error=%{public}@", buf, 0x2Cu);
      }

    }
  }
}

void sub_10005AA28(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  const char *ClassName;
  const char *Name;
  _QWORD v23[4];
  __int128 v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  id v34;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i error: %{public}@", v9, ClassName, Name, 259, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v26 = v14;
    v27 = 2082;
    v28 = v15;
    v29 = 2082;
    v30 = v16;
    v31 = 1024;
    v32 = 259;
    v33 = 2114;
    v34 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i error: %{public}@", buf, 0x2Cu);
  }

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10005AC3C;
  v23[3] = &unk_1002E5F60;
  v24 = *(_OWORD *)(a1 + 32);
  v17 = sub_100058C3C((id)v24, v23);
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  objc_msgSend(v18, "didStartSession:", v3);

  v19 = *(_QWORD *)(a1 + 32);
  if (v19)
    v20 = *(void **)(v19 + 200);
  else
    v20 = 0;
  objc_msgSend(v20, "invalidate");
  sub_100058658(*(_QWORD *)(a1 + 32), 0);

}

void sub_10005AC3C(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 261, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 261;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_10005ADD0(uint64_t a1)
{
  id v1;
  void *v2;
  _QWORD v3[4];
  __int128 v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10005AE44;
  v3[3] = &unk_1002E5F60;
  v4 = *(_OWORD *)(a1 + 32);
  v1 = sub_100058C3C((id)v4, v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  objc_msgSend(v2, "didStartSession:", 0);

}

void sub_10005AE44(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 269, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 269;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

uint64_t sub_10005AFD8(uint64_t result)
{
  _QWORD *v1;
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;

  if (result)
  {
    v1 = (_QWORD *)result;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v1);
      Name = sel_getName("getCHConfig");
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i type=0x%lx", v9, ClassName, Name, 809, v1[21]);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(v1);
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(v1);
      v16 = sel_getName("getCHConfig");
      v17 = v1[21];
      *(_DWORD *)buf = 67110146;
      v19 = v14;
      v20 = 2082;
      v21 = v15;
      v22 = 2082;
      v23 = v16;
      v24 = 1024;
      v25 = 809;
      v26 = 2048;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i type=0x%lx", buf, 0x2Cu);
    }

    return (16 * (v1[21] & 1)) | (v1[21] >> 1) & 0xFLL;
  }
  return result;
}

uint64_t sub_10005B19C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 160);
    if ((unint64_t)(v2 - 2) < 3 || v2 == -1)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      objc_msgSend(v4, "handleFailureInMethod:object:file:lineNumber:description:", "getSTSHelperOperation", v1, CFSTR("_NFSecureTransactionServicesHandoverSession.m"), 833, CFSTR("Invalid"));

      return -1;
    }
    else
    {
      return v2 == 1;
    }
  }
  return result;
}

void sub_10005B23C(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  const char *ClassName;
  const char *Name;
  _QWORD v29[5];
  _QWORD v30[5];
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  id v40;

  v3 = a2;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(3, "%c[%{public}s %{public}s]:%i Reader start error: %{public}@", v9, ClassName, Name, 307, v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67110146;
      v32 = v14;
      v33 = 2082;
      v34 = v15;
      v35 = 2082;
      v36 = v16;
      v37 = 1024;
      v38 = 307;
      v39 = 2114;
      v40 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reader start error: %{public}@", buf, 0x2Cu);
    }

    v17 = *(_QWORD *)(a1 + 40);
    v18 = objc_alloc((Class)NSError);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v20 = objc_msgSend(v3, "code");
    v29[0] = NSLocalizedDescriptionKey;
    if ((uint64_t)objc_msgSend(v3, "code") > 70)
      v21 = 71;
    else
      v21 = (uint64_t)objc_msgSend(v3, "code");
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E5F80[v21]));
    v30[0] = v22;
    v30[1] = v3;
    v29[1] = NSUnderlyingErrorKey;
    v29[2] = CFSTR("Line");
    v30[2] = &off_1002FDF50;
    v29[3] = CFSTR("Method");
    v23 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
    v30[3] = v23;
    v29[4] = NSDebugDescriptionErrorKey;
    v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 308);
    v30[4] = v24;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v30, v29, 5));
    v26 = objc_msgSend(v18, "initWithDomain:code:userInfo:", v19, v20, v25);
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v26);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_10005B588(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  NFTNEPHandler *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id *v20;
  void *v21;
  void *v22;
  id v23;
  const char *Name;
  _QWORD v25[5];
  id v26;
  const char *v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass((id)a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName((id)a1);
    Name = sel_getName("_startTNEPReaderWithCallback:");
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i ", v10, ClassName, Name, 376);
  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass((id)a1);
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    *(_DWORD *)buf = 67109890;
    v29 = v15;
    v30 = 2082;
    v31 = object_getClassName((id)a1);
    v32 = 2082;
    v33 = sel_getName("_startTNEPReaderWithCallback:");
    v34 = 1024;
    v35 = 376;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v16 = [NFTNEPHandler alloc];
  v17 = *(_QWORD *)(a1 + 160);
  v18 = (void *)a1;
  if (v17 != 1)
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "remoteObject"));
  v19 = *(id *)(a1 + 184);
  v20 = sub_10023B6B8((id *)&v16->super.isa, (void *)1, v18, v19, (unint64_t)objc_msgSend((id)a1, "signpostId"));
  v21 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v20;

  if (v17 != 1)
  v22 = *(void **)(a1 + 216);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10005BEA4;
  v25[3] = &unk_1002E6218;
  v25[4] = a1;
  v27 = "_startTNEPReaderWithCallback:";
  v23 = v3;
  v26 = v23;
  objc_msgSend(v22, "startTNEPReaderWithCallback:", v25);

}

void sub_10005B80C(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  const char *ClassName;
  const char *Name;
  _QWORD v29[5];
  _QWORD v30[5];
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  id v40;

  v3 = a2;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(3, "%c[%{public}s %{public}s]:%i Device start error: %{public}@", v9, ClassName, Name, 342, v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67110146;
      v32 = v14;
      v33 = 2082;
      v34 = v15;
      v35 = 2082;
      v36 = v16;
      v37 = 1024;
      v38 = 342;
      v39 = 2114;
      v40 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Device start error: %{public}@", buf, 0x2Cu);
    }

    v17 = *(_QWORD *)(a1 + 40);
    v18 = objc_alloc((Class)NSError);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v20 = objc_msgSend(v3, "code");
    v29[0] = NSLocalizedDescriptionKey;
    if ((uint64_t)objc_msgSend(v3, "code") > 70)
      v21 = 71;
    else
      v21 = (uint64_t)objc_msgSend(v3, "code");
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E5F80[v21]));
    v30[0] = v22;
    v30[1] = v3;
    v29[1] = NSUnderlyingErrorKey;
    v29[2] = CFSTR("Line");
    v30[2] = &off_1002FDF68;
    v29[3] = CFSTR("Method");
    v23 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
    v30[3] = v23;
    v29[4] = NSDebugDescriptionErrorKey;
    v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 343);
    v30[4] = v24;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v30, v29, 5));
    v26 = objc_msgSend(v18, "initWithDomain:code:userInfo:", v19, v20, v25);
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v26);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_10005BB58(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *specific;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  NFTNEPHandler *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id *v25;
  void *v26;
  void *v27;
  const char *ClassName;
  const char *Name;
  _QWORD v30[4];
  id v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  id v41;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v12 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("_startTNEPDeviceWithServices:optionalRecords:callback:");
      v15 = 45;
      if (isMetaClass)
        v15 = 43;
      v12(6, "%c[%{public}s %{public}s]:%i services=%{public}@", v15, ClassName, Name, 360, v7);
    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = object_getClass((id)a1);
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      *(_DWORD *)buf = 67110146;
      v33 = v20;
      v34 = 2082;
      v35 = object_getClassName((id)a1);
      v36 = 2082;
      v37 = sel_getName("_startTNEPDeviceWithServices:optionalRecords:callback:");
      v38 = 1024;
      v39 = 360;
      v40 = 2114;
      v41 = v7;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i services=%{public}@", buf, 0x2Cu);
    }

    v21 = [NFTNEPHandler alloc];
    v22 = *(_QWORD *)(a1 + 160);
    if (v22)
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "remoteObject"));
    else
      v23 = (void *)a1;
    v24 = *(id *)(a1 + 184);
    v25 = sub_10023B6B8((id *)&v21->super.isa, 0, v23, v24, (unint64_t)objc_msgSend((id)a1, "signpostId"));
    v26 = *(void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v25;

    if (v22)
    v27 = *(void **)(a1 + 216);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10005BE10;
    v30[3] = &unk_1002E61F0;
    v31 = v9;
    objc_msgSend(v27, "startTNEPDeviceWithServices:optionalRecords:callback:", v7, v8, v30);

  }
}

void sub_10005BE10(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  if (!v6)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig embeddedWiredModeWithHCE](NFRoutingConfig, "embeddedWiredModeWithHCE"));
    v5 = objc_msgSend(v3, "setRoutingConfig:", v4);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10005BEA4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  const char *Name;
  _QWORD v32[4];
  _QWORD v33[4];
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4
    && (v5 = *(_QWORD *)(v4 + 184)) != 0
    && objc_msgSend(*(id *)(v5 + 88), "readerModeProtectionActive"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v8(4, "%c[%{public}s %{public}s]:%i Reader mode protection enabled", v12, ClassName, Name, 384);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      v18 = object_getClassName(*(id *)(a1 + 32));
      v19 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v35 = v17;
      v36 = 2082;
      v37 = v18;
      v38 = 2082;
      v39 = v19;
      v40 = 1024;
      v41 = 384;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reader mode protection enabled", buf, 0x22u);
    }

    v20 = *(_QWORD *)(a1 + 40);
    v21 = objc_alloc((Class)NSError);
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v32[0] = NSLocalizedDescriptionKey;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Reader mode temporarily disabled"));
    v33[0] = v23;
    v33[1] = &off_1002FDF98;
    v32[1] = CFSTR("Line");
    v32[2] = CFSTR("Method");
    v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
    v33[2] = v24;
    v32[3] = NSDebugDescriptionErrorKey;
    v25 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 385);
    v33[3] = v25;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v33, v32, 4));
    v27 = objc_msgSend(v21, "initWithDomain:code:userInfo:", v22, 47, v26);
    (*(void (**)(uint64_t, id))(v20 + 16))(v20, v27);

  }
  else
  {
    if (!v3)
    {
      sub_10019E124(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 176), *(void **)(a1 + 32));
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig readerModeWithFD:](NFRoutingConfig, "readerModeWithFD:", 1));
      objc_msgSend(v28, "setPollingMask:tagConfig:", 19, 48);
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
      v30 = objc_msgSend(v29, "setRoutingConfig:", v28);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_10005C944(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  if ((objc_msgSend(*(id *)(a1 + 32), "didEnd") & 1) == 0)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "defaultRoutingConfig:", 3));
    v3 = objc_msgSend(v4, "setRoutingConfig:", v2);

    sub_10019D694(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 176), *(void **)(a1 + 32));
  }
}

void sub_10005CAC4(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *i;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  void *j;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  id v49;
  uint64_t v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  NSErrorUserInfoKey v64;
  void *v65;
  _QWORD v66[4];
  _QWORD v67[4];
  _BYTE v68[128];
  _QWORD v69[4];
  _QWORD v70[4];
  _BYTE v71[128];
  NSErrorUserInfoKey v72;
  void *v73;
  uint8_t buf[4];
  int v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  void *v83;

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 64));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, ClassName, Name, 455, v9);

    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 64));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v75 = v15;
      v76 = 2082;
      v77 = v16;
      v78 = 2082;
      v79 = v17;
      v80 = 1024;
      v81 = 455;
      v82 = 2114;
      v83 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v19 = *(_QWORD *)(a1 + 56);
    if (v19)
    {
      v20 = objc_alloc((Class)NSError);
      v21 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v72 = NSLocalizedDescriptionKey;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v73 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v73, &v72, 1));
      v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
      (*(void (**)(uint64_t, id))(v19 + 16))(v19, v24);

LABEL_15:
    }
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v21 = *(id *)(a1 + 40);
    v25 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v60, v71, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v61;
      while (2)
      {
        for (i = 0; i != v26; i = (char *)i + 1)
        {
          if (*(_QWORD *)v61 != v27)
            objc_enumerationMutation(v21);
          v29 = *(_QWORD *)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)i);
          v30 = objc_opt_class(NFTNEPService);
          if ((objc_opt_isKindOfClass(v29, v30) & 1) == 0)
          {
            v40 = *(_QWORD *)(a1 + 56);
            v41 = objc_alloc((Class)NSError);
            v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v69[0] = NSLocalizedDescriptionKey;
            v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
            v70[0] = v43;
            v70[1] = &off_1002FDFB0;
            v69[1] = CFSTR("Line");
            v69[2] = CFSTR("Method");
            v44 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 64)));
            v70[2] = v44;
            v69[3] = NSDebugDescriptionErrorKey;
            v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 64)), 459);
            v70[3] = v45;
            v46 = v70;
            v47 = v69;
LABEL_42:
            v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v46, v47, 4));
            v49 = objc_msgSend(v41, "initWithDomain:code:userInfo:", v42, 10, v48);
            (*(void (**)(uint64_t, id))(v40 + 16))(v40, v49);

            goto LABEL_15;
          }
        }
        v26 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v60, v71, 16);
        if (v26)
          continue;
        break;
      }
    }

    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v21 = *(id *)(a1 + 48);
    v31 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v56, v68, 16);
    if (v31)
    {
      v32 = v31;
      v33 = *(_QWORD *)v57;
      while (2)
      {
        for (j = 0; j != v32; j = (char *)j + 1)
        {
          if (*(_QWORD *)v57 != v33)
            objc_enumerationMutation(v21);
          v35 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)j);
          v36 = objc_opt_class(NFNdefRecordInternal);
          if ((objc_opt_isKindOfClass(v35, v36) & 1) == 0)
          {
            v40 = *(_QWORD *)(a1 + 56);
            v41 = objc_alloc((Class)NSError);
            v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v66[0] = NSLocalizedDescriptionKey;
            v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
            v67[0] = v43;
            v67[1] = &off_1002FDFC8;
            v66[1] = CFSTR("Line");
            v66[2] = CFSTR("Method");
            v44 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 64)));
            v67[2] = v44;
            v66[3] = NSDebugDescriptionErrorKey;
            v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 64)), 465);
            v67[3] = v45;
            v46 = v67;
            v47 = v66;
            goto LABEL_42;
          }
        }
        v32 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v56, v68, 16);
        if (v32)
          continue;
        break;
      }
    }

    v37 = *(_QWORD *)(a1 + 32);
    if (!v37 || ((v38 = *(_QWORD *)(v37 + 160)) != 0 ? (v39 = v38 == 3) : (v39 = 1), v39))
    {
      sub_10005BB58(v37, *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
    }
    else
    {
      v50 = *(_QWORD *)(a1 + 56);
      v51 = objc_alloc((Class)NSError);
      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v64 = NSLocalizedDescriptionKey;
      v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v65 = v53;
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1));
      v55 = objc_msgSend(v51, "initWithDomain:code:userInfo:", v52, 12, v54);
      (*(void (**)(uint64_t, id))(v50 + 16))(v50, v55);

    }
  }
}

void sub_10005D2B4(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void (*v47)(uint64_t, const char *, ...);
  objc_class *v48;
  _BOOL4 v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  objc_class *v55;
  int v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  id v64;
  const char *v65;
  const char *v66;
  NSErrorUserInfoKey v67;
  void *v68;
  NSErrorUserInfoKey v69;
  void *v70;
  uint8_t buf[4];
  int v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  void *v80;

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, ClassName, Name, 483, v9);

    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 56));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v72 = v15;
      v73 = 2082;
      v74 = v16;
      v75 = 2082;
      v76 = v17;
      v77 = 1024;
      v78 = 483;
      v79 = 2114;
      v80 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v19 = *(_QWORD *)(a1 + 48);
    if (v19)
    {
      v20 = objc_alloc((Class)NSError);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v69 = NSLocalizedDescriptionKey;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v70 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v70, &v69, 1));
      v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
      (*(void (**)(uint64_t, id))(v19 + 16))(v19, v24);

    }
  }
  else
  {
    v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v26 = NFLogGetLogger(v25);
    if (v26)
    {
      v27 = (void (*)(uint64_t, const char *, ...))v26;
      v28 = object_getClass(*(id *)(a1 + 32));
      v29 = class_isMetaClass(v28);
      v30 = object_getClassName(*(id *)(a1 + 32));
      v65 = sel_getName(*(SEL *)(a1 + 56));
      v31 = 45;
      if (v29)
        v31 = 43;
      v27(6, "%c[%{public}s %{public}s]:%i ", v31, v30, v65, 485);
    }
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = NFSharedLogGetLogger(v32);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      v35 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v35))
        v36 = 43;
      else
        v36 = 45;
      v37 = object_getClassName(*(id *)(a1 + 32));
      v38 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      v72 = v36;
      v73 = 2082;
      v74 = v37;
      v75 = 2082;
      v76 = v38;
      v77 = 1024;
      v78 = 485;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    v39 = *(_QWORD *)(a1 + 32);
    if (v39)
    {
      v40 = *(id *)(v39 + 216);
      if (v40)
      {
        v41 = *(_QWORD *)(a1 + 32);
        if (v41)
        {
          v42 = *(_QWORD *)(v41 + 160);

          if (v42 == 3)
          {
            v43 = *(_QWORD *)(a1 + 32);
            if (v43)
              v44 = *(void **)(v43 + 216);
            else
              v44 = 0;
            objc_msgSend(v44, "tnepTagDeviceSendNDEFMessage:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
            return;
          }
        }
        else
        {

        }
      }
    }
    v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v46 = NFLogGetLogger(v45);
    if (v46)
    {
      v47 = (void (*)(uint64_t, const char *, ...))v46;
      v48 = object_getClass(*(id *)(a1 + 32));
      v49 = class_isMetaClass(v48);
      v50 = object_getClassName(*(id *)(a1 + 32));
      v66 = sel_getName(*(SEL *)(a1 + 56));
      v51 = 45;
      if (v49)
        v51 = 43;
      v47(3, "%c[%{public}s %{public}s]:%i Invalid state", v51, v50, v66, 487);
    }
    v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v53 = NFSharedLogGetLogger(v52);
    v54 = objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      v55 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v55))
        v56 = 43;
      else
        v56 = 45;
      v57 = object_getClassName(*(id *)(a1 + 32));
      v58 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      v72 = v56;
      v73 = 2082;
      v74 = v57;
      v75 = 2082;
      v76 = v58;
      v77 = 1024;
      v78 = 487;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid state", buf, 0x22u);
    }

    v59 = *(_QWORD *)(a1 + 48);
    v60 = objc_alloc((Class)NSError);
    v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v67 = NSLocalizedDescriptionKey;
    v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v68 = v62;
    v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v68, &v67, 1));
    v64 = objc_msgSend(v60, "initWithDomain:code:userInfo:", v61, 12, v63);
    (*(void (**)(uint64_t, id))(v59 + 16))(v59, v64);

  }
}

void sub_10005D934(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, const char *, ...);
  objc_class *v29;
  _BOOL4 v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  int v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  const char *v46;
  NSErrorUserInfoKey v47;
  void *v48;
  NSErrorUserInfoKey v49;
  void *v50;
  uint8_t buf[4];
  int v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  void *v60;

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, ClassName, Name, 500, v9);

    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 48));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v52 = v15;
      v53 = 2082;
      v54 = v16;
      v55 = 2082;
      v56 = v17;
      v57 = 1024;
      v58 = 500;
      v59 = 2114;
      v60 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v19 = *(_QWORD *)(a1 + 40);
    if (v19)
    {
      v20 = objc_alloc((Class)NSError);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v49 = NSLocalizedDescriptionKey;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v50 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1));
      v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
      (*(void (**)(uint64_t, id))(v19 + 16))(v19, v24);

    }
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 32);
    if (v25 && *(_QWORD *)(v25 + 160) == 4)
    {
      sub_10005B588(v25, *(void **)(a1 + 40));
    }
    else
    {
      v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v27 = NFLogGetLogger(v26);
      if (v27)
      {
        v28 = (void (*)(uint64_t, const char *, ...))v27;
        v29 = object_getClass(*(id *)(a1 + 32));
        v30 = class_isMetaClass(v29);
        v31 = object_getClassName(*(id *)(a1 + 32));
        v46 = sel_getName(*(SEL *)(a1 + 48));
        v32 = 45;
        if (v30)
          v32 = 43;
        v28(3, "%c[%{public}s %{public}s]:%i Invalid state", v32, v31, v46, 503);
      }
      v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v34 = NFSharedLogGetLogger(v33);
      v35 = objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        v36 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v36))
          v37 = 43;
        else
          v37 = 45;
        v38 = object_getClassName(*(id *)(a1 + 32));
        v39 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        v52 = v37;
        v53 = 2082;
        v54 = v38;
        v55 = 2082;
        v56 = v39;
        v57 = 1024;
        v58 = 503;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid state", buf, 0x22u);
      }

      v40 = *(_QWORD *)(a1 + 40);
      v41 = objc_alloc((Class)NSError);
      v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v47 = NSLocalizedDescriptionKey;
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v48 = v43;
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1));
      v45 = objc_msgSend(v41, "initWithDomain:code:userInfo:", v42, 12, v44);
      (*(void (**)(uint64_t, id))(v40 + 16))(v40, v45);

    }
  }
}

void sub_10005DEBC(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  _BOOL4 v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  const char *v40;
  const char *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  objc_class *v45;
  _BOOL4 v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  NSObject *v51;
  objc_class *v52;
  int v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  const char *v62;
  NSErrorUserInfoKey v63;
  void *v64;
  NSErrorUserInfoKey v65;
  void *v66;
  uint8_t buf[4];
  int v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  void *v76;

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, ClassName, Name, 515, v9);

    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 56));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v68 = v15;
      v69 = 2082;
      v70 = v16;
      v71 = 2082;
      v72 = v17;
      v73 = 1024;
      v74 = 515;
      v75 = 2114;
      v76 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v19 = *(_QWORD *)(a1 + 48);
    if (v19)
    {
      v20 = objc_alloc((Class)NSError);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v65 = NSLocalizedDescriptionKey;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v66 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v66, &v65, 1));
      v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
      (*(void (**)(uint64_t, id))(v19 + 16))(v19, v24);

    }
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 32);
    if (v25)
      v26 = *(_QWORD *)(v25 + 216);
    else
      v26 = 0;
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFLogGetLogger(v27);
    v29 = (void (*)(uint64_t, const char *, ...))v28;
    if (v26)
    {
      if (v28)
      {
        v30 = object_getClass(*(id *)(a1 + 32));
        v31 = class_isMetaClass(v30);
        v32 = object_getClassName(*(id *)(a1 + 32));
        v33 = sel_getName(*(SEL *)(a1 + 56));
        v34 = 45;
        if (v31)
          v34 = 43;
        v29(6, "%c[%{public}s %{public}s]:%i %{public}@", v34, v32, v33, 521, *(_QWORD *)(a1 + 40));
      }
      v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v36 = NFSharedLogGetLogger(v35);
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v38 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v38))
          v39 = 43;
        else
          v39 = 45;
        v40 = object_getClassName(*(id *)(a1 + 32));
        v41 = sel_getName(*(SEL *)(a1 + 56));
        v42 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 67110146;
        v68 = v39;
        v69 = 2082;
        v70 = v40;
        v71 = 2082;
        v72 = v41;
        v73 = 1024;
        v74 = 521;
        v75 = 2114;
        v76 = v42;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
      }

      v43 = *(_QWORD *)(a1 + 32);
      if (v43)
        v44 = *(void **)(v43 + 216);
      else
        v44 = 0;
      objc_msgSend(v44, "tnepReaderSelectService:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      if (v28)
      {
        v45 = object_getClass(*(id *)(a1 + 32));
        v46 = class_isMetaClass(v45);
        v47 = object_getClassName(*(id *)(a1 + 32));
        v62 = sel_getName(*(SEL *)(a1 + 56));
        v48 = 45;
        if (v46)
          v48 = 43;
        v29(3, "%c[%{public}s %{public}s]:%i Missing tnepHandler", v48, v47, v62, 518);
      }
      v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v50 = NFSharedLogGetLogger(v49);
      v51 = objc_claimAutoreleasedReturnValue(v50);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        v52 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v52))
          v53 = 43;
        else
          v53 = 45;
        v54 = object_getClassName(*(id *)(a1 + 32));
        v55 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        v68 = v53;
        v69 = 2082;
        v70 = v54;
        v71 = 2082;
        v72 = v55;
        v73 = 1024;
        v74 = 518;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tnepHandler", buf, 0x22u);
      }

      v56 = *(_QWORD *)(a1 + 48);
      v57 = objc_alloc((Class)NSError);
      v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v63 = NSLocalizedDescriptionKey;
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v64 = v59;
      v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v64, &v63, 1));
      v61 = objc_msgSend(v57, "initWithDomain:code:userInfo:", v58, 12, v60);
      (*(void (**)(uint64_t, id))(v56 + 16))(v56, v61);

    }
  }
}

void sub_10005E524(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  _BOOL4 v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  objc_class *v43;
  _BOOL4 v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  objc_class *v50;
  int v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  const char *v60;
  const char *v61;
  NSErrorUserInfoKey v62;
  void *v63;
  NSErrorUserInfoKey v64;
  void *v65;
  uint8_t buf[4];
  int v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  int v73;
  __int16 v74;
  void *v75;

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, ClassName, Name, 530, v9);

    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 48));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v67 = v15;
      v68 = 2082;
      v69 = v16;
      v70 = 2082;
      v71 = v17;
      v72 = 1024;
      v73 = 530;
      v74 = 2114;
      v75 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v19 = *(_QWORD *)(a1 + 40);
    if (v19)
    {
      v20 = objc_alloc((Class)NSError);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v64 = NSLocalizedDescriptionKey;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v65 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1));
      v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
      (*(void (**)(uint64_t, id))(v19 + 16))(v19, v24);

    }
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 32);
    if (v25)
      v26 = *(_QWORD *)(v25 + 216);
    else
      v26 = 0;
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFLogGetLogger(v27);
    v29 = (void (*)(uint64_t, const char *, ...))v28;
    if (v26)
    {
      if (v28)
      {
        v30 = object_getClass(*(id *)(a1 + 32));
        v31 = class_isMetaClass(v30);
        v32 = object_getClassName(*(id *)(a1 + 32));
        v60 = sel_getName(*(SEL *)(a1 + 48));
        v33 = 45;
        if (v31)
          v33 = 43;
        v29(6, "%c[%{public}s %{public}s]:%i ", v33, v32, v60, 536);
      }
      v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v35 = NFSharedLogGetLogger(v34);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        v37 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v37))
          v38 = 43;
        else
          v38 = 45;
        v39 = object_getClassName(*(id *)(a1 + 32));
        v40 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        v67 = v38;
        v68 = 2082;
        v69 = v39;
        v70 = 2082;
        v71 = v40;
        v72 = 1024;
        v73 = 536;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
      }

      v41 = *(_QWORD *)(a1 + 32);
      if (v41)
        v42 = *(void **)(v41 + 216);
      else
        v42 = 0;
      objc_msgSend(v42, "tnepReaderDeselectWithCallback:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      if (v28)
      {
        v43 = object_getClass(*(id *)(a1 + 32));
        v44 = class_isMetaClass(v43);
        v45 = object_getClassName(*(id *)(a1 + 32));
        v61 = sel_getName(*(SEL *)(a1 + 48));
        v46 = 45;
        if (v44)
          v46 = 43;
        v29(3, "%c[%{public}s %{public}s]:%i Missing tnepHandler", v46, v45, v61, 533);
      }
      v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v48 = NFSharedLogGetLogger(v47);
      v49 = objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v50 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v50))
          v51 = 43;
        else
          v51 = 45;
        v52 = object_getClassName(*(id *)(a1 + 32));
        v53 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        v67 = v51;
        v68 = 2082;
        v69 = v52;
        v70 = 2082;
        v71 = v53;
        v72 = 1024;
        v73 = 533;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tnepHandler", buf, 0x22u);
      }

      v54 = *(_QWORD *)(a1 + 40);
      v55 = objc_alloc((Class)NSError);
      v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v62 = NSLocalizedDescriptionKey;
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v63 = v57;
      v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1));
      v59 = objc_msgSend(v55, "initWithDomain:code:userInfo:", v56, 12, v58);
      (*(void (**)(uint64_t, id))(v54 + 16))(v54, v59);

    }
  }
}

void sub_10005EB9C(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  _BOOL4 v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  objc_class *v43;
  _BOOL4 v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  objc_class *v50;
  int v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  const char *v60;
  const char *v61;
  NSErrorUserInfoKey v62;
  void *v63;
  NSErrorUserInfoKey v64;
  void *v65;
  uint8_t buf[4];
  int v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  int v73;
  __int16 v74;
  void *v75;

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, ClassName, Name, 546, v9);

    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 56));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v67 = v15;
      v68 = 2082;
      v69 = v16;
      v70 = 2082;
      v71 = v17;
      v72 = 1024;
      v73 = 546;
      v74 = 2114;
      v75 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v19 = *(_QWORD *)(a1 + 48);
    if (v19)
    {
      v20 = objc_alloc((Class)NSError);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v64 = NSLocalizedDescriptionKey;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v65 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1));
      v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
      (*(void (**)(uint64_t, _QWORD, id))(v19 + 16))(v19, 0, v24);

    }
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 32);
    if (v25)
      v26 = *(_QWORD *)(v25 + 216);
    else
      v26 = 0;
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFLogGetLogger(v27);
    v29 = (void (*)(uint64_t, const char *, ...))v28;
    if (v26)
    {
      if (v28)
      {
        v30 = object_getClass(*(id *)(a1 + 32));
        v31 = class_isMetaClass(v30);
        v32 = object_getClassName(*(id *)(a1 + 32));
        v60 = sel_getName(*(SEL *)(a1 + 56));
        v33 = 45;
        if (v31)
          v33 = 43;
        v29(6, "%c[%{public}s %{public}s]:%i ", v33, v32, v60, 552);
      }
      v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v35 = NFSharedLogGetLogger(v34);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        v37 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v37))
          v38 = 43;
        else
          v38 = 45;
        v39 = object_getClassName(*(id *)(a1 + 32));
        v40 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        v67 = v38;
        v68 = 2082;
        v69 = v39;
        v70 = 2082;
        v71 = v40;
        v72 = 1024;
        v73 = 552;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
      }

      v41 = *(_QWORD *)(a1 + 32);
      if (v41)
        v42 = *(void **)(v41 + 216);
      else
        v42 = 0;
      objc_msgSend(v42, "tnepReaderSend:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      if (v28)
      {
        v43 = object_getClass(*(id *)(a1 + 32));
        v44 = class_isMetaClass(v43);
        v45 = object_getClassName(*(id *)(a1 + 32));
        v61 = sel_getName(*(SEL *)(a1 + 56));
        v46 = 45;
        if (v44)
          v46 = 43;
        v29(3, "%c[%{public}s %{public}s]:%i Missing tnepHandler", v46, v45, v61, 549);
      }
      v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v48 = NFSharedLogGetLogger(v47);
      v49 = objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v50 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v50))
          v51 = 43;
        else
          v51 = 45;
        v52 = object_getClassName(*(id *)(a1 + 32));
        v53 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        v67 = v51;
        v68 = 2082;
        v69 = v52;
        v70 = 2082;
        v71 = v53;
        v72 = 1024;
        v73 = 549;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tnepHandler", buf, 0x22u);
      }

      v54 = *(_QWORD *)(a1 + 48);
      v55 = objc_alloc((Class)NSError);
      v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v62 = NSLocalizedDescriptionKey;
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v63 = v57;
      v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1));
      v59 = objc_msgSend(v55, "initWithDomain:code:userInfo:", v56, 12, v58);
      (*(void (**)(uint64_t, _QWORD, id))(v54 + 16))(v54, 0, v59);

    }
  }
}

void sub_10005F1F4(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  _BOOL4 v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  objc_class *v49;
  _BOOL4 v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  NSObject *v55;
  objc_class *v56;
  int v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  const char *v66;
  const char *v67;
  NSErrorUserInfoKey v68;
  void *v69;
  NSErrorUserInfoKey v70;
  void *v71;
  uint8_t buf[4];
  int v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  int v79;
  __int16 v80;
  void *v81;

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, ClassName, Name, 561, v9);

    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 48));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v73 = v15;
      v74 = 2082;
      v75 = v16;
      v76 = 2082;
      v77 = v17;
      v78 = 1024;
      v79 = 561;
      v80 = 2114;
      v81 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v19 = *(_QWORD *)(a1 + 40);
    if (v19)
    {
      v20 = objc_alloc((Class)NSError);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v70 = NSLocalizedDescriptionKey;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v71 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v71, &v70, 1));
      v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
      (*(void (**)(uint64_t, id))(v19 + 16))(v19, v24);

    }
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 32);
    if (v25)
      v26 = *(_QWORD *)(v25 + 216);
    else
      v26 = 0;
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFLogGetLogger(v27);
    v29 = (void (*)(uint64_t, const char *, ...))v28;
    if (v26)
    {
      if (v28)
      {
        v30 = object_getClass(*(id *)(a1 + 32));
        v31 = class_isMetaClass(v30);
        v32 = object_getClassName(*(id *)(a1 + 32));
        v66 = sel_getName(*(SEL *)(a1 + 48));
        v33 = 45;
        if (v31)
          v33 = 43;
        v29(6, "%c[%{public}s %{public}s]:%i ", v33, v32, v66, 567);
      }
      v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v35 = NFSharedLogGetLogger(v34);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        v37 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v37))
          v38 = 43;
        else
          v38 = 45;
        v39 = object_getClassName(*(id *)(a1 + 32));
        v40 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        v73 = v38;
        v74 = 2082;
        v75 = v39;
        v76 = 2082;
        v77 = v40;
        v78 = 1024;
        v79 = 567;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
      }

      v41 = *(_QWORD *)(a1 + 32);
      if (v41)
      {
        v42 = *(void **)(v41 + 184);
        v43 = *(void **)(v41 + 208);
      }
      else
      {
        v42 = 0;
        v43 = 0;
      }
      v44 = v42;
      sub_10017EF78(v44, v43, 0);

      v45 = *(_QWORD *)(a1 + 32);
      if (v45)
        v46 = *(void **)(v45 + 216);
      else
        v46 = 0;
      objc_msgSend(v46, "tnepReaderRestartPollingWithCallback:", *(_QWORD *)(a1 + 40));
      v47 = *(_QWORD *)(a1 + 32);
      if (v47)
        v48 = *(void **)(v47 + 184);
      else
        v48 = 0;
      sub_1001FBF60(v48);
    }
    else
    {
      if (v28)
      {
        v49 = object_getClass(*(id *)(a1 + 32));
        v50 = class_isMetaClass(v49);
        v51 = object_getClassName(*(id *)(a1 + 32));
        v67 = sel_getName(*(SEL *)(a1 + 48));
        v52 = 45;
        if (v50)
          v52 = 43;
        v29(3, "%c[%{public}s %{public}s]:%i Missing tnepHandler", v52, v51, v67, 564);
      }
      v53 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v54 = NFSharedLogGetLogger(v53);
      v55 = objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        v56 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v56))
          v57 = 43;
        else
          v57 = 45;
        v58 = object_getClassName(*(id *)(a1 + 32));
        v59 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        v73 = v57;
        v74 = 2082;
        v75 = v58;
        v76 = 2082;
        v77 = v59;
        v78 = 1024;
        v79 = 564;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tnepHandler", buf, 0x22u);
      }

      v60 = *(_QWORD *)(a1 + 40);
      v61 = objc_alloc((Class)NSError);
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v68 = NSLocalizedDescriptionKey;
      v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v69 = v63;
      v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v69, &v68, 1));
      v65 = objc_msgSend(v61, "initWithDomain:code:userInfo:", v62, 12, v64);
      (*(void (**)(uint64_t, id))(v60 + 16))(v60, v65);

    }
  }
}

void sub_10005FB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005FBA0(uint64_t a1)
{
  id *WeakRetained;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  const char *Name;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(WeakRetained);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(WeakRetained);
      Name = sel_getName(*(SEL *)(a1 + 40));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v5(6, "%c[%{public}s %{public}s]:%i ", v9, ClassName, Name, 585);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(WeakRetained);
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(WeakRetained);
      v16 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      v23 = v14;
      v24 = 2082;
      v25 = v15;
      v26 = 2082;
      v27 = v16;
      v28 = 1024;
      v29 = 585;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    objc_msgSend(WeakRetained[27], "tnepServiceInvalidate");
    v17 = WeakRetained[27];
    WeakRetained[27] = 0;

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig embeddedWiredModeWithFD:](NFRoutingConfig, "embeddedWiredModeWithFD:", 1));
    v20 = objc_msgSend(v18, "setRoutingConfig:", v19);

  }
}

void sub_100060158(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 612, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 612;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100060754(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 627, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 627;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_1000608E8(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 232), a2);
}

void sub_100060900(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 642, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 642;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100060A94(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 646, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 646;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100060D64(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7;
  id v8;
  void *specific;
  uint64_t Logger;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  const char *ClassName;
  const char *Name;
  _QWORD v38[5];
  id v39;
  uint64_t v40;
  char v41;
  uint8_t buf[4];
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  id v51;

  v7 = a2;
  v8 = a4;
  sub_1000608E8(*(_QWORD *)(a1 + 32), v8);
  if (v8)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v11 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v14 = 45;
      if (isMetaClass)
        v14 = 43;
      v11(3, "%c[%{public}s %{public}s]:%i CH process error=%{public}@", v14, ClassName, Name, 660, v8);
    }
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      v20 = object_getClassName(*(id *)(a1 + 32));
      v21 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      v43 = v19;
      v44 = 2082;
      v45 = v20;
      v46 = 2082;
      v47 = v21;
      v48 = 1024;
      v49 = 660;
      v50 = 2114;
      v51 = v8;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i CH process error=%{public}@", buf, 0x2Cu);
    }

  }
  if (objc_msgSend(v7, "length"))
  {
    v22 = objc_alloc((Class)NFNdefMessageInternal);
    v23 = objc_retainAutorelease(v7);
    v24 = objc_msgSend(v22, "initWithBytes:length:", objc_msgSend(v23, "bytes"), objc_msgSend(v23, "length"));
  }
  else if (*(_QWORD *)(a1 + 32))
  {
    v25 = objc_alloc_init((Class)NFNdefRecordInternal);
    objc_msgSend(v25, "setTypeNameFormat:", 1);
    v26 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269A40, 3);
    objc_msgSend(v25, "setType:", v26);

    v27 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269A43, 2);
    objc_msgSend(v25, "setPayload:", v27);

    v28 = objc_alloc_init((Class)NFNdefRecordInternal);
    v29 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &unk_100269A47, 2);
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "asData"));
    objc_msgSend(v29, "appendData:", v30);

    objc_msgSend(v28, "setTypeNameFormat:", 1);
    v31 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269A45, 2);
    objc_msgSend(v28, "setType:", v31);

    objc_msgSend(v28, "setPayload:", v29);
    v24 = objc_alloc_init((Class)NFNdefMessageInternal);
    objc_msgSend(v24, "addRecord:", v28);

  }
  else
  {
    v24 = 0;
  }
  v32 = *(_QWORD *)(a1 + 32);
  if (v32)
    v33 = *(void **)(v32 + 216);
  else
    v33 = 0;
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_100061130;
  v38[3] = &unk_1002E62B8;
  v34 = *(_QWORD *)(a1 + 40);
  v39 = v8;
  v40 = v34;
  v38[4] = v32;
  v41 = a3;
  v35 = v8;
  objc_msgSend(v33, "tnepTagDeviceSendNDEFMessage:callback:", v24, v38);

}

void sub_100061130(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint32_t v21;
  uint64_t v22;
  NSObject *v23;
  char *v24;
  os_signpost_id_t v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  _BOOL4 v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  objc_class *v36;
  int v37;
  const char *v38;
  const char *v39;
  const char *ClassName;
  const char *Name;
  const char *v42;
  uint8_t buf[4];
  _BYTE v44[24];
  __int16 v45;
  int v46;
  __int16 v47;
  void *v48;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v7(3, "%c[%{public}s %{public}s]:%i error=%{public}@", v10, ClassName, Name, 669, v4);
    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)v44 = v15;
    *(_WORD *)&v44[4] = 2082;
    *(_QWORD *)&v44[6] = v16;
    *(_WORD *)&v44[14] = 2082;
    *(_QWORD *)&v44[16] = v17;
    v45 = 1024;
    v46 = 669;
    v47 = 2114;
    v48 = v4;
    v18 = "%c[%{public}s %{public}s]:%i error=%{public}@";
    v19 = v13;
    v20 = OS_LOG_TYPE_ERROR;
    v21 = 44;
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, buf, v21);
LABEL_12:

    goto LABEL_14;
  }
  if (!*(_QWORD *)(a1 + 40) && *(_BYTE *)(a1 + 56))
  {
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFLogGetLogger(v27);
    if (v28)
    {
      v29 = (void (*)(uint64_t, const char *, ...))v28;
      v30 = object_getClass(*(id *)(a1 + 32));
      v31 = class_isMetaClass(v30);
      v32 = object_getClassName(*(id *)(a1 + 32));
      v42 = sel_getName(*(SEL *)(a1 + 48));
      v33 = 45;
      if (v31)
        v33 = 43;
      v29(6, "%c[%{public}s %{public}s]:%i TNEP is completed", v33, v32, v42, 671);
    }
    v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v35 = NFSharedLogGetLogger(v34);
    v13 = objc_claimAutoreleasedReturnValue(v35);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    v36 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v36))
      v37 = 43;
    else
      v37 = 45;
    v38 = object_getClassName(*(id *)(a1 + 32));
    v39 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)v44 = v37;
    *(_WORD *)&v44[4] = 2082;
    *(_QWORD *)&v44[6] = v38;
    *(_WORD *)&v44[14] = 2082;
    *(_QWORD *)&v44[16] = v39;
    v45 = 1024;
    v46 = 671;
    v18 = "%c[%{public}s %{public}s]:%i TNEP is completed";
    v19 = v13;
    v20 = OS_LOG_TYPE_DEFAULT;
    v21 = 34;
    goto LABEL_11;
  }
LABEL_14:
  v22 = NFSharedSignpostLog(v3);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  v24 = (char *)objc_msgSend(*(id *)(a1 + 32), "signpostId");
  if ((unint64_t)(v24 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v25 = (os_signpost_id_t)v24;
    if (os_signpost_enabled(v23))
    {
      if (v4)
      {
        v26 = "Failed";
      }
      else
      {
        v26 = "Failed";
        if (!*(_QWORD *)(a1 + 40) && *(_BYTE *)(a1 + 56))
          v26 = "Completed";
      }
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v44 = v26;
      *(_WORD *)&v44[8] = 2112;
      *(_QWORD *)&v44[10] = v4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, v25, "CH_Negotiation", "status=%s, error=%@", buf, 0x16u);
    }
  }

}

void sub_1000618E4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  _QWORD v15[4];
  __int128 v16;
  _QWORD v17[5];
  _QWORD v18[5];

  v3 = a2;
  v4 = objc_alloc((Class)NSError);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v6 = objc_msgSend(v3, "code");
  v17[0] = NSLocalizedDescriptionKey;
  if ((uint64_t)objc_msgSend(v3, "code") > 70)
    v7 = 71;
  else
    v7 = (uint64_t)objc_msgSend(v3, "code");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E5F80[v7]));
  v18[0] = v8;
  v18[1] = v3;
  v17[1] = NSUnderlyingErrorKey;
  v17[2] = CFSTR("Line");
  v18[2] = &off_1002FDFE0;
  v17[3] = CFSTR("Method");
  v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 40)));
  v18[3] = v9;
  v17[4] = NSDebugDescriptionErrorKey;
  v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 40)), 699);
  v18[4] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 5));
  v12 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v5, v6, v11);

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100061B50;
  v15[3] = &unk_1002E5F60;
  v16 = *(_OWORD *)(a1 + 32);
  v13 = sub_100058C3C((id)v16, v15);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  objc_msgSend(v14, "connectionHandoverProcessFailure:", v12);

  if (objc_msgSend(v3, "code") == (id)47)
    objc_msgSend(*(id *)(a1 + 32), "tnepReaderServicesAborted:", v3);

}

void sub_100061B50(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 701, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 701;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100061CE4(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 710, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 710;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100061E78(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  const char *ClassName;
  const char *Name;
  __int128 v24;
  _QWORD v25[5];
  __int128 v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  id v36;

  v3 = a2;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(3, "%c[%{public}s %{public}s]:%i select failed, error=%{public}@", v9, ClassName, Name, 715, v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      v28 = v14;
      v29 = 2082;
      v30 = v15;
      v31 = 2082;
      v32 = v16;
      v33 = 1024;
      v34 = 715;
      v35 = 2114;
      v36 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i select failed, error=%{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v17 = *(_QWORD **)(a1 + 32);
    if (v17)
      v18 = (void *)v17[25];
    else
      v18 = 0;
    v19 = v18;
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "workQueue"));
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000620CC;
    v25[3] = &unk_1002E6308;
    v25[4] = *(_QWORD *)(a1 + 32);
    v24 = *(_OWORD *)(a1 + 40);
    v21 = (id)v24;
    v26 = v24;
    objc_msgSend(v19, "generateConnectionHandoverRequestWithQueue:responseHandler:", v20, v25);

  }
}

void sub_1000620CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  const char *ClassName;
  const char *Name;
  __int128 v28;
  _QWORD v29[5];
  __int128 v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  id v40;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v9(3, "%c[%{public}s %{public}s]:%i CH Request generation fail: %{public}@", v12, ClassName, Name, 723, v6);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      v18 = object_getClassName(*(id *)(a1 + 32));
      v19 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      v32 = v17;
      v33 = 2082;
      v34 = v18;
      v35 = 2082;
      v36 = v19;
      v37 = 1024;
      v38 = 723;
      v39 = 2114;
      v40 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i CH Request generation fail: %{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v20 = objc_alloc((Class)NFNdefMessageInternal);
    v21 = objc_retainAutorelease(v5);
    v22 = objc_msgSend(v20, "initWithBytes:length:", objc_msgSend(v21, "bytes"), objc_msgSend(v21, "length"));
    v23 = *(_QWORD *)(a1 + 32);
    if (v23)
      v24 = *(void **)(v23 + 216);
    else
      v24 = 0;
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_100062350;
    v29[3] = &unk_1002E6330;
    v29[4] = v23;
    v28 = *(_OWORD *)(a1 + 40);
    v25 = (id)v28;
    v30 = v28;
    objc_msgSend(v24, "tnepReaderSend:callback:", v22, v29);

  }
}

void sub_100062350(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  const char *ClassName;
  const char *Name;
  __int128 v29;
  _QWORD v30[6];
  _QWORD v31[5];
  __int128 v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  id v42;

  v5 = a3;
  if (v5)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v11 = 45;
      if (isMetaClass)
        v11 = 43;
      v8(3, "%c[%{public}s %{public}s]:%i CH exchange error=%{public}@", v11, ClassName, Name, 731, v5);
    }
    v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v13 = NFSharedLogGetLogger(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v15))
        v16 = 43;
      else
        v16 = 45;
      v17 = object_getClassName(*(id *)(a1 + 32));
      v18 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      v34 = v16;
      v35 = 2082;
      v36 = v17;
      v37 = 2082;
      v38 = v18;
      v39 = 1024;
      v40 = 731;
      v41 = 2114;
      v42 = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i CH exchange error=%{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v19 = *(_QWORD **)(a1 + 32);
    if (v19)
      v19 = (_QWORD *)v19[25];
    v20 = v19;
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "asData"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10006260C;
    v31[3] = &unk_1002E6218;
    v31[4] = *(_QWORD *)(a1 + 32);
    v29 = *(_OWORD *)(a1 + 40);
    v23 = (id)v29;
    v32 = v29;
    objc_msgSend(v20, "connectRemoteWithConnectionHandoverSelect:callbackQueue:responseHandler:", v21, v22, v31);

    v24 = *(_QWORD *)(a1 + 32);
    if (v24)
      v25 = *(void **)(v24 + 216);
    else
      v25 = 0;
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_1000627B4;
    v30[3] = &unk_1002E5F60;
    v26 = *(_QWORD *)(a1 + 48);
    v30[4] = v24;
    v30[5] = v26;
    objc_msgSend(v25, "tnepReaderDeselectWithCallback:", v30);

  }
}

void sub_10006260C(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(3, "%c[%{public}s %{public}s]:%i AC connection failure: %{public}@", v9, ClassName, Name, 741, v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      v20 = v14;
      v21 = 2082;
      v22 = v15;
      v23 = 2082;
      v24 = v16;
      v25 = 1024;
      v26 = 741;
      v27 = 2114;
      v28 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i AC connection failure: %{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_1000627B4(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  id v17;
  void *v18;
  const char *ClassName;
  const char *Name;
  _QWORD v21[4];
  __int128 v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  id v32;

  v3 = a2;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(6, "%c[%{public}s %{public}s]:%i Deselect failure: %@; ignore since AC has successfully negotiated and connection attempt started",
        v9,
        ClassName,
        Name,
        751,
        v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      v24 = v14;
      v25 = 2082;
      v26 = v15;
      v27 = 2082;
      v28 = v16;
      v29 = 1024;
      v30 = 751;
      v31 = 2112;
      v32 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Deselect failure: %@; ignore since AC has successfully negotiated and connection attempt started",
        buf,
        0x2Cu);
    }

  }
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10006299C;
  v21[3] = &unk_1002E5F60;
  v22 = *(_OWORD *)(a1 + 32);
  v17 = sub_100058C3C((id)v22, v21);
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  objc_msgSend(v18, "connectionHandoverProcessCompleted");

}

void sub_10006299C(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 754, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 754;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100062D60(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  id v17;
  void *v18;
  id v19;
  const char *ClassName;
  const char *Name;
  _QWORD v22[4];
  __int128 v23;
  _QWORD v24[4];
  __int128 v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  id v35;

  v3 = a2;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(3, "%c[%{public}s %{public}s]:%i AC connection failure: %{public}@", v9, ClassName, Name, 769, v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      v27 = v14;
      v28 = 2082;
      v29 = v15;
      v30 = 2082;
      v31 = v16;
      v32 = 1024;
      v33 = 769;
      v34 = 2114;
      v35 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i AC connection failure: %{public}@", buf, 0x2Cu);
    }

    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100062FA4;
    v24[3] = &unk_1002E5F60;
    v25 = *(_OWORD *)(a1 + 32);
    v17 = sub_100058C3C((id)v25, v24);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    objc_msgSend(v18, "connectionHandoverProcessFailure:", v3);
  }
  else
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100063138;
    v22[3] = &unk_1002E5F60;
    v23 = *(_OWORD *)(a1 + 32);
    v19 = sub_100058C3C((id)v23, v22);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v19);
    objc_msgSend(v18, "connectionHandoverProcessCompleted");
  }

}

void sub_100062FA4(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 771, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 771;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100063138(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 776, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 776;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100063524(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 791, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 791;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100064500(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *v25;
  _BOOL4 v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  const char *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint32_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void (*v43)(uint64_t, const char *, ...);
  objc_class *v44;
  _BOOL4 v45;
  const char *v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  objc_class *v52;
  int v53;
  const char *v54;
  const char *v55;
  const char *v56;
  const char *v57;
  const char *v58;
  uint8_t buf[4];
  int v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  void *v70;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    if (*(_BYTE *)(a1 + 56))
      v9 = "Enable";
    else
      v9 = "Disable";
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %s ContinuousWave", v10, ClassName, Name, 187, v9);
  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    if (*(_BYTE *)(a1 + 56))
      v18 = "Enable";
    else
      v18 = "Disable";
    *(_DWORD *)buf = 67110146;
    v60 = v15;
    v61 = 2082;
    v62 = v16;
    v63 = 2082;
    v64 = v17;
    v65 = 1024;
    v66 = 187;
    v67 = 2080;
    v68 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %s ContinuousWave", buf, 0x2Cu);
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig none](NFRoutingConfig, "none"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "setRouting:", v20));

  if (v21)
  {
    v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v23 = NFLogGetLogger(v22);
    if (v23)
    {
      v24 = (void (*)(uint64_t, const char *, ...))v23;
      v25 = object_getClass(*(id *)(a1 + 32));
      v26 = class_isMetaClass(v25);
      v27 = object_getClassName(*(id *)(a1 + 32));
      v57 = sel_getName(*(SEL *)(a1 + 48));
      v28 = 45;
      if (v26)
        v28 = 43;
      v24(6, "%c[%{public}s %{public}s]:%i Error turning off operating mode.", v28, v27, v57, 191);
    }
    v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v30 = NFSharedLogGetLogger(v29);
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      goto LABEL_43;
    v32 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v32))
      v33 = 43;
    else
      v33 = 45;
    v34 = object_getClassName(*(id *)(a1 + 32));
    v35 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v60 = v33;
    v61 = 2082;
    v62 = v34;
    v63 = 2082;
    v64 = v35;
    v65 = 1024;
    v66 = 191;
    v36 = "%c[%{public}s %{public}s]:%i Error turning off operating mode.";
    v37 = v31;
    v38 = OS_LOG_TYPE_DEFAULT;
    v39 = 34;
    goto LABEL_42;
  }
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "enableContinuousWave:withFrequencySweep:", *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57)));

  if (!v21)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 112) = *(_BYTE *)(a1 + 56);
    goto LABEL_44;
  }
  v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v42 = NFLogGetLogger(v41);
  if (v42)
  {
    v43 = (void (*)(uint64_t, const char *, ...))v42;
    v44 = object_getClass(*(id *)(a1 + 32));
    v45 = class_isMetaClass(v44);
    v46 = object_getClassName(*(id *)(a1 + 32));
    v47 = sel_getName(*(SEL *)(a1 + 48));
    if (*(_BYTE *)(a1 + 56))
      v48 = "enable";
    else
      v48 = "disable";
    v58 = v48;
    v49 = 45;
    if (v45)
      v49 = 43;
    v43(3, "%c[%{public}s %{public}s]:%i Failed to %s ContinuousWave - error=%{public}@", v49, v46, v47, 195, v58, v21);
  }
  v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v51 = NFSharedLogGetLogger(v50);
  v31 = objc_claimAutoreleasedReturnValue(v51);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    v52 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v52))
      v53 = 43;
    else
      v53 = 45;
    v54 = object_getClassName(*(id *)(a1 + 32));
    v55 = sel_getName(*(SEL *)(a1 + 48));
    if (*(_BYTE *)(a1 + 56))
      v56 = "enable";
    else
      v56 = "disable";
    *(_DWORD *)buf = 67110402;
    v60 = v53;
    v61 = 2082;
    v62 = v54;
    v63 = 2082;
    v64 = v55;
    v65 = 1024;
    v66 = 195;
    v67 = 2080;
    v68 = v56;
    v69 = 2114;
    v70 = v21;
    v36 = "%c[%{public}s %{public}s]:%i Failed to %s ContinuousWave - error=%{public}@";
    v37 = v31;
    v38 = OS_LOG_TYPE_ERROR;
    v39 = 54;
LABEL_42:
    _os_log_impl((void *)&_mh_execute_header, v37, v38, v36, buf, v39);
  }
LABEL_43:

LABEL_44:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100064BB8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 88) = 1;
  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)v7 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "scanningForTags", "", v7, 2u);
  }

  sub_10019E124(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128), *(void **)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig accessoryReaderWithPolling:lpcd:](NFRoutingConfig, "accessoryReaderWithPolling:lpcd:", 239, 0));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "setRouting:", v5));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100064EE4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _DWORD v11[2];

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 88) = 1;
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 92) = *(_DWORD *)(a1 + 48);
  v3 = NFSharedSignpostLog(a1);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_signpost_enabled(v4))
  {
    v5 = *(_DWORD *)(a1 + 48);
    v11[0] = 67109120;
    v11[1] = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "scanningForTags", "tech=0x%04x", (uint8_t *)v11, 8u);
  }

  v6 = *(unsigned int *)(a1 + 48);
  v7 = (v6 - 1);
  if (v7 <= 0x3F)
  {
    if (((1 << (v6 - 1)) & 0x800000008000000BLL) != 0)
      goto LABEL_10;
    if (v7 == 15)
    {
      v6 = 8;
      goto LABEL_10;
    }
  }
  if ((_DWORD)v6 == 128)
    v6 = 128;
  else
    v6 = 239;
LABEL_10:
  sub_10019E124(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128), *(void **)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig accessoryReaderWithPolling:lpcd:](NFRoutingConfig, "accessoryReaderWithPolling:lpcd:", v6, v2 != 0));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "setRouting:", v9));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10006528C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint8_t v8[16];

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 88))
  {
    *(_BYTE *)(v2 + 88) = 0;
    v3 = NFSharedSignpostLog(a1);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)v8 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "scanningForTags", "", v8, 2u);
    }

    v2 = *(_QWORD *)(a1 + 32);
  }
  sub_10019D694(*(_QWORD *)(v2 + 128), (void *)v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig none](NFRoutingConfig, "none"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "setRouting:", v6));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100065590(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  sub_10019D694(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128), *(void **)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "currentRouting"));
  v4 = objc_msgSend(v3, "copy");

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig none](NFRoutingConfig, "none"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "setRouting:", v6));

  if (!v8)
  {
    sub_10019E124(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128), *(void **)(a1 + 32));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "setRouting:", v4));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000658D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  double v15;
  double v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  objc_super v34;
  _QWORD v35[5];
  id v36[2];
  id buf[2];
  uint64_t v38;
  timeval v39;
  NSErrorUserInfoKey v40;
  void *v41;

  v39.tv_sec = 0;
  *(_QWORD *)&v39.tv_usec = 0;
  v38 = 0;
  v2 = gettimeofday(&v39, &v38);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) = 1000 * v39.tv_sec + v39.tv_usec / 1000;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 89) = 0;
  v3 = NFSharedSignpostLog(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_signpost_enabled(v4))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "connectTag", "", (uint8_t *)buf, 2u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  v6 = objc_msgSend(v5, "connectTag:", *(_QWORD *)(a1 + 40));

  v8 = NFSharedSignpostLog(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_signpost_enabled(v9))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "connectTag", "", (uint8_t *)buf, 2u);
  }

  if (v6)
  {
    v10 = objc_alloc((Class)NSError);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v40 = NSLocalizedDescriptionKey;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
    v41 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1));
    v14 = objc_msgSend(v10, "initWithDomain:code:userInfo:", v11, 6, v13);

  }
  else
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 80), *(id *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "_getMaxRFTimeLimitOverride");
    v16 = v15;
    if (v15 > 0.0)
    {
      v17 = *(_QWORD **)(a1 + 32);
      v18 = (void *)v17[15];
      if (!v18)
      {
        objc_initWeak(buf, v17);
        v19 = objc_alloc((Class)NFTimer);
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472;
        v20 = *(_QWORD *)(a1 + 32);
        v35[2] = sub_100065D40;
        v35[3] = &unk_1002E6610;
        v21 = *(void **)(a1 + 56);
        v35[4] = v20;
        v36[1] = v21;
        objc_copyWeak(v36, buf);
        v34.receiver = *(id *)(a1 + 32);
        v34.super_class = (Class)_NFACReaderSession;
        v22 = objc_msgSendSuper2(&v34, "workQueue");
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        v24 = objc_msgSend(v19, "initWithCallback:queue:", v35, v23);
        v25 = *(_QWORD *)(a1 + 32);
        v26 = *(void **)(v25 + 120);
        *(_QWORD *)(v25 + 120) = v24;

        objc_destroyWeak(v36);
        objc_destroyWeak(buf);
        v18 = *(void **)(*(_QWORD *)(a1 + 32) + 120);
      }
      objc_msgSend(v18, "startTimer:", v16);
    }
    v14 = 0;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "type") == 8)
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
    v28 = objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "setISO15693DataRate:forTag:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 104), *(_QWORD *)(a1 + 40)));

    v14 = (id)v28;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  v29 = sub_1001F2AB0((uint64_t)NFFuryCALogger);
  v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  v31 = sub_1001F2EFC((uint64_t)v30, (int)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "type"), 1, 0, (uint64_t)objc_msgSend(v14, "code"));
  v32 = (void *)objc_claimAutoreleasedReturnValue(v31);

  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
  objc_msgSend(v33, "postNotificationName:object:userInfo:options:", CFSTR("com.apple.nfcacd.tag.session.event"), 0, v32, 3);

}

void sub_100065D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100065D40(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  id WeakRetained;
  const char *Name;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Max session limit reached", v8, ClassName, Name, 303);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v19 = v13;
    v20 = 2082;
    v21 = v14;
    v22 = 2082;
    v23 = v15;
    v24 = 1024;
    v25 = 303;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Max session limit reached", buf, 0x22u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "handleReaderBurnoutTimer");

}

void sub_1000660D0(uint64_t a1)
{
  __darwin_time_t tv_sec;
  __darwin_suseconds_t tv_usec;
  void *v4;
  id v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  uint8_t v28[16];
  uint64_t v29;
  timeval v30;
  NSErrorUserInfoKey v31;
  void *v32;
  NSErrorUserInfoKey v33;
  void *v34;

  v30.tv_sec = 0;
  *(_QWORD *)&v30.tv_usec = 0;
  v29 = 0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "stopTimer");
  gettimeofday(&v30, &v29);
  tv_sec = v30.tv_sec;
  tv_usec = v30.tv_usec;
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 80);
  if (v4)
  {
    v5 = objc_msgSend(v4, "type");
    v6 = (int)v5;
    v7 = NFSharedSignpostLog(v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)v28 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "disconnectTag", "", v28, 2u);
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
    v10 = objc_msgSend(v9, "disconnectTag:tagRemovalDetect:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80), 0);

    v12 = NFSharedSignpostLog(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_signpost_enabled(v13))
    {
      *(_WORD *)v28 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disconnectTag", "", v28, 2u);
    }

    if (v10)
    {
      v14 = objc_alloc((Class)NSError);
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v31 = NSLocalizedDescriptionKey;
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
      v32 = v16;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
      v18 = objc_msgSend(v14, "initWithDomain:code:userInfo:", v15, 6, v17);

    }
    else
    {
      v18 = 0;
      v22 = *(_QWORD *)(a1 + 32);
      v15 = *(void **)(v22 + 80);
      *(_QWORD *)(v22 + 80) = 0;
    }
  }
  else
  {
    v19 = objc_alloc((Class)NSError);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v33 = NSLocalizedDescriptionKey;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v34 = v20;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1));
    v18 = objc_msgSend(v19, "initWithDomain:code:userInfo:", v15, 12, v21);

    v6 = 0;
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v23 = sub_1001F2AB0((uint64_t)NFFuryCALogger);
  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  v25 = sub_1001F2EFC((uint64_t)v24, v6, 2, 1000 * tv_sec + tv_usec / 1000 - *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96), (uint64_t)objc_msgSend(v18, "code"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(v25);

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
  objc_msgSend(v27, "postNotificationName:object:userInfo:options:", CFSTR("com.apple.nfcacd.tag.session.event"), 0, v26, 3);

}

void sub_100066670(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  void *v5;
  unsigned int v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  const char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  int v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  NSErrorUserInfoKey v37;
  void *v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  const char *v48;
  NSErrorUserInfoKey v49;
  void *v50;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFCACD_READER_SESSION_CHECK_PRESENCE", "", buf, 2u);
  }

  v4 = *(_QWORD **)(a1 + 32);
  if (!v4[10])
  {
    v32 = *(_QWORD *)(a1 + 40);
    v33 = objc_alloc((Class)NSError);
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v49 = NSLocalizedDescriptionKey;
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v50 = v34;
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1));
    v36 = objc_msgSend(v33, "initWithDomain:code:userInfo:", v26, 12, v35);
    (*(void (**)(uint64_t, _QWORD, id))(v32 + 16))(v32, 0, v36);

LABEL_25:
    return;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "driverWrapper"));
  v6 = objc_msgSend(v5, "checkTagPresence:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));

  if (v6)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      if (v6 == 28)
        v14 = "NFResultTagNotFound";
      else
        v14 = "NFResultRFDeactivated";
      v15 = 45;
      if (isMetaClass)
        v15 = 43;
      v9(3, "%c[%{public}s %{public}s]:%i checkTagPresence return error: %s", v15, ClassName, Name, 381, v14);
    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      v21 = object_getClassName(*(id *)(a1 + 32));
      v22 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      if (v6 == 28)
        v23 = "NFResultTagNotFound";
      else
        v23 = "NFResultRFDeactivated";
      v40 = v20;
      v41 = 2082;
      v42 = v21;
      v43 = 2082;
      v44 = v22;
      v45 = 1024;
      v46 = 381;
      v47 = 2080;
      v48 = v23;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i checkTagPresence return error: %s", buf, 0x2Cu);
    }

    v24 = *(_QWORD *)(a1 + 40);
    v25 = objc_alloc((Class)NSError);
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v27 = v6;
    v37 = NSLocalizedDescriptionKey;
    if (v6 >= 0x47)
      v28 = 71;
    else
      v28 = v6;
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E63C8[v28]));
    v38 = v29;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1));
    v31 = objc_msgSend(v25, "initWithDomain:code:userInfo:", v26, v27, v30);
    (*(void (**)(uint64_t, _QWORD, id))(v24 + 16))(v24, 0, v31);

    goto LABEL_25;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100066C4C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint8_t buf[8];
  uint64_t v9;
  uint64_t v10;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFCACD_READER_SESSION_CHECK_NDEF", "", buf, 2u);
  }

  *(_QWORD *)buf = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
  v7 = 0;
  objc_msgSend(v4, "queryTagNDEFCapability:hasNdefAbility:error:", v5, buf, &v7);
  v6 = v7;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100066F34(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  id v19;
  uint8_t v20[16];
  uint8_t buf[8];
  uint64_t v22;
  uint64_t v23;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFCACD_READER_SESSION_READ_NDEF", "", buf, 2u);
  }

  *(_QWORD *)buf = 0;
  v22 = 0;
  v23 = 0;
  v5 = NFSharedSignpostLog(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_signpost_enabled(v6))
  {
    *(_WORD *)v20 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "readNdef", "", v20, 2u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
  v19 = 0;
  v9 = objc_msgSend(v7, "queryTagNDEFCapability:hasNdefAbility:error:", v8, buf, &v19);
  v10 = v19;

  if (v9)
  {
    if ((_BYTE)v23)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
      v18 = v10;
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "readNdefDataFromTag:messageSize:error:", v13, *(unsigned int *)buf, &v18));
      v15 = v18;

      v10 = v15;
    }
    else
    {
      v14 = 0;
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "_setNDEFMessageSize:", *(_QWORD *)buf);
    v11 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "_setNDEFContainerSize:", v22);
  }
  else
  {
    v14 = 0;
  }
  v16 = NFSharedSignpostLog(v11);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_signpost_enabled(v17))
  {
    *(_WORD *)v20 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "readNdef", "", v20, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100067378(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *specific;
  uint64_t Logger;
  void (*v15)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  const char *v25;
  const char *v26;
  id v27;
  void *v28;
  void *v29;
  const char *Name;
  id v31;
  NSErrorUserInfoKey v32;
  void *v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;

  v2 = *(id *)(a1 + 32);
  v3 = v2;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80))
  {
    v4 = NFSharedSignpostLog(v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "transceive", "", buf, 2u);
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "driverWrapper"));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80);
    v31 = 0;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "transceive:tag:maxTimeout:error:", v3, v7, &v31, 20.0));
    v9 = v31;

    v11 = NFSharedSignpostLog(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "transceive", "", buf, 2u);
    }
  }
  else
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v15 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 40));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 40));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v19 = 45;
      if (isMetaClass)
        v19 = 43;
      v15(3, "%c[%{public}s %{public}s]:%i No tag is connected", v19, ClassName, Name, 436);
    }
    v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v21 = NFSharedLogGetLogger(v20);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = object_getClass(*(id *)(a1 + 40));
      if (class_isMetaClass(v23))
        v24 = 43;
      else
        v24 = 45;
      v25 = object_getClassName(*(id *)(a1 + 40));
      v26 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      v35 = v24;
      v36 = 2082;
      v37 = v25;
      v38 = 2082;
      v39 = v26;
      v40 = 1024;
      v41 = 436;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No tag is connected", buf, 0x22u);
    }

    v27 = objc_alloc((Class)NSError);
    v12 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v32 = NSLocalizedDescriptionKey;
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Tag Not Found"));
    v33 = v28;
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1));
    v9 = objc_msgSend(v27, "initWithDomain:code:userInfo:", v12, 28, v29);

    v8 = 0;
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100068938(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  const char *Name;
  NSErrorUserInfoKey v28;
  void *v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 80);
  if (v2)
  {
    v3 = objc_msgSend(v2, "silentType");
    v4 = *(_QWORD *)(a1 + 32);
    if (v3 == 1
      || (v5 = objc_msgSend(*(id *)(v4 + 80), "silentType"), v4 = *(_QWORD *)(a1 + 32), v5 == 2)
      || (v6 = objc_msgSend(*(id *)(v4 + 80), "silentType"), v4 = *(_QWORD *)(a1 + 32), v6 == 3)
      || (v7 = *(_DWORD *)(v4 + 92), v7 == 32)
      || v7 == 128
      || v7 == 64)
    {
      objc_msgSend((id)v4, "_transceiveTypeAAccessoryCommand:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      objc_msgSend((id)v4, "_transceiveNTAG5VAccessoryCommand:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
  }
  else
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v10 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v14 = 45;
      if (isMetaClass)
        v14 = 43;
      v10(3, "%c[%{public}s %{public}s]:%i No tag is connected", v14, ClassName, Name, 566);
    }
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      v20 = object_getClassName(*(id *)(a1 + 32));
      v21 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      v31 = v19;
      v32 = 2082;
      v33 = v20;
      v34 = 2082;
      v35 = v21;
      v36 = 1024;
      v37 = 566;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No tag is connected", buf, 0x22u);
    }

    v22 = objc_alloc((Class)NSError);
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v28 = NSLocalizedDescriptionKey;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Tag Not Found"));
    v29 = v24;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1));
    v26 = objc_msgSend(v22, "initWithDomain:code:userInfo:", v23, 28, v25);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_1000696B0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  unsigned int v4;
  id *v5;
  id *v6;
  uint64_t v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  const char *Name;
  uint64_t v32;
  uint64_t v33;
  NSErrorUserInfoKey v34;
  void *v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  int v43;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80))
  {
    v2 = NFSharedSignpostLog(a1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "readTypeIdentifier", "", buf, 2u);
    }

    v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "technology");
    v5 = *(id **)(a1 + 32);
    if (v4 == 1)
    {
      v33 = 0;
      v6 = (id *)&v33;
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_readTypeATagId:", &v33));
    }
    else
    {
      v28 = objc_msgSend(v5[10], "technology");
      if ((_DWORD)v28 != 16)
      {
        v27 = 0;
        v26 = 0;
LABEL_20:
        v30 = NFSharedSignpostLog(v28);
        v23 = objc_claimAutoreleasedReturnValue(v30);
        if (os_signpost_enabled(v23))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "readTypeIdentifier", "", buf, 2u);
        }
        goto LABEL_22;
      }
      v29 = *(void **)(a1 + 32);
      v32 = 0;
      v6 = (id *)&v32;
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "_readTypeVTagId:", &v32));
    }
    v27 = (void *)v7;
    v28 = *v6;
    v26 = v28;
    goto LABEL_20;
  }
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v10 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v14 = 45;
    if (isMetaClass)
      v14 = 43;
    v10(3, "%c[%{public}s %{public}s]:%i No tag is connected", v14, ClassName, Name, 681);
  }
  v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v16 = NFSharedLogGetLogger(v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    v18 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v18))
      v19 = 43;
    else
      v19 = 45;
    v20 = object_getClassName(*(id *)(a1 + 32));
    v21 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v37 = v19;
    v38 = 2082;
    v39 = v20;
    v40 = 2082;
    v41 = v21;
    v42 = 1024;
    v43 = 681;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No tag is connected", buf, 0x22u);
  }

  v22 = objc_alloc((Class)NSError);
  v23 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v34 = NSLocalizedDescriptionKey;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Tag Not Found"));
  v35 = v24;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
  v26 = objc_msgSend(v22, "initWithDomain:code:userInfo:", v23, 28, v25);

  v27 = 0;
LABEL_22:

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100069C24(uint64_t a1)
{
  uint64_t v2;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  const char *Name;
  NSErrorUserInfoKey v26;
  void *v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 88) || *(_QWORD *)(v2 + 80))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v5(3, "%c[%{public}s %{public}s]:%i Cannot change rate when polling or connected", v9, ClassName, Name, 708);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v29 = v14;
      v30 = 2082;
      v31 = v15;
      v32 = 2082;
      v33 = v16;
      v34 = 1024;
      v35 = 708;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Cannot change rate when polling or connected", buf, 0x22u);
    }

    v17 = objc_alloc((Class)NSError);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v26 = NSLocalizedDescriptionKey;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v27 = v19;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
    v21 = objc_msgSend(v17, "initWithDomain:code:userInfo:", v18, 12, v20);

  }
  else
  {
    v22 = NFSharedSignpostLog(a1);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_signpost_enabled(v23))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setTypeATagDataRate", "", buf, 2u);
    }

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
    v21 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "setTypeATagDataRate:", *(unsigned int *)(a1 + 56)));

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) = *(_QWORD *)(a1 + 56);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100069F84(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint8_t v10[8];
  NSErrorUserInfoKey v11;
  void *v12;

  v2 = NFSharedSignpostLog(objc_msgSend(*(id *)(a1 + 32), "disconnectTag:", &stru_1002E6678));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)v10 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "handleReaderBurnoutTimer", "", v10, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "internalEndSession:", &stru_1002E6698);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remoteObject"));
  v5 = objc_alloc((Class)NSError);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v11 = NSLocalizedDescriptionKey;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Timeout"));
  v12 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
  v9 = objc_msgSend(v5, "initWithDomain:code:userInfo:", v6, 5, v8);
  objc_msgSend(v4, "didTerminate:", v9);

}

void sub_10006A794(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  NSErrorUserInfoKey v28;
  id v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  void *v39;

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secureElementWrapper"));
    v27 = 0;
    v26 = sub_10022C46C(v25, &v27);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v26);
    v22 = v27;

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_15;
  }
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, ClassName, Name, 63, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v31 = v15;
    v32 = 2082;
    v33 = v16;
    v34 = 2082;
    v35 = v17;
    v36 = 1024;
    v37 = 63;
    v38 = 2114;
    v39 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 40);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v28 = NSLocalizedDescriptionKey;
    v22 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v29 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1));
    v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
    (*(void (**)(uint64_t, _QWORD, id))(v19 + 16))(v19, 0, v24);

LABEL_15:
  }
}

void sub_10006AB80(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  _BOOL4 v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  void *v35;
  uint64_t v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  NFECommercePaymentResponse *v42;
  void *v43;
  id v44;
  void *v45;
  Class v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  NSErrorUserInfoKey v52;
  void *v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  void *v63;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 64));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v10, ClassName, Name, 76, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 64));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    v55 = v15;
    v56 = 2082;
    v57 = v16;
    v58 = 2082;
    v59 = v17;
    v60 = 1024;
    v61 = 76;
    v62 = 2114;
    v63 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v42 = (NFECommercePaymentResponse *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secureElementWrapper"));
    v43 = *(void **)(a1 + 40);
    v44 = objc_msgSend(*(id *)(a1 + 32), "uid");
    v45 = *(void **)(a1 + 48);
    v51 = 0;
    v46 = sub_1001DE304(v42, v43, (uint64_t)v44, v45, (uint64_t *)&v51);
    v38 = (void *)objc_claimAutoreleasedReturnValue(v46);
    v47 = v51;

    if (v38)
    {
      v48 = 0;
      v49 = v38;
    }
    else
    {
      v48 = v47;
      v49 = 0;
    }
    (*(void (**)(_QWORD, id, void *))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "appletIdentifier"));

    sub_1002288CC((uint64_t)NFHciTransactionEventCALogger, v38, v50);
    sub_10020BD44((uint64_t)NFDailyStatisticsCALogger, CFSTR("totalAuthECommerce"));
    +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306100);
    goto LABEL_24;
  }
  v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v20 = NFLogGetLogger(v19);
  if (v20)
  {
    v21 = (void (*)(uint64_t, const char *, ...))v20;
    v22 = object_getClass(*(id *)(a1 + 32));
    v23 = class_isMetaClass(v22);
    v24 = object_getClassName(*(id *)(a1 + 32));
    v25 = sel_getName(*(SEL *)(a1 + 64));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v27 = 45;
    if (v23)
      v27 = 43;
    v21(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v27, v24, v25, 78, v26);

  }
  v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v29 = NFSharedLogGetLogger(v28);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    v31 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v31))
      v32 = 43;
    else
      v32 = 45;
    v33 = object_getClassName(*(id *)(a1 + 32));
    v34 = sel_getName(*(SEL *)(a1 + 64));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v55 = v32;
    v56 = 2082;
    v57 = v33;
    v58 = 2082;
    v59 = v34;
    v60 = 1024;
    v61 = 78;
    v62 = 2114;
    v63 = v35;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v36 = *(_QWORD *)(a1 + 56);
  if (v36)
  {
    v37 = objc_alloc((Class)NSError);
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v52 = NSLocalizedDescriptionKey;
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v53 = v39;
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1));
    v41 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 54, v40);
    (*(void (**)(uint64_t, _QWORD, id))(v36 + 16))(v36, 0, v41);

LABEL_24:
  }
}

void sub_10006B118(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  _BOOL4 v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  void *v35;
  uint64_t v36;
  id v37;
  objc_class *v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  NSMutableData *v45;
  NSMutableData v46;
  _QWORD v47[4];
  _QWORD v48[4];
  uint8_t buf[4];
  int v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  void *v58;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v10, ClassName, Name, 104, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 56));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    v50 = v15;
    v51 = 2082;
    v52 = v16;
    v53 = 2082;
    v54 = v17;
    v55 = 1024;
    v56 = 104;
    v57 = 2114;
    v58 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v44 = *(void **)(a1 + 40);
    v46.super.super.isa = 0;
    v45 = sub_1001C43B8((uint64_t)NFECommercePaymentRequestEncoder, v44, 0, &v46);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v45);
    v38 = v46.super.super.isa;
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    goto LABEL_24;
  }
  v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v20 = NFLogGetLogger(v19);
  if (v20)
  {
    v21 = (void (*)(uint64_t, const char *, ...))v20;
    v22 = object_getClass(*(id *)(a1 + 32));
    v23 = class_isMetaClass(v22);
    v24 = object_getClassName(*(id *)(a1 + 32));
    v25 = sel_getName(*(SEL *)(a1 + 56));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v27 = 45;
    if (v23)
      v27 = 43;
    v21(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v27, v24, v25, 106, v26);

  }
  v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v29 = NFSharedLogGetLogger(v28);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    v31 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v31))
      v32 = 43;
    else
      v32 = 45;
    v33 = object_getClassName(*(id *)(a1 + 32));
    v34 = sel_getName(*(SEL *)(a1 + 56));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v50 = v32;
    v51 = 2082;
    v52 = v33;
    v53 = 2082;
    v54 = v34;
    v55 = 1024;
    v56 = 106;
    v57 = 2114;
    v58 = v35;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v36 = *(_QWORD *)(a1 + 48);
  if (v36)
  {
    v37 = objc_alloc((Class)NSError);
    v38 = (objc_class *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v47[0] = NSLocalizedDescriptionKey;
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v48[0] = v39;
    v48[1] = &off_1002FE028;
    v47[1] = CFSTR("Line");
    v47[2] = CFSTR("Method");
    v40 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
    v48[2] = v40;
    v47[3] = NSDebugDescriptionErrorKey;
    v41 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 106);
    v48[3] = v41;
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v48, v47, 4));
    v43 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 54, v42);
    (*(void (**)(uint64_t, id))(v36 + 16))(v36, v43);

LABEL_24:
  }
}

void sub_10006B704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[3];
  _QWORD v13[3];

  objc_opt_self(a1);
  v12[0] = CFSTR("status");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3));
  v13[0] = v7;
  v12[1] = CFSTR("stackLoadTime");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
  v13[1] = v8;
  v12[2] = CFSTR("nfcControllerType");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a4));
  v13[2] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 3));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  objc_msgSend(v11, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.stackLoadEvent"), v10);

}

void sub_10006B830(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_1001CCA9C((uint64_t)NFSecureElementManagerSessionInterface);
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "setInterface:forSelector:argumentIndex:ofReply:", v5, "queueSecureElementManagerSession:sessionAttribute:completion:", 0, 1);

}

void sub_10006B89C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_10006C544((uint64_t)NFSeshatSessionInterface);
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "setInterface:forSelector:argumentIndex:ofReply:", v5, "queueSeshatSession:sessionAttribute:completion:", 0, 1);

}

void sub_10006B908(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_1000584B8((uint64_t)NFReaderSessionInternalInterface);
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "setInterface:forSelector:argumentIndex:ofReply:", v5, "queueReaderSessionInternal:sessionAttribute:completion:", 0, 1);

}

void sub_10006B974(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_1000D60B8((uint64_t)NFContactlessPaymentSessionInterface);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "setInterface:forSelector:argumentIndex:ofReply:", v5, "queueContactlessPaymentSession:sessionAttribute:completion:", 0, 1);

  v6 = sub_1000D60B8((uint64_t)NFContactlessPaymentSessionInterface);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(v3, "setInterface:forSelector:argumentIndex:ofReply:", v7, "queueLoyaltyAndPaymentSession:sessionAttribute:completion:", 0, 1);

  v8 = sub_1000D60B8((uint64_t)NFContactlessPaymentSessionInterface);
  v9 = (id)objc_claimAutoreleasedReturnValue(v8);
  objc_msgSend(v3, "setInterface:forSelector:argumentIndex:ofReply:", v9, "queueUnifiedAccessSession:sessionAttribute:completion:", 0, 1);

}

void sub_10006BA48(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFSecureTransactionServicesHandoverSessionInterface interface](NFSecureTransactionServicesHandoverSessionInterface, "interface"));
  objc_msgSend(v3, "setInterface:forSelector:argumentIndex:ofReply:", v4, "queueSecureTransactionServicesSession:sessionAttribute:completion:", 0, 1);

  v5 = (id)objc_claimAutoreleasedReturnValue(+[NFSecureTransactionServicesHandoverHybridSessionInterface interface](NFSecureTransactionServicesHandoverHybridSessionInterface, "interface"));
  objc_msgSend(v3, "setInterface:forSelector:argumentIndex:ofReply:", v5, "queueSecureTransactionServicesHybridSession:sessionAttribute:completion:", 0, 1);

}

id sub_10006BAE8()
{
  objc_opt_self();
  if (qword_10032A8B0 != -1)
    dispatch_once(&qword_10032A8B0, &stru_1002E66B8);
  return (id)qword_10032A8A8;
}

void sub_10006BB2C(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  id v85;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFHardwareManagerInterface));
  v2 = (void *)qword_10032A8A8;
  qword_10032A8A8 = v1;

  v3 = objc_alloc((Class)NSSet);
  v4 = objc_opt_class(NSString);
  v5 = objc_opt_class(NSMutableString);
  v6 = objc_opt_class(NSNumber);
  v7 = objc_opt_class(NSData);
  v8 = objc_opt_class(NSMutableData);
  v9 = objc_opt_class(NSArray);
  v10 = objc_opt_class(NSMutableArray);
  v11 = objc_opt_class(NSDictionary);
  v85 = objc_msgSend(v3, "initWithObjects:", v4, v5, v6, v7, v8, v9, v10, v11, objc_opt_class(NSMutableDictionary), 0);
  objc_msgSend((id)qword_10032A8A8, "setClasses:forSelector:argumentIndex:ofReply:", v85, "checkExpressPassCompatibilityDeprecated:callback:", 0, 0);
  objc_msgSend((id)qword_10032A8A8, "setClasses:forSelector:argumentIndex:ofReply:", v85, "checkExpressPassCompatibility:callback:", 0, 0);
  v12 = (void *)qword_10032A8A8;
  v13 = objc_alloc((Class)NSSet);
  v14 = objc_opt_class(NSArray);
  v15 = objc_msgSend(v13, "initWithObjects:", v14, objc_opt_class(NFHardwareSecureElementInfo), 0);
  objc_msgSend(v12, "setClasses:forSelector:argumentIndex:ofReply:", v15, "secureElementsWithCompletion:", 0, 1);

  v16 = sub_10006C4CC();
  v84 = (void *)objc_claimAutoreleasedReturnValue(v16);
  objc_msgSend((id)qword_10032A8A8, "setInterface:forSelector:argumentIndex:ofReply:", v84, "registerForCallbacks:", 0, 0);
  objc_msgSend((id)qword_10032A8A8, "setInterface:forSelector:argumentIndex:ofReply:", v84, "unregisterForCallbacks:", 0, 0);
  v17 = (void *)qword_10032A8A8;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFSecureElementManagerSessionCallbacks));
  objc_msgSend(v17, "setInterface:forSelector:argumentIndex:ofReply:", v18, "queueSecureElementManagerSession:sessionAttribute:completion:", 0, 0);

  v19 = sub_1000D6594((uint64_t)NFContactlessPaymentSessionCallbacks);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  objc_msgSend((id)qword_10032A8A8, "setInterface:forSelector:argumentIndex:ofReply:", v20, "queueContactlessPaymentSession:sessionAttribute:completion:", 0, 0);
  v82 = (void *)v20;
  objc_msgSend((id)qword_10032A8A8, "setInterface:forSelector:argumentIndex:ofReply:", v20, "queueLoyaltyAndPaymentSession:sessionAttribute:completion:", 0, 0);
  v83 = (void *)objc_claimAutoreleasedReturnValue(+[NFContactlessSessionCallbacks interface](NFContactlessSessionCallbacks, "interface"));
  objc_msgSend((id)qword_10032A8A8, "setInterface:forSelector:argumentIndex:ofReply:", v83);
  v21 = (void *)qword_10032A8A8;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFECommercePaymentSessionCallbacks));
  objc_msgSend(v21, "setInterface:forSelector:argumentIndex:ofReply:", v22);

  v23 = (void *)qword_10032A8A8;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NFFieldDetectSessionInterfaceCallbacks interface](NFFieldDetectSessionInterfaceCallbacks, "interface"));
  objc_msgSend(v23, "setInterface:forSelector:argumentIndex:ofReply:", v24);

  v25 = (void *)qword_10032A8A8;
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NFReaderSessionCallbacks interface](NFReaderSessionCallbacks, "interface"));
  objc_msgSend(v25, "setInterface:forSelector:argumentIndex:ofReply:", v26, "queueReaderSessionInternal:sessionAttribute:completion:", 0, 0);

  v27 = (void *)qword_10032A8A8;
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFSeshatSessionCallbacks));
  objc_msgSend(v27, "setInterface:forSelector:argumentIndex:ofReply:", v28, "queueSeshatSession:sessionAttribute:completion:", 0, 0);

  v29 = (void *)qword_10032A8A8;
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFPeerPaymentSessionCallbacks));
  objc_msgSend(v29, "setInterface:forSelector:argumentIndex:ofReply:", v30);

  v31 = (void *)qword_10032A8A8;
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFTrustSessionCallbacks));
  objc_msgSend(v31, "setInterface:forSelector:argumentIndex:ofReply:", v32);

  v33 = (void *)qword_10032A8A8;
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFNdefTagSessionCallbacks));
  objc_msgSend(v33, "setInterface:forSelector:argumentIndex:ofReply:", v34, "queueNdefTagSession:sessionAttribute:data:completion:", 0, 0);

  v35 = (void *)qword_10032A8A8;
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NFHostEmulationSessionCallbacks interface](NFHostEmulationSessionCallbacks, "interface"));
  objc_msgSend(v35, "setInterface:forSelector:argumentIndex:ofReply:", v36, "queueHostEmulationSession:sessionAttribute:completion:", 0, 0);

  v37 = (void *)qword_10032A8A8;
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFSecureElementAndHostCardEmulationSessionCallbacks));
  objc_msgSend(v37, "setInterface:forSelector:argumentIndex:ofReply:", v38, "queueSecureElementAndHostEmulationSession:sessionAttribute:completion:", 0, 0);

  v39 = (void *)qword_10032A8A8;
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NFSecureElementReaderSessionCallbacks interface](NFSecureElementReaderSessionCallbacks, "interface"));
  objc_msgSend(v39, "setInterface:forSelector:argumentIndex:ofReply:", v40, "queueSecureElementReaderSession:sessionAttribute:completion:", 0, 0);

  v41 = (void *)qword_10032A8A8;
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NFSecureTransactionServicesHandoverSessionCallbacksInterface interface](NFSecureTransactionServicesHandoverSessionCallbacksInterface, "interface"));
  objc_msgSend(v41, "setInterface:forSelector:argumentIndex:ofReply:", v42, "queueSecureTransactionServicesSession:sessionAttribute:completion:", 0, 0);

  v43 = (void *)qword_10032A8A8;
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NFSecureTransactionServicesHandoverHybridSessionCallbacksInterface interface](NFSecureTransactionServicesHandoverHybridSessionCallbacksInterface, "interface"));
  objc_msgSend(v43, "setInterface:forSelector:argumentIndex:ofReply:", v44, "queueSecureTransactionServicesHybridSession:sessionAttribute:completion:", 0, 0);

  objc_msgSend((id)qword_10032A8A8, "setInterface:forSelector:argumentIndex:ofReply:", v20, "queueUnifiedAccessSession:sessionAttribute:completion:", 0, 0);
  v45 = (void *)qword_10032A8A8;
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFSecureElementLoggingSessionCallbacks));
  objc_msgSend(v45, "setInterface:forSelector:argumentIndex:ofReply:", v46, "queueSecureElementLoggingSession:sessionAttribute:completion:", 0, 0);

  v47 = (void *)qword_10032A8A8;
  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFLPEMConfigSessionCallbacks));
  objc_msgSend(v47, "setInterface:forSelector:argumentIndex:ofReply:", v48, "queueLPEMConfigSession:sessionAttribute:completion:", 0, 0);

  v49 = (void *)qword_10032A8A8;
  v50 = (void *)objc_claimAutoreleasedReturnValue(+[NFECommercePaymentSessionInterface interface](NFECommercePaymentSessionInterface, "interface"));
  objc_msgSend(v49, "setInterface:forSelector:argumentIndex:ofReply:", v50, "queueECommercePaymentSession:sessionAttribute:completion:", 0, 1);

  v51 = (void *)qword_10032A8A8;
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NFContactlessSessionInterface interface](NFContactlessSessionInterface, "interface"));
  objc_msgSend(v51, "setInterface:forSelector:argumentIndex:ofReply:", v52, "queueContactlessSession:sessionAttribute:completion:", 0, 1);

  v53 = (void *)qword_10032A8A8;
  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFFieldDetectSessionInterface));
  objc_msgSend(v53, "setInterface:forSelector:argumentIndex:ofReply:", v54, "queueFieldDetectSession:sessionAttribute:completion:", 0, 1);

  v55 = (void *)qword_10032A8A8;
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFPeerPaymentSessionInterface));
  objc_msgSend(v55, "setInterface:forSelector:argumentIndex:ofReply:", v56, "queuePeerPaymentSession:sessionAttribute:completion:", 0, 1);

  v57 = (void *)qword_10032A8A8;
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NFTrustSessionInterface interface](NFTrustSessionInterface, "interface"));
  objc_msgSend(v57, "setInterface:forSelector:argumentIndex:ofReply:", v58, "queueTrustSession:sessionAttribute:completion:", 0, 1);

  v59 = (void *)qword_10032A8A8;
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFNdefTagSessionInterface));
  objc_msgSend(v59, "setInterface:forSelector:argumentIndex:ofReply:", v60, "queueNdefTagSession:sessionAttribute:data:completion:", 0, 1);

  v61 = (void *)qword_10032A8A8;
  v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFHostEmulationSessionInterface));
  objc_msgSend(v61, "setInterface:forSelector:argumentIndex:ofReply:", v62, "queueHostEmulationSession:sessionAttribute:completion:", 0, 1);

  v63 = (void *)qword_10032A8A8;
  v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFSecureElementAndHostCardEmulationSessionInterface));
  objc_msgSend(v63, "setInterface:forSelector:argumentIndex:ofReply:", v64, "queueSecureElementAndHostEmulationSession:sessionAttribute:completion:", 0, 1);

  v65 = (void *)qword_10032A8A8;
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NFSecureElementReaderSessionInterface interface](NFSecureElementReaderSessionInterface, "interface"));
  objc_msgSend(v65, "setInterface:forSelector:argumentIndex:ofReply:", v66, "queueSecureElementReaderSession:sessionAttribute:completion:", 0, 1);

  v67 = (void *)qword_10032A8A8;
  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFSecureElementLoggingSessionInterface));
  objc_msgSend(v67, "setInterface:forSelector:argumentIndex:ofReply:", v68, "queueSecureElementLoggingSession:sessionAttribute:completion:", 0, 1);

  v69 = (void *)qword_10032A8A8;
  v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFLPEMConfigSessionInterface));
  objc_msgSend(v69, "setInterface:forSelector:argumentIndex:ofReply:", v70, "queueLPEMConfigSession:sessionAttribute:completion:", 0, 1);

  v71 = (void *)qword_10032A8A8;
  v72 = objc_alloc((Class)NSSet);
  v73 = objc_opt_class(NSArray);
  v74 = objc_opt_class(NSDictionary);
  v75 = objc_opt_class(NSString);
  v76 = objc_opt_class(NSNumber);
  v77 = objc_opt_class(NSSet);
  v78 = objc_opt_class(NSDate);
  v79 = objc_opt_class(NSData);
  v80 = objc_opt_class(NSNull);
  v81 = objc_msgSend(v72, "initWithObjects:", v73, v74, v75, v76, v77, v78, v79, v80, objc_opt_class(NFAssertionInternal), 0);
  objc_msgSend(v71, "setClasses:forSelector:argumentIndex:ofReply:", v81, "stateInfoWithCompletion:", 0, 1);

}

id sub_10006C4CC()
{
  objc_opt_self();
  if (qword_10032A8C0 != -1)
    dispatch_once(&qword_10032A8C0, &stru_1002E66D8);
  return (id)qword_10032A8B8;
}

void sub_10006C510(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFHardwareManagerCallbacks));
  v2 = (void *)qword_10032A8B8;
  qword_10032A8B8 = v1;

}

id sub_10006C544(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  objc_opt_self(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFSeshatSessionInterface));
  v2 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NSData), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v2, "allocateSlot:authorizingUser:authorizingUserToken:completion:", 0, 0);

  v3 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NSData), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v3, "derive:userHash:completion:", 0, 0);

  v4 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NSData), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v4, "resetCounter:userToken:completion:", 0, 0);

  v5 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NSData), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v5, "authorizeUpdate:slotIndex:userToken:completion:", 0, 0);

  v6 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NSData), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v6, "allocateSlot:authorizingUser:authorizingUserToken:completion:", 0, 1);

  v7 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NSData), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v7, "derive:userHash:completion:", 0, 1);

  v8 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NSData), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v8, "getDataWithCompletion:", 0, 1);

  return v1;
}

void sub_10006C798(id a1)
{
  NSMutableDictionary *v1;
  void *v2;

  v1 = objc_opt_new(NSMutableDictionary);
  v2 = (void *)qword_10032A8C8;
  qword_10032A8C8 = (uint64_t)v1;

  objc_msgSend((id)qword_10032A8C8, "setObject:forKeyedSubscript:", &off_100306128, &off_1002FE0D0);
  objc_msgSend((id)qword_10032A8C8, "setObject:forKeyedSubscript:", &off_100306150, &off_1002FE118);
  objc_msgSend((id)qword_10032A8C8, "setObject:forKeyedSubscript:", &off_100306178, &off_1002FE160);
  objc_msgSend((id)qword_10032A8C8, "setObject:forKeyedSubscript:", &off_1003061A0, &off_1002FE190);
}

NSMutableData *sub_10006C828(void *a1, __int16 a2, __int16 a3)
{
  NSMutableData *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  char *v9;
  id v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  void *specific;
  uint64_t Logger;
  void (*v19)(uint64_t, const char *, ...);
  objc_class *Class;
  const char *Name;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  objc_class *v26;
  int v27;
  const char *v28;
  const char *v29;
  unsigned int v30;
  char *v31;
  id v32;
  NSMutableData *v33;
  uint64_t v35;
  _BOOL4 isMetaClass;
  const char *ClassName;
  __int16 v38;
  char v39;
  __int16 v40;
  __int16 v41;
  uint8_t buf[4];
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  unsigned int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;

  v39 = 4;
  v38 = -505;
  v40 = a2;
  v41 = a3;
  v4 = objc_opt_new(NSMutableData);
  v5 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &v38, 7);
  v6 = sub_10006CB28(a1, (uint64_t)v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "response"));
  v9 = (char *)objc_msgSend(v8, "length");
  if (objc_msgSend(v7, "status") != 36864 || (unint64_t)v9 < 6)
    goto LABEL_26;
  v11 = objc_retainAutorelease(v8);
  v12 = objc_msgSend(v11, "bytes");
  v13 = v12[3];
  v14 = v12[4];
  v15 = !v12[3] && (_DWORD)v14 == 0;
  if (!v15 || (unint64_t)(v9 - 9) > 0xFFFFFFFFFFFFFFFBLL)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v19 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("felicaGetEventDataCommand:block:");
      v35 = objc_msgSend(v7, "status");
      v22 = 45;
      if (isMetaClass)
        v22 = 43;
      v19(3, "%c[%{public}s %{public}s]:%i Response Status = 0x%04x, StatusOne = 0x%02x, StatusTwo = 0x%02x", v22, ClassName, Name, 252, v35, v13, v14);
    }
    v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v24 = NFSharedLogGetLogger(v23);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = object_getClass(a1);
      if (class_isMetaClass(v26))
        v27 = 43;
      else
        v27 = 45;
      v28 = object_getClassName(a1);
      v29 = sel_getName("felicaGetEventDataCommand:block:");
      v30 = objc_msgSend(v7, "status");
      *(_DWORD *)buf = 67110658;
      v43 = v27;
      v44 = 2082;
      v45 = v28;
      v46 = 2082;
      v47 = v29;
      v48 = 1024;
      v49 = 252;
      v50 = 1024;
      v51 = v30;
      v52 = 1024;
      v53 = v13;
      v54 = 1024;
      v55 = v14;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Response Status = 0x%04x, StatusOne = 0x%02x, StatusTwo = 0x%02x", buf, 0x34u);
    }

  }
  else
  {
    v31 = v12 + 9;
    v32 = objc_retainAutorelease(v11);
    -[NSMutableData appendBytes:length:](v4, "appendBytes:length:", v31, (char *)objc_msgSend(v32, "length") - (v31 - objc_msgSend(v32, "bytes")));
  }
  if (v13 | v14)
    v33 = 0;
  else
LABEL_26:
    v33 = v4;

  return v33;
}

id sub_10006CB28(void *a1, uint64_t a2)
{
  return (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 194, 0, 0, a2, 0));
}

NSObject *sub_10006CB58(NSObject *a1, void *a2)
{
  id v3;
  NSMutableData *v4;
  NSMutableData *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  id v12;
  NSMutableData *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSMutableData *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  unsigned __int16 v28;
  __int16 v29;
  unsigned __int16 i;
  NSMutableData *v31;
  void *v32;
  void *specific;
  uint64_t Logger;
  void (*v35)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  objc_class *v44;
  int v45;
  const char *v46;
  const char *v47;
  NSObject *v48;
  void *v49;
  uint64_t v50;
  void (*v51)(uint64_t, const char *, ...);
  objc_class *v52;
  _BOOL4 v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  objc_class *v58;
  int v59;
  void *v61;
  uint64_t v62;
  void (*v63)(uint64_t, const char *, ...);
  objc_class *v64;
  _BOOL4 v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  objc_class *v69;
  int v70;
  void *v71;
  unsigned __int16 v72;
  NSMutableData *v73;
  id v74;
  id v75;
  void *v76;
  void *v77;
  void *v78;
  id v79;
  NSMutableData *v80;
  void *v81;
  uint64_t v82;
  void (*v83)(uint64_t, const char *, ...);
  objc_class *v84;
  _BOOL4 v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  NSObject *v90;
  objc_class *v91;
  int v92;
  const char *v93;
  const char *v94;
  id v95;
  char *v96;
  unsigned int j;
  id v98;
  void *v99;
  void *v100;
  NSObject *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  void (*v105)(uint64_t, const char *, ...);
  objc_class *v106;
  _BOOL4 v107;
  const char *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  NSObject *v112;
  objc_class *v113;
  int v114;
  const char *v115;
  const char *v116;
  const char *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  void (*v121)(uint64_t, const char *, ...);
  objc_class *v122;
  _BOOL4 v123;
  const char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  objc_class *v128;
  int v129;
  const char *v130;
  const char *v131;
  NSMutableArray *v132;
  void *v133;
  NSObject *v134;
  _BYTE *v135;
  void *v136;
  uint64_t v137;
  void (*v138)(uint64_t, const char *, ...);
  objc_class *v139;
  _BOOL4 v140;
  const char *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  objc_class *v145;
  int v146;
  const char *v147;
  const char *v148;
  _BYTE *v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  void (*v153)(uint64_t, const char *, ...);
  objc_class *v154;
  _BOOL4 v155;
  const char *v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  objc_class *v160;
  int v161;
  const char *v162;
  const char *v163;
  void *v164;
  unsigned int v165;
  _BYTE *v166;
  id v167;
  const char *v168;
  const char *v169;
  const char *v170;
  const char *v171;
  const char *v172;
  const char *v173;
  const char *v174;
  const char *v175;
  NSObject *v176;
  NSObject *v177;
  id v178;
  id v179;
  id v180;
  NSMutableData *v181;
  NSMutableData *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  char v187;
  unsigned __int8 v188;
  uint8_t buf[4];
  int v190;
  __int16 v191;
  const char *v192;
  __int16 v193;
  const char *v194;
  __int16 v195;
  int v196;
  __int16 v197;
  NSObject *v198;

  v3 = a2;
  if (a1)
  {
    if ((-[NSObject selectApplet:error:](a1, "selectApplet:error:", v3, 0) & 1) == 0)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v35 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("getFelicaAppletState:");
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifierAsData"));
        v41 = 45;
        if (isMetaClass)
          v41 = 43;
        v35(3, "%c[%{public}s %{public}s]:%i Failed to select applet: %{public}@", v41, ClassName, Name, 267, v40);

      }
      v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v43 = NFSharedLogGetLogger(v42);
      v5 = (NSMutableData *)objc_claimAutoreleasedReturnValue(v43);
      if (os_log_type_enabled(&v5->super.super, OS_LOG_TYPE_ERROR))
      {
        v44 = object_getClass(a1);
        if (class_isMetaClass(v44))
          v45 = 43;
        else
          v45 = 45;
        v46 = object_getClassName(a1);
        v47 = sel_getName("getFelicaAppletState:");
        v48 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifierAsData"));
        *(_DWORD *)buf = 67110146;
        v190 = v45;
        v191 = 2082;
        v192 = v46;
        v193 = 2082;
        v194 = v47;
        v195 = 1024;
        v196 = 267;
        v197 = 2114;
        v198 = v48;
        _os_log_impl((void *)&_mh_execute_header, &v5->super.super, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select applet: %{public}@", buf, 0x2Cu);

      }
      a1 = 0;
      goto LABEL_49;
    }
    v4 = sub_10006C828(a1, 0, 0);
    v5 = (NSMutableData *)objc_claimAutoreleasedReturnValue(v4);
    if (!v5
      || (v6 = (void *)objc_claimAutoreleasedReturnValue(+[NFFelicaStateEvent decodeEvent:](NFFelicaStateEvent, "decodeEvent:", v5))) == 0
      || (v7 = v6,
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("NFServiceProviderID"))),
          v7,
          !v8))
    {
      v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v50 = NFLogGetLogger(v49);
      if (v50)
      {
        v51 = (void (*)(uint64_t, const char *, ...))v50;
        v52 = object_getClass(a1);
        v53 = class_isMetaClass(v52);
        v54 = object_getClassName(a1);
        v169 = sel_getName("getFelicaAppletState:");
        v55 = 45;
        if (v53)
          v55 = 43;
        v51(3, "%c[%{public}s %{public}s]:%i Failed to query applet service provider", v55, v54, v169, 285);
      }
      v56 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v57 = NFSharedLogGetLogger(v56);
      v9 = objc_claimAutoreleasedReturnValue(v57);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v58 = object_getClass(a1);
        if (class_isMetaClass(v58))
          v59 = 43;
        else
          v59 = 45;
        *(_DWORD *)buf = 67109890;
        v190 = v59;
        v191 = 2082;
        v192 = object_getClassName(a1);
        v193 = 2082;
        v194 = sel_getName("getFelicaAppletState:");
        v195 = 1024;
        v196 = 285;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query applet service provider", buf, 0x22u);
      }
      a1 = 0;
      goto LABEL_48;
    }
    v9 = v8;
    v181 = v5;
    if (qword_10032A8D0 != -1)
      dispatch_once(&qword_10032A8D0, &stru_1002E66F8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10032A8C8, "objectForKeyedSubscript:", v9));
    if (v10)
    {
      v179 = v3;
      v5 = objc_opt_new(NSMutableData);
      v183 = 0u;
      v184 = 0u;
      v185 = 0u;
      v186 = 0u;
      v11 = objc_msgSend(&off_100305D70, "countByEnumeratingWithState:objects:count:", &v183, buf, 16);
      if (v11)
      {
        v12 = v11;
        v13 = v5;
        v176 = v9;
        v14 = 0;
        v15 = *(_QWORD *)v184;
        do
        {
          v16 = 0;
          v17 = v14;
          do
          {
            if (*(_QWORD *)v184 != v15)
              objc_enumerationMutation(&off_100305D70);
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v183 + 1) + 8 * (_QWORD)v16)));

            if (v14)
            {
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", 0));
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", 1));
              v20 = sub_10006C828(a1, (__int16)objc_msgSend(v18, "unsignedShortValue"), (__int16)objc_msgSend(v19, "unsignedShortValue"));
              v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
              if (v21)
                -[NSMutableData appendData:](v13, "appendData:", v21);

            }
            v16 = (char *)v16 + 1;
            v17 = v14;
          }
          while (v12 != v16);
          v12 = objc_msgSend(&off_100305D70, "countByEnumeratingWithState:objects:count:", &v183, buf, 16);
        }
        while (v12);

        v9 = v176;
        v5 = v13;
      }
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("NFHistoryCount")));
      v23 = objc_msgSend(v22, "unsignedShortValue");

      v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("NFHistoryRecords")));
      v25 = v24;
      if (v24)
      {
        v26 = v9;
        v27 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectAtIndexedSubscript:](v24, "objectAtIndexedSubscript:", 0));
        v28 = (unsigned __int16)objc_msgSend(v27, "unsignedShortValue");
        if (v23)
        {
          v29 = v28;
          for (i = 0; i < v23; ++i)
          {
            v31 = sub_10006C828(a1, v29, i);
            v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
            if (v32)
              -[NSMutableData appendData:](v5, "appendData:", v32);

          }
        }

        v3 = v179;
        v9 = v26;
      }
      else
      {
        v3 = v179;
      }
    }
    else
    {
      v61 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v62 = NFLogGetLogger(v61);
      if (v62)
      {
        v63 = (void (*)(uint64_t, const char *, ...))v62;
        v64 = object_getClass(a1);
        v65 = class_isMetaClass(v64);
        v168 = object_getClassName(a1);
        v170 = sel_getName("_getAppletStateForProvider:");
        v66 = 45;
        if (v65)
          v66 = 43;
        v63(3, "%c[%{public}s %{public}s]:%i Unknown service provider %{public}@", v66, v168, v170, 60, v9);
      }
      v67 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v68 = NFSharedLogGetLogger(v67);
      v25 = objc_claimAutoreleasedReturnValue(v68);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v69 = object_getClass(a1);
        if (class_isMetaClass(v69))
          v70 = 43;
        else
          v70 = 45;
        *(_DWORD *)buf = 67110146;
        v190 = v70;
        v191 = 2082;
        v192 = object_getClassName(a1);
        v193 = 2082;
        v194 = sel_getName("_getAppletStateForProvider:");
        v195 = 1024;
        v196 = 60;
        v197 = 2114;
        v198 = v9;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown service provider %{public}@", buf, 0x2Cu);
      }
      v5 = 0;
    }

    if (!v5 || !-[NSMutableData length](v5, "length"))
    {
      v80 = v5;
      v81 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v82 = NFLogGetLogger(v81);
      if (v82)
      {
        v83 = (void (*)(uint64_t, const char *, ...))v82;
        v84 = object_getClass(a1);
        v85 = class_isMetaClass(v84);
        v86 = object_getClassName(a1);
        v171 = sel_getName("getFelicaAppletState:");
        v87 = 45;
        if (v85)
          v87 = 43;
        v83(3, "%c[%{public}s %{public}s]:%i Failed to get applet state", v87, v86, v171, 295);
      }
      v88 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v89 = NFSharedLogGetLogger(v88);
      v90 = objc_claimAutoreleasedReturnValue(v89);
      if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      {
        v91 = object_getClass(a1);
        if (class_isMetaClass(v91))
          v92 = 43;
        else
          v92 = 45;
        v93 = object_getClassName(a1);
        v94 = sel_getName("getFelicaAppletState:");
        *(_DWORD *)buf = 67109890;
        v190 = v92;
        v191 = 2082;
        v192 = v93;
        v193 = 2082;
        v194 = v94;
        v195 = 1024;
        v196 = 295;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get applet state", buf, 0x22u);
      }

      a1 = 0;
      v5 = v80;
      goto LABEL_48;
    }
    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NFFelicaStateEvent decodeEvent:](NFFelicaStateEvent, "decodeEvent:", v5));
    if ((-[NSObject isEqualToNumber:](v9, "isEqualToNumber:", &off_1002FE0D0) & 1) == 0)
    {
LABEL_134:
      a1 = v71;

      v9 = a1;
LABEL_48:

LABEL_49:
      goto LABEL_50;
    }
    v180 = v3;
    v182 = v5;
    v177 = v9;
    v72 = (unsigned __int16)objc_msgSend(&off_1002FE088, "unsignedShortValue");
    v188 = 1;
    v73 = objc_opt_new(NSMutableData);
    v187 = 16;
    -[NSMutableData appendBytes:length:](v73, "appendBytes:length:", &v187, 1);
    v187 = 6;
    -[NSMutableData appendBytes:length:](v73, "appendBytes:length:", &v187, 1);
    v74 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100329108, 6);
    v75 = sub_10006CB28(a1, (uint64_t)v74);
    v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
    v77 = v76;
    if (v76)
    {
      v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "response"));
      if ((unint64_t)objc_msgSend(v78, "length") >= 0xA)
      {
        v95 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "response")));
        v96 = (char *)objc_msgSend(v95, "bytes");

        v79 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v96 + 2, 8);
      }
      else
      {
        v79 = 0;
      }

    }
    else
    {
      v79 = 0;
    }

    v178 = v79;
    -[NSMutableData appendData:](v73, "appendData:", v79);
    v187 = 1;
    -[NSMutableData appendBytes:length:](v73, "appendBytes:length:", &v187, 1);
    LOWORD(v183) = v72;
    -[NSMutableData appendBytes:length:](v73, "appendBytes:length:", &v183, 2);
    -[NSMutableData appendBytes:length:](v73, "appendBytes:length:", &v188, 1);
    if (v188)
    {
      for (j = 0; j < v188; ++j)
      {
        v187 = 0x80;
        -[NSMutableData appendBytes:length:](v73, "appendBytes:length:", &v187, 1);
        v187 = j;
        -[NSMutableData appendBytes:length:](v73, "appendBytes:length:", &v187, 1);
      }
    }
    v98 = sub_10006CB28(a1, (uint64_t)v73);
    v99 = (void *)objc_claimAutoreleasedReturnValue(v98);
    v100 = v99;
    if (v99)
    {
      v101 = objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "response"));
      if ((unint64_t)-[NSObject length](v101, "length") <= 0xD)
      {
        v102 = v71;
        v103 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v104 = NFLogGetLogger(v103);
        if (v104)
        {
          v105 = (void (*)(uint64_t, const char *, ...))v104;
          v106 = object_getClass(a1);
          v107 = class_isMetaClass(v106);
          v108 = object_getClassName(a1);
          v172 = sel_getName("_readFromService:numBlocks:");
          v109 = 45;
          if (v107)
            v109 = 43;
          v105(3, "%c[%{public}s %{public}s]:%i response length too small", v109, v108, v172, 169);
        }
        v110 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v111 = NFSharedLogGetLogger(v110);
        v112 = objc_claimAutoreleasedReturnValue(v111);
        if (!os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
          goto LABEL_128;
        v113 = object_getClass(a1);
        if (class_isMetaClass(v113))
          v114 = 43;
        else
          v114 = 45;
        v115 = object_getClassName(a1);
        v116 = sel_getName("_readFromService:numBlocks:");
        *(_DWORD *)buf = 67109890;
        v190 = v114;
        v191 = 2082;
        v192 = v115;
        v193 = 2082;
        v194 = v116;
        v195 = 1024;
        v196 = 169;
        v117 = "%c[%{public}s %{public}s]:%i response length too small";
LABEL_127:
        _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_ERROR, v117, buf, 0x22u);
LABEL_128:
        v9 = v177;
        v133 = v178;
        v71 = v102;

        v132 = 0;
        goto LABEL_129;
      }
      v134 = objc_retainAutorelease(v101);
      v135 = -[NSObject bytes](v134, "bytes");
      if (v135[10])
      {
        v102 = v71;
        v136 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v137 = NFLogGetLogger(v136);
        if (v137)
        {
          v138 = (void (*)(uint64_t, const char *, ...))v137;
          v139 = object_getClass(a1);
          v140 = class_isMetaClass(v139);
          v141 = object_getClassName(a1);
          v174 = sel_getName("_readFromService:numBlocks:");
          v142 = 45;
          if (v140)
            v142 = 43;
          v138(3, "%c[%{public}s %{public}s]:%i failed to read blocks from service", v142, v141, v174, 182);
        }
        v143 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v144 = NFSharedLogGetLogger(v143);
        v112 = objc_claimAutoreleasedReturnValue(v144);
        if (!os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
          goto LABEL_128;
        v145 = object_getClass(a1);
        if (class_isMetaClass(v145))
          v146 = 43;
        else
          v146 = 45;
        v147 = object_getClassName(a1);
        v148 = sel_getName("_readFromService:numBlocks:");
        *(_DWORD *)buf = 67109890;
        v190 = v146;
        v191 = 2082;
        v192 = v147;
        v193 = 2082;
        v194 = v148;
        v195 = 1024;
        v196 = 182;
        v117 = "%c[%{public}s %{public}s]:%i failed to read blocks from service";
        goto LABEL_127;
      }
      v149 = v135;
      v188 = v135[12];
      v150 = (16 * v188) | 0xC;
      if (v150 > (unint64_t)-[NSObject length](v134, "length"))
      {
        v102 = v71;
        v151 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v152 = NFLogGetLogger(v151);
        if (v152)
        {
          v153 = (void (*)(uint64_t, const char *, ...))v152;
          v154 = object_getClass(a1);
          v155 = class_isMetaClass(v154);
          v156 = object_getClassName(a1);
          v175 = sel_getName("_readFromService:numBlocks:");
          v157 = 45;
          if (v155)
            v157 = 43;
          v153(3, "%c[%{public}s %{public}s]:%i Invalid data length", v157, v156, v175, 191);
        }
        v158 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v159 = NFSharedLogGetLogger(v158);
        v112 = objc_claimAutoreleasedReturnValue(v159);
        if (!os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
          goto LABEL_128;
        v160 = object_getClass(a1);
        if (class_isMetaClass(v160))
          v161 = 43;
        else
          v161 = 45;
        v162 = object_getClassName(a1);
        v163 = sel_getName("_readFromService:numBlocks:");
        *(_DWORD *)buf = 67109890;
        v190 = v161;
        v191 = 2082;
        v192 = v162;
        v193 = 2082;
        v194 = v163;
        v195 = 1024;
        v196 = 191;
        v117 = "%c[%{public}s %{public}s]:%i Invalid data length";
        goto LABEL_127;
      }
      v132 = objc_opt_new(NSMutableArray);
      if (!v188)
      {
        v101 = v134;
        v9 = v177;
        goto LABEL_106;
      }
      v118 = v71;
      v165 = 0;
      v166 = v149 + 13;
      v9 = v177;
      do
      {
        v167 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v166, 16);
        -[NSMutableArray addObject:](v132, "addObject:", v167);

        v166 += 16;
        ++v165;
      }
      while (v165 < v188);
      v101 = v134;
    }
    else
    {
      v118 = v71;
      v119 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v120 = NFLogGetLogger(v119);
      if (v120)
      {
        v121 = (void (*)(uint64_t, const char *, ...))v120;
        v122 = object_getClass(a1);
        v123 = class_isMetaClass(v122);
        v124 = object_getClassName(a1);
        v173 = sel_getName("_readFromService:numBlocks:");
        v125 = 45;
        if (v123)
          v125 = 43;
        v121(3, "%c[%{public}s %{public}s]:%i Failed to execute command", v125, v124, v173, 160);
      }
      v126 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v127 = NFSharedLogGetLogger(v126);
      v101 = objc_claimAutoreleasedReturnValue(v127);
      if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
      {
        v128 = object_getClass(a1);
        if (class_isMetaClass(v128))
          v129 = 43;
        else
          v129 = 45;
        v130 = object_getClassName(a1);
        v131 = sel_getName("_readFromService:numBlocks:");
        *(_DWORD *)buf = 67109890;
        v190 = v129;
        v191 = 2082;
        v192 = v130;
        v193 = 2082;
        v194 = v131;
        v195 = 1024;
        v196 = 160;
        _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to execute command", buf, 0x22u);
      }
      v132 = 0;
      v9 = v177;
    }
    v71 = v118;
LABEL_106:
    v133 = v178;
LABEL_129:

    v3 = v180;
    v5 = v182;
    if (v132)
    {
      v164 = (void *)objc_claimAutoreleasedReturnValue(+[NFFelicaStateEvent decodeProvider:service:blocks:](NFFelicaStateEvent, "decodeProvider:service:blocks:", v9, &off_1002FE088, v132));
      if (v164)
        objc_msgSend(v71, "addEntriesFromDictionary:", v164);

    }
    goto LABEL_134;
  }
LABEL_50:

  return a1;
}

void sub_10006E1E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *v25;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  objc_class *v34;
  int v35;
  const char *v36;
  const char *v37;
  void *v38;
  uint64_t v39;
  id v40;
  NSObject *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  void (*v49)(uint64_t, const char *, ...);
  objc_class *v50;
  _BOOL4 v51;
  const char *v52;
  const char *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  objc_class *v57;
  int v58;
  const char *v59;
  const char *v60;
  void *v61;
  NSErrorUserInfoKey v62;
  void *v63;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  void *v73;

  v2 = kdebug_trace(724566224, 0, 0, 0, 0);
  v3 = NFSharedSignpostLog(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_START_EMULATION", "", buf, 2u);
  }

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v7 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v13 = 45;
    if (isMetaClass)
      v13 = 43;
    v7(6, "%c[%{public}s %{public}s]:%i %{public}@", v13, ClassName, Name, 69, v12);

  }
  v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v15 = NFSharedLogGetLogger(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v17))
      v18 = 43;
    else
      v18 = 45;
    v19 = object_getClassName(*(id *)(a1 + 32));
    v20 = sel_getName(*(SEL *)(a1 + 48));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    v65 = v18;
    v66 = 2082;
    v67 = v19;
    v68 = 2082;
    v69 = v20;
    v70 = 1024;
    v71 = 69;
    v72 = 2114;
    v73 = v21;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig embeddedWiredModeWithHCE](NFRoutingConfig, "embeddedWiredModeWithHCE"));
    v47 = objc_msgSend(v45, "setRoutingConfig:", v46);

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v48 = NFLogGetLogger(2);
    if (v48)
    {
      v49 = (void (*)(uint64_t, const char *, ...))v48;
      v50 = object_getClass(*(id *)(a1 + 32));
      v51 = class_isMetaClass(v50);
      v52 = object_getClassName(*(id *)(a1 + 32));
      v53 = sel_getName(*(SEL *)(a1 + 48));
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
      v55 = 45;
      if (v51)
        v55 = 43;
      v49(6, "%c[%{public}s %{public}s]:%i NFC emulation mode activated: %@", v55, v52, v53, 76, v54);

    }
    v56 = NFSharedLogGetLogger(2);
    v41 = objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      v57 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v57))
        v58 = 43;
      else
        v58 = 45;
      v59 = object_getClassName(*(id *)(a1 + 32));
      v60 = sel_getName(*(SEL *)(a1 + 48));
      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
      *(_DWORD *)buf = 67110146;
      v65 = v58;
      v66 = 2082;
      v67 = v59;
      v68 = 2082;
      v69 = v60;
      v70 = 1024;
      v71 = 76;
      v72 = 2112;
      v73 = v61;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i NFC emulation mode activated: %@", buf, 0x2Cu);

    }
    goto LABEL_26;
  }
  v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v23 = NFLogGetLogger(v22);
  if (v23)
  {
    v24 = (void (*)(uint64_t, const char *, ...))v23;
    v25 = object_getClass(*(id *)(a1 + 32));
    v26 = class_isMetaClass(v25);
    v27 = object_getClassName(*(id *)(a1 + 32));
    v28 = sel_getName(*(SEL *)(a1 + 48));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v30 = 45;
    if (v26)
      v30 = 43;
    v24(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v30, v27, v28, 71, v29);

  }
  v31 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v32 = NFSharedLogGetLogger(v31);
  v33 = objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
  {
    v34 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v34))
      v35 = 43;
    else
      v35 = 45;
    v36 = object_getClassName(*(id *)(a1 + 32));
    v37 = sel_getName(*(SEL *)(a1 + 48));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v65 = v35;
    v66 = 2082;
    v67 = v36;
    v68 = 2082;
    v69 = v37;
    v70 = 1024;
    v71 = 71;
    v72 = 2114;
    v73 = v38;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v39 = *(_QWORD *)(a1 + 40);
  if (v39)
  {
    v40 = objc_alloc((Class)NSError);
    v41 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v62 = NSLocalizedDescriptionKey;
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v63 = v42;
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1));
    v44 = objc_msgSend(v40, "initWithDomain:code:userInfo:", v41, 54, v43);
    (*(void (**)(uint64_t, id))(v39 + 16))(v39, v44);

LABEL_26:
  }
}

void sub_10006E88C(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  _BOOL4 v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  void *v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  void (*v46)(uint64_t, const char *, ...);
  objc_class *v47;
  _BOOL4 v48;
  const char *v49;
  const char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  objc_class *v54;
  int v55;
  const char *v56;
  const char *v57;
  void *v58;
  NSErrorUserInfoKey v59;
  void *v60;
  uint8_t buf[4];
  int v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  void *v70;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v10, ClassName, Name, 83, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    v62 = v15;
    v63 = 2082;
    v64 = v16;
    v65 = 2082;
    v66 = v17;
    v67 = 1024;
    v68 = 83;
    v69 = 2114;
    v70 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig embeddedWiredMode](NFRoutingConfig, "embeddedWiredMode"));
    v44 = objc_msgSend(v42, "setRoutingConfig:", v43);

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v45 = NFLogGetLogger(2);
    if (v45)
    {
      v46 = (void (*)(uint64_t, const char *, ...))v45;
      v47 = object_getClass(*(id *)(a1 + 32));
      v48 = class_isMetaClass(v47);
      v49 = object_getClassName(*(id *)(a1 + 32));
      v50 = sel_getName(*(SEL *)(a1 + 48));
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
      v52 = 45;
      if (v48)
        v52 = 43;
      v46(6, "%c[%{public}s %{public}s]:%i NFC emulation mode terminated: %@", v52, v49, v50, 91, v51);

    }
    v53 = NFSharedLogGetLogger(2);
    v38 = objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      v54 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v54))
        v55 = 43;
      else
        v55 = 45;
      v56 = object_getClassName(*(id *)(a1 + 32));
      v57 = sel_getName(*(SEL *)(a1 + 48));
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
      *(_DWORD *)buf = 67110146;
      v62 = v55;
      v63 = 2082;
      v64 = v56;
      v65 = 2082;
      v66 = v57;
      v67 = 1024;
      v68 = 91;
      v69 = 2112;
      v70 = v58;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i NFC emulation mode terminated: %@", buf, 0x2Cu);

    }
    goto LABEL_24;
  }
  v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v20 = NFLogGetLogger(v19);
  if (v20)
  {
    v21 = (void (*)(uint64_t, const char *, ...))v20;
    v22 = object_getClass(*(id *)(a1 + 32));
    v23 = class_isMetaClass(v22);
    v24 = object_getClassName(*(id *)(a1 + 32));
    v25 = sel_getName(*(SEL *)(a1 + 48));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v27 = 45;
    if (v23)
      v27 = 43;
    v21(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v27, v24, v25, 85, v26);

  }
  v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v29 = NFSharedLogGetLogger(v28);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    v31 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v31))
      v32 = 43;
    else
      v32 = 45;
    v33 = object_getClassName(*(id *)(a1 + 32));
    v34 = sel_getName(*(SEL *)(a1 + 48));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v62 = v32;
    v63 = 2082;
    v64 = v33;
    v65 = 2082;
    v66 = v34;
    v67 = 1024;
    v68 = 85;
    v69 = 2114;
    v70 = v35;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v36 = *(_QWORD *)(a1 + 40);
  if (v36)
  {
    v37 = objc_alloc((Class)NSError);
    v38 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v59 = NSLocalizedDescriptionKey;
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v60 = v39;
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v60, &v59, 1));
    v41 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 54, v40);
    (*(void (**)(uint64_t, id))(v36 + 16))(v36, v41);

LABEL_24:
  }
}

void sub_10006EF14(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  NSErrorUserInfoKey v33;
  id v34;
  NSErrorUserInfoKey v35;
  void *v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  void *v46;

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getSecureElementWrapperForSEID:", *(_QWORD *)(a1 + 40)));
    if (v25)
    {
      v21 = (void *)v25;
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
      v27 = *(_QWORD *)(a1 + 48);
      v32 = 0;
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "transceiveData:toOS:error:", v27, 0, &v32));
      v23 = v32;

      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 56);
      v29 = objc_alloc((Class)NSError);
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v33 = NSLocalizedDescriptionKey;
      v23 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v34 = v23;
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1));
      v31 = objc_msgSend(v29, "initWithDomain:code:userInfo:", v22, 15, v30);
      (*(void (**)(uint64_t, _QWORD, id))(v28 + 16))(v28, 0, v31);

      v21 = 0;
    }
    goto LABEL_15;
  }
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 64));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, ClassName, Name, 98, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 64));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v38 = v15;
    v39 = 2082;
    v40 = v16;
    v41 = 2082;
    v42 = v17;
    v43 = 1024;
    v44 = 98;
    v45 = 2114;
    v46 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 56);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v35 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v36 = v22;
    v23 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1));
    v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
    (*(void (**)(uint64_t, _QWORD, id))(v19 + 16))(v19, 0, v24);

LABEL_15:
  }
}

uint64_t sub_10006FAA4(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *v7;
  _BOOL4 v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  uint64_t v16;
  _WORD *v18;
  void *specific;
  uint64_t Logger;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  objc_class *v28;
  int v29;
  const char *ClassName;
  const char *v31;
  const char *Name;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  id v42;

  v3 = a2;
  if (objc_msgSend(v3, "p1") == 4 && !objc_msgSend(v3, "p2"))
  {
    if (objc_msgSend(v3, "payloadBytes") && objc_msgSend(v3, "payloadLength") == 10)
    {
      v18 = objc_msgSend(v3, "payloadBytes");
      if (*(_QWORD *)v18 == 0x2E5341562E45534FLL && v18[4] == 12592)
      {
        v16 = 36864;
        goto LABEL_14;
      }
    }
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v22 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_validateOseSelect:");
      v25 = 45;
      if (isMetaClass)
        v25 = 43;
      v22(3, "%c[%{public}s %{public}s]:%i Bad Select OSE VAS version number: %{public}@", v25, ClassName, Name, 105, v3);
    }
    v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v27 = NFSharedLogGetLogger(v26);
    v13 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v28 = object_getClass(a1);
      if (class_isMetaClass(v28))
        v29 = 43;
      else
        v29 = 45;
      *(_DWORD *)buf = 67110146;
      v34 = v29;
      v35 = 2082;
      v36 = object_getClassName(a1);
      v37 = 2082;
      v38 = sel_getName("_validateOseSelect:");
      v39 = 1024;
      v40 = 105;
      v41 = 2114;
      v42 = v3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Bad Select OSE VAS version number: %{public}@", buf, 0x2Cu);
    }
    v16 = 27264;
  }
  else
  {
    v4 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v5 = NFLogGetLogger(v4);
    if (v5)
    {
      v6 = (void (*)(uint64_t, const char *, ...))v5;
      v7 = object_getClass(a1);
      v8 = class_isMetaClass(v7);
      v9 = object_getClassName(a1);
      v31 = sel_getName("_validateOseSelect:");
      v10 = 45;
      if (v8)
        v10 = 43;
      v6(3, "%c[%{public}s %{public}s]:%i Bad p1/p2", v10, v9, v31, 100);
    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(a1);
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      *(_DWORD *)buf = 67109890;
      v34 = v15;
      v35 = 2082;
      v36 = object_getClassName(a1);
      v37 = 2082;
      v38 = sel_getName("_validateOseSelect:");
      v39 = 1024;
      v40 = 100;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Bad p1/p2", buf, 0x22u);
    }
    v16 = 27392;
  }

LABEL_14:
  return v16;
}

unsigned int *sub_10006FDD8(NSMutableData *a1, void *a2)
{
  NSMutableData *v2;
  uint64_t v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  unsigned int isa;
  Class v20;
  void *v21;
  Class v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  objc_class *v34;
  _BOOL4 v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  objc_class *v41;
  int v42;
  NSMutableData *v43;
  NSMutableData *v44;
  void *v46;
  const char *v47;
  __int16 v48;
  uint8_t buf[4];
  int v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  unsigned int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;

  v2 = a1;
  if (a1)
  {
    v3 = sub_10006FAA4(a1, a2);
    HIWORD(v2[1].super.super.isa) = v3;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    if ((_DWORD)v3 == 36864)
    {
      if (Logger)
      {
        Class = object_getClass(v2);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v2);
        Name = sel_getName("_handleOseSelect:");
        v11 = 45;
        if (isMetaClass)
          v11 = 43;
        v6(6, "%c[%{public}s %{public}s]:%i MobileCaps = 0x%04x encryption = 0x%02x, loyalty = 0x%02x, payment = 0x%02x", v11, ClassName, Name, 140, LODWORD(v2[1].super.super.isa), (uint64_t)v2[1].super.super.isa & 3, (LODWORD(v2[1].super.super.isa) >> 2) & 3, (LODWORD(v2[1].super.super.isa) >> 4) & 3);
      }
      v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v13 = NFSharedLogGetLogger(v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = object_getClass(v2);
        if (class_isMetaClass(v15))
          v16 = 43;
        else
          v16 = 45;
        v17 = object_getClassName(v2);
        v18 = sel_getName("_handleOseSelect:");
        isa = v2[1].super.super.isa;
        *(_DWORD *)buf = 67110914;
        v50 = v16;
        v51 = 2082;
        v52 = v17;
        v53 = 2082;
        v54 = v18;
        v55 = 1024;
        v56 = 140;
        v57 = 1024;
        v58 = isa;
        v59 = 1024;
        v60 = isa & 3;
        v61 = 1024;
        v62 = (isa >> 2) & 3;
        v63 = 1024;
        v64 = (isa >> 4) & 3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i MobileCaps = 0x%04x encryption = 0x%02x, loyalty = 0x%02x, payment = 0x%02x", buf, 0x3Au);
      }

      v20 = v2[3].super.super.isa;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", LODWORD(v2[1].super.super.isa)));
      -[objc_class setObject:forKey:](v20, "setObject:forKey:", v21, CFSTR("DeviceCaps"));

      *(_DWORD *)buf = 0;
      if (SecRandomCopyBytes(kSecRandomDefault, 4uLL, buf))
      {
        v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
        objc_msgSend(v46, "handleFailureInMethod:object:file:lineNumber:description:", "_handleOseSelect:", v2, CFSTR("NFLoyaltyAgent.m"), 145, CFSTR("Failed to initialize nonce"));

      }
      v22 = v2[3].super.super.isa;
      v23 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", buf, 4);
      -[objc_class setObject:forKey:](v22, "setObject:forKey:", v23, CFSTR("DeviceNonce"));

      v24 = objc_alloc((Class)NSMutableArray);
      v25 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", "ApplePay", 8);
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 80, v25));
      v27 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269A49, 2);
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 40737, v27));
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:unsignedLongValue:](NFTLV, "TLVWithTag:unsignedLongValue:", 40740, *(unsigned int *)buf));
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:unsignedLongValue:](NFTLV, "TLVWithTag:unsignedLongValue:", 40739, bswap32(v2[1].super.super.isa)));
      v31 = objc_msgSend(v24, "initWithObjects:", v26, v28, v29, v30, 0);

      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 111, v31));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "asMutableData"));

      if (v33)
      {
        v48 = 144;
        objc_msgSend(v33, "appendBytes:length:", &v48, 2);
      }
      HIWORD(v2[1].super.super.isa) = -28672;
      BYTE4(v2[1].super.super.isa) = 1;
      LOBYTE(v2[4].super.super.isa) = 1;
      v2 = v33;

    }
    else
    {
      if (Logger)
      {
        v34 = object_getClass(v2);
        v35 = class_isMetaClass(v34);
        v36 = object_getClassName(v2);
        v47 = sel_getName("_handleOseSelect:");
        v37 = 45;
        if (v35)
          v37 = 43;
        v6(6, "%c[%{public}s %{public}s]:%i returning failed validation", v37, v36, v47, 127);
      }
      v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v39 = NFSharedLogGetLogger(v38);
      v40 = objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        v41 = object_getClass(v2);
        if (class_isMetaClass(v41))
          v42 = 43;
        else
          v42 = 45;
        *(_DWORD *)buf = 67109890;
        v50 = v42;
        v51 = 2082;
        v52 = object_getClassName(v2);
        v53 = 2082;
        v54 = sel_getName("_handleOseSelect:");
        v55 = 1024;
        v56 = 127;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i returning failed validation", buf, 0x22u);
      }

      v43 = objc_opt_new(NSMutableData);
      v44 = v43;
      if (v43)
      {
        *(_WORD *)buf = __rev16(v3);
        -[NSMutableData appendBytes:length:](v43, "appendBytes:length:", buf, 2);
      }
      +[NFExceptionsCALogger postAnalyticsVASTransactionException:withSWStatus:](NFExceptionsCALogger, "postAnalyticsVASTransactionException:withSWStatus:", 0, v3);
      v2 = v44;
    }

  }
  return (unsigned int *)v2;
}

NSMutableDictionary *sub_100070334(uint64_t a1)
{
  NSMutableDictionary *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  int v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  _UNKNOWN **v15;
  id v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  id v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  NSErrorUserInfoKey v29;
  void *v30;
  NSErrorUserInfoKey v31;
  void *v32;
  _BYTE v33[128];

  if (a1)
  {
    v2 = objc_opt_new(NSMutableDictionary);
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v3 = objc_msgSend(&off_100305D88, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v26;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v26 != v5)
            objc_enumerationMutation(&off_100305D88);
          v7 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "objectForKey:", v7));
          if (v8)
            -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v8, v7);

        }
        v4 = objc_msgSend(&off_100305D88, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
      }
      while (v4);
    }
    v9 = *(unsigned __int8 *)(a1 + 12);
    if (v9 == 4)
    {
      v17 = objc_alloc((Class)NSError);
      v18 = 0;
      v19 = *(unsigned __int16 *)(a1 + 14);
      v29 = NSLocalizedDescriptionKey;
      v20 = "Unknown Error";
      while ((unsigned __int16)word_1002E6718[v18] != (_DWORD)v19)
      {
        v18 += 8;
        if (v18 == 192)
          goto LABEL_21;
      }
      v20 = *(const char **)&word_1002E6718[v18 + 4];
LABEL_21:
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
      v30 = v21;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
      v23 = objc_msgSend(v17, "initWithDomain:code:userInfo:", CFSTR("GP"), v19, v22);
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v23, CFSTR("Error"));

      v24 = *(unsigned __int16 *)(a1 + 14);
      switch(v24)
      {
        case 25223:
          v15 = &off_1002FE1D8;
          break;
        case 27267:
          v15 = &off_1002FE208;
          break;
        case 27012:
          v15 = &off_1002FE1F0;
          break;
        default:
          v15 = &off_1002FE220;
          break;
      }
    }
    else
    {
      if (v9 != 3)
        return v2;
      v10 = objc_alloc((Class)NSError);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v31 = NSLocalizedDescriptionKey;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Success"));
      v32 = v12;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
      v14 = objc_msgSend(v10, "initWithDomain:code:userInfo:", v11, 0, v13);
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v14, CFSTR("Error"));

      v15 = &off_1002FE1C0;
    }
    -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v15, CFSTR("Result"));
    return v2;
  }
  return (NSMutableDictionary *)0;
}

uint64_t sub_1000706D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  id v8;
  int v9;
  void *v10;
  uint64_t v11;
  unint64_t i;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  void (*v18)(uint64_t, const char *, ...);
  objc_class *v19;
  _BOOL4 v20;
  const char *v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  void (*v36)(uint64_t, const char *, ...);
  objc_class *v37;
  _BOOL4 v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  objc_class *v43;
  int v44;
  const char *v45;
  const char *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void (*v50)(uint64_t, const char *, ...);
  objc_class *v51;
  _BOOL4 v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  objc_class *v57;
  int v58;
  const char *v59;
  const char *v60;
  NSObject *v61;
  const char *v62;
  uint32_t v63;
  void *v64;
  void *v65;
  unsigned __int8 v66;
  int v67;
  void *v68;
  uint64_t v69;
  void (*v70)(uint64_t, const char *, ...);
  objc_class *v71;
  _BOOL4 v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  NSObject *v77;
  objc_class *v78;
  int v79;
  const char *v80;
  const char *v81;
  void *v82;
  uint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void (*v90)(uint64_t, const char *, ...);
  objc_class *v91;
  _BOOL4 v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  objc_class *v97;
  int v98;
  const char *v99;
  const char *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  uint64_t v105;
  void (*v106)(uint64_t, const char *, ...);
  objc_class *v107;
  _BOOL4 v108;
  const char *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  NSObject *v113;
  objc_class *v114;
  int v115;
  const char *v116;
  const char *v117;
  void *v118;
  uint64_t v119;
  void (*v120)(uint64_t, const char *, ...);
  objc_class *v121;
  _BOOL4 v122;
  const char *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  NSObject *v127;
  objc_class *v128;
  int v129;
  const char *v130;
  const char *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  void (*v135)(uint64_t, const char *, ...);
  objc_class *v136;
  _BOOL4 v137;
  const char *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  NSObject *v142;
  objc_class *v143;
  int v144;
  const char *v145;
  const char *v146;
  void *v147;
  objc_class *v148;
  _BOOL4 v149;
  const char *v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  objc_class *v154;
  int v155;
  const char *v156;
  const char *v157;
  void *v158;
  void *v159;
  uint64_t v160;
  void (*v161)(uint64_t, const char *, ...);
  objc_class *v162;
  _BOOL4 v163;
  const char *v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  objc_class *v168;
  int v169;
  const char *v170;
  const char *v171;
  const char *v172;
  void *v173;
  id v174;
  void *v175;
  uint64_t v176;
  void (*v177)(uint64_t, const char *, ...);
  objc_class *v178;
  _BOOL4 v179;
  const char *v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  objc_class *v184;
  int v185;
  uint64_t v186;
  void *specific;
  uint64_t Logger;
  void (*v189)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  objc_class *v196;
  int v197;
  void *v198;
  void *v200;
  uint64_t v201;
  void (*v202)(uint64_t, const char *, ...);
  objc_class *v203;
  _BOOL4 v204;
  const char *v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  objc_class *v209;
  int v210;
  const char *v211;
  const char *v212;
  void *v213;
  uint64_t v214;
  void (*v215)(uint64_t, const char *, ...);
  objc_class *v216;
  _BOOL4 v217;
  const char *v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  NSObject *v222;
  objc_class *v223;
  int v224;
  const char *v225;
  const char *v226;
  const char *v227;
  NSObject *v228;
  uint32_t v229;
  void *v230;
  uint64_t v231;
  void (*v232)(uint64_t, const char *, ...);
  objc_class *v233;
  _BOOL4 v234;
  const char *v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  objc_class *v239;
  int v240;
  const char *v241;
  const char *v242;
  const char *v243;
  NSObject *v244;
  os_log_type_t v245;
  objc_class *v246;
  _BOOL4 v247;
  const char *v248;
  const char *v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  objc_class *v253;
  int v254;
  const char *v255;
  const char *v256;
  unsigned int v257;
  void *v258;
  uint64_t v259;
  void (*v260)(uint64_t, const char *, ...);
  objc_class *v261;
  _BOOL4 v262;
  const char *v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  objc_class *v267;
  int v268;
  const char *v269;
  const char *v270;
  void *v271;
  uint64_t v272;
  void (*v273)(uint64_t, const char *, ...);
  objc_class *v274;
  _BOOL4 v275;
  const char *v276;
  uint64_t v277;
  void *v278;
  uint64_t v279;
  objc_class *v280;
  int v281;
  const char *v282;
  const char *v283;
  void *v284;
  uint64_t v285;
  void (*v286)(uint64_t, const char *, ...);
  objc_class *v287;
  _BOOL4 v288;
  const char *v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  objc_class *v293;
  int v294;
  const char *v295;
  const char *v296;
  void *v297;
  uint64_t v298;
  void (*v299)(uint64_t, const char *, ...);
  objc_class *v300;
  _BOOL4 v301;
  const char *v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  objc_class *v306;
  int v307;
  const char *v308;
  const char *v309;
  void *v310;
  uint64_t v311;
  void (*v312)(uint64_t, const char *, ...);
  objc_class *v313;
  _BOOL4 v314;
  const char *v315;
  uint64_t v316;
  void *v317;
  uint64_t v318;
  objc_class *v319;
  int v320;
  const char *v321;
  const char *v322;
  void *v323;
  uint64_t v324;
  void (*v325)(uint64_t, const char *, ...);
  objc_class *v326;
  _BOOL4 v327;
  const char *v328;
  uint64_t v329;
  void *v330;
  uint64_t v331;
  objc_class *v332;
  int v333;
  const char *v334;
  const char *v335;
  const char *v336;
  const char *v337;
  const char *v338;
  const char *v339;
  const char *v340;
  const char *v341;
  const char *v342;
  const char *v343;
  const char *v344;
  const char *v345;
  const char *v346;
  const char *v347;
  const char *v348;
  const char *Name;
  const char *v350;
  const char *v351;
  const char *v352;
  const char *v353;
  const char *v354;
  const char *v355;
  const char *v356;
  const char *v357;
  const char *v358;
  id v359;
  uint64_t v360;
  void *v361;
  void *v362;
  int v363;
  int v364;
  NSObject *v365;
  unsigned __int8 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  uint8_t buf[4];
  int v372;
  __int16 v373;
  const char *v374;
  __int16 v375;
  const char *v376;
  __int16 v377;
  int v378;
  __int16 v379;
  _BYTE v380[10];
  int v381;
  _BYTE v382[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "payload"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v4));

  if (!*(_BYTE *)(a1 + 32))
  {
    v173 = v5;
    v174 = v3;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v189 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("_validateGetVasDataCommand:");
      v193 = 45;
      if (isMetaClass)
        v193 = 43;
      v189(3, "%c[%{public}s %{public}s]:%i Applet is not in selected state", v193, ClassName, Name, 243);
    }
    v194 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v195 = NFSharedLogGetLogger(v194);
    v6 = objc_claimAutoreleasedReturnValue(v195);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v196 = object_getClass((id)a1);
      if (class_isMetaClass(v196))
        v197 = 43;
      else
        v197 = 45;
      *(_DWORD *)buf = 67109890;
      v372 = v197;
      v373 = 2082;
      v374 = object_getClassName((id)a1);
      v375 = 2082;
      v376 = sel_getName("_validateGetVasDataCommand:");
      v377 = 1024;
      v378 = 243;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Applet is not in selected state", buf, 0x22u);
    }
    v10 = 0;
    v186 = 27013;
    goto LABEL_158;
  }
  if (objc_msgSend(v3, "p1") != 1
    || objc_msgSend(v3, "p2") && objc_msgSend(v3, "p2") != 1)
  {
    v173 = v5;
    v174 = v3;
    v175 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v176 = NFLogGetLogger(v175);
    if (v176)
    {
      v177 = (void (*)(uint64_t, const char *, ...))v176;
      v178 = object_getClass((id)a1);
      v179 = class_isMetaClass(v178);
      v180 = object_getClassName((id)a1);
      v348 = sel_getName("_validateGetVasDataCommand:");
      v181 = 45;
      if (v179)
        v181 = 43;
      v177(3, "%c[%{public}s %{public}s]:%i Invalid P1/P2", v181, v180, v348, 248);
    }
    v182 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v183 = NFSharedLogGetLogger(v182);
    v6 = objc_claimAutoreleasedReturnValue(v183);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v184 = object_getClass((id)a1);
      if (class_isMetaClass(v184))
        v185 = 43;
      else
        v185 = 45;
      *(_DWORD *)buf = 67109890;
      v372 = v185;
      v373 = 2082;
      v374 = object_getClassName((id)a1);
      v375 = 2082;
      v376 = sel_getName("_validateGetVasDataCommand:");
      v377 = 1024;
      v378 = 248;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid P1/P2", buf, 0x22u);
    }
    v10 = 0;
    v186 = 27392;
LABEL_158:
    v158 = v174;
    v198 = v173;
    goto LABEL_159;
  }
  v361 = v5;
  v362 = v3;
  v369 = 0u;
  v370 = 0u;
  v367 = 0u;
  v368 = 0u;
  v6 = v5;
  v7 = -[NSObject countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v367, v382, 16);
  if (!v7)
  {

    v10 = 0;
LABEL_162:
    v158 = v362;
    v200 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v201 = NFLogGetLogger(v200);
    if (v201)
    {
      v202 = (void (*)(uint64_t, const char *, ...))v201;
      v203 = object_getClass((id)a1);
      v204 = class_isMetaClass(v203);
      v205 = object_getClassName((id)a1);
      v350 = sel_getName("_validateGetVasDataCommand:");
      v206 = 45;
      if (v204)
        v206 = 43;
      v202(3, "%c[%{public}s %{public}s]:%i Missing mandatory fields", v206, v205, v350, 365);
    }
    v207 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v208 = NFSharedLogGetLogger(v207);
    v6 = objc_claimAutoreleasedReturnValue(v208);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_172;
    v209 = object_getClass((id)a1);
    if (class_isMetaClass(v209))
      v210 = 43;
    else
      v210 = 45;
    v211 = object_getClassName((id)a1);
    v212 = sel_getName("_validateGetVasDataCommand:");
    *(_DWORD *)buf = 67109890;
    v372 = v210;
    v373 = 2082;
    v374 = v211;
    v375 = 2082;
    v376 = v212;
    v377 = 1024;
    v378 = 365;
    v172 = "%c[%{public}s %{public}s]:%i Missing mandatory fields";
    goto LABEL_171;
  }
  v8 = v7;
  v360 = 0;
  v364 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *(_QWORD *)v368;
  v365 = v6;
  while (2)
  {
    for (i = 0; i < (unint64_t)v8; ++i)
    {
      v13 = v10;
      if (*(_QWORD *)v368 != v11)
        objc_enumerationMutation(v6);
      v14 = *(void **)(*((_QWORD *)&v367 + 1) + 8 * i);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "value"));

      if (objc_msgSend(v14, "tag") == 40738)
      {
        if (objc_msgSend(v10, "length") != (id)2)
        {
          v213 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v214 = NFLogGetLogger(v213);
          if (v214)
          {
            v215 = (void (*)(uint64_t, const char *, ...))v214;
            v216 = object_getClass((id)a1);
            v217 = class_isMetaClass(v216);
            v218 = object_getClassName((id)a1);
            v351 = sel_getName("_validateGetVasDataCommand:");
            v219 = 45;
            if (v217)
              v219 = 43;
            v215(3, "%c[%{public}s %{public}s]:%i Invalid terminal app version length", v219, v218, v351, 259);
          }
          v220 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v221 = NFSharedLogGetLogger(v220);
          v222 = objc_claimAutoreleasedReturnValue(v221);
          v198 = v361;
          if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
          {
            v223 = object_getClass((id)a1);
            if (class_isMetaClass(v223))
              v224 = 43;
            else
              v224 = 45;
            v225 = object_getClassName((id)a1);
            v226 = sel_getName("_validateGetVasDataCommand:");
            *(_DWORD *)buf = 67109890;
            v372 = v224;
            v373 = 2082;
            v374 = v225;
            v375 = 2082;
            v376 = v226;
            v377 = 1024;
            v378 = 259;
            v227 = "%c[%{public}s %{public}s]:%i Invalid terminal app version length";
            goto LABEL_182;
          }
          goto LABEL_204;
        }
        if (*(_WORD *)objc_msgSend(objc_retainAutorelease(v10), "bytes") != 1)
        {
          v230 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v231 = NFLogGetLogger(v230);
          if (v231)
          {
            v232 = (void (*)(uint64_t, const char *, ...))v231;
            v233 = object_getClass((id)a1);
            v234 = class_isMetaClass(v233);
            v235 = object_getClassName((id)a1);
            v352 = sel_getName("_validateGetVasDataCommand:");
            v236 = 45;
            if (v234)
              v236 = 43;
            v232(3, "%c[%{public}s %{public}s]:%i Invalid AppVersion", v236, v235, v352, 264);
          }
          v237 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v238 = NFSharedLogGetLogger(v237);
          v222 = objc_claimAutoreleasedReturnValue(v238);
          v198 = v361;
          if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
          {
            v239 = object_getClass((id)a1);
            if (class_isMetaClass(v239))
              v240 = 43;
            else
              v240 = 45;
            v241 = object_getClassName((id)a1);
            v242 = sel_getName("_validateGetVasDataCommand:");
            *(_DWORD *)buf = 67109890;
            v372 = v240;
            v373 = 2082;
            v374 = v241;
            v375 = 2082;
            v376 = v242;
            v377 = 1024;
            v378 = 264;
            v243 = "%c[%{public}s %{public}s]:%i Invalid AppVersion";
            v244 = v222;
            v245 = OS_LOG_TYPE_ERROR;
            goto LABEL_192;
          }
          goto LABEL_193;
        }
        v15 = objc_msgSend(v14, "valueAsUnsignedShort");
        v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v17 = NFLogGetLogger(v16);
        if (v17)
        {
          v18 = (void (*)(uint64_t, const char *, ...))v17;
          v19 = object_getClass((id)a1);
          v20 = class_isMetaClass(v19);
          v21 = object_getClassName((id)a1);
          v338 = sel_getName("_validateGetVasDataCommand:");
          v22 = !v20;
          v6 = v365;
          v23 = 45;
          if (!v22)
            v23 = 43;
          v18(10, "%c[%{public}s %{public}s]:%i VAS Terminal Version number = 0x%08x, %d", v23, v21, v338, 269, v15, v15);
        }
        v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v25 = NFSharedLogGetLogger(v24);
        v26 = objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          v27 = object_getClass((id)a1);
          if (class_isMetaClass(v27))
            v28 = 43;
          else
            v28 = 45;
          v29 = object_getClassName((id)a1);
          v30 = sel_getName("_validateGetVasDataCommand:");
          *(_DWORD *)buf = 67110402;
          v372 = v28;
          v373 = 2082;
          v374 = v29;
          v375 = 2082;
          v376 = v30;
          v377 = 1024;
          v378 = 269;
          v379 = 1024;
          *(_DWORD *)v380 = v15;
          *(_WORD *)&v380[4] = 1024;
          *(_DWORD *)&v380[6] = v15;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i VAS Terminal Version number = 0x%08x, %d", buf, 0x2Eu);
        }

        v31 = *(void **)(a1 + 24);
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", __rev16(v15)));
        objc_msgSend(v31, "setObject:forKey:", v32, CFSTR("TerminalAppVersion"));

        v9 = 1;
      }
      else if (objc_msgSend(v14, "tag") == 40741)
      {
        v33 = objc_msgSend(v10, "length");
        v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v35 = NFLogGetLogger(v34);
        v36 = (void (*)(uint64_t, const char *, ...))v35;
        if (v33 != (id)32)
        {
          if (v35)
          {
            v246 = object_getClass((id)a1);
            v247 = class_isMetaClass(v246);
            v248 = object_getClassName((id)a1);
            v249 = sel_getName("_validateGetVasDataCommand:");
            v359 = objc_msgSend(v10, "length");
            v250 = 45;
            if (v247)
              v250 = 43;
            v36(3, "%c[%{public}s %{public}s]:%i Invalid merchantId length: %d", v250, v248, v249, 276, v359);
          }
          v251 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v252 = NFSharedLogGetLogger(v251);
          v222 = objc_claimAutoreleasedReturnValue(v252);
          v198 = v361;
          if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
          {
            v253 = object_getClass((id)a1);
            if (class_isMetaClass(v253))
              v254 = 43;
            else
              v254 = 45;
            v255 = object_getClassName((id)a1);
            v256 = sel_getName("_validateGetVasDataCommand:");
            v257 = objc_msgSend(v10, "length");
            *(_DWORD *)buf = 67110146;
            v372 = v254;
            v373 = 2082;
            v374 = v255;
            v375 = 2082;
            v376 = v256;
            v377 = 1024;
            v378 = 276;
            v379 = 1024;
            *(_DWORD *)v380 = v257;
            v227 = "%c[%{public}s %{public}s]:%i Invalid merchantId length: %d";
            v228 = v222;
            v229 = 40;
            goto LABEL_203;
          }
          goto LABEL_204;
        }
        if (v35)
        {
          v37 = object_getClass((id)a1);
          v38 = class_isMetaClass(v37);
          v336 = object_getClassName((id)a1);
          v339 = sel_getName("_validateGetVasDataCommand:");
          v39 = 45;
          if (v38)
            v39 = 43;
          v36(10, "%c[%{public}s %{public}s]:%i VAS Terminal Merchant Id: %@", v39, v336, v339, 280, v10);
        }
        v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v41 = NFSharedLogGetLogger(v40);
        v42 = objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          v43 = object_getClass((id)a1);
          if (class_isMetaClass(v43))
            v44 = 43;
          else
            v44 = 45;
          v45 = object_getClassName((id)a1);
          v46 = sel_getName("_validateGetVasDataCommand:");
          *(_DWORD *)buf = 67110146;
          v372 = v44;
          v373 = 2082;
          v374 = v45;
          v375 = 2082;
          v376 = v46;
          v377 = 1024;
          v378 = 280;
          v379 = 2112;
          *(_QWORD *)v380 = v10;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i VAS Terminal Merchant Id: %@", buf, 0x2Cu);
        }

        objc_msgSend(*(id *)(a1 + 24), "setObject:forKey:", v10, CFSTR("MerchantId"));
        v364 = 1;
      }
      else
      {
        if (objc_msgSend(v14, "tag") == 40744)
        {
          if (objc_msgSend(v10, "length") == (id)4)
          {
            objc_msgSend(*(id *)(a1 + 24), "setObject:forKey:", v10, CFSTR("TerminalNonce"));
            continue;
          }
          v258 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v259 = NFLogGetLogger(v258);
          if (v259)
          {
            v260 = (void (*)(uint64_t, const char *, ...))v259;
            v261 = object_getClass((id)a1);
            v262 = class_isMetaClass(v261);
            v263 = object_getClassName((id)a1);
            v353 = sel_getName("_validateGetVasDataCommand:");
            v264 = 45;
            if (v262)
              v264 = 43;
            v260(3, "%c[%{public}s %{public}s]:%i Invalid nonce length", v264, v263, v353, 285);
          }
          v265 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v266 = NFSharedLogGetLogger(v265);
          v222 = objc_claimAutoreleasedReturnValue(v266);
          v198 = v361;
          if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
          {
            v267 = object_getClass((id)a1);
            if (class_isMetaClass(v267))
              v268 = 43;
            else
              v268 = 45;
            v269 = object_getClassName((id)a1);
            v270 = sel_getName("_validateGetVasDataCommand:");
            *(_DWORD *)buf = 67109890;
            v372 = v268;
            v373 = 2082;
            v374 = v269;
            v375 = 2082;
            v376 = v270;
            v377 = 1024;
            v378 = 285;
            v227 = "%c[%{public}s %{public}s]:%i Invalid nonce length";
            goto LABEL_182;
          }
          goto LABEL_204;
        }
        if (objc_msgSend(v14, "tag") == 40747)
        {
          v363 = v9;
          if (objc_msgSend(v10, "length") == (id)4)
          {
            v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", bswap32(*(_DWORD *)objc_msgSend(objc_retainAutorelease(v10), "bytes"))));
            objc_msgSend(*(id *)(a1 + 24), "setObject:forKey:", v47, CFSTR("Filter"));
            v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v49 = NFLogGetLogger(v48);
            if (v49)
            {
              v50 = (void (*)(uint64_t, const char *, ...))v49;
              v51 = object_getClass((id)a1);
              v52 = class_isMetaClass(v51);
              v337 = object_getClassName((id)a1);
              v340 = sel_getName("_validateGetVasDataCommand:");
              v53 = 45;
              if (v52)
                v53 = 43;
              v50(10, "%c[%{public}s %{public}s]:%i VAS Filter: %@", v53, v337, v340, 297, v47);
            }
            v54 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v55 = NFSharedLogGetLogger(v54);
            v56 = objc_claimAutoreleasedReturnValue(v55);
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              v57 = object_getClass((id)a1);
              if (class_isMetaClass(v57))
                v58 = 43;
              else
                v58 = 45;
              v59 = object_getClassName((id)a1);
              v60 = sel_getName("_validateGetVasDataCommand:");
              *(_DWORD *)buf = 67110146;
              v372 = v58;
              v373 = 2082;
              v374 = v59;
              v375 = 2082;
              v376 = v60;
              v377 = 1024;
              v378 = 297;
              v379 = 2112;
              *(_QWORD *)v380 = v47;
              v61 = v56;
              v62 = "%c[%{public}s %{public}s]:%i VAS Filter: %@";
              v63 = 44;
              goto LABEL_75;
            }
          }
          else
          {
            if (objc_msgSend(v10, "length") != (id)5)
            {
              v284 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v285 = NFLogGetLogger(v284);
              if (v285)
              {
                v286 = (void (*)(uint64_t, const char *, ...))v285;
                v287 = object_getClass((id)a1);
                v288 = class_isMetaClass(v287);
                v289 = object_getClassName((id)a1);
                v355 = sel_getName("_validateGetVasDataCommand:");
                v290 = 45;
                if (v288)
                  v290 = 43;
                v286(3, "%c[%{public}s %{public}s]:%i Invalid category filter length", v290, v289, v355, 314);
              }
              v291 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v292 = NFSharedLogGetLogger(v291);
              v222 = objc_claimAutoreleasedReturnValue(v292);
              v198 = v361;
              if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
              {
                v293 = object_getClass((id)a1);
                if (class_isMetaClass(v293))
                  v294 = 43;
                else
                  v294 = 45;
                v295 = object_getClassName((id)a1);
                v296 = sel_getName("_validateGetVasDataCommand:");
                *(_DWORD *)buf = 67109890;
                v372 = v294;
                v373 = 2082;
                v374 = v295;
                v375 = 2082;
                v376 = v296;
                v377 = 1024;
                v378 = 314;
                v227 = "%c[%{public}s %{public}s]:%i Invalid category filter length";
                goto LABEL_182;
              }
              goto LABEL_204;
            }
            v84 = (unsigned __int8 *)objc_msgSend(objc_retainAutorelease(v10), "bytes");
            v85 = *v84;
            if ((v85 - 1) >= 2)
            {
              v297 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v298 = NFLogGetLogger(v297);
              if (v298)
              {
                v299 = (void (*)(uint64_t, const char *, ...))v298;
                v300 = object_getClass((id)a1);
                v301 = class_isMetaClass(v300);
                v302 = object_getClassName((id)a1);
                v356 = sel_getName("_validateGetVasDataCommand:");
                v303 = 45;
                if (v301)
                  v303 = 43;
                v299(5, "%c[%{public}s %{public}s]:%i Invalid Filter Type", v303, v302, v356, 304);
              }
              v304 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v305 = NFSharedLogGetLogger(v304);
              v222 = objc_claimAutoreleasedReturnValue(v305);
              v198 = v361;
              if (os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT))
              {
                v306 = object_getClass((id)a1);
                if (class_isMetaClass(v306))
                  v307 = 43;
                else
                  v307 = 45;
                v308 = object_getClassName((id)a1);
                v309 = sel_getName("_validateGetVasDataCommand:");
                *(_DWORD *)buf = 67109890;
                v372 = v307;
                v373 = 2082;
                v374 = v308;
                v375 = 2082;
                v376 = v309;
                v377 = 1024;
                v378 = 304;
                v243 = "%c[%{public}s %{public}s]:%i Invalid Filter Type";
                v244 = v222;
                v245 = OS_LOG_TYPE_DEFAULT;
LABEL_192:
                _os_log_impl((void *)&_mh_execute_header, v244, v245, v243, buf, 0x22u);
              }
LABEL_193:
              v186 = 27264;
LABEL_205:

              v158 = v362;
              goto LABEL_159;
            }
            v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", bswap32(*(_DWORD *)(v84 + 1))));
            v86 = *(void **)(a1 + 24);
            v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v85));
            objc_msgSend(v86, "setObject:forKey:", v87, CFSTR("FilterType"));

            objc_msgSend(*(id *)(a1 + 24), "setObject:forKey:", v47, CFSTR("Filter"));
            v88 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v89 = NFLogGetLogger(v88);
            if (v89)
            {
              v90 = (void (*)(uint64_t, const char *, ...))v89;
              v91 = object_getClass((id)a1);
              v92 = class_isMetaClass(v91);
              v93 = object_getClassName((id)a1);
              v342 = sel_getName("_validateGetVasDataCommand:");
              v94 = 45;
              if (v92)
                v94 = 43;
              v90(10, "%c[%{public}s %{public}s]:%i VAS Filter = %@, FilterType = %d", v94, v93, v342, 311, v47, v85);
            }
            v95 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v96 = NFSharedLogGetLogger(v95);
            v56 = objc_claimAutoreleasedReturnValue(v96);
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              v97 = object_getClass((id)a1);
              if (class_isMetaClass(v97))
                v98 = 43;
              else
                v98 = 45;
              v99 = object_getClassName((id)a1);
              v100 = sel_getName("_validateGetVasDataCommand:");
              *(_DWORD *)buf = 67110402;
              v372 = v98;
              v373 = 2082;
              v374 = v99;
              v375 = 2082;
              v376 = v100;
              v377 = 1024;
              v378 = 311;
              v379 = 2112;
              *(_QWORD *)v380 = v47;
              *(_WORD *)&v380[8] = 1024;
              v381 = v85;
              v61 = v56;
              v62 = "%c[%{public}s %{public}s]:%i VAS Filter = %@, FilterType = %d";
              v63 = 50;
LABEL_75:
              _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, v62, buf, v63);
            }
          }

          v6 = v365;
LABEL_123:
          v9 = v363;
          continue;
        }
        if (objc_msgSend(v14, "tag") == 40742)
        {
          if (objc_msgSend(v10, "length") == (id)4)
          {
            v366 = 0;
            objc_msgSend(v10, "getBytes:range:", &v366, (char *)objc_msgSend(v10, "length") - 1, 1);
            v64 = *(void **)(a1 + 24);
            v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v366));
            objc_msgSend(v64, "setObject:forKey:", v65, CFSTR("TerminalCaps"));

            v66 = v366;
            v67 = v366 & 3;
            if (v67)
            {
              if (v67 != 2)
              {
                if (v67 == 1)
                {
                  v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v69 = NFLogGetLogger(v68);
                  if (v69)
                  {
                    v70 = (void (*)(uint64_t, const char *, ...))v69;
                    v71 = object_getClass((id)a1);
                    v72 = class_isMetaClass(v71);
                    v73 = object_getClassName((id)a1);
                    v341 = sel_getName("_validateGetVasDataCommand:");
                    v74 = 45;
                    if (v72)
                      v74 = 43;
                    v70(6, "%c[%{public}s %{public}s]:%i Terminal Capabilities: VAS + PAYMENT", v74, v73, v341, 330);
                  }
                  v75 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v76 = NFSharedLogGetLogger(v75);
                  v77 = objc_claimAutoreleasedReturnValue(v76);
                  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
                  {
                    v78 = object_getClass((id)a1);
                    if (class_isMetaClass(v78))
                      v79 = 43;
                    else
                      v79 = 45;
                    v80 = object_getClassName((id)a1);
                    v81 = sel_getName("_validateGetVasDataCommand:");
                    *(_DWORD *)buf = 67109890;
                    v372 = v79;
                    v373 = 2082;
                    v374 = v80;
                    v375 = 2082;
                    v376 = v81;
                    v377 = 1024;
                    v378 = 330;
                    _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Terminal Capabilities: VAS + PAYMENT", buf, 0x22u);
                  }

                  v82 = *(void **)(a1 + 24);
                  v83 = 4;
                  goto LABEL_100;
                }
LABEL_101:
                v133 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v134 = NFLogGetLogger(v133);
                v135 = (void (*)(uint64_t, const char *, ...))v134;
                v363 = v9;
                if ((v66 & 0x80) != 0)
                {
                  if (v134)
                  {
                    v148 = object_getClass((id)a1);
                    v149 = class_isMetaClass(v148);
                    v150 = object_getClassName((id)a1);
                    v346 = sel_getName("_validateGetVasDataCommand:");
                    v151 = 45;
                    if (v149)
                      v151 = 43;
                    v135(6, "%c[%{public}s %{public}s]:%i More GET VAS DATA requests expected", v151, v150, v346, 343);
                  }
                  v152 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v153 = NFSharedLogGetLogger(v152);
                  v142 = objc_claimAutoreleasedReturnValue(v153);
                  if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
                  {
                    v154 = object_getClass((id)a1);
                    if (class_isMetaClass(v154))
                      v155 = 43;
                    else
                      v155 = 45;
                    v156 = object_getClassName((id)a1);
                    v157 = sel_getName("_validateGetVasDataCommand:");
                    *(_DWORD *)buf = 67109890;
                    v372 = v155;
                    v373 = 2082;
                    v374 = v156;
                    v375 = 2082;
                    v376 = v157;
                    v377 = 1024;
                    v378 = 343;
                    _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i More GET VAS DATA requests expected", buf, 0x22u);
                  }
                  v147 = &__kCFBooleanFalse;
                }
                else
                {
                  if (v134)
                  {
                    v136 = object_getClass((id)a1);
                    v137 = class_isMetaClass(v136);
                    v138 = object_getClassName((id)a1);
                    v345 = sel_getName("_validateGetVasDataCommand:");
                    v139 = 45;
                    if (v137)
                      v139 = 43;
                    v135(6, "%c[%{public}s %{public}s]:%i Last GET VAS DATA request", v139, v138, v345, 347);
                  }
                  v140 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v141 = NFSharedLogGetLogger(v140);
                  v142 = objc_claimAutoreleasedReturnValue(v141);
                  if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
                  {
                    v143 = object_getClass((id)a1);
                    if (class_isMetaClass(v143))
                      v144 = 43;
                    else
                      v144 = 45;
                    v145 = object_getClassName((id)a1);
                    v146 = sel_getName("_validateGetVasDataCommand:");
                    *(_DWORD *)buf = 67109890;
                    v372 = v144;
                    v373 = 2082;
                    v374 = v145;
                    v375 = 2082;
                    v376 = v146;
                    v377 = 1024;
                    v378 = 347;
                    _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Last GET VAS DATA request", buf, 0x22u);
                  }
                  v147 = &__kCFBooleanTrue;
                }

                objc_msgSend(*(id *)(a1 + 24), "setObject:forKey:", v147, CFSTR("LastRequest"));
                BYTE4(v360) = 1;
                goto LABEL_123;
              }
              v118 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v119 = NFLogGetLogger(v118);
              if (v119)
              {
                v120 = (void (*)(uint64_t, const char *, ...))v119;
                v121 = object_getClass((id)a1);
                v122 = class_isMetaClass(v121);
                v123 = object_getClassName((id)a1);
                v344 = sel_getName("_validateGetVasDataCommand:");
                v124 = 45;
                if (v122)
                  v124 = 43;
                v120(6, "%c[%{public}s %{public}s]:%i Terminal Capabilites: VAS ONLY", v124, v123, v344, 334);
              }
              v125 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v126 = NFSharedLogGetLogger(v125);
              v127 = objc_claimAutoreleasedReturnValue(v126);
              if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
              {
                v128 = object_getClass((id)a1);
                if (class_isMetaClass(v128))
                  v129 = 43;
                else
                  v129 = 45;
                v130 = object_getClassName((id)a1);
                v131 = sel_getName("_validateGetVasDataCommand:");
                *(_DWORD *)buf = 67109890;
                v372 = v129;
                v373 = 2082;
                v374 = v130;
                v375 = 2082;
                v376 = v131;
                v377 = 1024;
                v378 = 334;
                _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Terminal Capabilites: VAS ONLY", buf, 0x22u);
              }

              v82 = *(void **)(a1 + 24);
              v83 = 2;
            }
            else
            {
              v104 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v105 = NFLogGetLogger(v104);
              if (v105)
              {
                v106 = (void (*)(uint64_t, const char *, ...))v105;
                v107 = object_getClass((id)a1);
                v108 = class_isMetaClass(v107);
                v109 = object_getClassName((id)a1);
                v343 = sel_getName("_validateGetVasDataCommand:");
                v110 = 45;
                if (v108)
                  v110 = 43;
                v106(6, "%c[%{public}s %{public}s]:%i Terminal Capabilities: VAS | PAYMENT", v110, v109, v343, 338);
              }
              v111 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v112 = NFSharedLogGetLogger(v111);
              v113 = objc_claimAutoreleasedReturnValue(v112);
              if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
              {
                v114 = object_getClass((id)a1);
                if (class_isMetaClass(v114))
                  v115 = 43;
                else
                  v115 = 45;
                v116 = object_getClassName((id)a1);
                v117 = sel_getName("_validateGetVasDataCommand:");
                *(_DWORD *)buf = 67109890;
                v372 = v115;
                v373 = 2082;
                v374 = v116;
                v375 = 2082;
                v376 = v117;
                v377 = 1024;
                v378 = 338;
                _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Terminal Capabilities: VAS | PAYMENT", buf, 0x22u);
              }

              v82 = *(void **)(a1 + 24);
              v83 = 8;
            }
LABEL_100:
            v132 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", v83));
            objc_msgSend(v82, "setObject:forKey:", v132, CFSTR("TerminalMode"));

            v66 = v366;
            goto LABEL_101;
          }
          v271 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v272 = NFLogGetLogger(v271);
          if (v272)
          {
            v273 = (void (*)(uint64_t, const char *, ...))v272;
            v274 = object_getClass((id)a1);
            v275 = class_isMetaClass(v274);
            v276 = object_getClassName((id)a1);
            v354 = sel_getName("_validateGetVasDataCommand:");
            v277 = 45;
            if (v275)
              v277 = 43;
            v273(3, "%c[%{public}s %{public}s]:%i Invalid category filter length", v277, v276, v354, 321);
          }
          v278 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v279 = NFSharedLogGetLogger(v278);
          v222 = objc_claimAutoreleasedReturnValue(v279);
          v198 = v361;
          if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
          {
            v280 = object_getClass((id)a1);
            if (class_isMetaClass(v280))
              v281 = 43;
            else
              v281 = 45;
            v282 = object_getClassName((id)a1);
            v283 = sel_getName("_validateGetVasDataCommand:");
            *(_DWORD *)buf = 67109890;
            v372 = v281;
            v373 = 2082;
            v374 = v282;
            v375 = 2082;
            v376 = v283;
            v377 = 1024;
            v378 = 321;
            v227 = "%c[%{public}s %{public}s]:%i Invalid category filter length";
            goto LABEL_182;
          }
LABEL_204:
          v186 = 26368;
          goto LABEL_205;
        }
        if (objc_msgSend(v14, "tag") != 40745)
          continue;
        if ((unint64_t)objc_msgSend(v10, "length") >= 0x41)
        {
          v310 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v311 = NFLogGetLogger(v310);
          if (v311)
          {
            v312 = (void (*)(uint64_t, const char *, ...))v311;
            v313 = object_getClass((id)a1);
            v314 = class_isMetaClass(v313);
            v315 = object_getClassName((id)a1);
            v357 = sel_getName("_validateGetVasDataCommand:");
            v316 = 45;
            if (v314)
              v316 = 43;
            v312(3, "%c[%{public}s %{public}s]:%i Invalid merchant url length", v316, v315, v357, 354);
          }
          v317 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v318 = NFSharedLogGetLogger(v317);
          v222 = objc_claimAutoreleasedReturnValue(v318);
          v198 = v361;
          if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
          {
            v319 = object_getClass((id)a1);
            if (class_isMetaClass(v319))
              v320 = 43;
            else
              v320 = 45;
            v321 = object_getClassName((id)a1);
            v322 = sel_getName("_validateGetVasDataCommand:");
            *(_DWORD *)buf = 67109890;
            v372 = v320;
            v373 = 2082;
            v374 = v321;
            v375 = 2082;
            v376 = v322;
            v377 = 1024;
            v378 = 354;
            v227 = "%c[%{public}s %{public}s]:%i Invalid merchant url length";
LABEL_182:
            v228 = v222;
            v229 = 34;
LABEL_203:
            _os_log_impl((void *)&_mh_execute_header, v228, OS_LOG_TYPE_ERROR, v227, buf, v229);
          }
          goto LABEL_204;
        }
        v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "valueAsString"));
        v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
        v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "stringByTrimmingCharactersInSet:", v102));

        objc_msgSend(*(id *)(a1 + 24), "setObject:forKey:", v103, CFSTR("SignupUrl"));
        LOBYTE(v360) = 1;
      }
    }
    v8 = -[NSObject countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v367, v382, 16);
    if (v8)
      continue;
    break;
  }

  if ((v9 & v364 & 1) == 0)
    goto LABEL_162;
  v158 = v362;
  if (objc_msgSend(v362, "p2") != 1)
  {
    if ((objc_msgSend(v362, "p2") != 0) | v360 & 1)
      goto LABEL_252;
    v323 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v324 = NFLogGetLogger(v323);
    if (v324)
    {
      v325 = (void (*)(uint64_t, const char *, ...))v324;
      v326 = object_getClass((id)a1);
      v327 = class_isMetaClass(v326);
      v328 = object_getClassName((id)a1);
      v358 = sel_getName("_validateGetVasDataCommand:");
      v329 = 45;
      if (v327)
        v329 = 43;
      v325(3, "%c[%{public}s %{public}s]:%i Missing URL", v329, v328, v358, 378);
    }
    v330 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v331 = NFSharedLogGetLogger(v330);
    v6 = objc_claimAutoreleasedReturnValue(v331);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_172;
    v332 = object_getClass((id)a1);
    if (class_isMetaClass(v332))
      v333 = 43;
    else
      v333 = 45;
    v334 = object_getClassName((id)a1);
    v335 = sel_getName("_validateGetVasDataCommand:");
    *(_DWORD *)buf = 67109890;
    v372 = v333;
    v373 = 2082;
    v374 = v334;
    v375 = 2082;
    v376 = v335;
    v377 = 1024;
    v378 = 378;
    v172 = "%c[%{public}s %{public}s]:%i Missing URL";
LABEL_171:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, v172, buf, 0x22u);
    goto LABEL_172;
  }
  if ((v360 & 0x100000000) != 0)
  {
LABEL_252:
    v186 = 36864;
    v198 = v361;
    goto LABEL_160;
  }
  v159 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v160 = NFLogGetLogger(v159);
  if (v160)
  {
    v161 = (void (*)(uint64_t, const char *, ...))v160;
    v162 = object_getClass((id)a1);
    v163 = class_isMetaClass(v162);
    v164 = object_getClassName((id)a1);
    v347 = sel_getName("_validateGetVasDataCommand:");
    v165 = 45;
    if (v163)
      v165 = 43;
    v161(3, "%c[%{public}s %{public}s]:%i Missing terminal capabilities", v165, v164, v347, 372);
  }
  v166 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v167 = NFSharedLogGetLogger(v166);
  v6 = objc_claimAutoreleasedReturnValue(v167);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v168 = object_getClass((id)a1);
    if (class_isMetaClass(v168))
      v169 = 43;
    else
      v169 = 45;
    v170 = object_getClassName((id)a1);
    v171 = sel_getName("_validateGetVasDataCommand:");
    *(_DWORD *)buf = 67109890;
    v372 = v169;
    v373 = 2082;
    v374 = v170;
    v375 = 2082;
    v376 = v171;
    v377 = 1024;
    v378 = 372;
    v172 = "%c[%{public}s %{public}s]:%i Missing terminal capabilities";
    goto LABEL_171;
  }
LABEL_172:
  v186 = 27264;
  v198 = v361;
LABEL_159:

LABEL_160:
  return v186;
}

BOOL sub_100072748(_BOOL8 a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = v3;
  if (a1)
    a1 = objc_msgSend(v3, "isSelectCommand") && sub_10006FAA4((void *)a1, v4) == 36864;

  return a1;
}

void sub_100073BF0(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  NSXPCInterface *v12;
  void *v13;
  void *v14;
  NSXPCInterface *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFCHardwareManagerInterface));
  v2 = (void *)qword_10032A8D8;
  qword_10032A8D8 = v1;

  v3 = (void *)qword_10032A8D8;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFReaderSessionCallbacks interface](NFReaderSessionCallbacks, "interface"));
  objc_msgSend(v3, "setInterface:forSelector:argumentIndex:ofReply:", v4, "queueReaderSession:sessionConfig:completion:", 0, 0);

  v5 = (void *)qword_10032A8D8;
  v6 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NFReaderSessionConfig), 0);
  objc_msgSend(v5, "setClasses:forSelector:argumentIndex:ofReply:", v6, "queueReaderSession:sessionConfig:completion:", 1, 0);

  v7 = (void *)qword_10032A8D8;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NFReaderSessionInterface interface](NFReaderSessionInterface, "interface"));
  objc_msgSend(v7, "setInterface:forSelector:argumentIndex:ofReply:", v8, "queueReaderSession:sessionConfig:completion:", 0, 1);

  v9 = (void *)qword_10032A8D8;
  v10 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NFCardSessionConfig), 0);
  objc_msgSend(v9, "setClasses:forSelector:argumentIndex:ofReply:", v10, "queueCardSession:sessionConfig:completion:", 1, 0);

  v11 = (void *)qword_10032A8D8;
  v12 = sub_100237A00((uint64_t)NFCCardSessionCallbackInterface);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  objc_msgSend(v11, "setInterface:forSelector:argumentIndex:ofReply:", v13, "queueCardSession:sessionConfig:completion:", 0, 0);

  v14 = (void *)qword_10032A8D8;
  v15 = sub_1002379DC((uint64_t)NFCCardSessionInterface);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  objc_msgSend(v14, "setInterface:forSelector:argumentIndex:ofReply:", v16, "queueCardSession:sessionConfig:completion:", 0, 1);

  v17 = (void *)qword_10032A8D8;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NFCFieldDetectSessionCallbacksInterface interface](NFCFieldDetectSessionCallbacksInterface, "interface"));
  objc_msgSend(v17, "setInterface:forSelector:argumentIndex:ofReply:", v18, "queueCardFieldDetectSession:completion:", 0, 0);

  v19 = (void *)qword_10032A8D8;
  v20 = (id)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFCFieldDetectSessionInterface));
  objc_msgSend(v19, "setInterface:forSelector:argumentIndex:ofReply:", v20, "queueCardFieldDetectSession:completion:", 0, 1);

}

void sub_100073E78(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFCHardwareManagerCallbacks));
  v2 = (void *)qword_10032A8E8;
  qword_10032A8E8 = v1;

}

id *sub_1000746B4(id *a1, void *a2)
{
  id v4;
  id *v5;
  objc_super v7;

  v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)NFThermalMonitor;
    v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5)
    {
      *((_DWORD *)v5 + 6) = -1;
      v5[1] = 0;
      objc_storeStrong(v5 + 2, a2);
    }
  }

  return a1;
}

void sub_100074734(int *a1, void *a2)
{
  NSObject *v3;
  int *v4;
  uint64_t v5;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v9;
  const char *ClassName;
  const char *Name;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  int v19;
  _QWORD handler[4];
  id v21;
  id location;
  uint8_t buf[8];
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  v3 = a2;
  if (a1)
  {
    objc_initWeak(&location, a1);
    v4 = a1 + 6;
    if (a1[6] == -1)
    {
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1000749CC;
      handler[3] = &unk_1002E68F0;
      objc_copyWeak(&v21, &location);
      v5 = notify_register_dispatch(kOSThermalNotificationPressureLevelName, a1 + 6, v3, handler);
      if ((_DWORD)v5)
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
        if (Logger)
        {
          Class = object_getClass(a1);
          if (class_isMetaClass(Class))
            v9 = 43;
          else
            v9 = 45;
          ClassName = object_getClassName(a1);
          Name = sel_getName("registerOSThermalStateChange:");
          Logger(3, "%c[%{public}s %{public}s]:%i Failed to register thermal pressure notification : %d", v9, ClassName, Name, 82, v5);
        }
        v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v13 = NFSharedLogGetLogger(v12);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v15 = object_getClass(a1);
          if (class_isMetaClass(v15))
            v16 = 43;
          else
            v16 = 45;
          v17 = object_getClassName(a1);
          v18 = sel_getName("registerOSThermalStateChange:");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v16;
          v24 = 2082;
          v25 = v17;
          v26 = 2082;
          v27 = v18;
          v28 = 1024;
          v29 = 82;
          v30 = 1024;
          v31 = v5;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to register thermal pressure notification : %d", buf, 0x28u);
        }

      }
      else
      {
        v19 = *v4;
        if (*v4 != -1)
        {
          *(_QWORD *)buf = 0;
          if (!notify_get_state(v19, (uint64_t *)buf))
            sub_100074A74(a1, *(uint64_t *)buf);
        }
      }
      objc_destroyWeak(&v21);
    }
    objc_destroyWeak(&location);
  }

}

void sub_100074998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000749CC(uint64_t a1, int a2)
{
  _QWORD *WeakRetained;
  NSObject *v4;
  uint64_t v5;
  os_activity_scope_state_s state;
  uint64_t state64;

  state64 = 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (!notify_get_state(a2, &state64))
    {
      v4 = _os_activity_create((void *)&_mh_execute_header, "thermalStateChange:Nominal", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
      state.opaque[0] = 0;
      state.opaque[1] = 0;
      os_activity_scope_enter(v4, &state);
      os_activity_scope_leave(&state);

      sub_100074A74(WeakRetained, state64);
      v5 = WeakRetained[4];
      if (v5)
        (*(void (**)(uint64_t, _QWORD))(v5 + 16))(v5, WeakRetained[1]);
    }
  }

}

void sub_100074A74(void *a1, uint64_t a2)
{
  _QWORD *v3;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v7;
  const char *ClassName;
  const char *Name;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;

  v3 = a1;
  objc_sync_enter(v3);
  if (a2 <= 29)
  {
    if (a2)
    {
      if (a2 == 10)
      {
        a2 = 1;
      }
      else
      {
        if (a2 != 20)
          goto LABEL_13;
        a2 = 2;
      }
    }
    goto LABEL_12;
  }
  if (a2 == 30)
  {
    a2 = 3;
    goto LABEL_12;
  }
  if (a2 == 40 || a2 == 50)
  {
    a2 = 4;
LABEL_12:
    v3[1] = a2;
  }
LABEL_13:
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
  if (Logger)
  {
    Class = object_getClass(v3);
    if (class_isMetaClass(Class))
      v7 = 43;
    else
      v7 = 45;
    ClassName = object_getClassName(v3);
    Name = sel_getName("storeThermalLevel:");
    Logger(6, "%c[%{public}s %{public}s]:%i New state : %lx", v7, ClassName, Name, 176, v3[1]);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(v3);
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(v3);
    v16 = sel_getName("storeThermalLevel:");
    v17 = v3[1];
    *(_DWORD *)buf = 67110146;
    v19 = v14;
    v20 = 2082;
    v21 = v15;
    v22 = 2082;
    v23 = v16;
    v24 = 1024;
    v25 = 176;
    v26 = 2048;
    v27 = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i New state : %lx", buf, 0x2Cu);
  }

  objc_sync_exit(v3);
}

void sub_100074C74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100074C98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (a1)
  {
    v6 = objc_retainBlock(v9);
    v7 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v6;

    if (NFThermalMonitorProvidedBySMC(v8))
      sub_10019A090(*(id **)(a1 + 16), (void *)a1, v5);
    else
      sub_100074734((int *)a1, v5);
  }

}

void sub_100074D18(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int v4;

  if (a1)
  {
    v2 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;

    if (NFThermalMonitorProvidedBySMC(v3))
    {
      sub_10019A090(*(id **)(a1 + 16), 0, 0);
    }
    else
    {
      v4 = *(_DWORD *)(a1 + 24);
      if ((v4 & 0x80000000) == 0)
      {
        notify_cancel(v4);
        *(_DWORD *)(a1 + 24) = -1;
      }
    }
  }
}

uint64_t sub_100074D78(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  if (!a1)
    return 0;
  v1 = a1;
  objc_sync_enter(v1);
  v2 = v1[1];
  objc_sync_exit(v1);

  return v2;
}

void sub_100074DBC(uint64_t a1, id a2)
{
  id v3;
  void *v4;

  if (a1)
  {
    v3 = objc_retainBlock(a2);
    v4 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v3;

  }
}

void sub_100075000(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100075128(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100075910(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100076250(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007646C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007707C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007744C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  NSMutableDictionary *v9;
  id v10;
  _QWORD v11[4];
  NSMutableDictionary *v12;

  v10 = a2;
  v5 = a3;
  v6 = objc_opt_class(NSData);
  if ((objc_opt_isKindOfClass(v10, v6) & 1) != 0)
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "NF_asHexString"));
  else
    v7 = v10;
  v8 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100077540;
  v11[3] = &unk_1002E6B58;
  v12 = objc_opt_new(NSMutableDictionary);
  v9 = v12;
  objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v11);

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v9, v8);
}

void sub_100077540(uint64_t a1, void *a2, void *a3)
{
  __CFString *v5;
  uint64_t v6;
  char isKindOfClass;
  void *v8;
  const __CFString *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (objc_msgSend(v10, "isEqualToString:", CFSTR("tagHandle")))
  {
    v6 = objc_opt_class(NSValue);
    isKindOfClass = objc_opt_isKindOfClass(v5, v6);
    v8 = *(void **)(a1 + 32);
    if ((isKindOfClass & 1) == 0)
    {
      v9 = v5;
      goto LABEL_6;
    }
    objc_msgSend(v8, "setObject:forKeyedSubscript:", CFSTR("NULL"), v10);
    if (-[__CFString pointerValue](v5, "pointerValue"))
    {
      v8 = *(void **)(a1 + 32);
      v9 = CFSTR("NON-NULL");
LABEL_6:
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, v10);
    }
  }

}

void sub_1000789C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100078C1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007917C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100079778(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007A1C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007A56C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007A614(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007A800(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007B240(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007B6B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007BAB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007BBBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007BC44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007BD28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007C864(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10007DA14(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "driverDidDetectHardwareReset:", a2);
}

id sub_10007DA1C(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "driverDidDetectHostCardReader:", a2);
}

void sub_10007DA24(void *a1, unsigned int a2, unsigned __int8 *a3, int a4)
{
  int v8;
  NSMutableData *v9;
  NSMutableData *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void (*v18)(uint64_t, const char *, ...);
  void *v19;
  uint64_t v20;
  NSObject *v21;
  unsigned int v22;
  void *v23;
  void (*v24)(uint64_t, const char *, ...);
  void *v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  void (*v32)(uint64_t, const char *, ...);
  void *v33;
  uint64_t v34;
  NSObject *v35;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v38;
  uint64_t v39;
  int v40;
  _QWORD v41[3];
  _QWORD v42[3];
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;

  if ((a2 & 0x10) == 0)
  {
    v8 = a2;
    word_10032A8F8 = 0;
    v9 = objc_opt_new(NSMutableData);
    v10 = v9;
    if ((v8 & 8) != 0 && a3 && a4 >= 1)
    {
      if (*a3 != 106)
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
        if (Logger)
          Logger(3, "%s:%i Houston we have a problem! Payload corrupted without RF errors being set. vData[0] = 0x%X", "_NFDriverWrapperProccessRFTechDetectionInfo", 1787, *a3);
        v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v39 = NFSharedLogGetLogger(v38);
        v13 = objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v40 = *a3;
          *(_DWORD *)buf = 136446722;
          v44 = "_NFDriverWrapperProccessRFTechDetectionInfo";
          v45 = 1024;
          v46 = 1787;
          v47 = 1024;
          v48 = v40;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i Houston we have a problem! Payload corrupted without RF errors being set. vData[0] = 0x%X", buf, 0x18u);
        }
        v15 = 0;
        goto LABEL_35;
      }
      -[NSMutableData appendBytes:length:](v9, "appendBytes:length:", a3, a4);
    }
    v41[0] = CFSTR("FieldTechnology");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8 & 0xF));
    v42[0] = v11;
    v41[1] = CFSTR("SystemCode");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (v8 << 29 >> 31) & HIWORD(a2)));
    v41[2] = CFSTR("ECPData");
    v42[1] = v12;
    v42[2] = v10;
    v13 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v42, v41, 3));

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NFFieldNotification notificationWithDictionary:](NFFieldNotification, "notificationWithDictionary:", v13));
    v15 = v14;
    if (v14)
    {
      v16 = v14;
    }
    else
    {
      v31 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v31);
      if (v32)
        v32(3, "%s:%i Error creating field notification", "_NFDriverWrapperProccessRFTechDetectionInfo", 1814);
      v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v34 = NFSharedLogGetLogger(v33);
      v35 = objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v44 = "_NFDriverWrapperProccessRFTechDetectionInfo";
        v45 = 1024;
        v46 = 1814;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%{public}s:%i Error creating field notification", buf, 0x12u);
      }

    }
LABEL_35:

    if (v15)
    {
      objc_msgSend(a1, "driverDidReceiveTechnologyEvent:", v15);

    }
    return;
  }
  ++word_10032A8F8;
  v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v17);
  if (v18)
    v18(3, "%s:%i ECP payload corrupted.", "_NFDriverWrapperProccessRFTechDetectionInfo", 1759);
  v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v20 = NFSharedLogGetLogger(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v44 = "_NFDriverWrapperProccessRFTechDetectionInfo";
    v45 = 1024;
    v46 = 1759;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i ECP payload corrupted.", buf, 0x12u);
  }

  v22 = (unsigned __int16)word_10032A8F8;
  v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v23);
  if (v22 > 4)
  {
    if (v24)
      v24(3, "%s:%i Too many back to back RF Error found. Probably bad Reader. Will no longer attempt to restart discovery", "_NFDriverWrapperProccessRFTechDetectionInfo", 1765);
    v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v29 = NFSharedLogGetLogger(v28);
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v44 = "_NFDriverWrapperProccessRFTechDetectionInfo";
      v45 = 1024;
      v46 = 1765;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%{public}s:%i Too many back to back RF Error found. Probably bad Reader. Will no longer attempt to restart discovery", buf, 0x12u);
    }

  }
  else
  {
    if (v24)
      v24(3, "%s:%i RF Error found. Restart Discovery", "_NFDriverWrapperProccessRFTechDetectionInfo", 1761);
    v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v26 = NFSharedLogGetLogger(v25);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v44 = "_NFDriverWrapperProccessRFTechDetectionInfo";
      v45 = 1024;
      v46 = 1761;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%{public}s:%i RF Error found. Restart Discovery", buf, 0x12u);
    }

    objc_msgSend(a1, "driverRestartDiscovery");
  }
}

id sub_10007DF04(void *a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(a1, "driverDidDetectRemoteTags:count:", a2, a3);
}

id sub_10007DF10(void *a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(a1, "driverDidDetectMultiTagStateChange:rfError:", a2, a3);
}

void sub_10007E294(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100080770(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_100081318(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NFSecureTransactionServicesHandoverHybridSessionInterface *v8;

  v8 = -[NFSecureTransactionServicesHandoverHybridSessionInterface initWithProtocol:]([NFSecureTransactionServicesHandoverHybridSessionInterface alloc], "initWithProtocol:", &OBJC_PROTOCOL___NFSecureTransactionServicesHandoverHybridSessionInterface);
  v1 = objc_claimAutoreleasedReturnValue(-[NFSecureTransactionServicesHandoverBaseSessionInterface protocolInterface](v8, "protocolInterface"));
  v2 = (void *)qword_10032A900;
  qword_10032A900 = v1;

  v3 = objc_alloc((Class)NSSet);
  v4 = objc_opt_class(NSArray);
  v5 = objc_opt_class(NSMutableArray);
  v6 = objc_msgSend(v3, "initWithObjects:", v4, v5, objc_opt_class(NFApplet), 0);
  v7 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NFApplet), 0);
  objc_msgSend((id)qword_10032A900, "setClasses:forSelector:argumentIndex:ofReply:", v6, "getAppletsWithCompletion:", 0, 1);
  objc_msgSend((id)qword_10032A900, "setClasses:forSelector:argumentIndex:ofReply:", v7, "getAppletsWithCompletion:", 1, 1);
  objc_msgSend((id)qword_10032A900, "setClasses:forSelector:argumentIndex:ofReply:", v7, "setActivePaymentApplet:keys:authorization:completion:", 0, 0);
  objc_msgSend((id)qword_10032A900, "setClasses:forSelector:argumentIndex:ofReply:", v7, "setActivePaymentApplet:keys:authorization:completion:", 0, 1);

}

void sub_100081540(id a1)
{
  uint64_t v1;
  void *v2;
  NFSecureTransactionServicesHandoverHybridSessionCallbacksInterface *v3;

  v3 = -[NFSecureTransactionServicesHandoverHybridSessionCallbacksInterface initWithProtocol:]([NFSecureTransactionServicesHandoverHybridSessionCallbacksInterface alloc], "initWithProtocol:", &OBJC_PROTOCOL___NFSecureTransactionServicesHandoverHybridSessionCallbacksInterface);
  v1 = objc_claimAutoreleasedReturnValue(-[NFSecureTransactionServicesHandoverBaseSessionCallbacksInterface protocolInterface](v3, "protocolInterface"));
  v2 = (void *)qword_10032A910;
  qword_10032A910 = v1;

}

id *sub_100081F0C(id *a1, void *a2, void *a3, void *a4, char a5, __int16 a6)
{
  id v12;
  id v13;
  id v14;
  id *v15;
  objc_super v17;

  v12 = a2;
  v13 = a3;
  v14 = a4;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)NFVASSelectResponse;
    v15 = (id *)objc_msgSendSuper2(&v17, "init");
    a1 = v15;
    if (v15)
    {
      objc_storeStrong(v15 + 2, a2);
      objc_storeStrong(a1 + 3, a3);
      objc_storeStrong(a1 + 4, a4);
      *((_BYTE *)a1 + 8) = a5;
      *((_WORD *)a1 + 5) = a6;
    }
  }

  return a1;
}

NSObject *sub_10008201C(uint64_t a1, NSObject *a2)
{
  id v4;
  void *v5;
  void *v6;
  double v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  NSObject *v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void (*v38)(uint64_t, const char *, ...);
  objc_class *v39;
  _BOOL4 v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  objc_class *v46;
  int v47;
  const char *v48;
  const char *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void (*v56)(uint64_t, const char *, ...);
  objc_class *v57;
  _BOOL4 v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  objc_class *v64;
  int v65;
  const char *v66;
  const char *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void (*v74)(uint64_t, const char *, ...);
  objc_class *v75;
  _BOOL4 v76;
  const char *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  objc_class *v82;
  int v83;
  const char *v84;
  const char *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  _BYTE *v90;
  void *v91;
  id v92;
  NFVASSelectResponse *v93;
  void *v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  void *specific;
  uint64_t Logger;
  void (*v101)(uint64_t, const char *, ...);
  objc_class *Class;
  const char *Name;
  void *v104;
  void *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  NSObject *v109;
  objc_class *v110;
  int v111;
  const char *v112;
  const char *v113;
  void *v114;
  void *v115;
  id v116;
  void *v117;
  void *v118;
  id v119;
  id v120;
  void *v121;
  void *v122;
  uint64_t v123;
  void (*v124)(uint64_t, const char *, ...);
  objc_class *v125;
  _BOOL4 v126;
  void *v127;
  NSObject *v128;
  const char *v129;
  id v130;
  const char *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  NSObject *v135;
  objc_class *v136;
  int v137;
  const char *v138;
  const char *v139;
  unsigned int v140;
  void *v141;
  NSObject *v142;
  id v143;
  void *v144;
  void *v145;
  id v146;
  id v147;
  id v148;
  void *v149;
  const char *v151;
  const char *v152;
  uint64_t v153;
  char v154;
  void *v155;
  void *v156;
  _BOOL4 isMetaClass;
  void *v158;
  void *v159;
  NSObject *v160;
  void *v161;
  void *v162;
  id v163;
  void *v164;
  const char *ClassName;
  id v166;
  id v167;
  char v168;
  int v169;
  char v170;
  _QWORD v171[4];
  _QWORD v172[4];
  _QWORD v173[4];
  _QWORD v174[4];
  uint8_t buf[4];
  int v176;
  __int16 v177;
  const char *v178;
  __int16 v179;
  const char *v180;
  __int16 v181;
  int v182;
  __int16 v183;
  void *v184;
  _QWORD v185[4];
  _QWORD v186[4];
  _QWORD v187[5];
  _QWORD v188[5];
  uint64_t v189;
  __int16 v190;

  if (!a1)
  {
    a2 = 0;
    return a2;
  }
  v189 = *(_QWORD *)"OSE.VAS.01";
  v190 = 12592;
  v170 = 10;
  v169 = 304128;
  v168 = 0;
  v4 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &v169, 5);
  objc_msgSend(v4, "appendBytes:length:", &v189, 10);
  objc_msgSend(v4, "appendBytes:length:", &v168, 1);
  v5 = *(void **)(a1 + 32);
  v6 = *(void **)(a1 + 16);
  v7 = *(double *)(a1 + 24);
  v167 = 0;
  v8 = v6;
  v9 = v5;
  v10 = sub_1001847DC(v9, v4, v8, &v167, v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = v167;

  if (!v12)
  {
    if ((unint64_t)objc_msgSend(v11, "length") <= 1)
    {
      if (!a2)
        goto LABEL_79;
      v163 = objc_alloc((Class)NSError);
      v19 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v185[0] = NSLocalizedDescriptionKey;
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Tag Error"));
      v186[0] = v20;
      v186[1] = &off_1002FE310;
      v185[1] = CFSTR("Line");
      v185[2] = CFSTR("Method");
      v21 = v11;
      v22 = a2;
      v23 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("selectOSE:"));
      v186[2] = v23;
      v185[3] = NSDebugDescriptionErrorKey;
      v15 = (void *)v19;
      v12 = 0;
      v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("selectOSE:"), 100);
      v186[3] = v24;
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v186, v185, 4));
      v22->isa = (Class)objc_msgSend(v163, "initWithDomain:code:userInfo:", v15, 29, v25);
      v11 = v21;

      a2 = 0;
LABEL_78:

      goto LABEL_79;
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NFResponseAPDU responseWithData:](NFResponseAPDU, "responseWithData:", v11));
    v161 = v15;
    if (objc_msgSend(v15, "status") == 36864)
    {
      v160 = a2;
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "subdataWithRange:", 0, (char *)objc_msgSend(v11, "length") - 2));
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithData:](NFTLV, "TLVWithData:", v31));

      if (objc_msgSend(v32, "tag") != 111)
      {
        v159 = v32;
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v101 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass((id)a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName((id)a1);
          Name = sel_getName("selectOSE:");
          v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "response"));
          v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "debugDescription"));
          v106 = 45;
          if (isMetaClass)
            v106 = 43;
          v101(6, "%c[%{public}s %{public}s]:%i Invalid SELECT_OSE response=%{public}@", v106, ClassName, Name, 109, v105);

        }
        v107 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v108 = NFSharedLogGetLogger(v107);
        v109 = objc_claimAutoreleasedReturnValue(v108);
        if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
        {
          v110 = object_getClass((id)a1);
          if (class_isMetaClass(v110))
            v111 = 43;
          else
            v111 = 45;
          v112 = object_getClassName((id)a1);
          v113 = sel_getName("selectOSE:");
          v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v161, "response"));
          v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "debugDescription"));
          *(_DWORD *)buf = 67110146;
          v176 = v111;
          v177 = 2082;
          v178 = v112;
          v179 = 2082;
          v180 = v113;
          v181 = 1024;
          v182 = 109;
          v183 = 2114;
          v184 = v115;
          _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Invalid SELECT_OSE response=%{public}@", buf, 0x2Cu);

        }
        if (v160)
        {
          v116 = objc_alloc((Class)NSError);
          v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v173[0] = NSLocalizedDescriptionKey;
          v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Decoding Error"));
          v174[0] = v118;
          v174[1] = &off_1002FE328;
          v173[1] = CFSTR("Line");
          v173[2] = CFSTR("Method");
          v119 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("selectOSE:"));
          v174[2] = v119;
          v173[3] = NSDebugDescriptionErrorKey;
          v120 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("selectOSE:"), 110);
          v174[3] = v120;
          v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v174, v173, 4));
          v160->isa = (Class)objc_msgSend(v116, "initWithDomain:code:userInfo:", v117, 23, v121);

        }
        v15 = v161;
        a2 = sub_100081F0C((id *)[NFVASSelectResponse alloc], 0, 0, 0, 0, (__int16)objc_msgSend(v161, "status"));
        v32 = v159;
        goto LABEL_64;
      }
      if (objc_msgSend(v32, "tag") == 111)
      {
        v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "childWithTag:", 80));
        if (v156)
        {
          v33 = v32;
          v34 = v15;
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "value"));
          objc_storeStrong((id *)(a1 + 40), v35);

          v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v37 = NFLogGetLogger(v36);
          if (v37)
          {
            v38 = (void (*)(uint64_t, const char *, ...))v37;
            v39 = object_getClass((id)a1);
            v40 = class_isMetaClass(v39);
            v41 = object_getClassName((id)a1);
            v42 = sel_getName("selectOSE:");
            v43 = 45;
            if (v40)
              v43 = 43;
            v38(6, "%c[%{public}s %{public}s]:%i VAS APP LABEL: %{public}@", v43, v41, v42, 122, *(_QWORD *)(a1 + 40));
          }
          v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v45 = NFSharedLogGetLogger(v44);
          a2 = objc_claimAutoreleasedReturnValue(v45);
          if (os_log_type_enabled(a2, OS_LOG_TYPE_DEFAULT))
          {
            v46 = object_getClass((id)a1);
            if (class_isMetaClass(v46))
              v47 = 43;
            else
              v47 = 45;
            v48 = object_getClassName((id)a1);
            v49 = sel_getName("selectOSE:");
            v50 = *(void **)(a1 + 40);
            *(_DWORD *)buf = 67110146;
            v176 = v47;
            v177 = 2082;
            v178 = v48;
            v179 = 2082;
            v180 = v49;
            v181 = 1024;
            v182 = 122;
            v183 = 2114;
            v184 = v50;
            _os_log_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i VAS APP LABEL: %{public}@", buf, 0x2Cu);
          }

          v15 = v34;
          v32 = v33;
        }
        v164 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "childWithTag:", 40737));
        if (v164)
        {
          v51 = v32;
          v52 = v15;
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v164, "value"));
          objc_storeStrong((id *)(a1 + 48), v53);

          v54 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v55 = NFLogGetLogger(v54);
          if (v55)
          {
            v56 = (void (*)(uint64_t, const char *, ...))v55;
            v57 = object_getClass((id)a1);
            v58 = class_isMetaClass(v57);
            v59 = object_getClassName((id)a1);
            v60 = sel_getName("selectOSE:");
            v61 = 45;
            if (v58)
              v61 = 43;
            v56(6, "%c[%{public}s %{public}s]:%i VAS APP VERSION: %{public}@", v61, v59, v60, 127, *(_QWORD *)(a1 + 48));
          }
          v62 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v63 = NFSharedLogGetLogger(v62);
          a2 = objc_claimAutoreleasedReturnValue(v63);
          if (os_log_type_enabled(a2, OS_LOG_TYPE_DEFAULT))
          {
            v64 = object_getClass((id)a1);
            if (class_isMetaClass(v64))
              v65 = 43;
            else
              v65 = 45;
            v66 = object_getClassName((id)a1);
            v67 = sel_getName("selectOSE:");
            v68 = *(void **)(a1 + 48);
            *(_DWORD *)buf = 67110146;
            v176 = v65;
            v177 = 2082;
            v178 = v66;
            v179 = 2082;
            v180 = v67;
            v181 = 1024;
            v182 = 127;
            v183 = 2114;
            v184 = v68;
            _os_log_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i VAS APP VERSION: %{public}@", buf, 0x2Cu);
          }

          v15 = v52;
          v32 = v51;
        }
        v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "childWithTag:", 40740));
        if (v155)
        {
          v69 = v32;
          v70 = v15;
          v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v164, "value"));
          objc_storeStrong((id *)(a1 + 56), v71);

          v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v73 = NFLogGetLogger(v72);
          if (v73)
          {
            v74 = (void (*)(uint64_t, const char *, ...))v73;
            v75 = object_getClass((id)a1);
            v76 = class_isMetaClass(v75);
            v77 = object_getClassName((id)a1);
            v78 = sel_getName("selectOSE:");
            v79 = 45;
            if (v76)
              v79 = 43;
            v74(6, "%c[%{public}s %{public}s]:%i VAS APP NONCE: %{public}@", v79, v77, v78, 132, *(_QWORD *)(a1 + 56));
          }
          v80 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v81 = NFSharedLogGetLogger(v80);
          a2 = objc_claimAutoreleasedReturnValue(v81);
          if (os_log_type_enabled(a2, OS_LOG_TYPE_DEFAULT))
          {
            v82 = object_getClass((id)a1);
            if (class_isMetaClass(v82))
              v83 = 43;
            else
              v83 = 45;
            v84 = object_getClassName((id)a1);
            v85 = sel_getName("selectOSE:");
            v86 = *(void **)(a1 + 56);
            *(_DWORD *)buf = 67110146;
            v176 = v83;
            v177 = 2082;
            v178 = v84;
            v179 = 2082;
            v180 = v85;
            v181 = 1024;
            v182 = 132;
            v183 = 2114;
            v184 = v86;
            _os_log_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i VAS APP NONCE: %{public}@", buf, 0x2Cu);
          }

          v15 = v70;
          v32 = v69;
        }
        v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "childWithTag:", 40739));
        v88 = v87;
        if (v87)
        {
          v158 = v32;
          v89 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "value")));
          v90 = objc_msgSend(v89, "bytes");

          v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "value"));
          v92 = objc_msgSend(v91, "length");

          if ((unint64_t)v92 >= 4)
            *(_BYTE *)(a1 + 8) = v90[3];
          v93 = [NFVASSelectResponse alloc];
          v94 = *(void **)(a1 + 40);
          v95 = *(void **)(a1 + 48);
          v154 = *(_BYTE *)(a1 + 8);
          v96 = *(id *)(a1 + 56);
          v97 = v95;
          v98 = v94;
          v15 = v161;
          a2 = sub_100081F0C((id *)&v93->super.isa, v98, v97, v96, v154, (__int16)objc_msgSend(v161, "status"));

          v32 = v158;
        }

        if (v88)
        {
LABEL_64:

          v12 = 0;
          goto LABEL_78;
        }
      }

      a2 = v160;
      v12 = 0;
    }
    v166 = v4;
    v122 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v123 = NFLogGetLogger(v122);
    if (v123)
    {
      v124 = (void (*)(uint64_t, const char *, ...))v123;
      v125 = object_getClass((id)a1);
      v126 = class_isMetaClass(v125);
      v127 = v11;
      v128 = a2;
      v129 = object_getClassName((id)a1);
      v130 = v12;
      v131 = sel_getName("selectOSE:");
      v153 = objc_msgSend(v161, "status");
      v151 = v129;
      v152 = v131;
      v12 = v130;
      v132 = 45;
      if (v126)
        v132 = 43;
      a2 = v128;
      v11 = v127;
      v124(6, "%c[%{public}s %{public}s]:%i SELECT_OSE failed=0x%{public}02X", v132, v151, v152, 152, v153);
    }
    v133 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v134 = NFSharedLogGetLogger(v133);
    v135 = objc_claimAutoreleasedReturnValue(v134);
    if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
    {
      v136 = object_getClass((id)a1);
      if (class_isMetaClass(v136))
        v137 = 43;
      else
        v137 = 45;
      v138 = object_getClassName((id)a1);
      v139 = sel_getName("selectOSE:");
      v140 = objc_msgSend(v161, "status");
      *(_DWORD *)buf = 67110146;
      v176 = v137;
      v177 = 2082;
      v178 = v138;
      v179 = 2082;
      v180 = v139;
      v181 = 1024;
      v182 = 152;
      v183 = 1026;
      LODWORD(v184) = v140;
      _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i SELECT_OSE failed=0x%{public}02X", buf, 0x28u);
    }

    if (a2)
    {
      v141 = v11;
      v142 = a2;
      v143 = objc_alloc((Class)NSError);
      v144 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v171[0] = NSLocalizedDescriptionKey;
      v145 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Not found"));
      v172[0] = v145;
      v172[1] = &off_1002FE340;
      v171[1] = CFSTR("Line");
      v171[2] = CFSTR("Method");
      v146 = v12;
      v147 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("selectOSE:"));
      v172[2] = v147;
      v171[3] = NSDebugDescriptionErrorKey;
      v148 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("selectOSE:"), 153);
      v172[3] = v148;
      v149 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v172, v171, 4));
      v142->isa = (Class)objc_msgSend(v143, "initWithDomain:code:userInfo:", v144, 65, v149);
      v11 = v141;

      v12 = v146;
    }
    v15 = v161;
    a2 = sub_100081F0C((id *)[NFVASSelectResponse alloc], 0, 0, 0, 0, (__int16)objc_msgSend(v161, "status"));
    v4 = v166;
    goto LABEL_78;
  }
  if (a2)
  {
    v162 = v11;
    v13 = a2;
    v14 = objc_alloc((Class)NSError);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v16 = objc_msgSend(v12, "code");
    v187[0] = NSLocalizedDescriptionKey;
    v17 = v4;
    if ((uint64_t)objc_msgSend(v12, "code") > 70)
      v18 = 71;
    else
      v18 = (uint64_t)objc_msgSend(v12, "code");
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E6BB8[v18]));
    v188[0] = v26;
    v188[1] = v12;
    v187[1] = NSUnderlyingErrorKey;
    v187[2] = CFSTR("Line");
    v188[2] = &off_1002FE2F8;
    v187[3] = CFSTR("Method");
    v27 = v12;
    v28 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("selectOSE:"));
    v188[3] = v28;
    v187[4] = NSDebugDescriptionErrorKey;
    v29 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("selectOSE:"), 95);
    v188[4] = v29;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v188, v187, 5));
    v13->isa = (Class)objc_msgSend(v14, "initWithDomain:code:userInfo:", v15, v16, v30);

    v12 = v27;
    a2 = 0;
    v11 = v162;
    v4 = v17;
    goto LABEL_78;
  }
LABEL_79:

  return a2;
}

id sub_1000830AC(unsigned __int8 *a1, void *a2, NSMutableArray **a3)
{
  id v5;
  id v6;
  NSMutableArray *v7;
  char *v8;
  uint64_t v9;
  NFVASRequest *v10;
  void *v11;
  unsigned __int8 v12;
  id v13;
  void *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  NFVASResponse *v28;
  void *v29;
  unsigned int v30;
  void *v31;
  unsigned int v32;
  char v33;
  void *v34;
  void *v35;
  double v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  unsigned int v44;
  BOOL v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  NSData *v50;
  void *v51;
  uint64_t v52;
  void (*v53)(uint64_t, const char *, ...);
  id v54;
  objc_class *v55;
  _BOOL4 v56;
  const char *v57;
  const char *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  NSObject *v63;
  id v64;
  objc_class *v65;
  int v66;
  const char *v67;
  const char *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  void (*v72)(uint64_t, const char *, ...);
  objc_class *v73;
  _BOOL4 v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  NSObject *v79;
  objc_class *v80;
  int v81;
  const char *v82;
  const char *v83;
  id v84;
  uint64_t v85;
  id v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void (*v90)(uint64_t, const char *, ...);
  objc_class *v91;
  _BOOL4 v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  NSObject *v97;
  objc_class *v98;
  int v99;
  const char *v100;
  const char *v101;
  id v102;
  uint64_t v103;
  id v104;
  void *v105;
  uint64_t v106;
  id v107;
  id v108;
  id v109;
  void *v110;
  void *v111;
  NSData *v112;
  void *v113;
  NSData *v114;
  NSData *v115;
  void *v116;
  uint64_t v117;
  void (*v118)(uint64_t, const char *, ...);
  objc_class *v119;
  const char *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  NSObject *v126;
  objc_class *v127;
  int v128;
  const char *v129;
  void *v130;
  void *v131;
  id v132;
  void *v133;
  void *v134;
  id v135;
  void *specific;
  uint64_t Logger;
  void (*v138)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  NSObject *v145;
  objc_class *v146;
  int v147;
  id v148;
  uint64_t v149;
  id v150;
  id v151;
  void *v152;
  void *v153;
  id v154;
  uint64_t v155;
  void *v157;
  uint64_t v158;
  void (*v159)(uint64_t, const char *, ...);
  objc_class *v160;
  _BOOL4 v161;
  const char *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  NSObject *v166;
  objc_class *v167;
  int v168;
  id v169;
  void *v170;
  uint64_t v171;
  void (*v172)(uint64_t, const char *, ...);
  objc_class *v173;
  _BOOL4 v174;
  const char *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  NSObject *v179;
  objc_class *v180;
  int v181;
  const char *v182;
  const char *v183;
  id v184;
  void *v185;
  id v186;
  uint64_t v187;
  void *v188;
  id v189;
  id v190;
  void *v191;
  const char *v192;
  const char *v193;
  const char *v194;
  const char *v195;
  const char *v196;
  const char *Name;
  const char *v198;
  const char *v199;
  const char *v200;
  const char *v201;
  _BOOL4 v202;
  int v203;
  NSMutableArray **v204;
  id v205;
  void *v206;
  void *v207;
  void *v208;
  NSMutableArray *v209;
  char *v210;
  void *v211;
  void *v212;
  unsigned __int8 *v213;
  id v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  id __buf;
  __int16 v220;
  char v221;
  int v222;
  char v223;
  char v224;
  __int16 v225;
  char v226;
  unsigned __int8 v227;
  unsigned __int8 v228;
  _QWORD v229[5];
  _QWORD v230[5];
  _QWORD v231[4];
  _QWORD v232[4];
  _QWORD v233[4];
  _QWORD v234[4];
  uint8_t buf[8];
  _BYTE v236[36];
  __int16 v237;
  void *v238;
  NSErrorUserInfoKey v239;
  const __CFString *v240;
  const __CFString *v241;
  const __CFString *v242;
  NSErrorUserInfoKey v243;

  v214 = a2;
  if (!a1)
  {
    v135 = 0;
    goto LABEL_99;
  }
  v5 = *((id *)a1 + 5);
  if (!objc_msgSend(v5, "length"))
  {

    goto LABEL_87;
  }
  v6 = objc_msgSend(*((id *)a1 + 6), "length");

  if (!v6)
  {
LABEL_87:
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v138 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("performRequests:responses:");
      v142 = 45;
      if (isMetaClass)
        v142 = 43;
      v138(3, "%c[%{public}s %{public}s]:%i Select OSE failed", v142, ClassName, Name, 295);
    }
    v143 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v144 = NFSharedLogGetLogger(v143);
    v145 = objc_claimAutoreleasedReturnValue(v144);
    if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
    {
      v146 = object_getClass(a1);
      if (class_isMetaClass(v146))
        v147 = 43;
      else
        v147 = 45;
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v147;
      *(_WORD *)v236 = 2082;
      *(_QWORD *)&v236[2] = object_getClassName(a1);
      *(_WORD *)&v236[10] = 2082;
      *(_QWORD *)&v236[12] = sel_getName("performRequests:responses:");
      *(_WORD *)&v236[20] = 1024;
      *(_DWORD *)&v236[22] = 295;
      _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Select OSE failed", buf, 0x22u);
    }

    v148 = objc_alloc((Class)NSError);
    v132 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v233[0] = NSLocalizedDescriptionKey;
    v149 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Not found"));
    v234[0] = v149;
    v234[1] = &off_1002FE3B8;
    v233[1] = CFSTR("Line");
    v233[2] = CFSTR("Method");
    v150 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("performRequests:responses:"));
    v234[2] = v150;
    v233[3] = NSDebugDescriptionErrorKey;
    v151 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("performRequests:responses:"), 296);
    v234[3] = v151;
    v152 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v234, v233, 4));
    v153 = v148;
    v154 = v132;
    v155 = 65;
    goto LABEL_97;
  }
  if ((a1[8] & 0xC) == 0)
  {
    v157 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v158 = NFLogGetLogger(v157);
    if (v158)
    {
      v159 = (void (*)(uint64_t, const char *, ...))v158;
      v160 = object_getClass(a1);
      v161 = class_isMetaClass(v160);
      v162 = object_getClassName(a1);
      v198 = sel_getName("performRequests:responses:");
      v163 = 45;
      if (v161)
        v163 = 43;
      v159(3, "%c[%{public}s %{public}s]:%i Remote does not support VAS", v163, v162, v198, 300);
    }
    v164 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v165 = NFSharedLogGetLogger(v164);
    v166 = objc_claimAutoreleasedReturnValue(v165);
    if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
    {
      v167 = object_getClass(a1);
      if (class_isMetaClass(v167))
        v168 = 43;
      else
        v168 = 45;
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v168;
      *(_WORD *)v236 = 2082;
      *(_QWORD *)&v236[2] = object_getClassName(a1);
      *(_WORD *)&v236[10] = 2082;
      *(_QWORD *)&v236[12] = sel_getName("performRequests:responses:");
      *(_WORD *)&v236[20] = 1024;
      *(_DWORD *)&v236[22] = 300;
      _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Remote does not support VAS", buf, 0x22u);
    }

    v169 = objc_alloc((Class)NSError);
    v132 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v231[0] = NSLocalizedDescriptionKey;
    v149 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Feature Not Supported"));
    v232[0] = v149;
    v232[1] = &off_1002FE3D0;
    v231[1] = CFSTR("Line");
    v231[2] = CFSTR("Method");
    v150 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("performRequests:responses:"));
    v232[2] = v150;
    v231[3] = NSDebugDescriptionErrorKey;
    v151 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("performRequests:responses:"), 301);
    v232[3] = v151;
    v152 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v232, v231, 4));
    v153 = v169;
    v154 = v132;
    v155 = 14;
LABEL_97:
    v135 = objc_msgSend(v153, "initWithDomain:code:userInfo:", v154, v155, v152);

    v7 = (NSMutableArray *)v149;
    goto LABEL_98;
  }
  v204 = a3;
  v7 = objc_opt_new(NSMutableArray);
  v210 = (char *)objc_msgSend(v214, "count");
  if (!v210)
  {
LABEL_84:
    if (v204)
    {
      v7 = objc_retainAutorelease(v7);
      v132 = 0;
      v135 = 0;
      *v204 = v7;
    }
    else
    {
      v132 = 0;
      v135 = 0;
    }
    goto LABEL_98;
  }
  v8 = 0;
  v209 = v7;
  v213 = a1;
  while (1)
  {
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v214, "objectAtIndex:", v8));
    v10 = -[NFVASRequest initWithDictionary:]([NFVASRequest alloc], "initWithDictionary:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(-[NFVASRequest terminalProtocol](v10, "terminalProtocol"));
    v12 = objc_msgSend(v11, "unsignedCharValue");

    v225 = -13696;
    v226 = 1;
    v227 = v12;
    v228 = 0;
    v224 = 0;
    v223 = 0;
    v222 = 16917151;
    v221 = 32;
    v220 = 9631;
    v13 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &v222, 5);
    objc_msgSend(v13, "appendBytes:length:", &v220, 3);
    v216 = (void *)objc_claimAutoreleasedReturnValue(-[NFVASRequest merchantId](v10, "merchantId"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v216, "dataUsingEncoding:", 4));
    v15 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x20uLL, 0x100004077774924uLL);
    v217 = v13;
    v218 = (void *)v9;
    v215 = v14;
    if (!v15)
    {
      v21 = objc_alloc((Class)NSError);
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v239 = NSLocalizedDescriptionKey;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      *(_QWORD *)buf = v23;
      *(_QWORD *)v236 = &off_1002FE358;
      v240 = CFSTR("Line");
      v241 = CFSTR("Method");
      *(_QWORD *)&v236[8] = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_getVAS:lastInSequence:error:"));
      v242 = (const __CFString *)NSDebugDescriptionErrorKey;
      v24 = *(id *)&v236[8];
      v25 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_getVAS:lastInSequence:error:"), 190);
      *(_QWORD *)&v236[16] = v25;
      v26 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v239, 4));
      v27 = objc_msgSend(v21, "initWithDomain:code:userInfo:", v22, 34, v26);
      v28 = 0;
      goto LABEL_82;
    }
    v16 = v15;
    v17 = objc_retainAutorelease(v14);
    CC_SHA256(objc_msgSend(v17, "bytes"), (CC_LONG)objc_msgSend(v17, "length"), v16);
    objc_msgSend(v13, "appendBytes:length:", v16, 32);
    free(v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(-[NFVASRequest signupUrl](v10, "signupUrl"));
    v212 = v18;
    if (v18)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "absoluteString"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "dataUsingEncoding:", 4));

    }
    else
    {
      v20 = 0;
    }
    v29 = (void *)objc_claimAutoreleasedReturnValue(-[NFVASRequest terminalProtocol](v10, "terminalProtocol"));
    v30 = objc_msgSend(v29, "unsignedCharValue");

    v211 = v20;
    if (v30 == 1)
    {
      v31 = (void *)objc_claimAutoreleasedReturnValue(-[NFVASRequest terminalCap](v10, "terminalCap"));
      v32 = objc_msgSend(v31, "unsignedCharValue");

      if (v32 == 1)
        v33 = 1;
      else
        v33 = 2;
      if (!v32)
        v33 = 0;
      *(_DWORD *)&buf[3] = 0;
      *(_DWORD *)buf = 272543;
      LODWORD(v239) = 272031;
      WORD2(v239) = 0;
      BYTE6(v239) = v33 | ((v210 - 1 != v8) << 7);
      LODWORD(__buf) = 0;
      arc4random_buf(&__buf, 4uLL);
      *(_DWORD *)&buf[3] = bswap32(__buf);
      objc_msgSend(v13, "appendBytes:length:", buf, 7);
      objc_msgSend(v13, "appendBytes:length:", &v239, 7);
    }
    else if (!objc_msgSend(v20, "length"))
    {
      v88 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v89 = NFLogGetLogger(v88);
      if (v89)
      {
        v90 = (void (*)(uint64_t, const char *, ...))v89;
        v91 = object_getClass(a1);
        v92 = class_isMetaClass(v91);
        v93 = object_getClassName(a1);
        v195 = sel_getName("_getVAS:lastInSequence:error:");
        v94 = 45;
        if (v92)
          v94 = 43;
        v192 = v93;
        a1 = v213;
        v90(3, "%c[%{public}s %{public}s]:%i URL not present.  URL is mandatory!", v94, v192, v195, 223);
      }
      v95 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v96 = NFSharedLogGetLogger(v95);
      v97 = objc_claimAutoreleasedReturnValue(v96);
      if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
      {
        v98 = object_getClass(a1);
        if (class_isMetaClass(v98))
          v99 = 43;
        else
          v99 = 45;
        v100 = object_getClassName(a1);
        v101 = sel_getName("_getVAS:lastInSequence:error:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v99;
        *(_WORD *)v236 = 2082;
        *(_QWORD *)&v236[2] = v100;
        *(_WORD *)&v236[10] = 2082;
        *(_QWORD *)&v236[12] = v101;
        *(_WORD *)&v236[20] = 1024;
        *(_DWORD *)&v236[22] = 223;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i URL not present.  URL is mandatory!", buf, 0x22u);
      }

      v102 = objc_alloc((Class)NSError);
      v103 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v239 = NSLocalizedDescriptionKey;
      v25 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      *(_QWORD *)buf = v25;
      *(_QWORD *)v236 = &off_1002FE370;
      v240 = CFSTR("Line");
      v241 = CFSTR("Method");
      v26 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_getVAS:lastInSequence:error:"));
      *(_QWORD *)&v236[8] = v26;
      v242 = (const __CFString *)NSDebugDescriptionErrorKey;
      v24 = (id)v103;
      v104 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_getVAS:lastInSequence:error:"), 224);
      *(_QWORD *)&v236[16] = v104;
      v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v239, 4));
      v27 = objc_msgSend(v102, "initWithDomain:code:userInfo:", v103, 10, v105);

      goto LABEL_63;
    }
    if (v20)
    {
      if ((unint64_t)objc_msgSend(v20, "length") >= 0x41)
      {
        v70 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v71 = NFLogGetLogger(v70);
        if (v71)
        {
          v72 = (void (*)(uint64_t, const char *, ...))v71;
          v73 = object_getClass(a1);
          v74 = class_isMetaClass(v73);
          v75 = object_getClassName(a1);
          v194 = sel_getName("_getVAS:lastInSequence:error:");
          v76 = 45;
          if (v74)
            v76 = 43;
          v72(3, "%c[%{public}s %{public}s]:%i URL length is greater than 64bytes!", v76, v75, v194, 232);
        }
        v77 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v78 = NFSharedLogGetLogger(v77);
        v79 = objc_claimAutoreleasedReturnValue(v78);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          v80 = object_getClass(a1);
          if (class_isMetaClass(v80))
            v81 = 43;
          else
            v81 = 45;
          v82 = object_getClassName(a1);
          v83 = sel_getName("_getVAS:lastInSequence:error:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v81;
          *(_WORD *)v236 = 2082;
          *(_QWORD *)&v236[2] = v82;
          *(_WORD *)&v236[10] = 2082;
          *(_QWORD *)&v236[12] = v83;
          *(_WORD *)&v236[20] = 1024;
          *(_DWORD *)&v236[22] = 232;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i URL length is greater than 64bytes!", buf, 0x22u);
        }

        v84 = objc_alloc((Class)NSError);
        v85 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v239 = NSLocalizedDescriptionKey;
        v25 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
        *(_QWORD *)buf = v25;
        *(_QWORD *)v236 = &off_1002FE388;
        v240 = CFSTR("Line");
        v241 = CFSTR("Method");
        v26 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_getVAS:lastInSequence:error:"));
        *(_QWORD *)&v236[8] = v26;
        v242 = (const __CFString *)NSDebugDescriptionErrorKey;
        v24 = (id)v85;
        v86 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_getVAS:lastInSequence:error:"), 233);
        *(_QWORD *)&v236[16] = v86;
        v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v239, 4));
        v27 = objc_msgSend(v84, "initWithDomain:code:userInfo:", v85, 10, v87);

        goto LABEL_63;
      }
      *(_WORD *)buf = 10655;
      buf[2] = objc_msgSend(v20, "length");
      objc_msgSend(v13, "appendBytes:length:", buf, 3);
      objc_msgSend(v13, "appendData:", v20);
    }
    v228 = objc_msgSend(v13, "length");
    v24 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &v225, 5);
    objc_msgSend(v24, "appendData:", v13);
    objc_msgSend(v24, "appendBytes:length:", &v224, 1);
    v34 = (void *)*((_QWORD *)a1 + 4);
    v35 = (void *)*((_QWORD *)a1 + 2);
    v36 = *((double *)a1 + 3);
    __buf = 0;
    v37 = v35;
    v38 = v34;
    v39 = sub_1001847DC(v38, v24, v37, &__buf, v36);
    v26 = (id)objc_claimAutoreleasedReturnValue(v39);
    v25 = __buf;

    if ((unint64_t)objc_msgSend(v26, "length") >= 2 && !v25)
    {
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NFResponseAPDU responseWithData:](NFResponseAPDU, "responseWithData:", v26));
      v28 = objc_opt_new(NFVASResponse);
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", objc_msgSend(v40, "status")));
      -[NFVASResponse setStatusCode:](v28, "setStatusCode:", v41);

      v7 = v209;
      if (objc_msgSend(v40, "status") == 36864)
      {
        v42 = (void *)objc_claimAutoreleasedReturnValue(-[NFVASRequest terminalProtocol](v10, "terminalProtocol"));
        v43 = v24;
        v44 = objc_msgSend(v42, "unsignedCharValue");

        v45 = v44 == 1;
        v24 = v43;
        if (v45)
        {
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "subdataWithRange:", 0, (char *)objc_msgSend(v26, "length") - 2));
          v47 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithData:](NFTLV, "TLVWithData:", v46));

          if (objc_msgSend(v47, "tag") == 112)
          {
            v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "childWithTag:", 40743));
            v49 = v48;
            if (v48)
              v50 = (NSData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "value"));
            else
              v50 = objc_opt_new(NSData);
            v112 = v50;
            -[NFVASResponse setVasData:](v28, "setVasData:", v50);

            v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "childWithTag:", 40746));
            v206 = v113;
            if (v113)
              v114 = (NSData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "value"));
            else
              v114 = objc_opt_new(NSData);
            v115 = v114;
            -[NFVASResponse setToken:](v28, "setToken:", v114);

            v116 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v117 = NFLogGetLogger(v116);
            v208 = v47;
            if (v117)
            {
              v118 = (void (*)(uint64_t, const char *, ...))v117;
              v119 = object_getClass(v213);
              v202 = class_isMetaClass(v119);
              v200 = object_getClassName(v213);
              v120 = sel_getName("_getVAS:lastInSequence:error:");
              v121 = (void *)objc_claimAutoreleasedReturnValue(-[NFVASResponse vasData](v28, "vasData"));
              v122 = (void *)objc_claimAutoreleasedReturnValue(-[NFVASResponse token](v28, "token"));
              v196 = v120;
              v47 = v208;
              v123 = 45;
              if (v202)
                v123 = 43;
              v118(6, "%c[%{public}s %{public}s]:%i Rx Data: %{public}@  Rx token:%{public}@", v123, v200, v196, 283, v121, v122);

              v7 = v209;
            }
            v124 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v125 = NFSharedLogGetLogger(v124);
            v126 = objc_claimAutoreleasedReturnValue(v125);
            if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
            {
              v127 = object_getClass(v213);
              if (class_isMetaClass(v127))
                v128 = 43;
              else
                v128 = 45;
              v203 = v128;
              v201 = object_getClassName(v213);
              v129 = sel_getName("_getVAS:lastInSequence:error:");
              v130 = (void *)objc_claimAutoreleasedReturnValue(-[NFVASResponse vasData](v28, "vasData"));
              v131 = (void *)objc_claimAutoreleasedReturnValue(-[NFVASResponse token](v28, "token"));
              *(_DWORD *)buf = 67110402;
              *(_DWORD *)&buf[4] = v203;
              *(_WORD *)v236 = 2082;
              *(_QWORD *)&v236[2] = v201;
              *(_WORD *)&v236[10] = 2082;
              *(_QWORD *)&v236[12] = v129;
              v7 = v209;
              *(_WORD *)&v236[20] = 1024;
              *(_DWORD *)&v236[22] = 283;
              *(_WORD *)&v236[26] = 2114;
              *(_QWORD *)&v236[28] = v130;
              v237 = 2114;
              v238 = v131;
              _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Rx Data: %{public}@  Rx token:%{public}@", buf, 0x36u);

              v47 = v208;
            }

          }
          v24 = v43;
        }
      }

      v27 = 0;
      v25 = 0;
      goto LABEL_81;
    }
    v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v52 = NFLogGetLogger(v51);
    if (v52)
    {
      v53 = (void (*)(uint64_t, const char *, ...))v52;
      v54 = v24;
      v55 = object_getClass(v213);
      v56 = class_isMetaClass(v55);
      v57 = object_getClassName(v213);
      v58 = sel_getName("_getVAS:lastInSequence:error:");
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "description"));
      v193 = v58;
      v24 = v54;
      v60 = 45;
      if (v56)
        v60 = 43;
      v53(3, "%c[%{public}s %{public}s]:%i Transceive error: %{public}@", v60, v57, v193, 254, v59);

    }
    v61 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v62 = NFSharedLogGetLogger(v61);
    v63 = objc_claimAutoreleasedReturnValue(v62);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      v64 = v24;
      v65 = object_getClass(v213);
      if (class_isMetaClass(v65))
        v66 = 43;
      else
        v66 = 45;
      v67 = object_getClassName(v213);
      v68 = sel_getName("_getVAS:lastInSequence:error:");
      v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "description"));
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v66;
      *(_WORD *)v236 = 2082;
      *(_QWORD *)&v236[2] = v67;
      v24 = v64;
      *(_WORD *)&v236[10] = 2082;
      *(_QWORD *)&v236[12] = v68;
      *(_WORD *)&v236[20] = 1024;
      *(_DWORD *)&v236[22] = 254;
      *(_WORD *)&v236[26] = 2114;
      *(_QWORD *)&v236[28] = v69;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Transceive error: %{public}@", buf, 0x2Cu);

    }
    if (objc_msgSend(v25, "code") != (id)64)
    {
      v205 = objc_alloc((Class)NSError);
      v106 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v239 = NSLocalizedDescriptionKey;
      v207 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Tag Error"));
      *(_QWORD *)buf = v207;
      *(_QWORD *)v236 = v25;
      v240 = (const __CFString *)NSUnderlyingErrorKey;
      v241 = CFSTR("Line");
      *(_QWORD *)&v236[8] = &off_1002FE3A0;
      v242 = CFSTR("Method");
      v107 = v24;
      v108 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_getVAS:lastInSequence:error:"));
      *(_QWORD *)&v236[16] = v108;
      v243 = NSDebugDescriptionErrorKey;
      v109 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_getVAS:lastInSequence:error:"), 256);
      *(_QWORD *)&v236[24] = v109;
      v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v239, 5));
      v111 = (void *)v106;
      v27 = objc_retainAutorelease(objc_msgSend(v205, "initWithDomain:code:userInfo:", v106, 29, v110));

      v24 = v107;
LABEL_63:
      v28 = 0;
      goto LABEL_64;
    }
    v27 = objc_retainAutorelease(v25);
    v28 = 0;
    v25 = v27;
LABEL_64:
    v7 = v209;
LABEL_81:
    v23 = v211;
    v22 = v212;
LABEL_82:

    v132 = v27;
    -[NFVASResponse setRequest:](v28, "setRequest:", v10);
    a1 = v213;
    v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v213[8]));
    -[NFVASResponse setMobileCapabilities:](v28, "setMobileCapabilities:", v133);

    if (v132)
      break;
    v134 = (void *)objc_claimAutoreleasedReturnValue(-[NFVASResponse asDictionary](v28, "asDictionary"));
    -[NSMutableArray addObject:](v7, "addObject:", v134);

    if (v210 == ++v8)
      goto LABEL_84;
  }
  v170 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v171 = NFLogGetLogger(v170);
  if (v171)
  {
    v172 = (void (*)(uint64_t, const char *, ...))v171;
    v173 = object_getClass(v213);
    v174 = class_isMetaClass(v173);
    v175 = object_getClassName(v213);
    v199 = sel_getName("performRequests:responses:");
    v176 = 45;
    if (v174)
      v176 = 43;
    v172(3, "%c[%{public}s %{public}s]:%i GetVasData failed", v176, v175, v199, 317);
  }
  v177 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v178 = NFSharedLogGetLogger(v177);
  v179 = objc_claimAutoreleasedReturnValue(v178);
  if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
  {
    v180 = object_getClass(v213);
    if (class_isMetaClass(v180))
      v181 = 43;
    else
      v181 = 45;
    v182 = object_getClassName(v213);
    v183 = sel_getName("performRequests:responses:");
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v181;
    *(_WORD *)v236 = 2082;
    *(_QWORD *)&v236[2] = v182;
    *(_WORD *)&v236[10] = 2082;
    *(_QWORD *)&v236[12] = v183;
    *(_WORD *)&v236[20] = 1024;
    *(_DWORD *)&v236[22] = 317;
    _os_log_impl((void *)&_mh_execute_header, v179, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i GetVasData failed", buf, 0x22u);
  }

  v184 = objc_alloc((Class)NSError);
  v185 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v186 = objc_msgSend(v132, "code");
  v229[0] = NSLocalizedDescriptionKey;
  if ((uint64_t)objc_msgSend(v132, "code") > 70)
    v187 = 71;
  else
    v187 = (uint64_t)objc_msgSend(v132, "code");
  v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E6BB8[v187]));
  v230[0] = v188;
  v230[1] = v132;
  v229[1] = NSUnderlyingErrorKey;
  v229[2] = CFSTR("Line");
  v230[2] = &off_1002FE3E8;
  v229[3] = CFSTR("Method");
  v189 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("performRequests:responses:"));
  v230[3] = v189;
  v229[4] = NSDebugDescriptionErrorKey;
  v190 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("performRequests:responses:"), 318);
  v230[4] = v190;
  v191 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v230, v229, 5));
  v135 = objc_msgSend(v184, "initWithDomain:code:userInfo:", v185, v186, v191);

  v7 = v209;
LABEL_98:

LABEL_99:
  return v135;
}

void sub_100084994(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 16), a2);
}

NFHCEBroadcastECPConfig *sub_1000849F8(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, void *a5)
{
  id v10;
  id v11;
  NFHCEBroadcastECPConfig *v12;
  NFHCEBroadcastECPConfig *v13;

  v10 = a5;
  v11 = a2;
  objc_opt_self(a1);
  v12 = objc_opt_new(NFHCEBroadcastECPConfig);
  v13 = v12;
  if (v12)
  {
    objc_storeStrong((id *)&v12->_ecpFrame, a2);

    v13->_pollDurationInMS = a3;
    objc_storeStrong((id *)&v13->_matchOnFieldResume, a5);

    v13->_maxBroadcastIntervalInMS = a4;
  }
  else
  {

  }
  return v13;
}

void sub_1000856A0(uint64_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  _QWORD *v4;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v8;
  const char *ClassName;
  const char *Name;
  const char *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  const char *v19;
  _QWORD v20[2];
  void (*v21)(uint64_t);
  void *v22;
  os_unfair_lock_s *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  const char *v38;

  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 0;
  v2 = *(os_unfair_lock_s **)(a1 + 32);
  v3 = v2 + 43;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v21 = sub_100085930;
  v22 = &unk_1002E55C8;
  v23 = v2;
  v24 = &v25;
  v4 = v20;
  os_unfair_lock_lock(v3);
  v21((uint64_t)v4);
  os_unfair_lock_unlock(v3);

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
  if (Logger)
  {
    Class = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(Class))
      v8 = 43;
    else
      v8 = 45;
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    if (*((_BYTE *)v26 + 24))
      v11 = "Y";
    else
      v11 = "N";
    Logger(5, "%c[%{public}s %{public}s]:%i Assertion timer expired; connected=%{public}s",
      v8,
      ClassName,
      Name,
      127,
      v11);
  }
  v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v13 = NFSharedLogGetLogger(v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v15))
      v16 = 43;
    else
      v16 = 45;
    v17 = object_getClassName(*(id *)(a1 + 32));
    v18 = sel_getName(*(SEL *)(a1 + 40));
    if (*((_BYTE *)v26 + 24))
      v19 = "Y";
    else
      v19 = "N";
    *(_DWORD *)buf = 67110146;
    v30 = v16;
    v31 = 2082;
    v32 = v17;
    v33 = 2082;
    v34 = v18;
    v35 = 1024;
    v36 = 127;
    v37 = 2082;
    v38 = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Assertion timer expired; connected=%{public}s",
      buf,
      0x2Cu);
  }

  if (!*((_BYTE *)v26 + 24))
    objc_msgSend(*(id *)(a1 + 32), "_didLoseTarget:suspendAssertion:", 0, 0);
  _Block_object_dispose(&v25, 8);
}

void sub_100085904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100085930(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 184);
  *(_QWORD *)(v2 + 184) = 0;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 169);
}

void sub_10008597C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceNow:", *(double *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 184);
  *(_QWORD *)(v3 + 184) = v2;

}

void sub_100085AA4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 169) = 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 184);
  *(_QWORD *)(v2 + 184) = 0;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "stopTimer");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 176);
  *(_QWORD *)(v4 + 176) = 0;

}

id sub_100085B54(void *a1, char a2, void *a3, uint64_t a4)
{
  id v7;
  void *v8;
  id v9;
  void *specific;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  uint64_t v22;
  id v23;
  objc_class *v24;
  _BOOL4 v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *Name;
  const char *v35;
  objc_super v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;

  v7 = a3;
  v8 = v7;
  if (a1)
  {
    if ((a2 & 1) != 0)
    {
      v9 = objc_msgSend(v7, "length");
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      v12 = (void (*)(uint64_t, const char *, ...))Logger;
      if (v9)
      {
        if (Logger)
        {
          Class = object_getClass(a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("_initialRoutingConfigWithEmulation:ecp:pollDurationInMS:");
          v16 = 45;
          if (isMetaClass)
            v16 = 43;
          v12(6, "%c[%{public}s %{public}s]:%i ECP broadcast enabled", v16, ClassName, Name, 180);
        }
        v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v18 = NFSharedLogGetLogger(v17);
        v19 = objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          v20 = object_getClass(a1);
          if (class_isMetaClass(v20))
            v21 = 43;
          else
            v21 = 45;
          *(_DWORD *)buf = 67109890;
          v38 = v21;
          v39 = 2082;
          v40 = object_getClassName(a1);
          v41 = 2082;
          v42 = sel_getName("_initialRoutingConfigWithEmulation:ecp:pollDurationInMS:");
          v43 = 1024;
          v44 = 180;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ECP broadcast enabled", buf, 0x22u);
        }

        v22 = objc_claimAutoreleasedReturnValue(+[NFRoutingConfig hostCardEmulationVASBroadcastWithFrame:lpcdEnable:fieldDetect:pollDuration:](NFRoutingConfig, "hostCardEmulationVASBroadcastWithFrame:lpcdEnable:fieldDetect:pollDuration:", v8, 0, 1, a4));
      }
      else
      {
        if (Logger)
        {
          v24 = object_getClass(a1);
          v25 = class_isMetaClass(v24);
          v26 = object_getClassName(a1);
          v35 = sel_getName("_initialRoutingConfigWithEmulation:ecp:pollDurationInMS:");
          v27 = 45;
          if (v25)
            v27 = 43;
          v12(6, "%c[%{public}s %{public}s]:%i HCE+FD enabled", v27, v26, v35, 187);
        }
        v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v29 = NFSharedLogGetLogger(v28);
        v30 = objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          v31 = object_getClass(a1);
          if (class_isMetaClass(v31))
            v32 = 43;
          else
            v32 = 45;
          *(_DWORD *)buf = 67109890;
          v38 = v32;
          v39 = 2082;
          v40 = object_getClassName(a1);
          v41 = 2082;
          v42 = sel_getName("_initialRoutingConfigWithEmulation:ecp:pollDurationInMS:");
          v43 = 1024;
          v44 = 187;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i HCE+FD enabled", buf, 0x22u);
        }

        v22 = objc_claimAutoreleasedReturnValue(+[NFRoutingConfig hostCardEmulationWithFieldDetect:](NFRoutingConfig, "hostCardEmulationWithFieldDetect:", 1));
      }
    }
    else
    {
      v36.receiver = a1;
      v36.super_class = (Class)_NFHCESession;
      v23 = objc_msgSendSuper2(&v36, "initialRoutingConfig");
      v22 = objc_claimAutoreleasedReturnValue(v23);
    }
    a1 = (void *)v22;
  }

  return a1;
}

void sub_10008615C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008618C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 184) != 0;
  return result;
}

void sub_100086E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_100086E70(uint64_t a1)
{
  id WeakRetained;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *v23;
  _BOOL4 v24;
  const char *v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  NSObject *v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, const char *, ...);
  objc_class *v49;
  _BOOL4 v50;
  const char *v51;
  const char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  objc_class *v56;
  int v57;
  const char *v58;
  const char *v59;
  void *v60;
  NSErrorUserInfoKey v61;
  NSObject *v62;
  uint8_t buf[4];
  int v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  int v70;
  __int16 v71;
  void *v72;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 64));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v11 = 45;
    if (isMetaClass)
      v11 = 43;
    v5(6, "%c[%{public}s %{public}s]:%i %{public}@", v11, ClassName, Name, 337, v10);

  }
  v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v13 = NFSharedLogGetLogger(v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v15))
      v16 = 43;
    else
      v16 = 45;
    v17 = object_getClassName(*(id *)(a1 + 32));
    v18 = sel_getName(*(SEL *)(a1 + 64));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    v64 = v16;
    v65 = 2082;
    v66 = v17;
    v67 = 2082;
    v68 = v18;
    v69 = 1024;
    v70 = 337;
    v71 = 2114;
    v72 = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v44 = objc_msgSend(v43, "setRoutingConfig:", *(_QWORD *)(a1 + 40));

    v45 = sub_10019C0D0((uint64_t)NFSystemPowerConsumptionMonitor);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v45);
    sub_10019CC08((uint64_t)v39);
    v46 = *(_QWORD *)(a1 + 48);
    if (v46)
      (*(void (**)(uint64_t, _QWORD))(v46 + 16))(v46, 0);
    v47 = NFLogGetLogger(2);
    if (v47)
    {
      v48 = (void (*)(uint64_t, const char *, ...))v47;
      v49 = object_getClass(WeakRetained);
      v50 = class_isMetaClass(v49);
      v51 = object_getClassName(WeakRetained);
      v52 = sel_getName(*(SEL *)(a1 + 64));
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
      v54 = 45;
      if (v50)
        v54 = 43;
      v48(6, "%c[%{public}s %{public}s]:%i NFC emulation mode terminated: %@", v54, v51, v52, 348, v53);

    }
    v55 = NFSharedLogGetLogger(2);
    v40 = objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      v56 = object_getClass(WeakRetained);
      if (class_isMetaClass(v56))
        v57 = 43;
      else
        v57 = 45;
      v58 = object_getClassName(WeakRetained);
      v59 = sel_getName(*(SEL *)(a1 + 64));
      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
      *(_DWORD *)buf = 67110146;
      v64 = v57;
      v65 = 2082;
      v66 = v58;
      v67 = 2082;
      v68 = v59;
      v69 = 1024;
      v70 = 348;
      v71 = 2112;
      v72 = v60;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i NFC emulation mode terminated: %@", buf, 0x2Cu);

    }
    goto LABEL_24;
  }
  v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v21 = NFLogGetLogger(v20);
  if (v21)
  {
    v22 = (void (*)(uint64_t, const char *, ...))v21;
    v23 = object_getClass(*(id *)(a1 + 32));
    v24 = class_isMetaClass(v23);
    v25 = object_getClassName(*(id *)(a1 + 32));
    v26 = sel_getName(*(SEL *)(a1 + 64));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v28 = 45;
    if (v24)
      v28 = 43;
    v22(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v28, v25, v26, 339, v27);

  }
  v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v30 = NFSharedLogGetLogger(v29);
  v31 = objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    v32 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v32))
      v33 = 43;
    else
      v33 = 45;
    v34 = object_getClassName(*(id *)(a1 + 32));
    v35 = sel_getName(*(SEL *)(a1 + 64));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v64 = v33;
    v65 = 2082;
    v66 = v34;
    v67 = 2082;
    v68 = v35;
    v69 = 1024;
    v70 = 339;
    v71 = 2114;
    v72 = v36;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v37 = *(_QWORD *)(a1 + 48);
  if (v37)
  {
    v38 = objc_alloc((Class)NSError);
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v61 = NSLocalizedDescriptionKey;
    v40 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v62 = v40;
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v62, &v61, 1));
    v42 = objc_msgSend(v38, "initWithDomain:code:userInfo:", v39, 54, v41);
    (*(void (**)(uint64_t, id))(v37 + 16))(v37, v42);

LABEL_24:
  }

}

void sub_1000875B4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *specific;
  uint64_t Logger;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  id v32;

  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(v5, "length");
  if (!v6 && v7)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "validateReceivedAPDU:", v5))
    {
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remoteObject"));
      -[NSObject didReceiveAPDU:](v8, "didReceiveAPDU:", v5);
    }
    else
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v11 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(*(id *)(a1 + 32));
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 40));
        v14 = 45;
        if (isMetaClass)
          v14 = 43;
        v11(3, "%c[%{public}s %{public}s]:%i APDU disallowed: %{public}@", v14, ClassName, Name, 386, v5);
      }
      v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v16 = NFSharedLogGetLogger(v15);
      v8 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v17 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v17))
          v18 = 43;
        else
          v18 = 45;
        v19 = object_getClassName(*(id *)(a1 + 32));
        v20 = sel_getName(*(SEL *)(a1 + 40));
        *(_DWORD *)buf = 67110146;
        v24 = v18;
        v25 = 2082;
        v26 = v19;
        v27 = 2082;
        v28 = v20;
        v29 = 1024;
        v30 = 386;
        v31 = 2114;
        v32 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i APDU disallowed: %{public}@", buf, 0x2Cu);
      }
    }

  }
  sub_10001D544(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 192), v6);

}

void sub_100087C44(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  id v31;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v9(3, "%c[%{public}s %{public}s]:%i error=%{public}@", v12, ClassName, Name, 422, v6);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      v18 = object_getClassName(*(id *)(a1 + 32));
      v19 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      v23 = v17;
      v24 = 2082;
      v25 = v18;
      v26 = 2082;
      v27 = v19;
      v28 = 1024;
      v29 = 422;
      v30 = 2114;
      v31 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i error=%{public}@", buf, 0x2Cu);
    }
  }
  else
  {
    v15 = objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    sub_1001C91FC((id *)&v15->isa, *(void **)(a1 + 32), 1, 0, v5, 1);
  }

}

void sub_100087F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_100087F3C(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  if (*(_BYTE *)(v1 + 169))
  {
    *(_BYTE *)(*(_QWORD *)(result[5] + 8) + 24) = 1;
    v1 = result[4];
  }
  *(_BYTE *)(v1 + 169) = 0;
  *(_BYTE *)(*(_QWORD *)(result[6] + 8) + 24) = *(_QWORD *)(result[4] + 184) != 0;
  return result;
}

void sub_10008810C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_100088130(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  if (*(_BYTE *)(v1 + 169))
  {
    *(_BYTE *)(*(_QWORD *)(result[5] + 8) + 24) = 1;
    v1 = result[4];
  }
  *(_BYTE *)(v1 + 169) = 0;
  *(_BYTE *)(*(_QWORD *)(result[6] + 8) + 24) = *(_QWORD *)(result[4] + 184) != 0;
  return result;
}

id sub_1000888B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_syncStartEmulationWithCompletion:", *(_QWORD *)(a1 + 40));
}

void sub_100088A0C(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v6;
  const char *ClassName;
  const char *Name;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  void *v17;
  void *v18;
  void (*v19)(uint64_t, const char *, ...);
  objc_class *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  void *v31;
  void *v32;
  void (*v33)(uint64_t, const char *, ...);
  id *v34;
  objc_class *v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  id *v43;
  objc_class *v44;
  int v45;
  const char *v46;
  const char *v47;
  void *v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  os_unfair_lock_s *v57;
  os_unfair_lock_s *v58;
  id v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void (*v63)(uint64_t, const char *, ...);
  objc_class *v64;
  uint64_t v65;
  const char *v66;
  const char *v67;
  void *v68;
  uint64_t v69;
  NSObject *v70;
  objc_class *v71;
  int v72;
  const char *v73;
  const char *v74;
  uint64_t v75;
  id v76;
  void *v77;
  void *v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  void (*v84)(uint64_t, const char *, ...);
  objc_class *v85;
  uint64_t v86;
  const char *v87;
  const char *v88;
  void *v89;
  uint64_t v90;
  NSObject *v91;
  objc_class *v92;
  int v93;
  const char *v94;
  const char *v95;
  uint64_t v96;
  id v97;
  void *v98;
  void *v99;
  id v100;
  id v101;
  void *v102;
  id v103;
  uint64_t v104;
  NSObject *v105;
  id v106;
  unsigned int v107;
  uint64_t v108;
  NSObject *v109;
  id v110;
  int v111;
  void *v112;
  void (*v113)(uint64_t, const char *, ...);
  objc_class *v114;
  uint64_t v115;
  const char *v116;
  const char *v117;
  void *v118;
  uint64_t v119;
  NSObject *v120;
  objc_class *v121;
  int v122;
  const char *v123;
  const char *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  void *v128;
  void *v129;
  uint64_t v130;
  id v131;
  void *v132;
  void *v133;
  void *v134;
  id v135;
  _QWORD v136[5];
  id v137[2];
  _QWORD v138[5];
  NSErrorUserInfoKey v139;
  void *v140;
  _QWORD v141[4];
  _QWORD v142[4];
  _QWORD v143[4];
  _QWORD v144[4];
  NSErrorUserInfoKey v145;
  void *v146;
  uint8_t buf[4];
  _BYTE v148[14];
  __int16 v149;
  const char *v150;
  __int16 v151;
  int v152;
  __int16 v153;
  void *v154;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(Class))
      v6 = 43;
    else
      v6 = 45;
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v6, ClassName, Name, 515, v9);

  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 56));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)v148 = v14;
    *(_WORD *)&v148[4] = 2082;
    *(_QWORD *)&v148[6] = v15;
    v149 = 2082;
    v150 = v16;
    v151 = 1024;
    v152 = 515;
    v153 = 2114;
    v154 = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v18);
  if (v19)
  {
    v20 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v20))
      v21 = 43;
    else
      v21 = 45;
    v22 = object_getClassName(*(id *)(a1 + 32));
    v23 = sel_getName(*(SEL *)(a1 + 56));
    v19(6, "%c[%{public}s %{public}s]:%i %{public}@", v21, v22, v23, 516, *(_QWORD *)(a1 + 40));
  }
  v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v25 = NFSharedLogGetLogger(v24);
  v26 = objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    v27 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v27))
      v28 = 43;
    else
      v28 = 45;
    v29 = object_getClassName(*(id *)(a1 + 32));
    v30 = sel_getName(*(SEL *)(a1 + 56));
    v31 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)v148 = v28;
    *(_WORD *)&v148[4] = 2082;
    *(_QWORD *)&v148[6] = v29;
    v149 = 2082;
    v150 = v30;
    v151 = 1024;
    v152 = 516;
    v153 = 2114;
    v154 = v31;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v32);
    if (v33)
    {
      v34 = (id *)(a1 + 32);
      v35 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v35))
        v36 = 43;
      else
        v36 = 45;
      v37 = object_getClassName(*v34);
      v38 = sel_getName(*(SEL *)(a1 + 56));
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v34, "sessionUID"));
      v33(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v36, v37, v38, 518, v39);

    }
    v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v41 = NFSharedLogGetLogger(v40);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      v43 = (id *)(a1 + 32);
      v44 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v44))
        v45 = 43;
      else
        v45 = 45;
      v46 = object_getClassName(*v43);
      v47 = sel_getName(*(SEL *)(a1 + 56));
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v43, "sessionUID"));
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)v148 = v45;
      *(_WORD *)&v148[4] = 2082;
      *(_QWORD *)&v148[6] = v46;
      v149 = 2082;
      v150 = v47;
      v151 = 1024;
      v152 = 518;
      v153 = 2114;
      v154 = v48;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v49 = *(_QWORD *)(a1 + 48);
    if (v49)
    {
      v50 = objc_alloc((Class)NSError);
      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v145 = NSLocalizedDescriptionKey;
      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v146 = v52;
      v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v146, &v145, 1));
      v54 = objc_msgSend(v50, "initWithDomain:code:userInfo:", v51, 54, v53);
      (*(void (**)(uint64_t, id))(v49 + 16))(v49, v54);

    }
  }
  else
  {
    v55 = *(_QWORD *)(a1 + 40);
    v56 = objc_opt_class(NSData);
    if ((objc_opt_isKindOfClass(v55, v56) & 1) != 0)
    {
      if (objc_msgSend(*(id *)(a1 + 40), "length"))
      {
        v57 = *(os_unfair_lock_s **)(a1 + 32);
        v58 = v57 + 43;
        v138[0] = _NSConcreteStackBlock;
        v138[1] = 3221225472;
        v138[2] = sub_100089880;
        v138[3] = &unk_1002E6E78;
        v138[4] = v57;
        os_unfair_lock_lock(v57 + 43);
        v59 = sub_100089880((uint64_t)v138);
        v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
        os_unfair_lock_unlock(v58);
        if (v60)
        {
          (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
        }
        else
        {
          v104 = NFSharedSignpostLog(v61);
          v105 = objc_claimAutoreleasedReturnValue(v104);
          if (os_signpost_enabled(v105))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v105, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_WRITE", "", buf, 2u);
          }

          v106 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "sendAPDU:", *(_QWORD *)(a1 + 40));
          v107 = v106;
          v108 = NFSharedSignpostLog(v106);
          v109 = objc_claimAutoreleasedReturnValue(v108);
          if (os_signpost_enabled(v109))
          {
            v110 = objc_msgSend(*(id *)(a1 + 40), "length");
            v111 = *(unsigned __int8 *)(a1 + 64);
            *(_DWORD *)buf = 134349568;
            *(_QWORD *)v148 = v110;
            *(_WORD *)&v148[8] = 1026;
            *(_DWORD *)&v148[10] = v107;
            v149 = 1026;
            LODWORD(v150) = v111;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v109, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_WRITE", "len=%{public,signpost.description:attribute}lu, status=%{public,signpost.description:attribute}d, readOnCompletion=%{public,signpost.description:attribute}d", buf, 0x18u);
          }

          v112 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v113 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v112);
          if (v113)
          {
            v114 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v114))
              v115 = 43;
            else
              v115 = 45;
            v116 = object_getClassName(*(id *)(a1 + 32));
            v117 = sel_getName(*(SEL *)(a1 + 56));
            v113(6, "%c[%{public}s %{public}s]:%i isSent: %d", v115, v116, v117, 547, v107);
          }
          v118 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v119 = NFSharedLogGetLogger(v118);
          v120 = objc_claimAutoreleasedReturnValue(v119);
          if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
          {
            v121 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v121))
              v122 = 43;
            else
              v122 = 45;
            v123 = object_getClassName(*(id *)(a1 + 32));
            v124 = sel_getName(*(SEL *)(a1 + 56));
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)v148 = v122;
            *(_WORD *)&v148[4] = 2082;
            *(_QWORD *)&v148[6] = v123;
            v149 = 2082;
            v150 = v124;
            v151 = 1024;
            v152 = 547;
            v153 = 1024;
            LODWORD(v154) = v107;
            _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i isSent: %d", buf, 0x28u);
          }

          if ((v107 & 1) != 0)
          {
            v125 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 192);
            v126 = objc_msgSend(*(id *)(a1 + 40), "length");
            if (v125)
              *(_QWORD *)(v125 + 8) += v126;
            v127 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 192);
            if (v127)
              ++*(_DWORD *)(v127 + 24);
            (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
            if (*(_BYTE *)(a1 + 64))
            {
              objc_initWeak((id *)buf, *(id *)(a1 + 32));
              v128 = *(void **)(a1 + 32);
              v136[0] = _NSConcreteStackBlock;
              v136[1] = 3221225472;
              v136[2] = sub_100089990;
              v136[3] = &unk_1002E6EA0;
              objc_copyWeak(v137, (id *)buf);
              v129 = *(void **)(a1 + 56);
              v136[4] = *(_QWORD *)(a1 + 32);
              v137[1] = v129;
              objc_msgSend(v128, "_asyncReadWithCompletion:", v136);
              objc_destroyWeak(v137);
              objc_destroyWeak((id *)buf);
            }
          }
          else
          {
            v130 = *(_QWORD *)(a1 + 48);
            v131 = objc_alloc((Class)NSError);
            v132 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v139 = NSLocalizedDescriptionKey;
            v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Tag Error"));
            v140 = v133;
            v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v140, &v139, 1));
            v135 = objc_msgSend(v131, "initWithDomain:code:userInfo:", v132, 29, v134);
            (*(void (**)(uint64_t, id))(v130 + 16))(v130, v135);

          }
        }

      }
      else
      {
        v83 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v84 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v83);
        if (v84)
        {
          v85 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v85))
            v86 = 43;
          else
            v86 = 45;
          v87 = object_getClassName(*(id *)(a1 + 32));
          v88 = sel_getName(*(SEL *)(a1 + 56));
          v84(3, "%c[%{public}s %{public}s]:%i Zero length data", v86, v87, v88, 527);
        }
        v89 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v90 = NFSharedLogGetLogger(v89);
        v91 = objc_claimAutoreleasedReturnValue(v90);
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          v92 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v92))
            v93 = 43;
          else
            v93 = 45;
          v94 = object_getClassName(*(id *)(a1 + 32));
          v95 = sel_getName(*(SEL *)(a1 + 56));
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)v148 = v93;
          *(_WORD *)&v148[4] = 2082;
          *(_QWORD *)&v148[6] = v94;
          v149 = 2082;
          v150 = v95;
          v151 = 1024;
          v152 = 527;
          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Zero length data", buf, 0x22u);
        }

        v96 = *(_QWORD *)(a1 + 48);
        v97 = objc_alloc((Class)NSError);
        v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v141[0] = NSLocalizedDescriptionKey;
        v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
        v142[0] = v99;
        v142[1] = &off_1002FE430;
        v141[1] = CFSTR("Line");
        v141[2] = CFSTR("Method");
        v100 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
        v142[2] = v100;
        v141[3] = NSDebugDescriptionErrorKey;
        v101 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 528);
        v142[3] = v101;
        v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v142, v141, 4));
        v103 = objc_msgSend(v97, "initWithDomain:code:userInfo:", v98, 10, v102);
        (*(void (**)(uint64_t, id))(v96 + 16))(v96, v103);

      }
    }
    else
    {
      v62 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v63 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v62);
      if (v63)
      {
        v64 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v64))
          v65 = 43;
        else
          v65 = 45;
        v66 = object_getClassName(*(id *)(a1 + 32));
        v67 = sel_getName(*(SEL *)(a1 + 56));
        v63(3, "%c[%{public}s %{public}s]:%i Invalid data", v65, v66, v67, 521);
      }
      v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v69 = NFSharedLogGetLogger(v68);
      v70 = objc_claimAutoreleasedReturnValue(v69);
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        v71 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v71))
          v72 = 43;
        else
          v72 = 45;
        v73 = object_getClassName(*(id *)(a1 + 32));
        v74 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)v148 = v72;
        *(_WORD *)&v148[4] = 2082;
        *(_QWORD *)&v148[6] = v73;
        v149 = 2082;
        v150 = v74;
        v151 = 1024;
        v152 = 521;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid data", buf, 0x22u);
      }

      v75 = *(_QWORD *)(a1 + 48);
      v76 = objc_alloc((Class)NSError);
      v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v143[0] = NSLocalizedDescriptionKey;
      v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v144[0] = v78;
      v144[1] = &off_1002FE418;
      v143[1] = CFSTR("Line");
      v143[2] = CFSTR("Method");
      v79 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
      v144[2] = v79;
      v143[3] = NSDebugDescriptionErrorKey;
      v80 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 522);
      v144[3] = v80;
      v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v144, v143, 4));
      v82 = objc_msgSend(v76, "initWithDomain:code:userInfo:", v77, 10, v81);
      (*(void (**)(uint64_t, id))(v75 + 16))(v75, v82);

    }
  }
}

void sub_10008985C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

id sub_100089880(uint64_t a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSErrorUserInfoKey v7;
  void *v8;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 168))
    return 0;
  v1 = objc_alloc((Class)NSError);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v7 = NSLocalizedDescriptionKey;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Pending"));
  v8 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
  v5 = objc_msgSend(v1, "initWithDomain:code:userInfo:", v2, 1, v4);

  return v5;
}

void sub_100089990(uint64_t a1, void *a2)
{
  id WeakRetained;
  unsigned int v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "validateReceivedAPDU:", v6);
    if (v6)
    {
      if (v4)
      {
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "remoteObject"));
        objc_msgSend(v5, "didReceiveAPDU:", v6);

      }
    }
  }

}

void sub_100089ABC(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v6;
  const char *ClassName;
  const char *Name;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  void *v17;
  void *v18;
  void (*v19)(uint64_t, const char *, ...);
  id *v20;
  objc_class *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  id *v29;
  objc_class *v30;
  int v31;
  const char *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  os_unfair_lock_s *v41;
  os_unfair_lock_s *v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  id v55;
  os_unfair_lock_s *v56;
  os_unfair_lock_s *v57;
  id v58;
  _QWORD *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  NSObject *v63;
  uint8_t v64[8];
  _QWORD v65[2];
  id (*v66)(id);
  void *v67;
  os_unfair_lock_s *v68;
  id v69;
  _BYTE *v70;
  id v71;
  _QWORD v72[5];
  NSErrorUserInfoKey v73;
  void *v74;
  _BYTE buf[28];
  __int16 v76;
  int v77;
  __int16 v78;
  void *v79;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(Class))
      v6 = 43;
    else
      v6 = 45;
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v6, ClassName, Name, 584, v9);

  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 48));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v14;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = v15;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v16;
    v76 = 1024;
    v77 = 584;
    v78 = 2114;
    v79 = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v18);
    if (v19)
    {
      v20 = (id *)(a1 + 32);
      v21 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v21))
        v22 = 43;
      else
        v22 = 45;
      v23 = object_getClassName(*v20);
      v24 = sel_getName(*(SEL *)(a1 + 48));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v20, "sessionUID"));
      v19(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v22, v23, v24, 586, v25);

    }
    v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v27 = NFSharedLogGetLogger(v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = (id *)(a1 + 32);
      v30 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v30))
        v31 = 43;
      else
        v31 = 45;
      v32 = object_getClassName(*v29);
      v33 = sel_getName(*(SEL *)(a1 + 48));
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v29, "sessionUID"));
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v31;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v32;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v33;
      v76 = 1024;
      v77 = 586;
      v78 = 2114;
      v79 = v34;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v35 = *(_QWORD *)(a1 + 40);
    if (v35)
    {
      v36 = objc_alloc((Class)NSError);
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v73 = NSLocalizedDescriptionKey;
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v74 = v38;
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v74, &v73, 1));
      v40 = objc_msgSend(v36, "initWithDomain:code:userInfo:", v37, 54, v39);
      (*(void (**)(uint64_t, _QWORD, id))(v35 + 16))(v35, 0, v40);

    }
  }
  else
  {
    v41 = *(os_unfair_lock_s **)(a1 + 32);
    v42 = v41 + 43;
    v72[0] = _NSConcreteStackBlock;
    v72[1] = 3221225472;
    v72[2] = sub_10008A1C8;
    v72[3] = &unk_1002E6E78;
    v72[4] = v41;
    os_unfair_lock_lock(v41 + 43);
    v43 = sub_10008A1C8((uint64_t)v72);
    v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    os_unfair_lock_unlock(v42);
    if (v44)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
    else
    {
      v46 = NFSharedSignpostLog(v45);
      v47 = objc_claimAutoreleasedReturnValue(v46);
      if (os_signpost_enabled(v47))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_READ", "", buf, 2u);
      }

      v48 = *(void **)(*(_QWORD *)(a1 + 32) + 160);
      v71 = 0;
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "readApduAndReturnError:", &v71));
      v50 = v71;
      v51 = v50;
      if (!v50)
      {
        v50 = objc_msgSend(v49, "length");
        if (v50)
        {
          v52 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 192);
          v50 = objc_msgSend(v49, "length");
          if (v52)
          {
            *(_QWORD *)(v52 + 16) += v50;
            *(_BYTE *)(v52 + 40) = 1;
          }
        }
      }
      v53 = NFSharedSignpostLog(v50);
      v54 = objc_claimAutoreleasedReturnValue(v53);
      if (os_signpost_enabled(v54))
      {
        v55 = objc_msgSend(v49, "length");
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v55;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v51 == 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_READ", "len=%{public,signpost.description:attribute}lu, status=%{public,signpost.description:attribute}d", buf, 0x12u);
      }

      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      buf[24] = 0;
      v56 = *(os_unfair_lock_s **)(a1 + 32);
      v57 = v56 + 43;
      v65[0] = _NSConcreteStackBlock;
      v65[1] = 3221225472;
      v66 = sub_10008A2E0;
      v67 = &unk_1002E6EF0;
      v68 = v56;
      v58 = v51;
      v69 = v58;
      v70 = buf;
      v59 = v65;
      os_unfair_lock_lock(v57);
      v66(v59);
      os_unfair_lock_unlock(v57);

      v60 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
      {
        v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remoteObject"));
        objc_msgSend(v61, "didDisconnectFromReader");

      }
      v62 = NFSharedSignpostLog(v60);
      v63 = objc_claimAutoreleasedReturnValue(v62);
      if (os_signpost_enabled(v63))
      {
        *(_WORD *)v64 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v63, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_TARGET_LOST", "onRead", v64, 2u);
      }

      _Block_object_dispose(buf, 8);
    }

  }
}

void sub_10008A1A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_10008A1C8(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSErrorUserInfoKey v8;
  void *v9;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 168))
  {
    v2 = objc_alloc((Class)NSError);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v8 = NSLocalizedDescriptionKey;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Pending"));
    v9 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
    v6 = objc_msgSend(v2, "initWithDomain:code:userInfo:", v3, 1, v5);

    return v6;
  }
  else
  {
    *(_BYTE *)(v1 + 168) = 1;
    return 0;
  }
}

id sub_10008A2E0(id result)
{
  id v1;

  *(_BYTE *)(*((_QWORD *)result + 4) + 168) = 0;
  if (*(_BYTE *)(*((_QWORD *)result + 4) + 169))
  {
    v1 = result;
    result = objc_msgSend(*((id *)result + 5), "code");
    if (result == (id)28 || (result = objc_msgSend(*((id *)v1 + 5), "code"), result == (id)62))
    {
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v1 + 6) + 8) + 24) = 1;
      *(_BYTE *)(*((_QWORD *)v1 + 4) + 169) = 0;
    }
  }
  return result;
}

void sub_10008A40C(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  _BOOL4 v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  void *v35;
  uint64_t v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  NSErrorUserInfoKey v42;
  void *v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  void *v53;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v10, ClassName, Name, 642, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    v45 = v15;
    v46 = 2082;
    v47 = v16;
    v48 = 2082;
    v49 = v17;
    v50 = 1024;
    v51 = 642;
    v52 = 2114;
    v53 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v20 = NFLogGetLogger(v19);
    if (v20)
    {
      v21 = (void (*)(uint64_t, const char *, ...))v20;
      v22 = object_getClass(*(id *)(a1 + 32));
      v23 = class_isMetaClass(v22);
      v24 = object_getClassName(*(id *)(a1 + 32));
      v25 = sel_getName(*(SEL *)(a1 + 48));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v27 = 45;
      if (v23)
        v27 = 43;
      v21(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v27, v24, v25, 644, v26);

    }
    v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v29 = NFSharedLogGetLogger(v28);
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v31))
        v32 = 43;
      else
        v32 = 45;
      v33 = object_getClassName(*(id *)(a1 + 32));
      v34 = sel_getName(*(SEL *)(a1 + 48));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v45 = v32;
      v46 = 2082;
      v47 = v33;
      v48 = 2082;
      v49 = v34;
      v50 = 1024;
      v51 = 644;
      v52 = 2114;
      v53 = v35;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v36 = *(_QWORD *)(a1 + 40);
    if (v36)
    {
      v37 = objc_alloc((Class)NSError);
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v42 = NSLocalizedDescriptionKey;
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v43 = v39;
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
      v41 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 54, v40);
      (*(void (**)(uint64_t, _QWORD, id))(v36 + 16))(v36, 0, v41);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_asyncReadWithCompletion:", *(_QWORD *)(a1 + 40));
  }
}

id sub_10008ABE4(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSErrorUserInfoKey v8;
  void *v9;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 168))
  {
    v2 = objc_alloc((Class)NSError);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v8 = NSLocalizedDescriptionKey;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Pending"));
    v9 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
    v6 = objc_msgSend(v2, "initWithDomain:code:userInfo:", v3, 1, v5);

    return v6;
  }
  else
  {
    *(_BYTE *)(v1 + 168) = 1;
    return 0;
  }
}

void sub_10008ACFC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  const char *v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  unsigned int v21;
  __int16 v22[8];
  _QWORD v23[2];
  uint64_t (*v24)(uint64_t);
  void *v25;
  os_unfair_lock_s *v26;
  _BYTE *v27;
  _BYTE buf[24];
  char v29;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 172));
  *(_BYTE *)(v7 + 168) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 172));
  v9 = NFSharedSignpostLog(v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_signpost_enabled(v10))
  {
    v11 = objc_msgSend(v5, "length");
    v12 = "ERROR";
    if (!v6)
      v12 = "SUCCESS";
    *(_DWORD *)buf = 134349314;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_READ", "len=%{public,signpost.description:attribute}lu, status=%{public,signpost.description:attribute}s", buf, 0x16u);
  }

  if (v6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    if (objc_msgSend(v6, "code") == (id)28 || objc_msgSend(v6, "code") == (id)62)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v29 = 0;
      v13 = *(os_unfair_lock_s **)(a1 + 32);
      v14 = v13 + 43;
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v24 = sub_10008AFE8;
      v25 = &unk_1002E55C8;
      v26 = v13;
      v27 = buf;
      v15 = v23;
      os_unfair_lock_lock(v14);
      v24((uint64_t)v15);
      os_unfair_lock_unlock(v14);

      if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remoteObject"));
        objc_msgSend(v17, "didDisconnectFromReader");

      }
      v18 = NFSharedSignpostLog(v16);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_signpost_enabled(v19))
      {
        v22[0] = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_TARGET_LOST", "onRead", (uint8_t *)v22, 2u);
      }

      _Block_object_dispose(buf, 8);
    }
  }
  else
  {
    if (objc_msgSend(v5, "length"))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 192);
      v21 = objc_msgSend(v5, "length");
      if (v20)
      {
        *(_QWORD *)(v20 + 16) += v21;
        *(_BYTE *)(v20 + 40) = 1;
      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_10008AFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008AFE8(uint64_t result)
{
  if (*(_BYTE *)(*(_QWORD *)(result + 32) + 169))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 1;
    *(_BYTE *)(*(_QWORD *)(result + 32) + 169) = 0;
  }
  return result;
}

void sub_10008B0F4(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v6;
  const char *ClassName;
  const char *Name;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  void *v17;
  void *v18;
  void (*v19)(uint64_t, const char *, ...);
  id *v20;
  objc_class *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  id *v29;
  objc_class *v30;
  int v31;
  const char *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  double v43;
  double v44;
  double v45;
  void *v46;
  void *v47;
  uint64_t v48;
  float v49;
  float v50;
  _BOOL4 v51;
  void *v52;
  uint64_t v53;
  void (*v54)(uint64_t, const char *, ...);
  objc_class *v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  objc_class *v62;
  int v63;
  const char *v64;
  const char *v65;
  const char *v66;
  NSObject *v67;
  os_log_type_t v68;
  uint32_t v69;
  void *v70;
  void (*v71)(uint64_t, const char *, ...);
  objc_class *v72;
  uint64_t v73;
  const char *v74;
  const char *v75;
  void *v76;
  uint64_t v77;
  NSObject *v78;
  objc_class *v79;
  int v80;
  const char *v81;
  const char *v82;
  uint64_t v83;
  id v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  void *v89;
  id v90;
  objc_class *v91;
  uint64_t v92;
  const char *v93;
  const char *v94;
  void *v95;
  uint64_t v96;
  objc_class *v97;
  int v98;
  const char *v99;
  const char *v100;
  os_unfair_lock_s *v101;
  os_unfair_lock_s *v102;
  _QWORD *v103;
  id v104;
  void *v105;
  void *v106;
  void (*v107)(uint64_t, const char *, ...);
  objc_class *v108;
  uint64_t v109;
  const char *v110;
  const char *v111;
  void *v112;
  uint64_t v113;
  NSObject *v114;
  objc_class *v115;
  int v116;
  const char *v117;
  const char *v118;
  void *v119;
  void (*v120)(uint64_t, const char *, ...);
  objc_class *v121;
  uint64_t v122;
  const char *v123;
  const char *v124;
  void *v125;
  uint64_t v126;
  NSObject *v127;
  objc_class *v128;
  int v129;
  const char *v130;
  const char *v131;
  uint64_t v132;
  id v133;
  void *v134;
  void *v135;
  id v136;
  id v137;
  void *v138;
  id v139;
  _QWORD v140[2];
  void (*v141)(uint64_t);
  void *v142;
  os_unfair_lock_s *v143;
  uint8_t *v144;
  uint8_t v145[4];
  int v146;
  __int16 v147;
  const char *v148;
  __int16 v149;
  const char *v150;
  __int16 v151;
  int v152;
  uint8_t buf[8];
  _BYTE v154[40];
  _QWORD v155[4];
  _QWORD v156[4];
  _QWORD v157[4];
  _QWORD v158[4];
  NSErrorUserInfoKey v159;
  void *v160;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(Class))
      v6 = 43;
    else
      v6 = 45;
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v6, ClassName, Name, 709, v9);

  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 56));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v14;
    *(_WORD *)v154 = 2082;
    *(_QWORD *)&v154[2] = v15;
    *(_WORD *)&v154[10] = 2082;
    *(_QWORD *)&v154[12] = v16;
    *(_WORD *)&v154[20] = 1024;
    *(_DWORD *)&v154[22] = 709;
    *(_WORD *)&v154[26] = 2114;
    *(_QWORD *)&v154[28] = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "lastKnownRoutingConfig"));

    if (objc_msgSend(v37, "hostMode") != (id)2)
    {
      v70 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v71 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v70);
      if (v71)
      {
        v72 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v72))
          v73 = 43;
        else
          v73 = 45;
        v74 = object_getClassName(*(id *)(a1 + 32));
        v75 = sel_getName(*(SEL *)(a1 + 56));
        v71(3, "%c[%{public}s %{public}s]:%i Emulation has not started", v73, v74, v75, 715);
      }
      v76 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v77 = NFSharedLogGetLogger(v76);
      v78 = objc_claimAutoreleasedReturnValue(v77);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      {
        v79 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v79))
          v80 = 43;
        else
          v80 = 45;
        v81 = object_getClassName(*(id *)(a1 + 32));
        v82 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v80;
        *(_WORD *)v154 = 2082;
        *(_QWORD *)&v154[2] = v81;
        *(_WORD *)&v154[10] = 2082;
        *(_QWORD *)&v154[12] = v82;
        *(_WORD *)&v154[20] = 1024;
        *(_DWORD *)&v154[22] = 715;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Emulation has not started", buf, 0x22u);
      }

      v83 = *(_QWORD *)(a1 + 48);
      v84 = objc_alloc((Class)NSError);
      v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v157[0] = NSLocalizedDescriptionKey;
      v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v158[0] = v86;
      v158[1] = &off_1002FE448;
      v157[1] = CFSTR("Line");
      v157[2] = CFSTR("Method");
      v87 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
      v158[2] = v87;
      v157[3] = NSDebugDescriptionErrorKey;
      v88 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 716);
      v158[3] = v88;
      v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v158, v157, 4));
      v90 = objc_msgSend(v84, "initWithDomain:code:userInfo:", v85, 12, v89);
      (*(void (**)(uint64_t, id))(v83 + 16))(v83, v90);

      goto LABEL_26;
    }
    v42 = objc_msgSend(*(id *)(a1 + 40), "doubleValue");
    v44 = v43;
    v45 = 2.0;
    if (!NFIsInternalBuild(v42))
      goto LABEL_66;
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKey:", CFSTR("MaxEmuAssertionTime")));

    v48 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v47, v48) & 1) == 0)
    {
LABEL_65:

LABEL_66:
      if (v44 < 0.0 || v44 > v45)
      {
        v119 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v120 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v119);
        if (v120)
        {
          v121 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v121))
            v122 = 43;
          else
            v122 = 45;
          v123 = object_getClassName(*(id *)(a1 + 32));
          v124 = sel_getName(*(SEL *)(a1 + 56));
          v120(3, "%c[%{public}s %{public}s]:%i Invalid interval: %f", v122, v123, v124, 737, *(_QWORD *)&v44);
        }
        v125 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v126 = NFSharedLogGetLogger(v125);
        v127 = objc_claimAutoreleasedReturnValue(v126);
        if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
        {
          v128 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v128))
            v129 = 43;
          else
            v129 = 45;
          v130 = object_getClassName(*(id *)(a1 + 32));
          v131 = sel_getName(*(SEL *)(a1 + 56));
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v129;
          *(_WORD *)v154 = 2082;
          *(_QWORD *)&v154[2] = v130;
          *(_WORD *)&v154[10] = 2082;
          *(_QWORD *)&v154[12] = v131;
          *(_WORD *)&v154[20] = 1024;
          *(_DWORD *)&v154[22] = 737;
          *(_WORD *)&v154[26] = 2048;
          *(double *)&v154[28] = v44;
          _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid interval: %f", buf, 0x2Cu);
        }

        v132 = *(_QWORD *)(a1 + 48);
        v133 = objc_alloc((Class)NSError);
        v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v155[0] = NSLocalizedDescriptionKey;
        v135 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
        v156[0] = v135;
        v156[1] = &off_1002FE460;
        v155[1] = CFSTR("Line");
        v155[2] = CFSTR("Method");
        v136 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
        v156[2] = v136;
        v155[3] = NSDebugDescriptionErrorKey;
        v137 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 738);
        v156[3] = v137;
        v138 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v156, v155, 4));
        v139 = objc_msgSend(v133, "initWithDomain:code:userInfo:", v134, 10, v138);
        (*(void (**)(uint64_t, id))(v132 + 16))(v132, v139);

      }
      else
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)v154 = buf;
        *(_QWORD *)&v154[8] = 0x3032000000;
        *(_QWORD *)&v154[16] = sub_10008BF18;
        *(_QWORD *)&v154[24] = sub_10008BF28;
        *(_QWORD *)&v154[32] = 0;
        v101 = *(os_unfair_lock_s **)(a1 + 32);
        v102 = v101 + 43;
        v140[0] = _NSConcreteStackBlock;
        v140[1] = 3221225472;
        v141 = sub_10008BF30;
        v142 = &unk_1002E5EA8;
        v143 = v101;
        v144 = buf;
        v103 = v140;
        os_unfair_lock_lock(v102);
        v141((uint64_t)v103);
        os_unfair_lock_unlock(v102);

        v104 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceNow:", v44);
        v105 = v104;
        if (!*(_QWORD *)(*(_QWORD *)v154 + 40) || objc_msgSend(v104, "compare:") == (id)1)
        {
          v106 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v107 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v106);
          if (v107)
          {
            v108 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v108))
              v109 = 43;
            else
              v109 = 45;
            v110 = object_getClassName(*(id *)(a1 + 32));
            v111 = sel_getName(*(SEL *)(a1 + 56));
            v107(5, "%c[%{public}s %{public}s]:%i Renew timer", v109, v110, v111, 750);
          }
          v112 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v113 = NFSharedLogGetLogger(v112);
          v114 = objc_claimAutoreleasedReturnValue(v113);
          if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
          {
            v115 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v115))
              v116 = 43;
            else
              v116 = 45;
            v117 = object_getClassName(*(id *)(a1 + 32));
            v118 = sel_getName(*(SEL *)(a1 + 56));
            *(_DWORD *)v145 = 67109890;
            v146 = v116;
            v147 = 2082;
            v148 = v117;
            v149 = 2082;
            v150 = v118;
            v151 = 1024;
            v152 = 750;
            _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Renew timer", v145, 0x22u);
          }

          objc_msgSend(*(id *)(a1 + 32), "_syncStartAssertionTimer:", v44);
        }
        (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

        _Block_object_dispose(buf, 8);
      }
      goto LABEL_26;
    }
    objc_msgSend(v47, "floatValue");
    v50 = v49;
    v51 = v49 < 2.0;
    v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v53 = NFLogGetLogger(v52);
    v54 = (void (*)(uint64_t, const char *, ...))v53;
    if (v51)
    {
      if (v53)
      {
        v55 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v55))
          v56 = 43;
        else
          v56 = 45;
        v57 = object_getClassName(*(id *)(a1 + 32));
        v58 = sel_getName(*(SEL *)(a1 + 56));
        v54(4, "%c[%{public}s %{public}s]:%i Invalid max asssert interval override; revert to default",
          v56,
          v57,
          v58,
          728);
      }
      v59 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v60 = NFSharedLogGetLogger(v59);
      v61 = objc_claimAutoreleasedReturnValue(v60);
      v45 = 2.0;
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        goto LABEL_64;
      v62 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v62))
        v63 = 43;
      else
        v63 = 45;
      v64 = object_getClassName(*(id *)(a1 + 32));
      v65 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v63;
      *(_WORD *)v154 = 2082;
      *(_QWORD *)&v154[2] = v64;
      *(_WORD *)&v154[10] = 2082;
      *(_QWORD *)&v154[12] = v65;
      *(_WORD *)&v154[20] = 1024;
      *(_DWORD *)&v154[22] = 728;
      v66 = "%c[%{public}s %{public}s]:%i Invalid max asssert interval override; revert to default";
      v67 = v61;
      v68 = OS_LOG_TYPE_ERROR;
      v69 = 34;
    }
    else
    {
      v45 = v50;
      if (v53)
      {
        v91 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v91))
          v92 = 43;
        else
          v92 = 45;
        v93 = object_getClassName(*(id *)(a1 + 32));
        v94 = sel_getName(*(SEL *)(a1 + 56));
        v54(6, "%c[%{public}s %{public}s]:%i Max assert interval override=%f", v92, v93, v94, 731, *(_QWORD *)&v45);
      }
      v95 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v96 = NFSharedLogGetLogger(v95);
      v61 = objc_claimAutoreleasedReturnValue(v96);
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        goto LABEL_64;
      v97 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v97))
        v98 = 43;
      else
        v98 = 45;
      v99 = object_getClassName(*(id *)(a1 + 32));
      v100 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v98;
      *(_WORD *)v154 = 2082;
      *(_QWORD *)&v154[2] = v99;
      *(_WORD *)&v154[10] = 2082;
      *(_QWORD *)&v154[12] = v100;
      *(_WORD *)&v154[20] = 1024;
      *(_DWORD *)&v154[22] = 731;
      *(_WORD *)&v154[26] = 2048;
      *(double *)&v154[28] = v45;
      v66 = "%c[%{public}s %{public}s]:%i Max assert interval override=%f";
      v67 = v61;
      v68 = OS_LOG_TYPE_DEFAULT;
      v69 = 44;
    }
    _os_log_impl((void *)&_mh_execute_header, v67, v68, v66, buf, v69);
LABEL_64:

    goto LABEL_65;
  }
  v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v18);
  if (v19)
  {
    v20 = (id *)(a1 + 32);
    v21 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v21))
      v22 = 43;
    else
      v22 = 45;
    v23 = object_getClassName(*v20);
    v24 = sel_getName(*(SEL *)(a1 + 56));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v20, "sessionUID"));
    v19(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v22, v23, v24, 711, v25);

  }
  v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v27 = NFSharedLogGetLogger(v26);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    v29 = (id *)(a1 + 32);
    v30 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v30))
      v31 = 43;
    else
      v31 = 45;
    v32 = object_getClassName(*v29);
    v33 = sel_getName(*(SEL *)(a1 + 56));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v29, "sessionUID"));
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v31;
    *(_WORD *)v154 = 2082;
    *(_QWORD *)&v154[2] = v32;
    *(_WORD *)&v154[10] = 2082;
    *(_QWORD *)&v154[12] = v33;
    *(_WORD *)&v154[20] = 1024;
    *(_DWORD *)&v154[22] = 711;
    *(_WORD *)&v154[26] = 2114;
    *(_QWORD *)&v154[28] = v34;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v35 = *(_QWORD *)(a1 + 48);
  if (v35)
  {
    v36 = objc_alloc((Class)NSError);
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v159 = NSLocalizedDescriptionKey;
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v160 = v38;
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v160, &v159, 1));
    v40 = objc_msgSend(v36, "initWithDomain:code:userInfo:", v37, 54, v39);
    (*(void (**)(uint64_t, id))(v35 + 16))(v35, v40);

LABEL_26:
  }
}

void sub_10008BEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008BF18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10008BF28(uint64_t a1)
{

}

void sub_10008BF30(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 184));
}

void sub_10008C000(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  id *v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  _QWORD v32[4];
  _QWORD v33[4];
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  void *v43;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v10, ClassName, Name, 761, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    v35 = v15;
    v36 = 2082;
    v37 = v16;
    v38 = 2082;
    v39 = v17;
    v40 = 1024;
    v41 = 761;
    v42 = 2114;
    v43 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  v20 = NFSharedSignpostLog(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_signpost_enabled(v21))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SESSION_RESUME_FROM_WAITING_ON_FIELD", "", buf, 2u);
  }

  if ((objc_msgSend(*(id *)(a1 + 32), "disableAutoStartOnField") & 1) != 0)
  {
    v22 = (id *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionResumeField"));
    sub_1000035AC(v22, v23, *(void **)(a1 + 32));

    objc_msgSend(*(id *)(a1 + 32), "setSessionResumeField:", 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 40);
    v25 = objc_alloc((Class)NSError);
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v32[0] = NSLocalizedDescriptionKey;
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v33[0] = v27;
    v33[1] = &off_1002FE478;
    v32[1] = CFSTR("Line");
    v32[2] = CFSTR("Method");
    v28 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
    v33[2] = v28;
    v32[3] = NSDebugDescriptionErrorKey;
    v29 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 766);
    v33[3] = v29;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v33, v32, 4));
    v31 = objc_msgSend(v25, "initWithDomain:code:userInfo:", v26, 12, v30);
    (*(void (**)(uint64_t, id))(v24 + 16))(v24, v31);

  }
}

void sub_10008C458(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  _BOOL4 v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  void *v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  void *v45;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v10, ClassName, Name, 781, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 40));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    v37 = v15;
    v38 = 2082;
    v39 = v16;
    v40 = 2082;
    v41 = v17;
    v42 = 1024;
    v43 = 781;
    v44 = 2114;
    v45 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v20 = NFLogGetLogger(v19);
    if (v20)
    {
      v21 = (void (*)(uint64_t, const char *, ...))v20;
      v22 = object_getClass(*(id *)(a1 + 32));
      v23 = class_isMetaClass(v22);
      v24 = object_getClassName(*(id *)(a1 + 32));
      v25 = sel_getName(*(SEL *)(a1 + 40));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v27 = 45;
      if (v23)
        v27 = 43;
      v21(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v27, v24, v25, 783, v26);

    }
    v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v29 = NFSharedLogGetLogger(v28);
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v31))
        v32 = 43;
      else
        v32 = 45;
      v33 = object_getClassName(*(id *)(a1 + 32));
      v34 = sel_getName(*(SEL *)(a1 + 40));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v37 = v32;
      v38 = 2082;
      v39 = v33;
      v40 = 2082;
      v41 = v34;
      v42 = 1024;
      v43 = 783;
      v44 = 2114;
      v45 = v35;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
  }
  else
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "restartDiscovery");
  }
}

void sub_10008C92C(id a1)
{
  uint64_t v1;
  void *v2;
  NFSecureTransactionServicesHandoverSessionInterface *v3;

  v3 = -[NFSecureTransactionServicesHandoverSessionInterface initWithProtocol:]([NFSecureTransactionServicesHandoverSessionInterface alloc], "initWithProtocol:", &OBJC_PROTOCOL___NFSecureTransactionServicesHandoverSessionInterface);
  v1 = objc_claimAutoreleasedReturnValue(-[NFSecureTransactionServicesHandoverBaseSessionInterface protocolInterface](v3, "protocolInterface"));
  v2 = (void *)qword_10032A920;
  qword_10032A920 = v1;

}

void sub_10008CA48(id a1)
{
  uint64_t v1;
  void *v2;
  NFSecureTransactionServicesHandoverSessionCallbacksInterface *v3;

  v3 = -[NFSecureTransactionServicesHandoverSessionCallbacksInterface initWithProtocol:]([NFSecureTransactionServicesHandoverSessionCallbacksInterface alloc], "initWithProtocol:", &OBJC_PROTOCOL___NFSecureTransactionServicesHandoverSessionCallbacksInterface);
  v1 = objc_claimAutoreleasedReturnValue(-[NFSecureTransactionServicesHandoverBaseSessionCallbacksInterface protocolInterface](v3, "protocolInterface"));
  v2 = (void *)qword_10032A930;
  qword_10032A930 = v1;

}

id sub_10008CB24(void *a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *v12;
  _BOOL4 v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  const char *v22;
  const char *v23;
  unsigned int v24;
  id v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  char *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void (*v40)(uint64_t, const char *, ...);
  objc_class *v41;
  _BOOL4 v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  objc_class *v48;
  int v49;
  const char *v50;
  const char *v51;
  const char *v52;
  void *v53;
  uint64_t v54;
  void (*v55)(uint64_t, const char *, ...);
  objc_class *v56;
  _BOOL4 v57;
  id v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  objc_class *v65;
  int v66;
  const char *v67;
  const char *v68;
  unsigned int v69;
  void *v70;
  uint64_t v71;
  void (*v72)(uint64_t, const char *, ...);
  objc_class *v73;
  _BOOL4 v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  NSObject *v79;
  objc_class *v80;
  int v81;
  const char *v82;
  const char *v83;
  id v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void (*v90)(uint64_t, const char *, ...);
  objc_class *v91;
  _BOOL4 v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  objc_class *v97;
  int v98;
  const char *v99;
  const char *v100;
  id v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  id v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  uint64_t v111;
  void (*v112)(uint64_t, const char *, ...);
  objc_class *v113;
  void *v114;
  _BOOL4 v115;
  const char *v116;
  BOOL v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  NSObject *v121;
  objc_class *v122;
  int v123;
  void *v124;
  const char *v125;
  const char *v126;
  void *v127;
  id v128;
  void *specific;
  uint64_t Logger;
  void (*v131)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  objc_class *v137;
  int v138;
  const char *v139;
  const char *v140;
  id v142;
  void *v143;
  void *v144;
  void *v145;
  const char *v146;
  const char *ClassName;
  const char *v148;
  const char *v149;
  const char *v150;
  const char *v151;
  const char *Name;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  void *v156;
  SEL sel;
  id v158;
  id v159;
  NSErrorUserInfoKey v160;
  void *v161;
  NSErrorUserInfoKey v162;
  uint8_t buf[8];
  __int16 v164;
  const char *v165;
  __int16 v166;
  const char *v167;
  __int16 v168;
  int v169;
  __int16 v170;
  _QWORD v171[3];

  v2 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269AD0, 12);
  v158 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "selectByName:error:", v2, &v158));
  v4 = v158;

  if (objc_msgSend(v3, "status") == 36864)
  {
    v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269AE4, 11);
    v159 = 0;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 160, 128, 0, v5, &v159));
    v7 = v159;

    if (objc_msgSend(v6, "status") == 27270)
    {
      v8 = 0;
      byte_10032A940 = 1;
LABEL_83:

      if (!v8)
      {
        v4 = 0;
        goto LABEL_95;
      }
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v131 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("selectSURFApplet");
        v134 = 45;
        if (isMetaClass)
          v134 = 43;
        v131(3, "%c[%{public}s %{public}s]:%i Could not retrieve SURF slot : %{public}@", v134, ClassName, Name, 54, v8);
      }
      v135 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v136 = NFSharedLogGetLogger(v135);
      v26 = objc_claimAutoreleasedReturnValue(v136);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v137 = object_getClass(a1);
        if (class_isMetaClass(v137))
          v138 = 43;
        else
          v138 = 45;
        v139 = object_getClassName(a1);
        v140 = sel_getName("selectSURFApplet");
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v138;
        v164 = 2082;
        v165 = v139;
        v166 = 2082;
        v167 = v140;
        v168 = 1024;
        v169 = 54;
        v170 = 2114;
        v171[0] = v8;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not retrieve SURF slot : %{public}@", buf, 0x2Cu);
      }
      goto LABEL_93;
    }
    if (objc_msgSend(v6, "status") != 36864)
    {
      v53 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v54 = NFLogGetLogger(v53);
      if (v54)
      {
        v55 = (void (*)(uint64_t, const char *, ...))v54;
        v56 = object_getClass(a1);
        v57 = class_isMetaClass(v56);
        v58 = v7;
        v59 = object_getClassName(a1);
        v60 = sel_getName("getSurfSlot");
        v154 = objc_msgSend(v6, "status");
        v61 = 45;
        if (v57)
          v61 = 43;
        v146 = v59;
        v7 = v58;
        v55(3, "%c[%{public}s %{public}s]:%i Failed to list keys inside applet : 0x%04x / %{public}@", v61, v146, v60, 95, v154, v58);
      }
      v62 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v63 = NFSharedLogGetLogger(v62);
      v64 = objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        v65 = object_getClass(a1);
        if (class_isMetaClass(v65))
          v66 = 43;
        else
          v66 = 45;
        v67 = object_getClassName(a1);
        v68 = sel_getName("getSurfSlot");
        v69 = objc_msgSend(v6, "status");
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = v66;
        v164 = 2082;
        v165 = v67;
        v166 = 2082;
        v167 = v68;
        v168 = 1024;
        v169 = 95;
        v170 = 1024;
        LODWORD(v171[0]) = v69;
        WORD2(v171[0]) = 2114;
        *(_QWORD *)((char *)v171 + 6) = v7;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to list keys inside applet : 0x%04x / %{public}@", buf, 0x32u);
      }

      if (v7)
      {
        v8 = v7;
      }
      else
      {
        v84 = objc_alloc((Class)NSError);
        v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v162 = NSLocalizedDescriptionKey;
        v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        *(_QWORD *)buf = v86;
        v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v162, 1));
        v8 = objc_msgSend(v84, "initWithDomain:code:userInfo:", v85, 16, v87);

        v7 = 0;
      }
      goto LABEL_83;
    }
    v156 = v7;
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "response"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithData:](NFTLV, "TLVWithData:", v29));

    v155 = v30;
    if (!v30)
    {
      v70 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v71 = NFLogGetLogger(v70);
      if (v71)
      {
        v72 = (void (*)(uint64_t, const char *, ...))v71;
        v73 = object_getClass(a1);
        v74 = class_isMetaClass(v73);
        v75 = object_getClassName(a1);
        v149 = sel_getName("getSurfSlot");
        v76 = 45;
        if (v74)
          v76 = 43;
        v72(3, "%c[%{public}s %{public}s]:%i Failed to list keys, expected top level TLV", v76, v75, v149, 102);
      }
      v77 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v78 = NFSharedLogGetLogger(v77);
      v79 = objc_claimAutoreleasedReturnValue(v78);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        v80 = object_getClass(a1);
        if (class_isMetaClass(v80))
          v81 = 43;
        else
          v81 = 45;
        v82 = object_getClassName(a1);
        v83 = sel_getName("getSurfSlot");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v81;
        v164 = 2082;
        v165 = v82;
        v166 = 2082;
        v167 = v83;
        v168 = 1024;
        v169 = 102;
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to list keys, expected top level TLV", buf, 0x22u);
      }

      if (v7)
      {
        v8 = v7;
      }
      else
      {
        v101 = objc_alloc((Class)NSError);
        v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v162 = NSLocalizedDescriptionKey;
        v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        *(_QWORD *)buf = v103;
        v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v162, 1));
        v8 = objc_msgSend(v101, "initWithDomain:code:userInfo:", v102, 16, v104);

        v7 = 0;
      }
      v105 = 0;
      goto LABEL_82;
    }
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "value"));
    v32 = (char *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v31));

    if (objc_msgSend(v32, "count") == (id)2)
    {
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectAtIndex:", 1));
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "value"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v34));

      if (objc_msgSend(v35, "count"))
      {
        if (objc_msgSend(v35, "count") != (id)1)
        {
          v110 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v111 = NFLogGetLogger(v110);
          if (v111)
          {
            v112 = (void (*)(uint64_t, const char *, ...))v111;
            v113 = object_getClass(a1);
            v114 = v35;
            v115 = class_isMetaClass(v113);
            v116 = object_getClassName(a1);
            v151 = sel_getName("getSurfSlot");
            v117 = !v115;
            v35 = v114;
            v118 = 45;
            if (!v117)
              v118 = 43;
            v112(3, "%c[%{public}s %{public}s]:%i Expecting 1 key at most", v118, v116, v151, 122);
          }
          v119 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v120 = NFSharedLogGetLogger(v119);
          v121 = objc_claimAutoreleasedReturnValue(v120);
          if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
          {
            v122 = object_getClass(a1);
            if (class_isMetaClass(v122))
              v123 = 43;
            else
              v123 = 45;
            v124 = v35;
            v125 = object_getClassName(a1);
            v126 = sel_getName("getSurfSlot");
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v123;
            v164 = 2082;
            v165 = v125;
            v35 = v124;
            v166 = 2082;
            v167 = v126;
            v168 = 1024;
            v169 = 122;
            _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Expecting 1 key at most", buf, 0x22u);
          }

          if (v7)
          {
            v8 = v7;
            v32 = (char *)v35;
          }
          else
          {
            v142 = objc_alloc((Class)NSError);
            sel = (SEL)v35;
            v143 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v162 = NSLocalizedDescriptionKey;
            v144 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
            *(_QWORD *)buf = v144;
            v145 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v162, 1));
            v8 = objc_msgSend(v142, "initWithDomain:code:userInfo:", v143, 16, v145);

            v32 = (char *)sel;
          }
          goto LABEL_81;
        }
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "objectAtIndex:", 0));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "value"));
        v32 = (char *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v37));

        if ((unint64_t)objc_msgSend(v32, "count") <= 1)
        {
          v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v39 = NFLogGetLogger(v38);
          if (v39)
          {
            v40 = (void (*)(uint64_t, const char *, ...))v39;
            v41 = object_getClass(a1);
            v42 = class_isMetaClass(v41);
            v43 = object_getClassName(a1);
            v148 = sel_getName("getSurfSlot");
            v44 = 45;
            if (v42)
              v44 = 43;
            v40(3, "%c[%{public}s %{public}s]:%i Expecting at least two TLVs for KeyInSlot", v44, v43, v148, 129);
          }
          v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v46 = NFSharedLogGetLogger(v45);
          v47 = objc_claimAutoreleasedReturnValue(v46);
          if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
            goto LABEL_63;
          v48 = object_getClass(a1);
          if (class_isMetaClass(v48))
            v49 = 43;
          else
            v49 = 45;
          v50 = object_getClassName(a1);
          v51 = sel_getName("getSurfSlot");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v49;
          v164 = 2082;
          v165 = v50;
          v166 = 2082;
          v167 = v51;
          v168 = 1024;
          v169 = 129;
          v52 = "%c[%{public}s %{public}s]:%i Expecting at least two TLVs for KeyInSlot";
LABEL_62:
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, v52, buf, 0x22u);
LABEL_63:

          v7 = v156;
          if (v156)
          {
            v8 = v156;
          }
          else
          {
            v106 = objc_alloc((Class)NSError);
            v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v162 = NSLocalizedDescriptionKey;
            v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
            *(_QWORD *)buf = v108;
            v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v162, 1));
            v8 = objc_msgSend(v106, "initWithDomain:code:userInfo:", v107, 16, v109);

            v7 = 0;
          }
          goto LABEL_81;
        }
        v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectAtIndex:", 1));
        v128 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "value")));
        byte_10032A940 = *((_BYTE *)objc_msgSend(v128, "bytes") + 1);

        v8 = 0;
      }
      else
      {
        v8 = 0;
        byte_10032A940 = 0;
        v32 = (char *)v35;
      }
LABEL_81:
      v105 = v155;

LABEL_82:
      goto LABEL_83;
    }
    v88 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v89 = NFLogGetLogger(v88);
    if (v89)
    {
      v90 = (void (*)(uint64_t, const char *, ...))v89;
      v91 = object_getClass(a1);
      v92 = class_isMetaClass(v91);
      v93 = object_getClassName(a1);
      v150 = sel_getName("getSurfSlot");
      v94 = 45;
      if (v92)
        v94 = 43;
      v90(3, "%c[%{public}s %{public}s]:%i Failed to list keys, expected version and sequence TLVs", v94, v93, v150, 109);
    }
    v95 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v96 = NFSharedLogGetLogger(v95);
    v47 = objc_claimAutoreleasedReturnValue(v96);
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      goto LABEL_63;
    v97 = object_getClass(a1);
    if (class_isMetaClass(v97))
      v98 = 43;
    else
      v98 = 45;
    v99 = object_getClassName(a1);
    v100 = sel_getName("getSurfSlot");
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v98;
    v164 = 2082;
    v165 = v99;
    v166 = 2082;
    v167 = v100;
    v168 = 1024;
    v169 = 109;
    v52 = "%c[%{public}s %{public}s]:%i Failed to list keys, expected version and sequence TLVs";
    goto LABEL_62;
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFLogGetLogger(v9);
  if (v10)
  {
    v11 = (void (*)(uint64_t, const char *, ...))v10;
    v12 = object_getClass(a1);
    v13 = class_isMetaClass(v12);
    v14 = object_getClassName(a1);
    v15 = sel_getName("selectSURFApplet");
    v153 = objc_msgSend(v3, "status");
    v16 = 45;
    if (v13)
      v16 = 43;
    v11(3, "%c[%{public}s %{public}s]:%i Failed to select applet: 0x%04x / %{public}@", v16, v14, v15, 47, v153, v4);
  }
  v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v18 = NFSharedLogGetLogger(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    v20 = object_getClass(a1);
    if (class_isMetaClass(v20))
      v21 = 43;
    else
      v21 = 45;
    v22 = object_getClassName(a1);
    v23 = sel_getName("selectSURFApplet");
    v24 = objc_msgSend(v3, "status");
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = v21;
    v164 = 2082;
    v165 = v22;
    v166 = 2082;
    v167 = v23;
    v168 = 1024;
    v169 = 47;
    v170 = 1024;
    LODWORD(v171[0]) = v24;
    WORD2(v171[0]) = 2114;
    *(_QWORD *)((char *)v171 + 6) = v4;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select applet: 0x%04x / %{public}@", buf, 0x32u);
  }

  if (!v4)
  {
    v25 = objc_alloc((Class)NSError);
    v26 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v160 = NSLocalizedDescriptionKey;
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v161 = v27;
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v161, &v160, 1));
    v8 = objc_msgSend(v25, "initWithDomain:code:userInfo:", v26, 16, v28);

LABEL_93:
    v4 = v8;
  }
LABEL_95:

  return v4;
}

void sub_10008DA38(void *a1)
{
  id v2;
  void *v3;
  id v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  id v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  unsigned int v32;
  __int16 v33;
  id v34;

  if (a1)
  {
    v2 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269ADC, 8);
    v22 = 0;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "selectByName:error:", v2, &v22));
    v4 = v22;

    if (objc_msgSend(v3, "status") != 36864)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v7 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("deselectSURFApplet");
        v21 = objc_msgSend(v3, "status");
        v12 = 45;
        if (isMetaClass)
          v12 = 43;
        v7(3, "%c[%{public}s %{public}s]:%i Failed to deselect applet: 0x%04x / %{public}@", v12, ClassName, Name, 67, v21, v4);
      }
      v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v14 = NFSharedLogGetLogger(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = object_getClass(a1);
        if (class_isMetaClass(v16))
          v17 = 43;
        else
          v17 = 45;
        v18 = object_getClassName(a1);
        v19 = sel_getName("deselectSURFApplet");
        v20 = objc_msgSend(v3, "status");
        *(_DWORD *)buf = 67110402;
        v24 = v17;
        v25 = 2082;
        v26 = v18;
        v27 = 2082;
        v28 = v19;
        v29 = 1024;
        v30 = 67;
        v31 = 1024;
        v32 = v20;
        v33 = 2114;
        v34 = v4;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to deselect applet: 0x%04x / %{public}@", buf, 0x32u);
      }

    }
  }
}

id sub_10008DC64(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *specific;
  uint64_t Logger;
  void (*v16)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  int v31;
  void *v32;
  void *v33;
  void *v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  void *v49;
  _QWORD v50[2];
  _QWORD v51[3];

  if (!a1)
    return 0;
  v3 = __rev16(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:unsignedChar:](NFTLV, "TLVWithTag:unsignedChar:", 2, 1));
  v51[0] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:unsignedShort:](NFTLV, "TLVWithTag:unsignedShort:", 2, 416));
  v51[1] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:unsignedChar:](NFTLV, "TLVWithTag:unsignedChar:", 2, 1));
  v50[0] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:unsignedShort:](NFTLV, "TLVWithTag:unsignedShort:", 4, v3));
  v50[1] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v50, 2));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 48, v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "asData"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 4, v10));
  v51[2] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v51, 3));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 48, v12));
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "asData"));

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v16 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("deleteKeyCommandWithSlot:error:");
    v21 = byte_10032A940;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "NF_asHexString"));
    v23 = 45;
    if (isMetaClass)
      v23 = 43;
    v16(6, "%c[%{public}s %{public}s]:%i Using non-legacy delete command slot %d : %{public}@", v23, ClassName, Name, 175, v21, v22);

  }
  v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v25 = NFSharedLogGetLogger(v24);
  v26 = objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    v27 = object_getClass(a1);
    if (class_isMetaClass(v27))
      v28 = 43;
    else
      v28 = 45;
    v29 = object_getClassName(a1);
    v30 = sel_getName("deleteKeyCommandWithSlot:error:");
    v31 = byte_10032A940;
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "NF_asHexString"));
    *(_DWORD *)buf = 67110402;
    v39 = v28;
    v40 = 2082;
    v41 = v29;
    v42 = 2082;
    v43 = v30;
    v44 = 1024;
    v45 = 175;
    v46 = 1024;
    v47 = v31;
    v48 = 2114;
    v49 = v32;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Using non-legacy delete command slot %d : %{public}@", buf, 0x32u);

  }
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 160, 128, 0, v37, a3));

  return v33;
}

NSErrorUserInfoKey sub_10008DFD8(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSErrorUserInfoKey v14;
  NSErrorUserInfoKey v15;
  id v16;
  NSMutableArray *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *v31;
  _BOOL4 v32;
  const char *v33;
  void *v34;
  const char *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  objc_class *v41;
  void *v42;
  int v43;
  const char *v44;
  const char *v45;
  void *v46;
  void *v47;
  void *v48;
  NSMutableData *v49;
  NSErrorUserInfoKey v50;
  void *v51;
  id v52;
  void *v53;
  uint64_t v54;
  void (*v55)(uint64_t, const char *, ...);
  objc_class *v56;
  const char *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  NSObject *v62;
  objc_class *v63;
  int v64;
  const char *v65;
  const char *v66;
  void *v67;
  id v68;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  NSString *v73;
  void *specific;
  uint64_t Logger;
  void (*v76)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  void *v80;
  const char *Name;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  NSObject *v85;
  objc_class *v86;
  int v87;
  const char *v88;
  const char *v89;
  unsigned int v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void (*v95)(uint64_t, const char *, ...);
  objc_class *v96;
  _BOOL4 v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  NSObject *v102;
  objc_class *v103;
  int v104;
  const char *v105;
  const char *v106;
  void *v107;
  id v108;
  uint64_t v109;
  char *v110;
  void *v111;
  void *v112;
  id v113;
  void *v114;
  NSMutableArray *v115;
  void *v116;
  void *v117;
  void *v118;
  uint64_t v119;
  void (*v120)(uint64_t, const char *, ...);
  objc_class *v121;
  _BOOL4 v122;
  const char *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  NSObject *v127;
  objc_class *v128;
  int v129;
  const char *v130;
  const char *v131;
  NSMutableData *v132;
  NSString *v133;
  void *v134;
  unsigned __int8 v135;
  NSMutableData *v136;
  void *v137;
  void *v138;
  uint64_t v139;
  void (*v140)(uint64_t, const char *, ...);
  objc_class *v141;
  _BOOL4 v142;
  const char *v143;
  const char *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  NSObject *v148;
  objc_class *v149;
  int v150;
  const char *v151;
  const char *v152;
  NSUInteger v153;
  id v154;
  uint64_t v155;
  void *v156;
  void *v157;
  void *v158;
  id v159;
  void *v160;
  void *v161;
  uint64_t v162;
  void (*v163)(uint64_t, const char *, ...);
  objc_class *v164;
  _BOOL4 v165;
  const char *v166;
  const char *v167;
  uint64_t v168;
  void *v169;
  void *v170;
  uint64_t v171;
  NSObject *v172;
  objc_class *v173;
  int v174;
  const char *v175;
  const char *v176;
  unsigned int v177;
  id v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  uint64_t v183;
  void (*v184)(uint64_t, const char *, ...);
  objc_class *v185;
  _BOOL4 v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  NSObject *v190;
  objc_class *v191;
  int v192;
  const char *v193;
  const char *v194;
  NSMutableData *v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  void (*v199)(uint64_t, const char *, ...);
  objc_class *v200;
  _BOOL4 v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  NSObject *v205;
  objc_class *v206;
  int v207;
  const char *v208;
  const char *v209;
  id v210;
  char *v211;
  id v212;
  id v213;
  uint64_t v214;
  void *i;
  void *v216;
  unsigned int v217;
  BOOL v218;
  void *v221;
  uint64_t v222;
  void (*v223)(uint64_t, const char *, ...);
  objc_class *v224;
  _BOOL4 v225;
  uint64_t v226;
  NSMutableArray *v227;
  void *v228;
  uint64_t v229;
  NSObject *v230;
  objc_class *v231;
  int v232;
  const char *v233;
  const char *v234;
  void *v235;
  void *v236;
  void *v237;
  NSMutableData *v238;
  void *v239;
  void *v240;
  objc_class *v241;
  _BOOL4 v242;
  void *v243;
  const char *v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  NSObject *v248;
  objc_class *v249;
  int v250;
  const char *v251;
  const char *v252;
  void *v253;
  id v254;
  void *v255;
  void *v256;
  id v257;
  NSMutableArray *v258;
  void *v259;
  void *v260;
  char *v261;
  void *v262;
  const char *v264;
  const char *v265;
  const char *v266;
  const char *v267;
  const char *v268;
  const char *v269;
  const char *v270;
  const char *v271;
  const char *v272;
  const char *v273;
  const char *v274;
  const char *v275;
  id v276;
  uint64_t v277;
  id v278;
  uint64_t v279;
  NSMutableData *v280;
  _QWORD *v281;
  _BOOL4 v282;
  char *v283;
  id v284;
  id v285;
  uint64_t v286;
  const char *v287;
  NSMutableArray *v288;
  NSMutableData *v289;
  NSMutableArray *v290;
  id v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  int v296;
  __int16 v297;
  char v298;
  __int16 v299;
  __int16 v300;
  id v301;
  id v302;
  _QWORD v303[3];
  _QWORD v304[3];
  _BYTE v305[128];
  NSErrorUserInfoKey v306;
  void *v307;
  _QWORD v308[3];
  _QWORD v309[3];
  NSErrorUserInfoKey v310;
  void *v311;
  _QWORD v312[3];
  _QWORD v313[3];
  NSErrorUserInfoKey v314;
  char *v315;
  _QWORD v316[3];
  _QWORD v317[3];
  NSErrorUserInfoKey v318;
  void *v319;
  _QWORD v320[3];
  _QWORD v321[3];
  uint8_t buf[8];
  __int16 v323;
  const char *v324;
  __int16 v325;
  const char *v326;
  __int16 v327;
  int v328;
  __int16 v329;
  _BYTE v330[14];
  _QWORD v331[3];
  _QWORD v332[3];
  NSErrorUserInfoKey v333;
  NSErrorUserInfoKey v334;

  v5 = a2;
  if (!a1)
  {
    v15 = 0;
    goto LABEL_164;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  v7 = objc_msgSend(v6, "getTimestamp");

  v8 = sub_10008CB24(a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (!v9)
  {
    v301 = 0;
    v16 = sub_10008DC64(a1, byte_10032A940, (uint64_t)&v301);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v14 = (NSErrorUserInfoKey)v301;
    if (!v13
      || objc_msgSend(v13, "status") != 36864 && objc_msgSend(v13, "status") != 27272)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v76 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        v80 = a1;
        Name = sel_getName("performPeerPaymentEnrollment:response:");
        v277 = objc_msgSend(v13, "status");
        v269 = Name;
        a1 = v80;
        v82 = 45;
        if (isMetaClass)
          v82 = 43;
        v76(3, "%c[%{public}s %{public}s]:%i Failed to delete existing key : 0x%x / %{public}@", v82, ClassName, v269, 265, v277, v14);
      }
      v83 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v84 = NFSharedLogGetLogger(v83);
      v85 = objc_claimAutoreleasedReturnValue(v84);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        v86 = object_getClass(a1);
        if (class_isMetaClass(v86))
          v87 = 43;
        else
          v87 = 45;
        v88 = object_getClassName(a1);
        v89 = sel_getName("performPeerPaymentEnrollment:response:");
        v90 = objc_msgSend(v13, "status");
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = v87;
        v323 = 2082;
        v324 = v88;
        v325 = 2082;
        v326 = v89;
        v327 = 1024;
        v328 = 265;
        v329 = 1024;
        *(_DWORD *)v330 = v90;
        *(_WORD *)&v330[4] = 2114;
        *(_QWORD *)&v330[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to delete existing key : 0x%x / %{public}@", buf, 0x32u);
      }

      v321[0] = &off_1002FE4A8;
      v320[0] = CFSTR("peerPaymentEnrollmentErrorStep");
      v320[1] = CFSTR("peerPaymentEnrollmentErrorCode");
      v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSString code](v14, "code")));
      v321[1] = v91;
      v320[2] = CFSTR("peerPaymentEnrollmentStartTime");
      v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v7));
      v321[2] = v92;
      v17 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v321, v320, 3));

      sub_1001ECEE8((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v17);
      if (v14)
      {
        v14 = v14;
        v15 = v14;
      }
      else
      {
        v113 = objc_alloc((Class)NSError);
        v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v318 = NSLocalizedDescriptionKey;
        v115 = v17;
        v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        v319 = v116;
        v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v319, &v318, 1));
        v15 = (NSErrorUserInfoKey)objc_msgSend(v113, "initWithDomain:code:userInfo:", v114, 16, v117);

        v17 = v115;
        v14 = 0;
      }
      goto LABEL_162;
    }
    v17 = objc_opt_new(NSMutableArray);
    if (objc_msgSend(v5, "length") != (id)32)
    {
      v93 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v94 = NFLogGetLogger(v93);
      if (v94)
      {
        v95 = (void (*)(uint64_t, const char *, ...))v94;
        v96 = object_getClass(a1);
        v97 = class_isMetaClass(v96);
        v98 = object_getClassName(a1);
        v270 = sel_getName("performPeerPaymentEnrollment:response:");
        v99 = 45;
        if (v97)
          v99 = 43;
        v95(3, "%c[%{public}s %{public}s]:%i Invalid length for auth token", v99, v98, v270, 282);
      }
      v288 = v17;
      v100 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v101 = NFSharedLogGetLogger(v100);
      v102 = objc_claimAutoreleasedReturnValue(v101);
      if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
      {
        v103 = object_getClass(a1);
        if (class_isMetaClass(v103))
          v104 = 43;
        else
          v104 = 45;
        v105 = object_getClassName(a1);
        v106 = sel_getName("performPeerPaymentEnrollment:response:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v104;
        v323 = 2082;
        v324 = v105;
        v325 = 2082;
        v326 = v106;
        v327 = 1024;
        v328 = 282;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid length for auth token", buf, 0x22u);
      }

      v316[0] = CFSTR("peerPaymentEnrollmentErrorStep");
      v316[1] = CFSTR("peerPaymentEnrollmentErrorCode");
      v317[0] = &off_1002FE4C0;
      v317[1] = &off_1002FE4D8;
      v316[2] = CFSTR("peerPaymentEnrollmentStartTime");
      v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v7));
      v317[2] = v107;
      v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v317, v316, 3));

      sub_1001ECEE8((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v48);
      v108 = objc_alloc((Class)NSError);
      v109 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v314 = NSLocalizedDescriptionKey;
      v110 = (char *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v315 = v110;
      v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v315, &v314, 1));
      v112 = (void *)v109;
      v15 = (NSErrorUserInfoKey)objc_msgSend(v108, "initWithDomain:code:userInfo:", v109, 10, v111);

      v17 = v288;
      goto LABEL_161;
    }
    v284 = v7;
    v285 = v5;
    v281 = a3;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 24352, v5));
    -[NSMutableArray addObject:](v17, "addObject:", v18);

    v300 = 256;
    v19 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v300, 2);
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 81, v19));
    -[NSMutableArray addObject:](v17, "addObject:", v20);

    v299 = 257;
    v21 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v299, 2);
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 82, v21));
    -[NSMutableArray addObject:](v17, "addObject:", v22);

    v297 = 513;
    v298 = 4;
    v23 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v297, 3);
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 85, v23));
    -[NSMutableArray addObject:](v17, "addObject:", v24);

    v296 = -65536;
    v25 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v296, 4);
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 87, v25));
    -[NSMutableArray addObject:](v17, "addObject:", v26);

    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 32551, v17));
    v286 = objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "asData"));

    v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v29 = NFLogGetLogger(v28);
    if (v29)
    {
      v30 = (void (*)(uint64_t, const char *, ...))v29;
      v31 = object_getClass(a1);
      v32 = class_isMetaClass(v31);
      v33 = object_getClassName(a1);
      v34 = a1;
      v35 = sel_getName("performPeerPaymentEnrollment:response:");
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 32551, v17));
      v268 = v35;
      a1 = v34;
      v37 = 45;
      if (v32)
        v37 = 43;
      v30(6, "%c[%{public}s %{public}s]:%i keygenDGI = %{public}@", v37, v33, v268, 303, v36);

    }
    v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v39 = NFSharedLogGetLogger(v38);
    v40 = objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      v41 = object_getClass(a1);
      v42 = v13;
      if (class_isMetaClass(v41))
        v43 = 43;
      else
        v43 = 45;
      v44 = object_getClassName(a1);
      v45 = sel_getName("performPeerPaymentEnrollment:response:");
      v46 = a1;
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 32551, v17));
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v43;
      v13 = v42;
      v323 = 2082;
      v324 = v44;
      v325 = 2082;
      v326 = v45;
      v327 = 1024;
      v328 = 303;
      v329 = 2114;
      *(_QWORD *)v330 = v47;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i keygenDGI = %{public}@", buf, 0x2Cu);

      a1 = v46;
    }

    v302 = 0;
    v48 = (void *)v286;
    v49 = (NSMutableData *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 193, 0, byte_10032A940, v286, &v302));
    v50 = (NSErrorUserInfoKey)v302;
    v291 = a1;
    if (v49)
    {
      if (-[NSMutableData status](v49, "status") != 36864)
      {
        v289 = objc_opt_new(NSMutableData);
        v133 = v50;
        while ((-[NSMutableData status](v49, "status") & 0xFF00) == 0x6100)
        {
          v134 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableData response](v49, "response"));
          -[NSMutableData appendData:](v289, "appendData:", v134);

          v135 = -[NSMutableData status](v49, "status");
          v334 = v133;
          v136 = (NSMutableData *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 192, 0, 0, 0, v135, 0, &v334));
          v50 = v334;

          if (!v136)
          {
            v182 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v183 = NFLogGetLogger(v182);
            if (v183)
            {
              v184 = (void (*)(uint64_t, const char *, ...))v183;
              v185 = object_getClass(a1);
              v186 = class_isMetaClass(v185);
              v264 = object_getClassName(a1);
              v272 = sel_getName("sendCreateKey:response:");
              v187 = 45;
              if (v186)
                v187 = 43;
              v184(3, "%c[%{public}s %{public}s]:%i Command failed : %{public}@", v187, v264, v272, 223, v50);
            }
            v188 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v189 = NFSharedLogGetLogger(v188);
            v190 = objc_claimAutoreleasedReturnValue(v189);
            if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
            {
              v191 = object_getClass(a1);
              if (class_isMetaClass(v191))
                v192 = 43;
              else
                v192 = 45;
              v193 = object_getClassName(a1);
              v194 = sel_getName("sendCreateKey:response:");
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = v192;
              v323 = 2082;
              v324 = v193;
              v325 = 2082;
              v326 = v194;
              v327 = 1024;
              v328 = 223;
              v329 = 2114;
              *(_QWORD *)v330 = v50;
              _os_log_impl((void *)&_mh_execute_header, v190, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed : %{public}@", buf, 0x2Cu);
            }

            v50 = v50;
            v132 = 0;
            v49 = v289;
            v73 = v50;
            goto LABEL_102;
          }
          v49 = v136;
          v133 = v50;
          if (-[NSMutableData status](v136, "status") == 36864)
          {
            v137 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableData response](v136, "response"));
            -[NSMutableData appendData:](v289, "appendData:", v137);

            if (-[NSMutableData length](v289, "length") > 0xA8)
            {
              v132 = objc_retainAutorelease(v289);

              v73 = 0;
              v49 = v132;
            }
            else
            {
              v138 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v139 = NFLogGetLogger(v138);
              if (v139)
              {
                v140 = (void (*)(uint64_t, const char *, ...))v139;
                v141 = object_getClass(a1);
                v142 = class_isMetaClass(v141);
                v143 = object_getClassName(a1);
                v144 = sel_getName("sendCreateKey:response:");
                v278 = -[NSMutableData length](v289, "length");
                v145 = 45;
                if (v142)
                  v145 = 43;
                v140(3, "%c[%{public}s %{public}s]:%i Invalid response size to create key: %lu bytes", v145, v143, v144, 230, v278);
              }
              v146 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v147 = NFSharedLogGetLogger(v146);
              v148 = objc_claimAutoreleasedReturnValue(v147);
              if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
              {
                v149 = object_getClass(v291);
                if (class_isMetaClass(v149))
                  v150 = 43;
                else
                  v150 = 45;
                v151 = object_getClassName(v291);
                v152 = sel_getName("sendCreateKey:response:");
                v153 = -[NSMutableData length](v289, "length");
                *(_DWORD *)buf = 67110146;
                *(_DWORD *)&buf[4] = v150;
                v323 = 2082;
                v324 = v151;
                v325 = 2082;
                v326 = v152;
                v327 = 1024;
                v328 = 230;
                v329 = 2048;
                *(_QWORD *)v330 = v153;
                _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid response size to create key: %lu bytes", buf, 0x2Cu);
              }

              v154 = objc_alloc((Class)NSError);
              v155 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v333 = NSLocalizedDescriptionKey;
              v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
              *(_QWORD *)buf = v156;
              v157 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v333, 1));
              v158 = (void *)v155;
              v73 = (NSString *)objc_msgSend(v154, "initWithDomain:code:userInfo:", v155, 16, v157);

              v132 = 0;
              v49 = v289;
            }
            goto LABEL_102;
          }
        }
        v161 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v162 = NFLogGetLogger(v161);
        if (v162)
        {
          v163 = (void (*)(uint64_t, const char *, ...))v162;
          v164 = object_getClass(a1);
          v165 = class_isMetaClass(v164);
          v166 = object_getClassName(a1);
          v167 = sel_getName("sendCreateKey:response:");
          v279 = -[NSMutableData status](v49, "status");
          v168 = 45;
          if (v165)
            v168 = 43;
          v163(3, "%c[%{public}s %{public}s]:%i Failed to create key: 0x%04x", v168, v166, v167, 239, v279);
        }
        v169 = v13;
        v170 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v171 = NFSharedLogGetLogger(v170);
        v172 = objc_claimAutoreleasedReturnValue(v171);
        if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
        {
          v173 = object_getClass(v291);
          if (class_isMetaClass(v173))
            v174 = 43;
          else
            v174 = 45;
          v175 = object_getClassName(v291);
          v176 = sel_getName("sendCreateKey:response:");
          v177 = -[NSMutableData status](v49, "status");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v174;
          v323 = 2082;
          v324 = v175;
          v325 = 2082;
          v326 = v176;
          v327 = 1024;
          v328 = 239;
          v329 = 1024;
          *(_DWORD *)v330 = v177;
          _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create key: 0x%04x", buf, 0x28u);
        }

        v178 = objc_alloc((Class)NSError);
        v179 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v333 = NSLocalizedDescriptionKey;
        v180 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        *(_QWORD *)buf = v180;
        v181 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v333, 1));
        v73 = (NSString *)objc_msgSend(v178, "initWithDomain:code:userInfo:", v179, 16, v181);

        v132 = 0;
        v49 = v289;
        v50 = v133;
        v13 = v169;
        goto LABEL_102;
      }
      v51 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableData response](v49, "response"));
      v52 = objc_msgSend(v51, "length");

      if ((unint64_t)v52 > 0xA8)
      {
        v132 = (NSMutableData *)(id)objc_claimAutoreleasedReturnValue(-[NSMutableData response](v49, "response"));
        v73 = 0;
LABEL_102:

        v50 = v73;
        v48 = (void *)v286;
        a1 = v291;
        goto LABEL_103;
      }
      v53 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v54 = NFLogGetLogger(v53);
      if (v54)
      {
        v55 = (void (*)(uint64_t, const char *, ...))v54;
        v56 = object_getClass(a1);
        v282 = class_isMetaClass(v56);
        v287 = object_getClassName(a1);
        v57 = sel_getName("sendCreateKey:response:");
        v58 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableData response](v49, "response"));
        v276 = objc_msgSend(v58, "length");
        v59 = 45;
        if (v282)
          v59 = 43;
        v55(3, "%c[%{public}s %{public}s]:%i Invalid response size to create key: %lu bytes", v59, v287, v57, 201, v276);

      }
      v60 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v61 = NFSharedLogGetLogger(v60);
      v62 = objc_claimAutoreleasedReturnValue(v61);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        v63 = object_getClass(v291);
        if (class_isMetaClass(v63))
          v64 = 43;
        else
          v64 = 45;
        v65 = object_getClassName(v291);
        v66 = sel_getName("sendCreateKey:response:");
        v67 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableData response](v49, "response"));
        v68 = objc_msgSend(v67, "length");
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v64;
        v323 = 2082;
        v324 = v65;
        v325 = 2082;
        v326 = v66;
        v327 = 1024;
        v328 = 201;
        v329 = 2048;
        *(_QWORD *)v330 = v68;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid response size to create key: %lu bytes", buf, 0x2Cu);

      }
      v69 = objc_alloc((Class)NSError);
      v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v334 = NSLocalizedDescriptionKey;
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      *(_QWORD *)buf = v71;
      v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v334, 1));
      v73 = (NSString *)objc_msgSend(v69, "initWithDomain:code:userInfo:", v70, 16, v72);

    }
    else
    {
      v118 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v119 = NFLogGetLogger(v118);
      if (v119)
      {
        v120 = (void (*)(uint64_t, const char *, ...))v119;
        v121 = object_getClass(a1);
        v122 = class_isMetaClass(v121);
        v123 = object_getClassName(a1);
        v271 = sel_getName("sendCreateKey:response:");
        v218 = !v122;
        v48 = (void *)v286;
        v124 = 45;
        if (!v218)
          v124 = 43;
        v120(3, "%c[%{public}s %{public}s]:%i Failed to create key - no response", v124, v123, v271, 196);
      }
      v125 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v126 = NFSharedLogGetLogger(v125);
      v127 = objc_claimAutoreleasedReturnValue(v126);
      if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
      {
        v128 = object_getClass(a1);
        if (class_isMetaClass(v128))
          v129 = 43;
        else
          v129 = 45;
        v130 = object_getClassName(a1);
        v131 = sel_getName("sendCreateKey:response:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v129;
        v323 = 2082;
        v324 = v130;
        v48 = (void *)v286;
        v325 = 2082;
        v326 = v131;
        v327 = 1024;
        v328 = 196;
        _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create key - no response", buf, 0x22u);
      }

      if (v50)
      {
        v132 = 0;
LABEL_103:
        v195 = v132;

        if (v50 || !v195)
        {
          v238 = v195;
          v313[0] = &off_1002FE4F0;
          v312[0] = CFSTR("peerPaymentEnrollmentErrorStep");
          v312[1] = CFSTR("peerPaymentEnrollmentErrorCode");
          v239 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSString code](v50, "code")));
          v313[1] = v239;
          v312[2] = CFSTR("peerPaymentEnrollmentStartTime");
          v240 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v284));
          v313[2] = v240;
          v110 = (char *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v313, v312, 3));

          sub_1001ECEE8((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v110);
          if (v50)
          {
            v14 = v50;
            v15 = v14;
          }
          else
          {
            v257 = objc_alloc((Class)NSError);
            v258 = v17;
            v259 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v310 = NSLocalizedDescriptionKey;
            v260 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
            v311 = v260;
            v261 = v110;
            v262 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v311, &v310, 1));
            v15 = (NSErrorUserInfoKey)objc_msgSend(v257, "initWithDomain:code:userInfo:", v259, 6, v262);

            v110 = v261;
            v17 = v258;
            v48 = (void *)v286;
            v14 = 0;
          }
          v5 = v285;
          v112 = v238;
        }
        else
        {
          v280 = v195;
          v196 = objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v195));
          v197 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v198 = NFLogGetLogger(v197);
          v199 = (void (*)(uint64_t, const char *, ...))v198;
          v283 = (char *)v196;
          if (v196)
          {
            v5 = v285;
            if (v198)
            {
              v200 = object_getClass(a1);
              v201 = class_isMetaClass(v200);
              v265 = object_getClassName(a1);
              v273 = sel_getName("performPeerPaymentEnrollment:response:");
              v202 = 45;
              if (v201)
                v202 = 43;
              v199(6, "%c[%{public}s %{public}s]:%i rTLVs = %{public}@", v202, v265, v273, 327, v196);
            }
            v203 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v204 = NFSharedLogGetLogger(v203);
            v205 = objc_claimAutoreleasedReturnValue(v204);
            if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
            {
              v206 = object_getClass(a1);
              if (class_isMetaClass(v206))
                v207 = 43;
              else
                v207 = 45;
              v208 = object_getClassName(a1);
              v209 = sel_getName("performPeerPaymentEnrollment:response:");
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = v207;
              v323 = 2082;
              v324 = v208;
              v325 = 2082;
              v326 = v209;
              v327 = 1024;
              v328 = 327;
              v329 = 2114;
              *(_QWORD *)v330 = v283;
              _os_log_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i rTLVs = %{public}@", buf, 0x2Cu);
            }

            v210 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v17);
            if (v210)
            {
              v290 = v17;
              v294 = 0u;
              v295 = 0u;
              v292 = 0u;
              v293 = 0u;
              v211 = v283;
              v212 = objc_msgSend(v211, "countByEnumeratingWithState:objects:count:", &v292, v305, 16);
              if (v212)
              {
                v213 = v212;
                v214 = *(_QWORD *)v293;
                do
                {
                  for (i = 0; i != v213; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v293 != v214)
                      objc_enumerationMutation(v211);
                    v216 = *(void **)(*((_QWORD *)&v292 + 1) + 8 * (_QWORD)i);
                    v217 = objc_msgSend(v216, "tag");
                    v218 = v217 - 65 > 0x18 || ((1 << (v217 - 65)) & 0x1000007) == 0;
                    if (!v218 || v217 == 32585 || v217 == 24375)
                      objc_msgSend(v210, "addObject:", v216);
                  }
                  v213 = objc_msgSend(v211, "countByEnumeratingWithState:objects:count:", &v292, v305, 16);
                }
                while (v213);
              }

              v5 = v285;
              v48 = (void *)v286;
              v17 = v290;
            }
            v221 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v222 = NFLogGetLogger(v221);
            if (v222)
            {
              v223 = (void (*)(uint64_t, const char *, ...))v222;
              v224 = object_getClass(v291);
              v225 = class_isMetaClass(v224);
              v266 = object_getClassName(v291);
              v274 = sel_getName("performPeerPaymentEnrollment:response:");
              v226 = 45;
              if (v225)
                v226 = 43;
              v5 = v285;
              v223(6, "%c[%{public}s %{public}s]:%i preSURFCertificate = %{public}@", v226, v266, v274, 348, v210);
            }
            v227 = v17;
            v228 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v229 = NFSharedLogGetLogger(v228);
            v230 = objc_claimAutoreleasedReturnValue(v229);
            if (os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT))
            {
              v231 = object_getClass(v291);
              if (class_isMetaClass(v231))
                v232 = 43;
              else
                v232 = 45;
              v233 = object_getClassName(v291);
              v234 = sel_getName("performPeerPaymentEnrollment:response:");
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = v232;
              v323 = 2082;
              v324 = v233;
              v325 = 2082;
              v326 = v234;
              v327 = 1024;
              v328 = 348;
              v329 = 2114;
              *(_QWORD *)v330 = v210;
              _os_log_impl((void *)&_mh_execute_header, v230, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i preSURFCertificate = %{public}@", buf, 0x2Cu);
            }

            v235 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 32545, v210));
            *v281 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v235, "asData"));

            v303[0] = CFSTR("peerPaymentEnrollmentErrorStep");
            v303[1] = CFSTR("peerPaymentEnrollmentErrorCode");
            v304[0] = &off_1002FE538;
            v304[1] = &off_1002FE550;
            v303[2] = CFSTR("peerPaymentEnrollmentStartTime");
            v236 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v284));
            v304[2] = v236;
            v237 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v304, v303, 3));

            sub_1001ECEE8((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v237);
            v15 = 0;
          }
          else
          {
            v227 = v17;
            if (v198)
            {
              v241 = object_getClass(a1);
              v242 = class_isMetaClass(v241);
              v243 = a1;
              v244 = object_getClassName(a1);
              v275 = sel_getName("performPeerPaymentEnrollment:response:");
              v245 = 45;
              if (v242)
                v245 = 43;
              v267 = v244;
              a1 = v243;
              v199(3, "%c[%{public}s %{public}s]:%i Failed to parse TLV from create key response", v245, v267, v275, 318);
            }
            v246 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v247 = NFSharedLogGetLogger(v246);
            v248 = objc_claimAutoreleasedReturnValue(v247);
            if (os_log_type_enabled(v248, OS_LOG_TYPE_ERROR))
            {
              v249 = object_getClass(a1);
              if (class_isMetaClass(v249))
                v250 = 43;
              else
                v250 = 45;
              v251 = object_getClassName(a1);
              v252 = sel_getName("performPeerPaymentEnrollment:response:");
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v250;
              v323 = 2082;
              v324 = v251;
              v325 = 2082;
              v326 = v252;
              v327 = 1024;
              v328 = 318;
              _os_log_impl((void *)&_mh_execute_header, v248, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to parse TLV from create key response", buf, 0x22u);
            }

            v308[0] = CFSTR("peerPaymentEnrollmentErrorStep");
            v308[1] = CFSTR("peerPaymentEnrollmentErrorCode");
            v309[0] = &off_1002FE508;
            v309[1] = &off_1002FE520;
            v308[2] = CFSTR("peerPaymentEnrollmentStartTime");
            v253 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v284));
            v309[2] = v253;
            v210 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v309, v308, 3));

            sub_1001ECEE8((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v210);
            v254 = objc_alloc((Class)NSError);
            v237 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v306 = NSLocalizedDescriptionKey;
            v255 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Decoding Error"));
            v307 = v255;
            v256 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v307, &v306, 1));
            v15 = (NSErrorUserInfoKey)objc_msgSend(v254, "initWithDomain:code:userInfo:", v237, 23, v256);

            v5 = v285;
            v48 = (void *)v286;
          }

          v14 = 0;
          v17 = v227;
          v112 = v280;
          v110 = v283;
        }
LABEL_161:

LABEL_162:
        goto LABEL_163;
      }
      v159 = objc_alloc((Class)NSError);
      v50 = (NSErrorUserInfoKey)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v334 = NSLocalizedDescriptionKey;
      v49 = (NSMutableData *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      *(_QWORD *)buf = v49;
      v160 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v334, 1));
      v73 = (NSString *)objc_msgSend(v159, "initWithDomain:code:userInfo:", v50, 16, v160);

    }
    v132 = 0;
    goto LABEL_102;
  }
  v10 = v9;
  v332[0] = &off_1002FE490;
  v331[0] = CFSTR("peerPaymentEnrollmentErrorStep");
  v331[1] = CFSTR("peerPaymentEnrollmentErrorCode");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v9, "code")));
  v332[1] = v11;
  v331[2] = CFSTR("peerPaymentEnrollmentStartTime");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v7));
  v332[2] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v332, v331, 3));

  sub_1001ECEE8((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v13);
  v14 = v10;
  v15 = v14;
LABEL_163:

LABEL_164:
  return v15;
}

_QWORD *sub_10008FD98(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  NSMutableArray *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  _QWORD *v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *specific;
  uint64_t Logger;
  void (*v46)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  void *v50;
  const char *Name;
  _QWORD *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  objc_class *v60;
  int v61;
  const char *v62;
  const char *v63;
  void *v64;
  void *v65;
  id v66;
  id *v67;
  NSErrorUserInfoKey *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  void (*v72)(uint64_t, const char *, ...);
  objc_class *v73;
  _BOOL4 v74;
  const char *v75;
  const char *v76;
  id v77;
  _QWORD *v78;
  void *v79;
  void *v80;
  BOOL v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  NSObject *v85;
  objc_class *v86;
  int v87;
  const char *v88;
  const char *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void (*v95)(uint64_t, const char *, ...);
  objc_class *v96;
  _BOOL4 v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  NSObject *v102;
  objc_class *v103;
  int v104;
  id v105;
  id *v106;
  NSErrorUserInfoKey *v107;
  void *v108;
  uint64_t v109;
  void (*v110)(uint64_t, const char *, ...);
  objc_class *v111;
  _BOOL4 v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  NSObject *v117;
  objc_class *v118;
  int v119;
  void *v120;
  void *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  void (*v125)(uint64_t, const char *, ...);
  objc_class *v126;
  _BOOL4 v127;
  const char *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  NSObject *v132;
  objc_class *v133;
  int v134;
  const char *v135;
  const char *v136;
  id v137;
  id *v138;
  NSErrorUserInfoKey *v139;
  void *v140;
  uint64_t v141;
  void (*v142)(uint64_t, const char *, ...);
  objc_class *v143;
  _BOOL4 v144;
  const char *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  NSObject *v149;
  objc_class *v150;
  int v151;
  const char *v152;
  const char *v153;
  void *v154;
  uint64_t v155;
  void (*v156)(uint64_t, const char *, ...);
  objc_class *v157;
  _BOOL4 v158;
  const char *v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  NSObject *v163;
  objc_class *v164;
  int v165;
  const char *v166;
  const char *v167;
  void *v169;
  uint64_t v170;
  void (*v171)(uint64_t, const char *, ...);
  objc_class *v172;
  _BOOL4 v173;
  const char *v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  NSObject *v178;
  objc_class *v179;
  int v180;
  const char *v181;
  const char *v182;
  id v183;
  id v184;
  void *v185;
  void *v186;
  void *v187;
  uint64_t v188;
  void (*v189)(uint64_t, const char *, ...);
  objc_class *v190;
  _BOOL4 v191;
  const char *v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  NSObject *v196;
  objc_class *v197;
  int v198;
  const char *v199;
  const char *v200;
  id v201;
  void *v202;
  void *v203;
  void *v204;
  uint64_t v205;
  void *v206;
  void (*v207)(uint64_t, const char *, ...);
  objc_class *v208;
  _BOOL4 v209;
  const char *v210;
  const char *v211;
  NSMutableArray *v212;
  void *v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  NSObject *v217;
  objc_class *v218;
  int v219;
  const char *v220;
  const char *v221;
  NSMutableArray *v222;
  void *v223;
  unsigned int v224;
  id v225;
  void *v226;
  void *v227;
  id v228;
  void *v229;
  void *v230;
  NSMutableArray *v231;
  void *v232;
  void *v233;
  uint64_t v234;
  void (*v235)(uint64_t, const char *, ...);
  objc_class *v236;
  _BOOL4 v237;
  NSMutableArray *v238;
  const char *v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  NSObject *v243;
  objc_class *v244;
  int v245;
  const char *v246;
  const char *v247;
  id v248;
  void *v249;
  void *v250;
  NSMutableArray *v251;
  void *v252;
  const char *v253;
  const char *v254;
  const char *v255;
  const char *v256;
  const char *v257;
  const char *v258;
  const char *v259;
  const char *v260;
  const char *v261;
  const char *v262;
  id v263;
  id v264;
  id v265;
  void *v266;
  _QWORD *v267;
  id v268;
  NSMutableArray *v269;
  int v270;
  char v271;
  uint64_t v272;
  NSErrorUserInfoKey v273;
  void *v274;
  NSErrorUserInfoKey v275;
  void *v276;
  NSErrorUserInfoKey v277;
  void *v278;
  NSErrorUserInfoKey v279;
  void *v280;
  NSErrorUserInfoKey v281;
  void *v282;
  NSErrorUserInfoKey v283;
  id v284;
  NSErrorUserInfoKey v285;
  id v286;
  NSErrorUserInfoKey v287;
  id v288;
  NSErrorUserInfoKey v289;
  id v290;
  NSErrorUserInfoKey v291;
  id v292;
  NSErrorUserInfoKey v293;
  id v294;
  NSErrorUserInfoKey v295;
  id v296;
  NSErrorUserInfoKey v297;
  id v298;
  uint8_t buf[4];
  int v300;
  __int16 v301;
  const char *v302;
  __int16 v303;
  const char *v304;
  __int16 v305;
  int v306;
  __int16 v307;
  unsigned int v308;
  NSErrorUserInfoKey v309;
  id v310;

  v5 = a2;
  v272 = 0;
  v269 = objc_opt_new(NSMutableArray);
  if (!v269)
  {
    if (a3)
    {
      v42 = objc_alloc((Class)NSError);
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v309 = NSLocalizedDescriptionKey;
      v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v310 = v39;
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v310, &v309, 1));
      *a3 = objc_msgSend(v42, "initWithDomain:code:userInfo:", v32, 34, v43);

      v269 = 0;
LABEL_101:
      a3 = 0;
      goto LABEL_102;
    }
    v269 = 0;
LABEL_106:
    v38 = 0;
    goto LABEL_107;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appleTransactionHash"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v6));
  v8 = objc_msgSend(v7, "length");

  if (v8 != (id)32)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v46 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      v50 = v5;
      Name = sel_getName("createSURFSpecificInput:error:");
      v52 = a3;
      v53 = a1;
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "appleTransactionHash"));
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v54));
      v263 = objc_msgSend(v55, "length");
      v254 = Name;
      v5 = v50;
      v56 = 45;
      if (isMetaClass)
        v56 = 43;
      v46(3, "%c[%{public}s %{public}s]:%i Invalid apple transaction hash length : %d", v56, ClassName, v254, 378, v263);

      a3 = v52;
      a1 = v53;
    }
    v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v58 = NFSharedLogGetLogger(v57);
    v59 = objc_claimAutoreleasedReturnValue(v58);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      v60 = object_getClass(a1);
      if (class_isMetaClass(v60))
        v61 = 43;
      else
        v61 = 45;
      v62 = object_getClassName(a1);
      v63 = sel_getName("createSURFSpecificInput:error:");
      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appleTransactionHash"));
      v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v64));
      *(_DWORD *)buf = 67110146;
      v300 = v61;
      v301 = 2082;
      v302 = v62;
      v303 = 2082;
      v304 = v63;
      v305 = 1024;
      v306 = 378;
      v307 = 1024;
      v308 = objc_msgSend(v65, "length");
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid apple transaction hash length : %d", buf, 0x28u);

    }
    if (!a3)
      goto LABEL_106;
    v66 = objc_alloc((Class)NSError);
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v297 = NSLocalizedDescriptionKey;
    v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v298 = v39;
    v67 = &v298;
    v68 = &v297;
    goto LABEL_40;
  }
  v268 = a1;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "publicTransactionHash"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v9));
  v11 = objc_msgSend(v10, "length");

  if (v11 != (id)32)
  {
    v69 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v70 = NFLogGetLogger(v69);
    v71 = v268;
    if (v70)
    {
      v72 = (void (*)(uint64_t, const char *, ...))v70;
      v73 = object_getClass(v268);
      v74 = class_isMetaClass(v73);
      v75 = object_getClassName(v268);
      v76 = sel_getName("createSURFSpecificInput:error:");
      v77 = v5;
      v78 = a3;
      v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "publicTransactionHash"));
      v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v79));
      v264 = objc_msgSend(v80, "length");
      v81 = !v74;
      v71 = v268;
      v82 = 45;
      if (!v81)
        v82 = 43;
      v72(3, "%c[%{public}s %{public}s]:%i Invalid public transaction hash length : %d", v82, v75, v76, 383, v264);

      v5 = v77;
      a3 = v78;
    }
    v83 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v84 = NFSharedLogGetLogger(v83);
    v85 = objc_claimAutoreleasedReturnValue(v84);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      v86 = object_getClass(v71);
      if (class_isMetaClass(v86))
        v87 = 43;
      else
        v87 = 45;
      v88 = object_getClassName(v71);
      v89 = sel_getName("createSURFSpecificInput:error:");
      v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "publicTransactionHash"));
      v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v90));
      *(_DWORD *)buf = 67110146;
      v300 = v87;
      v301 = 2082;
      v302 = v88;
      v303 = 2082;
      v304 = v89;
      v305 = 1024;
      v306 = 383;
      v307 = 1024;
      v308 = objc_msgSend(v91, "length");
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid public transaction hash length : %d", buf, 0x28u);

    }
    if (!a3)
      goto LABEL_106;
    v66 = objc_alloc((Class)NSError);
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v295 = NSLocalizedDescriptionKey;
    v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v296 = v39;
    v67 = &v296;
    v68 = &v295;
LABEL_40:
    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v67, v68, 1));
    *a3 = objc_msgSend(v66, "initWithDomain:code:userInfo:", v32, 10, v92);
LABEL_100:

    goto LABEL_101;
  }
  v12 = a3;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appleTransactionHash"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v13));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 145, v14));

  if (!v15)
  {
    v93 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v94 = NFLogGetLogger(v93);
    if (v94)
    {
      v95 = (void (*)(uint64_t, const char *, ...))v94;
      v96 = object_getClass(v268);
      v97 = class_isMetaClass(v96);
      v98 = object_getClassName(v268);
      v255 = sel_getName("createSURFSpecificInput:error:");
      v99 = 45;
      if (v97)
        v99 = 43;
      v95(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v99, v98, v255, 389);
    }
    v100 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v101 = NFSharedLogGetLogger(v100);
    v102 = objc_claimAutoreleasedReturnValue(v101);
    if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
    {
      v103 = object_getClass(v268);
      if (class_isMetaClass(v103))
        v104 = 43;
      else
        v104 = 45;
      *(_DWORD *)buf = 67109890;
      v300 = v104;
      v301 = 2082;
      v302 = object_getClassName(v268);
      v303 = 2082;
      v304 = sel_getName("createSURFSpecificInput:error:");
      v305 = 1024;
      v306 = 389;
      _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
    }

    if (!a3)
      goto LABEL_105;
    v105 = objc_alloc((Class)NSError);
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v293 = NSLocalizedDescriptionKey;
    v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
    v294 = v39;
    v106 = &v294;
    v107 = &v293;
    goto LABEL_64;
  }
  -[NSMutableArray addObject:](v269, "addObject:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "publicTransactionHash"));
  v17 = v5;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v16));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 146, v18));

  if (!v19)
  {
    v5 = v17;
    v108 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v109 = NFLogGetLogger(v108);
    if (v109)
    {
      v110 = (void (*)(uint64_t, const char *, ...))v109;
      v111 = object_getClass(v268);
      v112 = class_isMetaClass(v111);
      v113 = object_getClassName(v268);
      v256 = sel_getName("createSURFSpecificInput:error:");
      v114 = 45;
      if (v112)
        v114 = 43;
      v110(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v114, v113, v256, 392);
    }
    v115 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v116 = NFSharedLogGetLogger(v115);
    v117 = objc_claimAutoreleasedReturnValue(v116);
    if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
    {
      v118 = object_getClass(v268);
      if (class_isMetaClass(v118))
        v119 = 43;
      else
        v119 = 45;
      *(_DWORD *)buf = 67109890;
      v300 = v119;
      v301 = 2082;
      v302 = object_getClassName(v268);
      v303 = 2082;
      v304 = sel_getName("createSURFSpecificInput:error:");
      v305 = 1024;
      v306 = 392;
      _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
    }

    if (!a3)
      goto LABEL_105;
    v105 = objc_alloc((Class)NSError);
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v291 = NSLocalizedDescriptionKey;
    v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
    v292 = v39;
    v106 = &v292;
    v107 = &v291;
LABEL_64:
    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v106, v107, 1));
    v120 = v105;
    v121 = v32;
    v122 = 34;
LABEL_99:
    *a3 = objc_msgSend(v120, "initWithDomain:code:userInfo:", v121, v122, v92);
    goto LABEL_100;
  }
  -[NSMutableArray addObject:](v269, "addObject:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "transactionCurrency"));
  v21 = sub_1001C32F0((uint64_t)NFECommercePaymentRequestEncoder, v20, &v272);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

  if (!v22)
  {
    v5 = v17;
    v123 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v124 = NFLogGetLogger(v123);
    if (v124)
    {
      v125 = (void (*)(uint64_t, const char *, ...))v124;
      v126 = object_getClass(v268);
      v127 = class_isMetaClass(v126);
      v128 = object_getClassName(v268);
      v257 = sel_getName("createSURFSpecificInput:error:");
      v129 = 45;
      if (v127)
        v129 = 43;
      v125(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v129, v128, v257, 395);
    }
    v130 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v131 = NFSharedLogGetLogger(v130);
    v132 = objc_claimAutoreleasedReturnValue(v131);
    if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
    {
      v133 = object_getClass(v268);
      if (class_isMetaClass(v133))
        v134 = 43;
      else
        v134 = 45;
      v135 = object_getClassName(v268);
      v136 = sel_getName("createSURFSpecificInput:error:");
      *(_DWORD *)buf = 67109890;
      v300 = v134;
      v301 = 2082;
      v302 = v135;
      v303 = 2082;
      v304 = v136;
      v305 = 1024;
      v306 = 395;
      _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
    }

    if (a3)
    {
      v137 = objc_alloc((Class)NSError);
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v289 = NSLocalizedDescriptionKey;
      v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v290 = v39;
      v138 = &v290;
      v139 = &v289;
LABEL_98:
      v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v138, v139, 1));
      v120 = v137;
      v121 = v32;
      v122 = 10;
      goto LABEL_99;
    }
LABEL_105:
    a3 = 0;
    goto LABEL_106;
  }
  -[NSMutableArray addObject:](v269, "addObject:", v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "transactionAmount"));
  v24 = sub_1001C380C((uint64_t)NFECommercePaymentRequestEncoder, v23, v272);
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);

  if (!v25)
  {
    v5 = v17;
    v140 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v141 = NFLogGetLogger(v140);
    if (v141)
    {
      v142 = (void (*)(uint64_t, const char *, ...))v141;
      v143 = object_getClass(v268);
      v144 = class_isMetaClass(v143);
      v145 = object_getClassName(v268);
      v258 = sel_getName("createSURFSpecificInput:error:");
      v146 = 45;
      if (v144)
        v146 = 43;
      v142(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v146, v145, v258, 398);
    }
    v147 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v148 = NFSharedLogGetLogger(v147);
    v149 = objc_claimAutoreleasedReturnValue(v148);
    if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
    {
      v150 = object_getClass(v268);
      if (class_isMetaClass(v150))
        v151 = 43;
      else
        v151 = 45;
      v152 = object_getClassName(v268);
      v153 = sel_getName("createSURFSpecificInput:error:");
      *(_DWORD *)buf = 67109890;
      v300 = v151;
      v301 = 2082;
      v302 = v152;
      v303 = 2082;
      v304 = v153;
      v305 = 1024;
      v306 = 398;
      _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
    }

    if (a3)
    {
      v137 = objc_alloc((Class)NSError);
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v287 = NSLocalizedDescriptionKey;
      v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v288 = v39;
      v138 = &v288;
      v139 = &v287;
      goto LABEL_98;
    }
    goto LABEL_105;
  }
  -[NSMutableArray addObject:](v269, "addObject:", v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "transactionDate"));
  v27 = sub_1001C2AB0((uint64_t)NFECommercePaymentRequestEncoder, v26);
  v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

  if (!v28)
  {
    v5 = v17;
    v154 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v155 = NFLogGetLogger(v154);
    if (v155)
    {
      v156 = (void (*)(uint64_t, const char *, ...))v155;
      v157 = object_getClass(v268);
      v158 = class_isMetaClass(v157);
      v159 = object_getClassName(v268);
      v259 = sel_getName("createSURFSpecificInput:error:");
      v160 = 45;
      if (v158)
        v160 = 43;
      v156(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v160, v159, v259, 401);
    }
    v161 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v162 = NFSharedLogGetLogger(v161);
    v163 = objc_claimAutoreleasedReturnValue(v162);
    if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
    {
      v164 = object_getClass(v268);
      if (class_isMetaClass(v164))
        v165 = 43;
      else
        v165 = 45;
      v166 = object_getClassName(v268);
      v167 = sel_getName("createSURFSpecificInput:error:");
      *(_DWORD *)buf = 67109890;
      v300 = v165;
      v301 = 2082;
      v302 = v166;
      v303 = 2082;
      v304 = v167;
      v305 = 1024;
      v306 = 401;
      _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
    }

    if (a3)
    {
      v137 = objc_alloc((Class)NSError);
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v285 = NSLocalizedDescriptionKey;
      v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v286 = v39;
      v138 = &v286;
      v139 = &v285;
      goto LABEL_98;
    }
    goto LABEL_105;
  }
  v267 = a3;
  -[NSMutableArray addObject:](v269, "addObject:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "transactionCountry"));
  v30 = sub_1001C2DB0((uint64_t)NFECommercePaymentRequestEncoder, v29);
  a3 = (_QWORD *)objc_claimAutoreleasedReturnValue(v30);

  v5 = v17;
  if (!a3)
  {
    v169 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v170 = NFLogGetLogger(v169);
    if (v170)
    {
      v171 = (void (*)(uint64_t, const char *, ...))v170;
      v172 = object_getClass(v268);
      v173 = class_isMetaClass(v172);
      v174 = object_getClassName(v268);
      v260 = sel_getName("createSURFSpecificInput:error:");
      v175 = 45;
      if (v173)
        v175 = 43;
      v171(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v175, v174, v260, 404);
    }
    v176 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v177 = NFSharedLogGetLogger(v176);
    v178 = objc_claimAutoreleasedReturnValue(v177);
    v38 = v12;
    if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
    {
      v179 = object_getClass(v268);
      if (class_isMetaClass(v179))
        v180 = 43;
      else
        v180 = 45;
      v181 = object_getClassName(v268);
      v182 = sel_getName("createSURFSpecificInput:error:");
      *(_DWORD *)buf = 67109890;
      v300 = v180;
      v301 = 2082;
      v302 = v181;
      v303 = 2082;
      v304 = v182;
      v305 = 1024;
      v306 = 404;
      _os_log_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
    }

    if (!v267)
    {
      a3 = 0;
      goto LABEL_107;
    }
    v183 = objc_alloc((Class)NSError);
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v283 = NSLocalizedDescriptionKey;
    v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v284 = v39;
    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v284, &v283, 1));
    *v267 = objc_msgSend(v183, "initWithDomain:code:userInfo:", v32, 10, v92);
    goto LABEL_100;
  }
  -[NSMutableArray addObject:](v269, "addObject:", a3);
  v31 = objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 148, v269));
  if (v31)
  {
    v32 = (void *)v31;
    v266 = v17;
    v33 = objc_opt_new(NSMutableArray);

    v271 = 0;
    v34 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v271, 1);
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 144, v34));

    if (!v35)
    {
      v187 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v188 = NFLogGetLogger(v187);
      v38 = v12;
      if (v188)
      {
        v189 = (void (*)(uint64_t, const char *, ...))v188;
        v190 = object_getClass(v268);
        v191 = class_isMetaClass(v190);
        v192 = object_getClassName(v268);
        v261 = sel_getName("createSURFSpecificInput:error:");
        v193 = 45;
        if (v191)
          v193 = 43;
        v189(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v193, v192, v261, 418);
      }
      v194 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v195 = NFSharedLogGetLogger(v194);
      v196 = objc_claimAutoreleasedReturnValue(v195);
      v5 = v17;
      if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
      {
        v197 = object_getClass(v268);
        if (class_isMetaClass(v197))
          v198 = 43;
        else
          v198 = 45;
        v199 = object_getClassName(v268);
        v200 = sel_getName("createSURFSpecificInput:error:");
        *(_DWORD *)buf = 67109890;
        v300 = v198;
        v301 = 2082;
        v302 = v199;
        v303 = 2082;
        v304 = v200;
        v305 = 1024;
        v306 = 418;
        _os_log_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
      }

      if (!v267)
      {
        a3 = 0;
        v269 = v33;
        goto LABEL_104;
      }
      v201 = objc_alloc((Class)NSError);
      v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v279 = NSLocalizedDescriptionKey;
      v202 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v280 = v202;
      v203 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v280, &v279, 1));
      *v267 = objc_msgSend(v201, "initWithDomain:code:userInfo:", v39, 34, v203);

      a3 = 0;
      v38 = 0;
LABEL_132:
      v269 = v33;
      goto LABEL_103;
    }
    -[NSMutableArray addObject:](v33, "addObject:", v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "nonce"));
    v37 = objc_msgSend(v36, "length");

    v38 = v267;
    if (v37 == (id)4)
    {
      v270 = 0;
      v39 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &v270, 4);
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "nonce"));
      objc_msgSend(v39, "appendData:", v40);

      v41 = v268;
      if (v39)
      {
        a3 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 145, v39));

        if (a3)
        {
          -[NSMutableArray addObject:](v33, "addObject:", a3);
          -[NSMutableArray addObject:](v33, "addObject:", v32);
          v38 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 32525, v33));
          v269 = v33;
LABEL_151:
          v5 = v266;
          goto LABEL_103;
        }
        v233 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v234 = NFLogGetLogger(v233);
        v5 = v17;
        if (v234)
        {
          v235 = (void (*)(uint64_t, const char *, ...))v234;
          v236 = object_getClass(v268);
          v237 = class_isMetaClass(v236);
          v238 = v33;
          v239 = object_getClassName(v268);
          v262 = sel_getName("createSURFSpecificInput:error:");
          v81 = !v237;
          v41 = v268;
          v240 = 45;
          if (!v81)
            v240 = 43;
          v253 = v239;
          v33 = v238;
          v235(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v240, v253, v262, 435);
        }
        v241 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v242 = NFSharedLogGetLogger(v241);
        v243 = objc_claimAutoreleasedReturnValue(v242);
        v38 = v267;
        if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR))
        {
          v244 = object_getClass(v41);
          if (class_isMetaClass(v244))
            v245 = 43;
          else
            v245 = 45;
          v246 = object_getClassName(v41);
          v247 = sel_getName("createSURFSpecificInput:error:");
          *(_DWORD *)buf = 67109890;
          v300 = v245;
          v301 = 2082;
          v302 = v246;
          v303 = 2082;
          v304 = v247;
          v305 = 1024;
          v306 = 435;
          _os_log_impl((void *)&_mh_execute_header, v243, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
        }

        if (v267)
        {
          v248 = objc_alloc((Class)NSError);
          v249 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v273 = NSLocalizedDescriptionKey;
          v250 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
          v274 = v250;
          v251 = v33;
          v252 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v274, &v273, 1));
          *v267 = objc_msgSend(v248, "initWithDomain:code:userInfo:", v249, 34, v252);

          a3 = 0;
          v38 = 0;
          v269 = v251;
          goto LABEL_103;
        }
        a3 = 0;
        goto LABEL_132;
      }
      if (v267)
      {
        v228 = objc_alloc((Class)NSError);
        v229 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v275 = NSLocalizedDescriptionKey;
        v230 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
        v276 = v230;
        v231 = v33;
        v232 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v276, &v275, 1));
        *v267 = objc_msgSend(v228, "initWithDomain:code:userInfo:", v229, 34, v232);

        v39 = 0;
        v38 = 0;
        v269 = v231;
        goto LABEL_150;
      }
      v39 = 0;
    }
    else
    {
      v204 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v205 = NFLogGetLogger(v204);
      v206 = v268;
      if (v205)
      {
        v207 = (void (*)(uint64_t, const char *, ...))v205;
        v208 = object_getClass(v268);
        v209 = class_isMetaClass(v208);
        v210 = object_getClassName(v268);
        v211 = sel_getName("createSURFSpecificInput:error:");
        v212 = v33;
        v213 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "nonce"));
        v265 = objc_msgSend(v213, "length");
        v38 = v267;
        v81 = !v209;
        v206 = v268;
        v214 = 45;
        if (!v81)
          v214 = 43;
        v207(3, "%c[%{public}s %{public}s]:%i Invalid nonce length : %d", v214, v210, v211, 422, v265);

        v33 = v212;
      }
      v215 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v216 = NFSharedLogGetLogger(v215);
      v217 = objc_claimAutoreleasedReturnValue(v216);
      if (os_log_type_enabled(v217, OS_LOG_TYPE_ERROR))
      {
        v218 = object_getClass(v206);
        if (class_isMetaClass(v218))
          v219 = 43;
        else
          v219 = 45;
        v220 = object_getClassName(v206);
        v221 = sel_getName("createSURFSpecificInput:error:");
        v222 = v33;
        v223 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v266, "nonce"));
        v224 = objc_msgSend(v223, "length");
        *(_DWORD *)buf = 67110146;
        v300 = v219;
        v301 = 2082;
        v302 = v220;
        v303 = 2082;
        v304 = v221;
        v305 = 1024;
        v306 = 422;
        v307 = 1024;
        v308 = v224;
        _os_log_impl((void *)&_mh_execute_header, v217, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid nonce length : %d", buf, 0x28u);

        v33 = v222;
      }

      if (!v38)
      {
        v269 = v33;
        a3 = v35;
        v5 = v266;
        goto LABEL_104;
      }
      v225 = objc_alloc((Class)NSError);
      v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v277 = NSLocalizedDescriptionKey;
      v226 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v278 = v226;
      v227 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v278, &v277, 1));
      *v38 = objc_msgSend(v225, "initWithDomain:code:userInfo:", v39, 10, v227);

      v38 = 0;
    }
    v269 = v33;
LABEL_150:
    a3 = v35;
    goto LABEL_151;
  }
  v38 = v12;
  if (!v12)
  {
    v32 = 0;
    goto LABEL_104;
  }
  v184 = objc_alloc((Class)NSError);
  v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v281 = NSLocalizedDescriptionKey;
  v185 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
  v282 = v185;
  v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v282, &v281, 1));
  *v267 = objc_msgSend(v184, "initWithDomain:code:userInfo:", v39, 34, v186);

  v32 = 0;
LABEL_102:
  v38 = 0;
LABEL_103:

LABEL_104:
LABEL_107:

  return v38;
}

NSObject *sub_100091928(void *a1, void *a2, unsigned int a3, void *a4, void *a5, void *a6, void *a7, NSMutableData *a8)
{
  id v15;
  id v16;
  id v17;
  NSMutableArray *v18;
  NSMutableArray *v19;
  id v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  NSMutableArray *v26;
  id v27;
  void *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  char *v32;
  void *v33;
  void *v34;
  NSMutableData *v35;
  void *v36;
  void *v37;
  NSObject *v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  void (*v42)(uint64_t, const char *, ...);
  objc_class *v43;
  _BOOL4 v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  NSMutableData *v50;
  objc_class *v51;
  int v52;
  id v53;
  NSMutableArray *v54;
  void *v55;
  void *v56;
  NSObject *v57;
  void *specific;
  uint64_t Logger;
  void (*v60)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  objc_class *v68;
  int v69;
  const char *v70;
  const char *v71;
  void *v72;
  uint64_t v73;
  void (*v74)(uint64_t, const char *, ...);
  objc_class *v75;
  _BOOL4 v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  objc_class *v81;
  int v82;
  const char *v83;
  const char *v84;
  void *v85;
  uint64_t v86;
  void (*v87)(uint64_t, const char *, ...);
  objc_class *v88;
  _BOOL4 v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  NSObject *v94;
  objc_class *v95;
  int v96;
  const char *v97;
  const char *v98;
  char *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  char v112;
  NSMutableData *v113;
  unint64_t v114;
  NSMutableData *v115;
  NSMutableData *v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  void (*v120)(uint64_t, const char *, ...);
  objc_class *v121;
  _BOOL4 v122;
  char *v123;
  const char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  objc_class *v128;
  int v129;
  const char *v130;
  const char *v131;
  id v132;
  void *v133;
  NSObject *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  uint64_t v139;
  void (*v140)(uint64_t, const char *, ...);
  uint64_t v141;
  objc_class *v142;
  _BOOL4 v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  NSObject *v147;
  objc_class *v148;
  int v149;
  const char *v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  void *v155;
  __CFData *v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  void *v160;
  uint64_t v161;
  void (*v162)(uint64_t, const char *, ...);
  objc_class *v163;
  _BOOL4 v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  NSObject *v168;
  objc_class *v169;
  int v170;
  const char *v171;
  const char *v172;
  objc_class *v173;
  _BOOL4 v174;
  const char *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  objc_class *v179;
  int v180;
  const char *v181;
  const char *v182;
  objc_class *v184;
  _BOOL4 v185;
  const char *v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  NSObject *v190;
  objc_class *v191;
  int v192;
  const char *v193;
  const char *v194;
  id v195;
  void *v196;
  void *v197;
  char *v198;
  void *v199;
  uint64_t v200;
  void (*v201)(uint64_t, const char *, ...);
  objc_class *v202;
  _BOOL4 v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  NSObject *v207;
  objc_class *v208;
  int v209;
  const char *v210;
  const char *v211;
  id v212;
  void *v213;
  void *v214;
  const char *v215;
  const char *v216;
  const char *v217;
  const char *v218;
  const char *v219;
  const char *Name;
  const char *v221;
  const char *v222;
  const char *v223;
  const char *v224;
  const char *v225;
  const char *v226;
  const char *v227;
  const char *v228;
  unsigned int v229;
  id v230;
  char *v231;
  SEL v232;
  SEL v233;
  NSMutableArray *v234;
  unsigned int v235;
  NSMutableData *v236;
  void *v237;
  id v238;
  id v239;
  NSMutableData *v240;
  char v241;
  char v242;
  int v243;
  NSErrorUserInfoKey v244;
  void *v245;
  uint8_t buf[8];
  __int16 v247;
  const char *v248;
  __int16 v249;
  const char *v250;
  __int16 v251;
  int v252;
  __int16 v253;
  NSObject *v254;
  NSErrorUserInfoKey v255;
  void *v256;
  NSErrorUserInfoKey v257;
  void *v258;
  NSErrorUserInfoKey v259;

  v15 = a2;
  v239 = a4;
  v238 = a5;
  v16 = a6;
  v17 = a7;
  v240 = objc_opt_new(NSMutableData);
  v18 = objc_opt_new(NSMutableArray);
  if (v18)
  {
    v19 = v18;
    v235 = a3;
    v237 = v17;
    v241 = byte_10032A940;
    v20 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v241, 1);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 196, v20));
    -[NSMutableArray addObject:](v19, "addObject:", v21);

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "transferRequest"));
    v236 = a8;
    v23 = sub_10008FD98(a1, v22, a8);
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);

    if (!v24)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      v33 = v16;
      if (Logger)
      {
        v60 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
        v64 = 45;
        if (isMetaClass)
          v64 = 43;
        v60(3, "%c[%{public}s %{public}s]:%i Failed to create SURF specific input", v64, ClassName, Name, 515);
      }
      v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v66 = NFSharedLogGetLogger(v65);
      v67 = objc_claimAutoreleasedReturnValue(v66);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        v68 = object_getClass(a1);
        if (class_isMetaClass(v68))
          v69 = 43;
        else
          v69 = 45;
        v70 = object_getClassName(a1);
        v71 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v69;
        v247 = 2082;
        v248 = v70;
        v249 = 2082;
        v250 = v71;
        v251 = 1024;
        v252 = 515;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create SURF specific input", buf, 0x22u);
      }
      v39 = 0;
      v57 = 0;
      v54 = v19;
      v32 = (char *)v15;
      goto LABEL_123;
    }
    -[NSMutableArray addObject:](v19, "addObject:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 239, v19));

    v26 = objc_opt_new(NSMutableArray);
    v27 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269AD0, 12);
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 79, v27));
    -[NSMutableArray addObject:](v26, "addObject:", v28);

    -[NSMutableArray addObject:](v26, "addObject:", v25);
    v234 = v26;
    v29 = objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 228, v26));

    v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject asData](v29, "asData"));
    -[NSMutableData appendData:](v240, "appendData:", v30);

    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "topUpRequest"));
    v32 = (char *)v15;
    v33 = v16;
    if (v31)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "topUpRequest"));
      v35 = sub_1001C43B8((uint64_t)NFECommercePaymentRequestEncoder, v34, 0, v236);
      v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
      if (v36)
      {
        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 230, v36));
        if (v37)
        {
          v38 = v37;
          v39 = v38;
        }
        else
        {
          v85 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v86 = NFLogGetLogger(v85);
          if (v86)
          {
            v87 = (void (*)(uint64_t, const char *, ...))v86;
            v88 = object_getClass(a1);
            v89 = class_isMetaClass(v88);
            v90 = object_getClassName(a1);
            v222 = sel_getName("createOsloSpecificInput:error:");
            v91 = 45;
            if (v89)
              v91 = 43;
            v87(3, "%c[%{public}s %{public}s]:%i Failed to create TLV.", v91, v90, v222, 455);
          }
          v92 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v93 = NFSharedLogGetLogger(v92);
          v94 = objc_claimAutoreleasedReturnValue(v93);
          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            v95 = object_getClass(a1);
            if (class_isMetaClass(v95))
              v96 = 43;
            else
              v96 = 45;
            v97 = object_getClassName(a1);
            v98 = sel_getName("createOsloSpecificInput:error:");
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v96;
            v32 = (char *)v15;
            v247 = 2082;
            v248 = v97;
            v249 = 2082;
            v250 = v98;
            v251 = 1024;
            v252 = 455;
            _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create TLV.", buf, 0x22u);
          }

          if (v236)
          {
            v231 = (char *)objc_alloc((Class)NSError);
            v99 = v32;
            v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v259 = NSLocalizedDescriptionKey;
            v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
            *(_QWORD *)buf = v101;
            v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v259, 1));
            v236->super.super.isa = (Class)objc_msgSend(v231, "initWithDomain:code:userInfo:", v100, 34, v102);

            v32 = v99;
          }
          v38 = 0;
          v39 = 0;
        }
      }
      else
      {
        v230 = v16;
        v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v73 = NFLogGetLogger(v72);
        if (v73)
        {
          v74 = (void (*)(uint64_t, const char *, ...))v73;
          v75 = object_getClass(a1);
          v76 = class_isMetaClass(v75);
          v77 = object_getClassName(a1);
          v221 = sel_getName("createOsloSpecificInput:error:");
          v78 = 45;
          if (v76)
            v78 = 43;
          v74(3, "%c[%{public}s %{public}s]:%i Failed to create TLV from input.", v78, v77, v221, 449);
        }
        v79 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v80 = NFSharedLogGetLogger(v79);
        v38 = objc_claimAutoreleasedReturnValue(v80);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          v81 = object_getClass(a1);
          if (class_isMetaClass(v81))
            v82 = 43;
          else
            v82 = 45;
          v83 = object_getClassName(a1);
          v84 = sel_getName("createOsloSpecificInput:error:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v82;
          v247 = 2082;
          v248 = v83;
          v249 = 2082;
          v250 = v84;
          v251 = 1024;
          v252 = 449;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create TLV from input.", buf, 0x22u);
        }
        v39 = 0;
        v33 = v230;
      }

      if (!v39)
      {
        v118 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v119 = NFLogGetLogger(v118);
        v17 = v237;
        if (v119)
        {
          v120 = (void (*)(uint64_t, const char *, ...))v119;
          v121 = object_getClass(a1);
          v122 = class_isMetaClass(v121);
          v123 = v32;
          v124 = object_getClassName(a1);
          v223 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
          v125 = 45;
          if (v122)
            v125 = 43;
          v215 = v124;
          v32 = v123;
          v120(3, "%c[%{public}s %{public}s]:%i Failed to create Oslo specific input", v125, v215, v223, 534);
        }
        v126 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v127 = NFSharedLogGetLogger(v126);
        v67 = objc_claimAutoreleasedReturnValue(v127);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          v128 = object_getClass(a1);
          if (class_isMetaClass(v128))
            v129 = 43;
          else
            v129 = 45;
          v130 = object_getClassName(a1);
          v131 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v129;
          v247 = 2082;
          v248 = v130;
          v249 = 2082;
          v250 = v131;
          v251 = 1024;
          v252 = 534;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create Oslo specific input", buf, 0x22u);
        }
        v39 = 0;
        v57 = 0;
        goto LABEL_82;
      }
      v103 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject asData](v39, "asData"));
      -[NSMutableData appendData:](v240, "appendData:", v103);

    }
    else
    {
      v39 = v29;
    }
    v17 = v237;
    v104 = kdebug_trace(724566148, 0, 0, 0, 0);
    v105 = NFSharedSignpostLog(v104);
    v106 = objc_claimAutoreleasedReturnValue(v105);
    if (os_signpost_enabled(v106))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v106, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "acmGetOlsoType in", buf, 2u);
    }

    v107 = sub_10020915C((uint64_t)NFSSEWrapper, v239);
    v108 = kdebug_trace(724566148, 1, 0, 0, 0);
    v109 = NFSharedSignpostLog(v108);
    v110 = objc_claimAutoreleasedReturnValue(v109);
    if (os_signpost_enabled(v110))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v110, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "acmGetOlsoType out", buf, 2u);
    }

    v111 = (_DWORD)v107 == 4;
    v112 = (_DWORD)v107 == 4 || (_DWORD)v107 == 2;
    if ((_DWORD)v107 == 2 || (_DWORD)v107 == 4 || (v111 = (_DWORD)v107 == 3, (_DWORD)v107 == 1) || (_DWORD)v107 == 3)
    {
LABEL_63:
      v113 = v240;
      v114 = -[NSMutableData length](v113, "length");
      v243 = 849024;
      v242 = 0;
      v115 = objc_opt_new(NSMutableData);
      -[NSMutableData appendBytes:length:](v115, "appendBytes:length:", &v243, 4);
      if (v114 > 0xFF)
      {
        if (v114 >> 16)
        {
          if (v236)
          {
            v229 = v111;
            v132 = objc_alloc((Class)NSError);
            v232 = v32;
            v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v259 = NSLocalizedDescriptionKey;
            v134 = v39;
            v135 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
            *(_QWORD *)buf = v135;
            v136 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v259, 1));
            v137 = v132;
            v111 = v229;
            v236->super.super.isa = (Class)objc_msgSend(v137, "initWithDomain:code:userInfo:", v133, 10, v136);

            v32 = (char *)v232;
            v39 = v134;

          }
          v67 = 0;
LABEL_86:

          v138 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v139 = NFLogGetLogger(v138);
          v140 = (void (*)(uint64_t, const char *, ...))v139;
          if (v67)
          {
            v141 = v111;
            v233 = v32;
            if (v139)
            {
              v142 = object_getClass(a1);
              v143 = class_isMetaClass(v142);
              v216 = object_getClassName(a1);
              v224 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
              v144 = 45;
              if (v143)
                v144 = 43;
              v140(6, "%c[%{public}s %{public}s]:%i Sending data to be signed : %{public}@", v144, v216, v224, 569, v67);
            }
            v145 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v146 = NFSharedLogGetLogger(v145);
            v147 = objc_claimAutoreleasedReturnValue(v146);
            if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
            {
              v148 = object_getClass(a1);
              if (class_isMetaClass(v148))
                v149 = 43;
              else
                v149 = 45;
              v150 = object_getClassName(a1);
              v151 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = v149;
              v247 = 2082;
              v248 = v150;
              v249 = 2082;
              v250 = v151;
              v251 = 1024;
              v252 = 569;
              v253 = 2114;
              v254 = v67;
              _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Sending data to be signed : %{public}@", buf, 0x2Cu);
            }

            v152 = kdebug_trace(724566148, 0, 0, 0, 0);
            v153 = NFSharedSignpostLog(v152);
            v154 = objc_claimAutoreleasedReturnValue(v153);
            if (os_signpost_enabled(v154))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v154, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "authorizeAndSign in", buf, 2u);
            }

            v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData"));
            v156 = sub_1002099B8((uint64_t)NFSSEWrapper, 3, v67, v235, v239, v155, v112, v141, v238, v33, v237, 0, 0, 0, 0);
            v57 = objc_claimAutoreleasedReturnValue(v156);

            v157 = kdebug_trace(724566148, 1, 0, 0, 0);
            v158 = NFSharedSignpostLog(v157);
            v159 = objc_claimAutoreleasedReturnValue(v158);
            if (os_signpost_enabled(v159))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v159, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "authorizeAndSign out", buf, 2u);
            }

            v160 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v161 = NFLogGetLogger(v160);
            v162 = (void (*)(uint64_t, const char *, ...))v161;
            if (!v57)
            {
              if (v161)
              {
                v184 = object_getClass(a1);
                v185 = class_isMetaClass(v184);
                v186 = object_getClassName(a1);
                v227 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
                v187 = 45;
                if (v185)
                  v187 = 43;
                v162(3, "%c[%{public}s %{public}s]:%i Failed to get signed data.", v187, v186, v227, 592);
              }
              v188 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v189 = NFSharedLogGetLogger(v188);
              v190 = objc_claimAutoreleasedReturnValue(v189);
              if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
              {
                v191 = object_getClass(a1);
                if (class_isMetaClass(v191))
                  v192 = 43;
                else
                  v192 = 45;
                v193 = object_getClassName(a1);
                v194 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&buf[4] = v192;
                v247 = 2082;
                v248 = v193;
                v249 = 2082;
                v250 = v194;
                v251 = 1024;
                v252 = 592;
                _os_log_impl((void *)&_mh_execute_header, v190, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get signed data.", buf, 0x22u);
              }

              v17 = v237;
              if (!v236)
              {
                v57 = 0;
                v32 = (char *)v233;
                v54 = v234;
                goto LABEL_123;
              }
              v195 = objc_alloc((Class)NSError);
              v168 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v244 = NSLocalizedDescriptionKey;
              v196 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
              v245 = v196;
              v197 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v245, &v244, 1));
              v236->super.super.isa = (Class)objc_msgSend(v195, "initWithDomain:code:userInfo:", v168, 13, v197);

              v57 = 0;
              v32 = (char *)v233;
              v54 = v234;
              goto LABEL_122;
            }
            if (v161)
            {
              v163 = object_getClass(a1);
              v164 = class_isMetaClass(v163);
              v217 = object_getClassName(a1);
              v225 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
              v165 = 45;
              if (v164)
                v165 = 43;
              v162(6, "%c[%{public}s %{public}s]:%i Signed data is %{public}@.", v165, v217, v225, 595, v57);
            }
            v166 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v167 = NFSharedLogGetLogger(v166);
            v168 = objc_claimAutoreleasedReturnValue(v167);
            if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
            {
              v169 = object_getClass(a1);
              if (class_isMetaClass(v169))
                v170 = 43;
              else
                v170 = 45;
              v171 = object_getClassName(a1);
              v172 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = v170;
              v247 = 2082;
              v248 = v171;
              v249 = 2082;
              v250 = v172;
              v251 = 1024;
              v252 = 595;
              v253 = 2114;
              v254 = v57;
              _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Signed data is %{public}@.", buf, 0x2Cu);
            }
            v17 = v237;
            v32 = (char *)v233;
          }
          else
          {
            if (v139)
            {
              v173 = object_getClass(a1);
              v174 = class_isMetaClass(v173);
              v175 = object_getClassName(a1);
              v226 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
              v176 = 45;
              if (v174)
                v176 = 43;
              v140(3, "%c[%{public}s %{public}s]:%i Failed to create APDU", v176, v175, v226, 565);
            }
            v177 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v178 = NFSharedLogGetLogger(v177);
            v168 = objc_claimAutoreleasedReturnValue(v178);
            if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
            {
              v179 = object_getClass(a1);
              if (class_isMetaClass(v179))
                v180 = 43;
              else
                v180 = 45;
              v181 = object_getClassName(a1);
              v182 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v180;
              v247 = 2082;
              v248 = v181;
              v249 = 2082;
              v250 = v182;
              v251 = 1024;
              v252 = 565;
              _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create APDU", buf, 0x22u);
            }
            v57 = 0;
            v17 = v237;
          }
          v54 = v234;
LABEL_122:

          goto LABEL_123;
        }
        buf[0] = 0;
        buf[1] = BYTE1(v114);
        buf[2] = v114;
        v116 = v115;
        v117 = 3;
      }
      else
      {
        buf[0] = v114;
        v116 = v115;
        v117 = 1;
      }
      -[NSMutableData appendBytes:length:](v116, "appendBytes:length:", buf, v117);
      -[NSMutableData appendData:](v115, "appendData:", v113);
      -[NSMutableData appendBytes:length:](v115, "appendBytes:length:", &v242, 1);
      v67 = v115;
      goto LABEL_86;
    }
    if ((_DWORD)v107 == 5)
    {
      v111 = 1;
      goto LABEL_63;
    }
    v198 = v32;
    v199 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v200 = NFLogGetLogger(v199);
    if (v200)
    {
      v201 = (void (*)(uint64_t, const char *, ...))v200;
      v202 = object_getClass(a1);
      v203 = class_isMetaClass(v202);
      v218 = object_getClassName(a1);
      v228 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
      v204 = 45;
      if (v203)
        v204 = 43;
      v201(3, "%c[%{public}s %{public}s]:%i Unknown transaction type: %d", v204, v218, v228, 558, v107);
    }
    v205 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v206 = NFSharedLogGetLogger(v205);
    v207 = objc_claimAutoreleasedReturnValue(v206);
    if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
    {
      v208 = object_getClass(a1);
      if (class_isMetaClass(v208))
        v209 = 43;
      else
        v209 = 45;
      v210 = object_getClassName(a1);
      v211 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v209;
      v247 = 2082;
      v248 = v210;
      v249 = 2082;
      v250 = v211;
      v251 = 1024;
      v252 = 558;
      v253 = 1024;
      LODWORD(v254) = v107;
      _os_log_impl((void *)&_mh_execute_header, v207, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown transaction type: %d", buf, 0x28u);
    }

    if (!v236)
    {
      v57 = 0;
      v32 = v198;
      v54 = v234;
      goto LABEL_124;
    }
    v212 = objc_alloc((Class)NSError);
    v67 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v255 = NSLocalizedDescriptionKey;
    v213 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
    v256 = v213;
    v214 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v256, &v255, 1));
    v236->super.super.isa = (Class)objc_msgSend(v212, "initWithDomain:code:userInfo:", v67, 13, v214);

    v57 = 0;
    v32 = v198;
LABEL_82:
    v54 = v234;
LABEL_123:

LABEL_124:
    goto LABEL_125;
  }
  v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v41 = NFLogGetLogger(v40);
  if (v41)
  {
    v42 = (void (*)(uint64_t, const char *, ...))v41;
    v43 = object_getClass(a1);
    v44 = class_isMetaClass(v43);
    v45 = object_getClassName(a1);
    v219 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
    v46 = 45;
    if (v44)
      v46 = 43;
    v42(3, "%c[%{public}s %{public}s]:%i Failed to create TLV children", v46, v45, v219, 505);
  }
  v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v48 = NFSharedLogGetLogger(v47);
  v49 = objc_claimAutoreleasedReturnValue(v48);
  v50 = a8;
  v33 = v16;
  if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
  {
    v51 = object_getClass(a1);
    if (class_isMetaClass(v51))
      v52 = 43;
    else
      v52 = 45;
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v52;
    v247 = 2082;
    v248 = object_getClassName(a1);
    v249 = 2082;
    v250 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
    v251 = 1024;
    v252 = 505;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create TLV children", buf, 0x22u);
  }

  if (v50)
  {
    v53 = objc_alloc((Class)NSError);
    v54 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v257 = NSLocalizedDescriptionKey;
    v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
    v258 = v55;
    v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v258, &v257, 1));
    v50->super.super.isa = (Class)objc_msgSend(v53, "initWithDomain:code:userInfo:", v54, 34, v56);

    v57 = 0;
    v32 = (char *)v15;
LABEL_125:

    goto LABEL_126;
  }
  v57 = 0;
  v32 = (char *)v15;
LABEL_126:

  return v57;
}

uint64_t sub_100092EF4(void *a1, void *a2, uint64_t a3)
{
  id v5;
  _BYTE *v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  const char *Name;
  NSErrorUserInfoKey v25;
  void *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;

  v5 = objc_retainAutorelease(a2);
  v6 = objc_msgSend(v5, "bytes");
  if ((unint64_t)objc_msgSend(v5, "length") > 3)
  {
    if (v6[3] == 3)
      a3 = 4;
    else
      a3 = v6[3];
  }
  else
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("getUserVerification:error:");
      v13 = 45;
      if (isMetaClass)
        v13 = 43;
      v9(3, "%c[%{public}s %{public}s]:%i Signed data is too small, unable to get user verification", v13, ClassName, Name, 608);
    }
    v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v15 = NFSharedLogGetLogger(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = object_getClass(a1);
      if (class_isMetaClass(v17))
        v18 = 43;
      else
        v18 = 45;
      *(_DWORD *)buf = 67109890;
      v28 = v18;
      v29 = 2082;
      v30 = object_getClassName(a1);
      v31 = 2082;
      v32 = sel_getName("getUserVerification:error:");
      v33 = 1024;
      v34 = 608;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Signed data is too small, unable to get user verification", buf, 0x22u);
    }

    if (a3)
    {
      v19 = objc_alloc((Class)NSError);
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v25 = NSLocalizedDescriptionKey;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
      v26 = v21;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1));
      *(_QWORD *)a3 = objc_msgSend(v19, "initWithDomain:code:userInfo:", v20, 13, v22);

      a3 = 0;
    }
  }

  return a3;
}

NSMutableData *sub_100093168(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  NSMutableData *v8;
  unsigned int v9;
  void *specific;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *i;
  void *v28;
  void *v29;
  id v30;
  unsigned int v31;
  id v32;
  _QWORD *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  NSMutableData *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void (*v51)(uint64_t, const char *, ...);
  objc_class *v52;
  _BOOL4 v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  objc_class *v60;
  int v61;
  const char *v62;
  const char *v63;
  unsigned int v64;
  void *v65;
  uint64_t v66;
  void (*v67)(uint64_t, const char *, ...);
  objc_class *v68;
  _BOOL4 v69;
  const char *v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  NSObject *v75;
  objc_class *v76;
  int v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  const char *Name;
  uint64_t v87;
  _QWORD *v88;
  id v89;
  id v90;
  id obj;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  id v96;
  NSErrorUserInfoKey v97;
  void *v98;
  NSErrorUserInfoKey v99;
  void *v100;
  uint8_t buf[4];
  int v102;
  __int16 v103;
  const char *v104;
  __int16 v105;
  const char *v106;
  __int16 v107;
  int v108;
  __int16 v109;
  uint64_t v110;
  NSErrorUserInfoKey v111;
  void *v112;
  _BYTE v113[128];
  NSErrorUserInfoKey v114;
  void *v115;

  v5 = a2;
  v90 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "transceiveData:toOS:error:", v5, 0, a3));
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NFResponseAPDU responseWithData:](NFResponseAPDU, "responseWithData:", v6));
    if (objc_msgSend(v7, "status") == 36864)
    {
      v8 = (NSMutableData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "response"));
LABEL_72:

      goto LABEL_73;
    }
    v9 = objc_msgSend(v7, "status");
    if ((v9 & 0xFFF0) == 0x69F0)
      v9 = objc_msgSend(v7, "decodeUnderlyingAppletError:", 0);
    if (v9 == 27272)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v12 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("sendSEPPKSURFPaymentRequest:error:");
        v16 = 45;
        if (isMetaClass)
          v16 = 43;
        v12(3, "%c[%{public}s %{public}s]:%i Failed to send payment request : not registered", v16, ClassName, Name, 654);
      }
      v89 = v5;
      v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v18 = NFSharedLogGetLogger(v17);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = object_getClass(a1);
        if (class_isMetaClass(v20))
          v21 = 43;
        else
          v21 = 45;
        *(_DWORD *)buf = 67109890;
        v102 = v21;
        v103 = 2082;
        v104 = object_getClassName(v90);
        v105 = 2082;
        v106 = sel_getName("sendSEPPKSURFPaymentRequest:error:");
        v107 = 1024;
        v108 = 654;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send payment request : not registered", buf, 0x22u);
      }
      v88 = a3;

      v96 = 0;
      v22 = sub_10022EE68(v90, &v96);
      v92 = 0u;
      v93 = 0u;
      v94 = 0u;
      v95 = 0u;
      obj = v96;
      v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v92, v113, 16);
      if (v23)
      {
        v24 = v23;
        v25 = 0;
        v26 = *(_QWORD *)v93;
        do
        {
          for (i = 0; i != v24; i = (char *)i + 1)
          {
            if (*(_QWORD *)v93 != v26)
              objc_enumerationMutation(obj);
            v28 = *(void **)(*((_QWORD *)&v92 + 1) + 8 * (_QWORD)i);
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "identifierAsData"));
            v30 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269AD0, 12);
            v31 = objc_msgSend(v29, "isEqualToData:", v30);

            if (v31)
            {
              v32 = v28;

              v25 = v32;
            }
          }
          v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v92, v113, 16);
        }
        while (v24);
      }
      else
      {
        v25 = 0;
      }

      if (objc_msgSend(v25, "lifecycleState") == 7
        || objc_msgSend(v25, "lifecycleState") == 15)
      {
        v5 = v89;
        if (v88 && !*v88)
        {
          v37 = objc_alloc((Class)NSError);
          v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v111 = NSLocalizedDescriptionKey;
          v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Not registered"));
          v112 = v39;
          v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v112, &v111, 1));
          *v88 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 42, v40);

        }
        goto LABEL_37;
      }

      v5 = v89;
      a3 = v88;
    }
    v41 = objc_opt_new(NSMutableData);
    while (1)
    {
      if ((objc_msgSend(v7, "status") & 0xFF00) != 0x6100)
      {
        v43 = v7;
        if (a3 && !*a3)
        {
          v45 = objc_alloc((Class)NSError);
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v97 = NSLocalizedDescriptionKey;
          v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
          v98 = v47;
          v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v98, &v97, 1));
          *a3 = objc_msgSend(v45, "initWithDomain:code:userInfo:", v46, 16, v48);

        }
        v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v50 = NFLogGetLogger(v49);
        if (v50)
        {
          v51 = (void (*)(uint64_t, const char *, ...))v50;
          v52 = object_getClass(v90);
          v53 = class_isMetaClass(v52);
          v54 = object_getClassName(v90);
          v55 = sel_getName("sendSEPPKSURFPaymentRequest:error:");
          v87 = objc_msgSend(v43, "status");
          v56 = 45;
          if (v53)
            v56 = 43;
          v51(3, "%c[%{public}s %{public}s]:%i Failed to send payment request: 0x%04x", v56, v54, v55, 699, v87);
        }
        v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v58 = NFSharedLogGetLogger(v57);
        v59 = objc_claimAutoreleasedReturnValue(v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          v60 = object_getClass(v90);
          if (class_isMetaClass(v60))
            v61 = 43;
          else
            v61 = 45;
          v62 = object_getClassName(v90);
          v63 = sel_getName("sendSEPPKSURFPaymentRequest:error:");
          v64 = objc_msgSend(v43, "status");
          *(_DWORD *)buf = 67110146;
          v102 = v61;
          v103 = 2082;
          v104 = v62;
          v105 = 2082;
          v106 = v63;
          v107 = 1024;
          v108 = 699;
          v109 = 1024;
          LODWORD(v110) = v64;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send payment request: 0x%04x", buf, 0x28u);
        }

        v8 = 0;
        goto LABEL_57;
      }
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "response"));
      -[NSMutableData appendData:](v41, "appendData:", v42);

      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 192, 0, 0, 0, objc_msgSend(v7, "status"), 0, a3));
      if (!v43)
        break;
      v7 = v43;
      if (objc_msgSend(v43, "status") == 36864)
      {
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "response"));
        -[NSMutableData appendData:](v41, "appendData:", v44);

        v8 = v41;
LABEL_57:
        v7 = v43;
        goto LABEL_71;
      }
    }
    v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v66 = NFLogGetLogger(v65);
    if (v66)
    {
      v67 = (void (*)(uint64_t, const char *, ...))v66;
      v68 = object_getClass(v90);
      v69 = class_isMetaClass(v68);
      v70 = object_getClassName(v90);
      v71 = sel_getName("sendSEPPKSURFPaymentRequest:error:");
      v72 = 45;
      if (v69)
        v72 = 43;
      v67(3, "%c[%{public}s %{public}s]:%i Command failed : %{public}@", v72, v70, v71, 686, *a3);
    }
    v73 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v74 = NFSharedLogGetLogger(v73);
    v75 = objc_claimAutoreleasedReturnValue(v74);
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      v76 = object_getClass(v90);
      if (class_isMetaClass(v76))
        v77 = 43;
      else
        v77 = 45;
      v78 = object_getClassName(v90);
      v79 = sel_getName("sendSEPPKSURFPaymentRequest:error:");
      v80 = *a3;
      *(_DWORD *)buf = 67110146;
      v102 = v77;
      v103 = 2082;
      v104 = v78;
      v105 = 2082;
      v106 = v79;
      v107 = 1024;
      v108 = 686;
      v109 = 2114;
      v110 = v80;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed : %{public}@", buf, 0x2Cu);

    }
    else
    {

      if (!a3)
        goto LABEL_70;
    }
    if (!*a3)
    {
      v81 = objc_alloc((Class)NSError);
      v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v99 = NSLocalizedDescriptionKey;
      v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v100 = v83;
      v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v100, &v99, 1));
      *a3 = objc_msgSend(v81, "initWithDomain:code:userInfo:", v82, 16, v84);

    }
LABEL_70:
    v7 = 0;
    v8 = 0;
LABEL_71:

    goto LABEL_72;
  }
  if (a3 && !*a3)
  {
    v33 = a3;
    v34 = objc_alloc((Class)NSError);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v114 = NSLocalizedDescriptionKey;
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
    v115 = v35;
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v115, &v114, 1));
    *v33 = objc_msgSend(v34, "initWithDomain:code:userInfo:", v7, 34, v36);

LABEL_37:
    v8 = 0;
    goto LABEL_72;
  }
  v8 = 0;
LABEL_73:

  return v8;
}

id sub_100093B5C(void *a1, void *a2, void *a3, char a4, _QWORD *a5)
{
  id v8;
  id v9;
  NSMutableArray *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *i;
  void *v27;
  id v28;
  id v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  NSMutableArray *v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  uint64_t v45;
  void (*v46)(uint64_t, const char *, ...);
  objc_class *v47;
  _BOOL4 v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  objc_class *v53;
  int v54;
  const char *v55;
  const char *v56;
  id v57;
  id v58;
  void *v59;
  uint64_t v60;
  void (*v61)(uint64_t, const char *, ...);
  objc_class *v62;
  _BOOL4 v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  objc_class *v68;
  int v69;
  const char *v70;
  const char *v71;
  id v72;
  id v73;
  _QWORD *v74;
  void *specific;
  uint64_t Logger;
  void (*v77)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  NSObject *v83;
  objc_class *v84;
  int v85;
  const char *v86;
  const char *v87;
  id v88;
  _QWORD *v89;
  id v91;
  id v92;
  id v93;
  const char *v94;
  const char *v95;
  const char *ClassName;
  const char *v97;
  const char *v98;
  const char *Name;
  _QWORD *v100;
  void *v101;
  char v102;
  uint64_t v103;
  void *v104;
  NSMutableArray *v105;
  id v106;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  NSErrorUserInfoKey v117;
  void *v118;
  NSErrorUserInfoKey v119;
  void *v120;
  NSErrorUserInfoKey v121;
  void *v122;
  NSErrorUserInfoKey v123;
  void *v124;
  NSErrorUserInfoKey v125;
  void *v126;
  _BYTE v127[128];
  NSErrorUserInfoKey v128;
  void *v129;
  _BYTE v130[128];
  NSErrorUserInfoKey v131;
  uint64_t v132;
  int buf;
  int v134;
  __int16 v135;
  const char *v136;
  __int16 v137;
  const char *v138;
  __int16 v139;
  int v140;
  __int16 v141;
  id v142;

  v8 = a2;
  v9 = a3;
  v10 = objc_opt_new(NSMutableArray);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v9));
  v12 = v11;
  if (v11)
  {
    v102 = a4;
    v104 = v11;
    v105 = v10;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v13 = v11;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v113, v130, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v114;
LABEL_4:
      v17 = 0;
      while (1)
      {
        if (*(_QWORD *)v114 != v16)
          objc_enumerationMutation(v13);
        v18 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * v17);
        if (objc_msgSend(v18, "tag") == 234)
          break;
        if (v15 == (id)++v17)
        {
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v113, v130, 16);
          if (v15)
            goto LABEL_4;
          goto LABEL_10;
        }
      }
      v19 = v18;

      if (!v19)
        goto LABEL_32;
      v101 = v8;
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "children"));
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v109, v127, 16);
      v106 = v9;
      v103 = (uint64_t)v19;
      if (v21)
      {
        v22 = v21;
        v100 = a5;
        v23 = 0;
        v24 = 0;
        v25 = *(_QWORD *)v110;
        do
        {
          for (i = 0; i != v22; i = (char *)i + 1)
          {
            if (*(_QWORD *)v110 != v25)
              objc_enumerationMutation(v20);
            v27 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v27, "tag") == 150)
            {
              v28 = v27;

              v24 = v28;
            }
            if (objc_msgSend(v27, "tag") == 24375)
            {
              v29 = v27;

              v23 = v29;
            }
          }
          v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v109, v127, 16);
        }
        while (v22);

        if (v24)
        {
          v9 = v106;
          a5 = v100;
          if (v23)
          {
            v8 = v101;
            v30 = sub_10008FD98(a1, v101, v100);
            v31 = (_QWORD *)objc_claimAutoreleasedReturnValue(v30);
            a5 = v31;
            if (v31)
            {
              v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "children"));
              -[NSMutableArray addObjectsFromArray:](v105, "addObjectsFromArray:", v32);

              -[NSMutableArray addObject:](v105, "addObject:", v24);
              v108 = v102;
              v33 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v108, 1);
              v34 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 151, v33));

              if (v34)
              {
                -[NSMutableArray addObject:](v105, "addObject:", v34);
                v35 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 32525, v105));
                if (v35)
                {
                  v36 = (NSMutableArray *)objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithObjects:", v35, v23, 0);

                  if (v36)
                  {
                    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 234, v36));
                    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "asData"));

                    if (!v100 || v38)
                    {
                      v105 = v36;
                      goto LABEL_73;
                    }
                    v39 = objc_alloc((Class)NSError);
                    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                    v117 = NSLocalizedDescriptionKey;
                    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
                    v118 = v41;
                    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v118, &v117, 1));
                    v43 = objc_msgSend(v39, "initWithDomain:code:userInfo:", v40, 34, v42);
                    v105 = v36;
                  }
                  else
                  {
                    if (!v100)
                    {
                      v105 = 0;
                      goto LABEL_72;
                    }
                    v93 = objc_alloc((Class)NSError);
                    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                    v119 = NSLocalizedDescriptionKey;
                    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
                    v120 = v41;
                    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v120, &v119, 1));
                    v43 = objc_msgSend(v93, "initWithDomain:code:userInfo:", v40, 34, v42);
                    v105 = 0;
                  }
                }
                else
                {
                  if (!v100)
                  {
                    v35 = 0;
                    goto LABEL_72;
                  }
                  v92 = objc_alloc((Class)NSError);
                  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                  v121 = NSLocalizedDescriptionKey;
                  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
                  v122 = v41;
                  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v122, &v121, 1));
                  v43 = objc_msgSend(v92, "initWithDomain:code:userInfo:", v40, 34, v42);
                }
                *v100 = v43;

                v8 = v101;
LABEL_71:

LABEL_72:
                v38 = 0;
                goto LABEL_73;
              }
              if (v100)
              {
                v91 = objc_alloc((Class)NSError);
                v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                v123 = NSLocalizedDescriptionKey;
                v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
                v124 = v40;
                v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v124, &v123, 1));
                v34 = 0;
                *v100 = objc_msgSend(v91, "initWithDomain:code:userInfo:", v35, 34, v41);
                goto LABEL_71;
              }
            }
            v34 = 0;
            goto LABEL_55;
          }
        }
        else
        {
          a5 = v100;
        }
      }
      else
      {

        v24 = 0;
        v23 = 0;
      }
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v77 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("createSURFToken:from:userVerification:error:");
        v80 = 45;
        if (isMetaClass)
          v80 = 43;
        v77(3, "%c[%{public}s %{public}s]:%i Failed to get current counter or signature: %{public}@", v80, ClassName, Name, 749, v13);
      }
      v81 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v82 = NFSharedLogGetLogger(v81);
      v83 = objc_claimAutoreleasedReturnValue(v82);
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
      {
        v84 = object_getClass(a1);
        if (class_isMetaClass(v84))
          v85 = 43;
        else
          v85 = 45;
        v86 = object_getClassName(a1);
        v87 = sel_getName("createSURFToken:from:userVerification:error:");
        buf = 67110146;
        v134 = v85;
        v135 = 2082;
        v136 = v86;
        v137 = 2082;
        v138 = v87;
        v139 = 1024;
        v140 = 749;
        v141 = 2114;
        v142 = v13;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get current counter or signature: %{public}@", (uint8_t *)&buf, 0x2Cu);
      }

      v8 = v101;
      if (a5)
      {
        v88 = objc_alloc((Class)NSError);
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v125 = NSLocalizedDescriptionKey;
        v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
        v126 = v40;
        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v126, &v125, 1));
        v58 = objc_msgSend(v88, "initWithDomain:code:userInfo:", v35, 10, v41);
        v34 = 0;
        goto LABEL_70;
      }
      v34 = 0;
      v38 = 0;
      v9 = v106;
      goto LABEL_74;
    }
LABEL_10:

LABEL_32:
    v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v45 = NFLogGetLogger(v44);
    if (v45)
    {
      v46 = (void (*)(uint64_t, const char *, ...))v45;
      v47 = object_getClass(a1);
      v48 = class_isMetaClass(v47);
      v94 = object_getClassName(a1);
      v97 = sel_getName("createSURFToken:from:userVerification:error:");
      v49 = 45;
      if (v48)
        v49 = 43;
      v46(3, "%c[%{public}s %{public}s]:%i Failed to find TLV_SURF_CRS_SMURF_TOKEN in %{public}@", v49, v94, v97, 735, v9);
    }
    v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v51 = NFSharedLogGetLogger(v50);
    v52 = objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      v53 = object_getClass(a1);
      if (class_isMetaClass(v53))
        v54 = 43;
      else
        v54 = 45;
      v55 = object_getClassName(a1);
      v56 = sel_getName("createSURFToken:from:userVerification:error:");
      buf = 67110146;
      v134 = v54;
      v135 = 2082;
      v136 = v55;
      v137 = 2082;
      v138 = v56;
      v139 = 1024;
      v140 = 735;
      v141 = 2114;
      v142 = v9;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to find TLV_SURF_CRS_SMURF_TOKEN in %{public}@", (uint8_t *)&buf, 0x2Cu);
    }

    if (!a5)
    {
      v19 = 0;
      v34 = 0;
      v23 = 0;
      v24 = 0;
LABEL_55:
      v38 = 0;
      goto LABEL_74;
    }
    v106 = v9;
    v57 = objc_alloc((Class)NSError);
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v128 = NSLocalizedDescriptionKey;
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v129 = v40;
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v129, &v128, 1));
    v58 = objc_msgSend(v57, "initWithDomain:code:userInfo:", v35, 10, v41);
    v103 = 0;
    v34 = 0;
    v23 = 0;
    v24 = 0;
LABEL_70:
    v89 = a5;
    a5 = 0;
    *v89 = v58;
    goto LABEL_71;
  }
  v59 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v60 = NFLogGetLogger(v59);
  if (v60)
  {
    v61 = (void (*)(uint64_t, const char *, ...))v60;
    v62 = object_getClass(a1);
    v63 = class_isMetaClass(v62);
    v95 = object_getClassName(a1);
    v98 = sel_getName("createSURFToken:from:userVerification:error:");
    v64 = 45;
    if (v63)
      v64 = 43;
    v61(3, "%c[%{public}s %{public}s]:%i Failed to create TLV from payment request: %{public}@", v64, v95, v98, 722, 0);
  }
  v106 = v9;
  v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v66 = NFSharedLogGetLogger(v65);
  v67 = objc_claimAutoreleasedReturnValue(v66);
  if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
  {
    v68 = object_getClass(a1);
    if (class_isMetaClass(v68))
      v69 = 43;
    else
      v69 = 45;
    v70 = object_getClassName(a1);
    v71 = sel_getName("createSURFToken:from:userVerification:error:");
    buf = 67110146;
    v134 = v69;
    v135 = 2082;
    v136 = v70;
    v137 = 2082;
    v138 = v71;
    v139 = 1024;
    v140 = 722;
    v141 = 2114;
    v142 = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create TLV from payment request: %{public}@", (uint8_t *)&buf, 0x2Cu);
  }

  if (a5)
  {
    v104 = 0;
    v105 = v10;
    v72 = objc_alloc((Class)NSError);
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v131 = NSLocalizedDescriptionKey;
    v103 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
    v132 = v103;
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v132, &v131, 1));
    v73 = objc_msgSend(v72, "initWithDomain:code:userInfo:", v34, 6, v35);
    v23 = 0;
    v24 = 0;
    v74 = a5;
    a5 = 0;
    v38 = 0;
    *v74 = v73;
LABEL_73:

    v9 = v106;
    v19 = (id)v103;
LABEL_74:

    v12 = v104;
    v10 = v105;
    goto LABEL_75;
  }
  v23 = 0;
  v24 = 0;
  v38 = 0;
LABEL_75:

  return v38;
}

_QWORD *sub_1000947E8(void *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *specific;
  uint64_t Logger;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  id v31;
  void *v32;
  const char *ClassName;
  const char *Name;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  NSErrorUserInfoKey v41;
  void *v42;
  uint8_t buf[4];
  int v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", a2));
  v8 = v7;
  if (v7)
  {
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v9 = v7;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v37;
      while (2)
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v37 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v14, "tag") == 235)
          {
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "childWithTag:", 225));
            v16 = v15;
            if (a3 && v15)
            {
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "childWithTag:", 130));
              v18 = v17;
              if (v17)
              {
                v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "value"));
                *a3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "NF_asHexString"));

              }
            }
            a4 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "asData"));
            goto LABEL_28;
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
        if (v11)
          continue;
        break;
      }
    }
    a4 = 0;
    goto LABEL_29;
  }
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v22 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("createOsloToken:transactionID:error:");
    v25 = 45;
    if (isMetaClass)
      v25 = 43;
    v22(3, "%c[%{public}s %{public}s]:%i Failed to create TLV from payment request: %{public}@", v25, ClassName, Name, 801, 0);
  }
  v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v27 = NFSharedLogGetLogger(v26);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    v29 = object_getClass(a1);
    if (class_isMetaClass(v29))
      v30 = 43;
    else
      v30 = 45;
    *(_DWORD *)buf = 67110146;
    v44 = v30;
    v45 = 2082;
    v46 = object_getClassName(a1);
    v47 = 2082;
    v48 = sel_getName("createOsloToken:transactionID:error:");
    v49 = 1024;
    v50 = 801;
    v51 = 2114;
    v52 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create TLV from payment request: %{public}@", buf, 0x2Cu);
  }

  if (a4)
  {
    v31 = objc_alloc((Class)NSError);
    v9 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v41 = NSLocalizedDescriptionKey;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
    v42 = v16;
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1));
    *a4 = objc_msgSend(v31, "initWithDomain:code:userInfo:", v9, 6, v32);

    a4 = 0;
LABEL_28:

LABEL_29:
  }

  return a4;
}

objc_class *sub_100094B68(void *a1, void *a2, unsigned int a3, void *a4, NFPeerPaymentResponse **a5)
{
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _BOOL4 v18;
  unsigned int v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  objc_class *v34;
  id v35;
  void *v36;
  int v37;
  const char *v38;
  const char *v39;
  objc_class *v40;
  objc_class *v41;
  id v42;
  void *specific;
  uint64_t Logger;
  void (*v45)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  objc_class *v53;
  int v54;
  const char *v55;
  const char *v56;
  id v57;
  void *v58;
  int v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  void *v68;
  uint64_t v69;
  void (*v70)(uint64_t, const char *, ...);
  objc_class *v71;
  _BOOL4 v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  NSObject *v76;
  objc_class *v77;
  int v78;
  const char *v79;
  const char *v80;
  void *v81;
  void *v82;
  void *v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  uint64_t v88;
  id v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void (*v93)(uint64_t, const char *, ...);
  objc_class *v94;
  _BOOL4 v95;
  uint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  NSObject *v100;
  objc_class *v101;
  int v102;
  const char *v103;
  const char *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  id v109;
  void *v110;
  uint64_t v111;
  int v112;
  void *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  void (*v117)(uint64_t, const char *, ...);
  objc_class *v118;
  _BOOL4 v119;
  const char *v120;
  const char *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  NSObject *v125;
  objc_class *v126;
  int v127;
  const char *v128;
  const char *v129;
  id v130;
  id v131;
  void *v132;
  void *v133;
  void *v134;
  NSObject *v135;
  void *v136;
  objc_class *v137;
  objc_class *v138;
  NSMutableData *v139;
  objc_class *v140;
  uint64_t v141;
  objc_class *v142;
  objc_class *v143;
  void *v144;
  void *v145;
  void *v146;
  NSMutableData *v147;
  void *v148;
  void *v149;
  id v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  uint64_t v164;
  void (*v165)(uint64_t, const char *, ...);
  objc_class *v166;
  _BOOL4 v167;
  const char *v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  NSObject *v172;
  objc_class *v173;
  int v174;
  const char *v175;
  const char *v176;
  void *v177;
  id v178;
  uint64_t v179;
  id v180;
  _QWORD *v181;
  uint64_t v182;
  objc_class *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  NSMutableDictionary *v188;
  id v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  NSMutableDictionary *v205;
  NFPeerPaymentResponse *v206;
  void *v207;
  uint64_t v208;
  void (*v209)(uint64_t, const char *, ...);
  objc_class *v210;
  _BOOL4 v211;
  const char *v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  NSObject *v216;
  objc_class *v217;
  int v218;
  const char *v219;
  const char *v220;
  id v221;
  void *v222;
  void *v223;
  void *v224;
  const char *v225;
  const char *v226;
  const char *v227;
  const char *v228;
  const char *Name;
  const char *v230;
  const char *v231;
  const char *v232;
  id v233;
  void *v234;
  void *v235;
  void *v236;
  unsigned int v237;
  id v238;
  objc_class *v239;
  const char *v240;
  NSMutableData *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  id v248;
  id v249;
  id v250;
  id v251;
  id v252;
  objc_class *v253;
  objc_class *v254;
  NSMutableData v255;
  id v256;
  id v257;
  id v258;
  NSErrorUserInfoKey v259;
  void *v260;
  _QWORD v261[4];
  _QWORD v262[4];
  _QWORD v263[4];
  _QWORD v264[4];
  _QWORD v265[4];
  _QWORD v266[4];
  _QWORD v267[4];
  _QWORD v268[4];
  NSErrorUserInfoKey v269;
  void *v270;
  _QWORD v271[4];
  _QWORD v272[4];
  NSErrorUserInfoKey v273;
  void *v274;
  NSErrorUserInfoKey v275;
  void *v276;
  NSErrorUserInfoKey v277;
  void *v278;
  _QWORD v279[4];
  _QWORD v280[4];
  _QWORD v281[4];
  _QWORD v282[4];
  uint8_t buf[4];
  int v284;
  __int16 v285;
  const char *v286;
  __int16 v287;
  const char *v288;
  __int16 v289;
  int v290;
  __int16 v291;
  id v292;
  _QWORD v293[4];
  _QWORD v294[4];
  NSErrorUserInfoKey v295;
  void *v296;
  NSErrorUserInfoKey v297;
  void *v298;

  v249 = a2;
  v9 = a4;
  if (!a1)
  {
    v41 = 0;
    goto LABEL_51;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  v11 = objc_msgSend(v10, "getTimestamp");

  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "transferRequest"));
  if (v12
    && (v13 = (void *)v12,
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "topUpRequest")),
        v14,
        v13,
        v14))
  {
    v15 = 3;
  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "transferRequest"));

    if (v16)
    {
      v15 = 1;
    }
    else
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "topUpRequest"));
      v18 = v17 != 0;

      v15 = (2 * v18);
    }
  }
  v258 = 0;
  v19 = sub_1002088C0((uint64_t)NFSSEWrapper, &v258);
  v20 = v258;
  v21 = v20;
  if (!v20 || v19)
  {
    v248 = v9;
    v42 = v20;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v45 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("performPeerPayment:uid:request:response:");
      v49 = 45;
      if (isMetaClass)
        v49 = 43;
      v45(3, "%c[%{public}s %{public}s]:%i Failed to get host challenge", v49, ClassName, Name, 845);
    }
    v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v51 = NFSharedLogGetLogger(v50);
    v52 = objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      v53 = object_getClass(a1);
      if (class_isMetaClass(v53))
        v54 = 43;
      else
        v54 = 45;
      v55 = object_getClassName(a1);
      v56 = sel_getName("performPeerPayment:uid:request:response:");
      *(_DWORD *)buf = 67109890;
      v284 = v54;
      v285 = 2082;
      v286 = v55;
      v287 = 2082;
      v288 = v56;
      v289 = 1024;
      v290 = 845;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get host challenge", buf, 0x22u);
    }

    v57 = objc_alloc((Class)NSError);
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v19)
    {
      v295 = NSLocalizedDescriptionKey;
      if (v19 >= 0x47)
        v59 = 71;
      else
        v59 = v19;
      v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E6F78[v59]));
      v296 = v60;
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v296, &v295, 1));
      v62 = v57;
      v63 = v58;
      v64 = v19;
    }
    else
    {
      v297 = NSLocalizedDescriptionKey;
      v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
      v298 = v60;
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v298, &v297, 1));
      v62 = v57;
      v63 = v58;
      v64 = 6;
    }
    v67 = objc_msgSend(v62, "initWithDomain:code:userInfo:", v63, v64, v61);

    v293[0] = CFSTR("peerPaymentRequestType");
    v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15));
    v294[0] = v81;
    v294[1] = &off_1002FE490;
    v293[1] = CFSTR("peerPaymentRequestErrorStep");
    v293[2] = CFSTR("peerPaymentRequestErrorCode");
    v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v67, "code")));
    v294[2] = v82;
    v293[3] = CFSTR("peerPaymentRequestStartTime");
    v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v11));
    v294[3] = v83;
    v84 = v294;
    v85 = v293;
    goto LABEL_48;
  }
  v22 = sub_10008CB24(a1);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (v23)
  {
    v24 = (void *)v23;
    v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v26 = NFLogGetLogger(v25);
    if (v26)
    {
      v27 = (void (*)(uint64_t, const char *, ...))v26;
      v28 = object_getClass(a1);
      v29 = class_isMetaClass(v28);
      v225 = object_getClassName(a1);
      v228 = sel_getName("performPeerPayment:uid:request:response:");
      v30 = 45;
      if (v29)
        v30 = 43;
      v27(3, "%c[%{public}s %{public}s]:%i Failed to initialize SURF applet : %{public}@", v30, v225, v228, 859, v24);
    }
    v31 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v32 = NFSharedLogGetLogger(v31);
    v33 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v34 = object_getClass(a1);
      v35 = v9;
      v36 = v21;
      if (class_isMetaClass(v34))
        v37 = 43;
      else
        v37 = 45;
      v38 = object_getClassName(a1);
      v39 = sel_getName("performPeerPayment:uid:request:response:");
      *(_DWORD *)buf = 67110146;
      v284 = v37;
      v21 = v36;
      v9 = v35;
      v285 = 2082;
      v286 = v38;
      v287 = 2082;
      v288 = v39;
      v289 = 1024;
      v290 = 859;
      v291 = 2114;
      v292 = v24;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to initialize SURF applet : %{public}@", buf, 0x2Cu);
    }

    v40 = v24;
    v41 = v40;
    goto LABEL_50;
  }
  v257 = 0;
  v65 = objc_msgSend(a1, "selectCRSWithError:", &v257);
  v66 = v257;
  v248 = v9;
  if (!v66)
  {
    v256 = 0;
    v88 = sub_1000B7998(a1, v21, &v256);
    v89 = v256;
    v90 = v89;
    if ((_DWORD)v88)
    {
      v246 = v89;
      v91 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v92 = NFLogGetLogger(v91);
      if (v92)
      {
        v93 = (void (*)(uint64_t, const char *, ...))v92;
        v94 = object_getClass(a1);
        v95 = class_isMetaClass(v94);
        v227 = object_getClassName(a1);
        v231 = sel_getName("performPeerPayment:uid:request:response:");
        v96 = 45;
        if (v95)
          v96 = 43;
        v93(3, "%c[%{public}s %{public}s]:%i Failed to auth with CRS applet : 0x%x", v96, v227, v231, 882, v88);
      }
      v97 = v21;
      v98 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v99 = NFSharedLogGetLogger(v98);
      v100 = objc_claimAutoreleasedReturnValue(v99);
      if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
      {
        v101 = object_getClass(a1);
        if (class_isMetaClass(v101))
          v102 = 43;
        else
          v102 = 45;
        v103 = object_getClassName(a1);
        v104 = sel_getName("performPeerPayment:uid:request:response:");
        *(_DWORD *)buf = 67110146;
        v284 = v102;
        v285 = 2082;
        v286 = v103;
        v287 = 2082;
        v288 = v104;
        v289 = 1024;
        v290 = 882;
        v291 = 1024;
        LODWORD(v292) = v88;
        _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to auth with CRS applet : 0x%x", buf, 0x28u);
      }

      v279[0] = CFSTR("peerPaymentRequestType");
      v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15));
      v280[0] = v105;
      v280[1] = &off_1002FE4F0;
      v279[1] = CFSTR("peerPaymentRequestErrorStep");
      v279[2] = CFSTR("peerPaymentRequestErrorCode");
      v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(0, "code")));
      v280[2] = v106;
      v279[3] = CFSTR("peerPaymentRequestStartTime");
      v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v11));
      v280[3] = v107;
      v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v280, v279, 4));

      sub_1001ED0C4((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v108);
      v109 = objc_alloc((Class)NSError);
      v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v111 = v88;
      v277 = NSLocalizedDescriptionKey;
      if (v88 >= 0x47)
        v112 = 71;
      else
        v112 = v88;
      v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E6F78[v112]));
      v278 = v113;
      v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v278, &v277, 1));
      v41 = (objc_class *)objc_msgSend(v109, "initWithDomain:code:userInfo:", v110, v111, v114);

    }
    else
    {
      if ((unint64_t)objc_msgSend(v89, "length") > 0xF)
      {
        v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "subdataWithRange:", 0, 8));
        v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "subdataWithRange:", 8, 8));
        v245 = v133;
        if (v133 && v134)
        {
          v255.super.super.isa = 0;
          v244 = v134;
          v135 = sub_100091928(a1, v9, a3, v249, v21, v133, v134, &v255);
          v136 = (void *)objc_claimAutoreleasedReturnValue(v135);
          v137 = v255.super.super.isa;
          v138 = v137;
          if (v136)
          {
            v254 = v137;
            v139 = sub_100093168(a1, v136, &v254);
            v242 = v136;
            v140 = v138;
            v141 = objc_claimAutoreleasedReturnValue(v139);
            v239 = v254;

            v243 = (void *)v141;
            if (v141)
            {
              v247 = v90;
              v113 = v242;
              v253 = v239;
              v237 = sub_100092EF4(a1, v242, (uint64_t)&v253);
              v142 = v253;

              if (v142)
              {
                v143 = v142;
                v265[0] = CFSTR("peerPaymentRequestType");
                v144 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15));
                v266[0] = v144;
                v266[1] = &off_1002FE538;
                v265[1] = CFSTR("peerPaymentRequestErrorStep");
                v265[2] = CFSTR("peerPaymentRequestErrorCode");
                v145 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[objc_class code](v142, "code")));
                v266[2] = v145;
                v265[3] = CFSTR("peerPaymentRequestStartTime");
                v146 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v11));
                v266[3] = v146;
                v147 = (NSMutableData *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v266, v265, 4));

                sub_1001ED0C4((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v147);
                v40 = v143;
                v41 = v40;
                v108 = v245;
                v132 = v247;
                v148 = v243;
                v110 = v244;
              }
              else
              {
                v163 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v164 = NFLogGetLogger(v163);
                if (v164)
                {
                  v165 = (void (*)(uint64_t, const char *, ...))v164;
                  v166 = object_getClass(a1);
                  v167 = class_isMetaClass(v166);
                  v240 = object_getClassName(a1);
                  v168 = sel_getName("performPeerPayment:uid:request:response:");
                  v169 = 45;
                  if (v167)
                    v169 = 43;
                  v165(6, "%c[%{public}s %{public}s]:%i User verification (PT spec bitmask) 0x%x", v169, v240, v168, 945, v237);
                }
                v236 = v21;
                v170 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v171 = NFSharedLogGetLogger(v170);
                v172 = objc_claimAutoreleasedReturnValue(v171);
                if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
                {
                  v173 = object_getClass(a1);
                  if (class_isMetaClass(v173))
                    v174 = 43;
                  else
                    v174 = 45;
                  v175 = object_getClassName(a1);
                  v176 = sel_getName("performPeerPayment:uid:request:response:");
                  *(_DWORD *)buf = 67110146;
                  v284 = v174;
                  v285 = 2082;
                  v286 = v175;
                  v287 = 2082;
                  v288 = v176;
                  v289 = 1024;
                  v290 = 945;
                  v291 = 1024;
                  LODWORD(v292) = v237;
                  _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i User verification (PT spec bitmask) 0x%x", buf, 0x28u);
                }

                v241 = objc_opt_new(NSMutableData);
                v177 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "transferRequest"));
                v252 = 0;
                v178 = sub_100093B5C(a1, v177, v243, v237, &v252);
                v179 = objc_claimAutoreleasedReturnValue(v178);
                v180 = v252;

                v235 = (void *)v179;
                if (v179)
                {
                  -[NSMutableData appendData:](v241, "appendData:", v179);
                  v250 = v180;
                  v251 = 0;
                  v181 = sub_1000947E8(a1, (uint64_t)v243, &v251, &v250);
                  v182 = objc_claimAutoreleasedReturnValue(v181);
                  v238 = v251;
                  v183 = (objc_class *)v250;
                  v184 = v180;
                  v40 = v183;

                  v234 = (void *)v182;
                  if (v40)
                  {
                    v261[0] = CFSTR("peerPaymentRequestType");
                    v185 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15));
                    v262[0] = v185;
                    v262[1] = &off_1002FE580;
                    v261[1] = CFSTR("peerPaymentRequestErrorStep");
                    v261[2] = CFSTR("peerPaymentRequestErrorCode");
                    v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[objc_class code](v40, "code")));
                    v262[2] = v186;
                    v261[3] = CFSTR("peerPaymentRequestStartTime");
                    v187 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v11));
                    v262[3] = v187;
                    v188 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v262, v261, 4));

                    sub_1001ED0C4((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v188);
                    v41 = v40;
                    v21 = v236;
                    v132 = v247;
                  }
                  else
                  {
                    if (v182)
                      -[NSMutableData appendData:](v241, "appendData:", v182);
                    v188 = objc_opt_new(NSMutableDictionary);
                    v197 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "rsaCertificate"));

                    v21 = v236;
                    if (v197)
                    {
                      v198 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "rsaCertificate"));
                      -[NSMutableDictionary setObject:forKeyedSubscript:](v188, "setObject:forKeyedSubscript:", v198, CFSTR("RSA"));

                    }
                    v199 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "eccCertificate"));

                    if (v199)
                    {
                      v200 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "eccCertificate"));
                      -[NSMutableDictionary setObject:forKeyedSubscript:](v188, "setObject:forKeyedSubscript:", v200, CFSTR("ECDSA"));

                    }
                    v201 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "eckaCertificate"));

                    if (v201)
                    {
                      v202 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "eckaCertificate"));
                      -[NSMutableDictionary setObject:forKeyedSubscript:](v188, "setObject:forKeyedSubscript:", v202, CFSTR("ECKA"));

                    }
                    v203 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "eccCertificate"));

                    if (v203)
                    {
                      v204 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "eccCertificate"));
                      -[NSMutableDictionary setObject:forKeyedSubscript:](v188, "setObject:forKeyedSubscript:", v204, CFSTR("ECC"));

                    }
                    v205 = objc_opt_new(NSMutableDictionary);
                    -[NSMutableDictionary setObject:forKeyedSubscript:](v205, "setObject:forKeyedSubscript:", v241, CFSTR("transactionData"));
                    -[NSMutableDictionary setObject:forKeyedSubscript:](v205, "setObject:forKeyedSubscript:", v188, CFSTR("certificates"));
                    if (v238)
                      -[NSMutableDictionary setObject:forKeyedSubscript:](v205, "setObject:forKeyedSubscript:", v238, CFSTR("transactionIdentifier"));
                    v206 = -[NFPeerPaymentResponse initWithDictionary:]([NFPeerPaymentResponse alloc], "initWithDictionary:", v205);
                    *a5 = v206;
                    v132 = v247;
                    if (v206)
                    {
                      v41 = 0;
                    }
                    else
                    {
                      v207 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                      v208 = NFLogGetLogger(v207);
                      if (v208)
                      {
                        v209 = (void (*)(uint64_t, const char *, ...))v208;
                        v210 = object_getClass(a1);
                        v211 = class_isMetaClass(v210);
                        v212 = object_getClassName(a1);
                        v232 = sel_getName("performPeerPayment:uid:request:response:");
                        v213 = 45;
                        if (v211)
                          v213 = 43;
                        v209(3, "%c[%{public}s %{public}s]:%i Failed to create response", v213, v212, v232, 990);
                      }
                      v214 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                      v215 = NFSharedLogGetLogger(v214);
                      v216 = objc_claimAutoreleasedReturnValue(v215);
                      if (os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
                      {
                        v217 = object_getClass(a1);
                        if (class_isMetaClass(v217))
                          v218 = 43;
                        else
                          v218 = 45;
                        v219 = object_getClassName(a1);
                        v220 = sel_getName("performPeerPayment:uid:request:response:");
                        *(_DWORD *)buf = 67109890;
                        v284 = v218;
                        v285 = 2082;
                        v286 = v219;
                        v287 = 2082;
                        v288 = v220;
                        v289 = 1024;
                        v290 = 990;
                        _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create response", buf, 0x22u);
                      }

                      v221 = objc_alloc((Class)NSError);
                      v222 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                      v259 = NSLocalizedDescriptionKey;
                      v223 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
                      v260 = v223;
                      v224 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v260, &v259, 1));
                      v41 = (objc_class *)objc_msgSend(v221, "initWithDomain:code:userInfo:", v222, 34, v224);

                      v21 = v236;
                      v132 = v247;
                    }

                  }
                  v110 = v244;
                  v108 = v245;

                }
                else
                {
                  v263[0] = CFSTR("peerPaymentRequestType");
                  v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15));
                  v264[0] = v193;
                  v264[1] = &off_1002FE568;
                  v263[1] = CFSTR("peerPaymentRequestErrorStep");
                  v263[2] = CFSTR("peerPaymentRequestErrorCode");
                  v194 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v180, "code")));
                  v264[2] = v194;
                  v263[3] = CFSTR("peerPaymentRequestStartTime");
                  v195 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v11));
                  v264[3] = v195;
                  v196 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v264, v263, 4));

                  v238 = v196;
                  sub_1001ED0C4((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v196);
                  v40 = (objc_class *)v180;
                  v41 = v40;
                  v21 = v236;
                  v108 = v245;
                  v132 = v247;
                  v110 = v244;
                }
                v148 = v243;
                v147 = v241;

              }
            }
            else
            {
              v267[0] = CFSTR("peerPaymentRequestType");
              v159 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15));
              v268[0] = v159;
              v268[1] = &off_1002FE4C0;
              v267[1] = CFSTR("peerPaymentRequestErrorStep");
              v267[2] = CFSTR("peerPaymentRequestErrorCode");
              v160 = v90;
              v161 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[objc_class code](v239, "code")));
              v268[2] = v161;
              v267[3] = CFSTR("peerPaymentRequestStartTime");
              v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v11));
              v268[3] = v162;
              v147 = (NSMutableData *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v268, v267, 4));

              v132 = v160;
              sub_1001ED0C4((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v147);
              v40 = v239;
              v41 = v40;
              v110 = v244;
              v108 = v245;
              v113 = v242;
              v148 = 0;
            }

          }
          else
          {
            v153 = v90;
            v154 = v21;
            v271[0] = CFSTR("peerPaymentRequestType");
            v155 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15));
            v272[0] = v155;
            v272[1] = &off_1002FE508;
            v271[1] = CFSTR("peerPaymentRequestErrorStep");
            v271[2] = CFSTR("peerPaymentRequestErrorCode");
            v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[objc_class code](v138, "code")));
            v272[2] = v156;
            v271[3] = CFSTR("peerPaymentRequestStartTime");
            v157 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v11));
            v272[3] = v157;
            v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v272, v271, 4));

            v148 = v158;
            sub_1001ED0C4((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v158);
            if (v138)
            {
              v40 = v138;
              v113 = 0;
              v41 = v40;
            }
            else
            {
              v189 = objc_alloc((Class)NSError);
              v190 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v269 = NSLocalizedDescriptionKey;
              v191 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
              v270 = v191;
              v192 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v270, &v269, 1));
              v41 = (objc_class *)objc_msgSend(v189, "initWithDomain:code:userInfo:", v190, 6, v192);

              v113 = 0;
              v40 = 0;
            }
            v21 = v154;
            v132 = v153;
            v110 = v244;
            v108 = v245;
          }
        }
        else
        {
          v110 = v134;
          v149 = v90;
          v150 = objc_alloc((Class)NSError);
          v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v273 = NSLocalizedDescriptionKey;
          v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
          v274 = v148;
          v151 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v274, &v273, 1));
          v152 = v150;
          v132 = v149;
          v41 = (objc_class *)objc_msgSend(v152, "initWithDomain:code:userInfo:", v113, 16, v151);

          v40 = 0;
          v108 = v245;
        }

        goto LABEL_78;
      }
      v246 = v90;
      v115 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v116 = NFLogGetLogger(v115);
      if (v116)
      {
        v117 = (void (*)(uint64_t, const char *, ...))v116;
        v118 = object_getClass(a1);
        v119 = class_isMetaClass(v118);
        v120 = object_getClassName(a1);
        v121 = sel_getName("performPeerPayment:uid:request:response:");
        v233 = objc_msgSend(v246, "length");
        v122 = 45;
        if (v119)
          v122 = 43;
        v117(3, "%c[%{public}s %{public}s]:%i Initialize auth response too small: %lu", v122, v120, v121, 893, v233);
      }
      v97 = v21;
      v123 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v124 = NFSharedLogGetLogger(v123);
      v125 = objc_claimAutoreleasedReturnValue(v124);
      if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
      {
        v126 = object_getClass(a1);
        if (class_isMetaClass(v126))
          v127 = 43;
        else
          v127 = 45;
        v128 = object_getClassName(a1);
        v129 = sel_getName("performPeerPayment:uid:request:response:");
        v130 = objc_msgSend(v246, "length");
        *(_DWORD *)buf = 67110146;
        v284 = v127;
        v285 = 2082;
        v286 = v128;
        v287 = 2082;
        v288 = v129;
        v289 = 1024;
        v290 = 893;
        v291 = 2048;
        v292 = v130;
        _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Initialize auth response too small: %lu", buf, 0x2Cu);
      }

      v131 = objc_alloc((Class)NSError);
      v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v275 = NSLocalizedDescriptionKey;
      v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v276 = v110;
      v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v276, &v275, 1));
      v41 = (objc_class *)objc_msgSend(v131, "initWithDomain:code:userInfo:", v108, 16, v113);
    }
    v40 = 0;
    v21 = v97;
    v132 = v246;
LABEL_78:

    goto LABEL_49;
  }
  v67 = v66;
  v42 = v21;
  v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v69 = NFLogGetLogger(v68);
  if (v69)
  {
    v70 = (void (*)(uint64_t, const char *, ...))v69;
    v71 = object_getClass(a1);
    v72 = class_isMetaClass(v71);
    v226 = object_getClassName(a1);
    v230 = sel_getName("performPeerPayment:uid:request:response:");
    v73 = 45;
    if (v72)
      v73 = 43;
    v70(3, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", v73, v226, v230, 867, v67);
  }
  v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v75 = NFSharedLogGetLogger(v74);
  v76 = objc_claimAutoreleasedReturnValue(v75);
  if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
  {
    v77 = object_getClass(a1);
    if (class_isMetaClass(v77))
      v78 = 43;
    else
      v78 = 45;
    v79 = object_getClassName(a1);
    v80 = sel_getName("performPeerPayment:uid:request:response:");
    *(_DWORD *)buf = 67110146;
    v284 = v78;
    v285 = 2082;
    v286 = v79;
    v287 = 2082;
    v288 = v80;
    v289 = 1024;
    v290 = 867;
    v291 = 2114;
    v292 = v67;
    _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", buf, 0x2Cu);
  }

  v281[0] = CFSTR("peerPaymentRequestType");
  v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15));
  v282[0] = v81;
  v282[1] = &off_1002FE4A8;
  v281[1] = CFSTR("peerPaymentRequestErrorStep");
  v281[2] = CFSTR("peerPaymentRequestErrorCode");
  v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v67, "code")));
  v282[2] = v82;
  v281[3] = CFSTR("peerPaymentRequestStartTime");
  v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v11));
  v282[3] = v83;
  v84 = v282;
  v85 = v281;
LABEL_48:
  v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v84, v85, 4));

  sub_1001ED0C4((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v86);
  v40 = (objc_class *)v67;

  v41 = v40;
  v21 = v42;
LABEL_49:
  v9 = v248;
LABEL_50:

LABEL_51:
  return v41;
}

id sub_1000964AC(id a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  unsigned int v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v28;
  id v29;
  NSErrorUserInfoKey v30;
  void *v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  unsigned int v41;
  __int16 v42;
  id v43;

  v1 = a1;
  if (a1)
  {
    v2 = sub_10008CB24(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    if (v3)
    {
      v4 = v3;
      v1 = v4;
    }
    else
    {
      v29 = 0;
      v5 = sub_10008DC64(v1, byte_10032A940, (uint64_t)&v29);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v4 = v29;
      if (v6 && objc_msgSend(v6, "status") == 36864)
      {
        v1 = 0;
      }
      else
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v9 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(v1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(v1);
          Name = sel_getName("deleteKey");
          v28 = objc_msgSend(v6, "status");
          v14 = 45;
          if (isMetaClass)
            v14 = 43;
          v9(3, "%c[%{public}s %{public}s]:%i Failed to delete: 0x%04x / %{public}@", v14, ClassName, Name, 1006, v28, v4);
        }
        v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v16 = NFSharedLogGetLogger(v15);
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v18 = object_getClass(v1);
          if (class_isMetaClass(v18))
            v19 = 43;
          else
            v19 = 45;
          v20 = object_getClassName(v1);
          v21 = sel_getName("deleteKey");
          v22 = objc_msgSend(v6, "status");
          *(_DWORD *)buf = 67110402;
          v33 = v19;
          v34 = 2082;
          v35 = v20;
          v36 = 2082;
          v37 = v21;
          v38 = 1024;
          v39 = 1006;
          v40 = 1024;
          v41 = v22;
          v42 = 2114;
          v43 = v4;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to delete: 0x%04x / %{public}@", buf, 0x32u);
        }

        if (v4)
        {
          v1 = v4;
        }
        else
        {
          v23 = objc_alloc((Class)NSError);
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v30 = NSLocalizedDescriptionKey;
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
          v31 = v25;
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
          v1 = objc_msgSend(v23, "initWithDomain:code:userInfo:", v24, 16, v26);

        }
      }

    }
  }
  return v1;
}

void *sub_100096794(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *Name;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;

  v1 = a1;
  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getData:subtag:", 254, 57137));
    v3 = v2;
    if (v2 && (unint64_t)objc_msgSend(v2, "length") > 1)
    {
      v1 = (void *)(bswap32(*(unsigned __int16 *)objc_msgSend(objc_retainAutorelease(v3), "bytes")) >> 16);
    }
    else
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v6 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v1);
        Name = sel_getName("getUpdateCounter");
        v10 = 45;
        if (isMetaClass)
          v10 = 43;
        v6(3, "%c[%{public}s %{public}s]:%i Failed to get update info", v10, ClassName, Name, 21);
      }
      v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v12 = NFSharedLogGetLogger(v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = object_getClass(v1);
        if (class_isMetaClass(v14))
          v15 = 43;
        else
          v15 = 45;
        *(_DWORD *)buf = 67109890;
        v19 = v15;
        v20 = 2082;
        v21 = object_getClassName(v1);
        v22 = 2082;
        v23 = sel_getName("getUpdateCounter");
        v24 = 1024;
        v25 = 21;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get update info", buf, 0x22u);
      }

      v1 = 0;
    }

  }
  return v1;
}

NSMutableDictionary *sub_100096974(NSMutableDictionary *a1)
{
  NSMutableDictionary *v1;
  NSMutableDictionary *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  const char *v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  objc_class *v39;
  int v40;
  const char *v41;
  const char *v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  NSObject *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void (*v59)(uint64_t, const char *, ...);
  objc_class *v60;
  _BOOL4 v61;
  const char *v62;
  const char *v63;
  void *v64;
  void *v65;
  id v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  objc_class *v70;
  int v71;
  const char *v72;
  const char *v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  NSObject *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  void (*v91)(uint64_t, const char *, ...);
  objc_class *v92;
  _BOOL4 v93;
  const char *v94;
  const char *v95;
  void *v96;
  void *v97;
  id v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  objc_class *v102;
  int v103;
  const char *v104;
  const char *v105;
  void *v106;
  id v107;
  id v108;
  void *v110;
  void *v111;
  void *v112;
  void *specific;
  uint64_t Logger;
  void (*v115)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  NSObject *v122;
  objc_class *v123;
  int v124;
  const char *Name;
  id v126;
  id v127;
  id v128;
  uint8_t buf[4];
  int v130;
  __int16 v131;
  const char *v132;
  __int16 v133;
  const char *v134;
  __int16 v135;
  int v136;
  __int16 v137;
  id v138;

  v1 = a1;
  if (a1)
  {
    v2 = objc_opt_new(NSMutableDictionary);
    v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "info"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "rsaCertificate"));
    if (v5)
    {

    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "info"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ecdsaCertificate"));

      if (v8)
      {
LABEL_6:
        v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "info"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "rsaCertificate"));
        if (!v11)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "info"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ecdsaCertificate"));
          if (!v13)
          {
            v110 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
            v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "info"));
            v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "eckaCertificate"));

            if (!v112)
            {
              specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              Logger = NFLogGetLogger(specific);
              if (Logger)
              {
                v115 = (void (*)(uint64_t, const char *, ...))Logger;
                Class = object_getClass(v1);
                isMetaClass = class_isMetaClass(Class);
                ClassName = object_getClassName(v1);
                Name = sel_getName("getCertificates");
                v119 = 45;
                if (isMetaClass)
                  v119 = 43;
                v115(4, "%c[%{public}s %{public}s]:%i Failed to retrieve certificates !", v119, ClassName, Name, 61);
              }
              v120 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v121 = NFSharedLogGetLogger(v120);
              v122 = objc_claimAutoreleasedReturnValue(v121);
              if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
              {
                v123 = object_getClass(v1);
                if (class_isMetaClass(v123))
                  v124 = 43;
                else
                  v124 = 45;
                *(_DWORD *)buf = 67109890;
                v130 = v124;
                v131 = 2082;
                v132 = object_getClassName(v1);
                v133 = 2082;
                v134 = sel_getName("getCertificates");
                v135 = 1024;
                v136 = 61;
                _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to retrieve certificates !", buf, 0x22u);
              }

              v1 = 0;
              goto LABEL_51;
            }
LABEL_10:
            v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "info"));
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "rsaCertificate"));

            if (v16)
            {
              v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "info"));
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "rsaCertificate"));
              v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v19));

              if (v20)
              {
                v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
                v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "info"));
                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "rsaCertificate"));
                v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v23));
                -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v24, CFSTR("RSA"));

              }
              else
              {
                v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v26 = NFLogGetLogger(v25);
                if (v26)
                {
                  v27 = (void (*)(uint64_t, const char *, ...))v26;
                  v28 = object_getClass(v1);
                  v29 = class_isMetaClass(v28);
                  v30 = object_getClassName(v1);
                  v31 = sel_getName("getCertificates");
                  v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
                  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "info"));
                  v34 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "rsaCertificate")));
                  v126 = objc_msgSend(v34, "UTF8String");
                  v35 = 45;
                  if (v29)
                    v35 = 43;
                  v27(3, "%c[%{public}s %{public}s]:%i Failed to decrypt RSA cert : %s", v35, v30, v31, 42, v126);

                }
                v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v37 = NFSharedLogGetLogger(v36);
                v38 = objc_claimAutoreleasedReturnValue(v37);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                {
                  v39 = object_getClass(v1);
                  if (class_isMetaClass(v39))
                    v40 = 43;
                  else
                    v40 = 45;
                  v41 = object_getClassName(v1);
                  v42 = sel_getName("getCertificates");
                  v43 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
                  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "info"));
                  v45 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "rsaCertificate")));
                  *(_DWORD *)buf = 67110146;
                  v130 = v40;
                  v131 = 2082;
                  v132 = v41;
                  v133 = 2082;
                  v134 = v42;
                  v135 = 1024;
                  v136 = 42;
                  v137 = 2080;
                  v138 = objc_msgSend(v45, "UTF8String");
                  _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to decrypt RSA cert : %s", buf, 0x2Cu);

                }
              }
            }
            v46 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
            v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "info"));
            v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "ecdsaCertificate"));

            if (v48)
            {
              v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
              v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "info"));
              v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "ecdsaCertificate"));
              v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v51));

              if (v52)
              {
                v53 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
                v54 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject info](v53, "info"));
                v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "ecdsaCertificate"));
                v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v55));
                -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v56, CFSTR("ECDSA"));

              }
              else
              {
                v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v58 = NFLogGetLogger(v57);
                if (v58)
                {
                  v59 = (void (*)(uint64_t, const char *, ...))v58;
                  v60 = object_getClass(v1);
                  v61 = class_isMetaClass(v60);
                  v62 = object_getClassName(v1);
                  v63 = sel_getName("getCertificates");
                  v64 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
                  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "info"));
                  v66 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "ecdsaCertificate")));
                  v127 = objc_msgSend(v66, "UTF8String");
                  v67 = 45;
                  if (v61)
                    v67 = 43;
                  v59(3, "%c[%{public}s %{public}s]:%i Failed to decrypt ECDSA cert : %s", v67, v62, v63, 49, v127);

                }
                v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v69 = NFSharedLogGetLogger(v68);
                v53 = objc_claimAutoreleasedReturnValue(v69);
                if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                {
                  v70 = object_getClass(v1);
                  if (class_isMetaClass(v70))
                    v71 = 43;
                  else
                    v71 = 45;
                  v72 = object_getClassName(v1);
                  v73 = sel_getName("getCertificates");
                  v74 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
                  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "info"));
                  v76 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "ecdsaCertificate")));
                  v77 = objc_msgSend(v76, "UTF8String");
                  *(_DWORD *)buf = 67110146;
                  v130 = v71;
                  v131 = 2082;
                  v132 = v72;
                  v133 = 2082;
                  v134 = v73;
                  v135 = 1024;
                  v136 = 49;
                  v137 = 2080;
                  v138 = v77;
                  _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to decrypt ECDSA cert : %s", buf, 0x2Cu);

                }
              }

            }
            v78 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
            v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "info"));
            v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "eckaCertificate"));

            if (!v80)
              goto LABEL_50;
            v81 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
            v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "info"));
            v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "eckaCertificate"));
            v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v83));

            if (v84)
            {
              v85 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
              v86 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject info](v85, "info"));
              v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "eckaCertificate"));
              v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v87));
              -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v88, CFSTR("ECKA"));

            }
            else
            {
              v89 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v90 = NFLogGetLogger(v89);
              if (v90)
              {
                v91 = (void (*)(uint64_t, const char *, ...))v90;
                v92 = object_getClass(v1);
                v93 = class_isMetaClass(v92);
                v94 = object_getClassName(v1);
                v95 = sel_getName("getCertificates");
                v96 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
                v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "info"));
                v98 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "eckaCertificate")));
                v128 = objc_msgSend(v98, "UTF8String");
                v99 = 45;
                if (v93)
                  v99 = 43;
                v91(3, "%c[%{public}s %{public}s]:%i Failed to decrypt ECKA cert : %s", v99, v94, v95, 56, v128);

              }
              v100 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v101 = NFSharedLogGetLogger(v100);
              v85 = objc_claimAutoreleasedReturnValue(v101);
              if (!os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
                goto LABEL_49;
              v102 = object_getClass(v1);
              if (class_isMetaClass(v102))
                v103 = 43;
              else
                v103 = 45;
              v104 = object_getClassName(v1);
              v105 = sel_getName("getCertificates");
              v86 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary handle](v1, "handle"));
              v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "info"));
              v107 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "eckaCertificate")));
              v108 = objc_msgSend(v107, "UTF8String");
              *(_DWORD *)buf = 67110146;
              v130 = v103;
              v131 = 2082;
              v132 = v104;
              v133 = 2082;
              v134 = v105;
              v135 = 1024;
              v136 = 56;
              v137 = 2080;
              v138 = v108;
              _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to decrypt ECKA cert : %s", buf, 0x2Cu);

            }
LABEL_49:

LABEL_50:
            v1 = v2;
LABEL_51:

            return v1;
          }

        }
        goto LABEL_10;
      }
      v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary delegate](v1, "delegate"));
      objc_msgSend(v3, "updateSeInfo:", v1);
    }

    goto LABEL_6;
  }
  return v1;
}

BOOL sub_1000974B8(void *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  void *v21;
  uint64_t v22;
  void (*v23)(uint64_t, const char *, ...);
  objc_class *v24;
  _BOOL4 v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  id v35;
  id v36;
  uint64_t v37;
  void *i;
  void *v39;
  void *v40;
  uint64_t v41;
  void (*v42)(uint64_t, const char *, ...);
  objc_class *v43;
  _BOOL4 v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  objc_class *v51;
  int v52;
  const char *v53;
  const char *v54;
  unsigned int v55;
  _BOOL8 v56;
  const char *ClassName;
  const char *Name;
  const char *v60;
  id v61;
  _BOOL4 v62;
  void *v63;
  NSObject *v64;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint8_t v70[128];
  uint8_t buf[4];
  int v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  unsigned int v80;

  if (!a1)
    return 0;
  v3 = 0;
  v4 = 1;
  while (1)
  {
    v5 = v4;
    v6 = *((unsigned int *)&unk_100269B04 + v3);
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getData:subtag:", 254, v6));
    v62 = v7 != 0;
    v63 = (void *)v7;
    if (v7)
      break;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v10 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("getAvailableMemory:");
      if (isMetaClass)
        v13 = 43;
      else
        v13 = 45;
      v10(4, "%c[%{public}s %{public}s]:%i Failed to get memory info with subtag:0x%x", v13, ClassName, Name, 74, v6);
    }
    v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v15 = NFSharedLogGetLogger(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = object_getClass(a1);
      if (class_isMetaClass(v17))
        v18 = 43;
      else
        v18 = 45;
      v19 = object_getClassName(a1);
      v20 = sel_getName("getAvailableMemory:");
      *(_DWORD *)buf = 67110146;
      v72 = v18;
      v73 = 2082;
      v74 = v19;
      v75 = 2082;
      v76 = v20;
      v77 = 1024;
      v78 = 74;
      v79 = 1024;
      v80 = v6;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get memory info with subtag:0x%x", buf, 0x28u);
    }

    v4 = 0;
    v3 = 1;
    if ((v5 & 1) == 0)
    {
      v21 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v22 = NFLogGetLogger(v21);
      if (v22)
      {
        v23 = (void (*)(uint64_t, const char *, ...))v22;
        v24 = object_getClass(a1);
        v25 = class_isMetaClass(v24);
        v26 = object_getClassName(a1);
        v60 = sel_getName("getAvailableMemory:");
        v27 = 45;
        if (v25)
          v27 = 43;
        v23(3, "%c[%{public}s %{public}s]:%i Failed to get memory info", v27, v26, v60, 78);
      }
      v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v29 = NFSharedLogGetLogger(v28);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        v31 = object_getClass(a1);
        if (class_isMetaClass(v31))
          v32 = 43;
        else
          v32 = 45;
        v33 = object_getClassName(a1);
        v34 = sel_getName("getAvailableMemory:");
        *(_DWORD *)buf = 67109890;
        v72 = v32;
        v73 = 2082;
        v74 = v33;
        v75 = 2082;
        v76 = v34;
        v77 = 1024;
        v78 = 78;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get memory info", buf, 0x22u);
      }
      goto LABEL_55;
    }
  }
  *(_DWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v30 = objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v7));
  v35 = -[NSObject countByEnumeratingWithState:objects:count:](v30, "countByEnumeratingWithState:objects:count:", &v66, v70, 16);
  if (v35)
  {
    v36 = v35;
    v37 = *(_QWORD *)v67;
    v64 = v30;
    do
    {
      for (i = 0; i != v36; i = (char *)i + 1)
      {
        if (*(_QWORD *)v67 != v37)
          objc_enumerationMutation(v30);
        v39 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * (_QWORD)i);
        switch(objc_msgSend(v39, "tag"))
        {
          case 0u:
            *(_DWORD *)a2 = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          case 1u:
            *(_DWORD *)(a2 + 4) = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          case 2u:
            *(_DWORD *)(a2 + 8) = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          case 3u:
            *(_DWORD *)(a2 + 12) = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          case 4u:
            *(_DWORD *)(a2 + 16) = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          case 5u:
            *(_DWORD *)(a2 + 20) = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          case 6u:
            *(_DWORD *)(a2 + 24) = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          case 0xCu:
            *(_DWORD *)(a2 + 28) = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          case 0xDu:
            *(_DWORD *)(a2 + 32) = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          case 0xEu:
            *(_DWORD *)(a2 + 36) = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          case 0xFu:
            *(_DWORD *)(a2 + 40) = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          case 0x10u:
            *(_DWORD *)(a2 + 44) = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          case 0x11u:
            *(_DWORD *)(a2 + 48) = objc_msgSend(v39, "valueAsUnsignedLong");
            break;
          default:
            v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v41 = NFLogGetLogger(v40);
            if (v41)
            {
              v42 = (void (*)(uint64_t, const char *, ...))v41;
              v43 = object_getClass(a1);
              v44 = class_isMetaClass(v43);
              v45 = object_getClassName(a1);
              v46 = sel_getName("getAvailableMemory:");
              v61 = objc_msgSend(v39, "tag");
              v47 = 45;
              if (v44)
                v47 = 43;
              v42(3, "%c[%{public}s %{public}s]:%i Unknown tag 0x%x", v47, v45, v46, 140, v61);
            }
            v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v49 = NFSharedLogGetLogger(v48);
            v50 = objc_claimAutoreleasedReturnValue(v49);
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            {
              v51 = object_getClass(a1);
              if (class_isMetaClass(v51))
                v52 = 43;
              else
                v52 = 45;
              v53 = object_getClassName(a1);
              v54 = sel_getName("getAvailableMemory:");
              v55 = objc_msgSend(v39, "tag");
              *(_DWORD *)buf = 67110146;
              v72 = v52;
              v73 = 2082;
              v74 = v53;
              v75 = 2082;
              v76 = v54;
              v77 = 1024;
              v78 = 140;
              v79 = 1024;
              v80 = v55;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown tag 0x%x", buf, 0x28u);
            }

            v30 = v64;
            break;
        }
      }
      v36 = -[NSObject countByEnumeratingWithState:objects:count:](v30, "countByEnumeratingWithState:objects:count:", &v66, v70, 16);
    }
    while (v36);
  }
LABEL_55:
  v56 = v62;

  return v56;
}

id sub_100097AF4(void *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *v10;
  _BOOL4 v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  void *specific;
  uint64_t Logger;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  objc_class *v32;
  int v33;
  const char *v35;
  uint64_t v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  unsigned int v46;

  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 0, 136, 240, a3, a2, 0));
    v5 = v4;
    if (v4)
    {
      if (objc_msgSend(v4, "status") == 36864)
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "response"));
LABEL_25:

        return v6;
      }
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v24 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("signChallenge:authenticationType:");
        v36 = objc_msgSend(v5, "status");
        v29 = 45;
        if (isMetaClass)
          v29 = 43;
        v24(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v29, ClassName, Name, 164, v36);
      }
      v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v31 = NFSharedLogGetLogger(v30);
      v16 = objc_claimAutoreleasedReturnValue(v31);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
LABEL_24:

        v6 = 0;
        goto LABEL_25;
      }
      v32 = object_getClass(a1);
      if (class_isMetaClass(v32))
        v33 = 43;
      else
        v33 = 45;
      *(_DWORD *)buf = 67110146;
      v38 = v33;
      v39 = 2082;
      v40 = object_getClassName(a1);
      v41 = 2082;
      v42 = sel_getName("signChallenge:authenticationType:");
      v43 = 1024;
      v44 = 164;
      v45 = 1024;
      v46 = objc_msgSend(v5, "status");
      v19 = "%c[%{public}s %{public}s]:%i Returned error: 0x%04x";
      v20 = v16;
      v21 = 40;
    }
    else
    {
      v7 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v8 = NFLogGetLogger(v7);
      if (v8)
      {
        v9 = (void (*)(uint64_t, const char *, ...))v8;
        v10 = object_getClass(a1);
        v11 = class_isMetaClass(v10);
        v12 = object_getClassName(a1);
        v35 = sel_getName("signChallenge:authenticationType:");
        v13 = 45;
        if (v11)
          v13 = 43;
        v9(3, "%c[%{public}s %{public}s]:%i Command failed", v13, v12, v35, 160);
      }
      v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v15 = NFSharedLogGetLogger(v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      v17 = object_getClass(a1);
      if (class_isMetaClass(v17))
        v18 = 43;
      else
        v18 = 45;
      *(_DWORD *)buf = 67109890;
      v38 = v18;
      v39 = 2082;
      v40 = object_getClassName(a1);
      v41 = 2082;
      v42 = sel_getName("signChallenge:authenticationType:");
      v43 = 1024;
      v44 = 160;
      v19 = "%c[%{public}s %{public}s]:%i Command failed";
      v20 = v16;
      v21 = 34;
    }
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, v19, buf, v21);
    goto LABEL_24;
  }
  return 0;
}

void sub_100097E1C(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  char v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  _BOOL4 v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  int v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void (*v40)(uint64_t, const char *, ...);
  objc_class *v41;
  _BOOL4 v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  objc_class *v47;
  int v48;
  const char *v49;
  const char *v50;
  void *v51;
  uint64_t v52;
  void (*v53)(uint64_t, const char *, ...);
  objc_class *v54;
  _BOOL4 v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  NSObject *v60;
  objc_class *v61;
  int v62;
  const char *v63;
  const char *v64;
  void *v65;
  objc_class *v66;
  _BOOL4 v67;
  const char *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  objc_class *v74;
  int v75;
  const char *v76;
  const char *v77;
  const char *v78;
  const char *Name;
  const char *v80;
  const char *v81;
  uint8_t buf[4];
  int v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  int v89;
  __int16 v90;
  _QWORD v91[2];

  if (!a1)
    return;
  v4 = (_BYTE *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "driverWrapper"));
  if (!v4 || (v5 = v4[218], v4, (v5 & 1) == 0))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("requestFieldDetectKeepAlive:");
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v8(4, "%c[%{public}s %{public}s]:%i Device does not have antenna", v12, ClassName, Name, 27);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = object_getClass((id)a1);
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      *(_DWORD *)buf = 67109890;
      v83 = v17;
      v84 = 2082;
      v85 = object_getClassName((id)a1);
      v86 = 2082;
      v87 = sel_getName("requestFieldDetectKeepAlive:");
      v88 = 1024;
      v89 = 27;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Device does not have antenna", buf, 0x22u);
    }

    return;
  }
  if ((*(_BYTE *)(a1 + 355) & 1) == (_DWORD)a2)
    return;
  v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v19 = NFLogGetLogger(v18);
  if (v19)
  {
    v20 = (void (*)(uint64_t, const char *, ...))v19;
    v21 = object_getClass((id)a1);
    v22 = class_isMetaClass(v21);
    v23 = object_getClassName((id)a1);
    v24 = sel_getName("requestFieldDetectKeepAlive:");
    v25 = 45;
    if (v22)
      v25 = 43;
    v20(6, "%c[%{public}s %{public}s]:%i enable: %d, current=%d", v25, v23, v24, 36, a2, *(_BYTE *)(a1 + 355) & 1);
  }
  v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v27 = NFSharedLogGetLogger(v26);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = object_getClass((id)a1);
    if (class_isMetaClass(v29))
      v30 = 43;
    else
      v30 = 45;
    v31 = object_getClassName((id)a1);
    v32 = sel_getName("requestFieldDetectKeepAlive:");
    v33 = *(_BYTE *)(a1 + 355) & 1;
    *(_DWORD *)buf = 67110402;
    v83 = v30;
    v84 = 2082;
    v85 = v31;
    v86 = 2082;
    v87 = v32;
    v88 = 1024;
    v89 = 36;
    v90 = 1024;
    LODWORD(v91[0]) = a2;
    WORD2(v91[0]) = 1024;
    *(_DWORD *)((char *)v91 + 6) = v33;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i enable: %d, current=%d", buf, 0x2Eu);
  }

  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "driverWrapper"));
  v35 = v34;
  if (!(_DWORD)a2)
  {
    sub_1001FABB8(v34, CFSTR("Field Detect"));

    v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v52 = NFLogGetLogger(v51);
    if (v52)
    {
      v53 = (void (*)(uint64_t, const char *, ...))v52;
      v54 = object_getClass((id)a1);
      v55 = class_isMetaClass(v54);
      v56 = object_getClassName((id)a1);
      v81 = sel_getName("requestFieldDetectKeepAlive:");
      v57 = 45;
      if (v55)
        v57 = 43;
      v53(6, "%c[%{public}s %{public}s]:%i releasing NFCD keep alive transaction for Field Detect", v57, v56, v81, 50);
    }
    v58 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v59 = NFSharedLogGetLogger(v58);
    v60 = objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      v61 = object_getClass((id)a1);
      if (class_isMetaClass(v61))
        v62 = 43;
      else
        v62 = 45;
      v63 = object_getClassName((id)a1);
      v64 = sel_getName("requestFieldDetectKeepAlive:");
      *(_DWORD *)buf = 67109890;
      v83 = v62;
      v84 = 2082;
      v85 = v63;
      v86 = 2082;
      v87 = v64;
      v88 = 1024;
      v89 = 50;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i releasing NFCD keep alive transaction for Field Detect", buf, 0x22u);
    }

    v65 = *(void **)(a1 + 264);
    *(_QWORD *)(a1 + 264) = 0;
    goto LABEL_56;
  }
  v36 = sub_1001F84C8(v34, CFSTR("Field Detect"), 1uLL);
  v37 = (void *)objc_claimAutoreleasedReturnValue(v36);

  v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v39 = NFLogGetLogger(v38);
  v40 = (void (*)(uint64_t, const char *, ...))v39;
  if (!v37)
  {
    if (v39)
    {
      v66 = object_getClass((id)a1);
      v67 = class_isMetaClass(v66);
      v68 = object_getClassName((id)a1);
      v69 = sel_getName("requestFieldDetectKeepAlive:");
      v70 = 45;
      if (v67)
        v70 = 43;
      v40(6, "%c[%{public}s %{public}s]:%i creating NFCD keep alive transaction for Field Detect", v70, v68, v69, 45);
    }
    v71 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v72 = NFSharedLogGetLogger(v71);
    v73 = objc_claimAutoreleasedReturnValue(v72);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      v74 = object_getClass((id)a1);
      if (class_isMetaClass(v74))
        v75 = 43;
      else
        v75 = 45;
      v76 = object_getClassName((id)a1);
      v77 = sel_getName("requestFieldDetectKeepAlive:");
      *(_DWORD *)buf = 67109890;
      v83 = v75;
      v84 = 2082;
      v85 = v76;
      v86 = 2082;
      v87 = v77;
      v88 = 1024;
      v89 = 45;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i creating NFCD keep alive transaction for Field Detect", buf, 0x22u);
    }

    v65 = (void *)os_transaction_create("com.apple.nfcd.field_detect");
    objc_storeStrong((id *)(a1 + 264), v65);
LABEL_56:

    *(_BYTE *)(a1 + 355) = a2;
    return;
  }
  if (v39)
  {
    v41 = object_getClass((id)a1);
    v42 = class_isMetaClass(v41);
    v78 = object_getClassName((id)a1);
    v80 = sel_getName("requestFieldDetectKeepAlive:");
    v43 = 45;
    if (v42)
      v43 = 43;
    v40(3, "%c[%{public}s %{public}s]:%i Failed to open session : %@", v43, v78, v80, 40, v37);
  }
  v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v45 = NFSharedLogGetLogger(v44);
  v46 = objc_claimAutoreleasedReturnValue(v45);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
  {
    v47 = object_getClass((id)a1);
    if (class_isMetaClass(v47))
      v48 = 43;
    else
      v48 = 45;
    v49 = object_getClassName((id)a1);
    v50 = sel_getName("requestFieldDetectKeepAlive:");
    *(_DWORD *)buf = 67110146;
    v83 = v48;
    v84 = 2082;
    v85 = v49;
    v86 = 2082;
    v87 = v50;
    v88 = 1024;
    v89 = 40;
    v90 = 2112;
    v91[0] = v37;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session : %@", buf, 0x2Cu);
  }

}

id sub_1000984B4(id *a1, unsigned int a2)
{
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *v26;
  _BOOL4 v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  const char *v35;
  const char *v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void (*v42)(uint64_t, const char *, ...);
  objc_class *v43;
  _BOOL4 v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  objc_class *v50;
  int v51;
  const char *v52;
  const char *v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  const char *ClassName;
  const char *Name;
  const char *v66;
  const char *v67;
  _QWORD v68[5];
  _QWORD v69[5];
  uint8_t buf[4];
  int v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  int v77;
  __int16 v78;
  unsigned int v79;

  if (!a1)
    return 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("enableFieldDetect:");
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i enable: %d", v9, ClassName, Name, 64, a2);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(a1);
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    *(_DWORD *)buf = 67110146;
    v71 = v14;
    v72 = 2082;
    v73 = object_getClassName(a1);
    v74 = 2082;
    v75 = sel_getName("enableFieldDetect:");
    v76 = 1024;
    v77 = 64;
    v78 = 1024;
    v79 = a2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i enable: %d", buf, 0x28u);
  }

  v15 = a1[3];
  sub_10003DA78(v15);

  if (a2)
    v16 = 2;
  else
    v16 = 0;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "lastKnownRoutingConfig"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "cloneWithFieldDetect:", v16));

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setRoutingConfig:", v18));
  if (objc_msgSend(v19, "code") == (id)47)
  {
    v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "driverWrapper"));
    v21 = (void *)v20;
    if (v20)
    {
      v22 = objc_msgSend(*(id *)(v20 + 88), "readerModeProtectionActive");

      if (!v22)
        goto LABEL_29;
      v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v24 = NFLogGetLogger(v23);
      if (v24)
      {
        v25 = (void (*)(uint64_t, const char *, ...))v24;
        v26 = object_getClass(a1);
        v27 = class_isMetaClass(v26);
        v28 = object_getClassName(a1);
        v66 = sel_getName("enableFieldDetect:");
        v29 = 45;
        if (v27)
          v29 = 43;
        v25(3, "%c[%{public}s %{public}s]:%i Disabling reader mode", v29, v28, v66, 75);
      }
      v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v31 = NFSharedLogGetLogger(v30);
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        v33 = object_getClass(a1);
        if (class_isMetaClass(v33))
          v34 = 43;
        else
          v34 = 45;
        v35 = object_getClassName(a1);
        v36 = sel_getName("enableFieldDetect:");
        *(_DWORD *)buf = 67109890;
        v71 = v34;
        v72 = 2082;
        v73 = v35;
        v74 = 2082;
        v75 = v36;
        v76 = 1024;
        v77 = 75;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Disabling reader mode", buf, 0x22u);
      }

      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "lastKnownRoutingConfig"));
      v38 = objc_msgSend(v37, "wantsReader");

      if (!v38)
        goto LABEL_29;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "cloneWithReaderDisabled"));
      v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setRoutingConfig:", v21));

      v19 = (void *)v39;
    }

  }
LABEL_29:
  if (v19)
  {
    v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v41 = NFLogGetLogger(v40);
    if (v41)
    {
      v42 = (void (*)(uint64_t, const char *, ...))v41;
      v43 = object_getClass(a1);
      v44 = class_isMetaClass(v43);
      v45 = object_getClassName(a1);
      v67 = sel_getName("enableFieldDetect:");
      v46 = 45;
      if (v44)
        v46 = 43;
      v42(3, "%c[%{public}s %{public}s]:%i Failed to change mode", v46, v45, v67, 83);
    }
    v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v48 = NFSharedLogGetLogger(v47);
    v49 = objc_claimAutoreleasedReturnValue(v48);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      v50 = object_getClass(a1);
      if (class_isMetaClass(v50))
        v51 = 43;
      else
        v51 = 45;
      v52 = object_getClassName(a1);
      v53 = sel_getName("enableFieldDetect:");
      *(_DWORD *)buf = 67109890;
      v71 = v51;
      v72 = 2082;
      v73 = v52;
      v74 = 2082;
      v75 = v53;
      v76 = 1024;
      v77 = 83;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to change mode", buf, 0x22u);
    }

    v54 = objc_alloc((Class)NSError);
    v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v56 = objc_msgSend(v19, "code");
    v68[0] = NSLocalizedDescriptionKey;
    if ((uint64_t)objc_msgSend(v19, "code") > 70)
      v57 = 71;
    else
      v57 = (uint64_t)objc_msgSend(v19, "code");
    v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E71B8[v57]));
    v69[0] = v59;
    v69[1] = v19;
    v68[1] = NSUnderlyingErrorKey;
    v68[2] = CFSTR("Line");
    v69[2] = &off_1002FE598;
    v68[3] = CFSTR("Method");
    v60 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("enableFieldDetect:"));
    v69[3] = v60;
    v68[4] = NSDebugDescriptionErrorKey;
    v61 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("enableFieldDetect:"), 84);
    v69[4] = v61;
    v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v69, v68, 5));
    v58 = objc_msgSend(v54, "initWithDomain:code:userInfo:", v55, v56, v62);

  }
  else
  {
    v58 = 0;
  }

  return v58;
}

uint64_t sub_100098AF4(uint64_t a1)
{
  if (a1 && *(_QWORD *)(a1 + 288) == 1 && sub_100009180((void **)a1))
    return sub_100098B40(a1);
  else
    return 0;
}

uint64_t sub_100098B40(uint64_t result)
{
  uint64_t v1;
  id v2;
  unsigned int v3;
  id v4;
  unsigned int v5;
  _QWORD *v6;
  _BOOL4 v7;

  if (result)
  {
    v1 = result;
    v2 = *(id *)(result + 120);
    v3 = objc_msgSend(v2, "fieldDetectRequested");

    v4 = *(id *)(v1 + 16);
    v5 = objc_msgSend(v4, "isActive");

    v6 = *(id *)(v1 + 24);
    if (v6)
      v7 = v6[17] == 1 || *((_BYTE *)v6 + 170) != 0;
    else
      v7 = 0;

    return v5 | v7 | sub_1001C9040(v1) | v3;
  }
  return result;
}

void sub_100098BE4(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  if (v3)
    v5 = *(void **)(v3 + 112);
  else
    v5 = 0;
  v6 = v5;
  sub_1001C91FC((id *)v3, v6, 2, *(void **)(a1 + 40), v4, 0);

}

void sub_100098D04(uint64_t a1)
{
  id v1;

  if (a1)
  {
    v1 = *(id *)(a1 + 120);
    objc_msgSend(v1, "notifyPresentmentFieldExit");

  }
}

void sub_100098D38(uint64_t a1, void *a2, char a3, int a4, void *a5)
{
  id v9;
  id v10;
  NSObject *v11;
  _QWORD block[5];
  id v13;
  id v14;
  const char *v15;
  int v16;
  char v17;

  v9 = a2;
  v10 = a5;
  if (a1)
  {
    v11 = *(id *)(a1 + 232);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100098E1C;
    block[3] = &unk_1002E7450;
    v17 = a3;
    block[4] = a1;
    v15 = "_queueFieldDetectProtocolSession:coreNFC:requestor:completion:";
    v16 = a4;
    v14 = v10;
    v13 = v9;
    dispatch_async(v11, block);

  }
}

void sub_100098E1C(uint64_t a1)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  id *v10;
  id v11;
  id v12;
  char v13;
  _QWORD v14[7];
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v2 = &v16;
  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = sub_100098FD4;
  v20 = sub_100098FE4;
  v21 = 0;
  if (*(_BYTE *)(a1 + 68))
  {
    v3 = *(_QWORD **)(a1 + 32);
    if (v3)
      v3 = (_QWORD *)v3[2];
    v4 = v3;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100098FEC;
    v14[3] = &unk_1002E7428;
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 56);
    v15 = *(_DWORD *)(a1 + 64);
    v14[4] = v5;
    v14[5] = &v16;
    v14[6] = v6;
    objc_msgSend(v4, "enumerateFieldDetectSessionsUsingBlock:", v14);

    v2 = v17;
  }
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 16))(v7, *(_QWORD *)(a1 + 40), v2[5]);
    v2 = v17;
  }
  if (!v2[5])
  {
    v8 = *(_QWORD **)(a1 + 32);
    if (v8)
      v8 = (_QWORD *)v8[2];
    v9 = v8;
    objc_msgSend(v9, "addFieldDetectSession:", *(_QWORD *)(a1 + 40));

    objc_msgSend(*(id *)(a1 + 40), "willStartSession");
    objc_msgSend(*(id *)(a1 + 40), "didStartSession:", 0);
    v13 = 0;
    v10 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
    v12 = 0;
    sub_1001FFC44(v10, &v13, &v12);
    v11 = v12;

    if (v13)
    {
      objc_msgSend(*(id *)(a1 + 40), "handleFieldChanged:", 1);
      if (v11)
        objc_msgSend(*(id *)(a1 + 40), "handleFieldNotification:", v11);
    }
    objc_msgSend(*(id *)(a1 + 32), "maybeStartNextSession");

  }
  _Block_object_dispose(&v16, 8);

}

void sub_100098FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100098FD4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100098FE4(uint64_t a1)
{

}

void sub_100098FEC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  int v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  _QWORD v38[4];
  _QWORD v39[4];
  NSErrorUserInfoKey v40;
  const __CFString *v41;
  uint8_t buf[4];
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  void *v51;

  v3 = a2;
  v4 = objc_opt_class(_NFFieldDetectSession);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0 && objc_msgSend(v3, "serviceType") == (id)2)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "connection"));
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "NF_userInfo"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("ClientName")));
      v15 = 45;
      if (isMetaClass)
        v15 = 43;
      v8(6, "%c[%{public}s %{public}s]:%i Existing session found (%{public}@)", v15, ClassName, Name, 375, v14);

    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      v21 = object_getClassName(*(id *)(a1 + 32));
      v22 = sel_getName(*(SEL *)(a1 + 48));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "NF_userInfo"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("ClientName")));
      *(_DWORD *)buf = 67110146;
      v43 = v20;
      v44 = 2082;
      v45 = v21;
      v46 = 2082;
      v47 = v22;
      v48 = 1024;
      v49 = 375;
      v50 = 2114;
      v51 = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Existing session found (%{public}@)", buf, 0x2Cu);

    }
    v25 = objc_msgSend(v5, "processIdentifier");
    v26 = *(_DWORD *)(a1 + 56);
    v27 = objc_alloc((Class)NSError);
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v25 == v26)
    {
      v40 = NSLocalizedDescriptionKey;
      v41 = CFSTR("Previous session exists");
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1));
      v30 = objc_msgSend(v27, "initWithDomain:code:userInfo:", v28, 36, v29);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v32 = *(id *)(v31 + 40);
      *(_QWORD *)(v31 + 40) = v30;
    }
    else
    {
      v38[0] = NSLocalizedDescriptionKey;
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Busy"));
      v39[0] = v29;
      v39[1] = &off_1002FE5B0;
      v38[1] = CFSTR("Line");
      v38[2] = CFSTR("Method");
      v32 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
      v39[2] = v32;
      v38[3] = NSDebugDescriptionErrorKey;
      v33 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 379);
      v39[3] = v33;
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v39, v38, 4));
      v35 = objc_msgSend(v27, "initWithDomain:code:userInfo:", v28, 2, v34);
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v37 = *(void **)(v36 + 40);
      *(_QWORD *)(v36 + 40) = v35;

    }
  }

}

NSString *sub_1000993E4(NSMutableDictionary *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *v10;
  _BOOL4 isMetaClass;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v24;
  NSMutableDictionary *v25;
  NSMutableDictionary *v26;
  NSString *v27;
  NSString *v28;
  NSString *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  NSMutableDictionary *v40;
  void *v41;
  void *v42;
  NSString *v43;
  void *v44;
  void (*v45)(uint64_t, const char *, ...);
  objc_class *v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  objc_class *v53;
  int v54;
  const char *v55;
  const char *v56;
  NSData *v57;
  NSString *v58;
  void *v59;
  NSObject *v60;
  NSObject *v61;
  void *v62;
  void *v63;
  NSMutableDictionary *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void (*v69)(uint64_t, const char *, ...);
  objc_class *v70;
  uint64_t v71;
  const char *v72;
  const char *v73;
  void *v74;
  uint64_t v75;
  NSObject *v76;
  objc_class *v77;
  int v78;
  const char *v79;
  const char *v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void (*v86)(uint64_t, const char *, ...);
  objc_class *v87;
  uint64_t v88;
  const char *v89;
  const char *v90;
  void *v91;
  uint64_t v92;
  NSObject *v93;
  objc_class *v94;
  int v95;
  const char *v96;
  const char *v97;
  unsigned int v98;
  _BOOL4 v99;
  id v100;
  void *v101;
  void *v102;
  void *v103;
  id v104;
  void *v105;
  void *v106;
  void *v107;
  id v108;
  void *v109;
  void *v110;
  void (*v111)(uint64_t, const char *, ...);
  objc_class *v112;
  uint64_t v113;
  const char *v114;
  const char *v115;
  void *v116;
  uint64_t v117;
  NSObject *v118;
  objc_class *v119;
  int v120;
  const char *v121;
  const char *v122;
  void *v123;
  void (*v124)(uint64_t, const char *, ...);
  objc_class *v125;
  uint64_t v126;
  const char *v127;
  const char *v128;
  void *v129;
  uint64_t v130;
  objc_class *v131;
  int v132;
  const char *v133;
  const char *v134;
  unsigned int v135;
  void *v136;
  void (*v137)(uint64_t, const char *, ...);
  objc_class *v138;
  uint64_t v139;
  const char *v140;
  const char *v141;
  void *v142;
  uint64_t v143;
  NSObject *v144;
  objc_class *v145;
  int v146;
  const char *v147;
  const char *v148;
  unsigned int v149;
  id v150;
  void *v151;
  void *v152;
  void *v153;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v157;
  const char *ClassName;
  const char *Name;
  void *v160;
  uint64_t v161;
  objc_class *v162;
  int v163;
  const char *v164;
  const char *v165;
  const __CFString *v166;
  NSMutableData *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  NSMutableArray *v172;
  uint64_t v173;
  const __CFString *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void (*v180)(uint64_t, const char *, ...);
  objc_class *v181;
  uint64_t v182;
  const char *v183;
  const char *v184;
  void *v185;
  uint64_t v186;
  NSObject *v187;
  objc_class *v188;
  int v189;
  const char *v190;
  const char *v191;
  id v192;
  const char *v193;
  NSObject *v194;
  uint32_t v195;
  char *v196;
  unsigned __int8 *v197;
  uint64_t v198;
  unsigned int v199;
  void *v200;
  void *v201;
  void *v202;
  id v203;
  void *v204;
  NSData *v205;
  void *v206;
  void (*v207)(uint64_t, const char *, ...);
  objc_class *v208;
  uint64_t v209;
  const char *v210;
  const char *v211;
  void *v212;
  uint64_t v213;
  objc_class *v214;
  int v215;
  const char *v216;
  const char *v217;
  int v218;
  const char *v219;
  const char *v220;
  id v221;
  NSMutableDictionary *v222;
  void *v223;
  NSMutableDictionary *v225;
  void *v226;
  char *sela;
  char *sel;
  id v229;
  id v230;
  id v231;
  id v232;
  id v233;
  NSMutableDictionary *v234;
  _QWORD v238[7];
  NSErrorUserInfoKey v239;
  void *v240;
  NSErrorUserInfoKey v241;
  void *v242;
  _QWORD v243[11];
  uint8_t buf[8];
  _BYTE v245[40];
  id v246[3];
  NSErrorUserInfoKey v247;
  NSErrorUserInfoKey v248;

  if (!a1)
    return (NSString *)0;
  switch((int)a2)
  {
    case 1:
      v5 = sub_10009AEE8(a1, 0, a3);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      return (NSString *)v6;
    case 2:
      v24 = sub_10009AEE8(a1, 1, a3);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v24);
      return (NSString *)v6;
    case 3:
      v25 = objc_opt_new(NSMutableDictionary);
      v248 = 0;
      v26 = a1;
      v232 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary selectCRSWithError:](a1, "selectCRSWithError:", &v248));
      v27 = v248;
      v28 = v27;
      if (v27)
      {
        v29 = v27;
        goto LABEL_173;
      }
      if (!v232)
      {
        v104 = objc_alloc((Class)NSError);
        v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v246[0] = NSLocalizedDescriptionKey;
        v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        *(_QWORD *)buf = v106;
        v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, v246, 1));
        v29 = (NSString *)objc_msgSend(v104, "initWithDomain:code:userInfo:", v105, 16, v107);

        goto LABEL_173;
      }
      v230 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v232, "response"));
      v225 = objc_opt_new(NSMutableDictionary);
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithData:](NFTLV, "TLVWithData:", v230));

      if (objc_msgSend(v59, "tag") == 111)
      {
        v222 = objc_opt_new(NSMutableDictionary);
        -[NSMutableDictionary setObject:forKey:](v225, "setObject:forKey:", v222, CFSTR("File Control Info"));
        v60 = objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "childWithTag:", 132));
        v61 = v60;
        if (v60)
        {
          v62 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject value](v60, "value"));
          -[NSMutableDictionary setObject:forKey:](v222, "setObject:forKey:", v62, CFSTR("Dedicated File Name"));

        }
        v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "childWithTag:", 165));

        if (v63)
        {
          v64 = objc_opt_new(NSMutableDictionary);
          -[NSMutableDictionary setObject:forKey:](v222, "setObject:forKey:", v64, CFSTR("File Control Info (Proprietary)"));
          v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "childWithTag:", 40712));

          if (v65)
          {
            v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "value"));
            -[NSMutableDictionary setObject:forKey:](v64, "setObject:forKey:", v66, CFSTR("Version"));

          }
          v61 = objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "childWithTag:", 128));

          if (v61)
          {
            v67 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject value](v61, "value"));
            -[NSMutableDictionary setObject:forKey:](v64, "setObject:forKey:", v67, CFSTR("Global Update Counter"));

          }
          sel = v225;
        }
        else
        {
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
          if (Logger)
          {
            Class = object_getClass(a1);
            if (class_isMetaClass(Class))
              v157 = 43;
            else
              v157 = 45;
            ClassName = object_getClassName(v26);
            Name = sel_getName("decodeCRSResponse:");
            Logger(3, "%c[%{public}s %{public}s]:%i Missing tag: 0x%x", v157, ClassName, Name, 636, 165);
          }
          v160 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v161 = NFSharedLogGetLogger(v160);
          v64 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v161);
          if (os_log_type_enabled(&v64->super.super, OS_LOG_TYPE_ERROR))
          {
            v162 = object_getClass(v26);
            if (class_isMetaClass(v162))
              v163 = 43;
            else
              v163 = 45;
            v164 = object_getClassName(v26);
            v165 = sel_getName("decodeCRSResponse:");
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)&buf[4] = v163;
            *(_WORD *)v245 = 2082;
            *(_QWORD *)&v245[2] = v164;
            *(_WORD *)&v245[10] = 2082;
            *(_QWORD *)&v245[12] = v165;
            *(_WORD *)&v245[20] = 1024;
            *(_DWORD *)&v245[22] = 636;
            *(_WORD *)&v245[26] = 1024;
            *(_DWORD *)&v245[28] = 165;
            _os_log_impl((void *)&_mh_execute_header, &v64->super.super, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tag: 0x%x", buf, 0x28u);
          }
          sel = 0;
        }

        v59 = v63;
      }
      else
      {
        v123 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v124 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v123);
        if (v124)
        {
          v125 = object_getClass(a1);
          if (class_isMetaClass(v125))
            v126 = 43;
          else
            v126 = 45;
          v127 = object_getClassName(v26);
          v128 = sel_getName("decodeCRSResponse:");
          v124(3, "%c[%{public}s %{public}s]:%i Unexpected tag: 0x%x", v126, v127, v128, 624, objc_msgSend(v59, "tag"));
        }
        v129 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v130 = NFSharedLogGetLogger(v129);
        v61 = objc_claimAutoreleasedReturnValue(v130);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          v131 = object_getClass(v26);
          if (class_isMetaClass(v131))
            v132 = 43;
          else
            v132 = 45;
          v133 = object_getClassName(v26);
          v134 = sel_getName("decodeCRSResponse:");
          v135 = objc_msgSend(v59, "tag");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v132;
          *(_WORD *)v245 = 2082;
          *(_QWORD *)&v245[2] = v133;
          *(_WORD *)&v245[10] = 2082;
          *(_QWORD *)&v245[12] = v134;
          *(_WORD *)&v245[20] = 1024;
          *(_DWORD *)&v245[22] = 624;
          *(_WORD *)&v245[26] = 1024;
          *(_DWORD *)&v245[28] = v135;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected tag: 0x%x", buf, 0x28u);
        }
        sel = 0;
      }

      if (sel)
        v166 = (const __CFString *)sel;
      else
        v166 = CFSTR("<ERROR>");
      -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v166, CFSTR("<SELECT>"));
      v167 = objc_opt_new(NSMutableData);
      v168 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 79, 0));
      v169 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v168, "asData"));
      -[NSMutableData appendData:](v167, "appendData:", v169);

      v231 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &unk_100269B98, 12);
      if ((-[NSMutableDictionary supportedTechnologies](v26, "supportedTechnologies") & 4) != 0)
        objc_msgSend(v231, "appendBytes:length:", &unk_100269BA4, 1);
      v170 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 92, v231));
      v171 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v170, "asData"));
      -[NSMutableData appendData:](v167, "appendData:", v171);

      v172 = sub_1000B3E38(v26, v167, 0);
      v173 = objc_claimAutoreleasedReturnValue(v172);
      v226 = (void *)v173;
      if (v173)
        v174 = (const __CFString *)v173;
      else
        v174 = CFSTR("<ERROR>");
      -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v174, CFSTR("APPS"));
      v175 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary getData:](v26, "getData:", 209));
      v223 = v175;
      if (v175)
      {
        v176 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v175, "NF_asHexString"));
        -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v176, CFSTR("Version"));

      }
      else
      {
        -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", CFSTR("<ERROR>"), CFSTR("Version"));
      }
      v177 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary getData:](v26, "getData:", 217));
      v178 = v177;
      if (!v177)
        goto LABEL_171;
      v221 = v177;
      if ((unint64_t)objc_msgSend(v221, "length") > 3)
      {
        v196 = (char *)objc_msgSend(objc_retainAutorelease(v221), "bytes");
        v197 = (unsigned __int8 *)v196;
        if (*v196 == 1)
        {
          v198 = bswap32(*(unsigned __int16 *)(v196 + 1)) >> 16;
          v199 = v196[3];
          v246[0] = CFSTR("MaxTimeout");
          v187 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v198));
          *(_QWORD *)buf = v187;
          v246[1] = CFSTR("OsloSupport");
          v200 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v199 & 1));
          *(_QWORD *)v245 = v200;
          v246[2] = CFSTR("AuthMandatory");
          v201 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v199 >> 2) & 1));
          *(_QWORD *)&v245[8] = v201;
          v202 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, v246, 3));

          goto LABEL_169;
        }
        v206 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v207 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v206);
        if (v207)
        {
          v208 = object_getClass(v26);
          if (class_isMetaClass(v208))
            v209 = 43;
          else
            v209 = 45;
          v210 = object_getClassName(v26);
          v211 = sel_getName("decodeCRSPlatformConfiguration:");
          v207(3, "%c[%{public}s %{public}s]:%i Unknown version: %d", v209, v210, v211, 661, *v197);
        }
        v212 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v213 = NFSharedLogGetLogger(v212);
        v187 = objc_claimAutoreleasedReturnValue(v213);
        if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
        {
          v214 = object_getClass(v26);
          if (class_isMetaClass(v214))
            v215 = 43;
          else
            v215 = 45;
          v216 = object_getClassName(v26);
          v217 = sel_getName("decodeCRSPlatformConfiguration:");
          v218 = *v197;
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v215;
          *(_WORD *)v245 = 2082;
          *(_QWORD *)&v245[2] = v216;
          *(_WORD *)&v245[10] = 2082;
          *(_QWORD *)&v245[12] = v217;
          *(_WORD *)&v245[20] = 1024;
          *(_DWORD *)&v245[22] = 661;
          *(_WORD *)&v245[26] = 1024;
          *(_DWORD *)&v245[28] = v218;
          v193 = "%c[%{public}s %{public}s]:%i Unknown version: %d";
          v194 = v187;
          v195 = 40;
          goto LABEL_167;
        }
      }
      else
      {
        v179 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v180 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v179);
        if (v180)
        {
          v181 = object_getClass(v26);
          if (class_isMetaClass(v181))
            v182 = 43;
          else
            v182 = 45;
          v183 = object_getClassName(v26);
          v184 = sel_getName("decodeCRSPlatformConfiguration:");
          v180(3, "%c[%{public}s %{public}s]:%i Invalid length: %zd", v182, v183, v184, 655, objc_msgSend(v221, "length"));
        }
        v185 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v186 = NFSharedLogGetLogger(v185);
        v187 = objc_claimAutoreleasedReturnValue(v186);
        if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
        {
          v188 = object_getClass(v26);
          if (class_isMetaClass(v188))
            v189 = 43;
          else
            v189 = 45;
          v190 = object_getClassName(v26);
          v191 = sel_getName("decodeCRSPlatformConfiguration:");
          v192 = objc_msgSend(v221, "length");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v189;
          *(_WORD *)v245 = 2082;
          *(_QWORD *)&v245[2] = v190;
          *(_WORD *)&v245[10] = 2082;
          *(_QWORD *)&v245[12] = v191;
          *(_WORD *)&v245[20] = 1024;
          *(_DWORD *)&v245[22] = 655;
          *(_WORD *)&v245[26] = 2048;
          *(_QWORD *)&v245[28] = v192;
          v193 = "%c[%{public}s %{public}s]:%i Invalid length: %zd";
          v194 = v187;
          v195 = 44;
LABEL_167:
          _os_log_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_ERROR, v193, buf, v195);
        }
      }
      v202 = 0;
LABEL_169:

      if (v202)
      {
        -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v202, CFSTR("PlatformConfiguration"));

      }
      else
      {
LABEL_171:
        -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", CFSTR("<ERROR>"), CFSTR("PlatformConfiguration"));
      }
      *a3 = objc_retainAutorelease(v25);

      v29 = 0;
LABEL_173:

      return v29;
    case 4:
      *(_QWORD *)buf = 0;
      *(_QWORD *)v245 = buf;
      *(_QWORD *)&v245[8] = 0x3032000000;
      *(_QWORD *)&v245[16] = sub_10009D0E0;
      *(_QWORD *)&v245[24] = sub_10009D0F0;
      *(_QWORD *)&v245[32] = objc_opt_new(NSMutableDictionary);
      v233 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B16, 10);
      v243[0] = v233;
      v229 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B20, 10);
      v243[1] = v229;
      sela = (char *)objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B2A, 10);
      v243[2] = sela;
      v30 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B34, 10);
      v243[3] = v30;
      v31 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B3E, 10);
      v243[4] = v31;
      v32 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B48, 10);
      v243[5] = v32;
      v33 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B52, 10);
      v243[6] = v33;
      v34 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B5C, 10);
      v243[7] = v34;
      v35 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B66, 10);
      v243[8] = v35;
      v36 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B70, 10);
      v243[9] = v36;
      v37 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B7A, 10);
      v243[10] = v37;
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v243, 11));

      v238[0] = _NSConcreteStackBlock;
      v238[1] = 3221225472;
      v238[2] = sub_10009D0F8;
      v238[3] = &unk_1002E7478;
      v238[4] = a1;
      v238[5] = buf;
      v238[6] = "dumpDomain:info:";
      objc_msgSend(v38, "enumerateObjectsUsingBlock:", v238);
      if (objc_msgSend(*(id *)(*(_QWORD *)v245 + 40), "count"))
      {
        v29 = 0;
        if (a3)
          *a3 = objc_retainAutorelease(*(id *)(*(_QWORD *)v245 + 40));
      }
      else
      {
        v81 = objc_alloc((Class)NSError);
        v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v241 = NSLocalizedDescriptionKey;
        v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
        v242 = v83;
        v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v242, &v241, 1));
        v29 = (NSString *)objc_msgSend(v81, "initWithDomain:code:userInfo:", v82, 6, v84);

      }
      _Block_object_dispose(buf, 8);

      return v29;
    case 5:
      v234 = objc_opt_new(NSMutableDictionary);
      v39 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", "FACTORYTESTAPP", 14);
      v246[0] = 0;
      v40 = a1;
      v41 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary selectByName:error:](a1, "selectByName:error:", v39, v246));
      v29 = (NSString *)v246[0];

      if (!v41)
      {
        v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v69 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v68);
        if (v69)
        {
          v70 = object_getClass(v40);
          if (class_isMetaClass(v70))
            v71 = 43;
          else
            v71 = 45;
          v72 = object_getClassName(v40);
          v73 = sel_getName("dumpFTAppletLogging:");
          v69(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v71, v72, v73, 1121, v29);
        }
        v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v75 = NFSharedLogGetLogger(v74);
        v76 = objc_claimAutoreleasedReturnValue(v75);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          v77 = object_getClass(v40);
          if (class_isMetaClass(v77))
            v78 = 43;
          else
            v78 = 45;
          v79 = object_getClassName(v40);
          v80 = sel_getName("dumpFTAppletLogging:");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v78;
          *(_WORD *)v245 = 2082;
          *(_QWORD *)&v245[2] = v79;
          *(_WORD *)&v245[10] = 2082;
          *(_QWORD *)&v245[12] = v80;
          *(_WORD *)&v245[20] = 1024;
          *(_DWORD *)&v245[22] = 1121;
          *(_WORD *)&v245[26] = 2114;
          *(_QWORD *)&v245[28] = v29;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
        }

        if (v29)
        {
          v57 = 0;
          goto LABEL_153;
        }
        v108 = objc_alloc((Class)NSError);
        v29 = (NSString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v248 = NSLocalizedDescriptionKey;
        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        *(_QWORD *)buf = v41;
        v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v248, 1));
        v58 = (NSString *)objc_msgSend(v108, "initWithDomain:code:userInfo:", v29, 16, v109);

        goto LABEL_151;
      }
      if (objc_msgSend(v41, "status") != 36864)
      {
        v85 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v86 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v85);
        if (v86)
        {
          v87 = object_getClass(v40);
          if (class_isMetaClass(v87))
            v88 = 43;
          else
            v88 = 45;
          v89 = object_getClassName(v40);
          v90 = sel_getName("dumpFTAppletLogging:");
          v86(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v88, v89, v90, 1125, objc_msgSend(v41, "status"));
        }
        v91 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v92 = NFSharedLogGetLogger(v91);
        v93 = objc_claimAutoreleasedReturnValue(v92);
        if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
        {
          v94 = object_getClass(v40);
          if (class_isMetaClass(v94))
            v95 = 43;
          else
            v95 = 45;
          v96 = object_getClassName(v40);
          v97 = sel_getName("dumpFTAppletLogging:");
          v98 = objc_msgSend(v41, "status");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v95;
          *(_WORD *)v245 = 2082;
          *(_QWORD *)&v245[2] = v96;
          *(_WORD *)&v245[10] = 2082;
          *(_QWORD *)&v245[12] = v97;
          *(_WORD *)&v245[20] = 1024;
          *(_DWORD *)&v245[22] = 1125;
          *(_WORD *)&v245[26] = 1024;
          *(_DWORD *)&v245[28] = v98;
          _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
        }

        v99 = objc_msgSend(v41, "status") == 26277;
        v100 = objc_alloc((Class)NSError);
        v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v248 = NSLocalizedDescriptionKey;
        if (v99)
        {
          v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Restricted Mode"));
          *(_QWORD *)buf = v102;
          v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v248, 1));
          v58 = (NSString *)objc_msgSend(v100, "initWithDomain:code:userInfo:", v101, 24, v103);
        }
        else
        {
          v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
          *(_QWORD *)buf = v102;
          v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v248, 1));
          v58 = (NSString *)objc_msgSend(v100, "initWithDomain:code:userInfo:", v101, 16, v103);
        }

LABEL_151:
        v57 = 0;
        goto LABEL_152;
      }
      v248 = v29;
      v42 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:](v40, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 253, 1, 0, 0, 0, 0, &v248));
      v43 = v248;

      if (!v42)
      {
        v110 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v111 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v110);
        if (v111)
        {
          v112 = object_getClass(v40);
          if (class_isMetaClass(v112))
            v113 = 43;
          else
            v113 = 45;
          v114 = object_getClassName(v40);
          v115 = sel_getName("dumpFTAppletLogging:");
          v111(3, "%c[%{public}s %{public}s]:%i Failed to send command : %{public}@", v113, v114, v115, 1135, v43);
        }
        v116 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v117 = NFSharedLogGetLogger(v116);
        v118 = objc_claimAutoreleasedReturnValue(v117);
        if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
        {
          v119 = object_getClass(v40);
          if (class_isMetaClass(v119))
            v120 = 43;
          else
            v120 = 45;
          v121 = object_getClassName(v40);
          v122 = sel_getName("dumpFTAppletLogging:");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v120;
          *(_WORD *)v245 = 2082;
          *(_QWORD *)&v245[2] = v121;
          *(_WORD *)&v245[10] = 2082;
          *(_QWORD *)&v245[12] = v122;
          *(_WORD *)&v245[20] = 1024;
          *(_DWORD *)&v245[22] = 1135;
          *(_WORD *)&v245[26] = 2114;
          *(_QWORD *)&v245[28] = v43;
          _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send command : %{public}@", buf, 0x2Cu);
        }

        if (v43)
        {
          v57 = 0;
          v29 = v43;
          goto LABEL_153;
        }
        v203 = objc_alloc((Class)NSError);
        v29 = (NSString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v247 = NSLocalizedDescriptionKey;
        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        *(_QWORD *)buf = v41;
        v204 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v247, 1));
        v58 = (NSString *)objc_msgSend(v203, "initWithDomain:code:userInfo:", v29, 16, v204);

        goto LABEL_151;
      }
      if (objc_msgSend(v42, "status") == 27013)
      {
        v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v44);
        if (v45)
        {
          v46 = object_getClass(v40);
          if (class_isMetaClass(v46))
            v47 = 43;
          else
            v47 = 45;
          v48 = object_getClassName(v40);
          v49 = sel_getName("dumpFTAppletLogging:");
          v45(6, "%c[%{public}s %{public}s]:%i No logging data", v47, v48, v49, 1139);
        }
        v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v51 = NFSharedLogGetLogger(v50);
        v52 = objc_claimAutoreleasedReturnValue(v51);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          v53 = object_getClass(v40);
          if (class_isMetaClass(v53))
            v54 = 43;
          else
            v54 = 45;
          v55 = object_getClassName(v40);
          v56 = sel_getName("dumpFTAppletLogging:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v54;
          *(_WORD *)v245 = 2082;
          *(_QWORD *)&v245[2] = v55;
          *(_WORD *)&v245[10] = 2082;
          *(_QWORD *)&v245[12] = v56;
          *(_WORD *)&v245[20] = 1024;
          *(_DWORD *)&v245[22] = 1139;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No logging data", buf, 0x22u);
        }

        v57 = objc_opt_new(NSData);
        v58 = 0;
      }
      else
      {
        if (objc_msgSend(v42, "status") == 36864)
        {
          v57 = (NSData *)(id)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "response"));
          v29 = v43;
          v41 = v42;
          v58 = v29;
          goto LABEL_152;
        }
        v136 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v137 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v136);
        if (v137)
        {
          v138 = object_getClass(v40);
          if (class_isMetaClass(v138))
            v139 = 43;
          else
            v139 = 45;
          v140 = object_getClassName(v40);
          v141 = sel_getName("dumpFTAppletLogging:");
          v137(3, "%c[%{public}s %{public}s]:%i Failed to send command: 0x%04x", v139, v140, v141, 1144, objc_msgSend(v42, "status"));
        }
        v142 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v143 = NFSharedLogGetLogger(v142);
        v144 = objc_claimAutoreleasedReturnValue(v143);
        if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
        {
          v145 = object_getClass(v40);
          if (class_isMetaClass(v145))
            v146 = 43;
          else
            v146 = 45;
          v147 = object_getClassName(v40);
          v148 = sel_getName("dumpFTAppletLogging:");
          v149 = objc_msgSend(v42, "status");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v146;
          *(_WORD *)v245 = 2082;
          *(_QWORD *)&v245[2] = v147;
          *(_WORD *)&v245[10] = 2082;
          *(_QWORD *)&v245[12] = v148;
          *(_WORD *)&v245[20] = 1024;
          *(_DWORD *)&v245[22] = 1144;
          *(_WORD *)&v245[26] = 1024;
          *(_DWORD *)&v245[28] = v149;
          _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send command: 0x%04x", buf, 0x28u);
        }

        v150 = objc_alloc((Class)NSError);
        v151 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v247 = NSLocalizedDescriptionKey;
        v152 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        *(_QWORD *)buf = v152;
        v153 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v247, 1));
        v58 = (NSString *)objc_msgSend(v150, "initWithDomain:code:userInfo:", v151, 16, v153);

        v57 = 0;
      }
      v41 = v42;
      v29 = v43;
LABEL_152:

      v29 = v58;
LABEL_153:
      v205 = v57;
      if (!v29)
      {
        -[NSMutableDictionary setValue:forKey:](v234, "setValue:forKey:", v205, CFSTR("FTA Logging"));
        if (a3)
          *a3 = objc_retainAutorelease(v234);
      }

      return v29;
    default:
      v7 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v8 = NFLogGetLogger(v7);
      if (v8)
      {
        v9 = (void (*)(uint64_t, const char *, ...))v8;
        v10 = object_getClass(a1);
        isMetaClass = class_isMetaClass(v10);
        v219 = object_getClassName(a1);
        v220 = sel_getName("dumpDomain:info:");
        v12 = 45;
        if (isMetaClass)
          v12 = 43;
        v9(3, "%c[%{public}s %{public}s]:%i Unknown app id: %d", v12, v219, v220, 149, a2);
      }
      v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v14 = NFSharedLogGetLogger(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = object_getClass(a1);
        if (class_isMetaClass(v16))
          v17 = 43;
        else
          v17 = 45;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v17;
        *(_WORD *)v245 = 2082;
        *(_QWORD *)&v245[2] = object_getClassName(a1);
        *(_WORD *)&v245[10] = 2082;
        *(_QWORD *)&v245[12] = sel_getName("dumpDomain:info:");
        *(_WORD *)&v245[20] = 1024;
        *(_DWORD *)&v245[22] = 149;
        *(_WORD *)&v245[26] = 1024;
        *(_DWORD *)&v245[28] = a2;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown app id: %d", buf, 0x28u);
      }

      v18 = objc_alloc((Class)NSError);
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v239 = NSLocalizedDescriptionKey;
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v240 = v20;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v240, &v239, 1));
      v22 = objc_msgSend(v18, "initWithDomain:code:userInfo:", v19, 10, v21);

      return (NSString *)v22;
  }
}

void sub_10009AEC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

id sub_10009AEE8(NSMutableDictionary *a1, int a2, _QWORD *a3)
{
  NSMutableDictionary *v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  NSMutableDictionary *v13;
  void *v14;
  NSMutableDictionary *v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  NSMutableDictionary *v20;
  void *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  NSMutableDictionary *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  NSMutableDictionary *v50;
  void *specific;
  uint64_t Logger;
  void (*v53)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  NSObject *v60;
  objc_class *v61;
  int v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  void (*v68)(uint64_t, const char *, ...);
  objc_class *v69;
  _BOOL4 v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  objc_class *v75;
  int v76;
  const char *v77;
  const char *v78;
  id v79;
  void *v80;
  uint64_t v81;
  void (*v82)(uint64_t, const char *, ...);
  objc_class *v83;
  _BOOL4 v84;
  id v85;
  const char *v86;
  const char *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  NSObject *v91;
  objc_class *v92;
  int v93;
  const char *v94;
  const char *v95;
  unsigned int v96;
  unsigned int v97;
  id v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void (*v107)(uint64_t, const char *, ...);
  objc_class *v108;
  _BOOL4 v109;
  const char *v110;
  const char *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  objc_class *v115;
  int v116;
  const char *v117;
  const char *v118;
  unsigned int v119;
  id v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  uint64_t v125;
  void (*v126)(uint64_t, const char *, ...);
  objc_class *v127;
  _BOOL4 v128;
  const char *v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  objc_class *v133;
  int v134;
  const char *v135;
  const char *v136;
  void *v137;
  void *v138;
  id v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  id v145;
  NSMutableArray *v146;
  id v147;
  void *v148;
  void *v149;
  id v150;
  id v151;
  void *v152;
  void *v153;
  id v154;
  id v155;
  void *v156;
  void *v157;
  id v158;
  id v159;
  void *v160;
  void *v161;
  id v162;
  id v163;
  void *v164;
  void *v165;
  id v166;
  id v167;
  void *v168;
  void *v169;
  id v170;
  id v171;
  void *v172;
  void *v173;
  id v174;
  id v175;
  void *v176;
  void *v177;
  id v178;
  id v179;
  void *v180;
  void *v181;
  id v182;
  id v183;
  void *v184;
  void *v185;
  id v186;
  id v187;
  void *v188;
  void *v189;
  id v190;
  id v191;
  void *v192;
  void *v193;
  id v194;
  id v195;
  void *v196;
  void *v197;
  id v198;
  id v199;
  void *v200;
  void *v201;
  id v202;
  id v203;
  void *v204;
  void *v205;
  id v206;
  id v207;
  void *v208;
  void *v209;
  id v210;
  id v211;
  void *v212;
  void *v213;
  id v214;
  id v215;
  NSObject *v216;
  void *v217;
  id v218;
  void *v219;
  uint64_t v220;
  void (*v221)(uint64_t, const char *, ...);
  objc_class *v222;
  _BOOL4 v223;
  const char *v224;
  void *v225;
  NSMutableDictionary *v226;
  const char *v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  objc_class *v231;
  int v232;
  const char *v233;
  void *v234;
  const char *v235;
  unsigned int v236;
  const __CFString *v237;
  NSMutableDictionary *v238;
  void *v239;
  void *v240;
  id v241;
  void *v242;
  id v243;
  __CFString *v244;
  const __CFString *v245;
  void *v246;
  void *v247;
  void *v248;
  void *v249;
  NSMutableDictionary *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  id v255;
  NSMutableArray *v256;
  id v257;
  void *v258;
  void *v259;
  id v260;
  id v261;
  void *v262;
  void *v263;
  id v264;
  id v265;
  void *v266;
  void *v267;
  id v268;
  id v269;
  void *v270;
  uint64_t v271;
  _QWORD *v272;
  id v273;
  void *v274;
  void *v275;
  id v276;
  id v277;
  void *v278;
  void *v279;
  id v280;
  id v281;
  void *v282;
  void *v283;
  id v284;
  void *v285;
  void *v286;
  id v287;
  void *v288;
  id v290;
  void *v291;
  void *v292;
  id v293;
  id v294;
  void *v295;
  void *v296;
  id v297;
  id v298;
  void *v299;
  void *v300;
  id v301;
  id v302;
  void *v303;
  void *v304;
  id v305;
  id v306;
  const char *v307;
  const char *v308;
  const char *Name;
  const char *v310;
  const char *v311;
  const char *v312;
  uint64_t v313;
  id v314;
  id v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  NSMutableDictionary *v320;
  void *v321;
  id v322;
  id v323;
  void *v324;
  NSMutableDictionary *v325;
  void *v326;
  _QWORD *v327;
  NSMutableDictionary *v328;
  void *v329;
  void *v330;
  NSMutableDictionary *v331;
  id v332;
  id v333;
  _QWORD v334[5];
  NSMutableDictionary *v335;
  id v336;
  _QWORD v337[13];
  _QWORD v338[13];
  uint8_t buf[48];
  unsigned int v340;
  NSErrorUserInfoKey v341;
  void *v342;
  NSErrorUserInfoKey v343;
  void *v344;
  NSErrorUserInfoKey v345;
  void *v346;
  NSErrorUserInfoKey v347;
  void *v348;
  NSErrorUserInfoKey v349;
  void *v350;

  v6 = objc_opt_new(NSMutableDictionary);
  if (a2 == 1)
  {
    v7 = objc_alloc((Class)NSData);
    v8 = &unk_100269B8C;
    v9 = 12;
  }
  else
  {
    if (a2)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v53 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("dumpRootSecurityDomain:info:");
        v57 = 45;
        if (isMetaClass)
          v57 = 43;
        v53(3, "%c[%{public}s %{public}s]:%i Invalid domain parameter", v57, ClassName, Name, 168);
      }
      v58 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v59 = NFSharedLogGetLogger(v58);
      v60 = objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        v61 = object_getClass(a1);
        if (class_isMetaClass(v61))
          v62 = 43;
        else
          v62 = 45;
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v62;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = object_getClassName(a1);
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = sel_getName("dumpRootSecurityDomain:info:");
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 168;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid domain parameter", buf, 0x22u);
      }

      v63 = objc_alloc((Class)NSError);
      v10 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v349 = NSLocalizedDescriptionKey;
      v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v350 = v64;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v350, &v349, 1));
      v65 = objc_msgSend(v63, "initWithDomain:code:userInfo:", v10, 10, v11);
LABEL_51:
      v79 = v65;
      goto LABEL_142;
    }
    v7 = objc_alloc((Class)NSData);
    v8 = &unk_100269B84;
    v9 = 8;
  }
  v10 = objc_msgSend(v7, "initWithBytes:length:", v8, v9);
  v336 = 0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary selectByName:error:](a1, "selectByName:error:", v10, &v336));
  v333 = v336;
  if (!v11)
  {
    v66 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v67 = NFLogGetLogger(v66);
    v64 = v333;
    if (v67)
    {
      v68 = (void (*)(uint64_t, const char *, ...))v67;
      v69 = object_getClass(a1);
      v70 = class_isMetaClass(v69);
      v307 = object_getClassName(a1);
      v310 = sel_getName("dumpRootSecurityDomain:info:");
      v71 = 45;
      if (v70)
        v71 = 43;
      v68(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v71, v307, v310, 176, v333);
    }
    v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v73 = NFSharedLogGetLogger(v72);
    v74 = objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      v75 = object_getClass(a1);
      if (class_isMetaClass(v75))
        v76 = 43;
      else
        v76 = 45;
      v77 = object_getClassName(a1);
      v78 = sel_getName("dumpRootSecurityDomain:info:");
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v76;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v77;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v78;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 176;
      *(_WORD *)&buf[34] = 2114;
      *(_QWORD *)&buf[36] = v333;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
    }

    if (!v333)
    {
      v120 = objc_alloc((Class)NSError);
      v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v347 = NSLocalizedDescriptionKey;
      v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v348 = v122;
      v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v348, &v347, 1));
      v79 = objc_msgSend(v120, "initWithDomain:code:userInfo:", v121, 16, v123);

      v11 = 0;
      goto LABEL_142;
    }
    v65 = v333;
    v64 = v65;
    v11 = 0;
    goto LABEL_51;
  }
  if (objc_msgSend(v11, "status") == 36864)
  {
    v327 = a3;
    v331 = v6;
    v332 = v10;
    v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "response"));
    v13 = objc_opt_new(NSMutableDictionary);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithData:](NFTLV, "TLVWithData:", v12));

    v328 = v13;
    if (objc_msgSend(v14, "tag") == 111)
    {
      v15 = objc_opt_new(NSMutableDictionary);
      -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v15, CFSTR("File Control Info"));
      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "childWithTag:", 132));
      v17 = v16;
      if (v16)
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject value](v16, "value"));
        -[NSMutableDictionary setObject:forKey:](v15, "setObject:forKey:", v18, CFSTR("Dedicated File Name"));

      }
      v325 = v15;
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "childWithTag:", 165));

      if (v19)
      {
        v20 = objc_opt_new(NSMutableDictionary);
        -[NSMutableDictionary setObject:forKey:](v325, "setObject:forKey:", v20, CFSTR("File Control Info (Proprietary)"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "childWithTag:", 40805));

        if (v21)
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "value"));
          -[NSMutableDictionary setObject:forKey:](v20, "setObject:forKey:", v22, CFSTR("Command Max Data Length"));

        }
        v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "childWithTag:", 40814));

        if (v17)
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject value](v17, "value"));
          -[NSMutableDictionary setObject:forKey:](v20, "setObject:forKey:", v23, CFSTR("App Production Lifecycle"));

        }
        v320 = v20;
        v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "childWithTag:", 115));
        if (v24)
        {
          v318 = v19;
          v25 = objc_opt_new(NSMutableDictionary);
          -[NSMutableDictionary setObject:forKey:](v325, "setObject:forKey:", v25, CFSTR("Security Domain Management"));
          v26 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject childWithTag:](v24, "childWithTag:", 6));

          if (v26)
          {
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "value"));
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "value"));
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "subdataWithRange:", 6, (char *)objc_msgSend(v28, "length") - 6));

            -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v29, CFSTR("Tag Allocation Authority"));
          }
          v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject childWithTag:](v24, "childWithTag:", 96));
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "childWithTag:", 6));

          if (v31)
          {
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "value"));
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "value"));
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "subdataWithRange:", 6, (char *)objc_msgSend(v33, "length") - 6));

            -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v34, CFSTR("Card Management Type and Version"));
          }
          v35 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject childWithTag:](v24, "childWithTag:", 99));
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "childWithTag:", 6));

          if (v36)
          {
            v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "value"));
            v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "value"));
            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "subdataWithRange:", 6, (char *)objc_msgSend(v38, "length") - 6));

            -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v39, CFSTR("Card Identification Scheme"));
          }
          v40 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject childWithTag:](v24, "childWithTag:", 100));
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "childWithTag:", 6));

          if (v41)
          {
            v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "value"));
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "value"));
            v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "subdataWithRange:", 6, (char *)objc_msgSend(v43, "length") - 6));

            -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v44, CFSTR("Secure Channel Protocol"));
          }
          v45 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject childWithTag:](v24, "childWithTag:", 101));
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "childWithTag:", 6));

          if (v46)
          {
            v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "value"));
            -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v47, CFSTR("Card Configuration"));

          }
          v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject childWithTag:](v24, "childWithTag:", 102));
          v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "childWithTag:", 6));

          if (v17)
          {
            v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject value](v17, "value"));
            -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v49, CFSTR("Card/Chip Details"));

          }
          v19 = v318;
        }
        v50 = v328;

      }
      else
      {
        v323 = v12;
        v124 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v125 = NFLogGetLogger(v124);
        if (v125)
        {
          v126 = (void (*)(uint64_t, const char *, ...))v125;
          v127 = object_getClass(a1);
          v128 = class_isMetaClass(v127);
          v129 = object_getClassName(a1);
          v311 = sel_getName("decodeRootSecurityDomainResponse:");
          v130 = 45;
          if (v128)
            v130 = 43;
          v126(3, "%c[%{public}s %{public}s]:%i Missing tag: 0x%x", v130, v129, v311, 435, 165);
        }
        v131 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v132 = NFSharedLogGetLogger(v131);
        v24 = objc_claimAutoreleasedReturnValue(v132);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v133 = object_getClass(a1);
          if (class_isMetaClass(v133))
            v134 = 43;
          else
            v134 = 45;
          v135 = object_getClassName(a1);
          v136 = sel_getName("decodeRootSecurityDomainResponse:");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v134;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = v135;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v136;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = 435;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 165;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tag: 0x%x", buf, 0x28u);
        }
        v50 = 0;
        v12 = v323;
      }

    }
    else
    {
      v322 = v12;
      v105 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v106 = NFLogGetLogger(v105);
      if (v106)
      {
        v107 = (void (*)(uint64_t, const char *, ...))v106;
        v108 = object_getClass(a1);
        v109 = class_isMetaClass(v108);
        v110 = object_getClassName(a1);
        v111 = sel_getName("decodeRootSecurityDomainResponse:");
        v314 = objc_msgSend(v14, "tag");
        v112 = 45;
        if (v109)
          v112 = 43;
        v107(3, "%c[%{public}s %{public}s]:%i Unexpected tag: 0x%x", v112, v110, v111, 423, v314);
      }
      v113 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v114 = NFSharedLogGetLogger(v113);
      v17 = objc_claimAutoreleasedReturnValue(v114);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v115 = object_getClass(a1);
        if (class_isMetaClass(v115))
          v116 = 43;
        else
          v116 = 45;
        v117 = object_getClassName(a1);
        v118 = sel_getName("decodeRootSecurityDomainResponse:");
        v119 = objc_msgSend(v14, "tag");
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v116;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = v117;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v118;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 423;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v119;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected tag: 0x%x", buf, 0x28u);
      }
      v50 = 0;
      v19 = v14;
      v12 = v322;
    }

    v6 = v331;
    if (!v50)
    {
      -[NSMutableDictionary setObject:forKey:](v331, "setObject:forKey:", CFSTR("<ERROR>"), CFSTR("<SELECT>"));
      v139 = objc_alloc((Class)NSError);
      v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v341 = NSLocalizedDescriptionKey;
      v141 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
      v342 = v141;
      v142 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v342, &v341, 1));
      v79 = objc_msgSend(v139, "initWithDomain:code:userInfo:", v140, 6, v142);

      v10 = v332;
      v64 = v333;
LABEL_141:

      goto LABEL_142;
    }
    -[NSMutableDictionary setObject:forKey:](v331, "setObject:forKey:", v50, CFSTR("<SELECT>"));
    v137 = sub_100096794(a1);
    v10 = v332;
    if ((_DWORD)v137)
    {
      v138 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v137));
      -[NSMutableDictionary setObject:forKey:](v331, "setObject:forKey:", v138, CFSTR("COUNTER"));

    }
    else
    {
      -[NSMutableDictionary setObject:forKey:](v331, "setObject:forKey:", CFSTR("<ERROR>"), CFSTR("COUNTER"));
    }
    v143 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary getData:](a1, "getData:", 40831));
    v144 = v143;
    if (v143)
    {
      v145 = v143;
      if (objc_msgSend(v145, "length") == (id)42)
      {
        v146 = objc_opt_new(NSMutableArray);
        v147 = objc_alloc((Class)NSString);
        v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 0, 2));
        v329 = v144;
        v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v148, "NF_asHexString"));
        v150 = objc_msgSend(v147, "initWithFormat:", CFSTR("IC Fabricator: %@"), v149);
        -[NSMutableArray addObject:](v146, "addObject:", v150);

        v151 = objc_alloc((Class)NSString);
        v152 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 2, 2));
        v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v152, "NF_asHexString"));
        v154 = objc_msgSend(v151, "initWithFormat:", CFSTR("IC Type: %@"), v153);
        -[NSMutableArray addObject:](v146, "addObject:", v154);

        v155 = objc_alloc((Class)NSString);
        v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 4, 2));
        v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "NF_asHexString"));
        v158 = objc_msgSend(v155, "initWithFormat:", CFSTR("OS Provider: %@"), v157);
        -[NSMutableArray addObject:](v146, "addObject:", v158);

        v159 = objc_alloc((Class)NSString);
        v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 6, 2));
        v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v160, "NF_asHexString"));
        v162 = objc_msgSend(v159, "initWithFormat:", CFSTR("OS Release Date: %@"), v161);
        -[NSMutableArray addObject:](v146, "addObject:", v162);

        v163 = objc_alloc((Class)NSString);
        v164 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 8, 2));
        v165 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v164, "NF_asHexString"));
        v166 = objc_msgSend(v163, "initWithFormat:", CFSTR("OS Release Level: %@"), v165);
        -[NSMutableArray addObject:](v146, "addObject:", v166);

        v167 = objc_alloc((Class)NSString);
        v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 10, 2));
        v169 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v168, "NF_asHexString"));
        v170 = objc_msgSend(v167, "initWithFormat:", CFSTR("IC Fabrication Date: %@"), v169);
        -[NSMutableArray addObject:](v146, "addObject:", v170);

        v171 = objc_alloc((Class)NSString);
        v172 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 12, 4));
        v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v172, "NF_asHexString"));
        v174 = objc_msgSend(v171, "initWithFormat:", CFSTR("IC Serial Number: %@"), v173);
        -[NSMutableArray addObject:](v146, "addObject:", v174);

        v175 = objc_alloc((Class)NSString);
        v176 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 16, 2));
        v177 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v176, "NF_asHexString"));
        v178 = objc_msgSend(v175, "initWithFormat:", CFSTR("IC Batch Identifier: %@"), v177);
        -[NSMutableArray addObject:](v146, "addObject:", v178);

        v179 = objc_alloc((Class)NSString);
        v180 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 18, 2));
        v181 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v180, "NF_asHexString"));
        v182 = objc_msgSend(v179, "initWithFormat:", CFSTR("IC Module Fabricator: %@"), v181);
        -[NSMutableArray addObject:](v146, "addObject:", v182);

        v183 = objc_alloc((Class)NSString);
        v184 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 20, 2));
        v185 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "NF_asHexString"));
        v186 = objc_msgSend(v183, "initWithFormat:", CFSTR("IC Module Packaging Date: %@"), v185);
        -[NSMutableArray addObject:](v146, "addObject:", v186);

        v187 = objc_alloc((Class)NSString);
        v188 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 22, 2));
        v189 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v188, "NF_asHexString"));
        v190 = objc_msgSend(v187, "initWithFormat:", CFSTR("IC Manufacturer: %@"), v189);
        -[NSMutableArray addObject:](v146, "addObject:", v190);

        v191 = objc_alloc((Class)NSString);
        v192 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 24, 2));
        v193 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v192, "NF_asHexString"));
        v194 = objc_msgSend(v191, "initWithFormat:", CFSTR("IC Embedding Date: %@"), v193);
        -[NSMutableArray addObject:](v146, "addObject:", v194);

        v195 = objc_alloc((Class)NSString);
        v196 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 26, 2));
        v197 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v196, "NF_asHexString"));
        v198 = objc_msgSend(v195, "initWithFormat:", CFSTR("Prepersonalizer Identifier: %@"), v197);
        -[NSMutableArray addObject:](v146, "addObject:", v198);

        v199 = objc_alloc((Class)NSString);
        v200 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 28, 2));
        v201 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v200, "NF_asHexString"));
        v202 = objc_msgSend(v199, "initWithFormat:", CFSTR("Prepersonalization Date: %@"), v201);
        -[NSMutableArray addObject:](v146, "addObject:", v202);

        v203 = objc_alloc((Class)NSString);
        v204 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 30, 4));
        v205 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v204, "NF_asHexString"));
        v206 = objc_msgSend(v203, "initWithFormat:", CFSTR("Prepersonalization Equipment: %@"), v205);
        -[NSMutableArray addObject:](v146, "addObject:", v206);

        v207 = objc_alloc((Class)NSString);
        v208 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 34, 2));
        v209 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v208, "NF_asHexString"));
        v210 = objc_msgSend(v207, "initWithFormat:", CFSTR("Personalizer Identifier: %@"), v209);
        -[NSMutableArray addObject:](v146, "addObject:", v210);

        v211 = objc_alloc((Class)NSString);
        v212 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 36, 2));
        v213 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v212, "NF_asHexString"));
        v214 = objc_msgSend(v211, "initWithFormat:", CFSTR("Personalization Date: %@"), v213);
        -[NSMutableArray addObject:](v146, "addObject:", v214);

        v215 = objc_alloc((Class)NSString);
        v216 = objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subdataWithRange:", 38, 4));
        v217 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject NF_asHexString](v216, "NF_asHexString"));
        v218 = objc_msgSend(v215, "initWithFormat:", CFSTR("Personalization Equipment: %@"), v217);
        -[NSMutableArray addObject:](v146, "addObject:", v218);

        v144 = v329;
      }
      else
      {
        v219 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v220 = NFLogGetLogger(v219);
        if (v220)
        {
          v221 = (void (*)(uint64_t, const char *, ...))v220;
          v222 = object_getClass(a1);
          v223 = class_isMetaClass(v222);
          v224 = object_getClassName(a1);
          v225 = v144;
          v226 = v50;
          v227 = sel_getName("decodeCPLCResponse:");
          v315 = objc_msgSend(v145, "length");
          v312 = v227;
          v50 = v226;
          v144 = v225;
          v228 = 45;
          if (v223)
            v228 = 43;
          v221(3, "%c[%{public}s %{public}s]:%i Invalid length: %d", v228, v224, v312, 565, v315);
        }
        v229 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v230 = NFSharedLogGetLogger(v229);
        v216 = objc_claimAutoreleasedReturnValue(v230);
        if (os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
        {
          v231 = object_getClass(a1);
          if (class_isMetaClass(v231))
            v232 = 43;
          else
            v232 = 45;
          v233 = object_getClassName(a1);
          v234 = v144;
          v235 = sel_getName("decodeCPLCResponse:");
          v236 = objc_msgSend(v145, "length");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v232;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = v233;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v235;
          v144 = v234;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = 565;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v236;
          _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid length: %d", buf, 0x28u);
          v146 = 0;
        }
        else
        {
          v146 = 0;
        }
      }

      if (v146)
        v237 = (const __CFString *)v146;
      else
        v237 = CFSTR("<ERROR>");
      v6 = v331;
      -[NSMutableDictionary setObject:forKey:](v331, "setObject:forKey:", v237, CFSTR("CPLC"));

      v10 = v332;
    }
    else
    {
      -[NSMutableDictionary setObject:forKey:](v331, "setObject:forKey:", CFSTR("<ERROR>"), CFSTR("CPLC"));
    }
    if (a2 == 1)
    {
      v238 = sub_100096974(a1);
      v239 = (void *)objc_claimAutoreleasedReturnValue(v238);
      if (v239)
      {
        v334[0] = _NSConcreteStackBlock;
        v334[1] = 3221225472;
        v334[2] = sub_10009DEC0;
        v334[3] = &unk_1002E76E0;
        v334[4] = a1;
        v335 = v6;
        objc_msgSend(v239, "enumerateKeysAndObjectsUsingBlock:", v334);

      }
      else
      {
        -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", CFSTR("<ERROR>"), CFSTR("CERTIFICATE-RSA"));
        -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", CFSTR("<ERROR>"), CFSTR("CERTIFICATE-ECC"));
      }
      v240 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary getData:subtag:](a1, "getData:subtag:", 254, 57120));

      if (v240)
      {
        v241 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v240, 1);
        v242 = v241;
        if (v241)
          v243 = v241;
        else
          v243 = v240;
        -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v243, CFSTR("PLATFORM"));

      }
      else
      {
        -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", CFSTR("<ERROR>"), CFSTR("PLATFORM"));
      }

    }
    else
    {
      v240 = v144;
    }
    v244 = (__CFString *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary getData:subtag:](a1, "getData:subtag:", 254, 57121));

    if (v244)
      v245 = v244;
    else
      v245 = CFSTR("<ERROR>");
    -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v245, CFSTR("SERIAL"));
    if (a2 == 1)
    {
      v340 = 0;
      memset(buf, 0, sizeof(buf));
      if (sub_1000974B8(a1, (uint64_t)buf))
      {
        v337[0] = CFSTR("Persistent");
        v330 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)buf));
        v338[0] = v330;
        v337[1] = CFSTR("Clear on Reset");
        v326 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&buf[4]));
        v338[1] = v326;
        v337[2] = CFSTR("Clear on Deselect");
        v324 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&buf[8]));
        v338[2] = v324;
        v337[3] = CFSTR("Available Indicies");
        v321 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&buf[12]));
        v338[3] = v321;
        v337[4] = CFSTR("Total Number of Indicies");
        v319 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&buf[16]));
        v338[4] = v319;
        v337[5] = CFSTR("Available persistent memory excluding pre-allocated indices [System]");
        v317 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&buf[20]));
        v338[5] = v317;
        v337[6] = CFSTR("Available transient memory [eUICC]");
        v316 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&buf[24]));
        v338[6] = v316;
        v337[7] = CFSTR("Reserved clear-on-deselect memory [System]");
        v246 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&buf[28]));
        v338[7] = v246;
        v337[8] = CFSTR("Maximum mapped clear-on-deselect memory [System]");
        v247 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&buf[32]));
        v338[8] = v247;
        v337[9] = CFSTR("OS update transient memory reserved [eSE]");
        v248 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&buf[36]));
        v338[9] = v248;
        v337[10] = CFSTR("OS update persistent memory reserved [eSE]");
        v249 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&buf[40]));
        v338[10] = v249;
        v337[11] = CFSTR("Transient common pool [System]");
        v250 = v50;
        v251 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&buf[44]));
        v338[11] = v251;
        v337[12] = CFSTR("Persistent common pool [System]");
        v252 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v340));
        v338[12] = v252;
        v253 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v338, v337, 13));
        -[NSMutableDictionary setObject:forKey:](v331, "setObject:forKey:", v253, CFSTR("MEMORY"));

        v6 = v331;
        v50 = v250;

        v10 = v332;
      }
      else
      {
        -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", CFSTR("<ERROR>"), CFSTR("MEMORY"));
      }
      v64 = v333;
      v272 = v327;

      goto LABEL_140;
    }
    v254 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary getData:subtag:](a1, "getData:subtag:", 254, 57137));

    if (!v254)
    {
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", CFSTR("<ERROR>"), CFSTR("UPDATE"));
LABEL_139:
      v64 = v333;
      v272 = v327;
LABEL_140:
      v79 = 0;
      *v272 = objc_retainAutorelease(v6);
      goto LABEL_141;
    }
    v255 = v254;
    v256 = objc_opt_new(NSMutableArray);
    v257 = objc_alloc((Class)NSString);
    v258 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "subdataWithRange:", 0, 2));
    v259 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v258, "NF_asHexString"));
    v260 = objc_msgSend(v257, "initWithFormat:", CFSTR("Sequence Number: %@"), v259);
    -[NSMutableArray addObject:](v256, "addObject:", v260);

    if (objc_msgSend(v255, "length") == (id)6)
    {
      v261 = objc_alloc((Class)NSString);
      v262 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "subdataWithRange:", 2, 2));
      v263 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v262, "NF_asHexString"));
      v264 = objc_msgSend(v261, "initWithFormat:", CFSTR("Firmware Version: %@"), v263);
      -[NSMutableArray addObject:](v256, "addObject:", v264);

      v265 = objc_alloc((Class)NSString);
      v266 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "subdataWithRange:", 4, 1));
      v267 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v266, "NF_asHexString"));
      v268 = objc_msgSend(v265, "initWithFormat:", CFSTR("Hardware Version: %@"), v267);
      -[NSMutableArray addObject:](v256, "addObject:", v268);

      v269 = objc_alloc((Class)NSString);
      v270 = v255;
      v271 = 5;
    }
    else
    {
      if (objc_msgSend(v255, "length") != (id)8)
      {
        if (objc_msgSend(v255, "length") != (id)16)
          goto LABEL_138;
        v290 = objc_alloc((Class)NSString);
        v291 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "subdataWithRange:", 2, 2));
        v292 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v291, "NF_asHexString"));
        v293 = objc_msgSend(v290, "initWithFormat:", CFSTR("SVC ROM Version: %@"), v292);
        -[NSMutableArray addObject:](v256, "addObject:", v293);

        v294 = objc_alloc((Class)NSString);
        v295 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "subdataWithRange:", 6, 1));
        v296 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v295, "NF_asHexString"));
        v297 = objc_msgSend(v294, "initWithFormat:", CFSTR("Hardware Version: %@"), v296);
        -[NSMutableArray addObject:](v256, "addObject:", v297);

        v298 = objc_alloc((Class)NSString);
        v299 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "subdataWithRange:", 7, 1));
        v300 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v299, "NF_asHexString"));
        v301 = objc_msgSend(v298, "initWithFormat:", CFSTR("Device Type: %@"), v300);
        -[NSMutableArray addObject:](v256, "addObject:", v301);

        v302 = objc_alloc((Class)NSString);
        v303 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "subdataWithRange:", 8, 3));
        v304 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v303, "NF_asHexString"));
        v305 = objc_msgSend(v302, "initWithFormat:", CFSTR("SVC FLASH Version: %@"), v304);
        -[NSMutableArray addObject:](v256, "addObject:", v305);

        v306 = objc_alloc((Class)NSString);
        v285 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "subdataWithRange:", 11, 3));
        v286 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v285, "NF_asHexString"));
        v287 = objc_msgSend(v306, "initWithFormat:", CFSTR("CL Version: %@"), v286);
LABEL_137:
        v288 = v287;
        -[NSMutableArray addObject:](v256, "addObject:", v287);

LABEL_138:
        -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v256, CFSTR("UPDATE"));

        v10 = v332;
        goto LABEL_139;
      }
      v273 = objc_alloc((Class)NSString);
      v274 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "subdataWithRange:", 2, 2));
      v275 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v274, "NF_asHexString"));
      v276 = objc_msgSend(v273, "initWithFormat:", CFSTR("Firmware Version: %@"), v275);
      -[NSMutableArray addObject:](v256, "addObject:", v276);

      v277 = objc_alloc((Class)NSString);
      v278 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "subdataWithRange:", 4, 2));
      v279 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v278, "NF_asHexString"));
      v280 = objc_msgSend(v277, "initWithFormat:", CFSTR("JCOP Version: %@"), v279);
      -[NSMutableArray addObject:](v256, "addObject:", v280);

      v281 = objc_alloc((Class)NSString);
      v282 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "subdataWithRange:", 6, 1));
      v283 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v282, "NF_asHexString"));
      v284 = objc_msgSend(v281, "initWithFormat:", CFSTR("Hardware Version: %@"), v283);
      -[NSMutableArray addObject:](v256, "addObject:", v284);

      v269 = objc_alloc((Class)NSString);
      v270 = v255;
      v271 = 7;
    }
    v285 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "subdataWithRange:", v271, 1));
    v286 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v285, "NF_asHexString"));
    v287 = objc_msgSend(v269, "initWithFormat:", CFSTR("Device Type: %@"), v286);
    goto LABEL_137;
  }
  v80 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v81 = NFLogGetLogger(v80);
  if (v81)
  {
    v82 = (void (*)(uint64_t, const char *, ...))v81;
    v83 = object_getClass(a1);
    v84 = class_isMetaClass(v83);
    v85 = v10;
    v86 = object_getClassName(a1);
    v87 = sel_getName("dumpRootSecurityDomain:info:");
    v313 = objc_msgSend(v11, "status");
    v308 = v86;
    v88 = 45;
    if (v84)
      v88 = 43;
    v10 = v85;
    v82(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v88, v308, v87, 180, v313);
  }
  v89 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v90 = NFSharedLogGetLogger(v89);
  v91 = objc_claimAutoreleasedReturnValue(v90);
  if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
  {
    v92 = object_getClass(a1);
    if (class_isMetaClass(v92))
      v93 = 43;
    else
      v93 = 45;
    v94 = object_getClassName(a1);
    v95 = sel_getName("dumpRootSecurityDomain:info:");
    v96 = objc_msgSend(v11, "status");
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v93;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = v94;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v95;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = 180;
    *(_WORD *)&buf[34] = 1024;
    *(_DWORD *)&buf[36] = v96;
    _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
  }

  v97 = objc_msgSend(v11, "status");
  v98 = objc_alloc((Class)NSError);
  v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v64 = v333;
  if (v97 == 26277)
  {
    v345 = NSLocalizedDescriptionKey;
    v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Restricted Mode"));
    v346 = v100;
    v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v346, &v345, 1));
    v102 = v98;
    v103 = v99;
    v104 = 24;
  }
  else
  {
    v343 = NSLocalizedDescriptionKey;
    v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v344 = v100;
    v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v344, &v343, 1));
    v102 = v98;
    v103 = v99;
    v104 = 16;
  }
  v79 = objc_msgSend(v102, "initWithDomain:code:userInfo:", v103, v104, v101);

LABEL_142:
  return v79;
}

uint64_t sub_10009D0E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10009D0F0(uint64_t a1)
{

}

void sub_10009D0F8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  NSMutableDictionary *v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void (*v16)(uint64_t, const char *, ...);
  objc_class *v17;
  _BOOL4 v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  const char *v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  _BOOL4 v31;
  const char *v32;
  uint64_t v33;
  id v34;
  NSMutableDictionary *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  objc_class *v41;
  int v42;
  const char *v43;
  const char *v44;
  unsigned int v45;
  unsigned int v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  id v55;
  void *v56;
  uint64_t v57;
  void (*v58)(uint64_t, const char *, ...);
  objc_class *v59;
  _BOOL4 v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  objc_class *v64;
  int v65;
  const char *v66;
  const char *v67;
  void *specific;
  uint64_t Logger;
  void (*v70)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  NSObject *v78;
  objc_class *v79;
  int v80;
  const char *v81;
  const char *v82;
  unsigned int v83;
  NSObject *v84;
  NSObject *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  void (*v89)(uint64_t, const char *, ...);
  objc_class *v90;
  _BOOL4 v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  NSObject *v95;
  objc_class *v96;
  int v97;
  const char *v98;
  const char *v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  uint64_t v104;
  void *v105;
  void *v106;
  void *v107;
  id v108;
  id v109;
  void *v110;
  id v111;
  void *v112;
  uint64_t v113;
  void (*v114)(uint64_t, const char *, ...);
  objc_class *v115;
  _BOOL4 v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  NSObject *v120;
  objc_class *v121;
  int v122;
  const char *v123;
  const char *v124;
  void *v125;
  const char *v126;
  const char *v127;
  const char *v128;
  const char *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  const char *v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  NSObject *v138;
  NSMutableDictionary *v139;
  NSObject *v140;
  NSObject *v141;
  id v142;
  _QWORD v143[5];
  uint8_t buf[8];
  _BYTE v145[36];

  v3 = a2;
  v4 = *(id *)(a1 + 32);
  v5 = v3;
  if (v4)
  {
    v6 = objc_opt_new(NSMutableDictionary);
    v142 = 0;
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "selectByName:error:", v5, &v142));
    v8 = v142;
    if (v7)
    {
      if (-[NSObject status](v7, "status") == 36864)
      {
        v139 = v6;
        v141 = v8;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sendRepeatingExtendedCommandWithClass:instruction:p1:firstP2:nextP2:expectedLength:toOS:error:", 128, 1, 0, 0, 0, 0, 0, &v141));
        v10 = v141;

        if (v9)
        {
          if (objc_msgSend(v9, "status") == 36864)
          {
            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "response"));
            v12 = objc_msgSend(v11, "length");

            if (!v12)
              goto LABEL_55;
            v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "response"));
            -[NSMutableDictionary setValue:forKey:](v139, "setValue:forKey:", v13, CFSTR("FixedBuffer"));
          }
          else
          {
            specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            Logger = NFLogGetLogger(specific);
            if (Logger)
            {
              v70 = (void (*)(uint64_t, const char *, ...))Logger;
              Class = object_getClass(v4);
              isMetaClass = class_isMetaClass(Class);
              ClassName = object_getClassName(v4);
              Name = sel_getName("dumpAppletLogging:info:");
              v136 = objc_msgSend(v9, "status");
              v75 = 45;
              if (isMetaClass)
                v75 = 43;
              v70(3, "%c[%{public}s %{public}s]:%i Failed to query fixed buffer : 0x%04x", v75, ClassName, Name, 1077, v136);
            }
            v76 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v77 = NFSharedLogGetLogger(v76);
            v78 = objc_claimAutoreleasedReturnValue(v77);
            if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
            {
              v79 = object_getClass(v4);
              if (class_isMetaClass(v79))
                v80 = 43;
              else
                v80 = 45;
              v81 = object_getClassName(v4);
              v82 = sel_getName("dumpAppletLogging:info:");
              v83 = objc_msgSend(v9, "status");
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = v80;
              *(_WORD *)v145 = 2082;
              *(_QWORD *)&v145[2] = v81;
              *(_WORD *)&v145[10] = 2082;
              *(_QWORD *)&v145[12] = v82;
              *(_WORD *)&v145[20] = 1024;
              *(_DWORD *)&v145[22] = 1077;
              *(_WORD *)&v145[26] = 1024;
              *(_DWORD *)&v145[28] = v83;
              _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query fixed buffer : 0x%04x", buf, 0x28u);
            }

            if (objc_msgSend(v9, "status") != 27267)
              goto LABEL_55;
            v13 = v10;
            v10 = 0;
          }
        }
        else
        {
          v56 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v57 = NFLogGetLogger(v56);
          if (v57)
          {
            v58 = (void (*)(uint64_t, const char *, ...))v57;
            v59 = object_getClass(v4);
            v60 = class_isMetaClass(v59);
            v127 = object_getClassName(v4);
            v132 = sel_getName("dumpAppletLogging:info:");
            v61 = 45;
            if (v60)
              v61 = 43;
            v58(3, "%c[%{public}s %{public}s]:%i Failed to query : %{public}@", v61, v127, v132, 1075, v10);
          }
          v62 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v63 = NFSharedLogGetLogger(v62);
          v13 = objc_claimAutoreleasedReturnValue(v63);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v64 = object_getClass(v4);
            if (class_isMetaClass(v64))
              v65 = 43;
            else
              v65 = 45;
            v66 = object_getClassName(v4);
            v67 = sel_getName("dumpAppletLogging:info:");
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)&buf[4] = v65;
            *(_WORD *)v145 = 2082;
            *(_QWORD *)&v145[2] = v66;
            *(_WORD *)&v145[10] = 2082;
            *(_QWORD *)&v145[12] = v67;
            *(_WORD *)&v145[20] = 1024;
            *(_DWORD *)&v145[22] = 1075;
            *(_WORD *)&v145[26] = 2114;
            *(_QWORD *)&v145[28] = v10;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query : %{public}@", buf, 0x2Cu);
          }
        }

LABEL_55:
        v140 = v10;
        v84 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sendRepeatingExtendedCommandWithClass:instruction:p1:firstP2:nextP2:expectedLength:toOS:error:", 128, 3, 0, 0, 0, 0, 0, &v140));
        v8 = v140;

        v85 = objc_claimAutoreleasedReturnValue(-[NSObject response](v84, "response"));
        v7 = v85;
        if (!v85 || v8)
        {
          v87 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v88 = NFLogGetLogger(v87);
          if (v88)
          {
            v89 = (void (*)(uint64_t, const char *, ...))v88;
            v90 = object_getClass(v4);
            v91 = class_isMetaClass(v90);
            v128 = object_getClassName(v4);
            v133 = sel_getName("dumpAppletLogging:info:");
            v92 = 45;
            if (v91)
              v92 = 43;
            v89(3, "%c[%{public}s %{public}s]:%i Failed to query : %{public}@", v92, v128, v133, 1097, v8);
          }
          v93 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v94 = NFSharedLogGetLogger(v93);
          v95 = objc_claimAutoreleasedReturnValue(v94);
          v6 = v139;
          if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
          {
            v96 = object_getClass(v4);
            if (class_isMetaClass(v96))
              v97 = 43;
            else
              v97 = 45;
            v98 = object_getClassName(v4);
            v99 = sel_getName("dumpAppletLogging:info:");
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)&buf[4] = v97;
            *(_WORD *)v145 = 2082;
            *(_QWORD *)&v145[2] = v98;
            *(_WORD *)&v145[10] = 2082;
            *(_QWORD *)&v145[12] = v99;
            *(_WORD *)&v145[20] = 1024;
            *(_DWORD *)&v145[22] = 1097;
            *(_WORD *)&v145[26] = 2114;
            *(_QWORD *)&v145[28] = v8;
            _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query : %{public}@", buf, 0x2Cu);
          }

          v100 = objc_alloc((Class)NSError);
          v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          if (v8)
          {
            v137 = v100;
            v138 = v84;
            v102 = -[NSObject code](v8, "code");
            v143[0] = NSLocalizedDescriptionKey;
            v103 = v101;
            if ((uint64_t)-[NSObject code](v8, "code") > 70)
              v104 = 71;
            else
              v104 = (uint64_t)-[NSObject code](v8, "code");
            v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E7498[v104]));
            *(_QWORD *)buf = v107;
            *(_QWORD *)v145 = v8;
            v143[1] = NSUnderlyingErrorKey;
            v143[2] = CFSTR("Line");
            *(_QWORD *)&v145[8] = &off_1002FE700;
            v143[3] = CFSTR("Method");
            v108 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("dumpAppletLogging:info:"));
            *(_QWORD *)&v145[16] = v108;
            v143[4] = NSDebugDescriptionErrorKey;
            v109 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("dumpAppletLogging:info:"), 1098);
            *(_QWORD *)&v145[24] = v109;
            v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, v143, 5));
            v54 = objc_msgSend(v137, "initWithDomain:code:userInfo:", v103, v102, v110);

            v4 = 0;
            v7 = v138;
            v6 = v139;
            goto LABEL_76;
          }
          v143[0] = NSLocalizedDescriptionKey;
          v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
          *(_QWORD *)buf = v105;
          v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, v143, 1));
          v54 = objc_msgSend(v100, "initWithDomain:code:userInfo:", v101, 16, v106);

          v4 = 0;
        }
        else
        {
          v6 = v139;
          if (-[NSObject length](v85, "length"))
          {
            v86 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject response](v84, "response"));
            -[NSMutableDictionary setValue:forKey:](v139, "setValue:forKey:", v86, CFSTR("CyclicBuffer"));

          }
          v4 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithDictionary:", v139);
          v54 = 0;
        }
        v8 = v84;
LABEL_76:

        v8 = v54;
        goto LABEL_77;
      }
      v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v28 = NFLogGetLogger(v27);
      if (v28)
      {
        v29 = (void (*)(uint64_t, const char *, ...))v28;
        v30 = object_getClass(v4);
        v31 = class_isMetaClass(v30);
        v32 = object_getClassName(v4);
        v33 = a1;
        v34 = v5;
        v35 = v6;
        v36 = sel_getName("dumpAppletLogging:info:");
        v135 = -[NSObject status](v7, "status");
        v131 = v36;
        v6 = v35;
        v5 = v34;
        a1 = v33;
        v37 = 45;
        if (v31)
          v37 = 43;
        v29(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v37, v32, v131, 1057, v135);
      }
      v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v39 = NFSharedLogGetLogger(v38);
      v40 = objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        v41 = object_getClass(v4);
        if (class_isMetaClass(v41))
          v42 = 43;
        else
          v42 = 45;
        v43 = object_getClassName(v4);
        v44 = sel_getName("dumpAppletLogging:info:");
        v45 = -[NSObject status](v7, "status");
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v42;
        *(_WORD *)v145 = 2082;
        *(_QWORD *)&v145[2] = v43;
        *(_WORD *)&v145[10] = 2082;
        *(_QWORD *)&v145[12] = v44;
        *(_WORD *)&v145[20] = 1024;
        *(_DWORD *)&v145[22] = 1057;
        *(_WORD *)&v145[26] = 1024;
        *(_DWORD *)&v145[28] = v45;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
      }

      v46 = -[NSObject status](v7, "status");
      v47 = objc_alloc((Class)NSError);
      v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v143[0] = NSLocalizedDescriptionKey;
      if (v46 == 26277)
      {
        v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Restricted Mode"));
        *(_QWORD *)buf = v49;
        v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, v143, 1));
        v51 = v47;
        v52 = v48;
        v53 = 24;
      }
      else
      {
        v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        *(_QWORD *)buf = v49;
        v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, v143, 1));
        v51 = v47;
        v52 = v48;
        v53 = 16;
      }
      v54 = objc_msgSend(v51, "initWithDomain:code:userInfo:", v52, v53, v50);

    }
    else
    {
      v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v15 = NFLogGetLogger(v14);
      if (v15)
      {
        v16 = (void (*)(uint64_t, const char *, ...))v15;
        v17 = object_getClass(v4);
        v18 = class_isMetaClass(v17);
        v126 = object_getClassName(v4);
        v130 = sel_getName("dumpAppletLogging:info:");
        v19 = 45;
        if (v18)
          v19 = 43;
        v16(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v19, v126, v130, 1053, v8);
      }
      v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v21 = NFSharedLogGetLogger(v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = object_getClass(v4);
        if (class_isMetaClass(v23))
          v24 = 43;
        else
          v24 = 45;
        v25 = object_getClassName(v4);
        v26 = sel_getName("dumpAppletLogging:info:");
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v24;
        *(_WORD *)v145 = 2082;
        *(_QWORD *)&v145[2] = v25;
        *(_WORD *)&v145[10] = 2082;
        *(_QWORD *)&v145[12] = v26;
        *(_WORD *)&v145[20] = 1024;
        *(_DWORD *)&v145[22] = 1053;
        *(_WORD *)&v145[26] = 2114;
        *(_QWORD *)&v145[28] = v8;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
      }

      if (v8)
      {
        v4 = 0;
LABEL_77:

        goto LABEL_78;
      }
      v55 = objc_alloc((Class)NSError);
      v8 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v143[0] = NSLocalizedDescriptionKey;
      v7 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      *(_QWORD *)buf = v7;
      v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, v143, 1));
      v54 = objc_msgSend(v55, "initWithDomain:code:userInfo:", v8, 16, v48);
    }

    v4 = 0;
    goto LABEL_76;
  }
  v8 = 0;
LABEL_78:

  v111 = v4;
  if (v8)
  {
    v112 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v113 = NFLogGetLogger(v112);
    if (v113)
    {
      v114 = (void (*)(uint64_t, const char *, ...))v113;
      v115 = object_getClass(*(id *)(a1 + 32));
      v116 = class_isMetaClass(v115);
      v129 = object_getClassName(*(id *)(a1 + 32));
      v134 = sel_getName(*(SEL *)(a1 + 48));
      v117 = 45;
      if (v116)
        v117 = 43;
      v114(3, "%c[%{public}s %{public}s]:%i Failed to get data : %{public}@", v117, v129, v134, 116, v8);
    }
    v118 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v119 = NFSharedLogGetLogger(v118);
    v120 = objc_claimAutoreleasedReturnValue(v119);
    if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
    {
      v121 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v121))
        v122 = 43;
      else
        v122 = 45;
      v123 = object_getClassName(*(id *)(a1 + 32));
      v124 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v122;
      *(_WORD *)v145 = 2082;
      *(_QWORD *)&v145[2] = v123;
      *(_WORD *)&v145[10] = 2082;
      *(_QWORD *)&v145[12] = v124;
      *(_WORD *)&v145[20] = 1024;
      *(_DWORD *)&v145[22] = 116;
      *(_WORD *)&v145[26] = 2114;
      *(_QWORD *)&v145[28] = v8;
      _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get data : %{public}@", buf, 0x2Cu);
    }
  }
  else
  {
    v125 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v120 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "NF_asHexString"));
    objc_msgSend(v125, "setValue:forKey:", v111, v120);
  }

}

void sub_10009DEC0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  NSMutableDictionary *v15;
  void *v16;
  const __CFString *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  const __CFString *v23;
  void *v24;
  id v25;
  NSMutableDictionary *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];

  v4 = *(_QWORD *)(a1 + 32);
  v25 = a2;
  v5 = a3;
  v24 = v5;
  if (v4)
  {
    v6 = v5;
    v27 = objc_opt_new(NSMutableDictionary);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v6));
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (!v8)
      goto LABEL_38;
    v9 = v8;
    v10 = *(_QWORD *)v29;
    while (1)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v29 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v11);
        v13 = objc_msgSend(v12, "tag");
        if (v13 <= 24351)
        {
          if (v13 <= 82)
          {
            if (v13 == 66)
            {
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "value"));
              v15 = v27;
              v16 = v14;
              v17 = CFSTR("CA Identifier");
              goto LABEL_33;
            }
            if (v13 == 69)
            {
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "value"));
              v15 = v27;
              v16 = v14;
              v17 = CFSTR("CA Security Domain Image Number");
              goto LABEL_33;
            }
          }
          else
          {
            switch(v13)
            {
              case 83:
                v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "value"));
                v15 = v27;
                v16 = v14;
                v17 = CFSTR("Discretionary Data");
                goto LABEL_33;
              case 147:
                v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "value"));
                v15 = v27;
                v16 = v14;
                v17 = CFSTR("Certificate Serial Number");
                goto LABEL_33;
              case 149:
                v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "value"));
                v15 = v27;
                v16 = v14;
                v17 = CFSTR("Key Usage");
                goto LABEL_33;
            }
          }
          goto LABEL_36;
        }
        if (v13 <= 24374)
        {
          switch(v13)
          {
            case 24352:
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "value"));
              v15 = v27;
              v16 = v14;
              v17 = CFSTR("Subject Identifier");
              goto LABEL_33;
            case 24356:
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "value"));
              v15 = v27;
              v16 = v14;
              v17 = CFSTR("Expiration Date");
              goto LABEL_33;
            case 24357:
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "value"));
              v15 = v27;
              v16 = v14;
              v17 = CFSTR("Effective Date");
LABEL_33:
              -[NSMutableDictionary setObject:forKey:](v15, "setObject:forKey:", v16, v17);
              goto LABEL_34;
          }
LABEL_36:
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "value"));
          v20 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("0x%02x"), objc_msgSend(v12, "tag"));
          -[NSMutableDictionary setObject:forKey:](v27, "setObject:forKey:", v14, v20);

          goto LABEL_34;
        }
        if (v13 == 24375)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "value"));
          v15 = v27;
          v16 = v14;
          v17 = CFSTR("Signature");
          goto LABEL_33;
        }
        if (v13 == 24376)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "value"));
          v15 = v27;
          v16 = v14;
          v17 = CFSTR("Public Key Modulus Remainder");
          goto LABEL_33;
        }
        if (v13 != 32585)
          goto LABEL_36;
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "childWithTag:", 134));
        v14 = v18;
        if (v18)
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "value"));
          -[NSMutableDictionary setObject:forKey:](v27, "setObject:forKey:", v19, CFSTR("Public Key"));

        }
LABEL_34:

        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v21 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      v9 = v21;
      if (!v21)
      {
LABEL_38:

        goto LABEL_39;
      }
    }
  }
  v27 = 0;
LABEL_39:

  v22 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("CERTIFICATE-%@"), v25);
  if (v27)
    v23 = (const __CFString *)v27;
  else
    v23 = CFSTR("<ERROR>");
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v23, v22);

}

NSString *sub_10009E300(void *a1, uint64_t a2)
{
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  id v15;
  void *v16;
  void *v17;
  void **v18;
  NSErrorUserInfoKey *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v30;
  void *v31;
  NSString *v32;
  void *v33;
  NSString *v34;
  void *v35;
  uint64_t v36;
  void (*v37)(uint64_t, const char *, ...);
  objc_class *v38;
  _BOOL4 v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  objc_class *v45;
  int v46;
  const char *v47;
  const char *v48;
  void *v49;
  uint64_t v50;
  void (*v51)(uint64_t, const char *, ...);
  objc_class *v52;
  _BOOL4 v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  objc_class *v60;
  int v61;
  const char *v62;
  const char *v63;
  unsigned int v64;
  NSString *v65;
  void *v66;
  uint64_t v67;
  void (*v68)(uint64_t, const char *, ...);
  objc_class *v69;
  _BOOL4 v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  objc_class *v75;
  int v76;
  void *v77;
  id v78;
  void *v79;
  uint64_t v80;
  void (*v81)(uint64_t, const char *, ...);
  objc_class *v82;
  _BOOL4 v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  NSObject *v87;
  objc_class *v88;
  int v89;
  const char *v90;
  const char *v91;
  NSString *v92;
  void *v93;
  uint64_t v94;
  void (*v95)(uint64_t, const char *, ...);
  objc_class *v96;
  _BOOL4 v97;
  const char *v98;
  const char *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  NSObject *v103;
  objc_class *v104;
  int v105;
  const char *v106;
  const char *v107;
  unsigned int v108;
  unsigned int v109;
  id v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  id v117;
  void *v118;
  void *v119;
  NSErrorUserInfoKey *v120;
  void *v121;
  uint64_t v122;
  void (*v123)(uint64_t, const char *, ...);
  objc_class *v124;
  _BOOL4 v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  NSObject *v129;
  objc_class *v130;
  int v131;
  const char *v132;
  const char *v133;
  void *v134;
  const char *v135;
  const char *v136;
  const char *v137;
  const char *Name;
  const char *v139;
  const char *v140;
  const char *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  id v146;
  id v147;
  id v148;
  _QWORD v150[5];
  id v151;
  NSErrorUserInfoKey v152;
  void *v153;
  NSErrorUserInfoKey v154;
  void *v155;
  NSErrorUserInfoKey v156;
  NSErrorUserInfoKey v157;
  uint8_t buf[8];
  __int16 v159;
  const char *v160;
  __int16 v161;
  const char *v162;
  __int16 v163;
  int v164;
  __int16 v165;
  NSString *v166;

  if (!a1)
    return (NSString *)0;
  if ((a2 - 1) < 3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("clearLogs:");
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v5(3, "%c[%{public}s %{public}s]:%i Unsupported domain", v9, ClassName, Name, 404);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(a1);
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      v159 = 2082;
      v160 = object_getClassName(a1);
      v161 = 2082;
      v162 = sel_getName("clearLogs:");
      v163 = 1024;
      v164 = 404;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unsupported domain", buf, 0x22u);
    }

    v15 = objc_alloc((Class)NSError);
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v154 = NSLocalizedDescriptionKey;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v155 = v17;
    v18 = &v155;
    v19 = &v154;
LABEL_53:
    v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v19, 1));
    v78 = objc_msgSend(v15, "initWithDomain:code:userInfo:", v16, 10, v77);

    return (NSString *)v78;
  }
  if ((_DWORD)a2 != 5)
  {
    if ((_DWORD)a2 != 4)
    {
      v66 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v67 = NFLogGetLogger(v66);
      if (v67)
      {
        v68 = (void (*)(uint64_t, const char *, ...))v67;
        v69 = object_getClass(a1);
        v70 = class_isMetaClass(v69);
        v135 = object_getClassName(a1);
        v140 = sel_getName("clearLogs:");
        v71 = 45;
        if (v70)
          v71 = 43;
        v68(3, "%c[%{public}s %{public}s]:%i Unknown app id: %d", v71, v135, v140, 408, a2);
      }
      v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v73 = NFSharedLogGetLogger(v72);
      v74 = objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        v75 = object_getClass(a1);
        if (class_isMetaClass(v75))
          v76 = 43;
        else
          v76 = 45;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v76;
        v159 = 2082;
        v160 = object_getClassName(a1);
        v161 = 2082;
        v162 = sel_getName("clearLogs:");
        v163 = 1024;
        v164 = 408;
        v165 = 1024;
        LODWORD(v166) = a2;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown app id: %d", buf, 0x28u);
      }

      v15 = objc_alloc((Class)NSError);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v152 = NSLocalizedDescriptionKey;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v153 = v17;
      v18 = &v153;
      v19 = &v152;
      goto LABEL_53;
    }
    v147 = objc_alloc((Class)NSArray);
    v146 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B16, 10);
    v20 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B20, 10);
    v21 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B2A, 10);
    v22 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B34, 10);
    v23 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B3E, 10);
    v24 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B48, 10);
    v145 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B52, 10);
    v25 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B5C, 10);
    v26 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B66, 10);
    v27 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B70, 10);
    v28 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B7A, 10);
    v148 = objc_msgSend(v147, "initWithObjects:", v146, v20, v21, v22, v23, v24, v145, v25, v26, v27, v28, 0);

    v150[0] = _NSConcreteStackBlock;
    v150[1] = 3221225472;
    v150[2] = sub_10009F228;
    v150[3] = &unk_1002E7708;
    v150[4] = a1;
    objc_msgSend(v148, "enumerateObjectsUsingBlock:", v150);

    return (NSString *)0;
  }
  v30 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", "FACTORYTESTAPP", 14);
  v151 = 0;
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "selectByName:error:", v30, &v151));
  v32 = (NSString *)v151;

  if (v31)
  {
    if (objc_msgSend(v31, "status") != 36864)
    {
      v93 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v94 = NFLogGetLogger(v93);
      if (v94)
      {
        v95 = (void (*)(uint64_t, const char *, ...))v94;
        v96 = object_getClass(a1);
        v97 = class_isMetaClass(v96);
        v98 = object_getClassName(a1);
        v99 = sel_getName("clearFTALogging");
        v144 = objc_msgSend(v31, "status");
        v100 = 45;
        if (v97)
          v100 = 43;
        v95(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v100, v98, v99, 1165, v144);
      }
      v101 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v102 = NFSharedLogGetLogger(v101);
      v103 = objc_claimAutoreleasedReturnValue(v102);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        v104 = object_getClass(a1);
        if (class_isMetaClass(v104))
          v105 = 43;
        else
          v105 = 45;
        v106 = object_getClassName(a1);
        v107 = sel_getName("clearFTALogging");
        v108 = objc_msgSend(v31, "status");
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v105;
        v159 = 2082;
        v160 = v106;
        v161 = 2082;
        v162 = v107;
        v163 = 1024;
        v164 = 1165;
        v165 = 1024;
        LODWORD(v166) = v108;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
      }

      v109 = objc_msgSend(v31, "status");
      v110 = objc_alloc((Class)NSError);
      v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v157 = NSLocalizedDescriptionKey;
      if (v109 == 26277)
      {
        v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Restricted Mode"));
        *(_QWORD *)buf = v112;
        v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v157, 1));
        v114 = v110;
        v115 = v111;
        v116 = 24;
      }
      else
      {
        v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        *(_QWORD *)buf = v112;
        v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v157, 1));
        v114 = v110;
        v115 = v111;
        v116 = 16;
      }
      v65 = (NSString *)objc_msgSend(v114, "initWithDomain:code:userInfo:", v115, v116, v113);

      v33 = v31;
      v34 = v32;
      goto LABEL_93;
    }
    v157 = v32;
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 253, 2, 0, 0, 0, 0, &v157));
    v34 = v157;

    if (v33)
    {
      if (objc_msgSend(v33, "status") == 27013)
      {
        v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v36 = NFLogGetLogger(v35);
        if (v36)
        {
          v37 = (void (*)(uint64_t, const char *, ...))v36;
          v38 = object_getClass(a1);
          v39 = class_isMetaClass(v38);
          v40 = object_getClassName(a1);
          v139 = sel_getName("clearFTALogging");
          v41 = 45;
          if (v39)
            v41 = 43;
          v37(6, "%c[%{public}s %{public}s]:%i No logging data", v41, v40, v139, 1179);
        }
        v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v43 = NFSharedLogGetLogger(v42);
        v44 = objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          v45 = object_getClass(a1);
          if (class_isMetaClass(v45))
            v46 = 43;
          else
            v46 = 45;
          v47 = object_getClassName(a1);
          v48 = sel_getName("clearFTALogging");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v46;
          v159 = 2082;
          v160 = v47;
          v161 = 2082;
          v162 = v48;
          v163 = 1024;
          v164 = 1179;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No logging data", buf, 0x22u);
        }

      }
      if (objc_msgSend(v33, "status") != 36864)
      {
        v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v50 = NFLogGetLogger(v49);
        if (v50)
        {
          v51 = (void (*)(uint64_t, const char *, ...))v50;
          v52 = object_getClass(a1);
          v53 = class_isMetaClass(v52);
          v54 = object_getClassName(a1);
          v55 = sel_getName("clearFTALogging");
          v143 = objc_msgSend(v33, "status");
          v56 = 45;
          if (v53)
            v56 = 43;
          v51(3, "%c[%{public}s %{public}s]:%i Failed to send command: 0x%04x", v56, v54, v55, 1182, v143);
        }
        v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v58 = NFSharedLogGetLogger(v57);
        v59 = objc_claimAutoreleasedReturnValue(v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          v60 = object_getClass(a1);
          if (class_isMetaClass(v60))
            v61 = 43;
          else
            v61 = 45;
          v62 = object_getClassName(a1);
          v63 = sel_getName("clearFTALogging");
          v64 = objc_msgSend(v33, "status");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v61;
          v159 = 2082;
          v160 = v62;
          v161 = 2082;
          v162 = v63;
          v163 = 1024;
          v164 = 1182;
          v165 = 1024;
          LODWORD(v166) = v64;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send command: 0x%04x", buf, 0x28u);
        }

      }
      v65 = 0;
      goto LABEL_93;
    }
    v121 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v122 = NFLogGetLogger(v121);
    if (v122)
    {
      v123 = (void (*)(uint64_t, const char *, ...))v122;
      v124 = object_getClass(a1);
      v125 = class_isMetaClass(v124);
      v137 = object_getClassName(a1);
      v142 = sel_getName("clearFTALogging");
      v126 = 45;
      if (v125)
        v126 = 43;
      v123(3, "%c[%{public}s %{public}s]:%i Failed to send command : %{public}@", v126, v137, v142, 1175, v34);
    }
    v127 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v128 = NFSharedLogGetLogger(v127);
    v129 = objc_claimAutoreleasedReturnValue(v128);
    if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
    {
      v130 = object_getClass(a1);
      if (class_isMetaClass(v130))
        v131 = 43;
      else
        v131 = 45;
      v132 = object_getClassName(a1);
      v133 = sel_getName("clearFTALogging");
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v131;
      v159 = 2082;
      v160 = v132;
      v161 = 2082;
      v162 = v133;
      v163 = 1024;
      v164 = 1175;
      v165 = 2114;
      v166 = v34;
      _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send command : %{public}@", buf, 0x2Cu);
    }

    if (v34)
    {
      v92 = v34;
      goto LABEL_90;
    }
    v117 = objc_alloc((Class)NSError);
    v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v156 = NSLocalizedDescriptionKey;
    v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    *(_QWORD *)buf = v119;
    v120 = &v156;
LABEL_92:
    v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, v120, 1));
    v65 = (NSString *)objc_msgSend(v117, "initWithDomain:code:userInfo:", v118, 16, v134);

    v33 = 0;
    v34 = 0;
    goto LABEL_93;
  }
  v79 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v80 = NFLogGetLogger(v79);
  if (v80)
  {
    v81 = (void (*)(uint64_t, const char *, ...))v80;
    v82 = object_getClass(a1);
    v83 = class_isMetaClass(v82);
    v136 = object_getClassName(a1);
    v141 = sel_getName("clearFTALogging");
    v84 = 45;
    if (v83)
      v84 = 43;
    v81(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v84, v136, v141, 1161, v32);
  }
  v85 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v86 = NFSharedLogGetLogger(v85);
  v87 = objc_claimAutoreleasedReturnValue(v86);
  if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
  {
    v88 = object_getClass(a1);
    if (class_isMetaClass(v88))
      v89 = 43;
    else
      v89 = 45;
    v90 = object_getClassName(a1);
    v91 = sel_getName("clearFTALogging");
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v89;
    v159 = 2082;
    v160 = v90;
    v161 = 2082;
    v162 = v91;
    v163 = 1024;
    v164 = 1161;
    v165 = 2114;
    v166 = v32;
    _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
  }

  if (!v32)
  {
    v117 = objc_alloc((Class)NSError);
    v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v157 = NSLocalizedDescriptionKey;
    v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    *(_QWORD *)buf = v119;
    v120 = &v157;
    goto LABEL_92;
  }
  v92 = v32;
LABEL_90:
  v34 = v92;
  v33 = 0;
  v65 = v92;
LABEL_93:

  return v65;
}

void sub_10009F228(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  NSString *v4;
  void *v5;
  NSString *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *v10;
  _BOOL4 v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *v26;
  _BOOL4 v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  void (*v39)(uint64_t, const char *, ...);
  objc_class *v40;
  _BOOL4 v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  objc_class *v47;
  int v48;
  const char *v49;
  const char *v50;
  void *v51;
  uint64_t v52;
  void (*v53)(uint64_t, const char *, ...);
  objc_class *v54;
  _BOOL4 v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  objc_class *v60;
  int v61;
  const char *v62;
  const char *v63;
  NSString *v64;
  void *specific;
  uint64_t Logger;
  void (*v67)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  NSObject *v75;
  objc_class *v76;
  int v77;
  const char *v78;
  const char *v79;
  unsigned int v80;
  unsigned int v81;
  id v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  NSString *v89;
  id v90;
  void *v91;
  void *v92;
  NSErrorUserInfoKey *v93;
  void *v94;
  uint64_t v95;
  void (*v96)(uint64_t, const char *, ...);
  objc_class *v97;
  _BOOL4 v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  NSObject *v102;
  objc_class *v103;
  int v104;
  const char *v105;
  const char *v106;
  objc_class *v107;
  _BOOL4 v108;
  const char *v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  NSObject *v114;
  objc_class *v115;
  int v116;
  const char *v117;
  const char *v118;
  unsigned int v119;
  void *v120;
  uint64_t v121;
  const char *v122;
  const char *v123;
  const char *v124;
  const char *v125;
  const char *v126;
  const char *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  NSErrorUserInfoKey v133;
  NSErrorUserInfoKey v134;
  uint8_t buf[8];
  __int16 v136;
  const char *v137;
  __int16 v138;
  const char *v139;
  __int16 v140;
  int v141;
  __int16 v142;
  NSString *v143;

  v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    v89 = 0;
    goto LABEL_90;
  }
  v132 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "selectByName:error:", a2, &v132));
  v4 = (NSString *)v132;
  if (v3)
  {
    if (objc_msgSend(v3, "status") != 36864)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v67 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v2);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v2);
        Name = sel_getName("clearFixedAndCyclicLogging:");
        v130 = objc_msgSend(v3, "status");
        v72 = 45;
        if (isMetaClass)
          v72 = 43;
        v67(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v72, ClassName, Name, 1200, v130);
      }
      v73 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v74 = NFSharedLogGetLogger(v73);
      v75 = objc_claimAutoreleasedReturnValue(v74);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        v76 = object_getClass(v2);
        if (class_isMetaClass(v76))
          v77 = 43;
        else
          v77 = 45;
        v78 = object_getClassName(v2);
        v79 = sel_getName("clearFixedAndCyclicLogging:");
        v80 = objc_msgSend(v3, "status");
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v77;
        v136 = 2082;
        v137 = v78;
        v138 = 2082;
        v139 = v79;
        v140 = 1024;
        v141 = 1200;
        v142 = 1024;
        LODWORD(v143) = v80;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
      }

      v81 = objc_msgSend(v3, "status");
      v82 = objc_alloc((Class)NSError);
      v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v134 = NSLocalizedDescriptionKey;
      if (v81 == 26277)
      {
        v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Restricted Mode"));
        *(_QWORD *)buf = v84;
        v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v134, 1));
        v86 = v82;
        v87 = v83;
        v88 = 24;
      }
      else
      {
        v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        *(_QWORD *)buf = v84;
        v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v134, 1));
        v86 = v82;
        v87 = v83;
        v88 = 16;
      }
      v89 = (NSString *)objc_msgSend(v86, "initWithDomain:code:userInfo:", v87, v88, v85);

      goto LABEL_89;
    }
    v134 = v4;
    LOBYTE(v121) = 1;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:useExtendedLength:error:", 128, 1, 1, 0, 0, 0, 0, v121, &v134));
    v6 = v134;

    if (v5)
    {
      if (objc_msgSend(v5, "status") != 36864)
      {
        v7 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v8 = NFLogGetLogger(v7);
        if (v8)
        {
          v9 = (void (*)(uint64_t, const char *, ...))v8;
          v10 = object_getClass(v2);
          v11 = class_isMetaClass(v10);
          v12 = object_getClassName(v2);
          v13 = sel_getName("clearFixedAndCyclicLogging:");
          v129 = objc_msgSend(v5, "status");
          v14 = 45;
          if (v11)
            v14 = 43;
          v9(3, "%c[%{public}s %{public}s]:%i Failed to clear fixed buffer : 0x%04x", v14, v12, v13, 1222, v129);
        }
        v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v16 = NFSharedLogGetLogger(v15);
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v18 = object_getClass(v2);
          if (class_isMetaClass(v18))
            v19 = 43;
          else
            v19 = 45;
          v20 = object_getClassName(v2);
          v21 = sel_getName("clearFixedAndCyclicLogging:");
          v22 = objc_msgSend(v5, "status");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v19;
          v136 = 2082;
          v137 = v20;
          v138 = 2082;
          v139 = v21;
          v140 = 1024;
          v141 = 1222;
          v142 = 1024;
          LODWORD(v143) = v22;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to clear fixed buffer : 0x%04x", buf, 0x28u);
        }

      }
      v133 = v6;
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 4, 0, 0, 0, 0, 0, &v133));
      v4 = v133;

      if (!v3)
      {
        v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v24 = NFLogGetLogger(v23);
        if (v24)
        {
          v25 = (void (*)(uint64_t, const char *, ...))v24;
          v26 = object_getClass(v2);
          v27 = class_isMetaClass(v26);
          v122 = object_getClassName(v2);
          v125 = sel_getName("clearFixedAndCyclicLogging:");
          v28 = 45;
          if (v27)
            v28 = 43;
          v25(3, "%c[%{public}s %{public}s]:%i Failed to clear : %{public}@", v28, v122, v125, 1237, v4);
        }
        v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v30 = NFSharedLogGetLogger(v29);
        v31 = objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          v32 = object_getClass(v2);
          if (class_isMetaClass(v32))
            v33 = 43;
          else
            v33 = 45;
          v34 = object_getClassName(v2);
          v35 = sel_getName("clearFixedAndCyclicLogging:");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v33;
          v136 = 2082;
          v137 = v34;
          v138 = 2082;
          v139 = v35;
          v140 = 1024;
          v141 = 1237;
          v142 = 2114;
          v143 = v4;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to clear : %{public}@", buf, 0x2Cu);
        }

      }
      if (objc_msgSend(v3, "status") != 36864)
      {
        v36 = objc_msgSend(v3, "status");
        v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v38 = NFLogGetLogger(v37);
        v39 = (void (*)(uint64_t, const char *, ...))v38;
        if (v36 == 27267)
        {
          if (v38)
          {
            v40 = object_getClass(v2);
            v41 = class_isMetaClass(v40);
            v42 = object_getClassName(v2);
            v126 = sel_getName("clearFixedAndCyclicLogging:");
            v43 = 45;
            if (v41)
              v43 = 43;
            v39(6, "%c[%{public}s %{public}s]:%i No cyclic buffer", v43, v42, v126, 1241);
          }
          v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v45 = NFSharedLogGetLogger(v44);
          v46 = objc_claimAutoreleasedReturnValue(v45);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            v47 = object_getClass(v2);
            if (class_isMetaClass(v47))
              v48 = 43;
            else
              v48 = 45;
            v49 = object_getClassName(v2);
            v50 = sel_getName("clearFixedAndCyclicLogging:");
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v48;
            v136 = 2082;
            v137 = v49;
            v138 = 2082;
            v139 = v50;
            v140 = 1024;
            v141 = 1241;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No cyclic buffer", buf, 0x22u);
          }

          v4 = 0;
        }
        else
        {
          if (v38)
          {
            v107 = object_getClass(v2);
            v108 = class_isMetaClass(v107);
            v109 = object_getClassName(v2);
            v110 = sel_getName("clearFixedAndCyclicLogging:");
            v131 = objc_msgSend(v3, "status");
            v111 = 45;
            if (v108)
              v111 = 43;
            v39(3, "%c[%{public}s %{public}s]:%i Failed to clear cyclic buffer : 0x%04x", v111, v109, v110, 1244, v131);
          }
          v112 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v113 = NFSharedLogGetLogger(v112);
          v114 = objc_claimAutoreleasedReturnValue(v113);
          if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
          {
            v115 = object_getClass(v2);
            if (class_isMetaClass(v115))
              v116 = 43;
            else
              v116 = 45;
            v117 = object_getClassName(v2);
            v118 = sel_getName("clearFixedAndCyclicLogging:");
            v119 = objc_msgSend(v3, "status");
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)&buf[4] = v116;
            v136 = 2082;
            v137 = v117;
            v138 = 2082;
            v139 = v118;
            v140 = 1024;
            v141 = 1244;
            v142 = 1024;
            LODWORD(v143) = v119;
            _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to clear cyclic buffer : 0x%04x", buf, 0x28u);
          }

        }
      }
      v89 = 0;
      goto LABEL_89;
    }
    v94 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v95 = NFLogGetLogger(v94);
    if (v95)
    {
      v96 = (void (*)(uint64_t, const char *, ...))v95;
      v97 = object_getClass(v2);
      v98 = class_isMetaClass(v97);
      v124 = object_getClassName(v2);
      v128 = sel_getName("clearFixedAndCyclicLogging:");
      v99 = 45;
      if (v98)
        v99 = 43;
      v96(3, "%c[%{public}s %{public}s]:%i Failed to query : %{public}@", v99, v124, v128, 1218, v6);
    }
    v100 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v101 = NFSharedLogGetLogger(v100);
    v102 = objc_claimAutoreleasedReturnValue(v101);
    if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
    {
      v103 = object_getClass(v2);
      if (class_isMetaClass(v103))
        v104 = 43;
      else
        v104 = 45;
      v105 = object_getClassName(v2);
      v106 = sel_getName("clearFixedAndCyclicLogging:");
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v104;
      v136 = 2082;
      v137 = v105;
      v138 = 2082;
      v139 = v106;
      v140 = 1024;
      v141 = 1218;
      v142 = 2114;
      v143 = v6;
      _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query : %{public}@", buf, 0x2Cu);
    }

    if (v6)
    {
      v64 = v6;
      goto LABEL_75;
    }
    v90 = objc_alloc((Class)NSError);
    v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v133 = NSLocalizedDescriptionKey;
    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    *(_QWORD *)buf = v92;
    v93 = &v133;
LABEL_88:
    v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, v93, 1));
    v89 = (NSString *)objc_msgSend(v90, "initWithDomain:code:userInfo:", v91, 16, v120);

    v3 = 0;
    v4 = 0;
    goto LABEL_89;
  }
  v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v52 = NFLogGetLogger(v51);
  if (v52)
  {
    v53 = (void (*)(uint64_t, const char *, ...))v52;
    v54 = object_getClass(v2);
    v55 = class_isMetaClass(v54);
    v123 = object_getClassName(v2);
    v127 = sel_getName("clearFixedAndCyclicLogging:");
    v56 = 45;
    if (v55)
      v56 = 43;
    v53(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v56, v123, v127, 1196, v4);
  }
  v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v58 = NFSharedLogGetLogger(v57);
  v59 = objc_claimAutoreleasedReturnValue(v58);
  if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
  {
    v60 = object_getClass(v2);
    if (class_isMetaClass(v60))
      v61 = 43;
    else
      v61 = 45;
    v62 = object_getClassName(v2);
    v63 = sel_getName("clearFixedAndCyclicLogging:");
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v61;
    v136 = 2082;
    v137 = v62;
    v138 = 2082;
    v139 = v63;
    v140 = 1024;
    v141 = 1196;
    v142 = 2114;
    v143 = v4;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
  }

  if (!v4)
  {
    v90 = objc_alloc((Class)NSError);
    v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v134 = NSLocalizedDescriptionKey;
    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    *(_QWORD *)buf = v92;
    v93 = &v134;
    goto LABEL_88;
  }
  v64 = v4;
LABEL_75:
  v4 = v64;
  v3 = 0;
  v89 = v64;
LABEL_89:

LABEL_90:
}

id sub_10009FE58(void *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  _QWORD *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  _QWORD v14[4];
  _QWORD v15[4];

  if (!a1)
    return 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "handle"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "driver"));
  v5 = (_QWORD *)sub_100028F50(v4, (uint64_t)objc_msgSend(v3, "identifier"), a2);

  if (!v5)
    goto LABEL_5;
  v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", *v5, v5[1]);
  NFDataRelease(v5);
  if (!v6)
  {
    v7 = objc_alloc((Class)NSError);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v14[0] = NSLocalizedDescriptionKey;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
    v15[0] = v9;
    v15[1] = &off_1002FE5C8;
    v14[1] = CFSTR("Line");
    v14[2] = CFSTR("Method");
    v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getOSUpdateLog:"));
    v15[2] = v10;
    v14[3] = NSDebugDescriptionErrorKey;
    v11 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getOSUpdateLog:"), 686);
    v15[3] = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 4));
    *a2 = objc_msgSend(v7, "initWithDomain:code:userInfo:", v8, 13, v12);

LABEL_5:
    v6 = 0;
  }

  return v6;
}

id sub_1000A0078(void *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  NSMutableDictionary *v5;
  void *v6;

  if (a1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "handle"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "driver"));
    v5 = sub_10002928C(v4, (uint64_t)objc_msgSend(v3, "identifier"), 0, a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

id sub_1000A00F0(void *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  NSMutableDictionary *v5;
  void *v6;
  id v7;

  if (a1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "handle"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "driver"));
    v5 = sub_10002928C(v4, (uint64_t)objc_msgSend(v3, "identifier"), 1, a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    if (v6 && objc_msgSend(v6, "count"))
      v7 = v6;
    else
      v7 = 0;

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

NSObject *sub_1000A018C(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *specific;
  uint64_t Logger;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  id v23;
  void *v24;
  NSObject *v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  uint64_t v35;
  void (*v36)(uint64_t, const char *, ...);
  void *v37;
  NSObject *v38;
  objc_class *v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  id v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  NSObject *v48;
  objc_class *v49;
  int v50;
  const char *v51;
  const char *v52;
  unsigned int v53;
  NSObject *v54;
  NSObject *v55;
  void *v56;
  uint64_t v57;
  void (*v58)(uint64_t, const char *, ...);
  objc_class *v59;
  _BOOL4 v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  objc_class *v65;
  int v66;
  void *v68;
  uint64_t v69;
  void (*v70)(uint64_t, const char *, ...);
  objc_class *v71;
  _BOOL4 v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  NSObject *v76;
  objc_class *v77;
  int v78;
  const char *v79;
  const char *v80;
  id v81;
  void *v82;
  id v83;
  id v84;
  void *v85;
  void *v86;
  uint64_t v87;
  NSObject *v88;
  void (*v89)(uint64_t, const char *, ...);
  objc_class *v90;
  _BOOL4 v91;
  const char *v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  NSObject *v97;
  objc_class *v98;
  int v99;
  const char *v100;
  const char *v101;
  unsigned int v102;
  unsigned int v103;
  id v104;
  void *v105;
  void *v106;
  id v107;
  id v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  const char *v113;
  const char *v114;
  const char *Name;
  const char *v116;
  const char *v117;
  uint64_t v118;
  void *v119;
  NSObject *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  id v125;
  uint8_t buf[4];
  int v127;
  __int16 v128;
  const char *v129;
  __int16 v130;
  const char *v131;
  __int16 v132;
  int v133;
  __int16 v134;
  NSObject *v135;
  __int16 v136;
  unsigned int v137;
  _BYTE v138[128];
  _QWORD v139[4];
  _QWORD v140[4];
  _QWORD v141[4];
  _QWORD v142[4];
  _QWORD v143[4];
  _QWORD v144[4];

  if (a1)
  {
    v1 = a1;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "handle"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "info"));
    if (objc_msgSend(v3, "seType"))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "handle"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "info"));
      if (objc_msgSend(v5, "seType") == (id)4)
      {
        v6 = 0;
      }
      else
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "handle"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "info"));
        if (objc_msgSend(v8, "seType") == (id)5)
        {
          v6 = 0;
        }
        else
        {
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "handle"));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "info"));
          v6 = objc_msgSend(v10, "seType") != (id)7;

        }
      }

      if (v6)
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v13 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(v1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(v1);
          Name = sel_getName("resetACLogs");
          v17 = 45;
          if (isMetaClass)
            v17 = 43;
          v13(6, "%c[%{public}s %{public}s]:%i Acknowledging logs..", v17, ClassName, Name, 742);
        }
        v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v19 = NFSharedLogGetLogger(v18);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          v21 = object_getClass(v1);
          if (class_isMetaClass(v21))
            v22 = 43;
          else
            v22 = 45;
          *(_DWORD *)buf = 67109890;
          v127 = v22;
          v128 = 2082;
          v129 = object_getClassName(v1);
          v130 = 2082;
          v131 = sel_getName("resetACLogs");
          v132 = 1024;
          v133 = 742;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Acknowledging logs..", buf, 0x22u);
        }

        v23 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B84, 8);
        v125 = 0;
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "selectByName:error:", v23, &v125));
        v25 = v125;

        if (v24)
        {
          if (objc_msgSend(v24, "status") == 36864)
          {
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v26 = objc_msgSend(&off_100305DB8, "countByEnumeratingWithState:objects:count:", &v121, v138, 16);
            if (v26)
            {
              v27 = v26;
              v28 = 0;
              v29 = *(_QWORD *)v122;
              v119 = v1;
              do
              {
                v30 = 0;
                v31 = v28;
                v32 = v24;
                v33 = v25;
                do
                {
                  if (*(_QWORD *)v122 != v29)
                    objc_enumerationMutation(&off_100305DB8);
                  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", *(_QWORD *)(*((_QWORD *)&v121 + 1) + 8 * (_QWORD)v30)));

                  v120 = v33;
                  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 202, 0, 254, v28, 0, 0, &v120));
                  v25 = v120;

                  if (!v24 || objc_msgSend(v24, "status") != 36864)
                  {
                    v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                    v35 = NFLogGetLogger(v34);
                    if (v35)
                    {
                      v36 = (void (*)(uint64_t, const char *, ...))v35;
                      v37 = v1;
                      v38 = v25;
                      v39 = object_getClass(v37);
                      if (class_isMetaClass(v39))
                        v40 = 43;
                      else
                        v40 = 45;
                      v41 = object_getClassName(v37);
                      v42 = sel_getName("resetACLogs");
                      if (v24)
                        v43 = objc_msgSend(v24, "status");
                      else
                        v43 = 0;
                      v113 = v41;
                      v25 = v38;
                      v36(3, "%c[%{public}s %{public}s]:%i Failed to reset : %{public}@ (status = 0x%02X)", v40, v113, v42, 764, v38, v43);
                      v1 = v119;
                    }
                    v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                    v45 = NFSharedLogGetLogger(v44);
                    v46 = objc_claimAutoreleasedReturnValue(v45);
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                    {
                      v47 = v1;
                      v48 = v25;
                      v49 = object_getClass(v47);
                      if (class_isMetaClass(v49))
                        v50 = 43;
                      else
                        v50 = 45;
                      v51 = object_getClassName(v47);
                      v52 = sel_getName("resetACLogs");
                      if (v24)
                        v53 = objc_msgSend(v24, "status");
                      else
                        v53 = 0;
                      *(_DWORD *)buf = 67110402;
                      v127 = v50;
                      v128 = 2082;
                      v129 = v51;
                      v130 = 2082;
                      v131 = v52;
                      v132 = 1024;
                      v133 = 764;
                      v134 = 2114;
                      v25 = v48;
                      v135 = v48;
                      v136 = 1024;
                      v137 = v53;
                      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to reset : %{public}@ (status = 0x%02X)", buf, 0x32u);
                      v1 = v119;
                    }

                  }
                  v30 = (char *)v30 + 1;
                  v31 = v28;
                  v32 = v24;
                  v33 = v25;
                }
                while (v27 != v30);
                v27 = objc_msgSend(&off_100305DB8, "countByEnumeratingWithState:objects:count:", &v121, v138, 16);
              }
              while (v27);

            }
            v54 = v25;

            v55 = v54;
          }
          else
          {
            v86 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v87 = NFLogGetLogger(v86);
            v88 = v25;
            if (v87)
            {
              v89 = (void (*)(uint64_t, const char *, ...))v87;
              v90 = object_getClass(v1);
              v91 = class_isMetaClass(v90);
              v92 = object_getClassName(v1);
              v93 = sel_getName("resetACLogs");
              v118 = objc_msgSend(v24, "status");
              v94 = 45;
              if (v91)
                v94 = 43;
              v89(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v94, v92, v93, 749, v118);
            }
            v95 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v96 = NFSharedLogGetLogger(v95);
            v97 = objc_claimAutoreleasedReturnValue(v96);
            if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
            {
              v98 = object_getClass(v1);
              if (class_isMetaClass(v98))
                v99 = 43;
              else
                v99 = 45;
              v100 = object_getClassName(v1);
              v101 = sel_getName("resetACLogs");
              v102 = objc_msgSend(v24, "status");
              *(_DWORD *)buf = 67110146;
              v127 = v99;
              v128 = 2082;
              v129 = v100;
              v130 = 2082;
              v131 = v101;
              v132 = 1024;
              v133 = 749;
              v134 = 1024;
              LODWORD(v135) = v102;
              _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
            }

            v103 = objc_msgSend(v24, "status");
            v104 = objc_alloc((Class)NSError);
            v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            if (v103 == 26277)
            {
              v141[0] = NSLocalizedDescriptionKey;
              v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Restricted Mode"));
              v142[0] = v106;
              v142[1] = &off_1002FE5F8;
              v141[1] = CFSTR("Line");
              v141[2] = CFSTR("Method");
              v107 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("resetACLogs"));
              v142[2] = v107;
              v141[3] = NSDebugDescriptionErrorKey;
              v108 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("resetACLogs"), 750);
              v142[3] = v108;
              v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v142, v141, 4));
              v110 = v104;
              v111 = v105;
              v112 = 24;
            }
            else
            {
              v139[0] = NSLocalizedDescriptionKey;
              v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
              v140[0] = v106;
              v140[1] = &off_1002FE5F8;
              v139[1] = CFSTR("Line");
              v139[2] = CFSTR("Method");
              v107 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("resetACLogs"));
              v140[2] = v107;
              v139[3] = NSDebugDescriptionErrorKey;
              v108 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("resetACLogs"), 750);
              v140[3] = v108;
              v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v140, v139, 4));
              v110 = v104;
              v111 = v105;
              v112 = 16;
            }
            v55 = objc_msgSend(v110, "initWithDomain:code:userInfo:", v111, v112, v109);

            v54 = v88;
          }
        }
        else
        {
          v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v69 = NFLogGetLogger(v68);
          if (v69)
          {
            v70 = (void (*)(uint64_t, const char *, ...))v69;
            v71 = object_getClass(v1);
            v72 = class_isMetaClass(v71);
            v114 = object_getClassName(v1);
            v117 = sel_getName("resetACLogs");
            v73 = 45;
            if (v72)
              v73 = 43;
            v70(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v73, v114, v117, 746, v25);
          }
          v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v75 = NFSharedLogGetLogger(v74);
          v76 = objc_claimAutoreleasedReturnValue(v75);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            v77 = object_getClass(v1);
            if (class_isMetaClass(v77))
              v78 = 43;
            else
              v78 = 45;
            v79 = object_getClassName(v1);
            v80 = sel_getName("resetACLogs");
            *(_DWORD *)buf = 67110146;
            v127 = v78;
            v128 = 2082;
            v129 = v79;
            v130 = 2082;
            v131 = v80;
            v132 = 1024;
            v133 = 746;
            v134 = 2114;
            v135 = v25;
            _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
          }

          if (v25)
            return v25;
          v81 = objc_alloc((Class)NSError);
          v54 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v143[0] = NSLocalizedDescriptionKey;
          v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
          v144[0] = v82;
          v144[1] = &off_1002FE5E0;
          v143[1] = CFSTR("Line");
          v143[2] = CFSTR("Method");
          v83 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("resetACLogs"));
          v144[2] = v83;
          v143[3] = NSDebugDescriptionErrorKey;
          v84 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("resetACLogs"), 747);
          v144[3] = v84;
          v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v144, v143, 4));
          v55 = objc_msgSend(v81, "initWithDomain:code:userInfo:", v54, 16, v85);

        }
LABEL_60:

        v25 = v55;
        return v25;
      }
    }
    else
    {

    }
    v56 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v57 = NFLogGetLogger(v56);
    if (v57)
    {
      v58 = (void (*)(uint64_t, const char *, ...))v57;
      v59 = object_getClass(v1);
      v60 = class_isMetaClass(v59);
      v61 = object_getClassName(v1);
      v116 = sel_getName("resetACLogs");
      v62 = 45;
      if (v60)
        v62 = 43;
      v58(6, "%c[%{public}s %{public}s]:%i No reseting: slamAPDUs is nil", v62, v61, v116, 738);
    }
    v63 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v64 = NFSharedLogGetLogger(v63);
    v54 = objc_claimAutoreleasedReturnValue(v64);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      v65 = object_getClass(v1);
      if (class_isMetaClass(v65))
        v66 = 43;
      else
        v66 = 45;
      *(_DWORD *)buf = 67109890;
      v127 = v66;
      v128 = 2082;
      v129 = object_getClassName(v1);
      v130 = 2082;
      v131 = sel_getName("resetACLogs");
      v132 = 1024;
      v133 = 738;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No reseting: slamAPDUs is nil", buf, 0x22u);
    }
    v55 = 0;
    goto LABEL_60;
  }
  return 0;
}

id sub_1000A0E48(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  _QWORD v14[4];

  if (!a1)
    return 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "handle"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "driver"));
  LOBYTE(a2) = sub_100029744(v4, (uint64_t)objc_msgSend(v3, "identifier"), a2);

  if ((a2 & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v6 = objc_alloc((Class)NSError);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v13[0] = NSLocalizedDescriptionKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v14[0] = v8;
    v14[1] = &off_1002FE610;
    v13[1] = CFSTR("Line");
    v13[2] = CFSTR("Method");
    v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getPresenceOfAttackLog:"));
    v14[2] = v9;
    v13[3] = NSDebugDescriptionErrorKey;
    v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getPresenceOfAttackLog:"), 780);
    v14[3] = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 4));
    v5 = objc_msgSend(v6, "initWithDomain:code:userInfo:", v7, 15, v11);

  }
  return v5;
}

NSMutableData *sub_1000A1044(void *a1, _DWORD *a2, int a3)
{
  NSMutableData *v6;
  id v7;
  void *v8;
  NSMutableData *v9;
  void *v10;
  void *v11;
  NSMutableData *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void (*v16)(uint64_t, const char *, ...);
  objc_class *v17;
  _BOOL4 v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  const char *v25;
  const char *v26;
  NSMutableData *v27;
  void *v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *v31;
  _BOOL4 v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  objc_class *v39;
  int v40;
  const char *v41;
  const char *v42;
  unsigned int v43;
  void *v44;
  unsigned int v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void (*v68)(uint64_t, const char *, ...);
  objc_class *v69;
  _BOOL4 v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  objc_class *v75;
  int v76;
  const char *v77;
  const char *v78;
  void *specific;
  uint64_t Logger;
  void (*v81)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *Name;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  NSObject *v88;
  objc_class *v89;
  int v90;
  const char *v91;
  const char *v92;
  unsigned int v93;
  void *v94;
  NSData *v95;
  id v96;
  id v97;
  id v98;
  NSData *v99;
  uint64_t v100;
  void *i;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  uint64_t v106;
  void (*v107)(uint64_t, const char *, ...);
  objc_class *v108;
  _BOOL4 v109;
  const char *v110;
  const char *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  NSObject *v115;
  objc_class *v116;
  int v117;
  const char *v118;
  const char *v119;
  unsigned int v120;
  id v121;
  void *v122;
  void *v123;
  id v124;
  id v125;
  _QWORD *v126;
  _QWORD *v127;
  NSData *v128;
  uint64_t v129;
  id v130;
  NSData *v131;
  id v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  uint64_t v137;
  void (*v138)(uint64_t, const char *, ...);
  objc_class *v139;
  _BOOL4 v140;
  const char *v141;
  const char *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  NSObject *v146;
  objc_class *v147;
  int v148;
  const char *v149;
  const char *v150;
  id v151;
  id v152;
  void *v153;
  void *v154;
  id v155;
  id v156;
  void *v157;
  id v158;
  void *v159;
  uint64_t v160;
  void (*v161)(uint64_t, const char *, ...);
  objc_class *v162;
  _BOOL4 v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  NSObject *v167;
  objc_class *v168;
  int v169;
  const char *v170;
  const char *v171;
  void *v172;
  id v173;
  void *v174;
  uint64_t v175;
  void (*v176)(uint64_t, const char *, ...);
  objc_class *v177;
  _BOOL4 v178;
  const char *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  NSObject *v183;
  objc_class *v184;
  int v185;
  const char *v186;
  const char *v187;
  id v188;
  void *v189;
  void *v190;
  id v191;
  id v192;
  void *v193;
  id v194;
  void *v195;
  uint64_t v196;
  void (*v197)(uint64_t, const char *, ...);
  objc_class *v198;
  _BOOL4 v199;
  const char *v200;
  const char *v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  NSObject *v205;
  objc_class *v206;
  int v207;
  const char *v208;
  const char *v209;
  unsigned int v210;
  id v211;
  void *v212;
  void *v213;
  id v214;
  id v215;
  void *v216;
  id v217;
  id v219;
  unsigned __int16 *v220;
  char *v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  void *v225;
  uint64_t v226;
  void (*v227)(uint64_t, const char *, ...);
  objc_class *v228;
  _BOOL4 v229;
  const char *v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  NSObject *v234;
  objc_class *v235;
  int v236;
  const char *v237;
  const char *v238;
  const char *v239;
  void *v240;
  uint64_t v241;
  void (*v242)(uint64_t, const char *, ...);
  objc_class *v243;
  _BOOL4 v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  NSObject *v248;
  objc_class *v249;
  int v250;
  const char *v251;
  const char *v252;
  void *v253;
  uint64_t v254;
  void (*v255)(uint64_t, const char *, ...);
  objc_class *v256;
  _BOOL4 v257;
  const char *v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  objc_class *v262;
  int v263;
  const char *v264;
  const char *v265;
  unint64_t v266;
  int v267;
  int v268;
  int v269;
  void *v270;
  void *v271;
  id v272;
  id v273;
  void *v274;
  void *v275;
  uint64_t v276;
  void (*v277)(uint64_t, const char *, ...);
  objc_class *v278;
  _BOOL4 v279;
  uint64_t v280;
  void *v281;
  uint64_t v282;
  NSObject *v283;
  objc_class *v284;
  int v285;
  const char *v286;
  const char *v287;
  __int16 v288;
  char *v289;
  char *v290;
  uint64_t v291;
  id v292;
  id v293;
  const char *v294;
  const char *v295;
  const char *v296;
  const char *v297;
  const char *v298;
  const char *v299;
  const char *v300;
  const char *v301;
  const char *v302;
  const char *v303;
  const char *v304;
  const char *v305;
  uint64_t v306;
  uint64_t v307;
  id v308;
  id v309;
  id v310;
  const char *v311;
  int v312;
  char *v313;
  char *v314;
  void *v315;
  void *v316;
  id v317;
  void *v318;
  int v319;
  id v320;
  id v321;
  const char *ClassName;
  NSData *v323;
  void *v324;
  SEL sel;
  id v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  NSMutableData *v331;
  id v332;
  uint8_t buf[4];
  int v334;
  __int16 v335;
  const char *v336;
  __int16 v337;
  const char *v338;
  __int16 v339;
  int v340;
  __int16 v341;
  _BYTE v342[10];
  __int16 v343;
  char *v344;
  __int16 v345;
  int v346;
  _QWORD v347[4];
  _QWORD v348[4];
  _QWORD v349[4];
  _QWORD v350[4];
  _QWORD v351[4];
  _QWORD v352[4];
  _QWORD v353[4];
  _QWORD v354[4];
  _QWORD v355[4];
  _QWORD v356[4];
  _QWORD v357[4];
  _QWORD v358[4];
  _BYTE v359[128];
  _QWORD v360[4];
  _QWORD v361[4];
  _QWORD v362[4];
  _QWORD v363[4];
  _QWORD v364[4];
  _QWORD v365[4];
  _QWORD v366[4];
  _QWORD v367[4];

  if (!a1)
    return (NSMutableData *)0;
  v6 = objc_opt_new(NSMutableData);
  *a2 = 0;
  v7 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B84, 8);
  v332 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "selectByName:error:", v7, &v332));
  v9 = (NSMutableData *)v332;

  if (v8)
  {
    if (objc_msgSend(v8, "status") == 36864)
    {
      v319 = a3;
      v324 = v8;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", CFSTR("DF2600FEB000")));
      while (1)
      {
        v331 = v9;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 202, 0, 254, v10, 0, 0, &v331));
        v12 = v331;

        if (v12)
        {

          goto LABEL_38;
        }
        if (!v11)
          break;
        if (objc_msgSend(v11, "status") == 36864)
          goto LABEL_58;
        if (objc_msgSend(v11, "status") != 25360 && objc_msgSend(v11, "status") != 37008)
        {
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = NFLogGetLogger(specific);
          if (Logger)
          {
            v81 = (void (*)(uint64_t, const char *, ...))Logger;
            Class = object_getClass(a1);
            isMetaClass = class_isMetaClass(Class);
            ClassName = object_getClassName(a1);
            Name = sel_getName("getAppletMigrationErrorCount:reset:");
            v307 = objc_msgSend(v11, "status");
            v85 = 45;
            if (isMetaClass)
              v85 = 43;
            v81(3, "%c[%{public}s %{public}s]:%i Failed to query, status word is 0x%x", v85, ClassName, Name, 832, v307);
          }
          v86 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v87 = NFSharedLogGetLogger(v86);
          v88 = objc_claimAutoreleasedReturnValue(v87);
          if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
          {
            v89 = object_getClass(a1);
            if (class_isMetaClass(v89))
              v90 = 43;
            else
              v90 = 45;
            v91 = object_getClassName(a1);
            v92 = sel_getName("getAppletMigrationErrorCount:reset:");
            v93 = objc_msgSend(v11, "status");
            *(_DWORD *)buf = 67110146;
            v334 = v90;
            v335 = 2082;
            v336 = v91;
            v337 = 2082;
            v338 = v92;
            v339 = 1024;
            v340 = 832;
            v341 = 1024;
            *(_DWORD *)v342 = v93;
            _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query, status word is 0x%x", buf, 0x28u);
          }

LABEL_58:
          v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "data"));
          -[NSMutableData appendData:](v6, "appendData:", v94);

LABEL_60:
          v95 = objc_opt_new(NSData);
          v327 = 0u;
          v328 = 0u;
          v329 = 0u;
          v330 = 0u;
          v96 = (id)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v6));
          v97 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v327, v359, 16);
          if (v97)
          {
            v98 = v97;
            v99 = v95;
            v100 = *(_QWORD *)v328;
            while (2)
            {
              for (i = 0; i != v98; i = (char *)i + 1)
              {
                if (*(_QWORD *)v328 != v100)
                  objc_enumerationMutation(v96);
                v102 = *(void **)(*((_QWORD *)&v327 + 1) + 8 * (_QWORD)i);
                if (objc_msgSend(v102, "tag") == 254)
                {
                  v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "childWithTag:", 57126));
                  v104 = v103;
                  if (v103)
                  {
                    v95 = (NSData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "value"));

                  }
                  else
                  {
                    v95 = v99;
                  }

                  goto LABEL_73;
                }
              }
              v98 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v327, v359, 16);
              if (v98)
                continue;
              break;
            }
            v95 = v99;
          }
LABEL_73:

          v323 = v95;
          if (-[NSData length](v95, "length") <= 9)
          {
            v105 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v106 = NFLogGetLogger(v105);
            if (v106)
            {
              v107 = (void (*)(uint64_t, const char *, ...))v106;
              v108 = object_getClass(a1);
              v109 = class_isMetaClass(v108);
              v110 = object_getClassName(a1);
              v111 = sel_getName("getAppletMigrationErrorCount:reset:");
              v308 = -[NSData length](v95, "length");
              v112 = 45;
              if (v109)
                v112 = 43;
              v107(3, "%c[%{public}s %{public}s]:%i Invalid migration log data, data length: %d. Minimun length should be: %d", v112, v110, v111, 860, v308, 10);
            }
            v113 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v114 = NFSharedLogGetLogger(v113);
            v115 = objc_claimAutoreleasedReturnValue(v114);
            if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
            {
              v116 = object_getClass(a1);
              if (class_isMetaClass(v116))
                v117 = 43;
              else
                v117 = 45;
              v118 = object_getClassName(a1);
              v119 = sel_getName("getAppletMigrationErrorCount:reset:");
              v120 = -[NSData length](v95, "length");
              *(_DWORD *)buf = 67110402;
              v334 = v117;
              v335 = 2082;
              v336 = v118;
              v337 = 2082;
              v338 = v119;
              v339 = 1024;
              v340 = 860;
              v341 = 1024;
              *(_DWORD *)v342 = v120;
              *(_WORD *)&v342[4] = 1024;
              *(_DWORD *)&v342[6] = 10;
              _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid migration log data, data length: %d. Minimun length should be: %d", buf, 0x2Eu);
            }

            v121 = objc_alloc((Class)NSError);
            v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v357[0] = NSLocalizedDescriptionKey;
            v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
            v358[0] = v123;
            v358[1] = &off_1002FE670;
            v357[1] = CFSTR("Line");
            v357[2] = CFSTR("Method");
            v124 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationErrorCount:reset:"));
            v358[2] = v124;
            v357[3] = NSDebugDescriptionErrorKey;
            v125 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationErrorCount:reset:"), 861);
            v358[3] = v125;
            v126 = v358;
            v127 = v357;
            goto LABEL_108;
          }
          v128 = objc_retainAutorelease(v95);
          v129 = __rev16(*((unsigned __int16 *)-[NSData bytes](v128, "bytes") + 4));
          if ((_DWORD)v129 == 65200)
          {
            v130 = objc_alloc((Class)NSData);
            v131 = objc_retainAutorelease(v128);
            v132 = objc_msgSend(v130, "initWithBytes:length:", (char *)-[NSData bytes](v131, "bytes") + 9, (char *)-[NSData length](v131, "length") - 9);
            v133 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v132));

            v317 = v132;
            v318 = v133;
            if (!objc_msgSend(v133, "count"))
            {
              v174 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v175 = NFLogGetLogger(v174);
              v8 = v324;
              if (v175)
              {
                v176 = (void (*)(uint64_t, const char *, ...))v175;
                v177 = object_getClass(a1);
                v178 = class_isMetaClass(v177);
                v179 = object_getClassName(a1);
                v301 = sel_getName("getAppletMigrationErrorCount:reset:");
                v180 = 45;
                if (v178)
                  v180 = 43;
                v176(3, "%c[%{public}s %{public}s]:%i Invalid migration log data, could not find the second partialTag: 0xB0", v180, v179, v301, 882);
              }
              v181 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v182 = NFSharedLogGetLogger(v181);
              v183 = objc_claimAutoreleasedReturnValue(v182);
              if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
              {
                v184 = object_getClass(a1);
                if (class_isMetaClass(v184))
                  v185 = 43;
                else
                  v185 = 45;
                v186 = object_getClassName(a1);
                v187 = sel_getName("getAppletMigrationErrorCount:reset:");
                *(_DWORD *)buf = 67109890;
                v334 = v185;
                v335 = 2082;
                v336 = v186;
                v337 = 2082;
                v338 = v187;
                v339 = 1024;
                v340 = 882;
                _os_log_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid migration log data, could not find the second partialTag: 0xB0", buf, 0x22u);
              }

              v188 = objc_alloc((Class)NSError);
              v189 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v353[0] = NSLocalizedDescriptionKey;
              v190 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
              v354[0] = v190;
              v354[1] = &off_1002FE6A0;
              v353[1] = CFSTR("Line");
              v353[2] = CFSTR("Method");
              v191 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationErrorCount:reset:"));
              v354[2] = v191;
              v353[3] = NSDebugDescriptionErrorKey;
              v192 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationErrorCount:reset:"), 883);
              v354[3] = v192;
              v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v354, v353, 4));
              v194 = objc_msgSend(v188, "initWithDomain:code:userInfo:", v189, 13, v193);

              v27 = (NSMutableData *)v194;
              v132 = v317;
              v96 = v318;
              goto LABEL_132;
            }
            v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectAtIndexedSubscript:", 0));
            v316 = v134;
            if (objc_msgSend(v134, "tag") == 176)
            {
              v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "value"));
              if ((unint64_t)objc_msgSend(v135, "length") < 6)
              {
                v136 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v137 = NFLogGetLogger(v136);
                if (v137)
                {
                  v138 = (void (*)(uint64_t, const char *, ...))v137;
                  v139 = object_getClass(a1);
                  v140 = class_isMetaClass(v139);
                  v141 = object_getClassName(a1);
                  v142 = sel_getName("getAppletMigrationErrorCount:reset:");
                  v309 = objc_msgSend(v135, "length");
                  v143 = 45;
                  if (v140)
                    v143 = 43;
                  v138(3, "%c[%{public}s %{public}s]:%i Invalid migration log data, migrationLog.length (%lu) < AppletMigrationLogMinLength (6)", v143, v141, v142, 898, v309);
                }
                v144 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v145 = NFSharedLogGetLogger(v144);
                v146 = objc_claimAutoreleasedReturnValue(v145);
                if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
                {
                  v147 = object_getClass(a1);
                  if (class_isMetaClass(v147))
                    v148 = 43;
                  else
                    v148 = 45;
                  v149 = object_getClassName(a1);
                  v150 = sel_getName("getAppletMigrationErrorCount:reset:");
                  v151 = objc_msgSend(v135, "length");
                  *(_DWORD *)buf = 67110146;
                  v334 = v148;
                  v335 = 2082;
                  v336 = v149;
                  v337 = 2082;
                  v338 = v150;
                  v339 = 1024;
                  v340 = 898;
                  v341 = 2048;
                  *(_QWORD *)v342 = v151;
                  _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid migration log data, migrationLog.length (%lu) < AppletMigrationLogMinLength (6)", buf, 0x2Cu);
                }

                v152 = objc_alloc((Class)NSError);
                v153 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                v349[0] = NSLocalizedDescriptionKey;
                v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
                v350[0] = v154;
                v350[1] = &off_1002FE6D0;
                v349[1] = CFSTR("Line");
                v349[2] = CFSTR("Method");
                v155 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationErrorCount:reset:"));
                v350[2] = v155;
                v349[3] = NSDebugDescriptionErrorKey;
                v156 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationErrorCount:reset:"), 899);
                v350[3] = v156;
                v157 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v350, v349, 4));
                v158 = objc_msgSend(v152, "initWithDomain:code:userInfo:", v153, 13, v157);

                v27 = (NSMutableData *)v158;
                goto LABEL_129;
              }
              v219 = objc_retainAutorelease(v135);
              v220 = (unsigned __int16 *)objc_msgSend(v219, "bytes");
              v315 = v219;
              v221 = (char *)objc_msgSend(v219, "length");
              v222 = v220[1];
              v223 = v220[2];
              v224 = __rev16(v223);
              if (v224 == 65445)
              {
                v313 = v221;
                v240 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v241 = NFLogGetLogger(v240);
                if (v241)
                {
                  v242 = (void (*)(uint64_t, const char *, ...))v241;
                  v243 = object_getClass(a1);
                  v244 = class_isMetaClass(v243);
                  v311 = object_getClassName(a1);
                  v303 = sel_getName("getAppletMigrationErrorCount:reset:");
                  v245 = 45;
                  if (v244)
                    v245 = 43;
                  v242(6, "%c[%{public}s %{public}s]:%i There is a buffer overflow without the host acknowledging a readout !", v245, v311, v303, 917);
                }
                v246 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v247 = NFSharedLogGetLogger(v246);
                v248 = objc_claimAutoreleasedReturnValue(v247);
                if (os_log_type_enabled(v248, OS_LOG_TYPE_DEFAULT))
                {
                  v249 = object_getClass(a1);
                  if (class_isMetaClass(v249))
                    v250 = 43;
                  else
                    v250 = 45;
                  v312 = v250;
                  v251 = object_getClassName(a1);
                  v252 = sel_getName("getAppletMigrationErrorCount:reset:");
                  *(_DWORD *)buf = 67109890;
                  v334 = v312;
                  v335 = 2082;
                  v336 = v251;
                  v337 = 2082;
                  v338 = v252;
                  v339 = 1024;
                  v340 = 917;
                  _os_log_impl((void *)&_mh_execute_header, v248, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i There is a buffer overflow without the host acknowledging a readout !", buf, 0x22u);
                }

                v132 = v317;
                v221 = v313;
              }
              else if (v224 == 65370)
              {
                v225 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v226 = NFLogGetLogger(v225);
                if (v226)
                {
                  v227 = (void (*)(uint64_t, const char *, ...))v226;
                  v228 = object_getClass(a1);
                  v229 = class_isMetaClass(v228);
                  v230 = object_getClassName(a1);
                  v302 = sel_getName("getAppletMigrationErrorCount:reset:");
                  v231 = 45;
                  if (v229)
                    v231 = 43;
                  v227(6, "%c[%{public}s %{public}s]:%i There is no new entry in the log since the host acknowledged the last readout of the log.", v231, v230, v302, 914);
                }
                v232 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v233 = NFSharedLogGetLogger(v232);
                v234 = objc_claimAutoreleasedReturnValue(v233);
                v8 = v324;
                if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
                {
                  v235 = object_getClass(a1);
                  if (class_isMetaClass(v235))
                    v236 = 43;
                  else
                    v236 = 45;
                  v237 = object_getClassName(a1);
                  v238 = sel_getName("getAppletMigrationErrorCount:reset:");
                  *(_DWORD *)buf = 67109890;
                  v334 = v236;
                  v335 = 2082;
                  v336 = v237;
                  v337 = 2082;
                  v338 = v238;
                  v339 = 1024;
                  v340 = 914;
                  v239 = "%c[%{public}s %{public}s]:%i There is no new entry in the log since the host acknowledged the l"
                         "ast readout of the log.";
                  goto LABEL_166;
                }
                goto LABEL_167;
              }
              if (v222 == v223)
              {
                v253 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v254 = NFLogGetLogger(v253);
                if (v254)
                {
                  v255 = (void (*)(uint64_t, const char *, ...))v254;
                  v256 = object_getClass(a1);
                  v257 = class_isMetaClass(v256);
                  v258 = object_getClassName(a1);
                  v304 = sel_getName("getAppletMigrationErrorCount:reset:");
                  v259 = 45;
                  if (v257)
                    v259 = 43;
                  v255(6, "%c[%{public}s %{public}s]:%i Applet Migration Error counter is 0", v259, v258, v304, 925);
                }
                v260 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v261 = NFSharedLogGetLogger(v260);
                v234 = objc_claimAutoreleasedReturnValue(v261);
                v8 = v324;
                if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
                {
                  v262 = object_getClass(a1);
                  if (class_isMetaClass(v262))
                    v263 = 43;
                  else
                    v263 = 45;
                  v264 = object_getClassName(a1);
                  v265 = sel_getName("getAppletMigrationErrorCount:reset:");
                  *(_DWORD *)buf = 67109890;
                  v334 = v263;
                  v335 = 2082;
                  v336 = v264;
                  v337 = 2082;
                  v338 = v265;
                  v339 = 1024;
                  v340 = 925;
                  v239 = "%c[%{public}s %{public}s]:%i Applet Migration Error counter is 0";
LABEL_166:
                  _os_log_impl((void *)&_mh_execute_header, v234, OS_LOG_TYPE_DEFAULT, v239, buf, 0x22u);
                }
LABEL_167:

                v27 = 0;
                v96 = v318;
LABEL_131:

LABEL_132:
LABEL_133:

                v6 = v27;
                goto LABEL_134;
              }
              v266 = __rev16(v222) - v224;
              if ((int)v266 >= 9 && (unint64_t)(v221 - 6) >= v266)
              {
                v267 = v266 - 11;
                if (v266 >= 0xB)
                {
                  v288 = 0;
                  v268 = 0;
                  v289 = (char *)(v220 + 3);
                  v8 = v324;
                  v132 = v317;
                  v96 = v318;
                  v269 = v319;
                  do
                  {
                    v290 = &v289[v288];
                    if (!*v290)
                      break;
                    v268 += bswap32(*(unsigned __int16 *)(v290 + 9)) >> 16;
                    v288 += *v290 + 1;
                  }
                  while (v267 >= v288);
                }
                else
                {
                  v268 = 0;
                  v8 = v324;
                  v132 = v317;
                  v96 = v318;
                  v269 = v319;
                }
                *a2 = v268;
                if (v269)
                {
                  v291 = objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", CFSTR("DF2D00FEB000")));

                  v326 = 0;
                  v292 = objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 202, 0, 254, v291, 0, 0, &v326);
                  v293 = v326;
                  v10 = (void *)v291;
                }
                else
                {
                  v293 = 0;
                }
                v27 = (NSMutableData *)v293;

                goto LABEL_131;
              }
              v314 = v221;
              v320 = objc_alloc((Class)NSError);
              v270 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v347[0] = NSLocalizedDescriptionKey;
              v271 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
              v348[0] = v271;
              v348[1] = &off_1002FE6E8;
              v347[1] = CFSTR("Line");
              v347[2] = CFSTR("Method");
              v272 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationErrorCount:reset:"));
              v348[2] = v272;
              v347[3] = NSDebugDescriptionErrorKey;
              v273 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationErrorCount:reset:"), 933);
              v348[3] = v273;
              v274 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v348, v347, 4));
              v321 = objc_msgSend(v320, "initWithDomain:code:userInfo:", v270, 13, v274);

              v275 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v276 = NFLogGetLogger(v275);
              if (v276)
              {
                v277 = (void (*)(uint64_t, const char *, ...))v276;
                v278 = object_getClass(a1);
                v279 = class_isMetaClass(v278);
                v297 = object_getClassName(a1);
                v305 = sel_getName("getAppletMigrationErrorCount:reset:");
                v280 = 43;
                if (!v279)
                  v280 = 45;
                v277(3, "%c[%{public}s %{public}s]:%i Error in Applet Migration Error Log data: dataLength=%d, it should big then AppletMigrationLogDataEntryErrorCounterOffset=%d, less or equal to: logContentBytes=%ld - AppletMigrationLogDataOffset=%d", v280, v297, v305, 934, v266, 9, v314, 6);
              }
              v281 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v282 = NFSharedLogGetLogger(v281);
              v283 = objc_claimAutoreleasedReturnValue(v282);
              v8 = v324;
              if (os_log_type_enabled(v283, OS_LOG_TYPE_ERROR))
              {
                v284 = object_getClass(a1);
                if (class_isMetaClass(v284))
                  v285 = 43;
                else
                  v285 = 45;
                v286 = object_getClassName(a1);
                v287 = sel_getName("getAppletMigrationErrorCount:reset:");
                *(_DWORD *)buf = 67110914;
                v334 = v285;
                v335 = 2082;
                v336 = v286;
                v337 = 2082;
                v338 = v287;
                v339 = 1024;
                v340 = 934;
                v341 = 1024;
                *(_DWORD *)v342 = v266;
                *(_WORD *)&v342[4] = 1024;
                *(_DWORD *)&v342[6] = 9;
                v343 = 2048;
                v344 = v314;
                v345 = 1024;
                v346 = 6;
                _os_log_impl((void *)&_mh_execute_header, v283, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error in Applet Migration Error Log data: dataLength=%d, it should big then AppletMigrationLogDataEntryErrorCounterOffset=%d, less or equal to: logContentBytes=%ld - AppletMigrationLogDataOffset=%d", buf, 0x3Eu);
              }

              v27 = (NSMutableData *)v321;
            }
            else
            {
              v195 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v196 = NFLogGetLogger(v195);
              if (v196)
              {
                v197 = (void (*)(uint64_t, const char *, ...))v196;
                v198 = object_getClass(a1);
                v199 = class_isMetaClass(v198);
                v200 = object_getClassName(a1);
                v201 = sel_getName("getAppletMigrationErrorCount:reset:");
                v310 = objc_msgSend(v134, "tag");
                v202 = 45;
                if (v199)
                  v202 = 43;
                v197(3, "%c[%{public}s %{public}s]:%i Invalid migration log data, the second partialTag should be 0xB0, but got: 0x%x", v202, v200, v201, 892, v310);
              }
              v203 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v204 = NFSharedLogGetLogger(v203);
              v205 = objc_claimAutoreleasedReturnValue(v204);
              if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
              {
                v206 = object_getClass(a1);
                if (class_isMetaClass(v206))
                  v207 = 43;
                else
                  v207 = 45;
                v208 = object_getClassName(a1);
                v209 = sel_getName("getAppletMigrationErrorCount:reset:");
                v210 = objc_msgSend(v134, "tag");
                *(_DWORD *)buf = 67110146;
                v334 = v207;
                v335 = 2082;
                v336 = v208;
                v337 = 2082;
                v338 = v209;
                v339 = 1024;
                v340 = 892;
                v341 = 1024;
                *(_DWORD *)v342 = v210;
                _os_log_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid migration log data, the second partialTag should be 0xB0, but got: 0x%x", buf, 0x28u);
              }

              v211 = objc_alloc((Class)NSError);
              v212 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v351[0] = NSLocalizedDescriptionKey;
              v213 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
              v352[0] = v213;
              v352[1] = &off_1002FE6B8;
              v351[1] = CFSTR("Line");
              v351[2] = CFSTR("Method");
              v214 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationErrorCount:reset:"));
              v352[2] = v214;
              v351[3] = NSDebugDescriptionErrorKey;
              v215 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationErrorCount:reset:"), 893);
              v352[3] = v215;
              v216 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v352, v351, 4));
              v217 = objc_msgSend(v211, "initWithDomain:code:userInfo:", v212, 13, v216);

              v27 = (NSMutableData *)v217;
LABEL_129:
              v8 = v324;
            }
            v132 = v317;
            v96 = v318;
            goto LABEL_131;
          }
          v159 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v160 = NFLogGetLogger(v159);
          if (v160)
          {
            v161 = (void (*)(uint64_t, const char *, ...))v160;
            v162 = object_getClass(a1);
            v163 = class_isMetaClass(v162);
            v296 = object_getClassName(a1);
            v300 = sel_getName("getAppletMigrationErrorCount:reset:");
            v164 = 45;
            if (v163)
              v164 = 43;
            v161(3, "%c[%{public}s %{public}s]:%i Invalid migration log data: first partialTag should be: 0xFEB0, but got: 0x%x", v164, v296, v300, 871, v129);
          }
          v165 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v166 = NFSharedLogGetLogger(v165);
          v167 = objc_claimAutoreleasedReturnValue(v166);
          if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
          {
            v168 = object_getClass(a1);
            if (class_isMetaClass(v168))
              v169 = 43;
            else
              v169 = 45;
            v170 = object_getClassName(a1);
            v171 = sel_getName("getAppletMigrationErrorCount:reset:");
            *(_DWORD *)buf = 67110146;
            v334 = v169;
            v335 = 2082;
            v336 = v170;
            v337 = 2082;
            v338 = v171;
            v339 = 1024;
            v340 = 871;
            v341 = 1024;
            *(_DWORD *)v342 = v129;
            _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid migration log data: first partialTag should be: 0xFEB0, but got: 0x%x", buf, 0x28u);
          }

          v121 = objc_alloc((Class)NSError);
          v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v355[0] = NSLocalizedDescriptionKey;
          v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
          v356[0] = v123;
          v356[1] = &off_1002FE688;
          v355[1] = CFSTR("Line");
          v355[2] = CFSTR("Method");
          v124 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationErrorCount:reset:"));
          v356[2] = v124;
          v355[3] = NSDebugDescriptionErrorKey;
          v125 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationErrorCount:reset:"), 872);
          v356[3] = v125;
          v126 = v356;
          v127 = v355;
LABEL_108:
          v172 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v126, v127, 4));
          v173 = objc_msgSend(v121, "initWithDomain:code:userInfo:", v122, 13, v172);

          v27 = (NSMutableData *)v173;
          v8 = v324;
          goto LABEL_133;
        }
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "response"));
        -[NSMutableData appendData:](v6, "appendData:", v13);

        v9 = 0;
      }
      v60 = objc_alloc((Class)NSError);
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v360[0] = NSLocalizedDescriptionKey;
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
      v361[0] = v62;
      v361[1] = &off_1002FE658;
      v360[1] = CFSTR("Line");
      v360[2] = CFSTR("Method");
      v63 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationErrorCount:reset:"));
      v361[2] = v63;
      v360[3] = NSDebugDescriptionErrorKey;
      v64 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationErrorCount:reset:"), 823);
      v361[3] = v64;
      v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v361, v360, 4));
      v12 = (NSMutableData *)objc_msgSend(v60, "initWithDomain:code:userInfo:", v61, 13, v65);

      if (!v12)
      {
        v6 = 0;
        goto LABEL_60;
      }
LABEL_38:
      v66 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v67 = NFLogGetLogger(v66);
      v8 = v324;
      if (v67)
      {
        v68 = (void (*)(uint64_t, const char *, ...))v67;
        v69 = object_getClass(a1);
        v70 = class_isMetaClass(v69);
        v295 = object_getClassName(a1);
        v299 = sel_getName("getAppletMigrationErrorCount:reset:");
        v71 = 45;
        if (v70)
          v71 = 43;
        v68(3, "%c[%{public}s %{public}s]:%i Data responce error: %@", v71, v295, v299, 839, v12);
      }
      v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v73 = NFSharedLogGetLogger(v72);
      v74 = objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        v75 = object_getClass(a1);
        if (class_isMetaClass(v75))
          v76 = 43;
        else
          v76 = 45;
        v77 = object_getClassName(a1);
        v78 = sel_getName("getAppletMigrationErrorCount:reset:");
        *(_DWORD *)buf = 67110146;
        v334 = v76;
        v335 = 2082;
        v336 = v77;
        v337 = 2082;
        v338 = v78;
        v339 = 1024;
        v340 = 839;
        v341 = 2112;
        *(_QWORD *)v342 = v12;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Data responce error: %@", buf, 0x2Cu);
      }

      v6 = v12;
      v27 = v6;
    }
    else
    {
      v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v29 = NFLogGetLogger(v28);
      if (v29)
      {
        v30 = (void (*)(uint64_t, const char *, ...))v29;
        v31 = object_getClass(a1);
        v32 = class_isMetaClass(v31);
        v33 = object_getClassName(a1);
        v34 = sel_getName("getAppletMigrationErrorCount:reset:");
        v306 = objc_msgSend(v8, "status");
        v35 = 45;
        if (v32)
          v35 = 43;
        v30(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v35, v33, v34, 799, v306);
      }
      sel = (SEL)v6;
      v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v37 = NFSharedLogGetLogger(v36);
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        v39 = object_getClass(a1);
        if (class_isMetaClass(v39))
          v40 = 43;
        else
          v40 = 45;
        v41 = object_getClassName(a1);
        v42 = sel_getName("getAppletMigrationErrorCount:reset:");
        v43 = objc_msgSend(v8, "status");
        *(_DWORD *)buf = 67110146;
        v334 = v40;
        v335 = 2082;
        v336 = v41;
        v337 = 2082;
        v338 = v42;
        v339 = 1024;
        v340 = 799;
        v341 = 1024;
        *(_DWORD *)v342 = v43;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
      }

      v44 = v8;
      v45 = objc_msgSend(v8, "status");
      v46 = objc_alloc((Class)NSError);
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      if (v45 == 26277)
      {
        v364[0] = NSLocalizedDescriptionKey;
        v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Restricted Mode"));
        v365[0] = v48;
        v365[1] = &off_1002FE640;
        v364[1] = CFSTR("Line");
        v364[2] = CFSTR("Method");
        v49 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationErrorCount:reset:"));
        v365[2] = v49;
        v364[3] = NSDebugDescriptionErrorKey;
        v50 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationErrorCount:reset:"), 800);
        v365[3] = v50;
        v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v365, v364, 4));
        v52 = v46;
        v53 = v47;
        v54 = 24;
      }
      else
      {
        v362[0] = NSLocalizedDescriptionKey;
        v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        v363[0] = v48;
        v363[1] = &off_1002FE640;
        v362[1] = CFSTR("Line");
        v362[2] = CFSTR("Method");
        v49 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationErrorCount:reset:"));
        v363[2] = v49;
        v362[3] = NSDebugDescriptionErrorKey;
        v50 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationErrorCount:reset:"), 800);
        v363[3] = v50;
        v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v363, v362, 4));
        v52 = v46;
        v53 = v47;
        v54 = 16;
      }
      v27 = (NSMutableData *)objc_msgSend(v52, "initWithDomain:code:userInfo:", v53, v54, v51);

      v10 = (void *)sel;
      v8 = v44;
      v6 = v9;
    }
  }
  else
  {
    v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v15 = NFLogGetLogger(v14);
    if (v15)
    {
      v16 = (void (*)(uint64_t, const char *, ...))v15;
      v17 = object_getClass(a1);
      v18 = class_isMetaClass(v17);
      v294 = object_getClassName(a1);
      v298 = sel_getName("getAppletMigrationErrorCount:reset:");
      v19 = 45;
      if (v18)
        v19 = 43;
      v16(3, "%c[%{public}s %{public}s]:%i Failed to select ISD: %{public}@", v19, v294, v298, 796, v9);
    }
    v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v21 = NFSharedLogGetLogger(v20);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = object_getClass(a1);
      if (class_isMetaClass(v23))
        v24 = 43;
      else
        v24 = 45;
      v25 = object_getClassName(a1);
      v26 = sel_getName("getAppletMigrationErrorCount:reset:");
      *(_DWORD *)buf = 67110146;
      v334 = v24;
      v335 = 2082;
      v336 = v25;
      v337 = 2082;
      v338 = v26;
      v339 = 1024;
      v340 = 796;
      v341 = 2114;
      *(_QWORD *)v342 = v9;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select ISD: %{public}@", buf, 0x2Cu);
    }

    if (v9)
    {
      v27 = v9;
      v10 = v6;
      v6 = v27;
    }
    else
    {
      v55 = objc_alloc((Class)NSError);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v366[0] = NSLocalizedDescriptionKey;
      v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v367[0] = v56;
      v367[1] = &off_1002FE628;
      v366[1] = CFSTR("Line");
      v366[2] = CFSTR("Method");
      v57 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationErrorCount:reset:"));
      v367[2] = v57;
      v366[3] = NSDebugDescriptionErrorKey;
      v58 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationErrorCount:reset:"), 797);
      v367[3] = v58;
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v367, v366, 4));
      v27 = (NSMutableData *)objc_msgSend(v55, "initWithDomain:code:userInfo:", v10, 16, v59);

    }
  }
LABEL_134:

  return v27;
}

id sub_1000A3258(void *a1, _QWORD *a2)
{
  void *v4;
  id v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  const char *v37;
  const char *v38;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  void (*v44)(uint64_t, const char *, ...);
  objc_class *v45;
  _BOOL4 v46;
  const char *v47;
  const char *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  NSObject *v53;
  objc_class *v54;
  int v55;
  const char *v56;
  const char *v57;
  void *v58;
  id v59;
  id v60;
  void *v61;
  void *v62;
  void **v63;
  NSErrorUserInfoKey *v64;
  void *v65;
  uint64_t v66;
  void (*v67)(uint64_t, const char *, ...);
  objc_class *v68;
  _BOOL4 v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  objc_class *v75;
  int v76;
  const char *v77;
  const char *v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void (*v85)(uint64_t, const char *, ...);
  objc_class *v86;
  _BOOL4 v87;
  const char *v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  NSObject *v93;
  objc_class *v94;
  int v95;
  const char *v96;
  const char *v97;
  unsigned int v98;
  void *v99;
  id v100;
  unsigned int v101;
  void *v102;
  void *v103;
  const char *v104;
  const char *v105;
  id v106;
  uint64_t v107;
  id v108;
  id v109;
  const __CFString *v110;
  void *v111;
  NSErrorUserInfoKey v112;
  void *v113;
  uint8_t buf[4];
  int v115;
  __int16 v116;
  const char *v117;
  __int16 v118;
  const char *v119;
  __int16 v120;
  int v121;
  __int16 v122;
  uint64_t v123;
  NSErrorUserInfoKey v124;
  void *v125;
  NSErrorUserInfoKey v126;
  void *v127;

  if (a1)
  {
    if (qword_10032A948)
    {
      v4 = 0;
      v5 = 0;
LABEL_4:
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v8 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("getAndResetLPEMCounter:");
        v13 = 45;
        if (isMetaClass)
          v13 = 43;
        v8(6, "%c[%{public}s %{public}s]:%i LPEM counter = %ld", v13, ClassName, Name, 1032, qword_10032A948);
      }
      v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v15 = NFSharedLogGetLogger(v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = object_getClass(a1);
        if (class_isMetaClass(v17))
          v18 = 43;
        else
          v18 = 45;
        v19 = object_getClassName(a1);
        v20 = sel_getName("getAndResetLPEMCounter:");
        *(_DWORD *)buf = 67110146;
        v115 = v18;
        v116 = 2082;
        v117 = v19;
        v118 = 2082;
        v119 = v20;
        v120 = 1024;
        v121 = 1032;
        v122 = 2048;
        v123 = qword_10032A948;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i LPEM counter = %ld", buf, 0x2Cu);
      }

      v21 = 0;
      if (a2)
        *a2 = qword_10032A948;
      goto LABEL_15;
    }
    v109 = 0;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "selectCRSWithError:", &v109));
    v23 = v109;
    if (v23)
    {
      v24 = v23;
      v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v26 = NFLogGetLogger(v25);
      if (v26)
      {
        v27 = (void (*)(uint64_t, const char *, ...))v26;
        v28 = object_getClass(a1);
        v29 = class_isMetaClass(v28);
        v30 = object_getClassName(a1);
        v104 = sel_getName("getAndResetLPEMCounter:");
        v31 = 45;
        if (v29)
          v31 = 43;
        v27(3, "%c[%{public}s %{public}s]:%i Failed to select CRS", v31, v30, v104, 997);
      }
      v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v33 = NFSharedLogGetLogger(v32);
      v34 = objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        v35 = object_getClass(a1);
        if (class_isMetaClass(v35))
          v36 = 43;
        else
          v36 = 45;
        v37 = object_getClassName(a1);
        v38 = sel_getName("getAndResetLPEMCounter:");
        *(_DWORD *)buf = 67109890;
        v115 = v36;
        v116 = 2082;
        v117 = v37;
        v118 = 2082;
        v119 = v38;
        v120 = 1024;
        v121 = 997;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS", buf, 0x22u);
      }

      v5 = v24;
      v21 = v5;
      goto LABEL_27;
    }
    v108 = 0;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 243, 3, 2, 0, &v108));
    v5 = v108;

    if (!v4)
    {
      v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v66 = NFLogGetLogger(v65);
      if (v66)
      {
        v67 = (void (*)(uint64_t, const char *, ...))v66;
        v68 = object_getClass(a1);
        v69 = class_isMetaClass(v68);
        v70 = object_getClassName(a1);
        v105 = sel_getName("getAndResetLPEMCounter:");
        v71 = 45;
        if (v69)
          v71 = 43;
        v67(3, "%c[%{public}s %{public}s]:%i Failed to query LPEM counter", v71, v70, v105, 1009);
      }
      v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v73 = NFSharedLogGetLogger(v72);
      v74 = objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        v75 = object_getClass(a1);
        if (class_isMetaClass(v75))
          v76 = 43;
        else
          v76 = 45;
        v77 = object_getClassName(a1);
        v78 = sel_getName("getAndResetLPEMCounter:");
        *(_DWORD *)buf = 67109890;
        v115 = v76;
        v116 = 2082;
        v117 = v77;
        v118 = 2082;
        v119 = v78;
        v120 = 1024;
        v121 = 1009;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query LPEM counter", buf, 0x22u);
      }

      v79 = objc_alloc((Class)NSError);
      v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v126 = NSLocalizedDescriptionKey;
      v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
      v127 = v81;
      v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v127, &v126, 1));
      v21 = objc_msgSend(v79, "initWithDomain:code:userInfo:", v80, 6, v82);

      v22 = 0;
      goto LABEL_27;
    }
    if (objc_msgSend(v4, "status") == 36864)
    {
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "response"));
      v41 = objc_msgSend(v40, "length");

      if ((unint64_t)v41 > 1)
      {
        if (a2)
        {
          v100 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "response")));
          v101 = *(unsigned __int16 *)objc_msgSend(v100, "bytes");

          if (v101)
          {
            qword_10032A948 = __rev16(v101);
            v110 = CFSTR("totalLPEMCounter");
            v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:"));
            v111 = v102;
            v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v111, &v110, 1));
            +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", v103);

          }
        }
        goto LABEL_4;
      }
      v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v43 = NFLogGetLogger(v42);
      if (v43)
      {
        v44 = (void (*)(uint64_t, const char *, ...))v43;
        v45 = object_getClass(a1);
        v46 = class_isMetaClass(v45);
        v47 = object_getClassName(a1);
        v48 = sel_getName("getAndResetLPEMCounter:");
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "response"));
        v106 = objc_msgSend(v49, "length");
        v50 = 45;
        if (v46)
          v50 = 43;
        v44(3, "%c[%{public}s %{public}s]:%i Failed to query LPEM counter, invalid length %lu", v50, v47, v48, 1017, v106);

      }
      v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v52 = NFSharedLogGetLogger(v51);
      v53 = objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        v54 = object_getClass(a1);
        if (class_isMetaClass(v54))
          v55 = 43;
        else
          v55 = 45;
        v56 = object_getClassName(a1);
        v57 = sel_getName("getAndResetLPEMCounter:");
        v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "response"));
        v59 = objc_msgSend(v58, "length");
        *(_DWORD *)buf = 67110146;
        v115 = v55;
        v116 = 2082;
        v117 = v56;
        v118 = 2082;
        v119 = v57;
        v120 = 1024;
        v121 = 1017;
        v122 = 2048;
        v123 = (uint64_t)v59;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query LPEM counter, invalid length %lu", buf, 0x2Cu);

      }
      v60 = objc_alloc((Class)NSError);
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v112 = NSLocalizedDescriptionKey;
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
      v113 = v62;
      v63 = &v113;
      v64 = &v112;
    }
    else
    {
      v83 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v84 = NFLogGetLogger(v83);
      if (v84)
      {
        v85 = (void (*)(uint64_t, const char *, ...))v84;
        v86 = object_getClass(a1);
        v87 = class_isMetaClass(v86);
        v88 = object_getClassName(a1);
        v89 = sel_getName("getAndResetLPEMCounter:");
        v107 = objc_msgSend(v4, "status");
        v90 = 45;
        if (v87)
          v90 = 43;
        v85(3, "%c[%{public}s %{public}s]:%i Failed to query LPEM counter, SW = 0x%x", v90, v88, v89, 1013, v107);
      }
      v91 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v92 = NFSharedLogGetLogger(v91);
      v93 = objc_claimAutoreleasedReturnValue(v92);
      if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
      {
        v94 = object_getClass(a1);
        if (class_isMetaClass(v94))
          v95 = 43;
        else
          v95 = 45;
        v96 = object_getClassName(a1);
        v97 = sel_getName("getAndResetLPEMCounter:");
        v98 = objc_msgSend(v4, "status");
        *(_DWORD *)buf = 67110146;
        v115 = v95;
        v116 = 2082;
        v117 = v96;
        v118 = 2082;
        v119 = v97;
        v120 = 1024;
        v121 = 1013;
        v122 = 1024;
        LODWORD(v123) = v98;
        _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query LPEM counter, SW = 0x%x", buf, 0x28u);
      }

      v60 = objc_alloc((Class)NSError);
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v124 = NSLocalizedDescriptionKey;
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
      v125 = v62;
      v63 = &v125;
      v64 = &v124;
    }
    v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v63, v64, 1));
    v21 = objc_msgSend(v60, "initWithDomain:code:userInfo:", v61, 13, v99);

LABEL_15:
    v22 = v4;
LABEL_27:

    return v21;
  }
  return 0;
}

id sub_1000A3C04(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *v12;
  _BOOL4 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  void (*v26)(uint64_t, const char *, ...);
  objc_class *v27;
  _BOOL4 v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  const char *v37;
  const char *v38;
  unsigned int v39;
  unsigned int v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  void *specific;
  uint64_t Logger;
  void (*v63)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  NSObject *v71;
  objc_class *v72;
  int v73;
  const char *v74;
  const char *v75;
  unsigned int v76;
  void *v77;
  NSMutableString *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  id v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  id v95;
  id v96;
  void *v97;
  void *v98;
  uint64_t v99;
  void *i;
  void *v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  id v107;
  id v108;
  void *v109;
  void *v110;
  id v111;
  id v112;
  void *v113;
  id v114;
  id v115;
  const char *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  void *v123;
  uint64_t v124;
  NSMutableString *v125;
  id v126;
  id obj;
  void *v129;
  void *v130;
  uint64_t v131;
  NSMutableData *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  id v141;
  id v142;
  _BYTE v143[128];
  _BYTE v144[128];
  _QWORD v145[4];
  _QWORD v146[4];
  _QWORD v147[4];
  _QWORD v148[4];
  _QWORD v149[4];
  _QWORD v150[4];
  _QWORD v151[4];
  _QWORD v152[4];
  _QWORD v153[4];
  _QWORD v154[4];
  uint8_t buf[4];
  int v156;
  __int16 v157;
  const char *v158;
  __int16 v159;
  const char *v160;
  __int16 v161;
  int v162;
  __int16 v163;
  id v164;

  if (!a1)
    return 0;
  v132 = objc_opt_new(NSMutableData);
  v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269B84, 8);
  v142 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "selectByName:error:", v3, &v142));
  v5 = v142;

  if (v4)
  {
    v130 = v4;
    if (objc_msgSend(v4, "status") == 36864)
    {
      v131 = objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", CFSTR("08AA0400")));
      while (1)
      {
        v141 = v5;
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 202, 0, 254, v131, 0, 0, &v141));
        v7 = v141;

        if (v7)
          break;
        if (!v6)
        {
          v55 = objc_alloc((Class)NSError);
          v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v147[0] = NSLocalizedDescriptionKey;
          v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
          v148[0] = v57;
          v148[1] = &off_1002FE748;
          v147[1] = CFSTR("Line");
          v147[2] = CFSTR("Method");
          v58 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationListAndState:"));
          v148[2] = v58;
          v147[3] = NSDebugDescriptionErrorKey;
          v59 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationListAndState:"), 1282);
          v148[3] = v59;
          v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v148, v147, 4));
          v7 = objc_msgSend(v55, "initWithDomain:code:userInfo:", v56, 13, v60);

          if (!v7)
          {
            v22 = 0;
            goto LABEL_84;
          }
LABEL_38:
          v23 = v7;
          v4 = v130;
          v22 = (void *)v131;
          v5 = v23;
          goto LABEL_88;
        }
        if (objc_msgSend(v6, "status") == 36864)
          goto LABEL_49;
        if (objc_msgSend(v6, "status") != 25360 && objc_msgSend(v6, "status") != 37008)
        {
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = NFLogGetLogger(specific);
          if (Logger)
          {
            v63 = (void (*)(uint64_t, const char *, ...))Logger;
            Class = object_getClass(a1);
            isMetaClass = class_isMetaClass(Class);
            ClassName = object_getClassName(a1);
            Name = sel_getName("getAppletMigrationListAndState:");
            v120 = objc_msgSend(v6, "status");
            v68 = 45;
            if (isMetaClass)
              v68 = 43;
            v63(3, "%c[%{public}s %{public}s]:%i Failed to query, status word is 0x%x", v68, ClassName, Name, 1291, v120);
          }
          v69 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v70 = NFSharedLogGetLogger(v69);
          v71 = objc_claimAutoreleasedReturnValue(v70);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
          {
            v72 = object_getClass(a1);
            if (class_isMetaClass(v72))
              v73 = 43;
            else
              v73 = 45;
            v74 = object_getClassName(a1);
            v75 = sel_getName("getAppletMigrationListAndState:");
            v76 = objc_msgSend(v6, "status");
            *(_DWORD *)buf = 67110146;
            v156 = v73;
            v157 = 2082;
            v158 = v74;
            v159 = 2082;
            v160 = v75;
            v161 = 1024;
            v162 = 1291;
            v163 = 1024;
            LODWORD(v164) = v76;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query, status word is 0x%x", buf, 0x28u);
          }

LABEL_49:
          v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "data"));
          v22 = v132;
          -[NSMutableData appendData:](v132, "appendData:", v77);

          if (v132)
          {
            v4 = v130;
            if (-[NSMutableData length](v132, "length") > 2)
            {
              v78 = objc_opt_new(NSMutableString);
              v79 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithData:](NFTLV, "TLVWithData:", v132));
              v80 = v79;
              if (v79 && objc_msgSend(v79, "tag") == 225)
              {
                v123 = v80;
                v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "value"));
                v82 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithData:](NFTLV, "TLVWithData:", v81));

                if (v82)
                {
                  if (objc_msgSend(v82, "tag") == 79)
                  {
                    v122 = v82;
                    v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "value"));
                    v84 = objc_msgSend(v83, "length");

                    if (v84)
                    {
                      v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "value"));
                      v86 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithData:](NFTLV, "TLVWithData:", v85));

                      v139 = 0u;
                      v140 = 0u;
                      v137 = 0u;
                      v138 = 0u;
                      v121 = v86;
                      obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "children"));
                      v87 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v137, v144, 16);
                      if (v87)
                      {
                        v88 = v87;
                        v89 = *(_QWORD *)v138;
                        v124 = *(_QWORD *)v138;
                        v125 = v78;
                        do
                        {
                          v90 = 0;
                          v126 = v88;
                          do
                          {
                            if (*(_QWORD *)v138 != v89)
                              objc_enumerationMutation(obj);
                            v91 = *(void **)(*((_QWORD *)&v137 + 1) + 8 * (_QWORD)v90);
                            if (objc_msgSend(v91, "tag") == 226)
                            {
                              v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "value"));
                              v93 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithData:](NFTLV, "TLVWithData:", v92));

                              v135 = 0u;
                              v136 = 0u;
                              v133 = 0u;
                              v134 = 0u;
                              v129 = v93;
                              v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "children"));
                              v95 = objc_msgSend(v94, "countByEnumeratingWithState:objects:count:", &v133, v143, 16);
                              if (v95)
                              {
                                v96 = v95;
                                v97 = 0;
                                v98 = 0;
                                v99 = *(_QWORD *)v134;
                                do
                                {
                                  for (i = 0; i != v96; i = (char *)i + 1)
                                  {
                                    if (*(_QWORD *)v134 != v99)
                                      objc_enumerationMutation(v94);
                                    v101 = *(void **)(*((_QWORD *)&v133 + 1) + 8 * (_QWORD)i);
                                    if (v101)
                                    {
                                      if (objc_msgSend(*(id *)(*((_QWORD *)&v133 + 1) + 8 * (_QWORD)i), "tag") == 79)
                                      {
                                        v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "value"));
                                        v103 = objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "NF_asHexString"));

                                        v97 = (void *)v103;
                                      }
                                      if (objc_msgSend(v101, "tag") == 178)
                                      {
                                        v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "value"));
                                        v105 = objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "NF_asHexString"));

                                        v98 = (void *)v105;
                                      }
                                    }
                                  }
                                  v96 = objc_msgSend(v94, "countByEnumeratingWithState:objects:count:", &v133, v143, 16);
                                }
                                while (v96);
                              }
                              else
                              {
                                v97 = 0;
                                v98 = 0;
                              }

                              v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@,"), v98, v97));
                              v78 = v125;
                              v107 = -[NSMutableString stringByAppendingString:](v125, "stringByAppendingString:", v106);

                              v4 = v130;
                              v89 = v124;
                              v88 = v126;
                            }
                            v90 = (char *)v90 + 1;
                          }
                          while (v90 != v88);
                          v88 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v137, v144, 16);
                        }
                        while (v88);
                      }

                      v22 = v132;
                      v82 = v122;
                    }
                  }
                }

                v80 = v123;
              }
              if (-[NSMutableString length](v78, "length"))
                -[NSMutableString deleteCharactersInRange:](v78, "deleteCharactersInRange:", (char *)-[NSMutableString length](v78, "length") - 1, 1);
              else
                v115 = -[NSMutableString stringByAppendingString:](v78, "stringByAppendingString:", &stru_1002ED8A8);
              *a2 = -[NSMutableString mutableCopy](v78, "mutableCopy");

              v23 = 0;
              v5 = (id)v131;
              goto LABEL_88;
            }
LABEL_85:
            v108 = objc_alloc((Class)NSError);
            v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v145[0] = NSLocalizedDescriptionKey;
            v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
            v146[0] = v110;
            v146[1] = &off_1002FE760;
            v145[1] = CFSTR("Line");
            v145[2] = CFSTR("Method");
            v111 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationListAndState:"));
            v146[2] = v111;
            v145[3] = NSDebugDescriptionErrorKey;
            v112 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationListAndState:"), 1303);
            v146[3] = v112;
            v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v146, v145, 4));
            v114 = objc_msgSend(v108, "initWithDomain:code:userInfo:", v109, 13, v113);

            v23 = v114;
            v22 = (void *)v131;
            v5 = v23;
            goto LABEL_88;
          }
LABEL_84:
          v4 = v130;
          goto LABEL_85;
        }
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "response"));
        -[NSMutableData appendData:](v132, "appendData:", v8);

        v5 = 0;
      }

      goto LABEL_38;
    }
    v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v25 = NFLogGetLogger(v24);
    if (v25)
    {
      v26 = (void (*)(uint64_t, const char *, ...))v25;
      v27 = object_getClass(a1);
      v28 = class_isMetaClass(v27);
      v29 = object_getClassName(a1);
      v30 = sel_getName("getAppletMigrationListAndState:");
      v119 = objc_msgSend(v4, "status");
      v31 = 45;
      if (v28)
        v31 = 43;
      v26(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v31, v29, v30, 1263, v119);
    }
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = NFSharedLogGetLogger(v32);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v35 = object_getClass(a1);
      if (class_isMetaClass(v35))
        v36 = 43;
      else
        v36 = 45;
      v37 = object_getClassName(a1);
      v38 = sel_getName("getAppletMigrationListAndState:");
      v39 = objc_msgSend(v4, "status");
      *(_DWORD *)buf = 67110146;
      v156 = v36;
      v157 = 2082;
      v158 = v37;
      v159 = 2082;
      v160 = v38;
      v161 = 1024;
      v162 = 1263;
      v163 = 1024;
      LODWORD(v164) = v39;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
    }

    v40 = objc_msgSend(v4, "status");
    v41 = objc_alloc((Class)NSError);
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v40 == 26277)
    {
      v151[0] = NSLocalizedDescriptionKey;
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Restricted Mode"));
      v152[0] = v43;
      v152[1] = &off_1002FE730;
      v151[1] = CFSTR("Line");
      v151[2] = CFSTR("Method");
      v44 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationListAndState:"));
      v152[2] = v44;
      v151[3] = NSDebugDescriptionErrorKey;
      v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationListAndState:"), 1264);
      v152[3] = v45;
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v152, v151, 4));
      v47 = v41;
      v48 = v42;
      v49 = 24;
    }
    else
    {
      v149[0] = NSLocalizedDescriptionKey;
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v150[0] = v43;
      v150[1] = &off_1002FE730;
      v149[1] = CFSTR("Line");
      v149[2] = CFSTR("Method");
      v44 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationListAndState:"));
      v150[2] = v44;
      v149[3] = NSDebugDescriptionErrorKey;
      v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationListAndState:"), 1264);
      v150[3] = v45;
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v150, v149, 4));
      v47 = v41;
      v48 = v42;
      v49 = 16;
    }
    v23 = objc_msgSend(v47, "initWithDomain:code:userInfo:", v48, v49, v46);

    v22 = v132;
    v4 = v130;
  }
  else
  {
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFLogGetLogger(v9);
    if (v10)
    {
      v11 = (void (*)(uint64_t, const char *, ...))v10;
      v12 = object_getClass(a1);
      v13 = class_isMetaClass(v12);
      v117 = object_getClassName(a1);
      v118 = sel_getName("getAppletMigrationListAndState:");
      v14 = 45;
      if (v13)
        v14 = 43;
      v11(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v14, v117, v118, 1260, v5);
    }
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = object_getClass(a1);
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      v20 = object_getClassName(a1);
      v21 = sel_getName("getAppletMigrationListAndState:");
      *(_DWORD *)buf = 67110146;
      v156 = v19;
      v157 = 2082;
      v158 = v20;
      v159 = 2082;
      v160 = v21;
      v161 = 1024;
      v162 = 1260;
      v163 = 2114;
      v164 = v5;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
    }

    if (v5)
    {
      v5 = v5;
      v22 = v132;
      v23 = v5;
    }
    else
    {
      v50 = objc_alloc((Class)NSError);
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v153[0] = NSLocalizedDescriptionKey;
      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v154[0] = v51;
      v154[1] = &off_1002FE718;
      v153[1] = CFSTR("Line");
      v153[2] = CFSTR("Method");
      v52 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getAppletMigrationListAndState:"));
      v154[2] = v52;
      v153[3] = NSDebugDescriptionErrorKey;
      v53 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getAppletMigrationListAndState:"), 1261);
      v154[3] = v53;
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v154, v153, 4));
      v23 = objc_msgSend(v50, "initWithDomain:code:userInfo:", v22, 16, v54);

      v5 = v132;
    }
  }
LABEL_88:

  return v23;
}

void sub_1000A4F04(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v2);
  objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1000A4F50(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  os_activity_scope_state_s v4;

  v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.reader.burnoutTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v2, &v4);
  os_activity_scope_leave(&v4);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleReaderBurnoutProtectionTimer");

}

void sub_1000A4FC4(uint64_t a1)
{
  NSObject *v2;
  _BYTE *WeakRetained;
  void *v4;
  os_activity_scope_state_s v5;

  v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.reader.burnoutDebounceTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v5.opaque[0] = 0;
  v5.opaque[1] = 0;
  os_activity_scope_enter(v2, &v5);
  os_activity_scope_leave(&v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    WeakRetained[60] = 0;
    objc_msgSend(WeakRetained, "_handleReaderBurnoutProtectionDebounceTimer");
  }

}

void sub_1000A5044(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "thermalStateChanged:", a2);
    WeakRetained = v4;
  }

}

uint64_t sub_1000A6EA8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;

  v3 = a2;
  objc_opt_self(a1);
  v4 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269BD8, 7);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "NF_asHexString"));

  v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269BDF, 7);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "NF_asHexString"));

  v8 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269BE6, 9);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "NF_asHexString"));

  if ((objc_msgSend(v3, "hasPrefix:", v5) & 1) != 0
    || (objc_msgSend(v3, "hasPrefix:", v7) & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    v10 = (uint64_t)objc_msgSend(v3, "hasPrefix:", v9);
  }

  return v10;
}

void sub_1000A6FB8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _BOOL4 v15;
  void *v16;
  uint64_t v17;
  void (*v18)(uint64_t, const char *, ...);
  objc_class *v19;
  _BOOL4 v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  objc_class *v25;
  int v26;
  __CFString *v27;
  _UNKNOWN **v28;
  __CFString *v29;
  void *v30;
  uint64_t v31;
  void (*v32)(uint64_t, const char *, ...);
  objc_class *v33;
  _BOOL4 v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  objc_class *v40;
  int v41;
  const char *v42;
  void *v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, ...);
  objc_class *v46;
  _BOOL4 v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  objc_class *v52;
  int v53;
  void *v54;
  void *specific;
  uint64_t Logger;
  objc_class *Class;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  NSObject *v62;
  objc_class *v63;
  int v64;
  const char *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  char isKindOfClass;
  void *v73;
  uint64_t v74;
  char v75;
  void *v76;
  uint64_t v77;
  char v78;
  void *v79;
  void *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *Name;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *v87;
  void (*v88)(uint64_t, const char *, ...);
  int v89;
  _BOOL4 v90;
  uint64_t v91;
  void *v92;
  _QWORD v93[8];
  _QWORD v94[8];
  uint8_t buf[4];
  int v96;
  __int16 v97;
  const char *v98;
  __int16 v99;
  const char *v100;
  __int16 v101;
  int v102;
  __int16 v103;
  void *v104;
  __int16 v105;
  int v106;

  v7 = a2;
  v8 = (void *)objc_opt_self(a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("EventType")));
  if (v10)
  {
    v11 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
    {
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
      if (v12 && (v13 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v12, v13) & 1) != 0))
      {
        if (sub_1000A6EA8((uint64_t)NFUnifiedAccessTransactionCALogger, v12))
        {
          v15 = (_DWORD)a3 == 6 || (a3 & 0xFFFFFFFE) == 4;
          v90 = v15;
          if ((objc_msgSend(v10, "isEqualToString:", CFSTR("ActivityTimeout")) & 1) != 0)
          {
            v91 = 65278;
          }
          else
          {
            v91 = ((_DWORD)a3 << 8);
            v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("ptaTransactionMode")));

            if (v54)
            {
              specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              Logger = NFLogGetLogger(specific);
              if (Logger)
              {
                v88 = (void (*)(uint64_t, const char *, ...))Logger;
                Class = object_getClass(v8);
                isMetaClass = class_isMetaClass(Class);
                ClassName = object_getClassName(v8);
                Name = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
                v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("ptaTransactionMode")));
                v59 = 45;
                if (isMetaClass)
                  v59 = 43;
                v88(6, "%c[%{public}s %{public}s]:%i transactionMode = %{public}@, transactionType = 0x%0X", v59, ClassName, Name, 152, v58, a3);

              }
              v60 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v61 = NFSharedLogGetLogger(v60);
              v62 = objc_claimAutoreleasedReturnValue(v61);
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              {
                v63 = object_getClass(v8);
                if (class_isMetaClass(v63))
                  v64 = 43;
                else
                  v64 = 45;
                v89 = v64;
                v87 = object_getClassName(v8);
                v65 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
                v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("ptaTransactionMode")));
                *(_DWORD *)buf = 67110402;
                v96 = v89;
                v97 = 2082;
                v98 = v87;
                v99 = 2082;
                v100 = v65;
                v101 = 1024;
                v102 = 152;
                v103 = 2114;
                v104 = v66;
                v105 = 1024;
                v106 = a3;
                _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i transactionMode = %{public}@, transactionType = 0x%0X", buf, 0x32u);

              }
              v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("ptaTransactionMode")));
              v91 = objc_msgSend(v67, "charValue") | (unint64_t)v91;

            }
          }
          if (objc_msgSend(v10, "isEqualToString:", CFSTR("EndEvent")))
          {
            v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("result")));

            if (v68)
            {
              v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("result")));
              a4 = (int)objc_msgSend(v69, "intValue");

            }
          }
          v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("HomeKitManufacturer")));
          v71 = objc_opt_class(NSString);
          isKindOfClass = objc_opt_isKindOfClass(v70, v71);

          if ((isKindOfClass & 1) != 0)
            v29 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("HomeKitManufacturer")));
          else
            v29 = CFSTR("Unknown");
          v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("HomeKitModel")));
          v74 = objc_opt_class(NSString);
          v75 = objc_opt_isKindOfClass(v73, v74);

          if ((v75 & 1) != 0)
            v27 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("HomeKitModel")));
          else
            v27 = CFSTR("Unknown");
          v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("keyType")));
          v77 = objc_opt_class(NSNumber);
          v78 = objc_opt_isKindOfClass(v76, v77);

          if ((v78 & 1) != 0)
            v28 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("keyType")));
          else
            v28 = &off_1002FE790;
          v93[0] = CFSTR("endEventEndTime");
          v93[1] = CFSTR("primaryAID");
          v94[0] = v9;
          v94[1] = v12;
          v93[2] = CFSTR("transactionType");
          v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v91));
          v94[2] = v92;
          v93[3] = CFSTR("errorCode");
          v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a4));
          v94[3] = v79;
          v93[4] = CFSTR("eventIsAStepUpEvent");
          v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v90));
          v94[4] = v80;
          v94[5] = v29;
          v93[5] = CFSTR("manufacturer");
          v93[6] = CFSTR("modelInfo");
          v93[7] = CFSTR("keyType");
          v94[6] = v27;
          v94[7] = v28;
          v39 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v94, v93, 8));

          sub_1000A78F0((uint64_t)NFUnifiedAccessTransactionCALogger, v39, 0);
          goto LABEL_35;
        }
        v43 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v44 = NFLogGetLogger(v43);
        if (v44)
        {
          v45 = (void (*)(uint64_t, const char *, ...))v44;
          v46 = object_getClass(v8);
          v47 = class_isMetaClass(v46);
          v48 = object_getClassName(v8);
          v83 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
          v49 = 45;
          if (v47)
            v49 = 43;
          v45(6, "%c[%{public}s %{public}s]:%i No valid Unified Access Identifiers", v49, v48, v83, 188);
        }
        v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v51 = NFSharedLogGetLogger(v50);
        v39 = objc_claimAutoreleasedReturnValue(v51);
        if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
LABEL_34:
          v27 = CFSTR("Unknown");
          v28 = &off_1002FE790;
          v29 = CFSTR("Unknown");
LABEL_35:

          goto LABEL_36;
        }
        v52 = object_getClass(v8);
        if (class_isMetaClass(v52))
          v53 = 43;
        else
          v53 = 45;
        *(_DWORD *)buf = 67109890;
        v96 = v53;
        v97 = 2082;
        v98 = object_getClassName(v8);
        v99 = 2082;
        v100 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
        v101 = 1024;
        v102 = 188;
        v42 = "%c[%{public}s %{public}s]:%i No valid Unified Access Identifiers";
      }
      else
      {
        v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v31 = NFLogGetLogger(v30);
        if (v31)
        {
          v32 = (void (*)(uint64_t, const char *, ...))v31;
          v33 = object_getClass(v8);
          v34 = class_isMetaClass(v33);
          v35 = object_getClassName(v8);
          v82 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
          v36 = 45;
          if (v34)
            v36 = 43;
          v32(6, "%c[%{public}s %{public}s]:%i No valid Identifier", v36, v35, v82, 137);
        }
        v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v38 = NFSharedLogGetLogger(v37);
        v39 = objc_claimAutoreleasedReturnValue(v38);
        if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          goto LABEL_34;
        v40 = object_getClass(v8);
        if (class_isMetaClass(v40))
          v41 = 43;
        else
          v41 = 45;
        *(_DWORD *)buf = 67109890;
        v96 = v41;
        v97 = 2082;
        v98 = object_getClassName(v8);
        v99 = 2082;
        v100 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
        v101 = 1024;
        v102 = 137;
        v42 = "%c[%{public}s %{public}s]:%i No valid Identifier";
      }
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v42, buf, 0x22u);
      goto LABEL_34;
    }
  }
  v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v17 = NFLogGetLogger(v16);
  if (v17)
  {
    v18 = (void (*)(uint64_t, const char *, ...))v17;
    v19 = object_getClass(v8);
    v20 = class_isMetaClass(v19);
    v21 = object_getClassName(v8);
    v81 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
    v22 = 45;
    if (v20)
      v22 = 43;
    v18(6, "%c[%{public}s %{public}s]:%i No event from ATL, HCI didn't contain a relevant message", v22, v21, v81, 131);
  }
  v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v24 = NFSharedLogGetLogger(v23);
  v12 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v25 = object_getClass(v8);
    if (class_isMetaClass(v25))
      v26 = 43;
    else
      v26 = 45;
    *(_DWORD *)buf = 67109890;
    v96 = v26;
    v97 = 2082;
    v98 = object_getClassName(v8);
    v99 = 2082;
    v100 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
    v101 = 1024;
    v102 = 131;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No event from ATL, HCI didn't contain a relevant message", buf, 0x22u);
  }
  v27 = CFSTR("Unknown");
  v28 = &off_1002FE790;
  v29 = CFSTR("Unknown");
LABEL_36:

}

void sub_1000A78F0(uint64_t a1, void *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  __CFString *v20;
  _UNKNOWN **v21;
  _UNKNOWN **v22;
  _UNKNOWN **v23;
  __CFString *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  char v54;
  void *v55;
  unsigned int v56;
  int v57;
  void *v58;
  uint64_t v59;
  char isKindOfClass;
  void *v61;
  uint64_t v62;
  char v63;
  void *v64;
  void *v65;
  uint64_t v66;
  char v67;
  double v68;
  double v69;
  unsigned int v70;
  double v71;
  unint64_t v72;
  NSMutableDictionary *v73;
  void *v74;
  void *v75;
  void *v76;
  unsigned __int16 v77;
  id v78;
  _BOOL4 v79;
  _BOOL4 v80;
  BOOL v81;
  int v82;
  _BOOL4 v83;
  _UNKNOWN **v84;
  _UNKNOWN **v85;
  _UNKNOWN **v86;
  _UNKNOWN **v87;
  _UNKNOWN **v88;
  _UNKNOWN **v89;
  int v90;
  BOOL v91;
  _UNKNOWN **v92;
  _UNKNOWN **v93;
  void *v94;
  void *v95;
  unsigned __int16 v96;
  id v97;
  id v98;
  _BOOL4 v99;
  BOOL v100;
  int v101;
  _BOOL4 v102;
  _UNKNOWN **v104;
  _UNKNOWN **v105;
  id v106;
  void *v107;
  unsigned int v108;
  _UNKNOWN **v109;
  int v110;
  _UNKNOWN **v111;
  _UNKNOWN **v112;
  _UNKNOWN **v113;
  char v114;
  _UNKNOWN **v115;
  const __CFString *v116;
  const __CFString *v117;
  _UNKNOWN **v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  _UNKNOWN **v123;
  void *v124;
  uint64_t v125;
  _BOOL4 v126;
  const __CFString *v127;
  _UNKNOWN **v128;
  void *v129;
  const __CFString *v130;
  _UNKNOWN **v131;
  id v132;
  const __CFString *v133;
  const __CFString *v134;
  const __CFString *v135;
  const __CFString *v136;
  const __CFString *v137;
  const __CFString *v138;
  _UNKNOWN **v139;
  _UNKNOWN **v140;
  _UNKNOWN **v141;
  _UNKNOWN **v142;
  _UNKNOWN **v143;
  _UNKNOWN **v144;

  v132 = a2;
  v5 = objc_opt_self(a1);
  if (!a3)
  {
    v125 = v5;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "UUIDString"));

    v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("endEventEndTime")));
    if (!v27)
    {
      v19 = 0;
      v57 = 0;
      v56 = 0;
      v21 = &off_1002FE7A8;
      v128 = &off_1002FE7A8;
      v129 = 0;
LABEL_25:
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("manufacturer")));
      v59 = objc_opt_class(NSString);
      isKindOfClass = objc_opt_isKindOfClass(v58, v59);

      if ((isKindOfClass & 1) != 0)
        v127 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("manufacturer")));
      else
        v127 = CFSTR("Unknown");
      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("modelInfo")));
      v62 = objc_opt_class(NSString);
      v63 = objc_opt_isKindOfClass(v61, v62);

      v64 = v129;
      if ((v63 & 1) != 0)
        v130 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("modelInfo")));
      else
        v130 = CFSTR("Unknown");
      v22 = v128;
      v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("keyType")));
      v66 = objc_opt_class(NSNumber);
      v67 = objc_opt_isKindOfClass(v65, v66);

      v131 = &off_1002FE7A8;
      v20 = (__CFString *)v127;
      if ((v67 & 1) != 0)
        v131 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("keyType")));
      if (v57)
      {
        if (qword_10032A950)
        {
          objc_msgSend(v19, "timeIntervalSinceDate:");
          v69 = v68;
        }
        else
        {
          v69 = 0.0;
        }
        if (qword_10032A958)
          v70 = v56;
        else
          v70 = 0;
        if (v70 == 1)
        {
          objc_msgSend((id)qword_10032A958, "timeIntervalSinceDate:", qword_10032A950);
          v72 = (unint64_t)((v69 - v71) * 1000.0);
        }
        else
        {
          v72 = 0;
        }
        v73 = objc_opt_new(NSMutableDictionary);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v73, "setObject:forKeyedSubscript:", v26, CFSTR("transactionUUID"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v73, "setObject:forKeyedSubscript:", v21, CFSTR("transactionType"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v73, "setObject:forKeyedSubscript:", v129, CFSTR("primaryAID"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v73, "setObject:forKeyedSubscript:", v128, CFSTR("errorCode"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v73, "setObject:forKeyedSubscript:", v127, CFSTR("manufacturer"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v73, "setObject:forKeyedSubscript:", v130, CFSTR("modelInfo"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v73, "setObject:forKeyedSubscript:", v131, CFSTR("keyType"));
        if (qword_10032A950 || objc_msgSend(v128, "integerValue") != (id)5)
        {
          v124 = v19;
          v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (unint64_t)(v69 * 1000.0)));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v73, "setObject:forKeyedSubscript:", v74, CFSTR("totalDuration"));

          v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v72));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v73, "setObject:forKeyedSubscript:", v75, CFSTR("stepUpDuration"));

          v76 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
          objc_msgSend(v76, "postCAEventFor:eventInput:", CFSTR("com.apple.sts.unifiedAccessTransactionEvent"), v73);

          v77 = (unsigned __int16)objc_msgSend(v21, "integerValue");
          v78 = objc_msgSend(v128, "integerValue");
          objc_opt_self(v125);
          v79 = v77 != 1;
          v80 = v78 != (id)64;
          v81 = (v77 & 0xFE00) == 0x400 || (v77 & 0xFF00) == 1536;
          v82 = v81;
          v83 = v81 || v77 != 1;
          if (v81)
            v80 = 1;
          if (v80)
            v84 = &off_1002FE7A8;
          else
            v84 = &off_1002FE7C0;
          if ((v82 & (v78 == 0)) != 0)
            v85 = &off_1002FE7C0;
          else
            v85 = v84;
          v133 = CFSTR("totalStepUpTxAttempted");
          v134 = CFSTR("totalSuccessfulStepUpTx");
          if (v82)
            v86 = &off_1002FE7C0;
          else
            v86 = &off_1002FE7A8;
          if (v82)
            v87 = v85;
          else
            v87 = &off_1002FE7A8;
          v139 = v86;
          v140 = v87;
          if (v83)
            v88 = &off_1002FE7A8;
          else
            v88 = &off_1002FE7C0;
          if (v83)
            v89 = &off_1002FE7A8;
          else
            v89 = v85;
          v135 = CFSTR("totalExpeditedFastTxAttempted");
          v136 = CFSTR("totalSuccessfulExpeditedFastTx");
          v90 = v82 ^ 1;
          v141 = v88;
          v142 = v89;
          v91 = (v79 & v90) == 0;
          if ((v79 & v90) != 0)
            v92 = &off_1002FE7C0;
          else
            v92 = &off_1002FE7A8;
          v137 = CFSTR("totalExpeditedStandardTxAttempted");
          v138 = CFSTR("totalSuccessfulExpeditedStandardTx");
          if (v91)
            v93 = &off_1002FE7A8;
          else
            v93 = v85;
          v143 = v92;
          v144 = v93;
          v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v139, &v133, 6));
          v95 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
          objc_msgSend(v95, "postCAEventFor:eventInput:", CFSTR("com.apple.sts.dailyUnifiedAccessStatistics"), v94);

          v123 = v21;
          v96 = (unsigned __int16)objc_msgSend(v21, "integerValue");
          v97 = objc_msgSend(v128, "integerValue");
          v98 = v129;
          objc_opt_self(v125);
          v99 = v96 != 1;
          v100 = (v96 & 0xFE00) == 0x400 || (v96 & 0xFF00) == 1536;
          v101 = v100;
          v102 = v100 || v96 != 1;
          v126 = v102;
          if (v100 || v97 != (id)64)
            v104 = &off_1002FE7A8;
          else
            v104 = &off_1002FE7C0;
          if ((v101 & (v97 == 0)) != 0)
            v105 = &off_1002FE7C0;
          else
            v105 = v104;
          v106 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269BE6, 9);
          v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "NF_asHexString"));
          v108 = objc_msgSend(v98, "hasPrefix:", v107);

          if (v101)
            v109 = &off_1002FE7C0;
          else
            v109 = &off_1002FE7A8;
          v110 = v101 ^ 1;
          if (v101)
            v111 = v105;
          else
            v111 = &off_1002FE7A8;
          if (v126)
            v112 = &off_1002FE7A8;
          else
            v112 = &off_1002FE7C0;
          if (v126)
            v113 = &off_1002FE7A8;
          else
            v113 = v105;
          v114 = v99 & v110;
          if ((v99 & v110) != 0)
            v115 = &off_1002FE7C0;
          else
            v115 = &off_1002FE7A8;
          if (v108)
          {
            v133 = CFSTR("aliroStepUpTxAttempted");
            v134 = CFSTR("aliroSuccessfulStepUpTx");
            v139 = v109;
            v140 = v111;
            v135 = CFSTR("aliroFastTxAttempted");
            v136 = CFSTR("aliroSuccessfulFastTx");
            v141 = v112;
            v142 = v113;
            v116 = CFSTR("aliroStandardTxAttempted");
            v117 = CFSTR("aliroSuccessfulStandardTx");
          }
          else
          {
            v133 = CFSTR("uaStepUpTxAttempted");
            v134 = CFSTR("uaSuccessfulStepUpTx");
            v139 = v109;
            v140 = v111;
            v135 = CFSTR("uaFastTxAttempted");
            v136 = CFSTR("uaSuccessfulFastTx");
            v141 = v112;
            v142 = v113;
            v116 = CFSTR("uaStandardTxAttempted");
            v117 = CFSTR("uaSuccessfulStandardTx");
          }
          v137 = v116;
          v138 = v117;
          if ((v114 & 1) != 0)
            v118 = v105;
          else
            v118 = &off_1002FE7A8;
          v143 = v115;
          v144 = v118;
          v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v139, &v133, 6));
          v120 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
          objc_msgSend(v120, "postCAEventFor:eventInput:", CFSTR("com.apple.sts.dailyHomeHydraTransactionStatistics"), v119);

          v19 = v124;
          v21 = v123;
          v22 = v128;
          v64 = v129;
          v20 = (__CFString *)v127;
        }

      }
      v121 = (void *)qword_10032A950;
      qword_10032A950 = 0;

      v122 = (void *)qword_10032A958;
      qword_10032A958 = 0;

      v24 = (__CFString *)v130;
      v23 = v131;
      goto LABEL_123;
    }
    v28 = (void *)v27;
    v29 = v26;
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("endEventEndTime")));
    v31 = objc_opt_class(NSDate);
    v32 = objc_opt_isKindOfClass(v30, v31);

    if ((v32 & 1) != 0)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("endEventEndTime")));
      v33 = objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("primaryAID")));
      if (v33)
      {
        v34 = (void *)v33;
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("primaryAID")));
        v36 = objc_opt_class(NSString);
        v37 = objc_opt_isKindOfClass(v35, v36);

        if ((v37 & 1) != 0)
        {
          v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("primaryAID")));
          v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("transactionType")));
          v129 = (void *)v38;
          if (v39)
          {
            v40 = (void *)v39;
            v41 = v19;
            v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("transactionType")));
            v43 = objc_opt_class(NSNumber);
            v44 = objc_opt_isKindOfClass(v42, v43);

            if ((v44 & 1) != 0)
            {
              v21 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("transactionType")));
              v45 = objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("errorCode")));
              v26 = v29;
              if (v45
                && (v46 = (void *)v45,
                    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("errorCode"))),
                    v48 = objc_opt_class(NSNumber),
                    v49 = objc_opt_isKindOfClass(v47, v48),
                    v47,
                    v46,
                    (v49 & 1) != 0))
              {
                v128 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("errorCode")));
                v50 = objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("eventIsAStepUpEvent")));
                v19 = v41;
                if (v50
                  && (v51 = (void *)v50,
                      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("eventIsAStepUpEvent"))),
                      v53 = objc_opt_class(NSNumber),
                      v54 = objc_opt_isKindOfClass(v52, v53),
                      v52,
                      v51,
                      (v54 & 1) != 0))
                {
                  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("eventIsAStepUpEvent")));
                  v56 = objc_msgSend(v55, "BOOLValue");

                  v57 = 1;
                }
                else
                {
                  v57 = 0;
                  v56 = 0;
                }
              }
              else
              {
                v57 = 0;
                v56 = 0;
                v128 = &off_1002FE7A8;
                v19 = v41;
              }
              goto LABEL_25;
            }
            v57 = 0;
            v56 = 0;
            v21 = &off_1002FE7A8;
            v128 = &off_1002FE7A8;
            v19 = v41;
            goto LABEL_24;
          }
LABEL_23:
          v57 = 0;
          v56 = 0;
          v21 = &off_1002FE7A8;
          v128 = &off_1002FE7A8;
LABEL_24:
          v26 = v29;
          goto LABEL_25;
        }
      }
    }
    else
    {
      v19 = 0;
    }
    v129 = 0;
    goto LABEL_23;
  }
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("startEventStartTime")));
  if (v6)
  {
    v7 = (void *)v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("startEventStartTime")));
    v9 = objc_opt_class(NSDate);
    v10 = objc_opt_isKindOfClass(v8, v9);

    if ((v10 & 1) != 0)
    {
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("startEventStartTime")));
      v12 = (void *)qword_10032A950;
      qword_10032A950 = v11;

    }
  }
  v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("stepUpEventStartTime")));
  if (v13)
  {
    v14 = (void *)v13;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("stepUpEventStartTime")));
    v16 = objc_opt_class(NSDate);
    v17 = objc_opt_isKindOfClass(v15, v16);

    if ((v17 & 1) != 0)
    {
      v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("stepUpEventStartTime")));
      v19 = (void *)qword_10032A958;
      v20 = CFSTR("Unknown");
      qword_10032A958 = v18;
      v21 = &off_1002FE7A8;
      v22 = &off_1002FE7A8;
      v23 = &off_1002FE7A8;
      v24 = CFSTR("Unknown");
LABEL_123:

      goto LABEL_124;
    }
  }
  v20 = CFSTR("Unknown");
  v21 = &off_1002FE7A8;
  v22 = &off_1002FE7A8;
  v23 = &off_1002FE7A8;
  v24 = CFSTR("Unknown");
LABEL_124:

}

uint64_t sub_1000A83FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  char isKindOfClass;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  id v21;
  int v22;
  void *v23;
  uint64_t v24;
  char v25;
  void *v26;
  uint64_t v27;
  char v28;
  void *v29;
  void *v30;
  void *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
  v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269BE6, 9);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "NF_asHexString"));
  v7 = objc_msgSend(v4, "hasPrefix:", v6);

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("ECP2Info")));
    v9 = objc_opt_class(NSDictionary);
    isKindOfClass = objc_opt_isKindOfClass(v8, v9);

    if ((isKindOfClass & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("ECP2Info")));
      v12 = v11;
      if (v11)
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("TCIs")));
      else
        v13 = 0;

    }
    else
    {
      v13 = 0;
    }
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v15 = v13;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    if (v16)
    {
      v17 = v16;
      LODWORD(v14) = 0;
      v18 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(_QWORD *)v34 != v18)
            objc_enumerationMutation(v15);
          v20 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i);
          v21 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269BEF, 3);
          LODWORD(v20) = objc_msgSend(v20, "isEqual:", v21);

          if ((_DWORD)v20)
            v22 = 0x10000;
          else
            v22 = 0x20000;
          v14 = v22 | v14;
        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      }
      while (v17);
    }
    else
    {
      v14 = 0;
    }

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("readerIdentifier")));
    v24 = objc_opt_class(NSString);
    v25 = objc_opt_isKindOfClass(v23, v24);

    if ((v25 & 1) != 0)
    {
      v14 = v14 | 1;

    }
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("associatedReaders"), v4));
    v27 = objc_opt_class(NSDictionary);
    v28 = objc_opt_isKindOfClass(v26, v27);

    if ((v28 & 1) != 0)
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("associatedReaders")));
      v30 = v29;
      if (v29)
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKeyedSubscript:", CFSTR("associatedReaderIdentifiers")));
        if (v31)
          v14 = v14 | 2;
        else
          v14 = v14;

      }
    }

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_1000A8738(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  objc_opt_self(a1);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  objc_msgSend(v4, "postCAEventFor:eventInput:", CFSTR("com.apple.sts.dailyUnifiedAccessDeviceStatistics"), v3);

}

void sub_1000A8798(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  objc_opt_self(a1);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  objc_msgSend(v4, "postCAEventFor:eventInput:", CFSTR("com.apple.sts.dailyHomeHydraDeviceStatistics"), v3);

}

void sub_1000A87F8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  objc_opt_self(a1);
  v3 = v8;
  if (v8)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
    if (v4)
    {
      v5 = objc_opt_class(NSString);
      if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
      {
        if (sub_1000A6EA8((uint64_t)NFUnifiedAccessTransactionCALogger, v4))
        {
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("EventType")));
          v7 = objc_opt_class(NSString);
          if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0
            && objc_msgSend(v6, "isEqualToString:", CFSTR("ActivityTimeout")))
          {
            sub_1000A6FB8((uint64_t)NFUnifiedAccessTransactionCALogger, v8, 65278, 5);
          }

        }
      }
    }

    v3 = v8;
  }

}

id sub_1000A8D50(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2[18];
  if (v3)
  {
    (*(void (**)(_QWORD))(v3 + 16))(v2[18]);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 144);
    *(_QWORD *)(v4 + 144) = 0;

    v2 = *(_QWORD **)(a1 + 32);
  }
  return objc_msgSend(v2, "endSession:", &stru_1002E7810);
}

void sub_1000A8E6C(uint64_t a1)
{
  NSMutableData *v2;
  void *v3;
  NSMutableData *v4;
  __int16 v5;
  char v6;
  __int16 v7;
  __int16 v8;
  char v9;
  __int16 v10;

  if (a1)
  {
    v10 = 3840;
    v9 = 32;
    v8 = -256;
    v7 = -256;
    v2 = objc_opt_new(NSMutableData);
    v6 = 4;
    -[NSMutableData appendBytes:length:](v2, "appendBytes:length:", &v6, 1);
    v6 = 6;
    -[NSMutableData appendBytes:length:](v2, "appendBytes:length:", &v6, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", CFSTR("E104")));
    -[NSMutableData appendData:](v2, "appendData:", v3);
    v5 = bswap32(*(unsigned __int16 *)(a1 + 30)) >> 16;
    -[NSMutableData appendBytes:length:](v2, "appendBytes:length:", &v5, 2);
    v6 = 0;
    -[NSMutableData appendBytes:length:](v2, "appendBytes:length:", &v6, 1);
    v6 = *(_BYTE *)(a1 + 29) - 1;
    -[NSMutableData appendBytes:length:](v2, "appendBytes:length:", &v6, 1);
    v4 = objc_opt_new(NSMutableData);
    -[NSMutableData appendBytes:length:](v4, "appendBytes:length:", &v10, 2);
    -[NSMutableData appendBytes:length:](v4, "appendBytes:length:", &v9, 1);
    -[NSMutableData appendBytes:length:](v4, "appendBytes:length:", &v8, 2);
    -[NSMutableData appendBytes:length:](v4, "appendBytes:length:", &v7, 2);
    -[NSMutableData appendData:](v4, "appendData:", v2);
    objc_msgSend(*(id *)(a1 + 16), "setObject:forKey:", v4, CFSTR("E103"));

  }
}

void sub_1000A9E0C(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  void *v15;
  uint64_t v16;
  void (*v17)(uint64_t, const char *, ...);
  objc_class *v18;
  _BOOL4 v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  const char *v27;
  const char *v28;
  id v29;
  const char *ClassName;
  const char *Name;
  const char *v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  id v42;

  v3 = a2;
  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("setNdefData:");
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 354, v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass((id)a1);
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      *(_DWORD *)buf = 67110146;
      v34 = v14;
      v35 = 2082;
      v36 = object_getClassName((id)a1);
      v37 = 2082;
      v38 = sel_getName("setNdefData:");
      v39 = 1024;
      v40 = 354;
      v41 = 2114;
      v42 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
    }

    if ((unint64_t)objc_msgSend(v3, "length") <= 0x2000)
    {
      if (v3)
      {
        buf[0] = (unsigned __int16)objc_msgSend(v3, "length") >> 8;
        buf[1] = objc_msgSend(v3, "length");
        v29 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", buf, 2);
        objc_msgSend(v29, "appendData:", v3);
        objc_msgSend(*(id *)(a1 + 16), "setObject:forKey:", v29, CFSTR("E104"));
        *(_WORD *)(a1 + 32) = (unsigned __int16)objc_msgSend(v3, "length");

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 16), "removeObjectForKey:", CFSTR("E104"));
      }
      sub_1000A8E6C(a1);
    }
    else
    {
      v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v16 = NFLogGetLogger(v15);
      if (v16)
      {
        v17 = (void (*)(uint64_t, const char *, ...))v16;
        v18 = object_getClass((id)a1);
        v19 = class_isMetaClass(v18);
        v20 = object_getClassName((id)a1);
        v32 = sel_getName("setNdefData:");
        v21 = 45;
        if (v19)
          v21 = 43;
        v17(3, "%c[%{public}s %{public}s]:%i Invalid tag size", v21, v20, v32, 357);
      }
      v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v23 = NFSharedLogGetLogger(v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = object_getClass((id)a1);
        if (class_isMetaClass(v25))
          v26 = 43;
        else
          v26 = 45;
        v27 = object_getClassName((id)a1);
        v28 = sel_getName("setNdefData:");
        *(_DWORD *)buf = 67109890;
        v34 = v26;
        v35 = 2082;
        v36 = v27;
        v37 = 2082;
        v38 = v28;
        v39 = 1024;
        v40 = 357;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid tag size", buf, 0x22u);
      }

    }
  }

}

NSData *sub_1000AA15C(id *a1)
{
  NSData *v1;
  void *v2;
  void *v3;
  NSData *v4;

  v1 = (NSData *)a1;
  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[2], "objectForKey:", CFSTR("E104")));
    v3 = v2;
    if (LOWORD(v1[4].super.isa))
      v4 = (NSData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "subdataWithRange:", 2));
    else
      v4 = objc_opt_new(NSData);
    v1 = v4;

  }
  return v1;
}

NFTCCChecker *sub_1000AA1F8(uint64_t a1)
{
  void *v1;
  NFTCCChecker *v2;
  __CFString **v3;
  __CFString *v4;
  NFTCCChecker *v5;
  dispatch_queue_global_t global_queue;
  uint64_t v7;
  OS_dispatch_queue *workQueue;
  void *specific;
  uint64_t Logger;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  void *v24;
  void *v25;
  const char *Name;
  _BYTE v27[28];
  __int16 v28;
  int v29;

  v1 = (void *)objc_opt_self(a1);
  if (!qword_10032A960)
  {
    *(_OWORD *)v27 = off_1002E7858;
    *(_QWORD *)&v27[16] = 0;
    qword_10032A960 = _sl_dlopen(v27, 0);
  }
  if (qword_10032A960 && sub_1000AAD04())
  {
    v2 = [NFTCCChecker alloc];
    v3 = (__CFString **)sub_1000AAD04();
    if (!v3)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CFStringRef getkTCCServiceContactlessAccess(void)"));
      objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, CFSTR("NFTCCChecker.m"), 21, CFSTR("%s"), dlerror());

      __break(1u);
    }
    v4 = *v3;
    if (v2)
    {
      *(_QWORD *)v27 = v2;
      *(_QWORD *)&v27[8] = NFTCCChecker;
      v5 = (NFTCCChecker *)objc_msgSendSuper2((objc_super *)v27, "init");
      v2 = v5;
      if (v5)
      {
        v5->_tccService = v4;
        global_queue = dispatch_get_global_queue(25, 0);
        v7 = objc_claimAutoreleasedReturnValue(global_queue);
        workQueue = v2->_workQueue;
        v2->_workQueue = (OS_dispatch_queue *)v7;

      }
    }
  }
  else
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v11 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v1);
      Name = sel_getName("defaultServiceChecker");
      v15 = 45;
      if (isMetaClass)
        v15 = 43;
      v11(3, "%c[%{public}s %{public}s]:%i Service not available", v15, ClassName, Name, 37);
    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = object_getClass(v1);
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      v21 = object_getClassName(v1);
      v22 = sel_getName("defaultServiceChecker");
      *(_DWORD *)v27 = 67109890;
      *(_DWORD *)&v27[4] = v20;
      *(_WORD *)&v27[8] = 2082;
      *(_QWORD *)&v27[10] = v21;
      *(_WORD *)&v27[18] = 2082;
      *(_QWORD *)&v27[20] = v22;
      v28 = 1024;
      v29 = 37;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Service not available", v27, 0x22u);
    }

    v2 = 0;
  }
  return v2;
}

void sub_1000AA494(uint64_t a1, char a2, __int128 *a3, void *a4)
{
  id v7;
  void *v8;
  NSObject *v9;
  __int128 v10;
  _QWORD block[5];
  id v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v7 = a4;
  v8 = v7;
  if (a1)
  {
    v9 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000AA53C;
    block[3] = &unk_1002E7838;
    block[4] = a1;
    v12 = v7;
    v15 = a2;
    v10 = a3[1];
    v13 = *a3;
    v14 = v10;
    dispatch_async(v9, block);

  }
}

uint64_t sub_1000AA53C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  void *specific;
  uint64_t Logger;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t);
  void *v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *v31;
  _BOOL4 v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  objc_class *v37;
  int v38;
  const char *v39;
  const char *v40;
  const char *v41;
  void *v42;
  uint64_t v43;
  void (*v44)(uint64_t, const char *, ...);
  objc_class *v45;
  _BOOL4 v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  objc_class *v51;
  int v52;
  const char *v53;
  const char *v54;
  uint64_t *v56;
  uint64_t v57;
  unsigned int (*v58)(uint64_t, _BYTE *, NSObject *);
  void *v59;
  void *v60;
  const char *Name;
  const char *v62;
  const char *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  void *v67;
  _BYTE buf[34];

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "validateWithUserPrompt", "", buf, 2u);
  }

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned __int8 *)(a1 + 80);
  v64 = *(_OWORD *)(a1 + 48);
  v65 = *(_OWORD *)(a1 + 64);
  if (v6)
  {
    if (NFIsInternalBuild(v4))
    {
      v8 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.stockholm"));
      if (-[NSObject BOOLForKey:](v8, "BOOLForKey:", CFSTR("skipTCC")))
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v11 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass((id)v6);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName((id)v6);
          Name = sel_getName("_validateWithUserPrompt:auditToken:");
          v15 = 45;
          if (isMetaClass)
            v15 = 43;
          v11(6, "%c[%{public}s %{public}s]:%i Skipping TCC check", v15, ClassName, Name, 62);
        }
        v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v17 = NFSharedLogGetLogger(v16);
        v18 = objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v19 = object_getClass((id)v6);
          if (class_isMetaClass(v19))
            v20 = 43;
          else
            v20 = 45;
          v21 = object_getClassName((id)v6);
          v22 = sel_getName("_validateWithUserPrompt:auditToken:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v20;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = v21;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v22;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = 62;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Skipping TCC check", buf, 0x22u);
        }

        v6 = 1;
        goto LABEL_59;
      }

    }
    if (!qword_10032A960)
    {
      *(_OWORD *)buf = off_1002E7858;
      *(_QWORD *)&buf[16] = 0;
      qword_10032A960 = _sl_dlopen(buf, 0);
    }
    if (!qword_10032A960 || !sub_1000AAE98())
      goto LABEL_48;
    if (!qword_10032A960)
    {
      *(_OWORD *)buf = off_1002E7858;
      *(_QWORD *)&buf[16] = 0;
      qword_10032A960 = _sl_dlopen(buf, 0);
    }
    if (!qword_10032A960 || !sub_1000AAF28())
      goto LABEL_48;
    if (!qword_10032A960)
    {
      *(_OWORD *)buf = off_1002E7858;
      *(_QWORD *)&buf[16] = 0;
      qword_10032A960 = _sl_dlopen(buf, 0);
    }
    if (!qword_10032A960 || !sub_1000AAFB8())
      goto LABEL_48;
    if (!qword_10032A960)
    {
      *(_OWORD *)buf = off_1002E7858;
      *(_QWORD *)&buf[16] = 0;
      qword_10032A960 = _sl_dlopen(buf, 0);
    }
    if (!qword_10032A960 || !sub_1000AB048())
    {
LABEL_48:
      v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v43 = NFLogGetLogger(v42);
      if (v43)
      {
        v44 = (void (*)(uint64_t, const char *, ...))v43;
        v45 = object_getClass((id)v6);
        v46 = class_isMetaClass(v45);
        v47 = object_getClassName((id)v6);
        v63 = sel_getName("_validateWithUserPrompt:auditToken:");
        v48 = 45;
        if (v46)
          v48 = 43;
        v44(3, "%c[%{public}s %{public}s]:%i Missing library; default to false", v48, v47, v63, 71);
      }
      v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v50 = NFSharedLogGetLogger(v49);
      v8 = objc_claimAutoreleasedReturnValue(v50);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        goto LABEL_58;
      v51 = object_getClass((id)v6);
      if (class_isMetaClass(v51))
        v52 = 43;
      else
        v52 = 45;
      v53 = object_getClassName((id)v6);
      v54 = sel_getName("_validateWithUserPrompt:auditToken:");
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v52;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v53;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v54;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 71;
      v41 = "%c[%{public}s %{public}s]:%i Missing library; default to false";
LABEL_57:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v41, buf, 0x22u);
LABEL_58:
      v6 = 2;
LABEL_59:

      return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v5, v6);
    }
    v23 = *(_QWORD *)(v6 + 16);
    v24 = sub_1000AAE98();
    if (!v24)
    {
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "TCCAccessPreflightResult NFTCCAccessPreflightWithAuditToken(CFStringRef, audit_token_t, CFDictionaryRef)"));
      objc_msgSend(v59, "handleFailureInFunction:file:lineNumber:description:", v60, CFSTR("NFTCCChecker.m"), 17, CFSTR("%s"), dlerror());
      goto LABEL_74;
    }
    *(_OWORD *)buf = v64;
    *(_OWORD *)&buf[16] = v65;
    v25 = ((uint64_t (*)(uint64_t, _BYTE *, _QWORD))v24)(v23, buf, 0);
    switch(v25)
    {
      case 0:
        v6 = 1;
        return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v5, v6);
      case 2:
        if (!v7)
        {
          v6 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v5, v6);
        }
        break;
      case 1:
        v26 = *(_QWORD *)(v6 + 16);
        v27 = (unsigned int (*)(uint64_t))sub_1000AAFB8();
        if (v27)
        {
          if (v27(v26) != 1)
          {
            v6 = 2;
            return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v5, v6);
          }
          v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v29 = NFLogGetLogger(v28);
          if (v29)
          {
            v30 = (void (*)(uint64_t, const char *, ...))v29;
            v31 = object_getClass((id)v6);
            v32 = class_isMetaClass(v31);
            v33 = object_getClassName((id)v6);
            v62 = sel_getName("_validateWithUserPrompt:auditToken:");
            v34 = 45;
            if (v32)
              v34 = 43;
            v30(4, "%c[%{public}s %{public}s]:%i System restriction is in place", v34, v33, v62, 83);
          }
          v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v36 = NFSharedLogGetLogger(v35);
          v8 = objc_claimAutoreleasedReturnValue(v36);
          if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
            goto LABEL_58;
          v37 = object_getClass((id)v6);
          if (class_isMetaClass(v37))
            v38 = 43;
          else
            v38 = 45;
          v39 = object_getClassName((id)v6);
          v40 = sel_getName("_validateWithUserPrompt:auditToken:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v38;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = v39;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v40;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = 83;
          v41 = "%c[%{public}s %{public}s]:%i System restriction is in place";
          goto LABEL_57;
        }
        v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
        v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Boolean NFTCCAccessRestricted(CFStringRef)"));
        objc_msgSend(v59, "handleFailureInFunction:file:lineNumber:description:", v60, CFSTR("NFTCCChecker.m"), 19, CFSTR("%s"), dlerror());
LABEL_74:

        __break(1u);
        break;
    }
    v56 = (uint64_t *)sub_1000AB048();
    if (v56)
    {
      v66 = *v56;
      v67 = &__kCFBooleanTrue;
      v8 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v67, &v66, 1));
      v57 = *(_QWORD *)(v6 + 16);
      v58 = (unsigned int (*)(uint64_t, _BYTE *, NSObject *))sub_1000AAF28();
      if (v58)
      {
        *(_OWORD *)buf = v64;
        *(_OWORD *)&buf[16] = v65;
        if (v58(v57, buf, v8))
          v6 = 1;
        else
          v6 = 2;
        goto LABEL_59;
      }
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Boolean NFTCCAccessCheckAuditToken(CFStringRef, audit_token_t, CFDictionaryRef)"));
      objc_msgSend(v59, "handleFailureInFunction:file:lineNumber:description:", v60, CFSTR("NFTCCChecker.m"), 18, CFSTR("%s"), dlerror());
    }
    else
    {
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CFStringRef getkTCCAccessCheckOptionPrompt(void)"));
      objc_msgSend(v59, "handleFailureInFunction:file:lineNumber:description:", v60, CFSTR("NFTCCChecker.m"), 20, CFSTR("%s"), dlerror());
    }
    goto LABEL_74;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v5, v6);
}

void *sub_1000AAD04()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)qword_10032A968;
  v6 = qword_10032A968;
  if (!qword_10032A968)
  {
    v1 = sub_1000AAD94();
    v0 = dlsym(v1, "kTCCServiceContactlessAccess");
    v4[3] = (uint64_t)v0;
    qword_10032A968 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000AAD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void *sub_1000AAD94()
{
  void *v0;
  void *v1;
  void *v3;
  void *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_10032A960)
  {
    v5 = off_1002E7858;
    v6 = 0;
    qword_10032A960 = _sl_dlopen(&v5, &v4);
  }
  v0 = (void *)qword_10032A960;
  if (!qword_10032A960)
  {
    v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *TCCLibrary(void)"));
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("NFTCCChecker.m"), 16, CFSTR("%s"), v4);

    __break(1u);
    goto LABEL_7;
  }
  v1 = v4;
  if (v4)
LABEL_7:
    free(v1);
  return v0;
}

void *sub_1000AAE98()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)qword_10032A970;
  v6 = qword_10032A970;
  if (!qword_10032A970)
  {
    v1 = sub_1000AAD94();
    v0 = dlsym(v1, "TCCAccessPreflightWithAuditToken");
    v4[3] = (uint64_t)v0;
    qword_10032A970 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000AAF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void *sub_1000AAF28()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)qword_10032A978;
  v6 = qword_10032A978;
  if (!qword_10032A978)
  {
    v1 = sub_1000AAD94();
    v0 = dlsym(v1, "TCCAccessCheckAuditToken");
    v4[3] = (uint64_t)v0;
    qword_10032A978 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000AAFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void *sub_1000AAFB8()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)qword_10032A980;
  v6 = qword_10032A980;
  if (!qword_10032A980)
  {
    v1 = sub_1000AAD94();
    v0 = dlsym(v1, "TCCAccessRestricted");
    v4[3] = (uint64_t)v0;
    qword_10032A980 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000AB030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void *sub_1000AB048()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)qword_10032A988;
  v6 = qword_10032A988;
  if (!qword_10032A988)
  {
    v1 = sub_1000AAD94();
    v0 = dlsym(v1, "kTCCAccessCheckOptionPrompt");
    v4[3] = (uint64_t)v0;
    qword_10032A988 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000AB0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t start()
{
  void *v0;
  uint64_t i;
  uintptr_t v2;
  dispatch_source_t v3;
  uint64_t *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  NFWalletPresentationService *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  CFRunLoopRef Current;
  int v17;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v20;
  uint64_t v21;
  NSObject *v22;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;

  v0 = objc_autoreleasePoolPush();
  for (i = 0; i != 5; ++i)
  {
    v2 = dword_100269C00[i];
    signal(dword_100269C00[i], (void (__cdecl *)(int))1);
    v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, v2, 0, 0);
    v4 = &qword_10032A990[i];
    v5 = (void *)v4[1];
    v4[1] = (uint64_t)v3;

    dispatch_set_context((dispatch_object_t)v4[1], (void *)v2);
    dispatch_source_set_event_handler_f((dispatch_source_t)v4[1], (dispatch_function_t)sub_1000AB3CC);
    dispatch_resume((dispatch_object_t)v4[1]);
  }
  +[NSError _setFileNameLocalizationEnabled:](NSError, "_setFileNameLocalizationEnabled:", 0);
  NFSetThreadPriority(50);
  v6 = objc_alloc_init((Class)NFMemoryObserver);
  objc_msgSend(v6, "start");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NFSecureXPCEventPublisherManager sharedManager](NFSecureXPCEventPublisherManager, "sharedManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "xpcEventNotificationQueue"));
  objc_msgSend(v8, "startPublisherWithXPCQueue:eventSendQueue:", 0, v9);

  if ((NFProductIsPhone() & 1) != 0)
  {
    v10 = [NFWalletPresentationService alloc];
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "wallet"));
    v12 = sub_100051A64(v10, v11);
    v13 = (void *)qword_10032A990[0];
    qword_10032A990[0] = (uint64_t)v12;

    sub_100051ADC(qword_10032A990[0]);
    sub_10011B6A8((uint64_t)v7, (void *)qword_10032A990[0]);
  }
  objc_msgSend(v7, "start");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[_NFACHardwareManager sharedHardwareManager](_NFACHardwareManager, "sharedHardwareManager"));
  objc_msgSend(v14, "start");

  objc_autoreleasePoolPop(v0);
  do
  {
    v15 = objc_autoreleasePoolPush();
    Current = CFRunLoopGetCurrent();
    v17 = CFRunLoopRunSpecific(Current, kCFRunLoopDefaultMode, 1, 1.0e10);
    objc_autoreleasePoolPop(v15);
  }
  while ((v17 - 3) < 0xFFFFFFFE);
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
  if (Logger)
    Logger(6, "%s:%i Exiting", "main", 182);
  v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v21 = NFSharedLogGetLogger(v20);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v25 = "main";
    v26 = 1024;
    v27 = 182;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Exiting", buf, 0x12u);
  }

  return 0;
}

void sub_1000AB3CC(uint64_t a1)
{
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  __CFRunLoop *Main;
  void *v10;
  void (*v11)(uint64_t, const char *, ...);
  void *v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
  if (Logger)
    Logger(5, "%s:%i Received signal: %lu", "signalHandler", 100, a1);
  v4 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v5 = NFSharedLogGetLogger(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v16 = "signalHandler";
    v17 = 1024;
    v18 = 100;
    v19 = 2048;
    v20 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Received signal: %lu", buf, 0x1Cu);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  objc_msgSend(v7, "stop");

  sub_10005217C((id *)qword_10032A990);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NFSecureXPCEventPublisherManager sharedManager](NFSecureXPCEventPublisherManager, "sharedManager"));
  objc_msgSend(v8, "invalidate");

  Main = CFRunLoopGetMain();
  CFRunLoopStop(Main);
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v10);
  if (v11)
    v11(4, "%s:%i Forcing exit in 500ms", "signalHandler", 112);
  v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v13 = NFSharedLogGetLogger(v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v16 = "signalHandler";
    v17 = 1024;
    v18 = 112;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Forcing exit in 500ms", buf, 0x12u);
  }

  usleep(0x7A120u);
  _exit(0);
}

id *sub_1000ABB98(id *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id *v8;
  id v9;
  id v10;
  _QWORD *v11;
  id v12;
  id v13;
  _QWORD v15[4];
  id v16;
  id v17[2];
  _QWORD v18[4];
  id v19;
  id location;
  objc_super v21;

  v6 = a2;
  v7 = a3;
  if (a1)
  {
    v21.receiver = a1;
    v21.super_class = (Class)NFTouchSensorMonitor;
    v8 = (id *)objc_msgSendSuper2(&v21, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeWeak(v8 + 2, v7);
      v9 = objc_msgSend(objc_alloc((Class)HIDEventSystemClient), "initWithType:", 1);
      v10 = a1[3];
      a1[3] = v9;

      objc_msgSend(a1[3], "setDispatchQueue:", v6);
      objc_storeStrong(a1 + 5, a2);
      objc_initWeak(&location, a1);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_100006E40;
      v18[3] = &unk_1002E7878;
      objc_copyWeak(&v19, &location);
      v11 = objc_retainBlock(v18);
      v12 = a1[4];
      a1[4] = v11;

      objc_msgSend(a1[3], "setEventHandler:", a1[4]);
      objc_msgSend(a1[3], "setMatching:", &off_100306268);
      v13 = a1[3];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1000ABD84;
      v15[3] = &unk_1002E78A0;
      objc_copyWeak(v17, &location);
      v17[1] = "initWithQueue:delegate:";
      v16 = v6;
      objc_msgSend(v13, "setServiceNotificationHandler:", v15);

      objc_destroyWeak(v17);
      objc_destroyWeak(&v19);
      objc_destroyWeak(&location);
    }
  }

  return a1;
}

void sub_1000ABD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000ABD84(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  id v20;
  _BOOL4 v21;
  BOOL v22;
  const char *v23;
  NSObject *v24;
  NSObject *v25;
  id v26;
  id v27;
  uint64_t v28;
  const char *Name;
  _QWORD v30[4];
  id v31;
  uint64_t v32;
  _QWORD block[4];
  id v34;
  BOOL v35;
  uint8_t buf[8];
  _BYTE v37[10];
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    *((_BYTE *)WeakRetained + 8) = 1;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v5);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v5);
      Name = sel_getName(*(SEL *)(a1 + 48));
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v8(6, "%c[%{public}s %{public}s]:%i Touch service started", v12, ClassName, Name, 79);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = object_getClass(v5);
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      v18 = object_getClassName(v5);
      v19 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v37 = 2082;
      *(_QWORD *)&v37[2] = v18;
      v38 = 2082;
      v39 = v19;
      v40 = 1024;
      v41 = 79;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Touch service started", buf, 0x22u);
    }

    v20 = sub_100005ED0(v3);
    v21 = sub_1000055F8(v5, v20);
    v22 = v21;
    if (v21)
      v23 = "touch sensor is ready";
    else
      v23 = "touch sensor is not ready";
    v24 = _os_activity_create((void *)&_mh_execute_header, v23, (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    *(_QWORD *)buf = 0;
    *(_QWORD *)v37 = 0;
    os_activity_scope_enter(v24, (os_activity_scope_state_t)buf);
    os_activity_scope_leave((os_activity_scope_state_t)buf);

    v25 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100008490;
    block[3] = &unk_1002E5BB8;
    v26 = v5;
    v34 = v26;
    v35 = v22;
    dispatch_async(v25, block);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100006ADC;
    v30[3] = &unk_1002E5C30;
    v27 = v26;
    v28 = *(_QWORD *)(a1 + 48);
    v31 = v27;
    v32 = v28;
    objc_msgSend(v3, "setRemovalHandler:", v30);

  }
}

void sub_1000AC094(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  id v8;
  BOOL v9;
  NSObject *v10;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v14;
  const char *ClassName;
  const char *Name;
  const __CFString *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  const char *v23;
  const char *v24;
  const __CFString *v25;
  _QWORD block[5];
  BOOL v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  const __CFString *v41;
  _BYTE v42[128];

  if (a1)
  {
    v1 = a1;
    objc_sync_enter(v1);
    if (!*((_BYTE *)v1 + 9))
    {
      v2 = *((id *)v1 + 3);
      objc_msgSend(v2, "activate");

      *((_BYTE *)v1 + 9) = 1;
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v1 + 3), "services"));
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v4 = v3;
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v42, 16);
      if (v5)
      {
        v6 = *(_QWORD *)v29;
        while (2)
        {
          for (i = 0; i != v5; i = (char *)i + 1)
          {
            if (*(_QWORD *)v29 != v6)
              objc_enumerationMutation(v4);
            v8 = sub_100005ED0(*(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i));
            if (v8)
            {
              *((_BYTE *)v1 + 8) = 1;
              v9 = sub_1000055F8(v1, v8);
              v10 = *((_QWORD *)v1 + 5);
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472;
              block[2] = sub_1000AC3D8;
              block[3] = &unk_1002E5BB8;
              block[4] = v1;
              v27 = v9;
              dispatch_async(v10, block);

              goto LABEL_13;
            }
          }
          v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v42, 16);
          if (v5)
            continue;
          break;
        }
      }
LABEL_13:

      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass(v1);
        if (class_isMetaClass(Class))
          v14 = 43;
        else
          v14 = 45;
        ClassName = object_getClassName(v1);
        Name = sel_getName("start");
        if (*((_BYTE *)v1 + 8))
          v17 = &stru_1002ED8A8;
        else
          v17 = CFSTR("has not ");
        Logger(6, "%c[%{public}s %{public}s]:%i Touch service %{public}@started", v14, ClassName, Name, 132, v17);
      }
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFSharedLogGetLogger(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v21 = object_getClass(v1);
        if (class_isMetaClass(v21))
          v22 = 43;
        else
          v22 = 45;
        v23 = object_getClassName(v1);
        v24 = sel_getName("start");
        if (*((_BYTE *)v1 + 8))
          v25 = &stru_1002ED8A8;
        else
          v25 = CFSTR("has not ");
        *(_DWORD *)buf = 67110146;
        v33 = v22;
        v34 = 2082;
        v35 = v23;
        v36 = 2082;
        v37 = v24;
        v38 = 1024;
        v39 = 132;
        v40 = 2114;
        v41 = v25;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Touch service %{public}@started", buf, 0x2Cu);
      }

    }
    objc_sync_exit(v1);

  }
}

void sub_1000AC398(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000AC3D8(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  else
    WeakRetained = 0;
  v4 = WeakRetained;
  objc_msgSend(WeakRetained, "touchSystemReady:", *(unsigned __int8 *)(a1 + 40));

}

void sub_1000AC424(void *a1)
{
  id v1;
  id *obj;

  if (a1)
  {
    obj = a1;
    objc_sync_enter(obj);
    v1 = obj[3];
    objc_msgSend(v1, "cancel");

    *((_BYTE *)obj + 9) = 0;
    objc_sync_exit(obj);

  }
}

void sub_1000AC48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_1000AC4E4(id a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  objc_super v16;
  _QWORD v17[4];
  _QWORD v18[4];

  v7 = a2;
  v8 = a3;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)NFAssertPKWalletForegroundPresentment;
    a1 = objc_msgSendSuper2(&v16, "initWithRemoteAssertion:", v7);
    if (!a1)
    {
      if (a4)
      {
        v9 = objc_alloc((Class)NSError);
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v17[0] = NSLocalizedDescriptionKey;
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
        v18[0] = v11;
        v18[1] = &off_1002FE820;
        v17[1] = CFSTR("Line");
        v17[2] = CFSTR("Method");
        v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("initWithRemoteAssertion:xpcConnection:outError:"));
        v18[2] = v12;
        v17[3] = NSDebugDescriptionErrorKey;
        v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("initWithRemoteAssertion:xpcConnection:outError:"), 24);
        v18[3] = v13;
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 4));
        *a4 = objc_msgSend(v9, "initWithDomain:code:userInfo:", v10, 13, v14);

      }
      a1 = 0;
    }
  }

  return a1;
}

NSMutableArray *sub_1000ACB90(_QWORD *a1, _QWORD *a2)
{
  NSMutableArray *v4;
  NSMutableArray *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSMutableArray *v12;
  void *specific;
  uint64_t Logger;
  void (*v15)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  const char *Name;
  const char *v43;
  NSErrorUserInfoKey v44;
  void *v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  int v53;

  v4 = objc_opt_new(NSMutableArray);
  v5 = v4;
  if (!a2)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v15 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("inputTags:");
      v19 = 45;
      if (isMetaClass)
        v19 = 43;
      v15(3, "%c[%{public}s %{public}s]:%i Expecting error", v19, ClassName, Name, 186);
    }
    v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v21 = NFSharedLogGetLogger(v20);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = object_getClass(a1);
      if (class_isMetaClass(v23))
        v24 = 43;
      else
        v24 = 45;
      *(_DWORD *)buf = 67109890;
      v47 = v24;
      v48 = 2082;
      v49 = object_getClassName(a1);
      v50 = 2082;
      v51 = sel_getName("inputTags:");
      v52 = 1024;
      v53 = 186;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Expecting error", buf, 0x22u);
    }

    goto LABEL_30;
  }
  if (!v4)
  {
    v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v26 = NFLogGetLogger(v25);
    if (v26)
    {
      v27 = (void (*)(uint64_t, const char *, ...))v26;
      v28 = object_getClass(a1);
      v29 = class_isMetaClass(v28);
      v30 = object_getClassName(a1);
      v43 = sel_getName("inputTags:");
      v31 = 45;
      if (v29)
        v31 = 43;
      v27(3, "%c[%{public}s %{public}s]:%i Could not create array", v31, v30, v43, 191);
    }
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = NFSharedLogGetLogger(v32);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v35 = object_getClass(a1);
      if (class_isMetaClass(v35))
        v36 = 43;
      else
        v36 = 45;
      *(_DWORD *)buf = 67109890;
      v47 = v36;
      v48 = 2082;
      v49 = object_getClassName(a1);
      v50 = 2082;
      v51 = sel_getName("inputTags:");
      v52 = 1024;
      v53 = 191;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not create array", buf, 0x22u);
    }

    v37 = objc_alloc((Class)NSError);
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v44 = NSLocalizedDescriptionKey;
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
    v45 = v39;
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1));
    *a2 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 34, v40);

LABEL_30:
    v12 = 0;
    goto LABEL_31;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 24352, a1[1]));
  -[NSMutableArray addObject:](v5, "addObject:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 81, a1[2]));
  -[NSMutableArray addObject:](v5, "addObject:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 82, a1[3]));
  -[NSMutableArray addObject:](v5, "addObject:", v8);

  if (a1[4])
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 83));
    -[NSMutableArray addObject:](v5, "addObject:", v9);

  }
  if (a1[5])
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 85));
    -[NSMutableArray addObject:](v5, "addObject:", v10);

  }
  if (a1[6])
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 87));
    -[NSMutableArray addObject:](v5, "addObject:", v11);

  }
  v12 = v5;
LABEL_31:

  return v12;
}

id *sub_1000AD0BC(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v8;
  id v9;
  uint64_t v10;
  NFTrustSignInputTable *v11;
  id *p_isa;
  void *v13;
  void *specific;
  uint64_t Logger;
  void (*v16)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  objc_class *v24;
  int v25;
  id v26;
  id v27;
  id v28;
  const char *Name;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;

  v8 = a2;
  v9 = a3;
  v10 = objc_opt_self(a1);
  if (!a4)
  {
    v13 = (void *)v10;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v16 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v13);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v13);
      Name = sel_getName("signInputTableWithChallenge:data:error:");
      v20 = 45;
      if (isMetaClass)
        v20 = 43;
      v16(3, "%c[%{public}s %{public}s]:%i Expecting error", v20, ClassName, Name, 346);
    }
    v21 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v22 = NFSharedLogGetLogger(v21);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = object_getClass(v13);
      if (class_isMetaClass(v24))
        v25 = 43;
      else
        v25 = 45;
      *(_DWORD *)buf = 67109890;
      v32 = v25;
      v33 = 2082;
      v34 = object_getClassName(v13);
      v35 = 2082;
      v36 = sel_getName("signInputTableWithChallenge:data:error:");
      v37 = 1024;
      v38 = 346;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Expecting error", buf, 0x22u);
    }

    goto LABEL_18;
  }
  if (!v8)
  {
    v26 = sub_100130D58(CFSTR("Could not create NFTrustSignInputTable, challenge is nil"));
    p_isa = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue(v26);
    goto LABEL_19;
  }
  if (objc_msgSend(v8, "length") != (id)8)
  {
    v27 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Could not create NFTrustSignInputTable, challenge must be 8 bytes long (got %lu bytes)"), objc_msgSend(v8, "length"));
    v28 = sub_100130D58(v27);
    *a4 = (id)objc_claimAutoreleasedReturnValue(v28);

LABEL_18:
    p_isa = 0;
    goto LABEL_19;
  }
  v11 = [NFTrustSignInputTable alloc];
  p_isa = (id *)&v11->super.isa;
  if (v11)
  {
    objc_storeStrong((id *)&v11->_challenge, a2);
    objc_storeStrong(p_isa + 2, a3);
  }
LABEL_19:

  return p_isa;
}

NSMutableArray *sub_1000AD32C(NSMutableArray *a1, _QWORD *a2)
{
  NSMutableArray *v2;
  NSMutableArray *v4;
  NSMutableArray *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *v12;
  _BOOL4 v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  void *specific;
  uint64_t Logger;
  void (*v23)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  const char *v38;
  const char *Name;
  NSErrorUserInfoKey v40;
  void *v41;
  uint8_t buf[4];
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;

  v2 = a1;
  if (a1)
  {
    v4 = objc_opt_new(NSMutableArray);
    v5 = v4;
    if (a2)
    {
      if (v4)
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:unsignedChar:](NFTLV, "TLVWithTag:unsignedChar:", 144, 0));
        -[NSMutableArray addObject:](v5, "addObject:", v6);

        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 145, v2[1].super.super.isa));
        -[NSMutableArray addObject:](v5, "addObject:", v7);

        if (v2[2].super.super.isa)
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 148));
          -[NSMutableArray addObject:](v5, "addObject:", v8);

        }
        v2 = v5;
        goto LABEL_28;
      }
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v23 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v2);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v2);
        Name = sel_getName("inputTags:");
        v27 = 45;
        if (isMetaClass)
          v27 = 43;
        v23(3, "%c[%{public}s %{public}s]:%i Could not create array", v27, ClassName, Name, 381);
      }
      v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v29 = NFSharedLogGetLogger(v28);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        v31 = object_getClass(v2);
        if (class_isMetaClass(v31))
          v32 = 43;
        else
          v32 = 45;
        *(_DWORD *)buf = 67109890;
        v43 = v32;
        v44 = 2082;
        v45 = object_getClassName(v2);
        v46 = 2082;
        v47 = sel_getName("inputTags:");
        v48 = 1024;
        v49 = 381;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not create array", buf, 0x22u);
      }

      v33 = objc_alloc((Class)NSError);
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v40 = NSLocalizedDescriptionKey;
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v41 = v35;
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1));
      *a2 = objc_msgSend(v33, "initWithDomain:code:userInfo:", v34, 34, v36);

    }
    else
    {
      v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v10 = NFLogGetLogger(v9);
      if (v10)
      {
        v11 = (void (*)(uint64_t, const char *, ...))v10;
        v12 = object_getClass(v2);
        v13 = class_isMetaClass(v12);
        v14 = object_getClassName(v2);
        v38 = sel_getName("inputTags:");
        v15 = 45;
        if (v13)
          v15 = 43;
        v11(3, "%c[%{public}s %{public}s]:%i Expecting error", v15, v14, v38, 376);
      }
      v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v17 = NFSharedLogGetLogger(v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = object_getClass(v2);
        if (class_isMetaClass(v19))
          v20 = 43;
        else
          v20 = 45;
        *(_DWORD *)buf = 67109890;
        v43 = v20;
        v44 = 2082;
        v45 = object_getClassName(v2);
        v46 = 2082;
        v47 = sel_getName("inputTags:");
        v48 = 1024;
        v49 = 376;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Expecting error", buf, 0x22u);
      }

    }
    v2 = 0;
LABEL_28:

  }
  return v2;
}

id sub_1000AD728(NSMutableArray *a1, _QWORD *a2)
{
  NSMutableArray *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *v12;
  _BOOL4 v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  objc_class *v18;
  int v19;
  void *specific;
  uint64_t Logger;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  objc_class *v30;
  int v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  const char *v37;
  const char *Name;
  NSErrorUserInfoKey v39;
  void *v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  int v48;

  if (a1)
  {
    if (a2)
    {
      v4 = sub_1000AD32C(a1, a2);
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (!*a2)
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 32525, v5));
        v7 = v6;
        if (v6)
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "asData"));
        }
        else
        {
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = NFLogGetLogger(specific);
          if (Logger)
          {
            v22 = (void (*)(uint64_t, const char *, ...))Logger;
            Class = object_getClass(a1);
            isMetaClass = class_isMetaClass(Class);
            ClassName = object_getClassName(a1);
            Name = sel_getName("getValue:");
            v26 = 45;
            if (isMetaClass)
              v26 = 43;
            v22(3, "%c[%{public}s %{public}s]:%i Could not create an Operation Dictionary TLV", v26, ClassName, Name, 412);
          }
          v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v28 = NFSharedLogGetLogger(v27);
          v29 = objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            v30 = object_getClass(a1);
            if (class_isMetaClass(v30))
              v31 = 43;
            else
              v31 = 45;
            *(_DWORD *)buf = 67109890;
            v42 = v31;
            v43 = 2082;
            v44 = object_getClassName(a1);
            v45 = 2082;
            v46 = sel_getName("getValue:");
            v47 = 1024;
            v48 = 412;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not create an Operation Dictionary TLV", buf, 0x22u);
          }

          v32 = objc_alloc((Class)NSError);
          v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v39 = NSLocalizedDescriptionKey;
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
          v40 = v34;
          v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1));
          *a2 = objc_msgSend(v32, "initWithDomain:code:userInfo:", v33, 34, v35);

          v8 = 0;
        }

        goto LABEL_27;
      }
    }
    else
    {
      v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v10 = NFLogGetLogger(v9);
      if (v10)
      {
        v11 = (void (*)(uint64_t, const char *, ...))v10;
        v12 = object_getClass(a1);
        v13 = class_isMetaClass(v12);
        v14 = object_getClassName(a1);
        v37 = sel_getName("getValue:");
        v15 = 45;
        if (v13)
          v15 = 43;
        v11(3, "%c[%{public}s %{public}s]:%i Expecting error", v15, v14, v37, 399);
      }
      v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v17 = NFSharedLogGetLogger(v16);
      v5 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v18 = object_getClass(a1);
        if (class_isMetaClass(v18))
          v19 = 43;
        else
          v19 = 45;
        *(_DWORD *)buf = 67109890;
        v42 = v19;
        v43 = 2082;
        v44 = object_getClassName(a1);
        v45 = 2082;
        v46 = sel_getName("getValue:");
        v47 = 1024;
        v48 = 399;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Expecting error", buf, 0x22u);
      }
    }
    v8 = 0;
LABEL_27:

    return v8;
  }
  return 0;
}

id *sub_1000ADB18(id *a1, NSMutableArray *a2, void *a3, unsigned int a4, _QWORD *a5)
{
  id v9;
  NSMutableArray *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id *v19;
  id *v20;
  id *v21;
  id *v22;
  void *i;
  void *v24;
  void *v25;
  unsigned int v26;
  id *v27;
  void *specific;
  uint64_t Logger;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  const char *v40;
  const char *v41;
  __CFString *v42;
  void *v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, ...);
  objc_class *v46;
  _BOOL4 v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  objc_class *v53;
  int v54;
  const char *v55;
  const char *v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  id *v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  void (*v70)(uint64_t, const char *, ...);
  objc_class *v71;
  _BOOL4 v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  NSObject *v78;
  objc_class *v79;
  int v80;
  const char *v81;
  const char *v82;
  id v83;
  void *v84;
  void *v85;
  const char *v87;
  const char *Name;
  const char *v89;
  const char *v90;
  unsigned int v91;
  id *v92;
  _QWORD *v93;
  void *v94;
  id v95;
  void *v96;
  void *v97;
  id obj;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  NSErrorUserInfoKey v103;
  void *v104;
  uint8_t v105[128];
  uint8_t buf[4];
  int v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  int v113;

  v9 = a3;
  if (a1)
  {
    v10 = sub_1000AD32C(a2, a5);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v9));
    v13 = v12;
    if (!a5)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v30 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("signOutputTableWithInputTable:data:localValidation:error:");
        v34 = 45;
        if (isMetaClass)
          v34 = 43;
        v30(3, "%c[%{public}s %{public}s]:%i Expecting error", v34, ClassName, Name, 445);
      }
      v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v36 = NFSharedLogGetLogger(v35);
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        v38 = object_getClass(a1);
        if (class_isMetaClass(v38))
          v39 = 43;
        else
          v39 = 45;
        v40 = object_getClassName(a1);
        v41 = sel_getName("signOutputTableWithInputTable:data:localValidation:error:");
        *(_DWORD *)buf = 67109890;
        v107 = v39;
        v108 = 2082;
        v109 = v40;
        v110 = 2082;
        v111 = v41;
        v112 = 1024;
        v113 = 445;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Expecting error", buf, 0x22u);
      }

      a1 = 0;
      goto LABEL_65;
    }
    if (v12)
    {
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v14 = v12;
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v99, v105, 16);
      if (v15)
      {
        v16 = v15;
        v91 = a4;
        obj = v14;
        v93 = a5;
        v94 = v11;
        v95 = v9;
        v96 = v13;
        v17 = 0;
        v18 = *(_QWORD *)v100;
        v19 = a1 + 3;
        v20 = a1;
        v21 = a1 + 2;
        v92 = v20;
        v22 = v20 + 1;
        while (2)
        {
          for (i = 0; i != v16; i = (char *)i + 1)
          {
            v24 = v17;
            if (*(_QWORD *)v100 != v18)
              objc_enumerationMutation(obj);
            v25 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * (_QWORD)i);
            v17 = v25;

            v26 = objc_msgSend(v17, "tag");
            v27 = v19;
            if (v26 != 24375)
            {
              v27 = v22;
              if (v26 != 151)
              {
                v27 = v21;
                if (v26 != 150)
                {
                  v43 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v44 = NFLogGetLogger(v43);
                  v13 = v96;
                  if (v44)
                  {
                    v45 = (void (*)(uint64_t, const char *, ...))v44;
                    v46 = object_getClass(v92);
                    v47 = class_isMetaClass(v46);
                    v48 = object_getClassName(v92);
                    v89 = sel_getName("signOutputTableWithInputTable:data:localValidation:error:");
                    v49 = 45;
                    if (v47)
                      v49 = 43;
                    v45(3, "%c[%{public}s %{public}s]:%i Sign returned an unexpected tag", v49, v48, v89, 468);
                  }
                  v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v51 = NFSharedLogGetLogger(v50);
                  v52 = objc_claimAutoreleasedReturnValue(v51);
                  v9 = v95;
                  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
                  {
                    v53 = object_getClass(v92);
                    if (class_isMetaClass(v53))
                      v54 = 43;
                    else
                      v54 = 45;
                    v55 = object_getClassName(v92);
                    v56 = sel_getName("signOutputTableWithInputTable:data:localValidation:error:");
                    *(_DWORD *)buf = 67109890;
                    v107 = v54;
                    v108 = 2082;
                    v109 = v55;
                    v110 = 2082;
                    v111 = v56;
                    v112 = 1024;
                    v113 = 468;
                    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Sign returned an unexpected tag", buf, 0x22u);
                  }

                  v57 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Could not sign, unexpected tag %u returned from SE"), objc_msgSend(v17, "tag"));
                  v58 = sub_100130704(v57);
                  *v93 = (id)objc_claimAutoreleasedReturnValue(v58);

                  a1 = 0;
                  v11 = v94;
                  goto LABEL_65;
                }
              }
            }
            objc_storeStrong(v27, v25);
          }
          v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v99, v105, 16);
          if (v16)
            continue;
          break;
        }

        v9 = v95;
        v13 = v96;
        a1 = v92;
        a5 = v93;
        v14 = obj;
        a4 = v91;
      }

      if (a1[3])
      {
        if (a4)
        {
          if (a1[1])
          {
            objc_msgSend(v11, "addObject:");
          }
          else if (a4 <= 7)
          {
            if (((1 << a4) & 0x22) != 0)
            {
              v60 = 1;
            }
            else if (((1 << a4) & 0x44) != 0)
            {
              v60 = 2;
            }
            else
            {
              if (((1 << a4) & 0x90) == 0)
                goto LABEL_50;
              v60 = 4;
            }
            v61 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:unsignedChar:](NFTLV, "TLVWithTag:unsignedChar:", 151, v60));
            objc_msgSend(v11, "addObject:", v61);

          }
        }
LABEL_50:
        if (a1[2])
          objc_msgSend(v11, "addObject:");
        v62 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 32525, v11));
        v63 = v62;
        if (v62)
        {
          v64 = objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "asMutableData"));
          v65 = a1;
          a1 = (id *)v64;
          v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65[3], "asData"));
          objc_msgSend(a1, "appendData:", v66);
        }
        else
        {
          v67 = a5;
          v97 = v13;
          v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v69 = NFLogGetLogger(v68);
          if (v69)
          {
            v70 = (void (*)(uint64_t, const char *, ...))v69;
            v71 = object_getClass(a1);
            v72 = class_isMetaClass(v71);
            v73 = v11;
            v74 = object_getClassName(a1);
            v90 = sel_getName("signOutputTableWithInputTable:data:localValidation:error:");
            v75 = 45;
            if (v72)
              v75 = 43;
            v87 = v74;
            v11 = v73;
            v70(3, "%c[%{public}s %{public}s]:%i Could not Operation Dictionary DGI", v75, v87, v90, 508);
          }
          v76 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v77 = NFSharedLogGetLogger(v76);
          v78 = objc_claimAutoreleasedReturnValue(v77);
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            v79 = object_getClass(a1);
            if (class_isMetaClass(v79))
              v80 = 43;
            else
              v80 = 45;
            v81 = object_getClassName(a1);
            v82 = sel_getName("signOutputTableWithInputTable:data:localValidation:error:");
            *(_DWORD *)buf = 67109890;
            v107 = v80;
            v108 = 2082;
            v109 = v81;
            v110 = 2082;
            v111 = v82;
            v112 = 1024;
            v113 = 508;
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not Operation Dictionary DGI", buf, 0x22u);
          }

          v83 = objc_alloc((Class)NSError);
          v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v103 = NSLocalizedDescriptionKey;
          v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
          v104 = v84;
          v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v104, &v103, 1));
          *v67 = objc_msgSend(v83, "initWithDomain:code:userInfo:", v66, 34, v85);

          a1 = 0;
          v13 = v97;
        }

        goto LABEL_65;
      }
      v42 = CFSTR("Could not sign missing tag 0x5F37 from SE response");
    }
    else
    {
      v42 = CFSTR("Error in SE response");
    }
    v59 = sub_100130704(v42);
    a1 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue(v59);
LABEL_65:

  }
  return a1;
}

id sub_1000AE2F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, id *a6)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  unsigned int v13;
  id v14;
  void *specific;
  uint64_t Logger;
  void (*v17)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  const char *v27;
  const char *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  const char *v37;
  void *v38;
  const char *Name;
  id v41;
  NSErrorUserInfoKey v42;
  void *v43;
  NSErrorUserInfoKey v44;
  void *v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  int v53;

  v41 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, a2, a3, a4, a5, &v41));
  v9 = v41;
  v10 = v8;
  *a6 = v10;
  if (!v9)
  {
    if (v10)
    {
      v13 = objc_msgSend(v10, "status");
      if (v13 == 36864)
      {
        v12 = 0;
        goto LABEL_26;
      }
      if (v13 == 26881)
      {
        v14 = sub_1001307F4();
        v11 = (id)objc_claimAutoreleasedReturnValue(v14);
        goto LABEL_3;
      }
      v33 = objc_alloc((Class)NSError);
      v34 = objc_msgSend(*a6, "status");
      v42 = NSLocalizedDescriptionKey;
      v35 = objc_msgSend(*a6, "status");
      v36 = 0;
      v37 = "Unknown Error";
      while ((unsigned __int16)word_1002E7B50[v36] != v35)
      {
        v36 += 8;
        if (v36 == 192)
          goto LABEL_24;
      }
      v37 = *(const char **)&word_1002E7B50[v36 + 4];
LABEL_24:
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v37));
      v43 = v30;
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
      v12 = objc_msgSend(v33, "initWithDomain:code:userInfo:", CFSTR("GP"), v34, v38);

    }
    else
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v17 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("sendTrustCommand:p1:p2:data:rapdu:");
        v21 = 45;
        if (isMetaClass)
          v21 = 43;
        v17(3, "%c[%{public}s %{public}s]:%i Failed to send trust command, expecting rapdu", v21, ClassName, Name, 557);
      }
      v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v23 = NFSharedLogGetLogger(v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = object_getClass(a1);
        if (class_isMetaClass(v25))
          v26 = 43;
        else
          v26 = 45;
        v27 = object_getClassName(a1);
        v28 = sel_getName("sendTrustCommand:p1:p2:data:rapdu:");
        *(_DWORD *)buf = 67109890;
        v47 = v26;
        v48 = 2082;
        v49 = v27;
        v50 = 2082;
        v51 = v28;
        v52 = 1024;
        v53 = 557;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send trust command, expecting rapdu", buf, 0x22u);
      }

      v29 = objc_alloc((Class)NSError);
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v44 = NSLocalizedDescriptionKey;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v45 = v31;
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1));
      v12 = objc_msgSend(v29, "initWithDomain:code:userInfo:", v30, 16, v32);

    }
    goto LABEL_26;
  }
  v11 = v9;
LABEL_3:
  v12 = v11;
LABEL_26:

  return v12;
}

id sub_1000AE670(id a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  id v21;
  void *v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *v25;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  const char *v35;
  const char *v36;
  unsigned int v37;
  id v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  const char *v42;
  void *v43;
  void *v44;
  const char *ClassName;
  const char *Name;
  uint64_t v48;
  id v49;
  NSErrorUserInfoKey v50;
  void *v51;
  uint8_t buf[4];
  int v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  id v61;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v49 = 0;
      v5 = sub_10008DC64(a1, objc_msgSend(v3, "unsignedShortValue"), (uint64_t)&v49);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = v49;
      if (v7)
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v10 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("deleteKeyInSlot:");
          v13 = 45;
          if (isMetaClass)
            v13 = 43;
          v10(3, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", v13, ClassName, Name, 585, v7);
        }
        v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v15 = NFSharedLogGetLogger(v14);
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v17 = object_getClass(a1);
          if (class_isMetaClass(v17))
            v18 = 43;
          else
            v18 = 45;
          v19 = object_getClassName(a1);
          v20 = sel_getName("deleteKeyInSlot:");
          *(_DWORD *)buf = 67110146;
          v53 = v18;
          v54 = 2082;
          v55 = v19;
          v56 = 2082;
          v57 = v20;
          v58 = 1024;
          v59 = 585;
          v60 = 2114;
          v61 = v7;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", buf, 0x2Cu);
        }

        a1 = v7;
      }
      else if (objc_msgSend(v6, "status") == 36864 || objc_msgSend(v6, "status") == 27272)
      {
        a1 = 0;
      }
      else
      {
        v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v23 = NFLogGetLogger(v22);
        if (v23)
        {
          v24 = (void (*)(uint64_t, const char *, ...))v23;
          v25 = object_getClass(a1);
          v26 = class_isMetaClass(v25);
          v27 = object_getClassName(a1);
          v28 = sel_getName("deleteKeyInSlot:");
          v48 = objc_msgSend(v6, "status");
          v29 = 45;
          if (v26)
            v29 = 43;
          v24(3, "%c[%{public}s %{public}s]:%i Error status on delete 0x%X", v29, v27, v28, 589, v48);
        }
        v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v31 = NFSharedLogGetLogger(v30);
        v32 = objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          v33 = object_getClass(a1);
          if (class_isMetaClass(v33))
            v34 = 43;
          else
            v34 = 45;
          v35 = object_getClassName(a1);
          v36 = sel_getName("deleteKeyInSlot:");
          v37 = objc_msgSend(v6, "status");
          *(_DWORD *)buf = 67110146;
          v53 = v34;
          v54 = 2082;
          v55 = v35;
          v56 = 2082;
          v57 = v36;
          v58 = 1024;
          v59 = 589;
          v60 = 1024;
          LODWORD(v61) = v37;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error status on delete 0x%X", buf, 0x28u);
        }

        v38 = objc_alloc((Class)NSError);
        v39 = objc_msgSend(v6, "status");
        v50 = NSLocalizedDescriptionKey;
        v40 = objc_msgSend(v6, "status");
        v41 = 0;
        v42 = "Unknown Error";
        while ((unsigned __int16)word_1002E7B50[v41] != v40)
        {
          v41 += 8;
          if (v41 == 192)
            goto LABEL_32;
        }
        v42 = *(const char **)&word_1002E7B50[v41 + 4];
LABEL_32:
        v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v42));
        v51 = v43;
        v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1));
        a1 = objc_msgSend(v38, "initWithDomain:code:userInfo:", CFSTR("GP"), v39, v44);

      }
    }
    else
    {
      v21 = sub_100130D58(CFSTR("slot is nil"));
      a1 = (id)objc_claimAutoreleasedReturnValue(v21);
    }
  }

  return a1;
}

id sub_1000AEAC0(void *a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *specific;
  uint64_t Logger;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *Class;
  const char *Name;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *ClassName;
  const char *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  _BOOL4 isMetaClass;
  const char *sel;
  id v48;
  id v49;
  id v50;
  _QWORD v51[4];
  __int16 v52;
  char v53;
  __int16 v54;
  char v55;
  uint8_t buf[8];
  _BYTE v57[40];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v5 = objc_msgSend(v3, "unsignedShortValue");
      v53 = 1;
      v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v53, 1);
      v52 = __rev16(v5);
      v7 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v52, 2);
      v51[0] = objc_msgSend(v6, "DERItem");
      v51[1] = v8;
      v51[2] = objc_msgSend(v7, "DERItem");
      v51[3] = v9;
      v50 = 0;
      v10 = sub_1000AEE94((unint64_t)v51, 2u, (uint64_t)&unk_100269C20, &v50);
      v11 = v50;
      v12 = v11;
      if (v10 || !v11)
      {
        v43 = sub_100130704(CFSTR("Error while encoding GetKeyInputData"));
        a1 = (void *)objc_claimAutoreleasedReturnValue(v43);
        v41 = 0;
        v27 = 0;
      }
      else
      {
        v49 = 0;
        v13 = v11;
        v14 = objc_alloc((Class)NSData);
        v55 = 1;
        v15 = objc_msgSend(v14, "initWithBytes:length:", &v55, 1);
        v16 = objc_alloc((Class)NSData);
        v54 = 272;
        v17 = objc_msgSend(v16, "initWithBytes:length:", &v54, 2);
        *(_QWORD *)buf = objc_msgSend(v15, "DERItem");
        *(_QWORD *)v57 = v18;
        *(_QWORD *)&v57[8] = objc_msgSend(v17, "DERItem");
        *(_QWORD *)&v57[16] = v19;
        v20 = objc_msgSend(v13, "DERItem");
        v22 = v21;

        *(_QWORD *)&v57[24] = v20;
        *(_QWORD *)&v57[32] = v22;
        LODWORD(v13) = sub_1000AEE94((unint64_t)buf, 3u, (uint64_t)&unk_100269C50, &v49);

        v23 = v49;
        v24 = v23;
        if ((_DWORD)v13 || !v23)
        {
          v44 = sub_100130704(CFSTR("Error while encoding GetKeyInputCommandData"));
          a1 = (void *)objc_claimAutoreleasedReturnValue(v44);
          v41 = 0;
          v27 = 0;
        }
        else
        {
          v48 = 0;
          v25 = sub_1000AE2F4(a1, 160, 128, 0, (uint64_t)v23, &v48);
          v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
          v27 = v48;
          if (v26)
          {
            specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            Logger = NFLogGetLogger(specific);
            if (Logger)
            {
              v30 = (void (*)(uint64_t, const char *, ...))Logger;
              Class = object_getClass(a1);
              isMetaClass = class_isMetaClass(Class);
              sel = object_getClassName(a1);
              Name = sel_getName("getKeyInSlot:");
              v33 = 45;
              if (isMetaClass)
                v33 = 43;
              v30(3, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", v33, sel, Name, 638, v26);
            }
            v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v35 = NFSharedLogGetLogger(v34);
            v36 = objc_claimAutoreleasedReturnValue(v35);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              v37 = object_getClass(a1);
              if (class_isMetaClass(v37))
                v38 = 43;
              else
                v38 = 45;
              ClassName = object_getClassName(a1);
              v40 = sel_getName("getKeyInSlot:");
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = v38;
              *(_WORD *)v57 = 2082;
              *(_QWORD *)&v57[2] = ClassName;
              *(_WORD *)&v57[10] = 2082;
              *(_QWORD *)&v57[12] = v40;
              *(_WORD *)&v57[20] = 1024;
              *(_DWORD *)&v57[22] = 638;
              *(_WORD *)&v57[26] = 2114;
              *(_QWORD *)&v57[28] = v26;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", buf, 0x2Cu);
            }

          }
          v41 = v26;
          a1 = v41;
        }

      }
    }
    else
    {
      v42 = sub_100130D58(CFSTR("slot is nil"));
      a1 = (void *)objc_claimAutoreleasedReturnValue(v42);
    }
  }

  return a1;
}

uint64_t sub_1000AEE94(unint64_t a1, unsigned int a2, uint64_t a3, _QWORD *a4)
{
  id v8;
  uint64_t v9;
  unint64_t v11;

  v11 = DERLengthOfEncodedSequence(0x2000000000000010, a1, a2, a3);
  v8 = objc_retainAutorelease(objc_msgSend(objc_alloc((Class)NSMutableData), "initWithLength:", v11));
  v9 = DEREncodeSequence(0x2000000000000010, a1, a2, a3, (unint64_t)objc_msgSend(v8, "mutableBytes"), &v11);
  if (!(_DWORD)v9)
    *a4 = objc_retainAutorelease(v8);

  return v9;
}

NSObject *sub_1000AEF50(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void (*v14)(uint64_t, const char *, ...);
  objc_class *v15;
  _BOOL4 isMetaClass;
  const char *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  id v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  void *v32;
  uint64_t v33;
  void (*v34)(uint64_t, const char *, ...);
  objc_class *v35;
  _BOOL4 v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  objc_class *v41;
  int v42;
  void *v43;
  uint64_t v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  NSMutableData *v49;
  void *v50;
  unsigned int v51;
  id v52;
  NSMutableArray *v53;
  void *v54;
  id v55;
  void *v56;
  NSObject *v57;
  id v58;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v62;
  const char *ClassName;
  const char *Name;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  objc_class *v68;
  int v69;
  const char *v70;
  const char *v71;
  void *v72;
  _BOOL4 v73;
  id v74;
  NSObject *v75;
  uint8_t *v76;
  id v77;
  id v78;
  id v79;
  id v80;
  NSMutableArray *v81;
  void *v82;
  id v83;
  id v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  int v89;
  id *p_keyVersion;
  void *v91;
  void *v92;
  void *v93;
  void (*v94)(uint64_t, const char *, ...);
  objc_class *v95;
  uint64_t v96;
  const char *v97;
  const char *v98;
  void *v99;
  uint64_t v100;
  objc_class *v101;
  int v102;
  const char *v103;
  const char *v104;
  const char *v105;
  id v106;
  id v107;
  void *v108;
  void (*v109)(uint64_t, const char *, ...);
  objc_class *v110;
  uint64_t v111;
  const char *v112;
  const char *v113;
  void *v114;
  uint64_t v115;
  NSObject *v116;
  objc_class *v117;
  int v118;
  const char *v119;
  const char *v120;
  unsigned int v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  void *v129;
  void (*v130)(uint64_t, const char *, ...);
  objc_class *v131;
  uint64_t v132;
  const char *v133;
  const char *v134;
  void *v135;
  uint64_t v136;
  NSObject *v137;
  objc_class *v138;
  int v139;
  const char *v140;
  const char *v141;
  id v142;
  void *v143;
  void *v144;
  void (*v145)(uint64_t, const char *, ...);
  objc_class *v146;
  uint64_t v147;
  const char *v148;
  const char *v149;
  void *v150;
  uint64_t v151;
  objc_class *v152;
  int v153;
  const char *v154;
  const char *v155;
  const char *v157;
  id v158;
  void *v159;
  void *v160;
  id v161;
  NFTrustCreateKeyOutputTable *v162;
  _QWORD *v163;
  id v164;
  void *v165;
  id v166;
  id obj;
  id *v168;
  void *v169;
  void *v170;
  id v171;
  id v172;
  id v173;
  _QWORD v174[5];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint8_t v179[4];
  int v180;
  __int16 v181;
  const char *v182;
  __int16 v183;
  const char *v184;
  __int16 v185;
  int v186;
  __int16 v187;
  unsigned int v188;
  uint8_t buf[8];
  _BYTE v190[40];

  v7 = a2;
  v8 = a3;
  v169 = v7;
  v170 = v8;
  if (!a1)
  {
    v31 = 0;
    goto LABEL_140;
  }
  if (v8)
  {
    if (v7)
    {
      v163 = a4;
      v166 = a1;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "subjectIdentifier"));
      v10 = v9;
      v11 = (void *)objc_opt_self(NFTrustCreateKeyInputTable);
      if (v10)
      {
        if (objc_msgSend(v10, "length") && (unint64_t)objc_msgSend(v10, "length") < 0x41)
        {
          *(_QWORD *)buf = v11;
          *(_QWORD *)v190 = &OBJC_METACLASS___NFTrustCreateKeyInputTable;
          v76 = -[uint8_t new]((objc_super *)buf, "new");
          v168 = (id *)v76;
          if (!v76)
          {
            v168 = 0;
LABEL_31:

            if (!v168)
            {
              v55 = sub_100130704(CFSTR("Could not create key input table"));
              v31 = objc_claimAutoreleasedReturnValue(v55);
LABEL_139:

              goto LABEL_140;
            }
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v170, "discretionaryData"));

            if (v43)
            {
              v44 = objc_claimAutoreleasedReturnValue(objc_msgSend(v170, "discretionaryData"));
              v45 = v168[4];
              v168[4] = (id)v44;

            }
            v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v170, "localValidations"));

            if (v46)
            {
              *(_QWORD *)buf = 0;
              *(_QWORD *)v190 = buf;
              *(_QWORD *)&v190[8] = 0x3032000000;
              *(_QWORD *)&v190[16] = sub_1000AFFBC;
              *(_QWORD *)&v190[24] = sub_1000AFFCC;
              *(_QWORD *)&v190[32] = objc_opt_new(NSMutableData);
              v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v170, "localValidations"));
              v174[0] = _NSConcreteStackBlock;
              v174[1] = 3221225472;
              v174[2] = sub_1000AFFD4;
              v174[3] = &unk_1002E7B30;
              v174[4] = buf;
              objc_msgSend(v47, "enumerateObjectsUsingBlock:", v174);

              objc_storeStrong(v168 + 5, *(id *)(*(_QWORD *)v190 + 40));
              _Block_object_dispose(buf, 8);

            }
            v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v170, "counterLimit"));

            if (v48)
            {
              v49 = objc_opt_new(NSMutableData);
              *(_DWORD *)buf = 0;
              v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v170, "counterLimit"));
              v51 = objc_msgSend(v50, "unsignedIntValue");

              *(_DWORD *)buf = v51;
              -[NSMutableData appendBytes:length:](v49, "appendBytes:length:", &buf[3], 1);
              -[NSMutableData appendBytes:length:](v49, "appendBytes:length:", &buf[2], 1);
              -[NSMutableData appendBytes:length:](v49, "appendBytes:length:", &buf[1], 1);
              -[NSMutableData appendBytes:length:](v49, "appendBytes:length:", buf, 1);
              v52 = v168[6];
              v168[6] = v49;

            }
            v173 = 0;
            v53 = sub_1000ACB90(v168, &v173);
            v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
            if (v173)
            {
              v165 = 0;
            }
            else
            {
              v56 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 32551, v54));
              v165 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "asData"));

            }
            v57 = v173;
            if (v57)
            {
              v31 = v57;
              v164 = 0;
LABEL_138:

              goto LABEL_139;
            }
            v172 = 0;
            v58 = sub_1000AE2F4(a1, 193, 0, (uint64_t)objc_msgSend(v169, "unsignedCharValue"), (uint64_t)v165, &v172);
            v31 = objc_claimAutoreleasedReturnValue(v58);
            v164 = v172;
            if (v31)
            {
              specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
              if (Logger)
              {
                Class = object_getClass(a1);
                if (class_isMetaClass(Class))
                  v62 = 43;
                else
                  v62 = 45;
                ClassName = object_getClassName(a1);
                Name = sel_getName("createKeyInSlot:request:response:");
                Logger(3, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", v62, ClassName, Name, 712, v31);
              }
              v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v66 = NFSharedLogGetLogger(v65);
              v67 = objc_claimAutoreleasedReturnValue(v66);
              if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
              {
                v68 = object_getClass(a1);
                if (class_isMetaClass(v68))
                  v69 = 43;
                else
                  v69 = 45;
                v70 = object_getClassName(a1);
                v71 = sel_getName("createKeyInSlot:request:response:");
                *(_DWORD *)buf = 67110146;
                *(_DWORD *)&buf[4] = v69;
                *(_WORD *)v190 = 2082;
                *(_QWORD *)&v190[2] = v70;
                *(_WORD *)&v190[10] = 2082;
                *(_QWORD *)&v190[12] = v71;
                *(_WORD *)&v190[20] = 1024;
                *(_DWORD *)&v190[22] = 712;
                *(_WORD *)&v190[26] = 2114;
                *(_QWORD *)&v190[28] = v31;
                _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", buf, 0x2Cu);
              }

              v72 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject domain](v31, "domain"));
              if (objc_msgSend(v72, "isEqualToString:", CFSTR("GP")))
              {
                v73 = -[NSObject code](v31, "code") == (id)27268;

                if (v73)
                {
                  v74 = sub_100130A88(CFSTR("create key with counter"));
                  v75 = v31;
                  v31 = objc_claimAutoreleasedReturnValue(v74);
LABEL_137:

                  goto LABEL_138;
                }
              }
              else
              {

              }
              v93 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v94 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v93);
              if (v94)
              {
                v95 = object_getClass(a1);
                if (class_isMetaClass(v95))
                  v96 = 43;
                else
                  v96 = 45;
                v97 = object_getClassName(a1);
                v98 = sel_getName("createKeyInSlot:request:response:");
                v94(3, "%c[%{public}s %{public}s]:%i Failed to create Key in SE", v96, v97, v98, 721);
              }
              v99 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v100 = NFSharedLogGetLogger(v99);
              v75 = objc_claimAutoreleasedReturnValue(v100);
              if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                goto LABEL_137;
              v101 = object_getClass(a1);
              if (class_isMetaClass(v101))
                v102 = 43;
              else
                v102 = 45;
              v103 = object_getClassName(a1);
              v104 = sel_getName("createKeyInSlot:request:response:");
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v102;
              *(_WORD *)v190 = 2082;
              *(_QWORD *)&v190[2] = v103;
              *(_WORD *)&v190[10] = 2082;
              *(_QWORD *)&v190[12] = v104;
              *(_WORD *)&v190[20] = 1024;
              *(_DWORD *)&v190[22] = 721;
              v105 = "%c[%{public}s %{public}s]:%i Failed to create Key in SE";
LABEL_136:
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, v105, buf, 0x22u);
              goto LABEL_137;
            }
            v162 = objc_opt_new(NFTrustCreateKeyOutputTable);
            v171 = 0;
            v161 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v164, "response"));
            if (!v162)
            {
              v92 = 0;
LABEL_114:

              v31 = v171;
              *v163 = v92;

              if (!v31)
                goto LABEL_138;
              v129 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v130 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v129);
              if (v130)
              {
                v131 = object_getClass(v166);
                if (class_isMetaClass(v131))
                  v132 = 43;
                else
                  v132 = 45;
                v133 = object_getClassName(v166);
                v134 = sel_getName("createKeyInSlot:request:response:");
                v130(3, "%c[%{public}s %{public}s]:%i Key was created in SE but an error was detected in response, delete key ...", v132, v133, v134, 730);
              }
              v135 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v136 = NFSharedLogGetLogger(v135);
              v137 = objc_claimAutoreleasedReturnValue(v136);
              if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
              {
                v138 = object_getClass(v166);
                if (class_isMetaClass(v138))
                  v139 = 43;
                else
                  v139 = 45;
                v140 = object_getClassName(v166);
                v141 = sel_getName("createKeyInSlot:request:response:");
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&buf[4] = v139;
                *(_WORD *)v190 = 2082;
                *(_QWORD *)&v190[2] = v140;
                *(_WORD *)&v190[10] = 2082;
                *(_QWORD *)&v190[12] = v141;
                *(_WORD *)&v190[20] = 1024;
                *(_DWORD *)&v190[22] = 730;
                _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Key was created in SE but an error was detected in response, delete key ...", buf, 0x22u);
              }

              v142 = sub_1000AE670(v166, v169);
              v143 = (void *)objc_claimAutoreleasedReturnValue(v142);

              if (!v143)
                goto LABEL_138;
              v144 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v145 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v144);
              if (v145)
              {
                v146 = object_getClass(v166);
                if (class_isMetaClass(v146))
                  v147 = 43;
                else
                  v147 = 45;
                v148 = object_getClassName(v166);
                v149 = sel_getName("createKeyInSlot:request:response:");
                v145(3, "%c[%{public}s %{public}s]:%i Could not delete badly created key", v147, v148, v149, 733);
              }
              v150 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v151 = NFSharedLogGetLogger(v150);
              v75 = objc_claimAutoreleasedReturnValue(v151);
              if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                goto LABEL_137;
              v152 = object_getClass(v166);
              if (class_isMetaClass(v152))
                v153 = 43;
              else
                v153 = 45;
              v154 = object_getClassName(v166);
              v155 = sel_getName("createKeyInSlot:request:response:");
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v153;
              *(_WORD *)v190 = 2082;
              *(_QWORD *)&v190[2] = v154;
              *(_WORD *)&v190[10] = 2082;
              *(_QWORD *)&v190[12] = v155;
              *(_WORD *)&v190[20] = 1024;
              *(_DWORD *)&v190[22] = 733;
              v105 = "%c[%{public}s %{public}s]:%i Could not delete badly created key";
              goto LABEL_136;
            }
            v81 = sub_1000ACB90(v168, &v171);
            v159 = (void *)objc_claimAutoreleasedReturnValue(v81);
            v82 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v161));
            v160 = v82;
            if (v82)
            {
              v177 = 0u;
              v178 = 0u;
              v175 = 0u;
              v176 = 0u;
              obj = v82;
              v83 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v175, buf, 16);
              if (v83)
              {
                v84 = 0;
                v85 = *(_QWORD *)v176;
                while (2)
                {
                  v86 = 0;
                  v87 = v84;
                  do
                  {
                    if (*(_QWORD *)v176 != v85)
                      objc_enumerationMutation(obj);
                    v88 = *(void **)(*((_QWORD *)&v175 + 1) + 8 * (_QWORD)v86);
                    v84 = v88;

                    v89 = objc_msgSend(v84, "tag");
                    if (v89 <= 88)
                    {
                      p_keyVersion = (id *)&v162->_keyVersion;
                      if (v89 != 65)
                      {
                        p_keyVersion = (id *)&v162->_keyPlatformIdentifier;
                        if (v89 != 67)
                        {
LABEL_96:
                          v108 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                          v109 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v108);
                          if (v109)
                          {
                            v110 = object_getClass(v162);
                            if (class_isMetaClass(v110))
                              v111 = 43;
                            else
                              v111 = 45;
                            v112 = object_getClassName(v162);
                            v113 = sel_getName("keyAttestionWith:responseData:error:");
                            v109(3, "%c[%{public}s %{public}s]:%i Could not create key, unexpected tag %u returned from SE", v111, v112, v113, 277, objc_msgSend(v84, "tag"));
                          }
                          v114 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                          v115 = NFSharedLogGetLogger(v114);
                          v116 = objc_claimAutoreleasedReturnValue(v115);
                          if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
                          {
                            v117 = object_getClass(v162);
                            if (class_isMetaClass(v117))
                              v118 = 43;
                            else
                              v118 = 45;
                            v119 = object_getClassName(v162);
                            v120 = sel_getName("keyAttestionWith:responseData:error:");
                            v121 = objc_msgSend(v84, "tag");
                            *(_DWORD *)v179 = 67110146;
                            v180 = v118;
                            v181 = 2082;
                            v182 = v119;
                            v183 = 2082;
                            v184 = v120;
                            v185 = 1024;
                            v186 = 277;
                            v187 = 1024;
                            v188 = v121;
                            _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not create key, unexpected tag %u returned from SE", v179, 0x28u);
                          }

                          v122 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Could not create key, unexpected tag %u returned from SE"), objc_msgSend(v84, "tag"));
                          v123 = sub_100130704(v122);
                          v171 = (id)objc_claimAutoreleasedReturnValue(v123);

                          v92 = 0;
                          goto LABEL_113;
                        }
                      }
                    }
                    else
                    {
                      p_keyVersion = (id *)&v162->_keyDeviceNonce;
                      if (v89 != 89)
                      {
                        p_keyVersion = (id *)&v162->_keyAttestationSignature;
                        if (v89 != 24375)
                        {
                          p_keyVersion = (id *)&v162->_keyPublicKey;
                          if (v89 != 32585)
                            goto LABEL_96;
                        }
                      }
                    }
                    objc_storeStrong(p_keyVersion, v88);
                    v86 = (char *)v86 + 1;
                    v87 = v84;
                  }
                  while (v83 != v86);
                  v83 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v175, buf, 16);
                  if (v83)
                    continue;
                  break;
                }

              }
              if (v162->_keyVersion)
              {
                if (v162->_keyPlatformIdentifier)
                {
                  if (v162->_keyPublicKey)
                  {
                    if (v162->_keyDeviceNonce)
                    {
                      if (v162->_keyAttestationSignature)
                      {
                        objc_msgSend(v159, "insertObject:atIndex:");
                        objc_msgSend(v159, "insertObject:atIndex:", v162->_keyPlatformIdentifier, 1);
                        objc_msgSend(v159, "insertObject:atIndex:", v162->_keyPublicKey, 1);
                        objc_msgSend(v159, "insertObject:atIndex:", v162->_keyDeviceNonce, 1);
                        objc_msgSend(v159, "insertObject:atIndex:", v162->_keyAttestationSignature, 1);
                        v91 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 32545, v159));
                        v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "asData"));

LABEL_113:
                        goto LABEL_114;
                      }
                      v128 = sub_100130704(CFSTR("Could not create key, missing keyAttestationSignature from SE response"));
                      v107 = (id)objc_claimAutoreleasedReturnValue(v128);
                    }
                    else
                    {
                      v127 = sub_100130704(CFSTR("Could not create key, missing keyDeviceNonce from SE response"));
                      v107 = (id)objc_claimAutoreleasedReturnValue(v127);
                    }
                  }
                  else
                  {
                    v126 = sub_100130704(CFSTR("Could not create key, missing keyPublicKey from SE response"));
                    v107 = (id)objc_claimAutoreleasedReturnValue(v126);
                  }
                }
                else
                {
                  v125 = sub_100130704(CFSTR("Could not create key, missing keyPlatformIdentifier from SE response"));
                  v107 = (id)objc_claimAutoreleasedReturnValue(v125);
                }
              }
              else
              {
                v124 = sub_100130704(CFSTR("Could not create key, missing keyVersion from SE response"));
                v107 = (id)objc_claimAutoreleasedReturnValue(v124);
              }
            }
            else
            {
              v106 = sub_100130704(CFSTR("Error in SE response"));
              v107 = (id)objc_claimAutoreleasedReturnValue(v106);
            }
            v92 = 0;
            v171 = v107;
            goto LABEL_113;
          }
          objc_storeStrong((id *)v76 + 1, v9);
          LOWORD(v175) = 256;
          v77 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v175, 2);
          v78 = v168[2];
          v168[2] = v77;

          v79 = objc_alloc((Class)NSData);
          *(_WORD *)v179 = 257;
          v80 = objc_msgSend(v79, "initWithBytes:length:", v179, 2);
          v22 = v168[3];
          v168[3] = v80;
LABEL_30:

          goto LABEL_31;
        }
        v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v13 = NFLogGetLogger(v12);
        if (v13)
        {
          v14 = (void (*)(uint64_t, const char *, ...))v13;
          v15 = object_getClass(v11);
          isMetaClass = class_isMetaClass(v15);
          v17 = object_getClassName(v11);
          v18 = sel_getName("createKeyInputTableWithSubjectIdentifier:");
          v158 = objc_msgSend(v10, "length");
          v19 = 45;
          if (isMetaClass)
            v19 = 43;
          v14(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustCreateKeyInputTable, subjectIdentifier length is not ]0, 0x40] (%lu)", v19, v17, v18, 168, v158);
        }
        v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v21 = NFSharedLogGetLogger(v20);
        v22 = objc_claimAutoreleasedReturnValue(v21);
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
LABEL_29:
          v168 = 0;
          goto LABEL_30;
        }
        v23 = object_getClass(v11);
        if (class_isMetaClass(v23))
          v24 = 43;
        else
          v24 = 45;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v24;
        *(_WORD *)v190 = 2082;
        *(_QWORD *)&v190[2] = object_getClassName(v11);
        *(_WORD *)&v190[10] = 2082;
        *(_QWORD *)&v190[12] = sel_getName("createKeyInputTableWithSubjectIdentifier:");
        *(_WORD *)&v190[20] = 1024;
        *(_DWORD *)&v190[22] = 168;
        *(_WORD *)&v190[26] = 2048;
        *(_QWORD *)&v190[28] = objc_msgSend(v10, "length");
        v25 = "%c[%{public}s %{public}s]:%i Could not create NFTrustCreateKeyInputTable, subjectIdentifier length is not ]0, 0x40] (%lu)";
        v26 = v22;
        v27 = 44;
      }
      else
      {
        v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v33 = NFLogGetLogger(v32);
        if (v33)
        {
          v34 = (void (*)(uint64_t, const char *, ...))v33;
          v35 = object_getClass(v11);
          v36 = class_isMetaClass(v35);
          v37 = object_getClassName(v11);
          v157 = sel_getName("createKeyInputTableWithSubjectIdentifier:");
          v38 = 45;
          if (v36)
            v38 = 43;
          v34(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustCreateKeyInputTable, subjectIdentifier is nil", v38, v37, v157, 163);
        }
        v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v40 = NFSharedLogGetLogger(v39);
        v22 = objc_claimAutoreleasedReturnValue(v40);
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_29;
        v41 = object_getClass(v11);
        if (class_isMetaClass(v41))
          v42 = 43;
        else
          v42 = 45;
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v42;
        *(_WORD *)v190 = 2082;
        *(_QWORD *)&v190[2] = object_getClassName(v11);
        *(_WORD *)&v190[10] = 2082;
        *(_QWORD *)&v190[12] = sel_getName("createKeyInputTableWithSubjectIdentifier:");
        *(_WORD *)&v190[20] = 1024;
        *(_DWORD *)&v190[22] = 163;
        v25 = "%c[%{public}s %{public}s]:%i Could not create NFTrustCreateKeyInputTable, subjectIdentifier is nil";
        v26 = v22;
        v27 = 34;
      }
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, v25, buf, v27);
      goto LABEL_29;
    }
    v30 = sub_100130D58(CFSTR("slot is nil"));
    v29 = objc_claimAutoreleasedReturnValue(v30);
  }
  else
  {
    v28 = sub_100130D58(CFSTR("Could not performCreateKey, with nil request"));
    v29 = objc_claimAutoreleasedReturnValue(v28);
  }
  v31 = v29;
LABEL_140:

  return v31;
}

void sub_1000AFF9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AFFBC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000AFFCC(uint64_t a1)
{

}

void sub_1000AFFD4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v3 = a2;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000B0094;
  v4[3] = &unk_1002E7B08;
  v4[4] = &v5;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v4);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "appendBytes:length:", v6 + 3, 1);
  _Block_object_dispose(&v5, 8);

}

void sub_1000B007C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B0094(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "primitiveLocalValidation");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= result;
  return result;
}

id sub_1000B00CC(id a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id *v12;
  NSMutableArray *v13;
  id v14;
  id v15;
  __CFString *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *specific;
  uint64_t Logger;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  void *v36;
  uint64_t v37;
  void (*v38)(uint64_t, const char *, ...);
  objc_class *v39;
  _BOOL4 v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  objc_class *v45;
  int v46;
  const char *v47;
  const char *v48;
  NFTrustSignOutputTable *v49;
  id *v50;
  uint64_t v51;
  NFTLV *counter;
  NFTLV *v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  const char *ClassName;
  const char *v60;
  const char *Name;
  const char *v62;
  NFTrustSignOutputTable *v63;
  char *sel;
  void *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint8_t buf[4];
  int v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  int v77;
  __int16 v78;
  void *v79;

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (!a1)
    goto LABEL_39;
  if (!v8)
  {
    v16 = CFSTR("Could not performSignWithKey with nil request");
LABEL_8:
    v17 = sub_100130D58(v16);
    a1 = (id)objc_claimAutoreleasedReturnValue(v17);
    goto LABEL_39;
  }
  if (!v7)
  {
    v16 = CFSTR("slot is nil");
    goto LABEL_8;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "challenge"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "data"));
  v69 = 0;
  v12 = sub_1000AD0BC((uint64_t)NFTrustSignInputTable, v10, v11, &v69);
  v13 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(v12);
  v14 = v69;

  if (v14)
  {
    a1 = v14;
    v15 = 0;
  }
  else
  {
    v68 = 0;
    v18 = sub_1000AD728(v13, &v68);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v20 = v68;
    if (v20)
    {
      a1 = v20;
      v15 = 0;
    }
    else
    {
      v67 = 0;
      v21 = sub_1000AE2F4(a1, 195, 0, (uint64_t)objc_msgSend(v7, "unsignedCharValue"), (uint64_t)v19, &v67);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v15 = v67;
      v65 = v19;
      if (v22)
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v25 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("signWithKeyInSlot:request:response:");
          v28 = 45;
          if (isMetaClass)
            v28 = 43;
          v25(3, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", v28, ClassName, Name, 774, v22);
        }
        v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v30 = NFSharedLogGetLogger(v29);
        v31 = objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          v32 = object_getClass(a1);
          if (class_isMetaClass(v32))
            v33 = 43;
          else
            v33 = 45;
          v34 = object_getClassName(a1);
          v35 = sel_getName("signWithKeyInSlot:request:response:");
          *(_DWORD *)buf = 67110146;
          v71 = v33;
          v72 = 2082;
          v73 = v34;
          v74 = 2082;
          v75 = v35;
          v76 = 1024;
          v77 = 774;
          v78 = 2114;
          v79 = v22;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", buf, 0x2Cu);
        }

        v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v37 = NFLogGetLogger(v36);
        if (v37)
        {
          v38 = (void (*)(uint64_t, const char *, ...))v37;
          v39 = object_getClass(a1);
          v40 = class_isMetaClass(v39);
          v60 = object_getClassName(a1);
          v62 = sel_getName("signWithKeyInSlot:request:response:");
          v41 = 45;
          if (v40)
            v41 = 43;
          v38(3, "%c[%{public}s %{public}s]:%i Failed to sign with Key in SE : %{public}@", v41, v60, v62, 778, v22);
        }
        v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v43 = NFSharedLogGetLogger(v42);
        v44 = objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          v45 = object_getClass(a1);
          if (class_isMetaClass(v45))
            v46 = 43;
          else
            v46 = 45;
          v47 = object_getClassName(a1);
          v48 = sel_getName("signWithKeyInSlot:request:response:");
          *(_DWORD *)buf = 67110146;
          v71 = v46;
          v72 = 2082;
          v73 = v47;
          v74 = 2082;
          v75 = v48;
          v76 = 1024;
          v77 = 778;
          v78 = 2114;
          v79 = v22;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to sign with Key in SE : %{public}@", buf, 0x2Cu);
        }

        a1 = v22;
      }
      else
      {
        v49 = objc_opt_new(NFTrustSignOutputTable);
        v66 = 0;
        sel = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "response"));
        v50 = sub_1000ADB18((id *)&v49->super.isa, v13, sel, 0, &v66);
        v51 = objc_claimAutoreleasedReturnValue(v50);
        a1 = v66;
        v63 = v49;
        if (v49)
          counter = v49->_counter;
        else
          counter = 0;
        v53 = counter;
        v54 = (void *)objc_claimAutoreleasedReturnValue(-[NFTLV value](v53, "value"));
        v55 = (void *)v51;
        v56 = (id)objc_claimAutoreleasedReturnValue(+[NFTrustSignResponse signResponseWithRawData:counterValueData:](NFTrustSignResponse, "signResponseWithRawData:counterValueData:", v51, v54));

        *a4 = v56;
        if (a1)
          v57 = a1;

      }
      v19 = v65;
    }

  }
LABEL_39:

  return a1;
}

objc_class *sub_1000B05C0(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, _QWORD *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *specific;
  uint64_t Logger;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  objc_class *v36;
  void *v37;
  objc_class *v38;
  __CFString *v39;
  id v40;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id *v46;
  NSMutableArray *v47;
  id v48;
  void *v49;
  uint64_t v50;
  void (*v51)(uint64_t, const char *, ...);
  objc_class *v52;
  _BOOL4 v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  objc_class *v58;
  int v59;
  const char *v60;
  const char *v61;
  objc_class *v62;
  void *v63;
  uint64_t v64;
  void (*v65)(uint64_t, const char *, ...);
  objc_class *v66;
  _BOOL4 v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  NSObject *v72;
  objc_class *v73;
  int v74;
  const char *v75;
  const char *v76;
  id v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void (*v81)(uint64_t, const char *, ...);
  objc_class *v82;
  _BOOL4 v83;
  const char *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  NSObject *v88;
  objc_class *v89;
  int v90;
  const char *v91;
  const char *v92;
  id v93;
  void *v94;
  void *v95;
  id v96;
  id v97;
  void *v98;
  id v99;
  id v100;
  void *v101;
  void *v102;
  id v103;
  uint64_t v104;
  id v105;
  void *v106;
  NSMutableData *v107;
  uint64_t v108;
  void *v109;
  void *v110;
  void *v111;
  id v112;
  id v113;
  objc_class *v114;
  unsigned int v115;
  id v116;
  unsigned int v117;
  void *v118;
  uint64_t v119;
  void (*v120)(uint64_t, const char *, ...);
  objc_class *v121;
  _BOOL4 v122;
  const char *v123;
  void *v124;
  int v125;
  void *v126;
  void *v127;
  id v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  NSObject *v132;
  objc_class *v133;
  int v134;
  id v135;
  void *v136;
  NSErrorUserInfoKey v137;
  uint64_t v138;
  void *v139;
  void *v140;
  uint64_t v141;
  id v142;
  void *v143;
  uint64_t v144;
  void (*v145)(uint64_t, const char *, ...);
  objc_class *v146;
  _BOOL4 v147;
  const char *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  NSObject *v152;
  objc_class *v153;
  int v154;
  const char *v155;
  const char *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  void (*v160)(uint64_t, const char *, ...);
  objc_class *v161;
  _BOOL4 v162;
  const char *v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  NSObject *v167;
  objc_class *v168;
  int v169;
  const char *v170;
  const char *v171;
  id v172;
  void *v173;
  int v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  uint64_t v179;
  id v180;
  id v181;
  void *v182;
  uint64_t v183;
  void (*v184)(uint64_t, const char *, ...);
  objc_class *v185;
  _BOOL4 v186;
  const char *v187;
  const char *v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  NSObject *v192;
  objc_class *v193;
  int v194;
  const char *v195;
  const char *v196;
  id v197;
  id v198;
  void *v199;
  void *v200;
  void *v201;
  id v202;
  uint64_t v203;
  BOOL v204;
  uint64_t v205;
  id v206;
  id v207;
  void *v208;
  void *v209;
  __CFData *v210;
  void *v211;
  uint64_t v212;
  void (*v213)(uint64_t, const char *, ...);
  objc_class *v214;
  _BOOL4 v215;
  const char *v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  NSObject *v220;
  objc_class *v221;
  int v222;
  const char *v223;
  const char *v224;
  id v225;
  uint64_t v226;
  void *v227;
  void *v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  id v232;
  objc_class *v233;
  void *v234;
  objc_class *v235;
  void *v236;
  void *v237;
  uint64_t v238;
  void (*v239)(uint64_t, const char *, ...);
  objc_class *v240;
  _BOOL4 v241;
  const char *v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  NSObject *v246;
  objc_class *v247;
  int v248;
  const char *v249;
  const char *v250;
  void *v251;
  void *v252;
  void *v253;
  id v254;
  id v255;
  id v256;
  uint64_t v257;
  void *i;
  void *v259;
  id v260;
  void *v261;
  uint64_t v262;
  void (*v263)(uint64_t, const char *, ...);
  objc_class *v264;
  _BOOL4 v265;
  const char *v266;
  uint64_t v267;
  void *v268;
  uint64_t v269;
  NSObject *v270;
  objc_class *v271;
  int v272;
  const char *v273;
  const char *v274;
  id v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  uint64_t v281;
  NSMutableData *v282;
  void *v283;
  void *v284;
  unsigned __int8 v285;
  id v286;
  void *v287;
  id v288;
  id v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  void (*v293)(uint64_t, const char *, ...);
  objc_class *v294;
  _BOOL4 v295;
  const char *v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  NSObject *v300;
  objc_class *v301;
  int v302;
  const char *v303;
  const char *v304;
  id v305;
  void *v306;
  uint64_t v307;
  void (*v308)(uint64_t, const char *, ...);
  objc_class *v309;
  _BOOL4 v310;
  const char *v311;
  const char *v312;
  uint64_t v313;
  void *v314;
  uint64_t v315;
  NSObject *v316;
  objc_class *v317;
  int v318;
  const char *v319;
  const char *v320;
  unsigned int v321;
  id v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  const char *v326;
  id v327;
  uint64_t v328;
  unsigned int v329;
  uint64_t v330;
  const char *v331;
  NFTrustSignOutputTable *v332;
  void *v333;
  id *v334;
  void *v335;
  id v336;
  NFTLV *counter;
  void *v338;
  void *v339;
  uint64_t v340;
  void (*v341)(uint64_t, const char *, ...);
  objc_class *v342;
  _BOOL4 v343;
  uint64_t v344;
  void *v345;
  uint64_t v346;
  NSObject *v347;
  objc_class *v348;
  int v349;
  const char *v350;
  const char *v351;
  void *v352;
  void *v353;
  void *v354;
  void *v355;
  id v356;
  NFECommercePaymentResponse *v357;
  void *v358;
  NFECommercePaymentResponse *j;
  void *v360;
  id v361;
  void *v362;
  uint64_t v363;
  void *v364;
  NSMutableDictionary *v365;
  void *v366;
  void *v367;
  void *v368;
  NSMutableDictionary *v369;
  void *v370;
  void *v371;
  void *v372;
  void *v373;
  void *v374;
  void *v375;
  void *v376;
  void *v377;
  void *v378;
  uint64_t v379;
  void (*v380)(uint64_t, const char *, ...);
  objc_class *v381;
  _BOOL4 v382;
  uint64_t v383;
  void *v384;
  uint64_t v385;
  NSObject *v386;
  objc_class *v387;
  int v388;
  const char *v389;
  const char *v390;
  void *v391;
  uint64_t v392;
  void (*v393)(uint64_t, const char *, ...);
  objc_class *v394;
  _BOOL4 v395;
  const char *v396;
  uint64_t v397;
  void *v398;
  uint64_t v399;
  NSObject *v400;
  objc_class *v401;
  int v402;
  const char *v403;
  const char *v404;
  id v405;
  void *v406;
  void *v407;
  void *v408;
  void *v409;
  uint64_t v410;
  void (*v411)(uint64_t, const char *, ...);
  objc_class *v412;
  _BOOL4 v413;
  uint64_t v414;
  void *v415;
  uint64_t v416;
  NSObject *v417;
  objc_class *v418;
  int v419;
  const char *v420;
  const char *v421;
  id v422;
  uint64_t v423;
  id v424;
  id v425;
  const char *ClassName;
  const char *v427;
  const char *v428;
  const char *v429;
  const char *v430;
  const char *Name;
  const char *v432;
  const char *v433;
  const char *v434;
  const char *v435;
  const char *v436;
  const char *v437;
  const char *v438;
  const char *v439;
  const char *v440;
  const char *v441;
  const char *v442;
  const char *v443;
  const char *v444;
  id v445;
  uint64_t v446;
  id v447;
  const char *v448;
  int v449;
  char v450;
  id v451;
  _BOOL4 v452;
  unsigned int v453;
  int v454;
  id v455;
  void *v456;
  id v457;
  id v458;
  void *v459;
  id v460;
  id v461;
  unsigned int v462;
  void *v463;
  unsigned int v464;
  objc_class *v465;
  objc_class *v466;
  void *v467;
  void *v468;
  void *v469;
  void *v470;
  void *v471;
  void *v472;
  void *v473;
  NSMutableArray *v474;
  void *v475;
  void *v476;
  void *v477;
  objc_class *v478;
  id v479;
  const char *v480;
  const char *sel;
  SEL sela;
  char *selb;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  id v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int16 v493;
  id v494;
  objc_class *v495;
  char v496;
  int v497;
  unsigned __int8 v498;
  id v499;
  id v500;
  NSMutableData v501;
  id v502;
  id v503;
  id v504;
  _BYTE v505[128];
  _BYTE v506[128];
  NSErrorUserInfoKey v507;
  void *v508;
  NSErrorUserInfoKey v509;
  void *v510;
  NSErrorUserInfoKey v511;
  void *v512;
  NSErrorUserInfoKey v513;
  void *v514;
  NSErrorUserInfoKey v515;
  void *v516;
  NSErrorUserInfoKey v517;
  void *v518;
  NSErrorUserInfoKey v519;
  void *v520;
  NSErrorUserInfoKey v521;
  void *v522;
  NSErrorUserInfoKey v523;
  void *v524;
  NSErrorUserInfoKey v525;
  void *v526;
  NSErrorUserInfoKey v527;
  void *v528;
  NSErrorUserInfoKey v529;
  void *v530;
  NSErrorUserInfoKey v531;
  void *v532;
  NSErrorUserInfoKey v533;
  void *v534;
  NSErrorUserInfoKey v535;
  void *v536;
  uint8_t buf[4];
  int v538;
  __int16 v539;
  const char *v540;
  __int16 v541;
  const char *v542;
  __int16 v543;
  int v544;
  __int16 v545;
  id v546;

  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  if (!a1)
  {
    v36 = 0;
    goto LABEL_21;
  }
  if (!v17)
  {
    v39 = CFSTR("Could not signWithKeyInSlot, signRequest is nil");
LABEL_20:
    v40 = sub_100130D58(v39);
    v36 = (objc_class *)objc_claimAutoreleasedReturnValue(v40);
    goto LABEL_21;
  }
  if (!v16)
  {
    v39 = CFSTR("Could not signWithKeyInSlot, AID is nil");
    goto LABEL_20;
  }
  if (!v15)
  {
    v39 = CFSTR("Could not signWithKeyInSlot, slot is nil");
    goto LABEL_20;
  }
  v479 = a1;
  v504 = 0;
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "selectCRSWithError:", &v504));
  v21 = v504;
  if (v21)
  {
    v22 = v21;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v25 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v479);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v479);
      Name = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v28 = 45;
      if (isMetaClass)
        v28 = 43;
      v25(3, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", v28, ClassName, Name, 821, v22);
    }
    v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v30 = NFSharedLogGetLogger(v29);
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = object_getClass(v479);
      if (class_isMetaClass(v32))
        v33 = 43;
      else
        v33 = 45;
      v34 = object_getClassName(v479);
      v35 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)buf = 67110146;
      v538 = v33;
      v539 = 2082;
      v540 = v34;
      v541 = 2082;
      v542 = v35;
      v543 = 1024;
      v544 = 821;
      v545 = 2114;
      v546 = v22;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", buf, 0x2Cu);
    }

    v36 = v22;
    v37 = v20;
    v38 = v36;
    goto LABEL_16;
  }
  if (!v20)
  {
    v63 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v64 = NFLogGetLogger(v63);
    if (v64)
    {
      v65 = (void (*)(uint64_t, const char *, ...))v64;
      v66 = object_getClass(a1);
      v67 = class_isMetaClass(v66);
      v68 = object_getClassName(a1);
      v433 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v69 = 45;
      if (v67)
        v69 = 43;
      v65(3, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting RAPDU", v69, v68, v433, 826);
    }
    v70 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v71 = NFSharedLogGetLogger(v70);
    v72 = objc_claimAutoreleasedReturnValue(v71);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      v73 = object_getClass(v479);
      if (class_isMetaClass(v73))
        v74 = 43;
      else
        v74 = 45;
      v75 = object_getClassName(v479);
      v76 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)buf = 67109890;
      v538 = v74;
      v539 = 2082;
      v540 = v75;
      v541 = 2082;
      v542 = v76;
      v543 = 1024;
      v544 = 826;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting RAPDU", buf, 0x22u);
    }

    v77 = objc_alloc((Class)NSError);
    v38 = (objc_class *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v535 = NSLocalizedDescriptionKey;
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v536 = v37;
    v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v536, &v535, 1));
    v36 = (objc_class *)objc_msgSend(v77, "initWithDomain:code:userInfo:", v38, 16, v78);

    goto LABEL_16;
  }
  if (objc_msgSend(v20, "status") != 36864)
  {
    v79 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v80 = NFLogGetLogger(v79);
    if (v80)
    {
      v81 = (void (*)(uint64_t, const char *, ...))v80;
      v82 = object_getClass(a1);
      v83 = class_isMetaClass(v82);
      v84 = object_getClassName(a1);
      v434 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v85 = 45;
      if (v83)
        v85 = 43;
      v81(3, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting0x9000", v85, v84, v434, 831);
    }
    v478 = (objc_class *)v20;
    v86 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v87 = NFSharedLogGetLogger(v86);
    v88 = objc_claimAutoreleasedReturnValue(v87);
    if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
    {
      v89 = object_getClass(v479);
      if (class_isMetaClass(v89))
        v90 = 43;
      else
        v90 = 45;
      v91 = object_getClassName(v479);
      v92 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)buf = 67109890;
      v538 = v90;
      v539 = 2082;
      v540 = v91;
      v541 = 2082;
      v542 = v92;
      v543 = 1024;
      v544 = 831;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting0x9000", buf, 0x22u);
    }

    v93 = objc_alloc((Class)NSError);
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v533 = NSLocalizedDescriptionKey;
    v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v534 = v94;
    v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v534, &v533, 1));
    v36 = (objc_class *)objc_msgSend(v93, "initWithDomain:code:userInfo:", v37, 16, v95);

    v38 = v478;
    goto LABEL_16;
  }
  v476 = v18;
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v16));
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 79, v42));

  if (!v43)
  {
    v96 = sub_100130704(CFSTR("Could not create AID TLV"));
    v36 = (objc_class *)objc_claimAutoreleasedReturnValue(v96);
    v62 = 0;
    v18 = v476;
    goto LABEL_320;
  }
  v475 = v43;
  v477 = v20;
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "challenge"));
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "data"));
  v503 = 0;
  v46 = sub_1000AD0BC((uint64_t)NFTrustSignInputTable, v44, v45, &v503);
  v47 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(v46);
  v48 = v503;

  if (v48)
  {
    v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v50 = NFLogGetLogger(v49);
    if (v50)
    {
      v51 = (void (*)(uint64_t, const char *, ...))v50;
      v52 = object_getClass(v479);
      v53 = class_isMetaClass(v52);
      v427 = object_getClassName(v479);
      v432 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v54 = 45;
      if (v53)
        v54 = 43;
      v51(3, "%c[%{public}s %{public}s]:%i %{public}@", v54, v427, v432, 846, v48);
    }
    v55 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v56 = NFSharedLogGetLogger(v55);
    v57 = objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      v58 = object_getClass(v479);
      if (class_isMetaClass(v58))
        v59 = 43;
      else
        v59 = 45;
      v60 = object_getClassName(v479);
      v61 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)buf = 67110146;
      v538 = v59;
      v539 = 2082;
      v540 = v60;
      v541 = 2082;
      v542 = v61;
      v543 = 1024;
      v544 = 846;
      v545 = 2114;
      v546 = v48;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
    }

    v62 = (objc_class *)v48;
    v36 = v62;
    v18 = v476;
    goto LABEL_319;
  }
  v502 = 0;
  v97 = sub_1000AD728(v47, &v502);
  v98 = (void *)objc_claimAutoreleasedReturnValue(v97);
  v99 = v502;
  if (v99)
  {
    v62 = (objc_class *)v99;
    v36 = v62;
    v18 = v476;
    goto LABEL_318;
  }
  v474 = v47;
  v100 = objc_alloc((Class)NSArray);
  v101 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:unsignedChar:](NFTLV, "TLVWithTag:unsignedChar:", 196, objc_msgSend(v15, "unsignedCharValue")));
  v473 = v98;
  v102 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithData:](NFTLV, "TLVWithData:", v98));
  v103 = objc_msgSend(v100, "initWithObjects:", v101, v102, 0);
  v104 = objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 239, v103));

  v472 = (void *)v104;
  if (!v104)
  {
    v112 = sub_100130704(CFSTR("Could not create opaque Data TLV"));
    v36 = (objc_class *)objc_claimAutoreleasedReturnValue(v112);
    v62 = 0;
    v18 = v476;
    v98 = v473;
    v47 = v474;
    goto LABEL_317;
  }
  v105 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v475, v104, 0);
  v106 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 228, v105));

  v471 = v106;
  if (!v106)
  {
    v113 = sub_100130704(CFSTR("Could not create E4 TLV"));
    v36 = (objc_class *)objc_claimAutoreleasedReturnValue(v113);
    v62 = 0;
    v18 = v476;
    v98 = v473;
    v47 = v474;
    goto LABEL_316;
  }
  v470 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "asMutableData"));
  v18 = v476;
  if (v476)
  {
    v501.super.super.isa = 0;
    v107 = sub_1001C43B8((uint64_t)NFECommercePaymentRequestEncoder, v476, 0, &v501);
    v108 = objc_claimAutoreleasedReturnValue(v107);
    v466 = v501.super.super.isa;
    if (!v108)
    {
      v143 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v144 = NFLogGetLogger(v143);
      if (v144)
      {
        v145 = (void (*)(uint64_t, const char *, ...))v144;
        v146 = object_getClass(v479);
        v147 = class_isMetaClass(v146);
        v148 = object_getClassName(v479);
        v435 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
        v149 = 45;
        if (v147)
          v149 = 43;
        v145(3, "%c[%{public}s %{public}s]:%i Failed to create TLV from input.", v149, v148, v435, 881);
      }
      v150 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v151 = NFSharedLogGetLogger(v150);
      v152 = objc_claimAutoreleasedReturnValue(v151);
      if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
      {
        v153 = object_getClass(v479);
        if (class_isMetaClass(v153))
          v154 = 43;
        else
          v154 = 45;
        v155 = object_getClassName(v479);
        v156 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
        *(_DWORD *)buf = 67109890;
        v538 = v154;
        v539 = 2082;
        v540 = v155;
        v541 = 2082;
        v542 = v156;
        v543 = 1024;
        v544 = 881;
        _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create TLV from input.", buf, 0x22u);
      }

      if (v466)
      {
        v62 = v466;
        v157 = 0;
        v36 = v62;
      }
      else
      {
        v181 = sub_100130704(CFSTR("Could not create ECommerce TLV"));
        v36 = (objc_class *)objc_claimAutoreleasedReturnValue(v181);
        v157 = 0;
        v62 = 0;
      }
      v98 = v473;
      v47 = v474;
      goto LABEL_315;
    }
    v109 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 230, v108));
    v468 = (void *)v108;
    if (!v109)
    {
      v180 = sub_100130704(CFSTR("Could not create E6 TLV"));
      v36 = (objc_class *)objc_claimAutoreleasedReturnValue(v180);
      v98 = v473;
      v47 = v474;
      v62 = v466;
      v157 = v468;
      goto LABEL_315;
    }
    v110 = v109;
    v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "asData"));
    objc_msgSend(v470, "appendData:", v111);

  }
  else
  {
    v110 = 0;
    v466 = 0;
  }
  v114 = v470;
  v469 = v110;
  if (!v19)
    goto LABEL_157;
  v500 = 0;
  v115 = sub_1002088C0((uint64_t)NFSSEWrapper, &v500);
  v116 = v500;
  v463 = v116;
  v465 = v114;
  if (!v116 || v115)
  {
    v462 = v115;
    v158 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v159 = NFLogGetLogger(v158);
    if (v159)
    {
      v160 = (void (*)(uint64_t, const char *, ...))v159;
      v161 = object_getClass(v479);
      v162 = class_isMetaClass(v161);
      v163 = object_getClassName(v479);
      v436 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v164 = 45;
      if (v162)
        v164 = 43;
      v160(3, "%c[%{public}s %{public}s]:%i Failed to get host challenge", v164, v163, v436, 903);
    }
    v165 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v166 = NFSharedLogGetLogger(v165);
    v167 = objc_claimAutoreleasedReturnValue(v166);
    v18 = v476;
    if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
    {
      v168 = object_getClass(v479);
      if (class_isMetaClass(v168))
        v169 = 43;
      else
        v169 = 45;
      v170 = object_getClassName(v479);
      v171 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)buf = 67109890;
      v538 = v169;
      v539 = 2082;
      v540 = v170;
      v541 = 2082;
      v542 = v171;
      v543 = 1024;
      v544 = 903;
      _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get host challenge", buf, 0x22u);
    }

    v172 = objc_alloc((Class)NSError);
    v173 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v462)
    {
      v529 = NSLocalizedDescriptionKey;
      if (v462 >= 0x47)
        v174 = 71;
      else
        v174 = v462;
      v175 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E78C0[v174]));
      v530 = v175;
      v176 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v530, &v529, 1));
      v177 = v172;
      v178 = v173;
      v179 = v462;
    }
    else
    {
      v531 = NSLocalizedDescriptionKey;
      v175 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
      v532 = v175;
      v176 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v532, &v531, 1));
      v177 = v172;
      v178 = v173;
      v179 = 6;
    }
    v36 = (objc_class *)objc_msgSend(v177, "initWithDomain:code:userInfo:", v178, v179, v176);

    goto LABEL_133;
  }
  v499 = 0;
  v117 = sub_1000B7998(v479, v116, &v499);
  v461 = v499;
  v453 = v117;
  if (v117)
  {
    v451 = v17;
    v455 = v15;
    v458 = v16;
    v118 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v119 = NFLogGetLogger(v118);
    if (v119)
    {
      v120 = (void (*)(uint64_t, const char *, ...))v119;
      v121 = object_getClass(v479);
      v122 = class_isMetaClass(v121);
      v123 = object_getClassName(v479);
      v448 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v447 = objc_alloc((Class)NSError);
      v124 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v527 = NSLocalizedDescriptionKey;
      if (v117 >= 0x47)
        v125 = 71;
      else
        v125 = v117;
      v126 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E78C0[v125]));
      v528 = v126;
      v127 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v528, &v527, 1));
      v128 = objc_msgSend(v447, "initWithDomain:code:userInfo:", v124, v117, v127);
      v129 = 45;
      if (v122)
        v129 = 43;
      v120(3, "%c[%{public}s %{public}s]:%i Failed to authenticate to CRS %{public}@", v129, v123, v448, 914, v128);

    }
    v130 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v131 = NFSharedLogGetLogger(v130);
    v132 = objc_claimAutoreleasedReturnValue(v131);
    if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
    {
      v133 = object_getClass(v479);
      if (class_isMetaClass(v133))
        v134 = 43;
      else
        v134 = 45;
      v449 = v134;
      v480 = object_getClassName(v479);
      sel = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v135 = objc_alloc((Class)NSError);
      v136 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v137 = NSLocalizedDescriptionKey;
      v525 = NSLocalizedDescriptionKey;
      if (v453 >= 0x47)
        v138 = 71;
      else
        v138 = v453;
      v139 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E78C0[v138]));
      v526 = v139;
      v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v526, &v525, 1));
      v141 = v453;
      v142 = objc_msgSend(v135, "initWithDomain:code:userInfo:", v136, v453, v140);
      *(_DWORD *)buf = 67110146;
      v538 = v449;
      v539 = 2082;
      v540 = v480;
      v541 = 2082;
      v542 = sel;
      v543 = 1024;
      v544 = 914;
      v545 = 2114;
      v546 = v142;
      _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to authenticate to CRS %{public}@", buf, 0x2Cu);

    }
    else
    {
      v137 = NSLocalizedDescriptionKey;
      v141 = v453;
      if (v453 >= 0x47)
        v138 = 71;
      else
        v138 = v453;
    }

    v202 = objc_alloc((Class)NSError);
    v199 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v523 = v137;
    v200 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002E78C0[v138]));
    v524 = v200;
    v201 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v524, &v523, 1));
    v36 = (objc_class *)objc_msgSend(v202, "initWithDomain:code:userInfo:", v199, v141, v201);
    v18 = v476;
    v15 = v455;
    v16 = v458;
    v17 = v451;
LABEL_132:

LABEL_133:
LABEL_134:
    v98 = v473;
    v47 = v474;
    v62 = v466;
    v157 = v469;
    goto LABEL_314;
  }
  if ((unint64_t)objc_msgSend(v461, "length") <= 0xF)
  {
    v182 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v183 = NFLogGetLogger(v182);
    if (v183)
    {
      v184 = (void (*)(uint64_t, const char *, ...))v183;
      v185 = object_getClass(v479);
      v186 = class_isMetaClass(v185);
      v187 = object_getClassName(v479);
      v188 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v445 = objc_msgSend(v461, "length");
      v189 = 45;
      if (v186)
        v189 = 43;
      v184(3, "%c[%{public}s %{public}s]:%i Initialize auth response too small: %lu", v189, v187, v188, 919, v445);
    }
    v190 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v191 = NFSharedLogGetLogger(v190);
    v192 = objc_claimAutoreleasedReturnValue(v191);
    if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
    {
      v193 = object_getClass(v479);
      if (class_isMetaClass(v193))
        v194 = 43;
      else
        v194 = 45;
      v195 = object_getClassName(v479);
      v196 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v197 = objc_msgSend(v461, "length");
      *(_DWORD *)buf = 67110146;
      v538 = v194;
      v539 = 2082;
      v540 = v195;
      v541 = 2082;
      v542 = v196;
      v543 = 1024;
      v544 = 919;
      v545 = 2048;
      v546 = v197;
      _os_log_impl((void *)&_mh_execute_header, v192, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Initialize auth response too small: %lu", buf, 0x2Cu);
    }

    v198 = objc_alloc((Class)NSError);
    v199 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v521 = NSLocalizedDescriptionKey;
    v200 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v522 = v200;
    v201 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v522, &v521, 1));
    v36 = (objc_class *)objc_msgSend(v198, "initWithDomain:code:userInfo:", v199, 16, v201);
    v18 = v476;
    goto LABEL_132;
  }
  v456 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v461, "subdataWithRange:", 0, 8));
  v459 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v461, "subdataWithRange:", 8, 8));
  if (!v456 || !v459)
  {
    v211 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v212 = NFLogGetLogger(v211);
    if (v212)
    {
      v213 = (void (*)(uint64_t, const char *, ...))v212;
      v214 = object_getClass(v479);
      v215 = class_isMetaClass(v214);
      v216 = object_getClassName(v479);
      v437 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v217 = 45;
      if (v215)
        v217 = 43;
      v213(3, "%c[%{public}s %{public}s]:%i Failed to get cardChallenge and cardCryptogram from CRS", v217, v216, v437, 927);
    }
    v218 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v219 = NFSharedLogGetLogger(v218);
    v220 = objc_claimAutoreleasedReturnValue(v219);
    if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR))
    {
      v221 = object_getClass(v479);
      if (class_isMetaClass(v221))
        v222 = 43;
      else
        v222 = 45;
      v223 = object_getClassName(v479);
      v224 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)buf = 67109890;
      v538 = v222;
      v539 = 2082;
      v540 = v223;
      v541 = 2082;
      v542 = v224;
      v543 = 1024;
      v544 = 927;
      _os_log_impl((void *)&_mh_execute_header, v220, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get cardChallenge and cardCryptogram from CRS", buf, 0x22u);
    }

    v225 = objc_alloc((Class)NSError);
    v226 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v519 = NSLocalizedDescriptionKey;
    v227 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v520 = v227;
    v228 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v520, &v519, 1));
    v229 = v225;
    v209 = (void *)v226;
    v230 = v226;
    v231 = 16;
    goto LABEL_153;
  }
  v203 = sub_10020915C((uint64_t)NFSSEWrapper, v19);
  v204 = (_DWORD)v203 == 2;
  v452 = v203 == 4;
  if ((_DWORD)v203 == 4)
    v204 = 1;
  v450 = v204;
  if ((_DWORD)v203 == 2)
    goto LABEL_141;
  v205 = v203;
  if ((_DWORD)v203 == 4)
    goto LABEL_141;
  v452 = v203 == 3;
  if ((_DWORD)v203 == 1 || (_DWORD)v203 == 3)
    goto LABEL_141;
  if ((_DWORD)v203 != 5)
  {
    v409 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v410 = NFLogGetLogger(v409);
    if (v410)
    {
      v411 = (void (*)(uint64_t, const char *, ...))v410;
      v412 = object_getClass(v479);
      v413 = class_isMetaClass(v412);
      v430 = object_getClassName(v479);
      v444 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v414 = 45;
      if (v413)
        v414 = 43;
      v411(3, "%c[%{public}s %{public}s]:%i Unknown transaction type: %d", v414, v430, v444, 945, v205);
    }
    v415 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v416 = NFSharedLogGetLogger(v415);
    v417 = objc_claimAutoreleasedReturnValue(v416);
    if (os_log_type_enabled(v417, OS_LOG_TYPE_ERROR))
    {
      v418 = object_getClass(v479);
      if (class_isMetaClass(v418))
        v419 = 43;
      else
        v419 = 45;
      v420 = object_getClassName(v479);
      v421 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)buf = 67110146;
      v538 = v419;
      v539 = 2082;
      v540 = v420;
      v541 = 2082;
      v542 = v421;
      v543 = 1024;
      v544 = 945;
      v545 = 1024;
      LODWORD(v546) = v205;
      _os_log_impl((void *)&_mh_execute_header, v417, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown transaction type: %d", buf, 0x28u);
    }

    v422 = objc_alloc((Class)NSError);
    v423 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v517 = NSLocalizedDescriptionKey;
    v227 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
    v518 = v227;
    v228 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v518, &v517, 1));
    v229 = v422;
    v209 = (void *)v423;
    v230 = v423;
    v231 = 13;
LABEL_153:
    v36 = (objc_class *)objc_msgSend(v229, "initWithDomain:code:userInfo:", v230, v231, v228);

    goto LABEL_155;
  }
  v452 = 1;
LABEL_141:
  v206 = objc_alloc((Class)NSMutableData);
  v497 = 849024;
  v498 = -[objc_class length](v465, "length");
  v207 = objc_msgSend(v206, "initWithBytes:length:", &v497, 5);
  objc_msgSend(v207, "appendData:", v465);
  v496 = 0;
  v454 = 1;
  objc_msgSend(v207, "appendBytes:length:", &v496, 1);
  v208 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v479, "serialNumberAsData"));
  v209 = v207;
  v210 = sub_1002099B8((uint64_t)NFSSEWrapper, 3, v207, a7, v19, v208, v450, v452, v463, v456, v459, 0, 0, 0, 0);
  v36 = (objc_class *)objc_claimAutoreleasedReturnValue(v210);

  if (v36)
  {
    v465 = v36;
    goto LABEL_156;
  }
  v232 = sub_100130704(CFSTR("Failed to get signed data"));
  v36 = (objc_class *)objc_claimAutoreleasedReturnValue(v232);
  v465 = 0;
LABEL_155:
  v454 = 0;
LABEL_156:

  v114 = v465;
  if (!v454)
  {
    v18 = v476;
    goto LABEL_134;
  }
LABEL_157:
  v233 = objc_retainAutorelease(v114);
  v464 = *((unsigned __int8 *)-[objc_class bytes](v233, "bytes") + 3);
  v495 = v466;
  v465 = v233;
  v234 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v479, "transceiveData:toOS:error:", v233, 0, &v495));
  v235 = v495;

  v236 = (void *)objc_claimAutoreleasedReturnValue(+[NFResponseAPDU responseWithData:](NFResponseAPDU, "responseWithData:", v234));
  if (v235)
  {
    v237 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v238 = NFLogGetLogger(v237);
    if (v238)
    {
      v239 = (void (*)(uint64_t, const char *, ...))v238;
      v240 = object_getClass(v479);
      v241 = class_isMetaClass(v240);
      v242 = object_getClassName(v479);
      v438 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v243 = 45;
      if (v241)
        v243 = 43;
      v239(3, "%c[%{public}s %{public}s]:%i Failed to execute opaque data", v243, v242, v438, 982);
    }
    v244 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v245 = NFSharedLogGetLogger(v244);
    v246 = objc_claimAutoreleasedReturnValue(v245);
    if (os_log_type_enabled(v246, OS_LOG_TYPE_ERROR))
    {
      v247 = object_getClass(v479);
      if (class_isMetaClass(v247))
        v248 = 43;
      else
        v248 = 45;
      v249 = object_getClassName(v479);
      v250 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)buf = 67109890;
      v538 = v248;
      v539 = 2082;
      v540 = v249;
      v541 = 2082;
      v542 = v250;
      v543 = 1024;
      v544 = 982;
      _os_log_impl((void *)&_mh_execute_header, v246, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to execute opaque data", buf, 0x22u);
    }

    v62 = v235;
    v477 = v236;
    v36 = v62;
    v18 = v476;
    goto LABEL_313;
  }
  v457 = v15;
  v460 = v16;
  if (!v236)
  {
    v261 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v262 = NFLogGetLogger(v261);
    if (v262)
    {
      v263 = (void (*)(uint64_t, const char *, ...))v262;
      v264 = object_getClass(v479);
      v265 = class_isMetaClass(v264);
      v266 = object_getClassName(v479);
      v439 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v267 = 45;
      if (v265)
        v267 = 43;
      v263(3, "%c[%{public}s %{public}s]:%i Failed to execute opaque data, expecting RAPDU", v267, v266, v439, 987);
    }
    v268 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v269 = NFSharedLogGetLogger(v268);
    v270 = objc_claimAutoreleasedReturnValue(v269);
    if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
    {
      v271 = object_getClass(v479);
      if (class_isMetaClass(v271))
        v272 = 43;
      else
        v272 = 45;
      v273 = object_getClassName(v479);
      v274 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)buf = 67109890;
      v538 = v272;
      v539 = 2082;
      v540 = v273;
      v541 = 2082;
      v542 = v274;
      v543 = 1024;
      v544 = 987;
      _os_log_impl((void *)&_mh_execute_header, v270, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to execute opaque data, expecting RAPDU", buf, 0x22u);
    }

    v275 = objc_alloc((Class)NSError);
    v276 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v515 = NSLocalizedDescriptionKey;
    v277 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
    v516 = v277;
    v278 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v516, &v515, 1));
    v279 = v275;
    v280 = v276;
    v281 = 13;
    goto LABEL_192;
  }
  v251 = v236;
  if (objc_msgSend(v236, "status") == 36864)
  {
    v477 = v236;
    goto LABEL_171;
  }
  v282 = objc_opt_new(NSMutableData);
  if ((objc_msgSend(v236, "status") & 0xFF00) != 0x6100)
  {
    v327 = objc_alloc((Class)NSError);
    v328 = objc_msgSend(v236, "status");
    v513 = NSLocalizedDescriptionKey;
    v329 = objc_msgSend(v236, "status");
    v330 = 0;
    v331 = "Unknown Error";
    while ((unsigned __int16)word_1002E7B50[v330] != v329)
    {
      v330 += 8;
      if (v330 == 192)
        goto LABEL_246;
    }
    v331 = *(const char **)&word_1002E7B50[v330 + 4];
LABEL_246:
    v354 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v331));
    v514 = v354;
    v355 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v514, &v513, 1));
    v36 = (objc_class *)objc_msgSend(v327, "initWithDomain:code:userInfo:", CFSTR("GP"), v328, v355);

    goto LABEL_247;
  }
  if ((objc_msgSend(v236, "status") & 0xFF00) == 0x6100)
  {
    while (1)
    {
      v283 = v251;
      v284 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v251, "response"));
      -[NSMutableData appendData:](v282, "appendData:", v284);

      v285 = objc_msgSend(v251, "status");
      v494 = 0;
      v251 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v479, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 192, 0, 0, 0, v285, 0, &v494));
      v286 = v494;

      if (v286)
        break;
      if (!v251)
      {
        v391 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v392 = NFLogGetLogger(v391);
        if (v392)
        {
          v393 = (void (*)(uint64_t, const char *, ...))v392;
          v394 = object_getClass(v479);
          v395 = class_isMetaClass(v394);
          v396 = object_getClassName(v479);
          v443 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
          v397 = 45;
          if (v395)
            v397 = 43;
          v393(3, "%c[%{public}s %{public}s]:%i Failed to retrieve more data from CRS, expecting RAPDU", v397, v396, v443, 1020);
        }
        v398 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v399 = NFSharedLogGetLogger(v398);
        v400 = objc_claimAutoreleasedReturnValue(v399);
        if (os_log_type_enabled(v400, OS_LOG_TYPE_ERROR))
        {
          v401 = object_getClass(v479);
          if (class_isMetaClass(v401))
            v402 = 43;
          else
            v402 = 45;
          v403 = object_getClassName(v479);
          v404 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
          *(_DWORD *)buf = 67109890;
          v538 = v402;
          v539 = 2082;
          v540 = v403;
          v541 = 2082;
          v542 = v404;
          v543 = 1024;
          v544 = 1020;
          _os_log_impl((void *)&_mh_execute_header, v400, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to retrieve more data from CRS, expecting RAPDU", buf, 0x22u);
        }

        v405 = objc_alloc((Class)NSError);
        v406 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v511 = NSLocalizedDescriptionKey;
        v407 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
        v512 = v407;
        v408 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v512, &v511, 1));
        v36 = (objc_class *)objc_msgSend(v405, "initWithDomain:code:userInfo:", v406, 13, v408);

        v251 = 0;
LABEL_247:
        v62 = 0;
LABEL_248:

        v477 = v251;
        goto LABEL_312;
      }
      if (objc_msgSend(v251, "status") == 36864)
      {
        v287 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v251, "response"));
        -[NSMutableData appendData:](v282, "appendData:", v287);

        v288 = objc_alloc((Class)NSData);
        v493 = 144;
        v289 = objc_msgSend(v288, "initWithBytes:length:", &v493, 2);
        -[NSMutableData appendData:](v282, "appendData:", v289);

      }
      if ((objc_msgSend(v251, "status") & 0xFF00) != 0x6100)
        goto LABEL_200;
    }
    v378 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v379 = NFLogGetLogger(v378);
    if (v379)
    {
      v380 = (void (*)(uint64_t, const char *, ...))v379;
      v381 = object_getClass(v479);
      v382 = class_isMetaClass(v381);
      v429 = object_getClassName(v479);
      v442 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v383 = 45;
      if (v382)
        v383 = 43;
      v380(3, "%c[%{public}s %{public}s]:%i Failed to retrieve more data from CRS : %{public}@", v383, v429, v442, 1015, v286);
    }
    v384 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v385 = NFSharedLogGetLogger(v384);
    v386 = objc_claimAutoreleasedReturnValue(v385);
    if (os_log_type_enabled(v386, OS_LOG_TYPE_ERROR))
    {
      v387 = object_getClass(v479);
      if (class_isMetaClass(v387))
        v388 = 43;
      else
        v388 = 45;
      v389 = object_getClassName(v479);
      v390 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)buf = 67110146;
      v538 = v388;
      v539 = 2082;
      v540 = v389;
      v541 = 2082;
      v542 = v390;
      v543 = 1024;
      v544 = 1015;
      v545 = 2114;
      v546 = v286;
      _os_log_impl((void *)&_mh_execute_header, v386, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to retrieve more data from CRS : %{public}@", buf, 0x2Cu);
    }

    v36 = (objc_class *)v286;
    v62 = v36;
    goto LABEL_248;
  }
LABEL_200:
  v290 = objc_claimAutoreleasedReturnValue(+[NFResponseAPDU responseWithData:](NFResponseAPDU, "responseWithData:", v282));

  v477 = (void *)v290;
  if (!v290)
  {
    v291 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v292 = NFLogGetLogger(v291);
    if (v292)
    {
      v293 = (void (*)(uint64_t, const char *, ...))v292;
      v294 = object_getClass(v479);
      v295 = class_isMetaClass(v294);
      v296 = object_getClassName(v479);
      v440 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v297 = 45;
      if (v295)
        v297 = 43;
      v293(3, "%c[%{public}s %{public}s]:%i Failed to sign with Key in SE, expecting RAPDU", v297, v296, v440, 1040);
    }
    v298 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v299 = NFSharedLogGetLogger(v298);
    v300 = objc_claimAutoreleasedReturnValue(v299);
    if (os_log_type_enabled(v300, OS_LOG_TYPE_ERROR))
    {
      v301 = object_getClass(v479);
      if (class_isMetaClass(v301))
        v302 = 43;
      else
        v302 = 45;
      v303 = object_getClassName(v479);
      v304 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)buf = 67109890;
      v538 = v302;
      v539 = 2082;
      v540 = v303;
      v541 = 2082;
      v542 = v304;
      v543 = 1024;
      v544 = 1040;
      _os_log_impl((void *)&_mh_execute_header, v300, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to sign with Key in SE, expecting RAPDU", buf, 0x22u);
    }

    v305 = objc_alloc((Class)NSError);
    v276 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v509 = NSLocalizedDescriptionKey;
    v277 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v510 = v277;
    v278 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v510, &v509, 1));
    v279 = v305;
    v280 = v276;
    v281 = 16;
LABEL_192:
    v36 = (objc_class *)objc_msgSend(v279, "initWithDomain:code:userInfo:", v280, v281, v278);

    v477 = 0;
    goto LABEL_244;
  }
LABEL_171:
  if (objc_msgSend(v477, "status") != 36864)
  {
    v306 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v307 = NFLogGetLogger(v306);
    if (v307)
    {
      v308 = (void (*)(uint64_t, const char *, ...))v307;
      v309 = object_getClass(v479);
      v310 = class_isMetaClass(v309);
      v311 = object_getClassName(v479);
      v312 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v446 = objc_msgSend(v477, "status");
      v313 = 45;
      if (v310)
        v313 = 43;
      v308(3, "%c[%{public}s %{public}s]:%i Failed to sign through CRS, Expecting 0x9000 got : 0x%04X", v313, v311, v312, 1045, v446);
    }
    v314 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v315 = NFSharedLogGetLogger(v314);
    v316 = objc_claimAutoreleasedReturnValue(v315);
    if (os_log_type_enabled(v316, OS_LOG_TYPE_ERROR))
    {
      v317 = object_getClass(v479);
      if (class_isMetaClass(v317))
        v318 = 43;
      else
        v318 = 45;
      v319 = object_getClassName(v479);
      v320 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      v321 = objc_msgSend(v477, "status");
      *(_DWORD *)buf = 67110146;
      v538 = v318;
      v539 = 2082;
      v540 = v319;
      v541 = 2082;
      v542 = v320;
      v543 = 1024;
      v544 = 1045;
      v545 = 1024;
      LODWORD(v546) = v321;
      _os_log_impl((void *)&_mh_execute_header, v316, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to sign through CRS, Expecting 0x9000 got : 0x%04X", buf, 0x28u);
    }

    v322 = objc_alloc((Class)NSError);
    v323 = objc_msgSend(v477, "status");
    v507 = NSLocalizedDescriptionKey;
    v324 = objc_msgSend(v477, "status");
    v325 = 0;
    v326 = "Unknown Error";
    while ((unsigned __int16)word_1002E7B50[v325] != v324)
    {
      v325 += 8;
      if (v325 == 192)
        goto LABEL_243;
    }
    v326 = *(const char **)&word_1002E7B50[v325 + 4];
LABEL_243:
    v352 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v326));
    v508 = v352;
    v353 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v508, &v507, 1));
    v36 = (objc_class *)objc_msgSend(v322, "initWithDomain:code:userInfo:", CFSTR("GP"), v323, v353);

LABEL_244:
    v62 = 0;
    goto LABEL_312;
  }
  v252 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v477, "response"));
  v253 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v252));

  v491 = 0u;
  v492 = 0u;
  v489 = 0u;
  v490 = 0u;
  v254 = v253;
  v255 = objc_msgSend(v254, "countByEnumeratingWithState:objects:count:", &v489, v506, 16);
  if (!v255)
    goto LABEL_180;
  v256 = v255;
  v257 = *(_QWORD *)v490;
  while (2)
  {
    for (i = 0; i != v256; i = (char *)i + 1)
    {
      if (*(_QWORD *)v490 != v257)
        objc_enumerationMutation(v254);
      v259 = *(void **)(*((_QWORD *)&v489 + 1) + 8 * (_QWORD)i);
      if (objc_msgSend(v259, "tag") == 234)
      {
        v332 = objc_opt_new(NFTrustSignOutputTable);
        v333 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v259, "value"));
        v488 = 0;
        v334 = sub_1000ADB18((id *)&v332->super.isa, v474, v333, v464, &v488);
        v335 = (void *)objc_claimAutoreleasedReturnValue(v334);
        v336 = v488;
        if (v332)
          counter = v332->_counter;
        else
          counter = 0;
        v338 = (void *)objc_claimAutoreleasedReturnValue(-[NFTLV value](counter, "value"));
        v467 = (void *)objc_claimAutoreleasedReturnValue(+[NFTrustSignResponse signResponseWithRawData:counterValueData:](NFTrustSignResponse, "signResponseWithRawData:counterValueData:", v335, v338));

        if (v336)
        {
          v339 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v340 = NFLogGetLogger(v339);
          if (v340)
          {
            v341 = (void (*)(uint64_t, const char *, ...))v340;
            v342 = object_getClass(v479);
            v343 = class_isMetaClass(v342);
            v428 = object_getClassName(v479);
            v441 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
            v344 = 45;
            if (v343)
              v344 = 43;
            v341(3, "%c[%{public}s %{public}s]:%i Error in Opaque Data response : %{public}@", v344, v428, v441, 1071, v336);
          }
          v345 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v346 = NFSharedLogGetLogger(v345);
          v347 = objc_claimAutoreleasedReturnValue(v346);
          if (os_log_type_enabled(v347, OS_LOG_TYPE_ERROR))
          {
            v348 = object_getClass(v479);
            if (class_isMetaClass(v348))
              v349 = 43;
            else
              v349 = 45;
            v350 = object_getClassName(v479);
            v351 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
            *(_DWORD *)buf = 67110146;
            v538 = v349;
            v539 = 2082;
            v540 = v350;
            v541 = 2082;
            v542 = v351;
            v543 = 1024;
            v544 = 1071;
            v545 = 2114;
            v546 = v336;
            _os_log_impl((void *)&_mh_execute_header, v347, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error in Opaque Data response : %{public}@", buf, 0x2Cu);
          }

          v36 = (objc_class *)v336;
          v62 = v36;
          goto LABEL_311;
        }
        if (!v467)
          goto LABEL_181;
        v486 = 0u;
        v487 = 0u;
        v484 = 0u;
        v485 = 0u;
        v356 = v254;
        v357 = (NFECommercePaymentResponse *)objc_msgSend(v356, "countByEnumeratingWithState:objects:count:", &v484, v505, 16);
        v358 = 0;
        if (v357)
        {
          sela = *(SEL *)v485;
          do
          {
            for (j = 0; j != v357; j = (NFECommercePaymentResponse *)((char *)j + 1))
            {
              if (*(SEL *)v485 != sela)
                objc_enumerationMutation(v356);
              v360 = *(void **)(*((_QWORD *)&v484 + 1) + 8 * (_QWORD)j);
              if (objc_msgSend(v360, "tag") == 235)
              {
                v361 = v360;

                v358 = v361;
              }
            }
            v357 = (NFECommercePaymentResponse *)objc_msgSend(v356, "countByEnumeratingWithState:objects:count:", &v484, v505, 16);
          }
          while (v357);

          if (!v358)
          {
            v357 = 0;
            goto LABEL_308;
          }
          v362 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v358, "childWithTag:", 225));
          if (!v362)
          {
            v424 = sub_100130704(CFSTR("Expecting getOnlineDPANResponse"));
            v36 = (objc_class *)objc_claimAutoreleasedReturnValue(v424);
            goto LABEL_309;
          }
          v356 = v362;
          v363 = objc_claimAutoreleasedReturnValue(objc_msgSend(v362, "childWithTag:", 130));
          if (!v363)
          {
            v425 = sub_100130704(CFSTR("Expecting transactionID in getOnlineDPANResponse"));
            v36 = (objc_class *)objc_claimAutoreleasedReturnValue(v425);

            goto LABEL_309;
          }
          v364 = (void *)v363;
          v365 = objc_opt_new(NSMutableDictionary);
          v366 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v364, "asData"));
          v367 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v366, "NF_asHexString"));
          -[NSMutableDictionary setValue:forKey:](v365, "setValue:forKey:", v367, CFSTR("transactionIdentifier"));

          v368 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v358, "value"));
          -[NSMutableDictionary setValue:forKey:](v365, "setValue:forKey:", v368, CFSTR("transactionData"));

          selb = (char *)v365;
          v357 = -[NFECommercePaymentResponse initWithDictionary:]([NFECommercePaymentResponse alloc], "initWithDictionary:", v365);
          v369 = objc_opt_new(NSMutableDictionary);
          v370 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v479, "rsaCertificate"));

          if (v370)
          {
            v371 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v479, "rsaCertificate"));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v369, "setObject:forKeyedSubscript:", v371, CFSTR("RSA"));

          }
          v372 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v479, "eccCertificate"));

          if (v372)
          {
            v373 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v479, "eccCertificate"));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v369, "setObject:forKeyedSubscript:", v373, CFSTR("ECDSA"));

          }
          v374 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v479, "eckaCertificate"));

          if (v374)
          {
            v375 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v479, "eckaCertificate"));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v369, "setObject:forKeyedSubscript:", v375, CFSTR("ECKA"));

          }
          v376 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v479, "eccCertificate"));

          if (v376)
          {
            v377 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v479, "eccCertificate"));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v369, "setObject:forKeyedSubscript:", v377, CFSTR("ECC"));

          }
          -[NFECommercePaymentResponse setCerts:](v357, "setCerts:", v369);

        }
LABEL_308:
        *a8 = (id)objc_claimAutoreleasedReturnValue(+[NFTrustPaymentSignResponse paymentSignResponseWithSignResponse:paymentResponse:](NFTrustPaymentSignResponse, "paymentSignResponseWithSignResponse:paymentResponse:", v467, v357));

        v36 = 0;
LABEL_309:

        goto LABEL_310;
      }
    }
    v256 = objc_msgSend(v254, "countByEnumeratingWithState:objects:count:", &v489, v506, 16);
    if (v256)
      continue;
    break;
  }
LABEL_180:

LABEL_181:
  v260 = sub_100130704(CFSTR("Could create NFTrustSignResponse"));
  v36 = (objc_class *)objc_claimAutoreleasedReturnValue(v260);
LABEL_310:
  v62 = 0;
LABEL_311:

LABEL_312:
  v18 = v476;
  v15 = v457;
  v16 = v460;
LABEL_313:
  v98 = v473;
  v47 = v474;
  v157 = v469;
LABEL_314:

LABEL_315:
LABEL_316:

LABEL_317:
LABEL_318:

LABEL_319:
  v20 = v477;
  v43 = v475;
LABEL_320:

  v37 = v20;
  v38 = v62;
LABEL_16:

LABEL_21:
  return v36;
}

id *sub_1000B3828(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  NFReaderOperation *v8;
  id *p_isa;

  v6 = a2;
  v7 = a3;
  objc_opt_self(a1);
  v8 = objc_opt_new(NFReaderOperation);
  p_isa = (id *)&v8->super.isa;
  if (v8)
  {
    objc_storeStrong((id *)&v8->_date, a3);
    objc_storeStrong(p_isa + 2, a2);
  }

  return p_isa;
}

NSMutableArray *sub_1000B3E38(void *a1, void *a2, uint64_t a3)
{
  id v4;
  NSMutableData *v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  void *v17;
  void *v18;
  char i;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *v25;
  _BOOL4 v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  const char *v36;
  NSObject *v37;
  uint32_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  NSMutableDictionary *v42;
  id v43;
  NFApplet *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  int v48;
  void *v49;
  NSMutableDictionary *v50;
  void *v51;
  const __CFString *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  void *j;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  NSObject *v78;
  void *v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  id v86;
  id v87;
  uint64_t v88;
  void *n;
  void *v90;
  void *v91;
  id v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  NSMutableArray *v101;
  void *v102;
  id v103;
  id v104;
  uint64_t v105;
  void *k;
  void *v107;
  void *v108;
  NSMutableDictionary *v109;
  NSMutableArray *v110;
  const __CFString *v111;
  void *v112;
  id v113;
  id v114;
  uint64_t v115;
  void *m;
  void *v117;
  void *v118;
  NFApplet *v119;
  void *v120;
  void *v121;
  uint64_t v122;
  void (*v123)(uint64_t, const char *, ...);
  objc_class *v124;
  _BOOL4 v125;
  const char *v126;
  const char *v127;
  void *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  objc_class *v132;
  int v133;
  const char *v134;
  const char *v135;
  void *v136;
  NFApplet *v137;
  void *v138;
  uint64_t v139;
  void (*v140)(uint64_t, const char *, ...);
  objc_class *v141;
  _BOOL4 v142;
  const char *v143;
  const char *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  objc_class *v148;
  int v149;
  const char *v150;
  const char *v151;
  unsigned int v152;
  NSMutableArray *v153;
  void *v154;
  uint64_t v155;
  void (*v156)(uint64_t, const char *, ...);
  objc_class *v157;
  _BOOL4 v158;
  const char *v159;
  NSMutableData *v160;
  const char *v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  NSObject *v165;
  objc_class *v166;
  int v167;
  const char *v168;
  const char *v169;
  unsigned int v170;
  const char *ClassName;
  const char *v173;
  const char *Name;
  const char *v175;
  const char *v176;
  id v177;
  uint64_t v178;
  void *v179;
  NSMutableArray *v181;
  uint64_t v182;
  NSObject *v183;
  id v184;
  uint64_t v185;
  NSMutableArray *v186;
  id v187;
  char v188;
  uint64_t v189;
  NFApplet *v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  NSMutableArray *v194;
  void *v195;
  id v196;
  uint64_t v197;
  id obj;
  id obja;
  id v200;
  id v201;
  void *v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int16 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  _BYTE v237[128];
  _BYTE v238[128];
  _BYTE v239[128];
  _BYTE v240[128];
  _BYTE v241[128];
  _BYTE v242[128];
  uint8_t v243[128];
  uint8_t v244[4];
  int v245;
  __int16 v246;
  const char *v247;
  __int16 v248;
  const char *v249;
  __int16 v250;
  int v251;
  __int16 v252;
  void *v253;
  uint8_t buf[4];
  int v255;
  __int16 v256;
  const char *v257;
  __int16 v258;
  const char *v259;
  __int16 v260;
  int v261;
  __int16 v262;
  unsigned int v263;
  __int16 v264;
  int v265;

  v4 = a2;
  v187 = a1;
  if (!a1)
  {
    v181 = 0;
    goto LABEL_167;
  }
  v5 = objc_opt_new(NSMutableData);
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v8 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_getApplicationsWithSearchCriteria:os:");
    v11 = 45;
    if (isMetaClass)
      v11 = 43;
    v8(6, "%c[%{public}s %{public}s]:%i OS=%d", v11, ClassName, Name, 214, a3);
  }
  v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v13 = NFSharedLogGetLogger(v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = object_getClass(a1);
    if (class_isMetaClass(v15))
      v16 = 43;
    else
      v16 = 45;
    *(_DWORD *)buf = 67110146;
    v255 = v16;
    v256 = 2082;
    v257 = object_getClassName(a1);
    v258 = 2082;
    v259 = sel_getName("crs_getApplicationsWithSearchCriteria:os:");
    v260 = 1024;
    v261 = 214;
    v262 = 1024;
    v263 = a3;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i OS=%d", buf, 0x28u);
  }

  if (!v4)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 79, 0));
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "asData"));

  }
  v18 = 0;
  for (i = 0; ; i = 1)
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 242, 64, i & 1, v4, 0, a3, 0));

    if (!v20)
    {
      v179 = 0;
      v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v23 = NFLogGetLogger(v22);
      if (v23)
      {
        v24 = (void (*)(uint64_t, const char *, ...))v23;
        v25 = object_getClass(a1);
        v26 = class_isMetaClass(v25);
        v173 = object_getClassName(a1);
        v175 = sel_getName("crs_getApplicationsWithSearchCriteria:os:");
        v27 = 45;
        if (v26)
          v27 = 43;
        v24(3, "%c[%{public}s %{public}s]:%i Command failed for OS %d", v27, v173, v175, 222, a3);
      }
      v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v29 = NFSharedLogGetLogger(v28);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        goto LABEL_165;
      v31 = v30;
      v32 = object_getClass(a1);
      if (class_isMetaClass(v32))
        v33 = 43;
      else
        v33 = 45;
      v34 = object_getClassName(a1);
      v35 = sel_getName("crs_getApplicationsWithSearchCriteria:os:");
      *(_DWORD *)buf = 67110146;
      v255 = v33;
      v256 = 2082;
      v257 = v34;
      v30 = v31;
      v258 = 2082;
      v259 = v35;
      v260 = 1024;
      v261 = 222;
      v262 = 1024;
      v263 = a3;
      v36 = "%c[%{public}s %{public}s]:%i Command failed for OS %d";
      v37 = v31;
      v38 = 40;
      goto LABEL_164;
    }
    if (objc_msgSend(v20, "status") != 25360)
      break;
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "response"));
    -[NSMutableData appendData:](v5, "appendData:", v21);

    v18 = v20;
  }
  v179 = v20;
  if (objc_msgSend(v20, "status") != 36864)
  {
    v154 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v155 = NFLogGetLogger(v154);
    if (v155)
    {
      v156 = (void (*)(uint64_t, const char *, ...))v155;
      v157 = object_getClass(a1);
      v158 = class_isMetaClass(v157);
      v159 = object_getClassName(a1);
      v160 = v5;
      v161 = sel_getName("crs_getApplicationsWithSearchCriteria:os:");
      v178 = objc_msgSend(v179, "status");
      v176 = v161;
      v5 = v160;
      v162 = 45;
      if (v158)
        v162 = 43;
      v156(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x for OS %d", v162, v159, v176, 230, v178, a3);
    }
    v163 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v164 = NFSharedLogGetLogger(v163);
    v30 = objc_claimAutoreleasedReturnValue(v164);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_165;
    v165 = v30;
    v166 = object_getClass(a1);
    if (class_isMetaClass(v166))
      v167 = 43;
    else
      v167 = 45;
    v168 = object_getClassName(a1);
    v169 = sel_getName("crs_getApplicationsWithSearchCriteria:os:");
    v170 = objc_msgSend(v179, "status");
    *(_DWORD *)buf = 67110402;
    v255 = v167;
    v256 = 2082;
    v257 = v168;
    v30 = v165;
    v258 = 2082;
    v259 = v169;
    v260 = 1024;
    v261 = 230;
    v262 = 1024;
    v263 = v170;
    v264 = 1024;
    v265 = a3;
    v36 = "%c[%{public}s %{public}s]:%i Returned error: 0x%04x for OS %d";
    v37 = v165;
    v38 = 46;
LABEL_164:
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, v36, buf, v38);
LABEL_165:
    v181 = 0;
    goto LABEL_166;
  }
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "response"));
  -[NSMutableData appendData:](v5, "appendData:", v39);

  v181 = objc_opt_new(NSMutableArray);
  v204 = 0u;
  v205 = 0u;
  v206 = 0u;
  v207 = 0u;
  v30 = objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:requireDefiniteEncoding:](NFTLV, "TLVsWithData:requireDefiniteEncoding:", v5, 1));
  v184 = -[NSObject countByEnumeratingWithState:objects:count:](v30, "countByEnumeratingWithState:objects:count:", &v204, v237, 16);
  if (!v184)
    goto LABEL_166;
  v182 = *(_QWORD *)v205;
  v183 = v30;
  while (2)
  {
    v40 = 0;
    while (2)
    {
      if (*(_QWORD *)v205 != v182)
        objc_enumerationMutation(v30);
      v185 = v40;
      v41 = *(id *)(*((_QWORD *)&v204 + 1) + 8 * v40);
      v195 = v41;
      if (objc_msgSend(v41, "tag") != 97)
      {
        v138 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v139 = NFLogGetLogger(v138);
        if (v139)
        {
          v140 = (void (*)(uint64_t, const char *, ...))v139;
          v141 = object_getClass(v187);
          v142 = class_isMetaClass(v141);
          v143 = object_getClassName(v187);
          v144 = sel_getName("crs_applicationsFromTLV:os:");
          v177 = objc_msgSend(v195, "tag");
          v145 = 45;
          if (v142)
            v145 = 43;
          v140(3, "%c[%{public}s %{public}s]:%i Unexpected tag: 0x%x", v145, v143, v144, 58, v177);
        }
        v146 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v147 = NFSharedLogGetLogger(v146);
        v42 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v147);
        if (os_log_type_enabled(&v42->super.super, OS_LOG_TYPE_ERROR))
        {
          v148 = object_getClass(v187);
          if (class_isMetaClass(v148))
            v149 = 43;
          else
            v149 = 45;
          v150 = object_getClassName(v187);
          v151 = sel_getName("crs_applicationsFromTLV:os:");
          v152 = objc_msgSend(v195, "tag");
          *(_DWORD *)buf = 67110146;
          v255 = v149;
          v256 = 2082;
          v257 = v150;
          v258 = 2082;
          v259 = v151;
          v41 = v195;
          v260 = 1024;
          v261 = 58;
          v262 = 1024;
          v263 = v152;
          _os_log_impl((void *)&_mh_execute_header, &v42->super.super, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected tag: 0x%x", buf, 0x28u);
          v153 = 0;
          v30 = v183;
        }
        else
        {
          v153 = 0;
          v30 = v183;
          v41 = v195;
        }
        goto LABEL_150;
      }
      v186 = objc_opt_new(NSMutableArray);
      v42 = objc_opt_new(NSMutableDictionary);
      v43 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithInteger:", a3);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v43, CFSTR("seOS"));

      v235 = 0u;
      v236 = 0u;
      v233 = 0u;
      v234 = 0u;
      v44 = (NFApplet *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "children"));
      v191 = -[NFApplet countByEnumeratingWithState:objects:count:](v44, "countByEnumeratingWithState:objects:count:", &v233, buf, 16);
      if (!v191)
      {
        v137 = v44;
LABEL_147:
        v30 = v183;

        goto LABEL_149;
      }
      v188 = 0;
      v189 = *(_QWORD *)v234;
      v190 = v44;
      while (2)
      {
        v45 = 0;
        while (2)
        {
          if (*(_QWORD *)v234 != v189)
          {
            v46 = v45;
            objc_enumerationMutation(v44);
            v45 = v46;
          }
          v192 = v45;
          v47 = *(void **)(*((_QWORD *)&v233 + 1) + 8 * v45);
          v48 = objc_msgSend(v47, "tag");
          if (v48 <= 161)
          {
            switch(v48)
            {
              case 128:
                v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v47, "valueAsUnsignedLong")));
                v50 = v42;
                v51 = v49;
                v52 = CFSTR("updateCounter");
                goto LABEL_119;
              case 129:
                v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v47, "valueAsUnsignedLong")));
                v50 = v42;
                v51 = v49;
                v52 = CFSTR("priority");
                goto LABEL_119;
              case 130:
              case 131:
              case 133:
              case 134:
                goto LABEL_132;
              case 132:
                v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "value"));
                v50 = v42;
                v51 = v49;
                v52 = CFSTR("moduleIdentifier");
                goto LABEL_119;
              case 135:
                v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v47, "valueAsUnsignedLong")));
                v50 = v42;
                v51 = v49;
                v52 = CFSTR("family");
                goto LABEL_119;
              default:
                if (v48 == 79)
                {
                  if ((v188 & 1) != 0)
                  {
                    v119 = -[NFApplet initWithDictionary:]([NFApplet alloc], "initWithDictionary:", v42);
                    -[NSMutableArray addObject:](v186, "addObject:", v119);

                    v41 = v195;
                    -[NSMutableDictionary removeAllObjects](v42, "removeAllObjects");
                  }
                  v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "value"));
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v120, CFSTR("identifier"));

                  -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", CFSTR("embedded"), CFSTR("seid"));
                  v188 = 1;
                }
                else if (v48 == 147)
                {
                  v214 = 0u;
                  v215 = 0u;
                  v212 = 0u;
                  v213 = 0u;
                  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "value"));
                  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v55));

                  obj = v56;
                  v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v212, v239, 16);
                  if (v57)
                  {
                    v58 = v57;
                    v59 = *(_QWORD *)v213;
                    v193 = *(_QWORD *)v213;
                    do
                    {
                      v60 = 0;
                      v196 = v58;
                      do
                      {
                        if (*(_QWORD *)v213 != v59)
                          objc_enumerationMutation(obj);
                        v61 = *(void **)(*((_QWORD *)&v212 + 1) + 8 * (_QWORD)v60);
                        if (objc_msgSend(v61, "tag") == 160)
                        {
                          v202 = v60;
                          v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "children"));
                          v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "firstObject"));

                          v210 = 0u;
                          v211 = 0u;
                          v208 = 0u;
                          v209 = 0u;
                          v200 = v63;
                          v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "children"));
                          v65 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v208, v238, 16);
                          if (v65)
                          {
                            v66 = v65;
                            v67 = *(_QWORD *)v209;
                            do
                            {
                              for (j = 0; j != v66; j = (char *)j + 1)
                              {
                                if (*(_QWORD *)v209 != v67)
                                  objc_enumerationMutation(v64);
                                v69 = *(void **)(*((_QWORD *)&v208 + 1) + 8 * (_QWORD)j);
                                if (objc_msgSend(v69, "tag") == 128)
                                {
                                  v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "value"));
                                  v71 = objc_msgSend(v70, "length");

                                  if (v71 == (id)2)
                                  {
                                    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "value"));
                                    -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v72, CFSTR("typeFSystemCode"));

                                  }
                                }
                              }
                              v66 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v208, v238, 16);
                            }
                            while (v66);
                          }

                          v59 = v193;
                          v41 = v195;
                          v58 = v196;
                          v60 = v202;
                        }
                        v60 = (char *)v60 + 1;
                      }
                      while (v60 != v58);
                      v58 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v212, v239, 16);
                    }
                    while (v58);
                  }

                }
                break;
            }
            goto LABEL_132;
          }
          switch(v48)
          {
            case 162:
              v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "childWithTag:", 79));
              v49 = v53;
              if (v53)
              {
                v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "value"));
                -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v54, CFSTR("groupHead"));

                v41 = v195;
              }
              goto LABEL_120;
            case 163:
              v101 = objc_opt_new(NSMutableArray);
              v228 = 0u;
              v229 = 0u;
              v230 = 0u;
              v231 = 0u;
              v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "childrenWithTag:", 79));
              v103 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v228, v243, 16);
              if (v103)
              {
                v104 = v103;
                v105 = *(_QWORD *)v229;
                do
                {
                  for (k = 0; k != v104; k = (char *)k + 1)
                  {
                    if (*(_QWORD *)v229 != v105)
                      objc_enumerationMutation(v102);
                    v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v228 + 1)
                                                                                        + 8 * (_QWORD)k), "value"));
                    v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "NF_asHexString"));
                    -[NSMutableArray addObject:](v101, "addObject:", v108);

                  }
                  v104 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v228, v243, 16);
                }
                while (v104);
              }

              v109 = v42;
              v110 = v101;
              v111 = CFSTR("groupMembers");
              goto LABEL_114;
            case 164:
              v101 = objc_opt_new(NSMutableArray);
              v224 = 0u;
              v225 = 0u;
              v226 = 0u;
              v227 = 0u;
              v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "childrenWithTag:", 79));
              v113 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v224, v242, 16);
              if (v113)
              {
                v114 = v113;
                v115 = *(_QWORD *)v225;
                do
                {
                  for (m = 0; m != v114; m = (char *)m + 1)
                  {
                    if (*(_QWORD *)v225 != v115)
                      objc_enumerationMutation(v112);
                    v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v224 + 1)
                                                                                        + 8 * (_QWORD)m), "value"));
                    v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "NF_asHexString"));
                    -[NSMutableArray addObject:](v101, "addObject:", v118);

                  }
                  v114 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v224, v242, 16);
                }
                while (v114);
              }

              v109 = v42;
              v110 = v101;
              v111 = CFSTR("referencedApps");
LABEL_114:
              -[NSMutableDictionary setObject:forKeyedSubscript:](v109, "setObject:forKeyedSubscript:", v110, v111);

              goto LABEL_131;
            case 165:
              goto LABEL_132;
            case 166:
              v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "value"));
              -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v79, CFSTR("discretionary"));

              v194 = objc_opt_new(NSMutableArray);
              v220 = 0u;
              v221 = 0u;
              v222 = 0u;
              v223 = 0u;
              v201 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "children"));
              v80 = objc_msgSend(v201, "countByEnumeratingWithState:objects:count:", &v220, v241, 16);
              if (!v80)
                goto LABEL_93;
              v81 = v80;
              v82 = *(_QWORD *)v221;
              v197 = *(_QWORD *)v221;
              break;
            default:
              if (v48 == 196)
              {
                v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "value"));
                v50 = v42;
                v51 = v49;
                v52 = CFSTR("packageIdentifier");
LABEL_119:
                -[NSMutableDictionary setObject:forKeyedSubscript:](v50, "setObject:forKeyedSubscript:", v51, v52);
LABEL_120:

                goto LABEL_132;
              }
              if (v48 != 40816)
                goto LABEL_132;
              v232 = 0;
              v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "value"));
              v74 = objc_msgSend(v73, "length");

              if (v74 == (id)2)
              {
                v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "value"));
                objc_msgSend(v75, "getBytes:range:", (char *)&v232 + 1, 0, 1);

                v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", HIBYTE(v232)));
                -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v76, CFSTR("lifecycleState"));

                v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "value"));
                objc_msgSend(v77, "getBytes:range:", &v232, 1, 1);

                v78 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v232));
                -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v78, CFSTR("activationState"));
              }
              else
              {
                v121 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v122 = NFLogGetLogger(v121);
                if (v122)
                {
                  v123 = (void (*)(uint64_t, const char *, ...))v122;
                  v124 = object_getClass(v187);
                  v125 = class_isMetaClass(v124);
                  v126 = object_getClassName(v187);
                  v127 = sel_getName("crs_applicationsFromTLV:os:");
                  v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "value"));
                  v129 = 45;
                  if (v125)
                    v129 = 43;
                  v123(3, "%c[%{public}s %{public}s]:%i Invalid value: %{public}@", v129, v126, v127, 97, v128);

                }
                v130 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v131 = NFSharedLogGetLogger(v130);
                v78 = objc_claimAutoreleasedReturnValue(v131);
                if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
                {
                  v132 = object_getClass(v187);
                  if (class_isMetaClass(v132))
                    v133 = 43;
                  else
                    v133 = 45;
                  v134 = object_getClassName(v187);
                  v135 = sel_getName("crs_applicationsFromTLV:os:");
                  v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "value"));
                  *(_DWORD *)v244 = 67110146;
                  v245 = v133;
                  v246 = 2082;
                  v247 = v134;
                  v248 = 2082;
                  v249 = v135;
                  v250 = 1024;
                  v251 = 97;
                  v252 = 2114;
                  v253 = v136;
                  _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid value: %{public}@", v244, 0x2Cu);

                }
              }

              goto LABEL_131;
          }
          while (2)
          {
            v83 = 0;
            obja = v81;
            while (2)
            {
              if (*(_QWORD *)v221 != v82)
                objc_enumerationMutation(v201);
              v84 = *(void **)(*((_QWORD *)&v220 + 1) + 8 * v83);
              if (objc_msgSend(v84, "tag") == 254)
              {
                v218 = 0u;
                v219 = 0u;
                v216 = 0u;
                v217 = 0u;
                v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "children"));
                v86 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v216, v240, 16);
                if (v86)
                {
                  v87 = v86;
                  v203 = v83;
                  v88 = *(_QWORD *)v217;
                  do
                  {
                    for (n = 0; n != v87; n = (char *)n + 1)
                    {
                      if (*(_QWORD *)v217 != v88)
                        objc_enumerationMutation(v85);
                      v90 = *(void **)(*((_QWORD *)&v216 + 1) + 8 * (_QWORD)n);
                      if (objc_msgSend(v90, "tag") == 57152)
                      {
                        v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "value"));
                        v92 = objc_msgSend(v91, "length");

                        if (v92 == (id)2)
                        {
                          v244[0] = 0;
                          v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "value"));
                          objc_msgSend(v93, "getBytes:range:", v244, 1, 1);

                          v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v244[0] & 1));
                          -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v94, CFSTR("authTransientSupport"));

                          v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v244[0] >> 1) & 1));
                          -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v95, CFSTR("terminateAppSupport"));

                          v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v244[0] >> 2) & 1));
                          -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v96, CFSTR("containerInstance"));

                          v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v244[0] >> 3) & 1));
                          -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v97, CFSTR("proxyInstance"));

                          v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v244[0] >> 4) & 3));
                          -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v98, CFSTR("groupActivationStyle"));

                          v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v244[0] >> 6) & 1));
                          -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v99, CFSTR("authTransientConfigurable"));

                        }
                      }
                    }
                    v87 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v216, v240, 16);
                  }
                  while (v87);
                  v82 = v197;
                  v81 = obja;
                  v83 = v203;
                }
LABEL_90:

              }
              else if (objc_msgSend(v84, "tag") == 221)
              {
                v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "value"));
                v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "NF_asHexString"));
                -[NSMutableArray addObject:](v194, "addObject:", v100);

                goto LABEL_90;
              }
              if ((id)++v83 != v81)
                continue;
              break;
            }
            v81 = objc_msgSend(v201, "countByEnumeratingWithState:objects:count:", &v220, v241, 16);
            if (v81)
              continue;
            break;
          }
LABEL_93:

          if (-[NSMutableArray count](v194, "count"))
            -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v194, CFSTR("multiSEApplicationGroup"));

LABEL_131:
          v41 = v195;
LABEL_132:
          v45 = v192 + 1;
          v44 = v190;
          if ((id)(v192 + 1) != v191)
            continue;
          break;
        }
        v191 = -[NFApplet countByEnumeratingWithState:objects:count:](v190, "countByEnumeratingWithState:objects:count:", &v233, buf, 16);
        if (v191)
          continue;
        break;
      }

      if ((v188 & 1) != 0)
      {
        v137 = -[NFApplet initWithDictionary:]([NFApplet alloc], "initWithDictionary:", v42);
        -[NSMutableArray addObject:](v186, "addObject:", v137);
        goto LABEL_147;
      }
      v30 = v183;
LABEL_149:
      v153 = v186;
LABEL_150:

      if (v153)
        -[NSMutableArray addObjectsFromArray:](v181, "addObjectsFromArray:", v153);

      v40 = v185 + 1;
      if ((id)(v185 + 1) != v184)
        continue;
      break;
    }
    v184 = -[NSObject countByEnumeratingWithState:objects:count:](v30, "countByEnumeratingWithState:objects:count:", &v204, v237, 16);
    if (v184)
      continue;
    break;
  }
LABEL_166:

LABEL_167:
  return v181;
}

uint64_t sub_1000B531C(void *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void (*v19)(uint64_t, const char *, ...);
  objc_class *v20;
  _BOOL4 v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  const char *v31;
  NSObject *v32;
  uint32_t v33;
  void *v34;
  uint64_t v35;
  void (*v36)(uint64_t, const char *, ...);
  objc_class *v37;
  _BOOL4 v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  objc_class *v44;
  int v45;
  const char *v46;
  const char *v47;
  unsigned int v48;
  const char *Name;
  const char *v51;
  uint64_t v52;
  uint8_t buf[4];
  int v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  unsigned int v62;

  if (!a1)
    return 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_deactivateAll");
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 249);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(a1);
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    *(_DWORD *)buf = 67109890;
    v54 = v13;
    v55 = 2082;
    v56 = object_getClassName(a1);
    v57 = 2082;
    v58 = sel_getName("crs_deactivateAll");
    v59 = 1024;
    v60 = 249;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v14 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_100269CB9, 2);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 240, 1, 0, v14, 0));

  if (!v15)
  {
    v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v18 = NFLogGetLogger(v17);
    if (v18)
    {
      v19 = (void (*)(uint64_t, const char *, ...))v18;
      v20 = object_getClass(a1);
      v21 = class_isMetaClass(v20);
      v22 = object_getClassName(a1);
      v51 = sel_getName("crs_deactivateAll");
      v23 = 45;
      if (v21)
        v23 = 43;
      v19(3, "%c[%{public}s %{public}s]:%i Command failed", v23, v22, v51, 259);
    }
    v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v25 = NFSharedLogGetLogger(v24);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    v27 = object_getClass(a1);
    if (class_isMetaClass(v27))
      v28 = 43;
    else
      v28 = 45;
    v29 = object_getClassName(a1);
    v30 = sel_getName("crs_deactivateAll");
    *(_DWORD *)buf = 67109890;
    v54 = v28;
    v55 = 2082;
    v56 = v29;
    v57 = 2082;
    v58 = v30;
    v59 = 1024;
    v60 = 259;
    v31 = "%c[%{public}s %{public}s]:%i Command failed";
    v32 = v26;
    v33 = 34;
    goto LABEL_32;
  }
  if (objc_msgSend(v15, "status") != 36864)
  {
    v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v35 = NFLogGetLogger(v34);
    if (v35)
    {
      v36 = (void (*)(uint64_t, const char *, ...))v35;
      v37 = object_getClass(a1);
      v38 = class_isMetaClass(v37);
      v39 = object_getClassName(a1);
      v40 = sel_getName("crs_deactivateAll");
      v52 = objc_msgSend(v15, "status");
      v41 = 45;
      if (v38)
        v41 = 43;
      v36(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v41, v39, v40, 264, v52);
    }
    v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v43 = NFSharedLogGetLogger(v42);
    v26 = objc_claimAutoreleasedReturnValue(v43);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    v44 = object_getClass(a1);
    if (class_isMetaClass(v44))
      v45 = 43;
    else
      v45 = 45;
    v46 = object_getClassName(a1);
    v47 = sel_getName("crs_deactivateAll");
    v48 = objc_msgSend(v15, "status");
    *(_DWORD *)buf = 67110146;
    v54 = v45;
    v55 = 2082;
    v56 = v46;
    v57 = 2082;
    v58 = v47;
    v59 = 1024;
    v60 = 264;
    v61 = 1024;
    v62 = v48;
    v31 = "%c[%{public}s %{public}s]:%i Returned error: 0x%04x";
    v32 = v26;
    v33 = 40;
LABEL_32:
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, v31, buf, v33);
LABEL_33:

    v16 = 0;
    goto LABEL_34;
  }
  v16 = 1;
LABEL_34:

  return v16;
}

uint64_t sub_1000B5768(void *a1, void *a2, unsigned int a3, uint64_t a4)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  _BOOL4 v14;
  void *specific;
  uint64_t Logger;
  void (*v17)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *v31;
  _BOOL4 v32;
  const char *v33;
  const char *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  objc_class *v41;
  int v42;
  const char *v43;
  const char *v44;
  void *v45;
  char v46;
  unsigned int v47;
  NSMutableData *v48;
  id v49;
  id v50;
  void *v51;
  uint64_t v52;
  void *i;
  void *v54;
  void *v55;
  void *v56;
  char *v57;
  void *v58;
  NSMutableData *v59;
  void *v60;
  uint64_t v61;
  void (*v62)(uint64_t, const char *, ...);
  objc_class *v63;
  _BOOL4 v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  NSObject *v70;
  objc_class *v71;
  int v72;
  const char *v73;
  const char *v74;
  unsigned int v75;
  void *v76;
  uint64_t v77;
  void (*v78)(uint64_t, const char *, ...);
  objc_class *v79;
  _BOOL4 v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  NSObject *v85;
  objc_class *v86;
  int v87;
  const char *v88;
  const char *v89;
  const char *v90;
  NSObject *v91;
  uint32_t v92;
  void *v93;
  uint64_t v94;
  void (*v95)(uint64_t, const char *, ...);
  objc_class *v96;
  _BOOL4 v97;
  const char *v98;
  const char *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  objc_class *v103;
  int v104;
  const char *v105;
  const char *v106;
  unsigned int v107;
  void *v108;
  uint64_t v109;
  void (*v110)(uint64_t, const char *, ...);
  objc_class *v111;
  _BOOL4 v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  NSObject *v116;
  objc_class *v117;
  int v118;
  const char *v119;
  const char *v120;
  void *v121;
  uint64_t v122;
  void (*v123)(uint64_t, const char *, ...);
  objc_class *v124;
  _BOOL4 v125;
  const char *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  objc_class *v130;
  int v131;
  const char *v132;
  const char *v133;
  void *v134;
  uint64_t v135;
  void (*v136)(uint64_t, const char *, ...);
  objc_class *v137;
  _BOOL4 v138;
  const char *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  NSObject *v143;
  objc_class *v144;
  int v145;
  const char *v146;
  const char *v147;
  const char *v149;
  const char *Name;
  const char *v151;
  const char *v152;
  const char *v153;
  const char *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  id v159;
  id v160;
  id obj;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint8_t v167[4];
  int v168;
  __int16 v169;
  const char *v170;
  __int16 v171;
  const char *v172;
  __int16 v173;
  int v174;
  __int16 v175;
  unsigned int v176;
  uint8_t buf[4];
  int v178;
  __int16 v179;
  const char *v180;
  __int16 v181;
  const char *v182;
  __int16 v183;
  int v184;
  __int16 v185;
  void *v186;
  __int16 v187;
  unsigned int v188;
  __int16 v189;
  int v190;
  __int16 v191;
  _BOOL4 v192;

  v6 = a2;
  v7 = v6;
  if (!a1)
  {
LABEL_15:
    v27 = 0;
    goto LABEL_115;
  }
  if (!objc_msgSend(v6, "count"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v17 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("crs_setApplications:isSelectable:groupActivationStyle:");
      v21 = 45;
      if (isMetaClass)
        v21 = 43;
      v17(3, "%c[%{public}s %{public}s]:%i Empty applets", v21, ClassName, Name, 370);
    }
    v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v23 = NFSharedLogGetLogger(v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = object_getClass(a1);
      if (class_isMetaClass(v25))
        v26 = 43;
      else
        v26 = 45;
      *(_DWORD *)buf = 67109890;
      v178 = v26;
      v179 = 2082;
      v180 = object_getClassName(a1);
      v181 = 2082;
      v182 = sel_getName("crs_setApplications:isSelectable:groupActivationStyle:");
      v183 = 1024;
      v184 = 370;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Empty applets", buf, 0x22u);
    }

    goto LABEL_15;
  }
  v159 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "handle"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "info"));
  v10 = objc_msgSend(v9, "seType");

  if (v10 == (id)2)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "handle"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "info"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "sequenceCounter"));
    v14 = (unint64_t)objc_msgSend(v13, "unsignedIntegerValue") < 0x321;

  }
  else
  {
    v14 = 0;
  }
  v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v29 = NFLogGetLogger(v28);
  v160 = a1;
  if (v29)
  {
    v30 = (void (*)(uint64_t, const char *, ...))v29;
    v31 = object_getClass(a1);
    v32 = class_isMetaClass(v31);
    v33 = object_getClassName(a1);
    v34 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
    v35 = v7;
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NFApplet aidListForPrinting:](NFApplet, "aidListForPrinting:", v159));
    v151 = v34;
    a1 = v160;
    v37 = 45;
    if (v32)
      v37 = 43;
    v30(6, "%c[%{public}s %{public}s]:%i AIDs=%{public}@ isSelectable=%d groupType=%d custom=%d", v37, v33, v151, 275, v36, a3, a4, v14);

    v7 = v35;
  }
  v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v39 = NFSharedLogGetLogger(v38);
  v40 = objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    v41 = object_getClass(a1);
    if (class_isMetaClass(v41))
      v42 = 43;
    else
      v42 = 45;
    v43 = object_getClassName(a1);
    v44 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NFApplet aidListForPrinting:](NFApplet, "aidListForPrinting:", v159));
    *(_DWORD *)buf = 67110914;
    v178 = v42;
    v179 = 2082;
    v180 = v43;
    v181 = 2082;
    v182 = v44;
    v183 = 1024;
    v184 = 275;
    v185 = 2114;
    v186 = v45;
    v187 = 1024;
    v188 = a3;
    v189 = 1024;
    v190 = a4;
    v191 = 1024;
    v192 = v14;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i AIDs=%{public}@ isSelectable=%d groupType=%d custom=%d", buf, 0x3Eu);

    a1 = v160;
  }

  if (!v14)
    goto LABEL_33;
  if (!a3)
  {
    if (a4 < 3)
    {
      v46 = 8 * a4;
      v47 = 8751360;
      goto LABEL_32;
    }
    v121 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v122 = NFLogGetLogger(v121);
    if (v122)
    {
      v123 = (void (*)(uint64_t, const char *, ...))v122;
      v124 = object_getClass(a1);
      v125 = class_isMetaClass(v124);
      v126 = object_getClassName(a1);
      v154 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
      v127 = 45;
      if (v125)
        v127 = 43;
      v123(3, "%c[%{public}s %{public}s]:%i Invalid activation style: %d", v127, v126, v154, 308, a4);
    }
    v128 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v129 = NFSharedLogGetLogger(v128);
    v116 = objc_claimAutoreleasedReturnValue(v129);
    if (!os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
    {
LABEL_99:

      v27 = 0;
      goto LABEL_114;
    }
    v130 = object_getClass(a1);
    if (class_isMetaClass(v130))
      v131 = 43;
    else
      v131 = 45;
    v132 = object_getClassName(a1);
    v133 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
    *(_DWORD *)buf = 67110146;
    v178 = v131;
    v179 = 2082;
    v180 = v132;
    v181 = 2082;
    v182 = v133;
    v183 = 1024;
    v184 = 308;
    v185 = 1024;
    LODWORD(v186) = a4;
LABEL_98:
    _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid activation style: %d", buf, 0x28u);
    goto LABEL_99;
  }
  if (a4 >= 3)
  {
    v108 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v109 = NFLogGetLogger(v108);
    if (v109)
    {
      v110 = (void (*)(uint64_t, const char *, ...))v109;
      v111 = object_getClass(a1);
      v112 = class_isMetaClass(v111);
      v149 = object_getClassName(a1);
      v153 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
      v113 = 45;
      if (v112)
        v113 = 43;
      v110(3, "%c[%{public}s %{public}s]:%i Invalid activation style: %d", v113, v149, v153, 293, a4);
    }
    v114 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v115 = NFSharedLogGetLogger(v114);
    v116 = objc_claimAutoreleasedReturnValue(v115);
    if (!os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
      goto LABEL_99;
    v117 = object_getClass(a1);
    if (class_isMetaClass(v117))
      v118 = 43;
    else
      v118 = 45;
    v119 = object_getClassName(a1);
    v120 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
    *(_DWORD *)buf = 67110146;
    v178 = v118;
    v179 = 2082;
    v180 = v119;
    v181 = 2082;
    v182 = v120;
    v183 = 1024;
    v184 = 293;
    v185 = 1024;
    LODWORD(v186) = a4;
    goto LABEL_98;
  }
  v46 = 8 * a4;
  v47 = 8882945;
LABEL_32:
  a3 = v47 >> v46;
LABEL_33:
  v158 = v7;
  v48 = objc_opt_new(NSMutableData);
  v163 = 0u;
  v164 = 0u;
  v165 = 0u;
  v166 = 0u;
  obj = v159;
  v49 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v163, buf, 16);
  if (!v49)
  {
    v51 = 0;
    goto LABEL_47;
  }
  v50 = v49;
  v51 = 0;
  v52 = *(_QWORD *)v164;
  while (2)
  {
    for (i = 0; i != v50; i = (char *)i + 1)
    {
      if (*(_QWORD *)v164 != v52)
        objc_enumerationMutation(obj);
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v163 + 1) + 8 * (_QWORD)i), "identifierAsData"));
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 79, v54));

      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "asData"));
      if (-[NSMutableData length](v48, "length"))
      {
        v57 = -[NSMutableData length](v48, "length");
        if (&v57[(_QWORD)objc_msgSend(v56, "length")] >= (char *)0x100)
        {
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v160, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 240, 1, a3, v48, 0));

          if (v58)
          {
            if (objc_msgSend(v58, "status") == 36864)
            {
              v59 = objc_opt_new(NSMutableData);

              v51 = v58;
              v48 = v59;
              goto LABEL_43;
            }
            v93 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v94 = NFLogGetLogger(v93);
            if (v94)
            {
              v95 = (void (*)(uint64_t, const char *, ...))v94;
              v96 = object_getClass(v160);
              v97 = class_isMetaClass(v96);
              v98 = object_getClassName(v160);
              v99 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
              v157 = objc_msgSend(v58, "status");
              v100 = 45;
              if (v97)
                v100 = 43;
              v95(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v100, v98, v99, 336, v157);
            }
            v101 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v102 = NFSharedLogGetLogger(v101);
            v85 = objc_claimAutoreleasedReturnValue(v102);
            if (!os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
            {
LABEL_79:

              v167[0] = 0;
              v7 = v158;
              goto LABEL_113;
            }
            v103 = object_getClass(v160);
            if (class_isMetaClass(v103))
              v104 = 43;
            else
              v104 = 45;
            v105 = object_getClassName(v160);
            v106 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
            v107 = objc_msgSend(v58, "status");
            *(_DWORD *)v167 = 67110146;
            v168 = v104;
            v169 = 2082;
            v170 = v105;
            v171 = 2082;
            v172 = v106;
            v173 = 1024;
            v174 = 336;
            v175 = 1024;
            v176 = v107;
            v90 = "%c[%{public}s %{public}s]:%i Returned error: 0x%04x";
            v91 = v85;
            v92 = 40;
          }
          else
          {
            v76 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v77 = NFLogGetLogger(v76);
            if (v77)
            {
              v78 = (void (*)(uint64_t, const char *, ...))v77;
              v79 = object_getClass(v160);
              v80 = class_isMetaClass(v79);
              v81 = object_getClassName(v160);
              v152 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
              v82 = 45;
              if (v80)
                v82 = 43;
              v78(3, "%c[%{public}s %{public}s]:%i Command failed", v82, v81, v152, 332);
            }
            v83 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v84 = NFSharedLogGetLogger(v83);
            v85 = objc_claimAutoreleasedReturnValue(v84);
            if (!os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
              goto LABEL_79;
            v86 = object_getClass(v160);
            if (class_isMetaClass(v86))
              v87 = 43;
            else
              v87 = 45;
            v88 = object_getClassName(v160);
            v89 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
            *(_DWORD *)v167 = 67109890;
            v168 = v87;
            v169 = 2082;
            v170 = v88;
            v171 = 2082;
            v172 = v89;
            v173 = 1024;
            v174 = 332;
            v90 = "%c[%{public}s %{public}s]:%i Command failed";
            v91 = v85;
            v92 = 34;
          }
          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, v90, v167, v92);
          goto LABEL_79;
        }
      }
LABEL_43:
      -[NSMutableData appendData:](v48, "appendData:", v56);

    }
    v50 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v163, buf, 16);
    if (v50)
      continue;
    break;
  }
LABEL_47:

  if (!-[NSMutableData length](v48, "length"))
  {
    v58 = v51;
    v7 = v158;
    goto LABEL_101;
  }
  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v160, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 240, 1, a3, v48, 0));

  v7 = v158;
  if (v58)
  {
    if (objc_msgSend(v58, "status") != 36864)
    {
      v60 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v61 = NFLogGetLogger(v60);
      if (v61)
      {
        v62 = (void (*)(uint64_t, const char *, ...))v61;
        v63 = object_getClass(v160);
        v64 = class_isMetaClass(v63);
        v65 = object_getClassName(v160);
        v66 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
        v156 = objc_msgSend(v58, "status");
        v67 = 45;
        if (v64)
          v67 = 43;
        v62(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v67, v65, v66, 358, v156);
      }
      v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v69 = NFSharedLogGetLogger(v68);
      v70 = objc_claimAutoreleasedReturnValue(v69);
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        v71 = object_getClass(v160);
        if (class_isMetaClass(v71))
          v72 = 43;
        else
          v72 = 45;
        v73 = object_getClassName(v160);
        v74 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
        v75 = objc_msgSend(v58, "status");
        *(_DWORD *)v167 = 67110146;
        v168 = v72;
        v169 = 2082;
        v170 = v73;
        v171 = 2082;
        v172 = v74;
        v173 = 1024;
        v174 = 358;
        v175 = 1024;
        v176 = v75;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v167, 0x28u);
      }

      goto LABEL_112;
    }
LABEL_101:
    v167[0] = 1;
  }
  else
  {
    v134 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v135 = NFLogGetLogger(v134);
    if (v135)
    {
      v136 = (void (*)(uint64_t, const char *, ...))v135;
      v137 = object_getClass(v160);
      v138 = class_isMetaClass(v137);
      v139 = object_getClassName(v160);
      v155 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
      v140 = 45;
      if (v138)
        v140 = 43;
      v136(3, "%c[%{public}s %{public}s]:%i Command failed", v140, v139, v155, 354);
    }
    v141 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v142 = NFSharedLogGetLogger(v141);
    v143 = objc_claimAutoreleasedReturnValue(v142);
    if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
    {
      v144 = object_getClass(v160);
      if (class_isMetaClass(v144))
        v145 = 43;
      else
        v145 = 45;
      v146 = object_getClassName(v160);
      v147 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
      *(_DWORD *)v167 = 67109890;
      v168 = v145;
      v169 = 2082;
      v170 = v146;
      v171 = 2082;
      v172 = v147;
      v173 = 1024;
      v174 = 354;
      _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", v167, 0x22u);
    }

    v58 = 0;
LABEL_112:
    v167[0] = 0;
  }
LABEL_113:

  v27 = v167[0];
LABEL_114:

LABEL_115:
  return v27;
}

uint64_t sub_1000B64E8(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, const char *, ...);
  objc_class *v29;
  _BOOL4 v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  int v37;
  const char *v38;
  const char *v39;
  const char *v40;
  NSObject *v41;
  uint32_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void (*v46)(uint64_t, const char *, ...);
  objc_class *v47;
  _BOOL4 v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  objc_class *v54;
  int v55;
  const char *v56;
  const char *v57;
  unsigned int v58;
  const char *v60;
  uint64_t v61;
  uint8_t buf[4];
  int v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  int v69;
  __int16 v70;
  void *v71;

  v3 = a2;
  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("crs_markApplicationForDelete:");
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v6(5, "%c[%{public}s %{public}s]:%i AID=%{public}@", v12, ClassName, Name, 381, v11);

    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = object_getClass((id)a1);
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      v18 = object_getClassName((id)a1);
      v19 = sel_getName("crs_markApplicationForDelete:");
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
      *(_DWORD *)buf = 67110146;
      v63 = v17;
      v64 = 2082;
      v65 = v18;
      v66 = 2082;
      v67 = v19;
      v68 = 1024;
      v69 = 381;
      v70 = 2114;
      v71 = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i AID=%{public}@", buf, 0x2Cu);

    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
    objc_msgSend(v21, "markApplicationForDelete:", v3);

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifierAsData"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 79, v22));

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "asData"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 246, 0, 0, v24, 0));

    if (v25)
    {
      if (objc_msgSend(v25, "status") == 36864
        || objc_msgSend(v25, "status") == 27266
        && (v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifierAsData")),
            v43,
            !v43))
      {
        a1 = 1;
LABEL_36:

        goto LABEL_37;
      }
      v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v45 = NFLogGetLogger(v44);
      if (v45)
      {
        v46 = (void (*)(uint64_t, const char *, ...))v45;
        v47 = object_getClass((id)a1);
        v48 = class_isMetaClass(v47);
        v49 = object_getClassName((id)a1);
        v50 = sel_getName("crs_markApplicationForDelete:");
        v61 = objc_msgSend(v25, "status");
        v51 = 45;
        if (v48)
          v51 = 43;
        v46(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v51, v49, v50, 407, v61);
      }
      v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v53 = NFSharedLogGetLogger(v52);
      v35 = objc_claimAutoreleasedReturnValue(v53);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
LABEL_35:

        a1 = 0;
        goto LABEL_36;
      }
      v54 = object_getClass((id)a1);
      if (class_isMetaClass(v54))
        v55 = 43;
      else
        v55 = 45;
      v56 = object_getClassName((id)a1);
      v57 = sel_getName("crs_markApplicationForDelete:");
      v58 = objc_msgSend(v25, "status");
      *(_DWORD *)buf = 67110146;
      v63 = v55;
      v64 = 2082;
      v65 = v56;
      v66 = 2082;
      v67 = v57;
      v68 = 1024;
      v69 = 407;
      v70 = 1024;
      LODWORD(v71) = v58;
      v40 = "%c[%{public}s %{public}s]:%i Returned error: 0x%04x";
      v41 = v35;
      v42 = 40;
    }
    else
    {
      v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v27 = NFLogGetLogger(v26);
      if (v27)
      {
        v28 = (void (*)(uint64_t, const char *, ...))v27;
        v29 = object_getClass((id)a1);
        v30 = class_isMetaClass(v29);
        v31 = object_getClassName((id)a1);
        v60 = sel_getName("crs_markApplicationForDelete:");
        v32 = 45;
        if (v30)
          v32 = 43;
        v28(3, "%c[%{public}s %{public}s]:%i Command failed", v32, v31, v60, 396);
      }
      v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v34 = NFSharedLogGetLogger(v33);
      v35 = objc_claimAutoreleasedReturnValue(v34);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        goto LABEL_35;
      v36 = object_getClass((id)a1);
      if (class_isMetaClass(v36))
        v37 = 43;
      else
        v37 = 45;
      v38 = object_getClassName((id)a1);
      v39 = sel_getName("crs_markApplicationForDelete:");
      *(_DWORD *)buf = 67109890;
      v63 = v37;
      v64 = 2082;
      v65 = v38;
      v66 = 2082;
      v67 = v39;
      v68 = 1024;
      v69 = 396;
      v40 = "%c[%{public}s %{public}s]:%i Command failed";
      v41 = v35;
      v42 = 34;
    }
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, v40, buf, v42);
    goto LABEL_35;
  }
LABEL_37:

  return a1;
}

uint64_t sub_1000B69F0(void *a1, void *a2, void *a3)
{
  void *specific;
  id v7;
  id v8;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  const char *v37;
  const char *v38;
  void *v39;
  uint64_t v40;
  void (*v41)(uint64_t, const char *, ...);
  objc_class *v42;
  _BOOL4 v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  objc_class *v50;
  int v51;
  const char *v52;
  const char *v53;
  unsigned int v54;
  const char *Name;
  const char *v57;
  uint64_t v58;
  id v59;
  uint8_t buf[4];
  int v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  unsigned int v69;

  if (!a1)
    return 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v7 = a3;
  v8 = a2;
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v10 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_setEntangledAuthorizationRandom:mac:");
    v14 = 45;
    if (isMetaClass)
      v14 = 43;
    v10(5, "%c[%{public}s %{public}s]:%i ", v14, ClassName, Name, 420);
  }
  v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v16 = NFSharedLogGetLogger(v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = object_getClass(a1);
    if (class_isMetaClass(v18))
      v19 = 43;
    else
      v19 = 45;
    *(_DWORD *)buf = 67109890;
    v61 = v19;
    v62 = 2082;
    v63 = object_getClassName(a1);
    v64 = 2082;
    v65 = sel_getName("crs_setEntangledAuthorizationRandom:mac:");
    v66 = 1024;
    v67 = 420;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegate"));
  objc_msgSend(v20, "markApplicationForDelete:", 0);

  v21 = objc_msgSend(v8, "mutableCopy");
  objc_msgSend(v21, "appendData:", v7);

  v59 = 0;
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 226, 176, 0, v21, &v59));
  v23 = v59;
  if (v22)
  {
    if (objc_msgSend(v22, "status") == 36864)
    {
      v24 = 0;
    }
    else
    {
      v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v40 = NFLogGetLogger(v39);
      if (v40)
      {
        v41 = (void (*)(uint64_t, const char *, ...))v40;
        v42 = object_getClass(a1);
        v43 = class_isMetaClass(v42);
        v44 = object_getClassName(a1);
        v45 = sel_getName("crs_setEntangledAuthorizationRandom:mac:");
        v58 = objc_msgSend(v22, "status");
        v46 = 45;
        if (v43)
          v46 = 43;
        v41(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v46, v44, v45, 446, v58);
      }
      v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v48 = NFSharedLogGetLogger(v47);
      v49 = objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v50 = object_getClass(a1);
        if (class_isMetaClass(v50))
          v51 = 43;
        else
          v51 = 45;
        v52 = object_getClassName(a1);
        v53 = sel_getName("crs_setEntangledAuthorizationRandom:mac:");
        v54 = objc_msgSend(v22, "status");
        *(_DWORD *)buf = 67110146;
        v61 = v51;
        v62 = 2082;
        v63 = v52;
        v64 = 2082;
        v65 = v53;
        v66 = 1024;
        v67 = 446;
        v68 = 1024;
        v69 = v54;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
      }

      v24 = 8;
      if (objc_msgSend(v22, "status") != 27010)
      {
        if (objc_msgSend(v22, "status") == 27013)
          v24 = 8;
        else
          v24 = 6;
      }
    }
  }
  else
  {
    v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v26 = NFLogGetLogger(v25);
    if (v26)
    {
      v27 = (void (*)(uint64_t, const char *, ...))v26;
      v28 = object_getClass(a1);
      v29 = class_isMetaClass(v28);
      v30 = object_getClassName(a1);
      v57 = sel_getName("crs_setEntangledAuthorizationRandom:mac:");
      v31 = 45;
      if (v29)
        v31 = 43;
      v27(3, "%c[%{public}s %{public}s]:%i Command failed", v31, v30, v57, 438);
    }
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = NFSharedLogGetLogger(v32);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v35 = object_getClass(a1);
      if (class_isMetaClass(v35))
        v36 = 43;
      else
        v36 = 45;
      v37 = object_getClassName(a1);
      v38 = sel_getName("crs_setEntangledAuthorizationRandom:mac:");
      *(_DWORD *)buf = 67109890;
      v61 = v36;
      v62 = 2082;
      v63 = v37;
      v64 = 2082;
      v65 = v38;
      v66 = 1024;
      v67 = 438;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
    }

    if (objc_msgSend(v23, "code"))
      v24 = (uint64_t)objc_msgSend(v23, "code");
    else
      v24 = 16;
  }

  return v24;
}

uint64_t sub_1000B6EE8(void *a1, void *a2, void *a3)
{
  void *specific;
  id v7;
  id v8;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  _BOOL4 v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *v39;
  const char *v40;
  void *v41;
  uint64_t v42;
  void (*v43)(uint64_t, const char *, ...);
  objc_class *v44;
  _BOOL4 v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  NSObject *v51;
  objc_class *v52;
  int v53;
  const char *v54;
  const char *v55;
  unsigned int v56;
  const char *Name;
  const char *v59;
  uint64_t v60;
  id v61;
  uint8_t buf[4];
  int v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  int v69;
  __int16 v70;
  unsigned int v71;

  if (!a1)
    return 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v7 = a3;
  v8 = a2;
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v10 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_setAuthorizationRandom:mac:");
    v14 = 45;
    if (isMetaClass)
      v14 = 43;
    v10(5, "%c[%{public}s %{public}s]:%i ", v14, ClassName, Name, 460);
  }
  v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v16 = NFSharedLogGetLogger(v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = object_getClass(a1);
    if (class_isMetaClass(v18))
      v19 = 43;
    else
      v19 = 45;
    *(_DWORD *)buf = 67109890;
    v63 = v19;
    v64 = 2082;
    v65 = object_getClassName(a1);
    v66 = 2082;
    v67 = sel_getName("crs_setAuthorizationRandom:mac:");
    v68 = 1024;
    v69 = 460;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegate"));
  objc_msgSend(v20, "markApplicationForDelete:", 0);

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 216, v8));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "asData"));
  v23 = objc_msgSend(v22, "mutableCopy");

  objc_msgSend(v23, "appendData:", v7);
  v61 = 0;
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 226, 176, 0, v23, &v61));
  v25 = v61;
  if (v24)
  {
    if (objc_msgSend(v24, "status") == 36864)
    {
      v26 = 0;
    }
    else
    {
      v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v42 = NFLogGetLogger(v41);
      if (v42)
      {
        v43 = (void (*)(uint64_t, const char *, ...))v42;
        v44 = object_getClass(a1);
        v45 = class_isMetaClass(v44);
        v46 = object_getClassName(a1);
        v47 = sel_getName("crs_setAuthorizationRandom:mac:");
        v60 = objc_msgSend(v24, "status");
        v48 = 45;
        if (v45)
          v48 = 43;
        v43(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v48, v46, v47, 487, v60);
      }
      v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v50 = NFSharedLogGetLogger(v49);
      v51 = objc_claimAutoreleasedReturnValue(v50);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        v52 = object_getClass(a1);
        if (class_isMetaClass(v52))
          v53 = 43;
        else
          v53 = 45;
        v54 = object_getClassName(a1);
        v55 = sel_getName("crs_setAuthorizationRandom:mac:");
        v56 = objc_msgSend(v24, "status");
        *(_DWORD *)buf = 67110146;
        v63 = v53;
        v64 = 2082;
        v65 = v54;
        v66 = 2082;
        v67 = v55;
        v68 = 1024;
        v69 = 487;
        v70 = 1024;
        v71 = v56;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
      }

      v26 = 8;
      if (objc_msgSend(v24, "status") != 27010)
      {
        if (objc_msgSend(v24, "status") == 27013)
          v26 = 8;
        else
          v26 = 6;
      }
    }
  }
  else
  {
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFLogGetLogger(v27);
    if (v28)
    {
      v29 = (void (*)(uint64_t, const char *, ...))v28;
      v30 = object_getClass(a1);
      v31 = class_isMetaClass(v30);
      v32 = object_getClassName(a1);
      v59 = sel_getName("crs_setAuthorizationRandom:mac:");
      v33 = 45;
      if (v31)
        v33 = 43;
      v29(3, "%c[%{public}s %{public}s]:%i Command failed", v33, v32, v59, 479);
    }
    v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v35 = NFSharedLogGetLogger(v34);
    v36 = objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = object_getClass(a1);
      if (class_isMetaClass(v37))
        v38 = 43;
      else
        v38 = 45;
      v39 = object_getClassName(a1);
      v40 = sel_getName("crs_setAuthorizationRandom:mac:");
      *(_DWORD *)buf = 67109890;
      v63 = v38;
      v64 = 2082;
      v65 = v39;
      v66 = 2082;
      v67 = v40;
      v68 = 1024;
      v69 = 479;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
    }

    if (objc_msgSend(v25, "code"))
      v26 = (uint64_t)objc_msgSend(v25, "code");
    else
      v26 = 16;
  }

  return v26;
}

uint64_t sub_1000B7418(void *a1, unsigned int a2, void *a3, void *a4)
{
  void *specific;
  id v9;
  id v10;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *v31;
  _BOOL4 v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  const char *v40;
  const char *v41;
  void *v42;
  uint64_t v43;
  void (*v44)(uint64_t, const char *, ...);
  objc_class *v45;
  _BOOL4 v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  objc_class *v53;
  int v54;
  const char *v55;
  const char *v56;
  unsigned int v57;
  const char *ClassName;
  const char *Name;
  const char *v61;
  uint64_t v62;
  id v63;
  __int16 v64;
  uint8_t buf[4];
  int v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  unsigned int v74;

  if (!a1)
    return 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v9 = a4;
  v10 = a3;
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v12 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_setAuthorizationTimeout:challenge:mac:");
    v15 = 45;
    if (isMetaClass)
      v15 = 43;
    v12(6, "%c[%{public}s %{public}s]:%i t=%d", v15, ClassName, Name, 501, a2);
  }
  v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v17 = NFSharedLogGetLogger(v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v19 = object_getClass(a1);
    if (class_isMetaClass(v19))
      v20 = 43;
    else
      v20 = 45;
    *(_DWORD *)buf = 67110146;
    v66 = v20;
    v67 = 2082;
    v68 = object_getClassName(a1);
    v69 = 2082;
    v70 = sel_getName("crs_setAuthorizationTimeout:challenge:mac:");
    v71 = 1024;
    v72 = 501;
    v73 = 1024;
    v74 = a2;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i t=%d", buf, 0x28u);
  }

  v64 = __rev16(a2);
  v21 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &v64, 2);
  objc_msgSend(v21, "appendData:", v10);

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 210, v21));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "asData"));
  v24 = objc_msgSend(v23, "mutableCopy");

  objc_msgSend(v24, "appendData:", v9);
  v63 = 0;
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 226, 176, 0, v24, &v63));
  v26 = v63;
  if (v25)
  {
    if (objc_msgSend(v25, "status") == 36864)
    {
      v27 = 0;
    }
    else
    {
      v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v43 = NFLogGetLogger(v42);
      if (v43)
      {
        v44 = (void (*)(uint64_t, const char *, ...))v43;
        v45 = object_getClass(a1);
        v46 = class_isMetaClass(v45);
        v47 = object_getClassName(a1);
        v48 = sel_getName("crs_setAuthorizationTimeout:challenge:mac:");
        v62 = objc_msgSend(v25, "status");
        v49 = 45;
        if (v46)
          v49 = 43;
        v44(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v49, v47, v48, 530, v62);
      }
      v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v51 = NFSharedLogGetLogger(v50);
      v52 = objc_claimAutoreleasedReturnValue(v51);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        v53 = object_getClass(a1);
        if (class_isMetaClass(v53))
          v54 = 43;
        else
          v54 = 45;
        v55 = object_getClassName(a1);
        v56 = sel_getName("crs_setAuthorizationTimeout:challenge:mac:");
        v57 = objc_msgSend(v25, "status");
        *(_DWORD *)buf = 67110146;
        v66 = v54;
        v67 = 2082;
        v68 = v55;
        v69 = 2082;
        v70 = v56;
        v71 = 1024;
        v72 = 530;
        v73 = 1024;
        v74 = v57;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
      }

      if (objc_msgSend(v25, "status") == 27010)
      {
        v27 = 8;
      }
      else
      {
        v27 = 8;
        if (objc_msgSend(v25, "status") != 27013)
        {
          if (objc_msgSend(v25, "status") == 26754)
            v27 = 8;
          else
            v27 = 6;
        }
      }
    }
  }
  else
  {
    v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v29 = NFLogGetLogger(v28);
    if (v29)
    {
      v30 = (void (*)(uint64_t, const char *, ...))v29;
      v31 = object_getClass(a1);
      v32 = class_isMetaClass(v31);
      v33 = object_getClassName(a1);
      v61 = sel_getName("crs_setAuthorizationTimeout:challenge:mac:");
      v34 = 45;
      if (v32)
        v34 = 43;
      v30(3, "%c[%{public}s %{public}s]:%i Command failed", v34, v33, v61, 522);
    }
    v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v36 = NFSharedLogGetLogger(v35);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v38 = object_getClass(a1);
      if (class_isMetaClass(v38))
        v39 = 43;
      else
        v39 = 45;
      v40 = object_getClassName(a1);
      v41 = sel_getName("crs_setAuthorizationTimeout:challenge:mac:");
      *(_DWORD *)buf = 67109890;
      v66 = v39;
      v67 = 2082;
      v68 = v40;
      v69 = 2082;
      v70 = v41;
      v71 = 1024;
      v72 = 522;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
    }

    if (objc_msgSend(v26, "code"))
      v27 = (uint64_t)objc_msgSend(v26, "code");
    else
      v27 = 16;
  }

  return v27;
}

uint64_t sub_1000B7998(void *a1, void *a2, _QWORD *a3)
{
  void *specific;
  id v7;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *v25;
  _BOOL4 v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  void *v36;
  uint64_t v37;
  void (*v38)(uint64_t, const char *, ...);
  objc_class *v39;
  _BOOL4 v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  objc_class *v47;
  int v48;
  const char *v49;
  const char *v50;
  unsigned int v51;
  const char *Name;
  const char *v54;
  uint64_t v55;
  id v56;
  uint8_t buf[4];
  int v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  unsigned int v66;

  if (!a1)
    return 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v7 = a2;
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v9 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_authenticate:response:");
    v13 = 45;
    if (isMetaClass)
      v13 = 43;
    v9(6, "%c[%{public}s %{public}s]:%i ", v13, ClassName, Name, 544);
  }
  v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v15 = NFSharedLogGetLogger(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = object_getClass(a1);
    if (class_isMetaClass(v17))
      v18 = 43;
    else
      v18 = 45;
    *(_DWORD *)buf = 67109890;
    v58 = v18;
    v59 = 2082;
    v60 = object_getClassName(a1);
    v61 = 2082;
    v62 = sel_getName("crs_authenticate:response:");
    v63 = 1024;
    v64 = 544;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v56 = 0;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 248, 0, 0, v7, &v56));

  v20 = v56;
  if (v19)
  {
    +[NFExceptionsCALogger postAnalyticsCRSAuthInitEventWithStatus:](NFExceptionsCALogger, "postAnalyticsCRSAuthInitEventWithStatus:", objc_msgSend(v19, "status"));
    if (objc_msgSend(v19, "status") == 36864)
      sub_10020BD44((uint64_t)NFDailyStatisticsCALogger, CFSTR("totalAuthEvents"));
    if (objc_msgSend(v19, "status") == 36864)
    {
      v21 = 0;
      if (a3)
        *a3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "response"));
    }
    else
    {
      v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v37 = NFLogGetLogger(v36);
      if (v37)
      {
        v38 = (void (*)(uint64_t, const char *, ...))v37;
        v39 = object_getClass(a1);
        v40 = class_isMetaClass(v39);
        v41 = object_getClassName(a1);
        v42 = sel_getName("crs_authenticate:response:");
        v55 = objc_msgSend(v19, "status");
        v43 = 45;
        if (v40)
          v43 = 43;
        v38(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v43, v41, v42, 570, v55);
      }
      v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v45 = NFSharedLogGetLogger(v44);
      v46 = objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        v47 = object_getClass(a1);
        if (class_isMetaClass(v47))
          v48 = 43;
        else
          v48 = 45;
        v49 = object_getClassName(a1);
        v50 = sel_getName("crs_authenticate:response:");
        v51 = objc_msgSend(v19, "status");
        *(_DWORD *)buf = 67110146;
        v58 = v48;
        v59 = 2082;
        v60 = v49;
        v61 = 2082;
        v62 = v50;
        v63 = 1024;
        v64 = 570;
        v65 = 1024;
        v66 = v51;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
      }

      v21 = 8;
      if (objc_msgSend(v19, "status") != 27010)
      {
        if (objc_msgSend(v19, "status") == 27013)
          v21 = 8;
        else
          v21 = 6;
      }
    }
  }
  else
  {
    v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v23 = NFLogGetLogger(v22);
    if (v23)
    {
      v24 = (void (*)(uint64_t, const char *, ...))v23;
      v25 = object_getClass(a1);
      v26 = class_isMetaClass(v25);
      v27 = object_getClassName(a1);
      v54 = sel_getName("crs_authenticate:response:");
      v28 = 45;
      if (v26)
        v28 = 43;
      v24(3, "%c[%{public}s %{public}s]:%i Command failed", v28, v27, v54, 554);
    }
    v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v30 = NFSharedLogGetLogger(v29);
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = object_getClass(a1);
      if (class_isMetaClass(v32))
        v33 = 43;
      else
        v33 = 45;
      v34 = object_getClassName(a1);
      v35 = sel_getName("crs_authenticate:response:");
      *(_DWORD *)buf = 67109890;
      v58 = v33;
      v59 = 2082;
      v60 = v34;
      v61 = 2082;
      v62 = v35;
      v63 = 1024;
      v64 = 554;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
    }

    if (objc_msgSend(v20, "code"))
      v21 = (uint64_t)objc_msgSend(v20, "code");
    else
      v21 = 16;
  }

  return v21;
}

uint64_t sub_1000B7EAC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *specific;
  uint64_t Logger;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  NSMutableData *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  const char *v37;
  const char *v38;
  void *v39;
  id v40;
  char v41;
  void *v42;
  uint64_t v43;
  void (*v44)(uint64_t, const char *, ...);
  objc_class *v45;
  _BOOL4 v46;
  NSMutableData *v47;
  id v48;
  id v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  objc_class *v55;
  NSMutableData *v56;
  id v57;
  id v58;
  int v59;
  const char *v60;
  const char *v61;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t, const char *, ...);
  objc_class *v65;
  _BOOL4 v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  NSObject *v71;
  objc_class *v72;
  int v73;
  const char *v74;
  const char *v75;
  void *v76;
  uint64_t v77;
  void (*v78)(uint64_t, const char *, ...);
  objc_class *v79;
  NSMutableData *v80;
  id v81;
  id v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  NSObject *v87;
  objc_class *v88;
  int v89;
  const char *v90;
  const char *v91;
  unsigned int v92;
  const char *v94;
  const char *Name;
  const char *v96;
  const char *v97;
  const char *v98;
  const char *v99;
  uint64_t v100;
  const char *v101;
  _BOOL4 v102;
  id v103;
  uint8_t buf[4];
  int v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  int v111;
  __int16 v112;
  unsigned int v113;

  v7 = a3;
  v8 = a4;
  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v11 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
      v15 = 45;
      if (isMetaClass)
        v15 = 43;
      v11(6, "%c[%{public}s %{public}s]:%i ", v15, ClassName, Name, 585);
    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = object_getClass((id)a1);
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      *(_DWORD *)buf = 67109890;
      v105 = v20;
      v106 = 2082;
      v107 = object_getClassName((id)a1);
      v108 = 2082;
      v109 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
      v110 = 1024;
      v111 = 585;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    v21 = objc_opt_new(NSMutableData);
    if (v8)
    {
      if ((unint64_t)objc_msgSend(v8, "length") < 5 || (unint64_t)objc_msgSend(v8, "length") > 0x10)
      {
        v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v26 = NFLogGetLogger(v25);
        if (v26)
        {
          v27 = (void (*)(uint64_t, const char *, ...))v26;
          v28 = object_getClass((id)a1);
          v29 = class_isMetaClass(v28);
          v30 = object_getClassName((id)a1);
          v96 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
          v31 = 45;
          if (v29)
            v31 = 43;
          v27(3, "%c[%{public}s %{public}s]:%i Invalid parameters to CRS authorization with local validation command", v31, v30, v96, 599);
        }
        v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v33 = NFSharedLogGetLogger(v32);
        v34 = objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          v35 = object_getClass((id)a1);
          if (class_isMetaClass(v35))
            v36 = 43;
          else
            v36 = 45;
          v37 = object_getClassName((id)a1);
          v38 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
          *(_DWORD *)buf = 67109890;
          v105 = v36;
          v106 = 2082;
          v107 = v37;
          v108 = 2082;
          v109 = v38;
          v110 = 1024;
          v111 = 599;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameters to CRS authorization with local validation command", buf, 0x22u);
        }

        v39 = 0;
        v40 = 0;
        goto LABEL_25;
      }
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 79, v8));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "asData"));
      -[NSMutableData appendData:](v21, "appendData:", v23);

      v24 = 13;
    }
    else
    {
      v24 = 2;
    }
    -[NSMutableData appendData:](v21, "appendData:", v7);
    v103 = 0;
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 244, v24, a2, v21, &v103));
    v40 = v103;
    if (v39)
    {
      v41 = a2 - 1;
      if ((a2 - 1) < 7 && ((0x77u >> v41) & 1) != 0)
      {
        +[NFExceptionsCALogger postAnalyticsCRSAuthWithStatus:withMethod:](NFExceptionsCALogger, "postAnalyticsCRSAuthWithStatus:withMethod:", objc_msgSend(v39, "status"), dword_100269CBC[v41]);
      }
      else
      {
        v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v43 = NFLogGetLogger(v42);
        if (v43)
        {
          v44 = (void (*)(uint64_t, const char *, ...))v43;
          v45 = object_getClass((id)a1);
          v46 = class_isMetaClass(v45);
          v47 = v21;
          v48 = v40;
          v49 = v7;
          v50 = object_getClassName((id)a1);
          v97 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
          v51 = 45;
          if (v46)
            v51 = 43;
          v94 = v50;
          v7 = v49;
          v40 = v48;
          v21 = v47;
          v44(3, "%c[%{public}s %{public}s]:%i Unexpected location validation method", v51, v94, v97, 629);
        }
        v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v53 = NFSharedLogGetLogger(v52);
        v54 = objc_claimAutoreleasedReturnValue(v53);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          v55 = object_getClass((id)a1);
          v56 = v21;
          v57 = v40;
          v58 = v7;
          if (class_isMetaClass(v55))
            v59 = 43;
          else
            v59 = 45;
          v60 = object_getClassName((id)a1);
          v61 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
          *(_DWORD *)buf = 67109890;
          v105 = v59;
          v7 = v58;
          v40 = v57;
          v21 = v56;
          v106 = 2082;
          v107 = v60;
          v108 = 2082;
          v109 = v61;
          v110 = 1024;
          v111 = 629;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected location validation method", buf, 0x22u);
        }

      }
      if (objc_msgSend(v39, "status") == 36864)
      {
        a1 = 0;
      }
      else if (objc_msgSend(v39, "status") == 27011)
      {
        a1 = 1;
      }
      else
      {
        v76 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v77 = NFLogGetLogger(v76);
        if (v77)
        {
          v78 = (void (*)(uint64_t, const char *, ...))v77;
          v79 = object_getClass((id)a1);
          v102 = class_isMetaClass(v79);
          v101 = object_getClassName((id)a1);
          v80 = v21;
          v81 = v40;
          v82 = v7;
          v83 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
          v100 = objc_msgSend(v39, "status");
          v99 = v83;
          v7 = v82;
          v40 = v81;
          v21 = v80;
          v84 = 45;
          if (v102)
            v84 = 43;
          v78(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v84, v101, v99, 646, v100);
        }
        v85 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v86 = NFSharedLogGetLogger(v85);
        v87 = objc_claimAutoreleasedReturnValue(v86);
        if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
        {
          v88 = object_getClass((id)a1);
          if (class_isMetaClass(v88))
            v89 = 43;
          else
            v89 = 45;
          v90 = object_getClassName((id)a1);
          v91 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
          v92 = objc_msgSend(v39, "status");
          *(_DWORD *)buf = 67110146;
          v105 = v89;
          v106 = 2082;
          v107 = v90;
          v108 = 2082;
          v109 = v91;
          v110 = 1024;
          v111 = 646;
          v112 = 1024;
          v113 = v92;
          _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
        }

        a1 = 8;
        if (objc_msgSend(v39, "status") != 27010)
        {
          if (objc_msgSend(v39, "status") == 27013)
            a1 = 8;
          else
            a1 = 6;
        }
      }
      goto LABEL_69;
    }
    v62 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v63 = NFLogGetLogger(v62);
    if (v63)
    {
      v64 = (void (*)(uint64_t, const char *, ...))v63;
      v65 = object_getClass((id)a1);
      v66 = class_isMetaClass(v65);
      v67 = object_getClassName((id)a1);
      v98 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
      v68 = 45;
      if (v66)
        v68 = 43;
      v64(3, "%c[%{public}s %{public}s]:%i Command failed", v68, v67, v98, 609);
    }
    v69 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v70 = NFSharedLogGetLogger(v69);
    v71 = objc_claimAutoreleasedReturnValue(v70);
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      v72 = object_getClass((id)a1);
      if (class_isMetaClass(v72))
        v73 = 43;
      else
        v73 = 45;
      v74 = object_getClassName((id)a1);
      v75 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
      *(_DWORD *)buf = 67109890;
      v105 = v73;
      v106 = 2082;
      v107 = v74;
      v108 = 2082;
      v109 = v75;
      v110 = 1024;
      v111 = 609;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
    }

    if (objc_msgSend(v40, "code"))
    {
      a1 = (uint64_t)objc_msgSend(v40, "code");
      v39 = 0;
      goto LABEL_69;
    }
    v39 = 0;
LABEL_25:
    a1 = 16;
LABEL_69:

  }
  return a1;
}

NFECommercePaymentResponse *sub_1000B8708(NFECommercePaymentResponse *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *i;
  void *v12;
  unsigned int v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *specific;
  uint64_t Logger;
  void (*v19)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  unsigned int v31;
  NFECommercePaymentResponse *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void (*v36)(uint64_t, const char *, ...);
  objc_class *v37;
  _BOOL4 v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  objc_class *v42;
  int v43;
  const char *v44;
  NSObject *v45;
  uint32_t v46;
  void *v47;
  uint64_t v48;
  void (*v49)(uint64_t, const char *, ...);
  objc_class *v50;
  _BOOL4 v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  objc_class *v56;
  int v57;
  const char *v58;
  const char *v59;
  const char *v61;
  const char *v62;
  const char *v63;
  const char *v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  NFECommercePaymentResponse *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _QWORD v74[2];
  _QWORD v75[2];
  uint8_t v76[128];
  uint8_t buf[4];
  int v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  const char *v82;
  __int16 v83;
  int v84;
  __int16 v85;
  id v86;

  v3 = a2;
  v69 = a1;
  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v3));
    v5 = v4;
    if (v3 && objc_msgSend(v4, "count"))
    {
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v6 = v5;
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v70, v76, 16);
      if (v7)
      {
        v8 = v7;
        v66 = v5;
        v67 = v3;
        v9 = 0;
        v10 = *(_QWORD *)v71;
        v68 = v6;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(_QWORD *)v71 != v10)
              objc_enumerationMutation(v6);
            v12 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * (_QWORD)i);
            v13 = objc_msgSend(v12, "tag");
            if (v13 != 40726)
            {
              if (v13 == 225)
              {
                v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "childWithTag:", 130));
                v15 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject value](v14, "value"));
                v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "NF_asHexString"));

                v9 = v16;
              }
              else
              {
                specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                Logger = NFLogGetLogger(specific);
                if (Logger)
                {
                  v19 = (void (*)(uint64_t, const char *, ...))Logger;
                  Class = object_getClass(v69);
                  isMetaClass = class_isMetaClass(Class);
                  ClassName = object_getClassName(v69);
                  Name = sel_getName("crs_decodeResponseTLV:");
                  v65 = objc_msgSend(v12, "tag");
                  v61 = ClassName;
                  v24 = 45;
                  if (isMetaClass)
                    v24 = 43;
                  v6 = v68;
                  v19(4, "%c[%{public}s %{public}s]:%i Unknown tag: 0x%x", v24, v61, Name, 765, v65);
                }
                v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v26 = NFSharedLogGetLogger(v25);
                v14 = objc_claimAutoreleasedReturnValue(v26);
                if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
                {
                  v27 = object_getClass(v69);
                  if (class_isMetaClass(v27))
                    v28 = 43;
                  else
                    v28 = 45;
                  v29 = object_getClassName(v69);
                  v30 = sel_getName("crs_decodeResponseTLV:");
                  v31 = objc_msgSend(v12, "tag");
                  *(_DWORD *)buf = 67110146;
                  v78 = v28;
                  v79 = 2082;
                  v80 = v29;
                  v81 = 2082;
                  v82 = v30;
                  v6 = v68;
                  v83 = 1024;
                  v84 = 765;
                  v85 = 1024;
                  LODWORD(v86) = v31;
                  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown tag: 0x%x", buf, 0x28u);
                }
              }

            }
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v70, v76, 16);
        }
        while (v8);

        v5 = v66;
        v3 = v67;
        if (v9)
        {
          v32 = [NFECommercePaymentResponse alloc];
          v74[0] = CFSTR("transactionIdentifier");
          v74[1] = CFSTR("transactionData");
          v75[0] = v9;
          v75[1] = v67;
          v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v75, v74, 2));
          a1 = -[NFECommercePaymentResponse initWithDictionary:](v32, "initWithDictionary:", v33);

LABEL_47:
          goto LABEL_48;
        }
      }
      else
      {

      }
      v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v48 = NFLogGetLogger(v47);
      if (v48)
      {
        v49 = (void (*)(uint64_t, const char *, ...))v48;
        v50 = object_getClass(v69);
        v51 = class_isMetaClass(v50);
        v52 = object_getClassName(v69);
        v64 = sel_getName("crs_decodeResponseTLV:");
        v53 = 45;
        if (v51)
          v53 = 43;
        v49(3, "%c[%{public}s %{public}s]:%i Missing transaction ID", v53, v52, v64, 771);
      }
      v54 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v55 = NFSharedLogGetLogger(v54);
      v9 = objc_claimAutoreleasedReturnValue(v55);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_46:
        a1 = 0;
        goto LABEL_47;
      }
      v56 = object_getClass(v69);
      if (class_isMetaClass(v56))
        v57 = 43;
      else
        v57 = 45;
      v58 = object_getClassName(v69);
      v59 = sel_getName("crs_decodeResponseTLV:");
      *(_DWORD *)buf = 67109890;
      v78 = v57;
      v79 = 2082;
      v80 = v58;
      v81 = 2082;
      v82 = v59;
      v83 = 1024;
      v84 = 771;
      v44 = "%c[%{public}s %{public}s]:%i Missing transaction ID";
      v45 = v9;
      v46 = 34;
    }
    else
    {
      v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v35 = NFLogGetLogger(v34);
      if (v35)
      {
        v36 = (void (*)(uint64_t, const char *, ...))v35;
        v37 = object_getClass(v69);
        v38 = class_isMetaClass(v37);
        v62 = object_getClassName(v69);
        v63 = sel_getName("crs_decodeResponseTLV:");
        v39 = 45;
        if (v38)
          v39 = 43;
        v36(3, "%c[%{public}s %{public}s]:%i Missing/invalid value: %{public}@", v39, v62, v63, 747, v3);
      }
      v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v41 = NFSharedLogGetLogger(v40);
      v9 = objc_claimAutoreleasedReturnValue(v41);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_46;
      v42 = object_getClass(v69);
      if (class_isMetaClass(v42))
        v43 = 43;
      else
        v43 = 45;
      *(_DWORD *)buf = 67110146;
      v78 = v43;
      v79 = 2082;
      v80 = object_getClassName(v69);
      v81 = 2082;
      v82 = sel_getName("crs_decodeResponseTLV:");
      v83 = 1024;
      v84 = 747;
      v85 = 2114;
      v86 = v3;
      v44 = "%c[%{public}s %{public}s]:%i Missing/invalid value: %{public}@";
      v45 = v9;
      v46 = 44;
    }
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, v44, buf, v46);
    goto LABEL_46;
  }
LABEL_48:

  return a1;
}

uint64_t sub_1000B8CDC(NFECommercePaymentResponse *a1, uint64_t a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  NSMutableData *v14;
  void *v15;
  id v16;
  void *specific;
  uint64_t Logger;
  void (*v19)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  void *v28;
  int v29;
  void *v30;
  id v31;
  NSMutableData *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void (*v36)(uint64_t, const char *, ...);
  objc_class *v37;
  _BOOL4 v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  objc_class *v44;
  void *v45;
  int v46;
  const char *v47;
  const char *v48;
  void *v49;
  unsigned __int8 v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void (*v56)(uint64_t, const char *, ...);
  objc_class *v57;
  _BOOL4 v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  objc_class *v65;
  int v66;
  const char *v67;
  const char *v68;
  unsigned int v69;
  void *v70;
  uint64_t v71;
  void (*v72)(uint64_t, const char *, ...);
  objc_class *v73;
  _BOOL4 v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  NSObject *v79;
  objc_class *v80;
  int v81;
  const char *v82;
  const char *v83;
  NSMutableData *v84;
  NFECommercePaymentResponse *v85;
  uint64_t v86;
  void *v87;
  void *v89;
  const char *Name;
  const char *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  _QWORD *v95;
  id v96;
  int v97;
  unsigned int sel;
  id v99;
  NSMutableData *v100;
  id v101;
  id v102;
  uint8_t buf[4];
  int v104;
  __int16 v105;
  const char *v106;
  __int16 v107;
  const char *v108;
  __int16 v109;
  int v110;
  __int16 v111;
  unsigned int v112;

  v11 = a3;
  v12 = a4;
  v13 = a5;
  if (a1)
  {
    if (!a6)
    {
      v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      objc_msgSend(v89, "handleFailureInMethod:object:file:lineNumber:description:", "crs_authorizeForECommerce:cryptogram:encryptedPIN:request:response:", a1, CFSTR("NFSecureElementWrapper+ContactlessRegistry.m"), 785, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("theResponse != nil"));

    }
    if ((a2 - 5) > 2 || v12 && objc_msgSend(v12, "length") == (id)16)
    {
      v14 = sub_1001C43B8((uint64_t)NFECommercePaymentRequestEncoder, v13, v12, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      if (v15)
      {
        if (objc_msgSend(v11, "length") == (id)8)
        {
          v16 = objc_msgSend(v15, "mutableCopy");
          objc_msgSend(v16, "appendData:", v11);
          v99 = v16;
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = NFLogGetLogger(specific);
          if (Logger)
          {
            v19 = (void (*)(uint64_t, const char *, ...))Logger;
            Class = object_getClass(a1);
            isMetaClass = class_isMetaClass(Class);
            ClassName = object_getClassName(a1);
            Name = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
            v23 = 45;
            if (isMetaClass)
              v23 = 43;
            v19(6, "%c[%{public}s %{public}s]:%i ", v23, ClassName, Name, 661);
          }
          v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v25 = NFSharedLogGetLogger(v24);
          v26 = objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            v27 = object_getClass(a1);
            v28 = v15;
            if (class_isMetaClass(v27))
              v29 = 43;
            else
              v29 = 45;
            *(_DWORD *)buf = 67109890;
            v104 = v29;
            v15 = v28;
            v105 = 2082;
            v106 = object_getClassName(a1);
            v107 = 2082;
            v108 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
            v109 = 1024;
            v110 = 661;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
          }

          v102 = 0;
          v97 = a2;
          v30 = (void *)objc_claimAutoreleasedReturnValue(-[NFECommercePaymentResponse sendCommandWithClass:instruction:p1:p2:data:error:](a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 244, 4, a2, v99, &v102));
          v31 = v102;
          if (v30)
          {
            if (objc_msgSend(v30, "status") == 36864)
            {
              v32 = (NSMutableData *)(id)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "response"));
              sel = objc_msgSend(v30, "status");
              v33 = 0;
            }
            else
            {
              v94 = v15;
              v95 = a6;
              v96 = v11;
              v100 = objc_opt_new(NSMutableData);
              while ((objc_msgSend(v30, "status") & 0xFF00) == 0x6100)
              {
                v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "response"));
                -[NSMutableData appendData:](v100, "appendData:", v49);

                v50 = objc_msgSend(v30, "status");
                v101 = v31;
                v51 = (void *)objc_claimAutoreleasedReturnValue(-[NFECommercePaymentResponse sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:](a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 192, 0, 0, 0, v50, 0, &v101));
                v52 = v101;

                if (!v51)
                {
                  v70 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v71 = NFLogGetLogger(v70);
                  if (v71)
                  {
                    v72 = (void (*)(uint64_t, const char *, ...))v71;
                    v73 = object_getClass(a1);
                    v74 = class_isMetaClass(v73);
                    v75 = object_getClassName(a1);
                    v92 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
                    v76 = 45;
                    if (v74)
                      v76 = 43;
                    v72(3, "%c[%{public}s %{public}s]:%i Command failed", v76, v75, v92, 698);
                  }
                  v77 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v78 = NFSharedLogGetLogger(v77);
                  v79 = objc_claimAutoreleasedReturnValue(v78);
                  if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
                  {
                    v80 = object_getClass(a1);
                    if (class_isMetaClass(v80))
                      v81 = 43;
                    else
                      v81 = 45;
                    v82 = object_getClassName(a1);
                    v83 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
                    *(_DWORD *)buf = 67109890;
                    v104 = v81;
                    v105 = 2082;
                    v106 = v82;
                    v107 = 2082;
                    v108 = v83;
                    v109 = 1024;
                    v110 = 698;
                    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
                  }

                  v15 = v94;
                  sel = 0;
                  v32 = 0;
                  v51 = 0;
                  if (objc_msgSend(v52, "code"))
                    v33 = (uint64_t)objc_msgSend(v52, "code");
                  else
                    v33 = 16;
                  goto LABEL_66;
                }
                v31 = v52;
                v30 = v51;
                if (objc_msgSend(v51, "status") == 36864)
                {
                  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "response"));
                  -[NSMutableData appendData:](v100, "appendData:", v53);

                  v32 = objc_retainAutorelease(v100);
                  sel = objc_msgSend(v51, "status");
                  v33 = 0;
                  goto LABEL_66;
                }
              }
              v54 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v55 = NFLogGetLogger(v54);
              if (v55)
              {
                v56 = (void (*)(uint64_t, const char *, ...))v55;
                v57 = object_getClass(a1);
                v58 = class_isMetaClass(v57);
                v59 = object_getClassName(a1);
                v60 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
                v93 = objc_msgSend(v30, "status");
                v61 = 45;
                if (v58)
                  v61 = 43;
                v56(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v61, v59, v60, 711, v93);
              }
              v62 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v63 = NFSharedLogGetLogger(v62);
              v64 = objc_claimAutoreleasedReturnValue(v63);
              if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
              {
                v65 = object_getClass(a1);
                if (class_isMetaClass(v65))
                  v66 = 43;
                else
                  v66 = 45;
                v67 = object_getClassName(a1);
                v68 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
                v69 = objc_msgSend(v30, "status");
                *(_DWORD *)buf = 67110146;
                v104 = v66;
                v105 = 2082;
                v106 = v67;
                v107 = 2082;
                v108 = v68;
                v109 = 1024;
                v110 = 711;
                v111 = 1024;
                v112 = v69;
                _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
              }

              v15 = v94;
              sel = objc_msgSend(v30, "status");
              if (objc_msgSend(v30, "status") == 27010
                || objc_msgSend(v30, "status") == 27013)
              {
                v32 = 0;
                v33 = 8;
              }
              else if (objc_msgSend(v30, "status") == 27265)
              {
                v32 = 0;
                v33 = 14;
              }
              else if (objc_msgSend(v30, "status") == 27012)
              {
                v32 = 0;
                v33 = 23;
              }
              else if (objc_msgSend(v30, "status") == 27264)
              {
                v32 = 0;
                v33 = 10;
              }
              else
              {
                v33 = 9;
                if (objc_msgSend(v30, "status") == 27272)
                {
                  v32 = 0;
                }
                else
                {
                  v32 = 0;
                  if (objc_msgSend(v30, "status") == 27015)
                    v33 = 9;
                  else
                    v33 = 6;
                }
              }
              v52 = v31;
              v51 = v30;
LABEL_66:

              v31 = v52;
              v30 = v51;
              a6 = v95;
              v11 = v96;
            }
          }
          else
          {
            v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v35 = NFLogGetLogger(v34);
            if (v35)
            {
              v36 = (void (*)(uint64_t, const char *, ...))v35;
              v37 = object_getClass(a1);
              v38 = class_isMetaClass(v37);
              v39 = object_getClassName(a1);
              v91 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
              v40 = 45;
              if (v38)
                v40 = 43;
              v36(3, "%c[%{public}s %{public}s]:%i Command failed", v40, v39, v91, 671);
            }
            v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v42 = NFSharedLogGetLogger(v41);
            v43 = objc_claimAutoreleasedReturnValue(v42);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            {
              v44 = object_getClass(a1);
              v45 = v15;
              if (class_isMetaClass(v44))
                v46 = 43;
              else
                v46 = 45;
              v47 = object_getClassName(a1);
              v48 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
              *(_DWORD *)buf = 67109890;
              v104 = v46;
              v15 = v45;
              v105 = 2082;
              v106 = v47;
              v107 = 2082;
              v108 = v48;
              v109 = 1024;
              v110 = 671;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
            }

            if (objc_msgSend(v31, "code"))
            {
              v33 = (uint64_t)objc_msgSend(v31, "code");
              sel = 0;
              v32 = 0;
              v30 = 0;
            }
            else
            {
              sel = 0;
              v32 = 0;
              v30 = 0;
              v33 = 16;
            }
          }

          v84 = v32;
          if (!(_DWORD)v33)
          {
            v85 = sub_1000B8708(a1, v84);
            v87 = (void *)objc_claimAutoreleasedReturnValue(v85);
            if (v87)
            {
              sub_1000B96A4(a1, v97, v13, v86, sel);
              v33 = 0;
              *a6 = objc_retainAutorelease(v87);
            }
            else
            {
              v33 = 23;
            }

          }
        }
        else
        {
          v33 = 10;
        }
      }
      else
      {
        v33 = 22;
      }

    }
    else
    {
      v33 = 10;
    }
  }
  else
  {
    v33 = 0;
  }

  return v33;
}

void sub_1000B96A4(void *a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8;
  NSMutableDictionary *v9;
  void *v10;
  _UNKNOWN **v11;
  void *specific;
  uint64_t Logger;
  void (*v14)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  objc_class *v22;
  int v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  const char *Name;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  int v45;

  v8 = a3;
  if (a1)
  {
    v9 = objc_opt_new(NSMutableDictionary);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a5));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v10, CFSTR("status"));

    switch(a2)
    {
      case 1:
        v11 = &off_1002FE868;
        goto LABEL_19;
      case 2:
        v11 = &off_1002FE880;
        goto LABEL_19;
      case 3:
        v11 = &off_1002FE898;
        goto LABEL_19;
      case 5:
        v11 = &off_1002FE8B0;
        goto LABEL_19;
      case 6:
        v11 = &off_1002FE8C8;
        goto LABEL_19;
      case 7:
        v11 = &off_1002FE8E0;
LABEL_19:
        -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v11, CFSTR("method"));
        break;
      default:
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v14 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("crs_postCACRSAuthECommerce:request:response:status:");
          v18 = 45;
          if (isMetaClass)
            v18 = 43;
          v14(3, "%c[%{public}s %{public}s]:%i Invalid auth type", v18, ClassName, Name, 840);
        }
        v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v20 = NFSharedLogGetLogger(v19);
        v21 = objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v22 = object_getClass(a1);
          if (class_isMetaClass(v22))
            v23 = 43;
          else
            v23 = 45;
          *(_DWORD *)buf = 67109890;
          v39 = v23;
          v40 = 2082;
          v41 = object_getClassName(a1);
          v42 = 2082;
          v43 = sel_getName("crs_postCACRSAuthECommerce:request:response:status:");
          v44 = 1024;
          v45 = 840;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid auth type", buf, 0x22u);
        }

        break;
    }
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "appletIdentifier"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v24));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v25, CFSTR("aid"));

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "merchantData"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v26, CFSTR("merchantID"));

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currencyCode"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", +[NFCurrency getFractionDigitsFromCurrencyStringCode:](NFCurrency, "getFractionDigitsFromCurrencyStringCode:", v27)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v28, CFSTR("fractionDigits"));

    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transactionAmount"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v29, CFSTR("transactionTotal"));

    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "countryCode"));
    v31 = sub_1001C2FBC((uint64_t)NFECommercePaymentRequestEncoder, v30);

    if (v31)
    {
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v31));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v32, CFSTR("countryCode"));

    }
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currencyCode"));
    v34 = sub_1001C59A4((uint64_t)NFECommercePaymentRequestEncoder, v33);

    if (v34 != -1)
    {
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v34));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v35, CFSTR("currencyCode"));

    }
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", objc_msgSend(v8, "merchantCapabilities")));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v36, CFSTR("merchantCapabilities"));

    +[NFExceptionsCALogger postAnalyticsCRSAuthECommerceWithParameters:](NFExceptionsCALogger, "postAnalyticsCRSAuthECommerceWithParameters:", v9);
  }

}

void sub_1000B9AFC(void *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void (*v18)(uint64_t, const char *, ...);
  objc_class *v19;
  _BOOL4 v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  unsigned int v31;
  const char *v32;
  NSObject *v33;
  uint32_t v34;
  void *v35;
  uint64_t v36;
  void (*v37)(uint64_t, const char *, ...);
  objc_class *v38;
  _BOOL4 v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  objc_class *v44;
  int v45;
  const char *v46;
  const char *v47;
  const char *Name;
  const char *v49;
  uint64_t v50;
  uint8_t buf[4];
  int v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  unsigned int v60;

  if (!a1)
    return;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_deauthorize");
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 869);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(a1);
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    *(_DWORD *)buf = 67109890;
    v52 = v13;
    v53 = 2082;
    v54 = object_getClassName(a1);
    v55 = 2082;
    v56 = sel_getName("crs_deauthorize");
    v57 = 1024;
    v58 = 869;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 244, 1, 129, 0, 0));
  v15 = v14;
  if (!v14)
  {
    v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v36 = NFLogGetLogger(v35);
    if (v36)
    {
      v37 = (void (*)(uint64_t, const char *, ...))v36;
      v38 = object_getClass(a1);
      v39 = class_isMetaClass(v38);
      v40 = object_getClassName(a1);
      v49 = sel_getName("crs_deauthorize");
      v41 = 45;
      if (v39)
        v41 = 43;
      v37(3, "%c[%{public}s %{public}s]:%i Command failed", v41, v40, v49, 878);
    }
    v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v43 = NFSharedLogGetLogger(v42);
    v26 = objc_claimAutoreleasedReturnValue(v43);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      goto LABEL_32;
    v44 = object_getClass(a1);
    if (class_isMetaClass(v44))
      v45 = 43;
    else
      v45 = 45;
    v46 = object_getClassName(a1);
    v47 = sel_getName("crs_deauthorize");
    *(_DWORD *)buf = 67109890;
    v52 = v45;
    v53 = 2082;
    v54 = v46;
    v55 = 2082;
    v56 = v47;
    v57 = 1024;
    v58 = 878;
    v32 = "%c[%{public}s %{public}s]:%i Command failed";
    v33 = v26;
    v34 = 34;
    goto LABEL_31;
  }
  if (objc_msgSend(v14, "status") != 36864)
  {
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFLogGetLogger(v16);
    if (v17)
    {
      v18 = (void (*)(uint64_t, const char *, ...))v17;
      v19 = object_getClass(a1);
      v20 = class_isMetaClass(v19);
      v21 = object_getClassName(a1);
      v22 = sel_getName("crs_deauthorize");
      v50 = objc_msgSend(v15, "status");
      v23 = 45;
      if (v20)
        v23 = 43;
      v18(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v23, v21, v22, 881, v50);
    }
    v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v25 = NFSharedLogGetLogger(v24);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      goto LABEL_32;
    v27 = object_getClass(a1);
    if (class_isMetaClass(v27))
      v28 = 43;
    else
      v28 = 45;
    v29 = object_getClassName(a1);
    v30 = sel_getName("crs_deauthorize");
    v31 = objc_msgSend(v15, "status");
    *(_DWORD *)buf = 67110146;
    v52 = v28;
    v53 = 2082;
    v54 = v29;
    v55 = 2082;
    v56 = v30;
    v57 = 1024;
    v58 = 881;
    v59 = 1024;
    v60 = v31;
    v32 = "%c[%{public}s %{public}s]:%i Returned error: 0x%04x";
    v33 = v26;
    v34 = 40;
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, v32, buf, v34);
LABEL_32:

  }
  +[NFExceptionsCALogger postAnalyticsCRSDeAuthWithStatus:](NFExceptionsCALogger, "postAnalyticsCRSDeAuthWithStatus:", objc_msgSend(v15, "status"));
  if (objc_msgSend(v15, "status") == 36864)
    sub_10020BD44((uint64_t)NFDailyStatisticsCALogger, CFSTR("totalDeAuth"));

}

uint64_t sub_1000B9F4C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *specific;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  objc_class *v22;
  int v23;
  const char *v24;
  const char *v25;
  void *v26;
  NSMutableData *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *i;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  void (*v41)(uint64_t, const char *, ...);
  objc_class *v42;
  _BOOL4 v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  objc_class *v50;
  int v51;
  const char *v52;
  const char *v53;
  unsigned int v54;
  void *v55;
  uint64_t v56;
  void (*v57)(uint64_t, const char *, ...);
  objc_class *v58;
  _BOOL4 v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  objc_class *v65;
  int v66;
  void *v67;
  uint64_t v68;
  void (*v69)(uint64_t, const char *, ...);
  objc_class *v70;
  _BOOL4 v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  NSObject *v76;
  objc_class *v77;
  int v78;
  const char *v79;
  const char *v80;
  void *v81;
  uint64_t v82;
  void (*v83)(uint64_t, const char *, ...);
  objc_class *v84;
  _BOOL4 v85;
  const char *v86;
  const char *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  NSObject *v91;
  objc_class *v92;
  int v93;
  const char *v94;
  const char *v95;
  unsigned int v96;
  const char *v98;
  const char *v99;
  const char *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  id v106;
  id v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint8_t v112[4];
  int v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  const char *v117;
  __int16 v118;
  int v119;
  __int16 v120;
  unsigned int v121;
  uint8_t buf[4];
  int v123;
  __int16 v124;
  const char *v125;
  __int16 v126;
  const char *v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  void *v133;

  v7 = a3;
  v8 = a4;
  if (a1)
  {
    if (objc_msgSend(v7, "count"))
    {
      v104 = v7;
      v9 = v7;
      v105 = v8;
      v106 = v8;
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v12 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NFApplet aidListForPrinting:](NFApplet, "aidListForPrinting:", v9));
        v18 = 45;
        if (isMetaClass)
          v18 = 43;
        v12(6, "%c[%{public}s %{public}s]:%i enable=%d applets=%{public}@", v18, ClassName, Name, 893, a2, v17);

      }
      v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v20 = NFSharedLogGetLogger(v19);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v22 = object_getClass((id)a1);
        if (class_isMetaClass(v22))
          v23 = 43;
        else
          v23 = 45;
        v24 = object_getClassName((id)a1);
        v25 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NFApplet aidListForPrinting:](NFApplet, "aidListForPrinting:", v9));
        *(_DWORD *)buf = 67110402;
        v123 = v23;
        v124 = 2082;
        v125 = v24;
        v126 = 2082;
        v127 = v25;
        v128 = 1024;
        v129 = 893;
        v130 = 1024;
        v131 = a2;
        v132 = 2114;
        v133 = v26;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i enable=%d applets=%{public}@", buf, 0x32u);

      }
      v27 = objc_opt_new(NSMutableData);
      v108 = 0u;
      v109 = 0u;
      v110 = 0u;
      v111 = 0u;
      v28 = v9;
      v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v108, buf, 16);
      if (v29)
      {
        v30 = v29;
        v31 = *(_QWORD *)v109;
        do
        {
          for (i = 0; i != v30; i = (char *)i + 1)
          {
            if (*(_QWORD *)v109 != v31)
              objc_enumerationMutation(v28);
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v108 + 1) + 8 * (_QWORD)i), "identifierAsData"));
            v34 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 79, v33));

            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "asData"));
            -[NSMutableData appendData:](v27, "appendData:", v35);

          }
          v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v108, buf, 16);
        }
        while (v30);
      }

      v36 = v106;
      if (v106)
        -[NSMutableData appendData:](v27, "appendData:", v106);
      v107 = 0;
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 244, 6, a2, v27, &v107));
      v38 = v107;
      if (v37)
      {
        if (objc_msgSend(v37, "status") == 27013)
        {
          v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v40 = NFLogGetLogger(v39);
          if (v40)
          {
            v41 = (void (*)(uint64_t, const char *, ...))v40;
            v42 = object_getClass((id)a1);
            v43 = class_isMetaClass(v42);
            v44 = object_getClassName((id)a1);
            v45 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
            v102 = objc_msgSend(v37, "status");
            v98 = v45;
            v36 = v106;
            v46 = 45;
            if (v43)
              v46 = 43;
            v41(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v46, v44, v98, 919, v102);
          }
          v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v48 = NFSharedLogGetLogger(v47);
          v49 = objc_claimAutoreleasedReturnValue(v48);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            v50 = object_getClass((id)a1);
            if (class_isMetaClass(v50))
              v51 = 43;
            else
              v51 = 45;
            v52 = object_getClassName((id)a1);
            v53 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
            v54 = objc_msgSend(v37, "status");
            *(_DWORD *)v112 = 67110146;
            v113 = v51;
            v114 = 2082;
            v115 = v52;
            v116 = 2082;
            v117 = v53;
            v118 = 1024;
            v119 = 919;
            v120 = 1024;
            v121 = v54;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v112, 0x28u);
          }

          a1 = 8;
        }
        else if (objc_msgSend(v37, "status") == 36864)
        {
          a1 = 0;
        }
        else
        {
          v81 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v82 = NFLogGetLogger(v81);
          if (v82)
          {
            v83 = (void (*)(uint64_t, const char *, ...))v82;
            v84 = object_getClass((id)a1);
            v85 = class_isMetaClass(v84);
            v86 = object_getClassName((id)a1);
            v87 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
            v103 = objc_msgSend(v37, "status");
            v101 = v87;
            v36 = v106;
            v88 = 45;
            if (v85)
              v88 = 43;
            v83(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v88, v86, v101, 924, v103);
          }
          v89 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v90 = NFSharedLogGetLogger(v89);
          v91 = objc_claimAutoreleasedReturnValue(v90);
          if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
          {
            v92 = object_getClass((id)a1);
            if (class_isMetaClass(v92))
              v93 = 43;
            else
              v93 = 45;
            v94 = object_getClassName((id)a1);
            v95 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
            v96 = objc_msgSend(v37, "status");
            *(_DWORD *)v112 = 67110146;
            v113 = v93;
            v114 = 2082;
            v115 = v94;
            v116 = 2082;
            v117 = v95;
            v118 = 1024;
            v119 = 924;
            v120 = 1024;
            v121 = v96;
            _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v112, 0x28u);
          }

          a1 = 6;
        }
      }
      else
      {
        v67 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v68 = NFLogGetLogger(v67);
        if (v68)
        {
          v69 = (void (*)(uint64_t, const char *, ...))v68;
          v70 = object_getClass((id)a1);
          v71 = class_isMetaClass(v70);
          v72 = object_getClassName((id)a1);
          v100 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
          v73 = 45;
          if (v71)
            v73 = 43;
          v69(3, "%c[%{public}s %{public}s]:%i Command failed", v73, v72, v100, 915);
        }
        v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v75 = NFSharedLogGetLogger(v74);
        v76 = objc_claimAutoreleasedReturnValue(v75);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          v77 = object_getClass((id)a1);
          if (class_isMetaClass(v77))
            v78 = 43;
          else
            v78 = 45;
          v79 = object_getClassName((id)a1);
          v80 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
          *(_DWORD *)v112 = 67109890;
          v113 = v78;
          v114 = 2082;
          v115 = v79;
          v116 = 2082;
          v117 = v80;
          v118 = 1024;
          v119 = 915;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", v112, 0x22u);
        }

        if (objc_msgSend(v38, "code"))
          a1 = (uint64_t)objc_msgSend(v38, "code");
        else
          a1 = 16;
      }
      v7 = v104;

      v8 = v105;
    }
    else
    {
      v55 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v56 = NFLogGetLogger(v55);
      if (v56)
      {
        v57 = (void (*)(uint64_t, const char *, ...))v56;
        v58 = object_getClass((id)a1);
        v59 = class_isMetaClass(v58);
        v60 = object_getClassName((id)a1);
        v99 = sel_getName("crs_enableTransientAuth:applets:cryptogram:");
        v61 = 45;
        if (v59)
          v61 = 43;
        v57(3, "%c[%{public}s %{public}s]:%i Empty AID array", v61, v60, v99, 934);
      }
      v62 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v63 = NFSharedLogGetLogger(v62);
      v64 = objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        v65 = object_getClass((id)a1);
        if (class_isMetaClass(v65))
          v66 = 43;
        else
          v66 = 45;
        *(_DWORD *)buf = 67109890;
        v123 = v66;
        v124 = 2082;
        v125 = object_getClassName((id)a1);
        v126 = 2082;
        v127 = sel_getName("crs_enableTransientAuth:applets:cryptogram:");
        v128 = 1024;
        v129 = 934;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Empty AID array", buf, 0x22u);
      }

      a1 = 10;
    }
  }

  return a1;
}

id sub_1000BA820(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  _BOOL4 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  void (*v39)(uint64_t, const char *, ...);
  objc_class *v40;
  _BOOL4 v41;
  const char *v42;
  const char *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  NSObject *v48;
  objc_class *v49;
  int v50;
  const char *v51;
  const char *v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  void *v57;
  void **v58;
  NSErrorUserInfoKey *v59;
  objc_class *v60;
  _BOOL4 v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  NSObject *v66;
  objc_class *v67;
  int v68;
  const char *v69;
  const char *v70;
  id v71;
  void *v72;
  uint64_t v73;
  void (*v74)(uint64_t, const char *, ...);
  objc_class *v75;
  _BOOL4 v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  NSObject *v81;
  objc_class *v82;
  int v83;
  const char *v84;
  const char *v85;
  void *v86;
  uint64_t v87;
  void (*v88)(uint64_t, const char *, ...);
  objc_class *v89;
  _BOOL4 v90;
  const char *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  NSObject *v96;
  objc_class *v97;
  int v98;
  const char *v99;
  const char *v100;
  unsigned int v101;
  void *v102;
  const char *v104;
  const char *Name;
  const char *v106;
  const char *v107;
  const char *v108;
  id v109;
  uint64_t v110;
  id v111;
  NSErrorUserInfoKey v112;
  void *v113;
  NSErrorUserInfoKey v114;
  void *v115;
  uint8_t buf[4];
  int v117;
  __int16 v118;
  const char *v119;
  __int16 v120;
  const char *v121;
  __int16 v122;
  int v123;
  __int16 v124;
  id v125;
  NSErrorUserInfoKey v126;
  void *v127;

  v5 = a2;
  if (!a1)
  {
    v32 = 0;
    goto LABEL_70;
  }
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v8 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
    v12 = 45;
    if (isMetaClass)
      v12 = 43;
    v8(6, "%c[%{public}s %{public}s]:%i ", v12, ClassName, Name, 943);
  }
  v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v14 = NFSharedLogGetLogger(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = object_getClass(a1);
    if (class_isMetaClass(v16))
      v17 = 43;
    else
      v17 = 45;
    *(_DWORD *)buf = 67109890;
    v117 = v17;
    v118 = 2082;
    v119 = object_getClassName(a1);
    v120 = 2082;
    v121 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
    v122 = 1024;
    v123 = 943;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v19 = NFLogGetLogger(v18);
  v20 = (void (*)(uint64_t, const char *, ...))v19;
  if (v5 && a3)
  {
    if (v19)
    {
      v21 = object_getClass(a1);
      v22 = class_isMetaClass(v21);
      v104 = object_getClassName(a1);
      v106 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
      v23 = 45;
      if (v22)
        v23 = 43;
      v20(6, "%c[%{public}s %{public}s]:%i Data to sign : %{public}@", v23, v104, v106, 953, v5);
    }
    v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v25 = NFSharedLogGetLogger(v24);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = object_getClass(a1);
      if (class_isMetaClass(v27))
        v28 = 43;
      else
        v28 = 45;
      v29 = object_getClassName(a1);
      v30 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
      *(_DWORD *)buf = 67110146;
      v117 = v28;
      v118 = 2082;
      v119 = v29;
      v120 = 2082;
      v121 = v30;
      v122 = 1024;
      v123 = 953;
      v124 = 2114;
      v125 = v5;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Data to sign : %{public}@", buf, 0x2Cu);
    }

    *a3 = 0;
    v111 = 0;
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 248, 0, 0, v5, &v111));
    v32 = v111;
    if (v32 || !v31)
    {
      v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v73 = NFLogGetLogger(v72);
      if (v73)
      {
        v74 = (void (*)(uint64_t, const char *, ...))v73;
        v75 = object_getClass(a1);
        v76 = class_isMetaClass(v75);
        v77 = object_getClassName(a1);
        v108 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
        v78 = 45;
        if (v76)
          v78 = 43;
        v74(3, "%c[%{public}s %{public}s]:%i Command failed", v78, v77, v108, 963);
      }
      v79 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v80 = NFSharedLogGetLogger(v79);
      v81 = objc_claimAutoreleasedReturnValue(v80);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        v82 = object_getClass(a1);
        if (class_isMetaClass(v82))
          v83 = 43;
        else
          v83 = 45;
        v84 = object_getClassName(a1);
        v85 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
        *(_DWORD *)buf = 67109890;
        v117 = v83;
        v118 = 2082;
        v119 = v84;
        v120 = 2082;
        v121 = v85;
        v122 = 1024;
        v123 = 963;
        _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
      }

      goto LABEL_69;
    }
    if (objc_msgSend(v31, "status") == 36864)
    {
      v33 = objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "response"));
      if (v33)
      {
        v34 = (void *)v33;
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "response"));
        v36 = objc_msgSend(v35, "length");

        if ((unint64_t)v36 > 0x50)
        {
          v32 = 0;
          *a3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "response"));
          goto LABEL_69;
        }
      }
      v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v38 = NFLogGetLogger(v37);
      if (v38)
      {
        v39 = (void (*)(uint64_t, const char *, ...))v38;
        v40 = object_getClass(a1);
        v41 = class_isMetaClass(v40);
        v42 = object_getClassName(a1);
        v43 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "response"));
        v109 = objc_msgSend(v44, "length");
        v45 = 45;
        if (v41)
          v45 = 43;
        v39(3, "%c[%{public}s %{public}s]:%i Invalid response length : %lu", v45, v42, v43, 972, v109);

      }
      v46 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v47 = NFSharedLogGetLogger(v46);
      v48 = objc_claimAutoreleasedReturnValue(v47);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        v49 = object_getClass(a1);
        if (class_isMetaClass(v49))
          v50 = 43;
        else
          v50 = 45;
        v51 = object_getClassName(a1);
        v52 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "response"));
        v54 = objc_msgSend(v53, "length");
        *(_DWORD *)buf = 67110146;
        v117 = v50;
        v118 = 2082;
        v119 = v51;
        v120 = 2082;
        v121 = v52;
        v122 = 1024;
        v123 = 972;
        v124 = 2048;
        v125 = v54;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid response length : %lu", buf, 0x2Cu);

      }
      v55 = objc_alloc((Class)NSError);
      v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v112 = NSLocalizedDescriptionKey;
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v113 = v57;
      v58 = &v113;
      v59 = &v112;
    }
    else
    {
      v86 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v87 = NFLogGetLogger(v86);
      if (v87)
      {
        v88 = (void (*)(uint64_t, const char *, ...))v87;
        v89 = object_getClass(a1);
        v90 = class_isMetaClass(v89);
        v91 = object_getClassName(a1);
        v92 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
        v110 = objc_msgSend(v31, "status");
        v93 = 45;
        if (v90)
          v93 = 43;
        v88(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v93, v91, v92, 967, v110);
      }
      v94 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v95 = NFSharedLogGetLogger(v94);
      v96 = objc_claimAutoreleasedReturnValue(v95);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        v97 = object_getClass(a1);
        if (class_isMetaClass(v97))
          v98 = 43;
        else
          v98 = 45;
        v99 = object_getClassName(a1);
        v100 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
        v101 = objc_msgSend(v31, "status");
        *(_DWORD *)buf = 67110146;
        v117 = v98;
        v118 = 2082;
        v119 = v99;
        v120 = 2082;
        v121 = v100;
        v122 = 1024;
        v123 = 967;
        v124 = 1024;
        LODWORD(v125) = v101;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
      }

      v55 = objc_alloc((Class)NSError);
      v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v114 = NSLocalizedDescriptionKey;
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v115 = v57;
      v58 = &v115;
      v59 = &v114;
    }
    v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v58, v59, 1));
    v32 = objc_msgSend(v55, "initWithDomain:code:userInfo:", v56, 16, v102);

  }
  else
  {
    if (v19)
    {
      v60 = object_getClass(a1);
      v61 = class_isMetaClass(v60);
      v62 = object_getClassName(a1);
      v107 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
      v63 = 45;
      if (v61)
        v63 = 43;
      v20(3, "%c[%{public}s %{public}s]:%i Invalid parameters", v63, v62, v107, 949);
    }
    v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v65 = NFSharedLogGetLogger(v64);
    v66 = objc_claimAutoreleasedReturnValue(v65);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      v67 = object_getClass(a1);
      if (class_isMetaClass(v67))
        v68 = 43;
      else
        v68 = 45;
      v69 = object_getClassName(a1);
      v70 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
      *(_DWORD *)buf = 67109890;
      v117 = v68;
      v118 = 2082;
      v119 = v69;
      v120 = 2082;
      v121 = v70;
      v122 = 1024;
      v123 = 949;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameters", buf, 0x22u);
    }

    v71 = objc_alloc((Class)NSError);
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v126 = NSLocalizedDescriptionKey;
    v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v127 = v56;
    v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v127, &v126, 1));
    v32 = objc_msgSend(v71, "initWithDomain:code:userInfo:", v31, 10, v57);
  }

LABEL_69:
LABEL_70:

  return v32;
}

void sub_1000C10FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C23F8(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  NSErrorUserInfoKey v26;
  void *v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  void *v37;

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, ClassName, Name, 871, v9);

    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 48));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v29 = v15;
      v30 = 2082;
      v31 = v16;
      v32 = 2082;
      v33 = v17;
      v34 = 1024;
      v35 = 871;
      v36 = 2114;
      v37 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v19 = *(_QWORD *)(a1 + 40);
    if (v19)
    {
      v20 = objc_alloc((Class)NSError);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v26 = NSLocalizedDescriptionKey;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v27 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
      v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v19 + 16))(v19, 0, 0, v24);

    }
  }
  else
  {
    v25 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "preloadApplets"));
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
}

void sub_1000C27E8(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  _BOOL4 v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  void *v35;
  uint64_t v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  NSErrorUserInfoKey v42;
  void *v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  void *v53;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v10, ClassName, Name, 882, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 56));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    v45 = v15;
    v46 = 2082;
    v47 = v16;
    v48 = 2082;
    v49 = v17;
    v50 = 1024;
    v51 = 882;
    v52 = 2114;
    v53 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    if ((objc_msgSend(*(id *)(a1 + 40), "isEqualToApplet:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 168)) & 1) != 0)
      v38 = 0;
    else
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "setActiveApplet:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(*(id *)(a1 + 32), "startDefaultMode");
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    goto LABEL_24;
  }
  v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v20 = NFLogGetLogger(v19);
  if (v20)
  {
    v21 = (void (*)(uint64_t, const char *, ...))v20;
    v22 = object_getClass(*(id *)(a1 + 32));
    v23 = class_isMetaClass(v22);
    v24 = object_getClassName(*(id *)(a1 + 32));
    v25 = sel_getName(*(SEL *)(a1 + 56));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v27 = 45;
    if (v23)
      v27 = 43;
    v21(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v27, v24, v25, 885, v26);

  }
  v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v29 = NFSharedLogGetLogger(v28);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    v31 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v31))
      v32 = 43;
    else
      v32 = 45;
    v33 = object_getClassName(*(id *)(a1 + 32));
    v34 = sel_getName(*(SEL *)(a1 + 56));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v45 = v32;
    v46 = 2082;
    v47 = v33;
    v48 = 2082;
    v49 = v34;
    v50 = 1024;
    v51 = 885;
    v52 = 2114;
    v53 = v35;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v36 = *(_QWORD *)(a1 + 48);
  if (v36)
  {
    v37 = objc_alloc((Class)NSError);
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v42 = NSLocalizedDescriptionKey;
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v43 = v39;
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
    v41 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 54, v40);
    (*(void (**)(uint64_t, _QWORD, id))(v36 + 16))(v36, 0, v41);

LABEL_24:
  }
}

void sub_1000C2CE0(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  _BOOL4 v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  void *v35;
  uint64_t v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  void (*v44)(uint64_t, const char *, ...);
  objc_class *v45;
  _BOOL4 v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  NSObject *v51;
  objc_class *v52;
  int v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  const char *v62;
  NSErrorUserInfoKey v63;
  void *v64;
  NSErrorUserInfoKey v65;
  void *v66;
  uint8_t buf[4];
  int v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  void *v76;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v10, ClassName, Name, 899, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    v68 = v15;
    v69 = 2082;
    v70 = v16;
    v71 = 2082;
    v72 = v17;
    v73 = 1024;
    v74 = 899;
    v75 = 2114;
    v76 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v20 = NFLogGetLogger(v19);
    if (v20)
    {
      v21 = (void (*)(uint64_t, const char *, ...))v20;
      v22 = object_getClass(*(id *)(a1 + 32));
      v23 = class_isMetaClass(v22);
      v24 = object_getClassName(*(id *)(a1 + 32));
      v25 = sel_getName(*(SEL *)(a1 + 48));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v27 = 45;
      if (v23)
        v27 = 43;
      v21(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v27, v24, v25, 901, v26);

    }
    v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v29 = NFSharedLogGetLogger(v28);
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v31))
        v32 = 43;
      else
        v32 = 45;
      v33 = object_getClassName(*(id *)(a1 + 32));
      v34 = sel_getName(*(SEL *)(a1 + 48));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v68 = v32;
      v69 = 2082;
      v70 = v33;
      v71 = 2082;
      v72 = v34;
      v73 = 1024;
      v74 = 901;
      v75 = 2114;
      v76 = v35;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v36 = *(_QWORD *)(a1 + 40);
    if (v36)
    {
      v37 = objc_alloc((Class)NSError);
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v65 = NSLocalizedDescriptionKey;
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v66 = v39;
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v66, &v65, 1));
      v41 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 54, v40);
      (*(void (**)(uint64_t, id))(v36 + 16))(v36, v41);

    }
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "_configureEmulationType:", 2) & 1) != 0)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v43 = NFLogGetLogger(v42);
    if (v43)
    {
      v44 = (void (*)(uint64_t, const char *, ...))v43;
      v45 = object_getClass(*(id *)(a1 + 32));
      v46 = class_isMetaClass(v45);
      v47 = object_getClassName(*(id *)(a1 + 32));
      v62 = sel_getName(*(SEL *)(a1 + 48));
      v48 = 45;
      if (v46)
        v48 = 43;
      v44(3, "%c[%{public}s %{public}s]:%i Failed to start card emulation", v48, v47, v62, 905);
    }
    v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v50 = NFSharedLogGetLogger(v49);
    v51 = objc_claimAutoreleasedReturnValue(v50);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v52 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v52))
        v53 = 43;
      else
        v53 = 45;
      v54 = object_getClassName(*(id *)(a1 + 32));
      v55 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v68 = v53;
      v69 = 2082;
      v70 = v54;
      v71 = 2082;
      v72 = v55;
      v73 = 1024;
      v74 = 905;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to start card emulation", buf, 0x22u);
    }

    v56 = *(_QWORD *)(a1 + 40);
    v57 = objc_alloc((Class)NSError);
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v63 = NSLocalizedDescriptionKey;
    v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v64 = v59;
    v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v64, &v63, 1));
    v61 = objc_msgSend(v57, "initWithDomain:code:userInfo:", v58, 15, v60);
    (*(void (**)(uint64_t, id))(v56 + 16))(v56, v61);

    objc_msgSend(*(id *)(a1 + 32), "startDefaultMode");
  }
}

void sub_1000C3374(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  _BOOL4 v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  void *v35;
  uint64_t v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  NSErrorUserInfoKey v42;
  void *v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  void *v53;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v10, ClassName, Name, 919, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
    *(_DWORD *)buf = 67110146;
    v45 = v15;
    v46 = 2082;
    v47 = v16;
    v48 = 2082;
    v49 = v17;
    v50 = 1024;
    v51 = 919;
    v52 = 2114;
    v53 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

  }
  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v20 = NFLogGetLogger(v19);
    if (v20)
    {
      v21 = (void (*)(uint64_t, const char *, ...))v20;
      v22 = object_getClass(*(id *)(a1 + 32));
      v23 = class_isMetaClass(v22);
      v24 = object_getClassName(*(id *)(a1 + 32));
      v25 = sel_getName(*(SEL *)(a1 + 48));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v27 = 45;
      if (v23)
        v27 = 43;
      v21(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v27, v24, v25, 921, v26);

    }
    v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v29 = NFSharedLogGetLogger(v28);
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v31))
        v32 = 43;
      else
        v32 = 45;
      v33 = object_getClassName(*(id *)(a1 + 32));
      v34 = sel_getName(*(SEL *)(a1 + 48));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v45 = v32;
      v46 = 2082;
      v47 = v33;
      v48 = 2082;
      v49 = v34;
      v50 = 1024;
      v51 = 921;
      v52 = 2114;
      v53 = v35;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v36 = *(_QWORD *)(a1 + 40);
    if (v36)
    {
      v37 = objc_alloc((Class)NSError);
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v42 = NSLocalizedDescriptionKey;
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v43 = v39;
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
      v41 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 54, v40);
      (*(void (**)(uint64_t, id))(v36 + 16))(v36, v41);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "startDefaultMode");
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

void sub_1000C653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C6574(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000C6584(uint64_t a1)
{

}

void sub_1000C658C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *specific;
  uint64_t Logger;
  void (*v23)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v25;
  const char *ClassName;
  const char *Name;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  const char *v35;
  const char *v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void (*v43)(uint64_t, const char *, ...);
  objc_class *v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  objc_class *v53;
  int v54;
  const char *v55;
  const char *v56;
  void *v57;
  id v58;
  uint64_t v59;
  NSObject *v60;
  void *v61;
  uint64_t v62;
  void (*v63)(uint64_t, const char *, ...);
  objc_class *v64;
  uint64_t v65;
  const char *v66;
  const char *v67;
  void *v68;
  id v69;
  void *v70;
  uint64_t v71;
  NSObject *v72;
  objc_class *v73;
  int v74;
  const char *v75;
  const char *v76;
  void *v77;
  id v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void (*v82)(uint64_t, const char *, ...);
  objc_class *v83;
  uint64_t v84;
  const char *v85;
  const char *v86;
  void *v87;
  id v88;
  void *v89;
  uint64_t v90;
  NSObject *v91;
  objc_class *v92;
  int v93;
  const char *v94;
  const char *v95;
  void *v96;
  id v97;
  uint64_t v98;
  NSObject *v99;
  id v100;
  id obj;
  uint64_t v102;
  id v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint8_t buf[4];
  int v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  int v115;
  __int16 v116;
  id v117;
  __int16 v118;
  uint64_t v119;
  _BYTE v120[128];

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  }
  else
  {
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v104, v120, 16);
    v7 = 0;
    if (v103)
    {
      v102 = *(_QWORD *)v105;
      obj = v5;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v105 != v102)
            objc_enumerationMutation(obj);
          v9 = *(_QWORD **)(*((_QWORD *)&v104 + 1) + 8 * (_QWORD)v8);
          if (v9)
            v10 = (void *)v9[3];
          else
            v10 = 0;
          v11 = v10;

          if (v11)
          {
            v13 = NFSharedSignpostLog(v12);
            v14 = objc_claimAutoreleasedReturnValue(v13);
            if (os_signpost_enabled(v14))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "getKeyInSlot", "", buf, 2u);
            }

            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secureElementWrapper"));
            if (v9)
              v16 = (void *)v9[4];
            else
              v16 = 0;
            v17 = v16;
            v18 = sub_1000AEAC0(v15, v17);
            v19 = objc_claimAutoreleasedReturnValue(v18);

            if (v19)
            {
              specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              Logger = NFLogGetLogger(specific);
              if (Logger)
              {
                v23 = (void (*)(uint64_t, const char *, ...))Logger;
                Class = object_getClass(*(id *)(a1 + 32));
                if (class_isMetaClass(Class))
                  v25 = 43;
                else
                  v25 = 45;
                ClassName = object_getClassName(*(id *)(a1 + 32));
                Name = sel_getName(*(SEL *)(a1 + 56));
                if (v9)
                  v28 = (void *)v9[1];
                else
                  v28 = 0;
                v29 = v28;
                v23(4, "%c[%{public}s %{public}s]:%i Could not getKey '%{public}@' from SE, delete the key from the database : %{public}@", v25, ClassName, Name, 260, v29, v19);

              }
              v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v31 = NFSharedLogGetLogger(v30);
              v32 = objc_claimAutoreleasedReturnValue(v31);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
              {
                v33 = object_getClass(*(id *)(a1 + 32));
                if (class_isMetaClass(v33))
                  v34 = 43;
                else
                  v34 = 45;
                v35 = object_getClassName(*(id *)(a1 + 32));
                v36 = sel_getName(*(SEL *)(a1 + 56));
                if (v9)
                  v37 = (void *)v9[1];
                else
                  v37 = 0;
                v38 = v37;
                *(_DWORD *)buf = 67110402;
                v109 = v34;
                v110 = 2082;
                v111 = v35;
                v112 = 2082;
                v113 = v36;
                v114 = 1024;
                v115 = 260;
                v116 = 2114;
                v117 = v38;
                v118 = 2114;
                v119 = v19;
                _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not getKey '%{public}@' from SE, delete the key from the database : %{public}@", buf, 0x36u);

              }
              v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deleteDBKey:", v9));

              if (v39)
              {
                v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v42 = NFLogGetLogger(v41);
                if (v42)
                {
                  v43 = (void (*)(uint64_t, const char *, ...))v42;
                  v44 = object_getClass(*(id *)(a1 + 32));
                  if (class_isMetaClass(v44))
                    v45 = 43;
                  else
                    v45 = 45;
                  v46 = object_getClassName(*(id *)(a1 + 32));
                  v47 = sel_getName(*(SEL *)(a1 + 56));
                  if (v9)
                    v48 = (void *)v9[1];
                  else
                    v48 = 0;
                  v49 = v48;
                  v43(3, "%c[%{public}s %{public}s]:%i Could not delete incomplete key with identifier %{public}@ from database", v45, v46, v47, 263, v49);

                }
                v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v51 = NFSharedLogGetLogger(v50);
                v52 = objc_claimAutoreleasedReturnValue(v51);
                if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
                {
                  v53 = object_getClass(*(id *)(a1 + 32));
                  if (class_isMetaClass(v53))
                    v54 = 43;
                  else
                    v54 = 45;
                  v55 = object_getClassName(*(id *)(a1 + 32));
                  v56 = sel_getName(*(SEL *)(a1 + 56));
                  if (v9)
                    v57 = (void *)v9[1];
                  else
                    v57 = 0;
                  v58 = v57;
                  *(_DWORD *)buf = 67110146;
                  v109 = v54;
                  v110 = 2082;
                  v111 = v55;
                  v112 = 2082;
                  v113 = v56;
                  v114 = 1024;
                  v115 = 263;
                  v116 = 2114;
                  v117 = v58;
                  _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not delete incomplete key with identifier %{public}@ from database", buf, 0x2Cu);

                }
              }
              v59 = NFSharedSignpostLog(v40);
              v60 = objc_claimAutoreleasedReturnValue(v59);
              if (os_signpost_enabled(v60))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v60, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "getKeyInSlot", "failed", buf, 2u);
              }

              v7 = (void *)v19;
            }
            else
            {
              v98 = NFSharedSignpostLog(v20);
              v99 = objc_claimAutoreleasedReturnValue(v98);
              if (os_signpost_enabled(v99))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v99, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "getKeyInSlot", "", buf, 2u);
              }

              objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObject:", v9);
              v7 = 0;
            }
          }
          else
          {
            v61 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v62 = NFLogGetLogger(v61);
            if (v62)
            {
              v63 = (void (*)(uint64_t, const char *, ...))v62;
              v64 = object_getClass(*(id *)(a1 + 32));
              if (class_isMetaClass(v64))
                v65 = 43;
              else
                v65 = 45;
              v66 = object_getClassName(*(id *)(a1 + 32));
              v67 = sel_getName(*(SEL *)(a1 + 56));
              if (v9)
                v68 = (void *)v9[1];
              else
                v68 = 0;
              v69 = v68;
              v63(4, "%c[%{public}s %{public}s]:%i Key attestion of %{public}@ is nil, key create/delete may have crashed, do not list key and try to delete the key again ... ", v65, v66, v67, 247, v69);

            }
            v70 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v71 = NFSharedLogGetLogger(v70);
            v72 = objc_claimAutoreleasedReturnValue(v71);
            if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
            {
              v73 = object_getClass(*(id *)(a1 + 32));
              if (class_isMetaClass(v73))
                v74 = 43;
              else
                v74 = 45;
              v75 = object_getClassName(*(id *)(a1 + 32));
              v76 = sel_getName(*(SEL *)(a1 + 56));
              if (v9)
                v77 = (void *)v9[1];
              else
                v77 = 0;
              v78 = v77;
              *(_DWORD *)buf = 67110146;
              v109 = v74;
              v110 = 2082;
              v111 = v75;
              v112 = 2082;
              v113 = v76;
              v114 = 1024;
              v115 = 247;
              v116 = 2114;
              v117 = v78;
              _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Key attestion of %{public}@ is nil, key create/delete may have crashed, do not list key and try to delete the key again ... ", buf, 0x2Cu);

            }
            v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deleteDBKey:", v9));

            if (v79)
            {
              v80 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v81 = NFLogGetLogger(v80);
              if (v81)
              {
                v82 = (void (*)(uint64_t, const char *, ...))v81;
                v83 = object_getClass(*(id *)(a1 + 32));
                if (class_isMetaClass(v83))
                  v84 = 43;
                else
                  v84 = 45;
                v85 = object_getClassName(*(id *)(a1 + 32));
                v86 = sel_getName(*(SEL *)(a1 + 56));
                if (v9)
                  v87 = (void *)v9[1];
                else
                  v87 = 0;
                v88 = v87;
                v82(3, "%c[%{public}s %{public}s]:%i Could not delete incomplete key with identifier %{public}@ from database", v84, v85, v86, 250, v88);

              }
              v89 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v90 = NFSharedLogGetLogger(v89);
              v91 = objc_claimAutoreleasedReturnValue(v90);
              if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
              {
                v92 = object_getClass(*(id *)(a1 + 32));
                if (class_isMetaClass(v92))
                  v93 = 43;
                else
                  v93 = 45;
                v94 = object_getClassName(*(id *)(a1 + 32));
                v95 = sel_getName(*(SEL *)(a1 + 56));
                if (v9)
                  v96 = (void *)v9[1];
                else
                  v96 = 0;
                v97 = v96;
                *(_DWORD *)buf = 67110146;
                v109 = v93;
                v110 = 2082;
                v111 = v94;
                v112 = 2082;
                v113 = v95;
                v114 = 1024;
                v115 = 250;
                v116 = 2114;
                v117 = v97;
                _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not delete incomplete key with identifier %{public}@ from database", buf, 0x2Cu);

              }
            }
          }
          v8 = (char *)v8 + 1;
        }
        while (v103 != v8);
        v5 = obj;
        v100 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v104, v120, 16);
        v103 = v100;
      }
      while (v100);
    }

    v6 = 0;
  }

}

void sub_1000C6F28(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *v5;
  _BOOL4 v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  NSMutableArray *v18;
  uint64_t v19;
  id v20;
  NSMutableArray *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *i;
  id v31;
  uint64_t v32;
  void *v33;
  void (*v34)(void);
  void *v35;
  uint64_t v36;
  void (*v37)(uint64_t, const char *, ...);
  objc_class *v38;
  _BOOL4 v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  objc_class *v45;
  int v46;
  const char *v47;
  const char *v48;
  id v49;
  uint64_t v50;
  void *specific;
  uint64_t Logger;
  void (*v53)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  NSObject *v60;
  objc_class *v61;
  int v62;
  const char *v63;
  const char *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void (*v69)(uint64_t, const char *, ...);
  objc_class *v70;
  _BOOL4 v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  NSObject *v75;
  objc_class *v76;
  int v77;
  const char *v78;
  const char *v79;
  const char *v80;
  const char *v81;
  const char *Name;
  const char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  id v88;
  _BYTE v89[128];
  NSErrorUserInfoKey v90;
  void *v91;
  uint8_t buf[4];
  int v93;
  __int16 v94;
  const char *v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  int v99;
  __int16 v100;
  NSMutableArray *v101;

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keys"));

    if (v25)
      goto LABEL_18;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v53 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v57 = 45;
      if (isMetaClass)
        v57 = 43;
      v53(6, "%c[%{public}s %{public}s]:%i Regenerating cached keys", v57, ClassName, Name, 295);
    }
    v58 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v59 = NFSharedLogGetLogger(v58);
    v60 = objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      v61 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v61))
        v62 = 43;
      else
        v62 = 45;
      v63 = object_getClassName(*(id *)(a1 + 32));
      v64 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v93 = v62;
      v94 = 2082;
      v95 = v63;
      v96 = 2082;
      v97 = v64;
      v98 = 1024;
      v99 = 295;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Regenerating cached keys", buf, 0x22u);
    }

    v65 = *(void **)(a1 + 32);
    v88 = 0;
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "getListOfKeysWithError:", &v88));
    v21 = (NSMutableArray *)v88;
    objc_msgSend(*(id *)(a1 + 32), "setKeys:", v66);

    if (!v21)
    {
LABEL_18:
      v21 = objc_opt_new(NSMutableArray);
      v84 = 0u;
      v85 = 0u;
      v86 = 0u;
      v87 = 0u;
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keys"));
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v84, v89, 16);
      if (v27)
      {
        v28 = v27;
        v29 = *(_QWORD *)v85;
        while (2)
        {
          for (i = 0; i != v28; i = (char *)i + 1)
          {
            if (*(_QWORD *)v85 != v29)
              objc_enumerationMutation(v26);
            v31 = sub_1000325BC(*(_QWORD *)(*((_QWORD *)&v84 + 1) + 8 * (_QWORD)i));
            v32 = objc_claimAutoreleasedReturnValue(v31);
            if (!v32)
            {
              v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v36 = NFLogGetLogger(v35);
              if (v36)
              {
                v37 = (void (*)(uint64_t, const char *, ...))v36;
                v38 = object_getClass(*(id *)(a1 + 32));
                v39 = class_isMetaClass(v38);
                v40 = object_getClassName(*(id *)(a1 + 32));
                v81 = sel_getName(*(SEL *)(a1 + 48));
                v41 = 45;
                if (v39)
                  v41 = 43;
                v37(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustKey Object", v41, v40, v81, 311);
              }
              v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v43 = NFSharedLogGetLogger(v42);
              v44 = objc_claimAutoreleasedReturnValue(v43);
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                v45 = object_getClass(*(id *)(a1 + 32));
                if (class_isMetaClass(v45))
                  v46 = 43;
                else
                  v46 = 45;
                v47 = object_getClassName(*(id *)(a1 + 32));
                v48 = sel_getName(*(SEL *)(a1 + 48));
                *(_DWORD *)buf = 67109890;
                v93 = v46;
                v94 = 2082;
                v95 = v47;
                v96 = 2082;
                v97 = v48;
                v98 = 1024;
                v99 = 311;
                _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not create NFTrustKey Object", buf, 0x22u);
              }

              v49 = sub_100130704(CFSTR("Could not create NFTrustKey Object"));
              v50 = objc_claimAutoreleasedReturnValue(v49);

              (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
              v21 = (NSMutableArray *)v50;
              goto LABEL_15;
            }
            v33 = (void *)v32;
            -[NSMutableArray addObject:](v21, "addObject:", v32);

          }
          v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v84, v89, 16);
          if (v28)
            continue;
          break;
        }
      }

      v34 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    }
    else
    {
      v67 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v68 = NFLogGetLogger(v67);
      if (v68)
      {
        v69 = (void (*)(uint64_t, const char *, ...))v68;
        v70 = object_getClass(*(id *)(a1 + 32));
        v71 = class_isMetaClass(v70);
        v80 = object_getClassName(*(id *)(a1 + 32));
        v83 = sel_getName(*(SEL *)(a1 + 48));
        v72 = 45;
        if (v71)
          v72 = 43;
        v69(3, "%c[%{public}s %{public}s]:%i Failed to getListOfKeys: %{public}@", v72, v80, v83, 298, v21);
      }
      v73 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v74 = NFSharedLogGetLogger(v73);
      v75 = objc_claimAutoreleasedReturnValue(v74);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        v76 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v76))
          v77 = 43;
        else
          v77 = 45;
        v78 = object_getClassName(*(id *)(a1 + 32));
        v79 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67110146;
        v93 = v77;
        v94 = 2082;
        v95 = v78;
        v96 = 2082;
        v97 = v79;
        v98 = 1024;
        v99 = 298;
        v100 = 2114;
        v101 = v21;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to getListOfKeys: %{public}@", buf, 0x2Cu);
      }

      v34 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    }
    v34();
    goto LABEL_15;
  }
  v2 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v3 = NFLogGetLogger(v2);
  if (v3)
  {
    v4 = (void (*)(uint64_t, const char *, ...))v3;
    v5 = object_getClass(*(id *)(a1 + 32));
    v6 = class_isMetaClass(v5);
    v7 = object_getClassName(*(id *)(a1 + 32));
    v8 = sel_getName(*(SEL *)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (v6)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, v7, v8, 292, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    v18 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v93 = v15;
    v94 = 2082;
    v95 = v16;
    v96 = 2082;
    v97 = v17;
    v98 = 1024;
    v99 = 292;
    v100 = 2114;
    v101 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 40);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v90 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v91 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v91, &v90, 1));
    v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
    (*(void (**)(uint64_t, _QWORD, id))(v19 + 16))(v19, 0, v24);

LABEL_15:
  }
}

void sub_1000C86B4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *v5;
  _BOOL4 v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  void *specific;
  uint64_t Logger;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  objc_class *v34;
  int v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  void (*v59)(uint64_t, const char *, ...);
  objc_class *v60;
  _BOOL4 v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  NSObject *v66;
  objc_class *v67;
  int v68;
  const char *v69;
  const char *v70;
  void *v71;
  uint64_t v72;
  void (*v73)(uint64_t, const char *, ...);
  objc_class *v74;
  _BOOL4 v75;
  const char *v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  NSObject *v81;
  objc_class *v82;
  int v83;
  const char *v84;
  const char *v85;
  void *v86;
  id v87;
  void *v88;
  const char *Name;
  const char *v90;
  id v91;
  id v92;
  const __CFString *v93;
  NSObject *v94;
  _QWORD v95[4];
  _QWORD v96[4];
  _QWORD v97[4];
  _QWORD v98[4];
  _QWORD v99[4];
  _QWORD v100[4];
  _QWORD v101[4];
  _QWORD v102[4];
  NSErrorUserInfoKey v103;
  void *v104;
  uint8_t buf[4];
  int v106;
  __int16 v107;
  const char *v108;
  __int16 v109;
  const char *v110;
  __int16 v111;
  int v112;
  __int16 v113;
  void *v114;

  if (!*(_QWORD *)(a1 + 48))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v27 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v31 = 45;
      if (isMetaClass)
        v31 = 43;
      v27(3, "%c[%{public}s %{public}s]:%i Could not delete Key with nil callback", v31, ClassName, Name, 500);
    }
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = NFSharedLogGetLogger(v32);
    v21 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v34 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v34))
        v35 = 43;
      else
        v35 = 45;
      v36 = object_getClassName(*(id *)(a1 + 32));
      v37 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      v106 = v35;
      v107 = 2082;
      v108 = v36;
      v109 = 2082;
      v110 = v37;
      v111 = 1024;
      v112 = 500;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not delete Key with nil callback", buf, 0x22u);
    }
    goto LABEL_26;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDB"));
    if (v38
      && (v39 = (void *)v38,
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDBApplet")),
          v40,
          v39,
          v40))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v41 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDB"));
        v42 = *(void **)(a1 + 40);
        v92 = 0;
        v43 = sub_100030AF4(v41, v42, &v92);
        v44 = (id)objc_claimAutoreleasedReturnValue(v43);
        v21 = v92;

        if (v44)
        {
          v97[0] = CFSTR("purpleTrustOperationType");
          v97[1] = CFSTR("purpleTrustOperationErrorStep");
          v98[0] = &off_1002FEA18;
          v98[1] = &off_1002FEAC0;
          v98[2] = &off_1002FEA30;
          v97[2] = CFSTR("purpleTrustOperationCAErrorCode");
          v97[3] = CFSTR("purpleTrustOperationErrorCode");
          v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v44, "code")));
          v98[3] = v45;
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v98, v97, 4));

          sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v46);
          +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_1003063A8);
          (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

LABEL_60:
          goto LABEL_26;
        }
        if (v21)
        {
          objc_msgSend(*(id *)(a1 + 32), "setKeys:", 0);
          v53 = *(_QWORD *)(a1 + 48);
          v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deleteDBKey:", v21));
          (*(void (**)(uint64_t, void *))(v53 + 16))(v53, v54);

          v55 = *(void **)(a1 + 32);
          v91 = 0;
          v56 = objc_msgSend(v55, "getNumberOfKeys:", &v91);
          v44 = v91;
          if (v44)
          {
            v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v58 = NFLogGetLogger(v57);
            if (v58)
            {
              v59 = (void (*)(uint64_t, const char *, ...))v58;
              v60 = object_getClass(*(id *)(a1 + 32));
              v61 = class_isMetaClass(v60);
              v62 = object_getClassName(*(id *)(a1 + 32));
              v90 = sel_getName(*(SEL *)(a1 + 56));
              v63 = 45;
              if (v61)
                v63 = 43;
              v59(3, "%c[%{public}s %{public}s]:%i Could not get number of keys to post CA notification", v63, v62, v90, 605);
            }
            v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v65 = NFSharedLogGetLogger(v64);
            v66 = objc_claimAutoreleasedReturnValue(v65);
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
            {
              v67 = object_getClass(*(id *)(a1 + 32));
              if (class_isMetaClass(v67))
                v68 = 43;
              else
                v68 = 45;
              v69 = object_getClassName(*(id *)(a1 + 32));
              v70 = sel_getName(*(SEL *)(a1 + 56));
              *(_DWORD *)buf = 67109890;
              v106 = v68;
              v107 = 2082;
              v108 = v69;
              v109 = 2082;
              v110 = v70;
              v111 = 1024;
              v112 = 605;
              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not get number of keys to post CA notification", buf, 0x22u);
            }
          }
          else
          {
            v93 = CFSTR("totalPurpleTrustKeys");
            v66 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v56));
            v94 = v66;
            v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v94, &v93, 1));
            +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:](NFGeneralStatisticsCALogger, "updateGeneralDeviceStatistic:", v88);

          }
          objc_msgSend(*(id *)(a1 + 32), "listKeysWithCompletion:", &stru_1002E7D38);
          goto LABEL_60;
        }
        v71 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v72 = NFLogGetLogger(v71);
        if (v72)
        {
          v73 = (void (*)(uint64_t, const char *, ...))v72;
          v74 = object_getClass(*(id *)(a1 + 32));
          v75 = class_isMetaClass(v74);
          v76 = object_getClassName(*(id *)(a1 + 32));
          v77 = sel_getName(*(SEL *)(a1 + 56));
          v78 = 45;
          if (v75)
            v78 = 43;
          v73(3, "%c[%{public}s %{public}s]:%i Could not find DB Key with identifier : %{public}@", v78, v76, v77, 575, *(_QWORD *)(a1 + 40));
        }
        v79 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v80 = NFSharedLogGetLogger(v79);
        v81 = objc_claimAutoreleasedReturnValue(v80);
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
        {
          v82 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v82))
            v83 = 43;
          else
            v83 = 45;
          v84 = object_getClassName(*(id *)(a1 + 32));
          v85 = sel_getName(*(SEL *)(a1 + 56));
          v86 = *(void **)(a1 + 40);
          *(_DWORD *)buf = 67110146;
          v106 = v83;
          v107 = 2082;
          v108 = v84;
          v109 = 2082;
          v110 = v85;
          v111 = 1024;
          v112 = 575;
          v113 = 2114;
          v114 = v86;
          _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not find DB Key with identifier : %{public}@", buf, 0x2Cu);
        }

        v87 = sub_100130B78(*(void **)(a1 + 40));
        v21 = objc_claimAutoreleasedReturnValue(v87);
        v95[0] = CFSTR("purpleTrustOperationType");
        v95[1] = CFSTR("purpleTrustOperationErrorStep");
        v96[0] = &off_1002FEA18;
        v96[1] = &off_1002FEAC0;
        v96[2] = &off_1002FEAD8;
        v95[2] = CFSTR("purpleTrustOperationCAErrorCode");
        v95[3] = CFSTR("purpleTrustOperationErrorCode");
        v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
        v96[3] = v50;
        v51 = v96;
        v52 = v95;
      }
      else
      {
        v49 = sub_100130D58(CFSTR("keyIdentifier is nil"));
        v21 = objc_claimAutoreleasedReturnValue(v49);
        v99[0] = CFSTR("purpleTrustOperationType");
        v99[1] = CFSTR("purpleTrustOperationErrorStep");
        v100[0] = &off_1002FEA18;
        v100[1] = &off_1002FEA18;
        v100[2] = &off_1002FEAA8;
        v99[2] = CFSTR("purpleTrustOperationCAErrorCode");
        v99[3] = CFSTR("purpleTrustOperationErrorCode");
        v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
        v100[3] = v50;
        v51 = v100;
        v52 = v99;
      }
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v51, v52, 4));

      sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v22);
    }
    else
    {
      v47 = sub_1001308D0();
      v21 = objc_claimAutoreleasedReturnValue(v47);
      v101[0] = CFSTR("purpleTrustOperationType");
      v101[1] = CFSTR("purpleTrustOperationErrorStep");
      v102[0] = &off_1002FEA18;
      v102[1] = &off_1002FEA18;
      v102[2] = &off_1002FEA30;
      v101[2] = CFSTR("purpleTrustOperationCAErrorCode");
      v101[3] = CFSTR("purpleTrustOperationErrorCode");
      v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
      v102[3] = v48;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v102, v101, 4));

      sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v22);
      +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306380);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    goto LABEL_16;
  }
  v2 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v3 = NFLogGetLogger(v2);
  if (v3)
  {
    v4 = (void (*)(uint64_t, const char *, ...))v3;
    v5 = object_getClass(*(id *)(a1 + 32));
    v6 = class_isMetaClass(v5);
    v7 = object_getClassName(*(id *)(a1 + 32));
    v8 = sel_getName(*(SEL *)(a1 + 56));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (v6)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, v7, v8, 504, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 56));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v106 = v15;
    v107 = 2082;
    v108 = v16;
    v109 = 2082;
    v110 = v17;
    v111 = 1024;
    v112 = 504;
    v113 = 2114;
    v114 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 48);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v103 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v104 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v104, &v103, 1));
    v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
    (*(void (**)(uint64_t, id))(v19 + 16))(v19, v24);

LABEL_16:
LABEL_26:

  }
}

void sub_1000C91F0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *v5;
  _BOOL4 v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  void *specific;
  uint64_t Logger;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  objc_class *v34;
  int v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  NSObject *v43;
  void *v44;
  uint64_t v45;
  void (*v46)(uint64_t, const char *, ...);
  objc_class *v47;
  _BOOL4 v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  objc_class *v53;
  int v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  id v58;
  NSObject *v59;
  id v60;
  void *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void (*v68)(uint64_t, const char *, ...);
  objc_class *v69;
  _BOOL4 v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  NSObject *v75;
  objc_class *v76;
  int v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  id v81;
  _QWORD *v82;
  void *v83;
  id v84;
  void *v85;
  void *v86;
  id v87;
  void *v88;
  __CFString *v89;
  id v90;
  void *v91;
  id v92;
  id v93;
  void *v94;
  uint64_t v95;
  id v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  id v101;
  void *v102;
  NFTrustDBKey *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void (*v107)(uint64_t, const char *, ...);
  objc_class *v108;
  _BOOL4 v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  NSObject *v113;
  objc_class *v114;
  int v115;
  const char *v116;
  const char *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  void (*v121)(uint64_t, const char *, ...);
  objc_class *v122;
  _BOOL4 v123;
  const char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  NSObject *v128;
  objc_class *v129;
  int v130;
  const char *v131;
  const char *v132;
  id v133;
  void *v134;
  id v135;
  void *v136;
  id v137;
  id v138;
  void *v139;
  uint64_t v140;
  void (*v141)(uint64_t, const char *, ...);
  objc_class *v142;
  _BOOL4 v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  NSObject *v147;
  objc_class *v148;
  int v149;
  const char *v150;
  const char *v151;
  const char *v152;
  void *v153;
  id v154;
  void *v155;
  uint64_t v156;
  void (*v157)(uint64_t, const char *, ...);
  objc_class *v158;
  _BOOL4 v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  objc_class *v163;
  int v164;
  const char *v165;
  const char *v166;
  id *v167;
  id v168;
  void *v169;
  uint64_t v170;
  void (*v171)(uint64_t, const char *, ...);
  objc_class *v172;
  _BOOL4 v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  NSObject *v177;
  objc_class *v178;
  int v179;
  const char *v180;
  const char *v181;
  void *v182;
  void *v183;
  _UNKNOWN **v184;
  void *v185;
  id v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  void (*v190)(uint64_t, const char *, ...);
  objc_class *v191;
  _BOOL4 v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  NSObject *v196;
  objc_class *v197;
  int v198;
  const char *v199;
  const char *v200;
  void *v201;
  uint64_t v202;
  NSObject *v203;
  void *v204;
  void *v205;
  NSObject *v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  _BOOL4 v210;
  void *v211;
  uint64_t v212;
  void (*v213)(uint64_t, const char *, ...);
  objc_class *v214;
  _BOOL4 v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  NSObject *v219;
  objc_class *v220;
  int v221;
  const char *v222;
  const char *v223;
  void *v224;
  NSObject *v225;
  NSObject *v226;
  void *v227;
  uint64_t v228;
  void (*v229)(uint64_t, const char *, ...);
  objc_class *v230;
  _BOOL4 v231;
  uint64_t v232;
  void *v233;
  uint64_t v234;
  NSObject *v235;
  objc_class *v236;
  int v237;
  const char *v238;
  const char *v239;
  void *v240;
  NSObject *v241;
  void *v242;
  void *v243;
  void *v244;
  id v245;
  NSObject *v246;
  void *v247;
  uint64_t v248;
  void (*v249)(uint64_t, const char *, ...);
  objc_class *v250;
  _BOOL4 v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  NSObject *v255;
  objc_class *v256;
  int v257;
  const char *v258;
  const char *v259;
  void *v260;
  id v261;
  void *v262;
  uint64_t v263;
  void (*v264)(uint64_t, const char *, ...);
  objc_class *v265;
  _BOOL4 v266;
  uint64_t v267;
  void *v268;
  uint64_t v269;
  NSObject *v270;
  objc_class *v271;
  int v272;
  const char *v273;
  const char *v274;
  void *v275;
  void *v276;
  uint64_t v277;
  void (*v278)(uint64_t, const char *, ...);
  objc_class *v279;
  _BOOL4 v280;
  uint64_t v281;
  void *v282;
  uint64_t v283;
  NSObject *v284;
  objc_class *v285;
  int v286;
  const char *v287;
  const char *v288;
  void *v289;
  NSObject *v290;
  uint64_t v291;
  id v292;
  void *v293;
  void *v294;
  id v295;
  NSObject *v296;
  void *v297;
  uint64_t v298;
  void (*v299)(uint64_t, const char *, ...);
  objc_class *v300;
  _BOOL4 v301;
  const char *v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  objc_class *v306;
  int v307;
  const char *v308;
  const char *v309;
  void *v310;
  void *v311;
  const char *v312;
  const char *v313;
  const char *v314;
  const char *v315;
  const char *v316;
  const char *v317;
  const char *v318;
  const char *v319;
  const char *v320;
  const char *v321;
  const char *v322;
  const char *Name;
  const char *v324;
  const char *v325;
  const char *v326;
  const char *v327;
  const char *v328;
  const char *v329;
  const char *v330;
  const char *v331;
  const char *v332;
  const char *v333;
  const char *v334;
  const char *v335;
  const char *v336;
  const char *v337;
  id v338;
  id v339;
  id v340;
  id v341;
  id v342;
  id v343;
  const __CFString *v344;
  void *v345;
  _QWORD v346[4];
  _QWORD v347[4];
  _QWORD v348[4];
  _QWORD v349[4];
  _QWORD v350[4];
  _QWORD v351[4];
  _QWORD v352[4];
  _QWORD v353[4];
  _QWORD v354[4];
  _QWORD v355[4];
  _QWORD v356[4];
  _QWORD v357[4];
  _QWORD v358[4];
  _QWORD v359[4];
  _QWORD v360[4];
  _QWORD v361[4];
  _QWORD v362[4];
  _QWORD v363[4];
  _QWORD v364[4];
  _QWORD v365[4];
  _QWORD v366[4];
  _QWORD v367[4];
  _QWORD v368[4];
  _QWORD v369[4];
  _QWORD v370[4];
  _QWORD v371[4];
  NSErrorUserInfoKey v372;
  void *v373;
  uint8_t buf[4];
  int v375;
  __int16 v376;
  const char *v377;
  __int16 v378;
  const char *v379;
  __int16 v380;
  int v381;
  __int16 v382;
  NSObject *v383;

  if (!*(_QWORD *)(a1 + 56))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v27 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 64));
      v31 = 45;
      if (isMetaClass)
        v31 = 43;
      v27(3, "%c[%{public}s %{public}s]:%i Could not create Key with nil callback", v31, ClassName, Name, 631);
    }
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = NFSharedLogGetLogger(v32);
    v21 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v34 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v34))
        v35 = 43;
      else
        v35 = 45;
      v36 = object_getClassName(*(id *)(a1 + 32));
      v37 = sel_getName(*(SEL *)(a1 + 64));
      *(_DWORD *)buf = 67109890;
      v375 = v35;
      v376 = 2082;
      v377 = v36;
      v378 = 2082;
      v379 = v37;
      v380 = 1024;
      v381 = 631;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not create Key with nil callback", buf, 0x22u);
    }
    goto LABEL_26;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDB"));
    if (v38)
    {
      v39 = (void *)v38;
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDBApplet"));

      if (v40)
      {
        v41 = *(void **)(a1 + 32);
        v343 = 0;
        v42 = objc_msgSend(v41, "getNumberOfKeys:", &v343);
        v43 = v343;
        if (v43)
        {
          v21 = v43;
          v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v45 = NFLogGetLogger(v44);
          if (v45)
          {
            v46 = (void (*)(uint64_t, const char *, ...))v45;
            v47 = object_getClass(*(id *)(a1 + 32));
            v48 = class_isMetaClass(v47);
            v312 = object_getClassName(*(id *)(a1 + 32));
            v324 = sel_getName(*(SEL *)(a1 + 64));
            v49 = 45;
            if (v48)
              v49 = 43;
            v46(3, "%c[%{public}s %{public}s]:%i Could not createKey, could not get current number of keys : %{public}@", v49, v312, v324, 663, v21);
          }
          v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v51 = NFSharedLogGetLogger(v50);
          v52 = objc_claimAutoreleasedReturnValue(v51);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            v53 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v53))
              v54 = 43;
            else
              v54 = 45;
            v55 = object_getClassName(*(id *)(a1 + 32));
            v56 = sel_getName(*(SEL *)(a1 + 64));
            *(_DWORD *)buf = 67110146;
            v375 = v54;
            v376 = 2082;
            v377 = v55;
            v378 = 2082;
            v379 = v56;
            v380 = 1024;
            v381 = 663;
            v382 = 2114;
            v383 = v21;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not createKey, could not get current number of keys : %{public}@", buf, 0x2Cu);
          }

          v57 = *(_QWORD *)(a1 + 56);
          v58 = sub_100130704(&stru_1002ED8A8);
          v59 = objc_claimAutoreleasedReturnValue(v58);
          (*(void (**)(uint64_t, _QWORD, NSObject *))(v57 + 16))(v57, 0, v59);
          goto LABEL_41;
        }
        if ((unint64_t)v42 >= 2)
        {
          v66 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v67 = NFLogGetLogger(v66);
          if (v67)
          {
            v68 = (void (*)(uint64_t, const char *, ...))v67;
            v69 = object_getClass(*(id *)(a1 + 32));
            v70 = class_isMetaClass(v69);
            v71 = object_getClassName(*(id *)(a1 + 32));
            v325 = sel_getName(*(SEL *)(a1 + 64));
            v72 = 45;
            if (v70)
              v72 = 43;
            v68(3, "%c[%{public}s %{public}s]:%i Could not createKey, maximum number of keys reached", v72, v71, v325, 669);
          }
          v73 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v74 = NFSharedLogGetLogger(v73);
          v75 = objc_claimAutoreleasedReturnValue(v74);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            v76 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v76))
              v77 = 43;
            else
              v77 = 45;
            v78 = object_getClassName(*(id *)(a1 + 32));
            v79 = sel_getName(*(SEL *)(a1 + 64));
            *(_DWORD *)buf = 67109890;
            v375 = v77;
            v376 = 2082;
            v377 = v78;
            v378 = 2082;
            v379 = v79;
            v380 = 1024;
            v381 = 669;
            _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not createKey, maximum number of keys reached", buf, 0x22u);
          }

          v80 = *(_QWORD *)(a1 + 56);
          v81 = sub_100130A88(CFSTR("create key"));
          v21 = objc_claimAutoreleasedReturnValue(v81);
          (*(void (**)(uint64_t, _QWORD, NSObject *))(v80 + 16))(v80, 0, v21);
          goto LABEL_26;
        }
        if (*(_QWORD *)(a1 + 40))
        {
          if (*(_QWORD *)(a1 + 48))
          {
            v82 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDB"));
            v83 = *(void **)(a1 + 40);
            v342 = 0;
            v84 = sub_100030AF4(v82, v83, &v342);
            v21 = objc_claimAutoreleasedReturnValue(v84);
            v59 = v342;

            if (v21)
            {
              v364[0] = CFSTR("purpleTrustOperationType");
              v364[1] = CFSTR("purpleTrustOperationErrorStep");
              v365[0] = &off_1002FEAF0;
              v365[1] = &off_1002FEB08;
              v365[2] = &off_1002FEA30;
              v364[2] = CFSTR("purpleTrustOperationCAErrorCode");
              v364[3] = CFSTR("purpleTrustOperationErrorCode");
              v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
              v365[3] = v85;
              v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v365, v364, 4));

              sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v86);
              +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_1003063F8);
LABEL_59:
              (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
LABEL_65:

LABEL_41:
              goto LABEL_26;
            }
            if (v59)
            {
              v93 = sub_100130C68(*(void **)(a1 + 40));
              v21 = objc_claimAutoreleasedReturnValue(v93);
              v362[0] = CFSTR("purpleTrustOperationType");
              v362[1] = CFSTR("purpleTrustOperationErrorStep");
              v363[0] = &off_1002FEAF0;
              v363[1] = &off_1002FEB08;
              v363[2] = &off_1002FEB20;
              v362[2] = CFSTR("purpleTrustOperationCAErrorCode");
              v362[3] = CFSTR("purpleTrustOperationErrorCode");
              v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
              v363[3] = v94;
              v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v363, v362, 4));

              sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v86);
              v95 = *(_QWORD *)(a1 + 56);
              v96 = sub_100130C68(*(void **)(a1 + 40));
              v97 = (void *)objc_claimAutoreleasedReturnValue(v96);
              (*(void (**)(uint64_t, _QWORD, void *))(v95 + 16))(v95, 0, v97);

              goto LABEL_65;
            }
            v98 = *(void **)(a1 + 40);
            v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "applicationIdentifier"));
            v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDBApplet"));
            v101 = sub_1000303B0(v100);
            v102 = (void *)objc_claimAutoreleasedReturnValue(v101);
            v103 = sub_100031EC8((uint64_t)NFTrustDBKey, v98, v99, v102, *(void **)(a1 + 48));
            v59 = objc_claimAutoreleasedReturnValue(v103);

            if (v59)
            {
              v104 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectInstance"));
              if (v104)
              {
                v21 = v104;
                v105 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v106 = NFLogGetLogger(v105);
                if (v106)
                {
                  v107 = (void (*)(uint64_t, const char *, ...))v106;
                  v108 = object_getClass(*(id *)(a1 + 32));
                  v109 = class_isMetaClass(v108);
                  v313 = object_getClassName(*(id *)(a1 + 32));
                  v326 = sel_getName(*(SEL *)(a1 + 64));
                  v110 = 45;
                  if (v109)
                    v110 = 43;
                  v107(3, "%c[%{public}s %{public}s]:%i Failed to select instance : %{public}@", v110, v313, v326, 787, v21);
                }
                v111 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v112 = NFSharedLogGetLogger(v111);
                v113 = objc_claimAutoreleasedReturnValue(v112);
                if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
                {
                  v114 = object_getClass(*(id *)(a1 + 32));
                  if (class_isMetaClass(v114))
                    v115 = 43;
                  else
                    v115 = 45;
                  v116 = object_getClassName(*(id *)(a1 + 32));
                  v117 = sel_getName(*(SEL *)(a1 + 64));
                  *(_DWORD *)buf = 67110146;
                  v375 = v115;
                  v376 = 2082;
                  v377 = v116;
                  v378 = 2082;
                  v379 = v117;
                  v380 = 1024;
                  v381 = 787;
                  v382 = 2114;
                  v383 = v21;
                  _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select instance : %{public}@", buf, 0x2Cu);
                }

                v358[0] = CFSTR("purpleTrustOperationType");
                v358[1] = CFSTR("purpleTrustOperationErrorStep");
                v359[0] = &off_1002FEAF0;
                v359[1] = &off_1002FEB68;
                v359[2] = &off_1002FEB80;
                v358[2] = CFSTR("purpleTrustOperationCAErrorCode");
                v358[3] = CFSTR("purpleTrustOperationErrorCode");
                v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
                v359[3] = v118;
                v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v359, v358, 4));

                sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v86);
                goto LABEL_59;
              }
              v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDBApplet"));
              v341 = 0;
              v137 = sub_100031364(v136, &v341);
              v21 = objc_claimAutoreleasedReturnValue(v137);
              v138 = v341;

              if (v21)
              {
                v139 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v140 = NFLogGetLogger(v139);
                if (v140)
                {
                  v141 = (void (*)(uint64_t, const char *, ...))v140;
                  v142 = object_getClass(*(id *)(a1 + 32));
                  v143 = class_isMetaClass(v142);
                  v314 = object_getClassName(*(id *)(a1 + 32));
                  v328 = sel_getName(*(SEL *)(a1 + 64));
                  v144 = 45;
                  if (v143)
                    v144 = 43;
                  v141(3, "%c[%{public}s %{public}s]:%i Failed to get slot for new key : %{public}@", v144, v314, v328, 807, v21);
                }
                v145 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v146 = NFSharedLogGetLogger(v145);
                v147 = objc_claimAutoreleasedReturnValue(v146);
                if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                  goto LABEL_109;
                v148 = object_getClass(*(id *)(a1 + 32));
                if (class_isMetaClass(v148))
                  v149 = 43;
                else
                  v149 = 45;
                v150 = object_getClassName(*(id *)(a1 + 32));
                v151 = sel_getName(*(SEL *)(a1 + 64));
                *(_DWORD *)buf = 67110146;
                v375 = v149;
                v376 = 2082;
                v377 = v150;
                v378 = 2082;
                v379 = v151;
                v380 = 1024;
                v381 = 807;
                v382 = 2114;
                v383 = v21;
                v152 = "%c[%{public}s %{public}s]:%i Failed to get slot for new key : %{public}@";
LABEL_108:
                _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_ERROR, v152, buf, 0x2Cu);
LABEL_109:

                (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
LABEL_110:

                goto LABEL_41;
              }
              v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDBApplet"));
              v154 = sub_100031814(v153, v138);
              v21 = objc_claimAutoreleasedReturnValue(v154);

              if (v21)
              {
                v155 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v156 = NFLogGetLogger(v155);
                if (v156)
                {
                  v157 = (void (*)(uint64_t, const char *, ...))v156;
                  v158 = object_getClass(*(id *)(a1 + 32));
                  v159 = class_isMetaClass(v158);
                  v315 = object_getClassName(*(id *)(a1 + 32));
                  v329 = sel_getName(*(SEL *)(a1 + 64));
                  v160 = 45;
                  if (v159)
                    v160 = 43;
                  v157(3, "%c[%{public}s %{public}s]:%i Failed to clean DB slot for new key : %{public}@", v160, v315, v329, 813, v21);
                }
                v161 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v162 = NFSharedLogGetLogger(v161);
                v147 = objc_claimAutoreleasedReturnValue(v162);
                if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                  goto LABEL_109;
                v163 = object_getClass(*(id *)(a1 + 32));
                if (class_isMetaClass(v163))
                  v164 = 43;
                else
                  v164 = 45;
                v165 = object_getClassName(*(id *)(a1 + 32));
                v166 = sel_getName(*(SEL *)(a1 + 64));
                *(_DWORD *)buf = 67110146;
                v375 = v164;
                v376 = 2082;
                v377 = v165;
                v378 = 2082;
                v379 = v166;
                v380 = 1024;
                v381 = 813;
                v382 = 2114;
                v383 = v21;
                v152 = "%c[%{public}s %{public}s]:%i Failed to clean DB slot for new key : %{public}@";
                goto LABEL_108;
              }
              sub_1000326E4((uint64_t)v59, v138);
              v167 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDB"));
              v168 = sub_100030480(v167, v59);
              v21 = objc_claimAutoreleasedReturnValue(v168);

              if (v21)
              {
                v169 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v170 = NFLogGetLogger(v169);
                if (v170)
                {
                  v171 = (void (*)(uint64_t, const char *, ...))v170;
                  v172 = object_getClass(*(id *)(a1 + 32));
                  v173 = class_isMetaClass(v172);
                  v316 = object_getClassName(*(id *)(a1 + 32));
                  v330 = sel_getName(*(SEL *)(a1 + 64));
                  v174 = 45;
                  if (v173)
                    v174 = 43;
                  v171(3, "%c[%{public}s %{public}s]:%i Failed to add Key to NFTrustDB : %{public}@ -- Delete created key", v174, v316, v330, 822, v21);
                }
                v175 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v176 = NFSharedLogGetLogger(v175);
                v177 = objc_claimAutoreleasedReturnValue(v176);
                if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
                {
                  v178 = object_getClass(*(id *)(a1 + 32));
                  if (class_isMetaClass(v178))
                    v179 = 43;
                  else
                    v179 = 45;
                  v180 = object_getClassName(*(id *)(a1 + 32));
                  v181 = sel_getName(*(SEL *)(a1 + 64));
                  *(_DWORD *)buf = 67110146;
                  v375 = v179;
                  v376 = 2082;
                  v377 = v180;
                  v378 = 2082;
                  v379 = v181;
                  v380 = 1024;
                  v381 = 822;
                  v382 = 2114;
                  v383 = v21;
                  _os_log_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to add Key to NFTrustDB : %{public}@ -- Delete created key", buf, 0x2Cu);
                }

                v356[0] = CFSTR("purpleTrustOperationType");
                v356[1] = CFSTR("purpleTrustOperationErrorStep");
                v357[0] = &off_1002FEAF0;
                v357[1] = &off_1002FEB98;
                v357[2] = &off_1002FEA30;
                v356[2] = CFSTR("purpleTrustOperationCAErrorCode");
                v356[3] = CFSTR("purpleTrustOperationErrorCode");
                v182 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
                v357[3] = v182;
                v183 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v357, v356, 4));

                sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v183);
                v184 = &off_100306420;
LABEL_133:
                +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", v184);
                (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

                goto LABEL_110;
              }
              v185 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDB"));
              v186 = sub_10002F654((uint64_t)v185);
              v21 = objc_claimAutoreleasedReturnValue(v186);

              if (v21)
              {
                v188 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v189 = NFLogGetLogger(v188);
                if (v189)
                {
                  v190 = (void (*)(uint64_t, const char *, ...))v189;
                  v191 = object_getClass(*(id *)(a1 + 32));
                  v192 = class_isMetaClass(v191);
                  v317 = object_getClassName(*(id *)(a1 + 32));
                  v331 = sel_getName(*(SEL *)(a1 + 64));
                  v193 = 45;
                  if (v192)
                    v193 = 43;
                  v190(3, "%c[%{public}s %{public}s]:%i Failed to commit NFTrustDB : %{public}@ -- Delete created key", v193, v317, v331, 844, v21);
                }
                v194 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v195 = NFSharedLogGetLogger(v194);
                v196 = objc_claimAutoreleasedReturnValue(v195);
                if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
                {
                  v197 = object_getClass(*(id *)(a1 + 32));
                  if (class_isMetaClass(v197))
                    v198 = 43;
                  else
                    v198 = 45;
                  v199 = object_getClassName(*(id *)(a1 + 32));
                  v200 = sel_getName(*(SEL *)(a1 + 64));
                  *(_DWORD *)buf = 67110146;
                  v375 = v198;
                  v376 = 2082;
                  v377 = v199;
                  v378 = 2082;
                  v379 = v200;
                  v380 = 1024;
                  v381 = 844;
                  v382 = 2114;
                  v383 = v21;
                  _os_log_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to commit NFTrustDB : %{public}@ -- Delete created key", buf, 0x2Cu);
                }

                v354[0] = CFSTR("purpleTrustOperationType");
                v354[1] = CFSTR("purpleTrustOperationErrorStep");
                v355[0] = &off_1002FEAF0;
                v355[1] = &off_1002FEB98;
                v355[2] = &off_1002FEA30;
                v354[2] = CFSTR("purpleTrustOperationCAErrorCode");
                v354[3] = CFSTR("purpleTrustOperationErrorCode");
                v201 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
                v355[3] = v201;
                v183 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v355, v354, 4));

                sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v183);
                v184 = &off_100306448;
                goto LABEL_133;
              }
              v202 = NFSharedSignpostLog(v187);
              v203 = objc_claimAutoreleasedReturnValue(v202);
              if (os_signpost_enabled(v203))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v203, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "createKeyInSlot", "", buf, 2u);
              }

              v204 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secureElementWrapper"));
              v205 = *(void **)(a1 + 48);
              v340 = 0;
              v206 = sub_1000AEF50(v204, v138, v205, &v340);
              v21 = objc_claimAutoreleasedReturnValue(v206);
              v338 = v340;

              v208 = NFSharedSignpostLog(v207);
              v209 = objc_claimAutoreleasedReturnValue(v208);
              v210 = os_signpost_enabled(v209);
              if (v21)
              {
                if (v210)
                {
                  *(_WORD *)buf = 0;
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v209, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "createKeyInSlot", "failed", buf, 2u);
                }

                v211 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v212 = NFLogGetLogger(v211);
                if (v212)
                {
                  v213 = (void (*)(uint64_t, const char *, ...))v212;
                  v214 = object_getClass(*(id *)(a1 + 32));
                  v215 = class_isMetaClass(v214);
                  v318 = object_getClassName(*(id *)(a1 + 32));
                  v332 = sel_getName(*(SEL *)(a1 + 64));
                  v216 = 45;
                  if (v215)
                    v216 = 43;
                  v213(3, "%c[%{public}s %{public}s]:%i Failed to create Key : %{public}@ ...", v216, v318, v332, 872, v21);
                }
                v217 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v218 = NFSharedLogGetLogger(v217);
                v219 = objc_claimAutoreleasedReturnValue(v218);
                if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
                {
                  v220 = object_getClass(*(id *)(a1 + 32));
                  if (class_isMetaClass(v220))
                    v221 = 43;
                  else
                    v221 = 45;
                  v222 = object_getClassName(*(id *)(a1 + 32));
                  v223 = sel_getName(*(SEL *)(a1 + 64));
                  *(_DWORD *)buf = 67110146;
                  v375 = v221;
                  v376 = 2082;
                  v377 = v222;
                  v378 = 2082;
                  v379 = v223;
                  v380 = 1024;
                  v381 = 872;
                  v382 = 2114;
                  v383 = v21;
                  _os_log_impl((void *)&_mh_execute_header, v219, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create Key : %{public}@ ...", buf, 0x2Cu);
                }

                v352[0] = CFSTR("purpleTrustOperationType");
                v352[1] = CFSTR("purpleTrustOperationErrorStep");
                v353[0] = &off_1002FEAF0;
                v353[1] = &off_1002FEBB0;
                v353[2] = &off_1002FEBC8;
                v352[2] = CFSTR("purpleTrustOperationCAErrorCode");
                v352[3] = CFSTR("purpleTrustOperationErrorCode");
                v224 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
                v353[3] = v224;
                v225 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v353, v352, 4));

                sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v225);
                v226 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deleteDBKey:", v59));
                if (v226)
                {
                  v227 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v228 = NFLogGetLogger(v227);
                  if (v228)
                  {
                    v229 = (void (*)(uint64_t, const char *, ...))v228;
                    v230 = object_getClass(*(id *)(a1 + 32));
                    v231 = class_isMetaClass(v230);
                    v319 = object_getClassName(*(id *)(a1 + 32));
                    v333 = sel_getName(*(SEL *)(a1 + 64));
                    v232 = 45;
                    if (v231)
                      v232 = 43;
                    v229(3, "%c[%{public}s %{public}s]:%i Failed to delete DB key after creation failure : %{public}@", v232, v319, v333, 888, v226);
                  }
                  v233 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v234 = NFSharedLogGetLogger(v233);
                  v235 = objc_claimAutoreleasedReturnValue(v234);
                  if (os_log_type_enabled(v235, OS_LOG_TYPE_ERROR))
                  {
                    v236 = object_getClass(*(id *)(a1 + 32));
                    if (class_isMetaClass(v236))
                      v237 = 43;
                    else
                      v237 = 45;
                    v238 = object_getClassName(*(id *)(a1 + 32));
                    v239 = sel_getName(*(SEL *)(a1 + 64));
                    *(_DWORD *)buf = 67110146;
                    v375 = v237;
                    v376 = 2082;
                    v377 = v238;
                    v378 = 2082;
                    v379 = v239;
                    v380 = 1024;
                    v381 = 888;
                    v382 = 2114;
                    v383 = v226;
                    _os_log_impl((void *)&_mh_execute_header, v235, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to delete DB key after creation failure : %{public}@", buf, 0x2Cu);
                  }

                  v350[0] = CFSTR("purpleTrustOperationType");
                  v350[1] = CFSTR("purpleTrustOperationErrorStep");
                  v351[0] = &off_1002FEAF0;
                  v351[1] = &off_1002FEBB0;
                  v351[2] = &off_1002FEBE0;
                  v350[2] = CFSTR("purpleTrustOperationCAErrorCode");
                  v350[3] = CFSTR("purpleTrustOperationErrorCode");
                  v240 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v226, "code")));
                  v351[3] = v240;
                  v241 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v351, v350, 4));

                  sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v241);
                  +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306470);
                  v225 = v241;
                }
                (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
              }
              else
              {
                if (v210)
                {
                  *(_WORD *)buf = 0;
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v209, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "createKeyInSlot", "", buf, 2u);
                }

                v242 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secureElementWrapper"));
                v243 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v242, "eccCertificate"));
                sub_1000326B4((uint64_t)v59, v243);

                sub_1000326CC((uint64_t)v59, v338);
                v244 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDBApplet"));
                v245 = sub_100031680(v244, v59, v138);
                v246 = objc_claimAutoreleasedReturnValue(v245);

                if (v246)
                {
                  v247 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v248 = NFLogGetLogger(v247);
                  if (v248)
                  {
                    v249 = (void (*)(uint64_t, const char *, ...))v248;
                    v250 = object_getClass(*(id *)(a1 + 32));
                    v251 = class_isMetaClass(v250);
                    v320 = object_getClassName(*(id *)(a1 + 32));
                    v334 = sel_getName(*(SEL *)(a1 + 64));
                    v252 = 45;
                    if (v251)
                      v252 = 43;
                    v249(4, "%c[%{public}s %{public}s]:%i Failed to push Key in DB slot, will need to push it again next time : %{public}@ ...", v252, v320, v334, 914, v246);
                  }
                  v253 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v254 = NFSharedLogGetLogger(v253);
                  v255 = objc_claimAutoreleasedReturnValue(v254);
                  if (os_log_type_enabled(v255, OS_LOG_TYPE_ERROR))
                  {
                    v256 = object_getClass(*(id *)(a1 + 32));
                    if (class_isMetaClass(v256))
                      v257 = 43;
                    else
                      v257 = 45;
                    v258 = object_getClassName(*(id *)(a1 + 32));
                    v259 = sel_getName(*(SEL *)(a1 + 64));
                    *(_DWORD *)buf = 67110146;
                    v375 = v257;
                    v376 = 2082;
                    v377 = v258;
                    v378 = 2082;
                    v379 = v259;
                    v380 = 1024;
                    v381 = 914;
                    v382 = 2114;
                    v383 = v246;
                    _os_log_impl((void *)&_mh_execute_header, v255, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to push Key in DB slot, will need to push it again next time : %{public}@ ...", buf, 0x2Cu);
                  }

                }
                v260 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDB"));
                v261 = sub_10002F654((uint64_t)v260);
                v21 = objc_claimAutoreleasedReturnValue(v261);

                if (!v21)
                {
                  objc_msgSend(*(id *)(a1 + 32), "setKeys:", 0);
                  v291 = *(_QWORD *)(a1 + 56);
                  v292 = sub_1000325BC((uint64_t)v59);
                  v293 = (void *)objc_claimAutoreleasedReturnValue(v292);
                  (*(void (**)(uint64_t, void *, _QWORD))(v291 + 16))(v291, v293, 0);

                  v294 = *(void **)(a1 + 32);
                  v339 = 0;
                  v295 = objc_msgSend(v294, "getNumberOfKeys:", &v339);
                  v296 = v339;
                  if (!v296)
                  {
                    v344 = CFSTR("totalPurpleTrustKeys");
                    v310 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v295));
                    v345 = v310;
                    v311 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v345, &v344, 1));
                    +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:](NFGeneralStatisticsCALogger, "updateGeneralDeviceStatistic:", v311);

                    v21 = v59;
                    goto LABEL_26;
                  }
                  v21 = v296;
                  v297 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v298 = NFLogGetLogger(v297);
                  if (v298)
                  {
                    v299 = (void (*)(uint64_t, const char *, ...))v298;
                    v300 = object_getClass(*(id *)(a1 + 32));
                    v301 = class_isMetaClass(v300);
                    v302 = object_getClassName(*(id *)(a1 + 32));
                    v337 = sel_getName(*(SEL *)(a1 + 64));
                    v303 = 45;
                    if (v301)
                      v303 = 43;
                    v299(3, "%c[%{public}s %{public}s]:%i Could not get number of keys to post CA notification", v303, v302, v337, 977);
                  }
                  v304 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v305 = NFSharedLogGetLogger(v304);
                  v225 = objc_claimAutoreleasedReturnValue(v305);
                  if (os_log_type_enabled(v225, OS_LOG_TYPE_ERROR))
                  {
                    v306 = object_getClass(*(id *)(a1 + 32));
                    if (class_isMetaClass(v306))
                      v307 = 43;
                    else
                      v307 = 45;
                    v308 = object_getClassName(*(id *)(a1 + 32));
                    v309 = sel_getName(*(SEL *)(a1 + 64));
                    *(_DWORD *)buf = 67109890;
                    v375 = v307;
                    v376 = 2082;
                    v377 = v308;
                    v378 = 2082;
                    v379 = v309;
                    v380 = 1024;
                    v381 = 977;
                    _os_log_impl((void *)&_mh_execute_header, v225, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not get number of keys to post CA notification", buf, 0x22u);
                  }
                  goto LABEL_196;
                }
                v262 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v263 = NFLogGetLogger(v262);
                if (v263)
                {
                  v264 = (void (*)(uint64_t, const char *, ...))v263;
                  v265 = object_getClass(*(id *)(a1 + 32));
                  v266 = class_isMetaClass(v265);
                  v321 = object_getClassName(*(id *)(a1 + 32));
                  v335 = sel_getName(*(SEL *)(a1 + 64));
                  v267 = 45;
                  if (v266)
                    v267 = 43;
                  v264(3, "%c[%{public}s %{public}s]:%i Failed to commit NFTrustDB : %{public}@ -- Delete created key", v267, v321, v335, 919, v21);
                }
                v268 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v269 = NFSharedLogGetLogger(v268);
                v270 = objc_claimAutoreleasedReturnValue(v269);
                if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
                {
                  v271 = object_getClass(*(id *)(a1 + 32));
                  if (class_isMetaClass(v271))
                    v272 = 43;
                  else
                    v272 = 45;
                  v273 = object_getClassName(*(id *)(a1 + 32));
                  v274 = sel_getName(*(SEL *)(a1 + 64));
                  *(_DWORD *)buf = 67110146;
                  v375 = v272;
                  v376 = 2082;
                  v377 = v273;
                  v378 = 2082;
                  v379 = v274;
                  v380 = 1024;
                  v381 = 919;
                  v382 = 2114;
                  v383 = v21;
                  _os_log_impl((void *)&_mh_execute_header, v270, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to commit NFTrustDB : %{public}@ -- Delete created key", buf, 0x2Cu);
                }

                v348[0] = CFSTR("purpleTrustOperationType");
                v348[1] = CFSTR("purpleTrustOperationErrorStep");
                v349[0] = &off_1002FEAF0;
                v349[1] = &off_1002FEBF8;
                v349[2] = &off_1002FEA30;
                v348[2] = CFSTR("purpleTrustOperationCAErrorCode");
                v348[3] = CFSTR("purpleTrustOperationErrorCode");
                v275 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
                v349[3] = v275;
                v225 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v349, v348, 4));

                sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v225);
                +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306498);
                v226 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deleteDBKey:", v59));
                if (v226)
                {
                  v276 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v277 = NFLogGetLogger(v276);
                  if (v277)
                  {
                    v278 = (void (*)(uint64_t, const char *, ...))v277;
                    v279 = object_getClass(*(id *)(a1 + 32));
                    v280 = class_isMetaClass(v279);
                    v322 = object_getClassName(*(id *)(a1 + 32));
                    v336 = sel_getName(*(SEL *)(a1 + 64));
                    v281 = 45;
                    if (v280)
                      v281 = 43;
                    v278(3, "%c[%{public}s %{public}s]:%i Failed to delete DB key after creation failure : %{public}@", v281, v322, v336, 937, v226);
                  }
                  v282 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v283 = NFSharedLogGetLogger(v282);
                  v284 = objc_claimAutoreleasedReturnValue(v283);
                  if (os_log_type_enabled(v284, OS_LOG_TYPE_ERROR))
                  {
                    v285 = object_getClass(*(id *)(a1 + 32));
                    if (class_isMetaClass(v285))
                      v286 = 43;
                    else
                      v286 = 45;
                    v287 = object_getClassName(*(id *)(a1 + 32));
                    v288 = sel_getName(*(SEL *)(a1 + 64));
                    *(_DWORD *)buf = 67110146;
                    v375 = v286;
                    v376 = 2082;
                    v377 = v287;
                    v378 = 2082;
                    v379 = v288;
                    v380 = 1024;
                    v381 = 937;
                    v382 = 2114;
                    v383 = v226;
                    _os_log_impl((void *)&_mh_execute_header, v284, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to delete DB key after creation failure : %{public}@", buf, 0x2Cu);
                  }

                  v346[0] = CFSTR("purpleTrustOperationType");
                  v346[1] = CFSTR("purpleTrustOperationErrorStep");
                  v347[0] = &off_1002FEAF0;
                  v347[1] = &off_1002FEBF8;
                  v347[2] = &off_1002FEBE0;
                  v346[2] = CFSTR("purpleTrustOperationCAErrorCode");
                  v346[3] = CFSTR("purpleTrustOperationErrorCode");
                  v289 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v226, "code")));
                  v347[3] = v289;
                  v290 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v347, v346, 4));

                  sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v290);
                  +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_1003064C0);
                  v225 = v290;
                }
                (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
                objc_msgSend(*(id *)(a1 + 32), "deselectInstance");
              }

LABEL_196:
              goto LABEL_110;
            }
            v119 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v120 = NFLogGetLogger(v119);
            if (v120)
            {
              v121 = (void (*)(uint64_t, const char *, ...))v120;
              v122 = object_getClass(*(id *)(a1 + 32));
              v123 = class_isMetaClass(v122);
              v124 = object_getClassName(*(id *)(a1 + 32));
              v327 = sel_getName(*(SEL *)(a1 + 64));
              v125 = 45;
              if (v123)
                v125 = 43;
              v121(3, "%c[%{public}s %{public}s]:%i Could not create DB Key", v125, v124, v327, 763);
            }
            v126 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v127 = NFSharedLogGetLogger(v126);
            v128 = objc_claimAutoreleasedReturnValue(v127);
            if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
            {
              v129 = object_getClass(*(id *)(a1 + 32));
              if (class_isMetaClass(v129))
                v130 = 43;
              else
                v130 = 45;
              v131 = object_getClassName(*(id *)(a1 + 32));
              v132 = sel_getName(*(SEL *)(a1 + 64));
              *(_DWORD *)buf = 67109890;
              v375 = v130;
              v376 = 2082;
              v377 = v131;
              v378 = 2082;
              v379 = v132;
              v380 = 1024;
              v381 = 763;
              _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not create DB Key", buf, 0x22u);
            }

            v133 = sub_100130704(&stru_1002ED8A8);
            v21 = objc_claimAutoreleasedReturnValue(v133);
            v360[0] = CFSTR("purpleTrustOperationType");
            v360[1] = CFSTR("purpleTrustOperationErrorStep");
            v361[0] = &off_1002FEAF0;
            v361[1] = &off_1002FEB38;
            v361[2] = &off_1002FEB50;
            v360[2] = CFSTR("purpleTrustOperationCAErrorCode");
            v360[3] = CFSTR("purpleTrustOperationErrorCode");
            v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
            v361[3] = v134;
            v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v361, v360, 4));

            sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v22);
            v62 = *(_QWORD *)(a1 + 56);
            v135 = sub_100130704(CFSTR("Could not create DB Key"));
            v64 = objc_claimAutoreleasedReturnValue(v135);
LABEL_43:
            v65 = (void *)v64;
            (*(void (**)(uint64_t, _QWORD, uint64_t))(v62 + 16))(v62, 0, v64);

            goto LABEL_16;
          }
          v90 = sub_1001308D0();
          v21 = objc_claimAutoreleasedReturnValue(v90);
          v366[0] = CFSTR("purpleTrustOperationType");
          v366[1] = CFSTR("purpleTrustOperationErrorStep");
          v367[0] = &off_1002FEAF0;
          v367[1] = &off_1002FEAF0;
          v367[2] = &off_1002FEAA8;
          v366[2] = CFSTR("purpleTrustOperationCAErrorCode");
          v366[3] = CFSTR("purpleTrustOperationErrorCode");
          v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
          v367[3] = v91;
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v367, v366, 4));

          sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v22);
          v62 = *(_QWORD *)(a1 + 56);
          v89 = CFSTR("Could not create key with nil request");
        }
        else
        {
          v87 = sub_1001308D0();
          v21 = objc_claimAutoreleasedReturnValue(v87);
          v368[0] = CFSTR("purpleTrustOperationType");
          v368[1] = CFSTR("purpleTrustOperationErrorStep");
          v369[0] = &off_1002FEAF0;
          v369[1] = &off_1002FEAF0;
          v369[2] = &off_1002FEAA8;
          v368[2] = CFSTR("purpleTrustOperationCAErrorCode");
          v368[3] = CFSTR("purpleTrustOperationErrorCode");
          v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
          v369[3] = v88;
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v369, v368, 4));

          sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v22);
          v62 = *(_QWORD *)(a1 + 56);
          v89 = CFSTR("Could not create key with nil identifier");
        }
        v92 = sub_100130D58(v89);
        v64 = objc_claimAutoreleasedReturnValue(v92);
        goto LABEL_43;
      }
    }
    v60 = sub_1001308D0();
    v21 = objc_claimAutoreleasedReturnValue(v60);
    v370[0] = CFSTR("purpleTrustOperationType");
    v370[1] = CFSTR("purpleTrustOperationErrorStep");
    v371[0] = &off_1002FEAF0;
    v371[1] = &off_1002FEAF0;
    v371[2] = &off_1002FEA30;
    v370[2] = CFSTR("purpleTrustOperationCAErrorCode");
    v370[3] = CFSTR("purpleTrustOperationErrorCode");
    v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
    v371[3] = v61;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v371, v370, 4));

    sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v22);
    +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_1003063D0);
    v62 = *(_QWORD *)(a1 + 56);
    v63 = sub_1001308D0();
    v64 = objc_claimAutoreleasedReturnValue(v63);
    goto LABEL_43;
  }
  v2 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v3 = NFLogGetLogger(v2);
  if (v3)
  {
    v4 = (void (*)(uint64_t, const char *, ...))v3;
    v5 = object_getClass(*(id *)(a1 + 32));
    v6 = class_isMetaClass(v5);
    v7 = object_getClassName(*(id *)(a1 + 32));
    v8 = sel_getName(*(SEL *)(a1 + 64));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (v6)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, v7, v8, 635, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 64));
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v375 = v15;
    v376 = 2082;
    v377 = v16;
    v378 = 2082;
    v379 = v17;
    v380 = 1024;
    v381 = 635;
    v382 = 2114;
    v383 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 56);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v372 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v373 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v373, &v372, 1));
    v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
    (*(void (**)(uint64_t, _QWORD, id))(v19 + 16))(v19, 0, v24);

LABEL_16:
LABEL_26:

  }
}

void sub_1000CB69C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *v5;
  _BOOL4 v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  objc_class *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  objc_class *v22;
  void *v23;
  id v24;
  void *specific;
  uint64_t Logger;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  objc_class *v34;
  int v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  objc_class *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void (*v60)(uint64_t, const char *, ...);
  objc_class *v61;
  _BOOL4 v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  NSObject *v66;
  objc_class *v67;
  int v68;
  const char *v69;
  const char *v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  id v74;
  void *v75;
  void *v76;
  uint64_t v77;
  void (*v78)(uint64_t, const char *, ...);
  objc_class *v79;
  _BOOL4 v80;
  const char *v81;
  const char *v82;
  objc_class *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  NSObject *v87;
  objc_class *v88;
  int v89;
  const char *v90;
  const char *v91;
  objc_class *v92;
  void *v93;
  uint64_t v94;
  void (*v95)(uint64_t, const char *, ...);
  objc_class *v96;
  _BOOL4 v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  NSObject *v101;
  objc_class *v102;
  int v103;
  const char *v104;
  const char *v105;
  uint64_t v106;
  id v107;
  void *v108;
  id v109;
  uint64_t v110;
  NSObject *v111;
  void *v112;
  objc_class *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  id v119;
  objc_class *v120;
  void *v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  _BOOL4 v126;
  void *v127;
  id v128;
  void *v129;
  uint64_t v130;
  void (*v131)(uint64_t, const char *, ...);
  objc_class *v132;
  _BOOL4 v133;
  const char *v134;
  const char *v135;
  objc_class *v136;
  objc_class *v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  NSObject *v141;
  objc_class *v142;
  int v143;
  const char *v144;
  const char *v145;
  objc_class *v146;
  objc_class *v147;
  objc_class *v148;
  void *v149;
  uint64_t v150;
  void (*v151)(uint64_t, const char *, ...);
  objc_class *v152;
  _BOOL4 v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  NSObject *v157;
  objc_class *v158;
  int v159;
  const char *v160;
  const char *v161;
  uint64_t v162;
  id v163;
  void *v164;
  uint64_t v165;
  _BOOL8 v166;
  void *v167;
  uint64_t v168;
  void (*v169)(uint64_t, const char *, ...);
  objc_class *v170;
  _BOOL4 v171;
  const char *v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  NSObject *v176;
  objc_class *v177;
  int v178;
  const char *v179;
  const char *v180;
  id v181;
  void *v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  id v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  id v193;
  objc_class *v194;
  void *v195;
  uint64_t v196;
  void (*v197)(uint64_t, const char *, ...);
  objc_class *v198;
  _BOOL4 v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  NSObject *v203;
  objc_class *v204;
  int v205;
  const char *v206;
  const char *v207;
  void *v208;
  id v209;
  void *v210;
  void *v211;
  id v212;
  void *v213;
  uint64_t v214;
  void (*v215)(uint64_t, const char *, ...);
  objc_class *v216;
  _BOOL4 v217;
  const char *v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  NSObject *v222;
  objc_class *v223;
  int v224;
  const char *v225;
  const char *v226;
  void *v227;
  uint64_t v228;
  void (*v229)(uint64_t, const char *, ...);
  objc_class *v230;
  _BOOL4 v231;
  uint64_t v232;
  void *v233;
  uint64_t v234;
  NSObject *v235;
  objc_class *v236;
  int v237;
  const char *v238;
  const char *v239;
  void *v240;
  void *v241;
  void *v242;
  uint64_t v243;
  void (*v244)(uint64_t, const char *, ...);
  objc_class *v245;
  _BOOL4 v246;
  const char *v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  NSObject *v251;
  objc_class *v252;
  int v253;
  const char *v254;
  const char *v255;
  id v256;
  void *v257;
  void *v258;
  uint64_t v259;
  void (*v260)(uint64_t, const char *, ...);
  objc_class *v261;
  _BOOL4 v262;
  const char *v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  NSObject *v267;
  objc_class *v268;
  int v269;
  const char *v270;
  const char *v271;
  id v272;
  void *v273;
  uint64_t v274;
  NSObject *v275;
  void *v276;
  objc_class *v277;
  void *v278;
  id v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  NSObject *v283;
  _BOOL4 v284;
  objc_class *v285;
  void *v286;
  uint64_t v287;
  void (*v288)(uint64_t, const char *, ...);
  objc_class *v289;
  _BOOL4 v290;
  uint64_t v291;
  void *v292;
  uint64_t v293;
  NSObject *v294;
  objc_class *v295;
  int v296;
  const char *v297;
  const char *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  id v304;
  uint64_t v305;
  objc_class *v306;
  void *v307;
  uint64_t v308;
  void (*v309)(uint64_t, const char *, ...);
  objc_class *v310;
  _BOOL4 v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  NSObject *v315;
  objc_class *v316;
  int v317;
  const char *v318;
  const char *v319;
  id v320;
  void *v321;
  uint64_t v322;
  void *v323;
  const char *v324;
  const char *v325;
  const char *v326;
  const char *v327;
  const char *v328;
  const char *v329;
  const char *v330;
  const char *Name;
  const char *v332;
  const char *v333;
  const char *v334;
  const char *v335;
  const char *v336;
  const char *v337;
  const char *v338;
  const char *v339;
  const char *v340;
  const char *v341;
  const char *v342;
  id v343;
  objc_class *v344;
  id v345;
  id v346;
  id v347;
  const __CFString *v348;
  NSObject *v349;
  _QWORD v350[4];
  _QWORD v351[4];
  uint8_t buf[4];
  int v353;
  __int16 v354;
  const char *v355;
  __int16 v356;
  const char *v357;
  __int16 v358;
  int v359;
  __int16 v360;
  objc_class *v361;
  __int16 v362;
  objc_class *v363;
  _QWORD v364[4];
  _QWORD v365[4];
  _QWORD v366[4];
  _QWORD v367[4];
  _QWORD v368[4];
  _QWORD v369[4];
  _QWORD v370[4];
  _QWORD v371[4];
  _QWORD v372[4];
  _QWORD v373[4];
  _QWORD v374[4];
  _QWORD v375[4];
  _QWORD v376[4];
  _QWORD v377[4];
  _QWORD v378[4];
  _QWORD v379[4];
  _QWORD v380[4];
  _QWORD v381[4];
  _QWORD v382[4];
  _QWORD v383[4];
  NSErrorUserInfoKey v384;
  objc_class *v385;

  if (!*(_QWORD *)(a1 + 72))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v27 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 80));
      v31 = 45;
      if (isMetaClass)
        v31 = 43;
      v27(3, "%c[%{public}s %{public}s]:%i Could not sign with nil callback", v31, ClassName, Name, 999);
    }
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = NFSharedLogGetLogger(v32);
    v21 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v34 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v34))
        v35 = 43;
      else
        v35 = 45;
      v36 = object_getClassName(*(id *)(a1 + 32));
      v37 = sel_getName(*(SEL *)(a1 + 80));
      *(_DWORD *)buf = 67109890;
      v353 = v35;
      v354 = 2082;
      v355 = v36;
      v356 = 2082;
      v357 = v37;
      v358 = 1024;
      v359 = 999;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not sign with nil callback", buf, 0x22u);
    }
    goto LABEL_26;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDB"));
    if (v38
      && (v39 = (void *)v38,
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDBApplet")),
          v40,
          v39,
          v40))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v41 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDB"));
        v42 = *(void **)(a1 + 40);
        v347 = 0;
        v43 = sub_100030AF4(v41, v42, &v347);
        v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
        v21 = v347;

        if (v44)
        {
          v378[0] = CFSTR("purpleTrustOperationType");
          v378[1] = CFSTR("purpleTrustOperationErrorStep");
          v379[0] = &off_1002FEC10;
          v379[1] = &off_1002FEC28;
          v379[2] = &off_1002FEA30;
          v378[2] = CFSTR("purpleTrustOperationCAErrorCode");
          v378[3] = CFSTR("purpleTrustOperationErrorCode");
          v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v44, "code")));
          v379[3] = v45;
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v379, v378, 4));

          sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v46);
          +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306510);
LABEL_33:
          (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
LABEL_34:

LABEL_35:
          goto LABEL_26;
        }
        if (!v21)
        {
          v74 = sub_100130B78(*(void **)(a1 + 40));
          v21 = objc_claimAutoreleasedReturnValue(v74);
          v376[0] = CFSTR("purpleTrustOperationType");
          v376[1] = CFSTR("purpleTrustOperationErrorStep");
          v377[0] = &off_1002FEC10;
          v377[1] = &off_1002FEC28;
          v377[2] = &off_1002FEAD8;
          v376[2] = CFSTR("purpleTrustOperationCAErrorCode");
          v376[3] = CFSTR("purpleTrustOperationErrorCode");
          v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
          v377[3] = v75;
          v22 = (objc_class *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v377, v376, 4));

          sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v22);
          (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
          goto LABEL_16;
        }
        v56 = v21[3].isa;

        if (!v56)
        {
          v76 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v77 = NFLogGetLogger(v76);
          if (v77)
          {
            v78 = (void (*)(uint64_t, const char *, ...))v77;
            v79 = object_getClass(*(id *)(a1 + 32));
            v80 = class_isMetaClass(v79);
            v81 = object_getClassName(*(id *)(a1 + 32));
            v82 = sel_getName(*(SEL *)(a1 + 80));
            v83 = v21[1].isa;
            v84 = 45;
            if (v80)
              v84 = 43;
            v78(3, "%c[%{public}s %{public}s]:%i Key %{public}@ has nil keyAttestation, looks like previous delete didn't finish correctly, try to delete again ...", v84, v81, v82, 1099, v83);

          }
          v85 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v86 = NFSharedLogGetLogger(v85);
          v87 = objc_claimAutoreleasedReturnValue(v86);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
          {
            v88 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v88))
              v89 = 43;
            else
              v89 = 45;
            v90 = object_getClassName(*(id *)(a1 + 32));
            v91 = sel_getName(*(SEL *)(a1 + 80));
            v92 = v21[1].isa;
            *(_DWORD *)buf = 67110146;
            v353 = v89;
            v354 = 2082;
            v355 = v90;
            v356 = 2082;
            v357 = v91;
            v358 = 1024;
            v359 = 1099;
            v360 = 2114;
            v361 = v92;
            _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Key %{public}@ has nil keyAttestation, looks like previous delete didn't finish correctly, try to delete again ...", buf, 0x2Cu);

          }
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deleteDBKey:", v21));
          if (v44)
          {
            v93 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v94 = NFLogGetLogger(v93);
            if (v94)
            {
              v95 = (void (*)(uint64_t, const char *, ...))v94;
              v96 = object_getClass(*(id *)(a1 + 32));
              v97 = class_isMetaClass(v96);
              v325 = object_getClassName(*(id *)(a1 + 32));
              v333 = sel_getName(*(SEL *)(a1 + 80));
              v98 = 45;
              if (v97)
                v98 = 43;
              v95(3, "%c[%{public}s %{public}s]:%i Delete failed : %{public}@", v98, v325, v333, 1102, v44);
            }
            v99 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v100 = NFSharedLogGetLogger(v99);
            v101 = objc_claimAutoreleasedReturnValue(v100);
            if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
            {
              v102 = object_getClass(*(id *)(a1 + 32));
              if (class_isMetaClass(v102))
                v103 = 43;
              else
                v103 = 45;
              v104 = object_getClassName(*(id *)(a1 + 32));
              v105 = sel_getName(*(SEL *)(a1 + 80));
              *(_DWORD *)buf = 67110146;
              v353 = v103;
              v354 = 2082;
              v355 = v104;
              v356 = 2082;
              v357 = v105;
              v358 = 1024;
              v359 = 1102;
              v360 = 2114;
              v361 = (objc_class *)v44;
              _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Delete failed : %{public}@", buf, 0x2Cu);
            }

          }
          v106 = *(_QWORD *)(a1 + 72);
          v107 = sub_100130B78(*(void **)(a1 + 40));
          v108 = (void *)objc_claimAutoreleasedReturnValue(v107);
          (*(void (**)(uint64_t, _QWORD, void *))(v106 + 16))(v106, 0, v108);

          goto LABEL_35;
        }
        if (!*(_QWORD *)(a1 + 48))
        {
          v109 = sub_100130D58(CFSTR("signRequest is nil"));
          v44 = (void *)objc_claimAutoreleasedReturnValue(v109);
          v374[0] = CFSTR("purpleTrustOperationType");
          v374[1] = CFSTR("purpleTrustOperationErrorStep");
          v375[0] = &off_1002FEC10;
          v375[1] = &off_1002FEC28;
          v375[2] = &off_1002FEAA8;
          v374[2] = CFSTR("purpleTrustOperationCAErrorCode");
          v374[3] = CFSTR("purpleTrustOperationErrorCode");
          v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v44, "code")));
          v375[3] = v71;
          v72 = v375;
          v73 = v374;
LABEL_77:
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v72, v73, 4));

          sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v46);
          goto LABEL_33;
        }
        v57 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectInstance"));
        if (v57)
        {
          v44 = (void *)v57;
          v58 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v59 = NFLogGetLogger(v58);
          if (v59)
          {
            v60 = (void (*)(uint64_t, const char *, ...))v59;
            v61 = object_getClass(*(id *)(a1 + 32));
            v62 = class_isMetaClass(v61);
            v324 = object_getClassName(*(id *)(a1 + 32));
            v332 = sel_getName(*(SEL *)(a1 + 80));
            v63 = 45;
            if (v62)
              v63 = 43;
            v60(3, "%c[%{public}s %{public}s]:%i Failed to select instance : %{public}@", v63, v324, v332, 1136, v44);
          }
          v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v65 = NFSharedLogGetLogger(v64);
          v66 = objc_claimAutoreleasedReturnValue(v65);
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            v67 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v67))
              v68 = 43;
            else
              v68 = 45;
            v69 = object_getClassName(*(id *)(a1 + 32));
            v70 = sel_getName(*(SEL *)(a1 + 80));
            *(_DWORD *)buf = 67110146;
            v353 = v68;
            v354 = 2082;
            v355 = v69;
            v356 = 2082;
            v357 = v70;
            v358 = 1024;
            v359 = 1136;
            v360 = 2114;
            v361 = (objc_class *)v44;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select instance : %{public}@", buf, 0x2Cu);
          }

          v372[0] = CFSTR("purpleTrustOperationType");
          v372[1] = CFSTR("purpleTrustOperationErrorStep");
          v373[0] = &off_1002FEC10;
          v373[1] = &off_1002FEC40;
          v373[2] = &off_1002FEB80;
          v372[2] = CFSTR("purpleTrustOperationCAErrorCode");
          v372[3] = CFSTR("purpleTrustOperationErrorCode");
          v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v44, "code")));
          v373[3] = v71;
          v72 = v373;
          v73 = v372;
          goto LABEL_77;
        }
        if (*(_QWORD *)(a1 + 56))
        {
LABEL_79:
          v110 = NFSharedSignpostLog(objc_msgSend(*(id *)(a1 + 32), "setIsInstanceSelected:", 0));
          v111 = objc_claimAutoreleasedReturnValue(v110);
          if (os_signpost_enabled(v111))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v111, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "signWithKeyInSlotAID", "", buf, 2u);
          }

          v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secureElementWrapper"));
          v113 = v21[4].isa;
          v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDBApplet"));
          v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "instanceAID"));
          v117 = *(void **)(a1 + 56);
          v116 = *(void **)(a1 + 64);
          v118 = *(void **)(a1 + 48);
          v119 = objc_msgSend(*(id *)(a1 + 32), "uid");
          v345 = 0;
          v120 = sub_1000B05C0(v112, v113, v115, v118, v116, v117, (uint64_t)v119, &v345);
          v121 = (void *)objc_claimAutoreleasedReturnValue(v120);
          v122 = v345;

          v124 = NFSharedSignpostLog(v123);
          v125 = objc_claimAutoreleasedReturnValue(v124);
          v126 = os_signpost_enabled(v125);
          if (!v121)
          {
            if (v126)
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v125, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "signWithKeyInSlotAID", "", buf, 2u);
            }

            v188 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "signResponse"));
            v189 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v188, "counterValue"));

            if (v189)
            {
              v190 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "signResponse"));
              v191 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v190, "counterValue"));
              sub_100032568((uint64_t)v21, v191);

            }
            v192 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDB"));
            v193 = sub_10002F654((uint64_t)v192);
            v194 = (objc_class *)objc_claimAutoreleasedReturnValue(v193);

            if (v194)
            {
              v195 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v196 = NFLogGetLogger(v195);
              if (v196)
              {
                v197 = (void (*)(uint64_t, const char *, ...))v196;
                v198 = object_getClass(*(id *)(a1 + 32));
                v199 = class_isMetaClass(v198);
                v327 = object_getClassName(*(id *)(a1 + 32));
                v336 = sel_getName(*(SEL *)(a1 + 80));
                v200 = 45;
                if (v199)
                  v200 = 43;
                v197(3, "%c[%{public}s %{public}s]:%i Failed to commit NFTrustDB : %{public}@ -- Counter is out of sync", v200, v327, v336, 1326, v194);
              }
              v201 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v202 = NFSharedLogGetLogger(v201);
              v203 = objc_claimAutoreleasedReturnValue(v202);
              if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR))
              {
                v204 = object_getClass(*(id *)(a1 + 32));
                if (class_isMetaClass(v204))
                  v205 = 43;
                else
                  v205 = 45;
                v206 = object_getClassName(*(id *)(a1 + 32));
                v207 = sel_getName(*(SEL *)(a1 + 80));
                *(_DWORD *)buf = 67110146;
                v353 = v205;
                v354 = 2082;
                v355 = v206;
                v356 = 2082;
                v357 = v207;
                v358 = 1024;
                v359 = 1326;
                v360 = 2114;
                v361 = v194;
                _os_log_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to commit NFTrustDB : %{public}@ -- Counter is out of sync", buf, 0x2Cu);
              }

            }
            v208 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "signResponse"));
            v209 = sub_1000325BC((uint64_t)v21);
            v210 = (void *)objc_claimAutoreleasedReturnValue(v209);
            objc_msgSend(v208, "setKey:", v210);

            +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306560);
            v211 = *(void **)(a1 + 32);
            v344 = v194;
            v212 = objc_msgSend(v211, "getNumberOfKeys:", &v344);
            v148 = v344;

            if (v148)
            {
              v213 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v214 = NFLogGetLogger(v213);
              if (v214)
              {
                v215 = (void (*)(uint64_t, const char *, ...))v214;
                v216 = object_getClass(*(id *)(a1 + 32));
                v217 = class_isMetaClass(v216);
                v218 = object_getClassName(*(id *)(a1 + 32));
                v337 = sel_getName(*(SEL *)(a1 + 80));
                v219 = 45;
                if (v217)
                  v219 = 43;
                v215(3, "%c[%{public}s %{public}s]:%i Could not get number of keys to post CA notification", v219, v218, v337, 1338);
              }
              v220 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v221 = NFSharedLogGetLogger(v220);
              v222 = objc_claimAutoreleasedReturnValue(v221);
              if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
              {
                v223 = object_getClass(*(id *)(a1 + 32));
                if (class_isMetaClass(v223))
                  v224 = 43;
                else
                  v224 = 45;
                v225 = object_getClassName(*(id *)(a1 + 32));
                v226 = sel_getName(*(SEL *)(a1 + 80));
                *(_DWORD *)buf = 67109890;
                v353 = v224;
                v354 = 2082;
                v355 = v225;
                v356 = 2082;
                v357 = v226;
                v358 = 1024;
                v359 = 1338;
                _os_log_impl((void *)&_mh_execute_header, v222, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not get number of keys to post CA notification", buf, 0x22u);
              }
            }
            else
            {
              v348 = CFSTR("totalPurpleTrustKeys");
              v222 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v212));
              v349 = v222;
              v273 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v349, &v348, 1));
              +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:](NFGeneralStatisticsCALogger, "updateGeneralDeviceStatistic:", v273);

            }
            (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
            goto LABEL_181;
          }
          if (v126)
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v125, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "signWithKeyInSlotAID", "failed", buf, 2u);
          }

          v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v121, "domain"));
          if (objc_msgSend(v127, "isEqualToString:", CFSTR("GP")))
          {
            v128 = objc_msgSend(v121, "code");

            if (v128 == (id)27272)
            {
              v343 = v122;
              v129 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v130 = NFLogGetLogger(v129);
              if (v130)
              {
                v131 = (void (*)(uint64_t, const char *, ...))v130;
                v132 = object_getClass(*(id *)(a1 + 32));
                v133 = class_isMetaClass(v132);
                v134 = object_getClassName(*(id *)(a1 + 32));
                v135 = sel_getName(*(SEL *)(a1 + 80));
                v136 = v21[1].isa;
                v137 = v21[4].isa;
                v138 = 45;
                if (v133)
                  v138 = 43;
                v131(3, "%c[%{public}s %{public}s]:%i Key with identifier %{public}@ is supposed to be in slot %{public}@ but slot is empty, deleting key from database ...", v138, v134, v135, 1290, v136, v137);

              }
              v139 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v140 = NFSharedLogGetLogger(v139);
              v141 = objc_claimAutoreleasedReturnValue(v140);
              if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
              {
                v142 = object_getClass(*(id *)(a1 + 32));
                if (class_isMetaClass(v142))
                  v143 = 43;
                else
                  v143 = 45;
                v144 = object_getClassName(*(id *)(a1 + 32));
                v145 = sel_getName(*(SEL *)(a1 + 80));
                v146 = v21[1].isa;
                v147 = v21[4].isa;
                *(_DWORD *)buf = 67110402;
                v353 = v143;
                v354 = 2082;
                v355 = v144;
                v356 = 2082;
                v357 = v145;
                v358 = 1024;
                v359 = 1290;
                v360 = 2114;
                v361 = v146;
                v362 = 2114;
                v363 = v147;
                _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Key with identifier %{public}@ is supposed to be in slot %{public}@ but slot is empty, deleting key from database ...", buf, 0x36u);

              }
              v148 = (objc_class *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deleteDBKey:", v21));

              if (v148)
              {
                v149 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v150 = NFLogGetLogger(v149);
                if (v150)
                {
                  v151 = (void (*)(uint64_t, const char *, ...))v150;
                  v152 = object_getClass(*(id *)(a1 + 32));
                  v153 = class_isMetaClass(v152);
                  v326 = object_getClassName(*(id *)(a1 + 32));
                  v334 = sel_getName(*(SEL *)(a1 + 80));
                  v154 = 45;
                  if (v153)
                    v154 = 43;
                  v151(3, "%c[%{public}s %{public}s]:%i Could not delete dbKey : %{public}@", v154, v326, v334, 1293, v148);
                }
                v155 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v156 = NFSharedLogGetLogger(v155);
                v157 = objc_claimAutoreleasedReturnValue(v156);
                if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
                {
                  v158 = object_getClass(*(id *)(a1 + 32));
                  if (class_isMetaClass(v158))
                    v159 = 43;
                  else
                    v159 = 45;
                  v160 = object_getClassName(*(id *)(a1 + 32));
                  v161 = sel_getName(*(SEL *)(a1 + 80));
                  *(_DWORD *)buf = 67110146;
                  v353 = v159;
                  v354 = 2082;
                  v355 = v160;
                  v356 = 2082;
                  v357 = v161;
                  v358 = 1024;
                  v359 = 1293;
                  v360 = 2114;
                  v361 = v148;
                  _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not delete dbKey : %{public}@", buf, 0x2Cu);
                }

              }
              v162 = *(_QWORD *)(a1 + 72);
              v163 = sub_100130B78(*(void **)(a1 + 40));
              v164 = (void *)objc_claimAutoreleasedReturnValue(v163);
              (*(void (**)(uint64_t, _QWORD, void *))(v162 + 16))(v162, 0, v164);

              v122 = v343;
LABEL_181:

              goto LABEL_26;
            }
          }
          else
          {

          }
          v227 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v228 = NFLogGetLogger(v227);
          if (v228)
          {
            v229 = (void (*)(uint64_t, const char *, ...))v228;
            v230 = object_getClass(*(id *)(a1 + 32));
            v231 = class_isMetaClass(v230);
            v328 = object_getClassName(*(id *)(a1 + 32));
            v338 = sel_getName(*(SEL *)(a1 + 80));
            v232 = 45;
            if (v231)
              v232 = 43;
            v229(3, "%c[%{public}s %{public}s]:%i Failed to sign with Key : %{public}@ ...", v232, v328, v338, 1301, v121);
          }
          v233 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v234 = NFSharedLogGetLogger(v233);
          v235 = objc_claimAutoreleasedReturnValue(v234);
          if (os_log_type_enabled(v235, OS_LOG_TYPE_ERROR))
          {
            v236 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v236))
              v237 = 43;
            else
              v237 = 45;
            v238 = object_getClassName(*(id *)(a1 + 32));
            v239 = sel_getName(*(SEL *)(a1 + 80));
            *(_DWORD *)buf = 67110146;
            v353 = v237;
            v354 = 2082;
            v355 = v238;
            v356 = 2082;
            v357 = v239;
            v358 = 1024;
            v359 = 1301;
            v360 = 2114;
            v361 = (objc_class *)v121;
            _os_log_impl((void *)&_mh_execute_header, v235, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to sign with Key : %{public}@ ...", buf, 0x2Cu);
          }

          v350[0] = CFSTR("purpleTrustOperationType");
          v350[1] = CFSTR("purpleTrustOperationErrorStep");
          v351[0] = &off_1002FEC10;
          v351[1] = &off_1002FECB8;
          v351[2] = &off_1002FEA30;
          v350[2] = CFSTR("purpleTrustOperationCAErrorCode");
          v350[3] = CFSTR("purpleTrustOperationErrorCode");
          v240 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v121, "code")));
          v351[3] = v240;
          v241 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v351, v350, 4));

          sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v241);
          +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306538);
          (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

          v148 = (objc_class *)v121;
          goto LABEL_181;
        }
        v165 = *(_QWORD *)(a1 + 64);
        v166 = sub_100032580(v21);
        if (v165)
        {
          if (v166)
          {
            v167 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v168 = NFLogGetLogger(v167);
            if (v168)
            {
              v169 = (void (*)(uint64_t, const char *, ...))v168;
              v170 = object_getClass(*(id *)(a1 + 32));
              v171 = class_isMetaClass(v170);
              v172 = object_getClassName(*(id *)(a1 + 32));
              v335 = sel_getName(*(SEL *)(a1 + 80));
              v173 = 45;
              if (v171)
                v173 = 43;
              v169(3, "%c[%{public}s %{public}s]:%i Could not sign, NFTrustKey requires local validation", v173, v172, v335, 1225);
            }
            v174 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v175 = NFSharedLogGetLogger(v174);
            v176 = objc_claimAutoreleasedReturnValue(v175);
            if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
            {
              v177 = object_getClass(*(id *)(a1 + 32));
              if (class_isMetaClass(v177))
                v178 = 43;
              else
                v178 = 45;
              v179 = object_getClassName(*(id *)(a1 + 32));
              v180 = sel_getName(*(SEL *)(a1 + 80));
              *(_DWORD *)buf = 67109890;
              v353 = v178;
              v354 = 2082;
              v355 = v179;
              v356 = 2082;
              v357 = v180;
              v358 = 1024;
              v359 = 1225;
              _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not sign, NFTrustKey requires local validation", buf, 0x22u);
            }

            v181 = sub_1001309AC();
            v44 = (void *)objc_claimAutoreleasedReturnValue(v181);
            v366[0] = CFSTR("purpleTrustOperationType");
            v366[1] = CFSTR("purpleTrustOperationErrorStep");
            v367[0] = &off_1002FEC10;
            v367[1] = &off_1002FEC58;
            v367[2] = &off_1002FEC70;
            v366[2] = CFSTR("purpleTrustOperationCAErrorCode");
            v366[3] = CFSTR("purpleTrustOperationErrorCode");
            v182 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v44, "code")));
            v367[3] = v182;
            v183 = v367;
            v184 = v366;
          }
          else
          {
            if (*(_QWORD *)(a1 + 56) || !*(_QWORD *)(a1 + 64))
              goto LABEL_79;
            v258 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v259 = NFLogGetLogger(v258);
            if (v259)
            {
              v260 = (void (*)(uint64_t, const char *, ...))v259;
              v261 = object_getClass(*(id *)(a1 + 32));
              v262 = class_isMetaClass(v261);
              v263 = object_getClassName(*(id *)(a1 + 32));
              v340 = sel_getName(*(SEL *)(a1 + 80));
              v264 = 45;
              if (v262)
                v264 = 43;
              v260(3, "%c[%{public}s %{public}s]:%i Could not sign, NFECommercePaymentRequest requires local validation", v264, v263, v340, 1247);
            }
            v265 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v266 = NFSharedLogGetLogger(v265);
            v267 = objc_claimAutoreleasedReturnValue(v266);
            if (os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
            {
              v268 = object_getClass(*(id *)(a1 + 32));
              if (class_isMetaClass(v268))
                v269 = 43;
              else
                v269 = 45;
              v270 = object_getClassName(*(id *)(a1 + 32));
              v271 = sel_getName(*(SEL *)(a1 + 80));
              *(_DWORD *)buf = 67109890;
              v353 = v269;
              v354 = 2082;
              v355 = v270;
              v356 = 2082;
              v357 = v271;
              v358 = 1024;
              v359 = 1247;
              _os_log_impl((void *)&_mh_execute_header, v267, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not sign, NFECommercePaymentRequest requires local validation", buf, 0x22u);
            }

            v272 = sub_1001309AC();
            v44 = (void *)objc_claimAutoreleasedReturnValue(v272);
            v364[0] = CFSTR("purpleTrustOperationType");
            v364[1] = CFSTR("purpleTrustOperationErrorStep");
            v365[0] = &off_1002FEC10;
            v365[1] = &off_1002FEC58;
            v365[2] = &off_1002FEC70;
            v364[2] = CFSTR("purpleTrustOperationCAErrorCode");
            v364[3] = CFSTR("purpleTrustOperationErrorCode");
            v182 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v44, "code")));
            v365[3] = v182;
            v183 = v365;
            v184 = v364;
          }
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v183, v184, 4));

          sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v46);
          v185 = *(_QWORD *)(a1 + 72);
          v186 = sub_1001309AC();
          v187 = (void *)objc_claimAutoreleasedReturnValue(v186);
          (*(void (**)(uint64_t, _QWORD, void *))(v185 + 16))(v185, 0, v187);

          goto LABEL_34;
        }
        if (v166)
        {
          v242 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v243 = NFLogGetLogger(v242);
          if (v243)
          {
            v244 = (void (*)(uint64_t, const char *, ...))v243;
            v245 = object_getClass(*(id *)(a1 + 32));
            v246 = class_isMetaClass(v245);
            v247 = object_getClassName(*(id *)(a1 + 32));
            v339 = sel_getName(*(SEL *)(a1 + 80));
            v248 = 45;
            if (v246)
              v248 = 43;
            v244(3, "%c[%{public}s %{public}s]:%i Could not sign, NFTrustKey requires local validation", v248, v247, v339, 1161);
          }
          v249 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v250 = NFSharedLogGetLogger(v249);
          v251 = objc_claimAutoreleasedReturnValue(v250);
          if (os_log_type_enabled(v251, OS_LOG_TYPE_ERROR))
          {
            v252 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v252))
              v253 = 43;
            else
              v253 = 45;
            v254 = object_getClassName(*(id *)(a1 + 32));
            v255 = sel_getName(*(SEL *)(a1 + 80));
            *(_DWORD *)buf = 67109890;
            v353 = v253;
            v354 = 2082;
            v355 = v254;
            v356 = 2082;
            v357 = v255;
            v358 = 1024;
            v359 = 1161;
            _os_log_impl((void *)&_mh_execute_header, v251, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not sign, NFTrustKey requires local validation", buf, 0x22u);
          }

          v256 = sub_1001309AC();
          v22 = (objc_class *)objc_claimAutoreleasedReturnValue(v256);
          v370[0] = CFSTR("purpleTrustOperationType");
          v370[1] = CFSTR("purpleTrustOperationErrorStep");
          v371[0] = &off_1002FEC10;
          v371[1] = &off_1002FEC58;
          v371[2] = &off_1002FEC70;
          v370[2] = CFSTR("purpleTrustOperationCAErrorCode");
          v370[3] = CFSTR("purpleTrustOperationErrorCode");
          v257 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[objc_class code](v22, "code")));
          v371[3] = v257;
          v52 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v371, v370, 4));

          sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v52);
          (*(void (**)(_QWORD, _QWORD, objc_class *))(*(_QWORD *)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), 0, v22);
        }
        else
        {
          v274 = NFSharedSignpostLog(v166);
          v275 = objc_claimAutoreleasedReturnValue(v274);
          if (os_signpost_enabled(v275))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v275, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "signWithKeyInSlotRequest", "", buf, 2u);
          }

          v276 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secureElementWrapper"));
          v277 = v21[4].isa;
          v278 = *(void **)(a1 + 48);
          v346 = 0;
          v279 = sub_1000B00CC(v276, v277, v278, &v346);
          v280 = objc_claimAutoreleasedReturnValue(v279);
          v52 = v346;

          v282 = NFSharedSignpostLog(v281);
          v283 = objc_claimAutoreleasedReturnValue(v282);
          v284 = os_signpost_enabled(v283);
          if (v280)
          {
            v285 = (objc_class *)v280;
            if (v284)
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v283, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "signWithKeyInSlotRequest", "failed", buf, 2u);
            }

            v286 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v287 = NFLogGetLogger(v286);
            if (v287)
            {
              v288 = (void (*)(uint64_t, const char *, ...))v287;
              v289 = object_getClass(*(id *)(a1 + 32));
              v290 = class_isMetaClass(v289);
              v329 = object_getClassName(*(id *)(a1 + 32));
              v341 = sel_getName(*(SEL *)(a1 + 80));
              v291 = 45;
              if (v290)
                v291 = 43;
              v288(3, "%c[%{public}s %{public}s]:%i Failed to sign without LocalValidation : %{public}@", v291, v329, v341, 1190, v280);
            }
            v292 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v293 = NFSharedLogGetLogger(v292);
            v294 = objc_claimAutoreleasedReturnValue(v293);
            if (os_log_type_enabled(v294, OS_LOG_TYPE_ERROR))
            {
              v295 = object_getClass(*(id *)(a1 + 32));
              if (class_isMetaClass(v295))
                v296 = 43;
              else
                v296 = 45;
              v297 = object_getClassName(*(id *)(a1 + 32));
              v298 = sel_getName(*(SEL *)(a1 + 80));
              *(_DWORD *)buf = 67110146;
              v353 = v296;
              v354 = 2082;
              v355 = v297;
              v356 = 2082;
              v357 = v298;
              v358 = 1024;
              v359 = 1190;
              v360 = 2114;
              v361 = v285;
              _os_log_impl((void *)&_mh_execute_header, v294, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to sign without LocalValidation : %{public}@", buf, 0x2Cu);
            }

            v368[0] = CFSTR("purpleTrustOperationType");
            v368[1] = CFSTR("purpleTrustOperationErrorStep");
            v369[0] = &off_1002FEC10;
            v369[1] = &off_1002FEC88;
            v369[2] = &off_1002FECA0;
            v368[2] = CFSTR("purpleTrustOperationCAErrorCode");
            v368[3] = CFSTR("purpleTrustOperationErrorCode");
            v299 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[objc_class code](v285, "code")));
            v369[3] = v299;
            v300 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v369, v368, 4));

            sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v300);
            v22 = v285;
            (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

          }
          else
          {
            if (v284)
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v283, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "signWithKeyInSlotRequest", "", buf, 2u);
            }

            v301 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "counterValue"));
            if (v301)
            {
              v302 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "counterValue"));
              sub_100032568((uint64_t)v21, v302);

            }
            v303 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustDB"));
            v304 = sub_10002F654((uint64_t)v303);
            v305 = objc_claimAutoreleasedReturnValue(v304);

            v306 = (objc_class *)v305;
            if (v305)
            {
              v307 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v308 = NFLogGetLogger(v307);
              if (v308)
              {
                v309 = (void (*)(uint64_t, const char *, ...))v308;
                v310 = object_getClass(*(id *)(a1 + 32));
                v311 = class_isMetaClass(v310);
                v330 = object_getClassName(*(id *)(a1 + 32));
                v342 = sel_getName(*(SEL *)(a1 + 80));
                v312 = 45;
                if (v311)
                  v312 = 43;
                v309(3, "%c[%{public}s %{public}s]:%i Failed to commit NFTrustDB : %{public}@ -- Counter is out of sync", v312, v330, v342, 1214, v306);
              }
              v313 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v314 = NFSharedLogGetLogger(v313);
              v315 = objc_claimAutoreleasedReturnValue(v314);
              if (os_log_type_enabled(v315, OS_LOG_TYPE_ERROR))
              {
                v316 = object_getClass(*(id *)(a1 + 32));
                if (class_isMetaClass(v316))
                  v317 = 43;
                else
                  v317 = 45;
                v318 = object_getClassName(*(id *)(a1 + 32));
                v319 = sel_getName(*(SEL *)(a1 + 80));
                *(_DWORD *)buf = 67110146;
                v353 = v317;
                v354 = 2082;
                v355 = v318;
                v356 = 2082;
                v357 = v319;
                v358 = 1024;
                v359 = 1214;
                v360 = 2114;
                v361 = v306;
                _os_log_impl((void *)&_mh_execute_header, v315, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to commit NFTrustDB : %{public}@ -- Counter is out of sync", buf, 0x2Cu);
              }

            }
            v320 = sub_1000325BC((uint64_t)v21);
            v321 = (void *)objc_claimAutoreleasedReturnValue(v320);
            objc_msgSend(v52, "setKey:", v321);

            v322 = *(_QWORD *)(a1 + 72);
            v323 = (void *)objc_claimAutoreleasedReturnValue(+[NFTrustPaymentSignResponse paymentSignResponseWithSignResponse:paymentResponse:](NFTrustPaymentSignResponse, "paymentSignResponseWithSignResponse:paymentResponse:", v52, 0));
            (*(void (**)(uint64_t, void *, _QWORD))(v322 + 16))(v322, v323, 0);

            v22 = v306;
          }
        }
LABEL_38:

        goto LABEL_16;
      }
      v53 = sub_100130D58(CFSTR("keyIdentifier is nil"));
      v21 = objc_claimAutoreleasedReturnValue(v53);
      v380[0] = CFSTR("purpleTrustOperationType");
      v380[1] = CFSTR("purpleTrustOperationErrorStep");
      v381[0] = &off_1002FEC10;
      v381[1] = &off_1002FEC10;
      v381[2] = &off_1002FEAA8;
      v380[2] = CFSTR("purpleTrustOperationCAErrorCode");
      v380[3] = CFSTR("purpleTrustOperationErrorCode");
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
      v381[3] = v54;
      v22 = (objc_class *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v381, v380, 4));

      sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v22);
      v49 = *(_QWORD *)(a1 + 72);
      v55 = sub_100130D58(CFSTR("Could not sign with nil identifier"));
      v51 = objc_claimAutoreleasedReturnValue(v55);
    }
    else
    {
      v47 = sub_1001308D0();
      v21 = objc_claimAutoreleasedReturnValue(v47);
      v382[0] = CFSTR("purpleTrustOperationType");
      v382[1] = CFSTR("purpleTrustOperationErrorStep");
      v383[0] = &off_1002FEC10;
      v383[1] = &off_1002FEC10;
      v383[2] = &off_1002FEA30;
      v382[2] = CFSTR("purpleTrustOperationCAErrorCode");
      v382[3] = CFSTR("purpleTrustOperationErrorCode");
      v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSObject code](v21, "code")));
      v383[3] = v48;
      v22 = (objc_class *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v383, v382, 4));

      sub_1001ECCDC((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v22);
      +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_1003064E8);
      v49 = *(_QWORD *)(a1 + 72);
      v50 = sub_1001308D0();
      v51 = objc_claimAutoreleasedReturnValue(v50);
    }
    v52 = (id)v51;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v49 + 16))(v49, 0, v51);
    goto LABEL_38;
  }
  v2 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v3 = NFLogGetLogger(v2);
  if (v3)
  {
    v4 = (void (*)(uint64_t, const char *, ...))v3;
    v5 = object_getClass(*(id *)(a1 + 32));
    v6 = class_isMetaClass(v5);
    v7 = object_getClassName(*(id *)(a1 + 32));
    v8 = sel_getName(*(SEL *)(a1 + 80));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (v6)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, v7, v8, 1003, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 80));
    v18 = (objc_class *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v353 = v15;
    v354 = 2082;
    v355 = v16;
    v356 = 2082;
    v357 = v17;
    v358 = 1024;
    v359 = 1003;
    v360 = 2114;
    v361 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 72);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v384 = NSLocalizedDescriptionKey;
    v22 = (objc_class *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v385 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v385, &v384, 1));
    v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
    (*(void (**)(uint64_t, _QWORD, id))(v19 + 16))(v19, 0, v24);

LABEL_16:
LABEL_26:

  }
}

