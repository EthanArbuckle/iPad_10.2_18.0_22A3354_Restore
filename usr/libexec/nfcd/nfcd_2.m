void sub_1001C5DFC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;

  v7 = a2;
  v8 = a3;
  if (a1)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001C5EC0;
    v9[3] = &unk_1002EAA40;
    v9[4] = a1;
    v12 = "notifySharingServicesClient:payload:retryCount:";
    v13 = a4;
    v10 = v7;
    v11 = v8;
    objc_msgSend(v10, "broadwayPresentCardWithCode:options:completion:", v11, 0, v9);

  }
}

void sub_1001C5EC0(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  dispatch_time_t v17;
  dispatch_queue_global_t global_queue;
  NSObject *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *v26;
  _BOOL4 v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  const char *v35;
  const char *v36;
  const char *ClassName;
  const char *Name;
  const char *v39;
  _QWORD block[5];
  id v41;
  id v42;
  uint64_t v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  id v53;

  v3 = a2;
  if (!v3)
  {
LABEL_23:
    objc_msgSend(*(id *)(a1 + 40), "invalidate");
    goto LABEL_24;
  }
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(5, "%c[%{public}s %{public}s]:%i error=%{public}@", v9, ClassName, Name, 36, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 56));
    *(_DWORD *)buf = 67110146;
    v45 = v14;
    v46 = 2082;
    v47 = v15;
    v48 = 2082;
    v49 = v16;
    v50 = 1024;
    v51 = 36;
    v52 = 2114;
    v53 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i error=%{public}@", buf, 0x2Cu);
  }

  if (!*(_QWORD *)(a1 + 64))
  {
    v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v24 = NFLogGetLogger(v23);
    if (v24)
    {
      v25 = (void (*)(uint64_t, const char *, ...))v24;
      v26 = object_getClass(*(id *)(a1 + 32));
      v27 = class_isMetaClass(v26);
      v28 = object_getClassName(*(id *)(a1 + 32));
      v39 = sel_getName(*(SEL *)(a1 + 56));
      v29 = 45;
      if (v27)
        v29 = 43;
      v25(3, "%c[%{public}s %{public}s]:%i Maximum retry count is reached; dropping notification",
        v29,
        v28,
        v39,
        38);
    }
    v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v31 = NFSharedLogGetLogger(v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v33))
        v34 = 43;
      else
        v34 = 45;
      v35 = object_getClassName(*(id *)(a1 + 32));
      v36 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      v45 = v34;
      v46 = 2082;
      v47 = v35;
      v48 = 2082;
      v49 = v36;
      v50 = 1024;
      v51 = 38;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Maximum retry count is reached; dropping notification",
        buf,
        0x22u);
    }

    goto LABEL_23;
  }
  v17 = dispatch_time(0, 100000000);
  global_queue = dispatch_get_global_queue(25, 0);
  v19 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001C6214;
  block[3] = &unk_1002E5CD0;
  v20 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v41 = v20;
  v21 = *(id *)(a1 + 48);
  v22 = *(_QWORD *)(a1 + 64);
  v42 = v21;
  v43 = v22;
  dispatch_after(v17, v19, block);

LABEL_24:
}

uint64_t sub_1001C6214(_QWORD *a1)
{
  return sub_1001C5DFC(a1[4], a1[5], a1[6], a1[7] - 1);
}

void sub_1001C68D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

Class sub_1001C68F8(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;

  v6 = 0;
  if (!qword_10032AB28)
  {
    v7 = off_1002EAA60;
    v8 = 0;
    qword_10032AB28 = _sl_dlopen(&v7, &v6);
  }
  if (!qword_10032AB28)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SharingLibrary(void)"));
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("NFTagAppProcessorWallet.m"), 19, CFSTR("%s"), v6);

    goto LABEL_10;
  }
  if (v6)
    free(v6);
  result = objc_getClass("SFClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getSFClientClass(void)_block_invoke"));
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("NFTagAppProcessorWallet.m"), 20, CFSTR("Unable to find class %s"), "SFClient");

LABEL_10:
    __break(1u);
  }
  qword_10032AB30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_1001C6F4C(void *a1, void *a2, int a3, _DWORD *a4)
{
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v11;
  const char *ClassName;
  const char *Name;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  void *v23;
  void *v24;
  id v25;
  id *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  const char *v32;
  id v33;
  unsigned int v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  id v54;
  id v55;
  id v56;
  _QWORD v57[4];
  _QWORD v58[4];
  _QWORD v59[4];
  _QWORD v60[4];
  _QWORD v61[4];
  _QWORD v62[4];
  _QWORD v63[4];
  _QWORD v64[4];
  _QWORD v65[4];
  _QWORD v66[4];
  _QWORD v67[4];
  _QWORD v68[4];
  _QWORD v69[4];
  _QWORD v70[4];
  uint8_t buf[4];
  int v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  void *v80;

  v56 = a2;
  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      if (class_isMetaClass(Class))
        v11 = 43;
      else
        v11 = 45;
      ClassName = object_getClassName(a1);
      Name = sel_getName("queueSessionPreCheckConnection:checkSE:outUID:");
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "NF_userInfo"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("ClientName")));
      v9(6, "%c[%{public}s %{public}s]:%i %{public}@", v11, ClassName, Name, 35, v15);

    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = object_getClass(a1);
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      v21 = object_getClassName(a1);
      v22 = sel_getName("queueSessionPreCheckConnection:checkSE:outUID:");
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "NF_userInfo"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("ClientName")));
      *(_DWORD *)buf = 67110146;
      v72 = v20;
      v73 = 2082;
      v74 = v21;
      v75 = 2082;
      v76 = v22;
      v77 = 1024;
      v78 = 35;
      v79 = 2114;
      v80 = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

    }
    switch(-[_NFHardwareManager getPrimaryHardwareState]_0((uint64_t)a1))
    {
      case 1u:
      case 3u:
        v25 = objc_alloc((Class)NSError);
        v26 = (id *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v69[0] = NSLocalizedDescriptionKey;
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unresponsive hardware"));
        v70[0] = v27;
        v70[1] = &off_100302A80;
        v69[1] = CFSTR("Line");
        v69[2] = CFSTR("Method");
        v28 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"));
        v70[2] = v28;
        v69[3] = NSDebugDescriptionErrorKey;
        v29 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"), 40);
        v70[3] = v29;
        v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v70, v69, 4));
        v31 = objc_msgSend(v25, "initWithDomain:code:userInfo:", v26, 58, v30);

        goto LABEL_25;
      case 4u:
        v42 = objc_alloc((Class)NSError);
        v26 = (id *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v67[0] = NSLocalizedDescriptionKey;
        v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No NFC on device"));
        v68[0] = v43;
        v68[1] = &off_100302A98;
        v67[1] = CFSTR("Line");
        v67[2] = CFSTR("Method");
        v44 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"));
        v68[2] = v44;
        v67[3] = NSDebugDescriptionErrorKey;
        v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"), 42);
        v68[3] = v45;
        v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v68, v67, 4));
        v31 = objc_msgSend(v42, "initWithDomain:code:userInfo:", v26, 57, v46);

        goto LABEL_25;
      case 5u:
        v47 = objc_alloc((Class)NSError);
        v26 = (id *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v65[0] = NSLocalizedDescriptionKey;
        v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
        v66[0] = v48;
        v66[1] = &off_100302AB0;
        v65[1] = CFSTR("Line");
        v65[2] = CFSTR("Method");
        v49 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"));
        v66[2] = v49;
        v65[3] = NSDebugDescriptionErrorKey;
        v50 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"), 44);
        v66[3] = v50;
        v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v66, v65, 4));
        v31 = objc_msgSend(v47, "initWithDomain:code:userInfo:", v26, 12, v51);

        goto LABEL_25;
      default:
        if (a4)
          *a4 = -1;
        if (!a3)
          break;
        v26 = a1;
        objc_sync_enter(v26);
        if (objc_msgSend(v26[5], "OSMode") == (id)2)
        {
          v33 = objc_getProperty(v26, v32, 40, 1);
          v34 = objc_msgSend(v33, "restrictedMode");

          if (v34)
          {
            v35 = objc_alloc((Class)NSError);
            v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v61[0] = NSLocalizedDescriptionKey;
            v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Restricted Mode"));
            v62[0] = v37;
            v62[1] = &off_100302AE0;
            v61[1] = CFSTR("Line");
            v61[2] = CFSTR("Method");
            v38 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"));
            v62[2] = v38;
            v61[3] = NSDebugDescriptionErrorKey;
            v39 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"), 67);
            v62[3] = v39;
            v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v62, v61, 4));
            v41 = objc_msgSend(v35, "initWithDomain:code:userInfo:", v36, 24, v40);
          }
          else if (sub_1000E4180((uint64_t)v26))
          {
            v54 = objc_alloc((Class)NSError);
            v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v59[0] = NSLocalizedDescriptionKey;
            v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Applet Migration"));
            v60[0] = v37;
            v60[1] = &off_100302AF8;
            v59[1] = CFSTR("Line");
            v59[2] = CFSTR("Method");
            v38 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"));
            v60[2] = v38;
            v59[3] = NSDebugDescriptionErrorKey;
            v39 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"), 70);
            v60[3] = v39;
            v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v60, v59, 4));
            v41 = objc_msgSend(v54, "initWithDomain:code:userInfo:", v36, 26, v40);
          }
          else
          {
            if (!sub_1000E41D4((uint64_t)v26))
            {
              objc_sync_exit(v26);
              v31 = 0;
              goto LABEL_25;
            }
            v55 = objc_alloc((Class)NSError);
            v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v57[0] = NSLocalizedDescriptionKey;
            v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "JCOP in OSU"));
            v58[0] = v37;
            v58[1] = &off_100302B10;
            v57[1] = CFSTR("Line");
            v57[2] = CFSTR("Method");
            v38 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"));
            v58[2] = v38;
            v57[3] = NSDebugDescriptionErrorKey;
            v39 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"), 73);
            v58[3] = v39;
            v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v58, v57, 4));
            v41 = objc_msgSend(v55, "initWithDomain:code:userInfo:", v36, 52, v40);
          }
        }
        else
        {
          v52 = objc_alloc((Class)NSError);
          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v63[0] = NSLocalizedDescriptionKey;
          v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "JCOP not available"));
          v64[0] = v37;
          v64[1] = &off_100302AC8;
          v63[1] = CFSTR("Line");
          v63[2] = CFSTR("Method");
          v38 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"));
          v64[2] = v38;
          v63[3] = NSDebugDescriptionErrorKey;
          v39 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("queueSessionPreCheckConnection:checkSE:outUID:"), 64);
          v64[3] = v39;
          v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v64, v63, 4));
          v41 = objc_msgSend(v52, "initWithDomain:code:userInfo:", v36, 53, v40);
        }
        v31 = v41;

        objc_sync_exit(v26);
LABEL_25:

        goto LABEL_26;
    }
  }
  v31 = 0;
LABEL_26:

  return v31;
}

void sub_1001C7A74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001C7B30(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  const char *v8;
  id v9;
  SEL v10;
  id v11;
  unsigned __int8 v12;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v16;
  const char *ClassName;
  const char *Name;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  objc_class *v22;
  int v23;
  id v24;
  id v25;
  void *v27;
  id v28;
  uint64_t v29;
  void *i;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *j;
  void *v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  void (*v48)(uint64_t, const char *, ...);
  objc_class *v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  void *v53;
  uint64_t v54;
  NSObject *v55;
  objc_class *v56;
  int v57;
  const char *v58;
  const char *v59;
  id v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  void (*v67)(uint64_t, const char *, ...);
  objc_class *v68;
  uint64_t v69;
  const char *v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  NSObject *v75;
  objc_class *v76;
  int v77;
  const char *v78;
  const char *v79;
  void *v80;
  id v81;
  id v82;
  void *v83;
  void *v84;
  id v85;
  id v86;
  void *v87;
  id v88;
  _BOOL4 v89;
  id *v90;
  NSObject *v91;
  id v92;
  void *v93;
  void (*v94)(uint64_t, const char *, ...);
  objc_class *v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  void *v100;
  id v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  NSObject *v106;
  objc_class *v107;
  int v108;
  id v109;
  id v110;
  id v111;
  unsigned int v112;
  void *v113;
  id v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  void *v120;
  id v121;
  const char *v122;
  id v123;
  const char *v124;
  id v125;
  void *v126;
  int v127;
  id v128;
  void *v129;
  const char *v130;
  id obj;
  const char *sel;
  id v133;
  _QWORD block[5];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint8_t buf[4];
  _BYTE v144[14];
  __int16 v145;
  const char *v146;
  __int16 v147;
  int v148;
  __int16 v149;
  id v150;
  __int16 v151;
  id v152;
  __int16 v153;
  unsigned int v154;
  __int16 v155;
  uint64_t v156;
  _QWORD v157[4];
  _QWORD v158[4];
  _BYTE v159[128];
  _QWORD v160[4];
  _QWORD v161[4];
  _QWORD v162[4];
  _QWORD v163[4];
  _BYTE v164[128];

  v7 = a2;
  v133 = a3;
  if (!a1)
  {
    v24 = 0;
    goto LABEL_17;
  }
  v9 = objc_getProperty((id)a1, v8, 176, 1);
  objc_sync_enter(v9);
  v11 = objc_getProperty((id)a1, v10, 176, 1);
  v12 = objc_msgSend(v11, "containsObject:", v133);

  objc_sync_exit(v9);
  obj = *(id *)(a1 + 184);
  objc_sync_enter(obj);
  if ((objc_msgSend(v7, "didEnd") & 1) != 0 || objc_msgSend(v7, "isEnding"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass((id)a1);
      if (class_isMetaClass(Class))
        v16 = 43;
      else
        v16 = 45;
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:");
      Logger(6, "%c[%{public}s %{public}s]:%i Session ended before queueing - not queueing it up.", v16, ClassName, Name, 96);
    }
    v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v20 = NFSharedLogGetLogger(v19);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = object_getClass((id)a1);
      if (class_isMetaClass(v22))
        v23 = 43;
      else
        v23 = 45;
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)v144 = v23;
      *(_WORD *)&v144[4] = 2082;
      *(_QWORD *)&v144[6] = object_getClassName((id)a1);
      v145 = 2082;
      v146 = sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:");
      v147 = 1024;
      v148 = 96;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Session ended before queueing - not queueing it up.", buf, 0x22u);
    }
    v24 = 0;
  }
  else
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "startOnFieldList"));
    v128 = objc_msgSend(v27, "count");

    if (v128)
    {
      v141 = 0u;
      v142 = 0u;
      v139 = 0u;
      v140 = 0u;
      v21 = *(id *)(a1 + 192);
      v28 = -[NSObject countByEnumeratingWithState:objects:count:](v21, "countByEnumeratingWithState:objects:count:", &v139, v164, 16);
      if (v28)
      {
        v29 = *(_QWORD *)v140;
        while (2)
        {
          for (i = 0; i != v28; i = (char *)i + 1)
          {
            if (*(_QWORD *)v140 != v29)
              objc_enumerationMutation(v21);
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v139 + 1) + 8 * (_QWORD)i), "startOnFieldList"));
            v32 = objc_msgSend(v31, "count");

            if (v32)
            {
              v41 = objc_alloc((Class)NSError);
              v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v162[0] = NSLocalizedDescriptionKey;
              v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
              v163[0] = v43;
              v163[1] = &off_100302B28;
              v162[1] = CFSTR("Line");
              v162[2] = CFSTR("Method");
              v44 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:"));
              v163[2] = v44;
              v162[3] = NSDebugDescriptionErrorKey;
              v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:"), 104);
              v163[3] = v45;
              v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v163, v162, 4));
              v24 = objc_msgSend(v41, "initWithDomain:code:userInfo:", v42, 34, v46);

              goto LABEL_15;
            }
          }
          v28 = -[NSObject countByEnumeratingWithState:objects:count:](v21, "countByEnumeratingWithState:objects:count:", &v139, v164, 16);
          if (v28)
            continue;
          break;
        }
      }

    }
    v33 = objc_opt_class(_NFXPCSession);
    if (v12 & 1 | ((objc_opt_isKindOfClass(v7, v33) & 1) == 0))
    {
      if (v133)
      {
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "NF_userInfo"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", CFSTR("ProxyObjects")));

        if (objc_msgSend(v7, "serviceType") == (id)2)
        {
          v137 = 0u;
          v138 = 0u;
          v135 = 0u;
          v136 = 0u;
          v21 = v35;
          v36 = -[NSObject countByEnumeratingWithState:objects:count:](v21, "countByEnumeratingWithState:objects:count:", &v135, v159, 16);
          if (v36)
          {
            v37 = *(_QWORD *)v136;
            while (2)
            {
              for (j = 0; j != v36; j = (char *)j + 1)
              {
                if (*(_QWORD *)v136 != v37)
                  objc_enumerationMutation(v21);
                v39 = *(void **)(*((_QWORD *)&v135 + 1) + 8 * (_QWORD)j);
                if (objc_msgSend(v39, "serviceType") == (id)2)
                {
                  v66 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v67 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v66);
                  if (v67)
                  {
                    v68 = object_getClass((id)a1);
                    if (class_isMetaClass(v68))
                      v69 = 43;
                    else
                      v69 = 45;
                    v70 = object_getClassName((id)a1);
                    v71 = sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:");
                    v72 = objc_opt_class(v39);
                    v67(6, "%c[%{public}s %{public}s]:%i %{public}@ already exist in queue", v69, v70, v71, 120, v72);
                  }
                  v73 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v74 = NFSharedLogGetLogger(v73);
                  v75 = objc_claimAutoreleasedReturnValue(v74);
                  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                  {
                    v76 = object_getClass((id)a1);
                    if (class_isMetaClass(v76))
                      v77 = 43;
                    else
                      v77 = 45;
                    v78 = object_getClassName((id)a1);
                    v79 = sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:");
                    v80 = (void *)objc_opt_class(v39);
                    *(_DWORD *)buf = 67110146;
                    *(_DWORD *)v144 = v77;
                    *(_WORD *)&v144[4] = 2082;
                    *(_QWORD *)&v144[6] = v78;
                    v145 = 2082;
                    v146 = v79;
                    v147 = 1024;
                    v148 = 120;
                    v149 = 2114;
                    v150 = v80;
                    v81 = v80;
                    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@ already exist in queue", buf, 0x2Cu);

                  }
                  v82 = objc_alloc((Class)NSError);
                  v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                  v157[0] = NSLocalizedDescriptionKey;
                  v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Busy"));
                  v158[0] = v84;
                  v158[1] = &off_100302B58;
                  v157[1] = CFSTR("Line");
                  v157[2] = CFSTR("Method");
                  v85 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:"));
                  v158[2] = v85;
                  v157[3] = NSDebugDescriptionErrorKey;
                  v86 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:"), 121);
                  v158[3] = v86;
                  v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v158, v157, 4));
                  v24 = objc_msgSend(v82, "initWithDomain:code:userInfo:", v83, 2, v87);

                  goto LABEL_15;
                }
              }
              v36 = -[NSObject countByEnumeratingWithState:objects:count:](v21, "countByEnumeratingWithState:objects:count:", &v135, v159, 16);
              if (v36)
                continue;
              break;
            }
          }

        }
        objc_msgSend(v35, "addObject:", v7);

      }
      if (a4)
        *a4 = objc_msgSend((id)a1, "isFirstInQueue");
      ++*(_BYTE *)(a1 + 336);
      objc_msgSend(v7, "setSessionID:");
      if (v128)
      {
        v40 = *(id *)(a1 + 192);
        objc_msgSend(v40, "addObject:", v7);
      }
      else
      {
        v65 = *(id *)(a1 + 112);
        if (v65)
        {

        }
        else
        {
          v88 = *(id *)(a1 + 184);
          v89 = objc_msgSend(v88, "count") == 0;

          if (v89)
            sub_1000DBE28((void *)a1, 1);
        }
        v40 = *(id *)(a1 + 184);
        objc_msgSend(v40, "addObject:", v7);
      }

      if (objc_msgSend(v7, "priority"))
      {
        sub_1001C8AA0(a1);
        v90 = sub_100111A40((id *)a1);
        v91 = objc_claimAutoreleasedReturnValue(v90);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1001C8CF0;
        block[3] = &unk_1002E5C58;
        block[4] = a1;
        dispatch_async(v91, block);

      }
      v92 = *(id *)(a1 + 112);

      if (v92)
      {
        v93 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v94 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v93);
        if (v94)
        {
          v95 = object_getClass((id)a1);
          if (class_isMetaClass(v95))
            v96 = 43;
          else
            v96 = 45;
          v124 = object_getClassName((id)a1);
          v122 = sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:");
          v121 = *(id *)(a1 + 112);
          v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v121, "sessionUID"));
          v97 = *(id *)(a1 + 112);
          v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "clientName"));
          v98 = *(id *)(a1 + 112);
          v99 = objc_msgSend(v98, "processIdentifier");
          v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
          v101 = *(id *)(a1 + 112);
          v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "dequeueDate"));
          objc_msgSend(v100, "timeIntervalSinceDate:", v102);
          v94(6, "%c[%{public}s %{public}s]:%i Currently processing session %{public}@ for %{public}@ (%d) for %f seconds", v96, v124, v122, 158, v126, v129, v99, v103);

        }
        v104 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v105 = NFSharedLogGetLogger(v104);
        v106 = objc_claimAutoreleasedReturnValue(v105);
        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
        {
          v107 = object_getClass((id)a1);
          if (class_isMetaClass(v107))
            v108 = 43;
          else
            v108 = 45;
          v127 = v108;
          v130 = object_getClassName((id)a1);
          sel = sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:");
          v123 = *(id *)(a1 + 112);
          v109 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "sessionUID"));
          v125 = *(id *)(a1 + 112);
          v110 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "clientName"));
          v111 = *(id *)(a1 + 112);
          v112 = objc_msgSend(v111, "processIdentifier");
          v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
          v114 = *(id *)(a1 + 112);
          v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "dequeueDate"));
          objc_msgSend(v113, "timeIntervalSinceDate:", v115);
          *(_DWORD *)buf = 67110914;
          *(_DWORD *)v144 = v127;
          *(_WORD *)&v144[4] = 2082;
          *(_QWORD *)&v144[6] = v130;
          v145 = 2082;
          v146 = sel;
          v147 = 1024;
          v148 = 158;
          v149 = 2114;
          v150 = v109;
          v151 = 2114;
          v152 = v110;
          v153 = 1024;
          v154 = v112;
          v155 = 2048;
          v156 = v116;
          _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Currently processing session %{public}@ for %{public}@ (%d) for %f seconds", buf, 0x46u);

        }
      }
      v117 = kdebug_trace(724566048, 0, 0, 0, 0);
      v118 = NFSharedSignpostLog(v117);
      v119 = objc_claimAutoreleasedReturnValue(v118);
      if (os_signpost_enabled(v119))
      {
        v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sessionUID"));
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v144 = v120;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v119, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SESSION_QUEUED", "sessionUID=%@", buf, 0xCu);

      }
      objc_sync_exit(obj);

      v25 = *(id *)(a1 + 408);
      objc_msgSend(v25, "retainECPOption:", objc_msgSend(v7, "backgroundTagReadEcpOption"));
      v24 = 0;
      goto LABEL_16;
    }
    v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v48 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v47);
    if (v48)
    {
      v49 = object_getClass((id)a1);
      if (class_isMetaClass(v49))
        v50 = 43;
      else
        v50 = 45;
      v51 = object_getClassName((id)a1);
      v52 = sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:");
      v48(6, "%c[%{public}s %{public}s]:%i XPC connection disappeared before queueing.", v50, v51, v52, 110);
    }
    v53 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v54 = NFSharedLogGetLogger(v53);
    v55 = objc_claimAutoreleasedReturnValue(v54);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      v56 = object_getClass((id)a1);
      if (class_isMetaClass(v56))
        v57 = 43;
      else
        v57 = 45;
      v58 = object_getClassName((id)a1);
      v59 = sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:");
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)v144 = v57;
      *(_WORD *)&v144[4] = 2082;
      *(_QWORD *)&v144[6] = v58;
      v145 = 2082;
      v146 = v59;
      v147 = 1024;
      v148 = 110;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i XPC connection disappeared before queueing.", buf, 0x22u);
    }

    v60 = objc_alloc((Class)NSError);
    v21 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v160[0] = NSLocalizedDescriptionKey;
    v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "User cancelled"));
    v161[0] = v61;
    v161[1] = &off_100302B40;
    v160[1] = CFSTR("Line");
    v160[2] = CFSTR("Method");
    v62 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:"));
    v161[2] = v62;
    v160[3] = NSDebugDescriptionErrorKey;
    v63 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("queueSecureElementSession:forConnection:isFirstInQueue:"), 111);
    v161[3] = v63;
    v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v161, v160, 4));
    v24 = objc_msgSend(v60, "initWithDomain:code:userInfo:", v21, 48, v64);

  }
LABEL_15:

  v25 = obj;
  objc_sync_exit(obj);
LABEL_16:

LABEL_17:
  return v24;
}

void sub_1001C8A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1001C8AA0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  int v5;
  uint64_t v6;
  void *i;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  const char *ClassName;
  const char *Name;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  _BYTE v37[128];

  if (a1)
  {
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v2 = *(id *)(a1 + 184);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v23, v37, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v6)
            objc_enumerationMutation(v2);
          v5 += objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i), "priority");
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v23, v37, 16);
      }
      while (v4);
    }
    else
    {
      LOWORD(v5) = 0;
    }

    if ((unsigned __int16)v5 != *(unsigned __int16 *)(a1 + 334))
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v10 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("updatePrioritySessionCount");
        v13 = 45;
        if (isMetaClass)
          v13 = 43;
        v10(6, "%c[%{public}s %{public}s]:%i Priority session count = %d", v13, ClassName, Name, 181, (unsigned __int16)v5);
      }
      v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v15 = NFSharedLogGetLogger(v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = object_getClass((id)a1);
        if (class_isMetaClass(v17))
          v18 = 43;
        else
          v18 = 45;
        v19 = object_getClassName((id)a1);
        v20 = sel_getName("updatePrioritySessionCount");
        *(_DWORD *)buf = 67110146;
        v28 = v18;
        v29 = 2082;
        v30 = v19;
        v31 = 2082;
        v32 = v20;
        v33 = 1024;
        v34 = 181;
        v35 = 1024;
        v36 = (unsigned __int16)v5;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Priority session count = %d", buf, 0x28u);
      }

      *(_WORD *)(a1 + 334) = v5;
    }
  }
}

void sub_1001C8CF0(uint64_t a1)
{
  sub_1001C8CF8(*(_QWORD *)(a1 + 32));
}

void sub_1001C8CF8(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  char isKindOfClass;
  id v9;

  if (a1)
  {
    if (*(_WORD *)(a1 + 334))
    {
      v2 = *(id *)(a1 + 112);
      if (v2)
      {
        v3 = v2;
        v4 = *(id *)(a1 + 112);
        v5 = objc_opt_class(_NFContactlessPaymentSession);
        if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
        {

        }
        else
        {
          v6 = *(id *)(a1 + 112);
          v7 = objc_opt_class(_NFLoyaltyAndPaymentSession);
          isKindOfClass = objc_opt_isKindOfClass(v6, v7);

          if ((isKindOfClass & 1) == 0)
            return;
        }
        v9 = *(id *)(a1 + 112);
        objc_msgSend(v9, "handlePendingServerRequest");

      }
    }
  }
}

uint64_t sub_1001C8DE0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001C8DF0(uint64_t a1)
{

}

void sub_1001C8DF8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  void *v36;

  if (objc_msgSend(a2, "isEqual:", *(_QWORD *)(a1 + 32)))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 40));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 40));
      Name = sel_getName(*(SEL *)(a1 + 64));
      v13 = *(_QWORD *)(a1 + 48);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "description"));
      v15 = 45;
      if (isMetaClass)
        v15 = 43;
      v8(6, "%c[%{public}s %{public}s]:%i Found suspend %@ waiting on field %@", v15, ClassName, Name, 226, v13, v14);

    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = object_getClass(*(id *)(a1 + 40));
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      v21 = object_getClassName(*(id *)(a1 + 40));
      v22 = sel_getName(*(SEL *)(a1 + 64));
      v23 = *(_QWORD *)(a1 + 48);
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "description"));
      *(_DWORD *)buf = 67110402;
      v26 = v20;
      v27 = 2082;
      v28 = v21;
      v29 = 2082;
      v30 = v22;
      v31 = 1024;
      v32 = 226;
      v33 = 2112;
      v34 = v23;
      v35 = 2112;
      v36 = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Found suspend %@ waiting on field %@", buf, 0x36u);

    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(id *)(a1 + 48));
    *a4 = 1;
  }
}

id sub_1001C8FFC(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isEqualTerminalInfo:", a2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_1001C9040(uint64_t result)
{
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  if (result)
  {
    v1 = result;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v2 = *(id *)(result + 192);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v19;
      while (2)
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v5)
            objc_enumerationMutation(v2);
          v7 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "startOnFieldList", (_QWORD)v18));
          if (v8)
          {
            v9 = (void *)v8;
            v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "parentToken"));

            if (!v10)
            {

              return 1;
            }
          }
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        if (v4)
          continue;
        break;
      }
    }

    v11 = *(id *)(v1 + 112);
    if (v11)
      goto LABEL_12;
    v11 = *(id *)(v1 + 184);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "startOnFieldList"));
    if (!v13)
    {

LABEL_12:
      return 0;
    }
    v14 = (void *)v13;
    v15 = *(id *)(v1 + 184);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "firstObject"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "parentToken"));

    return !v17;
  }
  return result;
}

uint64_t sub_1001C91FC(id *a1, void *a2, uint64_t a3, void *a4, void *a5, int a6)
{
  id v11;
  id v12;
  id v13;
  void *specific;
  uint64_t Logger;
  void (*v16)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSMutableDictionary *v23;
  objc_class *v24;
  int v25;
  uint64_t v26;
  id v28;
  void *v29;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  id v40;
  id v41;
  id v42;
  _BOOL4 v43;
  void *v44;
  id v45;
  void *v46;
  void (*v47)(uint64_t, const char *, ...);
  objc_class *v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  objc_class *v55;
  int v56;
  const char *v57;
  const char *v58;
  void *v59;
  const char *Name;
  uint64_t v61;
  int v62;
  void *v63;
  id v64;
  uint8_t buf[4];
  int v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  id v74;

  v11 = a2;
  v12 = a4;
  v13 = a5;
  if (!a1)
    goto LABEL_17;
  if (a3 == 2 && !v12)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v16 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("suspendSession:reason:field:token:startNextSession:");
      v20 = 45;
      if (isMetaClass)
        v20 = 43;
      v16(3, "%c[%{public}s %{public}s]:%i Missing field", v20, ClassName, Name, 359);
    }
    v21 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v22 = NFSharedLogGetLogger(v21);
    v23 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(&v23->super.super, OS_LOG_TYPE_ERROR))
    {
      v24 = object_getClass(a1);
      if (class_isMetaClass(v24))
        v25 = 43;
      else
        v25 = 45;
      *(_DWORD *)buf = 67109890;
      v66 = v25;
      v67 = 2082;
      v68 = object_getClassName(a1);
      v69 = 2082;
      v70 = sel_getName("suspendSession:reason:field:token:startNextSession:");
      v71 = 1024;
      v72 = 359;
      _os_log_impl((void *)&_mh_execute_header, &v23->super.super, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing field", buf, 0x22u);
    }
    goto LABEL_13;
  }
  if (!objc_msgSend(v11, "didStart") || (objc_msgSend(v11, "didEnd") & 1) != 0)
  {
LABEL_17:
    v26 = 0;
    goto LABEL_18;
  }
  if ((objc_msgSend(v11, "isSuspended") & 1) != 0)
  {
    v26 = 1;
    goto LABEL_18;
  }
  v23 = (NSMutableDictionary *)a1[23];
  objc_sync_enter(v23);
  v28 = a1[14];

  if (v28 == v11)
  {
    v40 = a1[24];
    objc_msgSend(v40, "addObject:", v11);

    objc_storeStrong(a1 + 14, 0);
    v41 = a1[23];
    v42 = objc_msgSend(v41, "count");

    if (!v42)
      sub_1000DBE28(a1, 0);
    v43 = a3 == 2;
    objc_sync_exit(v23);

    v23 = objc_opt_new(NSMutableDictionary);
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a3));
    -[NSMutableDictionary setObject:forKey:](v23, "setObject:forKey:", v44, CFSTR("ReasonCode"));

    if (v43)
    {
      v64 = 0;
      v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v12, 1, &v64));
      v45 = v64;
      if (v45)
      {
        v46 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v47 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v46);
        if (v47)
        {
          v48 = object_getClass(a1);
          if (class_isMetaClass(v48))
            v49 = 43;
          else
            v49 = 45;
          v61 = v49;
          v50 = object_getClassName(a1);
          v51 = sel_getName("suspendSession:reason:field:token:startNextSession:");
          v47(4, "%c[%{public}s %{public}s]:%i Archive error=%{public}@", v61, v50, v51, 393, v45);
        }
        v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v53 = NFSharedLogGetLogger(v52);
        v54 = objc_claimAutoreleasedReturnValue(v53);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          v55 = object_getClass(a1);
          if (class_isMetaClass(v55))
            v56 = 43;
          else
            v56 = 45;
          v62 = v56;
          v57 = object_getClassName(a1);
          v58 = sel_getName("suspendSession:reason:field:token:startNextSession:");
          *(_DWORD *)buf = 67110146;
          v66 = v62;
          v67 = 2082;
          v68 = v57;
          v69 = 2082;
          v70 = v58;
          v71 = 1024;
          v72 = 393;
          v73 = 2114;
          v74 = v45;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Archive error=%{public}@", buf, 0x2Cu);
        }

      }
      else
      {
        -[NSMutableDictionary setObject:forKey:](v23, "setObject:forKey:", v63, CFSTR("Field"));
      }

    }
    if (v13)
    {
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "token"));
      -[NSMutableDictionary setObject:forKey:](v23, "setObject:forKey:", v59, CFSTR("Token"));

    }
    v26 = (uint64_t)objc_msgSend(v11, "suspendWithInfo:", v23);
    if ((v26 & a6) == 1)
    {
      objc_msgSend(a1, "maybeStartNextSession");
      v26 = 1;
    }
    goto LABEL_14;
  }
  v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v29);
  if (v30)
  {
    v31 = object_getClass(a1);
    if (class_isMetaClass(v31))
      v32 = 43;
    else
      v32 = 45;
    v33 = object_getClassName(a1);
    v34 = sel_getName("suspendSession:reason:field:token:startNextSession:");
    v30(6, "%c[%{public}s %{public}s]:%i %{public}@ is not active", v32, v33, v34, 378, v11);
  }
  v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v36 = NFSharedLogGetLogger(v35);
  v37 = objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    v38 = object_getClass(a1);
    if (class_isMetaClass(v38))
      v39 = 43;
    else
      v39 = 45;
    *(_DWORD *)buf = 67110146;
    v66 = v39;
    v67 = 2082;
    v68 = object_getClassName(a1);
    v69 = 2082;
    v70 = sel_getName("suspendSession:reason:field:token:startNextSession:");
    v71 = 1024;
    v72 = 378;
    v73 = 2114;
    v74 = v11;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@ is not active", buf, 0x2Cu);
  }

  objc_sync_exit(v23);
LABEL_13:
  v26 = 0;
LABEL_14:

LABEL_18:
  return v26;
}

void sub_1001C97F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_1001C9CFC(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v13;
  const char *ClassName;
  const char *Name;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  void *v23;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  _QWORD v37[4];
  id v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  id v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  id v57;
  __int16 v58;
  id v59;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "parentToken"));
    v40 = 0;
    v41 = &v40;
    v42 = 0x3032000000;
    v43 = sub_1001C8DE0;
    v44 = sub_1001C8DF0;
    v45 = 0;
    v6 = a1[23];
    objc_sync_enter(v6);
    v7 = a1[24];
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_1001CA124;
    v37[3] = &unk_1002EAAD0;
    v8 = v5;
    v38 = v8;
    v39 = &v40;
    objc_msgSend(v7, "enumerateObjectsUsingBlock:", v37);

    v9 = v41[5];
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    if (v9)
    {
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass(a1);
        if (class_isMetaClass(Class))
          v13 = 43;
        else
          v13 = 45;
        ClassName = object_getClassName(a1);
        Name = sel_getName("requeueParentSession:");
        Logger(6, "%c[%{public}s %{public}s]:%i Found parent %{public}@ of session %{public}@ using parent token %{public}@", v13, ClassName, Name, 470, v41[5], v4, v8);
      }
      v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v17 = NFSharedLogGetLogger(v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = object_getClass(a1);
        if (class_isMetaClass(v19))
          v20 = 43;
        else
          v20 = 45;
        v21 = object_getClassName(a1);
        v22 = sel_getName("requeueParentSession:");
        v23 = (void *)v41[5];
        *(_DWORD *)buf = 67110658;
        v47 = v20;
        v48 = 2082;
        v49 = v21;
        v50 = 2082;
        v51 = v22;
        v52 = 1024;
        v53 = 470;
        v54 = 2114;
        v55 = v23;
        v56 = 2114;
        v57 = v4;
        v58 = 2114;
        v59 = v8;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Found parent %{public}@ of session %{public}@ using parent token %{public}@", buf, 0x40u);
      }

      a1 = (id *)objc_msgSend(a1, "_syncResumeSession:", v41[5]);
    }
    else
    {
      v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (v24)
      {
        v25 = object_getClass(a1);
        if (class_isMetaClass(v25))
          v26 = 43;
        else
          v26 = 45;
        v27 = object_getClassName(a1);
        v28 = sel_getName("requeueParentSession:");
        v24(6, "%c[%{public}s %{public}s]:%i No parent for session %{public}@ using parent token %{public}@", v26, v27, v28, 473, v4, v8);
      }
      v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v30 = NFSharedLogGetLogger(v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v32 = object_getClass(a1);
        if (class_isMetaClass(v32))
          v33 = 43;
        else
          v33 = 45;
        v34 = object_getClassName(a1);
        v35 = sel_getName("requeueParentSession:");
        *(_DWORD *)buf = 67110402;
        v47 = v33;
        v48 = 2082;
        v49 = v34;
        v50 = 2082;
        v51 = v35;
        v52 = 1024;
        v53 = 473;
        v54 = 2114;
        v55 = v4;
        v56 = 2114;
        v57 = v8;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No parent for session %{public}@ using parent token %{public}@", buf, 0x36u);
      }

      a1 = 0;
    }

    objc_sync_exit(v6);
    _Block_object_dispose(&v40, 8);

  }
  return a1;
}

void sub_1001CA0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;

  objc_sync_exit(v23);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1001CA124(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "token"));
  v8 = objc_msgSend(v7, "isEqualToData:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }

}

void sub_1001CA240(uint64_t a1)
{
  sub_1000E5BAC(*(id **)(a1 + 32), *(void **)(a1 + 40), 1u);
}

id sub_1001CA2E8(uint64_t a1)
{
  id v2;

  v2 = sub_1001C7B30(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), 0, 0);
  return objc_msgSend(*(id *)(a1 + 32), "maybeStartNextSession");
}

void sub_1001CA3C4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned __int8 v9;
  void *v10;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  const char *v23;
  const char *v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  NSObject *v31;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v35;
  const char *ClassName;
  const char *Name;
  void *v38;
  uint64_t v39;
  objc_class *v40;
  int v41;
  const char *v42;
  const char *v43;
  const char *v44;
  NSObject *v45;
  os_log_type_t v46;
  void (*v47)(uint64_t, const char *, ...);
  objc_class *v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  void *v52;
  uint64_t v53;
  objc_class *v54;
  int v55;
  const char *v56;
  const char *v57;
  uint8_t buf[4];
  int v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  int v65;
  __int16 v66;
  unsigned int v67;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[23];
  v3 = v2;
  objc_sync_enter(v3);
  v4 = *(_QWORD **)(a1 + 32);
  if (v4)
    v4 = (_QWORD *)v4[14];
  v5 = v4;
  v6 = *(_QWORD **)(a1 + 40);

  if (v5 == v6)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(Class))
        v35 = 43;
      else
        v35 = 45;
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      Logger(6, "%c[%{public}s %{public}s]:%i Session already running", v35, ClassName, Name, 504);
    }
    v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v39 = NFSharedLogGetLogger(v38);
    v31 = objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      v40 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v40))
        v41 = 43;
      else
        v41 = 45;
      v42 = object_getClassName(*(id *)(a1 + 32));
      v43 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v59 = v41;
      v60 = 2082;
      v61 = v42;
      v62 = 2082;
      v63 = v43;
      v64 = 1024;
      v65 = 504;
      v44 = "%c[%{public}s %{public}s]:%i Session already running";
      v45 = v31;
      v46 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_48;
    }
  }
  else
  {
    v7 = *(_QWORD **)(a1 + 32);
    if (v7)
      v7 = (_QWORD *)v7[23];
    v8 = v7;
    v9 = objc_msgSend(v8, "containsObject:", *(_QWORD *)(a1 + 40));

    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    if ((v9 & 1) != 0)
    {
      v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v10);
      if (v11)
      {
        v12 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v12))
          v13 = 43;
        else
          v13 = 45;
        v14 = object_getClassName(*(id *)(a1 + 32));
        v15 = sel_getName(*(SEL *)(a1 + 48));
        v16 = *(_QWORD **)(a1 + 32);
        if (v16)
          v16 = (_QWORD *)v16[23];
        v17 = v16;
        v11(6, "%c[%{public}s %{public}s]:%i Prioritizing session from %d to 0", v13, v14, v15, 513, objc_msgSend(v17, "indexOfObject:", *(_QWORD *)(a1 + 40)));

      }
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFSharedLogGetLogger(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v21 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v21))
          v22 = 43;
        else
          v22 = 45;
        v23 = object_getClassName(*(id *)(a1 + 32));
        v24 = sel_getName(*(SEL *)(a1 + 48));
        v25 = *(_QWORD **)(a1 + 32);
        if (v25)
          v25 = (_QWORD *)v25[23];
        v26 = v25;
        v27 = objc_msgSend(v26, "indexOfObject:", *(_QWORD *)(a1 + 40));
        *(_DWORD *)buf = 67110146;
        v59 = v22;
        v60 = 2082;
        v61 = v23;
        v62 = 2082;
        v63 = v24;
        v64 = 1024;
        v65 = 513;
        v66 = 1024;
        v67 = v27;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Prioritizing session from %d to 0", buf, 0x28u);

      }
      v28 = *(_QWORD **)(a1 + 32);
      if (v28)
        v28 = (_QWORD *)v28[23];
      v29 = v28;
      objc_msgSend(v29, "removeObject:", *(_QWORD *)(a1 + 40));

      v30 = *(_QWORD **)(a1 + 32);
      if (v30)
        v30 = (_QWORD *)v30[23];
      v31 = v30;
      -[NSObject insertObject:atIndex:](v31, "insertObject:atIndex:", *(_QWORD *)(a1 + 40), 0);
      goto LABEL_49;
    }
    v47 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v10);
    if (v47)
    {
      v48 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v48))
        v49 = 43;
      else
        v49 = 45;
      v50 = object_getClassName(*(id *)(a1 + 32));
      v51 = sel_getName(*(SEL *)(a1 + 48));
      v47(3, "%c[%{public}s %{public}s]:%i Session not queued !", v49, v50, v51, 509);
    }
    v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v53 = NFSharedLogGetLogger(v52);
    v31 = objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v54 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v54))
        v55 = 43;
      else
        v55 = 45;
      v56 = object_getClassName(*(id *)(a1 + 32));
      v57 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v59 = v55;
      v60 = 2082;
      v61 = v56;
      v62 = 2082;
      v63 = v57;
      v64 = 1024;
      v65 = 509;
      v44 = "%c[%{public}s %{public}s]:%i Session not queued !";
      v45 = v31;
      v46 = OS_LOG_TYPE_ERROR;
LABEL_48:
      _os_log_impl((void *)&_mh_execute_header, v45, v46, v44, buf, 0x22u);
    }
  }
LABEL_49:

  objc_sync_exit(v3);
}

void sub_1001CA858(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001CB280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1001CB2CC(void *a1, uint64_t a2, unsigned int a3)
{
  id obj;

  if (a1)
  {
    obj = a1;
    objc_sync_enter(obj);
    if (!*((_BYTE *)obj + 137))
      NFDriverSetPollingConfig(*((_QWORD *)obj + 5), a2, a3);
    objc_sync_exit(obj);

  }
}

void sub_1001CB340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CB354(void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  v4 = NFDriverSetPollingProfile(v3[5], a2);
  objc_sync_exit(v3);

  return v4;
}

void sub_1001CB3A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001CB3BC(void *a1, uint64_t a2)
{
  _QWORD *obj;

  if (a1)
  {
    obj = a1;
    objc_sync_enter(obj);
    NFDriverSetTemporaryPollingPeriod(obj[5], a2);
    objc_sync_exit(obj);

  }
}

void sub_1001CB41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001CB430(_QWORD *a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  id v33;

  v3 = a2;
  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("configureECPPolling:");
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 55, v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(a1);
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      *(_DWORD *)buf = 67110146;
      v25 = v14;
      v26 = 2082;
      v27 = object_getClassName(a1);
      v28 = 2082;
      v29 = sel_getName("configureECPPolling:");
      v30 = 1024;
      v31 = 55;
      v32 = 2114;
      v33 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
    }

    v15 = a1[5];
    if (v3)
    {
      v16 = objc_retainAutorelease(v3);
      v17 = objc_msgSend(v16, "bytes");
      v18 = objc_msgSend(v16, "length");
      v19 = v15;
      v20 = v17;
    }
    else
    {
      v19 = v15;
      v20 = 0;
      v18 = 0;
    }
    a1 = (_QWORD *)NFDriverConfigureVASPolling(v19, v20, v18);
  }

  return a1;
}

void *sub_1001CB624(void *a1, void *a2)
{
  id v3;
  _QWORD *v4;
  void *v6;

  v3 = a2;
  if (a1)
  {
    v4 = a1;
    objc_sync_enter(v4);
    if (!v4[5])
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", "getRFSettings:", v4, CFSTR("NFDriverWrapper+RFConfig.m"), 73, CFSTR("driver not open"));

    }
    a1 = (void *)NFDriverRFSettingsCopy();
    objc_sync_exit(v4);

  }
  return a1;
}

void sub_1001CB7C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CB7DC(void *a1)
{
  id v1;
  uint64_t v2;

  if (!a1)
    return 0;
  v1 = a1;
  objc_sync_enter(v1);
  if (*((_BYTE *)v1 + 137))
    v2 = 0;
  else
    v2 = NFDriverEnableFelicaTxEndPatternV2(*((_QWORD *)v1 + 5));
  objc_sync_exit(v1);

  return v2;
}

void sub_1001CB838(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CB84C(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (*((_BYTE *)v3 + 137))
    v4 = 0;
  else
    v4 = NFDriverConfigureExpressFelicaEntry(*((_QWORD *)v3 + 5), a2);
  objc_sync_exit(v3);

  return v4;
}

void sub_1001CB8B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1001CB8C4(void *a1, uint64_t a2)
{
  id v3;
  _BOOL8 v4;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  v4 = !*((_BYTE *)v3 + 137) && (NFDriverEnableGreenCarThreshold(*((_QWORD *)v3 + 5), a2) & 1) != 0;
  objc_sync_exit(v3);

  return v4;
}

void sub_1001CB92C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CB940(void *a1, uint64_t a2, unsigned int a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
    return 0;
  v5 = a1;
  objc_sync_enter(v5);
  if (*((_BYTE *)v5 + 137))
  {
    v6 = 0;
  }
  else
  {
    if (a3 - 1 >= 3)
      v7 = 0;
    else
      v7 = a3;
    v6 = NFDriverConfigureReaderModeRFForTransitPartner(*((_QWORD *)v5 + 5), a2, v7);
  }
  objc_sync_exit(v5);

  return v6;
}

void sub_1001CB9BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001CB9D0(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *ErrorCode;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD v13[2];
  _QWORD v14[2];
  NSErrorUserInfoKey v15;
  void *v16;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (*((_BYTE *)v3 + 137))
  {
    v4 = objc_alloc((Class)NSError);
    ErrorCode = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v15 = NSLocalizedDescriptionKey;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
    v16 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
    v8 = objc_msgSend(v4, "initWithDomain:code:userInfo:", ErrorCode, 3, v7);
  }
  else
  {
    v9 = NFDriverEnableAutomaticRFOverride(*((_QWORD *)v3 + 5), a2);
    if (!(_DWORD)v9)
    {
      v8 = 0;
      goto LABEL_7;
    }
    ErrorCode = (void *)NFDriverCreateErrorCode(v9);
    v10 = objc_alloc((Class)NSError);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v13[0] = NSLocalizedDescriptionKey;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v13[1] = NSUnderlyingErrorKey;
    v14[0] = v7;
    v14[1] = ErrorCode;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 2));
    v8 = objc_msgSend(v10, "initWithDomain:code:userInfo:", v6, 15, v11);

  }
LABEL_7:
  objc_sync_exit(v3);

  return v8;
}

void sub_1001CBBC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001CBBE8(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *ErrorCode;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD v13[2];
  _QWORD v14[2];
  NSErrorUserInfoKey v15;
  void *v16;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (*((_BYTE *)v3 + 137))
  {
    v4 = objc_alloc((Class)NSError);
    ErrorCode = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v15 = NSLocalizedDescriptionKey;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
    v16 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
    v8 = objc_msgSend(v4, "initWithDomain:code:userInfo:", ErrorCode, 3, v7);
  }
  else
  {
    v9 = NFDriverEnableReaderModeDynamicBBAControl(*((_QWORD *)v3 + 5), a2);
    if (!(_DWORD)v9)
    {
      v8 = 0;
      goto LABEL_7;
    }
    ErrorCode = (void *)NFDriverCreateErrorCode(v9);
    v10 = objc_alloc((Class)NSError);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v13[0] = NSLocalizedDescriptionKey;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v13[1] = NSUnderlyingErrorKey;
    v14[0] = v7;
    v14[1] = ErrorCode;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 2));
    v8 = objc_msgSend(v10, "initWithDomain:code:userInfo:", v6, 15, v11);

  }
LABEL_7:
  objc_sync_exit(v3);

  return v8;
}

void sub_1001CBDDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001CBE00(_QWORD *a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  const char *Name;
  NSErrorUserInfoKey v31;
  void *v32;
  NSErrorUserInfoKey v33;
  void *v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  int v42;

  v3 = a2;
  if (!a1)
    goto LABEL_13;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("pushSignedRF:");
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i ", v10, ClassName, Name, 232);
  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(a1);
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    *(_DWORD *)buf = 67109890;
    v36 = v15;
    v37 = 2082;
    v38 = object_getClassName(a1);
    v39 = 2082;
    v40 = sel_getName("pushSignedRF:");
    v41 = 1024;
    v42 = 232;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v16 = objc_retainAutorelease(v3);
  v17 = NFDataCreateWithBytes(objc_msgSend(v16, "bytes"), objc_msgSend(v16, "length"));
  if (!v17)
  {
    v21 = objc_alloc((Class)NSError);
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v33 = NSLocalizedDescriptionKey;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
    v34 = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1));
    v25 = v21;
    v26 = v22;
    v27 = 34;
LABEL_16:
    v20 = objc_msgSend(v25, "initWithDomain:code:userInfo:", v26, v27, v24);

    goto LABEL_17;
  }
  v18 = v17;
  v19 = NFDriverRFSettingsPushSignedSetting(a1[5], v17);
  NFDataRelease(v18);
  if ((v19 & 1) == 0)
  {
    v28 = objc_alloc((Class)NSError);
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v31 = NSLocalizedDescriptionKey;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
    v32 = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
    v25 = v28;
    v26 = v22;
    v27 = 6;
    goto LABEL_16;
  }
LABEL_13:
  v20 = 0;
LABEL_17:

  return v20;
}

id sub_1001CC114(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *ErrorCode;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  _QWORD v16[2];
  _QWORD v17[2];
  NSErrorUserInfoKey v18;
  void *v19;

  v3 = a2;
  if (!a1)
  {
    v9 = 0;
    goto LABEL_8;
  }
  v4 = a1;
  objc_sync_enter(v4);
  if (*((_BYTE *)v4 + 137))
  {
    v5 = objc_alloc((Class)NSError);
    ErrorCode = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v18 = NSLocalizedDescriptionKey;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
    v19 = v7;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
    v9 = objc_msgSend(v5, "initWithDomain:code:userInfo:", ErrorCode, 3, v8);
  }
  else
  {
    v10 = *((_QWORD *)v4 + 5);
    v11 = objc_retainAutorelease(v3);
    v12 = NFDriverEnableAntiRelay(v10, objc_msgSend(v11, "bytes"), objc_msgSend(v11, "length"));
    if (!(_DWORD)v12)
    {
      v9 = 0;
      goto LABEL_7;
    }
    ErrorCode = (void *)NFDriverCreateErrorCode(v12);
    v13 = objc_alloc((Class)NSError);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v16[0] = NSLocalizedDescriptionKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v16[1] = NSUnderlyingErrorKey;
    v17[0] = v8;
    v17[1] = ErrorCode;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 2));
    v9 = objc_msgSend(v13, "initWithDomain:code:userInfo:", v7, 15, v14);

  }
LABEL_7:
  objc_sync_exit(v4);

LABEL_8:
  return v9;
}

void sub_1001CC340(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_1001CC3F4(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  objc_super v9;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)NFAssertPreventConnectionHandover;
    v7 = (id *)objc_msgSendSuper2(&v9, "initWithRemoteAssertion:", v5);
    a1 = v7;
    if (v7)
      objc_storeStrong(v7 + 2, a3);
  }

  return a1;
}

id sub_1001CCA9C(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v37;
  id v38;
  id v39;

  objc_opt_self(a1);
  v1 = objc_alloc((Class)NSSet);
  v2 = objc_opt_class(NSArray);
  v3 = objc_opt_class(NSMutableArray);
  v4 = objc_opt_class(NSDictionary);
  v5 = objc_opt_class(NSMutableDictionary);
  v6 = objc_opt_class(NSData);
  v7 = objc_opt_class(NSNumber);
  v39 = objc_msgSend(v1, "initWithObjects:", v2, v3, v4, v5, v6, v7, objc_opt_class(NFApplet), 0);
  v38 = objc_alloc((Class)NSSet);
  v37 = objc_opt_class(NSString);
  v8 = objc_opt_class(NSMutableString);
  v9 = objc_opt_class(NSNumber);
  v10 = objc_opt_class(NSDate);
  v11 = objc_opt_class(NSDateComponents);
  v12 = objc_opt_class(NSData);
  v13 = objc_opt_class(NSMutableData);
  v14 = objc_opt_class(NSArray);
  v15 = objc_opt_class(NSMutableArray);
  v16 = objc_opt_class(NSDictionary);
  v17 = objc_msgSend(v38, "initWithObjects:", v37, v8, v9, v10, v11, v12, v13, v14, v15, v16, objc_opt_class(NSMutableDictionary), 0);
  v18 = objc_alloc((Class)NSSet);
  v19 = objc_opt_class(NSString);
  v20 = objc_opt_class(NSArray);
  v21 = objc_msgSend(v18, "initWithObjects:", v19, v20, objc_opt_class(NSSet), 0);
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFSecureElementManagerSessionInterface));
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v39, "deleteApplets:completion:", 0, 0);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v39, "getAppletsWithCompletion:", 0, 1);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v39, "deleteApplets:completion:", 0, 1);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v39, "deleteAllAppletsWithCompletion:", 0, 1);
  v23 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NFSignatureInfo), 0);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v23, "signChallenge:useOSVersion:completion:", 1, 1);

  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v39, "getFelicaAppletState:completion:", 0, 0);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v17, "getFelicaAppletState:completion:", 0, 1);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v39, "getTransitAppletState:completion:", 0, 0);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v17, "getTransitAppletState:completion:", 0, 1);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v39, "getServiceProviderDataForApplet:publicKey:scheme:completion:", 0, 0);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v17, "getServiceProviderDataForApplet:publicKey:scheme:completion:", 0, 1);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v39, "disableAuthorizationForApplets:andKey:authorization:completion:", 0, 0);
  v24 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NSString), 0);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v24, "disableAuthorizationForApplets:andKey:authorization:completion:", 1, 0);

  v25 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NSData), 0);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v25, "disableAuthorizationForApplets:andKey:authorization:completion:", 2, 0);

  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v21, "restoreAuthorizationForAllAppletsExcept:completion:", 0, 0);
  v26 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NFPeerPaymentEnrollmentRequest), 0);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v26, "performPeerPaymentEnrollment:completion:", 0, 0);

  v27 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NFPeerPaymentEnrollmentResponse), 0);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v27, "performPeerPaymentEnrollment:completion:", 0, 1);

  v28 = objc_msgSend(v17, "setByAddingObject:", objc_opt_class(NFApplet));
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v29, "dumpDomain:forSEID:completion:", 0, 1);

  v30 = objc_alloc((Class)NSSet);
  v31 = objc_opt_class(NFRunScriptParametersInternal);
  v32 = objc_opt_class(NSArray);
  v33 = objc_opt_class(NSString);
  v34 = objc_opt_class(NSNumber);
  v35 = objc_msgSend(v30, "initWithObjects:", v31, v32, v33, v34, objc_opt_class(NSData), 0);
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v35, "execRemoteAdminScript:params:completion:", 1, 0);

  return v22;
}

id sub_1001CE3DC(void *a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t Logger;
  NSObject *v5;
  uint8_t v7[16];

  if (!a1)
    return 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "userInfo"));
  if (v1
    && (v2 = objc_opt_class(NFWalletPresentationEntitlement), (objc_opt_isKindOfClass(v1, v2) & 1) != 0))
  {
    v3 = v1;
  }
  else
  {
    Logger = NFSharedLogGetLogger(0);
    v5 = objc_claimAutoreleasedReturnValue(Logger);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Expected entitlement object is missing", v7, 2u);
    }

    v3 = 0;
  }

  return v3;
}

void sub_1001CE498(void *a1)
{
  id v1;
  uint64_t v2;
  SecTaskRef v3;
  __SecTask *v4;
  __CFString *v5;
  uint64_t v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *specific;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  const char *v23;
  const char *v24;
  CFTypeID v25;
  void *v26;
  NFWalletPresentationEntitlement *v27;
  audit_token_t token;
  CFErrorRef error;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  CFErrorRef v39;

  if (a1)
  {
    v1 = a1;
    v2 = objc_opt_self(NFWalletPresentationEntitlement);
    v27 = objc_opt_new(NFWalletPresentationEntitlement);
    objc_msgSend(v1, "auditToken");
    v3 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
    if (v3)
    {
      v4 = v3;
      v5 = CFSTR("application-identifier");
      v6 = objc_opt_self(v2);
      v7 = CFSTR("application-identifier");
      v8 = (void *)objc_opt_self(v6);
      error = 0;
      v9 = (void *)SecTaskCopyValueForEntitlement(v4, CFSTR("application-identifier"), &error);

      if (error)
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v12 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(v8);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(v8);
          Name = sel_getName("_copyValueOfEntitlement:secTask:");
          v17 = 45;
          if (isMetaClass)
            v17 = 43;
          v12(3, "%c[%{public}s %{public}s]:%i Failed to get entitlements: %{public}@", v17, ClassName, Name, 50, error);
        }
        v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v19 = NFSharedLogGetLogger(v18);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v21 = object_getClass(v8);
          if (class_isMetaClass(v21))
            v22 = 43;
          else
            v22 = 45;
          v23 = object_getClassName(v8);
          v24 = sel_getName("_copyValueOfEntitlement:secTask:");
          *(_DWORD *)buf = 67110146;
          v31 = v22;
          v32 = 2082;
          v33 = v23;
          v34 = 2082;
          v35 = v24;
          v36 = 1024;
          v37 = 50;
          v38 = 2114;
          v39 = error;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get entitlements: %{public}@", buf, 0x2Cu);
        }

        CFRelease(error);
      }

      if (v9)
      {
        v25 = CFGetTypeID(v9);
        if (v25 != CFStringGetTypeID())
        {
          CFRelease(v9);
          v9 = 0;
        }
      }
      if (v27)
        objc_storeStrong((id *)&v27->_applicationIdentifier, v9);

      CFRelease(v4);
    }
    else
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      objc_msgSend(v26, "handleFailureInMethod:object:file:lineNumber:description:", "entitlementFromXPC:", v2, CFSTR("NFWalletPresentationEntitlement.m"), 105, CFSTR("Missing task ref"));

    }
    objc_msgSend(v1, "setUserInfo:", v27);

  }
}

id sub_1001CE7CC(void *a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  if (!a1)
    return 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "valueForEntitlement:", CFSTR("com.apple.nfcd.wallet.presentation")));
  if (v1 && (v2 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v1, v2) & 1) != 0))
    v3 = objc_msgSend(v1, "BOOLValue");
  else
    v3 = 0;

  return v3;
}

id *sub_1001CE89C(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  objc_super v7;

  v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)NFTagAppLauncher;
    a1 = (id *)objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v3);
      v5 = a1[1];
      a1[1] = v4;

      objc_msgSend(a1[1], "addObject:", a1);
    }
  }

  return a1;
}

uint64_t sub_1001CEC90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  BOOL v17;
  _BOOL4 v18;
  char **__ptr32 *v19;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v23;
  const char *ClassName;
  const char *Name;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  void *v33;
  objc_class *v34;
  id v35;
  void *v36;
  void *v37;
  void (*v38)(uint64_t, const char *, ...);
  objc_class *v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  objc_class *v46;
  int v47;
  const char *v48;
  const char *v49;
  void *v50;
  objc_class *v51;
  id v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  _QWORD v59[6];
  id v60;
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint8_t v70[128];
  _BYTE buf[40];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!a1)
    goto LABEL_24;
  v8 = 0;
  if (!v5 || !v6)
    goto LABEL_59;
  if (!qword_10032AB38)
  {
    *(_OWORD *)buf = off_1002EAB18;
    *(_QWORD *)&buf[16] = 0;
    qword_10032AB38 = _sl_dlopen(buf, 0);
  }
  if (!qword_10032AB38)
    goto LABEL_24;
  if (!qword_10032AB40)
  {
    *(_OWORD *)buf = off_1002EAB30;
    *(_QWORD *)&buf[16] = 0;
    qword_10032AB40 = _sl_dlopen(buf, 0);
  }
  if (!qword_10032AB40)
  {
LABEL_24:
    v8 = 0;
    goto LABEL_59;
  }
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v9 = *(id *)(a1 + 8);
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v63;
    while (2)
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v63 != v11)
          objc_enumerationMutation(v9);
        v13 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * (_QWORD)i);
        v61 = 0;
        v60 = 0;
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "processNDEFMesssage:outputMessage:tag:stopProcessing:", v7, &v60, v5, &v61));
        v15 = v60;
        v16 = v15;
        if (v14)
          v17 = v15 == 0;
        else
          v17 = 1;
        if (!v17)
        {
          v19 = &off_100269000;
          if (!*(_QWORD *)(a1 + 16))
          {
            specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
            if (Logger)
            {
              Class = object_getClass((id)a1);
              if (class_isMetaClass(Class))
                v23 = 43;
              else
                v23 = 45;
              ClassName = object_getClassName((id)a1);
              Name = sel_getName("processTag:withNDEFMessage:");
              Logger(5, "%c[%{public}s %{public}s]:%i Creating barcode parser", v23, ClassName, Name, 103);
            }
            v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v27 = NFSharedLogGetLogger(v26);
            v28 = objc_claimAutoreleasedReturnValue(v27);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              v29 = object_getClass((id)a1);
              if (class_isMetaClass(v29))
                v30 = 43;
              else
                v30 = 45;
              v31 = object_getClassName((id)a1);
              v32 = sel_getName("processTag:withNDEFMessage:");
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v30;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = v31;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = v32;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = 103;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Creating barcode parser", buf, 0x22u);
            }

            v66 = 0;
            v67 = &v66;
            v68 = 0x2050000000;
            v33 = (void *)qword_10032AB48;
            v69 = qword_10032AB48;
            if (!qword_10032AB48)
            {
              *(_QWORD *)buf = _NSConcreteStackBlock;
              *(_QWORD *)&buf[8] = 3221225472;
              *(_QWORD *)&buf[16] = sub_1001CF548;
              *(_QWORD *)&buf[24] = &unk_1002E5E30;
              *(_QWORD *)&buf[32] = &v66;
              sub_1001CF548((uint64_t)buf);
              v33 = (void *)v67[3];
            }
            v34 = objc_retainAutorelease(v33);
            _Block_object_dispose(&v66, 8);
            v35 = objc_alloc_init(v34);
            v36 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v35;

            v19 = &off_100269000;
            if (!*(_QWORD *)(a1 + 16))
            {
              v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v38 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v37);
              if (v38)
              {
                v39 = object_getClass((id)a1);
                if (class_isMetaClass(v39))
                  v40 = 43;
                else
                  v40 = 45;
                v41 = object_getClassName((id)a1);
                v42 = sel_getName("processTag:withNDEFMessage:");
                v38(3, "%c[%{public}s %{public}s]:%i Failed to allocate barcode parser", v40, v41, v42, 107);
              }
              v43 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v44 = NFSharedLogGetLogger(v43);
              v45 = objc_claimAutoreleasedReturnValue(v44);
              if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
              {
                v46 = object_getClass((id)a1);
                if (class_isMetaClass(v46))
                  v47 = 43;
                else
                  v47 = 45;
                v48 = object_getClassName((id)a1);
                v49 = sel_getName("processTag:withNDEFMessage:");
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&buf[4] = v47;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = v48;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = v49;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = 107;
                _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to allocate barcode parser", buf, 0x22u);
              }

              v19 = &off_100269000;
            }
          }
          v66 = 0;
          v67 = &v66;
          v68 = *((_QWORD *)v19 + 316);
          v50 = (void *)qword_10032AB50;
          v69 = qword_10032AB50;
          if (!qword_10032AB50)
          {
            *(_QWORD *)buf = _NSConcreteStackBlock;
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = sub_1001CF6E4;
            *(_QWORD *)&buf[24] = &unk_1002E5E30;
            *(_QWORD *)&buf[32] = &v66;
            sub_1001CF6E4((uint64_t)buf);
            v50 = (void *)v67[3];
          }
          v51 = objc_retainAutorelease(v50);
          _Block_object_dispose(&v66, 8);
          v52 = objc_msgSend([v51 alloc], "initWithNFNdefMessage:", v16);
          v53 = NFSharedSignpostLog(v52);
          v54 = objc_claimAutoreleasedReturnValue(v53);
          if (os_signpost_enabled(v54))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "TagAppProcessed", "", buf, 2u);
          }

          v55 = *(void **)(a1 + 16);
          v59[0] = _NSConcreteStackBlock;
          v59[1] = 3221225472;
          v59[2] = sub_1001CF348;
          v59[3] = &unk_1002EAAF8;
          v59[4] = a1;
          v59[5] = "processTag:withNDEFMessage:";
          v56 = NFSharedSignpostLog(objc_msgSend(v55, "postNotificationForURL:payload:completionHandler:", v14, v52, v59));
          v57 = objc_claimAutoreleasedReturnValue(v56);
          if (os_signpost_enabled(v57))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v57, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LPCD_POSTED_NOTIFICATION", "", buf, 2u);
          }

          v8 = 1;
          goto LABEL_58;
        }
        v18 = v61 == 0;

        if (!v18)
          goto LABEL_25;
      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
      v8 = 0;
      if (v10)
        continue;
      break;
    }
  }
  else
  {
LABEL_25:
    v8 = 0;
  }
LABEL_58:

LABEL_59:
  return v8;
}

void sub_1001CF324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1001CF348(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  const __CFString *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  const __CFString *v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  const __CFString *v33;
  __int16 v34;
  id v35;

  v5 = a3;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v8 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    if (a2)
      v13 = CFSTR("Y");
    else
      v13 = CFSTR("N");
    v23 = v13;
    v14 = 45;
    if (isMetaClass)
      v14 = 43;
    v8(6, "%c[%{public}s %{public}s]:%i Posted notification, isActionable:%{public}@, error:%{public}@", v14, ClassName, Name, 117, v23, v5);
  }
  v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v16 = NFSharedLogGetLogger(v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v18))
      v19 = 43;
    else
      v19 = 45;
    v20 = object_getClassName(*(id *)(a1 + 32));
    v21 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110402;
    if (a2)
      v22 = CFSTR("Y");
    else
      v22 = CFSTR("N");
    v25 = v19;
    v26 = 2082;
    v27 = v20;
    v28 = 2082;
    v29 = v21;
    v30 = 1024;
    v31 = 117;
    v32 = 2114;
    v33 = v22;
    v34 = 2114;
    v35 = v5;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Posted notification, isActionable:%{public}@, error:%{public}@", buf, 0x36u);
  }

}

Class sub_1001CF548(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;

  v6 = 0;
  if (!qword_10032AB40)
  {
    v7 = off_1002EAB30;
    v8 = 0;
    qword_10032AB40 = _sl_dlopen(&v7, &v6);
  }
  if (!qword_10032AB40)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *BarcodeSupportLibrary(void)"));
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("NFTagAppLauncher.m"), 24, CFSTR("%s"), v6);

    goto LABEL_10;
  }
  if (v6)
    free(v6);
  result = objc_getClass("BCSNFCCodeParser");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getBCSNFCCodeParserClass(void)_block_invoke"));
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("NFTagAppLauncher.m"), 25, CFSTR("Unable to find class %s"), "BCSNFCCodeParser");

LABEL_10:
    __break(1u);
  }
  qword_10032AB48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1001CF6E4(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;

  v6 = 0;
  if (!qword_10032AB38)
  {
    v7 = off_1002EAB18;
    v8 = 0;
    qword_10032AB38 = _sl_dlopen(&v7, &v6);
  }
  if (!qword_10032AB38)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CoreNFCLibrary(void)"));
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("NFTagAppLauncher.m"), 27, CFSTR("%s"), v6);

    goto LABEL_10;
  }
  if (v6)
    free(v6);
  result = objc_getClass("NFCNDEFMessage");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getNFCNDEFMessageClass(void)_block_invoke"));
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("NFTagAppLauncher.m"), 28, CFSTR("Unable to find class %s"), "NFCNDEFMessage");

LABEL_10:
    __break(1u);
  }
  qword_10032AB50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_1001D140C(uint64_t a1)
{
  io_connect_t *v1;
  const __CFDictionary *v2;
  io_service_t MatchingService;
  io_object_t v4;
  kern_return_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  _QWORD v14[4];
  _QWORD v15[4];

  if (!a1)
    return 0;
  v1 = (io_connect_t *)(a1 + 8);
  v2 = IOServiceMatching("AppleSMC");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v2);
  if (!MatchingService
    || (v4 = MatchingService, v5 = IOServiceOpen(MatchingService, mach_task_self_, 0, v1), IOObjectRelease(v4), v5)
    || !*v1
    || IOConnectCallScalarMethod(*v1, 0, 0, 0, 0, 0))
  {
    *v1 = 0;
  }
  else if (*v1)
  {
    return 0;
  }
  v6 = objc_alloc((Class)NSError);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v14[0] = NSLocalizedDescriptionKey;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
  v15[0] = v8;
  v15[1] = &off_100302BB8;
  v14[1] = CFSTR("Line");
  v14[2] = CFSTR("Method");
  v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("open"));
  v15[2] = v9;
  v14[3] = NSDebugDescriptionErrorKey;
  v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("open"), 121);
  v15[3] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 4));
  v12 = objc_msgSend(v6, "initWithDomain:code:userInfo:", v7, 6, v11);

  return v12;
}

uint64_t sub_1001D163C(uint64_t a1)
{
  mach_port_t v2;

  if (a1)
  {
    v2 = *(_DWORD *)(a1 + 8);
    if (v2)
    {
      IOConnectCallScalarMethod(v2, 1u, 0, 0, 0, 0);
      IOServiceClose(*(_DWORD *)(a1 + 8));
      *(_DWORD *)(a1 + 8) = 0;
    }
  }
  return 0;
}

void sub_1001D16D8(_BYTE *a1, unsigned int a2)
{
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unsigned int v26;

  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("setReaderModeActive:");
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(6, "%c[%{public}s %{public}s]:%i active %d", v9, ClassName, Name, 145, a2);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(a1);
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      *(_DWORD *)buf = 67110146;
      v18 = v14;
      v19 = 2082;
      v20 = object_getClassName(a1);
      v21 = 2082;
      v22 = sel_getName("setReaderModeActive:");
      v23 = 1024;
      v24 = 145;
      v25 = 1024;
      v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i active %d", buf, 0x28u);
    }

    a1[12] = a2;
  }
}

id sub_1001D1C18(void *a1, _QWORD *a2)
{
  id *v2;
  id v3;
  NSMutableDictionary *ErrorCode;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t PowerCounter;
  void *v13;
  void *v14;
  double v15;
  double v16;
  int v17;
  int v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v28;
  const char *ClassName;
  const char *Name;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  objc_class *v34;
  int v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  id v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  id v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  id v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  void *v72;
  id v73;
  void *v74;
  void *v75;
  void *v76;
  void (*v77)(uint64_t, const char *, ...);
  objc_class *v78;
  uint64_t v79;
  const char *v80;
  const char *v81;
  void *v82;
  uint64_t v83;
  NSObject *v84;
  objc_class *v85;
  int v86;
  const char *v87;
  const char *v88;
  id v89;
  int v90;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint8_t buf[4];
  int v96;
  __int16 v97;
  const char *v98;
  __int16 v99;
  const char *v100;
  __int16 v101;
  int v102;
  __int16 v103;
  double v104;
  __int16 v105;
  NSMutableDictionary *v106;
  _QWORD v107[4];
  _QWORD v108[4];
  _QWORD v109[4];
  _QWORD v110[4];
  _QWORD v111[4];
  _QWORD v112[4];
  _QWORD v113[4];
  _QWORD v114[4];
  _QWORD v115[4];
  _QWORD v116[4];
  _QWORD v117[2];
  _QWORD v118[2];
  const __CFString *v119;
  void *v120;
  _QWORD v121[4];
  _QWORD v122[4];
  _QWORD v123[4];
  _QWORD v124[4];

  if (!a1)
  {
    v10 = 0;
    return v10;
  }
  v93 = 0u;
  v94 = 0u;
  v92 = 0u;
  v2 = a1;
  objc_sync_enter(v2);
  if (!*((_BYTE *)v2 + 137))
  {
    if (!v2[9])
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass(v2);
        if (class_isMetaClass(Class))
          v28 = 43;
        else
          v28 = 45;
        ClassName = object_getClassName(v2);
        Name = sel_getName("getPowerCounters:");
        Logger(3, "%c[%{public}s %{public}s]:%i Power state tracking not available", v28, ClassName, Name, 43);
      }
      v31 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v32 = NFSharedLogGetLogger(v31);
      v33 = objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        v34 = object_getClass(v2);
        if (class_isMetaClass(v34))
          v35 = 43;
        else
          v35 = 45;
        *(_DWORD *)buf = 67109890;
        v96 = v35;
        v97 = 2082;
        v98 = object_getClassName(v2);
        v99 = 2082;
        v100 = sel_getName("getPowerCounters:");
        v101 = 1024;
        v102 = 43;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Power state tracking not available", buf, 0x22u);
      }

      v36 = objc_alloc((Class)NSError);
      ErrorCode = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v121[0] = NSLocalizedDescriptionKey;
      v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v122[0] = v5;
      v122[1] = &off_100302C00;
      v121[1] = CFSTR("Line");
      v121[2] = CFSTR("Method");
      v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getPowerCounters:"));
      v122[2] = v6;
      v121[3] = NSDebugDescriptionErrorKey;
      v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getPowerCounters:"), 44);
      v122[3] = v7;
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v122, v121, 4));
      v9 = objc_msgSend(v36, "initWithDomain:code:userInfo:", ErrorCode, 12, v8);
      goto LABEL_4;
    }
    PowerCounter = NFDriverGetPowerCounter(v2[5], &v92);
    if (DWORD2(v93) && (*((_BYTE *)v2 + 218) & 1) != 0)
    {
      v119 = CFSTR("falseDetectionCount");
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
      v120 = v13;
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v120, &v119, 1));
      +[NFLPCDStatisticsCALogger postAnalyticsLPCDStatistic:](NFLPCDStatisticsCALogger, "postAnalyticsLPCDStatistic:", v14);

    }
    if ((_DWORD)PowerCounter && (_DWORD)PowerCounter != 15)
    {
      ErrorCode = (NSMutableDictionary *)NFDriverCreateErrorCode(PowerCounter);
      v37 = objc_alloc((Class)NSError);
      v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v117[0] = NSLocalizedDescriptionKey;
      v6 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v117[1] = NSUnderlyingErrorKey;
      v118[0] = v6;
      v118[1] = ErrorCode;
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v118, v117, 2));
      v10 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v5, 15, v7);
      goto LABEL_5;
    }
    v90 = PowerCounter;
    objc_msgSend(v2[9], "timeIntervalSinceNow");
    v16 = v15;
    ErrorCode = objc_opt_new(NSMutableDictionary);
    v17 = v92;
    if ((_DWORD)PowerCounter == 15)
    {
      if ((_DWORD)v92 == -1 || (v18 = DWORD1(v92), DWORD1(v92) == -1))
      {
        v19 = objc_alloc((Class)NSError);
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v115[0] = NSLocalizedDescriptionKey;
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Overflow"));
        v116[0] = v21;
        v116[1] = &off_100302C18;
        v115[1] = CFSTR("Line");
        v115[2] = CFSTR("Method");
        v22 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getPowerCounters:"));
        v116[2] = v22;
        v115[3] = NSDebugDescriptionErrorKey;
        v23 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getPowerCounters:"), 62);
        v116[3] = v23;
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v116, v115, 4));
        v10 = objc_msgSend(v19, "initWithDomain:code:userInfo:", v20, 45, v24);

LABEL_32:
        if (DWORD2(v93) == -1 && v90 == 15)
        {
          v43 = objc_alloc((Class)NSError);
          v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v113[0] = NSLocalizedDescriptionKey;
          v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Overflow"));
          v114[0] = v45;
          v114[1] = &off_100302C30;
          v113[1] = CFSTR("Line");
          v113[2] = CFSTR("Method");
          v46 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getPowerCounters:"));
          v114[2] = v46;
          v113[3] = NSDebugDescriptionErrorKey;
          v47 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getPowerCounters:"), 73);
          v114[3] = v47;
          v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v114, v113, 4));
          v49 = objc_msgSend(v43, "initWithDomain:code:userInfo:", v44, 45, v48);

          v10 = v49;
        }
        else
        {
          v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
          -[NSMutableDictionary setObject:forKey:](ErrorCode, "setObject:forKey:", v44, CFSTR("lpcdFalseDetectCount"));
        }

        if (DWORD2(v92) == 0xFFFFFFFFLL && v90 == 15)
        {
          v51 = objc_alloc((Class)NSError);
          v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v111[0] = NSLocalizedDescriptionKey;
          v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Overflow"));
          v112[0] = v53;
          v112[1] = &off_100302C48;
          v111[1] = CFSTR("Line");
          v111[2] = CFSTR("Method");
          v54 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getPowerCounters:"));
          v112[2] = v54;
          v111[3] = NSDebugDescriptionErrorKey;
          v55 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getPowerCounters:"), 78);
          v112[3] = v55;
          v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v112, v111, 4));
          v57 = objc_msgSend(v51, "initWithDomain:code:userInfo:", v52, 45, v56);

          v10 = v57;
        }
        else
        {
          v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
          -[NSMutableDictionary setObject:forKey:](ErrorCode, "setObject:forKey:", v52, CFSTR("SEUptime"));
        }

        if (HIDWORD(v92) == 0xFFFFFFFFLL && v90 == 15)
        {
          v59 = objc_alloc((Class)NSError);
          v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v109[0] = NSLocalizedDescriptionKey;
          v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Overflow"));
          v110[0] = v61;
          v110[1] = &off_100302C60;
          v109[1] = CFSTR("Line");
          v109[2] = CFSTR("Method");
          v62 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getPowerCounters:"));
          v110[2] = v62;
          v109[3] = NSDebugDescriptionErrorKey;
          v63 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getPowerCounters:"), 84);
          v110[3] = v63;
          v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v110, v109, 4));
          v65 = objc_msgSend(v59, "initWithDomain:code:userInfo:", v60, 45, v64);

          v10 = v65;
        }
        else
        {
          v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
          -[NSMutableDictionary setObject:forKey:](ErrorCode, "setObject:forKey:", v60, CFSTR("jcopUpCounter"));
        }

        if (v93 == 0xFFFFFFFFLL && v90 == 15)
        {
          v67 = objc_alloc((Class)NSError);
          v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v107[0] = NSLocalizedDescriptionKey;
          v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Overflow"));
          v108[0] = v69;
          v108[1] = &off_100302C78;
          v107[1] = CFSTR("Line");
          v107[2] = CFSTR("Method");
          v70 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getPowerCounters:"));
          v108[2] = v70;
          v107[3] = NSDebugDescriptionErrorKey;
          v71 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getPowerCounters:"), 90);
          v108[3] = v71;
          v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v108, v107, 4));
          v73 = objc_msgSend(v67, "initWithDomain:code:userInfo:", v68, 45, v72);

          v10 = v73;
        }
        else
        {
          v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
          -[NSMutableDictionary setObject:forKey:](ErrorCode, "setObject:forKey:", v68, CFSTR("uiccUpCounter"));
        }

        v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", BYTE4(v93)));
        -[NSMutableDictionary setObject:forKey:](ErrorCode, "setObject:forKey:", v74, CFSTR("eseStatus"));

        v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", BYTE5(v93)));
        -[NSMutableDictionary setObject:forKey:](ErrorCode, "setObject:forKey:", v75, CFSTR("mboxStatus"));

        v76 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v77 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v76);
        if (v77)
        {
          v78 = object_getClass(v2);
          if (class_isMetaClass(v78))
            v79 = 43;
          else
            v79 = 45;
          v80 = object_getClassName(v2);
          v81 = sel_getName("getPowerCounters:");
          v77(6, "%c[%{public}s %{public}s]:%i Last query was %f seconds ago, power dict = %{public}@", v79, v80, v81, 98, *(_QWORD *)&v16, ErrorCode);
        }
        v82 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v83 = NFSharedLogGetLogger(v82);
        v84 = objc_claimAutoreleasedReturnValue(v83);
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
        {
          v85 = object_getClass(v2);
          if (class_isMetaClass(v85))
            v86 = 43;
          else
            v86 = 45;
          v87 = object_getClassName(v2);
          v88 = sel_getName("getPowerCounters:");
          *(_DWORD *)buf = 67110402;
          v96 = v86;
          v97 = 2082;
          v98 = v87;
          v99 = 2082;
          v100 = v88;
          v101 = 1024;
          v102 = 98;
          v103 = 2048;
          v104 = v16;
          v105 = 2114;
          v106 = ErrorCode;
          _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Last query was %f seconds ago, power dict = %{public}@", buf, 0x36u);
        }

        if (a2)
          *a2 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithDictionary:", ErrorCode);
        v89 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceNow:", 0.0);
        v5 = v2[9];
        v2[9] = v89;
        goto LABEL_6;
      }
    }
    else
    {
      v18 = DWORD1(v92);
    }
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v92));
    -[NSMutableDictionary setObject:forKey:](ErrorCode, "setObject:forKey:", v38, CFSTR("idleTime"));

    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", DWORD1(v92)));
    -[NSMutableDictionary setObject:forKey:](ErrorCode, "setObject:forKey:", v39, CFSTR("rfTime"));

    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", -((double)(v18 + v17) - v16 * -1000.0)));
    -[NSMutableDictionary setObject:forKey:](ErrorCode, "setObject:forKey:", v40, CFSTR("sleepTime"));

    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)&v94 + 1)));
    -[NSMutableDictionary setObject:forKey:](ErrorCode, "setObject:forKey:", v41, CFSTR("fieldDetectUpTime"));

    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (_QWORD)v94));
    -[NSMutableDictionary setObject:forKey:](ErrorCode, "setObject:forKey:", v20, CFSTR("expressUpTime"));
    v10 = 0;
    goto LABEL_32;
  }
  v3 = objc_alloc((Class)NSError);
  ErrorCode = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v123[0] = NSLocalizedDescriptionKey;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
  v124[0] = v5;
  v124[1] = &off_100302BE8;
  v123[1] = CFSTR("Line");
  v123[2] = CFSTR("Method");
  v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getPowerCounters:"));
  v124[2] = v6;
  v123[3] = NSDebugDescriptionErrorKey;
  v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getPowerCounters:"), 39);
  v124[3] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v124, v123, 4));
  v9 = objc_msgSend(v3, "initWithDomain:code:userInfo:", ErrorCode, 3, v8);
LABEL_4:
  v10 = v9;

LABEL_5:
LABEL_6:

  objc_sync_exit(v2);
  return v10;
}

void sub_1001D2BF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001D2C3C(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9;
  NSMutableDictionary *v10;
  NSMutableDictionary *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  void *v34;
  void *v35;
  char *v36;
  void *v37;
  char *v38;
  void *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  void *v45;
  char *v46;
  void *v47;
  char *v48;
  void *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  void *v55;
  char *v56;
  void *v57;
  char *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  NSMutableDictionary *v63;
  void *v64;
  NSMutableDictionary *v65;
  void *v66;
  const __CFString *v67;
  id v68;

  v9 = a2;
  v10 = a3;
  if (!a1)
  {
    v68 = 0;
    goto LABEL_17;
  }
  v11 = objc_opt_new(NSMutableDictionary);
  if (objc_msgSend(v9, "count"))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("idleTime")));
    v13 = objc_msgSend(v12, "intValue");
    v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("idleTime")));
    v15 = objc_msgSend(v14, "intValue") + v13;

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v16, CFSTR("idleTime"));

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("rfTime")));
    LODWORD(v15) = objc_msgSend(v17, "intValue");
    v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("rfTime")));
    v19 = objc_msgSend(v18, "intValue") + v15;

    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v19));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v20, CFSTR("rfTime"));

    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("sleepTime")));
    LODWORD(v19) = objc_msgSend(v21, "intValue");
    v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("sleepTime")));
    v23 = objc_msgSend(v22, "intValue") + v19;

    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v23));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v24, CFSTR("sleepTime"));

    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("lpcdFalseDetectCount")));
    LODWORD(v23) = objc_msgSend(v25, "intValue");
    v26 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("lpcdFalseDetectCount")));
    v27 = objc_msgSend(v26, "intValue") + v23;

    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v27));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v28, CFSTR("lpcdFalseDetectCount"));

    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("SEUptime")));
    v30 = (char *)objc_msgSend(v29, "longLongValue");
    v31 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("SEUptime")));
    v32 = &v30[(_QWORD)objc_msgSend(v31, "longLongValue")];

    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v32));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v33, CFSTR("SEUptime"));

    if (a4)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v34, CFSTR("Overflow"));

    }
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("fieldDetectUpTime")));
    v36 = (char *)objc_msgSend(v35, "longLongValue");
    v37 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("fieldDetectUpTime")));
    v38 = &v36[(_QWORD)objc_msgSend(v37, "longLongValue")];

    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v38));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v39, CFSTR("fieldDetectUpTime"));

    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("expressUpTime")));
    v41 = (char *)objc_msgSend(v40, "longLongValue");
    v42 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("expressUpTime")));
    v43 = &v41[(_QWORD)objc_msgSend(v42, "longLongValue")];

    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v43));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v44, CFSTR("expressUpTime"));

    if ((a5 & 1) == 0)
    {
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("jcopUpCounter")));
      v46 = (char *)objc_msgSend(v45, "longLongValue");
      v47 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("jcopUpCounter")));
      v48 = &v46[(_QWORD)objc_msgSend(v47, "longLongValue")];

      v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v48));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v49, CFSTR("jcopUpCounter"));

      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("uiccUpCounter")));
      v51 = (char *)objc_msgSend(v50, "longLongValue");
      v52 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("uiccUpCounter")));
      v53 = &v51[(_QWORD)objc_msgSend(v52, "longLongValue")];

      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v53));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v54, CFSTR("uiccUpCounter"));

    }
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("uiccUpCounter")));
    v56 = (char *)objc_msgSend(v55, "longLongValue");
    v57 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("uiccUpCounter")));
    v58 = &v56[(_QWORD)objc_msgSend(v57, "longLongValue")];

    v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v58));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v59, CFSTR("uiccUpCounter"));

    if (a5)
    {
      -[NSMutableDictionary removeObjectForKey:](v11, "removeObjectForKey:", CFSTR("jcopUpCounter"));
      -[NSMutableDictionary removeObjectForKey:](v11, "removeObjectForKey:", CFSTR("uiccUpCounter"));
    }
    v60 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("eseStatus")));

    if (v60)
    {
      v61 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("eseStatus")));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v61, CFSTR("eseStatus"));

    }
    v62 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("mboxStatus")));

    v63 = v11;
    if (!v62)
      goto LABEL_16;
    v64 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", CFSTR("mboxStatus")));
    v65 = v11;
    v66 = v64;
    v67 = CFSTR("mboxStatus");
    goto LABEL_15;
  }
  v63 = v10;
  if (a4)
  {
    -[NSMutableDictionary addEntriesFromDictionary:](v11, "addEntriesFromDictionary:", v10);
    v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    v67 = CFSTR("Overflow");
    v65 = v11;
    v66 = v64;
LABEL_15:
    -[NSMutableDictionary setObject:forKeyedSubscript:](v65, "setObject:forKeyedSubscript:", v66, v67);

    v63 = v11;
  }
LABEL_16:
  v68 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithDictionary:", v63);

LABEL_17:
  return v68;
}

id sub_1001D3288(void *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *ErrorCode;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  int v27;
  _QWORD v28[4];
  _QWORD v29[4];
  _QWORD v30[2];
  _QWORD v31[2];
  _QWORD v32[4];
  _QWORD v33[4];

  if (!a1)
    return 0;
  v27 = 0;
  v3 = a1;
  objc_sync_enter(v3);
  v4 = v3[5];
  if (v4)
  {
    v5 = NFDriverGetFlashWriteCounter(v4, &v27);
    if ((_DWORD)v5)
      v6 = (_DWORD)v5 == 15;
    else
      v6 = 1;
    if (v6)
    {
      if ((_DWORD)v5 == 15 && v27 == -1)
      {
        v20 = objc_alloc((Class)NSError);
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v28[0] = NSLocalizedDescriptionKey;
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Overflow"));
        v29[0] = v22;
        v29[1] = &off_100302CA8;
        v28[1] = CFSTR("Line");
        v28[2] = CFSTR("Method");
        v23 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getFlashWriteCounters:"));
        v29[2] = v23;
        v28[3] = NSDebugDescriptionErrorKey;
        v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getFlashWriteCounters:"), 193);
        v29[3] = v24;
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 4));
        v19 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 45, v25);

      }
      else
      {
        v19 = 0;
        if (a2)
          *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:"));
      }
    }
    else
    {
      ErrorCode = (void *)NFDriverCreateErrorCode(v5);
      v15 = objc_alloc((Class)NSError);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v30[0] = NSLocalizedDescriptionKey;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v30[1] = NSUnderlyingErrorKey;
      v31[0] = v17;
      v31[1] = ErrorCode;
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v31, v30, 2));
      v19 = objc_msgSend(v15, "initWithDomain:code:userInfo:", v16, 15, v18);

    }
  }
  else
  {
    v8 = objc_alloc((Class)NSError);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v32[0] = NSLocalizedDescriptionKey;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
    v33[0] = v10;
    v33[1] = &off_100302C90;
    v32[1] = CFSTR("Line");
    v32[2] = CFSTR("Method");
    v11 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getFlashWriteCounters:"));
    v33[2] = v11;
    v32[3] = NSDebugDescriptionErrorKey;
    v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getFlashWriteCounters:"), 183);
    v33[3] = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v33, v32, 4));
    v19 = objc_msgSend(v8, "initWithDomain:code:userInfo:", v9, 3, v13);

  }
  objc_sync_exit(v3);

  return v19;
}

void sub_1001D36B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001D36D0(void *a1, NSMutableArray **a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  int PageEraseCounter;
  NSMutableArray *v20;
  unint64_t v21;
  void *v22;
  NSMutableArray *v23;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v27;
  const char *ClassName;
  const char *Name;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  const char *v35;
  const char *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  _OWORD v43[16];
  int v44;
  _QWORD v45[4];
  _QWORD v46[4];
  uint8_t buf[4];
  int v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  int v54;
  _QWORD v55[4];
  _QWORD v56[4];
  _QWORD v57[4];
  _QWORD v58[4];
  _QWORD v59[4];
  _QWORD v60[4];

  if (!a1)
    return 0;
  v44 = 0;
  memset(v43, 0, sizeof(v43));
  if (a2)
  {
    v3 = a1;
    objc_sync_enter(v3);
    if (*((_QWORD *)v3 + 5))
    {
      if (!*((_BYTE *)v3 + 137))
      {
        PageEraseCounter = NFDriverReadPageEraseCounter();
        if (PageEraseCounter == 19)
        {
          v16 = 0;
          *a2 = 0;
        }
        else if (PageEraseCounter)
        {
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
          if (Logger)
          {
            Class = object_getClass(v3);
            if (class_isMetaClass(Class))
              v27 = 43;
            else
              v27 = 45;
            ClassName = object_getClassName(v3);
            Name = sel_getName("getFlashEraseCounters:");
            Logger(3, "%c[%{public}s %{public}s]:%i Failed to get erase counters", v27, ClassName, Name, 236);
          }
          v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v31 = NFSharedLogGetLogger(v30);
          v32 = objc_claimAutoreleasedReturnValue(v31);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            v33 = object_getClass(v3);
            if (class_isMetaClass(v33))
              v34 = 43;
            else
              v34 = 45;
            v35 = object_getClassName(v3);
            v36 = sel_getName("getFlashEraseCounters:");
            *(_DWORD *)buf = 67109890;
            v48 = v34;
            v49 = 2082;
            v50 = v35;
            v51 = 2082;
            v52 = v36;
            v53 = 1024;
            v54 = 236;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get erase counters", buf, 0x22u);
          }

          *a2 = 0;
          v37 = objc_alloc((Class)NSError);
          v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v45[0] = NSLocalizedDescriptionKey;
          v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
          v46[0] = v39;
          v46[1] = &off_100302D08;
          v45[1] = CFSTR("Line");
          v45[2] = CFSTR("Method");
          v40 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getFlashEraseCounters:"));
          v46[2] = v40;
          v45[3] = NSDebugDescriptionErrorKey;
          v41 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getFlashEraseCounters:"), 238);
          v46[3] = v41;
          v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v46, v45, 4));
          v16 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 15, v42);

        }
        else
        {
          v20 = objc_opt_new(NSMutableArray);
          NFDriverPrintPageEraseCounter(*((_QWORD *)v3 + 5), v43);
          if (LOWORD(v43[0]))
          {
            v21 = 0;
            do
            {
              v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v43 + v21 + 1)));
              -[NSMutableArray setObject:atIndexedSubscript:](v20, "setObject:atIndexedSubscript:", v22, v21);

              ++v21;
            }
            while (v21 < LOWORD(v43[0]));
          }
          v23 = objc_retainAutorelease(v20);
          *a2 = v23;

          v16 = 0;
        }
        goto LABEL_9;
      }
      v4 = objc_alloc((Class)NSError);
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v55[0] = NSLocalizedDescriptionKey;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
      v56[0] = v6;
      v56[1] = &off_100302CF0;
      v55[1] = CFSTR("Line");
      v55[2] = CFSTR("Method");
      v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getFlashEraseCounters:"));
      v56[2] = v7;
      v55[3] = NSDebugDescriptionErrorKey;
      v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getFlashEraseCounters:"), 219);
      v56[3] = v8;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v56, v55, 4));
      v10 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v5, 3, v9);
    }
    else
    {
      v17 = objc_alloc((Class)NSError);
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v57[0] = NSLocalizedDescriptionKey;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
      v58[0] = v6;
      v58[1] = &off_100302CD8;
      v57[1] = CFSTR("Line");
      v57[2] = CFSTR("Method");
      v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getFlashEraseCounters:"));
      v58[2] = v7;
      v57[3] = NSDebugDescriptionErrorKey;
      v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getFlashEraseCounters:"), 215);
      v58[3] = v8;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v58, v57, 4));
      v10 = objc_msgSend(v17, "initWithDomain:code:userInfo:", v5, 3, v9);
    }
    v16 = v10;

LABEL_9:
    objc_sync_exit(v3);
    goto LABEL_10;
  }
  v11 = objc_alloc((Class)NSError);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v59[0] = NSLocalizedDescriptionKey;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
  v60[0] = v12;
  v60[1] = &off_100302CC0;
  v59[1] = CFSTR("Line");
  v59[2] = CFSTR("Method");
  v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getFlashEraseCounters:"));
  v60[2] = v13;
  v59[3] = NSDebugDescriptionErrorKey;
  v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getFlashEraseCounters:"), 210);
  v60[3] = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v60, v59, 4));
  v16 = objc_msgSend(v11, "initWithDomain:code:userInfo:", v3, 10, v15);

LABEL_10:
  return v16;
}

void sub_1001D3E2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double sub_1001D3E5C(void **a1)
{
  void *v2;
  char v3;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v7;
  const char *ClassName;
  const char *Name;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint32_t v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  objc_class *v28;
  int v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v35[7];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  id v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  uint64_t v55;

  v42 = 0;
  v43 = &v42;
  v44 = 0x2020000000;
  v45 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x3032000000;
  v39 = sub_1001D4228;
  v40 = sub_1001D4238;
  v41 = 0;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_1001D4240;
  v35[3] = &unk_1002EAB50;
  v35[4] = a1;
  v35[5] = &v36;
  v35[6] = &v42;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig embeddedWiredModeWithFD:](NFRoutingConfig, "embeddedWiredModeWithFD:", 1));
  v3 = sub_1000E3CEC(a1, v35, CFSTR("AvoidSEReset"), v2);

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  if ((v3 & 1) != 0)
  {
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(a1);
      if (class_isMetaClass(Class))
        v7 = 43;
      else
        v7 = 45;
      ClassName = object_getClassName(a1);
      Name = sel_getName("_queryRemainTimeFromTimers");
      Logger(6, "%c[%{public}s %{public}s]:%i SE keep alive active", v7, ClassName, Name, 42);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(a1);
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(a1);
      v16 = sel_getName("_queryRemainTimeFromTimers");
      *(_DWORD *)buf = 67109890;
      v47 = v14;
      v48 = 2082;
      v49 = v15;
      v50 = 2082;
      v51 = v16;
      v52 = 1024;
      v53 = 42;
      v17 = "%c[%{public}s %{public}s]:%i SE keep alive active";
      v18 = v12;
      v19 = OS_LOG_TYPE_DEFAULT;
      v20 = 34;
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v18, v19, v17, buf, v20);
    }
  }
  else
  {
    v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (v21)
    {
      v22 = object_getClass(a1);
      if (class_isMetaClass(v22))
        v23 = 43;
      else
        v23 = 45;
      v24 = object_getClassName(a1);
      v25 = sel_getName("_queryRemainTimeFromTimers");
      v21(3, "%c[%{public}s %{public}s]:%i Failed to query timers: %{public}@", v23, v24, v25, 40, v37[5]);
    }
    v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v27 = NFSharedLogGetLogger(v26);
    v12 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v28 = object_getClass(a1);
      if (class_isMetaClass(v28))
        v29 = 43;
      else
        v29 = 45;
      v30 = object_getClassName(a1);
      v31 = sel_getName("_queryRemainTimeFromTimers");
      v32 = v37[5];
      *(_DWORD *)buf = 67110146;
      v47 = v29;
      v48 = 2082;
      v49 = v30;
      v50 = 2082;
      v51 = v31;
      v52 = 1024;
      v53 = 40;
      v54 = 2114;
      v55 = v32;
      v17 = "%c[%{public}s %{public}s]:%i Failed to query timers: %{public}@";
      v18 = v12;
      v19 = OS_LOG_TYPE_ERROR;
      v20 = 44;
      goto LABEL_22;
    }
  }

  v33 = v43[3];
  _Block_object_dispose(&v36, 8);

  _Block_object_dispose(&v42, 8);
  return (double)v33;
}

void sub_1001D41E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D4228(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001D4238(uint64_t a1)
{

}

BOOL sub_1001D4240(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secureElementWrapper"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "checkDeepSleepTimerRunning:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) == 0;
}

id sub_1001D42AC(void *a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "controllerInfo"));
  if ((unint64_t)objc_msgSend(v2, "siliconName") < 7)
  {
    v4 = 0;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "controllerInfo"));
    v4 = objc_msgSend(v3, "poweredRunDuringSleep");

  }
  return v4;
}

void sub_1001D4314(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  void *v16;
  uint64_t v17;
  void (*v18)(uint64_t, const char *, ...);
  objc_class *v19;
  _BOOL4 v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  objc_class *v25;
  int v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  _BOOL4 v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  objc_class *v36;
  int v37;
  double v38;
  double v39;
  void *v40;
  id v41;
  void *v42;
  id *v43;
  id v44;
  _BOOL4 v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  void (*v52)(uint64_t, const char *, ...);
  objc_class *v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  objc_class *v60;
  int v61;
  const char *v62;
  const char *v63;
  const char *Name;
  const char *v65;
  const char *v66;
  _QWORD v67[4];
  id v68[2];
  id location;
  uint8_t buf[4];
  int v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  int v77;
  __int16 v78;
  double v79;

  if (a1 && sub_1001D42AC((void *)a1))
  {
    if (*(_BYTE *)(a1 + 341))
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v4 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("openDriverForDPDTimers");
        v8 = 45;
        if (isMetaClass)
          v8 = 43;
        v4(6, "%c[%{public}s %{public}s]:%i SE keep alive active", v8, ClassName, Name, 69);
      }
      v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v10 = NFSharedLogGetLogger(v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = object_getClass((id)a1);
        if (class_isMetaClass(v12))
          v13 = 43;
        else
          v13 = 45;
        *(_DWORD *)buf = 67109890;
        v71 = v13;
        v72 = 2082;
        v73 = object_getClassName((id)a1);
        v74 = 2082;
        v75 = sel_getName("openDriverForDPDTimers");
        v76 = 1024;
        v77 = 69;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i SE keep alive active", buf, 0x22u);
      }
LABEL_28:

      return;
    }
    if (!*(_BYTE *)(a1 + 340))
      return;
    v14 = (unsigned __int8 *)*(id *)(a1 + 24);
    if (v14)
    {
      if (*((_QWORD *)v14 + 17) == 1)
      {

LABEL_19:
        v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v17 = NFLogGetLogger(v16);
        if (v17)
        {
          v18 = (void (*)(uint64_t, const char *, ...))v17;
          v19 = object_getClass((id)a1);
          v20 = class_isMetaClass(v19);
          v21 = object_getClassName((id)a1);
          v65 = sel_getName("openDriverForDPDTimers");
          v22 = 45;
          if (v20)
            v22 = 43;
          v18(6, "%c[%{public}s %{public}s]:%i EMM in progress", v22, v21, v65, 81);
        }
        v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v24 = NFSharedLogGetLogger(v23);
        v11 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v25 = object_getClass((id)a1);
          if (class_isMetaClass(v25))
            v26 = 43;
          else
            v26 = 45;
          *(_DWORD *)buf = 67109890;
          v71 = v26;
          v72 = 2082;
          v73 = object_getClassName((id)a1);
          v74 = 2082;
          v75 = sel_getName("openDriverForDPDTimers");
          v76 = 1024;
          v77 = 81;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i EMM in progress", buf, 0x22u);
        }
        goto LABEL_28;
      }
      v15 = v14[170];

      if (v15)
        goto LABEL_19;
    }
    if (sub_1000E7A2C(a1))
    {
      v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v28 = NFLogGetLogger(v27);
      if (v28)
      {
        v29 = (void (*)(uint64_t, const char *, ...))v28;
        v30 = object_getClass((id)a1);
        v31 = class_isMetaClass(v30);
        v32 = object_getClassName((id)a1);
        v66 = sel_getName("openDriverForDPDTimers");
        v33 = 45;
        if (v31)
          v33 = 43;
        v29(6, "%c[%{public}s %{public}s]:%i Active session", v33, v32, v66, 86);
      }
      v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v35 = NFSharedLogGetLogger(v34);
      v11 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v36 = object_getClass((id)a1);
        if (class_isMetaClass(v36))
          v37 = 43;
        else
          v37 = 45;
        *(_DWORD *)buf = 67109890;
        v71 = v37;
        v72 = 2082;
        v73 = object_getClassName((id)a1);
        v74 = 2082;
        v75 = sel_getName("openDriverForDPDTimers");
        v76 = 1024;
        v77 = 86;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Active session", buf, 0x22u);
      }
      goto LABEL_28;
    }
    v38 = sub_1001D3E5C((void **)a1);
    if (v38 > 0.0)
    {
      v39 = v38;
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "driverWrapper"));
      v41 = sub_1001F84C8(v40, CFSTR("SE KeepAlive"), 0);
      v42 = (void *)objc_claimAutoreleasedReturnValue(v41);

      if (!v42)
      {
        *(_BYTE *)(a1 + 341) = 1;
        objc_initWeak(&location, (id)a1);
        v43 = (id *)(a1 + 144);
        v44 = *(id *)(a1 + 144);
        v45 = v44 == 0;

        if (v45)
        {
          v46 = objc_alloc((Class)NFTimer);
          v67[0] = _NSConcreteStackBlock;
          v67[1] = 3221225472;
          v67[2] = sub_1001D49D0;
          v67[3] = &unk_1002E6290;
          objc_copyWeak(v68, &location);
          v68[1] = "openDriverForDPDTimers";
          v47 = *(id *)(a1 + 232);
          v48 = objc_msgSend(v46, "initWithCallback:queue:", v67, v47);
          objc_storeStrong((id *)(a1 + 144), v48);

          objc_destroyWeak(v68);
        }
        v49 = *v43;
        objc_msgSend(v49, "stopTimer");

        v50 = *v43;
        objc_msgSend(v50, "startTimer:", v39);

        v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v52 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v51);
        if (v52)
        {
          v53 = object_getClass((id)a1);
          if (class_isMetaClass(v53))
            v54 = 43;
          else
            v54 = 45;
          v55 = object_getClassName((id)a1);
          v56 = sel_getName("openDriverForDPDTimers");
          v52(6, "%c[%{public}s %{public}s]:%i Check in %fs", v54, v55, v56, 117, *(_QWORD *)&v39);
        }
        v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v58 = NFSharedLogGetLogger(v57);
        v59 = objc_claimAutoreleasedReturnValue(v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          v60 = object_getClass((id)a1);
          if (class_isMetaClass(v60))
            v61 = 43;
          else
            v61 = 45;
          v62 = object_getClassName((id)a1);
          v63 = sel_getName("openDriverForDPDTimers");
          *(_DWORD *)buf = 67110146;
          v71 = v61;
          v72 = 2082;
          v73 = v62;
          v74 = 2082;
          v75 = v63;
          v76 = 1024;
          v77 = 117;
          v78 = 2048;
          v79 = v39;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Check in %fs", buf, 0x2Cu);
        }

        objc_destroyWeak(&location);
      }

    }
    *(_BYTE *)(a1 + 340) = 0;
  }
}

void sub_1001D4998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001D49D0(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  double v4;
  unsigned __int8 *v5;
  int v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *v23;
  _BOOL4 v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  objc_class *v30;
  int v31;
  const char *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  void (*v36)(uint64_t, const char *, ...);
  objc_class *v37;
  _BOOL4 v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  objc_class *v44;
  int v45;
  const char *v46;
  const char *v47;
  id v48;
  void *v49;
  uint64_t v50;
  void (*v51)(uint64_t, const char *, ...);
  objc_class *v52;
  _BOOL4 v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  objc_class *v58;
  int v59;
  const char *Name;
  const char *v61;
  const char *v62;
  const char *v63;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  double v73;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (!WeakRetained)
    goto LABEL_40;
  v4 = -1.0;
  if (sub_1001D42AC(WeakRetained))
  {
    v5 = (unsigned __int8 *)v3[3];
    if (v5)
    {
      if (*((_QWORD *)v5 + 17) == 1)
      {

LABEL_7:
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v9 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(v3);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(v3);
          Name = sel_getName("_dpdTimerRunning");
          v13 = 45;
          if (isMetaClass)
            v13 = 43;
          v9(6, "%c[%{public}s %{public}s]:%i EMM in progress", v13, ClassName, Name, 151);
        }
        v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v15 = NFSharedLogGetLogger(v14);
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          goto LABEL_17;
        v17 = object_getClass(v3);
        if (class_isMetaClass(v17))
          v18 = 43;
        else
          v18 = 45;
        *(_DWORD *)buf = 67109890;
        v65 = v18;
        v66 = 2082;
        v67 = object_getClassName(v3);
        v68 = 2082;
        v69 = sel_getName("_dpdTimerRunning");
        v70 = 1024;
        v71 = 151;
        v19 = "%c[%{public}s %{public}s]:%i EMM in progress";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v19, buf, 0x22u);
LABEL_17:

        goto LABEL_18;
      }
      v6 = v5[170];

      if (v6)
        goto LABEL_7;
    }
    if (!sub_1000E7A2C((uint64_t)v3))
    {
      v4 = sub_1001D3E5C(v3);
      goto LABEL_18;
    }
    v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v50 = NFLogGetLogger(v49);
    if (v50)
    {
      v51 = (void (*)(uint64_t, const char *, ...))v50;
      v52 = object_getClass(v3);
      v53 = class_isMetaClass(v52);
      v54 = object_getClassName(v3);
      v63 = sel_getName("_dpdTimerRunning");
      v55 = 45;
      if (v53)
        v55 = 43;
      v51(6, "%c[%{public}s %{public}s]:%i Active session", v55, v54, v63, 156);
    }
    v56 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v57 = NFSharedLogGetLogger(v56);
    v16 = objc_claimAutoreleasedReturnValue(v57);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_17;
    v58 = object_getClass(v3);
    if (class_isMetaClass(v58))
      v59 = 43;
    else
      v59 = 45;
    *(_DWORD *)buf = 67109890;
    v65 = v59;
    v66 = 2082;
    v67 = object_getClassName(v3);
    v68 = 2082;
    v69 = sel_getName("_dpdTimerRunning");
    v70 = 1024;
    v71 = 156;
    v19 = "%c[%{public}s %{public}s]:%i Active session";
    goto LABEL_16;
  }
LABEL_18:
  v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v21 = NFLogGetLogger(v20);
  if (v21)
  {
    v22 = (void (*)(uint64_t, const char *, ...))v21;
    v23 = object_getClass(v3);
    v24 = class_isMetaClass(v23);
    v25 = object_getClassName(v3);
    v61 = sel_getName(*(SEL *)(a1 + 40));
    v26 = 45;
    if (v24)
      v26 = 43;
    v22(6, "%c[%{public}s %{public}s]:%i Check DPD timer: %f", v26, v25, v61, 105, *(_QWORD *)&v4);
  }
  v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v28 = NFSharedLogGetLogger(v27);
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    v30 = object_getClass(v3);
    if (class_isMetaClass(v30))
      v31 = 43;
    else
      v31 = 45;
    v32 = object_getClassName(v3);
    v33 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v65 = v31;
    v66 = 2082;
    v67 = v32;
    v68 = 2082;
    v69 = v33;
    v70 = 1024;
    v71 = 105;
    v72 = 2048;
    v73 = v4;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Check DPD timer: %f", buf, 0x2Cu);
  }

  if (v4 == 0.0)
  {
    sub_1001D4F38(v3);
  }
  else if (v4 > 0.0)
  {
    v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v35 = NFLogGetLogger(v34);
    if (v35)
    {
      v36 = (void (*)(uint64_t, const char *, ...))v35;
      v37 = object_getClass(v3);
      v38 = class_isMetaClass(v37);
      v39 = object_getClassName(v3);
      v62 = sel_getName(*(SEL *)(a1 + 40));
      v40 = 45;
      if (v38)
        v40 = 43;
      v36(6, "%c[%{public}s %{public}s]:%i Restart delay check, %fs", v40, v39, v62, 110, *(_QWORD *)&v4);
    }
    v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v42 = NFSharedLogGetLogger(v41);
    v43 = objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v44 = object_getClass(v3);
      if (class_isMetaClass(v44))
        v45 = 43;
      else
        v45 = 45;
      v46 = object_getClassName(v3);
      v47 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      v65 = v45;
      v66 = 2082;
      v67 = v46;
      v68 = 2082;
      v69 = v47;
      v70 = 1024;
      v71 = 110;
      v72 = 2048;
      v73 = v4;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Restart delay check, %fs", buf, 0x2Cu);
    }

    v48 = v3[18];
    objc_msgSend(v48, "startTimer:", v4);

  }
LABEL_40:

}

void sub_1001D4F38(_BYTE *a1)
{
  void *v2;

  if (a1)
  {
    if (a1[341])
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "driverWrapper"));
      sub_1001FABB8(v2, CFSTR("SE KeepAlive"));

      a1[341] = 0;
    }
  }
}

void sub_1001D4F84(_BYTE *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *Name;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;

  if (a1 && sub_1001D42AC(a1))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("markDPDTimerChanged");
      v8 = 45;
      if (isMetaClass)
        v8 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 128);
    }
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFSharedLogGetLogger(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = object_getClass(a1);
      if (class_isMetaClass(v12))
        v13 = 43;
      else
        v13 = 45;
      *(_DWORD *)buf = 67109890;
      v16 = v13;
      v17 = 2082;
      v18 = object_getClassName(a1);
      v19 = 2082;
      v20 = sel_getName("markDPDTimerChanged");
      v21 = 1024;
      v22 = 128;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    a1[340] = 1;
  }
}

uint64_t sub_1001D5544(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (*((_BYTE *)v3 + 137))
    v4 = 0;
  else
    v4 = NFDriverTriggerDelayedWake(*((_QWORD *)v3 + 5), a2);
  objc_sync_exit(v3);

  return v4;
}

void sub_1001D55A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D55BC(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (*((_BYTE *)v3 + 137))
    v4 = 0;
  else
    v4 = NFDriverCrashNFCC(*((_QWORD *)v3 + 5), a2);
  objc_sync_exit(v3);

  return v4;
}

void sub_1001D5620(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D5634(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (*((_BYTE *)v3 + 137))
    v4 = 0;
  else
    v4 = NFDriverToggleGPIO(*((_QWORD *)v3 + 5), a2);
  objc_sync_exit(v3);

  return v4;
}

void sub_1001D5698(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001D56AC(_QWORD *a1, int a2)
{
  _QWORD *v2;
  int v4;
  _BOOL4 v5;
  _QWORD *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v17;
  const char *ClassName;
  const char *Name;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  id v30;
  id v31;
  void *v32;
  void *v34;
  void *v35;
  void *v36;
  void (*v37)(uint64_t, const char *, ...);
  objc_class *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  objc_class *v45;
  int v46;
  id v47;
  id v48;
  void *v49;
  const char *v50;
  id v51;
  void *v52;
  void *v53;
  void (*v54)(uint64_t, const char *, ...);
  objc_class *v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  objc_class *v62;
  int v63;
  id v64;
  _QWORD *v65;
  void *v66;
  void (*v67)(uint64_t, const char *, ...);
  objc_class *v68;
  uint64_t v69;
  const char *v70;
  const char *v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  objc_class *v75;
  int v76;
  id v77;
  uint64_t v78;
  dispatch_time_t v79;
  uint64_t v80;
  id v81;
  id v82;
  SEL v83;
  id v84;
  void *v85;
  void (*v86)(uint64_t, const char *, ...);
  objc_class *v87;
  uint64_t v88;
  const char *v89;
  const char *v90;
  void *v91;
  uint64_t v92;
  NSObject *v93;
  objc_class *v94;
  int v95;
  id v96;
  NSErrorUserInfoKey v97;
  void *v98;
  NSErrorUserInfoKey v99;
  void *v100;
  NSErrorUserInfoKey v101;
  void *v102;
  NSErrorUserInfoKey v103;
  void *v104;
  NSErrorUserInfoKey v105;
  void *v106;
  uint8_t buf[4];
  int v108;
  __int16 v109;
  const char *v110;
  __int16 v111;
  const char *v112;
  __int16 v113;
  int v114;
  _QWORD v115[4];
  _QWORD v116[4];
  NSErrorUserInfoKey v117;
  void *v118;

  v2 = a1;
  if (a1)
  {
    v4 = *(unsigned __int8 *)(a1[5] + 58);
    v5 = v4 != a2;
    v6 = a1;
    objc_sync_enter(v6);
    if (*((_BYTE *)v6 + 137))
    {
      v7 = objc_alloc((Class)NSError);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v117 = NSLocalizedDescriptionKey;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
      v118 = v9;
      v10 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v118, &v117, 1));
      v2 = objc_msgSend(v7, "initWithDomain:code:userInfo:", v8, 3, v10);
LABEL_20:

LABEL_21:
      objc_sync_exit(v6);

      return v2;
    }
    if (v6[37] != 1)
    {
      v30 = objc_alloc((Class)NSError);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v115[0] = NSLocalizedDescriptionKey;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v116[0] = v9;
      v116[1] = &off_100302D20;
      v115[1] = CFSTR("Line");
      v115[2] = CFSTR("Method");
      v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setupChipscope:"));
      v116[2] = v10;
      v115[3] = NSDebugDescriptionErrorKey;
      v31 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setupChipscope:"), 101);
      v116[3] = v31;
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v116, v115, 4));
      v2 = objc_msgSend(v30, "initWithDomain:code:userInfo:", v8, 12, v32);

      goto LABEL_20;
    }
    if (a2)
    {
      sub_1001FB474((uint64_t)v6, 0);
      if (v4 != a2)
      {
        v11 = (void *)objc_opt_new(NFRestoreService);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "runService:", &off_100306B50));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "valueForKey:", CFSTR("Error")));

        if (v13)
        {
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
          if (Logger)
          {
            Class = object_getClass(v6);
            if (class_isMetaClass(Class))
              v17 = 43;
            else
              v17 = 45;
            ClassName = object_getClassName(v6);
            Name = sel_getName("setupChipscope:");
            Logger(3, "%c[%{public}s %{public}s]:%i Failed to restore MFG FW", v17, ClassName, Name, 113);
          }
          v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v21 = NFSharedLogGetLogger(v20);
          v22 = objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            v23 = object_getClass(v6);
            if (class_isMetaClass(v23))
              v24 = 43;
            else
              v24 = 45;
            *(_DWORD *)buf = 67109890;
            v108 = v24;
            v109 = 2082;
            v110 = object_getClassName(v6);
            v111 = 2082;
            v112 = sel_getName("setupChipscope:");
            v113 = 1024;
            v114 = 113;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to restore MFG FW", buf, 0x22u);
          }

          v25 = objc_alloc((Class)NSError);
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v105 = NSLocalizedDescriptionKey;
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
          v106 = v27;
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v106, &v105, 1));
          v29 = objc_msgSend(v25, "initWithDomain:code:userInfo:", v26, 6, v28);
LABEL_36:
          v2 = v29;

LABEL_69:
          v5 = 1;
LABEL_70:
          v78 = v6[37];
          if (v78 != 4 && v78 != 1)
          {
LABEL_73:
            if (v5)
            {
              v79 = dispatch_time(0, 100000000);
              dispatch_after(v79, (dispatch_queue_t)&_dispatch_main_q, &stru_1002EAB70);
            }
            goto LABEL_21;
          }
LABEL_72:
          sub_1001FA9CC((uint64_t)v6);
          goto LABEL_73;
        }
      }
      v48 = sub_1001F913C((uint64_t)v6);
      v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
      if (v49)
      {

      }
      else if (v6[37] == 1)
      {
        if (v4 != a2)
        {
          v2 = 0;
          v5 = 1;
          goto LABEL_72;
        }
        v80 = v2[5];
        v81 = objc_retainAutorelease(objc_getProperty(v6, v50, 280, 1));
        v82 = objc_msgSend(v81, "bytes");
        v84 = objc_getProperty(v6, v83, 280, 1);
        LODWORD(v80) = NFDriverSetChipscope(v80, 1, v82, objc_msgSend(v84, "length"));

        if (!(_DWORD)v80)
        {
          v2 = 0;
          v5 = 0;
          goto LABEL_70;
        }
        v85 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v86 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v85);
        if (v86)
        {
          v87 = object_getClass(v6);
          if (class_isMetaClass(v87))
            v88 = 43;
          else
            v88 = 45;
          v89 = object_getClassName(v6);
          v90 = sel_getName("setupChipscope:");
          v86(3, "%c[%{public}s %{public}s]:%i Failed to enable chipscope", v88, v89, v90, 123);
        }
        v91 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v92 = NFSharedLogGetLogger(v91);
        v93 = objc_claimAutoreleasedReturnValue(v92);
        if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
        {
          v94 = object_getClass(v6);
          if (class_isMetaClass(v94))
            v95 = 43;
          else
            v95 = 45;
          *(_DWORD *)buf = 67109890;
          v108 = v95;
          v109 = 2082;
          v110 = object_getClassName(v6);
          v111 = 2082;
          v112 = sel_getName("setupChipscope:");
          v113 = 1024;
          v114 = 123;
          _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to enable chipscope", buf, 0x22u);
        }

        v96 = objc_alloc((Class)NSError);
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v101 = NSLocalizedDescriptionKey;
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
        v102 = v27;
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v102, &v101, 1));
        v65 = objc_msgSend(v96, "initWithDomain:code:userInfo:", v26, 15, v28);
        goto LABEL_68;
      }
      v53 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v54 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v53);
      if (v54)
      {
        v55 = object_getClass(v6);
        if (class_isMetaClass(v55))
          v56 = 43;
        else
          v56 = 45;
        v57 = object_getClassName(v6);
        v58 = sel_getName("setupChipscope:");
        v54(3, "%c[%{public}s %{public}s]:%i Failed to restart stack", v56, v57, v58, 118);
      }
      v59 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v60 = NFSharedLogGetLogger(v59);
      v61 = objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        v62 = object_getClass(v6);
        if (class_isMetaClass(v62))
          v63 = 43;
        else
          v63 = 45;
        *(_DWORD *)buf = 67109890;
        v108 = v63;
        v109 = 2082;
        v110 = object_getClassName(v6);
        v111 = 2082;
        v112 = sel_getName("setupChipscope:");
        v113 = 1024;
        v114 = 118;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to restart stack", buf, 0x22u);
      }

      v64 = objc_alloc((Class)NSError);
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v103 = NSLocalizedDescriptionKey;
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v104 = v27;
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v104, &v103, 1));
      v65 = objc_msgSend(v64, "initWithDomain:code:userInfo:", v26, 15, v28);
    }
    else
    {
      sub_1001FB474((uint64_t)v6, 0);
      if (v4)
      {
        v34 = (void *)objc_opt_new(NFRestoreService);
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "runService:", 0));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "valueForKey:", CFSTR("Error")));

        if (v13)
        {
          v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v37 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v36);
          if (v37)
          {
            v38 = object_getClass(v6);
            if (class_isMetaClass(v38))
              v39 = 43;
            else
              v39 = 45;
            v40 = object_getClassName(v6);
            v41 = sel_getName("setupChipscope:");
            v37(3, "%c[%{public}s %{public}s]:%i Failed to restore Prod FW", v39, v40, v41, 136);
          }
          v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v43 = NFSharedLogGetLogger(v42);
          v44 = objc_claimAutoreleasedReturnValue(v43);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            v45 = object_getClass(v6);
            if (class_isMetaClass(v45))
              v46 = 43;
            else
              v46 = 45;
            *(_DWORD *)buf = 67109890;
            v108 = v46;
            v109 = 2082;
            v110 = object_getClassName(v6);
            v111 = 2082;
            v112 = sel_getName("setupChipscope:");
            v113 = 1024;
            v114 = 136;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to restore Prod FW", buf, 0x22u);
          }

          v47 = objc_alloc((Class)NSError);
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v99 = NSLocalizedDescriptionKey;
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
          v100 = v27;
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v100, &v99, 1));
          v29 = objc_msgSend(v47, "initWithDomain:code:userInfo:", v26, 6, v28);
          goto LABEL_36;
        }
      }
      v51 = sub_1001F913C((uint64_t)v6);
      v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
      if (v52)
      {

      }
      else if (v6[37] == 1)
      {
        v2 = 0;
        goto LABEL_72;
      }
      v66 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v67 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v66);
      if (v67)
      {
        v68 = object_getClass(v6);
        if (class_isMetaClass(v68))
          v69 = 43;
        else
          v69 = 45;
        v70 = object_getClassName(v6);
        v71 = sel_getName("setupChipscope:");
        v67(3, "%c[%{public}s %{public}s]:%i Failed to restart stack", v69, v70, v71, 140);
      }
      v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v73 = NFSharedLogGetLogger(v72);
      v74 = objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        v75 = object_getClass(v6);
        if (class_isMetaClass(v75))
          v76 = 43;
        else
          v76 = 45;
        *(_DWORD *)buf = 67109890;
        v108 = v76;
        v109 = 2082;
        v110 = object_getClassName(v6);
        v111 = 2082;
        v112 = sel_getName("setupChipscope:");
        v113 = 1024;
        v114 = 140;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to restart stack", buf, 0x22u);
      }

      v77 = objc_alloc((Class)NSError);
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v97 = NSLocalizedDescriptionKey;
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v98 = v27;
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v98, &v97, 1));
      v65 = objc_msgSend(v77, "initWithDomain:code:userInfo:", v26, 15, v28);
    }
LABEL_68:
    v2 = v65;
    goto LABEL_69;
  }
  return v2;
}

void sub_1001D6350(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001D63A8(id a1)
{
  exit(99);
}

void sub_1001D63B8(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  void (*Logger)(uint64_t, const char *, ...);
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *specific;
  uint64_t v27;
  void (*v28)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  const char *v40;
  const char *v41;
  void *v42;
  id v43;
  id v44;
  unsigned __int8 *v45;
  unint64_t v46;
  unsigned __int8 v47;
  id v48;
  void *v49;
  uint64_t v50;
  void (*v51)(uint64_t, const char *, ...);
  objc_class *v52;
  _BOOL4 v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  objc_class *v58;
  int v59;
  const char *v60;
  const char *v61;
  const char *v62;
  const char *v63;
  id v64;
  id v65;
  void *v66;
  unsigned __int8 *v67;
  id v68;
  uint8_t buf[4];
  uint8_t *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  id v76;
  uint8_t v77[48];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    memset(v77, 0, sizeof(v77));
    v5 = objc_msgSend(v3, "length");
    v66 = v4;
    v6 = objc_retainAutorelease(v4);
    v67 = (unsigned __int8 *)objc_msgSend(v6, "bytes");
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(0);
    v8 = NFSharedLogGetLogger(0);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      v70 = (uint8_t *)"-[NFDriverWrapper(Test) chipscopeNotify:]";
      v71 = 1024;
      v72 = 162;
      v73 = 2082;
      v74 = "Chipscope : ";
      v75 = 2048;
      v76 = objc_msgSend(v6, "length");
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", buf, 0x26u);
    }
    v65 = a1;

    if (Logger)
      Logger(6, "%s:%i %s %lu bytes :", "-[NFDriverWrapper(Test) chipscopeNotify:]", 162, "Chipscope : ", objc_msgSend(v6, "length"));
    v64 = v6;
    if (v5)
    {
      v10 = 0;
      do
      {
        v11 = 0;
        v12 = (char *)&v77[__sprintf_chk((char *)v77, 0, 0x30uLL, "%04lX: ", v10)];
        do
        {
          v13 = v11 + 1;
          v14 = v11 + 1 + v10;
          v15 = sprintf(v12, "0x%02X ", v67[v10 + v11]);
          if (v11 > 6)
            break;
          v12 += v15;
          ++v11;
        }
        while (v14 < (unint64_t)v5);
        v16 = NFSharedLogGetLogger(0);
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v70 = v77;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        }

        if (Logger)
          Logger(6, "%s", (const char *)v77);
        v10 += v13;
      }
      while (v14 < (unint64_t)v5);
    }
    v18 = objc_alloc((Class)NSString);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSISO8601DateFormatter stringFromDate:timeZone:formatOptions:](NSISO8601DateFormatter, "stringFromDate:timeZone:formatOptions:", v19, v20, 1907));
    v22 = objc_msgSend(v18, "initWithFormat:", CFSTR("Chipscope_%@.txt"), v21);

    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "temporaryDirectory"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "URLByAppendingPathComponent:", v22));

    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v27 = NFLogGetLogger(specific);
    if (v27)
    {
      v28 = (void (*)(uint64_t, const char *, ...))v27;
      Class = object_getClass(v65);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v65);
      Name = sel_getName("chipscopeNotify:");
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "path"));
      v34 = 45;
      if (isMetaClass)
        v34 = 43;
      v28(6, "%c[%{public}s %{public}s]:%i Log: %@", v34, ClassName, Name, 170, v33);

    }
    v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v36 = NFSharedLogGetLogger(v35);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v38 = object_getClass(v65);
      if (class_isMetaClass(v38))
        v39 = 43;
      else
        v39 = 45;
      v40 = object_getClassName(v65);
      v41 = sel_getName("chipscopeNotify:");
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "path"));
      *(_DWORD *)v77 = 67110146;
      *(_DWORD *)&v77[4] = v39;
      *(_WORD *)&v77[8] = 2082;
      *(_QWORD *)&v77[10] = v40;
      *(_WORD *)&v77[18] = 2082;
      *(_QWORD *)&v77[20] = v41;
      *(_WORD *)&v77[28] = 1024;
      *(_DWORD *)&v77[30] = 170;
      *(_WORD *)&v77[34] = 2112;
      *(_QWORD *)&v77[36] = v42;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Log: %@", v77, 0x2Cu);

    }
    v43 = objc_alloc_init((Class)NSMutableString);
    v44 = objc_retainAutorelease(v64);
    v45 = (unsigned __int8 *)objc_msgSend(v44, "bytes");
    if (objc_msgSend(v44, "length"))
    {
      v46 = 0;
      do
        objc_msgSend(v43, "appendFormat:", CFSTR("%02X\n"), v45[v46++]);
      while ((unint64_t)objc_msgSend(v44, "length") > v46);
    }
    v68 = 0;
    v47 = objc_msgSend(v43, "writeToURL:atomically:encoding:error:", v25, 1, 1, &v68);
    v48 = v68;
    if ((v47 & 1) == 0)
    {
      v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v50 = NFLogGetLogger(v49);
      if (v50)
      {
        v51 = (void (*)(uint64_t, const char *, ...))v50;
        v52 = object_getClass(v65);
        v53 = class_isMetaClass(v52);
        v62 = object_getClassName(v65);
        v63 = sel_getName("chipscopeNotify:");
        v54 = 45;
        if (v53)
          v54 = 43;
        v51(3, "%c[%{public}s %{public}s]:%i Error creating log: %@", v54, v62, v63, 182, v48);
      }
      v55 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v56 = NFSharedLogGetLogger(v55);
      v57 = objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        v58 = object_getClass(v65);
        if (class_isMetaClass(v58))
          v59 = 43;
        else
          v59 = 45;
        v60 = object_getClassName(v65);
        v61 = sel_getName("chipscopeNotify:");
        *(_DWORD *)v77 = 67110146;
        *(_DWORD *)&v77[4] = v59;
        *(_WORD *)&v77[8] = 2082;
        *(_QWORD *)&v77[10] = v60;
        *(_WORD *)&v77[18] = 2082;
        *(_QWORD *)&v77[20] = v61;
        *(_WORD *)&v77[28] = 1024;
        *(_DWORD *)&v77[30] = 182;
        *(_WORD *)&v77[34] = 2112;
        *(_QWORD *)&v77[36] = v48;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error creating log: %@", v77, 0x2Cu);
      }

    }
    v4 = v66;
  }

}

id sub_1001D6A14(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  void *ErrorCode;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  _QWORD v15[2];
  _QWORD v16[2];
  NSErrorUserInfoKey v17;
  void *v18;

  if (!a1)
    return 0;
  v5 = a1;
  objc_sync_enter(v5);
  if (*((_BYTE *)v5 + 137))
  {
    v6 = objc_alloc((Class)NSError);
    ErrorCode = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v17 = NSLocalizedDescriptionKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
    v18 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
    v10 = objc_msgSend(v6, "initWithDomain:code:userInfo:", ErrorCode, 3, v9);
  }
  else
  {
    v11 = NFDriverContinuousWave(*((_QWORD *)v5 + 5), a2, a3);
    if (!(_DWORD)v11)
    {
      sub_1001D16D8(*((_BYTE **)v5 + 10), a2);
      v10 = 0;
      goto LABEL_7;
    }
    ErrorCode = (void *)NFDriverCreateErrorCode(v11);
    v12 = objc_alloc((Class)NSError);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v15[0] = NSLocalizedDescriptionKey;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v15[1] = NSUnderlyingErrorKey;
    v16[0] = v9;
    v16[1] = ErrorCode;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 2));
    v10 = objc_msgSend(v12, "initWithDomain:code:userInfo:", v8, 15, v13);

  }
LABEL_7:
  objc_sync_exit(v5);

  return v10;
}

void sub_1001D6C1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001D6C40(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *ErrorCode;
  void *v6;
  void *v7;
  id v8;
  uint64_t ATETrimVersion;
  id v10;
  void *v11;
  _QWORD v13[2];
  _QWORD v14[2];
  NSErrorUserInfoKey v15;
  void *v16;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (*((_BYTE *)v3 + 137))
  {
    v4 = objc_alloc((Class)NSError);
    ErrorCode = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v15 = NSLocalizedDescriptionKey;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
    v16 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
    v8 = objc_msgSend(v4, "initWithDomain:code:userInfo:", ErrorCode, 3, v7);
  }
  else
  {
    ATETrimVersion = NFDriverReadATETrimVersion(*((_QWORD *)v3 + 5), a2);
    if (!(_DWORD)ATETrimVersion)
    {
      v8 = 0;
      goto LABEL_7;
    }
    ErrorCode = (void *)NFDriverCreateErrorCode(ATETrimVersion);
    v10 = objc_alloc((Class)NSError);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v13[0] = NSLocalizedDescriptionKey;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v13[1] = NSUnderlyingErrorKey;
    v14[0] = v7;
    v14[1] = ErrorCode;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 2));
    v8 = objc_msgSend(v10, "initWithDomain:code:userInfo:", v6, 15, v11);

  }
LABEL_7:
  objc_sync_exit(v3);

  return v8;
}

void sub_1001D6E34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001D6E58(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  NSErrorUserInfoKey v16;
  void *v17;
  NSErrorUserInfoKey v18;
  void *v19;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (*((_BYTE *)v3 + 137))
  {
    v4 = objc_alloc((Class)NSError);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v18 = NSLocalizedDescriptionKey;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
    v19 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
    v8 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v5, 3, v7);

  }
  else if (NFDriverEnableSMBLogging(*((_QWORD *)v3 + 5), a2))
  {
    v9 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.stockholm"));
    v10 = v9;
    if ((_DWORD)a2)
      objc_msgSend(v9, "setBool:forKey:", 1, CFSTR("smbLogEnabled"));
    else
      objc_msgSend(v9, "removeObjectForKey:", CFSTR("smbLogEnabled"));

    v8 = 0;
  }
  else
  {
    v11 = objc_alloc((Class)NSError);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v16 = NSLocalizedDescriptionKey;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v17 = v13;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));
    v8 = objc_msgSend(v11, "initWithDomain:code:userInfo:", v12, 15, v14);

  }
  objc_sync_exit(v3);

  return v8;
}

void sub_1001D7088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D70A8(void *a1)
{
  id v1;
  uint64_t v2;

  if (!a1)
    return 0;
  v1 = a1;
  objc_sync_enter(v1);
  if (*((_BYTE *)v1 + 137))
    v2 = 0;
  else
    v2 = NFDriverCopySMBLog(*((_QWORD *)v1 + 5));
  objc_sync_exit(v1);

  return v2;
}

void sub_1001D7104(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001D7840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001D7908(uint64_t a1)
{
  id *v2;
  void *v3;

  if (a1)
  {
    v2 = *(id **)(a1 + 40);
    if (v2)
    {
      sub_1001EC18C(v2, 0);
      v3 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;

    }
  }
}

void sub_1001D794C(uint64_t a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    v2 = *(void **)(a1 + 32);
    if (v2)
    {
      sub_1000AC424(v2);
      v3 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;

    }
  }
}

void sub_1001D798C(uint64_t a1)
{
  const __CFBoolean *Value;
  const __CFBoolean *v3;
  CFTypeID v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  _BOOL4 v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  objc_class *v27;
  int v28;
  const char *Name;
  const char *v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;

  SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 64));
  Value = (const __CFBoolean *)SCPreferencesGetValue(*(SCPreferencesRef *)(a1 + 64), CFSTR("AirplaneMode"));
  if (!Value)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("updateAirplaneMode");
      v11 = 45;
      if (isMetaClass)
        v11 = 43;
      v7(3, "%c[%{public}s %{public}s]:%i Can't read AP mode", v11, ClassName, Name, 256);
    }
    v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v13 = NFSharedLogGetLogger(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    v15 = object_getClass((id)a1);
    if (class_isMetaClass(v15))
      v16 = 43;
    else
      v16 = 45;
    *(_DWORD *)buf = 67109890;
    v32 = v16;
    v33 = 2082;
    v34 = object_getClassName((id)a1);
    v35 = 2082;
    v36 = sel_getName("updateAirplaneMode");
    v37 = 1024;
    v38 = 256;
    v17 = "%c[%{public}s %{public}s]:%i Can't read AP mode";
    goto LABEL_22;
  }
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 == CFBooleanGetTypeID())
  {
    *(_BYTE *)(a1 + 153) = CFBooleanGetValue(v3) != 0;
    return;
  }
  v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v19 = NFLogGetLogger(v18);
  if (v19)
  {
    v20 = (void (*)(uint64_t, const char *, ...))v19;
    v21 = object_getClass((id)a1);
    v22 = class_isMetaClass(v21);
    v23 = object_getClassName((id)a1);
    v30 = sel_getName("updateAirplaneMode");
    v24 = 45;
    if (v22)
      v24 = 43;
    v20(3, "%c[%{public}s %{public}s]:%i Unexpected type", v24, v23, v30, 252);
  }
  v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v26 = NFSharedLogGetLogger(v25);
  v14 = objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v27 = object_getClass((id)a1);
    if (class_isMetaClass(v27))
      v28 = 43;
    else
      v28 = 45;
    *(_DWORD *)buf = 67109890;
    v32 = v28;
    v33 = 2082;
    v34 = object_getClassName((id)a1);
    v35 = 2082;
    v36 = sel_getName("updateAirplaneMode");
    v37 = 1024;
    v38 = 252;
    v17 = "%c[%{public}s %{public}s]:%i Unexpected type";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v17, buf, 0x22u);
  }
LABEL_23:

}

void sub_1001D7C5C(uint64_t a1, char a2, unsigned __int8 *a3)
{
  void *v5;
  uint64_t v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  int v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  v5 = objc_autoreleasePoolPush();
  if ((a2 & 2) != 0 && a3)
  {
    v6 = a3[153];
    sub_1001D798C((uint64_t)a3);
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a3);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a3);
      Name = sel_getName("airplaneModeChanged");
      v14 = 45;
      if (isMetaClass)
        v14 = 43;
      v9(6, "%c[%{public}s %{public}s]:%i Airplane mode state changed: %d -> %d", v14, ClassName, Name, 207, v6, a3[153]);
    }
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = object_getClass(a3);
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      v20 = object_getClassName(a3);
      v21 = sel_getName("airplaneModeChanged");
      v22 = a3[153];
      *(_DWORD *)buf = 67110402;
      v24 = v19;
      v25 = 2082;
      v26 = v20;
      v27 = 2082;
      v28 = v21;
      v29 = 1024;
      v30 = 207;
      v31 = 1024;
      v32 = v6;
      v33 = 1024;
      v34 = v22;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Airplane mode state changed: %d -> %d", buf, 0x2Eu);
    }

    if ((_DWORD)v6 != a3[153])
    {
      if (a3[153])
        objc_msgSend(a3, "suspend");
      else
        objc_msgSend(a3, "resume");
    }
  }
  objc_autoreleasePoolPop(v5);
}

void sub_1001D7EF0(_QWORD *a1, int a2)
{
  uint64_t v3;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  id *v17;
  id *v18;
  id *v19;
  NSObject *v20;
  const char *Name;
  _QWORD block[4];
  id *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;

  if (a1)
  {
    v3 = a1[14];
    a1[14] = v3 + 1;
    if (!v3)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v7 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("_suspend:");
        v11 = 45;
        if (isMetaClass)
          v11 = 43;
        v7(6, "%c[%{public}s %{public}s]:%i suspend", v11, ClassName, Name, 311);
      }
      v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v13 = NFSharedLogGetLogger(v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = object_getClass(a1);
        if (class_isMetaClass(v15))
          v16 = 43;
        else
          v16 = 45;
        *(_DWORD *)buf = 67109890;
        v25 = v16;
        v26 = 2082;
        v27 = object_getClassName(a1);
        v28 = 2082;
        v29 = sel_getName("_suspend:");
        v30 = 1024;
        v31 = 311;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i suspend", buf, 0x22u);
      }

      sub_1001D7908((uint64_t)a1);
      sub_1001D794C((uint64_t)a1);
      v17 = (id *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
      v18 = v17;
      if (a2)
      {
        v19 = sub_100111A40(v17);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1001D8124;
        block[3] = &unk_1002E5C58;
        v23 = v18;
        dispatch_async(v20, block);

      }
      else
      {
        objc_msgSend(v17, "maybeStartNextSession");
      }

    }
  }
}

id sub_1001D8124(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "maybeStartNextSession");
}

void sub_1001D8134(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  id *v18;
  NSObject *v19;
  id *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *v25;
  _BOOL4 v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  objc_class *v31;
  int v32;
  const char *Name;
  const char *v34;
  _QWORD block[4];
  NSObject *v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;

  if (a1)
  {
    v3 = a1[14];
    if (v3)
    {
      v4 = v3 - 1;
      a1[14] = v4;
      if (v4)
        return;
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v8 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("_resume:");
        v12 = 45;
        if (isMetaClass)
          v12 = 43;
        v8(6, "%c[%{public}s %{public}s]:%i resume", v12, ClassName, Name, 345);
      }
      v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v14 = NFSharedLogGetLogger(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = object_getClass(a1);
        if (class_isMetaClass(v16))
          v17 = 43;
        else
          v17 = 45;
        *(_DWORD *)buf = 67109890;
        v38 = v17;
        v39 = 2082;
        v40 = object_getClassName(a1);
        v41 = 2082;
        v42 = sel_getName("_resume:");
        v43 = 1024;
        v44 = 345;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i resume", buf, 0x22u);
      }

      sub_1001D8488((uint64_t)a1);
      sub_1001D84DC((void **)a1);
      v18 = (id *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
      v19 = v18;
      if (a2)
      {
        v20 = sub_100111A40(v18);
        v21 = objc_claimAutoreleasedReturnValue(v20);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1001D861C;
        block[3] = &unk_1002E5C58;
        v19 = v19;
        v36 = v19;
        dispatch_async(v21, block);

      }
      else
      {
        objc_msgSend(v18, "maybeStartNextSession");
      }
    }
    else
    {
      v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v23 = NFLogGetLogger(v22);
      if (v23)
      {
        v24 = (void (*)(uint64_t, const char *, ...))v23;
        v25 = object_getClass(a1);
        v26 = class_isMetaClass(v25);
        v27 = object_getClassName(a1);
        v34 = sel_getName("_resume:");
        v28 = 45;
        if (v26)
          v28 = 43;
        v24(3, "%c[%{public}s %{public}s]:%i Suspend count underflow", v28, v27, v34, 340);
      }
      v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v30 = NFSharedLogGetLogger(v29);
      v19 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v31 = object_getClass(a1);
        if (class_isMetaClass(v31))
          v32 = 43;
        else
          v32 = 45;
        *(_DWORD *)buf = 67109890;
        v38 = v32;
        v39 = 2082;
        v40 = object_getClassName(a1);
        v41 = 2082;
        v42 = sel_getName("_resume:");
        v43 = 1024;
        v44 = 340;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Suspend count underflow", buf, 0x22u);
      }
    }

  }
}

void sub_1001D8488(uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  if (a1)
  {
    v2 = *(id **)(a1 + 40);
    if (!v2)
    {
      v3 = sub_1001EC0E8((id *)[NFScreenStateMonitor alloc], *(void **)(a1 + 80));
      v4 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v3;

      v2 = *(id **)(a1 + 40);
    }
    sub_1001EC18C(v2, (void *)a1);
  }
}

void **sub_1001D84DC(void **result)
{
  void **v1;
  void *v2;
  id *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  _QWORD v8[5];
  id v9[2];
  id location;

  if (result)
  {
    v1 = result;
    v2 = result[4];
    if (!v2)
    {
      v3 = sub_1000ABB98((id *)[NFTouchSensorMonitor alloc], v1[10], v1);
      v4 = v1[4];
      v1[4] = v3;

      if (v1[4])
      {
        objc_initWeak(&location, v1);
        v5 = objc_alloc((Class)NFTimer);
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        v8[2] = sub_1001DA0E4;
        v8[3] = &unk_1002E5E80;
        objc_copyWeak(v9, &location);
        v9[1] = "startTouchSensorMonitor";
        v8[4] = v1;
        v6 = objc_msgSend(v5, "initWithCallback:queue:", v8, v1[10]);
        v7 = v1[6];
        v1[6] = v6;

        objc_destroyWeak(v9);
        objc_destroyWeak(&location);
        v2 = v1[4];
      }
      else
      {
        v2 = 0;
      }
    }
    sub_1000AC094(v2);
    return (void **)objc_msgSend(v1[6], "startTimer:", 0.7);
  }
  return result;
}

void sub_1001D85F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id sub_1001D861C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "maybeStartNextSession");
}

void sub_1001D9A78(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001D9ADC(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  const char *Name;
  _BYTE state[18];
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;

  v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.reader.background.suspensionTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v2, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)*((_QWORD *)WeakRetained + 7);
    *((_QWORD *)WeakRetained + 7) = 0;

    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v4);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v4);
      Name = sel_getName(*(SEL *)(a1 + 40));
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v8(4, "%c[%{public}s %{public}s]:%i Resume non-compliant tag suspension", v12, ClassName, Name, 426);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = object_getClass(v4);
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      v18 = object_getClassName(v4);
      v19 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)state = 67109890;
      *(_DWORD *)&state[4] = v17;
      *(_WORD *)&state[8] = 2082;
      *(_QWORD *)&state[10] = v18;
      v22 = 2082;
      v23 = v19;
      v24 = 1024;
      v25 = 426;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Resume non-compliant tag suspension", state, 0x22u);
    }

    objc_msgSend(v4, "resume");
  }

}

void sub_1001DA0E4(uint64_t a1)
{
  NSObject *v2;
  _QWORD *WeakRetained;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v8;
  const char *ClassName;
  const char *Name;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  _BYTE state[18];
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.touch.eventTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v2, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(WeakRetained);
      if (class_isMetaClass(Class))
        v8 = 43;
      else
        v8 = 45;
      ClassName = object_getClassName(WeakRetained);
      Name = sel_getName(*(SEL *)(a1 + 48));
      v11 = WeakRetained[4];
      if (v11)
        v11 = *(unsigned __int8 *)(v11 + 8);
      v6(4, "%c[%{public}s %{public}s]:%i Touch system ready event expired, systemReady=%d", v8, ClassName, Name, 568, v11);
    }
    v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v13 = NFSharedLogGetLogger(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = object_getClass(WeakRetained);
      if (class_isMetaClass(v15))
        v16 = 43;
      else
        v16 = 45;
      v17 = object_getClassName(WeakRetained);
      v18 = sel_getName(*(SEL *)(a1 + 48));
      v19 = WeakRetained[4];
      if (v19)
        LODWORD(v19) = *(unsigned __int8 *)(v19 + 8);
      *(_DWORD *)state = 67110146;
      *(_DWORD *)&state[4] = v16;
      *(_WORD *)&state[8] = 2082;
      *(_QWORD *)&state[10] = v17;
      v21 = 2082;
      v22 = v18;
      v23 = 1024;
      v24 = 568;
      v25 = 1024;
      v26 = v19;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Touch system ready event expired, systemReady=%d", state, 0x28u);
    }

    objc_msgSend(WeakRetained, "touchSystemReady:", 1);
    dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 72), &stru_1002EAB90);
  }

}

void sub_1001DA2EC(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  objc_msgSend(v1, "maybeStartNextSession");

}

void sub_1001DAA00(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  objc_msgSend(v2, "enablePowerCountersLogging:", *(unsigned __int8 *)(a1 + 40));

  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 40))
  {
    if (!v3 || *(_QWORD *)(v3 + 32) && !*(_BYTE *)(v3 + 152))
    {
      objc_msgSend(*(id *)(v3 + 48), "startTimer:", 0.7);
      return;
    }
  }
  else
  {
    objc_msgSend(*(id *)(v3 + 48), "stopTimer");
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 && *(_QWORD *)(v4 + 32))
      *(_BYTE *)(v4 + 152) = 0;
  }
  v5 = (id)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  objc_msgSend(v5, "maybeStartNextSession");

}

void sub_1001DAB14(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  objc_msgSend(v2, "didCameraStateChange:", *(unsigned __int8 *)(a1 + 32));
  objc_msgSend(v2, "maybeStartNextSession");

}

void sub_1001DAD8C(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_1001DAE50();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("_CDContextQueries");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_10032AB70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class get_CDContextQueriesClass(void)_block_invoke"));
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("NFBackgroundTagReadingManager.m"), 58, CFSTR("Unable to find class %s"), "_CDContextQueries");

    __break(1u);
  }
}

void sub_1001DAE50()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_10032AB60)
  {
    v4 = off_1002EABD0;
    v5 = 0;
    qword_10032AB60 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_10032AB60)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CoreDuetContextLibrary(void)"));
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("NFBackgroundTagReadingManager.m"), 57, CFSTR("%s"), v3);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3;
  if (v3)
LABEL_7:
    free(v0);
}

void sub_1001DAF50(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_1001DAE50();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("_CDClientContext");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_10032AB78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class get_CDClientContextClass(void)_block_invoke"));
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("NFBackgroundTagReadingManager.m"), 59, CFSTR("Unable to find class %s"), "_CDClientContext");

    __break(1u);
  }
}

void sub_1001DB014(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_1001DB0D8();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("BMDeviceNFCTag");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_10032AB80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getBMDeviceNFCTagClass(void)_block_invoke"));
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("NFBackgroundTagReadingManager.m"), 63, CFSTR("Unable to find class %s"), "BMDeviceNFCTag");

    __break(1u);
  }
}

void *sub_1001DB0D8()
{
  void *v0;
  void *v1;
  void *v3;
  void *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_10032AB68)
  {
    v5 = off_1002EABE8;
    v6 = 0;
    qword_10032AB68 = _sl_dlopen(&v5, &v4);
  }
  v0 = (void *)qword_10032AB68;
  if (!qword_10032AB68)
  {
    v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *BiomeLibraryLibrary(void)"));
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("NFBackgroundTagReadingManager.m"), 61, CFSTR("%s"), v4);

    __break(1u);
    goto LABEL_7;
  }
  v1 = v4;
  if (v4)
LABEL_7:
    free(v1);
  return v0;
}

uint64_t sub_1001DB4D4(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  unsigned int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *specific;
  uint64_t Logger;
  void (*v23)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  objc_class *v30;
  int v31;
  void *v32;
  uint64_t v33;
  void (*v34)(uint64_t, const char *, ...);
  objc_class *v35;
  _BOOL4 v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  objc_class *v42;
  int v43;
  const char *v44;
  const char *v45;
  void *v46;
  uint64_t v47;
  void (*v48)(uint64_t, const char *, ...);
  objc_class *v49;
  _BOOL4 v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  objc_class *v57;
  int v58;
  const char *v59;
  const char *v60;
  const __CFString *v61;
  id v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void (*v66)(uint64_t, const char *, ...);
  objc_class *v67;
  _BOOL4 v68;
  const char *v69;
  const char *v70;
  int v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  NSObject *v75;
  objc_class *v76;
  void *v77;
  int v78;
  const char *v79;
  const char *v80;
  int v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  void *v86;
  id v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  id v92;
  id v93;
  void *v94;
  uint64_t v95;
  void (*v96)(uint64_t, const char *, ...);
  objc_class *v97;
  _BOOL4 v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  NSObject *v104;
  objc_class *v105;
  void *v106;
  int v107;
  const char *v108;
  const char *v109;
  void *v110;
  uint64_t v111;
  void (*v112)(uint64_t, const char *, ...);
  objc_class *v113;
  _BOOL4 v114;
  const char *v115;
  const char *v116;
  int v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  NSObject *v121;
  objc_class *v122;
  void *v123;
  int v124;
  const char *v125;
  const char *v126;
  int v127;
  char *v128;
  void *v129;
  uint64_t v130;
  void (*v131)(uint64_t, const char *, ...);
  objc_class *v132;
  _BOOL4 v133;
  const char *v134;
  const char *v135;
  BOOL v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  NSObject *v140;
  objc_class *v141;
  int v142;
  const char *v143;
  const char *v144;
  const __CFString *v145;
  void *v146;
  void *v147;
  uint64_t v148;
  void (*v149)(uint64_t, const char *, ...);
  objc_class *v150;
  _BOOL4 v151;
  const char *v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  objc_class *v156;
  int v157;
  const char *v158;
  const char *v159;
  void *v160;
  uint64_t v161;
  void (*v162)(uint64_t, const char *, ...);
  objc_class *v163;
  _BOOL4 v164;
  const char *v165;
  const char *v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  objc_class *v170;
  int v171;
  const char *v172;
  const char *v173;
  const __CFString *v174;
  void *v175;
  const char *v177;
  const char *v178;
  const char *v179;
  const char *Name;
  const char *v181;
  const char *v182;
  id v183;
  id v184;
  id v185;
  char *v186;
  char *v187;
  void *v188;
  void *v189;
  id v190;
  void *v191;
  void *v192;
  id v193;
  unsigned __int8 v194;
  id v195;
  id v196;
  id v197;
  uint8_t buf[4];
  int v199;
  __int16 v200;
  const char *v201;
  __int16 v202;
  const char *v203;
  __int16 v204;
  int v205;
  __int16 v206;
  const __CFString *v207;
  __int16 v208;
  int v209;
  __int16 v210;
  char *v211;

  v7 = a2;
  v8 = a4;
  if (!a1)
  {
    v20 = 0;
    goto LABEL_133;
  }
  if (!v7)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v23 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      v27 = 45;
      if (isMetaClass)
        v27 = 43;
      v23(3, "%c[%{public}s %{public}s]:%i Missing SSE handle", v27, ClassName, Name, 48);
    }
    v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v29 = NFSharedLogGetLogger(v28);
    v13 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v30 = object_getClass(a1);
      if (class_isMetaClass(v30))
        v31 = 43;
      else
        v31 = 45;
      *(_DWORD *)buf = 67109890;
      v199 = v31;
      v200 = 2082;
      v201 = object_getClassName(a1);
      v202 = 2082;
      v203 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      v204 = 1024;
      v205 = 48;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing SSE handle", buf, 0x22u);
    }
    v20 = 9;
    goto LABEL_132;
  }
  v9 = kdebug_trace(724566148, 0, 0, 0, 0);
  v10 = NFSharedSignpostLog(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetHostChallenge in", buf, 2u);
  }

  v197 = 0;
  v12 = sub_1002088C0((uint64_t)NFSSEWrapper, &v197);
  v13 = v197;
  v14 = kdebug_trace(724566148, 1, 0, 0, 0);
  v15 = NFSharedSignpostLog(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_signpost_enabled(v16))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetHostChallenge out", buf, 2u);
  }

  if (!v13 || v12)
  {
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = NFLogGetLogger(v32);
    if (v33)
    {
      v34 = (void (*)(uint64_t, const char *, ...))v33;
      v35 = object_getClass(a1);
      v36 = class_isMetaClass(v35);
      v37 = object_getClassName(a1);
      v181 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      v38 = 45;
      if (v36)
        v38 = 43;
      v34(3, "%c[%{public}s %{public}s]:%i Failed to get host challenge", v38, v37, v181, 60);
    }
    v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v40 = NFSharedLogGetLogger(v39);
    v41 = objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v42 = object_getClass(a1);
      if (class_isMetaClass(v42))
        v43 = 43;
      else
        v43 = 45;
      v44 = object_getClassName(a1);
      v45 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      *(_DWORD *)buf = 67109890;
      v199 = v43;
      v200 = 2082;
      v201 = v44;
      v202 = 2082;
      v203 = v45;
      v204 = 1024;
      v205 = 60;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get host challenge", buf, 0x22u);
    }

    if (v12)
      v20 = v12;
    else
      v20 = 6;
    goto LABEL_132;
  }
  if (-[NSObject length](v13, "length") != (id)8)
  {
    v46 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v47 = NFLogGetLogger(v46);
    if (v47)
    {
      v48 = (void (*)(uint64_t, const char *, ...))v47;
      v49 = object_getClass(a1);
      v50 = class_isMetaClass(v49);
      v51 = object_getClassName(a1);
      v52 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      v183 = -[NSObject length](v13, "length");
      v53 = 45;
      if (v50)
        v53 = 43;
      v48(3, "%c[%{public}s %{public}s]:%i Invalid host challenge length: %lu", v53, v51, v52, 64, v183);
    }
    v54 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v55 = NFSharedLogGetLogger(v54);
    v56 = objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      v57 = object_getClass(a1);
      if (class_isMetaClass(v57))
        v58 = 43;
      else
        v58 = 45;
      v59 = object_getClassName(a1);
      v60 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      v61 = (const __CFString *)-[NSObject length](v13, "length");
      *(_DWORD *)buf = 67110146;
      v199 = v58;
      v200 = 2082;
      v201 = v59;
      v202 = 2082;
      v203 = v60;
      v204 = 1024;
      v205 = 64;
      v206 = 2048;
      v207 = v61;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid host challenge length: %lu", buf, 0x2Cu);
    }

    v20 = 13;
    goto LABEL_132;
  }
  v196 = 0;
  v17 = objc_msgSend(a1, "selectCRSWithError:", &v196);
  v18 = v196;
  v19 = v18;
  if (v18)
  {
    if (objc_msgSend(v18, "code"))
      v20 = (uint64_t)objc_msgSend(v19, "code");
    else
      v20 = 16;
    goto LABEL_131;
  }
  v195 = 0;
  v20 = sub_1000B7998(a1, v13, &v195);
  v62 = v195;
  v63 = v62;
  if ((_DWORD)v20)
  {
    v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v65 = NFLogGetLogger(v64);
    if (v65)
    {
      v66 = (void (*)(uint64_t, const char *, ...))v65;
      v67 = object_getClass(a1);
      v68 = class_isMetaClass(v67);
      v69 = object_getClassName(a1);
      v70 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      if (v20 >= 0x47)
        v71 = 71;
      else
        v71 = v20;
      v186 = off_1002EAC00[v71];
      v72 = 43;
      if (!v68)
        v72 = 45;
      v177 = v69;
      v19 = 0;
      v66(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v72, v177, v70, 78, CFSTR("Failed to authenticate"), v20, v186);
    }
    v73 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v74 = NFSharedLogGetLogger(v73);
    v75 = objc_claimAutoreleasedReturnValue(v74);
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      v76 = object_getClass(a1);
      v77 = v63;
      if (class_isMetaClass(v76))
        v78 = 43;
      else
        v78 = 45;
      v79 = object_getClassName(a1);
      v80 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      if (v20 >= 0x47)
        v81 = 71;
      else
        v81 = v20;
      v82 = off_1002EAC00[v81];
      *(_DWORD *)buf = 67110658;
      v199 = v78;
      v63 = v77;
      v200 = 2082;
      v201 = v79;
      v202 = 2082;
      v203 = v80;
      v204 = 1024;
      v205 = 78;
      v206 = 2112;
      v207 = CFSTR("Failed to authenticate");
      v208 = 1024;
      v209 = v20;
      v210 = 2080;
      v211 = v82;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", buf, 0x3Cu);
    }

    goto LABEL_130;
  }
  if (objc_msgSend(v62, "length") != (id)16)
  {
    v191 = v63;
    v129 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v130 = NFLogGetLogger(v129);
    if (v130)
    {
      v131 = (void (*)(uint64_t, const char *, ...))v130;
      v132 = object_getClass(a1);
      v133 = class_isMetaClass(v132);
      v134 = object_getClassName(a1);
      v135 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      v184 = objc_msgSend(v63, "length");
      v136 = !v133;
      v19 = 0;
      v137 = 45;
      if (!v136)
        v137 = 43;
      v131(3, "%c[%{public}s %{public}s]:%i Invalid authenticate response length: %lu", v137, v134, v135, 82, v184);
    }
    v138 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v139 = NFSharedLogGetLogger(v138);
    v140 = objc_claimAutoreleasedReturnValue(v139);
    if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
    {
      v141 = object_getClass(a1);
      if (class_isMetaClass(v141))
        v142 = 43;
      else
        v142 = 45;
      v143 = object_getClassName(a1);
      v144 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      v145 = (const __CFString *)objc_msgSend(v191, "length");
      *(_DWORD *)buf = 67110146;
      v199 = v142;
      v200 = 2082;
      v201 = v143;
      v202 = 2082;
      v203 = v144;
      v204 = 1024;
      v205 = 82;
      v206 = 2048;
      v207 = v145;
      _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid authenticate response length: %lu", buf, 0x2Cu);
    }

    v20 = 13;
    v63 = v191;
    goto LABEL_130;
  }
  v194 = 0;
  v83 = kdebug_trace(724566148, 0, 0, 0, 0);
  v84 = NFSharedSignpostLog(v83);
  v85 = objc_claimAutoreleasedReturnValue(v84);
  if (os_signpost_enabled(v85))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v85, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseAuthorize in", buf, 2u);
  }

  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData"));
  v193 = 0;
  v87 = sub_100208AA4((uint64_t)NFSSEWrapper, 2, v7, v86, a3, v13, v63, (char *)&v194, &v193, 0, 0, 0, 0);
  v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
  v190 = v193;

  v89 = kdebug_trace(724566148, 1, 0, 0, 0);
  v90 = NFSharedSignpostLog(v89);
  v91 = objc_claimAutoreleasedReturnValue(v90);
  if (os_signpost_enabled(v91))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v91, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseAuthorize out", buf, 2u);
  }

  v19 = 0;
  if (!v88)
  {
    v189 = 0;
    v146 = v63;
    v147 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v148 = NFLogGetLogger(v147);
    if (v148)
    {
      v149 = (void (*)(uint64_t, const char *, ...))v148;
      v150 = object_getClass(a1);
      v151 = class_isMetaClass(v150);
      v152 = object_getClassName(a1);
      v182 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      v136 = !v151;
      v19 = 0;
      v153 = 45;
      if (!v136)
        v153 = 43;
      v149(3, "%c[%{public}s %{public}s]:%i Failed to generate cryptogram", v153, v152, v182, 158);
    }
    v154 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v155 = NFSharedLogGetLogger(v154);
    v121 = objc_claimAutoreleasedReturnValue(v155);
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
    {
      v156 = object_getClass(a1);
      if (class_isMetaClass(v156))
        v157 = 43;
      else
        v157 = 45;
      v158 = object_getClassName(a1);
      v159 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      *(_DWORD *)buf = 67109890;
      v199 = v157;
      v200 = 2082;
      v201 = v158;
      v202 = 2082;
      v203 = v159;
      v204 = 1024;
      v205 = 158;
      _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to generate cryptogram", buf, 0x22u);
    }
    v20 = 8;
    v63 = v146;
    goto LABEL_127;
  }
  if (objc_msgSend(v88, "length") != (id)8)
  {
    v189 = v88;
    v192 = v63;
    v160 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v161 = NFLogGetLogger(v160);
    if (v161)
    {
      v162 = (void (*)(uint64_t, const char *, ...))v161;
      v163 = object_getClass(a1);
      v164 = class_isMetaClass(v163);
      v165 = object_getClassName(a1);
      v166 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      v185 = objc_msgSend(v189, "length");
      v167 = 45;
      if (v164)
        v167 = 43;
      v162(3, "%c[%{public}s %{public}s]:%i Invalid cryptogram length: %lu", v167, v165, v166, 162, v185);
    }
    v168 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v169 = NFSharedLogGetLogger(v168);
    v121 = objc_claimAutoreleasedReturnValue(v169);
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
    {
      v170 = object_getClass(a1);
      if (class_isMetaClass(v170))
        v171 = 43;
      else
        v171 = 45;
      v172 = object_getClassName(a1);
      v173 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      v88 = v189;
      v174 = (const __CFString *)objc_msgSend(v189, "length");
      *(_DWORD *)buf = 67110146;
      v199 = v171;
      v200 = 2082;
      v201 = v172;
      v202 = 2082;
      v203 = v173;
      v204 = 1024;
      v205 = 162;
      v206 = 2048;
      v207 = v174;
      _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid cryptogram length: %lu", buf, 0x2Cu);
      v20 = 13;
      v19 = 0;
      v63 = v192;
      goto LABEL_128;
    }
    v20 = 13;
    v19 = 0;
LABEL_127:
    v88 = v189;
LABEL_128:
    v175 = v190;

    goto LABEL_129;
  }
  v20 = sub_1000B7EAC((uint64_t)a1, v194, v88, v8);
  v92 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026A9AA, 8);
  v93 = objc_msgSend(a1, "selectByName:error:", v92, 0);

  if (v20 >= 2)
  {
    v94 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v95 = NFLogGetLogger(v94);
    v188 = v88;
    if (v95)
    {
      v96 = (void (*)(uint64_t, const char *, ...))v95;
      v97 = object_getClass(a1);
      v98 = class_isMetaClass(v97);
      v99 = object_getClassName(a1);
      v100 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      v101 = 45;
      if (v98)
        v101 = 43;
      v178 = v99;
      v88 = v188;
      v96(3, "%c[%{public}s %{public}s]:%i Failed to authorize with for type=%d", v101, v178, v100, 172, v194);
    }
    v102 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v103 = NFSharedLogGetLogger(v102);
    v104 = objc_claimAutoreleasedReturnValue(v103);
    if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
    {
      v105 = object_getClass(a1);
      v106 = v63;
      if (class_isMetaClass(v105))
        v107 = 43;
      else
        v107 = 45;
      v108 = object_getClassName(a1);
      v109 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      *(_DWORD *)buf = 67110146;
      v199 = v107;
      v63 = v106;
      v88 = v188;
      v200 = 2082;
      v201 = v108;
      v202 = 2082;
      v203 = v109;
      v204 = 1024;
      v205 = 172;
      v206 = 1024;
      LODWORD(v207) = v194;
      _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to authorize with for type=%d", buf, 0x28u);
    }

    v110 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v111 = NFLogGetLogger(v110);
    if (v111)
    {
      v112 = (void (*)(uint64_t, const char *, ...))v111;
      v113 = object_getClass(a1);
      v114 = class_isMetaClass(v113);
      v115 = object_getClassName(a1);
      v116 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      if (v20 >= 0x47)
        v117 = 71;
      else
        v117 = v20;
      v187 = off_1002EAC00[v117];
      v118 = 43;
      if (!v114)
        v118 = 45;
      v179 = v115;
      v88 = v188;
      v112(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v118, v179, v116, 173, CFSTR("Returned"), v20, v187);
    }
    v119 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v120 = NFSharedLogGetLogger(v119);
    v121 = objc_claimAutoreleasedReturnValue(v120);
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
    {
      v122 = object_getClass(a1);
      v123 = v63;
      if (class_isMetaClass(v122))
        v124 = 43;
      else
        v124 = 45;
      v125 = object_getClassName(a1);
      v126 = sel_getName("_authorizeContactlessPayment:uid:targetAID:");
      if (v20 >= 0x47)
        v127 = 71;
      else
        v127 = v20;
      v128 = off_1002EAC00[v127];
      *(_DWORD *)buf = 67110658;
      v199 = v124;
      v63 = v123;
      v200 = 2082;
      v201 = v125;
      v202 = 2082;
      v203 = v126;
      v204 = 1024;
      v205 = 173;
      v206 = 2112;
      v207 = CFSTR("Returned");
      v208 = 1024;
      v209 = v20;
      v210 = 2080;
      v211 = v128;
      _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", buf, 0x3Cu);
    }
    v19 = 0;
    goto LABEL_128;
  }
  v175 = v190;
  v19 = 0;
LABEL_129:

LABEL_130:
LABEL_131:

LABEL_132:
LABEL_133:

  return v20;
}

uint64_t sub_1001DC504(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  v9 = a2;
  v10 = a4;
  v12 = a5;
  if (a1)
  {
    if (v12)
      v13 = sub_1001DC598(a1, v9, v11, v12);
    else
      v13 = sub_1001DB4D4(a1, v9, a3, v10);
    v14 = v13;
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

uint64_t sub_1001DC598(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  double v8;
  double v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *specific;
  uint64_t Logger;
  void (*v17)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  const char *v27;
  const char *v28;
  void *v29;
  uint64_t v30;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *v32;
  _BOOL4 v33;
  id v34;
  const char *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  objc_class *v41;
  int v42;
  const char *v43;
  const char *v44;
  void *v45;
  uint64_t v46;
  uint64_t v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  void *v62;
  id v63;
  void *v64;
  uint64_t v65;
  void (*v66)(uint64_t, const char *, ...);
  objc_class *v67;
  _BOOL4 v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  objc_class *v74;
  int v75;
  const char *v76;
  const char *v77;
  unsigned int v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  uint64_t v84;
  void (*v85)(uint64_t, const char *, ...);
  objc_class *v86;
  _BOOL4 v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  NSObject *v91;
  objc_class *v92;
  int v93;
  const char *v94;
  const char *v95;
  void *v96;
  uint64_t v97;
  void (*v98)(uint64_t, const char *, ...);
  objc_class *v99;
  _BOOL4 v100;
  BOOL v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  NSObject *v105;
  objc_class *v106;
  int v107;
  const char *v108;
  const char *v109;
  void *v110;
  uint64_t v111;
  void (*v112)(uint64_t, const char *, ...);
  objc_class *v113;
  _BOOL4 v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  NSObject *v118;
  objc_class *v119;
  int v120;
  const char *v121;
  const char *v122;
  uint64_t v123;
  const char *v124;
  const char *v125;
  const char *v126;
  const char *Name;
  const char *v128;
  const char *v129;
  const char *v130;
  const char *v131;
  uint64_t v132;
  id v133;
  id v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  id v139;
  void *v140;
  unsigned int v141;
  id v142;
  void *v143;
  id v144;
  const char *v145;
  id v146;
  const char *v147;
  id v148;
  void *v149;
  id v150;
  id v151;
  id v152;
  id v153;
  uint8_t buf[8];
  _BYTE v155[38];
  void *v156;
  NSErrorUserInfoKey v157;
  const __CFString *v158;
  const __CFString *v159;
  NSErrorUserInfoKey v160;
  NSErrorUserInfoKey v161;

  v6 = a2;
  v7 = a4;
  if (!a1)
  {
    v46 = 0;
    goto LABEL_23;
  }
  v9 = sub_100254C5C(v8);
  v11 = *(void **)(v10 + 2240);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData", v9));
  v152 = 0;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "performChainAuthIfNeededForACL:operation:auth:seHandle:seid:error:", v7, CFSTR("se,nfc"), v6, a1, v12, &v152));
  v14 = v152;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v17 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("_authorizeContactlessWithOperationApproval:uid:usingACL:");
    v21 = 45;
    if (isMetaClass)
      v21 = 43;
    v17(6, "%c[%{public}s %{public}s]:%i Chained Auth required: %d success: %d", v21, ClassName, Name, 207, v13 != 0, v14 == 0);
  }
  v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v23 = NFSharedLogGetLogger(v22);
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v25 = object_getClass(a1);
    if (class_isMetaClass(v25))
      v26 = 43;
    else
      v26 = 45;
    v27 = object_getClassName(a1);
    v28 = sel_getName("_authorizeContactlessWithOperationApproval:uid:usingACL:");
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = v26;
    *(_WORD *)v155 = 2082;
    *(_QWORD *)&v155[2] = v27;
    *(_WORD *)&v155[10] = 2082;
    *(_QWORD *)&v155[12] = v28;
    *(_WORD *)&v155[20] = 1024;
    *(_DWORD *)&v155[22] = 207;
    *(_WORD *)&v155[26] = 1024;
    *(_DWORD *)&v155[28] = v13 != 0;
    *(_WORD *)&v155[32] = 1024;
    *(_DWORD *)&v155[34] = v14 == 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Chained Auth required: %d success: %d", buf, 0x2Eu);
  }

  if (v14)
  {
    v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v30 = NFLogGetLogger(v29);
    if (v30)
    {
      v31 = (void (*)(uint64_t, const char *, ...))v30;
      v32 = object_getClass(a1);
      v33 = class_isMetaClass(v32);
      v147 = object_getClassName(a1);
      v34 = v6;
      v35 = sel_getName("_authorizeContactlessWithOperationApproval:uid:usingACL:");
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "debugDescription"));
      v128 = v35;
      v6 = v34;
      v37 = 45;
      if (v33)
        v37 = 43;
      v31(3, "%c[%{public}s %{public}s]:%i Failed to performChainAuthIfNeededForACL %@ : %@", v37, v147, v128, 209, v14, v36);

    }
    v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v39 = NFSharedLogGetLogger(v38);
    v40 = objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = object_getClass(a1);
      if (class_isMetaClass(v41))
        v42 = 43;
      else
        v42 = 45;
      v43 = object_getClassName(a1);
      v44 = sel_getName("_authorizeContactlessWithOperationApproval:uid:usingACL:");
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "debugDescription"));
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v42;
      *(_WORD *)v155 = 2082;
      *(_QWORD *)&v155[2] = v43;
      *(_WORD *)&v155[10] = 2082;
      *(_QWORD *)&v155[12] = v44;
      *(_WORD *)&v155[20] = 1024;
      *(_DWORD *)&v155[22] = 209;
      *(_WORD *)&v155[26] = 2112;
      *(_QWORD *)&v155[28] = v14;
      *(_WORD *)&v155[36] = 2112;
      v156 = v45;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to performChainAuthIfNeededForACL %@ : %@", buf, 0x36u);

    }
    v46 = 6;
    goto LABEL_22;
  }
  if (v13)
  {
    v48 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "resolvedAuthorization"));

    v6 = (id)v48;
  }
  v151 = 0;
  v49 = objc_msgSend(a1, "selectCRSWithError:", &v151);
  v50 = v151;
  if (v50)
  {
    v14 = v50;
    if (objc_msgSend(v50, "code"))
      v46 = (uint64_t)objc_msgSend(v14, "code");
    else
      v46 = 16;
    goto LABEL_22;
  }
  v153 = 0;
  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 250, 1, 0, 0, &v153));
  v52 = v153;
  if (objc_msgSend(v51, "status") == 36864)
  {
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "response"));
    v54 = 0;
  }
  else
  {
    v148 = v52;
    v142 = objc_alloc((Class)NSError);
    v138 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v157 = NSLocalizedDescriptionKey;
    v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    *(_QWORD *)buf = v140;
    *(_QWORD *)v155 = &off_100302D68;
    v158 = CFSTR("Line");
    v159 = CFSTR("Method");
    v144 = v6;
    v55 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_crs_GetOperationApprovalNonce:"));
    *(_QWORD *)&v155[8] = v55;
    v160 = NSDebugDescriptionErrorKey;
    v56 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_crs_GetOperationApprovalNonce:"), 261);
    *(_QWORD *)&v155[16] = v56;
    v161 = NSLocalizedFailureReasonErrorKey;
    v57 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Failed to GetNonce 0x%X"), objc_msgSend(v51, "status"));
    *(_QWORD *)&v155[24] = v57;
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v157, 5));
    v54 = objc_msgSend(v142, "initWithDomain:code:userInfo:", v138, 16, v58);

    v52 = v148;
    v6 = v144;

    v53 = 0;
  }

  v14 = v54;
  v149 = v53;
  if (v14 || !v53)
  {
    v83 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v84 = NFLogGetLogger(v83);
    if (v84)
    {
      v85 = (void (*)(uint64_t, const char *, ...))v84;
      v86 = object_getClass(a1);
      v87 = class_isMetaClass(v86);
      v124 = object_getClassName(a1);
      v129 = sel_getName("_authorizeContactlessWithOperationApproval:uid:usingACL:");
      v88 = 45;
      if (v87)
        v88 = 43;
      v85(3, "%c[%{public}s %{public}s]:%i Failed to GetOperationApprovalNonce - %@", v88, v124, v129, 225, v14);
    }
    v89 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v90 = NFSharedLogGetLogger(v89);
    v91 = objc_claimAutoreleasedReturnValue(v90);
    if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
    {
      v92 = object_getClass(a1);
      if (class_isMetaClass(v92))
        v93 = 43;
      else
        v93 = 45;
      v94 = object_getClassName(a1);
      v95 = sel_getName("_authorizeContactlessWithOperationApproval:uid:usingACL:");
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v93;
      *(_WORD *)v155 = 2082;
      *(_QWORD *)&v155[2] = v94;
      *(_WORD *)&v155[10] = 2082;
      *(_QWORD *)&v155[12] = v95;
      *(_WORD *)&v155[20] = 1024;
      *(_DWORD *)&v155[22] = 225;
      *(_WORD *)&v155[26] = 2112;
      *(_QWORD *)&v155[28] = v14;
      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to GetOperationApprovalNonce - %@", buf, 0x2Cu);
    }

    v53 = v149;
    if (objc_msgSend(v14, "code"))
      v46 = (uint64_t)objc_msgSend(v14, "code");
    else
      v46 = 16;
    goto LABEL_88;
  }
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData"));
  v150 = 0;
  v60 = sub_100209E08((uint64_t)NFSSEWrapper, CFSTR("se,nfc"), v6, v53, v59, v7, &v150);
  v61 = objc_claimAutoreleasedReturnValue(v60);
  v14 = v150;

  v143 = (void *)v61;
  if (v61)
  {
    v153 = 0;
    LOBYTE(v123) = 1;
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:useExtendedLength:error:", 128, 250, 2, 0, v61, 0, 0, v123, &v153));
    v139 = v153;
    v63 = v14;
    v141 = objc_msgSend(v62, "status");
    if (v141 != 36864)
    {
      v137 = v62;
      v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v65 = NFLogGetLogger(v64);
      if (v65)
      {
        v66 = (void (*)(uint64_t, const char *, ...))v65;
        v67 = object_getClass(a1);
        v68 = class_isMetaClass(v67);
        v145 = object_getClassName(a1);
        v69 = sel_getName("_crs_SendOperationApproval:error:");
        v132 = objc_msgSend(v137, "status");
        v70 = 45;
        if (v68)
          v70 = 43;
        v66(3, "%c[%{public}s %{public}s]:%i SE rejected OperationApproval with 0x%X", v70, v145, v69, 281, v132);
      }
      v146 = v6;
      v71 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v72 = NFSharedLogGetLogger(v71);
      v73 = objc_claimAutoreleasedReturnValue(v72);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        v74 = object_getClass(a1);
        if (class_isMetaClass(v74))
          v75 = 43;
        else
          v75 = 45;
        v76 = object_getClassName(a1);
        v77 = sel_getName("_crs_SendOperationApproval:error:");
        v78 = objc_msgSend(v137, "status");
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v75;
        *(_WORD *)v155 = 2082;
        *(_QWORD *)&v155[2] = v76;
        *(_WORD *)&v155[10] = 2082;
        *(_QWORD *)&v155[12] = v77;
        *(_WORD *)&v155[20] = 1024;
        *(_DWORD *)&v155[22] = 281;
        *(_WORD *)&v155[26] = 1024;
        *(_DWORD *)&v155[28] = v78;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i SE rejected OperationApproval with 0x%X", buf, 0x28u);
      }

      v79 = objc_alloc((Class)NSError);
      v135 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v157 = NSLocalizedDescriptionKey;
      v136 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      *(_QWORD *)buf = v136;
      *(_QWORD *)v155 = &off_100302D80;
      v158 = CFSTR("Line");
      v159 = CFSTR("Method");
      v134 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_crs_SendOperationApproval:error:"));
      *(_QWORD *)&v155[8] = v134;
      v160 = NSDebugDescriptionErrorKey;
      v133 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_crs_SendOperationApproval:error:"), 283);
      *(_QWORD *)&v155[16] = v133;
      v161 = NSLocalizedFailureReasonErrorKey;
      v62 = v137;
      v80 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Failed to send OA 0x%hx"), objc_msgSend(v137, "status"));
      *(_QWORD *)&v155[24] = v80;
      v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v157, 5));
      v63 = objc_msgSend(v79, "initWithDomain:code:userInfo:", v135, 16, v81);

      v6 = v146;
      v53 = v149;
    }

    v82 = v63;
    if (v141 == 36864)
    {
      v46 = 0;
LABEL_86:
      v14 = v82;
      goto LABEL_87;
    }
    v110 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v111 = NFLogGetLogger(v110);
    if (v111)
    {
      v112 = (void (*)(uint64_t, const char *, ...))v111;
      v113 = object_getClass(a1);
      v114 = class_isMetaClass(v113);
      v126 = object_getClassName(a1);
      v131 = sel_getName("_authorizeContactlessWithOperationApproval:uid:usingACL:");
      v101 = !v114;
      v53 = v149;
      v115 = 45;
      if (!v101)
        v115 = 43;
      v112(3, "%c[%{public}s %{public}s]:%i SE doesn't like SignedOperationApproval : %@", v115, v126, v131, 244, v82);
    }
    v116 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v117 = NFSharedLogGetLogger(v116);
    v118 = objc_claimAutoreleasedReturnValue(v117);
    if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
    {
      v119 = object_getClass(a1);
      if (class_isMetaClass(v119))
        v120 = 43;
      else
        v120 = 45;
      v121 = object_getClassName(a1);
      v122 = sel_getName("_authorizeContactlessWithOperationApproval:uid:usingACL:");
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v120;
      *(_WORD *)v155 = 2082;
      *(_QWORD *)&v155[2] = v121;
      v53 = v149;
      *(_WORD *)&v155[10] = 2082;
      *(_QWORD *)&v155[12] = v122;
      *(_WORD *)&v155[20] = 1024;
      *(_DWORD *)&v155[22] = 244;
      *(_WORD *)&v155[26] = 2112;
      *(_QWORD *)&v155[28] = v82;
      _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i SE doesn't like SignedOperationApproval : %@", buf, 0x2Cu);
    }

    if (!objc_msgSend(v82, "code"))
    {
      v46 = 6;
      goto LABEL_86;
    }
    v14 = v82;
  }
  else
  {
    v96 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v97 = NFLogGetLogger(v96);
    if (v97)
    {
      v98 = (void (*)(uint64_t, const char *, ...))v97;
      v99 = object_getClass(a1);
      v100 = class_isMetaClass(v99);
      v125 = object_getClassName(a1);
      v130 = sel_getName("_authorizeContactlessWithOperationApproval:uid:usingACL:");
      v101 = !v100;
      v53 = v149;
      v102 = 45;
      if (!v101)
        v102 = 43;
      v98(3, "%c[%{public}s %{public}s]:%i Failed to get SignedOperationApproval from SEP: %@", v102, v125, v130, 237, v14);
    }
    v103 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v104 = NFSharedLogGetLogger(v103);
    v105 = objc_claimAutoreleasedReturnValue(v104);
    if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
    {
      v106 = object_getClass(a1);
      if (class_isMetaClass(v106))
        v107 = 43;
      else
        v107 = 45;
      v108 = object_getClassName(a1);
      v109 = sel_getName("_authorizeContactlessWithOperationApproval:uid:usingACL:");
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v107;
      *(_WORD *)v155 = 2082;
      *(_QWORD *)&v155[2] = v108;
      v53 = v149;
      *(_WORD *)&v155[10] = 2082;
      *(_QWORD *)&v155[12] = v109;
      *(_WORD *)&v155[20] = 1024;
      *(_DWORD *)&v155[22] = 237;
      *(_WORD *)&v155[26] = 2112;
      *(_QWORD *)&v155[28] = v14;
      _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get SignedOperationApproval from SEP: %@", buf, 0x2Cu);
    }

    if (!objc_msgSend(v14, "code"))
    {
      v46 = 6;
      goto LABEL_87;
    }
    v82 = v14;
  }
  v46 = (uint64_t)objc_msgSend(v82, "code");
LABEL_87:

LABEL_88:
LABEL_22:

LABEL_23:
  return v46;
}

uint64_t sub_1001DD3DC(void *a1)
{
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v7;

  v1 = (uint64_t)a1;
  if (a1)
  {
    v7 = 0;
    v2 = objc_msgSend(a1, "selectCRSWithError:", &v7);
    v3 = v7;
    v4 = v3;
    if (v3)
    {
      if (objc_msgSend(v3, "code"))
        v1 = (uint64_t)objc_msgSend(v4, "code");
      else
        v1 = 16;
    }
    else
    {
      sub_1000B9AFC((void *)v1);
      v5 = objc_msgSend((id)v1, "globalUnmountCOX");
      v1 = 0;
    }

  }
  return v1;
}

id sub_1001DD474(void *a1)
{
  id v1;
  unint64_t v2;
  id v3;
  char *v4;
  void *v5;
  uint64_t v6;
  id v7;
  _BYTE v9[3];
  char v10;
  char v11;
  int v12;

  v1 = a1;
  v2 = (unint64_t)objc_msgSend(v1, "length");
  v12 = 324736;
  v11 = 0;
  v3 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithCapacity:", v2 + 7);
  objc_msgSend(v3, "appendBytes:length:", &v12, 4);
  if (v2 > 0xFF)
  {
    if (v2 >> 16)
    {
      v7 = 0;
      goto LABEL_7;
    }
    v9[0] = 0;
    v9[1] = BYTE1(v2);
    v9[2] = v2;
    v4 = v9;
    v5 = v3;
    v6 = 3;
  }
  else
  {
    v10 = v2;
    v4 = &v10;
    v5 = v3;
    v6 = 1;
  }
  objc_msgSend(v5, "appendBytes:length:", v4, v6);
  objc_msgSend(v3, "appendData:", v1);
  objc_msgSend(v3, "appendBytes:length:", &v11, 1);
  v7 = v3;
LABEL_7:

  return v7;
}

uint64_t sub_1001DD55C(void *a1, void *a2, NSObject **a3, _DWORD *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *p_super;
  uint64_t v19;
  void *specific;
  uint64_t Logger;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  objc_class *v29;
  int v30;
  void *v31;
  uint64_t v32;
  void (*v33)(uint64_t, const char *, ...);
  objc_class *v34;
  _BOOL4 v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  objc_class *v41;
  int v42;
  const char *v43;
  const char *v44;
  void *v45;
  NSObject *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  void *v58;
  uint64_t v59;
  void (*v60)(uint64_t, const char *, ...);
  objc_class *v61;
  _BOOL4 v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  NSObject *v68;
  objc_class *v69;
  int v70;
  const char *v71;
  const char *v72;
  unsigned int v73;
  id v74;
  void *v75;
  uint64_t v76;
  void (*v77)(uint64_t, const char *, ...);
  objc_class *v78;
  _BOOL4 v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  NSObject *v84;
  objc_class *v85;
  int v86;
  const char *v87;
  const char *v88;
  uint64_t v89;
  NSObject *v90;
  const char *Name;
  const char *v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  NSMutableData *v98;
  NSObject *v99;
  id v100;
  uint8_t buf[4];
  int v102;
  __int16 v103;
  const char *v104;
  __int16 v105;
  const char *v106;
  __int16 v107;
  int v108;
  __int16 v109;
  unsigned int v110;

  v7 = a2;
  v8 = v7;
  *a3 = 0;
  if (!a4)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v22 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("sendEcommerceAPDU:response:swStatus:");
      v26 = 45;
      if (isMetaClass)
        v26 = 43;
      v22(3, "%c[%{public}s %{public}s]:%i Invalid swStatus parameter", v26, ClassName, Name, 343);
    }
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFSharedLogGetLogger(v27);
    v12 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v29 = object_getClass(a1);
      if (class_isMetaClass(v29))
        v30 = 43;
      else
        v30 = 45;
      *(_DWORD *)buf = 67109890;
      v102 = v30;
      v103 = 2082;
      v104 = object_getClassName(a1);
      v105 = 2082;
      v106 = sel_getName("sendEcommerceAPDU:response:swStatus:");
      v107 = 1024;
      v108 = 343;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid swStatus parameter", buf, 0x22u);
    }
    v19 = 10;
    goto LABEL_86;
  }
  v9 = NFSharedSignpostLog(v7);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SEND_ECOMMERCE_APDU", "transceiveData in", buf, 2u);
  }

  v100 = 0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "transceiveData:toOS:error:", v8, 0, &v100));
  v12 = v100;
  v13 = NFSharedSignpostLog(v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_signpost_enabled(v14))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SEND_ECOMMERCE_APDU", "transceiveData out", buf, 2u);
  }

  if (!v11)
  {
    *a4 = 0;
    v31 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v32 = NFLogGetLogger(v31);
    if (v32)
    {
      v33 = (void (*)(uint64_t, const char *, ...))v32;
      v34 = object_getClass(a1);
      v35 = class_isMetaClass(v34);
      v36 = object_getClassName(a1);
      v93 = sel_getName("sendEcommerceAPDU:response:swStatus:");
      v37 = 45;
      if (v35)
        v37 = 43;
      v33(3, "%c[%{public}s %{public}s]:%i Failed send APDU to SE", v37, v36, v93, 353);
    }
    v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v39 = NFSharedLogGetLogger(v38);
    v40 = objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = object_getClass(a1);
      if (class_isMetaClass(v41))
        v42 = 43;
      else
        v42 = 45;
      v43 = object_getClassName(a1);
      v44 = sel_getName("sendEcommerceAPDU:response:swStatus:");
      *(_DWORD *)buf = 67109890;
      v102 = v42;
      v103 = 2082;
      v104 = v43;
      v105 = 2082;
      v106 = v44;
      v107 = 1024;
      v108 = 353;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed send APDU to SE", buf, 0x22u);
    }

    if (-[NSObject code](v12, "code"))
      v19 = (uint64_t)-[NSObject code](v12, "code");
    else
      v19 = 16;
    goto LABEL_85;
  }
  v97 = v11;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NFResponseAPDU responseWithData:](NFResponseAPDU, "responseWithData:", v11));
  *a4 = objc_msgSend(v15, "status");
  if (objc_msgSend(v15, "status") == 36864)
  {
    v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "response"));
    *a3 = v16;
    v17 = NFSharedSignpostLog(v16);
    p_super = objc_claimAutoreleasedReturnValue(v17);
    if (os_signpost_enabled(p_super))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, p_super, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SEND_ECOMMERCE_APDU", "done", buf, 2u);
    }
    v19 = 0;
    goto LABEL_84;
  }
  v96 = v8;
  v98 = objc_opt_new(NSMutableData);
  v45 = v15;
  v46 = v12;
  while (1)
  {
    if ((objc_msgSend(v45, "status") & 0xFF00) != 0x6100)
    {
      v58 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v59 = NFLogGetLogger(v58);
      if (v59)
      {
        v60 = (void (*)(uint64_t, const char *, ...))v59;
        v61 = object_getClass(a1);
        v62 = class_isMetaClass(v61);
        v63 = object_getClassName(a1);
        v64 = sel_getName("sendEcommerceAPDU:response:swStatus:");
        v95 = objc_msgSend(v45, "status");
        v65 = 45;
        if (v62)
          v65 = 43;
        v60(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v65, v63, v64, 398, v95);
      }
      v66 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v67 = NFSharedLogGetLogger(v66);
      v68 = objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        v69 = object_getClass(a1);
        if (class_isMetaClass(v69))
          v70 = 43;
        else
          v70 = 45;
        v71 = object_getClassName(a1);
        v72 = sel_getName("sendEcommerceAPDU:response:swStatus:");
        v73 = objc_msgSend(v45, "status");
        *(_DWORD *)buf = 67110146;
        v102 = v70;
        v103 = 2082;
        v104 = v71;
        v105 = 2082;
        v106 = v72;
        v107 = 1024;
        v108 = 398;
        v109 = 1024;
        v110 = v73;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
      }

      v74 = objc_msgSend(v45, "status");
      if ((_DWORD)v74 == 27010)
      {
        v19 = 8;
        p_super = &v98->super.super;
      }
      else
      {
        v74 = objc_msgSend(v45, "status");
        p_super = &v98->super.super;
        if ((_DWORD)v74 == 27013)
        {
          v19 = 8;
        }
        else
        {
          v74 = objc_msgSend(v45, "status");
          if ((_DWORD)v74 == 27265)
          {
            v19 = 14;
          }
          else
          {
            v74 = objc_msgSend(v45, "status");
            if ((_DWORD)v74 == 27012)
            {
              v19 = 23;
            }
            else
            {
              v74 = objc_msgSend(v45, "status");
              if ((_DWORD)v74 == 27264)
              {
                v19 = 10;
              }
              else
              {
                v74 = objc_msgSend(v45, "status");
                if ((_DWORD)v74 == 27272 || (v74 = objc_msgSend(v45, "status"), (_DWORD)v74 == 27015))
                  v19 = 9;
                else
                  v19 = 6;
              }
            }
          }
        }
      }
      v89 = NFSharedSignpostLog(v74);
      v90 = objc_claimAutoreleasedReturnValue(v89);
      if (os_signpost_enabled(v90))
      {
        *(_DWORD *)buf = 67109120;
        v102 = v19;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v90, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SEND_ECOMMERCE_APDU", "done - error: %d", buf, 8u);
      }

      v15 = v45;
      v12 = v46;
      goto LABEL_83;
    }
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "response"));
    -[NSMutableData appendData:](v98, "appendData:", v47);

    v49 = NFSharedSignpostLog(v48);
    v50 = objc_claimAutoreleasedReturnValue(v49);
    if (os_signpost_enabled(v50))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SEND_ECOMMERCE_APDU", "reading extra RADPU", buf, 2u);
    }

    v51 = objc_msgSend(v45, "status");
    v99 = v46;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:", 128, 192, 0, 0, 0, v51, 0, &v99));
    v12 = v99;

    v53 = NFSharedSignpostLog(v52);
    v54 = objc_claimAutoreleasedReturnValue(v53);
    if (os_signpost_enabled(v54))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SEND_ECOMMERCE_APDU", "reading extra RADPU done", buf, 2u);
    }

    if (!v15)
      break;
    *a4 = objc_msgSend(v15, "status");
    v45 = v15;
    v46 = v12;
    if (objc_msgSend(v15, "status") == 36864)
    {
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "response"));
      -[NSMutableData appendData:](v98, "appendData:", v55);

      p_super = objc_retainAutorelease(v98);
      *a3 = p_super;
      v56 = NFSharedSignpostLog(p_super);
      v57 = objc_claimAutoreleasedReturnValue(v56);
      if (os_signpost_enabled(v57))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v57, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SEND_ECOMMERCE_APDU", "done", buf, 2u);
      }

      v19 = 0;
LABEL_83:
      v8 = v96;
      goto LABEL_84;
    }
  }
  *a4 = 0;
  v75 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v76 = NFLogGetLogger(v75);
  if (v76)
  {
    v77 = (void (*)(uint64_t, const char *, ...))v76;
    v78 = object_getClass(a1);
    v79 = class_isMetaClass(v78);
    v80 = object_getClassName(a1);
    v94 = sel_getName("sendEcommerceAPDU:response:swStatus:");
    v81 = 45;
    if (v79)
      v81 = 43;
    v77(3, "%c[%{public}s %{public}s]:%i Command failed", v81, v80, v94, 384);
  }
  v82 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v83 = NFSharedLogGetLogger(v82);
  v84 = objc_claimAutoreleasedReturnValue(v83);
  v8 = v96;
  if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
  {
    v85 = object_getClass(a1);
    if (class_isMetaClass(v85))
      v86 = 43;
    else
      v86 = 45;
    v87 = object_getClassName(a1);
    v88 = sel_getName("sendEcommerceAPDU:response:swStatus:");
    *(_DWORD *)buf = 67109890;
    v102 = v86;
    v103 = 2082;
    v104 = v87;
    v105 = 2082;
    v106 = v88;
    v107 = 1024;
    v108 = 384;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
  }

  v15 = 0;
  if (-[NSObject code](v12, "code"))
    v19 = (uint64_t)-[NSObject code](v12, "code");
  else
    v19 = 16;
  p_super = &v98->super.super;
LABEL_84:

  v11 = v97;
LABEL_85:

LABEL_86:
  return v19;
}

void sub_1001DDFB0(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void (*v17)(uint64_t, const char *, ...);
  objc_class *v18;
  _BOOL4 v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  objc_class *v26;
  int v27;
  void *specific;
  uint64_t Logger;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *ClassName;
  const char *Name;
  id v41;
  uint8_t buf[4];
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  id v51;

  v9 = a2;
  v10 = a3;
  v11 = objc_retainAutorelease(v9);
  v12 = (unsigned __int8 *)objc_msgSend(v11, "bytes");
  if (v12 && (v13 = v12, (unint64_t)objc_msgSend(v11, "length") >= 4))
  {
    v14 = v13[3];
    if (v14 > 7)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v30 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("postCACRSAuth:request:response:status:");
        v33 = 45;
        if (isMetaClass)
          v33 = 43;
        v30(6, "%c[%{public}s %{public}s]:%i Failed to post CA as we have an invalid Validation Type %d", v33, ClassName, Name, 442, v14);
      }
      v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v35 = NFSharedLogGetLogger(v34);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        v37 = object_getClass(a1);
        if (class_isMetaClass(v37))
          v38 = 43;
        else
          v38 = 45;
        *(_DWORD *)buf = 67110146;
        v43 = v38;
        v44 = 2082;
        v45 = object_getClassName(a1);
        v46 = 2082;
        v47 = sel_getName("postCACRSAuth:request:response:status:");
        v48 = 1024;
        v49 = 442;
        v50 = 1024;
        LODWORD(v51) = v14;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Failed to post CA as we have an invalid Validation Type %d", buf, 0x28u);
      }

    }
    else
    {
      sub_1000B96A4(a1, v14, v10, *a4, a5);
    }
  }
  else
  {
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFLogGetLogger(v15);
    if (v16)
    {
      v17 = (void (*)(uint64_t, const char *, ...))v16;
      v18 = object_getClass(a1);
      v19 = class_isMetaClass(v18);
      v20 = object_getClassName(a1);
      v21 = sel_getName("postCACRSAuth:request:response:status:");
      v41 = objc_msgSend(v11, "length");
      v22 = 45;
      if (v19)
        v22 = 43;
      v17(6, "%c[%{public}s %{public}s]:%i Failed to post CA as we have an invalid APDU buffer with length %lu", v22, v20, v21, 445, v41);
    }
    v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v24 = NFSharedLogGetLogger(v23);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v26 = object_getClass(a1);
      if (class_isMetaClass(v26))
        v27 = 43;
      else
        v27 = 45;
      *(_DWORD *)buf = 67110146;
      v43 = v27;
      v44 = 2082;
      v45 = object_getClassName(a1);
      v46 = 2082;
      v47 = sel_getName("postCACRSAuth:request:response:status:");
      v48 = 1024;
      v49 = 445;
      v50 = 2048;
      v51 = objc_msgSend(v11, "length");
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Failed to post CA as we have an invalid APDU buffer with length %lu", buf, 0x2Cu);
    }

  }
}

Class sub_1001DE304(NFECommercePaymentResponse *a1, void *a2, uint64_t a3, void *a4, uint64_t *a5)
{
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  objc_class *v23;
  Class v24;
  void *specific;
  uint64_t Logger;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  const char *v37;
  const char *v38;
  id v39;
  Class v40;
  id v41;
  void *v42;
  uint64_t v43;
  void (*v44)(uint64_t, const char *, ...);
  objc_class *v45;
  _BOOL4 v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  NSObject *v51;
  objc_class *v52;
  int v53;
  const char *v54;
  const char *v55;
  id v56;
  uint64_t v57;
  int v58;
  id v59;
  void *v60;
  Class v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void (*v65)(uint64_t, const char *, ...);
  objc_class *v66;
  _BOOL4 v67;
  const char *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  objc_class *v74;
  int v75;
  const char *v76;
  const char *v77;
  const __CFString *v78;
  id v79;
  id *v80;
  NSErrorUserInfoKey *v81;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  char v91;
  int v92;
  int v93;
  void *v94;
  uint64_t v95;
  void (*v96)(uint64_t, const char *, ...);
  objc_class *v97;
  _BOOL4 v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  NSObject *v102;
  objc_class *v103;
  int v104;
  const char *v105;
  const char *v106;
  void *v107;
  void *v108;
  _BYTE *v109;
  void *v111;
  uint64_t v112;
  void (*v113)(uint64_t, const char *, ...);
  objc_class *v114;
  _BOOL4 v115;
  const char *v116;
  void *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  NSObject *v121;
  objc_class *v122;
  int v123;
  const char *v124;
  const char *v125;
  __CFString *v126;
  id v127;
  id *v128;
  NSErrorUserInfoKey *v129;
  void *v130;
  void *v131;
  _BYTE *v132;
  void *v134;
  uint64_t v135;
  void (*v136)(uint64_t, const char *, ...);
  objc_class *v137;
  _BOOL4 v138;
  const char *v139;
  void *v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  NSObject *v144;
  objc_class *v145;
  int v146;
  const char *v147;
  const char *v148;
  __CFString *v149;
  void *v150;
  uint64_t v151;
  NSObject *v152;
  uint64_t v153;
  uint64_t v154;
  NSObject *v155;
  void *v156;
  uint64_t v157;
  void (*v158)(uint64_t, const char *, ...);
  objc_class *v159;
  _BOOL4 v160;
  const char *v161;
  const char *v162;
  int v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  NSObject *v167;
  objc_class *v168;
  int v169;
  const char *v170;
  const char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  NSObject *v175;
  id v176;
  uint64_t v177;
  NSObject *v178;
  void *v179;
  void *v180;
  uint64_t v181;
  void (*v182)(uint64_t, const char *, ...);
  objc_class *v183;
  _BOOL4 v184;
  const char *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  NSObject *v189;
  objc_class *v190;
  int v191;
  const char *v192;
  const char *v193;
  void *v194;
  id v195;
  void *v196;
  void *v197;
  void *v198;
  uint64_t v199;
  void (*v200)(uint64_t, const char *, ...);
  objc_class *v201;
  _BOOL4 v202;
  const char *v203;
  const char *v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  NSObject *v208;
  objc_class *v209;
  int v210;
  const char *v211;
  const char *v212;
  const __CFString *v213;
  id v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  NSMutableData *v218;
  void *v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  NSObject *v224;
  void *v225;
  __CFData *v226;
  id v227;
  uint64_t v228;
  uint64_t v229;
  NSObject *v230;
  int v231;
  void *v232;
  uint64_t v233;
  void (*v234)(uint64_t, const char *, ...);
  objc_class *v235;
  const char *v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  NSObject *v240;
  objc_class *v241;
  int v242;
  const char *v243;
  const char *v244;
  id v245;
  uint64_t v246;
  int v247;
  void *v248;
  void *v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  NSObject *v253;
  void *v254;
  id v255;
  id v256;
  uint64_t v257;
  uint64_t v258;
  NSObject *v259;
  uint64_t v260;
  NSObject *v261;
  uint64_t v262;
  uint64_t v263;
  NSObject *v264;
  void *v265;
  uint64_t v266;
  void (*v267)(uint64_t, const char *, ...);
  objc_class *v268;
  _BOOL4 v269;
  id v270;
  const char *v271;
  const char *v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  NSObject *v276;
  objc_class *v277;
  id v278;
  int v279;
  const char *v280;
  const char *v281;
  void *v282;
  uint64_t v283;
  void (*v284)(uint64_t, const char *, ...);
  objc_class *v285;
  _BOOL4 v286;
  id v287;
  const char *v288;
  const char *v289;
  int v290;
  uint64_t v291;
  void *v292;
  uint64_t v293;
  NSObject *v294;
  objc_class *v295;
  int v296;
  const char *v297;
  const char *v298;
  unsigned int v299;
  uint64_t v300;
  char *v301;
  void *v302;
  void *v303;
  uint64_t v304;
  void (*v305)(uint64_t, const char *, ...);
  objc_class *v306;
  _BOOL4 v307;
  const char *v308;
  uint64_t v309;
  void *v310;
  uint64_t v311;
  NSObject *v312;
  objc_class *v313;
  int v314;
  const char *v315;
  const char *v316;
  id v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  uint64_t v322;
  void (*v323)(uint64_t, const char *, ...);
  objc_class *v324;
  _BOOL4 v325;
  id v326;
  const char *v327;
  uint64_t v328;
  void *v329;
  uint64_t v330;
  NSObject *v331;
  objc_class *v332;
  int v333;
  const char *v334;
  const char *v335;
  id v336;
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  void *v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  void (*v345)(uint64_t, const char *, ...);
  objc_class *v346;
  _BOOL4 v347;
  id v348;
  const char *v349;
  uint64_t v350;
  void *v351;
  uint64_t v352;
  NSObject *v353;
  objc_class *v354;
  int v355;
  const char *v356;
  const char *v357;
  const __CFString *v358;
  id v359;
  void *v360;
  uint64_t v361;
  void (*v362)(uint64_t, const char *, ...);
  objc_class *v363;
  _BOOL4 v364;
  uint64_t v365;
  void *v366;
  uint64_t v367;
  NSObject *v368;
  objc_class *v369;
  int v370;
  const char *v371;
  const char *v372;
  uint64_t v373;
  void *v374;
  uint64_t v375;
  void (*v376)(uint64_t, const char *, ...);
  objc_class *v377;
  _BOOL4 v378;
  uint64_t v379;
  void *v380;
  uint64_t v381;
  NSObject *v382;
  objc_class *v383;
  int v384;
  const char *v385;
  const char *v386;
  id v387;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  void *v391;
  void *v392;
  uint64_t v393;
  id v394;
  id v395;
  void *v396;
  void *v397;
  uint64_t v398;
  void (*v399)(uint64_t, const char *, ...);
  objc_class *v400;
  const char *v401;
  uint64_t v402;
  void *v403;
  uint64_t v404;
  NSObject *v405;
  objc_class *v406;
  int v407;
  const char *v408;
  const char *v409;
  id v410;
  uint64_t v411;
  void *v412;
  void *v413;
  NFECommercePaymentResponse *v414;
  NSMutableDictionary *v415;
  void *v416;
  void *v417;
  void *v418;
  void *v419;
  void *v420;
  void *v421;
  void *v422;
  void *v423;
  uint64_t v424;
  NSObject *v425;
  const char *v426;
  const char *v427;
  const char *v428;
  const char *v429;
  const char *Name;
  const char *v431;
  const char *v432;
  const char *v433;
  const char *v434;
  const char *v435;
  const char *v436;
  const char *v437;
  const char *v438;
  const char *v439;
  const char *v440;
  id v441;
  id v442;
  id v443;
  char *v444;
  char *v445;
  _BOOL4 v446;
  uint64_t v447;
  NSObject *v448;
  id v449;
  void *v450;
  uint64_t v451;
  unsigned int v452;
  void *v453;
  int v454;
  void *v455;
  void *v456;
  objc_class *v457;
  id v458;
  _BOOL4 v459;
  _BOOL4 v460;
  void *v461;
  uint64_t v462;
  const char *v463;
  char v464;
  id v465;
  id v466;
  void *v467;
  unsigned int v468;
  id v469;
  id v470;
  const char *v471;
  const char *v472;
  int v473;
  id v474;
  void *v475;
  const char *v476;
  id v477;
  const char *v478;
  id v479;
  void *v480;
  id v481;
  id v482;
  id v483;
  id v484;
  NSObject *v485;
  unsigned int v486;
  id v487;
  id v488;
  id v489;
  NSMutableData v490;
  id v491;
  uint64_t v492;
  id v493;
  id v494;
  id v495;
  NSErrorUserInfoKey v496;
  void *v497;
  NSErrorUserInfoKey v498;
  void *v499;
  NSErrorUserInfoKey v500;
  void *v501;
  NSErrorUserInfoKey v502;
  void *v503;
  NSErrorUserInfoKey v504;
  void *v505;
  NSErrorUserInfoKey v506;
  uint64_t v507;
  _QWORD v508[5];
  _QWORD v509[5];
  NSErrorUserInfoKey v510;
  void *v511;
  NSErrorUserInfoKey v512;
  void *v513;
  NSErrorUserInfoKey v514;
  void *v515;
  uint8_t buf[4];
  int v517;
  __int16 v518;
  const char *v519;
  __int16 v520;
  const char *v521;
  __int16 v522;
  int v523;
  __int16 v524;
  const __CFString *v525;
  __int16 v526;
  int v527;
  __int16 v528;
  char *v529;
  NSErrorUserInfoKey v530;
  id v531;
  NSErrorUserInfoKey v532;
  id v533;
  NSErrorUserInfoKey v534;
  id v535;
  NSErrorUserInfoKey v536;
  id v537;
  NSErrorUserInfoKey v538;
  id v539;
  NSErrorUserInfoKey v540;
  id v541;
  NSErrorUserInfoKey v542;
  Class v543;

  v9 = a2;
  v10 = a4;
  v11 = v10;
  if (!a1)
  {
    v24 = 0;
    goto LABEL_54;
  }
  v12 = NFSharedSignpostLog(v10);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_signpost_enabled(v13))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AUTH_ECOMMERCE", "begin", buf, 2u);
  }

  v480 = v11;
  if (!v9)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v27 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
      v31 = 45;
      if (isMetaClass)
        v31 = 43;
      v27(3, "%c[%{public}s %{public}s]:%i Missing SSE handle", v31, ClassName, Name, 460);
    }
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = NFSharedLogGetLogger(v32);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v35 = object_getClass(a1);
      if (class_isMetaClass(v35))
        v36 = 43;
      else
        v36 = 45;
      v37 = object_getClassName(a1);
      v38 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
      *(_DWORD *)buf = 67109890;
      v517 = v36;
      v518 = 2082;
      v519 = v37;
      v520 = 2082;
      v521 = v38;
      v522 = 1024;
      v523 = 460;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing SSE handle", buf, 0x22u);
    }

    v39 = objc_alloc((Class)NSError);
    v18 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v542 = NSLocalizedDescriptionKey;
    v40 = (Class)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Missing Parameter"));
    v543 = v40;
    v41 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v543, &v542, 1));
    v24 = (Class)objc_msgSend(v39, "initWithDomain:code:userInfo:", v18, 9, v41);
    goto LABEL_52;
  }
  v14 = kdebug_trace(724566148, 0, 0, 0, 0);
  v15 = NFSharedSignpostLog(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_signpost_enabled(v16))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetHostChallenge in", buf, 2u);
  }

  v495 = 0;
  v17 = sub_1002088C0((uint64_t)NFSSEWrapper, &v495);
  v18 = v495;
  v19 = kdebug_trace(724566148, 1, 0, 0, 0);
  v20 = NFSharedSignpostLog(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_signpost_enabled(v21))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetHostChallenge out", buf, 2u);
  }

  if (!v18 || v17)
  {
    v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v43 = NFLogGetLogger(v42);
    if (v43)
    {
      v44 = (void (*)(uint64_t, const char *, ...))v43;
      v45 = object_getClass(a1);
      v46 = class_isMetaClass(v45);
      v47 = object_getClassName(a1);
      v431 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
      v48 = 45;
      if (v46)
        v48 = 43;
      v44(3, "%c[%{public}s %{public}s]:%i Failed to get host challenge", v48, v47, v431, 473);
    }
    v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v50 = NFSharedLogGetLogger(v49);
    v51 = objc_claimAutoreleasedReturnValue(v50);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v52 = object_getClass(a1);
      if (class_isMetaClass(v52))
        v53 = 43;
      else
        v53 = 45;
      v54 = object_getClassName(a1);
      v55 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
      *(_DWORD *)buf = 67109890;
      v517 = v53;
      v518 = 2082;
      v519 = v54;
      v520 = 2082;
      v521 = v55;
      v522 = 1024;
      v523 = 473;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get host challenge", buf, 0x22u);
    }

    v56 = objc_alloc((Class)NSError);
    v40 = (Class)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v17)
    {
      v57 = v17;
      v538 = NSLocalizedDescriptionKey;
      if (v17 >= 0x47)
        v58 = 71;
      else
        v58 = v17;
      v41 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v58]));
      v539 = v41;
      v59 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v539, &v538, 1));
      v60 = v56;
      v61 = v40;
      v62 = v57;
    }
    else
    {
      v540 = NSLocalizedDescriptionKey;
      v41 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
      v541 = v41;
      v59 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v541, &v540, 1));
      v60 = v56;
      v61 = v40;
      v62 = 6;
    }
    goto LABEL_50;
  }
  if (objc_msgSend(v18, "length") != (id)8)
  {
    v63 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v64 = NFLogGetLogger(v63);
    if (v64)
    {
      v65 = (void (*)(uint64_t, const char *, ...))v64;
      v66 = object_getClass(a1);
      v67 = class_isMetaClass(v66);
      v68 = object_getClassName(a1);
      v69 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
      v441 = objc_msgSend(v18, "length");
      v70 = 45;
      if (v67)
        v70 = 43;
      v65(3, "%c[%{public}s %{public}s]:%i Invalid host challenge length: %lu", v70, v68, v69, 477, v441);
    }
    v71 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v72 = NFSharedLogGetLogger(v71);
    v73 = objc_claimAutoreleasedReturnValue(v72);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      v74 = object_getClass(a1);
      if (class_isMetaClass(v74))
        v75 = 43;
      else
        v75 = 45;
      v76 = object_getClassName(a1);
      v77 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
      v78 = (const __CFString *)objc_msgSend(v18, "length");
      *(_DWORD *)buf = 67110146;
      v517 = v75;
      v518 = 2082;
      v519 = v76;
      v520 = 2082;
      v521 = v77;
      v522 = 1024;
      v523 = 477;
      v524 = 2048;
      v525 = v78;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid host challenge length: %lu", buf, 0x2Cu);
    }

    v79 = objc_alloc((Class)NSError);
    v40 = (Class)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v536 = NSLocalizedDescriptionKey;
    v41 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
    v537 = v41;
    v80 = &v537;
    v81 = &v536;
LABEL_48:
    v59 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v80, v81, 1));
    v60 = v79;
    v61 = v40;
    v62 = 13;
LABEL_50:
    v24 = (Class)objc_msgSend(v60, "initWithDomain:code:userInfo:", v61, v62, v59);
LABEL_51:

LABEL_52:
    v11 = v480;
    goto LABEL_53;
  }
  v494 = 0;
  v22 = -[NFECommercePaymentResponse selectCRSWithError:](a1, "selectCRSWithError:", &v494);
  v23 = (objc_class *)v494;
  if (!v23)
  {
    v83 = kdebug_trace(724566148, 0, 0, 0, 0);
    v84 = NFSharedSignpostLog(v83);
    v85 = objc_claimAutoreleasedReturnValue(v84);
    if (os_signpost_enabled(v85))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v85, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "acmGetOlsoType in", buf, 2u);
    }

    v86 = sub_10020915C((uint64_t)NFSSEWrapper, v9);
    v87 = kdebug_trace(724566148, 1, 0, 0, 0);
    v88 = NFSharedSignpostLog(v87);
    v89 = objc_claimAutoreleasedReturnValue(v88);
    if (os_signpost_enabled(v89))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v89, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "acmGetOlsoType out", buf, 2u);
    }

    v91 = 0;
    v92 = 1;
    v93 = 3;
    switch((int)v86)
    {
      case 1:
        v91 = 0;
        v92 = 0;
        goto LABEL_102;
      case 2:
        v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "appletIdentifier"));
        v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v107));

        v40 = objc_retainAutorelease(v108);
        v109 = -[objc_class bytes](v40, "bytes");
        if (*(_DWORD *)v109 == 50331808 && v109[4] == 51)
        {

          v92 = 0;
          v93 = 5;
          v91 = 1;
          goto LABEL_102;
        }
        v111 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v112 = NFLogGetLogger(v111);
        if (v112)
        {
          v113 = (void (*)(uint64_t, const char *, ...))v112;
          v114 = object_getClass(a1);
          v115 = class_isMetaClass(v114);
          v471 = object_getClassName(a1);
          v116 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
          v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v480, "appletIdentifier"));
          v118 = 45;
          if (v115)
            v118 = 43;
          v113(3, "%c[%{public}s %{public}s]:%i PIN not supported on %{public}@", v118, v471, v116, 514, v117);

        }
        v119 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v120 = NFSharedLogGetLogger(v119);
        v121 = objc_claimAutoreleasedReturnValue(v120);
        if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
        {
          v122 = object_getClass(a1);
          if (class_isMetaClass(v122))
            v123 = 43;
          else
            v123 = 45;
          v124 = object_getClassName(a1);
          v125 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
          v126 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v480, "appletIdentifier"));
          *(_DWORD *)buf = 67110146;
          v517 = v123;
          v518 = 2082;
          v519 = v124;
          v520 = 2082;
          v521 = v125;
          v522 = 1024;
          v523 = 514;
          v524 = 2114;
          v525 = v126;
          _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i PIN not supported on %{public}@", buf, 0x2Cu);

        }
        v127 = objc_alloc((Class)NSError);
        v41 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v532 = NSLocalizedDescriptionKey;
        v59 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Feature Not Supported"));
        v533 = v59;
        v128 = &v533;
        v129 = &v532;
        goto LABEL_99;
      case 3:
      case 5:
        goto LABEL_102;
      case 4:
        v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "appletIdentifier"));
        v131 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v130));

        v40 = objc_retainAutorelease(v131);
        v132 = -[objc_class bytes](v40, "bytes");
        if (*(_DWORD *)v132 != 50331808 || v132[4] != 51)
        {
          v134 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v135 = NFLogGetLogger(v134);
          if (v135)
          {
            v136 = (void (*)(uint64_t, const char *, ...))v135;
            v137 = object_getClass(a1);
            v138 = class_isMetaClass(v137);
            v472 = object_getClassName(a1);
            v139 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
            v140 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v480, "appletIdentifier"));
            v141 = 45;
            if (v138)
              v141 = 43;
            v136(3, "%c[%{public}s %{public}s]:%i PIN not supported on %{public}@", v141, v472, v139, 502, v140);

          }
          v142 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v143 = NFSharedLogGetLogger(v142);
          v144 = objc_claimAutoreleasedReturnValue(v143);
          if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
          {
            v145 = object_getClass(a1);
            if (class_isMetaClass(v145))
              v146 = 43;
            else
              v146 = 45;
            v147 = object_getClassName(a1);
            v148 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
            v149 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v480, "appletIdentifier"));
            *(_DWORD *)buf = 67110146;
            v517 = v146;
            v518 = 2082;
            v519 = v147;
            v520 = 2082;
            v521 = v148;
            v522 = 1024;
            v523 = 502;
            v524 = 2114;
            v525 = v149;
            _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i PIN not supported on %{public}@", buf, 0x2Cu);

          }
          v127 = objc_alloc((Class)NSError);
          v41 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v534 = NSLocalizedDescriptionKey;
          v59 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Feature Not Supported"));
          v535 = v59;
          v128 = &v535;
          v129 = &v534;
LABEL_99:
          v150 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v128, v129, 1));
          v24 = (Class)objc_msgSend(v127, "initWithDomain:code:userInfo:", v41, 14, v150);

          goto LABEL_51;
        }

        v93 = 5;
        v91 = 1;
        v92 = 1;
LABEL_102:
        v473 = v93;
        v464 = v91;
        v468 = v92;
        v151 = NFSharedSignpostLog(v90);
        v152 = objc_claimAutoreleasedReturnValue(v151);
        if (os_signpost_enabled(v152))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v152, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AUTH_ECOMMERCE", "crs_authenticate in", buf, 2u);
        }

        v493 = 0;
        v153 = sub_1000B7998(a1, v18, &v493);
        v41 = v493;
        v154 = NFSharedSignpostLog(v41);
        v155 = objc_claimAutoreleasedReturnValue(v154);
        if (os_signpost_enabled(v155))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v155, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AUTH_ECOMMERCE", "crs_authenticate out", buf, 2u);
        }

        if ((_DWORD)v153)
        {
          v156 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v157 = NFLogGetLogger(v156);
          if (v157)
          {
            v158 = (void (*)(uint64_t, const char *, ...))v157;
            v159 = object_getClass(a1);
            v160 = class_isMetaClass(v159);
            v161 = object_getClassName(a1);
            v162 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
            if (v153 >= 0x47)
              v163 = 71;
            else
              v163 = v153;
            v444 = off_1002EAC00[v163];
            v164 = 43;
            if (!v160)
              v164 = 45;
            v158(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v164, v161, v162, 541, CFSTR("Failed to authenticate"), v153, v444);
          }
          v165 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v166 = NFSharedLogGetLogger(v165);
          v167 = objc_claimAutoreleasedReturnValue(v166);
          if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
          {
            v168 = object_getClass(a1);
            if (class_isMetaClass(v168))
              v169 = 43;
            else
              v169 = 45;
            v170 = object_getClassName(a1);
            v171 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
            if (v153 >= 0x47)
              v172 = 71;
            else
              v172 = v153;
            v173 = off_1002EAC00[v172];
            *(_DWORD *)buf = 67110658;
            v517 = v169;
            v518 = 2082;
            v519 = v170;
            v520 = 2082;
            v521 = v171;
            v522 = 1024;
            v523 = 541;
            v524 = 2112;
            v525 = CFSTR("Failed to authenticate");
            v526 = 1024;
            v527 = v153;
            v528 = 2080;
            v529 = v173;
            _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", buf, 0x3Cu);
          }
          else if (v153 >= 0x47)
          {
            v172 = 71;
          }
          else
          {
            v172 = v153;
          }

          v195 = objc_alloc((Class)NSError);
          v59 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v514 = NSLocalizedDescriptionKey;
          v196 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v172]));
          v515 = v196;
          v197 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v515, &v514, 1));
          v24 = (Class)objc_msgSend(v195, "initWithDomain:code:userInfo:", v59, v153, v197);

          v40 = 0;
          goto LABEL_298;
        }
        if (objc_msgSend(v41, "length") != (id)16)
        {
          v198 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v199 = NFLogGetLogger(v198);
          if (v199)
          {
            v200 = (void (*)(uint64_t, const char *, ...))v199;
            v201 = object_getClass(a1);
            v202 = class_isMetaClass(v201);
            v203 = object_getClassName(a1);
            v204 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
            v442 = objc_msgSend(v41, "length");
            v205 = 45;
            if (v202)
              v205 = 43;
            v200(3, "%c[%{public}s %{public}s]:%i Invalid authenticate response length: %lu", v205, v203, v204, 545, v442);
          }
          v206 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v207 = NFSharedLogGetLogger(v206);
          v208 = objc_claimAutoreleasedReturnValue(v207);
          if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
          {
            v209 = object_getClass(a1);
            if (class_isMetaClass(v209))
              v210 = 43;
            else
              v210 = 45;
            v211 = object_getClassName(a1);
            v212 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
            v213 = (const __CFString *)objc_msgSend(v41, "length");
            *(_DWORD *)buf = 67110146;
            v517 = v210;
            v518 = 2082;
            v519 = v211;
            v520 = 2082;
            v521 = v212;
            v522 = 1024;
            v523 = 545;
            v524 = 2048;
            v525 = v213;
            _os_log_impl((void *)&_mh_execute_header, v208, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid authenticate response length: %lu", buf, 0x2Cu);
          }

          v214 = objc_alloc((Class)NSError);
          v59 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v512 = NSLocalizedDescriptionKey;
          v196 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
          v513 = v196;
          v215 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v513, &v512, 1));
          v24 = (Class)objc_msgSend(v214, "initWithDomain:code:userInfo:", v59, 13, v215);

          v40 = 0;
          goto LABEL_298;
        }
        v492 = 0;
        v174 = NFSharedSignpostLog(16);
        v175 = objc_claimAutoreleasedReturnValue(v174);
        if (os_signpost_enabled(v175))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v175, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AUTH_ECOMMERCE", "supportSSESigning in", buf, 2u);
        }

        v491 = 0;
        v460 = sub_10020ADF8((uint64_t)NFSSEWrapper, &v491);
        v176 = v491;
        v177 = NFSharedSignpostLog(v176);
        v178 = objc_claimAutoreleasedReturnValue(v177);
        if (os_signpost_enabled(v178))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v178, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AUTH_ECOMMERCE", "supportSSESigning out", buf, 2u);
        }

        if (v176)
        {
          v179 = v176;
          v180 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v181 = NFLogGetLogger(v180);
          if (v181)
          {
            v182 = (void (*)(uint64_t, const char *, ...))v181;
            v183 = object_getClass(a1);
            v184 = class_isMetaClass(v183);
            v185 = object_getClassName(a1);
            v433 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
            v186 = 45;
            if (v184)
              v186 = 43;
            v182(3, "%c[%{public}s %{public}s]:%i Failed to get SSE support", v186, v185, v433, 559);
          }
          v187 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v188 = NFSharedLogGetLogger(v187);
          v189 = objc_claimAutoreleasedReturnValue(v188);
          if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
          {
            v190 = object_getClass(a1);
            if (class_isMetaClass(v190))
              v191 = 43;
            else
              v191 = 45;
            v192 = object_getClassName(a1);
            v193 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
            *(_DWORD *)buf = 67109890;
            v517 = v191;
            v518 = 2082;
            v519 = v192;
            v520 = 2082;
            v521 = v193;
            v522 = 1024;
            v523 = 559;
            _os_log_impl((void *)&_mh_execute_header, v189, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get SSE support", buf, 0x22u);
          }

          v40 = v179;
          v59 = 0;
          v469 = 0;
          v194 = 0;
          v24 = v40;
          goto LABEL_297;
        }
        if (v460)
        {
          v216 = objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "subdataWithRange:", 0, 8));
          v217 = objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "subdataWithRange:", 8, 8));
          v461 = (void *)v216;
          if (!v216 || !v217)
          {
            v302 = (void *)v217;
            v303 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v304 = NFLogGetLogger(v303);
            if (v304)
            {
              v305 = (void (*)(uint64_t, const char *, ...))v304;
              v306 = object_getClass(a1);
              v307 = class_isMetaClass(v306);
              v308 = object_getClassName(a1);
              v435 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
              v309 = 45;
              if (v307)
                v309 = 43;
              v305(3, "%c[%{public}s %{public}s]:%i Failed to get card info", v309, v308, v435, 569);
            }
            v310 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v311 = NFSharedLogGetLogger(v310);
            v312 = objc_claimAutoreleasedReturnValue(v311);
            if (os_log_type_enabled(v312, OS_LOG_TYPE_ERROR))
            {
              v313 = object_getClass(a1);
              if (class_isMetaClass(v313))
                v314 = 43;
              else
                v314 = 45;
              v315 = object_getClassName(a1);
              v316 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
              *(_DWORD *)buf = 67109890;
              v517 = v314;
              v518 = 2082;
              v519 = v315;
              v520 = 2082;
              v521 = v316;
              v522 = 1024;
              v523 = 569;
              _os_log_impl((void *)&_mh_execute_header, v312, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get card info", buf, 0x22u);
            }

            v317 = objc_alloc((Class)NSError);
            v318 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v510 = NSLocalizedDescriptionKey;
            v319 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
            v511 = v319;
            v320 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v511, &v510, 1));
            v24 = (Class)objc_msgSend(v317, "initWithDomain:code:userInfo:", v318, 16, v320);

            v40 = 0;
            v59 = 0;
            v469 = 0;
            v194 = 0;
            goto LABEL_297;
          }
          v456 = (void *)v217;
          v490.super.super.isa = 0;
          v218 = sub_1001C43B8((uint64_t)NFECommercePaymentRequestEncoder, v480, 0, &v490);
          v219 = (void *)objc_claimAutoreleasedReturnValue(v218);
          v40 = v490.super.super.isa;
          v455 = v219;
          if (v219)
          {
            v220 = sub_1001DD474(v219);
            v221 = objc_claimAutoreleasedReturnValue(v220);
            if (v221)
            {
              v450 = (void *)v221;
              v222 = kdebug_trace(724566148, 0, 0, 0, 0);
              v223 = NFSharedSignpostLog(v222);
              v224 = objc_claimAutoreleasedReturnValue(v223);
              if (os_signpost_enabled(v224))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v224, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "authorizeAndSign in", buf, 2u);
              }

              v488 = 0;
              v489 = 0;
              v487 = 0;
              v225 = (void *)objc_claimAutoreleasedReturnValue(-[NFECommercePaymentResponse serialNumberAsData](a1, "serialNumberAsData"));
              v226 = sub_1002099B8((uint64_t)NFSSEWrapper, 3, v450, a3, v9, v225, v464, v468, v18, v461, v456, &v489, &v488, &v492, &v487);
              v457 = (objc_class *)objc_claimAutoreleasedReturnValue(v226);
              v59 = v489;
              v227 = v488;
              v465 = v487;

              v228 = kdebug_trace(724566148, 1, 0, 0, 0);
              v229 = NFSharedSignpostLog(v228);
              v230 = objc_claimAutoreleasedReturnValue(v229);
              if (os_signpost_enabled(v230))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v230, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "authorizeAndSign out", buf, 2u);
              }

              v24 = v457;
              v469 = v227;
              if (v457)
              {
                v486 = 0;
                *a5 = 0;
                v485 = 0;
                v231 = sub_1001DD55C(a1, v457, &v485, &v486);
                v448 = v485;
                v452 = v231;
                if (v231)
                {
                  v474 = v9;
                  sub_1001DDFB0(a1, v457, v480, a5, v486);
                  v232 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v233 = NFLogGetLogger(v232);
                  if (v233)
                  {
                    v234 = (void (*)(uint64_t, const char *, ...))v233;
                    v235 = object_getClass(a1);
                    v446 = class_isMetaClass(v235);
                    v236 = object_getClassName(a1);
                    v434 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
                    v237 = 45;
                    if (v446)
                      v237 = 43;
                    v234(3, "%c[%{public}s %{public}s]:%i Failed to send signed APDU", v237, v236, v434, 623);
                  }
                  v238 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v239 = NFSharedLogGetLogger(v238);
                  v240 = objc_claimAutoreleasedReturnValue(v239);
                  if (os_log_type_enabled(v240, OS_LOG_TYPE_ERROR))
                  {
                    v241 = object_getClass(a1);
                    if (class_isMetaClass(v241))
                      v242 = 43;
                    else
                      v242 = 45;
                    v243 = object_getClassName(a1);
                    v244 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
                    *(_DWORD *)buf = 67109890;
                    v517 = v242;
                    v518 = 2082;
                    v519 = v243;
                    v520 = 2082;
                    v521 = v244;
                    v522 = 1024;
                    v523 = 623;
                    _os_log_impl((void *)&_mh_execute_header, v240, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send signed APDU", buf, 0x22u);
                  }

                  v245 = objc_alloc((Class)NSError);
                  v246 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                  v447 = v452;
                  v502 = NSLocalizedDescriptionKey;
                  if (v452 >= 0x47)
                    v247 = 71;
                  else
                    v247 = v452;
                  v453 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v247]));
                  v503 = v453;
                  v231 = 1;
                  v248 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v503, &v502, 1));
                  v249 = v245;
                  v250 = (void *)v246;
                  v24 = (Class)objc_msgSend(v249, "initWithDomain:code:userInfo:", v246, v447, v248);

                  v9 = v474;
                }
                else
                {
                  v414 = sub_1000B8708(a1, v448);
                  *a5 = (uint64_t)(id)objc_claimAutoreleasedReturnValue(v414);
                  sub_1001DDFB0(a1, v457, v480, a5, v486);
                }
                v454 = v231;
                v194 = v465;
                v391 = v448;
                v392 = v450;
              }
              else
              {
                v479 = v9;
                v397 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v398 = NFLogGetLogger(v397);
                if (v398)
                {
                  v399 = (void (*)(uint64_t, const char *, ...))v398;
                  v400 = object_getClass(a1);
                  v459 = class_isMetaClass(v400);
                  v401 = object_getClassName(a1);
                  v440 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
                  v402 = 45;
                  if (v459)
                    v402 = 43;
                  v399(3, "%c[%{public}s %{public}s]:%i Failed to get signed APDU", v402, v401, v440, 606);
                }
                v403 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v404 = NFSharedLogGetLogger(v403);
                v405 = objc_claimAutoreleasedReturnValue(v404);
                if (os_log_type_enabled(v405, OS_LOG_TYPE_ERROR))
                {
                  v406 = object_getClass(a1);
                  if (class_isMetaClass(v406))
                    v407 = 43;
                  else
                    v407 = 45;
                  v408 = object_getClassName(a1);
                  v409 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
                  *(_DWORD *)buf = 67109890;
                  v517 = v407;
                  v518 = 2082;
                  v519 = v408;
                  v520 = 2082;
                  v521 = v409;
                  v522 = 1024;
                  v523 = 606;
                  _os_log_impl((void *)&_mh_execute_header, v405, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get signed APDU", buf, 0x22u);
                }

                v410 = objc_alloc((Class)NSError);
                v411 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                v504 = NSLocalizedDescriptionKey;
                v412 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Security Violation"));
                v505 = v412;
                v413 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v505, &v504, 1));
                v24 = (Class)objc_msgSend(v410, "initWithDomain:code:userInfo:", v411, 8, v413);

                v391 = (void *)v411;
                v457 = 0;
                v454 = 1;
                v194 = v465;
                v392 = v450;
                v9 = v479;
              }
            }
            else
            {
              v374 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v375 = NFLogGetLogger(v374);
              if (v375)
              {
                v376 = (void (*)(uint64_t, const char *, ...))v375;
                v377 = object_getClass(a1);
                v378 = class_isMetaClass(v377);
                v478 = object_getClassName(a1);
                v439 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
                v379 = 45;
                if (v378)
                  v379 = 43;
                v376(3, "%c[%{public}s %{public}s]:%i Failed to create request", v379, v478, v439, 582);
              }
              v380 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v381 = NFSharedLogGetLogger(v380);
              v382 = objc_claimAutoreleasedReturnValue(v381);
              if (os_log_type_enabled(v382, OS_LOG_TYPE_ERROR))
              {
                v383 = object_getClass(a1);
                if (class_isMetaClass(v383))
                  v384 = 43;
                else
                  v384 = 45;
                v385 = object_getClassName(a1);
                v386 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
                *(_DWORD *)buf = 67109890;
                v517 = v384;
                v518 = 2082;
                v519 = v385;
                v520 = 2082;
                v521 = v386;
                v522 = 1024;
                v523 = 582;
                _os_log_impl((void *)&_mh_execute_header, v382, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create request", buf, 0x22u);
              }

              v387 = objc_alloc((Class)NSError);
              v388 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v506 = NSLocalizedDescriptionKey;
              v389 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Encoding Error"));
              v507 = v389;
              v454 = 1;
              v390 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v507, &v506, 1));
              v457 = (objc_class *)v388;
              v24 = (Class)objc_msgSend(v387, "initWithDomain:code:userInfo:", v388, 22, v390);

              v391 = (void *)v389;
              v392 = 0;
              v59 = 0;
              v469 = 0;
              v194 = 0;
            }
          }
          else
          {
            v360 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v361 = NFLogGetLogger(v360);
            if (v361)
            {
              v362 = (void (*)(uint64_t, const char *, ...))v361;
              v363 = object_getClass(a1);
              v364 = class_isMetaClass(v363);
              v476 = object_getClassName(a1);
              v438 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
              v365 = 45;
              if (v364)
                v365 = 43;
              v362(3, "%c[%{public}s %{public}s]:%i Failed to encode request", v365, v476, v438, 576);
            }
            v366 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v367 = NFSharedLogGetLogger(v366);
            v368 = objc_claimAutoreleasedReturnValue(v367);
            if (os_log_type_enabled(v368, OS_LOG_TYPE_ERROR))
            {
              v369 = object_getClass(a1);
              if (class_isMetaClass(v369))
                v370 = 43;
              else
                v370 = 45;
              v371 = object_getClassName(a1);
              v372 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
              *(_DWORD *)buf = 67109890;
              v517 = v370;
              v518 = 2082;
              v519 = v371;
              v520 = 2082;
              v521 = v372;
              v522 = 1024;
              v523 = 576;
              _os_log_impl((void *)&_mh_execute_header, v368, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to encode request", buf, 0x22u);
            }

            v477 = objc_alloc((Class)NSError);
            v451 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v470 = -[objc_class code](v40, "code");
            v508[0] = NSLocalizedDescriptionKey;
            if ((uint64_t)-[objc_class code](v40, "code") > 70)
              v373 = 71;
            else
              v373 = (uint64_t)-[objc_class code](v40, "code");
            v457 = (objc_class *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v373]));
            v509[0] = v457;
            v509[1] = v40;
            v508[1] = NSUnderlyingErrorKey;
            v508[2] = CFSTR("Line");
            v509[2] = &off_100302D98;
            v508[3] = CFSTR("Method");
            v449 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("authorizeEcommerceTransaction:uid:request:response:"));
            v509[3] = v449;
            v508[4] = NSDebugDescriptionErrorKey;
            v395 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("authorizeEcommerceTransaction:uid:request:response:"), 577);
            v509[4] = v395;
            v396 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v509, v508, 5));
            v392 = (void *)v451;
            v24 = (Class)objc_msgSend(v477, "initWithDomain:code:userInfo:", v451, v470, v396);

            v391 = v449;
            v59 = 0;
            v469 = 0;
            v194 = 0;
            v454 = 1;
          }

          if (!v454)
            goto LABEL_284;
LABEL_297:

          v196 = v469;
LABEL_298:

          goto LABEL_51;
        }
        LOBYTE(v486) = 0;
        v251 = kdebug_trace(724566148, 0, 0, 0, 0);
        v252 = NFSharedSignpostLog(v251);
        v253 = objc_claimAutoreleasedReturnValue(v252);
        if (os_signpost_enabled(v253))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v253, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseAuthorize in", buf, 2u);
        }

        v254 = (void *)objc_claimAutoreleasedReturnValue(-[NFECommercePaymentResponse serialNumberAsData](a1, "serialNumberAsData"));
        v483 = 0;
        v484 = 0;
        v481 = 0;
        v482 = 0;
        v255 = sub_100208AA4((uint64_t)NFSSEWrapper, v473, v9, v254, a3, v18, v41, (char *)&v486, &v484, &v483, &v482, &v492, &v481);
        v475 = (void *)objc_claimAutoreleasedReturnValue(v255);
        v256 = v484;
        v59 = v483;
        v469 = v482;
        v466 = v481;

        v257 = kdebug_trace(724566148, 1, 0, 0, 0);
        v258 = NFSharedSignpostLog(v257);
        v259 = objc_claimAutoreleasedReturnValue(v258);
        if (os_signpost_enabled(v259))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v259, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseAuthorize out", buf, 2u);
        }

        if (v475)
        {
          if (objc_msgSend(v475, "length") == (id)8)
          {
            v260 = NFSharedSignpostLog(8);
            v261 = objc_claimAutoreleasedReturnValue(v260);
            if (os_signpost_enabled(v261))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v261, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SEND_ECOMMERCE_APDU", "crs_authorizeForECommerce in", buf, 2u);
            }

            v262 = sub_1000B8CDC(a1, v486, v475, v256, v480, a5);
            v263 = NFSharedSignpostLog(v262);
            v264 = objc_claimAutoreleasedReturnValue(v263);
            if (os_signpost_enabled(v264))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v264, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SEND_ECOMMERCE_APDU", "crs_authorizeForECommerce out", buf, 2u);
            }

            if (!(_DWORD)v262)
            {

              v40 = 0;
              v194 = v466;
LABEL_284:
              if (*a5)
              {
                v467 = v194;
                v415 = objc_opt_new(NSMutableDictionary);
                v416 = (void *)objc_claimAutoreleasedReturnValue(-[NFECommercePaymentResponse rsaCertificate](a1, "rsaCertificate"));

                if (v416)
                {
                  v417 = (void *)objc_claimAutoreleasedReturnValue(-[NFECommercePaymentResponse rsaCertificate](a1, "rsaCertificate"));
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v415, "setObject:forKeyedSubscript:", v417, CFSTR("RSA"));

                }
                v418 = (void *)objc_claimAutoreleasedReturnValue(-[NFECommercePaymentResponse eccCertificate](a1, "eccCertificate"));

                if (v418)
                {
                  v419 = (void *)objc_claimAutoreleasedReturnValue(-[NFECommercePaymentResponse eccCertificate](a1, "eccCertificate"));
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v415, "setObject:forKeyedSubscript:", v419, CFSTR("ECDSA"));

                }
                v420 = (void *)objc_claimAutoreleasedReturnValue(-[NFECommercePaymentResponse eckaCertificate](a1, "eckaCertificate"));

                if (v420)
                {
                  v421 = (void *)objc_claimAutoreleasedReturnValue(-[NFECommercePaymentResponse eckaCertificate](a1, "eckaCertificate"));
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v415, "setObject:forKeyedSubscript:", v421, CFSTR("ECKA"));

                }
                v422 = (void *)objc_claimAutoreleasedReturnValue(-[NFECommercePaymentResponse eccCertificate](a1, "eccCertificate"));

                if (v422)
                {
                  v423 = (void *)objc_claimAutoreleasedReturnValue(-[NFECommercePaymentResponse eccCertificate](a1, "eccCertificate"));
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v415, "setObject:forKeyedSubscript:", v423, CFSTR("ECC"));

                }
                objc_msgSend((id)*a5, "setCerts:", v415);
                objc_msgSend((id)*a5, "setConfirmationBlobHash:withSignature:version:", v59, v469, v492);
                objc_msgSend((id)*a5, "setSEPCerts:", v467);

                v194 = v467;
              }
              v424 = NFSharedSignpostLog(v393);
              v425 = objc_claimAutoreleasedReturnValue(v424);
              if (os_signpost_enabled(v425))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v425, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SEND_ECOMMERCE_APDU", "done", buf, 2u);
              }

              v24 = 0;
              goto LABEL_297;
            }
            v462 = v262;
            v265 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v266 = NFLogGetLogger(v265);
            if (v266)
            {
              v267 = (void (*)(uint64_t, const char *, ...))v266;
              v268 = object_getClass(a1);
              v269 = class_isMetaClass(v268);
              v270 = v256;
              v271 = object_getClassName(a1);
              v272 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
              v273 = 45;
              if (v269)
                v273 = 43;
              v427 = v271;
              v256 = v270;
              v267(3, "%c[%{public}s %{public}s]:%i Failed to authorize for type=%d", v273, v427, v272, 666, v486);
            }
            v274 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v275 = NFSharedLogGetLogger(v274);
            v276 = objc_claimAutoreleasedReturnValue(v275);
            if (os_log_type_enabled(v276, OS_LOG_TYPE_ERROR))
            {
              v277 = object_getClass(a1);
              v278 = v256;
              if (class_isMetaClass(v277))
                v279 = 43;
              else
                v279 = 45;
              v280 = object_getClassName(a1);
              v281 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
              *(_DWORD *)buf = 67110146;
              v517 = v279;
              v256 = v278;
              v518 = 2082;
              v519 = v280;
              v520 = 2082;
              v521 = v281;
              v522 = 1024;
              v523 = 666;
              v524 = 1024;
              LODWORD(v525) = v486;
              _os_log_impl((void *)&_mh_execute_header, v276, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to authorize for type=%d", buf, 0x28u);
            }

            v282 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v283 = NFLogGetLogger(v282);
            if (v283)
            {
              v284 = (void (*)(uint64_t, const char *, ...))v283;
              v285 = object_getClass(a1);
              v286 = class_isMetaClass(v285);
              v287 = v256;
              v288 = object_getClassName(a1);
              v289 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
              if (v462 >= 0x47)
                v290 = 71;
              else
                v290 = v462;
              v445 = off_1002EAC00[v290];
              v428 = v288;
              v291 = 43;
              if (!v286)
                v291 = 45;
              v256 = v287;
              v284(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v291, v428, v289, 667, CFSTR("Returned"), v462, v445);
            }
            v292 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v293 = NFSharedLogGetLogger(v292);
            v294 = objc_claimAutoreleasedReturnValue(v293);
            v458 = v256;
            if (os_log_type_enabled(v294, OS_LOG_TYPE_ERROR))
            {
              v295 = object_getClass(a1);
              if (class_isMetaClass(v295))
                v296 = 43;
              else
                v296 = 45;
              v297 = object_getClassName(a1);
              v298 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
              v299 = v462;
              if (v462 >= 0x47)
                v300 = 71;
              else
                v300 = v462;
              v301 = off_1002EAC00[v300];
              *(_DWORD *)buf = 67110658;
              v517 = v296;
              v518 = 2082;
              v519 = v297;
              v520 = 2082;
              v521 = v298;
              v522 = 1024;
              v523 = 667;
              v524 = 2112;
              v525 = CFSTR("Returned");
              v526 = 1024;
              v527 = v462;
              v528 = 2080;
              v529 = v301;
              _os_log_impl((void *)&_mh_execute_header, v294, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", buf, 0x3Cu);
            }
            else
            {
              v299 = v462;
              if (v462 >= 0x47)
                v300 = 71;
              else
                v300 = v462;
            }

            v394 = objc_alloc((Class)NSError);
            v337 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v496 = NSLocalizedDescriptionKey;
            v338 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v300]));
            v497 = v338;
            v339 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v497, &v496, 1));
            v24 = (Class)objc_msgSend(v394, "initWithDomain:code:userInfo:", v337, v299, v339);
            v256 = v458;
            goto LABEL_268;
          }
          v343 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v344 = NFLogGetLogger(v343);
          if (v344)
          {
            v345 = (void (*)(uint64_t, const char *, ...))v344;
            v346 = object_getClass(a1);
            v347 = class_isMetaClass(v346);
            v463 = object_getClassName(a1);
            v348 = v256;
            v349 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
            v443 = objc_msgSend(v475, "length");
            v437 = v349;
            v256 = v348;
            v350 = 45;
            if (v347)
              v350 = 43;
            v345(3, "%c[%{public}s %{public}s]:%i Invalid cryptogram length: %lu", v350, v463, v437, 654, v443);
          }
          v351 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v352 = NFSharedLogGetLogger(v351);
          v353 = objc_claimAutoreleasedReturnValue(v352);
          if (os_log_type_enabled(v353, OS_LOG_TYPE_ERROR))
          {
            v354 = object_getClass(a1);
            if (class_isMetaClass(v354))
              v355 = 43;
            else
              v355 = 45;
            v356 = object_getClassName(a1);
            v357 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
            v358 = (const __CFString *)objc_msgSend(v475, "length");
            *(_DWORD *)buf = 67110146;
            v517 = v355;
            v518 = 2082;
            v519 = v356;
            v520 = 2082;
            v521 = v357;
            v522 = 1024;
            v523 = 654;
            v524 = 2048;
            v525 = v358;
            _os_log_impl((void *)&_mh_execute_header, v353, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid cryptogram length: %lu", buf, 0x2Cu);
          }

          v359 = objc_alloc((Class)NSError);
          v337 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v498 = NSLocalizedDescriptionKey;
          v338 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
          v499 = v338;
          v339 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v499, &v498, 1));
          v340 = v359;
          v341 = v337;
          v342 = 13;
        }
        else
        {
          v321 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v322 = NFLogGetLogger(v321);
          if (v322)
          {
            v323 = (void (*)(uint64_t, const char *, ...))v322;
            v324 = object_getClass(a1);
            v325 = class_isMetaClass(v324);
            v326 = v256;
            v327 = object_getClassName(a1);
            v436 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
            v328 = 45;
            if (v325)
              v328 = 43;
            v429 = v327;
            v256 = v326;
            v323(3, "%c[%{public}s %{public}s]:%i Failed to generate cryptogram", v328, v429, v436, 649);
          }
          v329 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v330 = NFSharedLogGetLogger(v329);
          v331 = objc_claimAutoreleasedReturnValue(v330);
          if (os_log_type_enabled(v331, OS_LOG_TYPE_ERROR))
          {
            v332 = object_getClass(a1);
            if (class_isMetaClass(v332))
              v333 = 43;
            else
              v333 = 45;
            v334 = object_getClassName(a1);
            v335 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
            *(_DWORD *)buf = 67109890;
            v517 = v333;
            v518 = 2082;
            v519 = v334;
            v520 = 2082;
            v521 = v335;
            v522 = 1024;
            v523 = 649;
            _os_log_impl((void *)&_mh_execute_header, v331, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to generate cryptogram", buf, 0x22u);
          }

          v336 = objc_alloc((Class)NSError);
          v337 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v500 = NSLocalizedDescriptionKey;
          v338 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Security Violation"));
          v501 = v338;
          v339 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v501, &v500, 1));
          v340 = v336;
          v341 = v337;
          v342 = 8;
        }
        v24 = (Class)objc_msgSend(v340, "initWithDomain:code:userInfo:", v341, v342, v339);
LABEL_268:

        v40 = 0;
        v194 = v466;
        goto LABEL_297;
      default:
        v94 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v95 = NFLogGetLogger(v94);
        if (v95)
        {
          v96 = (void (*)(uint64_t, const char *, ...))v95;
          v97 = object_getClass(a1);
          v98 = class_isMetaClass(v97);
          v426 = object_getClassName(a1);
          v432 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
          v99 = 45;
          if (v98)
            v99 = 43;
          v96(3, "%c[%{public}s %{public}s]:%i Unknown transaction type: %d", v99, v426, v432, 531, v86);
        }
        v100 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v101 = NFSharedLogGetLogger(v100);
        v102 = objc_claimAutoreleasedReturnValue(v101);
        if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
        {
          v103 = object_getClass(a1);
          if (class_isMetaClass(v103))
            v104 = 43;
          else
            v104 = 45;
          v105 = object_getClassName(a1);
          v106 = sel_getName("authorizeEcommerceTransaction:uid:request:response:");
          *(_DWORD *)buf = 67110146;
          v517 = v104;
          v518 = 2082;
          v519 = v105;
          v520 = 2082;
          v521 = v106;
          v522 = 1024;
          v523 = 531;
          v524 = 1024;
          LODWORD(v525) = v86;
          _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown transaction type: %d", buf, 0x28u);
        }

        v79 = objc_alloc((Class)NSError);
        v40 = (Class)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v530 = NSLocalizedDescriptionKey;
        v41 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
        v531 = v41;
        v80 = &v531;
        v81 = &v530;
        goto LABEL_48;
    }
  }
  v24 = v23;
LABEL_53:

LABEL_54:
  return v24;
}

NSObject *sub_1001E121C(void *a1, void *a2, void *a3, uint64_t a4, void *a5, unsigned int a6)
{
  id v11;
  id v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  void *specific;
  uint64_t Logger;
  void (*v18)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  const char *v27;
  const char *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  NSMutableArray *v33;
  void *v34;
  void *v35;
  NSMutableArray *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  unsigned int v44;
  id v45;
  unsigned int v46;
  id v47;
  void *v48;
  uint64_t v49;
  void (*v50)(uint64_t, const char *, ...);
  objc_class *v51;
  id v52;
  void *v53;
  int v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  objc_class *v62;
  int v63;
  const char *v64;
  id v65;
  void *v66;
  uint64_t v67;
  NSErrorUserInfoKey v68;
  uint64_t v69;
  void *v70;
  void *v71;
  NSObject *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void (*v76)(uint64_t, const char *, ...);
  objc_class *v77;
  _BOOL4 v78;
  id v79;
  id v80;
  const char *v81;
  const char *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  NSObject *v86;
  objc_class *v87;
  int v88;
  const char *v89;
  const char *v90;
  unsigned int v91;
  id v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  void (*v97)(uint64_t, const char *, ...);
  objc_class *v98;
  _BOOL4 v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  NSObject *v104;
  objc_class *v105;
  int v106;
  const char *v107;
  const char *v108;
  id v109;
  uint64_t v110;
  int v111;
  void *v112;
  void *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  uint64_t v119;
  void (*v120)(uint64_t, const char *, ...);
  objc_class *v121;
  _BOOL4 v122;
  const char *v123;
  const char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  NSObject *v128;
  objc_class *v129;
  int v130;
  const char *v131;
  const char *v132;
  NSObject *v133;
  id v134;
  uint64_t v135;
  void *v136;
  void *v137;
  NSMutableArray *v138;
  void *v139;
  void *v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  void *v147;
  void *v148;
  __CFData *v149;
  void *v150;
  NSObject *v151;
  void *v152;
  void *v153;
  uint64_t v154;
  void (*v155)(uint64_t, const char *, ...);
  objc_class *v156;
  _BOOL4 v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  NSObject *v161;
  objc_class *v162;
  int v163;
  const char *v164;
  const char *v165;
  void *v166;
  uint64_t v167;
  void (*v168)(uint64_t, const char *, ...);
  objc_class *v169;
  _BOOL4 v170;
  const char *v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  NSObject *v175;
  objc_class *v176;
  int v177;
  const char *v178;
  const char *v179;
  id v180;
  uint64_t v181;
  void *v182;
  void *v183;
  id v184;
  void *v185;
  void *v186;
  void *v187;
  uint64_t v188;
  void (*v189)(uint64_t, const char *, ...);
  objc_class *v190;
  _BOOL4 v191;
  const char *v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  NSObject *v196;
  objc_class *v197;
  int v198;
  const char *v199;
  const char *v200;
  id v201;
  void *v202;
  void *v203;
  void *v204;
  const char *ClassName;
  const char *v207;
  const char *v208;
  const char *Name;
  const char *v210;
  const char *v211;
  const char *v212;
  const char *v213;
  uint64_t v214;
  id v215;
  const char *v216;
  _BOOL4 v217;
  const char *v218;
  void *v219;
  unsigned int v220;
  const char *v221;
  int v222;
  void *v223;
  id v224;
  NSMutableArray *v225;
  id v226;
  id v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  NSMutableArray *v233;
  void *v234;
  id v235;
  void *v236;
  id v237;
  id v238;
  id v239;
  id v240;
  char v241;
  int v242;
  unsigned __int8 v243;
  id v244;
  NSErrorUserInfoKey v245;
  void *v246;
  NSErrorUserInfoKey v247;
  void *v248;
  NSErrorUserInfoKey v249;
  void *v250;
  NSErrorUserInfoKey v251;
  void *v252;
  NSErrorUserInfoKey v253;
  void *v254;
  NSErrorUserInfoKey v255;
  void *v256;
  NSErrorUserInfoKey v257;
  void *v258;
  NSErrorUserInfoKey v259;
  void *v260;
  NSErrorUserInfoKey v261;
  void *v262;
  NSErrorUserInfoKey v263;
  void *v264;
  uint8_t buf[4];
  int v266;
  __int16 v267;
  const char *v268;
  __int16 v269;
  const char *v270;
  __int16 v271;
  int v272;
  __int16 v273;
  NSObject *v274;

  v11 = a2;
  v12 = a3;
  v237 = a5;
  if (!a1)
  {
    v15 = 0;
    goto LABEL_116;
  }
  v244 = 0;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "selectCRSWithError:", &v244));
  v14 = v244;
  if (v14)
  {
    v15 = v14;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v18 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
      v21 = 45;
      if (isMetaClass)
        v21 = 43;
      v18(3, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", v21, ClassName, Name, 700, v15);
    }
    v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v23 = NFSharedLogGetLogger(v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = object_getClass(a1);
      if (class_isMetaClass(v25))
        v26 = 43;
      else
        v26 = 45;
      v27 = object_getClassName(a1);
      v28 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
      *(_DWORD *)buf = 67110146;
      v266 = v26;
      v267 = 2082;
      v268 = v27;
      v269 = 2082;
      v270 = v28;
      v271 = 1024;
      v272 = 700;
      v273 = 2114;
      v274 = v15;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", buf, 0x2Cu);
    }
    goto LABEL_115;
  }
  if (objc_msgSend(v13, "status") != 36864)
  {
    v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v75 = NFLogGetLogger(v74);
    if (v75)
    {
      v76 = (void (*)(uint64_t, const char *, ...))v75;
      v77 = object_getClass(a1);
      v78 = class_isMetaClass(v77);
      v79 = v12;
      v80 = v11;
      v81 = object_getClassName(a1);
      v82 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
      v214 = objc_msgSend(v13, "status");
      v207 = v81;
      v83 = 45;
      if (v78)
        v83 = 43;
      v11 = v80;
      v12 = v79;
      v76(3, "%c[%{public}s %{public}s]:%i Failed to select CRS, status=%x", v83, v207, v82, 704, v214);
    }
    v84 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v85 = NFSharedLogGetLogger(v84);
    v86 = objc_claimAutoreleasedReturnValue(v85);
    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
    {
      v87 = object_getClass(a1);
      if (class_isMetaClass(v87))
        v88 = 43;
      else
        v88 = 45;
      v89 = object_getClassName(a1);
      v90 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
      v91 = objc_msgSend(v13, "status");
      *(_DWORD *)buf = 67110146;
      v266 = v88;
      v267 = 2082;
      v268 = v89;
      v269 = 2082;
      v270 = v90;
      v271 = 1024;
      v272 = 704;
      v273 = 1024;
      LODWORD(v274) = v91;
      _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS, status=%x", buf, 0x28u);
    }

    v92 = objc_alloc((Class)NSError);
    v24 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v263 = NSLocalizedDescriptionKey;
    v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v264 = v93;
    v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v264, &v263, 1));
    v15 = objc_msgSend(v92, "initWithDomain:code:userInfo:", v24, 16, v94);

    goto LABEL_115;
  }
  v234 = v13;
  v29 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithLength:", 32);
  v235 = v11;
  v30 = objc_retainAutorelease(v11);
  v31 = objc_msgSend(v30, "bytes");
  LODWORD(v30) = objc_msgSend(v30, "length");
  v32 = objc_retainAutorelease(v29);
  CC_SHA256(v31, (CC_LONG)v30, (unsigned __int8 *)objc_msgSend(v32, "mutableBytes"));
  v33 = objc_opt_new(NSMutableArray);
  v227 = v12;
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "identifierAsData"));
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 79, v34));
  -[NSMutableArray addObject:](v33, "addObject:", v35);

  v36 = objc_opt_new(NSMutableArray);
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:unsignedChar:](NFTLV, "TLVWithTag:unsignedChar:", 2, a4));
  -[NSMutableArray addObject:](v36, "addObject:", v37);

  v226 = v32;
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 4, v32));
  -[NSMutableArray addObject:](v36, "addObject:", v38);

  v228 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 48, v36));
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v228, "asData"));
  v40 = objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 239, v39));

  v229 = (void *)v40;
  -[NSMutableArray addObject:](v33, "addObject:", v40);
  v225 = v33;
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 228, v33));
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "asData"));
  v242 = 849024;
  v243 = objc_msgSend(v42, "length");
  v241 = 0;
  v43 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithCapacity:", (char *)objc_msgSend(v42, "length") + 6);
  objc_msgSend(v43, "appendBytes:length:", &v242, 5);
  objc_msgSend(v43, "appendData:", v42);
  objc_msgSend(v43, "appendBytes:length:", &v241, 1);
  v240 = 0;
  v44 = sub_1002088C0((uint64_t)NFSSEWrapper, &v240);
  v45 = v240;
  v232 = v41;
  v233 = v36;
  v230 = v43;
  v231 = v42;
  v236 = v45;
  if (!v45 || v44)
  {
    v95 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v96 = NFLogGetLogger(v95);
    if (v96)
    {
      v97 = (void (*)(uint64_t, const char *, ...))v96;
      v98 = object_getClass(a1);
      v99 = class_isMetaClass(v98);
      v100 = object_getClassName(a1);
      v210 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
      v101 = 45;
      if (v99)
        v101 = 43;
      v97(3, "%c[%{public}s %{public}s]:%i Failed to get host challenge", v101, v100, v210, 758);
    }
    v102 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v103 = NFSharedLogGetLogger(v102);
    v104 = objc_claimAutoreleasedReturnValue(v103);
    v12 = v227;
    if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
    {
      v105 = object_getClass(a1);
      if (class_isMetaClass(v105))
        v106 = 43;
      else
        v106 = 45;
      v107 = object_getClassName(a1);
      v108 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
      *(_DWORD *)buf = 67109890;
      v266 = v106;
      v267 = 2082;
      v268 = v107;
      v269 = 2082;
      v270 = v108;
      v271 = 1024;
      v272 = 758;
      _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get host challenge", buf, 0x22u);
    }

    v109 = objc_alloc((Class)NSError);
    v110 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v44)
    {
      v259 = NSLocalizedDescriptionKey;
      if (v44 >= 0x47)
        v111 = 71;
      else
        v111 = v44;
      v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v111]));
      v260 = v112;
      v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v260, &v259, 1));
      v114 = v109;
      v115 = v110;
      v116 = v44;
    }
    else
    {
      v261 = NSLocalizedDescriptionKey;
      v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
      v262 = v112;
      v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v262, &v261, 1));
      v114 = v109;
      v115 = v110;
      v116 = 6;
    }
    v15 = objc_msgSend(v114, "initWithDomain:code:userInfo:", v115, v116, v113);
    v140 = (void *)v110;
    v24 = 0;
    v138 = v225;
    v137 = v226;
    v73 = v228;
    v139 = v229;
    goto LABEL_114;
  }
  v220 = a6;
  v239 = 0;
  v46 = sub_1000B7998(a1, v45, &v239);
  v47 = v239;
  v224 = v47;
  if (v46)
  {
    v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v49 = NFLogGetLogger(v48);
    if (v49)
    {
      v50 = (void (*)(uint64_t, const char *, ...))v49;
      v51 = object_getClass(a1);
      v217 = class_isMetaClass(v51);
      v221 = object_getClassName(a1);
      v216 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
      v52 = objc_alloc((Class)NSError);
      v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v257 = NSLocalizedDescriptionKey;
      if (v46 >= 0x47)
        v54 = 71;
      else
        v54 = v46;
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v54]));
      v258 = v55;
      v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v258, &v257, 1));
      v57 = objc_msgSend(v52, "initWithDomain:code:userInfo:", v53, v46, v56);
      v58 = 45;
      if (v217)
        v58 = 43;
      v50(3, "%c[%{public}s %{public}s]:%i Failed to authenticate to CRS %{public}@", v58, v221, v216, 769, v57);

    }
    v59 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v60 = NFSharedLogGetLogger(v59);
    v61 = objc_claimAutoreleasedReturnValue(v60);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      v62 = object_getClass(a1);
      if (class_isMetaClass(v62))
        v63 = 43;
      else
        v63 = 45;
      v222 = v63;
      v218 = object_getClassName(a1);
      v64 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
      v65 = objc_alloc((Class)NSError);
      v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v67 = v46;
      v68 = NSLocalizedDescriptionKey;
      v255 = NSLocalizedDescriptionKey;
      if (v46 >= 0x47)
        v69 = 71;
      else
        v69 = v46;
      v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v69]));
      v256 = v70;
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v256, &v255, 1));
      v72 = objc_msgSend(v65, "initWithDomain:code:userInfo:", v66, v67, v71);
      *(_DWORD *)buf = 67110146;
      v266 = v222;
      v267 = 2082;
      v268 = v218;
      v269 = 2082;
      v270 = v64;
      v271 = 1024;
      v272 = 769;
      v273 = 2114;
      v274 = v72;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to authenticate to CRS %{public}@", buf, 0x2Cu);

      v73 = v228;
    }
    else
    {
      v68 = NSLocalizedDescriptionKey;
      v67 = v46;
      if (v46 >= 0x47)
        v69 = 71;
      else
        v69 = v46;
      v73 = v228;
    }

    v141 = objc_alloc((Class)NSError);
    v142 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v253 = v68;
    v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v69]));
    v254 = v113;
    v143 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v254, &v253, 1));
    v112 = (void *)v142;
    v144 = v142;
    v136 = (void *)v143;
    v15 = objc_msgSend(v141, "initWithDomain:code:userInfo:", v144, v67, v143);
    v24 = 0;
    v137 = v226;
    v12 = v227;
    v138 = v225;
    v139 = v229;
    goto LABEL_113;
  }
  v117 = v47;
  if ((unint64_t)objc_msgSend(v47, "length") <= 0xF)
  {
    v118 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v119 = NFLogGetLogger(v118);
    if (v119)
    {
      v120 = (void (*)(uint64_t, const char *, ...))v119;
      v121 = object_getClass(a1);
      v122 = class_isMetaClass(v121);
      v123 = object_getClassName(a1);
      v124 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
      v215 = objc_msgSend(v117, "length");
      v125 = 45;
      if (v122)
        v125 = 43;
      v120(3, "%c[%{public}s %{public}s]:%i Initialize auth response too small: %lu", v125, v123, v124, 774, v215);
    }
    v126 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v127 = NFSharedLogGetLogger(v126);
    v128 = objc_claimAutoreleasedReturnValue(v127);
    if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
    {
      v129 = object_getClass(a1);
      if (class_isMetaClass(v129))
        v130 = 43;
      else
        v130 = 45;
      v131 = object_getClassName(a1);
      v132 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
      v133 = objc_msgSend(v117, "length");
      *(_DWORD *)buf = 67110146;
      v266 = v130;
      v267 = 2082;
      v268 = v131;
      v269 = 2082;
      v270 = v132;
      v271 = 1024;
      v272 = 774;
      v273 = 2048;
      v274 = v133;
      _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Initialize auth response too small: %lu", buf, 0x2Cu);
    }

    v134 = objc_alloc((Class)NSError);
    v135 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v251 = NSLocalizedDescriptionKey;
    v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v252 = v113;
    v136 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v252, &v251, 1));
    v112 = (void *)v135;
    v15 = objc_msgSend(v134, "initWithDomain:code:userInfo:", v135, 16, v136);
    v24 = 0;
    v137 = v226;
    v12 = v227;
    v138 = v225;
    v73 = v228;
    v139 = v229;
    goto LABEL_113;
  }
  v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "subdataWithRange:", 0, 8));
  v146 = objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "subdataWithRange:", 8, 8));
  v147 = (void *)v146;
  if (v145 && v146)
  {
    v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData"));
    v149 = sub_1002099B8((uint64_t)NFSSEWrapper, 6, v43, v220, v237, v148, 0, 0, v236, v145, v147, 0, 0, 0, 0);
    v24 = objc_claimAutoreleasedReturnValue(v149);

    if (v24)
    {
      v238 = 0;
      v223 = v24;
      v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "transceiveData:toOS:error:", v24, 0, &v238));
      v151 = v238;
      v152 = (void *)objc_claimAutoreleasedReturnValue(+[NFResponseAPDU responseWithData:](NFResponseAPDU, "responseWithData:", v150));

      v219 = v152;
      if (v151)
      {
        v153 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v154 = NFLogGetLogger(v153);
        if (v154)
        {
          v155 = (void (*)(uint64_t, const char *, ...))v154;
          v156 = object_getClass(a1);
          v157 = class_isMetaClass(v156);
          v208 = object_getClassName(a1);
          v211 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
          v158 = 45;
          if (v157)
            v158 = 43;
          v155(3, "%c[%{public}s %{public}s]:%i signed authorized opaque to CRS failed: %{public}@", v158, v208, v211, 812, v151);
        }
        v113 = v147;
        v159 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v160 = NFSharedLogGetLogger(v159);
        v161 = objc_claimAutoreleasedReturnValue(v160);
        if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
        {
          v162 = object_getClass(a1);
          if (class_isMetaClass(v162))
            v163 = 43;
          else
            v163 = 45;
          v164 = object_getClassName(a1);
          v165 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
          *(_DWORD *)buf = 67110146;
          v266 = v163;
          v267 = 2082;
          v268 = v164;
          v269 = 2082;
          v270 = v165;
          v271 = 1024;
          v272 = 812;
          v273 = 2114;
          v274 = v151;
          _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i signed authorized opaque to CRS failed: %{public}@", buf, 0x2Cu);
        }

        v24 = v151;
        v15 = v24;
      }
      else
      {
        v113 = v147;
        if (objc_msgSend(v152, "status") == 36864)
        {
          v24 = 0;
          v15 = 0;
        }
        else
        {
          v187 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v188 = NFLogGetLogger(v187);
          if (v188)
          {
            v189 = (void (*)(uint64_t, const char *, ...))v188;
            v190 = object_getClass(a1);
            v191 = class_isMetaClass(v190);
            v192 = object_getClassName(a1);
            v213 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
            v193 = 45;
            if (v191)
              v193 = 43;
            v189(3, "%c[%{public}s %{public}s]:%i Failed to execute opaque data, expecting RAPDU", v193, v192, v213, 816);
          }
          v194 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v195 = NFSharedLogGetLogger(v194);
          v196 = objc_claimAutoreleasedReturnValue(v195);
          if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
          {
            v197 = object_getClass(a1);
            if (class_isMetaClass(v197))
              v198 = 43;
            else
              v198 = 45;
            v199 = object_getClassName(a1);
            v200 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
            *(_DWORD *)buf = 67109890;
            v266 = v198;
            v267 = 2082;
            v268 = v199;
            v269 = 2082;
            v270 = v200;
            v271 = 1024;
            v272 = 816;
            _os_log_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to execute opaque data, expecting RAPDU", buf, 0x22u);
          }

          v201 = objc_alloc((Class)NSError);
          v202 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v245 = NSLocalizedDescriptionKey;
          v203 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
          v246 = v203;
          v204 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v246, &v245, 1));
          v15 = objc_msgSend(v201, "initWithDomain:code:userInfo:", v202, 16, v204);

          v24 = 0;
        }
      }
      v137 = v226;
      v12 = v227;
      v138 = v225;
      v182 = v219;
      goto LABEL_112;
    }
    v113 = v147;
    v184 = objc_alloc((Class)NSError);
    v182 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v247 = NSLocalizedDescriptionKey;
    v185 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Security Violation"));
    v248 = v185;
    v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v248, &v247, 1));
    v15 = objc_msgSend(v184, "initWithDomain:code:userInfo:", v182, 8, v186);

    v223 = 0;
  }
  else
  {
    v166 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v167 = NFLogGetLogger(v166);
    if (v167)
    {
      v168 = (void (*)(uint64_t, const char *, ...))v167;
      v169 = object_getClass(a1);
      v170 = class_isMetaClass(v169);
      v171 = object_getClassName(a1);
      v212 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
      v172 = 45;
      if (v170)
        v172 = 43;
      v168(3, "%c[%{public}s %{public}s]:%i Failed to get cardChallenge and cardCryptogram from CRS", v172, v171, v212, 782);
    }
    v113 = v147;
    v173 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v174 = NFSharedLogGetLogger(v173);
    v175 = objc_claimAutoreleasedReturnValue(v174);
    if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
    {
      v176 = object_getClass(a1);
      if (class_isMetaClass(v176))
        v177 = 43;
      else
        v177 = 45;
      v178 = object_getClassName(a1);
      v179 = sel_getName("_authorizeAppletTransaction:forApplet:authType:authorization:uid:");
      *(_DWORD *)buf = 67109890;
      v266 = v177;
      v267 = 2082;
      v268 = v178;
      v269 = 2082;
      v270 = v179;
      v271 = 1024;
      v272 = 782;
      _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get cardChallenge and cardCryptogram from CRS", buf, 0x22u);
    }

    v180 = objc_alloc((Class)NSError);
    v181 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v249 = NSLocalizedDescriptionKey;
    v182 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v250 = v182;
    v183 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v250, &v249, 1));
    v223 = (void *)v181;
    v15 = objc_msgSend(v180, "initWithDomain:code:userInfo:", v181, 16, v183);

    v24 = 0;
  }
  v137 = v226;
  v12 = v227;
  v138 = v225;
LABEL_112:
  v112 = v145;

  v73 = v228;
  v139 = v229;
  v136 = v223;
LABEL_113:

  v140 = v224;
LABEL_114:

  v13 = v234;
  v11 = v235;
LABEL_115:

LABEL_116:
  return v15;
}

uint64_t sub_1001E2744(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  uint64_t v33;
  void (*v34)(uint64_t, const char *, ...);
  objc_class *v35;
  _BOOL4 v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  objc_class *v42;
  id v43;
  int v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void (*v50)(uint64_t, const char *, ...);
  objc_class *v51;
  _BOOL4 v52;
  const char *v53;
  const char *v54;
  int v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  objc_class *v59;
  int v60;
  const char *v61;
  const char *v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  id v72;
  void *v73;
  uint64_t v74;
  void (*v75)(uint64_t, const char *, ...);
  objc_class *v76;
  _BOOL4 v77;
  const char *v78;
  const char *v79;
  int v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  NSObject *v84;
  objc_class *v85;
  id v86;
  int v87;
  const char *v88;
  const char *v89;
  int v90;
  char *v91;
  void *v92;
  uint64_t v93;
  void (*v94)(uint64_t, const char *, ...);
  objc_class *v95;
  _BOOL4 v96;
  const char *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  NSObject *v101;
  objc_class *v102;
  id v103;
  int v104;
  const char *v105;
  const char *v106;
  void *v107;
  uint64_t v108;
  void (*v109)(uint64_t, const char *, ...);
  objc_class *v110;
  _BOOL4 v111;
  const char *v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  NSObject *v117;
  objc_class *v118;
  id v119;
  int v120;
  const char *v121;
  const char *v122;
  const __CFString *v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  void *v127;
  int v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  void *v133;
  uint64_t v134;
  void (*v135)(uint64_t, const char *, ...);
  objc_class *v136;
  _BOOL4 v137;
  const char *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  NSObject *v142;
  objc_class *v143;
  id v144;
  int v145;
  const char *v146;
  const char *v147;
  const char *v148;
  NSObject *v149;
  uint32_t v150;
  void *v151;
  uint64_t v152;
  void (*v153)(uint64_t, const char *, ...);
  objc_class *v154;
  _BOOL4 v155;
  const char *v156;
  const char *v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  NSObject *v161;
  objc_class *v162;
  id v163;
  int v164;
  const char *v165;
  const char *v166;
  const __CFString *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  void (*v172)(uint64_t, const char *, ...);
  objc_class *v173;
  _BOOL4 v174;
  const char *v175;
  const char *v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  NSObject *v180;
  objc_class *v181;
  id v182;
  int v183;
  const char *v184;
  const char *v185;
  void *v186;
  uint64_t v187;
  void (*v188)(uint64_t, const char *, ...);
  objc_class *v189;
  _BOOL4 v190;
  const char *v191;
  const char *v192;
  int v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  objc_class *v197;
  id v198;
  int v199;
  const char *v200;
  const char *v201;
  int v202;
  char *v203;
  const char *Name;
  const char *v206;
  const char *v207;
  const char *v208;
  id v209;
  id v210;
  char *v211;
  char *v212;
  char *v213;
  void *v214;
  id v215;
  unsigned __int16 v216;
  id v217;
  id v218;
  id v219;
  id v220;
  id v221;
  uint8_t buf[4];
  int v223;
  __int16 v224;
  const char *v225;
  __int16 v226;
  const char *v227;
  __int16 v228;
  int v229;
  __int16 v230;
  const __CFString *v231;
  __int16 v232;
  int v233;
  __int16 v234;
  char *v235;

  if (!a1)
    return 0;
  v221 = 0;
  v4 = objc_msgSend(a1, "selectCRSWithError:", &v221);
  v5 = v221;
  v6 = v5;
  if (v5)
  {
    if (objc_msgSend(v5, "code"))
      v7 = (uint64_t)objc_msgSend(v6, "code");
    else
      v7 = 16;
    goto LABEL_152;
  }
  if ((sub_1000B64E8((uint64_t)a1, 0) & 1) == 0)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v10 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_effaceAuthorization:");
      v14 = 45;
      if (isMetaClass)
        v14 = 43;
      v10(4, "%c[%{public}s %{public}s]:%i Failed to mark-all-for-delete", v14, ClassName, Name, 847);
    }
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = object_getClass(a1);
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      v20 = object_getClassName(a1);
      v21 = sel_getName("_effaceAuthorization:");
      *(_DWORD *)buf = 67109890;
      v223 = v19;
      v224 = 2082;
      v225 = v20;
      v226 = 2082;
      v227 = v21;
      v228 = 1024;
      v229 = 847;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to mark-all-for-delete", buf, 0x22u);
    }

  }
  v22 = +[NFSecureElementWrapper isAuthRandomEntangled](NFSecureElementWrapper, "isAuthRandomEntangled");
  v23 = kdebug_trace(724566148, 0, 0, 0, 0);
  v24 = NFSharedSignpostLog(v23);
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_signpost_enabled(v25))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseResetAuthRandom in", buf, 2u);
  }

  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData"));
  v219 = 0;
  v220 = 0;
  v7 = sub_100208114((uint64_t)NFSSEWrapper, v26, a2, &v220, &v219, v22);
  v27 = v220;
  v28 = v219;

  v29 = kdebug_trace(724566148, 1, 0, 0, 0);
  v30 = NFSharedSignpostLog(v29);
  v31 = objc_claimAutoreleasedReturnValue(v30);
  if (os_signpost_enabled(v31))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseResetAuthRandom out", buf, 2u);
  }

  if ((_DWORD)v7)
  {
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = NFLogGetLogger(v32);
    if (v33)
    {
      v34 = (void (*)(uint64_t, const char *, ...))v33;
      v35 = object_getClass(a1);
      v36 = class_isMetaClass(v35);
      v37 = object_getClassName(a1);
      v206 = sel_getName("_effaceAuthorization:");
      v38 = 45;
      if (v36)
        v38 = 43;
      v34(3, "%c[%{public}s %{public}s]:%i Failed to reset auth random", v38, v37, v206, 862);
    }
    v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v40 = NFSharedLogGetLogger(v39);
    v41 = objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v42 = object_getClass(a1);
      v43 = v27;
      if (class_isMetaClass(v42))
        v44 = 43;
      else
        v44 = 45;
      v45 = object_getClassName(a1);
      v46 = sel_getName("_effaceAuthorization:");
      *(_DWORD *)buf = 67109890;
      v223 = v44;
      v27 = v43;
      v224 = 2082;
      v225 = v45;
      v226 = 2082;
      v227 = v46;
      v228 = 1024;
      v229 = 862;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to reset auth random", buf, 0x22u);
    }
    goto LABEL_151;
  }
  if (v22)
    v47 = sub_1000B69F0(a1, v27, v28);
  else
    v47 = sub_1000B6EE8(a1, v27, v28);
  v7 = v47;
  if ((_DWORD)v47)
  {
    v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v49 = NFLogGetLogger(v48);
    if (v49)
    {
      v50 = (void (*)(uint64_t, const char *, ...))v49;
      v51 = object_getClass(a1);
      v52 = class_isMetaClass(v51);
      v53 = object_getClassName(a1);
      v54 = sel_getName("_effaceAuthorization:");
      if (v7 >= 0x47)
        v55 = 71;
      else
        v55 = v7;
      v211 = off_1002EAC00[v55];
      v56 = 43;
      if (!v52)
        v56 = 45;
      v50(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v56, v53, v54, 873, CFSTR("Failed to set auth random"), v7, v211);
    }
    v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v58 = NFSharedLogGetLogger(v57);
    v41 = objc_claimAutoreleasedReturnValue(v58);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v59 = object_getClass(a1);
      if (class_isMetaClass(v59))
        v60 = 43;
      else
        v60 = 45;
      v61 = object_getClassName(a1);
      v62 = sel_getName("_effaceAuthorization:");
      if (v7 >= 0x47)
        v63 = 71;
      else
        v63 = v7;
      v64 = off_1002EAC00[v63];
      *(_DWORD *)buf = 67110658;
      v223 = v60;
      v224 = 2082;
      v225 = v61;
      v226 = 2082;
      v227 = v62;
      v228 = 1024;
      v229 = 873;
      v230 = 2112;
      v231 = CFSTR("Failed to set auth random");
      v232 = 1024;
      v233 = v7;
      v234 = 2080;
      v235 = v64;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", buf, 0x3Cu);
    }
    goto LABEL_151;
  }
  v65 = kdebug_trace(724566148, 0, 0, 0, 0);
  v66 = NFSharedSignpostLog(v65);
  v67 = objc_claimAutoreleasedReturnValue(v66);
  if (os_signpost_enabled(v67))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v67, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetHostChallenge in", buf, 2u);
  }

  v218 = 0;
  v68 = sub_1002088C0((uint64_t)NFSSEWrapper, &v218);
  v41 = v218;
  v69 = kdebug_trace(724566148, 1, 0, 0, 0);
  v70 = NFSharedSignpostLog(v69);
  v71 = objc_claimAutoreleasedReturnValue(v70);
  if (os_signpost_enabled(v71))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v71, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetHostChallenge out", buf, 2u);
  }

  if (!v41 || v68)
  {
    v92 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v93 = NFLogGetLogger(v92);
    if (v93)
    {
      v94 = (void (*)(uint64_t, const char *, ...))v93;
      v95 = object_getClass(a1);
      v96 = class_isMetaClass(v95);
      v97 = object_getClassName(a1);
      v207 = sel_getName("_effaceAuthorization:");
      v98 = 45;
      if (v96)
        v98 = 43;
      v94(3, "%c[%{public}s %{public}s]:%i Failed to get host challenge", v98, v97, v207, 885);
    }
    v99 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v100 = NFSharedLogGetLogger(v99);
    v101 = objc_claimAutoreleasedReturnValue(v100);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
    {
      v102 = object_getClass(a1);
      v103 = v27;
      if (class_isMetaClass(v102))
        v104 = 43;
      else
        v104 = 45;
      v105 = object_getClassName(a1);
      v106 = sel_getName("_effaceAuthorization:");
      *(_DWORD *)buf = 67109890;
      v223 = v104;
      v27 = v103;
      v224 = 2082;
      v225 = v105;
      v226 = 2082;
      v227 = v106;
      v228 = 1024;
      v229 = 885;
      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get host challenge", buf, 0x22u);
    }

    if (v68)
      v7 = v68;
    else
      v7 = 6;
    goto LABEL_151;
  }
  if (-[NSObject length](v41, "length") != (id)8)
  {
    v107 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v108 = NFLogGetLogger(v107);
    if (v108)
    {
      v109 = (void (*)(uint64_t, const char *, ...))v108;
      v110 = object_getClass(a1);
      v111 = class_isMetaClass(v110);
      v112 = object_getClassName(a1);
      v113 = sel_getName("_effaceAuthorization:");
      v209 = -[NSObject length](v41, "length");
      v114 = 45;
      if (v111)
        v114 = 43;
      v109(3, "%c[%{public}s %{public}s]:%i Invalid host challenge length: %lu", v114, v112, v113, 891, v209);
    }
    v115 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v116 = NFSharedLogGetLogger(v115);
    v117 = objc_claimAutoreleasedReturnValue(v116);
    if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
    {
      v118 = object_getClass(a1);
      v119 = v27;
      if (class_isMetaClass(v118))
        v120 = 43;
      else
        v120 = 45;
      v121 = object_getClassName(a1);
      v122 = sel_getName("_effaceAuthorization:");
      v123 = (const __CFString *)-[NSObject length](v41, "length");
      *(_DWORD *)buf = 67110146;
      v223 = v120;
      v27 = v119;
      v224 = 2082;
      v225 = v121;
      v226 = 2082;
      v227 = v122;
      v228 = 1024;
      v229 = 891;
      v230 = 2048;
      v231 = v123;
      _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid host challenge length: %lu", buf, 0x2Cu);
    }

    v7 = 13;
    goto LABEL_151;
  }
  v217 = 0;
  v7 = sub_1000B7998(a1, v41, &v217);
  v72 = v217;
  v214 = v72;
  if ((_DWORD)v7)
  {
    v73 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v74 = NFLogGetLogger(v73);
    if (v74)
    {
      v75 = (void (*)(uint64_t, const char *, ...))v74;
      v76 = object_getClass(a1);
      v77 = class_isMetaClass(v76);
      v78 = object_getClassName(a1);
      v79 = sel_getName("_effaceAuthorization:");
      if (v7 >= 0x47)
        v80 = 71;
      else
        v80 = v7;
      v212 = off_1002EAC00[v80];
      v81 = 43;
      if (!v77)
        v81 = 45;
      v75(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v81, v78, v79, 899, CFSTR("Failed to authenticate"), v7, v212);
    }
    v82 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v83 = NFSharedLogGetLogger(v82);
    v84 = objc_claimAutoreleasedReturnValue(v83);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
    {
      v85 = object_getClass(a1);
      v86 = v27;
      if (class_isMetaClass(v85))
        v87 = 43;
      else
        v87 = 45;
      v88 = object_getClassName(a1);
      v89 = sel_getName("_effaceAuthorization:");
      if (v7 >= 0x47)
        v90 = 71;
      else
        v90 = v7;
      v91 = off_1002EAC00[v90];
      *(_DWORD *)buf = 67110658;
      v223 = v87;
      v27 = v86;
      v224 = 2082;
      v225 = v88;
      v226 = 2082;
      v227 = v89;
      v228 = 1024;
      v229 = 899;
      v230 = 2112;
      v231 = CFSTR("Failed to authenticate");
      v232 = 1024;
      v233 = v7;
      v234 = 2080;
      v235 = v91;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", buf, 0x3Cu);
    }

    goto LABEL_150;
  }
  if (objc_msgSend(v72, "length") != (id)16)
  {
    v151 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v152 = NFLogGetLogger(v151);
    if (v152)
    {
      v153 = (void (*)(uint64_t, const char *, ...))v152;
      v154 = object_getClass(a1);
      v155 = class_isMetaClass(v154);
      v156 = object_getClassName(a1);
      v157 = sel_getName("_effaceAuthorization:");
      v210 = objc_msgSend(v214, "length");
      v158 = 45;
      if (v155)
        v158 = 43;
      v153(3, "%c[%{public}s %{public}s]:%i Invalid authenticate response length: %lu", v158, v156, v157, 903, v210);
    }
    v159 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v160 = NFSharedLogGetLogger(v159);
    v161 = objc_claimAutoreleasedReturnValue(v160);
    if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
    {
      v162 = object_getClass(a1);
      v163 = v27;
      if (class_isMetaClass(v162))
        v164 = 43;
      else
        v164 = 45;
      v165 = object_getClassName(a1);
      v166 = sel_getName("_effaceAuthorization:");
      v167 = (const __CFString *)objc_msgSend(v214, "length");
      *(_DWORD *)buf = 67110146;
      v223 = v164;
      v27 = v163;
      v224 = 2082;
      v225 = v165;
      v226 = 2082;
      v227 = v166;
      v228 = 1024;
      v229 = 903;
      v230 = 2048;
      v231 = v167;
      _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid authenticate response length: %lu", buf, 0x2Cu);
    }

    v7 = 13;
    goto LABEL_150;
  }
  v216 = 0;
  v124 = kdebug_trace(724566148, 0, 0, 0, 0);
  v125 = NFSharedSignpostLog(v124);
  v126 = objc_claimAutoreleasedReturnValue(v125);
  if (os_signpost_enabled(v126))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v126, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetAuthorizationTimeout in", buf, 2u);
  }

  v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData"));
  v215 = v28;
  v128 = sub_100208630((uint64_t)NFSSEWrapper, v127, a2, v41, v214, &v216, &v215);
  v129 = v215;

  v130 = kdebug_trace(724566148, 1, 0, 0, 0);
  v131 = NFSharedSignpostLog(v130);
  v132 = objc_claimAutoreleasedReturnValue(v131);
  if (os_signpost_enabled(v132))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v132, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetAuthorizationTimeout out", buf, 2u);
  }

  if (v128)
  {
    v133 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v134 = NFLogGetLogger(v133);
    if (v134)
    {
      v135 = (void (*)(uint64_t, const char *, ...))v134;
      v136 = object_getClass(a1);
      v137 = class_isMetaClass(v136);
      v138 = object_getClassName(a1);
      v208 = sel_getName("_effaceAuthorization:");
      v139 = 45;
      if (v137)
        v139 = 43;
      v135(4, "%c[%{public}s %{public}s]:%i Failed to get auth timeout", v139, v138, v208, 921);
    }
    v140 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v141 = NFSharedLogGetLogger(v140);
    v142 = objc_claimAutoreleasedReturnValue(v141);
    if (!os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
      goto LABEL_148;
    v143 = object_getClass(a1);
    v144 = v27;
    if (class_isMetaClass(v143))
      v145 = 43;
    else
      v145 = 45;
    v146 = object_getClassName(a1);
    v147 = sel_getName("_effaceAuthorization:");
    *(_DWORD *)buf = 67109890;
    v223 = v145;
    v27 = v144;
    v224 = 2082;
    v225 = v146;
    v226 = 2082;
    v227 = v147;
    v228 = 1024;
    v229 = 921;
    v148 = "%c[%{public}s %{public}s]:%i Failed to get auth timeout";
    v149 = v142;
    v150 = 34;
LABEL_147:
    _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_ERROR, v148, buf, v150);
LABEL_148:

    goto LABEL_149;
  }
  v168 = sub_1000B7418(a1, v216, v41, v129);
  if ((_DWORD)v168)
  {
    v169 = v168;
    v170 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v171 = NFLogGetLogger(v170);
    if (v171)
    {
      v172 = (void (*)(uint64_t, const char *, ...))v171;
      v173 = object_getClass(a1);
      v174 = class_isMetaClass(v173);
      v175 = object_getClassName(a1);
      v176 = sel_getName("_effaceAuthorization:");
      v177 = 45;
      if (v174)
        v177 = 43;
      v172(4, "%c[%{public}s %{public}s]:%i Failed to set auth timeout = %d", v177, v175, v176, 930, v216);
    }
    v178 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v179 = NFSharedLogGetLogger(v178);
    v180 = objc_claimAutoreleasedReturnValue(v179);
    if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
    {
      v181 = object_getClass(a1);
      v182 = v27;
      if (class_isMetaClass(v181))
        v183 = 43;
      else
        v183 = 45;
      v184 = object_getClassName(a1);
      v185 = sel_getName("_effaceAuthorization:");
      *(_DWORD *)buf = 67110146;
      v223 = v183;
      v27 = v182;
      v224 = 2082;
      v225 = v184;
      v226 = 2082;
      v227 = v185;
      v228 = 1024;
      v229 = 930;
      v230 = 1024;
      LODWORD(v231) = v216;
      _os_log_impl((void *)&_mh_execute_header, v180, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set auth timeout = %d", buf, 0x28u);
    }

    v186 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v187 = NFLogGetLogger(v186);
    if (v187)
    {
      v188 = (void (*)(uint64_t, const char *, ...))v187;
      v189 = object_getClass(a1);
      v190 = class_isMetaClass(v189);
      v191 = object_getClassName(a1);
      v192 = sel_getName("_effaceAuthorization:");
      if (v169 >= 0x47)
        v193 = 71;
      else
        v193 = v169;
      v213 = off_1002EAC00[v193];
      v194 = 43;
      if (!v190)
        v194 = 45;
      v188(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v194, v191, v192, 931, CFSTR("Returned"), v169, v213);
    }
    v195 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v196 = NFSharedLogGetLogger(v195);
    v142 = objc_claimAutoreleasedReturnValue(v196);
    if (!os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
      goto LABEL_148;
    v197 = object_getClass(a1);
    v198 = v27;
    if (class_isMetaClass(v197))
      v199 = 43;
    else
      v199 = 45;
    v200 = object_getClassName(a1);
    v201 = sel_getName("_effaceAuthorization:");
    if (v169 >= 0x47)
      v202 = 71;
    else
      v202 = v169;
    v203 = off_1002EAC00[v202];
    *(_DWORD *)buf = 67110658;
    v223 = v199;
    v27 = v198;
    v224 = 2082;
    v225 = v200;
    v226 = 2082;
    v227 = v201;
    v228 = 1024;
    v229 = 931;
    v230 = 2112;
    v231 = CFSTR("Returned");
    v232 = 1024;
    v233 = v169;
    v234 = 2080;
    v235 = v203;
    v148 = "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"";
    v149 = v142;
    v150 = 60;
    goto LABEL_147;
  }
LABEL_149:
  v7 = 0;
  v28 = v129;
LABEL_150:

LABEL_151:
LABEL_152:

  return v7;
}

uint64_t sub_1001E3990(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *v12;
  _BOOL4 v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  void *specific;
  uint64_t Logger;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  objc_class *v31;
  int v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void (*v41)(uint64_t, const char *, ...);
  objc_class *v42;
  _BOOL4 v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  objc_class *v48;
  int v49;
  const char *v50;
  const char *v51;
  void *v52;
  uint64_t v53;
  void (*v54)(uint64_t, const char *, ...);
  objc_class *v55;
  _BOOL4 v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  NSObject *v62;
  objc_class *v63;
  int v64;
  const char *v65;
  const char *v66;
  unsigned int v67;
  void *v68;
  uint64_t v69;
  void (*v70)(uint64_t, const char *, ...);
  objc_class *v71;
  _BOOL4 v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  NSObject *v77;
  objc_class *v78;
  int v79;
  const char *v80;
  const char *v81;
  const char *v83;
  const char *v84;
  const char *Name;
  const char *v86;
  const char *v87;
  uint64_t v88;
  id v89;
  uint8_t buf[4];
  int v91;
  __int16 v92;
  const char *v93;
  __int16 v94;
  const char *v95;
  __int16 v96;
  int v97;
  __int16 v98;
  NSObject *v99;

  v7 = a2;
  v8 = v7;
  if (!a1)
  {
    v33 = 0;
    goto LABEL_65;
  }
  if (!v7)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v24 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("signChallenge:authenticationType:value:");
      v28 = 45;
      if (isMetaClass)
        v28 = 43;
      v24(3, "%c[%{public}s %{public}s]:%i Invalid challenge string", v28, ClassName, Name, 947);
    }
    v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v30 = NFSharedLogGetLogger(v29);
    v18 = objc_claimAutoreleasedReturnValue(v30);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    v31 = object_getClass(a1);
    if (class_isMetaClass(v31))
      v32 = 43;
    else
      v32 = 45;
    *(_DWORD *)buf = 67109890;
    v91 = v32;
    v92 = 2082;
    v93 = object_getClassName(a1);
    v94 = 2082;
    v95 = sel_getName("signChallenge:authenticationType:value:");
    v96 = 1024;
    v97 = 947;
    v21 = "%c[%{public}s %{public}s]:%i Invalid challenge string";
    goto LABEL_22;
  }
  if ((unint64_t)objc_msgSend(v7, "length") < 0xB1)
  {
    v34 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026A9B3, 12);
    v89 = 0;
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "selectByName:error:", v34, &v89));
    v18 = v89;

    if (v35)
    {
      if (objc_msgSend(v35, "status") == 36864)
      {
        v36 = sub_100097AF4(a1, (uint64_t)v8, a3);
        v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
        v38 = v37;
        if (v37)
        {
          v33 = 0;
          *a4 = objc_retainAutorelease(v37);
        }
        else
        {
          v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v69 = NFLogGetLogger(v68);
          if (v69)
          {
            v70 = (void (*)(uint64_t, const char *, ...))v69;
            v71 = object_getClass(a1);
            v72 = class_isMetaClass(v71);
            v73 = object_getClassName(a1);
            v87 = sel_getName("signChallenge:authenticationType:value:");
            v74 = 45;
            if (v72)
              v74 = 43;
            v70(3, "%c[%{public}s %{public}s]:%i Failed to get signature", v74, v73, v87, 973);
          }
          v75 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v76 = NFSharedLogGetLogger(v75);
          v77 = objc_claimAutoreleasedReturnValue(v76);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
          {
            v78 = object_getClass(a1);
            if (class_isMetaClass(v78))
              v79 = 43;
            else
              v79 = 45;
            v80 = object_getClassName(a1);
            v81 = sel_getName("signChallenge:authenticationType:value:");
            *(_DWORD *)buf = 67109890;
            v91 = v79;
            v92 = 2082;
            v93 = v80;
            v94 = 2082;
            v95 = v81;
            v96 = 1024;
            v97 = 973;
            _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get signature", buf, 0x22u);
          }

          v33 = 16;
        }

      }
      else
      {
        v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v53 = NFLogGetLogger(v52);
        if (v53)
        {
          v54 = (void (*)(uint64_t, const char *, ...))v53;
          v55 = object_getClass(a1);
          v56 = class_isMetaClass(v55);
          v57 = object_getClassName(a1);
          v58 = sel_getName("signChallenge:authenticationType:value:");
          v88 = objc_msgSend(v35, "status");
          v59 = 45;
          if (v56)
            v59 = 43;
          v54(3, "%c[%{public}s %{public}s]:%i Failed to select CASD: 0x%04x", v59, v57, v58, 963, v88);
        }
        v60 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v61 = NFSharedLogGetLogger(v60);
        v62 = objc_claimAutoreleasedReturnValue(v61);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          v63 = object_getClass(a1);
          if (class_isMetaClass(v63))
            v64 = 43;
          else
            v64 = 45;
          v65 = object_getClassName(a1);
          v66 = sel_getName("signChallenge:authenticationType:value:");
          v67 = objc_msgSend(v35, "status");
          *(_DWORD *)buf = 67110146;
          v91 = v64;
          v92 = 2082;
          v93 = v65;
          v94 = 2082;
          v95 = v66;
          v96 = 1024;
          v97 = 963;
          v98 = 1024;
          LODWORD(v99) = v67;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CASD: 0x%04x", buf, 0x28u);
        }

        if (objc_msgSend(v35, "status") == 26277)
          v33 = 24;
        else
          v33 = 16;
      }
    }
    else
    {
      v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v40 = NFLogGetLogger(v39);
      if (v40)
      {
        v41 = (void (*)(uint64_t, const char *, ...))v40;
        v42 = object_getClass(a1);
        v43 = class_isMetaClass(v42);
        v83 = object_getClassName(a1);
        v86 = sel_getName("signChallenge:authenticationType:value:");
        v44 = 45;
        if (v43)
          v44 = 43;
        v41(3, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", v44, v83, v86, 959, v18);
      }
      v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v46 = NFSharedLogGetLogger(v45);
      v47 = objc_claimAutoreleasedReturnValue(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v48 = object_getClass(a1);
        if (class_isMetaClass(v48))
          v49 = 43;
        else
          v49 = 45;
        v50 = object_getClassName(a1);
        v51 = sel_getName("signChallenge:authenticationType:value:");
        *(_DWORD *)buf = 67110146;
        v91 = v49;
        v92 = 2082;
        v93 = v50;
        v94 = 2082;
        v95 = v51;
        v96 = 1024;
        v97 = 959;
        v98 = 2114;
        v99 = v18;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", buf, 0x2Cu);
      }

      if (-[NSObject code](v18, "code"))
        v33 = (uint64_t)-[NSObject code](v18, "code");
      else
        v33 = 16;
    }

    goto LABEL_64;
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFLogGetLogger(v9);
  if (v10)
  {
    v11 = (void (*)(uint64_t, const char *, ...))v10;
    v12 = object_getClass(a1);
    v13 = class_isMetaClass(v12);
    v14 = object_getClassName(a1);
    v84 = sel_getName("signChallenge:authenticationType:value:");
    v15 = 45;
    if (v13)
      v15 = 43;
    v11(3, "%c[%{public}s %{public}s]:%i challenge for signing is too large", v15, v14, v84, 951);
  }
  v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v17 = NFSharedLogGetLogger(v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    v19 = object_getClass(a1);
    if (class_isMetaClass(v19))
      v20 = 43;
    else
      v20 = 45;
    *(_DWORD *)buf = 67109890;
    v91 = v20;
    v92 = 2082;
    v93 = object_getClassName(a1);
    v94 = 2082;
    v95 = sel_getName("signChallenge:authenticationType:value:");
    v96 = 1024;
    v97 = 951;
    v21 = "%c[%{public}s %{public}s]:%i challenge for signing is too large";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v21, buf, 0x22u);
  }
LABEL_23:
  v33 = 10;
LABEL_64:

LABEL_65:
  return v33;
}

id sub_1001E40C4(id a1, _QWORD *a2, _QWORD *a3)
{
  id v3;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *v14;
  _BOOL4 v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  void *specific;
  uint64_t Logger;
  void (*v28)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *v39;
  const char *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  const char *v48;
  id v49;
  id v50;
  id v51;
  NSErrorUserInfoKey v52;
  void *v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  id v63;
  NSErrorUserInfoKey v64;
  void *v65;

  v3 = a1;
  if (a1)
  {
    if (a2 && a3)
    {
      v51 = 0;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData"));
      v7 = sub_10020A5DC((uint64_t)NFSSEWrapper, &v51, v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = v51;

      if (v8)
      {
        v10 = v8;
LABEL_31:
        v3 = v10;

        v9 = v3;
        goto LABEL_32;
      }
      if ((unint64_t)objc_msgSend(v9, "length") > 0xF)
      {
        v50 = 0;
        v44 = objc_msgSend(v3, "selectCRSWithError:", &v50);
        v45 = v50;
        if (!v45)
        {
          v46 = sub_1000BA820(v3, v9, a3);
          v45 = (id)objc_claimAutoreleasedReturnValue(v46);
          if (!v45)
          {
            v3 = 0;
            *a2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "subdataWithRange:", 0, (char *)objc_msgSend(v9, "length") - 16));
            goto LABEL_32;
          }
        }
        v10 = v45;
        goto LABEL_31;
      }
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v28 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v3);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v3);
        Name = sel_getName("getPlatformData:withSignature:");
        v49 = objc_msgSend(v9, "length");
        v33 = 45;
        if (isMetaClass)
          v33 = 43;
        v28(3, "%c[%{public}s %{public}s]:%i Invalid platform data length %lu", v33, ClassName, Name, 998, v49);
      }
      v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v35 = NFSharedLogGetLogger(v34);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        v37 = object_getClass(v3);
        if (class_isMetaClass(v37))
          v38 = 43;
        else
          v38 = 45;
        v39 = object_getClassName(v3);
        v40 = sel_getName("getPlatformData:withSignature:");
        v41 = objc_msgSend(v9, "length");
        *(_DWORD *)buf = 67110146;
        v55 = v38;
        v56 = 2082;
        v57 = v39;
        v58 = 2082;
        v59 = v40;
        v60 = 1024;
        v61 = 998;
        v62 = 2048;
        v63 = v41;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid platform data length %lu", buf, 0x2Cu);
      }

      v42 = objc_alloc((Class)NSError);
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v52 = NSLocalizedDescriptionKey;
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
      v53 = v25;
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1));
      v3 = objc_msgSend(v42, "initWithDomain:code:userInfo:", v24, 13, v43);

    }
    else
    {
      v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v12 = NFLogGetLogger(v11);
      if (v12)
      {
        v13 = (void (*)(uint64_t, const char *, ...))v12;
        v14 = object_getClass(v3);
        v15 = class_isMetaClass(v14);
        v16 = object_getClassName(v3);
        v48 = sel_getName("getPlatformData:withSignature:");
        v17 = 45;
        if (v15)
          v17 = 43;
        v13(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v17, v16, v48, 987);
      }
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFSharedLogGetLogger(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = object_getClass(v3);
        if (class_isMetaClass(v21))
          v22 = 43;
        else
          v22 = 45;
        *(_DWORD *)buf = 67109890;
        v55 = v22;
        v56 = 2082;
        v57 = object_getClassName(v3);
        v58 = 2082;
        v59 = sel_getName("getPlatformData:withSignature:");
        v60 = 1024;
        v61 = 987;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
      }

      v23 = objc_alloc((Class)NSError);
      v9 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v64 = NSLocalizedDescriptionKey;
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v65 = v24;
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1));
      v3 = objc_msgSend(v23, "initWithDomain:code:userInfo:", v9, 10, v25);
    }

LABEL_32:
  }
  return v3;
}

uint64_t sub_1001E45B4(void *a1, uint64_t a2)
{
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  unsigned int v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  _BOOL4 v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *v39;
  const char *v40;
  void *v41;
  uint64_t v42;
  void (*v43)(uint64_t, const char *, ...);
  objc_class *v44;
  _BOOL4 v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  NSObject *v51;
  objc_class *v52;
  int v53;
  const char *v54;
  const char *v55;
  const __CFString *v56;
  id v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void (*v61)(uint64_t, const char *, ...);
  objc_class *v62;
  _BOOL4 v63;
  void *v64;
  const char *v65;
  const char *v66;
  int v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  NSObject *v71;
  objc_class *v72;
  int v73;
  const char *v74;
  const char *v75;
  int v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  void *v85;
  uint64_t v86;
  void (*v87)(uint64_t, const char *, ...);
  objc_class *v88;
  void *v89;
  _BOOL4 v90;
  const char *v91;
  BOOL v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  NSObject *v96;
  objc_class *v97;
  int v98;
  const char *v99;
  const char *v100;
  void *v102;
  uint64_t v103;
  void (*v104)(uint64_t, const char *, ...);
  objc_class *v105;
  _BOOL4 v106;
  const char *v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  NSObject *v113;
  objc_class *v114;
  int v115;
  const char *v116;
  const char *v117;
  const __CFString *v118;
  const char *ClassName;
  const char *v120;
  const char *v121;
  const char *Name;
  const char *v123;
  const char *v124;
  const char *v125;
  id v126;
  id v127;
  char *v128;
  NSObject *v129;
  id v130;
  unsigned __int16 v131;
  id v132;
  id v133;
  id v134;
  uint8_t buf[4];
  int v136;
  __int16 v137;
  const char *v138;
  __int16 v139;
  const char *v140;
  __int16 v141;
  int v142;
  __int16 v143;
  const __CFString *v144;
  __int16 v145;
  int v146;
  __int16 v147;
  char *v148;

  if (!a1)
    return 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("_validateSEAndSEPPairing:");
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i Validating pairing for uid %d", v9, ClassName, Name, 1022, a2);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(a1);
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    *(_DWORD *)buf = 67110146;
    v136 = v14;
    v137 = 2082;
    v138 = object_getClassName(a1);
    v139 = 2082;
    v140 = sel_getName("_validateSEAndSEPPairing:");
    v141 = 1024;
    v142 = 1022;
    v143 = 1024;
    LODWORD(v144) = a2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Validating pairing for uid %d", buf, 0x28u);
  }

  v15 = kdebug_trace(724566148, 0, 0, 0, 0);
  v16 = NFSharedSignpostLog(v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_signpost_enabled(v17))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetHostChallenge in", buf, 2u);
  }

  v134 = 0;
  v18 = sub_1002088C0((uint64_t)NFSSEWrapper, &v134);
  v19 = v134;
  v20 = kdebug_trace(724566148, 1, 0, 0, 0);
  v21 = NFSharedSignpostLog(v20);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_signpost_enabled(v22))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetHostChallenge out", buf, 2u);
  }

  if (!v19 || v18)
  {
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFLogGetLogger(v27);
    if (v28)
    {
      v29 = (void (*)(uint64_t, const char *, ...))v28;
      v30 = object_getClass(a1);
      v31 = class_isMetaClass(v30);
      v32 = object_getClassName(a1);
      v123 = sel_getName("_validateSEAndSEPPairing:");
      v33 = 45;
      if (v31)
        v33 = 43;
      v29(3, "%c[%{public}s %{public}s]:%i Failed to get host challenge", v33, v32, v123, 1032);
    }
    v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v35 = NFSharedLogGetLogger(v34);
    v36 = objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = object_getClass(a1);
      if (class_isMetaClass(v37))
        v38 = 43;
      else
        v38 = 45;
      v39 = object_getClassName(a1);
      v40 = sel_getName("_validateSEAndSEPPairing:");
      *(_DWORD *)buf = 67109890;
      v136 = v38;
      v137 = 2082;
      v138 = v39;
      v139 = 2082;
      v140 = v40;
      v141 = 1024;
      v142 = 1032;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get host challenge", buf, 0x22u);
    }

    if (v18)
      v26 = v18;
    else
      v26 = 6;
    goto LABEL_79;
  }
  if (objc_msgSend(v19, "length") != (id)8)
  {
    v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v42 = NFLogGetLogger(v41);
    if (v42)
    {
      v43 = (void (*)(uint64_t, const char *, ...))v42;
      v44 = object_getClass(a1);
      v45 = class_isMetaClass(v44);
      v46 = object_getClassName(a1);
      v47 = sel_getName("_validateSEAndSEPPairing:");
      v126 = objc_msgSend(v19, "length");
      v48 = 45;
      if (v45)
        v48 = 43;
      v43(3, "%c[%{public}s %{public}s]:%i Invalid host challenge length: %lu", v48, v46, v47, 1036, v126);
    }
    v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v50 = NFSharedLogGetLogger(v49);
    v51 = objc_claimAutoreleasedReturnValue(v50);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v52 = object_getClass(a1);
      if (class_isMetaClass(v52))
        v53 = 43;
      else
        v53 = 45;
      v54 = object_getClassName(a1);
      v55 = sel_getName("_validateSEAndSEPPairing:");
      v56 = (const __CFString *)objc_msgSend(v19, "length");
      *(_DWORD *)buf = 67110146;
      v136 = v53;
      v137 = 2082;
      v138 = v54;
      v139 = 2082;
      v140 = v55;
      v141 = 1024;
      v142 = 1036;
      v143 = 2048;
      v144 = v56;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid host challenge length: %lu", buf, 0x2Cu);
    }

    v26 = 13;
    goto LABEL_79;
  }
  v133 = 0;
  v23 = objc_msgSend(a1, "selectCRSWithError:", &v133);
  v24 = v133;
  v25 = v24;
  if (v24)
  {
    if (objc_msgSend(v24, "code"))
      v26 = (uint64_t)objc_msgSend(v25, "code");
    else
      v26 = 16;
    goto LABEL_78;
  }
  v132 = 0;
  v26 = sub_1000B7998(a1, v19, &v132);
  v57 = v132;
  v58 = v57;
  if ((_DWORD)v26)
  {
    v59 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v60 = NFLogGetLogger(v59);
    if (v60)
    {
      v61 = (void (*)(uint64_t, const char *, ...))v60;
      v62 = object_getClass(a1);
      v63 = class_isMetaClass(v62);
      v64 = v58;
      v65 = object_getClassName(a1);
      v66 = sel_getName("_validateSEAndSEPPairing:");
      if (v26 >= 0x47)
        v67 = 71;
      else
        v67 = v26;
      v128 = off_1002EAC00[v67];
      v120 = v65;
      v68 = 43;
      if (!v63)
        v68 = 45;
      v58 = v64;
      v61(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v68, v120, v66, 1050, CFSTR("Failed to authenticate"), v26, v128);
    }
    v69 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v70 = NFSharedLogGetLogger(v69);
    v71 = objc_claimAutoreleasedReturnValue(v70);
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      v72 = object_getClass(a1);
      if (class_isMetaClass(v72))
        v73 = 43;
      else
        v73 = 45;
      v74 = object_getClassName(a1);
      v75 = sel_getName("_validateSEAndSEPPairing:");
      if (v26 >= 0x47)
        v76 = 71;
      else
        v76 = v26;
      v77 = off_1002EAC00[v76];
      *(_DWORD *)buf = 67110658;
      v136 = v73;
      v137 = 2082;
      v138 = v74;
      v139 = 2082;
      v140 = v75;
      v141 = 1024;
      v142 = 1050;
      v143 = 2112;
      v144 = CFSTR("Failed to authenticate");
      v145 = 1024;
      v146 = v26;
      v147 = 2080;
      v148 = v77;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", buf, 0x3Cu);
    }
  }
  else
  {
    if (objc_msgSend(v57, "length") != (id)16)
    {
      v102 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v103 = NFLogGetLogger(v102);
      if (v103)
      {
        v104 = (void (*)(uint64_t, const char *, ...))v103;
        v105 = object_getClass(a1);
        v106 = class_isMetaClass(v105);
        v107 = object_getClassName(a1);
        v108 = v58;
        v109 = sel_getName("_validateSEAndSEPPairing:");
        v127 = objc_msgSend(v108, "length");
        v125 = v109;
        v58 = v108;
        v110 = 45;
        if (v106)
          v110 = 43;
        v104(3, "%c[%{public}s %{public}s]:%i Invalid authenticate response length: %lu", v110, v107, v125, 1054, v127);
      }
      v111 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v112 = NFSharedLogGetLogger(v111);
      v113 = objc_claimAutoreleasedReturnValue(v112);
      if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
      {
        v114 = object_getClass(a1);
        if (class_isMetaClass(v114))
          v115 = 43;
        else
          v115 = 45;
        v116 = object_getClassName(a1);
        v117 = sel_getName("_validateSEAndSEPPairing:");
        v118 = (const __CFString *)objc_msgSend(v58, "length");
        *(_DWORD *)buf = 67110146;
        v136 = v115;
        v137 = 2082;
        v138 = v116;
        v139 = 2082;
        v140 = v117;
        v141 = 1024;
        v142 = 1054;
        v143 = 2048;
        v144 = v118;
        _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid authenticate response length: %lu", buf, 0x2Cu);
      }

      v26 = 13;
      goto LABEL_77;
    }
    v131 = 0;
    v78 = kdebug_trace(724566148, 0, 0, 0, 0);
    v79 = NFSharedSignpostLog(v78);
    v80 = objc_claimAutoreleasedReturnValue(v79);
    if (os_signpost_enabled(v80))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v80, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetAuthorizationTimeout in", buf, 2u);
    }

    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData"));
    v130 = 0;
    v26 = sub_100208630((uint64_t)NFSSEWrapper, v81, a2, v19, v58, &v131, &v130);
    v71 = v130;

    v82 = kdebug_trace(724566148, 1, 0, 0, 0);
    v83 = NFSharedSignpostLog(v82);
    v84 = objc_claimAutoreleasedReturnValue(v83);
    if (os_signpost_enabled(v84))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v84, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetAuthorizationTimeout out", buf, 2u);
    }

    if ((_DWORD)v26)
    {
      v85 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v86 = NFLogGetLogger(v85);
      if (v86)
      {
        v87 = (void (*)(uint64_t, const char *, ...))v86;
        v88 = object_getClass(a1);
        v89 = v58;
        v90 = class_isMetaClass(v88);
        v129 = v71;
        v91 = object_getClassName(a1);
        v124 = sel_getName("_validateSEAndSEPPairing:");
        v92 = !v90;
        v58 = v89;
        v93 = 45;
        if (!v92)
          v93 = 43;
        v121 = v91;
        v71 = v129;
        v87(3, "%c[%{public}s %{public}s]:%i Failed to validate challenge response", v93, v121, v124, 1073);
      }
      v94 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v95 = NFSharedLogGetLogger(v94);
      v96 = objc_claimAutoreleasedReturnValue(v95);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        v97 = object_getClass(a1);
        if (class_isMetaClass(v97))
          v98 = 43;
        else
          v98 = 45;
        v99 = object_getClassName(a1);
        v100 = sel_getName("_validateSEAndSEPPairing:");
        *(_DWORD *)buf = 67109890;
        v136 = v98;
        v137 = 2082;
        v138 = v99;
        v139 = 2082;
        v140 = v100;
        v141 = 1024;
        v142 = 1073;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to validate challenge response", buf, 0x22u);
      }

    }
  }

LABEL_77:
LABEL_78:

LABEL_79:
  return v26;
}

id sub_1001E5098(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  if (!a1)
    return 0;
  v4 = sub_1001E5110(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v5)
  {
    v7 = objc_msgSend(v5, "code");
  }
  else
  {
    v7 = (id)sub_1001E45B4(a1, a2);
    if (!(_DWORD)v7)
      objc_msgSend(a1, "storePairedState");
  }

  return v7;
}

id sub_1001E5110(id a1)
{
  id v1;
  void *v2;
  __objc2_class *v3;
  _BOOL4 v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *v13;
  _BOOL4 v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  void *specific;
  uint64_t Logger;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  const char *v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  void (*v40)(uint64_t, const char *, ...);
  objc_class *v41;
  _BOOL4 v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  objc_class *v48;
  int v49;
  const char *v50;
  const char *v51;
  const char *v52;
  NSObject *v53;
  os_log_type_t v54;
  void *v55;
  uint64_t v56;
  void (*v57)(uint64_t, const char *, ...);
  objc_class *v58;
  _BOOL4 v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  NSObject *v63;
  objc_class *v64;
  int v65;
  const char *v66;
  const char *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void (*v71)(uint64_t, const char *, ...);
  objc_class *v72;
  _BOOL4 v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  objc_class *v77;
  int v78;
  const char *v79;
  const char *v80;
  void *v81;
  uint64_t v82;
  void (*v83)(uint64_t, const char *, ...);
  objc_class *v84;
  _BOOL4 v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  NSObject *v90;
  objc_class *v91;
  int v92;
  const char *v93;
  const char *v94;
  id v95;
  void *v96;
  void **v97;
  NSErrorUserInfoKey *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void (*v102)(uint64_t, const char *, ...);
  objc_class *v103;
  _BOOL4 v104;
  const char *v105;
  const char *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  NSObject *v110;
  objc_class *v111;
  int v112;
  const char *v113;
  const char *v114;
  unsigned int v115;
  id v116;
  void *v117;
  void *v118;
  uint64_t v119;
  void (*v120)(uint64_t, const char *, ...);
  objc_class *v121;
  _BOOL4 v122;
  const char *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  objc_class *v127;
  int v128;
  const char *v129;
  const char *v130;
  void *v131;
  id v132;
  void *v133;
  uint64_t v134;
  void (*v135)(uint64_t, const char *, ...);
  objc_class *v136;
  _BOOL4 v137;
  const char *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  NSObject *v142;
  objc_class *v143;
  int v144;
  const char *v145;
  const char *v146;
  id v147;
  void **v148;
  NSErrorUserInfoKey *v149;
  unsigned int v150;
  void *v151;
  uint64_t v152;
  void (*v153)(uint64_t, const char *, ...);
  objc_class *v154;
  _BOOL4 v155;
  const char *v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  NSObject *v160;
  objc_class *v161;
  int v162;
  const char *v163;
  const char *v164;
  id v165;
  void *v166;
  uint64_t v167;
  int v168;
  void *v169;
  void **v170;
  NSErrorUserInfoKey *v171;
  void *v172;
  void *v173;
  uint64_t v174;
  void (*v175)(uint64_t, const char *, ...);
  objc_class *v176;
  _BOOL4 v177;
  const char *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  objc_class *v182;
  int v183;
  const char *v184;
  const char *v185;
  void *v187;
  uint64_t v188;
  void (*v189)(uint64_t, const char *, ...);
  objc_class *v190;
  _BOOL4 v191;
  const char *v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  NSObject *v196;
  objc_class *v197;
  int v198;
  const char *v199;
  const char *v200;
  void *v201;
  id v202;
  void *v203;
  void *v204;
  uint64_t v205;
  void (*v206)(uint64_t, const char *, ...);
  objc_class *v207;
  _BOOL4 v208;
  const char *v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  NSObject *v213;
  objc_class *v214;
  int v215;
  const char *v216;
  const char *v217;
  void *v218;
  uint64_t v219;
  void (*v220)(uint64_t, const char *, ...);
  objc_class *v221;
  _BOOL4 v222;
  const char *v223;
  const char *v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  NSObject *v228;
  objc_class *v229;
  int v230;
  const char *v231;
  const char *v232;
  unsigned int v233;
  id v234;
  void *v235;
  objc_class *v236;
  _BOOL4 v237;
  const char *v238;
  void *v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  NSObject *v243;
  objc_class *v244;
  int v245;
  const char *v246;
  void *v247;
  id v248;
  unsigned __int8 *v249;
  int v250;
  void *v251;
  uint64_t v252;
  void (*v253)(uint64_t, const char *, ...);
  objc_class *v254;
  _BOOL4 v255;
  const char *v256;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  NSObject *v260;
  objc_class *v261;
  int v262;
  const char *v263;
  const char *v264;
  unsigned int v265;
  unsigned int v266;
  void *v267;
  uint64_t v268;
  void (*v269)(uint64_t, const char *, ...);
  objc_class *v270;
  _BOOL4 v271;
  const char *v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  NSObject *v276;
  objc_class *v277;
  int v278;
  const char *v279;
  const char *v280;
  id v281;
  void *v282;
  uint64_t v283;
  int v284;
  void *v285;
  void *v286;
  objc_class *v287;
  _BOOL4 v288;
  const char *v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  NSObject *v293;
  objc_class *v294;
  int v295;
  const char *v296;
  const char *v297;
  unsigned int v298;
  unsigned int v299;
  void *v300;
  uint64_t v301;
  void (*v302)(uint64_t, const char *, ...);
  objc_class *v303;
  _BOOL4 v304;
  const char *v305;
  uint64_t v306;
  void *v307;
  uint64_t v308;
  NSObject *v309;
  objc_class *v310;
  int v311;
  const char *v312;
  const char *v313;
  int v314;
  void *v315;
  uint64_t v316;
  void (*v317)(uint64_t, const char *, ...);
  objc_class *v318;
  _BOOL4 v319;
  const char *v320;
  uint64_t v321;
  void *v322;
  uint64_t v323;
  NSObject *v324;
  objc_class *v325;
  int v326;
  const char *v327;
  const char *v328;
  void *v329;
  const char *v330;
  const char *v331;
  const char *v332;
  const char *v333;
  const char *Name;
  const char *v335;
  const char *v336;
  const char *v337;
  const char *v338;
  const char *v339;
  const char *v340;
  const char *v341;
  const char *v342;
  const char *v343;
  const char *v344;
  const char *v345;
  const char *v346;
  const char *v347;
  const char *v348;
  const char *v349;
  uint64_t v350;
  uint64_t v351;
  const char *v352;
  const char *v353;
  id v354;
  id v355;
  id v356;
  id v357;
  id v358;
  NSErrorUserInfoKey v359;
  void *v360;
  NSErrorUserInfoKey v361;
  void *v362;
  NSErrorUserInfoKey v363;
  void *v364;
  NSErrorUserInfoKey v365;
  void *v366;
  NSErrorUserInfoKey v367;
  void *v368;
  NSErrorUserInfoKey v369;
  void *v370;
  NSErrorUserInfoKey v371;
  void *v372;
  NSErrorUserInfoKey v373;
  void *v374;
  NSErrorUserInfoKey v375;
  void *v376;
  uint8_t buf[4];
  int v378;
  __int16 v379;
  const char *v380;
  __int16 v381;
  const char *v382;
  __int16 v383;
  int v384;
  __int16 v385;
  id v386;

  v1 = a1;
  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData"));
    if ((objc_msgSend(v1, "upgradeChecked") & 1) != 0)
    {
      v1 = 0;
LABEL_140:

      return v1;
    }
    if ((objc_msgSend(v1, "jcopSupportsEntanglement") & 1) == 0)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v25 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v1);
        Name = sel_getName("upgradeAuthRandom");
        v29 = 45;
        if (isMetaClass)
          v29 = 43;
        v25(6, "%c[%{public}s %{public}s]:%i JCOP doesn't support entanglement", v29, ClassName, Name, 1507);
      }
      v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v31 = NFSharedLogGetLogger(v30);
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        goto LABEL_27;
      v33 = object_getClass(v1);
      if (class_isMetaClass(v33))
        v34 = 43;
      else
        v34 = 45;
      *(_DWORD *)buf = 67109890;
      v378 = v34;
      v379 = 2082;
      v380 = object_getClassName(v1);
      v381 = 2082;
      v382 = sel_getName("upgradeAuthRandom");
      v383 = 1024;
      v384 = 1507;
      v35 = "%c[%{public}s %{public}s]:%i JCOP doesn't support entanglement";
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v35, buf, 0x22u);
LABEL_27:

LABEL_28:
      v36 = 0;
      v37 = 0;
LABEL_29:
      v6 = 0;
LABEL_51:
      objc_msgSend(v1, "setUpgradeChecked:", 1);
LABEL_139:
      v1 = v6;

      goto LABEL_140;
    }
    v3 = NFTagAppLauncher;
    v356 = 0;
    v4 = sub_1002074C8((uint64_t)NFSSEWrapper, &v356);
    v5 = v356;
    v6 = v5;
    if (!v4 || v5)
    {
      if (v5 && objc_msgSend(v5, "code") == (id)41)
      {
        v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v39 = NFLogGetLogger(v38);
        if (v39)
        {
          v40 = (void (*)(uint64_t, const char *, ...))v39;
          v41 = object_getClass(v1);
          v42 = class_isMetaClass(v41);
          v43 = object_getClassName(v1);
          v335 = sel_getName("upgradeAuthRandom");
          v44 = 45;
          if (v42)
            v44 = 43;
          v40(6, "%c[%{public}s %{public}s]:%i SSE isn't ready", v44, v43, v335, 1513);
        }
        v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v46 = NFSharedLogGetLogger(v45);
        v47 = objc_claimAutoreleasedReturnValue(v46);
        if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          goto LABEL_137;
        v48 = object_getClass(v1);
        if (class_isMetaClass(v48))
          v49 = 43;
        else
          v49 = 45;
        v50 = object_getClassName(v1);
        v51 = sel_getName("upgradeAuthRandom");
        *(_DWORD *)buf = 67109890;
        v378 = v49;
        v379 = 2082;
        v380 = v50;
        v381 = 2082;
        v382 = v51;
        v383 = 1024;
        v384 = 1513;
        v52 = "%c[%{public}s %{public}s]:%i SSE isn't ready";
        v53 = v47;
        v54 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_136;
      }
      v55 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v56 = NFLogGetLogger(v55);
      if (v56)
      {
        v57 = (void (*)(uint64_t, const char *, ...))v56;
        v58 = object_getClass(v1);
        v59 = class_isMetaClass(v58);
        v331 = object_getClassName(v1);
        v336 = sel_getName("upgradeAuthRandom");
        v60 = 45;
        if (v59)
          v60 = 43;
        v57(6, "%c[%{public}s %{public}s]:%i SSE doesn't support entanglement : %{public}@", v60, v331, v336, 1516, v6);
      }
      v61 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v62 = NFSharedLogGetLogger(v61);
      v63 = objc_claimAutoreleasedReturnValue(v62);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        v64 = object_getClass(v1);
        if (class_isMetaClass(v64))
          v65 = 43;
        else
          v65 = 45;
        v66 = object_getClassName(v1);
        v67 = sel_getName("upgradeAuthRandom");
        *(_DWORD *)buf = 67110146;
        v378 = v65;
        v379 = 2082;
        v380 = v66;
        v381 = 2082;
        v382 = v67;
        v383 = 1024;
        v384 = 1516;
        v385 = 2114;
        v386 = v6;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i SSE doesn't support entanglement : %{public}@", buf, 0x2Cu);
      }

      v36 = 0;
      v37 = 0;
      goto LABEL_51;
    }
    v358 = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "selectCRSWithError:", &v358));
    v8 = v358;
    if (v8)
    {
      v9 = v8;
      v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v11 = NFLogGetLogger(v10);
      if (v11)
      {
        v12 = (void (*)(uint64_t, const char *, ...))v11;
        v13 = object_getClass(v1);
        v14 = class_isMetaClass(v13);
        v330 = object_getClassName(v1);
        v333 = sel_getName("getAuthRandomFlagFromCRS:");
        v15 = 45;
        if (v14)
          v15 = 43;
        v12(3, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", v15, v330, v333, 1419, v9);
      }
      v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v17 = NFSharedLogGetLogger(v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = object_getClass(v1);
        if (class_isMetaClass(v19))
          v20 = 43;
        else
          v20 = 45;
        v21 = object_getClassName(v1);
        v22 = sel_getName("getAuthRandomFlagFromCRS:");
        *(_DWORD *)buf = 67110146;
        v378 = v20;
        v379 = 2082;
        v380 = v21;
        v381 = 2082;
        v382 = v22;
        v383 = 1024;
        v384 = 1419;
        v385 = 2114;
        v386 = v9;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", buf, 0x2Cu);
      }
LABEL_126:

      v6 = v9;
      goto LABEL_127;
    }
    if (v7)
    {
      if (objc_msgSend(v7, "status") != 36864)
      {
        v100 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v101 = NFLogGetLogger(v100);
        if (v101)
        {
          v102 = (void (*)(uint64_t, const char *, ...))v101;
          v103 = object_getClass(v1);
          v104 = class_isMetaClass(v103);
          v105 = object_getClassName(v1);
          v106 = sel_getName("getAuthRandomFlagFromCRS:");
          v350 = objc_msgSend(v7, "status");
          v107 = 45;
          if (v104)
            v107 = 43;
          v102(3, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting 0x9000, got 0x%x", v107, v105, v106, 1427, v350);
        }
        v108 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v109 = NFSharedLogGetLogger(v108);
        v110 = objc_claimAutoreleasedReturnValue(v109);
        if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
        {
          v111 = object_getClass(v1);
          if (class_isMetaClass(v111))
            v112 = 43;
          else
            v112 = 45;
          v113 = object_getClassName(v1);
          v114 = sel_getName("getAuthRandomFlagFromCRS:");
          v115 = objc_msgSend(v7, "status");
          *(_DWORD *)buf = 67110146;
          v378 = v112;
          v379 = 2082;
          v380 = v113;
          v381 = 2082;
          v382 = v114;
          v383 = 1024;
          v384 = 1427;
          v385 = 1024;
          LODWORD(v386) = v115;
          _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting 0x9000, got 0x%x", buf, 0x28u);
        }

        v116 = objc_alloc((Class)NSError);
        v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v373 = NSLocalizedDescriptionKey;
        v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        v374 = v99;
        v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v374, &v373, 1));
        v6 = objc_msgSend(v116, "initWithDomain:code:userInfo:", v96, 16, v117);

        goto LABEL_85;
      }
      v357 = 0;
      v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "getData:tag:data:error:", 128, 220, 0, &v357));
      v9 = v357;

      if (v9)
      {
        v69 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v70 = NFLogGetLogger(v69);
        if (v70)
        {
          v71 = (void (*)(uint64_t, const char *, ...))v70;
          v72 = object_getClass(v1);
          v73 = class_isMetaClass(v72);
          v332 = object_getClassName(v1);
          v337 = sel_getName("getAuthRandomFlagFromCRS:");
          v74 = 45;
          if (v73)
            v74 = 43;
          v71(3, "%c[%{public}s %{public}s]:%i Failed to get flag: %{public}@", v74, v332, v337, 1433, v9);
        }
        v75 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v76 = NFSharedLogGetLogger(v75);
        v18 = objc_claimAutoreleasedReturnValue(v76);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v77 = object_getClass(v1);
          if (class_isMetaClass(v77))
            v78 = 43;
          else
            v78 = 45;
          v79 = object_getClassName(v1);
          v80 = sel_getName("getAuthRandomFlagFromCRS:");
          *(_DWORD *)buf = 67110146;
          v378 = v78;
          v379 = 2082;
          v380 = v79;
          v381 = 2082;
          v382 = v80;
          v383 = 1024;
          v384 = 1433;
          v385 = 2114;
          v386 = v9;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get flag: %{public}@", buf, 0x2Cu);
          v7 = v68;
        }
        else
        {
          v7 = v68;
        }
        goto LABEL_126;
      }
      if (v68)
      {
        if (objc_msgSend(v68, "status") == 36864)
        {
          v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "response"));
          v132 = objc_msgSend(v131, "length");

          v133 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v134 = NFLogGetLogger(v133);
          v135 = (void (*)(uint64_t, const char *, ...))v134;
          if ((unint64_t)v132 > 2)
          {
            if (v134)
            {
              v236 = object_getClass(v1);
              v237 = class_isMetaClass(v236);
              v352 = object_getClassName(v1);
              v238 = sel_getName("getAuthRandomFlagFromCRS:");
              v239 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "response"));
              v240 = 45;
              if (v237)
                v240 = 43;
              v135(6, "%c[%{public}s %{public}s]:%i Auth random flag = %{public}@", v240, v352, v238, 1450, v239);

            }
            v241 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v242 = NFSharedLogGetLogger(v241);
            v243 = objc_claimAutoreleasedReturnValue(v242);
            if (os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT))
            {
              v244 = object_getClass(v1);
              if (class_isMetaClass(v244))
                v245 = 43;
              else
                v245 = 45;
              v353 = object_getClassName(v1);
              v246 = sel_getName("getAuthRandomFlagFromCRS:");
              v247 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "response"));
              *(_DWORD *)buf = 67110146;
              v378 = v245;
              v379 = 2082;
              v380 = v353;
              v381 = 2082;
              v382 = v246;
              v383 = 1024;
              v384 = 1450;
              v385 = 2114;
              v386 = v247;
              _os_log_impl((void *)&_mh_execute_header, v243, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Auth random flag = %{public}@", buf, 0x2Cu);

            }
            v248 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "response")));
            v249 = (unsigned __int8 *)objc_msgSend(v248, "bytes");

            if (*v249 == 220)
            {
              v250 = v249[2];

              v3 = NFTagAppLauncher;
              if (v250 == 90)
              {
                v251 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v252 = NFLogGetLogger(v251);
                if (v252)
                {
                  v253 = (void (*)(uint64_t, const char *, ...))v252;
                  v254 = object_getClass(v1);
                  v255 = class_isMetaClass(v254);
                  v256 = object_getClassName(v1);
                  v345 = sel_getName("upgradeAuthRandom");
                  v257 = 45;
                  if (v255)
                    v257 = 43;
                  v253(6, "%c[%{public}s %{public}s]:%i Already entangled, telling SSE", v257, v256, v345, 1530);
                }
                v258 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v259 = NFSharedLogGetLogger(v258);
                v260 = objc_claimAutoreleasedReturnValue(v259);
                if (os_log_type_enabled(v260, OS_LOG_TYPE_DEFAULT))
                {
                  v261 = object_getClass(v1);
                  if (class_isMetaClass(v261))
                    v262 = 43;
                  else
                    v262 = 45;
                  v263 = object_getClassName(v1);
                  v264 = sel_getName("upgradeAuthRandom");
                  *(_DWORD *)buf = 67109890;
                  v378 = v262;
                  v379 = 2082;
                  v380 = v263;
                  v381 = 2082;
                  v382 = v264;
                  v383 = 1024;
                  v384 = 1530;
                  _os_log_impl((void *)&_mh_execute_header, v260, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Already entangled, telling SSE", buf, 0x22u);
                }

                v265 = sub_100207A10((uint64_t)NFSSEWrapper, 1);
                if (v265)
                {
                  v266 = v265;
                  v267 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v268 = NFLogGetLogger(v267);
                  if (v268)
                  {
                    v269 = (void (*)(uint64_t, const char *, ...))v268;
                    v270 = object_getClass(v1);
                    v271 = class_isMetaClass(v270);
                    v272 = object_getClassName(v1);
                    v346 = sel_getName("upgradeAuthRandom");
                    v273 = 45;
                    if (v271)
                      v273 = 43;
                    v269(3, "%c[%{public}s %{public}s]:%i Failed to set auth random", v273, v272, v346, 1533);
                  }
                  v274 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v275 = NFSharedLogGetLogger(v274);
                  v276 = objc_claimAutoreleasedReturnValue(v275);
                  if (os_log_type_enabled(v276, OS_LOG_TYPE_ERROR))
                  {
                    v277 = object_getClass(v1);
                    if (class_isMetaClass(v277))
                      v278 = 43;
                    else
                      v278 = 45;
                    v279 = object_getClassName(v1);
                    v280 = sel_getName("upgradeAuthRandom");
                    *(_DWORD *)buf = 67109890;
                    v378 = v278;
                    v379 = 2082;
                    v380 = v279;
                    v381 = 2082;
                    v382 = v280;
                    v383 = 1024;
                    v384 = 1533;
                    _os_log_impl((void *)&_mh_execute_header, v276, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set auth random", buf, 0x22u);
                  }

                  v281 = objc_alloc((Class)NSError);
                  v282 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                  v283 = v266;
                  v363 = NSLocalizedDescriptionKey;
                  if (v266 >= 0x47)
                    v284 = 71;
                  else
                    v284 = v266;
                  v285 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v284]));
                  v364 = v285;
                  v286 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v364, &v363, 1));
                  v6 = objc_msgSend(v281, "initWithDomain:code:userInfo:", v282, v283, v286);

                  goto LABEL_138;
                }
                +[NFSecureElementWrapper setAuthRandomEntangled](NFSecureElementWrapper, "setAuthRandomEntangled");
                goto LABEL_28;
              }
              goto LABEL_87;
            }
            v315 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v316 = NFLogGetLogger(v315);
            v3 = NFTagAppLauncher;
            if (v316)
            {
              v317 = (void (*)(uint64_t, const char *, ...))v316;
              v318 = object_getClass(v1);
              v319 = class_isMetaClass(v318);
              v320 = object_getClassName(v1);
              v349 = sel_getName("getAuthRandomFlagFromCRS:");
              v321 = 45;
              if (v319)
                v321 = 43;
              v317(3, "%c[%{public}s %{public}s]:%i Unexpected instruction.", v321, v320, v349, 1453);
            }
            v322 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v323 = NFSharedLogGetLogger(v322);
            v324 = objc_claimAutoreleasedReturnValue(v323);
            if (os_log_type_enabled(v324, OS_LOG_TYPE_ERROR))
            {
              v325 = object_getClass(v1);
              if (class_isMetaClass(v325))
                v326 = 43;
              else
                v326 = 45;
              v327 = object_getClassName(v1);
              v328 = sel_getName("getAuthRandomFlagFromCRS:");
              *(_DWORD *)buf = 67109890;
              v378 = v326;
              v379 = 2082;
              v380 = v327;
              v381 = 2082;
              v382 = v328;
              v383 = 1024;
              v384 = 1453;
              _os_log_impl((void *)&_mh_execute_header, v324, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected instruction.", buf, 0x22u);
            }

            v147 = objc_alloc((Class)NSError);
            v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v365 = NSLocalizedDescriptionKey;
            v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
            v366 = v99;
            v148 = &v366;
            v149 = &v365;
          }
          else
          {
            if (v134)
            {
              v136 = object_getClass(v1);
              v137 = class_isMetaClass(v136);
              v138 = object_getClassName(v1);
              v340 = sel_getName("getAuthRandomFlagFromCRS:");
              v139 = 45;
              if (v137)
                v139 = 43;
              v135(3, "%c[%{public}s %{public}s]:%i Invalid response size", v139, v138, v340, 1446);
            }
            v140 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v141 = NFSharedLogGetLogger(v140);
            v142 = objc_claimAutoreleasedReturnValue(v141);
            if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
            {
              v143 = object_getClass(v1);
              if (class_isMetaClass(v143))
                v144 = 43;
              else
                v144 = 45;
              v145 = object_getClassName(v1);
              v146 = sel_getName("getAuthRandomFlagFromCRS:");
              *(_DWORD *)buf = 67109890;
              v378 = v144;
              v379 = 2082;
              v380 = v145;
              v381 = 2082;
              v382 = v146;
              v383 = 1024;
              v384 = 1446;
              _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid response size", buf, 0x22u);
            }

            v147 = objc_alloc((Class)NSError);
            v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v367 = NSLocalizedDescriptionKey;
            v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
            v368 = v99;
            v148 = &v368;
            v149 = &v367;
          }
          v329 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v148, v149, 1));
          v6 = objc_msgSend(v147, "initWithDomain:code:userInfo:", v96, 13, v329);

          v7 = v68;
LABEL_86:

          if (v6)
          {
LABEL_127:
            v173 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v174 = NFLogGetLogger(v173);
            if (v174)
            {
              v175 = (void (*)(uint64_t, const char *, ...))v174;
              v176 = object_getClass(v1);
              v177 = class_isMetaClass(v176);
              v178 = object_getClassName(v1);
              v342 = sel_getName("upgradeAuthRandom");
              v179 = 45;
              if (v177)
                v179 = 43;
              v175(3, "%c[%{public}s %{public}s]:%i Failed to get flag", v179, v178, v342, 1523);
            }
            v180 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v181 = NFSharedLogGetLogger(v180);
            v47 = objc_claimAutoreleasedReturnValue(v181);
            if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              goto LABEL_137;
            v182 = object_getClass(v1);
            if (class_isMetaClass(v182))
              v183 = 43;
            else
              v183 = 45;
            v184 = object_getClassName(v1);
            v185 = sel_getName("upgradeAuthRandom");
            *(_DWORD *)buf = 67109890;
            v378 = v183;
            v379 = 2082;
            v380 = v184;
            v381 = 2082;
            v382 = v185;
            v383 = 1024;
            v384 = 1523;
            v52 = "%c[%{public}s %{public}s]:%i Failed to get flag";
            v53 = v47;
            v54 = OS_LOG_TYPE_ERROR;
LABEL_136:
            _os_log_impl((void *)&_mh_execute_header, v53, v54, v52, buf, 0x22u);
LABEL_137:

LABEL_138:
            v36 = 0;
            v37 = 0;
            goto LABEL_139;
          }
LABEL_87:
          if (!sub_1001E45B4(v1, 0xFFFFFFFFLL))
          {
            v354 = 0;
            v355 = 0;
            v150 = sub_100208188((uint64_t)&v3[44], v2, 0xFFFFFFFFLL, &v355, &v354, 1, 1u);
            v36 = v355;
            v37 = v354;
            if (v150)
            {
              v151 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v152 = NFLogGetLogger(v151);
              if (v152)
              {
                v153 = (void (*)(uint64_t, const char *, ...))v152;
                v154 = object_getClass(v1);
                v155 = class_isMetaClass(v154);
                v156 = object_getClassName(v1);
                v341 = sel_getName("upgradeAuthRandom");
                v157 = 45;
                if (v155)
                  v157 = 43;
                v153(3, "%c[%{public}s %{public}s]:%i Failed to get auth random", v157, v156, v341, 1551);
              }
              v158 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v159 = NFSharedLogGetLogger(v158);
              v160 = objc_claimAutoreleasedReturnValue(v159);
              if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
              {
                v161 = object_getClass(v1);
                if (class_isMetaClass(v161))
                  v162 = 43;
                else
                  v162 = 45;
                v163 = object_getClassName(v1);
                v164 = sel_getName("upgradeAuthRandom");
                *(_DWORD *)buf = 67109890;
                v378 = v162;
                v379 = 2082;
                v380 = v163;
                v381 = 2082;
                v382 = v164;
                v383 = 1024;
                v384 = 1551;
                _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get auth random", buf, 0x22u);
              }

              v165 = objc_alloc((Class)NSError);
              v166 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v167 = v150;
              v361 = NSLocalizedDescriptionKey;
              if (v150 >= 0x47)
                v168 = 71;
              else
                v168 = v150;
              v169 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v168]));
              v362 = v169;
              v170 = &v362;
              v171 = &v361;
            }
            else
            {
              v201 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "handle"));
              objc_msgSend(v201, "redactLogging:", 1);

              v202 = sub_1001E9E00(v1, v36, v37);
              v6 = (id)objc_claimAutoreleasedReturnValue(v202);
              v203 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "handle"));
              objc_msgSend(v203, "redactLogging:", 0);

              v204 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v205 = NFLogGetLogger(v204);
              v206 = (void (*)(uint64_t, const char *, ...))v205;
              if (v6)
              {
                if (v205)
                {
                  v207 = object_getClass(v1);
                  v208 = class_isMetaClass(v207);
                  v209 = object_getClassName(v1);
                  v344 = sel_getName("upgradeAuthRandom");
                  v210 = 45;
                  if (v208)
                    v210 = 43;
                  v206(3, "%c[%{public}s %{public}s]:%i Failed to set CRS auth random", v210, v209, v344, 1561);
                }
                v211 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v212 = NFSharedLogGetLogger(v211);
                v213 = objc_claimAutoreleasedReturnValue(v212);
                if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
                {
                  v214 = object_getClass(v1);
                  if (class_isMetaClass(v214))
                    v215 = 43;
                  else
                    v215 = 45;
                  v216 = object_getClassName(v1);
                  v217 = sel_getName("upgradeAuthRandom");
                  *(_DWORD *)buf = 67109890;
                  v378 = v215;
                  v379 = 2082;
                  v380 = v216;
                  v381 = 2082;
                  v382 = v217;
                  v383 = 1024;
                  v384 = 1561;
                  _os_log_impl((void *)&_mh_execute_header, v213, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set CRS auth random", buf, 0x22u);
                }

                goto LABEL_139;
              }
              if (v205)
              {
                v287 = object_getClass(v1);
                v288 = class_isMetaClass(v287);
                v289 = object_getClassName(v1);
                v347 = sel_getName("upgradeAuthRandom");
                v290 = 45;
                if (v288)
                  v290 = 43;
                v206(6, "%c[%{public}s %{public}s]:%i Entanglement success, telling SSE", v290, v289, v347, 1565);
              }
              v291 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v292 = NFSharedLogGetLogger(v291);
              v293 = objc_claimAutoreleasedReturnValue(v292);
              if (os_log_type_enabled(v293, OS_LOG_TYPE_DEFAULT))
              {
                v294 = object_getClass(v1);
                if (class_isMetaClass(v294))
                  v295 = 43;
                else
                  v295 = 45;
                v296 = object_getClassName(v1);
                v297 = sel_getName("upgradeAuthRandom");
                *(_DWORD *)buf = 67109890;
                v378 = v295;
                v379 = 2082;
                v380 = v296;
                v381 = 2082;
                v382 = v297;
                v383 = 1024;
                v384 = 1565;
                _os_log_impl((void *)&_mh_execute_header, v293, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Entanglement success, telling SSE", buf, 0x22u);
              }

              v298 = sub_100207A10((uint64_t)&v3[44], 1);
              if (!v298)
              {
                +[NFSecureElementWrapper setAuthRandomEntangled](NFSecureElementWrapper, "setAuthRandomEntangled");
                goto LABEL_29;
              }
              v299 = v298;
              v300 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v301 = NFLogGetLogger(v300);
              if (v301)
              {
                v302 = (void (*)(uint64_t, const char *, ...))v301;
                v303 = object_getClass(v1);
                v304 = class_isMetaClass(v303);
                v305 = object_getClassName(v1);
                v348 = sel_getName("upgradeAuthRandom");
                v306 = 45;
                if (v304)
                  v306 = 43;
                v302(3, "%c[%{public}s %{public}s]:%i Failed to set auth random", v306, v305, v348, 1569);
              }
              v307 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v308 = NFSharedLogGetLogger(v307);
              v309 = objc_claimAutoreleasedReturnValue(v308);
              if (os_log_type_enabled(v309, OS_LOG_TYPE_ERROR))
              {
                v310 = object_getClass(v1);
                if (class_isMetaClass(v310))
                  v311 = 43;
                else
                  v311 = 45;
                v312 = object_getClassName(v1);
                v313 = sel_getName("upgradeAuthRandom");
                *(_DWORD *)buf = 67109890;
                v378 = v311;
                v379 = 2082;
                v380 = v312;
                v381 = 2082;
                v382 = v313;
                v383 = 1024;
                v384 = 1569;
                _os_log_impl((void *)&_mh_execute_header, v309, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set auth random", buf, 0x22u);
              }

              v165 = objc_alloc((Class)NSError);
              v166 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v167 = v299;
              v359 = NSLocalizedDescriptionKey;
              if (v299 >= 0x47)
                v314 = 71;
              else
                v314 = v299;
              v169 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v314]));
              v360 = v169;
              v170 = &v360;
              v171 = &v359;
            }
            v172 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v170, v171, 1));
            v6 = objc_msgSend(v165, "initWithDomain:code:userInfo:", v166, v167, v172);

            goto LABEL_139;
          }
          v118 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v119 = NFLogGetLogger(v118);
          if (v119)
          {
            v120 = (void (*)(uint64_t, const char *, ...))v119;
            v121 = object_getClass(v1);
            v122 = class_isMetaClass(v121);
            v123 = object_getClassName(v1);
            v339 = sel_getName("upgradeAuthRandom");
            v124 = 45;
            if (v122)
              v124 = 43;
            v120(6, "%c[%{public}s %{public}s]:%i Not paired", v124, v123, v339, 1544);
          }
          v125 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v126 = NFSharedLogGetLogger(v125);
          v32 = objc_claimAutoreleasedReturnValue(v126);
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            goto LABEL_27;
          v127 = object_getClass(v1);
          if (class_isMetaClass(v127))
            v128 = 43;
          else
            v128 = 45;
          v129 = object_getClassName(v1);
          v130 = sel_getName("upgradeAuthRandom");
          *(_DWORD *)buf = 67109890;
          v378 = v128;
          v379 = 2082;
          v380 = v129;
          v381 = 2082;
          v382 = v130;
          v383 = 1024;
          v384 = 1544;
          v35 = "%c[%{public}s %{public}s]:%i Not paired";
          goto LABEL_26;
        }
        v218 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v219 = NFLogGetLogger(v218);
        if (v219)
        {
          v220 = (void (*)(uint64_t, const char *, ...))v219;
          v221 = object_getClass(v1);
          v222 = class_isMetaClass(v221);
          v223 = object_getClassName(v1);
          v224 = sel_getName("getAuthRandomFlagFromCRS:");
          v351 = objc_msgSend(v68, "status");
          v225 = 45;
          if (v222)
            v225 = 43;
          v220(3, "%c[%{public}s %{public}s]:%i Failed to get flag, expecting 0x9000, got 0x%x", v225, v223, v224, 1441, v351);
        }
        v226 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v227 = NFSharedLogGetLogger(v226);
        v228 = objc_claimAutoreleasedReturnValue(v227);
        if (os_log_type_enabled(v228, OS_LOG_TYPE_ERROR))
        {
          v229 = object_getClass(v1);
          if (class_isMetaClass(v229))
            v230 = 43;
          else
            v230 = 45;
          v231 = object_getClassName(v1);
          v232 = sel_getName("getAuthRandomFlagFromCRS:");
          v233 = objc_msgSend(v68, "status");
          *(_DWORD *)buf = 67110146;
          v378 = v230;
          v379 = 2082;
          v380 = v231;
          v381 = 2082;
          v382 = v232;
          v383 = 1024;
          v384 = 1441;
          v385 = 1024;
          LODWORD(v386) = v233;
          _os_log_impl((void *)&_mh_execute_header, v228, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get flag, expecting 0x9000, got 0x%x", buf, 0x28u);
        }

        v234 = objc_alloc((Class)NSError);
        v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v369 = NSLocalizedDescriptionKey;
        v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        v370 = v99;
        v235 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v370, &v369, 1));
        v6 = objc_msgSend(v234, "initWithDomain:code:userInfo:", v96, 16, v235);

        v7 = v68;
LABEL_85:
        v3 = NFTagAppLauncher;
        goto LABEL_86;
      }
      v187 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v188 = NFLogGetLogger(v187);
      if (v188)
      {
        v189 = (void (*)(uint64_t, const char *, ...))v188;
        v190 = object_getClass(v1);
        v191 = class_isMetaClass(v190);
        v192 = object_getClassName(v1);
        v343 = sel_getName("getAuthRandomFlagFromCRS:");
        v193 = 45;
        if (v191)
          v193 = 43;
        v189(3, "%c[%{public}s %{public}s]:%i Failed to get flag, expecting RAPDU", v193, v192, v343, 1437);
      }
      v194 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v195 = NFSharedLogGetLogger(v194);
      v196 = objc_claimAutoreleasedReturnValue(v195);
      if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
      {
        v197 = object_getClass(v1);
        if (class_isMetaClass(v197))
          v198 = 43;
        else
          v198 = 45;
        v199 = object_getClassName(v1);
        v200 = sel_getName("getAuthRandomFlagFromCRS:");
        *(_DWORD *)buf = 67109890;
        v378 = v198;
        v379 = 2082;
        v380 = v199;
        v381 = 2082;
        v382 = v200;
        v383 = 1024;
        v384 = 1437;
        _os_log_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get flag, expecting RAPDU", buf, 0x22u);
      }

      v95 = objc_alloc((Class)NSError);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v371 = NSLocalizedDescriptionKey;
      v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v372 = v96;
      v97 = &v372;
      v98 = &v371;
    }
    else
    {
      v81 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v82 = NFLogGetLogger(v81);
      if (v82)
      {
        v83 = (void (*)(uint64_t, const char *, ...))v82;
        v84 = object_getClass(v1);
        v85 = class_isMetaClass(v84);
        v86 = object_getClassName(v1);
        v338 = sel_getName("getAuthRandomFlagFromCRS:");
        v87 = 45;
        if (v85)
          v87 = 43;
        v83(3, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting RAPDU", v87, v86, v338, 1423);
      }
      v88 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v89 = NFSharedLogGetLogger(v88);
      v90 = objc_claimAutoreleasedReturnValue(v89);
      if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      {
        v91 = object_getClass(v1);
        if (class_isMetaClass(v91))
          v92 = 43;
        else
          v92 = 45;
        v93 = object_getClassName(v1);
        v94 = sel_getName("getAuthRandomFlagFromCRS:");
        *(_DWORD *)buf = 67109890;
        v378 = v92;
        v379 = 2082;
        v380 = v93;
        v381 = 2082;
        v382 = v94;
        v383 = 1024;
        v384 = 1423;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting RAPDU", buf, 0x22u);
      }

      v95 = objc_alloc((Class)NSError);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v375 = NSLocalizedDescriptionKey;
      v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v376 = v96;
      v97 = &v376;
      v98 = &v375;
    }
    v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v97, v98, 1));
    v6 = objc_msgSend(v95, "initWithDomain:code:userInfo:", v7, 16, v99);
    goto LABEL_86;
  }
  return v1;
}

uint64_t sub_1001E702C(void *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  unsigned int v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *specific;
  uint64_t Logger;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  void *v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, ...);
  objc_class *v36;
  _BOOL4 v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  objc_class *v44;
  int v45;
  const char *v46;
  const char *v47;
  const __CFString *v48;
  id v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void (*v53)(uint64_t, const char *, ...);
  objc_class *v54;
  _BOOL4 v55;
  const char *v56;
  const char *v57;
  int v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  NSObject *v62;
  objc_class *v63;
  int v64;
  const char *v65;
  const char *v66;
  int v67;
  char *v68;
  void *v69;
  uint64_t v70;
  void (*v71)(uint64_t, const char *, ...);
  objc_class *v72;
  _BOOL4 v73;
  const char *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  NSObject *v79;
  objc_class *v80;
  int v81;
  const char *v82;
  const char *v83;
  const __CFString *v84;
  const char *Name;
  id v87;
  id v88;
  char *v89;
  id v90;
  id v91;
  id v92;
  id v93;
  uint8_t buf[4];
  int v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  int v101;
  __int16 v102;
  const __CFString *v103;
  __int16 v104;
  int v105;
  __int16 v106;
  char *v107;

  if (!a1)
    return 0;
  v6 = kdebug_trace(724566148, 0, 0, 0, 0);
  v7 = NFSharedSignpostLog(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetHostChallenge in", buf, 2u);
  }

  v93 = 0;
  v9 = sub_1002088C0((uint64_t)NFSSEWrapper, &v93);
  v10 = v93;
  v11 = kdebug_trace(724566148, 1, 0, 0, 0);
  v12 = NFSharedSignpostLog(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_signpost_enabled(v13))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetHostChallenge out", buf, 2u);
  }

  if (!v10 || v9)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v21 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_getCryptogram:challengeResponse:");
      v25 = 45;
      if (isMetaClass)
        v25 = 43;
      v21(3, "%c[%{public}s %{public}s]:%i Failed to get host challenge", v25, ClassName, Name, 1107);
    }
    v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v27 = NFSharedLogGetLogger(v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = object_getClass(a1);
      if (class_isMetaClass(v29))
        v30 = 43;
      else
        v30 = 45;
      v31 = object_getClassName(a1);
      v32 = sel_getName("_getCryptogram:challengeResponse:");
      *(_DWORD *)buf = 67109890;
      v95 = v30;
      v96 = 2082;
      v97 = v31;
      v98 = 2082;
      v99 = v32;
      v100 = 1024;
      v101 = 1107;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get host challenge", buf, 0x22u);
    }

    if (v9)
      v18 = v9;
    else
      v18 = 6;
  }
  else if (objc_msgSend(v10, "length") == (id)8)
  {
    v14 = objc_retainAutorelease(v10);
    *a2 = v14;
    v92 = 0;
    v15 = objc_msgSend(a1, "selectCRSWithError:", &v92);
    v16 = v92;
    v17 = v16;
    if (v16)
    {
      if (objc_msgSend(v16, "code"))
        v18 = (uint64_t)objc_msgSend(v17, "code");
      else
        v18 = 16;
    }
    else
    {
      v91 = 0;
      v18 = sub_1000B7998(a1, v14, &v91);
      v49 = v91;
      v50 = v49;
      if ((_DWORD)v18)
      {
        v90 = v49;
        v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v52 = NFLogGetLogger(v51);
        if (v52)
        {
          v53 = (void (*)(uint64_t, const char *, ...))v52;
          v54 = object_getClass(a1);
          v55 = class_isMetaClass(v54);
          v56 = object_getClassName(a1);
          v57 = sel_getName("_getCryptogram:challengeResponse:");
          if (v18 >= 0x47)
            v58 = 71;
          else
            v58 = v18;
          v89 = off_1002EAC00[v58];
          v59 = 43;
          if (!v55)
            v59 = 45;
          v53(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v59, v56, v57, 1126, CFSTR("Failed to authenticate"), v18, v89);
        }
        v60 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v61 = NFSharedLogGetLogger(v60);
        v62 = objc_claimAutoreleasedReturnValue(v61);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          v63 = object_getClass(a1);
          if (class_isMetaClass(v63))
            v64 = 43;
          else
            v64 = 45;
          v65 = object_getClassName(a1);
          v66 = sel_getName("_getCryptogram:challengeResponse:");
          if (v18 >= 0x47)
            v67 = 71;
          else
            v67 = v18;
          v68 = off_1002EAC00[v67];
          *(_DWORD *)buf = 67110658;
          v95 = v64;
          v96 = 2082;
          v97 = v65;
          v98 = 2082;
          v99 = v66;
          v100 = 1024;
          v101 = 1126;
          v102 = 2112;
          v103 = CFSTR("Failed to authenticate");
          v104 = 1024;
          v105 = v18;
          v106 = 2080;
          v107 = v68;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", buf, 0x3Cu);
        }

        v50 = v90;
      }
      else if (objc_msgSend(v49, "length") == (id)16)
      {
        v18 = 0;
        *a3 = objc_retainAutorelease(v50);
      }
      else
      {
        v69 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v70 = NFLogGetLogger(v69);
        if (v70)
        {
          v71 = (void (*)(uint64_t, const char *, ...))v70;
          v72 = object_getClass(a1);
          v73 = class_isMetaClass(v72);
          v74 = object_getClassName(a1);
          v75 = sel_getName("_getCryptogram:challengeResponse:");
          v88 = objc_msgSend(v50, "length");
          v76 = 45;
          if (v73)
            v76 = 43;
          v71(3, "%c[%{public}s %{public}s]:%i Invalid authenticate response length: %lu", v76, v74, v75, 1130, v88);
        }
        v77 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v78 = NFSharedLogGetLogger(v77);
        v79 = objc_claimAutoreleasedReturnValue(v78);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          v80 = object_getClass(a1);
          if (class_isMetaClass(v80))
            v81 = 43;
          else
            v81 = 45;
          v82 = object_getClassName(a1);
          v83 = sel_getName("_getCryptogram:challengeResponse:");
          v84 = (const __CFString *)objc_msgSend(v50, "length");
          *(_DWORD *)buf = 67110146;
          v95 = v81;
          v96 = 2082;
          v97 = v82;
          v98 = 2082;
          v99 = v83;
          v100 = 1024;
          v101 = 1130;
          v102 = 2048;
          v103 = v84;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid authenticate response length: %lu", buf, 0x2Cu);
        }

        v18 = 13;
      }

    }
  }
  else
  {
    v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v34 = NFLogGetLogger(v33);
    if (v34)
    {
      v35 = (void (*)(uint64_t, const char *, ...))v34;
      v36 = object_getClass(a1);
      v37 = class_isMetaClass(v36);
      v38 = object_getClassName(a1);
      v39 = sel_getName("_getCryptogram:challengeResponse:");
      v87 = objc_msgSend(v10, "length");
      v40 = 45;
      if (v37)
        v40 = 43;
      v35(3, "%c[%{public}s %{public}s]:%i Invalid host challenge length: %lu", v40, v38, v39, 1111, v87);
    }
    v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v42 = NFSharedLogGetLogger(v41);
    v43 = objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      v44 = object_getClass(a1);
      if (class_isMetaClass(v44))
        v45 = 43;
      else
        v45 = 45;
      v46 = object_getClassName(a1);
      v47 = sel_getName("_getCryptogram:challengeResponse:");
      v48 = (const __CFString *)objc_msgSend(v10, "length");
      *(_DWORD *)buf = 67110146;
      v95 = v45;
      v96 = 2082;
      v97 = v46;
      v98 = 2082;
      v99 = v47;
      v100 = 1024;
      v101 = 1111;
      v102 = 2048;
      v103 = v48;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid host challenge length: %lu", buf, 0x2Cu);
    }

    v18 = 13;
  }

  return v18;
}

uint64_t sub_1001E77C4(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *v10;
  _BOOL4 v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  void *specific;
  uint64_t Logger;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  objc_class *v31;
  int v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  NSMutableDictionary *v42;
  void *v43;
  void *v44;
  void *v45;
  NSObject *v46;
  id v47;
  id v48;
  uint64_t v49;
  void *i;
  void *v51;
  int v52;
  BOOL v53;
  id v54;
  void *v55;
  NSObject *v56;
  void *v57;
  uint64_t v58;
  void (*v59)(uint64_t, const char *, ...);
  objc_class *v60;
  _BOOL4 v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  objc_class *v67;
  int v68;
  const char *v69;
  const char *v70;
  unsigned int v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void (*v77)(uint64_t, const char *, ...);
  objc_class *v78;
  _BOOL4 v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  NSObject *v83;
  objc_class *v84;
  int v85;
  const char *v86;
  const char *v87;
  void *v88;
  uint64_t v89;
  void (*v90)(uint64_t, const char *, ...);
  objc_class *v91;
  _BOOL4 v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  NSObject *v98;
  objc_class *v99;
  int v100;
  const char *v101;
  const char *v102;
  unsigned int v103;
  void *v104;
  uint64_t v105;
  void (*v106)(uint64_t, const char *, ...);
  objc_class *v107;
  _BOOL4 v108;
  const char *v109;
  _QWORD *v110;
  const char *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  objc_class *v115;
  int v116;
  const char *v117;
  const char *v118;
  unsigned int v119;
  void *v120;
  uint64_t v121;
  void (*v122)(uint64_t, const char *, ...);
  objc_class *v123;
  _BOOL4 v124;
  const char *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  NSObject *v129;
  objc_class *v130;
  NSMutableDictionary *v131;
  int v132;
  const char *v133;
  const char *v134;
  const char *v136;
  const char *v137;
  const char *v138;
  const char *Name;
  const char *v140;
  const char *v141;
  const char *v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  _QWORD *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  NSMutableDictionary *v153;
  id v154;
  id v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  int v160;
  uint8_t v161[4];
  int v162;
  __int16 v163;
  const char *v164;
  __int16 v165;
  const char *v166;
  __int16 v167;
  int v168;
  __int16 v169;
  unsigned int v170;
  uint8_t buf[4];
  int v172;
  __int16 v173;
  const char *v174;
  __int16 v175;
  const char *v176;
  __int16 v177;
  int v178;
  __int16 v179;
  NSObject *v180;

  v5 = a2;
  v6 = v5;
  v154 = (id)a1;
  if (a1)
  {
    if (!v5)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v24 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v154);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v154);
        Name = sel_getName("signChallengeWithOSVersion:signature:");
        v28 = 45;
        if (isMetaClass)
          v28 = 43;
        v24(3, "%c[%{public}s %{public}s]:%i Invalid challenge string", v28, ClassName, Name, 1215);
      }
      v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v30 = NFSharedLogGetLogger(v29);
      v16 = objc_claimAutoreleasedReturnValue(v30);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
      v31 = object_getClass(v154);
      if (class_isMetaClass(v31))
        v32 = 43;
      else
        v32 = 45;
      *(_DWORD *)buf = 67109890;
      v172 = v32;
      v173 = 2082;
      v174 = object_getClassName(v154);
      v175 = 2082;
      v176 = sel_getName("signChallengeWithOSVersion:signature:");
      v177 = 1024;
      v178 = 1215;
      v19 = "%c[%{public}s %{public}s]:%i Invalid challenge string";
      v20 = v16;
      v21 = 34;
      goto LABEL_22;
    }
    if ((unint64_t)objc_msgSend(v5, "length") >= 0x41)
    {
      v7 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v8 = NFLogGetLogger(v7);
      if (v8)
      {
        v9 = (void (*)(uint64_t, const char *, ...))v8;
        v10 = object_getClass(v154);
        v11 = class_isMetaClass(v10);
        v12 = object_getClassName(v154);
        v138 = sel_getName("signChallengeWithOSVersion:signature:");
        v13 = 45;
        if (v11)
          v13 = 43;
        v9(3, "%c[%{public}s %{public}s]:%i challenge for signing is too large: Max = %d", v13, v12, v138, 1220, 64);
      }
      v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v15 = NFSharedLogGetLogger(v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
      v17 = object_getClass(v154);
      if (class_isMetaClass(v17))
        v18 = 43;
      else
        v18 = 45;
      *(_DWORD *)buf = 67110146;
      v172 = v18;
      v173 = 2082;
      v174 = object_getClassName(v154);
      v175 = 2082;
      v176 = sel_getName("signChallengeWithOSVersion:signature:");
      v177 = 1024;
      v178 = 1220;
      v179 = 1024;
      LODWORD(v180) = 64;
      v19 = "%c[%{public}s %{public}s]:%i challenge for signing is too large: Max = %d";
      v20 = v16;
      v21 = 40;
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, v19, buf, v21);
LABEL_23:
      a1 = 10;
LABEL_103:

      goto LABEL_104;
    }
    v33 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026A9B3, 12);
    v155 = 0;
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v154, "selectByName:error:", v33, &v155));
    v16 = v155;

    if (v34)
    {
      if (objc_msgSend(v34, "status") == 36864)
      {
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 40759, v6));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "asData"));

        v160 = 836706527;
        v37 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v160, 4);
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 92, v37));
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "asData"));

        v40 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithCapacity:", (char *)objc_msgSend(v36, "length") + (_QWORD)objc_msgSend(v39, "length"));
        v149 = v36;
        objc_msgSend(v40, "appendData:", v36);
        v152 = v39;
        objc_msgSend(v40, "appendData:", v39);
        v151 = v40;
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v154, "getData:tag:data:error:", 128, 257, v40, 0));
        v150 = v34;
        if (objc_msgSend(v41, "status") == 36864)
        {
          v147 = a3;
          v148 = v6;
          v42 = objc_opt_new(NSMutableDictionary);
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "response"));
          -[NSMutableDictionary setObject:forKey:](v42, "setObject:forKey:", v43, CFSTR("SignedResponse"));

          v146 = v41;
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "response"));
          v45 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v44));

          v158 = 0u;
          v159 = 0u;
          v156 = 0u;
          v157 = 0u;
          v46 = v45;
          v47 = -[NSObject countByEnumeratingWithState:objects:count:](v46, "countByEnumeratingWithState:objects:count:", &v156, buf, 16);
          if (!v47)
            goto LABEL_54;
          v48 = v47;
          v49 = *(_QWORD *)v157;
          v153 = v42;
          while (1)
          {
            for (i = 0; i != v48; i = (char *)i + 1)
            {
              if (*(_QWORD *)v157 != v49)
                objc_enumerationMutation(v46);
              v51 = *(void **)(*((_QWORD *)&v156 + 1) + 8 * (_QWORD)i);
              v52 = objc_msgSend(v51, "tag");
              if (v52 > 57119)
              {
                if (v52 == 57137)
                {
                  v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "value"));
                  v56 = objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "NF_asHexString"));

                  v73 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject substringWithRange:](v56, "substringWithRange:", 0, 4));
                  -[NSMutableDictionary setObject:forKey:](v42, "setObject:forKey:", v73, CFSTR("jsblSequenceCounter"));

                }
                else if (v52 == 57120)
                {
                  v54 = objc_alloc((Class)NSString);
                  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "value"));
                  v56 = objc_msgSend(v54, "initWithData:encoding:", v55, 4);

                  -[NSMutableDictionary setObject:forKey:](v42, "setObject:forKey:", v56, CFSTR("kPlatformId"));
                }
                else
                {
LABEL_41:
                  v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v58 = NFLogGetLogger(v57);
                  if (v58)
                  {
                    v59 = (void (*)(uint64_t, const char *, ...))v58;
                    v60 = object_getClass(v154);
                    v61 = class_isMetaClass(v60);
                    v62 = object_getClassName(v154);
                    v63 = sel_getName("_signChallengeWithOSVersionComet:");
                    v143 = objc_msgSend(v51, "tag");
                    v53 = !v61;
                    v42 = v153;
                    v64 = 45;
                    if (!v53)
                      v64 = 43;
                    v59(3, "%c[%{public}s %{public}s]:%i Unexpected tag found, %d", v64, v62, v63, 1196, v143);
                  }
                  v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v66 = NFSharedLogGetLogger(v65);
                  v56 = objc_claimAutoreleasedReturnValue(v66);
                  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
                  {
                    v67 = object_getClass(v154);
                    if (class_isMetaClass(v67))
                      v68 = 43;
                    else
                      v68 = 45;
                    v69 = object_getClassName(v154);
                    v70 = sel_getName("_signChallengeWithOSVersionComet:");
                    v71 = objc_msgSend(v51, "tag");
                    *(_DWORD *)v161 = 67110146;
                    v162 = v68;
                    v42 = v153;
                    v163 = 2082;
                    v164 = v69;
                    v165 = 2082;
                    v166 = v70;
                    v167 = 1024;
                    v168 = 1196;
                    v169 = 1024;
                    v170 = v71;
                    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected tag found, %d", v161, 0x28u);
                  }
                }

                continue;
              }
              v53 = v52 == 133 || v52 == 24375;
              if (!v53)
                goto LABEL_41;
            }
            v48 = -[NSObject countByEnumeratingWithState:objects:count:](v46, "countByEnumeratingWithState:objects:count:", &v156, buf, 16);
            if (!v48)
            {
LABEL_54:

              v6 = v148;
              a3 = v147;
              v74 = v149;
              v41 = v146;
              goto LABEL_88;
            }
          }
        }
        v104 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v105 = NFLogGetLogger(v104);
        if (v105)
        {
          v106 = (void (*)(uint64_t, const char *, ...))v105;
          v107 = object_getClass(v154);
          v108 = class_isMetaClass(v107);
          v109 = object_getClassName(v154);
          v110 = a3;
          v111 = sel_getName("_signChallengeWithOSVersionComet:");
          v145 = objc_msgSend(v41, "status");
          v141 = v111;
          a3 = v110;
          v112 = 45;
          if (v108)
            v112 = 43;
          v106(3, "%c[%{public}s %{public}s]:%i Unable to obtain Authenticated GET DATA 0x%x", v112, v109, v141, 1164, v145);
        }
        v113 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v114 = NFSharedLogGetLogger(v113);
        v46 = objc_claimAutoreleasedReturnValue(v114);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          v115 = object_getClass(v154);
          if (class_isMetaClass(v115))
            v116 = 43;
          else
            v116 = 45;
          v117 = object_getClassName(v154);
          v118 = sel_getName("_signChallengeWithOSVersionComet:");
          v119 = objc_msgSend(v41, "status");
          *(_DWORD *)buf = 67110146;
          v172 = v116;
          v173 = 2082;
          v174 = v117;
          v175 = 2082;
          v176 = v118;
          v177 = 1024;
          v178 = 1164;
          v179 = 1024;
          LODWORD(v180) = v119;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unable to obtain Authenticated GET DATA 0x%x", buf, 0x28u);
        }
        v42 = 0;
        v74 = v149;
LABEL_88:

        if (v42)
        {
          a1 = 0;
          *a3 = objc_retainAutorelease(v42);
          v34 = v150;
        }
        else
        {
          v120 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v121 = NFLogGetLogger(v120);
          v34 = v150;
          if (v121)
          {
            v122 = (void (*)(uint64_t, const char *, ...))v121;
            v123 = object_getClass(v154);
            v124 = class_isMetaClass(v123);
            v125 = object_getClassName(v154);
            v142 = sel_getName("signChallengeWithOSVersion:signature:");
            v126 = 45;
            if (v124)
              v126 = 43;
            v137 = v125;
            v42 = 0;
            v122(3, "%c[%{public}s %{public}s]:%i Failed to get signature", v126, v137, v142, 1242);
          }
          v127 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v128 = NFSharedLogGetLogger(v127);
          v129 = objc_claimAutoreleasedReturnValue(v128);
          if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
          {
            v130 = object_getClass(v154);
            v131 = v42;
            if (class_isMetaClass(v130))
              v132 = 43;
            else
              v132 = 45;
            v133 = object_getClassName(v154);
            v134 = sel_getName("signChallengeWithOSVersion:signature:");
            *(_DWORD *)buf = 67109890;
            v172 = v132;
            v42 = v131;
            v173 = 2082;
            v174 = v133;
            v175 = 2082;
            v176 = v134;
            v177 = 1024;
            v178 = 1242;
            _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get signature", buf, 0x22u);
          }

          a1 = 16;
        }

      }
      else
      {
        v88 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v89 = NFLogGetLogger(v88);
        if (v89)
        {
          v90 = (void (*)(uint64_t, const char *, ...))v89;
          v91 = object_getClass(v154);
          v92 = class_isMetaClass(v91);
          v93 = object_getClassName(v154);
          v94 = sel_getName("signChallengeWithOSVersion:signature:");
          v144 = objc_msgSend(v34, "status");
          v95 = 45;
          if (v92)
            v95 = 43;
          v90(3, "%c[%{public}s %{public}s]:%i Failed to select CASD: 0x%04x", v95, v93, v94, 1232, v144);
        }
        v96 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v97 = NFSharedLogGetLogger(v96);
        v98 = objc_claimAutoreleasedReturnValue(v97);
        if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
        {
          v99 = object_getClass(v154);
          if (class_isMetaClass(v99))
            v100 = 43;
          else
            v100 = 45;
          v101 = object_getClassName(v154);
          v102 = sel_getName("signChallengeWithOSVersion:signature:");
          v103 = objc_msgSend(v34, "status");
          *(_DWORD *)buf = 67110146;
          v172 = v100;
          v173 = 2082;
          v174 = v101;
          v175 = 2082;
          v176 = v102;
          v177 = 1024;
          v178 = 1232;
          v179 = 1024;
          LODWORD(v180) = v103;
          _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CASD: 0x%04x", buf, 0x28u);
        }

        if (objc_msgSend(v34, "status") == 26277)
          a1 = 24;
        else
          a1 = 16;
      }
    }
    else
    {
      v75 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v76 = NFLogGetLogger(v75);
      if (v76)
      {
        v77 = (void (*)(uint64_t, const char *, ...))v76;
        v78 = object_getClass(v154);
        v79 = class_isMetaClass(v78);
        v136 = object_getClassName(v154);
        v140 = sel_getName("signChallengeWithOSVersion:signature:");
        v80 = 45;
        if (v79)
          v80 = 43;
        v77(3, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", v80, v136, v140, 1228, v16);
      }
      v81 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v82 = NFSharedLogGetLogger(v81);
      v83 = objc_claimAutoreleasedReturnValue(v82);
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
      {
        v84 = object_getClass(v154);
        if (class_isMetaClass(v84))
          v85 = 43;
        else
          v85 = 45;
        v86 = object_getClassName(v154);
        v87 = sel_getName("signChallengeWithOSVersion:signature:");
        *(_DWORD *)buf = 67110146;
        v172 = v85;
        v173 = 2082;
        v174 = v86;
        v175 = 2082;
        v176 = v87;
        v177 = 1024;
        v178 = 1228;
        v179 = 2114;
        v180 = v16;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", buf, 0x2Cu);
      }

      if (-[NSObject code](v16, "code"))
        a1 = (uint64_t)-[NSObject code](v16, "code");
      else
        a1 = 16;
    }

    goto LABEL_103;
  }
LABEL_104:

  return a1;
}

uint64_t sub_1001E8534(void *a1, int a2, unsigned int a3, void *a4, void *a5)
{
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *specific;
  uint64_t Logger;
  void (*v15)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  const char *v25;
  const char *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  void (*v42)(uint64_t, const char *, ...);
  objc_class *v43;
  _BOOL4 v44;
  const char *v45;
  const char *v46;
  int v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  NSObject *v51;
  objc_class *v52;
  int v53;
  const char *v54;
  const char *v55;
  int v56;
  char *v57;
  void *v58;
  uint64_t v59;
  void (*v60)(uint64_t, const char *, ...);
  objc_class *v61;
  _BOOL4 v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  objc_class *v68;
  int v69;
  const char *v70;
  const char *v71;
  void *v72;
  uint64_t v73;
  void (*v74)(uint64_t, const char *, ...);
  objc_class *v75;
  _BOOL4 v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  NSObject *v81;
  objc_class *v82;
  int v83;
  const char *v84;
  const char *v85;
  void *v86;
  uint64_t v87;
  void (*v88)(uint64_t, const char *, ...);
  objc_class *v89;
  _BOOL4 v90;
  const char *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  NSObject *v96;
  objc_class *v97;
  int v98;
  const char *v99;
  const char *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  void *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  void *v110;
  uint64_t v111;
  void (*v112)(uint64_t, const char *, ...);
  objc_class *v113;
  _BOOL4 v114;
  const char *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  NSObject *v119;
  objc_class *v120;
  int v121;
  const char *v122;
  const char *v123;
  void *v124;
  uint64_t v125;
  void (*v126)(uint64_t, const char *, ...);
  objc_class *v127;
  _BOOL4 v128;
  const char *v129;
  const char *v130;
  int v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  NSObject *v135;
  objc_class *v136;
  int v137;
  const char *v138;
  const char *v139;
  int v140;
  char *v141;
  NSObject *v142;
  void *v143;
  uint64_t v144;
  void (*v145)(uint64_t, const char *, ...);
  objc_class *v146;
  _BOOL4 v147;
  const char *v148;
  const char *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  NSObject *v153;
  objc_class *v154;
  int v155;
  const char *v156;
  const char *v157;
  id v158;
  void *v159;
  uint64_t v160;
  void (*v161)(uint64_t, const char *, ...);
  objc_class *v162;
  _BOOL4 v163;
  const char *v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  NSObject *v168;
  objc_class *v169;
  int v170;
  const char *v171;
  const char *v172;
  void *v173;
  uint64_t v174;
  void (*v175)(uint64_t, const char *, ...);
  objc_class *v176;
  _BOOL4 v177;
  const char *v178;
  const char *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  objc_class *v183;
  int v184;
  const char *v185;
  const char *v186;
  id v187;
  char *v188;
  const char *v190;
  const char *v191;
  const char *v192;
  const char *v193;
  const char *v194;
  const char *v195;
  const char *v196;
  const char *Name;
  const char *v198;
  const char *v199;
  const char *v200;
  const char *v201;
  const char *v202;
  const char *v203;
  id v204;
  id v205;
  id v206;
  char *v207;
  char *v208;
  id v209;
  void *v210;
  unsigned int v211;
  void *v212;
  id v213;
  os_log_t log;
  NSObject *loga;
  id v217;
  id v218;
  char v219;
  id v220;
  id v221;
  id v222;
  uint8_t buf[4];
  int v224;
  __int16 v225;
  const char *v226;
  __int16 v227;
  const char *v228;
  __int16 v229;
  int v230;
  __int16 v231;
  _BYTE v232[10];
  int v233;
  __int16 v234;
  char *v235;

  v8 = a4;
  v217 = a5;
  if (!a1)
  {
    v32 = 0;
    v11 = v8;
    goto LABEL_154;
  }
  v9 = objc_msgSend(v8, "count");
  if ((unint64_t)v9 >= 0xC)
    v10 = 12;
  else
    v10 = (uint64_t)v9;
  v11 = v8;
  if (v10)
  {
    v211 = a3;
    v12 = 0;
    v213 = v8;
    do
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v15 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("requireTransientAuth:uid:applets:authorization:");
        v19 = 45;
        if (isMetaClass)
          v19 = 43;
        v15(6, "%c[%{public}s %{public}s]:%i Disabling transient authorization on %u:%u applets", v19, ClassName, Name, 1347, v12, v10);
      }
      v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v21 = NFSharedLogGetLogger(v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v23 = object_getClass(a1);
        if (class_isMetaClass(v23))
          v24 = 43;
        else
          v24 = 45;
        v25 = object_getClassName(a1);
        v26 = sel_getName("requireTransientAuth:uid:applets:authorization:");
        *(_DWORD *)buf = 67110402;
        v224 = v24;
        v225 = 2082;
        v226 = v25;
        v227 = 2082;
        v228 = v26;
        v229 = 1024;
        v230 = 1347;
        v231 = 1024;
        *(_DWORD *)v232 = v12;
        *(_WORD *)&v232[4] = 1024;
        *(_DWORD *)&v232[6] = v10;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Disabling transient authorization on %u:%u applets", buf, 0x2Eu);
      }

      v27 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "subarrayWithRange:", v12, v10));
      v28 = v217;
      v222 = 0;
      v29 = objc_msgSend(a1, "selectCRSWithError:", &v222);
      v30 = v222;
      v31 = v30;
      if (v30)
      {
        if (objc_msgSend(v30, "code"))
          v32 = (uint64_t)objc_msgSend(v31, "code");
        else
          v32 = 16;
      }
      else
      {
        if (a2)
        {
          v32 = sub_1000B9F4C((uint64_t)a1, 1, v27, 0);
          goto LABEL_147;
        }
        if (v217)
        {
          v33 = kdebug_trace(724566148, 0, 0, 0, 0);
          v34 = NFSharedSignpostLog(v33);
          v32 = objc_claimAutoreleasedReturnValue(v34);
          if (os_signpost_enabled((os_log_t)v32))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, (os_log_t)v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetHostChallenge in", buf, 2u);
          }

          v221 = 0;
          LODWORD(v32) = sub_1002088C0((uint64_t)NFSSEWrapper, &v221);
          log = (os_log_t)v221;
          v35 = kdebug_trace(724566148, 1, 0, 0, 0);
          v36 = NFSharedSignpostLog(v35);
          v37 = objc_claimAutoreleasedReturnValue(v36);
          if (os_signpost_enabled(v37))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseGetHostChallenge out", buf, 2u);
          }

          v38 = log;
          if (!log || (_DWORD)v32)
          {
            v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v73 = NFLogGetLogger(v72);
            if (v73)
            {
              v74 = (void (*)(uint64_t, const char *, ...))v73;
              v75 = object_getClass(a1);
              v76 = class_isMetaClass(v75);
              v77 = object_getClassName(a1);
              v199 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
              v78 = 45;
              if (v76)
                v78 = 43;
              v74(3, "%c[%{public}s %{public}s]:%i Failed to get host challenge", v78, v77, v199, 1280);
            }
            v79 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v80 = NFSharedLogGetLogger(v79);
            v81 = objc_claimAutoreleasedReturnValue(v80);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
            {
              v82 = object_getClass(a1);
              if (class_isMetaClass(v82))
                v83 = 43;
              else
                v83 = 45;
              v84 = object_getClassName(a1);
              v85 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
              *(_DWORD *)buf = 67109890;
              v224 = v83;
              v225 = 2082;
              v226 = v84;
              v227 = 2082;
              v228 = v85;
              v229 = 1024;
              v230 = 1280;
              _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get host challenge", buf, 0x22u);
            }

            if ((_DWORD)v32)
              v32 = v32;
            else
              v32 = 6;
          }
          else
          {
            if (-[NSObject length](log, "length") == (id)8)
            {
              v220 = 0;
              v32 = sub_1000B7998(a1, log, &v220);
              v39 = v220;
              v212 = v39;
              if ((_DWORD)v32)
              {
                v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v41 = NFLogGetLogger(v40);
                if (v41)
                {
                  v42 = (void (*)(uint64_t, const char *, ...))v41;
                  v43 = object_getClass(a1);
                  v44 = class_isMetaClass(v43);
                  v45 = object_getClassName(a1);
                  v46 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
                  if (v32 >= 0x47)
                    v47 = 71;
                  else
                    v47 = v32;
                  v207 = off_1002EAC00[v47];
                  v48 = 45;
                  if (v44)
                    v48 = 43;
                  v190 = v45;
                  v11 = v213;
                  v42(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v48, v190, v46, 1292, CFSTR("Failed to authenticate"), v32, v207);
                }
                v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v50 = NFSharedLogGetLogger(v49);
                v51 = objc_claimAutoreleasedReturnValue(v50);
                if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
                {
                  v52 = object_getClass(a1);
                  if (class_isMetaClass(v52))
                    v53 = 43;
                  else
                    v53 = 45;
                  v54 = object_getClassName(a1);
                  v55 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
                  if (v32 >= 0x47)
                    v56 = 71;
                  else
                    v56 = v32;
                  v57 = off_1002EAC00[v56];
                  *(_DWORD *)buf = 67110658;
                  v224 = v53;
                  v11 = v213;
                  v225 = 2082;
                  v226 = v54;
                  v227 = 2082;
                  v228 = v55;
                  v229 = 1024;
                  v230 = 1292;
                  v231 = 2112;
                  *(_QWORD *)v232 = CFSTR("Failed to authenticate");
                  *(_WORD *)&v232[8] = 1024;
                  v233 = v32;
                  v234 = 2080;
                  v235 = v57;
                  _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", buf, 0x3Cu);
                }

                v38 = log;
                goto LABEL_145;
              }
              if (objc_msgSend(v39, "length") == (id)16)
              {
                v219 = 0;
                v102 = kdebug_trace(724566148, 0, 0, 0, 0);
                v103 = NFSharedSignpostLog(v102);
                v104 = objc_claimAutoreleasedReturnValue(v103);
                if (os_signpost_enabled(v104))
                {
                  *(_WORD *)buf = 0;
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v104, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseAuthorize out", buf, 2u);
                }

                v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData"));
                v218 = 0;
                v106 = sub_100208AA4((uint64_t)NFSSEWrapper, 6, v28, v105, v211, log, v212, &v219, &v218, 0, 0, 0, 0);
                v210 = (void *)objc_claimAutoreleasedReturnValue(v106);
                v209 = v218;

                v107 = kdebug_trace(724566148, 1, 0, 0, 0);
                v108 = NFSharedSignpostLog(v107);
                v109 = objc_claimAutoreleasedReturnValue(v108);
                if (os_signpost_enabled(v109))
                {
                  *(_WORD *)buf = 0;
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v109, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseAuthorize out", buf, 2u);
                }

                v11 = v213;
                if (v210)
                {
                  if (objc_msgSend(v210, "length") == (id)8)
                  {
                    v32 = sub_1000B9F4C((uint64_t)a1, 0, v27, v210);
                    if (v32 >= 2)
                    {
                      v110 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                      v111 = NFLogGetLogger(v110);
                      if (v111)
                      {
                        v112 = (void (*)(uint64_t, const char *, ...))v111;
                        v113 = object_getClass(a1);
                        v114 = class_isMetaClass(v113);
                        v115 = object_getClassName(a1);
                        v200 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
                        v116 = 45;
                        if (v114)
                          v116 = 43;
                        v192 = v115;
                        v11 = v213;
                        v112(3, "%c[%{public}s %{public}s]:%i Failed to disable transient auth requirement for applets %{public}@", v116, v192, v200, 1332, v27);
                      }
                      v117 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                      v118 = NFSharedLogGetLogger(v117);
                      v119 = objc_claimAutoreleasedReturnValue(v118);
                      if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
                      {
                        v120 = object_getClass(a1);
                        if (class_isMetaClass(v120))
                          v121 = 43;
                        else
                          v121 = 45;
                        v122 = object_getClassName(a1);
                        v123 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
                        *(_DWORD *)buf = 67110146;
                        v224 = v121;
                        v11 = v213;
                        v225 = 2082;
                        v226 = v122;
                        v227 = 2082;
                        v228 = v123;
                        v229 = 1024;
                        v230 = 1332;
                        v231 = 2114;
                        *(_QWORD *)v232 = v27;
                        _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to disable transient auth requirement for applets %{public}@", buf, 0x2Cu);
                      }

                      v124 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                      v125 = NFLogGetLogger(v124);
                      if (v125)
                      {
                        v126 = (void (*)(uint64_t, const char *, ...))v125;
                        v127 = object_getClass(a1);
                        v128 = class_isMetaClass(v127);
                        v129 = object_getClassName(a1);
                        v130 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
                        if (v32 >= 0x47)
                          v131 = 71;
                        else
                          v131 = v32;
                        v208 = off_1002EAC00[v131];
                        v132 = 45;
                        if (v128)
                          v132 = 43;
                        v193 = v129;
                        v11 = v213;
                        v126(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v132, v193, v130, 1333, CFSTR("Returned"), v32, v208);
                      }
                      v133 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                      v134 = NFSharedLogGetLogger(v133);
                      v135 = objc_claimAutoreleasedReturnValue(v134);
                      if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
                      {
                        v136 = object_getClass(a1);
                        if (class_isMetaClass(v136))
                          v137 = 43;
                        else
                          v137 = 45;
                        v138 = object_getClassName(a1);
                        v139 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
                        if (v32 >= 0x47)
                          v140 = 71;
                        else
                          v140 = v32;
                        v141 = off_1002EAC00[v140];
                        *(_DWORD *)buf = 67110658;
                        v224 = v137;
                        v11 = v213;
                        v225 = 2082;
                        v226 = v138;
                        v227 = 2082;
                        v228 = v139;
                        v229 = 1024;
                        v230 = 1333;
                        v231 = 2112;
                        *(_QWORD *)v232 = CFSTR("Returned");
                        *(_WORD *)&v232[8] = 1024;
                        v233 = v32;
                        v234 = 2080;
                        v235 = v141;
                        _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", buf, 0x3Cu);
                      }
                      v142 = v135;
                      v38 = log;
                      goto LABEL_143;
                    }
LABEL_144:

                    goto LABEL_145;
                  }
                  v173 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v174 = NFLogGetLogger(v173);
                  if (v174)
                  {
                    v175 = (void (*)(uint64_t, const char *, ...))v174;
                    v176 = object_getClass(a1);
                    v177 = class_isMetaClass(v176);
                    v178 = object_getClassName(a1);
                    v179 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
                    v206 = objc_msgSend(v210, "length");
                    v203 = v179;
                    v38 = log;
                    v180 = 45;
                    if (v177)
                      v180 = 43;
                    v196 = v178;
                    v11 = v213;
                    v175(3, "%c[%{public}s %{public}s]:%i Invalid cryptogram length: %lu", v180, v196, v203, 1326, v206);
                  }
                  v181 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v182 = NFSharedLogGetLogger(v181);
                  loga = objc_claimAutoreleasedReturnValue(v182);
                  if (os_log_type_enabled(loga, OS_LOG_TYPE_ERROR))
                  {
                    v183 = object_getClass(a1);
                    if (class_isMetaClass(v183))
                      v184 = 43;
                    else
                      v184 = 45;
                    v185 = object_getClassName(a1);
                    v186 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
                    v187 = objc_msgSend(v210, "length");
                    *(_DWORD *)buf = 67110146;
                    v224 = v184;
                    v225 = 2082;
                    v226 = v185;
                    v227 = 2082;
                    v228 = v186;
                    v11 = v213;
                    v229 = 1024;
                    v230 = 1326;
                    v231 = 2048;
                    *(_QWORD *)v232 = v187;
                    _os_log_impl((void *)&_mh_execute_header, loga, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid cryptogram length: %lu", buf, 0x2Cu);
                  }
                  v32 = 13;
                  v142 = loga;
                }
                else
                {
                  v159 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v160 = NFLogGetLogger(v159);
                  if (v160)
                  {
                    v161 = (void (*)(uint64_t, const char *, ...))v160;
                    v162 = object_getClass(a1);
                    v163 = class_isMetaClass(v162);
                    v164 = object_getClassName(a1);
                    v202 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
                    v165 = 45;
                    if (v163)
                      v165 = 43;
                    v195 = v164;
                    v11 = v213;
                    v161(3, "%c[%{public}s %{public}s]:%i Failed to generate cryptogram", v165, v195, v202, 1322);
                  }
                  v166 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v167 = NFSharedLogGetLogger(v166);
                  v168 = objc_claimAutoreleasedReturnValue(v167);
                  if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
                  {
                    v169 = object_getClass(a1);
                    if (class_isMetaClass(v169))
                      v170 = 43;
                    else
                      v170 = 45;
                    v171 = object_getClassName(a1);
                    v172 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
                    *(_DWORD *)buf = 67109890;
                    v224 = v170;
                    v11 = v213;
                    v225 = 2082;
                    v226 = v171;
                    v227 = 2082;
                    v228 = v172;
                    v229 = 1024;
                    v230 = 1322;
                    _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to generate cryptogram", buf, 0x22u);
                  }
                  v142 = v168;
                  v32 = 8;
                }
LABEL_143:

                goto LABEL_144;
              }
              v143 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v144 = NFLogGetLogger(v143);
              if (v144)
              {
                v145 = (void (*)(uint64_t, const char *, ...))v144;
                v146 = object_getClass(a1);
                v147 = class_isMetaClass(v146);
                v148 = object_getClassName(a1);
                v149 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
                v205 = objc_msgSend(v212, "length");
                v201 = v149;
                v38 = log;
                v150 = 45;
                if (v147)
                  v150 = 43;
                v194 = v148;
                v11 = v213;
                v145(3, "%c[%{public}s %{public}s]:%i Invalid authenticate response length: %lu", v150, v194, v201, 1296, v205);
              }
              v151 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v152 = NFSharedLogGetLogger(v151);
              v153 = objc_claimAutoreleasedReturnValue(v152);
              if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
              {
                v154 = object_getClass(a1);
                if (class_isMetaClass(v154))
                  v155 = 43;
                else
                  v155 = 45;
                v156 = object_getClassName(a1);
                v157 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
                v158 = objc_msgSend(v212, "length");
                *(_DWORD *)buf = 67110146;
                v224 = v155;
                v38 = log;
                v225 = 2082;
                v226 = v156;
                v227 = 2082;
                v228 = v157;
                v11 = v213;
                v229 = 1024;
                v230 = 1296;
                v231 = 2048;
                *(_QWORD *)v232 = v158;
                _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid authenticate response length: %lu", buf, 0x2Cu);
              }

              v32 = 13;
LABEL_145:

LABEL_146:
              goto LABEL_147;
            }
            v86 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v87 = NFLogGetLogger(v86);
            if (v87)
            {
              v88 = (void (*)(uint64_t, const char *, ...))v87;
              v89 = object_getClass(a1);
              v90 = class_isMetaClass(v89);
              v91 = object_getClassName(a1);
              v92 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
              v204 = -[NSObject length](log, "length");
              v93 = 45;
              if (v90)
                v93 = 43;
              v88(3, "%c[%{public}s %{public}s]:%i Invalid host challenge length: %lu", v93, v91, v92, 1284, v204);
            }
            v94 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v95 = NFSharedLogGetLogger(v94);
            v96 = objc_claimAutoreleasedReturnValue(v95);
            if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
            {
              v97 = object_getClass(a1);
              if (class_isMetaClass(v97))
                v98 = 43;
              else
                v98 = 45;
              v99 = object_getClassName(a1);
              v100 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
              v101 = -[NSObject length](log, "length");
              *(_DWORD *)buf = 67110146;
              v224 = v98;
              v225 = 2082;
              v226 = v99;
              v227 = 2082;
              v228 = v100;
              v229 = 1024;
              v230 = 1284;
              v231 = 2048;
              *(_QWORD *)v232 = v101;
              _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid host challenge length: %lu", buf, 0x2Cu);
            }

            v32 = 13;
          }
          v11 = v213;
          v38 = log;
          goto LABEL_146;
        }
        v58 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v59 = NFLogGetLogger(v58);
        if (v59)
        {
          v60 = (void (*)(uint64_t, const char *, ...))v59;
          v61 = object_getClass(a1);
          v62 = class_isMetaClass(v61);
          v63 = object_getClassName(a1);
          v198 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
          v64 = 45;
          if (v62)
            v64 = 43;
          v191 = v63;
          v11 = v213;
          v60(3, "%c[%{public}s %{public}s]:%i Missing SSE handle", v64, v191, v198, 1268);
        }
        v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v66 = NFSharedLogGetLogger(v65);
        v67 = objc_claimAutoreleasedReturnValue(v66);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          v68 = object_getClass(a1);
          if (class_isMetaClass(v68))
            v69 = 43;
          else
            v69 = 45;
          v70 = object_getClassName(a1);
          v71 = sel_getName("_requireTransientAuth:uid:applets:authorization:");
          *(_DWORD *)buf = 67109890;
          v224 = v69;
          v225 = 2082;
          v226 = v70;
          v11 = v213;
          v227 = 2082;
          v228 = v71;
          v229 = 1024;
          v230 = 1268;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing SSE handle", buf, 0x22u);
        }

        v32 = 9;
      }
LABEL_147:

      if ((_DWORD)v32)
      {

        goto LABEL_154;
      }
      v12 += v10;
      v188 = (char *)objc_msgSend(v11, "count");
      if ((unint64_t)&v188[-v12] >= 0xC)
        v10 = 12;
      else
        v10 = (uint64_t)&v188[-v12];

    }
    while (v10);
  }
  v32 = 0;
LABEL_154:

  return v32;
}

uint64_t sub_1001E9748(void *a1, void *a2, unsigned int a3, _BYTE *a4)
{
  id v7;
  id v8;
  NSMutableArray *v9;
  id v10;
  void *specific;
  uint64_t Logger;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSMutableArray *v19;
  objc_class *v20;
  int v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  void *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  void *j;
  void *v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void (*v44)(uint64_t, const char *, ...);
  objc_class *v45;
  _BOOL4 v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  NSObject *v51;
  objc_class *v52;
  int v53;
  const char *v54;
  const char *v55;
  id v56;
  void *v57;
  uint64_t v58;
  void (*v59)(uint64_t, const char *, ...);
  objc_class *v60;
  _BOOL4 v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  NSObject *v66;
  objc_class *v67;
  int v68;
  const char *v69;
  const char *v70;
  const char *ClassName;
  const char *Name;
  const char *v74;
  const char *v75;
  unsigned int v76;
  _BYTE *v77;
  id v78;
  void *v79;
  id v80;
  NSMutableArray *v81;
  id v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  id v91;
  uint8_t buf[4];
  int v93;
  __int16 v94;
  const char *v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  int v99;
  __int16 v100;
  NSMutableArray *v101;
  __int16 v102;
  int v103;
  _BYTE v104[128];
  _BYTE v105[128];

  v7 = a2;
  if (a1)
  {
    v91 = 0;
    v8 = sub_10022C46C(a1, &v91);
    v9 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(v8);
    v10 = v91;
    if (v9)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v13 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("restoreTransientAuthForAllAppletsExcept:uid:updated:");
        v16 = 45;
        if (isMetaClass)
          v16 = 43;
        v13(3, "%c[%{public}s %{public}s]:%i getApplets failed - %{public}@", v16, ClassName, Name, 1365, v9);
      }
      v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v18 = NFSharedLogGetLogger(v17);
      v19 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(&v19->super.super, OS_LOG_TYPE_ERROR))
      {
        v20 = object_getClass(a1);
        if (class_isMetaClass(v20))
          v21 = 43;
        else
          v21 = 45;
        v22 = object_getClassName(a1);
        v23 = sel_getName("restoreTransientAuthForAllAppletsExcept:uid:updated:");
        *(_DWORD *)buf = 67110146;
        v93 = v21;
        v94 = 2082;
        v95 = v22;
        v96 = 2082;
        v97 = v23;
        v98 = 1024;
        v99 = 1365;
        v100 = 2114;
        v101 = v9;
        _os_log_impl((void *)&_mh_execute_header, &v19->super.super, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i getApplets failed - %{public}@", buf, 0x2Cu);
      }
      v24 = 6;
    }
    else
    {
      v76 = a3;
      v77 = a4;
      v19 = objc_opt_new(NSMutableArray);
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      v78 = v10;
      v25 = v10;
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v87, v105, 16);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)v88;
        v80 = v7;
        v81 = v19;
        v82 = a1;
        v79 = v25;
        do
        {
          for (i = 0; i != v27; i = (char *)i + 1)
          {
            if (*(_QWORD *)v88 != v28)
              objc_enumerationMutation(v25);
            v30 = *(void **)(*((_QWORD *)&v87 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v30, "authTransientConfigurable")
              && (objc_msgSend(v30, "authTransientSupport") & 1) == 0
              && (objc_msgSend(v30, "isGPLocked") & 1) == 0
              && objc_msgSend(v30, "lifecycleState") == 15)
            {
              v85 = 0u;
              v86 = 0u;
              v83 = 0u;
              v84 = 0u;
              v31 = v7;
              v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v83, v104, 16);
              if (v32)
              {
                v33 = v32;
                v34 = *(_QWORD *)v84;
                while (2)
                {
                  for (j = 0; j != v33; j = (char *)j + 1)
                  {
                    if (*(_QWORD *)v84 != v34)
                      objc_enumerationMutation(v31);
                    v36 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * (_QWORD)j);
                    v37 = objc_opt_class(NSString);
                    if ((objc_opt_isKindOfClass(v36, v37) & 1) == 0)
                    {
                      v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                      v58 = NFLogGetLogger(v57);
                      if (v58)
                      {
                        v59 = (void (*)(uint64_t, const char *, ...))v58;
                        v60 = object_getClass(v82);
                        v61 = class_isMetaClass(v60);
                        v62 = object_getClassName(v82);
                        v75 = sel_getName("restoreTransientAuthForAllAppletsExcept:uid:updated:");
                        v63 = 45;
                        if (v61)
                          v63 = 43;
                        v59(3, "%c[%{public}s %{public}s]:%i aids provided are not of NSString class", v63, v62, v75, 1382);
                      }
                      v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                      v65 = NFSharedLogGetLogger(v64);
                      v66 = objc_claimAutoreleasedReturnValue(v65);
                      v7 = v80;
                      v19 = v81;
                      v10 = v78;
                      v9 = 0;
                      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                      {
                        v67 = object_getClass(v82);
                        if (class_isMetaClass(v67))
                          v68 = 43;
                        else
                          v68 = 45;
                        v69 = object_getClassName(v82);
                        v70 = sel_getName("restoreTransientAuthForAllAppletsExcept:uid:updated:");
                        *(_DWORD *)buf = 67109890;
                        v93 = v68;
                        v94 = 2082;
                        v95 = v69;
                        v96 = 2082;
                        v97 = v70;
                        v98 = 1024;
                        v99 = 1382;
                        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i aids provided are not of NSString class", buf, 0x22u);
                      }

                      v24 = 10;
                      goto LABEL_60;
                    }
                    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "identifier"));
                    v39 = objc_msgSend(v36, "caseInsensitiveCompare:", v38);

                    if (!v39)
                    {

                      v7 = v80;
                      v19 = v81;
                      a1 = v82;
                      v25 = v79;
                      goto LABEL_33;
                    }
                  }
                  v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v83, v104, 16);
                  v25 = v79;
                  v7 = v80;
                  if (v33)
                    continue;
                  break;
                }
              }

              v19 = v81;
              -[NSMutableArray addObject:](v81, "addObject:", v30);
              a1 = v82;
            }
LABEL_33:
            ;
          }
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v87, v105, 16);
        }
        while (v27);
      }

      if (-[NSMutableArray count](v19, "count"))
      {
        v40 = sub_1001E8534(a1, 1, v76, v19, 0);
        v9 = 0;
        if ((_DWORD)v40)
        {
          v41 = v40;
          v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v43 = NFLogGetLogger(v42);
          if (v43)
          {
            v44 = (void (*)(uint64_t, const char *, ...))v43;
            v45 = object_getClass(a1);
            v46 = class_isMetaClass(v45);
            v47 = object_getClassName(a1);
            v74 = sel_getName("restoreTransientAuthForAllAppletsExcept:uid:updated:");
            v48 = 45;
            if (v46)
              v48 = 43;
            v44(4, "%c[%{public}s %{public}s]:%i Failed to restore transient auth to applets %{public}@ : %d", v48, v47, v74, 1400, v19, v41);
          }
          v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v50 = NFSharedLogGetLogger(v49);
          v51 = objc_claimAutoreleasedReturnValue(v50);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            v52 = object_getClass(a1);
            if (class_isMetaClass(v52))
              v53 = 43;
            else
              v53 = 45;
            v54 = object_getClassName(a1);
            v55 = sel_getName("restoreTransientAuthForAllAppletsExcept:uid:updated:");
            *(_DWORD *)buf = 67110402;
            v93 = v53;
            v94 = 2082;
            v95 = v54;
            v96 = 2082;
            v97 = v55;
            v98 = 1024;
            v99 = 1400;
            v100 = 2114;
            v101 = v19;
            v102 = 1024;
            v103 = v41;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to restore transient auth to applets %{public}@ : %d", buf, 0x32u);
          }

        }
        v56 = sub_10022D638(a1, v19);
        v10 = v78;
        v24 = 0;
        if (v77)
          *v77 = 1;
      }
      else
      {
        v24 = 0;
        v10 = v78;
        v9 = 0;
      }
    }
LABEL_60:

  }
  else
  {
    v24 = 0;
  }

  return v24;
}

id sub_1001E9E00(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *specific;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  unsigned int v23;
  unsigned int v24;
  id v25;
  uint64_t v26;
  int v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void (*v32)(uint64_t, const char *, ...);
  objc_class *v33;
  _BOOL4 v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  objc_class *v40;
  int v41;
  const char *v42;
  const char *v43;
  id v44;
  void *v45;
  void **v46;
  NSErrorUserInfoKey *v47;
  void *v48;
  uint64_t v49;
  void (*v50)(uint64_t, const char *, ...);
  objc_class *v51;
  _BOOL4 v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  objc_class *v58;
  int v59;
  const char *v60;
  const char *v61;
  void *v62;
  const char *ClassName;
  const char *Name;
  const char *v66;
  const char *v67;
  id v68;
  NSErrorUserInfoKey v69;
  void *v70;
  NSErrorUserInfoKey v71;
  void *v72;
  NSErrorUserInfoKey v73;
  void *v74;
  uint8_t buf[4];
  int v76;
  __int16 v77;
  const char *v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  int v82;
  __int16 v83;
  id v84;

  v5 = a2;
  v6 = a3;
  v68 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "selectCRSWithError:", &v68));
  v8 = v68;
  if (v8)
  {
    v9 = v8;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v12 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("sendTokenToCRS:mac:");
      v15 = 45;
      if (isMetaClass)
        v15 = 43;
      v12(3, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", v15, ClassName, Name, 1470, v9);
    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = object_getClass(a1);
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      v21 = object_getClassName(a1);
      v22 = sel_getName("sendTokenToCRS:mac:");
      *(_DWORD *)buf = 67110146;
      v76 = v20;
      v77 = 2082;
      v78 = v21;
      v79 = 2082;
      v80 = v22;
      v81 = 1024;
      v82 = 1470;
      v83 = 2114;
      v84 = v9;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", buf, 0x2Cu);
    }
    goto LABEL_39;
  }
  if (!v7)
  {
    v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v31 = NFLogGetLogger(v30);
    if (v31)
    {
      v32 = (void (*)(uint64_t, const char *, ...))v31;
      v33 = object_getClass(a1);
      v34 = class_isMetaClass(v33);
      v35 = object_getClassName(a1);
      v66 = sel_getName("sendTokenToCRS:mac:");
      v36 = 45;
      if (v34)
        v36 = 43;
      v32(3, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting RAPDU", v36, v35, v66, 1474);
    }
    v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v38 = NFSharedLogGetLogger(v37);
    v39 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v40 = object_getClass(a1);
      if (class_isMetaClass(v40))
        v41 = 43;
      else
        v41 = 45;
      v42 = object_getClassName(a1);
      v43 = sel_getName("sendTokenToCRS:mac:");
      *(_DWORD *)buf = 67109890;
      v76 = v41;
      v77 = 2082;
      v78 = v42;
      v79 = 2082;
      v80 = v43;
      v81 = 1024;
      v82 = 1474;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting RAPDU", buf, 0x22u);
    }

    v44 = objc_alloc((Class)NSError);
    v18 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v73 = NSLocalizedDescriptionKey;
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v74 = v45;
    v46 = &v74;
    v47 = &v73;
    goto LABEL_38;
  }
  if (objc_msgSend(v7, "status") != 36864)
  {
    v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v49 = NFLogGetLogger(v48);
    if (v49)
    {
      v50 = (void (*)(uint64_t, const char *, ...))v49;
      v51 = object_getClass(a1);
      v52 = class_isMetaClass(v51);
      v53 = object_getClassName(a1);
      v67 = sel_getName("sendTokenToCRS:mac:");
      v54 = 45;
      if (v52)
        v54 = 43;
      v50(3, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting0x9000", v54, v53, v67, 1478);
    }
    v55 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v56 = NFSharedLogGetLogger(v55);
    v57 = objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      v58 = object_getClass(a1);
      if (class_isMetaClass(v58))
        v59 = 43;
      else
        v59 = 45;
      v60 = object_getClassName(a1);
      v61 = sel_getName("sendTokenToCRS:mac:");
      *(_DWORD *)buf = 67109890;
      v76 = v59;
      v77 = 2082;
      v78 = v60;
      v79 = 2082;
      v80 = v61;
      v81 = 1024;
      v82 = 1478;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting0x9000", buf, 0x22u);
    }

    v44 = objc_alloc((Class)NSError);
    v18 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v71 = NSLocalizedDescriptionKey;
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v72 = v45;
    v46 = &v72;
    v47 = &v71;
LABEL_38:
    v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v46, v47, 1));
    v9 = objc_msgSend(v44, "initWithDomain:code:userInfo:", v18, 16, v62);

    goto LABEL_39;
  }
  v23 = sub_1000B69F0(a1, v5, v6);
  if (!v23)
  {
    v9 = 0;
    goto LABEL_40;
  }
  v24 = v23;
  v25 = objc_alloc((Class)NSError);
  v18 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v26 = v24;
  v69 = NSLocalizedDescriptionKey;
  if (v24 >= 0x47)
    v27 = 71;
  else
    v27 = v24;
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EAC00[v27]));
  v70 = v28;
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v70, &v69, 1));
  v9 = objc_msgSend(v25, "initWithDomain:code:userInfo:", v18, v26, v29);

LABEL_39:
LABEL_40:

  return v9;
}

void sub_1001EA694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001EA6B4(uint64_t result, uint64_t a2, char a3, _BYTE *a4)
{
  if ((a3 & 0x10) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  *a4 = 1;
  return result;
}

BOOL sub_1001EA6D4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  id v7;
  _BOOL8 v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;

  v6 = a2;
  v7 = objc_msgSend(v6, "length");
  if (v7 <= objc_msgSend(*(id *)(a1 + 32), "length"))
  {
    v9 = *(id *)(a1 + 32);
    if (*(_QWORD *)(a1 + 40) == 1)
    {
      v10 = objc_msgSend(v6, "length");
      v11 = objc_msgSend(*(id *)(a1 + 32), "length");
      v12 = *(void **)(a1 + 32);
      if (v10 == v11)
        v13 = v12;
      else
        v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "substringToIndex:", objc_msgSend(v6, "length")));
      v14 = v13;

      v9 = v14;
    }
    v8 = objc_msgSend(v9, "compare:options:", v6, 11) == 0;

  }
  else
  {
    v8 = 0;
    *a4 = 1;
  }

  return v8;
}

void sub_1001EAC98(_BYTE *a1)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFNumber *Value;
  const __CFNumber *v5;
  CFTypeID TypeID;
  int v7;
  unsigned int v8;
  BOOL v9;
  char v10;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  const __CFString *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  const __CFString *v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint32_t v21;
  void *v22;
  void (*v23)(uint64_t, const char *, ...);
  void *v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  void (*v28)(uint64_t, const char *, ...);
  void *v29;
  uint64_t v30;
  unsigned int valuePtr;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  const __CFString *v37;
  __int16 v38;
  unsigned int v39;

  if (a1)
  {
    objc_opt_self(NFKeyBag);
    a1[14] = MKBGetDeviceLockState(0) - 1 < 2;
    if (!a1[12] || !a1[13])
    {
      valuePtr = 0;
      v2 = (const __CFDictionary *)MKBGetDeviceLockStateInfo(0);
      if (v2)
      {
        v3 = v2;
        Value = (const __CFNumber *)CFDictionaryGetValue(v2, kMKBInfoBagState);
        if (Value && (v5 = Value, TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(v5)))
        {
          v7 = CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
          CFRelease(v3);
          if (v7)
          {
            v8 = valuePtr;
            v9 = (valuePtr & 0x2000) == 0;
            a1[12] = (valuePtr & 6) != 0;
            if ((v8 & 6) == 0)
              v9 = 0;
            v10 = (~v8 & 0xA000) == 0 || v9;
            a1[13] = v10;
            specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
            if (Logger)
            {
              if ((valuePtr & 0x2000) != 0)
                v13 = &stru_1002ED8A8;
              else
                v13 = CFSTR(" not");
              Logger(6, "%s:%i Keybag is%@ SE entangled, state is 0x%x", "-[NFKeyBag _updateFirstUnlockStatus]", 84, v13, valuePtr);
            }
            v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v15 = NFSharedLogGetLogger(v14);
            v16 = objc_claimAutoreleasedReturnValue(v15);
            if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              goto LABEL_33;
            if ((valuePtr & 0x2000) != 0)
              v17 = &stru_1002ED8A8;
            else
              v17 = CFSTR(" not");
            *(_DWORD *)buf = 136446978;
            v33 = "-[NFKeyBag _updateFirstUnlockStatus]";
            v34 = 1024;
            v35 = 84;
            v36 = 2112;
            v37 = v17;
            v38 = 1024;
            v39 = valuePtr;
            v18 = "%{public}s:%i Keybag is%@ SE entangled, state is 0x%x";
            v19 = v16;
            v20 = OS_LOG_TYPE_DEFAULT;
            v21 = 34;
LABEL_32:
            _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, buf, v21);
LABEL_33:

            return;
          }
        }
        else
        {
          CFRelease(v3);
        }
      }
      v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v22);
      if (v23)
        v23(3, "%s:%i Failed to query unlock state", "GetKeybagState", 39);
      v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v25 = NFSharedLogGetLogger(v24);
      v26 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v33 = "GetKeybagState";
        v34 = 1024;
        v35 = 39;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to query unlock state", buf, 0x12u);
      }

      *((_WORD *)a1 + 6) = 257;
      v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v27);
      if (v28)
        v28(3, "%s:%i Error getting device unlock state", "-[NFKeyBag _updateFirstUnlockStatus]", 93);
      v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v30 = NFSharedLogGetLogger(v29);
      v16 = objc_claimAutoreleasedReturnValue(v30);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        goto LABEL_33;
      *(_DWORD *)buf = 136446466;
      v33 = "-[NFKeyBag _updateFirstUnlockStatus]";
      v34 = 1024;
      v35 = 93;
      v18 = "%{public}s:%i Error getting device unlock state";
      v19 = v16;
      v20 = OS_LOG_TYPE_ERROR;
      v21 = 18;
      goto LABEL_32;
    }
  }
}

void sub_1001EAFF0(void *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  id *v14;
  int v15;
  void *v16;
  void (*v17)(uint64_t, const char *, ...);
  objc_class *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  const char *v27;
  const char *v28;
  int v29;
  int v30;
  int v31;
  void (**v32)(id, BOOL);
  const char *Name;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;

  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_lockStateChanged");
      v8 = 45;
      if (isMetaClass)
        v8 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 132);
    }
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFSharedLogGetLogger(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = object_getClass(a1);
      if (class_isMetaClass(v12))
        v13 = 43;
      else
        v13 = 45;
      *(_DWORD *)buf = 67109890;
      v35 = v13;
      v36 = 2082;
      v37 = object_getClassName(a1);
      v38 = 2082;
      v39 = sel_getName("_lockStateChanged");
      v40 = 1024;
      v41 = 132;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    v14 = a1;
    objc_sync_enter(v14);
    sub_1001EAC98(v14);
    v15 = *((unsigned __int8 *)v14 + 14);
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v16);
    if (v17)
    {
      v18 = object_getClass(v14);
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      v20 = object_getClassName(v14);
      v21 = sel_getName("_lockStateChanged");
      v17(6, "%c[%{public}s %{public}s]:%i locked=%d beenUnlocked=%d beenSEUnlocked=%d", v19, v20, v21, 145, *((unsigned __int8 *)v14 + 14), *((unsigned __int8 *)v14 + 12), *((unsigned __int8 *)v14 + 13));
    }
    v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v23 = NFSharedLogGetLogger(v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = object_getClass(v14);
      if (class_isMetaClass(v25))
        v26 = 43;
      else
        v26 = 45;
      v27 = object_getClassName(v14);
      v28 = sel_getName("_lockStateChanged");
      v29 = *((unsigned __int8 *)v14 + 14);
      v30 = *((unsigned __int8 *)v14 + 12);
      v31 = *((unsigned __int8 *)v14 + 13);
      *(_DWORD *)buf = 67110658;
      v35 = v26;
      v36 = 2082;
      v37 = v27;
      v38 = 2082;
      v39 = v28;
      v40 = 1024;
      v41 = 145;
      v42 = 1024;
      v43 = v29;
      v44 = 1024;
      v45 = v30;
      v46 = 1024;
      v47 = v31;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i locked=%d beenUnlocked=%d beenSEUnlocked=%d", buf, 0x34u);
    }

    v32 = (void (**)(id, BOOL))objc_retainBlock(v14[2]);
    objc_sync_exit(v14);

    if (v32)
      v32[2](v32, v15 != 0);

  }
}

void sub_1001EB30C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001EB334(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  int *v7;
  id v8;
  void *v9;
  _QWORD handler[5];

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = a1;
    objc_sync_enter(v7);
    v8 = objc_retainBlock(v6);
    v9 = (void *)*((_QWORD *)v7 + 2);
    *((_QWORD *)v7 + 2) = v8;

    objc_sync_exit(v7);
    if (v7[2] == -1)
    {
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1001EB408;
      handler[3] = &unk_1002EAE98;
      handler[4] = v7;
      notify_register_dispatch("com.apple.mobile.keybagd.lock_status", v7 + 2, v5, handler);
      sub_1001EAFF0(v7);
    }
  }

}

void sub_1001EB408(uint64_t a1)
{
  NSObject *v2;
  os_activity_scope_state_s v3;

  v2 = _os_activity_create((void *)&_mh_execute_header, "Lock state changed", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  v3.opaque[0] = 0;
  v3.opaque[1] = 0;
  os_activity_scope_enter(v2, &v3);
  os_activity_scope_leave(&v3);

  sub_1001EAFF0(*(void **)(a1 + 32));
}

void sub_1001EB470(void *a1)
{
  int *v1;
  void *v2;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *Name;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;

  if (a1)
  {
    v1 = a1;
    objc_sync_enter(v1);
    v2 = (void *)*((_QWORD *)v1 + 2);
    *((_QWORD *)v1 + 2) = 0;

    objc_sync_exit(v1);
    if ((v1[2] & 0x80000000) == 0)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v5 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v1);
        Name = sel_getName("unregisterStateChange");
        v9 = 45;
        if (isMetaClass)
          v9 = 43;
        v5(6, "%c[%{public}s %{public}s]:%i Clearing mkb notification", v9, ClassName, Name, 179);
      }
      v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v11 = NFSharedLogGetLogger(v10);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = object_getClass(v1);
        if (class_isMetaClass(v13))
          v14 = 43;
        else
          v14 = 45;
        *(_DWORD *)buf = 67109890;
        v17 = v14;
        v18 = 2082;
        v19 = object_getClassName(v1);
        v20 = 2082;
        v21 = sel_getName("unregisterStateChange");
        v22 = 1024;
        v23 = 179;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Clearing mkb notification", buf, 0x22u);
      }

      notify_cancel(v1[2]);
      v1[2] = -1;
    }
  }
}

BOOL sub_1001EB62C(void *a1)
{
  _BYTE *v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  v1 = a1;
  objc_sync_enter(v1);
  v2 = v1[14] != 0;
  objc_sync_exit(v1);

  return v2;
}

BOOL sub_1001EBAFC(void *a1, uint64_t a2)
{
  _BOOL8 v2;
  __CFString *v4;
  void *v5;
  void *v6;
  const void *v7;
  void *v8;
  void *v9;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v13;
  const char *ClassName;
  const char *Name;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  void *v23;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _BYTE buf[34];
  __int16 v42;
  const void *v43;

  v2 = 0;
  if (a1 && !a2)
  {
    v4 = CFSTR("CN");
    if (!qword_10032AB90)
    {
      *(_OWORD *)buf = off_1002EAEB8;
      *(_QWORD *)&buf[16] = 0;
      qword_10032AB90 = _sl_dlopen(buf, 0);
    }
    if (!qword_10032AB90)
      goto LABEL_36;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v5 = off_10032AB98;
    *(_QWORD *)&buf[24] = off_10032AB98;
    if (!off_10032AB98)
    {
      v6 = sub_1001EBFE4();
      v5 = dlsym(v6, "CPPhoneNumberCopyNetworkCountryCode");
      *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v5;
      off_10032AB98 = v5;
    }
    _Block_object_dispose(buf, 8);
    if (v5)
    {
      v7 = (const void *)((uint64_t (*)(void))v5)();
      if (v7)
      {
LABEL_14:
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
        if (Logger)
        {
          Class = object_getClass(a1);
          if (class_isMetaClass(Class))
            v13 = 43;
          else
            v13 = 45;
          ClassName = object_getClassName(a1);
          Name = sel_getName("_isLastKnownCountryCode:");
          Logger(6, "%c[%{public}s %{public}s]:%i CountryCode is \"%{public}@\"\n", v13, ClassName, Name, 43, v7);
        }
        v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v17 = NFSharedLogGetLogger(v16);
        v18 = objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v19 = object_getClass(a1);
          if (class_isMetaClass(v19))
            v20 = 43;
          else
            v20 = 45;
          v21 = object_getClassName(a1);
          v22 = sel_getName("_isLastKnownCountryCode:");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v20;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = v21;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v22;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = 43;
          v42 = 2114;
          v43 = v7;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i CountryCode is \"%{public}@\"\n", buf, 0x2Cu);
        }

        v2 = objc_msgSend(CFSTR("CN"), "caseInsensitiveCompare:", v7) == 0;
        CFRelease(v7);
        goto LABEL_37;
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v8 = off_10032ABA0;
      *(_QWORD *)&buf[24] = off_10032ABA0;
      if (!off_10032ABA0)
      {
        v9 = sub_1001EBFE4();
        v8 = dlsym(v9, "CPPhoneNumberCopyLastKnownNetworkCountryCode");
        *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v8;
        off_10032ABA0 = v8;
      }
      _Block_object_dispose(buf, 8);
      if (v8)
      {
        v7 = (const void *)((uint64_t (*)(void))v8)();
        if (v7)
          goto LABEL_14;
        v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v23);
        if (v24)
        {
          v25 = object_getClass(a1);
          if (class_isMetaClass(v25))
            v26 = 43;
          else
            v26 = 45;
          v27 = object_getClassName(a1);
          v28 = sel_getName("_isLastKnownCountryCode:");
          v24(6, "%c[%{public}s %{public}s]:%i CountryCode is NULL", v26, v27, v28, 50);
        }
        v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v30 = NFSharedLogGetLogger(v29);
        v31 = objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          v32 = object_getClass(a1);
          if (class_isMetaClass(v32))
            v33 = 43;
          else
            v33 = 45;
          v34 = object_getClassName(a1);
          v35 = sel_getName("_isLastKnownCountryCode:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v33;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = v34;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v35;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = 50;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i CountryCode is NULL", buf, 0x22u);
        }

LABEL_36:
        v2 = 0;
LABEL_37:

        return v2;
      }
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CFStringRef NFCPPhoneNumberCopyLastKnownNetworkCountryCode(void)"));
      objc_msgSend(v39, "handleFailureInFunction:file:lineNumber:description:", v40, CFSTR("NFCoreTelephonyConnection.m"), 19, CFSTR("%s"), dlerror());

    }
    else
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CFStringRef NFCPPhoneNumberCopyNetworkCountryCode(void)"));
      objc_msgSend(v37, "handleFailureInFunction:file:lineNumber:description:", v38, CFSTR("NFCoreTelephonyConnection.m"), 17, CFSTR("%s"), dlerror());

    }
    __break(1u);
  }
  return v2;
}

void sub_1001EBFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1001EBFE4()
{
  void *v0;
  void *v1;
  void *v3;
  void *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_10032AB90)
  {
    v5 = off_1002EAEB8;
    v6 = 0;
    qword_10032AB90 = _sl_dlopen(&v5, &v4);
  }
  v0 = (void *)qword_10032AB90;
  if (!qword_10032AB90)
  {
    v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *AppSupportLibrary(void)"));
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("NFCoreTelephonyConnection.m"), 16, CFSTR("%s"), v4);

    __break(1u);
    goto LABEL_7;
  }
  v1 = v4;
  if (v4)
LABEL_7:
    free(v1);
  return v0;
}

id *sub_1001EC0E8(id *a1, void *a2)
{
  id v4;
  id *v5;
  id v6;
  id v7;
  objc_super v9;

  v4 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)NFScreenStateMonitor;
    v5 = (id *)objc_msgSendSuper2(&v9, "init");
    a1 = v5;
    if (v5)
    {
      objc_storeStrong(v5 + 1, a2);
      objc_storeWeak(a1 + 2, 0);
      v6 = a1[3];
      a1[3] = 0;

      v7 = a1[4];
      a1[4] = 0;

      a1[5] = 0;
      *((_DWORD *)a1 + 12) = -1;
    }
  }

  return a1;
}

void sub_1001EC18C(id *a1, void *a2)
{
  id v3;
  id obj;

  obj = a2;
  if (a1 && (NFIsDarwinOS() & 1) == 0)
  {
    objc_storeWeak(a1 + 2, obj);
    if (obj)
    {
      sub_1001EC218((uint64_t)a1);
      sub_1001EC480((uint64_t)a1);
    }
    else
    {
      objc_msgSend(a1[4], "setTransitionHandler:", 0);
      v3 = a1[4];
      a1[4] = 0;

      objc_msgSend(a1[3], "invalidate");
      sub_1001EC6C8((uint64_t)a1);
    }
  }

}

void sub_1001EC218(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *Name;
  _QWORD v21[4];
  id v22;
  id location;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;

  if (a1 && !*(_QWORD *)(a1 + 32))
  {
    if (sub_1001EC70C() && sub_1001EC7C4())
    {
      v2 = objc_msgSend(sub_1001EC70C(), "configurationForDefaultMainDisplayMonitor");
      v3 = objc_claimAutoreleasedReturnValue(v2);
      v4 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v3;

      objc_initWeak(&location, (id)a1);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_100006F84;
      v21[3] = &unk_1002EAF00;
      objc_copyWeak(&v22, &location);
      objc_msgSend(*(id *)(a1 + 32), "setTransitionHandler:", v21);
      v5 = objc_msgSend(sub_1001EC7C4(), "monitorWithConfiguration:", *(_QWORD *)(a1 + 32));
      v6 = objc_claimAutoreleasedReturnValue(v5);
      v7 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v6;

      objc_destroyWeak(&v22);
      objc_destroyWeak(&location);
    }
    else
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v10 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("_registerFromFrontboardServices");
        v14 = 45;
        if (isMetaClass)
          v14 = 43;
        v10(3, "%c[%{public}s %{public}s]:%i FrontBoardServices is not available.", v14, ClassName, Name, 103);
      }
      v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v16 = NFSharedLogGetLogger(v15);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = object_getClass((id)a1);
        if (class_isMetaClass(v18))
          v19 = 43;
        else
          v19 = 45;
        LODWORD(location) = 67109890;
        HIDWORD(location) = v19;
        v24 = 2082;
        v25 = object_getClassName((id)a1);
        v26 = 2082;
        v27 = sel_getName("_registerFromFrontboardServices");
        v28 = 1024;
        v29 = 103;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i FrontBoardServices is not available.", (uint8_t *)&location, 0x22u);
      }

    }
  }
}

void sub_1001EC458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001EC480(uint64_t a1)
{
  void ***v2;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v6;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  void **v16;
  uint64_t v17;
  void (*v18)(uint64_t, int);
  void *v19;
  id v20;
  id location;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;

  if (a1 && NFIsInternalBuild(a1))
  {
    objc_initWeak(&location, (id)a1);
    v16 = _NSConcreteStackBlock;
    v17 = 3221225472;
    v18 = sub_1001EC87C;
    v19 = &unk_1002E68F0;
    objc_copyWeak(&v20, &location);
    v2 = objc_retainBlock(&v16);
    if (notify_register_dispatch("com.apple.stockholm.bg.tag.detect.state", (int *)(a1 + 48), *(dispatch_queue_t *)(a1 + 8), v2))
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass((id)a1);
        if (class_isMetaClass(Class))
          v6 = 43;
        else
          v6 = 45;
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("_registerBGTagDetectOverrideNotifications");
        Logger(4, "%c[%{public}s %{public}s]:%i Fail to register for bg tag detect state change", v6, ClassName, Name, 147, v16, v17, v18, v19);
      }
      v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v10 = NFSharedLogGetLogger(v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = object_getClass((id)a1);
        if (class_isMetaClass(v12))
          v13 = 43;
        else
          v13 = 45;
        v14 = object_getClassName((id)a1);
        v15 = sel_getName("_registerBGTagDetectOverrideNotifications");
        *(_DWORD *)buf = 67109890;
        v23 = v13;
        v24 = 2082;
        v25 = v14;
        v26 = 2082;
        v27 = v15;
        v28 = 1024;
        v29 = 147;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Fail to register for bg tag detect state change", buf, 0x22u);
      }

    }
    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }
}

void sub_1001EC698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1001EC6C8(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = *(unsigned int *)(result + 48);
    if ((_DWORD)result != -1)
    {
      result = notify_is_valid_token(result);
      if ((_DWORD)result)
        result = notify_cancel(*(_DWORD *)(v1 + 48));
      *(_DWORD *)(v1 + 48) = -1;
    }
  }
  return result;
}

id sub_1001EC70C()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_10032ABA8;
  v7 = qword_10032ABA8;
  if (!qword_10032ABA8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1001ECA38;
    v3[3] = &unk_1002E5E30;
    v3[4] = &v4;
    sub_1001ECA38((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1001EC7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001EC7C4()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_10032ABB8;
  v7 = qword_10032ABB8;
  if (!qword_10032ABB8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1001ECAF0;
    v3[3] = &unk_1002E5E30;
    v3[4] = &v4;
    sub_1001ECAF0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1001EC864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001EC87C(uint64_t a1, int a2)
{
  id *WeakRetained;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  id v7;
  char v8;
  id v9;
  os_activity_scope_state_s state;
  uint64_t state64;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    state64 = 0;
    if (!notify_get_state(a2, &state64))
    {
      v4 = state64;
      if (state64 == 1)
        v5 = "screen on update";
      else
        v5 = "screen off update";
      v6 = _os_activity_create((void *)&_mh_execute_header, v5, (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
      state.opaque[0] = 0;
      state.opaque[1] = 0;
      os_activity_scope_enter(v6, &state);
      os_activity_scope_leave(&state);

      v7 = objc_loadWeakRetained(WeakRetained + 2);
      v8 = objc_opt_respondsToSelector(v7, "didScreenStateChange:");

      if ((v8 & 1) != 0)
      {
        v9 = objc_loadWeakRetained(WeakRetained + 2);
        objc_msgSend(v9, "didScreenStateChange:", v4 == 1);

      }
    }
  }

}

BOOL sub_1001EC974(void *a1)
{
  int *v1;
  uint64_t v2;
  int v3;
  uint64_t state64;

  if (!a1)
    return 0;
  v1 = a1;
  objc_sync_enter(v1);
  v2 = *((_QWORD *)v1 + 5);
  objc_sync_exit(v1);

  if (!NFIsInternalBuild() || v2)
    return v2;
  v3 = v1[12];
  if (v3 == -1)
    return 0;
  state64 = 0;
  return !notify_get_state(v3, &state64) && state64 == 1;
}

Class sub_1001ECA38(uint64_t a1)
{
  Class result;
  __int128 v3;
  uint64_t v4;

  if (!qword_10032ABB0)
  {
    v3 = off_1002EAF20;
    v4 = 0;
    qword_10032ABB0 = _sl_dlopen(&v3, 0);
  }
  result = objc_getClass("FBSDisplayLayoutMonitorConfiguration");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_10032ABA8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1001ECAF0(uint64_t a1)
{
  Class result;
  __int128 v3;
  uint64_t v4;

  if (!qword_10032ABB0)
  {
    v3 = off_1002EAF20;
    v4 = 0;
    qword_10032ABB0 = _sl_dlopen(&v3, 0);
  }
  result = objc_getClass("FBSDisplayLayoutMonitor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_10032ABB8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1001ECBA8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *result;
  void *v5;
  __int128 v6;
  uint64_t v7;

  v5 = 0;
  if (!qword_10032ABC0)
  {
    v6 = off_1002EAF38;
    v7 = 0;
    qword_10032ABC0 = _sl_dlopen(&v6, &v5);
  }
  v2 = (void *)qword_10032ABC0;
  if (!qword_10032ABC0)
  {
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SpringBoardServicesLibrary(void)"));
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("NFScreenStateMonitor.m"), 26, CFSTR("%s"), v5);

    __break(1u);
    goto LABEL_7;
  }
  v3 = v5;
  if (v5)
LABEL_7:
    free(v3);
  result = dlsym(v2, "SBSBacklightChangeSourceForDisplayLayoutTransitionReason");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  qword_10032ABC8 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void sub_1001ECCDC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  _QWORD v15[4];

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  v14[0] = CFSTR("operationType");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("purpleTrustOperationType")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v5, "unsignedIntValue")));
  v15[0] = v6;
  v14[1] = CFSTR("errorStep");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("purpleTrustOperationErrorStep")));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v7, "unsignedIntValue")));
  v15[1] = v8;
  v14[2] = CFSTR("awdErrorCode");
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("purpleTrustOperationCAErrorCode")));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v9, "unsignedIntValue")));
  v15[2] = v10;
  v14[3] = CFSTR("errorCode");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("purpleTrustOperationErrorCode")));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v11, "unsignedIntValue")));
  v15[3] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 4));
  objc_msgSend(v4, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.purpleTrustOperationEvent"), v13);

}

void sub_1001ECEE8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[3];
  _QWORD v15[3];

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  v5 = objc_msgSend(v4, "getTimestamp");

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  v14[0] = CFSTR("errorStep");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("peerPaymentEnrollmentErrorStep")));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v7, "unsignedIntValue")));
  v15[0] = v8;
  v14[1] = CFSTR("errorCode");
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("peerPaymentEnrollmentErrorCode")));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v9, "unsignedIntValue")));
  v15[1] = v10;
  v14[2] = CFSTR("duration");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("peerPaymentEnrollmentStartTime")));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v5 - objc_msgSend(v11, "unsignedLongLongValue")));
  v15[2] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 3));
  objc_msgSend(v6, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.peerPaymentEnrolledEvent"), v13);

}

void sub_1001ED0C4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  _QWORD v16[4];
  _QWORD v17[4];

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  v15 = objc_msgSend(v4, "getTimestamp");

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  v16[0] = CFSTR("type");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("peerPaymentRequestType")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v6, "unsignedIntValue")));
  v17[0] = v7;
  v16[1] = CFSTR("errorStep");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("peerPaymentRequestErrorStep")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v8, "unsignedIntValue")));
  v17[1] = v9;
  v16[2] = CFSTR("errorCode");
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("peerPaymentRequestErrorCode")));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v10, "unsignedIntValue")));
  v17[2] = v11;
  v16[3] = CFSTR("duration");
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("peerPaymentRequestStartTime")));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15 - objc_msgSend(v12, "unsignedLongLongValue")));
  v17[3] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 4));
  objc_msgSend(v5, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.peerPaymentRequestEvent"), v14);

}

void sub_1001ED9A0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *v5;
  _BOOL4 v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  NSMutableDictionary *v21;
  id v22;
  void *v23;
  id v24;
  NSMutableDictionary *v25;
  uint64_t v26;
  NSString *v27;
  void *specific;
  uint64_t Logger;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  const char *Name;
  id v47;
  NSErrorUserInfoKey v48;
  void *v49;
  NSErrorUserInfoKey v50;
  id v51;
  uint8_t buf[4];
  int v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  void *v61;

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v25 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getSecureElementWrapperForSEID:", *(_QWORD *)(a1 + 40)));
    if (v25)
    {
      v21 = v25;
      v26 = *(unsigned __int8 *)(a1 + 64);
      v47 = 0;
      v27 = sub_1000993E4(v25, v26, &v47);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v27);
      v22 = v47;
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
    else
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v30 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(*(id *)(a1 + 32));
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 56));
        v34 = 45;
        if (isMetaClass)
          v34 = 43;
        v30(3, "%c[%{public}s %{public}s]:%i Invalid secure element", v34, ClassName, Name, 72);
      }
      v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v36 = NFSharedLogGetLogger(v35);
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        v38 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v38))
          v39 = 43;
        else
          v39 = 45;
        v40 = object_getClassName(*(id *)(a1 + 32));
        v41 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        v53 = v39;
        v54 = 2082;
        v55 = v40;
        v56 = 2082;
        v57 = v41;
        v58 = 1024;
        v59 = 72;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid secure element", buf, 0x22u);
      }

      v42 = *(_QWORD *)(a1 + 48);
      v43 = objc_alloc((Class)NSError);
      v22 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v48 = NSLocalizedDescriptionKey;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v49 = v23;
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1));
      v45 = objc_msgSend(v43, "initWithDomain:code:userInfo:", v22, 15, v44);
      (*(void (**)(uint64_t, _QWORD, id))(v42 + 16))(v42, 0, v45);

      v21 = 0;
    }
    goto LABEL_15;
  }
  v2 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v3 = NFLogGetLogger(v2);
  if (v3)
  {
    v4 = (void (*)(uint64_t, const char *, ...))v3;
    v5 = object_getClass(*(id *)(a1 + 32));
    v6 = class_isMetaClass(v5);
    v7 = object_getClassName(*(id *)(a1 + 32));
    v8 = sel_getName(*(SEL *)(a1 + 56));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (v6)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, v7, v8, 65, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 56));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v53 = v15;
    v54 = 2082;
    v55 = v16;
    v56 = 2082;
    v57 = v17;
    v58 = 1024;
    v59 = 65;
    v60 = 2114;
    v61 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 48);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v50 = NSLocalizedDescriptionKey;
    v22 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v51 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1));
    v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
    (*(void (**)(uint64_t, _QWORD, id))(v19 + 16))(v19, 0, v24);

LABEL_15:
  }
}

void sub_1001EDF44(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *v5;
  _BOOL4 v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  NSString *v27;
  void *v28;
  void *specific;
  uint64_t Logger;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  objc_class *v39;
  int v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  const char *Name;
  NSErrorUserInfoKey v50;
  void *v51;
  NSErrorUserInfoKey v52;
  void *v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  void *v63;

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getSecureElementWrapperForSEID:", *(_QWORD *)(a1 + 40)));
    if (v25)
    {
      v21 = v25;
      v26 = *(_QWORD *)(a1 + 48);
      v27 = sub_10009E300(v25, *(unsigned __int8 *)(a1 + 64));
      v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      (*(void (**)(uint64_t, void *))(v26 + 16))(v26, v28);

    }
    else
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v31 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(*(id *)(a1 + 32));
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 56));
        v35 = 45;
        if (isMetaClass)
          v35 = 43;
        v31(3, "%c[%{public}s %{public}s]:%i Invalid secure element", v35, ClassName, Name, 94);
      }
      v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v37 = NFSharedLogGetLogger(v36);
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        v39 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v39))
          v40 = 43;
        else
          v40 = 45;
        v41 = object_getClassName(*(id *)(a1 + 32));
        v42 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        v55 = v40;
        v56 = 2082;
        v57 = v41;
        v58 = 2082;
        v59 = v42;
        v60 = 1024;
        v61 = 94;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid secure element", buf, 0x22u);
      }

      v43 = *(_QWORD *)(a1 + 48);
      v44 = objc_alloc((Class)NSError);
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v50 = NSLocalizedDescriptionKey;
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v51 = v46;
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1));
      v48 = objc_msgSend(v44, "initWithDomain:code:userInfo:", v45, 15, v47);
      (*(void (**)(uint64_t, id))(v43 + 16))(v43, v48);

      v21 = 0;
    }
    goto LABEL_15;
  }
  v2 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v3 = NFLogGetLogger(v2);
  if (v3)
  {
    v4 = (void (*)(uint64_t, const char *, ...))v3;
    v5 = object_getClass(*(id *)(a1 + 32));
    v6 = class_isMetaClass(v5);
    v7 = object_getClassName(*(id *)(a1 + 32));
    v8 = sel_getName(*(SEL *)(a1 + 56));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (v6)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, v7, v8, 89, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 56));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v55 = v15;
    v56 = 2082;
    v57 = v16;
    v58 = 2082;
    v59 = v17;
    v60 = 1024;
    v61 = 89;
    v62 = 2114;
    v63 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 48);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v52 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v53 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1));
    v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
    (*(void (**)(uint64_t, id))(v19 + 16))(v19, v24);

LABEL_15:
  }
}

void sub_1001EE4A8(uint64_t a1)
{
  NSMutableDictionary *v2;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  NSMutableDictionary *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  NSErrorUserInfoKey v37;
  void *v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  void *v48;

  v2 = objc_opt_new(NSMutableDictionary);
  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v22 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));

    if (v22)
    {
      v26 = objc_opt_new(NSMutableDictionary);
      buf[0] = 0;
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
      v28 = sub_1000A0E48(v27, (uint64_t)buf);
      v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

      if (v29)
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", buf[0]));
        -[NSMutableDictionary setValue:forKey:](v26, "setValue:forKey:", v30, CFSTR("HasACLog"));

      }
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
      v36 = 0;
      v32 = sub_1000A00F0(v31, &v36);
      v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      v22 = v36;

      if (v33)
        -[NSMutableDictionary setValue:forKey:](v26, "setValue:forKey:", v33, CFSTR("ACLog"));
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "systemOSSerialNumber"));
      -[NSMutableDictionary setValue:forKey:](v2, "setValue:forKey:", v26, v35);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_15;
  }
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v11 = 45;
    if (isMetaClass)
      v11 = 43;
    v5(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v11, ClassName, Name, 110, v10);

  }
  v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v13 = NFSharedLogGetLogger(v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v15 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v15))
      v16 = 43;
    else
      v16 = 45;
    v17 = object_getClassName(*(id *)(a1 + 32));
    v18 = sel_getName(*(SEL *)(a1 + 48));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v40 = v16;
    v41 = 2082;
    v42 = v17;
    v43 = 2082;
    v44 = v18;
    v45 = 1024;
    v46 = 110;
    v47 = 2114;
    v48 = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v20 = *(_QWORD *)(a1 + 40);
  if (v20)
  {
    v21 = objc_alloc((Class)NSError);
    v22 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v37 = NSLocalizedDescriptionKey;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v38 = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1));
    v25 = objc_msgSend(v21, "initWithDomain:code:userInfo:", v22, 54, v24);
    (*(void (**)(uint64_t, id, _QWORD))(v20 + 16))(v20, v25, 0);

LABEL_15:
  }

}

void sub_1001EE944(uint64_t a1)
{
  id v2;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v7;
  const char *ClassName;
  const char *Name;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void **v25;
  void *v26;
  char v27;
  void *v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *v39;
  const char *v40;
  void *v41;
  uint64_t v42;
  void (*v43)(uint64_t, const char *, ...);
  objc_class *v44;
  _BOOL4 isMetaClass;
  const char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  objc_class *v51;
  int v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  const char *v61;
  _QWORD v62[6];
  char v63;
  uint8_t v64[4];
  int v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  int v71;
  uint8_t buf[8];
  _BYTE v73[40];
  NSErrorUserInfoKey v74;
  void *v75;
  NSErrorUserInfoKey v76;
  void *v77;

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || (v2 = objc_msgSend(*(id *)(a1 + 32), "didEnd"), (_DWORD)v2))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(Class))
        v7 = 43;
      else
        v7 = 45;
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v5(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v7, ClassName, Name, 136, v10);

    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 48));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)v73 = 2082;
      *(_QWORD *)&v73[2] = v16;
      *(_WORD *)&v73[10] = 2082;
      *(_QWORD *)&v73[12] = v17;
      *(_WORD *)&v73[20] = 1024;
      *(_DWORD *)&v73[22] = 136;
      *(_WORD *)&v73[26] = 2114;
      *(_QWORD *)&v73[28] = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v19 = *(_QWORD *)(a1 + 40);
    if (v19)
    {
      v20 = objc_alloc((Class)NSError);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v76 = NSLocalizedDescriptionKey;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v77 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v77, &v76, 1));
      v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
      (*(void (**)(uint64_t, id))(v19 + 16))(v19, v24);

    }
  }
  else if ((NFIsInternalBuild(v2) & 1) != 0)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)v73 = buf;
    *(_QWORD *)&v73[8] = 0x3032000000;
    *(_QWORD *)&v73[16] = sub_1001EEFF0;
    *(_QWORD *)&v73[24] = sub_1001EF000;
    *(_QWORD *)&v73[32] = 0;
    v25 = (void **)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472;
    v62[2] = sub_1001EF008;
    v62[3] = &unk_1002EAF58;
    v62[4] = *(_QWORD *)(a1 + 32);
    v62[5] = buf;
    v63 = *(_BYTE *)(a1 + 56);
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig routingOffWithFD:](NFRoutingConfig, "routingOffWithFD:", 0));
    v27 = sub_1000E3CEC(v25, v62, CFSTR("enable SMB logging"), v26);

    if ((v27 & 1) == 0)
    {
      v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v28);
      if (v29)
      {
        v30 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v30))
          v31 = 43;
        else
          v31 = 45;
        v32 = object_getClassName(*(id *)(a1 + 32));
        v33 = sel_getName(*(SEL *)(a1 + 48));
        v29(3, "%c[%{public}s %{public}s]:%i Failed to enable SMB log", v31, v32, v33, 152);
      }
      v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v35 = NFSharedLogGetLogger(v34);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        v37 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v37))
          v38 = 43;
        else
          v38 = 45;
        v39 = object_getClassName(*(id *)(a1 + 32));
        v40 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)v64 = 67109890;
        v65 = v38;
        v66 = 2082;
        v67 = v39;
        v68 = 2082;
        v69 = v40;
        v70 = 1024;
        v71 = 152;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to enable SMB log", v64, 0x22u);
      }

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    _Block_object_dispose(buf, 8);

  }
  else
  {
    v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v42 = NFLogGetLogger(v41);
    if (v42)
    {
      v43 = (void (*)(uint64_t, const char *, ...))v42;
      v44 = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(v44);
      v46 = object_getClassName(*(id *)(a1 + 32));
      v61 = sel_getName(*(SEL *)(a1 + 48));
      v47 = 45;
      if (isMetaClass)
        v47 = 43;
      v43(4, "%c[%{public}s %{public}s]:%i Not an internal build", v47, v46, v61, 139);
    }
    v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v49 = NFSharedLogGetLogger(v48);
    v50 = objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      v51 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v51))
        v52 = 43;
      else
        v52 = 45;
      v53 = object_getClassName(*(id *)(a1 + 32));
      v54 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v52;
      *(_WORD *)v73 = 2082;
      *(_QWORD *)&v73[2] = v53;
      *(_WORD *)&v73[10] = 2082;
      *(_QWORD *)&v73[12] = v54;
      *(_WORD *)&v73[20] = 1024;
      *(_DWORD *)&v73[22] = 139;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Not an internal build", buf, 0x22u);
    }

    v55 = *(_QWORD *)(a1 + 40);
    v56 = objc_alloc((Class)NSError);
    v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v74 = NSLocalizedDescriptionKey;
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Feature Not Supported"));
    v75 = v58;
    v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v75, &v74, 1));
    v60 = objc_msgSend(v56, "initWithDomain:code:userInfo:", v57, 14, v59);
    (*(void (**)(uint64_t, id))(v55 + 16))(v55, v60);

  }
}

void sub_1001EEFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001EEFF0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001EF000(uint64_t a1)
{

}

BOOL sub_1001EF008(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  v3 = sub_1001D6E58(v2, *(unsigned __int8 *)(a1 + 48));
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) == 0;
}

void sub_1001EF120(uint64_t a1)
{
  id v2;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v7;
  const char *ClassName;
  const char *Name;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void **v25;
  void *v26;
  char v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  void (*v32)(uint64_t, const char *, ...);
  objc_class *v33;
  _BOOL4 isMetaClass;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  objc_class *v40;
  int v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void (*v51)(uint64_t, const char *, ...);
  objc_class *v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  void *v56;
  uint64_t v57;
  NSObject *v58;
  objc_class *v59;
  int v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  const char *v68;
  _QWORD v69[6];
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  NSErrorUserInfoKey v74;
  void *v75;
  NSErrorUserInfoKey v76;
  void *v77;
  NSErrorUserInfoKey v78;
  void *v79;
  uint8_t buf[4];
  int v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  int v87;
  __int16 v88;
  void *v89;

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || (v2 = objc_msgSend(*(id *)(a1 + 32), "didEnd"), (_DWORD)v2))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(Class))
        v7 = 43;
      else
        v7 = 45;
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v5(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v7, ClassName, Name, 161, v10);

    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 48));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v81 = v15;
      v82 = 2082;
      v83 = v16;
      v84 = 2082;
      v85 = v17;
      v86 = 1024;
      v87 = 161;
      v88 = 2114;
      v89 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v19 = *(_QWORD *)(a1 + 40);
    if (v19)
    {
      v20 = objc_alloc((Class)NSError);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v78 = NSLocalizedDescriptionKey;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v79 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v79, &v78, 1));
      v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
      (*(void (**)(uint64_t, id, _QWORD))(v19 + 16))(v19, v24, 0);

    }
  }
  else if ((NFIsInternalBuild(v2) & 1) != 0)
  {
    v70 = 0;
    v71 = &v70;
    v72 = 0x2020000000;
    v73 = 0;
    v25 = (void **)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v69[0] = _NSConcreteStackBlock;
    v69[1] = 3221225472;
    v69[2] = sub_1001EF8B0;
    v69[3] = &unk_1002E81B8;
    v69[4] = *(_QWORD *)(a1 + 32);
    v69[5] = &v70;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig routingOffWithFD:](NFRoutingConfig, "routingOffWithFD:", 0));
    v27 = sub_1000E3CEC(v25, v69, CFSTR("getting SMB log"), v26);

    if ((v27 & 1) != 0)
    {
      if (v71[3])
      {
        v28 = objc_alloc((Class)NSData);
        v29 = objc_msgSend(v28, "initWithBytes:length:", *(_QWORD *)v71[3], *(_QWORD *)(v71[3] + 8));
        NFDataRelease(v71[3]);
      }
      else
      {
        v29 = 0;
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
    else
    {
      v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v51 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v50);
      if (v51)
      {
        v52 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v52))
          v53 = 43;
        else
          v53 = 45;
        v54 = object_getClassName(*(id *)(a1 + 32));
        v55 = sel_getName(*(SEL *)(a1 + 48));
        v51(3, "%c[%{public}s %{public}s]:%i Failed to get SMB log", v53, v54, v55, 177);
      }
      v56 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v57 = NFSharedLogGetLogger(v56);
      v58 = objc_claimAutoreleasedReturnValue(v57);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        v59 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v59))
          v60 = 43;
        else
          v60 = 45;
        v61 = object_getClassName(*(id *)(a1 + 32));
        v62 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        v81 = v60;
        v82 = 2082;
        v83 = v61;
        v84 = 2082;
        v85 = v62;
        v86 = 1024;
        v87 = 177;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get SMB log", buf, 0x22u);
      }

      v63 = *(_QWORD *)(a1 + 40);
      v64 = objc_alloc((Class)NSError);
      v29 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v74 = NSLocalizedDescriptionKey;
      v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v75 = v65;
      v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v75, &v74, 1));
      v67 = objc_msgSend(v64, "initWithDomain:code:userInfo:", v29, 15, v66);
      (*(void (**)(uint64_t, id, _QWORD))(v63 + 16))(v63, v67, 0);

    }
    _Block_object_dispose(&v70, 8);
  }
  else
  {
    v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v31 = NFLogGetLogger(v30);
    if (v31)
    {
      v32 = (void (*)(uint64_t, const char *, ...))v31;
      v33 = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(v33);
      v35 = object_getClassName(*(id *)(a1 + 32));
      v68 = sel_getName(*(SEL *)(a1 + 48));
      v36 = 45;
      if (isMetaClass)
        v36 = 43;
      v32(4, "%c[%{public}s %{public}s]:%i Not an internal build", v36, v35, v68, 164);
    }
    v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v38 = NFSharedLogGetLogger(v37);
    v39 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v40 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v40))
        v41 = 43;
      else
        v41 = 45;
      v42 = object_getClassName(*(id *)(a1 + 32));
      v43 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v81 = v41;
      v82 = 2082;
      v83 = v42;
      v84 = 2082;
      v85 = v43;
      v86 = 1024;
      v87 = 164;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Not an internal build", buf, 0x22u);
    }

    v44 = *(_QWORD *)(a1 + 40);
    v45 = objc_alloc((Class)NSError);
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v76 = NSLocalizedDescriptionKey;
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Feature Not Supported"));
    v77 = v47;
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v77, &v76, 1));
    v49 = objc_msgSend(v45, "initWithDomain:code:userInfo:", v46, 14, v48);
    (*(void (**)(uint64_t, id, _QWORD))(v44 + 16))(v44, v49, 0);

  }
}

void sub_1001EF880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1001EF8B0(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = sub_1001D70A8(v2);

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != 0;
}

void sub_1001EF9B0(uint64_t a1)
{
  id v2;
  id v3;

  v2 = sub_1001FFBD4(*(void **)(*(_QWORD *)(a1 + 32) + 160));
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1001F0184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1001F0B70(uint64_t a1, int a2)
{
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  void *v16;
  id v17;
  _BOOL4 v18;
  NSString *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  _BOOL4 v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  objc_class *v30;
  _BOOL4 v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  NSObject *v39;
  const char *Name;
  const char *v41;
  _QWORD block[5];
  char v43;
  _QWORD v44[5];
  id v45;
  id buf;
  __int16 v47;
  const char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  int v52;

  if (a1 && NFIsInternalBuild(a1) && *(uint64_t *)(a1 + 296) >= 1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    if (a2)
    {
      if (Logger)
      {
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("_enablePowerCountersLogging:");
        v10 = 45;
        if (isMetaClass)
          v10 = 43;
        v6(6, "%c[%{public}s %{public}s]:%i Enabling power counters timer", v10, ClassName, Name, 124);
      }
      v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v12 = NFSharedLogGetLogger(v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = object_getClass((id)a1);
        if (class_isMetaClass(v14))
          v15 = 43;
        else
          v15 = 45;
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v15;
        v47 = 2082;
        v48 = object_getClassName((id)a1);
        v49 = 2082;
        v50 = sel_getName("_enablePowerCountersLogging:");
        v51 = 1024;
        v52 = 124;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Enabling power counters timer", (uint8_t *)&buf, 0x22u);
      }

      v16 = *(void **)(a1 + 216);
      *(_BYTE *)(a1 + 353) = 1;
      v17 = v16;
      v18 = v17 == 0;

      if (v18)
      {
        v19 = NSHomeDirectory();
        v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/Library/Logs/nfcd_lpcd_false-detect.plist"), v20));

        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v21));
        objc_storeStrong((id *)(a1 + 216), v22);

      }
      v23 = *(id *)(a1 + 136);
      v24 = v23 == 0;

      if (v24)
      {
        objc_initWeak(&buf, (id)a1);
        v25 = objc_alloc((Class)NFTimer);
        v44[0] = _NSConcreteStackBlock;
        v44[1] = 3221225472;
        v44[2] = sub_1001F101C;
        v44[3] = &unk_1002E7E68;
        objc_copyWeak(&v45, &buf);
        v44[4] = a1;
        v26 = *(id *)(a1 + 232);
        v27 = objc_msgSend(v25, "initWithCallback:queue:", v44, v26);
        objc_storeStrong((id *)(a1 + 136), v27);

        objc_destroyWeak(&v45);
        objc_destroyWeak(&buf);
      }
      v28 = *(id *)(a1 + 136);
      objc_msgSend(v28, "stopTimer");

      v29 = *(id *)(a1 + 136);
      objc_msgSend(v29, "startTimer:leeway:", (double)*(uint64_t *)(a1 + 296), 0.5);
    }
    else
    {
      if (Logger)
      {
        v30 = object_getClass((id)a1);
        v31 = class_isMetaClass(v30);
        v32 = object_getClassName((id)a1);
        v41 = sel_getName("_enablePowerCountersLogging:");
        v33 = 45;
        if (v31)
          v33 = 43;
        v6(6, "%c[%{public}s %{public}s]:%i Disabling power counters timer", v33, v32, v41, 149);
      }
      v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v35 = NFSharedLogGetLogger(v34);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        v37 = object_getClass((id)a1);
        if (class_isMetaClass(v37))
          v38 = 43;
        else
          v38 = 45;
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v38;
        v47 = 2082;
        v48 = object_getClassName((id)a1);
        v49 = 2082;
        v50 = sel_getName("_enablePowerCountersLogging:");
        v51 = 1024;
        v52 = 149;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Disabling power counters timer", (uint8_t *)&buf, 0x22u);
      }

      v29 = *(id *)(a1 + 136);
      objc_msgSend(v29, "stopTimer");
    }

    v39 = *(id *)(a1 + 232);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001F10F0;
    block[3] = &unk_1002E5BB8;
    block[4] = a1;
    v43 = a2;
    dispatch_async(v39, block);

  }
}

void sub_1001F0FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001F101C(uint64_t a1)
{
  NSObject *v2;
  id *WeakRetained;
  id *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  double v10;
  os_activity_scope_state_s v11;

  v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.hw.counter.powerTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v2, &v11);
  os_activity_scope_leave(&v11);

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = objc_msgSend(WeakRetained, "updateAllPowerCounters");
    v6 = v4[17];
    objc_msgSend(v6, "stopTimer");

    v7 = v4[17];
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      v10 = (double)*(uint64_t *)(v9 + 296);
    else
      v10 = 0.0;
    objc_msgSend(v7, "startTimer:leeway:", v10, 0.5);

  }
}

id sub_1001F10F0(uint64_t a1)
{
  id result;
  uint64_t v3;

  result = objc_msgSend(*(id *)(a1 + 32), "updateAllPowerCounters");
  if (!*(_BYTE *)(a1 + 40))
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      *(_BYTE *)(v3 + 353) = 0;
  }
  return result;
}

id sub_1001F11F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_sync_getPowerCountersForConnection:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_1001F15DC(id a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  SEL v5;
  SEL v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  void *v13;
  _BOOL8 v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  id obj;
  id v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  id v36;
  _BYTE v37[128];
  _QWORD v38[5];
  _QWORD v39[5];
  _QWORD v40[4];
  _QWORD v41[4];

  v1 = a1;
  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "driverWrapper"));
    v36 = 0;
    v3 = sub_1001D3288(v2, &v36);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v30 = v36;

    if (v30)
    {
      if (v4 && objc_msgSend(v4, "code") != (id)45)
      {
        v22 = objc_alloc((Class)NSError);
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v23 = objc_msgSend(v4, "code");
        v38[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)objc_msgSend(v4, "code") > 70)
          v24 = 71;
        else
          v24 = (uint64_t)objc_msgSend(v4, "code");
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", (&off_1002EAF78)[v24]));
        v39[0] = v17;
        v39[1] = v4;
        v38[1] = NSUnderlyingErrorKey;
        v38[2] = CFSTR("Line");
        v39[2] = &off_100302E40;
        v38[3] = CFSTR("Method");
        v25 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("updateAllWriteCounters"));
        v39[3] = v25;
        v38[4] = NSDebugDescriptionErrorKey;
        v26 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("updateAllWriteCounters"), 233);
        v39[4] = v26;
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v39, v38, 5));
        v1 = objc_msgSend(v22, "initWithDomain:code:userInfo:", v31, v23, v27);

      }
      else
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v30, CFSTR("NFCC Write Counters")));
        obj = objc_getProperty(v1, v5, 176, 1);
        objc_sync_enter(obj);
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v35 = 0u;
        v7 = objc_getProperty(v1, v6, 176, 1);
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
        if (v8)
        {
          v9 = *(_QWORD *)v33;
          do
          {
            for (i = 0; i != v8; i = (char *)i + 1)
            {
              if (*(_QWORD *)v33 != v9)
                objc_enumerationMutation(v7);
              v11 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
              v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "NF_userInfo"));
              v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("flashWriteCounters")));

              if (v13)
              {
                if (v4)
                  v14 = objc_msgSend(v4, "code") == (id)45;
                else
                  v14 = 0;
                v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "combineFlashWriteCounters:with:overflow:", v13, v31, v14));

                if (v15)
                {
                  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "NF_userInfo"));
                  objc_msgSend(v16, "setObject:forKeyedSubscript:", v15, CFSTR("flashWriteCounters"));

                }
              }
            }
            v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
          }
          while (v8);
        }

        v17 = obj;
        objc_sync_exit(obj);
        v1 = 0;
      }
    }
    else
    {
      v18 = objc_alloc((Class)NSError);
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v40[0] = NSLocalizedDescriptionKey;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v41[0] = v17;
      v41[1] = &off_100302E28;
      v40[1] = CFSTR("Line");
      v40[2] = CFSTR("Method");
      v19 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("updateAllWriteCounters"));
      v41[2] = v19;
      v40[3] = NSDebugDescriptionErrorKey;
      v20 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("updateAllWriteCounters"), 230);
      v41[3] = v20;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v41, v40, 4));
      v1 = objc_msgSend(v18, "initWithDomain:code:userInfo:", v31, 15, v21);

    }
  }
  return v1;
}

void sub_1001F1AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_1001F2640(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_sync_getFlashWriteCountersForConnection:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_1001F2AB0(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_10032ABD8 != -1)
    dispatch_once(&qword_10032ABD8, &stru_1002EB1B8);
  return (id)qword_10032ABD0;
}

void sub_1001F2AF4(id a1)
{
  NFFuryCALogger *v1;
  void *v2;

  v1 = objc_opt_new(NFFuryCALogger);
  v2 = (void *)qword_10032ABD0;
  qword_10032ABD0 = (uint64_t)v1;

}

void sub_1001F2D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  _QWORD v17[4];

  if (a1)
  {
    v16[0] = CFSTR("status");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
    v17[0] = v8;
    v16[1] = CFSTR("stackLoadTime");
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
    v17[1] = v9;
    v16[2] = CFSTR("nfcControllerType");
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a4));
    v17[2] = v10;
    v16[3] = CFSTR("unlockedSinceBoot");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a5));
    v17[3] = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 4));

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1001F2EF4;
    v14[3] = &unk_1002EB1E0;
    v15 = v12;
    v13 = v12;
    AnalyticsSendEventLazy(CFSTR("com.apple.fury.stackLoadEvent"), v14);

  }
}

id sub_1001F2EF4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001F2EFC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  _QWORD v20[4];

  if (!a1)
    return 0;
  if (a2 == 3)
    v8 = 2;
  else
    v8 = 1;
  if (a2 == 8)
    v9 = 3;
  else
    v9 = v8;
  v19[0] = CFSTR("tagType");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v9));
  v20[0] = v10;
  v19[1] = CFSTR("operation");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3));
  v20[1] = v11;
  v19[2] = CFSTR("duration");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a4));
  v20[2] = v12;
  v19[3] = CFSTR("status");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a5));
  v20[3] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 4));

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1001F309C;
  v17[3] = &unk_1002EB1E0;
  v15 = v14;
  v18 = v15;
  AnalyticsSendEventLazy(CFSTR("com.apple.fury.sessionEvent"), v17);

  return v15;
}

id sub_1001F309C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001F30A4(_QWORD *a1, void *a2, void *a3, unsigned int a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *specific;
  uint64_t Logger;
  void (*v16)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  const char *v25;
  const char *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  void *j;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void (*v39)(uint64_t, const char *, ...);
  objc_class *v40;
  _BOOL4 v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  objc_class *v46;
  int v47;
  const char *v48;
  const char *v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v64;
  BOOL v65;
  char v66;
  char v67;
  BOOL v68;
  int v69;
  char v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  id v81;
  NSObject *v82;
  id v83;
  id v84;
  void *v86;
  uint64_t v87;
  void (*v88)(uint64_t, const char *, ...);
  objc_class *v89;
  _BOOL4 v90;
  const char *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  NSObject *v95;
  objc_class *v96;
  int v97;
  const char *v98;
  const char *v99;
  const char *ClassName;
  const char *v101;
  const char *Name;
  const char *v103;
  const char *v104;
  unsigned int v105;
  id v106;
  id v107;
  void *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD v114[4];
  id v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _QWORD v124[3];
  _QWORD v125[3];
  _QWORD v126[4];
  _QWORD v127[4];
  _BYTE v128[128];
  uint8_t v129[128];
  uint8_t buf[8];
  _BYTE v131[40];
  char v132;

  v7 = a2;
  v106 = a3;
  v108 = v7;
  v113 = a1;
  if (!a1)
  {
    v84 = 0;
    goto LABEL_182;
  }
  v105 = a4;
  v120 = 0u;
  v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v120, v129, 16);
  if (v8)
  {
    v9 = v8;
    v112 = 0;
    v10 = 0;
    v110 = 0;
    v11 = *(_QWORD *)v121;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v121 != v11)
          objc_enumerationMutation(v7);
        v13 = *(void **)(*((_QWORD *)&v120 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v13, "type") == 8)
        {
          v10 = (v10 + 1);
        }
        else if (objc_msgSend(v13, "isSilent") && objc_msgSend(v13, "silentType") == 2)
        {
          LODWORD(v112) = v112 + 1;
        }
        else if (objc_msgSend(v13, "isSilent") && objc_msgSend(v13, "silentType") == 3)
        {
          ++v110;
        }
        else if (objc_msgSend(v13, "type") == 3)
        {
          ++HIDWORD(v112);
        }
        else
        {
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = NFLogGetLogger(specific);
          if (Logger)
          {
            v16 = (void (*)(uint64_t, const char *, ...))Logger;
            Class = object_getClass(v113);
            isMetaClass = class_isMetaClass(Class);
            ClassName = object_getClassName(v113);
            Name = sel_getName("postCAFuryTagDetectionEvent:previousTags:rfError:");
            v19 = 45;
            if (isMetaClass)
              v19 = 43;
            v7 = v108;
            v16(3, "%c[%{public}s %{public}s]:%i Unknown tag found in new list %{public}@", v19, ClassName, Name, 176, v13);
          }
          v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v21 = NFSharedLogGetLogger(v20);
          v22 = objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            v23 = object_getClass(v113);
            if (class_isMetaClass(v23))
              v24 = 43;
            else
              v24 = 45;
            v25 = object_getClassName(v113);
            v26 = sel_getName("postCAFuryTagDetectionEvent:previousTags:rfError:");
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)&buf[4] = v24;
            v7 = v108;
            *(_WORD *)v131 = 2082;
            *(_QWORD *)&v131[2] = v25;
            *(_WORD *)&v131[10] = 2082;
            *(_QWORD *)&v131[12] = v26;
            *(_WORD *)&v131[20] = 1024;
            *(_DWORD *)&v131[22] = 176;
            *(_WORD *)&v131[26] = 2114;
            *(_QWORD *)&v131[28] = v13;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown tag found in new list %{public}@", buf, 0x2Cu);
          }

        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v120, v129, 16);
    }
    while (v9);
  }
  else
  {
    v112 = 0;
    v10 = 0;
    v110 = 0;
  }
  v118 = 0u;
  v119 = 0u;
  v116 = 0u;
  v117 = 0u;
  v27 = v106;
  v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v116, v128, 16);
  if (v28)
  {
    v29 = v28;
    v30 = 0;
    v31 = 0;
    v111 = 0;
    v109 = 0;
    v32 = *(_QWORD *)v117;
    v107 = v27;
    do
    {
      for (j = 0; j != v29; j = (char *)j + 1)
      {
        if (*(_QWORD *)v117 != v32)
          objc_enumerationMutation(v27);
        v34 = *(void **)(*((_QWORD *)&v116 + 1) + 8 * (_QWORD)j);
        if (objc_msgSend(v34, "type") == 8)
        {
          ++v31;
        }
        else if (objc_msgSend(v34, "isSilent") && objc_msgSend(v34, "silentType") == 2)
        {
          ++v111;
        }
        else if (objc_msgSend(v34, "isSilent") && objc_msgSend(v34, "silentType") == 3)
        {
          ++v109;
        }
        else if (objc_msgSend(v34, "type") == 3)
        {
          v30 = (v30 + 1);
        }
        else
        {
          v35 = v10;
          v36 = v30;
          v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v38 = NFLogGetLogger(v37);
          if (v38)
          {
            v39 = (void (*)(uint64_t, const char *, ...))v38;
            v40 = object_getClass(v113);
            v41 = class_isMetaClass(v40);
            v101 = object_getClassName(v113);
            v103 = sel_getName("postCAFuryTagDetectionEvent:previousTags:rfError:");
            v42 = 45;
            if (v41)
              v42 = 43;
            v39(3, "%c[%{public}s %{public}s]:%i Unknown tag found in old list %{public}@", v42, v101, v103, 199, v34);
          }
          v43 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v44 = NFSharedLogGetLogger(v43);
          v45 = objc_claimAutoreleasedReturnValue(v44);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            v46 = object_getClass(v113);
            if (class_isMetaClass(v46))
              v47 = 43;
            else
              v47 = 45;
            v48 = object_getClassName(v113);
            v49 = sel_getName("postCAFuryTagDetectionEvent:previousTags:rfError:");
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)&buf[4] = v47;
            *(_WORD *)v131 = 2082;
            *(_QWORD *)&v131[2] = v48;
            *(_WORD *)&v131[10] = 2082;
            *(_QWORD *)&v131[12] = v49;
            *(_WORD *)&v131[20] = 1024;
            *(_DWORD *)&v131[22] = 199;
            *(_WORD *)&v131[26] = 2114;
            *(_QWORD *)&v131[28] = v34;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown tag found in old list %{public}@", buf, 0x2Cu);
          }

          v30 = v36;
          v10 = v35;
          v27 = v107;
        }
      }
      v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v116, v128, 16);
    }
    while (v29);
  }
  else
  {
    LODWORD(v30) = 0;
    v31 = 0;
    v111 = 0;
    v109 = 0;
  }

  if ((_DWORD)v30 == HIDWORD(v112))
  {
    v50 = v112;
    if (v31 == (_DWORD)v10)
    {
      v51 = v110;
      v52 = v110 - v109;
      v53 = v109 - v110;
      if (v109 > v110)
        v52 = 0;
      else
        v53 = 0;
      if (v109 > v110)
        v54 = 2;
      else
        v54 = 1;
      if (v109 == v110)
      {
        v53 = 0;
        v52 = 0;
        v54 = 0;
        v55 = 1;
      }
      else
      {
        v55 = 5;
      }
      v56 = v112 - v111;
      v57 = v111 - v112;
      if (v111 > v112)
        v56 = 0;
      else
        v57 = 0;
      if (v111 > v112)
        v58 = 2;
      else
        v58 = 1;
      if (v111 == (_DWORD)v112)
        v59 = v53;
      else
        v59 = v57;
      if (v111 == (_DWORD)v112)
        v60 = v52;
      else
        v60 = v56;
      if (v111 == (_DWORD)v112)
        v61 = v54;
      else
        v61 = v58;
      if (v111 == (_DWORD)v112)
        v62 = v55;
      else
        v62 = 4;
      if ((_DWORD)v10)
        goto LABEL_116;
      goto LABEL_112;
    }
    if (v31 > v10)
      v59 = v31 - v10;
    else
      v59 = 0;
    if (v31 > v10)
      v60 = 0;
    else
      v60 = v10 - v31;
    if (v31 > v10)
      v61 = 2;
    else
      v61 = 1;
    v62 = 3;
  }
  else
  {
    if (v30 > HIDWORD(v112))
      v59 = (v30 - HIDWORD(v112));
    else
      v59 = 0;
    if (v30 > HIDWORD(v112))
      v60 = 0;
    else
      v60 = (HIDWORD(v112) - v30);
    if (v30 > HIDWORD(v112))
      v61 = 2;
    else
      v61 = 1;
    v62 = 2;
    v50 = v112;
  }
  v51 = v110;
  if ((_DWORD)v10)
    goto LABEL_116;
LABEL_112:
  if (!HIDWORD(v112) && !v50 && !v51)
  {
    v63 = 1;
    goto LABEL_180;
  }
LABEL_116:
  if ((_DWORD)v10 != 1 || HIDWORD(v112) || v50 || v51)
  {
    if ((_DWORD)v10 || HIDWORD(v112) != 1 || v50 || v51)
    {
      if ((_DWORD)v10 != 1 || HIDWORD(v112) != 1 || v50 || v51)
      {
        if ((_DWORD)v10 || HIDWORD(v112) != 2 || v50 || v51)
        {
          v64 = v10 == 0;
          v65 = v50 == 1 && v51 == 0;
          v66 = v65;
          if (!v65)
            v64 = 0;
          if (!v64 || HIDWORD(v112))
          {
            if (v51 != 1 || v50 | v10 || HIDWORD(v112))
            {
              if (HIDWORD(v112) != 1)
                LOBYTE(v64) = 0;
              if (v64)
              {
                v63 = 8;
              }
              else
              {
                v67 = v66 ^ 1;
                if ((_DWORD)v10 != 1)
                  v67 = 1;
                if ((v67 & 1) != 0 || HIDWORD(v112))
                {
                  if ((_DWORD)v10 || v50 != 1 || v51 != 1 || HIDWORD(v112))
                  {
                    if (v50)
                      v68 = 0;
                    else
                      v68 = v51 == 1;
                    v69 = v68;
                    if (!(_DWORD)v10 && v69 && HIDWORD(v112) == 1)
                    {
                      v63 = 11;
                    }
                    else
                    {
                      v70 = v69 ^ 1;
                      if ((_DWORD)v10 != 1)
                        v70 = 1;
                      if ((v70 & 1) != 0 || HIDWORD(v112))
                      {
                        v86 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                        v87 = NFLogGetLogger(v86);
                        v71 = v105;
                        if (v87)
                        {
                          v88 = (void (*)(uint64_t, const char *, ...))v87;
                          v89 = object_getClass(v113);
                          v90 = class_isMetaClass(v89);
                          v91 = object_getClassName(v113);
                          v104 = sel_getName("postCAFuryTagDetectionEvent:previousTags:rfError:");
                          v92 = 45;
                          if (v90)
                            v92 = 43;
                          v88(3, "%c[%{public}s %{public}s]:%i multiTag : Invalid tag configuration", v92, v91, v104, 313);
                        }
                        v93 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                        v94 = NFSharedLogGetLogger(v93);
                        v95 = objc_claimAutoreleasedReturnValue(v94);
                        if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
                        {
                          v96 = object_getClass(v113);
                          if (class_isMetaClass(v96))
                            v97 = 43;
                          else
                            v97 = 45;
                          v98 = object_getClassName(v113);
                          v99 = sel_getName("postCAFuryTagDetectionEvent:previousTags:rfError:");
                          *(_DWORD *)buf = 67109890;
                          *(_DWORD *)&buf[4] = v97;
                          *(_WORD *)v131 = 2082;
                          *(_QWORD *)&v131[2] = v98;
                          *(_WORD *)&v131[10] = 2082;
                          *(_QWORD *)&v131[12] = v99;
                          *(_WORD *)&v131[20] = 1024;
                          *(_DWORD *)&v131[22] = 313;
                          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i multiTag : Invalid tag configuration", buf, 0x22u);
                        }

                        v63 = 13;
                        goto LABEL_181;
                      }
                      v63 = 12;
                    }
                  }
                  else
                  {
                    v63 = 10;
                  }
                }
                else
                {
                  v63 = 9;
                }
              }
            }
            else
            {
              v63 = 7;
            }
          }
          else
          {
            v63 = 6;
          }
        }
        else
        {
          v63 = 5;
        }
      }
      else
      {
        v63 = 4;
      }
    }
    else
    {
      v63 = 2;
    }
  }
  else
  {
    v63 = 3;
  }
LABEL_180:
  v71 = v105;
LABEL_181:
  v126[0] = CFSTR("tagType");
  v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v62));
  v127[0] = v72;
  v126[1] = CFSTR("operation");
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v61));
  v127[1] = v73;
  v126[2] = CFSTR("multiTagState");
  v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v63));
  v127[2] = v74;
  v126[3] = CFSTR("rfErrorOccured");
  v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v71));
  v127[3] = v75;
  v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v127, v126, 4));

  v124[0] = CFSTR("NFMultiTagState");
  v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v63));
  v125[0] = v77;
  v124[1] = CFSTR("totalDailyTagsAdded");
  v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v60));
  v125[1] = v78;
  v124[2] = CFSTR("totalDailyTagsRemoved");
  v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v59));
  v125[2] = v79;
  v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v125, v124, 3));

  v81 = v80;
  v82 = v113[2];
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)v131 = 3221225472;
  *(_QWORD *)&v131[8] = sub_1001F4040;
  *(_QWORD *)&v131[16] = &unk_1002E58D8;
  *(_QWORD *)&v131[24] = v113;
  v83 = v81;
  *(_QWORD *)&v131[32] = v83;
  v132 = 0;
  dispatch_async(v82, buf);

  v114[0] = _NSConcreteStackBlock;
  v114[1] = 3221225472;
  v114[2] = sub_1001F3C04;
  v114[3] = &unk_1002EB1E0;
  v84 = v76;
  v115 = v84;
  AnalyticsSendEventLazy(CFSTR("com.apple.fury.tagDetectionEvent"), v114);

LABEL_182:
  return v84;
}

id sub_1001F3C04(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1001F3C0C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1001F3C98;
    v6[3] = &unk_1002E5CA8;
    v6[4] = a1;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

void sub_1001F3C98(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  _QWORD v5[5];
  char v6;
  const __CFString *v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(void **)(a1 + 40);
    v7 = CFSTR("totalDailyFalseDetectionCount");
    v8 = v2;
    v3 = v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1001F3F44;
    v5[3] = &unk_1002EB208;
    v6 = 0;
    v5[4] = v1;
    objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v5);

  }
}

void sub_1001F3D78(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001F3DD4;
    block[3] = &unk_1002E5C58;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1001F3DD4(uint64_t a1)
{
  uint64_t v1;
  _UNKNOWN **v2;
  _UNKNOWN **v3;
  uint64_t v4;
  void *v5;
  _UNKNOWN **v6;
  _UNKNOWN **v7;
  _UNKNOWN **v8;
  void *v9;
  _QWORD v10[5];
  char v11;
  _QWORD v12[3];
  _QWORD v13[3];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 8), "objectForKey:", CFSTR("totalDailyTagsAdded")));
    v3 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 8), "objectForKey:", CFSTR("totalDailyTagsRemoved")));
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 8), "objectForKey:", CFSTR("totalDailyFalseDetectionCount")));
    v5 = (void *)v4;
    v6 = &off_100302EB8;
    if (v2)
      v7 = v2;
    else
      v7 = &off_100302EB8;
    v12[0] = CFSTR("totalDailyTagsAdded");
    v12[1] = CFSTR("totalDailyTagsRemoved");
    if (v3)
      v8 = v3;
    else
      v8 = &off_100302EB8;
    v13[0] = v7;
    v13[1] = v8;
    v12[2] = CFSTR("totalDailyFalseDetectionCount");
    if (v4)
      v6 = (_UNKNOWN **)v4;
    v13[2] = v6;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 3));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001F3F44;
    v10[3] = &unk_1002EB208;
    v11 = 1;
    v10[4] = v1;
    objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v10);
    AnalyticsSendEvent(CFSTR("com.apple.fury.generalStatisticsEvent"), v9);

  }
}

void sub_1001F3F44(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(v6, "setObject:forKey:", &off_100302EB8, v10);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", v10));
    if (v7)
    {
      if (objc_msgSend(v5, "integerValue"))
      {
        v8 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", (char *)objc_msgSend(v7, "longValue") + (_QWORD)objc_msgSend(v5, "longValue")));
        objc_msgSend(v8, "setObject:forKey:", v9, v10);

      }
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKey:", v5, v10);
    }

  }
}

_QWORD *sub_1001F4040(_QWORD *result)
{
  uint64_t v1;
  void *v2;
  char v3;
  _QWORD v4[5];
  char v5;

  v1 = result[4];
  if (v1)
  {
    v2 = (void *)result[5];
    v3 = *((_BYTE *)result + 48);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1001F3F44;
    v4[3] = &unk_1002EB208;
    v5 = v3;
    v4[4] = v1;
    return objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v4);
  }
  return result;
}

void sub_1001F40A8(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  _UNKNOWN **v6;

  if (a1)
  {
    v5 = a2;
    v6 = &off_100302ED0;
    v2 = a2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));

    objc_msgSend(v4, "postCAEventFor:eventInput:", CFSTR("com.apple.fury.exceptionStatisticsEvent"), v3);
  }
}

id sub_1001F419C(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_10032ABE8 != -1)
    dispatch_once(&qword_10032ABE8, &stru_1002EB228);
  return (id)qword_10032ABE0;
}

void sub_1001F41E0(id a1)
{
  _NFFailForwardCoordinator *v1;
  void *v2;

  v1 = objc_alloc_init(_NFFailForwardCoordinator);
  v2 = (void *)qword_10032ABE0;
  qword_10032ABE0 = (uint64_t)v1;

}

void sub_1001F4208(void *a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  id *v16;
  id WeakRetained;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  _BOOL4 v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  const char *Name;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;

  v3 = a2;
  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("registerPrimaryDelegate:");
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v6(6, "%c[%{public}s %{public}s]:%i ", v10, ClassName, Name, 34);
    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = object_getClass(a1);
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      *(_DWORD *)buf = 67109890;
      v35 = v15;
      v36 = 2082;
      v37 = object_getClassName(a1);
      v38 = 2082;
      v39 = sel_getName("registerPrimaryDelegate:");
      v40 = 1024;
      v41 = 34;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    v16 = a1;
    objc_sync_enter(v16);
    objc_storeWeak(v16 + 1, v3);
    WeakRetained = objc_loadWeakRetained(v16 + 2);
    objc_sync_exit(v16);

    if (WeakRetained)
    {
      objc_msgSend(WeakRetained, "primaryDelegateRegistered:", v3);
      objc_msgSend(v3, "furyDelegateRegistered:", WeakRetained);
    }
    else
    {
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFLogGetLogger(v18);
      if (v19)
      {
        v20 = (void (*)(uint64_t, const char *, ...))v19;
        v21 = object_getClass(v16);
        v22 = class_isMetaClass(v21);
        v23 = object_getClassName(v16);
        v24 = sel_getName("registerPrimaryDelegate:");
        v25 = 45;
        if (v22)
          v25 = 43;
        v20(6, "%c[%{public}s %{public}s]:%i Fury delegate not present yet", v25, v23, v24, 45);
      }
      v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v27 = NFSharedLogGetLogger(v26);
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        v29 = object_getClass(v16);
        if (class_isMetaClass(v29))
          v30 = 43;
        else
          v30 = 45;
        v31 = object_getClassName(v16);
        v32 = sel_getName("registerPrimaryDelegate:");
        *(_DWORD *)buf = 67109890;
        v35 = v30;
        v36 = 2082;
        v37 = v31;
        v38 = 2082;
        v39 = v32;
        v40 = 1024;
        v41 = 45;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Fury delegate not present yet", buf, 0x22u);
      }

    }
  }

}

void sub_1001F44FC(void *a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  id *v16;
  id WeakRetained;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  _BOOL4 v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  objc_class *v28;
  int v29;
  const char *v30;
  const char *v31;
  const char *Name;
  const char *v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;

  v3 = a2;
  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("registerFuryDelegate:");
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v6(6, "%c[%{public}s %{public}s]:%i ", v10, ClassName, Name, 53);
    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = object_getClass(a1);
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      *(_DWORD *)buf = 67109890;
      v35 = v15;
      v36 = 2082;
      v37 = object_getClassName(a1);
      v38 = 2082;
      v39 = sel_getName("registerFuryDelegate:");
      v40 = 1024;
      v41 = 53;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    v16 = a1;
    objc_sync_enter(v16);
    objc_storeWeak(v16 + 2, v3);
    WeakRetained = objc_loadWeakRetained(v16 + 1);
    objc_sync_exit(v16);

    if (WeakRetained)
    {
      objc_msgSend(WeakRetained, "furyDelegateRegistered:", v3);
      objc_msgSend(v3, "primaryDelegateRegistered:", WeakRetained);
    }
    else
    {
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFLogGetLogger(v18);
      if (v19)
      {
        v20 = (void (*)(uint64_t, const char *, ...))v19;
        v21 = object_getClass(v16);
        v22 = class_isMetaClass(v21);
        v23 = object_getClassName(v16);
        v33 = sel_getName("registerFuryDelegate:");
        v24 = 45;
        if (v22)
          v24 = 43;
        v20(6, "%c[%{public}s %{public}s]:%i Primary delegate not present yet", v24, v23, v33, 63);
      }
      v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v26 = NFSharedLogGetLogger(v25);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        v28 = object_getClass(v16);
        if (class_isMetaClass(v28))
          v29 = 43;
        else
          v29 = 45;
        v30 = object_getClassName(v16);
        v31 = sel_getName("registerFuryDelegate:");
        *(_DWORD *)buf = 67109890;
        v35 = v29;
        v36 = 2082;
        v37 = v30;
        v38 = 2082;
        v39 = v31;
        v40 = 1024;
        v41 = 63;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Primary delegate not present yet", buf, 0x22u);
      }

    }
  }

}

uint64_t sub_1001F4F14(void *a1)
{
  unsigned int v1;
  id v2;
  uint64_t v3;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v6;
  uint64_t v7;
  NSObject *v8;
  id v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unsigned int v16;

  v10 = 0;
  v1 = sub_1001F6284(a1, &v10);
  v2 = v10;
  if (v2)
  {
LABEL_9:
    v3 = 0;
    goto LABEL_10;
  }
  if (v1 != 36864)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
      Logger(4, "%s:%i SW1SW2 error=0x%x", "_IsRAPDUSuccess", 59, v1);
    v6 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v7 = NFSharedLogGetLogger(v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v12 = "_IsRAPDUSuccess";
      v13 = 1024;
      v14 = 59;
      v15 = 1024;
      v16 = v1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i SW1SW2 error=0x%x", buf, 0x18u);
    }

    goto LABEL_9;
  }
  v3 = 1;
LABEL_10:

  return v3;
}

_QWORD *sub_1001F6284(void *a1, _QWORD *a2)
{
  id v3;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSErrorUserInfoKey v15;
  void *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;

  v3 = a1;
  if ((unint64_t)objc_msgSend(v3, "length") > 1)
  {
    v13 = objc_retainAutorelease(v3);
    a2 = (_QWORD *)(bswap32(*(unsigned __int16 *)((char *)objc_msgSend(v13, "bytes")
                                                + (_QWORD)objc_msgSend(v13, "length")
                                                - 2)) >> 16);
  }
  else
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
      Logger(4, "%s:%i Invalid tag response", "_ParseSWFromRAPDUEX", 42);
    v6 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v7 = NFSharedLogGetLogger(v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v18 = "_ParseSWFromRAPDUEX";
      v19 = 1024;
      v20 = 42;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid tag response", buf, 0x12u);
    }

    if (a2)
    {
      v9 = objc_alloc((Class)NSError);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v15 = NSLocalizedDescriptionKey;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Tag Error"));
      v16 = v11;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
      *a2 = objc_msgSend(v9, "initWithDomain:code:userInfo:", v10, 29, v12);

      a2 = 0;
    }
  }

  return a2;
}

id sub_1001F7154(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[6];

  v2 = a1[4];
  v1 = a1[5];
  v3 = *(void **)(v2 + 371);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001F71BC;
  v6[3] = &unk_1002E5BE0;
  v4 = a1[6];
  v6[4] = v2;
  v6[5] = v4;
  return objc_msgSend(v3, "hceReadWithHandle:completion:", v1, v6);
}

void sub_1001F71BC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  unsigned __int8 *v7;
  int v8;
  void *v9;
  void *v10;
  void *specific;
  uint64_t Logger;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  const char *v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  const __CFString *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  const char *Name;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "expressModeManager"));
    if (v7)
    {
      v8 = v7[172];

      v9 = *(void **)(a1 + 32);
      if (v8)
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "expressModeManager"));
        objc_msgSend(v10, "handleTransactionEndEvent:atlData:caData:", v5, v6, 0);

        goto LABEL_17;
      }
    }
    else
    {
      v9 = *(void **)(a1 + 32);
    }
    objc_msgSend(v9, "handleTransactionEndEvent:atlData:", v5, v6);
    goto LABEL_17;
  }
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v13 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v17 = 45;
    if (isMetaClass)
      v17 = 43;
    v13(3, "%c[%{public}s %{public}s]:%i Invalid decoded event for posting EndEvent.", v17, ClassName, Name, 91);
  }
  v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v19 = NFSharedLogGetLogger(v18);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    v21 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v21))
      v22 = 43;
    else
      v22 = 45;
    v23 = object_getClassName(*(id *)(a1 + 32));
    v24 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67109890;
    v35 = v22;
    v36 = 2082;
    v37 = v23;
    v38 = 2082;
    v39 = v24;
    v40 = 1024;
    v41 = 91;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid decoded event for posting EndEvent.", buf, 0x22u);
  }

LABEL_17:
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("endPointIdentifier")));
  if (v25)
  {
    v26 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v25, v26) & 1) != 0)
    {
      v27 = objc_msgSend(v5, "didError");
      v28 = CFSTR("noError");
      if (v27)
        v28 = CFSTR("withError");
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), v25, v28));
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NFSecureXPCEventPublisherManager sharedManager](NFSecureXPCEventPublisherManager, "sharedManager"));
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "homed"));
      objc_msgSend(v30, "postEventForPublisher:event:objectString:", v32, "com.apple.stockholm.forHome.transaction.end", v29);

    }
  }

}

id *sub_1001F7FAC(id *a1, void *a2)
{
  id v4;
  id *v5;
  id v6;
  id v7;
  NFCoreTelephonyConnection *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSMutableDictionary *v18;
  id v19;
  id v20;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;
  id location;
  objc_super v27;

  v4 = a2;
  if (a1)
  {
    v27.receiver = a1;
    v27.super_class = (Class)NFDriverWrapper;
    v5 = (id *)objc_msgSendSuper2(&v27, "init");
    a1 = v5;
    if (v5)
    {
      v5[18] = 0;
      v5[19] = 0;
      v6 = objc_alloc_init((Class)NSMutableDictionary);
      v7 = a1[7];
      a1[7] = v6;

      *((_BYTE *)a1 + 220) = 0;
      v8 = objc_alloc_init(NFCoreTelephonyConnection);
      v9 = a1[21];
      a1[21] = v8;

      v10 = objc_alloc_init((Class)NSLock);
      v11 = a1[13];
      a1[13] = v10;

      *((_BYTE *)a1 + 223) = 0;
      objc_initWeak(&location, a1);
      v12 = objc_alloc((Class)NFTimer);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_1001F81FC;
      v24[3] = &unk_1002E5C08;
      objc_copyWeak(&v25, &location);
      v13 = objc_msgSend(v12, "initWithCallback:queue:", v24, v4);
      v14 = a1[14];
      a1[14] = v13;

      v15 = objc_alloc((Class)NFTimer);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_1001F8348;
      v22[3] = &unk_1002E5C08;
      objc_copyWeak(&v23, &location);
      v16 = objc_msgSend(v15, "initWithCallback:queue:", v22, v4);
      v17 = a1[15];
      a1[15] = v16;

      objc_storeStrong(a1 + 26, a2);
      *((_BYTE *)a1 + 219) = NFProductIsPhone() ^ 1;
      *((_BYTE *)a1 + 218) = NFProductHasNFCRadio();
      v18 = objc_opt_new(NSMutableDictionary);
      v19 = a1[23];
      a1[23] = v18;

      *((_DWORD *)a1 + 2) = 0;
      a1[2] = 0;
      *((_BYTE *)a1 + 24) = 0;
      *((_DWORD *)a1 + 7) = -1;
      v20 = a1[4];
      a1[4] = 0;

      *((_DWORD *)a1 + 48) = 0;
      objc_destroyWeak(&v23);
      objc_destroyWeak(&v25);
      objc_destroyWeak(&location);
    }
  }

  return a1;
}

void sub_1001F81C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001F81FC(uint64_t a1)
{
  NSObject *v2;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v5;
  uint64_t v6;
  NSObject *v7;
  id WeakRetained;
  _BYTE state[18];

  v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.field.assertionTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v2, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
  if (Logger)
    Logger(6, "%s:%i Field assertion timeout.", "-[NFDriverWrapper initWithQueue:]_block_invoke", 184);
  v5 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v6 = NFSharedLogGetLogger(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)state = 136446466;
    *(_QWORD *)&state[4] = "-[NFDriverWrapper initWithQueue:]_block_invoke";
    *(_WORD *)&state[12] = 1024;
    *(_DWORD *)&state[14] = 184;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Field assertion timeout.", state, 0x12u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_100005538((uint64_t)WeakRetained);

}

void sub_1001F8348(uint64_t a1)
{
  NSObject *v2;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v5;
  uint64_t v6;
  NSObject *v7;
  id WeakRetained;
  _BYTE state[18];

  v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.field.coalescingTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v2, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
  if (Logger)
    Logger(6, "%s:%i Field coalesing timer expired", "-[NFDriverWrapper initWithQueue:]_block_invoke", 190);
  v5 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v6 = NFSharedLogGetLogger(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)state = 136446466;
    *(_QWORD *)&state[4] = "-[NFDriverWrapper initWithQueue:]_block_invoke";
    *(_WORD *)&state[12] = 1024;
    *(_DWORD *)&state[14] = 190;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Field coalesing timer expired", state, 0x12u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_100005538((uint64_t)WeakRetained);

}

id sub_1001F8494(id a1)
{
  if (a1)
  {
    if (!*((_QWORD *)a1 + 5) || *((_BYTE *)a1 + 137))
      return 0;
    a1 = *((id *)a1 + 25);
  }
  return a1;
}

id sub_1001F84C8(void *a1, void *a2, unint64_t a3)
{
  char *v5;
  id *v6;
  id v7;
  int v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void (*v19)(uint64_t, const char *, ...);
  objc_class *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  objc_class *v28;
  int v29;
  const char *v30;
  const char *v31;
  void *v32;
  id v33;
  void *v34;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v38;
  const char *ClassName;
  const char *Name;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  objc_class *v44;
  int v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  void (*v56)(uint64_t, const char *, ...);
  objc_class *v57;
  uint64_t v58;
  const char *v59;
  const char *v60;
  void *v61;
  uint64_t v62;
  NSObject *v63;
  objc_class *v64;
  int v65;
  id v66;
  void *v68;
  void (*v69)(uint64_t, const char *, ...);
  void *v70;
  uint64_t v71;
  NSObject *v72;
  objc_class *v73;
  int v74;
  void *v75;
  void (*v76)(uint64_t, const char *, ...);
  void *v77;
  uint64_t v78;
  objc_class *v79;
  int v80;
  objc_class *v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  objc_class *v85;
  uint64_t v86;
  const char *v87;
  const char *v88;
  _QWORD v89[4];
  _QWORD v90[4];
  _QWORD v91[5];
  _QWORD v92[5];
  uint8_t buf[4];
  int v94;
  __int16 v95;
  const char *v96;
  __int16 v97;
  const char *v98;
  __int16 v99;
  int v100;
  __int16 v101;
  const char *v102;
  __int16 v103;
  unint64_t v104;
  _QWORD v105[4];
  _QWORD v106[4];

  v5 = a2;
  if (!a1)
  {
    v52 = 0;
    goto LABEL_64;
  }
  v6 = a1;
  objc_sync_enter(v6);
  if (*((_DWORD *)v6 + 25))
  {
    v7 = 0;
LABEL_4:
    v8 = 1;
    goto LABEL_5;
  }
  v33 = sub_1001F913C((uint64_t)v6);
  v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
  v7 = v34;
  if (!v34)
    goto LABEL_4;
  if (objc_msgSend(v34, "code") == (id)58 && NFProductIsDevBoard())
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(v6);
      if (class_isMetaClass(Class))
        v38 = 43;
      else
        v38 = 45;
      ClassName = object_getClassName(v6);
      Name = sel_getName("openSession:forType:");
      Logger(3, "%c[%{public}s %{public}s]:%i Hardware unavailable; please verify all hardware connections and power cycle system to retry",
        v38,
        ClassName,
        Name,
        242);
    }
    v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v42 = NFSharedLogGetLogger(v41);
    v43 = objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      v44 = object_getClass(v6);
      if (class_isMetaClass(v44))
        v45 = 43;
      else
        v45 = 45;
      *(_DWORD *)buf = 67109890;
      v94 = v45;
      v95 = 2082;
      v96 = object_getClassName(v6);
      v97 = 2082;
      v98 = sel_getName("openSession:forType:");
      v99 = 1024;
      v100 = 242;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Hardware unavailable; please verify all hardware connections and power cycle system to retry",
        buf,
        0x22u);
    }

    v6[37] = (id)3;
    v46 = objc_alloc((Class)NSError);
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v105[0] = NSLocalizedDescriptionKey;
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unresponsive hardware"));
    v106[0] = v48;
    v106[1] = &off_100302F60;
    v105[1] = CFSTR("Line");
    v105[2] = CFSTR("Method");
    v49 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("openSession:forType:"));
    v106[2] = v49;
    v105[3] = NSDebugDescriptionErrorKey;
    v50 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("openSession:forType:"), 244);
    v106[3] = v50;
    v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v106, v105, 4));
    v52 = objc_msgSend(v46, "initWithDomain:code:userInfo:", v47, 58, v51);

    goto LABEL_63;
  }
  v8 = 0;
LABEL_5:
  v9 = v6[37];
  if (v9 != (id)1 && (v9 != (id)4 || (a3 & 0xFFFFFFFFFFFFFFFDLL) != 0))
  {
    if (*((_DWORD *)v6 + 25))
    {
      if ((v8 & 1) != 0)
      {
        v10 = objc_alloc((Class)NSError);
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v89[0] = NSLocalizedDescriptionKey;
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NFCC is in Download mode. NCI not available."));
        v90[0] = v12;
        v90[1] = &off_100302F90;
        v89[1] = CFSTR("Line");
        v89[2] = CFSTR("Method");
        v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("openSession:forType:"));
        v90[2] = v13;
        v89[3] = NSDebugDescriptionErrorKey;
        v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("openSession:forType:"), 293);
        v90[3] = v14;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v90, v89, 4));
        v7 = objc_msgSend(v10, "initWithDomain:code:userInfo:", v11, 56, v15);
LABEL_60:

        goto LABEL_61;
      }
      v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v69 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v68);
      if (v69)
      {
        v81 = object_getClass(v6);
        if (class_isMetaClass(v81))
          v82 = 43;
        else
          v82 = 45;
        v83 = object_getClassName(v6);
        v84 = sel_getName("openSession:forType:");
        v69(3, "%c[%{public}s %{public}s]:%i FAILED: %s", v82, v83, v84, 292, "error == ((void *)0)");
      }
      v70 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v71 = NFSharedLogGetLogger(v70);
      v72 = objc_claimAutoreleasedReturnValue(v71);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        v73 = object_getClass(v6);
        if (class_isMetaClass(v73))
          v74 = 43;
        else
          v74 = 45;
        *(_DWORD *)buf = 67110146;
        v94 = v74;
        v95 = 2082;
        v96 = object_getClassName(v6);
        v97 = 2082;
        v98 = sel_getName("openSession:forType:");
        v99 = 1024;
        v100 = 292;
        v101 = 2080;
        v102 = "error == ((void *)0)";
LABEL_78:
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i FAILED: %s", buf, 0x2Cu);
      }
    }
    else
    {
      if (!v8)
      {
        *((_BYTE *)v6 + 137) = 1;
        if (v9 == (id)4)
        {
          NFDriverUnloadStackAndLeaveHWEnabled(v6[5], 0);
          NFDriverClose(v6[5]);
          v6[5] = 0;
        }
        v53 = objc_alloc((Class)NSError);
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v54 = objc_msgSend(v7, "code");
        v91[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)objc_msgSend(v7, "code") > 70)
          v55 = 71;
        else
          v55 = (uint64_t)objc_msgSend(v7, "code");
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", (&off_1002EB488)[v55]));
        v92[0] = v12;
        v92[1] = v7;
        v91[1] = NSUnderlyingErrorKey;
        v91[2] = CFSTR("Line");
        v92[2] = &off_100302F78;
        v91[3] = CFSTR("Method");
        v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("openSession:forType:"));
        v92[3] = v13;
        v91[4] = NSDebugDescriptionErrorKey;
        v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("openSession:forType:"), 289);
        v92[4] = v14;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v92, v91, 5));
        v66 = objc_msgSend(v53, "initWithDomain:code:userInfo:", v11, v54, v15);

        v7 = v66;
        goto LABEL_60;
      }
      v75 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v76 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v75);
      if (v76)
      {
        v85 = object_getClass(v6);
        if (class_isMetaClass(v85))
          v86 = 43;
        else
          v86 = 45;
        v87 = object_getClassName(v6);
        v88 = sel_getName("openSession:forType:");
        v76(3, "%c[%{public}s %{public}s]:%i FAILED: %s", v86, v87, v88, 279, "error != ((void *)0)");
      }
      v77 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v78 = NFSharedLogGetLogger(v77);
      v72 = objc_claimAutoreleasedReturnValue(v78);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        v79 = object_getClass(v6);
        if (class_isMetaClass(v79))
          v80 = 43;
        else
          v80 = 45;
        *(_DWORD *)buf = 67110146;
        v94 = v80;
        v95 = 2082;
        v96 = object_getClassName(v6);
        v97 = 2082;
        v98 = sel_getName("openSession:forType:");
        v99 = 1024;
        v100 = 279;
        v101 = 2080;
        v102 = "error != ((void *)0)";
        goto LABEL_78;
      }
    }

    abort();
  }
  if (objc_msgSend(v7, "code") == (id)56)
  {

    v7 = 0;
  }
  v16 = *((_DWORD *)v6 + 25);
  if (!v16)
  {
    *((_BYTE *)v6 + 137) = 0;
    sub_1001FA9CC((uint64_t)v6);
    v16 = *((_DWORD *)v6 + 25);
  }
  *((_DWORD *)v6 + 25) = v16 + 1;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[23], "objectForKey:", v5));

  v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  if (!v17)
  {
    v56 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v18);
    if (v56)
    {
      v57 = object_getClass(v6);
      if (class_isMetaClass(v57))
        v58 = 43;
      else
        v58 = 45;
      v59 = object_getClassName(v6);
      v60 = sel_getName("openSession:forType:");
      v56(6, "%c[%{public}s %{public}s]:%i Opening session on behalf of %@ with type %lu", v58, v59, v60, 271, v5, a3);
    }
    v61 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v62 = NFSharedLogGetLogger(v61);
    v63 = objc_claimAutoreleasedReturnValue(v62);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      v64 = object_getClass(v6);
      if (class_isMetaClass(v64))
        v65 = 43;
      else
        v65 = 45;
      *(_DWORD *)buf = 67110402;
      v94 = v65;
      v95 = 2082;
      v96 = object_getClassName(v6);
      v97 = 2082;
      v98 = sel_getName("openSession:forType:");
      v99 = 1024;
      v100 = 271;
      v101 = 2112;
      v102 = v5;
      v103 = 2048;
      v104 = a3;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Opening session on behalf of %@ with type %lu", buf, 0x36u);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
    objc_msgSend(v6[23], "setObject:forKeyedSubscript:", v11, v5);
    goto LABEL_62;
  }
  v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v18);
  if (v19)
  {
    v20 = object_getClass(v6);
    if (class_isMetaClass(v20))
      v21 = 43;
    else
      v21 = 45;
    v22 = object_getClassName(v6);
    v23 = sel_getName("openSession:forType:");
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[23], "objectForKeyedSubscript:", v5));
    v19(3, "%c[%{public}s %{public}s]:%i Owner %@ already has a session : %@", v21, v22, v23, 267, v5, v24);

  }
  v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v26 = NFSharedLogGetLogger(v25);
  v27 = objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    v28 = object_getClass(v6);
    if (class_isMetaClass(v28))
      v29 = 43;
    else
      v29 = 45;
    v30 = object_getClassName(v6);
    v31 = sel_getName("openSession:forType:");
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[23], "objectForKeyedSubscript:", v5));
    *(_DWORD *)buf = 67110402;
    v94 = v29;
    v95 = 2082;
    v96 = v30;
    v97 = 2082;
    v98 = v31;
    v99 = 1024;
    v100 = 267;
    v101 = 2112;
    v102 = v5;
    v103 = 2112;
    v104 = (unint64_t)v32;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Owner %@ already has a session : %@", buf, 0x36u);

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[23], "objectForKeyedSubscript:", v5));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v11, "intValue") + 1));
  objc_msgSend(v6[23], "setObject:forKeyedSubscript:", v12, v5);
LABEL_61:

LABEL_62:
  v7 = v7;
  v52 = v7;
LABEL_63:

  objc_sync_exit(v6);
LABEL_64:

  return v52;
}

void sub_1001F90E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001F913C(uint64_t a1)
{
  uint64_t v2;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  objc_class *v25;
  _BOOL4 v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  void *v36;
  int v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  void *v46;
  BOOL v47;
  uint64_t Stack;
  void *v49;
  void (*v50)(uint64_t, const char *, ...);
  objc_class *v51;
  uint64_t v52;
  const char *v53;
  const char *v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  objc_class *v58;
  int v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void (*v65)(uint64_t, const char *, ...);
  objc_class *v66;
  uint64_t v67;
  const char *v68;
  const char *v69;
  const char *v70;
  const char *v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  objc_class *v75;
  int v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  int v84;
  uint64_t v85;
  id v86;
  void *v87;
  void *v88;
  id v89;
  id v90;
  void *v91;
  id v92;
  void *v93;
  id v94;
  id v95;
  void *v96;
  void (*v97)(uint64_t, const char *, ...);
  objc_class *v98;
  uint64_t v99;
  const char *v100;
  const char *v101;
  void *v102;
  uint64_t v103;
  NSObject *v104;
  objc_class *v105;
  int v106;
  const char *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  id v112;
  void *v113;
  void *v114;
  id v115;
  id v116;
  void *v117;
  id v118;
  uint64_t v119;
  NSObject *v120;
  void *v121;
  void (*v122)(uint64_t, const char *, ...);
  objc_class *v123;
  uint64_t v124;
  const char *v125;
  const char *v126;
  void *v127;
  uint64_t v128;
  NSObject *v129;
  objc_class *v130;
  int v131;
  const char *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  id v137;
  void *v138;
  void *v139;
  id v140;
  id v141;
  void *v142;
  id v143;
  id v144;
  void *v145;
  id v146;
  void *v147;
  void *v148;
  id v149;
  id v150;
  void *v151;
  id v152;
  id v153;
  const char *Name;
  const char *v155;
  id v156;
  unsigned __int8 v157;
  _QWORD v158[4];
  _QWORD v159[4];
  _QWORD v160[4];
  _QWORD v161[4];
  _QWORD v162[4];
  _QWORD v163[4];
  _QWORD v164[4];
  _QWORD v165[4];
  _QWORD v166[4];
  _QWORD v167[4];
  _QWORD v168[4];
  _QWORD v169[4];
  _QWORD v170[4];
  _QWORD v171[4];
  _QWORD v172[4];
  _QWORD v173[4];
  _BYTE v174[28];
  __int16 v175;
  int v176;
  __int16 v177;
  const char *v178;
  uint8_t buf[56];

  if (!a1)
    return 0;
  v157 = 1;
  v2 = *(_QWORD *)(a1 + 40);
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  v5 = (void (*)(uint64_t, const char *, ...))Logger;
  if (v2)
  {
    if (Logger)
    {
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("_openDriver");
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v5(3, "%c[%{public}s %{public}s]:%i Stack already opened !", v9, ClassName, Name, 1729);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass((id)a1);
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName((id)a1);
      v16 = sel_getName("_openDriver");
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v15;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v16;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 1729;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Stack already opened !", buf, 0x22u);
    }

    if (*(_BYTE *)(a1 + 223))
    {
      v17 = objc_alloc((Class)NSError);
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v158[0] = NSLocalizedDescriptionKey;
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NFCC is in Download mode. NCI not available."));
      v159[0] = v19;
      v159[1] = &off_100303110;
      v158[1] = CFSTR("Line");
      v158[2] = CFSTR("Method");
      v20 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_openDriver"));
      v159[2] = v20;
      v158[3] = NSDebugDescriptionErrorKey;
      v21 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_openDriver"), 1731);
      v159[3] = v21;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v159, v158, 4));
      v23 = objc_msgSend(v17, "initWithDomain:code:userInfo:", v18, 56, v22);

      return v23;
    }
    return 0;
  }
  if (Logger)
  {
    v25 = object_getClass((id)a1);
    v26 = class_isMetaClass(v25);
    v27 = object_getClassName((id)a1);
    v155 = sel_getName("_openDriver");
    v28 = 45;
    if (v26)
      v28 = 43;
    v5(6, "%c[%{public}s %{public}s]:%i starting stack", v28, v27, v155, 1641);
  }
  v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v30 = NFSharedLogGetLogger(v29);
  v31 = objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    v32 = object_getClass((id)a1);
    if (class_isMetaClass(v32))
      v33 = 43;
    else
      v33 = 45;
    v34 = object_getClassName((id)a1);
    v35 = sel_getName("_openDriver");
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v33;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = v34;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v35;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = 1641;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i starting stack", buf, 0x22u);
  }

  sub_100149514(a1);
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v36 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;

  memset(buf, 0, 48);
  *(_QWORD *)buf = getenv("STOCKHOLM_DEVICE");
  *(_QWORD *)&buf[8] = getenv("HAMMERFEST_DEVICE");
  *(_QWORD *)&buf[24] = *(_QWORD *)(a1 + 272);
  v37 = *(_DWORD *)(a1 + 244);
  *(_DWORD *)&buf[32] = *(_DWORD *)(a1 + 224);
  *(_DWORD *)&buf[36] = v37;
  v38 = NFSharedSignpostLog(*(_QWORD *)&buf[8]);
  v39 = objc_claimAutoreleasedReturnValue(v38);
  if (os_signpost_enabled(v39))
  {
    *(_WORD *)v174 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DRIVER_OPEN", "", v174, 2u);
  }

  v40 = NFDriverOpen(buf, &v157);
  *(_QWORD *)(a1 + 40) = v40;
  if (v40)
  {
    v41 = NFSharedSignpostLog(v40);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_signpost_enabled(v42))
    {
      *(_WORD *)v174 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DRIVER_OPEN", "success", v174, 2u);
    }

    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 0, sub_1001FFEB8, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 1, sub_100005F90, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 2, sub_1001FFF40, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 3, sub_100200004, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 4, sub_100200624, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 5, sub_1002006A8, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 12, sub_10020072C, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 25, sub_1002007F4, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 6, sub_100200878, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 7, sub_100200920, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 8, sub_100200B84, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 9, sub_100200BF8, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 10, sub_100200C64, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 11, sub_100200CDC, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 13, sub_100200D7C, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 15, sub_100200DE8, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 18, sub_100200E98, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 20, sub_100200F34, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 22, sub_1000062BC, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 27, sub_100201450, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 28, sub_1002016A4, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 23, sub_1002016F8, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 24, sub_100201F88, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 26, sub_100201FF8, a1);
    NFDriverSetCallback(*(_QWORD *)(a1 + 40), 29, sub_100202060, a1);
    v43 = NFDriverSetCallback(*(_QWORD *)(a1 + 40), 30, sub_100202104, a1);
    v44 = NFSharedSignpostLog(v43);
    v45 = objc_claimAutoreleasedReturnValue(v44);
    if (os_signpost_enabled(v45))
    {
      *(_WORD *)v174 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v45, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DRIVER_LOAD_STACK", "", v174, 2u);
    }

    v156 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.stockholm"));
    if (!NFIsInternalBuild(v156)
      || (v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "objectForKey:", CFSTR("fakeDriverInitResult"))),
          v47 = v46 == 0,
          v46,
          v47))
    {
      if (*(_BYTE *)(a1 + 223))
        v63 = 24;
      else
        v63 = 8 * (*(_BYTE *)(a1 + 218) == 0);
      v93 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
      v94 = objc_msgSend(v93, "getTimestamp");
      Stack = NFDriverLoadStack(*(_QWORD *)(a1 + 40), v63);
      v95 = objc_msgSend(v93, "getDurationFrom:", v94);
      if ((_DWORD)Stack)
      {
        sub_10006B704((uint64_t)NFHardwareEventCALogger, (uint64_t)v95, Stack, 0);
      }
      else
      {
        memset(v174, 0, sizeof(v174));
        NFDriverGetControllerInfo(*(_QWORD *)(a1 + 40), v174);
        sub_10006B704((uint64_t)NFHardwareEventCALogger, (uint64_t)v95, 0, (uint64_t)objc_msgSend(v93, "getHardwareTypeForCA:", *(unsigned int *)&v174[4]));
      }

    }
    else
    {
      Stack = (uint64_t)objc_msgSend(v156, "integerForKey:", CFSTR("fakeDriverInitResult"));
      v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v50 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v49);
      if (v50)
      {
        v51 = object_getClass((id)a1);
        if (class_isMetaClass(v51))
          v52 = 43;
        else
          v52 = 45;
        v53 = object_getClassName((id)a1);
        v54 = sel_getName("_openDriver");
        v50(4, "%c[%{public}s %{public}s]:%i Faking driver init failure; error code=%d", v52, v53, v54, 1670, Stack);
      }
      v55 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v56 = NFSharedLogGetLogger(v55);
      v57 = objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        v58 = object_getClass((id)a1);
        if (class_isMetaClass(v58))
          v59 = 43;
        else
          v59 = 45;
        v60 = object_getClassName((id)a1);
        v61 = sel_getName("_openDriver");
        *(_DWORD *)v174 = 67110146;
        *(_DWORD *)&v174[4] = v59;
        *(_WORD *)&v174[8] = 2082;
        *(_QWORD *)&v174[10] = v60;
        *(_WORD *)&v174[18] = 2082;
        *(_QWORD *)&v174[20] = v61;
        v175 = 1024;
        v176 = 1670;
        v177 = 1024;
        LODWORD(v178) = Stack;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Faking driver init failure; error code=%d",
          v174,
          0x28u);
      }

      v62 = sleep(2u);
    }
    if ((_DWORD)Stack)
    {
      if ((_DWORD)Stack != 24)
      {
        v121 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v122 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v121);
        if (v122)
        {
          v123 = object_getClass((id)a1);
          if (class_isMetaClass(v123))
            v124 = 43;
          else
            v124 = 45;
          v125 = object_getClassName((id)a1);
          v126 = sel_getName("_openDriver");
          v122(3, "%c[%{public}s %{public}s]:%i Failed to start stack : %d", v124, v125, v126, 1695, Stack);
        }
        v127 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v128 = NFSharedLogGetLogger(v127);
        v129 = objc_claimAutoreleasedReturnValue(v128);
        if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
        {
          v130 = object_getClass((id)a1);
          if (class_isMetaClass(v130))
            v131 = 43;
          else
            v131 = 45;
          v132 = object_getClassName((id)a1);
          v133 = sel_getName("_openDriver");
          *(_DWORD *)v174 = 67110146;
          *(_DWORD *)&v174[4] = v131;
          *(_WORD *)&v174[8] = 2082;
          *(_QWORD *)&v174[10] = v132;
          *(_WORD *)&v174[18] = 2082;
          *(_QWORD *)&v174[20] = v133;
          v175 = 1024;
          v176 = 1695;
          v177 = 1024;
          LODWORD(v178) = Stack;
          _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to start stack : %d", v174, 0x28u);
        }

        v135 = NFSharedSignpostLog(v134);
        v136 = objc_claimAutoreleasedReturnValue(v135);
        if (os_signpost_enabled(v136))
        {
          *(_DWORD *)v174 = 67109120;
          *(_DWORD *)&v174[4] = Stack;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v136, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DRIVER_LOAD_STACK", "failure (%d)", v174, 8u);
        }

        sub_10020CAC8((uint64_t)NFDailyStatisticsCALogger, CFSTR("loadStackErrorCount"));
        *(_QWORD *)(a1 + 296) = 2;
        if ((Stack & 0xFFFFFFFE) == 0x10)
        {
          sub_100187C44((uint64_t)NFBugCapture, CFSTR("NFC controller in bad state"), CFSTR("NFC controller in bad state"), 0);
          v137 = objc_alloc((Class)NSError);
          v138 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v168[0] = NSLocalizedDescriptionKey;
          v139 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unresponsive hardware"));
          v169[0] = v139;
          v169[1] = &off_100303098;
          v168[1] = CFSTR("Line");
          v168[2] = CFSTR("Method");
          v140 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_openDriver"));
          v169[2] = v140;
          v168[3] = NSDebugDescriptionErrorKey;
          v141 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_openDriver"), 1702);
          v169[3] = v141;
          v142 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v169, v168, 4));
          v143 = objc_msgSend(v137, "initWithDomain:code:userInfo:", v138, 58, v142);

          +[NFExceptionsCALogger postAnalyticsSEFailureEvent:context:error:](NFExceptionsCALogger, "postAnalyticsSEFailureEvent:context:error:", 4, CFSTR("NFC controller in bad state"), v143);
        }
        else
        {
          if ((_DWORD)Stack == 14)
          {
            v153 = objc_alloc((Class)NSError);
            v147 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v164[0] = NSLocalizedDescriptionKey;
            v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Bad firmware"));
            v165[0] = v148;
            v165[1] = &off_1003030C8;
            v164[1] = CFSTR("Line");
            v164[2] = CFSTR("Method");
            v149 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_openDriver"));
            v165[2] = v149;
            v164[3] = NSDebugDescriptionErrorKey;
            v150 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_openDriver"), 1709);
            v165[3] = v150;
            v151 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v165, v164, 4));
            v152 = objc_msgSend(v153, "initWithDomain:code:userInfo:", v147, 55, v151);
          }
          else
          {
            v146 = objc_alloc((Class)NSError);
            if ((_DWORD)Stack == 2)
            {
              v147 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v166[0] = NSLocalizedDescriptionKey;
              v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Bad firmware"));
              v167[0] = v148;
              v167[1] = &off_1003030B0;
              v166[1] = CFSTR("Line");
              v166[2] = CFSTR("Method");
              v149 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_openDriver"));
              v167[2] = v149;
              v166[3] = NSDebugDescriptionErrorKey;
              v150 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_openDriver"), 1707);
              v167[3] = v150;
              v151 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v167, v166, 4));
              v152 = objc_msgSend(v146, "initWithDomain:code:userInfo:", v147, 55, v151);
            }
            else
            {
              v147 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v162[0] = NSLocalizedDescriptionKey;
              v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
              v163[0] = v148;
              v163[1] = &off_1003030E0;
              v162[1] = CFSTR("Line");
              v162[2] = CFSTR("Method");
              v149 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_openDriver"));
              v163[2] = v149;
              v162[3] = NSDebugDescriptionErrorKey;
              v150 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_openDriver"), 1711);
              v163[3] = v150;
              v151 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v163, v162, 4));
              v152 = objc_msgSend(v146, "initWithDomain:code:userInfo:", v147, 15, v151);
            }
          }
          v143 = v152;

        }
        NFDriverClose(*(_QWORD *)(a1 + 40));
        *(_QWORD *)(a1 + 40) = 0;
        v118 = v143;

        return v118;
      }
      v96 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v97 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v96);
      if (v97)
      {
        v98 = object_getClass((id)a1);
        if (class_isMetaClass(v98))
          v99 = 43;
        else
          v99 = 45;
        v100 = object_getClassName((id)a1);
        v101 = sel_getName("_openDriver");
        v97(3, "%c[%{public}s %{public}s]:%i Stack not loaded, NFCC is download mode", v99, v100, v101, 1718);
      }
      v102 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v103 = NFSharedLogGetLogger(v102);
      v104 = objc_claimAutoreleasedReturnValue(v103);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
      {
        v105 = object_getClass((id)a1);
        if (class_isMetaClass(v105))
          v106 = 43;
        else
          v106 = 45;
        v107 = object_getClassName((id)a1);
        v108 = sel_getName("_openDriver");
        *(_DWORD *)v174 = 67109890;
        *(_DWORD *)&v174[4] = v106;
        *(_WORD *)&v174[8] = 2082;
        *(_QWORD *)&v174[10] = v107;
        *(_WORD *)&v174[18] = 2082;
        *(_QWORD *)&v174[20] = v108;
        v175 = 1024;
        v176 = 1718;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Stack not loaded, NFCC is download mode", v174, 0x22u);
      }

      v110 = NFSharedSignpostLog(v109);
      v111 = objc_claimAutoreleasedReturnValue(v110);
      if (os_signpost_enabled(v111))
      {
        *(_WORD *)v174 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v111, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DRIVER_LOAD_STACK", "limited", v174, 2u);
      }

      *(_QWORD *)(a1 + 296) = 4;
      *(_BYTE *)(a1 + 223) = 1;
      v112 = objc_alloc((Class)NSError);
      v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v160[0] = NSLocalizedDescriptionKey;
      v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NFCC is in Download mode. NCI not available."));
      v161[0] = v114;
      v161[1] = &off_1003030F8;
      v160[1] = CFSTR("Line");
      v160[2] = CFSTR("Method");
      v115 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_openDriver"));
      v161[2] = v115;
      v160[3] = NSDebugDescriptionErrorKey;
      v116 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_openDriver"), 1722);
      v161[3] = v116;
      v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v161, v160, 4));
      v118 = objc_msgSend(v112, "initWithDomain:code:userInfo:", v113, 56, v117);

    }
    else
    {
      v119 = NFSharedSignpostLog(v62);
      v120 = objc_claimAutoreleasedReturnValue(v119);
      if (os_signpost_enabled(v120))
      {
        *(_WORD *)v174 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v120, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DRIVER_LOAD_STACK", "success", v174, 2u);
      }

      v118 = 0;
      *(_QWORD *)(a1 + 296) = 1;
      *(_BYTE *)(a1 + 223) = 0;
    }

    return v118;
  }
  v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v65 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v64);
  if (v65)
  {
    v66 = object_getClass((id)a1);
    if (class_isMetaClass(v66))
      v67 = 43;
    else
      v67 = 45;
    v68 = object_getClassName((id)a1);
    v69 = sel_getName("_openDriver");
    v70 = *(const char **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      v70 = "Unknown device";
    if (*(_QWORD *)buf)
      v71 = *(const char **)buf;
    else
      v71 = v70;
    v65(3, "%c[%{public}s %{public}s]:%i Failed to open device: %s", v67, v68, v69, 1656, v71);
  }
  v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v73 = NFSharedLogGetLogger(v72);
  v74 = objc_claimAutoreleasedReturnValue(v73);
  if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
  {
    v75 = object_getClass((id)a1);
    if (class_isMetaClass(v75))
      v76 = 43;
    else
      v76 = 45;
    v77 = object_getClassName((id)a1);
    v78 = sel_getName("_openDriver");
    v79 = *(const char **)buf;
    v80 = *(const char **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      v80 = "Unknown device";
    if (!*(_QWORD *)buf)
      v79 = v80;
    *(_DWORD *)v174 = 67110146;
    *(_DWORD *)&v174[4] = v76;
    *(_WORD *)&v174[8] = 2082;
    *(_QWORD *)&v174[10] = v77;
    *(_WORD *)&v174[18] = 2082;
    *(_QWORD *)&v174[20] = v78;
    v175 = 1024;
    v176 = 1656;
    v177 = 2080;
    v178 = v79;
    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open device: %s", v174, 0x2Cu);
  }

  v82 = NFSharedSignpostLog(v81);
  v83 = objc_claimAutoreleasedReturnValue(v82);
  if (os_signpost_enabled(v83))
  {
    *(_WORD *)v174 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v83, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DRIVER_OPEN", "open failure", v174, 2u);
  }

  v84 = v157;
  v85 = 2;
  if (!v157)
    v85 = 3;
  *(_QWORD *)(a1 + 296) = v85;
  if (v84)
  {
    v86 = objc_alloc((Class)NSError);
    v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v172[0] = NSLocalizedDescriptionKey;
    v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v173[0] = v88;
    v173[1] = &off_100303080;
    v172[1] = CFSTR("Line");
    v172[2] = CFSTR("Method");
    v89 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_openDriver"));
    v173[2] = v89;
    v172[3] = NSDebugDescriptionErrorKey;
    v90 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_openDriver"), 1659);
    v173[3] = v90;
    v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v173, v172, 4));
    v92 = objc_msgSend(v86, "initWithDomain:code:userInfo:", v87, 15, v91);
  }
  else
  {
    v144 = objc_alloc((Class)NSError);
    v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v170[0] = NSLocalizedDescriptionKey;
    v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No NFC on device"));
    v171[0] = v88;
    v171[1] = &off_100303080;
    v170[1] = CFSTR("Line");
    v170[2] = CFSTR("Method");
    v89 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_openDriver"));
    v171[2] = v89;
    v170[3] = NSDebugDescriptionErrorKey;
    v90 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_openDriver"), 1659);
    v171[3] = v90;
    v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v171, v170, 4));
    v92 = objc_msgSend(v144, "initWithDomain:code:userInfo:", v87, 57, v91);
  }
  v145 = v92;

  return v145;
}

void sub_1001FA94C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1001FA9CC(uint64_t a1)
{
  NFTemperatureReporter *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void **v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  uint64_t v16;
  id v17[2];
  id location;

  if (a1)
  {
    if (NFProductHasThermistor())
    {
      v2 = objc_opt_new(NFTemperatureReporter);
      v3 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v2;

      v4 = sub_1001D140C(*(_QWORD *)(a1 + 80));
      objc_initWeak(&location, (id)a1);
      v5 = objc_alloc((Class)NFTimer);
      v12 = _NSConcreteStackBlock;
      v13 = 3221225472;
      v14 = sub_100202484;
      v15 = &unk_1002E5E80;
      objc_copyWeak(v17, &location);
      v16 = a1;
      v17[1] = "_openDriverFinalizer";
      v6 = objc_msgSend(v5, "initWithCallback:queue:", &v12, *(_QWORD *)(a1 + 208));
      v7 = *(void **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v6;

      objc_destroyWeak(v17);
      objc_destroyWeak(&location);
    }
    objc_msgSend(*(id *)(a1 + 248), "handleStackLoad", v12, v13, v14, v15);
    objc_msgSend(*(id *)(a1 + 88), "stackLoaded:", *(_QWORD *)(a1 + 208));
    v8 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceNow:", 0.0);
    v9 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v8;

    if ((*(_BYTE *)(a1 + 274) & 2) != 0)
      NFDriverSetChipscope(*(_QWORD *)(a1 + 40), 1, objc_msgSend(*(id *)(a1 + 280), "bytes"), objc_msgSend(*(id *)(a1 + 280), "length"));
    v10 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.stockholm"));
    if (NFIsInternalBuild(v10))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", CFSTR("smbLogEnabled")));

      if (v11)
      {
        if (objc_msgSend(v10, "BOOLForKey:", CFSTR("smbLogEnabled")))
          NFDriverEnableSMBLogging(*(_QWORD *)(a1 + 40), 1);
      }
    }

  }
}

void sub_1001FAB94(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1001FABB8(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  unsigned int v7;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v11;
  const char *ClassName;
  const char *Name;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  void *v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  void *v33;
  void *v34;
  void (*v35)(uint64_t, const char *, ...);
  objc_class *v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  objc_class *v43;
  int v44;
  const char *v45;
  const char *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void (*v50)(uint64_t, const char *, ...);
  objc_class *v51;
  uint64_t v52;
  const char *v53;
  const char *v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  objc_class *v58;
  int v59;
  void *v60;
  int v61;
  int v62;
  void *v63;
  void *v64;
  uint8_t buf[4];
  int v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  id v74;
  __int16 v75;
  void *v76;

  v3 = a2;
  if (a1)
  {
    v4 = a1;
    objc_sync_enter(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v4 + 23), "objectForKey:", v3));
    v6 = v5;
    if (v5 && objc_msgSend(v5, "intValue"))
    {
      v7 = objc_msgSend(v6, "intValue");
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      if (v7 == 1)
      {
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
        if (Logger)
        {
          Class = object_getClass(v4);
          if (class_isMetaClass(Class))
            v11 = 43;
          else
            v11 = 45;
          ClassName = object_getClassName(v4);
          Name = sel_getName("closeSession:");
          Logger(6, "%c[%{public}s %{public}s]:%i Closing session on behalf of %{public}@", v11, ClassName, Name, 314, v3);
        }
        v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v15 = NFSharedLogGetLogger(v14);
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          v17 = object_getClass(v4);
          if (class_isMetaClass(v17))
            v18 = 43;
          else
            v18 = 45;
          *(_DWORD *)buf = 67110146;
          v66 = v18;
          v67 = 2082;
          v68 = object_getClassName(v4);
          v69 = 2082;
          v70 = sel_getName("closeSession:");
          v71 = 1024;
          v72 = 314;
          v73 = 2114;
          v74 = v3;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Closing session on behalf of %{public}@", buf, 0x2Cu);
        }

        objc_msgSend(*((id *)v4 + 23), "removeObjectForKey:", v3);
      }
      else
      {
        v50 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
        if (v50)
        {
          v51 = object_getClass(v4);
          if (class_isMetaClass(v51))
            v52 = 43;
          else
            v52 = 45;
          v53 = object_getClassName(v4);
          v54 = sel_getName("closeSession:");
          v50(6, "%c[%{public}s %{public}s]:%i Decrementing session on behalf of %{public}@", v52, v53, v54, 317, v3);
        }
        v55 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v56 = NFSharedLogGetLogger(v55);
        v57 = objc_claimAutoreleasedReturnValue(v56);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          v58 = object_getClass(v4);
          if (class_isMetaClass(v58))
            v59 = 43;
          else
            v59 = 45;
          *(_DWORD *)buf = 67110146;
          v66 = v59;
          v67 = 2082;
          v68 = object_getClassName(v4);
          v69 = 2082;
          v70 = sel_getName("closeSession:");
          v71 = 1024;
          v72 = 317;
          v73 = 2114;
          v74 = v3;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Decrementing session on behalf of %{public}@", buf, 0x2Cu);
        }

        v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v6, "intValue") - 1));
        objc_msgSend(*((id *)v4 + 23), "setObject:forKeyedSubscript:", v60, v3);

      }
      v61 = *((_DWORD *)v4 + 25);
      if (v61 <= 0)
      {
        v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
        objc_msgSend(v64, "handleFailureInMethod:object:file:lineNumber:description:", "closeSession:", v4, CFSTR("NFDriverWrapper.m"), 321, CFSTR("Session over released"));

        v61 = *((_DWORD *)v4 + 25);
      }
      v62 = v61 - 1;
      *((_DWORD *)v4 + 25) = v62;
      if (!v62)
      {
        *((_BYTE *)v4 + 137) = 1;
        sub_1001FB474((uint64_t)v4, 0);
        v63 = (void *)*((_QWORD *)v4 + 4);
        if (v63)
          objc_msgSend(v63, "startTimer:", 0.0);
      }
    }
    else
    {
      v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v19);
      if (v20)
      {
        v21 = object_getClass(v4);
        if (class_isMetaClass(v21))
          v22 = 43;
        else
          v22 = 45;
        v23 = object_getClassName(v4);
        v24 = sel_getName("closeSession:");
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v4 + 23), "objectForKeyedSubscript:", v3));
        v20(3, "%c[%{public}s %{public}s]:%i Owner %{public}@ does not have a session : %{public}@", v22, v23, v24, 307, v3, v25);

      }
      v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v27 = NFSharedLogGetLogger(v26);
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v29 = object_getClass(v4);
        if (class_isMetaClass(v29))
          v30 = 43;
        else
          v30 = 45;
        v31 = object_getClassName(v4);
        v32 = sel_getName("closeSession:");
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v4 + 23), "objectForKeyedSubscript:", v3));
        *(_DWORD *)buf = 67110402;
        v66 = v30;
        v67 = 2082;
        v68 = v31;
        v69 = 2082;
        v70 = v32;
        v71 = 1024;
        v72 = 307;
        v73 = 2114;
        v74 = v3;
        v75 = 2114;
        v76 = v33;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Owner %{public}@ does not have a session : %{public}@", buf, 0x36u);

      }
      v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v35 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v34);
      if (v35)
      {
        v36 = object_getClass(v4);
        if (class_isMetaClass(v36))
          v37 = 43;
        else
          v37 = 45;
        v38 = object_getClassName(v4);
        v39 = sel_getName("closeSession:");
        v35(3, "%c[%{public}s %{public}s]:%i Session Owners: %{public}@", v37, v38, v39, 308, *((_QWORD *)v4 + 23));
      }
      v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v41 = NFSharedLogGetLogger(v40);
      v42 = objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        v43 = object_getClass(v4);
        if (class_isMetaClass(v43))
          v44 = 43;
        else
          v44 = 45;
        v45 = object_getClassName(v4);
        v46 = sel_getName("closeSession:");
        v47 = (void *)*((_QWORD *)v4 + 23);
        *(_DWORD *)buf = 67110146;
        v66 = v44;
        v67 = 2082;
        v68 = v45;
        v69 = 2082;
        v70 = v46;
        v71 = 1024;
        v72 = 308;
        v73 = 2114;
        v74 = v47;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session Owners: %{public}@", buf, 0x2Cu);
      }

      if (NFIsInternalBuild(v48))
      {
        v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
        objc_msgSend(v49, "handleFailureInMethod:object:file:lineNumber:description:", "closeSession:", v4, CFSTR("NFDriverWrapper.m"), 310, CFSTR("driver session not held"));

      }
    }

    objc_sync_exit(v4);
  }

}

void sub_1001FB25C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FB2A8(void *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  _BYTE *v14;
  const char *Name;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;

  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("stopNow");
      v8 = 45;
      if (isMetaClass)
        v8 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i Closing driver now !", v8, ClassName, Name, 337);
    }
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFSharedLogGetLogger(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = object_getClass(a1);
      if (class_isMetaClass(v12))
        v13 = 43;
      else
        v13 = 45;
      *(_DWORD *)buf = 67109890;
      v17 = v13;
      v18 = 2082;
      v19 = object_getClassName(a1);
      v20 = 2082;
      v21 = sel_getName("stopNow");
      v22 = 1024;
      v23 = 337;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Closing driver now !", buf, 0x22u);
    }

    v14 = a1;
    objc_sync_enter(v14);
    v14[137] = 1;
    sub_1001FB474((uint64_t)v14, 1);
    objc_sync_exit(v14);

  }
}

void sub_1001FB458(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FB474(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  const char *Name;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;

  if (a1 && *(_QWORD *)(a1 + 40))
  {
    v4 = kdebug_trace(724566032, 0, 0, 0, 0);
    v5 = NFSharedSignpostLog(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "DRIVER_CLOSE", "", buf, 2u);
    }

    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("_closeDriver:");
      v13 = 45;
      if (isMetaClass)
        v13 = 43;
      v9(6, "%c[%{public}s %{public}s]:%i stopping stack", v13, ClassName, Name, 1824);
    }
    v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v15 = NFSharedLogGetLogger(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = object_getClass((id)a1);
      if (class_isMetaClass(v17))
        v18 = 43;
      else
        v18 = 45;
      v19 = object_getClassName((id)a1);
      v20 = sel_getName("_closeDriver:");
      *(_DWORD *)buf = 67109890;
      v29 = v18;
      v30 = 2082;
      v31 = v19;
      v32 = 2082;
      v33 = v20;
      v34 = 1024;
      v35 = 1824;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i stopping stack", buf, 0x22u);
    }

    objc_msgSend(*(id *)(a1 + 112), "stopTimer");
    objc_msgSend(*(id *)(a1 + 120), "stopTimer");
    objc_msgSend(*(id *)(a1 + 128), "stopTimer");
    v21 = *(void **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = 0;

    if ((a2 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 88), "stackUnloaded");
      v22 = *(void **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = 0;

      sub_100005538(a1);
      objc_msgSend(*(id *)(a1 + 248), "handleStackUnload");
      v23 = (id)sub_1001D163C(*(_QWORD *)(a1 + 80));
      v24 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = 0;

    }
    NFDriverUnloadStackAndLeaveHWEnabled(*(_QWORD *)(a1 + 40), 0);
    NFDriverClose(*(_QWORD *)(a1 + 40));
    *(_QWORD *)(a1 + 40) = 0;
    v25 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;

    v26 = *(void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = 0;

  }
}

BOOL sub_1001FB714(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unsigned int v6;
  int v7;
  _BOOL8 v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  void *v21;
  unsigned int v22;
  void *v23;
  unsigned int v24;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("atx")));
    v6 = objc_msgSend(v5, "unsignedIntValue");

    v7 = *(_DWORD *)(a1 + 244);
    v8 = v7 != v6;
    if (v7 != v6)
      *(_DWORD *)(a1 + 244) = v6;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("chipscope")));
    v10 = *(void **)(a1 + 280);
    if (!v10 && v9 || v10 && !v9 || v10 && v9 && (objc_msgSend(v10, "isEqualToData:", v9) & 1) == 0)
    {
      objc_storeStrong((id *)(a1 + 280), v9);
      v8 = 1;
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("flags")));
    v12 = objc_msgSend(v11, "unsignedLongValue");

    if (*(id *)(a1 + 272) != v12)
    {
      *(_QWORD *)(a1 + 272) = v12;
      v8 = 1;
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("pollPeriod")));
    v14 = objc_msgSend(v13, "unsignedIntValue");

    if (*(_DWORD *)(a1 + 224) != v14)
    {
      *(_DWORD *)(a1 + 224) = v14;
      v8 = 1;
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("multiTagPollPeriod")));
    v16 = objc_msgSend(v15, "unsignedIntValue");

    if (*(_DWORD *)(a1 + 228) != v16)
    {
      *(_DWORD *)(a1 + 228) = v16;
      v8 = 1;
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("multiTagPollRetries")));
    v18 = objc_msgSend(v17, "unsignedIntValue");

    if (*(_DWORD *)(a1 + 232) != v18)
    {
      *(_DWORD *)(a1 + 232) = v18;
      v8 = 1;
    }
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("typeATagDataRate")));
    v20 = objc_msgSend(v19, "unsignedIntValue");

    if (*(_DWORD *)(a1 + 96) != v20)
    {
      *(_DWORD *)(a1 + 96) = v20;
      v8 = 1;
    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("ntag5DataRate")));
    v22 = objc_msgSend(v21, "unsignedIntValue");

    if (*(_DWORD *)(a1 + 236) != v22)
    {
      *(_DWORD *)(a1 + 236) = v22;
      v8 = 1;
    }
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("ntag5T1")));
    v24 = objc_msgSend(v23, "unsignedIntValue");

    if (*(_DWORD *)(a1 + 240) != v24)
    {
      *(_DWORD *)(a1 + 240) = v24;
      v8 = 1;
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t sub_1001FB970(void *a1)
{
  id v1;
  uint64_t v2;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v6;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  id v14;
  void *v15;
  void *v16;
  void (*v17)(uint64_t, const char *, ...);
  objc_class *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  const char *v27;
  const char *v28;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  void *v39;

  if (!a1)
    return 0;
  v1 = a1;
  objc_sync_enter(v1);
  if (!*((_BYTE *)v1 + 137))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(v1);
      if (class_isMetaClass(Class))
        v6 = 43;
      else
        v6 = 45;
      ClassName = object_getClassName(v1);
      Name = sel_getName("restartDriver");
      Logger(6, "%c[%{public}s %{public}s]:%i re-starting the driver..", v6, ClassName, Name, 415);
    }
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFSharedLogGetLogger(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = object_getClass(v1);
      if (class_isMetaClass(v12))
        v13 = 43;
      else
        v13 = 45;
      *(_DWORD *)buf = 67109890;
      v31 = v13;
      v32 = 2082;
      v33 = object_getClassName(v1);
      v34 = 2082;
      v35 = sel_getName("restartDriver");
      v36 = 1024;
      v37 = 415;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i re-starting the driver..", buf, 0x22u);
    }

    sub_1001FB474((uint64_t)v1, 0);
    v14 = sub_1001F913C((uint64_t)v1);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (v15)
    {
      v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v16);
      if (v17)
      {
        v18 = object_getClass(v1);
        if (class_isMetaClass(v18))
          v19 = 43;
        else
          v19 = 45;
        v20 = object_getClassName(v1);
        v21 = sel_getName("restartDriver");
        v17(3, "%c[%{public}s %{public}s]:%i failed to re-start the driver! error=%@", v19, v20, v21, 419, v15);
      }
      v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v23 = NFSharedLogGetLogger(v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = object_getClass(v1);
        if (class_isMetaClass(v25))
          v26 = 43;
        else
          v26 = 45;
        v27 = object_getClassName(v1);
        v28 = sel_getName("restartDriver");
        *(_DWORD *)buf = 67110146;
        v31 = v26;
        v32 = 2082;
        v33 = v27;
        v34 = 2082;
        v35 = v28;
        v36 = 1024;
        v37 = 419;
        v38 = 2112;
        v39 = v15;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i failed to re-start the driver! error=%@", buf, 0x2Cu);
      }

      NFDriverSimulateCrash(*((_QWORD *)v1 + 5), 57054, "Re-starting error");
      v2 = 0;
      goto LABEL_26;
    }
    sub_1001FA9CC((uint64_t)v1);
  }
  v2 = 1;
LABEL_26:
  objc_sync_exit(v1);

  return v2;
}

void sub_1001FBC8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001FBCC0(uint64_t a1)
{
  id v2;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 104), "lock");
    v2 = *(id *)(a1 + 160);
    objc_msgSend(*(id *)(a1 + 104), "unlock");
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void sub_1001FBD08(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _QWORD v4[6];

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 104), "lock");
    v2 = *(unsigned __int8 *)(a1 + 176);
    objc_msgSend(*(id *)(a1 + 112), "stopTimer");
    objc_msgSend(*(id *)(a1 + 120), "stopTimer");
    objc_msgSend(*(id *)(a1 + 104), "unlock");
    if (v2)
    {
      v3 = *(NSObject **)(a1 + 208);
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      v4[2] = sub_1001FBD9C;
      v4[3] = &unk_1002E5C30;
      v4[4] = a1;
      v4[5] = "_resetFieldState";
      dispatch_async(v3, v4);
    }
  }
}

void sub_1001FBD9C(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  const char *Name;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i Forcing field exit on state reset", v8, ClassName, Name, 596);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67109890;
    v18 = v13;
    v19 = 2082;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 1024;
    v24 = 596;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Forcing field exit on state reset", buf, 0x22u);
  }

  sub_100005538(*(_QWORD *)(a1 + 32));
}

void sub_1001FBF1C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  if (a1)
  {
    v2 = *(void **)(a1 + 264);
    v3 = a2;
    objc_msgSend(v2, "driverRequestService:", v3);

  }
}

uint64_t sub_1001FBF60(void *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  const char *Name;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;

  if (!a1)
    return 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("restartDiscovery");
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 1417);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(a1);
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    *(_DWORD *)buf = 67109890;
    v19 = v13;
    v20 = 2082;
    v21 = object_getClassName(a1);
    v22 = 2082;
    v23 = sel_getName("restartDiscovery");
    v24 = 1024;
    v25 = 1417;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v14 = a1;
  objc_sync_enter(v14);
  if (v14[137])
    v15 = 0;
  else
    v15 = sub_1001FEF84((uint64_t)v14, 1);
  objc_sync_exit(v14);

  return v15;
}

void sub_1001FC128(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001FC144(_QWORD *a1)
{
  _QWORD *v1;
  NSMutableDictionary *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;

  v1 = a1;
  if (a1)
  {
    v2 = objc_opt_new(NSMutableDictionary);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v1 + 137)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v3, CFSTR("isClosing"));

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v1 + 24)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v4, CFSTR("FFStateStored"));

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v1 + 176)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v5, CFSTR("FieldON"));

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v1 + 136)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v6, CFSTR("TechnologySent"));

    v7 = (void *)v1[11];
    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "state"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v8, CFSTR("Reader Policy"));

    }
    else
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", &stru_1002ED8A8, CFSTR("Reader Policy"));
    }
    v9 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithDictionary:", v1[23]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v9, CFSTR("driverSessionOpened"));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)v1 + 25)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v10, CFSTR("driverSessionCount"));

    v1 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithDictionary:", v2);
  }
  return v1;
}

uint64_t sub_1001FC2F8(void *a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v7;
  const char *ClassName;
  const char *Name;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  unsigned __int8 *v17;
  void *v18;
  void (*v19)(uint64_t, const char *, ...);
  objc_class *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void (*v40)(uint64_t, const char *, ...);
  objc_class *v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  objc_class *v48;
  int v49;
  const char *v50;
  const char *v51;
  NSNumber *v52;
  void *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  void *v57;
  void *v58;
  unsigned int v59;
  void *v60;
  void (*v61)(uint64_t, const char *, ...);
  objc_class *v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  void *v66;
  uint64_t v67;
  NSObject *v68;
  objc_class *v69;
  int v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  objc_class *v75;
  uint64_t v76;
  const char *v77;
  const __CFString *v78;
  const __CFString *v79;
  void *v80;
  uint64_t v81;
  NSObject *v82;
  objc_class *v83;
  int v84;
  const char *v85;
  const __CFString *v86;
  const __CFString *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v92;
  void (*v93)(uint64_t, const char *, ...);
  objc_class *v94;
  uint64_t v95;
  const char *v96;
  const char *v97;
  const char *v98;
  void *v99;
  uint64_t v100;
  NSObject *v101;
  objc_class *v102;
  int v103;
  const char *v104;
  const char *v105;
  const char *v106;
  id v107;
  void *v108;
  const char *v109;
  void (*v110)(uint64_t, const char *, ...);
  const char *v111;
  NFHardwareControllerInfo *v112;
  unsigned int IsHostWakeCapable;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  unsigned int ControllerInfo;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  _QWORD v128[13];
  _QWORD v129[13];
  _QWORD v130[4];
  _QWORD v131[4];
  _QWORD v132[4];
  _QWORD v133[4];
  uint8_t buf[4];
  int v135;
  __int16 v136;
  const char *v137;
  __int16 v138;
  const char *v139;
  __int16 v140;
  int v141;
  __int16 v142;
  void *v143;
  __int16 v144;
  const __CFString *v145;

  if (!a1)
    return 0;
  v2 = a1;
  objc_sync_enter(v2);
  v3 = *((_QWORD *)v2 + 5);
  if (!v3)
  {
    v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    objc_msgSend(v108, "handleFailureInMethod:object:file:lineNumber:description:", "getControllerInfo:", v2, CFSTR("NFDriverWrapper.m"), 978, CFSTR("driver not open"));

    v3 = *((_QWORD *)v2 + 5);
  }
  v124 = 0;
  v125 = 0;
  v127 = 0;
  v126 = 0;
  ControllerInfo = NFDriverGetControllerInfo(v3, &v124);
  if ((ControllerInfo & 1) == 0)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(v2);
      if (class_isMetaClass(Class))
        v7 = 43;
      else
        v7 = 45;
      ClassName = object_getClassName(v2);
      Name = sel_getName("getControllerInfo:");
      Logger(3, "%c[%{public}s %{public}s]:%i Failed to get info", v7, ClassName, Name, 982);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(v2);
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(v2);
      v16 = sel_getName("getControllerInfo:");
      *(_DWORD *)buf = 67109890;
      v135 = v14;
      v136 = 2082;
      v137 = v15;
      v138 = 2082;
      v139 = v16;
      v140 = 1024;
      v141 = 982;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get info", buf, 0x22u);
    }
    goto LABEL_90;
  }
  if ((NF_isFeatureSupported(3) & 1) != 0)
  {
    IsHostWakeCapable = 1;
    goto LABEL_45;
  }
  v17 = v2;
  objc_sync_enter(v17);
  if (v17[137])
  {
    v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v18);
    if (v19)
    {
      v20 = object_getClass(v17);
      if (class_isMetaClass(v20))
        v21 = 43;
      else
        v21 = 45;
      v22 = object_getClassName(v17);
      v23 = sel_getName("isHostWakeCapable:");
      v19(6, "%c[%{public}s %{public}s]:%i Driver is closed", v21, v22, v23, 1882);
    }
    v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v25 = NFSharedLogGetLogger(v24);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = object_getClass(v17);
      if (class_isMetaClass(v27))
        v28 = 43;
      else
        v28 = 45;
      v29 = object_getClassName(v17);
      v30 = sel_getName("isHostWakeCapable:");
      *(_DWORD *)buf = 67109890;
      v135 = v28;
      v136 = 2082;
      v137 = v29;
      v138 = 2082;
      v139 = v30;
      v140 = 1024;
      v141 = 1882;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Driver is closed", buf, 0x22u);
    }

    v31 = objc_alloc((Class)NSError);
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v132[0] = NSLocalizedDescriptionKey;
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
    v133[0] = v33;
    v133[1] = &off_100303140;
    v132[1] = CFSTR("Line");
    v132[2] = CFSTR("Method");
    v34 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("isHostWakeCapable:"));
    v133[2] = v34;
    v132[3] = NSDebugDescriptionErrorKey;
    v35 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("isHostWakeCapable:"), 1883);
    v133[3] = v35;
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v133, v132, 4));
    v37 = objc_msgSend(v31, "initWithDomain:code:userInfo:", v32, 3, v36);
  }
  else
  {
    if (*((_QWORD *)v2 + 5))
    {
      IsHostWakeCapable = NFDriverIsHostWakeCapable();
      objc_sync_exit(v17);

      v47 = 0;
LABEL_43:

      goto LABEL_45;
    }
    v92 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v93 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v92);
    if (v93)
    {
      v94 = object_getClass(v17);
      if (class_isMetaClass(v94))
        v95 = 43;
      else
        v95 = 45;
      v96 = object_getClassName(v17);
      v97 = sel_getName("isHostWakeCapable:");
      if (*((_QWORD *)v2 + 5))
        v98 = "open";
      else
        v98 = "closed";
      v93(6, "%c[%{public}s %{public}s]:%i Driver is %s", v95, v96, v97, 1889, v98);
    }
    v99 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v100 = NFSharedLogGetLogger(v99);
    v101 = objc_claimAutoreleasedReturnValue(v100);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
    {
      v102 = object_getClass(v17);
      if (class_isMetaClass(v102))
        v103 = 43;
      else
        v103 = 45;
      v104 = object_getClassName(v17);
      v105 = sel_getName("isHostWakeCapable:");
      if (*((_QWORD *)v2 + 5))
        v106 = "open";
      else
        v106 = "closed";
      *(_DWORD *)buf = 67110146;
      v135 = v103;
      v136 = 2082;
      v137 = v104;
      v138 = 2082;
      v139 = v105;
      v140 = 1024;
      v141 = 1889;
      v142 = 2080;
      v143 = (void *)v106;
      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Driver is %s", buf, 0x2Cu);
    }

    v107 = objc_alloc((Class)NSError);
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v130[0] = NSLocalizedDescriptionKey;
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v131[0] = v33;
    v131[1] = &off_100303158;
    v130[1] = CFSTR("Line");
    v130[2] = CFSTR("Method");
    v34 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("isHostWakeCapable:"));
    v131[2] = v34;
    v130[3] = NSDebugDescriptionErrorKey;
    v35 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("isHostWakeCapable:"), 1890);
    v131[3] = v35;
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v131, v130, 4));
    v37 = objc_msgSend(v107, "initWithDomain:code:userInfo:", v32, 12, v36);
  }
  v38 = v37;

  objc_sync_exit(v17);
  if (v38)
  {
    v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v39);
    if (v40)
    {
      v41 = object_getClass(v17);
      if (class_isMetaClass(v41))
        v42 = 43;
      else
        v42 = 45;
      v43 = object_getClassName(v17);
      v44 = sel_getName("getControllerInfo:");
      v40(3, "%c[%{public}s %{public}s]:%i Error querying wake capability", v42, v43, v44, 990);
    }
    v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v46 = NFSharedLogGetLogger(v45);
    v47 = objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      v48 = object_getClass(v17);
      if (class_isMetaClass(v48))
        v49 = 43;
      else
        v49 = 45;
      v50 = object_getClassName(v17);
      v51 = sel_getName("getControllerInfo:");
      *(_DWORD *)buf = 67109890;
      v135 = v49;
      v136 = 2082;
      v137 = v50;
      v138 = 2082;
      v139 = v51;
      v140 = 1024;
      v141 = 990;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error querying wake capability", buf, 0x22u);
    }
    IsHostWakeCapable = 0;
    goto LABEL_43;
  }
  IsHostWakeCapable = 0;
LABEL_45:
  v112 = [NFHardwareControllerInfo alloc];
  v128[0] = CFSTR("siliconVersion");
  v12 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v124));
  v129[0] = v12;
  v128[1] = CFSTR("siliconName");
  v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v124)));
  v129[1] = v121;
  v128[2] = CFSTR("ROMVersion");
  v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v125));
  v129[2] = v120;
  v128[3] = CFSTR("firmwareVersion");
  v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v125)));
  v129[3] = v119;
  v128[4] = CFSTR("firmwareRevision");
  v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v126));
  v129[4] = v118;
  v128[5] = CFSTR("middlewareVersion");
  v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v126)));
  v129[5] = v117;
  v128[6] = CFSTR("hasAntenna");
  v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v2[218]));
  v129[6] = v116;
  v128[7] = CFSTR("hasMFW");
  v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*((_QWORD *)v2 + 5) + 58)));
  v129[7] = v115;
  v128[8] = CFSTR("hasHLMSupport");
  v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*((_QWORD *)v2 + 5) + 64)));
  v129[8] = v114;
  v128[9] = CFSTR("hasLPEMSupport");
  v52 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100197698((uint64_t)v2));
  v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
  v129[9] = v53;
  v128[10] = CFSTR("hasCarKeySupport");
  if (!v2[218])
    goto LABEL_53;
  v54 = HIDWORD(v124);
  if (!NFProductIsPhone())
  {
    if (NFProductIsWatch())
    {
      v56 = NFGetProductType() - 29;
      if (v56 >= 6 || ((0x33u >> v56) & 1) == 0)
      {
        v55 = v54 > 7;
        goto LABEL_54;
      }
    }
LABEL_53:
    v55 = 0;
    goto LABEL_54;
  }
  if (v54 < 8)
    goto LABEL_53;
  v55 = sub_100197698((uint64_t)v2);
LABEL_54:
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v55));
  v129[10] = v57;
  v128[11] = CFSTR("hasReaderModeSupport");
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v59 = objc_msgSend(v58, "BOOLForKey:", CFSTR("ReaderMode"));

  if (v59)
  {
    v60 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v61 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v60);
    if (v61)
    {
      v62 = object_getClass(v2);
      if (class_isMetaClass(v62))
        v63 = 43;
      else
        v63 = 45;
      v64 = object_getClassName(v2);
      v65 = sel_getName("_supportsReaderMode");
      v61(4, "%c[%{public}s %{public}s]:%i Defaults override for reader mode", v63, v64, v65, 1317);
    }
    v66 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v67 = NFSharedLogGetLogger(v66);
    v68 = objc_claimAutoreleasedReturnValue(v67);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      v69 = object_getClass(v2);
      if (class_isMetaClass(v69))
        v70 = 43;
      else
        v70 = 45;
      v71 = object_getClassName(v2);
      v72 = sel_getName("_supportsReaderMode");
      *(_DWORD *)buf = 67109890;
      v135 = v70;
      v136 = 2082;
      v137 = v71;
      v138 = 2082;
      v139 = v72;
      v140 = 1024;
      v141 = 1317;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Defaults override for reader mode", buf, 0x22u);
    }

    v73 = 1;
  }
  else
  {
    v73 = NFProductSupportsNFCReader();
    if (NFIsInternalBuild(v73) && v2[218] != (_DWORD)v73)
    {
      v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v110 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v74);
      if (v110)
      {
        v75 = object_getClass(v2);
        if (class_isMetaClass(v75))
          v76 = 43;
        else
          v76 = 45;
        v109 = object_getClassName(v2);
        v77 = sel_getName("_supportsReaderMode");
        v78 = CFSTR("NO");
        if (v2[218])
          v79 = CFSTR("YES");
        else
          v79 = CFSTR("NO");
        if ((_DWORD)v73)
          v78 = CFSTR("YES");
        v110(3, "%c[%{public}s %{public}s]:%i DeviceSupportsNFC result does not match!!! hasAntenna=%{public}@,  expected=%{public}@", v76, v109, v77, 1357, v79, v78);
      }
      v80 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v81 = NFSharedLogGetLogger(v80);
      v82 = objc_claimAutoreleasedReturnValue(v81);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
      {
        v83 = object_getClass(v2);
        if (class_isMetaClass(v83))
          v84 = 43;
        else
          v84 = 45;
        v111 = object_getClassName(v2);
        v85 = sel_getName("_supportsReaderMode");
        v86 = CFSTR("NO");
        if (v2[218])
          v87 = CFSTR("YES");
        else
          v87 = CFSTR("NO");
        if ((_DWORD)v73)
          v86 = CFSTR("YES");
        *(_DWORD *)buf = 67110402;
        v135 = v84;
        v136 = 2082;
        v137 = v111;
        v138 = 2082;
        v139 = v85;
        v140 = 1024;
        v141 = 1357;
        v142 = 2114;
        v143 = (void *)v87;
        v144 = 2114;
        v145 = v86;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i DeviceSupportsNFC result does not match!!! hasAntenna=%{public}@,  expected=%{public}@", buf, 0x36u);
      }

      v73 = v2[218] != 0;
    }
  }
  v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v73));
  v129[11] = v88;
  v128[12] = CFSTR("poweredRunDuringSleep");
  v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", IsHostWakeCapable));
  v129[12] = v89;
  v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v129, v128, 13));
  *a2 = -[NFHardwareControllerInfo initWithDictionary:](v112, "initWithDictionary:", v90);

LABEL_90:
  objc_sync_exit(v2);

  return ControllerInfo;
}

void sub_1001FD17C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1001FD1DC(unint64_t result)
{
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;

  if (result >= 3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
      Logger(3, "%s:%i Returning NFSecureElementRoutingOff because of invalid mode.", "-[NFDriverWrapper _asSecureElementRouting:]", 1029);
    v3 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v4 = NFSharedLogGetLogger(v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v7 = "-[NFDriverWrapper _asSecureElementRouting:]";
      v8 = 1024;
      v9 = 1029;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i Returning NFSecureElementRoutingOff because of invalid mode.", buf, 0x12u);
    }

    return 0;
  }
  return result;
}

unint64_t sub_1001FD2D8(void *a1)
{
  id v1;
  unsigned int v2;
  id v3;

  v1 = a1;
  objc_msgSend(v1, "wantsExpress");
  objc_msgSend(v1, "wantsIsoDepToHost");
  v2 = sub_1001FD1DC((unint64_t)objc_msgSend(v1, "embeddedMode"));
  v3 = objc_msgSend(v1, "hostMode");

  return v2 | (sub_1001FD1DC((unint64_t)v3) << 32);
}

id sub_1001FD360(_QWORD *a1, void *a2)
{
  uint64_t Name;
  id v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  void *v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  const char *v33;
  id *v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  id *v43;
  id v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  _BOOL4 v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  unsigned int v55;
  int v56;
  void *v57;
  int v58;
  void *v59;
  void (*v60)(uint64_t, const char *, ...);
  objc_class *v61;
  uint64_t v62;
  const char *v63;
  const char *v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  objc_class *v68;
  int v69;
  const char *v70;
  const char *v71;
  id v72;
  void *v73;
  void *v74;
  id v75;
  id v76;
  void *v77;
  int v78;
  float v79;
  void *v80;
  void (*v81)(uint64_t, const char *, ...);
  objc_class *v82;
  uint64_t v83;
  const char *v84;
  const char *v85;
  void *v86;
  uint64_t v87;
  NSObject *v88;
  objc_class *v89;
  int v90;
  const char *v91;
  const char *v92;
  id v93;
  _BOOL4 v94;
  _BOOL4 v96;
  float v97;
  float v98;
  unsigned int v99;
  void *v100;
  void (*v101)(uint64_t, const char *, ...);
  objc_class *v102;
  uint64_t v103;
  const char *v104;
  const char *v105;
  void *v106;
  uint64_t v107;
  NSObject *v108;
  objc_class *v109;
  int v110;
  const char *v111;
  const char *v112;
  void *v113;
  void (*v114)(uint64_t, const char *, ...);
  objc_class *v115;
  uint64_t v116;
  const char *v117;
  const char *v118;
  void *v119;
  void *v120;
  uint64_t v121;
  NSObject *v122;
  objc_class *v123;
  int v124;
  const char *v125;
  const char *v126;
  char *v127;
  int v128;
  id v129;
  void *v130;
  void *v131;
  id v132;
  id v133;
  void *v134;
  id v135;
  int v136;
  uint64_t v137;
  NSObject *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  void *v143;
  void (*v144)(uint64_t, const char *, ...);
  objc_class *v145;
  uint64_t v146;
  const char *v147;
  const char *v148;
  void *v149;
  uint64_t v150;
  NSObject *v151;
  objc_class *v152;
  int v153;
  const char *v154;
  const char *v155;
  void *v156;
  void (*v157)(uint64_t, const char *, ...);
  objc_class *v158;
  uint64_t v159;
  const char *v160;
  const char *v161;
  void *v162;
  uint64_t v163;
  NSObject *v164;
  objc_class *v165;
  int v166;
  const char *v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  id v172;
  void *v173;
  void *v174;
  id v175;
  id v176;
  void *v177;
  void *v179;
  void (*v180)(uint64_t, const char *, ...);
  objc_class *v181;
  uint64_t v182;
  const char *v183;
  const char *v184;
  void *v185;
  uint64_t v186;
  NSObject *v187;
  objc_class *v188;
  int v189;
  const char *v190;
  const char *v191;
  id v192;
  void *v193;
  void *v194;
  id v195;
  id v196;
  void *v197;
  void *v198;
  const char *v199;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  unint64_t v209;
  int v210;
  _QWORD v211[4];
  _QWORD v212[4];
  _QWORD v213[4];
  _QWORD v214[4];
  _QWORD v215[4];
  _QWORD v216[4];
  _QWORD v217[4];
  _QWORD v218[4];
  _QWORD v219[4];
  _QWORD v220[4];
  uint8_t buf[4];
  int v222;
  __int16 v223;
  const char *v224;
  __int16 v225;
  const char *v226;
  __int16 v227;
  int v228;
  __int16 v229;
  const char *v230;
  __int16 v231;
  id v232;

  v4 = a2;
  if (!a1)
  {
    v41 = 0;
    goto LABEL_186;
  }
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v7 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = (uint64_t)sel_getName("setRouting:");
    if (objc_msgSend(v4, "fdOn"))
      v11 = "yes";
    else
      v11 = "no";
    v199 = v11;
    v12 = 45;
    if (isMetaClass)
      v12 = 43;
    v7(6, "%c[%{public}s %{public}s]:%i FieldDetect=%s : Routing %{public}@", v12, ClassName, Name, 1055, v199, v4);
  }
  v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v14 = NFSharedLogGetLogger(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = object_getClass(a1);
    if (class_isMetaClass(v16))
      Name = 43;
    else
      Name = 45;
    v17 = object_getClassName(a1);
    v18 = sel_getName("setRouting:");
    *(_DWORD *)buf = 67110402;
    if (objc_msgSend(v4, "fdOn"))
      v19 = "yes";
    else
      v19 = "no";
    v222 = Name;
    v223 = 2082;
    v224 = v17;
    v225 = 2082;
    v226 = v18;
    v227 = 1024;
    v228 = 1055;
    v229 = 2080;
    v230 = v19;
    v231 = 2114;
    v232 = v4;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i FieldDetect=%s : Routing %{public}@", buf, 0x36u);
  }

  v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v20);
  if (v21)
  {
    v22 = object_getClass(a1);
    if (class_isMetaClass(v22))
      v23 = 43;
    else
      v23 = 45;
    v24 = object_getClassName(a1);
    v25 = sel_getName("setRouting:");
    v21(6, "%c[%{public}s %{public}s]:%i current routing: %{public}@", v23, v24, v25, 1056, a1[25]);
  }
  v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v27 = NFSharedLogGetLogger(v26);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = object_getClass(a1);
    if (class_isMetaClass(v29))
      v30 = 43;
    else
      v30 = 45;
    v31 = object_getClassName(a1);
    v32 = sel_getName("setRouting:");
    v33 = (const char *)a1[25];
    *(_DWORD *)buf = 67110146;
    v222 = v30;
    v223 = 2082;
    v224 = v31;
    v225 = 2082;
    v226 = v32;
    v227 = 1024;
    v228 = 1056;
    v229 = 2114;
    v230 = v33;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i current routing: %{public}@", buf, 0x2Cu);
  }

  v202 = objc_msgSend(v4, "fdOn");
  v204 = objc_msgSend(v4, "wantsCardEmulation");
  v203 = objc_msgSend(v4, "pollingType");
  v205 = objc_msgSend(v4, "wantsExpress");
  v201 = objc_msgSend(v4, "wantsSEReader");
  v34 = a1;
  objc_sync_enter(v34);
  if (!*((_BYTE *)v34 + 137))
  {
    if (!v34[5])
    {
      v198 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      objc_msgSend(v198, "handleFailureInMethod:object:file:lineNumber:description:", "setRouting:", v34, CFSTR("NFDriverWrapper.m"), 1074, CFSTR("driver not open"));

    }
    v43 = v34 + 25;
    v42 = v34[25];
    if (v42)
    {
      if (objc_msgSend(v42, "isEquivalentRouting:", v4))
      {
        v44 = objc_msgSend(*v43, "fdOn");
        if (v202 == (_DWORD)v44 || (v44 = objc_msgSend(v4, "fieldDetectType"), v44 == (id)3))
        {
          v45 = NFSharedSignpostLog(v44);
          v46 = objc_claimAutoreleasedReturnValue(v45);
          if (os_signpost_enabled(v46))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SetRoutingConfigInDriverWrapper", "No changes necessary", buf, 2u);
          }

LABEL_171:
          v41 = 0;
          goto LABEL_185;
        }
      }
    }
    if (objc_msgSend(v4, "pollingType") == 1 || objc_msgSend(v4, "pollingType") == 2)
      sub_1001CB2CC(v34, (uint64_t)objc_msgSend(v4, "polling"), objc_msgSend(v4, "tagDiscoveryConfig"));
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v43, "lpcdEcpFrame"));
    if (!v47 || (Name = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lpcdEcpFrame"))) != 0)
    {
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v43, "lpcdEcpFrame"));
      if (v49)
      {
        v48 = 0;
      }
      else
      {
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lpcdEcpFrame"));
        v48 = v50 != 0;

      }
      if (!v47)
        goto LABEL_49;
    }
    else
    {
      v48 = 1;
    }

LABEL_49:
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v43, "lpcdEcpFrame"));
    if (v51)
    {
      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lpcdEcpFrame"));
      if (v52)
      {
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v43, "lpcdEcpFrame"));
        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lpcdEcpFrame"));
        v55 = objc_msgSend(v53, "isEqualToData:", v54);

        v56 = v55 ^ 1;
      }
      else
      {
        v56 = 0;
      }

    }
    else
    {
      v56 = 0;
    }

    if (objc_msgSend(v4, "pollingType") == 2
      || objc_msgSend(*v43, "pollingType") == 2
      || objc_msgSend(v4, "pollingType") == 1
      || objc_msgSend(*v43, "pollingType") == 1)
    {
      if ((v48 | v56) == 1)
      {
LABEL_60:
        v210 = 0;
        v209 = 0;
        v206 = 0;
        v207 = 0;
        v208 = 0;
        if ((NFDriverSetConfiguration(v34[5], &v206, &v209) & 1) == 0)
        {
          v59 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v60 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v59);
          if (v60)
          {
            v61 = object_getClass(v34);
            if (class_isMetaClass(v61))
              v62 = 43;
            else
              v62 = 45;
            v63 = object_getClassName(v34);
            v64 = sel_getName("setRouting:");
            v60(3, "%c[%{public}s %{public}s]:%i Failed to stop routing for ECP configurationconfigure card emulation", v62, v63, v64, 1120);
          }
          v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v66 = NFSharedLogGetLogger(v65);
          v67 = objc_claimAutoreleasedReturnValue(v66);
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
          {
            v68 = object_getClass(v34);
            if (class_isMetaClass(v68))
              v69 = 43;
            else
              v69 = 45;
            v70 = object_getClassName(v34);
            v71 = sel_getName("setRouting:");
            *(_DWORD *)buf = 67109890;
            v222 = v69;
            v223 = 2082;
            v224 = v70;
            v225 = 2082;
            v226 = v71;
            v227 = 1024;
            v228 = 1120;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to stop routing for ECP configurationconfigure card emulation", buf, 0x22u);
          }

          v72 = objc_alloc((Class)NSError);
          v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v217[0] = NSLocalizedDescriptionKey;
          v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
          v218[0] = v74;
          v218[1] = &off_100302FF0;
          v217[1] = CFSTR("Line");
          v217[2] = CFSTR("Method");
          v75 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setRouting:"));
          v218[2] = v75;
          v217[3] = NSDebugDescriptionErrorKey;
          v76 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setRouting:"), 1121);
          v218[3] = v76;
          v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v218, v217, 4));
          v41 = objc_msgSend(v72, "initWithDomain:code:userInfo:", v73, 15, v77);

          goto LABEL_185;
        }
        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lpcdEcpFrame"));
        sub_1001CB430(v34, v57);

        v58 = 1;
LABEL_75:
        objc_msgSend(v34[13], "lock");
        v78 = *((unsigned __int8 *)v34 + 176);
        *((_DWORD *)v34 + 48) = 1;
        objc_msgSend(v34[13], "unlock");
        if (objc_msgSend(v4, "embeddedMode") == (id)1)
        {
          if (v78)
          {
            if (*((_BYTE *)v34 + 220))
              v79 = 1.0;
            else
              v79 = 0.5;
          }
          else
          {
            v79 = 0.0;
          }
          goto LABEL_99;
        }
        if (objc_msgSend(v4, "embeddedMode") == (id)2)
        {
          if (v78)
            v79 = 0.5;
          else
            v79 = 0.0;
        }
        else
        {
          v79 = 0.0;
          if (objc_msgSend(v4, "embeddedMode") || !*((_BYTE *)v34 + 64))
          {
LABEL_99:
            v93 = objc_msgSend(v4, "hostMode");
            v94 = v78 != 0;
            v96 = v79 == 0.0 && v93 == (id)2;
            v97 = 0.5;
            if (!v94 || !v96)
              v97 = v79;
            if (v94 && v97 == 0.0)
              v98 = 1.0;
            else
              v98 = v97;
            if ((v204 | v205) == 1)
              *((_BYTE *)v34[5] + 59) = sub_1001EBAFC(v34[21], 0);
            if (v204)
            {
              v99 = objc_msgSend(v4, "cardEmulationType");
            }
            else if (v205)
            {
              v99 = 7;
            }
            else
            {
              v99 = 0;
            }
            if (v203)
            {
              if (v203 == 3)
              {
                v100 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v101 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v100);
                if (v101)
                {
                  v102 = object_getClass(v34);
                  if (class_isMetaClass(v102))
                    v103 = 43;
                  else
                    v103 = 45;
                  v104 = object_getClassName(v34);
                  v105 = sel_getName("setRouting:");
                  v101(6, "%c[%{public}s %{public}s]:%i MultiTag Detection enabled", v103, v104, v105, 1196);
                }
                v106 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v107 = NFSharedLogGetLogger(v106);
                v108 = objc_claimAutoreleasedReturnValue(v107);
                if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
                {
                  v109 = object_getClass(v34);
                  if (class_isMetaClass(v109))
                    v110 = 43;
                  else
                    v110 = 45;
                  v111 = object_getClassName(v34);
                  v112 = sel_getName("setRouting:");
                  *(_DWORD *)buf = 67109890;
                  v222 = v110;
                  v223 = 2082;
                  v224 = v111;
                  v225 = 2082;
                  v226 = v112;
                  v227 = 1024;
                  v228 = 1196;
                  _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i MultiTag Detection enabled", buf, 0x22u);
                }

              }
              sub_1001CB3BC(v34, (uint64_t)objc_msgSend(v4, "pollingDuration"));
              if (objc_msgSend(v34[11], "readerModeProtectionActive"))
              {
                v113 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v114 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v113);
                if (v114)
                {
                  v115 = object_getClass(v34);
                  if (class_isMetaClass(v115))
                    v116 = 43;
                  else
                    v116 = 45;
                  v117 = object_getClassName(v34);
                  v118 = sel_getName("setRouting:");
                  v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34[11], "state"));
                  v114(4, "%c[%{public}s %{public}s]:%i Denying reader mode, protection active. state=%@", v116, v117, v118, 1202, v119);

                }
                v120 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v121 = NFSharedLogGetLogger(v120);
                v122 = objc_claimAutoreleasedReturnValue(v121);
                if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
                {
                  v123 = object_getClass(v34);
                  if (class_isMetaClass(v123))
                    v124 = 43;
                  else
                    v124 = 45;
                  v125 = object_getClassName(v34);
                  v126 = sel_getName("setRouting:");
                  v127 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34[11], "state"));
                  *(_DWORD *)buf = 67110146;
                  v222 = v124;
                  v223 = 2082;
                  v224 = v125;
                  v225 = 2082;
                  v226 = v126;
                  v227 = 1024;
                  v228 = 1202;
                  v229 = 2112;
                  v230 = v127;
                  _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Denying reader mode, protection active. state=%@", buf, 0x2Cu);

                }
                if (!v58)
                  goto LABEL_143;
                v210 = 0;
                v209 = 0;
                v209 = sub_1001FD2D8(*v43);
                v210 = v128;
                v206 = 0;
                v207 = 0;
                v208 = 0;
                LOBYTE(v206) = objc_msgSend(*v43, "fdOn");
                HIDWORD(v206) = objc_msgSend(*v43, "pollingType");
                LOBYTE(v207) = objc_msgSend(*v43, "wantsExpress");
                HIDWORD(v207) = objc_msgSend(*v43, "cardEmulationType");
                LOWORD(v208) = objc_msgSend(*v43, "wantsSEReader");
                if (!NFDriverSetConfiguration(v34[5], &v206, &v209))
                {
                  v179 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v180 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v179);
                  if (v180)
                  {
                    v181 = object_getClass(v34);
                    if (class_isMetaClass(v181))
                      v182 = 43;
                    else
                      v182 = 45;
                    v183 = object_getClassName(v34);
                    v184 = sel_getName("setRouting:");
                    v180(3, "%c[%{public}s %{public}s]:%i Failed to set configuration", v182, v183, v184, 1214);
                  }
                  v185 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v186 = NFSharedLogGetLogger(v185);
                  v187 = objc_claimAutoreleasedReturnValue(v186);
                  if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
                  {
                    v188 = object_getClass(v34);
                    if (class_isMetaClass(v188))
                      v189 = 43;
                    else
                      v189 = 45;
                    v190 = object_getClassName(v34);
                    v191 = sel_getName("setRouting:");
                    *(_DWORD *)buf = 67109890;
                    v222 = v189;
                    v223 = 2082;
                    v224 = v190;
                    v225 = 2082;
                    v226 = v191;
                    v227 = 1024;
                    v228 = 1214;
                    _os_log_impl((void *)&_mh_execute_header, v187, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set configuration", buf, 0x22u);
                  }

                  v192 = objc_alloc((Class)NSError);
                  v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                  v215[0] = NSLocalizedDescriptionKey;
                  v194 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
                  v216[0] = v194;
                  v216[1] = &off_100303008;
                  v215[1] = CFSTR("Line");
                  v215[2] = CFSTR("Method");
                  v195 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setRouting:"));
                  v216[2] = v195;
                  v215[3] = NSDebugDescriptionErrorKey;
                  v196 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setRouting:"), 1215);
                  v216[3] = v196;
                  v197 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v216, v215, 4));
                  v41 = objc_msgSend(v192, "initWithDomain:code:userInfo:", v193, 15, v197);

                }
                else
                {
LABEL_143:
                  v129 = objc_alloc((Class)NSError);
                  v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                  v213[0] = NSLocalizedDescriptionKey;
                  v131 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Reader mode temporarily disabled"));
                  v214[0] = v131;
                  v214[1] = &off_100303020;
                  v213[1] = CFSTR("Line");
                  v213[2] = CFSTR("Method");
                  v132 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setRouting:"));
                  v214[2] = v132;
                  v213[3] = NSDebugDescriptionErrorKey;
                  v133 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setRouting:"), 1218);
                  v214[3] = v133;
                  v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v214, v213, 4));
                  v41 = objc_msgSend(v129, "initWithDomain:code:userInfo:", v130, 47, v134);

                }
                goto LABEL_185;
              }
            }
            else
            {
              sub_1001CB3BC(v34, 0);
              sub_1001D16D8(v34[10], 0);
              if (objc_msgSend(v34[11], "readerModeStoppedShouldCooloffRun"))
                v135 = sub_1001F84C8(v34, CFSTR("Cooloff"), 1uLL);
            }
            LODWORD(v206) = (v205 | v202);
            HIDWORD(v206) = v203;
            LODWORD(v207) = v205;
            HIDWORD(v207) = v99;
            v208 = v201;
            v210 = 0;
            v209 = 0;
            v209 = sub_1001FD2D8(v4);
            v210 = v136;
            v137 = NFSharedSignpostLog(v209);
            v138 = objc_claimAutoreleasedReturnValue(v137);
            if (os_signpost_enabled(v138))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v138, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SET_SE_ROUTING", "NFDriverSetConfiguration", buf, 2u);
            }

            v139 = mach_absolute_time();
            if ((NFDriverSetConfiguration(v34[5], &v206, &v209) & 1) == 0)
            {
              v156 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v157 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v156);
              if (v157)
              {
                v158 = object_getClass(v34);
                if (class_isMetaClass(v158))
                  v159 = 43;
                else
                  v159 = 45;
                v160 = object_getClassName(v34);
                v161 = sel_getName("setRouting:");
                v157(3, "%c[%{public}s %{public}s]:%i Failed to set configuration", v159, v160, v161, 1242);
              }
              v162 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v163 = NFSharedLogGetLogger(v162);
              v164 = objc_claimAutoreleasedReturnValue(v163);
              if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
              {
                v165 = object_getClass(v34);
                if (class_isMetaClass(v165))
                  v166 = 43;
                else
                  v166 = 45;
                v167 = object_getClassName(v34);
                v168 = sel_getName("setRouting:");
                *(_DWORD *)buf = 67109890;
                v222 = v166;
                v223 = 2082;
                v224 = v167;
                v225 = 2082;
                v226 = v168;
                v227 = 1024;
                v228 = 1242;
                _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set configuration", buf, 0x22u);
              }

              v170 = NFSharedSignpostLog(v169);
              v171 = objc_claimAutoreleasedReturnValue(v170);
              if (os_signpost_enabled(v171))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v171, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SET_SE_ROUTING", "Error in NFDriverSetConfiguration", buf, 2u);
              }

              v172 = objc_alloc((Class)NSError);
              v173 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v211[0] = NSLocalizedDescriptionKey;
              v174 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
              v212[0] = v174;
              v212[1] = &off_100303038;
              v211[1] = CFSTR("Line");
              v211[2] = CFSTR("Method");
              v175 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setRouting:"));
              v212[2] = v175;
              v211[3] = NSDebugDescriptionErrorKey;
              v176 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setRouting:"), 1244);
              v212[3] = v176;
              v177 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v212, v211, 4));
              v41 = objc_msgSend(v172, "initWithDomain:code:userInfo:", v173, 15, v177);

              goto LABEL_185;
            }
            objc_storeStrong(v34 + 25, a2);
            v141 = NFSharedSignpostLog(v140);
            v142 = objc_claimAutoreleasedReturnValue(v141);
            if (os_signpost_enabled(v142))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v142, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SET_SE_ROUTING", "NFDriverSetConfiguration", buf, 2u);
            }

            if (v201 && *((_BYTE *)v34 + 64))
            {
              v143 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v144 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v143);
              if (v144)
              {
                v145 = object_getClass(v34);
                if (class_isMetaClass(v145))
                  v146 = 43;
                else
                  v146 = 45;
                v147 = object_getClassName(v34);
                v148 = sel_getName("setRouting:");
                v144(6, "%c[%{public}s %{public}s]:%i Reader starting and Applet is ready.", v146, v147, v148, 1250);
              }
              v149 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v150 = NFSharedLogGetLogger(v149);
              v151 = objc_claimAutoreleasedReturnValue(v150);
              if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
              {
                v152 = object_getClass(v34);
                if (class_isMetaClass(v152))
                  v153 = 43;
                else
                  v153 = 45;
                v154 = object_getClassName(v34);
                v155 = sel_getName("setRouting:");
                *(_DWORD *)buf = 67109890;
                v222 = v153;
                v223 = 2082;
                v224 = v154;
                v225 = 2082;
                v226 = v155;
                v227 = 1024;
                v228 = 1250;
                _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Reader starting and Applet is ready.", buf, 0x22u);
              }

            }
            if (v98 != 0.0)
            {
              objc_msgSend(v34[13], "lock");
              if (*((_BYTE *)v34 + 176) && v139 > (unint64_t)v34[19])
              {
                if (*((_DWORD *)v34 + 48) == 1)
                  objc_msgSend(v34[15], "startTimer:", v98);
                *((_DWORD *)v34 + 48) = 0;
              }
              objc_msgSend(v34[13], "unlock");
            }
            goto LABEL_171;
          }
          v80 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v81 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v80);
          if (v81)
          {
            v82 = object_getClass(v34);
            if (class_isMetaClass(v82))
              v83 = 43;
            else
              v83 = 45;
            v84 = object_getClassName(v34);
            v85 = sel_getName("setRouting:");
            v81(6, "%c[%{public}s %{public}s]:%i Resetting applet state", v83, v84, v85, 1158);
          }
          v86 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v87 = NFSharedLogGetLogger(v86);
          v88 = objc_claimAutoreleasedReturnValue(v87);
          if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
          {
            v89 = object_getClass(v34);
            if (class_isMetaClass(v89))
              v90 = 43;
            else
              v90 = 45;
            v91 = object_getClassName(v34);
            v92 = sel_getName("setRouting:");
            *(_DWORD *)buf = 67109890;
            v222 = v90;
            v223 = 2082;
            v224 = v91;
            v225 = 2082;
            v226 = v92;
            v227 = 1024;
            v228 = 1158;
            _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Resetting applet state", buf, 0x22u);
          }

        }
        *((_BYTE *)v34 + 64) = 0;
        goto LABEL_99;
      }
    }
    else if ((objc_msgSend(v4, "fdOn") & (v48 | v56) & 1) != 0)
    {
      goto LABEL_60;
    }
    v58 = 0;
    goto LABEL_75;
  }
  v35 = objc_alloc((Class)NSError);
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v219[0] = NSLocalizedDescriptionKey;
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
  v220[0] = v37;
  v220[1] = &off_100302FD8;
  v219[1] = CFSTR("Line");
  v219[2] = CFSTR("Method");
  v38 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setRouting:"));
  v220[2] = v38;
  v219[3] = NSDebugDescriptionErrorKey;
  v39 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setRouting:"), 1071);
  v220[3] = v39;
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v220, v219, 4));
  v41 = objc_msgSend(v35, "initWithDomain:code:userInfo:", v36, 3, v40);

LABEL_185:
  objc_sync_exit(v34);

LABEL_186:
  return v41;
}

void sub_1001FEBCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FEC70(void *a1, uint64_t a2, int a3)
{
  id v5;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v9;
  const char *ClassName;
  const char *Name;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  void *v17;
  void (*v18)(uint64_t, const char *, ...);
  objc_class *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  objc_class *v26;
  int v27;
  const char *v28;
  const char *v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;

  if (a1)
  {
    v5 = a1;
    objc_sync_enter(v5);
    if (!*((_BYTE *)v5 + 137))
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass(v5);
        if (class_isMetaClass(Class))
          v9 = 43;
        else
          v9 = 45;
        ClassName = object_getClassName(v5);
        Name = sel_getName("setExpressConfig:updateLPEMConfig:");
        Logger(6, "%c[%{public}s %{public}s]:%i 0x%04x", v9, ClassName, Name, 1280, a2);
      }
      v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v13 = NFSharedLogGetLogger(v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = object_getClass(v5);
        if (class_isMetaClass(v15))
          v16 = 43;
        else
          v16 = 45;
        *(_DWORD *)buf = 67110146;
        v31 = v16;
        v32 = 2082;
        v33 = object_getClassName(v5);
        v34 = 2082;
        v35 = sel_getName("setExpressConfig:updateLPEMConfig:");
        v36 = 1024;
        v37 = 1280;
        v38 = 1024;
        v39 = a2;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i 0x%04x", buf, 0x28u);
      }

      NFDriverSetExpressConfig(*((_QWORD *)v5 + 5), a2);
      if (a3)
      {
        v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v17);
        if (v18)
        {
          v19 = object_getClass(v5);
          if (class_isMetaClass(v19))
            v20 = 43;
          else
            v20 = 45;
          v21 = object_getClassName(v5);
          v22 = sel_getName("setExpressConfig:updateLPEMConfig:");
          v18(6, "%c[%{public}s %{public}s]:%i Updating the express config", v20, v21, v22, 1283);
        }
        v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v24 = NFSharedLogGetLogger(v23);
        v25 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v26 = object_getClass(v5);
          if (class_isMetaClass(v26))
            v27 = 43;
          else
            v27 = 45;
          v28 = object_getClassName(v5);
          v29 = sel_getName("setExpressConfig:updateLPEMConfig:");
          *(_DWORD *)buf = 67109890;
          v31 = v27;
          v32 = 2082;
          v33 = v28;
          v34 = 2082;
          v35 = v29;
          v36 = 1024;
          v37 = 1283;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Updating the express config", buf, 0x22u);
        }

        NFDriverSetHeadlessMode(*((_QWORD *)v5 + 5), 1);
      }
    }
    objc_sync_exit(v5);

  }
}

void sub_1001FEF50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001FEF84(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  id v5;
  int v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  uint64_t restarted;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *v25;
  _BOOL4 v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  const char *Name;
  const char *v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 32))
    v4 = objc_msgSend(*(id *)(a1 + 88), "readerModeProtectionActive");
  else
    v4 = 0;
  sub_1001D16D8(*(_BYTE **)(a1 + 80), 0);
  if (objc_msgSend(*(id *)(a1 + 88), "readerModeStoppedShouldCooloffRun"))
  {
    v4 = 1;
    v5 = (id)sub_1001F84C8(a1, CFSTR("Cooloff"), 1);
  }
  objc_msgSend(*(id *)(a1 + 104), "lock");
  v6 = *(unsigned __int8 *)(a1 + 176);
  if (*(_BYTE *)(a1 + 176))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("_restartDiscoveryWithReconfig:");
      v13 = 45;
      if (isMetaClass)
        v13 = 43;
      v9(6, "%c[%{public}s %{public}s]:%i Restarting field coalescing timer", v13, ClassName, Name, 1393);
    }
    v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v15 = NFSharedLogGetLogger(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = object_getClass((id)a1);
      if (class_isMetaClass(v17))
        v18 = 43;
      else
        v18 = 45;
      *(_DWORD *)buf = 67109890;
      v40 = v18;
      v41 = 2082;
      v42 = object_getClassName((id)a1);
      v43 = 2082;
      v44 = sel_getName("_restartDiscoveryWithReconfig:");
      v45 = 1024;
      v46 = 1393;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Restarting field coalescing timer", buf, 0x22u);
    }

    objc_msgSend(*(id *)(a1 + 120), "stopTimer");
    objc_msgSend(*(id *)(a1 + 120), "startTimer:", 0.5);
  }
  objc_msgSend(*(id *)(a1 + 104), "unlock");
  restarted = NFDriverRestartDiscovery(*(_QWORD *)(a1 + 40), a2);
  if ((v4 & restarted) == 1)
  {
    v20 = 1;
    sub_1001D16D8(*(_BYTE **)(a1 + 80), 1u);
    objc_msgSend(*(id *)(a1 + 88), "triggerBurnoutTimer");
  }
  else
  {
    v20 = restarted;
    if (v6)
      v21 = restarted;
    else
      v21 = 1;
    if ((v21 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 104), "lock");
      v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v23 = NFLogGetLogger(v22);
      if (v23)
      {
        v24 = (void (*)(uint64_t, const char *, ...))v23;
        v25 = object_getClass((id)a1);
        v26 = class_isMetaClass(v25);
        v27 = object_getClassName((id)a1);
        v38 = sel_getName("_restartDiscoveryWithReconfig:");
        v28 = 45;
        if (v26)
          v28 = 43;
        v24(4, "%c[%{public}s %{public}s]:%i Stopping coalescing timer as restart discovery failed", v28, v27, v38, 1407);
      }
      v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v30 = NFSharedLogGetLogger(v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v32 = object_getClass((id)a1);
        if (class_isMetaClass(v32))
          v33 = 43;
        else
          v33 = 45;
        v34 = object_getClassName((id)a1);
        v35 = sel_getName("_restartDiscoveryWithReconfig:");
        *(_DWORD *)buf = 67109890;
        v40 = v33;
        v41 = 2082;
        v42 = v34;
        v43 = 2082;
        v44 = v35;
        v45 = 1024;
        v46 = 1407;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Stopping coalescing timer as restart discovery failed", buf, 0x22u);
      }

      objc_msgSend(*(id *)(a1 + 120), "stopTimer");
      objc_msgSend(*(id *)(a1 + 104), "unlock");
      return 0;
    }
  }
  return v20;
}

uint64_t sub_1001FF318(void *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  const char *Name;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;

  if (!a1)
    return 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("resumeDiscovery");
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 1429);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(a1);
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    *(_DWORD *)buf = 67109890;
    v19 = v13;
    v20 = 2082;
    v21 = object_getClassName(a1);
    v22 = 2082;
    v23 = sel_getName("resumeDiscovery");
    v24 = 1024;
    v25 = 1429;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v14 = a1;
  objc_sync_enter(v14);
  if (v14[137])
    v15 = 0;
  else
    v15 = sub_1001FEF84((uint64_t)v14, 0);
  objc_sync_exit(v14);

  return v15;
}

void sub_1001FF4E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001FF4FC(void *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  id v14;
  char v15;
  char v16;
  id v17;
  id v18;
  const char *Name;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;

  if (!a1)
    return 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("getDieID");
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 1441);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(a1);
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v13;
    v23 = 2082;
    v24 = object_getClassName(a1);
    v25 = 2082;
    v26 = sel_getName("getDieID");
    v27 = 1024;
    v28 = 1441;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v14 = a1;
  objc_sync_enter(v14);
  if (*((_BYTE *)v14 + 137)
    || ((v21 = 0, *(_QWORD *)buf = 0, v15 = NFDriverReadDieID(*((_QWORD *)v14 + 5), buf, &v21), *(_QWORD *)buf)
      ? (v16 = v15)
      : (v16 = 0),
        (v16 & 1) == 0))
  {
    v18 = 0;
  }
  else
  {
    v17 = objc_alloc((Class)NSData);
    v18 = objc_msgSend(v17, "initWithBytesNoCopy:length:", *(_QWORD *)buf, v21);
  }
  objc_sync_exit(v14);

  return v18;
}

void sub_1001FF6F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001FF714(void *a1, _QWORD *a2)
{
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *UniqueFDRKey;
  BOOL v24;
  int v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  const char *Name;
  _QWORD v34[4];
  _QWORD v35[4];
  _QWORD v36[4];
  _QWORD v37[4];
  uint8_t buf[4];
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  int v45;

  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("getUniqueFDRKey:");
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v6(6, "%c[%{public}s %{public}s]:%i ", v10, ClassName, Name, 1464);
    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = object_getClass(a1);
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      *(_DWORD *)buf = 67109890;
      v39 = v15;
      v40 = 2082;
      v41 = object_getClassName(a1);
      v42 = 2082;
      v43 = sel_getName("getUniqueFDRKey:");
      v44 = 1024;
      v45 = 1464;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    v16 = a1;
    objc_sync_enter(v16);
    if (*((_BYTE *)v16 + 137))
    {
      if (a2)
      {
        v17 = objc_alloc((Class)NSError);
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v36[0] = NSLocalizedDescriptionKey;
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
        v37[0] = v19;
        v37[1] = &off_100303050;
        v36[1] = CFSTR("Line");
        v36[2] = CFSTR("Method");
        v20 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getUniqueFDRKey:"));
        v37[2] = v20;
        v36[3] = NSDebugDescriptionErrorKey;
        v21 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getUniqueFDRKey:"), 1468);
        v37[3] = v21;
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 4));
        *a2 = objc_msgSend(v17, "initWithDomain:code:userInfo:", v18, 3, v22);

LABEL_27:
        a2 = 0;
      }
    }
    else
    {
      if (a2)
        *a2 = 0;
      *(_DWORD *)buf = 0;
      UniqueFDRKey = (void *)NFDriverGetUniqueFDRKey(*((_QWORD *)v16 + 5), buf);
      if (UniqueFDRKey)
        v24 = *(_DWORD *)buf == 0;
      else
        v24 = 0;
      v25 = !v24;
      if (a2)
      {
        if (v25)
        {
          v26 = objc_alloc((Class)NSError);
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
          v34[0] = NSLocalizedDescriptionKey;
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
          v35[0] = v28;
          v35[1] = &off_100303068;
          v34[1] = CFSTR("Line");
          v34[2] = CFSTR("Method");
          v29 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getUniqueFDRKey:"));
          v35[2] = v29;
          v34[3] = NSDebugDescriptionErrorKey;
          v30 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getUniqueFDRKey:"), 1477);
          v35[3] = v30;
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v35, v34, 4));
          *a2 = objc_msgSend(v26, "initWithDomain:code:userInfo:", v27, 15, v31);

        }
      }
      if (!UniqueFDRKey)
        goto LABEL_27;
      a2 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", UniqueFDRKey);
      free(UniqueFDRKey);
    }
    objc_sync_exit(v16);

    return a2;
  }
  return 0;
}

void sub_1001FFBB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001FFBD4(void *a1)
{
  id v1;
  void *v2;

  if (a1)
  {
    v1 = a1;
    objc_sync_enter(v1);
    if (*((_BYTE *)v1 + 137))
      v2 = 0;
    else
      v2 = (void *)NFDriverCopyAndClearAssertion(*((_QWORD *)v1 + 5));
    objc_sync_exit(v1);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void sub_1001FFC30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_1001FFC44(id *result, _BYTE *a2, _QWORD *a3)
{
  id *v5;

  if (result)
  {
    v5 = result;
    objc_msgSend(result[13], "lock");
    if (a2)
      *a2 = *((_BYTE *)v5 + 176);
    if (a3)
      *a3 = objc_retainAutorelease(v5[20]);
    return (id *)objc_msgSend(v5[13], "unlock");
  }
  return result;
}

id sub_1001FFCA0(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *ErrorCode;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  _QWORD v12[2];
  _QWORD v13[2];
  NSErrorUserInfoKey v14;
  void *v15;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  if (*((_BYTE *)v3 + 137))
  {
    v4 = objc_alloc((Class)NSError);
    ErrorCode = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v14 = NSLocalizedDescriptionKey;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Aborted"));
    v15 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
    v8 = objc_msgSend(v4, "initWithDomain:code:userInfo:", ErrorCode, 3, v7);
  }
  else
  {
    if (!NFDriverGetSWIOTemperature(*((_QWORD *)v3 + 5), a2))
    {
      v8 = 0;
      goto LABEL_7;
    }
    ErrorCode = (void *)NFDriverCreateErrorCode();
    v9 = objc_alloc((Class)NSError);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v12[0] = NSLocalizedDescriptionKey;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v12[1] = NSUnderlyingErrorKey;
    v13[0] = v7;
    v13[1] = ErrorCode;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 2));
    v8 = objc_msgSend(v9, "initWithDomain:code:userInfo:", v6, 15, v10);

  }
LABEL_7:
  objc_sync_exit(v3);

  return v8;
}

void sub_1001FFE94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FFEB8(id *a1, uint64_t a2)
{
  NSObject *v4;
  os_activity_scope_state_s v5;

  v4 = _os_activity_create((void *)&_mh_execute_header, "NFCC hw reset", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v5.opaque[0] = 0;
  v5.opaque[1] = 0;
  os_activity_scope_enter(v4, &v5);
  os_activity_scope_leave(&v5);

  if (a1)
  {
    if ((sub_10014C524(a1) & 1) == 0)
      objc_msgSend(a1[31], "handleHardwareReset:", a2);
  }
}

void sub_1001FFF40(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  os_activity_scope_state_s v9;

  v4 = _os_activity_create((void *)&_mh_execute_header, "NFCC SE aid select", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v4, &v9);
  os_activity_scope_leave(&v9);

  v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", *a2, a2[1]);
  if (a1)
  {
    v6 = *(id *)(a1 + 248);
    v7 = v5;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "NF_asHexString"));
    objc_msgSend(v6, "handleSelectEvent:", v8);

  }
}

void sub_100200004(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  NSObject *v6;
  id v7;
  _QWORD *v8;
  id v9;
  void *v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  void *v14;
  void (*v15)(uint64_t, const char *, ...);
  void *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  void *v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  unsigned __int8 v32;
  void *v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  objc_class *v43;
  int v44;
  const char *v45;
  const char *v46;
  const char *Name;
  _BYTE state[18];
  __int16 v49;
  _BYTE v50[10];
  int v51;

  v6 = _os_activity_create((void *)&_mh_execute_header, "NFCC SE txn", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v6, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  if (a2)
    a2 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", *a2, a2[1]);
  if (a3)
    v7 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", *a3, a3[1]);
  else
    v7 = 0;
  v8 = a2;
  v9 = v7;
  v10 = v9;
  if (a1)
  {
    if (objc_msgSend(v9, "length") == (id)2)
    {
      v11 = (unsigned __int8 *)objc_msgSend(objc_retainAutorelease(v10), "bytes");
      v12 = *v11;
      v13 = v11[1];
      if ((v13 - 12) < 0xFFFFFFFE || (v12 - 5) <= 0xFFFFFFFD)
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
        if (Logger)
          Logger(3, "%s:%i Unexpected eventID=0x%x, eventType=0x%x", "ExtractProhibitTimerEvent", 112, v13, v12);
        v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v23 = NFSharedLogGetLogger(v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)state = 136446978;
          *(_QWORD *)&state[4] = "ExtractProhibitTimerEvent";
          *(_WORD *)&state[12] = 1024;
          *(_DWORD *)&state[14] = 112;
          v49 = 1024;
          *(_DWORD *)v50 = v13;
          *(_WORD *)&v50[4] = 1024;
          *(_DWORD *)&v50[6] = v12;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected eventID=0x%x, eventType=0x%x", state, 0x1Eu);
        }

      }
      else
      {
        v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v14);
        if (v12 == 3)
        {
          if (v13 == 11)
          {
            if (v15)
              v15(5, "%s:%i ProhibitTimer.Host.Start", "ExtractProhibitTimerEvent", 120);
            v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v17 = NFSharedLogGetLogger(v16);
            v18 = objc_claimAutoreleasedReturnValue(v17);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)state = 136446466;
              *(_QWORD *)&state[4] = "ExtractProhibitTimerEvent";
              *(_WORD *)&state[12] = 1024;
              *(_DWORD *)&state[14] = 120;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ProhibitTimer.Host.Start", state, 0x12u);
            }
            v19 = 2;
          }
          else
          {
            if (v15)
              v15(5, "%s:%i ProhibitTimer.SE.Start", "ExtractProhibitTimerEvent", 123);
            v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v28 = NFSharedLogGetLogger(v27);
            v18 = objc_claimAutoreleasedReturnValue(v28);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)state = 136446466;
              *(_QWORD *)&state[4] = "ExtractProhibitTimerEvent";
              *(_WORD *)&state[12] = 1024;
              *(_DWORD *)&state[14] = 123;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ProhibitTimer.SE.Start", state, 0x12u);
            }
            v19 = 0;
          }
        }
        else if (v13 == 11)
        {
          if (v15)
            v15(5, "%s:%i ProhibitTimer.Host.End", "ExtractProhibitTimerEvent", 128);
          v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v26 = NFSharedLogGetLogger(v25);
          v18 = objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)state = 136446466;
            *(_QWORD *)&state[4] = "ExtractProhibitTimerEvent";
            *(_WORD *)&state[12] = 1024;
            *(_DWORD *)&state[14] = 128;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ProhibitTimer.Host.End", state, 0x12u);
          }
          v19 = 3;
        }
        else
        {
          if (v15)
            v15(5, "%s:%i ProhibitTimer.SE.End", "ExtractProhibitTimerEvent", 131);
          v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v30 = NFSharedLogGetLogger(v29);
          v18 = objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)state = 136446466;
            *(_QWORD *)&state[4] = "ExtractProhibitTimerEvent";
            *(_WORD *)&state[12] = 1024;
            *(_DWORD *)&state[14] = 131;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ProhibitTimer.SE.End", state, 0x12u);
          }
          v19 = 1;
        }

        objc_msgSend(*(id *)(a1 + 248), "handleReaderModeProhibitTimerEvent:", v19);
      }
    }
    v31 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026A9D8, 9);
    v32 = objc_msgSend(v8, "isEqual:", v31);

    if ((v32 & 1) != 0 || !*(_BYTE *)(a1 + 221))
    {
      objc_msgSend(*(id *)(a1 + 256), "decodeSecureElementTransaction:event:", v8, v10);
    }
    else
    {
      v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v34 = NFLogGetLogger(v33);
      if (v34)
      {
        v35 = (void (*)(uint64_t, const char *, ...))v34;
        Class = object_getClass((id)a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("driverSecureElementTransaction:event:");
        v39 = 45;
        if (isMetaClass)
          v39 = 43;
        v35(6, "%c[%{public}s %{public}s]:%i Routing SE transaction event to active session", v39, ClassName, Name, 804);
      }
      v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v41 = NFSharedLogGetLogger(v40);
      v42 = objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        v43 = object_getClass((id)a1);
        if (class_isMetaClass(v43))
          v44 = 43;
        else
          v44 = 45;
        v45 = object_getClassName((id)a1);
        v46 = sel_getName("driverSecureElementTransaction:event:");
        *(_DWORD *)state = 67109890;
        *(_DWORD *)&state[4] = v44;
        *(_WORD *)&state[8] = 2082;
        *(_QWORD *)&state[10] = v45;
        v49 = 2082;
        *(_QWORD *)v50 = v46;
        *(_WORD *)&v50[8] = 1024;
        v51 = 804;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Routing SE transaction event to active session", state, 0x22u);
      }

      objc_msgSend(*(id *)(a1 + 248), "handleSecureElementTransactionData:appletIdentifier:", v10, v8);
    }
  }

}

void sub_100200624(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  os_activity_scope_state_s v7;

  v6 = _os_activity_create((void *)&_mh_execute_header, "NFCC SE restricted mode enter", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v7.opaque[0] = 0;
  v7.opaque[1] = 0;
  os_activity_scope_enter(v6, &v7);
  os_activity_scope_leave(&v7);

  if (a1)
    objc_msgSend(*(id *)(a1 + 248), "handleSecureElementEnteredRestrictedMode:os:", a2, a3);
}

void sub_1002006A8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  os_activity_scope_state_s v7;

  v6 = _os_activity_create((void *)&_mh_execute_header, "NFCC SE restricted mode exit", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v7.opaque[0] = 0;
  v7.opaque[1] = 0;
  os_activity_scope_enter(v6, &v7);
  os_activity_scope_leave(&v7);

  if (a1)
    objc_msgSend(*(id *)(a1 + 248), "handleSecureElementEnteredRestrictedModeExit:os:", a2, a3);
}

void sub_10020072C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  os_activity_scope_state_s v7;

  v6 = _os_activity_create((void *)&_mh_execute_header, "NFCC SE removed", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v7.opaque[0] = 0;
  v7.opaque[1] = 0;
  os_activity_scope_enter(v6, &v7);
  os_activity_scope_leave(&v7);

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 248), "handleSecureElementRemoved:withReason:", a2, a3);
    if ((_DWORD)a3 == 33)
    {
      sub_100187C44((uint64_t)NFBugCapture, CFSTR("Secure Element crashed"), CFSTR("Secure Element crashed. Reason: 0x21"), 0);
      +[NFExceptionsCALogger postAnalyticsSEFailureEvent:context:error:](NFExceptionsCALogger, "postAnalyticsSEFailureEvent:context:error:", 1, CFSTR("Secure Element crashed. Reason: 0x21"), 0);
    }
  }
}

void sub_1002007F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  NSObject *v6;
  os_activity_scope_state_s v7;

  v6 = _os_activity_create((void *)&_mh_execute_header, "NFCC SE OS reset", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v7.opaque[0] = 0;
  v7.opaque[1] = 0;
  os_activity_scope_enter(v6, &v7);
  os_activity_scope_leave(&v7);

  if (a1)
    objc_msgSend(*(id *)(a1 + 248), "handleSecureElementOSReset:withReason:", a2, a3);
}

void sub_100200878(id *a1, void *a2)
{
  NSObject *v4;
  NFHostCardEmulationDeviceHandle *v5;
  const char *v6;
  NFHostCardEmulationDeviceHandle *v7;
  os_activity_scope_state_s v8;

  v4 = _os_activity_create((void *)&_mh_execute_header, "NFCC HCE dev detected", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v8.opaque[0] = 0;
  v8.opaque[1] = 0;
  os_activity_scope_enter(v4, &v8);
  os_activity_scope_leave(&v8);

  if (a1)
  {
    v5 = objc_opt_new(NFHostCardEmulationDeviceHandle);
    v7 = v5;
    if (v5)
    {
      objc_setProperty_atomic(v5, v6, a1, 8);
      v7->_devHandle = a2;
    }
    objc_msgSend(a1[33], "handleHostCardReaderDetected:", v7);

  }
}

void sub_100200920(uint64_t a1, unsigned int a2, unsigned __int8 *a3, unsigned int a4)
{
  NSObject *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *specific;
  uint64_t Logger;
  void (*v15)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  const char *v25;
  const char *v26;
  const char *Name;
  _BYTE state[18];
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;

  v8 = _os_activity_create((void *)&_mh_execute_header, "NFCC RF tech ntf", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v8, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  v9 = sub_1002031C0((id *)a1, a2, a3, a4, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = v10;
  if (v10)
  {
    v12 = v10;
    if (a1)
    {
      if (*(_BYTE *)(a1 + 137))
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v15 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass((id)a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName((id)a1);
          Name = sel_getName("driverDidReceiveTechnologyEvent:");
          v19 = 45;
          if (isMetaClass)
            v19 = 43;
          v15(3, "%c[%{public}s %{public}s]:%i Driver session is closed", v19, ClassName, Name, 753);
        }
        v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v21 = NFSharedLogGetLogger(v20);
        v22 = objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v23 = object_getClass((id)a1);
          if (class_isMetaClass(v23))
            v24 = 43;
          else
            v24 = 45;
          v25 = object_getClassName((id)a1);
          v26 = sel_getName("driverDidReceiveTechnologyEvent:");
          *(_DWORD *)state = 67109890;
          *(_DWORD *)&state[4] = v24;
          *(_WORD *)&state[8] = 2082;
          *(_QWORD *)&state[10] = v25;
          v29 = 2082;
          v30 = v26;
          v31 = 1024;
          v32 = 753;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Driver session is closed", state, 0x22u);
        }

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 104), "lock");
        objc_storeStrong((id *)(a1 + 160), v11);
        if (*(_BYTE *)(a1 + 136))
        {
          objc_msgSend(*(id *)(a1 + 104), "unlock");
          objc_msgSend(*(id *)(a1 + 248), "handleFilteredFieldNotification:", *(_QWORD *)(a1 + 160));
        }
        else
        {
          *(_BYTE *)(a1 + 136) = 1;
          objc_msgSend(*(id *)(a1 + 104), "unlock");
          objc_msgSend(*(id *)(a1 + 248), "handleFieldNotification:", *(_QWORD *)(a1 + 160));
        }
      }
    }

  }
}

void sub_100200B84(uint64_t a1)
{
  NSObject *v2;
  os_activity_scope_state_s v3;

  v2 = _os_activity_create((void *)&_mh_execute_header, "NFCC SE end of operation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v3.opaque[0] = 0;
  v3.opaque[1] = 0;
  os_activity_scope_enter(v2, &v3);
  os_activity_scope_leave(&v3);

  if (a1)
  {
    *(_BYTE *)(a1 + 216) = 1;
    objc_msgSend(*(id *)(a1 + 248), "handleSecureElementEndOfOperation");
  }
}

void sub_100200BF8(uint64_t a1)
{
  NSObject *v2;
  os_activity_scope_state_s v3;

  v2 = _os_activity_create((void *)&_mh_execute_header, "NFCC SE RAPDU sent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v3.opaque[0] = 0;
  v3.opaque[1] = 0;
  os_activity_scope_enter(v2, &v3);
  os_activity_scope_leave(&v3);

  if (a1)
    *(_BYTE *)(a1 + 217) = 1;
}

void sub_100200C64(uint64_t a1)
{
  NSObject *v2;
  os_activity_scope_state_s v3;

  v2 = _os_activity_create((void *)&_mh_execute_header, "NFCC PLL unlocked", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v3.opaque[0] = 0;
  v3.opaque[1] = 0;
  os_activity_scope_enter(v2, &v3);
  os_activity_scope_leave(&v3);

  if (a1)
    sub_10020CAC8((uint64_t)NFDailyStatisticsCALogger, CFSTR("pllUnlock"));
}

void sub_100200CDC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  const char *v8;
  NSObject *v9;
  os_activity_scope_state_s v10;

  if (a3)
    v8 = "NFCC tags detected";
  else
    v8 = "NFCC 0 tag detected";
  v9 = _os_activity_create((void *)&_mh_execute_header, v8, (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v9, &v10);
  os_activity_scope_leave(&v10);

  sub_1001860B4(a1, a2, a3, a4);
}

void sub_100200D7C(uint64_t a1)
{
  NSObject *v2;
  os_activity_scope_state_s v3;

  v2 = _os_activity_create((void *)&_mh_execute_header, "NFCC express txn", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v3.opaque[0] = 0;
  v3.opaque[1] = 0;
  os_activity_scope_enter(v2, &v3);
  os_activity_scope_leave(&v3);

  if (a1)
    objc_msgSend(*(id *)(a1 + 264), "driverExpressModeExited");
}

void sub_100200DE8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  id v7;
  os_activity_scope_state_s v8;

  v6 = _os_activity_create((void *)&_mh_execute_header, "NFCC typeF request service ntf", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v8.opaque[0] = 0;
  v8.opaque[1] = 0;
  os_activity_scope_enter(v6, &v8);
  os_activity_scope_leave(&v8);

  if (a2)
  {
    v7 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2, a3);
    sub_1001FBF1C(a1, v7);

  }
  else
  {
    sub_1001FBF1C(a1, 0);
  }
}

void sub_100200E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  os_activity_scope_state_s v11;

  v10 = _os_activity_create((void *)&_mh_execute_header, "NFCC RSSI ntf", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v10, &v11);
  os_activity_scope_leave(&v11);

  if (a1)
    objc_msgSend(*(id *)(a1 + 256), "driverRSSIStatsWithTotalSamples:avgRSSI:maxRSSI:minRSSI:", a2, a3, a4, a5);
}

void sub_100200F34(void *a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  NSObject *v10;
  id *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *specific;
  uint64_t Logger;
  void (*v18)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  objc_class *v26;
  int v27;
  const char *v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  void (*v32)(uint64_t, const char *, ...);
  objc_class *v33;
  _BOOL4 v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  objc_class *v40;
  int v41;
  const char *v42;
  const char *v43;
  const char *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void (*v51)(uint64_t, const char *, ...);
  objc_class *v52;
  _BOOL4 v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  objc_class *v58;
  int v59;
  const char *v60;
  const char *v61;
  const char *Name;
  const char *v63;
  const char *v64;
  _BYTE state[18];
  __int16 v66;
  const char *v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  id v73;

  v10 = _os_activity_create((void *)&_mh_execute_header, "NFCC express txn/w RF", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)state = 0;
  *(_QWORD *)&state[8] = 0;
  os_activity_scope_enter(v10, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  v11 = a1;
  v12 = sub_1002031C0(v11, a3, a4, a5, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v14 = v13;
  if (v13)
  {
    v15 = v13;
    if (!v11)
    {
LABEL_38:

      goto LABEL_39;
    }
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v18 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v11);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v11);
      Name = sel_getName("driverDidReceiveExpressStartRfTech:withNotification:");
      v22 = 45;
      if (isMetaClass)
        v22 = 43;
      v18(6, "%c[%{public}s %{public}s]:%i expressType: %d RfTech:%{public}@", v22, ClassName, Name, 704, a2, v15);
    }
    v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v24 = NFSharedLogGetLogger(v23);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v26 = object_getClass(v11);
      if (class_isMetaClass(v26))
        v27 = 43;
      else
        v27 = 45;
      v28 = object_getClassName(v11);
      v29 = sel_getName("driverDidReceiveExpressStartRfTech:withNotification:");
      *(_DWORD *)state = 67110402;
      *(_DWORD *)&state[4] = v27;
      *(_WORD *)&state[8] = 2082;
      *(_QWORD *)&state[10] = v28;
      v66 = 2082;
      v67 = v29;
      v68 = 1024;
      v69 = 704;
      v70 = 1024;
      v71 = a2;
      v72 = 2114;
      v73 = v15;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i expressType: %d RfTech:%{public}@", state, 0x32u);
    }

    objc_storeStrong(v11 + 20, v14);
    if ((_DWORD)a2 == 32)
    {
      objc_msgSend(v11[33], "driverExpressModeEntered:", 6);
    }
    else
    {
      if (!(_DWORD)a2)
      {
        v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v31 = NFLogGetLogger(v30);
        if (v31)
        {
          v32 = (void (*)(uint64_t, const char *, ...))v31;
          v33 = object_getClass(v11);
          v34 = class_isMetaClass(v33);
          v35 = object_getClassName(v11);
          v63 = sel_getName("driverDidReceiveExpressStartRfTech:withNotification:");
          v36 = 45;
          if (v34)
            v36 = 43;
          v32(6, "%c[%{public}s %{public}s]:%i express mode set to none - ignoring", v36, v35, v63, 709);
        }
        v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v38 = NFSharedLogGetLogger(v37);
        v39 = objc_claimAutoreleasedReturnValue(v38);
        if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          goto LABEL_24;
        v40 = object_getClass(v11);
        if (class_isMetaClass(v40))
          v41 = 43;
        else
          v41 = 45;
        v42 = object_getClassName(v11);
        v43 = sel_getName("driverDidReceiveExpressStartRfTech:withNotification:");
        *(_DWORD *)state = 67109890;
        *(_DWORD *)&state[4] = v41;
        *(_WORD *)&state[8] = 2082;
        *(_QWORD *)&state[10] = v42;
        v66 = 2082;
        v67 = v43;
        v68 = 1024;
        v69 = 709;
        v44 = "%c[%{public}s %{public}s]:%i express mode set to none - ignoring";
LABEL_23:
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v44, state, 0x22u);
LABEL_24:

        goto LABEL_38;
      }
      if ((objc_msgSend(v15, "rfTechnology") & 4) != 0)
      {
        if (objc_msgSend(v15, "typeFSystemCode") == 768)
        {
          v45 = v11[33];
          v46 = 1;
          goto LABEL_37;
        }
        if (objc_msgSend(v15, "typeFSystemCode") == 2176)
        {
          v45 = v11[33];
          v46 = 5;
          goto LABEL_37;
        }
      }
    }
    v47 = objc_opt_class(NFFieldNotificationECP2_0);
    if ((objc_opt_isKindOfClass(v15, v47) & 1) != 0)
    {
      v45 = v11[33];
      v46 = 4;
    }
    else
    {
      v48 = objc_opt_class(NFFieldNotificationECP1_0);
      if ((objc_opt_isKindOfClass(v15, v48) & 1) != 0)
      {
        v45 = v11[33];
        v46 = 2;
      }
      else
      {
        if ((objc_msgSend(v15, "rfTechnology") & 3) == 0)
        {
          v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v50 = NFLogGetLogger(v49);
          if (v50)
          {
            v51 = (void (*)(uint64_t, const char *, ...))v50;
            v52 = object_getClass(v11);
            v53 = class_isMetaClass(v52);
            v54 = object_getClassName(v11);
            v64 = sel_getName("driverDidReceiveExpressStartRfTech:withNotification:");
            v55 = 45;
            if (v53)
              v55 = 43;
            v51(6, "%c[%{public}s %{public}s]:%i Unknown express type", v55, v54, v64, 741);
          }
          v56 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v57 = NFSharedLogGetLogger(v56);
          v39 = objc_claimAutoreleasedReturnValue(v57);
          if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            goto LABEL_24;
          v58 = object_getClass(v11);
          if (class_isMetaClass(v58))
            v59 = 43;
          else
            v59 = 45;
          v60 = object_getClassName(v11);
          v61 = sel_getName("driverDidReceiveExpressStartRfTech:withNotification:");
          *(_DWORD *)state = 67109890;
          *(_DWORD *)&state[4] = v59;
          *(_WORD *)&state[8] = 2082;
          *(_QWORD *)&state[10] = v60;
          v66 = 2082;
          v67 = v61;
          v68 = 1024;
          v69 = 741;
          v44 = "%c[%{public}s %{public}s]:%i Unknown express type";
          goto LABEL_23;
        }
        v45 = v11[33];
        v46 = 3;
      }
    }
LABEL_37:
    objc_msgSend(v45, "driverExpressModeEntered:", v46);
    goto LABEL_38;
  }
LABEL_39:

}

void sub_100201450(uint64_t a1, int a2, int a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  double v13;
  _UNKNOWN **v14;
  double v15;
  uint8_t v16[16];

  if (!a1)
    return;
  if (a3)
  {
    if (a2 == 3)
    {
      v5 = *(void **)(a1 + 88);
      v6 = 0;
      goto LABEL_26;
    }
    if (a2 == 2)
    {
      objc_msgSend(*(id *)(a1 + 128), "startTimer:", 5.0);
      if ((objc_msgSend(*(id *)(a1 + 200), "wantsReader") & 1) != 0
        || objc_msgSend(*(id *)(a1 + 200), "wantsSEReader"))
      {
        v5 = *(void **)(a1 + 88);
        v6 = 4;
LABEL_26:
        objc_msgSend(v5, "thermalStateChanged:", v6);
        return;
      }
    }
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v9 = (uint64_t)objc_msgSend(v8, "integerForKey:", CFSTR("lowTemperatureCount"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("lastLowTemperatureDate")));
  if (!v10)
    goto LABEL_12;
  v11 = objc_opt_class(NSDate);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) == 0)
    goto LABEL_12;
  v12 = v10;
  objc_msgSend(v7, "timeIntervalSinceDate:", v12);
  if (v13 < 0.0)
  {

LABEL_12:
    v12 = 0;
  }
  objc_msgSend(v8, "setInteger:forKey:", v9 + 1, CFSTR("lowTemperatureCount"));
  objc_msgSend(v8, "setObject:forKey:", v7, CFSTR("lastLowTemperatureDate"));
  objc_msgSend(v8, "synchronize");
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v16 = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "NFC Controller low temp", v16, 2u);
  }
  if (a2 == 5)
    v14 = &off_100306BF0;
  else
    v14 = &off_100306C18;
  if (NFIsInternalBuild(+[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", v14)))
  {
    sub_100187C44((uint64_t)NFBugCapture, CFSTR("NFC controller Low Temp"), CFSTR("NFC controller low temp"), 0);
    +[NFExceptionsCALogger postAnalyticsSEFailureEvent:context:error:](NFExceptionsCALogger, "postAnalyticsSEFailureEvent:context:error:", 2, CFSTR("NFC controller low temp"), 0);
  }
  else if (v9 < 9 || v12 && (objc_msgSend(v7, "timeIntervalSinceDate:", v12), v15 > 30.0))
  {
    sleep(1u);
    exit(-1);
  }

}

void sub_1002016A4(void *a1, _QWORD *a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", *a2, a2[1]);
  if (a1)
  {
    v4 = v3;
    sub_1001D63B8(a1, v3);
    v3 = v4;
  }

}

void sub_1002016F8(uint64_t a1, int a2, int a3, int a4)
{
  const char *v8;
  NSObject *v9;
  const __CFString *v10;
  const __CFString *v11;
  void *v12;
  unsigned int v13;
  void *specific;
  uint64_t Logger;
  void (*v16)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  objc_class *v24;
  int v25;
  const char *v26;
  const char *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void (*v38)(uint64_t, const char *, ...);
  objc_class *v39;
  _BOOL4 v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  objc_class *v46;
  int v47;
  const char *v48;
  const char *v49;
  void *v50;
  uint64_t v51;
  void (*v52)(uint64_t, const char *, ...);
  objc_class *v53;
  _BOOL4 v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  objc_class *v60;
  int v61;
  const char *v62;
  const char *v63;
  void *v64;
  uint64_t v65;
  void (*v66)(uint64_t, const char *, ...);
  objc_class *v67;
  _BOOL4 v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  objc_class *v74;
  int v75;
  const char *v76;
  const char *v77;
  objc_class *v78;
  _BOOL4 v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  NSObject *v84;
  objc_class *v85;
  int v86;
  const char *v87;
  const char *v88;
  const char *Name;
  const char *v90;
  const char *v91;
  const char *v92;
  const char *v93;
  _QWORD v94[4];
  const __CFString *v95;
  id v96;
  void *state;
  _BYTE state_8[26];
  _QWORD v99[2];
  _QWORD v100[2];

  if (a2)
  {
    if (a4)
      v8 = "NFCC SE reader started (ISODEP)";
    else
      v8 = "NFCC SE reader started";
  }
  else if (a4)
  {
    v8 = "NFCC SE reader stopped (ISODEP)";
  }
  else
  {
    v8 = "NFCC SE reader stopped";
  }
  v9 = _os_activity_create((void *)&_mh_execute_header, v8, (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  state = 0;
  *(_QWORD *)state_8 = 0;
  os_activity_scope_enter(v9, (os_activity_scope_state_t)&state);
  os_activity_scope_leave((os_activity_scope_state_t)&state);

  if (a1)
  {
    v10 = CFSTR("B");
    if (a3 != 2)
      v10 = CFSTR("Unknown");
    if (a3 == 1)
      v10 = CFSTR("A");
    v99[0] = CFSTR("Polling");
    v99[1] = CFSTR("Protocol");
    v11 = CFSTR("isoDep");
    if (!a4)
      v11 = CFSTR("Unknown");
    v100[0] = v10;
    v100[1] = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v100, v99, 2));
    if (a2)
    {
      if (a3)
      {
        *(_BYTE *)(a1 + 64) = 1;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 62))
        {
          v13 = objc_msgSend(*(id *)(a1 + 88), "readerModeProtectionActive");
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = NFLogGetLogger(specific);
          v16 = (void (*)(uint64_t, const char *, ...))Logger;
          if (v13)
          {
            if (Logger)
            {
              Class = object_getClass((id)a1);
              isMetaClass = class_isMetaClass(Class);
              ClassName = object_getClassName((id)a1);
              Name = sel_getName("driverSecureElementReaderMode:polling:isoDep:");
              v20 = 45;
              if (isMetaClass)
                v20 = 43;
              v16(6, "%c[%{public}s %{public}s]:%i Request to start eSE reader mode while thermal protection active. Dropping.", v20, ClassName, Name, 906);
            }
            v21 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v22 = NFSharedLogGetLogger(v21);
            v23 = objc_claimAutoreleasedReturnValue(v22);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              v24 = object_getClass((id)a1);
              if (class_isMetaClass(v24))
                v25 = 43;
              else
                v25 = 45;
              v26 = object_getClassName((id)a1);
              v27 = sel_getName("driverSecureElementReaderMode:polling:isoDep:");
              LODWORD(state) = 67109890;
              HIDWORD(state) = v25;
              *(_WORD *)state_8 = 2082;
              *(_QWORD *)&state_8[2] = v26;
              *(_WORD *)&state_8[10] = 2082;
              *(_QWORD *)&state_8[12] = v27;
              *(_WORD *)&state_8[20] = 1024;
              *(_DWORD *)&state_8[22] = 906;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Request to start eSE reader mode while thermal protection active. Dropping.", (uint8_t *)&state, 0x22u);
            }

            v95 = CFSTR("Error");
            v28 = objc_alloc((Class)NSError);
            v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v94[0] = NSLocalizedDescriptionKey;
            v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Reader mode temporarily disabled"));
            state = v30;
            *(_QWORD *)state_8 = &off_100302FC0;
            v94[1] = CFSTR("Line");
            v94[2] = CFSTR("Method");
            v31 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("driverSecureElementReaderMode:polling:isoDep:"));
            *(_QWORD *)&state_8[8] = v31;
            v94[3] = NSDebugDescriptionErrorKey;
            v32 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("driverSecureElementReaderMode:polling:isoDep:"), 908);
            *(_QWORD *)&state_8[16] = v32;
            v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &state, v94, 4));
            v34 = objc_msgSend(v28, "initWithDomain:code:userInfo:", v29, 47, v33);
            v96 = v34;
            v35 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v96, &v95, 1));

            v12 = (void *)v35;
          }
          else
          {
            if (Logger)
            {
              v78 = object_getClass((id)a1);
              v79 = class_isMetaClass(v78);
              v80 = object_getClassName((id)a1);
              v93 = sel_getName("driverSecureElementReaderMode:polling:isoDep:");
              v81 = 45;
              if (v79)
                v81 = 43;
              v16(6, "%c[%{public}s %{public}s]:%i Starting RF reader", v81, v80, v93, 911);
            }
            v82 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v83 = NFSharedLogGetLogger(v82);
            v84 = objc_claimAutoreleasedReturnValue(v83);
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
            {
              v85 = object_getClass((id)a1);
              if (class_isMetaClass(v85))
                v86 = 43;
              else
                v86 = 45;
              v87 = object_getClassName((id)a1);
              v88 = sel_getName("driverSecureElementReaderMode:polling:isoDep:");
              LODWORD(state) = 67109890;
              HIDWORD(state) = v86;
              *(_WORD *)state_8 = 2082;
              *(_QWORD *)&state_8[2] = v87;
              *(_WORD *)&state_8[10] = 2082;
              *(_QWORD *)&state_8[12] = v88;
              *(_WORD *)&state_8[20] = 1024;
              *(_DWORD *)&state_8[22] = 911;
              _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Starting RF reader", (uint8_t *)&state, 0x22u);
            }

            sub_1001FBF60((void *)a1);
          }
        }
        else
        {
          v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v65 = NFLogGetLogger(v64);
          if (v65)
          {
            v66 = (void (*)(uint64_t, const char *, ...))v65;
            v67 = object_getClass((id)a1);
            v68 = class_isMetaClass(v67);
            v69 = object_getClassName((id)a1);
            v92 = sel_getName("driverSecureElementReaderMode:polling:isoDep:");
            v70 = 45;
            if (v68)
              v70 = 43;
            v66(6, "%c[%{public}s %{public}s]:%i Applet requested RF reader", v70, v69, v92, 915);
          }
          v71 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v72 = NFSharedLogGetLogger(v71);
          v73 = objc_claimAutoreleasedReturnValue(v72);
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            v74 = object_getClass((id)a1);
            if (class_isMetaClass(v74))
              v75 = 43;
            else
              v75 = 45;
            v76 = object_getClassName((id)a1);
            v77 = sel_getName("driverSecureElementReaderMode:polling:isoDep:");
            LODWORD(state) = 67109890;
            HIDWORD(state) = v75;
            *(_WORD *)state_8 = 2082;
            *(_QWORD *)&state_8[2] = v76;
            *(_WORD *)&state_8[10] = 2082;
            *(_QWORD *)&state_8[12] = v77;
            *(_WORD *)&state_8[20] = 1024;
            *(_DWORD *)&state_8[22] = 915;
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Applet requested RF reader", (uint8_t *)&state, 0x22u);
          }

        }
        objc_msgSend(*(id *)(a1 + 248), "handleSecureElementReaderModeStarted:", v12);
      }
      else
      {
        v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v51 = NFLogGetLogger(v50);
        if (v51)
        {
          v52 = (void (*)(uint64_t, const char *, ...))v51;
          v53 = object_getClass((id)a1);
          v54 = class_isMetaClass(v53);
          v55 = object_getClassName((id)a1);
          v91 = sel_getName("driverSecureElementReaderMode:polling:isoDep:");
          v56 = 45;
          if (v54)
            v56 = 43;
          v52(6, "%c[%{public}s %{public}s]:%i SE reader ready", v56, v55, v91, 899);
        }
        v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v58 = NFSharedLogGetLogger(v57);
        v59 = objc_claimAutoreleasedReturnValue(v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          v60 = object_getClass((id)a1);
          if (class_isMetaClass(v60))
            v61 = 43;
          else
            v61 = 45;
          v62 = object_getClassName((id)a1);
          v63 = sel_getName("driverSecureElementReaderMode:polling:isoDep:");
          LODWORD(state) = 67109890;
          HIDWORD(state) = v61;
          *(_WORD *)state_8 = 2082;
          *(_QWORD *)&state_8[2] = v62;
          *(_WORD *)&state_8[10] = 2082;
          *(_QWORD *)&state_8[12] = v63;
          *(_WORD *)&state_8[20] = 1024;
          *(_DWORD *)&state_8[22] = 899;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i SE reader ready", (uint8_t *)&state, 0x22u);
        }

      }
    }
    else
    {
      v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v37 = NFLogGetLogger(v36);
      if (v37)
      {
        v38 = (void (*)(uint64_t, const char *, ...))v37;
        v39 = object_getClass((id)a1);
        v40 = class_isMetaClass(v39);
        v41 = object_getClassName((id)a1);
        v90 = sel_getName("driverSecureElementReaderMode:polling:isoDep:");
        v42 = 45;
        if (v40)
          v42 = 43;
        v38(6, "%c[%{public}s %{public}s]:%i Ended reader mode", v42, v41, v90, 921);
      }
      v43 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v44 = NFSharedLogGetLogger(v43);
      v45 = objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        v46 = object_getClass((id)a1);
        if (class_isMetaClass(v46))
          v47 = 43;
        else
          v47 = 45;
        v48 = object_getClassName((id)a1);
        v49 = sel_getName("driverSecureElementReaderMode:polling:isoDep:");
        LODWORD(state) = 67109890;
        HIDWORD(state) = v47;
        *(_WORD *)state_8 = 2082;
        *(_QWORD *)&state_8[2] = v48;
        *(_WORD *)&state_8[10] = 2082;
        *(_QWORD *)&state_8[12] = v49;
        *(_WORD *)&state_8[20] = 1024;
        *(_DWORD *)&state_8[22] = 921;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Ended reader mode", (uint8_t *)&state, 0x22u);
      }

      *(_BYTE *)(a1 + 64) = 0;
      objc_msgSend(*(id *)(a1 + 248), "handleSecureElementReaderModeEnded:", v12);
    }

  }
}

void sub_100201F88(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_activity_scope_state_s v4;

  v2 = _os_activity_create((void *)&_mh_execute_header, "NFCC tag removed", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v2, &v4);
  os_activity_scope_leave(&v4);

  if (a1)
  {
    v3 = *(NSObject **)(a1 + 48);
    if (v3)
      dispatch_semaphore_signal(v3);
  }
}

void sub_100201FF8(uint64_t a1)
{
  NSObject *v2;
  os_activity_scope_state_s v3;

  v2 = _os_activity_create((void *)&_mh_execute_header, "NFCC HCE dev target lost", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v3.opaque[0] = 0;
  v3.opaque[1] = 0;
  os_activity_scope_enter(v2, &v3);
  os_activity_scope_leave(&v3);

  sub_1001869B0(a1);
}

void sub_100202060(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  os_activity_scope_state_s v4;

  v2 = _os_activity_create((void *)&_mh_execute_header, "TXLDO Error", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v2, &v4);
  os_activity_scope_leave(&v4);

  if (a1)
  {
    if (NFIsInternalBuild(v3))
    {
      sub_100187C44((uint64_t)NFBugCapture, CFSTR("LDO Error detected"), CFSTR("LDO Error detected"), 0);
      +[NFExceptionsCALogger postAnalyticsSEFailureEvent:context:error:](NFExceptionsCALogger, "postAnalyticsSEFailureEvent:context:error:", 3, CFSTR("LDO Error detected"), 0);
    }
  }
}

void sub_100202104(uint64_t a1)
{
  NSObject *v2;
  os_activity_scope_state_s v3;

  v2 = _os_activity_create((void *)&_mh_execute_header, "Erase counter exceeded", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v3.opaque[0] = 0;
  v3.opaque[1] = 0;
  os_activity_scope_enter(v2, &v3);
  os_activity_scope_leave(&v3);

  if (a1)
    objc_msgSend(*(id *)(a1 + 248), "handleEraseCounterExceeded");
}

id sub_100202170(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = sub_10014B010(a1);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }
  return a1;
}

_QWORD *sub_10020218C(_QWORD *a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  void (*v23)(uint64_t, const char *, ...);
  objc_class *v24;
  _BOOL4 v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  const char *v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  id v46;
  __int16 v47;
  uint64_t v48;

  v3 = a2;
  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("triggerHammerfestRecoveryAt:");
      v11 = 45;
      if (isMetaClass)
        v11 = 43;
      v6(6, "%c[%{public}s %{public}s]:%i triggering time %{public}@  last Fury recovery %{public}@", v11, ClassName, Name, 1612, v3, a1[36]);
    }
    v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v13 = NFSharedLogGetLogger(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = object_getClass(a1);
      if (class_isMetaClass(v15))
        v16 = 43;
      else
        v16 = 45;
      v17 = object_getClassName(a1);
      v18 = sel_getName("triggerHammerfestRecoveryAt:");
      v19 = a1[36];
      *(_DWORD *)buf = 67110402;
      v38 = v16;
      v39 = 2082;
      v40 = v17;
      v41 = 2082;
      v42 = v18;
      v43 = 1024;
      v44 = 1612;
      v45 = 2114;
      v46 = v3;
      v47 = 2114;
      v48 = v19;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i triggering time %{public}@  last Fury recovery %{public}@", buf, 0x36u);
    }

    if (objc_msgSend(v3, "compare:", a1[36]) == (id)-1)
    {
      v21 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v22 = NFLogGetLogger(v21);
      if (v22)
      {
        v23 = (void (*)(uint64_t, const char *, ...))v22;
        v24 = object_getClass(a1);
        v25 = class_isMetaClass(v24);
        v26 = object_getClassName(a1);
        v36 = sel_getName("triggerHammerfestRecoveryAt:");
        v27 = 45;
        if (v25)
          v27 = 43;
        v23(6, "%c[%{public}s %{public}s]:%i Just recovered recently - skip this one", v27, v26, v36, 1614);
      }
      v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v29 = NFSharedLogGetLogger(v28);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        v31 = object_getClass(a1);
        if (class_isMetaClass(v31))
          v32 = 43;
        else
          v32 = 45;
        v33 = object_getClassName(a1);
        v34 = sel_getName("triggerHammerfestRecoveryAt:");
        *(_DWORD *)buf = 67109890;
        v38 = v32;
        v39 = 2082;
        v40 = v33;
        v41 = 2082;
        v42 = v34;
        v43 = 1024;
        v44 = 1614;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Just recovered recently - skip this one", buf, 0x22u);
      }

      a1 = 0;
    }
    else
    {
      v20 = sub_10014AC20(a1);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue(v20);
    }
  }

  return a1;
}

void sub_100202484(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  void *v5;
  float v6;
  uint64_t v7;
  float v8;
  id v9;
  void *specific;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  const char *v22;
  const char *v23;
  const char *Name;
  double v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained && objc_msgSend(WeakRetained[11], "thermalPressureCritical"))
  {
    v25 = 0.0;
    v4 = sub_1001FFCA0(v3, (uint64_t)&v25);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (!v5)
    {
      v7 = (uint64_t)v3[10];
      if (v7)
      {
        v8 = v25;
        v9 = sub_100007AFC(v7, v8, v6);
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v12 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(*(id *)(a1 + 32));
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(*(id *)(a1 + 32));
          Name = sel_getName(*(SEL *)(a1 + 48));
          v16 = 45;
          if (isMetaClass)
            v16 = 43;
          v12(6, "%c[%{public}s %{public}s]:%i Requesting temperature", v16, ClassName, Name, 1754);
        }
        v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v18 = NFSharedLogGetLogger(v17);
        v19 = objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          v20 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v20))
            v21 = 43;
          else
            v21 = 45;
          v22 = object_getClassName(*(id *)(a1 + 32));
          v23 = sel_getName(*(SEL *)(a1 + 48));
          *(_DWORD *)buf = 67109890;
          v27 = v21;
          v28 = 2082;
          v29 = v22;
          v30 = 2082;
          v31 = v23;
          v32 = 1024;
          v33 = 1754;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Requesting temperature", buf, 0x22u);
        }

      }
    }
    objc_msgSend(v3[16], "startTimer:", 5.0);

  }
}

void sub_10020266C(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  int ShouldUseLookbackRestrictor;
  __objc2_class **v6;
  id v7;
  void *v8;
  _QWORD v9[6];

  if (a1)
  {
    v3 = a2;
    v4 = sub_1000746B4((id *)[NFThermalMonitor alloc], v3);

    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100202748;
    v9[3] = &unk_1002E5C30;
    v9[4] = a1;
    v9[5] = "setPowerConsumptionMonitor:";
    sub_100074DBC((uint64_t)v4, v9);
    ShouldUseLookbackRestrictor = NFPlatformShouldUseLookbackRestrictor();
    v6 = &off_1002E4680;
    if (!ShouldUseLookbackRestrictor)
      v6 = off_1002E4678;
    v7 = objc_msgSend(objc_alloc(*v6), "initWithThermalMonitor:delegate:", v4, a1);
    v8 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v7;

  }
}

void sub_100202748(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *Name;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i Requesting temperature polling", v8, ClassName, Name, 1785);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67109890;
    v19 = v13;
    v20 = 2082;
    v21 = v14;
    v22 = 2082;
    v23 = v15;
    v24 = 1024;
    v25 = 1785;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Requesting temperature polling", buf, 0x22u);
  }

  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
    objc_msgSend(*(id *)(v16 + 128), "startTimer:", 5.0);
}

id sub_1002028D4(uint64_t a1, char a2)
{
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  const char *Name;
  _QWORD v24[4];
  _QWORD v25[4];
  uint8_t buf[4];
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;

  if (!a1)
    return 0;
  if (*(_QWORD *)(a1 + 40))
  {
    *(_BYTE *)(a1 + 222) = a2;
    NFDriverPreventReset();
    return 0;
  }
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass((id)a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName((id)a1);
    Name = sel_getName("setPreventReset:");
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i No driver !", v10, ClassName, Name, 1872);
  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass((id)a1);
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    *(_DWORD *)buf = 67109890;
    v27 = v15;
    v28 = 2082;
    v29 = object_getClassName((id)a1);
    v30 = 2082;
    v31 = sel_getName("setPreventReset:");
    v32 = 1024;
    v33 = 1872;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No driver !", buf, 0x22u);
  }

  v16 = objc_alloc((Class)NSError);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v24[0] = NSLocalizedDescriptionKey;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
  v25[0] = v18;
  v25[1] = &off_100303128;
  v24[1] = CFSTR("Line");
  v24[2] = CFSTR("Method");
  v19 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setPreventReset:"));
  v25[2] = v19;
  v24[3] = NSDebugDescriptionErrorKey;
  v20 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setPreventReset:"), 1873);
  v25[3] = v20;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v25, v24, 4));
  v22 = objc_msgSend(v16, "initWithDomain:code:userInfo:", v17, 12, v21);

  return v22;
}

id sub_100202BB0(void *a1, _BYTE *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  _QWORD v14[4];

  if (!a1)
    return 0;
  v3 = a1;
  v4 = objc_sync_enter(v3);
  if (a2)
  {
    v5 = 0;
    *a2 = NFDriverSupportsSecureTimersInOFF(v4);
  }
  else
  {
    v6 = objc_alloc((Class)NSError);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v13[0] = NSLocalizedDescriptionKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v14[0] = v8;
    v14[1] = &off_100303170;
    v13[1] = CFSTR("Line");
    v13[2] = CFSTR("Method");
    v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("supportsSecureTimersInOFF:"));
    v14[2] = v9;
    v13[3] = NSDebugDescriptionErrorKey;
    v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("supportsSecureTimersInOFF:"), 1905);
    v14[3] = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 4));
    v5 = objc_msgSend(v6, "initWithDomain:code:userInfo:", v7, 10, v11);

  }
  objc_sync_exit(v3);

  return v5;
}

void sub_100202D90(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id sub_1002031C0(id *a1, unsigned int a2, unsigned __int8 *a3, unsigned int a4, int a5)
{
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned int v8;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  const char *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  NSMutableData *v17;
  NSMutableData *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id v25;
  int v26;
  void *v27;
  void (*v28)(uint64_t, const char *, ...);
  void *v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  const char *v33;
  NSObject *v34;
  uint32_t v35;
  void *v36;
  void (*v37)(uint64_t, const char *, ...);
  void *v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  void (*v42)(uint64_t, const char *, ...);
  void *v43;
  uint64_t v44;
  int v45;
  void *v46;
  void (*v47)(uint64_t, const char *, ...);
  void *v48;
  uint64_t v49;
  void *v50;
  void (*v51)(uint64_t, const char *, ...);
  void *v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  uint64_t v56;
  void (*v57)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  objc_class *v65;
  int v66;
  const char *v67;
  const char *v68;
  const char *Name;
  _QWORD v74[3];
  _QWORD v75[3];
  uint8_t buf[4];
  _BYTE v77[14];
  __int16 v78;
  _BYTE v79[10];
  _BYTE v80[6];
  _BYTE v81[6];
  int v82;
  __int16 v83;
  int v84;

  v5 = a4;
  v6 = a3;
  v8 = a2;
  if ((a2 & 0x10) == 0)
    goto LABEL_13;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
  if (Logger)
  {
    if (a5)
      v12 = "express ";
    else
      v12 = "";
    Logger(4, "%s:%i RF Error found on %sFD (A=%d, B=%d, F=%d, V=%d)", "_NFDriverWrapperProccessRFTechDetectionInfo", 2029, v12, v8 & 1, (v8 >> 1) & 1, (v8 >> 2) & 1, (v8 >> 3) & 1);
  }
  v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v14 = NFSharedLogGetLogger(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    if (a5)
      v16 = "express ";
    else
      v16 = "";
    *(_DWORD *)buf = 136447746;
    *(_QWORD *)v77 = "_NFDriverWrapperProccessRFTechDetectionInfo";
    *(_WORD *)&v77[8] = 1024;
    *(_DWORD *)&v77[10] = 2029;
    v78 = 2080;
    *(_QWORD *)v79 = v16;
    *(_WORD *)&v79[8] = 1024;
    *(_DWORD *)v80 = v8 & 1;
    *(_WORD *)&v80[4] = 1024;
    *(_DWORD *)v81 = (v8 >> 1) & 1;
    *(_WORD *)&v81[4] = 1024;
    v82 = (v8 >> 2) & 1;
    v83 = 1024;
    v84 = (v8 >> 3) & 1;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i RF Error found on %sFD (A=%d, B=%d, F=%d, V=%d)", buf, 0x34u);
  }

  v5 = a4;
  v6 = a3;
  if ((a5 & 1) != 0)
  {
LABEL_13:
    v17 = objc_opt_new(NSMutableData);
    v18 = v17;
    if ((v8 & 8) != 0 && v6 && v5)
    {
      if (*v6 != 106)
      {
        v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v42 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v41);
        if (v42)
          v42(3, "%s:%i Houston we have a problem! Payload corrupted without RF errors being set. vData[0] = 0x%X", "_NFDriverWrapperProccessRFTechDetectionInfo", 2073, *v6);
        v43 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v44 = NFSharedLogGetLogger(v43);
        v22 = objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v45 = *v6;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)v77 = "_NFDriverWrapperProccessRFTechDetectionInfo";
          *(_WORD *)&v77[8] = 1024;
          *(_DWORD *)&v77[10] = 2073;
          v78 = 1024;
          *(_DWORD *)v79 = v45;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Houston we have a problem! Payload corrupted without RF errors being set. vData[0] = 0x%X", buf, 0x18u);
        }
        v24 = 0;
        goto LABEL_43;
      }
      -[NSMutableData appendBytes:length:](v17, "appendBytes:length:", v6, v5);
    }
    v19 = ((int)(v8 << 29) >> 31) & HIWORD(a2);
    v74[0] = CFSTR("FieldTechnology");
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8 & 0xF));
    v75[0] = v20;
    v74[1] = CFSTR("SystemCode");
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v19));
    v74[2] = CFSTR("ECPData");
    v75[1] = v21;
    v75[2] = v18;
    v22 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v75, v74, 3));

    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NFFieldNotification notificationWithDictionary:](NFFieldNotification, "notificationWithDictionary:", v22));
    v24 = v23;
    if (v23)
    {
      v25 = v23;
    }
    else
    {
      v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v37 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v36);
      if (v37)
        v37(3, "%s:%i Error creating field notification", "_NFDriverWrapperProccessRFTechDetectionInfo", 2099);
      v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v39 = NFSharedLogGetLogger(v38);
      v40 = objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)v77 = "_NFDriverWrapperProccessRFTechDetectionInfo";
        *(_WORD *)&v77[8] = 1024;
        *(_DWORD *)&v77[10] = 2099;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%{public}s:%i Error creating field notification", buf, 0x12u);
      }

    }
LABEL_43:

    return v24;
  }
  if ((v8 & 8) != 0)
  {
    if (!a3 || a4 < 2 || *a3 != 106)
    {
      v46 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v47 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v46);
      if (v47)
        v47(3, "%s:%i ECP payload corrupted.", "_NFDriverWrapperProccessRFTechDetectionInfo", 2051);
      v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v49 = NFSharedLogGetLogger(v48);
      v31 = objc_claimAutoreleasedReturnValue(v49);
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)v77 = "_NFDriverWrapperProccessRFTechDetectionInfo";
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)&v77[10] = 2051;
      v33 = "%{public}s:%i ECP payload corrupted.";
      v34 = v31;
      v35 = 18;
LABEL_48:
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, v33, buf, v35);
LABEL_49:

      goto LABEL_50;
    }
    v26 = a3[1];
    if (v26 == 1)
      goto LABEL_13;
    if (v26 == 2)
    {
      if (a4 >= 5 && (a3[2] & 0xF) + 5 == a4)
        goto LABEL_13;
      v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v27);
      if (v28)
        v28(3, "%s:%i vDataLen %d does not match with payload length %d + %d bytes of ECP2HeaderLength", "_NFDriverWrapperProccessRFTechDetectionInfo", 2046, a4, a3[2] & 0xF, 5);
      v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v30 = NFSharedLogGetLogger(v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      v32 = a3[2] & 0xF;
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)v77 = "_NFDriverWrapperProccessRFTechDetectionInfo";
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)&v77[10] = 2046;
      v78 = 1024;
      *(_DWORD *)v79 = a4;
      *(_WORD *)&v79[4] = 1024;
      *(_DWORD *)&v79[6] = v32;
      *(_WORD *)v80 = 1024;
      *(_DWORD *)&v80[2] = 5;
      v33 = "%{public}s:%i vDataLen %d does not match with payload length %d + %d bytes of ECP2HeaderLength";
      v34 = v31;
      v35 = 36;
      goto LABEL_48;
    }
  }
LABEL_50:
  v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v51 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v50);
  if (v51)
    v51(3, "%s:%i RF Error found (A=%d, B=%d, F=%d, V=%d). Restart Discovery", "_NFDriverWrapperProccessRFTechDetectionInfo", 2057, v8 & 1, (v8 >> 1) & 1, (v8 >> 2) & 1, (v8 >> 3) & 1);
  v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v53 = NFSharedLogGetLogger(v52);
  v54 = objc_claimAutoreleasedReturnValue(v53);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)v77 = "_NFDriverWrapperProccessRFTechDetectionInfo";
    *(_WORD *)&v77[8] = 1024;
    *(_DWORD *)&v77[10] = 2057;
    v78 = 1024;
    *(_DWORD *)v79 = v8 & 1;
    *(_WORD *)&v79[4] = 1024;
    *(_DWORD *)&v79[6] = (v8 >> 1) & 1;
    *(_WORD *)v80 = 1024;
    *(_DWORD *)&v80[2] = (v8 >> 2) & 1;
    *(_WORD *)v81 = 1024;
    *(_DWORD *)&v81[2] = (v8 >> 3) & 1;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%{public}s:%i RF Error found (A=%d, B=%d, F=%d, V=%d). Restart Discovery", buf, 0x2Au);
  }

  if (a1)
  {
    v55 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v56 = NFLogGetLogger(v55);
    if (v56)
    {
      v57 = (void (*)(uint64_t, const char *, ...))v56;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("driverRestartDiscovery");
      v61 = 45;
      if (isMetaClass)
        v61 = 43;
      v57(6, "%c[%{public}s %{public}s]:%i Restarting Discovery", v61, ClassName, Name, 606);
    }
    v62 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v63 = NFSharedLogGetLogger(v62);
    v64 = objc_claimAutoreleasedReturnValue(v63);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      v65 = object_getClass(a1);
      if (class_isMetaClass(v65))
        v66 = 43;
      else
        v66 = 45;
      v67 = object_getClassName(a1);
      v68 = sel_getName("driverRestartDiscovery");
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)v77 = v66;
      *(_WORD *)&v77[4] = 2082;
      *(_QWORD *)&v77[6] = v67;
      v78 = 2082;
      *(_QWORD *)v79 = v68;
      *(_WORD *)&v79[8] = 1024;
      *(_DWORD *)v80 = 606;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Restarting Discovery", buf, 0x22u);
    }

    objc_msgSend(a1[31], "handleRestartDiscovery");
  }
  v24 = 0;
  return v24;
}

id sub_100203984(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_10032AC00 != -1)
    dispatch_once(&qword_10032AC00, &stru_1002EB6C8);
  return (id)qword_10032ABF8;
}

void sub_1002039C8(id a1)
{
  NFHeadlessModeController *v1;
  void *v2;

  v1 = objc_opt_new(NFHeadlessModeController);
  v2 = (void *)qword_10032ABF8;
  qword_10032ABF8 = (uint64_t)v1;

}

_BYTE *sub_100203F98(_BYTE *a1)
{
  _BYTE *v1;

  if (a1)
  {
    v1 = a1;
    objc_msgSend(a1, "_setHeadlessModeFeature:", 0);
    sub_100206140(v1);
    a1 = (_BYTE *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "pushIndexToPMU:", 0));
  }
  return a1;
}

id sub_100203FD8(void *a1)
{
  void *v1;
  id v2;

  if (a1)
  {
    v1 = a1;
    v2 = objc_msgSend(a1, "getIndexFromLocale");
    objc_msgSend(v1, "kickRTCTimer");
    a1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "pushIndexToPMU:", v2));
  }
  return a1;
}

void sub_100204280(id a1)
{
  io_registry_entry_t v1;
  io_object_t v2;
  CFTypeRef CFProperty;
  CFTypeID v4;
  const UInt8 *BytePtr;
  unint64_t Length;
  uint64_t v7;
  int v8;

  v1 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product");
  if (v1)
  {
    v2 = v1;
    CFProperty = IORegistryEntryCreateCFProperty(v1, CFSTR("has-applelpm"), 0, 0);
    IOObjectRelease(v2);
    if (CFProperty)
    {
      v8 = 0;
      v4 = CFGetTypeID(CFProperty);
      if (v4 == CFDataGetTypeID())
      {
        BytePtr = CFDataGetBytePtr((CFDataRef)CFProperty);
        Length = CFDataGetLength((CFDataRef)CFProperty);
        if (Length >= 4)
          v7 = 4;
        else
          v7 = Length;
        __memcpy_chk(&v8, BytePtr, v7, 4);
      }
      CFRelease(CFProperty);
      byte_10032ABF0 = v8 != 0;
    }
  }
}

void sub_100206140(_BYTE *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const __CFArray *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  id v20;
  const __CFDate *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *v31;
  _BOOL4 v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *Name;
  const char *v44;
  const __CFArray *v45;
  id *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t v51[128];
  uint8_t buf[4];
  int v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  int v59;

  if (a1 && a1[11])
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("cancelRTCTimer");
      v8 = 45;
      if (isMetaClass)
        v8 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i Cancelling RTC timer", v8, ClassName, Name, 807);
    }
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFSharedLogGetLogger(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = object_getClass(a1);
      if (class_isMetaClass(v12))
        v13 = 43;
      else
        v13 = 45;
      *(_DWORD *)buf = 67109890;
      v53 = v13;
      v54 = 2082;
      v55 = object_getClassName(a1);
      v56 = 2082;
      v57 = sel_getName("cancelRTCTimer");
      v58 = 1024;
      v59 = 807;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Cancelling RTC timer", buf, 0x22u);
    }
    v46 = (id *)a1;

    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v14 = IOPMCopyScheduledPowerEvents();
    v15 = -[__CFArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v48;
      v45 = v14;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v48 != v17)
            objc_enumerationMutation(v14);
          v19 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)i);
          v20 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "time");
          v21 = (const __CFDate *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", v20));

          v22 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "scheduledby");
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", v22));

          v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "eventtype");
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", v24));

          if (objc_msgSend(v23, "isEqualToString:", CFSTR("com.apple.nfcd.headless")))
          {
            v26 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "poweron");
            v27 = objc_msgSend(v25, "isEqualToString:", v26);

            if (v27)
            {
              if (IOPMCancelScheduledPowerEvent(v21, CFSTR("com.apple.nfcd.headless"), CFSTR("poweron")))
              {
                v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v29 = NFLogGetLogger(v28);
                if (v29)
                {
                  v30 = (void (*)(uint64_t, const char *, ...))v29;
                  v31 = object_getClass(v46);
                  v32 = class_isMetaClass(v31);
                  v33 = object_getClassName(v46);
                  v44 = sel_getName("cancelRTCTimer");
                  v34 = 45;
                  if (v32)
                    v34 = 43;
                  v42 = v33;
                  v14 = v45;
                  v30(3, "%c[%{public}s %{public}s]:%i Failed to set RTC timer", v34, v42, v44, 818);
                }
                v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v36 = NFSharedLogGetLogger(v35);
                v37 = objc_claimAutoreleasedReturnValue(v36);
                if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
                {
                  v38 = object_getClass(v46);
                  if (class_isMetaClass(v38))
                    v39 = 43;
                  else
                    v39 = 45;
                  v40 = object_getClassName(v46);
                  v41 = sel_getName("cancelRTCTimer");
                  *(_DWORD *)buf = 67109890;
                  v53 = v39;
                  v14 = v45;
                  v54 = 2082;
                  v55 = v40;
                  v56 = 2082;
                  v57 = v41;
                  v58 = 1024;
                  v59 = 818;
                  _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set RTC timer", buf, 0x22u);
                }

              }
            }
          }

        }
        v16 = -[__CFArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
      }
      while (v16);
    }

    objc_msgSend(v46[2], "stopTimer");
  }
}

BOOL sub_1002065C0(void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BOOL8 v5;
  id v6;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  v4 = v3[4];
  v5 = v4 != a2;
  if (v4 != a2)
  {
    objc_msgSend(v3, "_setHeadlessModeFeature:", a2);
    v6 = sub_100203FD8(v3);
  }
  objc_sync_exit(v3);

  return v5;
}

void sub_100206638(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10020664C(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  _BOOL8 v5;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v9;
  const char *ClassName;
  const char *Name;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  id v17;
  void *v18;
  void (*v19)(uint64_t, const char *, ...);
  objc_class *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  v4 = *((_QWORD *)v3 + 4);
  v5 = v4 != (v4 | a2);
  if (v4 != (v4 | a2))
  {
    objc_msgSend(v3, "_setHeadlessModeFeature:");
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(v3);
      if (class_isMetaClass(Class))
        v9 = 43;
      else
        v9 = 45;
      ClassName = object_getClassName(v3);
      Name = sel_getName("addHeadlessModeFeature:");
      Logger(6, "%c[%{public}s %{public}s]:%i Adding LPEM feature %d changed the feature set", v9, ClassName, Name, 653, a2);
    }
    v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v13 = NFSharedLogGetLogger(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = object_getClass(v3);
      if (class_isMetaClass(v15))
        v16 = 43;
      else
        v16 = 45;
      *(_DWORD *)buf = 67110146;
      v33 = v16;
      v34 = 2082;
      v35 = object_getClassName(v3);
      v36 = 2082;
      v37 = sel_getName("addHeadlessModeFeature:");
      v38 = 1024;
      v39 = 653;
      v40 = 1024;
      v41 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Adding LPEM feature %d changed the feature set", buf, 0x28u);
    }

    v17 = sub_100203FD8(v3);
  }
  if (*((_BYTE *)v3 + 9))
  {
    *((_BYTE *)v3 + 9) = 0;
    v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v18);
    if (v19)
    {
      v20 = object_getClass(v3);
      if (class_isMetaClass(v20))
        v21 = 43;
      else
        v21 = 45;
      v22 = object_getClassName(v3);
      v23 = sel_getName("addHeadlessModeFeature:");
      v19(6, "%c[%{public}s %{public}s]:%i First time setting LPEM, reported as change", v21, v22, v23, 662);
    }
    v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v25 = NFSharedLogGetLogger(v24);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = object_getClass(v3);
      if (class_isMetaClass(v27))
        v28 = 43;
      else
        v28 = 45;
      v29 = object_getClassName(v3);
      v30 = sel_getName("addHeadlessModeFeature:");
      *(_DWORD *)buf = 67109890;
      v33 = v28;
      v34 = 2082;
      v35 = v29;
      v36 = 2082;
      v37 = v30;
      v38 = 1024;
      v39 = 662;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i First time setting LPEM, reported as change", buf, 0x22u);
    }

    v5 = 1;
  }
  objc_sync_exit(v3);

  return v5;
}

void sub_10020694C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100206980(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v10;
  const char *ClassName;
  const char *Name;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  id v18;
  void *v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  objc_class *v28;
  int v29;
  const char *v30;
  const char *v31;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  if (!a1)
    return 0;
  v3 = a1;
  objc_sync_enter(v3);
  v4 = *((_QWORD *)v3 + 4);
  v5 = v4 & ~a2;
  v6 = v4 != v5;
  if (v4 != v5)
  {
    objc_msgSend(v3, "_setHeadlessModeFeature:");
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(v3);
      if (class_isMetaClass(Class))
        v10 = 43;
      else
        v10 = 45;
      ClassName = object_getClassName(v3);
      Name = sel_getName("removeHeadlessModeFeature:");
      Logger(6, "%c[%{public}s %{public}s]:%i Removing LPEM feature %d changed the feature set", v10, ClassName, Name, 679, a2);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = object_getClass(v3);
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      *(_DWORD *)buf = 67110146;
      v34 = v17;
      v35 = 2082;
      v36 = object_getClassName(v3);
      v37 = 2082;
      v38 = sel_getName("removeHeadlessModeFeature:");
      v39 = 1024;
      v40 = 679;
      v41 = 1024;
      v42 = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Removing LPEM feature %d changed the feature set", buf, 0x28u);
    }

    v18 = sub_100203FD8(v3);
  }
  if (*((_BYTE *)v3 + 9))
  {
    *((_BYTE *)v3 + 9) = 0;
    v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v19);
    if (v20)
    {
      v21 = object_getClass(v3);
      if (class_isMetaClass(v21))
        v22 = 43;
      else
        v22 = 45;
      v23 = object_getClassName(v3);
      v24 = sel_getName("removeHeadlessModeFeature:");
      v20(6, "%c[%{public}s %{public}s]:%i First time setting LPEM, reported as change", v22, v23, v24, 688);
    }
    v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v26 = NFSharedLogGetLogger(v25);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      v28 = object_getClass(v3);
      if (class_isMetaClass(v28))
        v29 = 43;
      else
        v29 = 45;
      v30 = object_getClassName(v3);
      v31 = sel_getName("removeHeadlessModeFeature:");
      *(_DWORD *)buf = 67109890;
      v34 = v29;
      v35 = 2082;
      v36 = v30;
      v37 = 2082;
      v38 = v31;
      v39 = 1024;
      v40 = 688;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i First time setting LPEM, reported as change", buf, 0x22u);
    }

    v6 = 1;
  }
  objc_sync_exit(v3);

  return v6;
}

void sub_100206C80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100206CD8(uint64_t a1)
{
  NSOperationQueue *v2;
  void *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id location;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      v2 = objc_opt_new(NSOperationQueue);
      objc_initWeak(&location, (id)a1);
      -[NSOperationQueue setUnderlyingQueue:](v2, "setUnderlyingQueue:", *(_QWORD *)(a1 + 24));
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_100206E04;
      v5[3] = &unk_1002EB710;
      objc_copyWeak(&v6, &location);
      v4 = objc_msgSend(v3, "addObserverForName:object:queue:usingBlock:", NSCurrentLocaleDidChangeNotification, 0, v2, v5);

      *(_BYTE *)(a1 + 8) = 1;
      objc_destroyWeak(&v6);
      objc_destroyWeak(&location);

    }
  }
}

void sub_100206DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100206E04(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  void *v4;
  os_activity_scope_state_s v5;

  v2 = _os_activity_create((void *)&_mh_execute_header, "headless locale changed", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  v5.opaque[0] = 0;
  v5.opaque[1] = 0;
  os_activity_scope_enter(v2, &v5);
  os_activity_scope_leave(&v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "localeChanged");

}

void sub_100206E80(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
      objc_msgSend(v2, "removeObserver:name:object:", a1, NSCurrentLocaleDidChangeNotification, 0);

      *(_BYTE *)(a1 + 8) = 0;
    }
  }
}

void sub_1002072A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002072C4(uint64_t a1)
{
  NSObject *v2;
  _BYTE *WeakRetained;
  void *v4;
  os_activity_scope_state_s v5;

  v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.hw.rtc.kickTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v5.opaque[0] = 0;
  v5.opaque[1] = 0;
  os_activity_scope_enter(v2, &v5);
  os_activity_scope_leave(&v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    sub_100206140(WeakRetained);
    objc_msgSend(v4, "headlessTimerLogic");
  }

}

_QWORD *sub_100207348(_QWORD *a1)
{
  _QWORD *v1;
  NSMutableDictionary *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = a1;
  if (a1)
  {
    v2 = objc_opt_new(NSMutableDictionary);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v1 + 8)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v3, CFSTR("registered"));

    v4 = (void *)v1[2];
    if (v4)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "description"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v5, CFSTR("timer"));

    }
    else
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", CFSTR("nil"), CFSTR("timer"));
    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v1[4]));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v6, CFSTR("features"));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "getLPMControl"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v7, CFSTR("PMU"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v1 + 11)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v8, CFSTR("Requires SCC timer"));

    v1 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithDictionary:", v2);
  }
  return v1;
}

BOOL sub_1002074C8(uint64_t a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  _BOOL4 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void (*v37)(uint64_t, const char *, ...);
  objc_class *v38;
  _BOOL4 v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  objc_class *v45;
  int v46;
  id v47;
  const char *v49;
  const char *Name;
  const char *v51;
  const char *v52;
  NSErrorUserInfoKey v53;
  void *v54;
  NSErrorUserInfoKey v55;
  void *v56;
  uint8_t buf[4];
  int v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;

  v3 = (void *)objc_opt_self(a1);
  if (a2)
    *a2 = 0;
  v4 = SSEIsFeatureSupported(41);
  v5 = v4;
  if ((int)v4 > -11)
  {
    if (!(_DWORD)v4)
      return (_DWORD)v5 == 0;
    if ((_DWORD)v4 != -10)
      goto LABEL_28;
  }
  else if ((_DWORD)v4 != -19)
  {
    if ((_DWORD)v4 == -17)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v8 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v3);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v3);
        Name = sel_getName("supportsEntanglement:");
        v12 = 45;
        if (isMetaClass)
          v12 = 43;
        v8(3, "%c[%{public}s %{public}s]:%i Feature support check not supported", v12, ClassName, Name, 38);
      }
      v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v14 = NFSharedLogGetLogger(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = object_getClass(v3);
        if (class_isMetaClass(v16))
          v17 = 43;
        else
          v17 = 45;
        *(_DWORD *)buf = 67109890;
        v58 = v17;
        v59 = 2082;
        v60 = object_getClassName(v3);
        v61 = 2082;
        v62 = sel_getName("supportsEntanglement:");
        v63 = 1024;
        v64 = 38;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Feature support check not supported", buf, 0x22u);
      }
      goto LABEL_40;
    }
LABEL_28:
    v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v36 = NFLogGetLogger(v35);
    if (v36)
    {
      v37 = (void (*)(uint64_t, const char *, ...))v36;
      v38 = object_getClass(v3);
      v39 = class_isMetaClass(v38);
      v40 = object_getClassName(v3);
      v52 = sel_getName("supportsEntanglement:");
      v41 = 45;
      if (v39)
        v41 = 43;
      v37(3, "%c[%{public}s %{public}s]:%i Feature support check failed : %d", v41, v40, v52, 35, v5);
    }
    v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v43 = NFSharedLogGetLogger(v42);
    v44 = objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v45 = object_getClass(v3);
      if (class_isMetaClass(v45))
        v46 = 43;
      else
        v46 = 45;
      *(_DWORD *)buf = 67110146;
      v58 = v46;
      v59 = 2082;
      v60 = object_getClassName(v3);
      v61 = 2082;
      v62 = sel_getName("supportsEntanglement:");
      v63 = 1024;
      v64 = 35;
      v65 = 1024;
      v66 = v5;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Feature support check failed : %d", buf, 0x28u);
    }

    if (a2)
    {
      v47 = objc_alloc((Class)NSError);
      v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v53 = NSLocalizedDescriptionKey;
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Security Not Initialized"));
      v54 = v30;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v54, &v53, 1));
      v32 = v47;
      v33 = v15;
      v34 = 27;
      goto LABEL_39;
    }
    return (_DWORD)v5 == 0;
  }
  v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v19 = NFLogGetLogger(v18);
  if (v19)
  {
    v20 = (void (*)(uint64_t, const char *, ...))v19;
    v21 = object_getClass(v3);
    v22 = class_isMetaClass(v21);
    v49 = object_getClassName(v3);
    v51 = sel_getName("supportsEntanglement:");
    v23 = 45;
    if (v22)
      v23 = 43;
    v20(3, "%c[%{public}s %{public}s]:%i Feature support check not allowed : %d", v23, v49, v51, 32, v5);
  }
  v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v25 = NFSharedLogGetLogger(v24);
  v26 = objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    v27 = object_getClass(v3);
    if (class_isMetaClass(v27))
      v28 = 43;
    else
      v28 = 45;
    *(_DWORD *)buf = 67110146;
    v58 = v28;
    v59 = 2082;
    v60 = object_getClassName(v3);
    v61 = 2082;
    v62 = sel_getName("supportsEntanglement:");
    v63 = 1024;
    v64 = 32;
    v65 = 1024;
    v66 = v5;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Feature support check not allowed : %d", buf, 0x28u);
  }

  if (a2)
  {
    v29 = objc_alloc((Class)NSError);
    v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v55 = NSLocalizedDescriptionKey;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Keychain locked"));
    v56 = v30;
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1));
    v32 = v29;
    v33 = v15;
    v34 = 41;
LABEL_39:
    *a2 = objc_msgSend(v32, "initWithDomain:code:userInfo:", v33, v34, v31);

LABEL_40:
  }
  return (_DWORD)v5 == 0;
}

uint64_t sub_100207A10(uint64_t a1, int a2)
{
  void *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t result;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *v26;
  _BOOL4 v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  const char *v37;
  const char *v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  const char *v48;

  v3 = (void *)objc_opt_self(a1);
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(v3);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(v3);
    Name = sel_getName("useEntangledFlag:");
    if (a2)
      v11 = "entangled";
    else
      v11 = "non-entangled";
    v12 = 45;
    if (isMetaClass)
      v12 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i Telling SSE to use %s auth", v12, ClassName, Name, 52, v11);
  }
  v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v14 = NFSharedLogGetLogger(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = object_getClass(v3);
    if (class_isMetaClass(v16))
      v17 = 43;
    else
      v17 = 45;
    v18 = object_getClassName(v3);
    v19 = sel_getName("useEntangledFlag:");
    *(_DWORD *)buf = 67110146;
    if (a2)
      v20 = "entangled";
    else
      v20 = "non-entangled";
    v40 = v17;
    v41 = 2082;
    v42 = v18;
    v43 = 2082;
    v44 = v19;
    v45 = 1024;
    v46 = 52;
    v47 = 2080;
    v48 = v20;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Telling SSE to use %s auth", buf, 0x2Cu);
  }

  result = SSEUseEntangledAuthorizationRandom(a2);
  if ((_DWORD)result)
  {
    v22 = result;
    v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v24 = NFLogGetLogger(v23);
    if (v24)
    {
      v25 = (void (*)(uint64_t, const char *, ...))v24;
      v26 = object_getClass(v3);
      v27 = class_isMetaClass(v26);
      v37 = object_getClassName(v3);
      v38 = sel_getName("useEntangledFlag:");
      v28 = 45;
      if (v27)
        v28 = 43;
      v25(3, "%c[%{public}s %{public}s]:%i Failed set flag: %d", v28, v37, v38, 55, v22);
    }
    v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v30 = NFSharedLogGetLogger(v29);
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = object_getClass(v3);
      if (class_isMetaClass(v32))
        v33 = 43;
      else
        v33 = 45;
      v34 = object_getClassName(v3);
      v35 = sel_getName("useEntangledFlag:");
      *(_DWORD *)buf = 67110146;
      v40 = v33;
      v41 = 2082;
      v42 = v34;
      v43 = 2082;
      v44 = v35;
      v45 = 1024;
      v46 = 55;
      v47 = 1024;
      LODWORD(v48) = v22;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed set flag: %d", buf, 0x28u);
    }

    if ((_DWORD)v22 == -19 || (_DWORD)v22 == -10)
      return 41;
    else
      return 6;
  }
  return result;
}

uint64_t sub_100207D1C(uint64_t a1, int a2)
{
  void *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  _BOOL4 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  uint64_t result;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, ...);
  objc_class *v36;
  _BOOL4 v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  objc_class *v42;
  int v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *Name;
  const char *v49;
  const char *v50;
  uint8_t buf[4];
  int v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;

  v3 = (void *)objc_opt_self(a1);
  if (a2)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v3);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v3);
      Name = sel_getName("sseEffaceAuthorization:");
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v6(6, "%c[%{public}s %{public}s]:%i Telling SSE to use entangled auth", v10, ClassName, Name, 73);
    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = object_getClass(v3);
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      *(_DWORD *)buf = 67109890;
      v52 = v15;
      v53 = 2082;
      v54 = object_getClassName(v3);
      v55 = 2082;
      v56 = sel_getName("sseEffaceAuthorization:");
      v57 = 1024;
      v58 = 73;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Telling SSE to use entangled auth", buf, 0x22u);
    }

    v16 = SSEUseEntangledAuthorizationRandom(1);
    if ((_DWORD)v16)
    {
      v17 = v16;
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFLogGetLogger(v18);
      if (v19)
      {
        v20 = (void (*)(uint64_t, const char *, ...))v19;
        v21 = object_getClass(v3);
        v22 = class_isMetaClass(v21);
        v46 = object_getClassName(v3);
        v49 = sel_getName("sseEffaceAuthorization:");
        v23 = 45;
        if (v22)
          v23 = 43;
        v20(3, "%c[%{public}s %{public}s]:%i Failed to set entangled: %d", v23, v46, v49, 76, v17);
      }
      v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v25 = NFSharedLogGetLogger(v24);
      v26 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v27 = object_getClass(v3);
        if (class_isMetaClass(v27))
          v28 = 43;
        else
          v28 = 45;
        v29 = object_getClassName(v3);
        v30 = sel_getName("sseEffaceAuthorization:");
        *(_DWORD *)buf = 67110146;
        v52 = v28;
        v53 = 2082;
        v54 = v29;
        v55 = 2082;
        v56 = v30;
        v57 = 1024;
        v58 = 76;
        v59 = 1024;
        v60 = v17;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set entangled: %d", buf, 0x28u);
      }

    }
  }
  result = SSEEffaceAuthorizationRandom();
  if ((_DWORD)result)
  {
    v32 = result;
    v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v34 = NFLogGetLogger(v33);
    if (v34)
    {
      v35 = (void (*)(uint64_t, const char *, ...))v34;
      v36 = object_getClass(v3);
      v37 = class_isMetaClass(v36);
      v47 = object_getClassName(v3);
      v50 = sel_getName("sseEffaceAuthorization:");
      v38 = 45;
      if (v37)
        v38 = 43;
      v35(3, "%c[%{public}s %{public}s]:%i Failed to efface: %d", v38, v47, v50, 83, v32);
    }
    v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v40 = NFSharedLogGetLogger(v39);
    v41 = objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v42 = object_getClass(v3);
      if (class_isMetaClass(v42))
        v43 = 43;
      else
        v43 = 45;
      v44 = object_getClassName(v3);
      v45 = sel_getName("sseEffaceAuthorization:");
      *(_DWORD *)buf = 67110146;
      v52 = v43;
      v53 = 2082;
      v54 = v44;
      v55 = 2082;
      v56 = v45;
      v57 = 1024;
      v58 = 83;
      v59 = 1024;
      v60 = v32;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to efface: %d", buf, 0x28u);
    }

    if ((_DWORD)v32 == -10)
      return 41;
    else
      return 6;
  }
  return result;
}

uint64_t sub_100208114(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int a6)
{
  id v11;
  uint64_t v12;
  uint64_t v13;

  v11 = a2;
  v12 = objc_opt_self(a1);
  v13 = sub_100208188(v12, v11, a3, a4, a5, a6, 0);

  return v13;
}

uint64_t sub_100208188(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int a6, unsigned int a7)
{
  const __CFData *v12;
  void *v13;
  void *specific;
  uint64_t Logger;
  void (*v16)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  uint64_t v25;
  objc_class *v26;
  _BOOL4 v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void (*v37)(uint64_t, const char *, ...);
  objc_class *v38;
  _BOOL4 v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  objc_class *v45;
  int v46;
  const char *v47;
  const char *v48;
  uint64_t result;
  id v50;
  const char *ClassName;
  const char *v52;
  const char *Name;
  const char *v54;
  const char *v55;
  id v57;
  id v58;
  uint8_t buf[4];
  int v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;

  v12 = a2;
  v13 = (void *)objc_opt_self(a1);
  v57 = 0;
  v58 = 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  v16 = (void (*)(uint64_t, const char *, ...))Logger;
  if (a6)
  {
    if (Logger)
    {
      Class = object_getClass(v13);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v13);
      Name = sel_getName("sseGetAuthRandom:uid:authRandom:mac:entangled:previous:");
      v19 = 45;
      if (isMetaClass)
        v19 = 43;
      v16(6, "%c[%{public}s %{public}s]:%i Get entangled auth %d", v19, ClassName, Name, 116, a7);
    }
    v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v21 = NFSharedLogGetLogger(v20);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = object_getClass(v13);
      if (class_isMetaClass(v23))
        v24 = 43;
      else
        v24 = 45;
      *(_DWORD *)buf = 67110146;
      v60 = v24;
      v61 = 2082;
      v62 = object_getClassName(v13);
      v63 = 2082;
      v64 = sel_getName("sseGetAuthRandom:uid:authRandom:mac:entangled:previous:");
      v65 = 1024;
      v66 = 116;
      v67 = 1024;
      v68 = a7;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Get entangled auth %d", buf, 0x28u);
    }

    v25 = SSEGetEntangledAuthorizationRandom(a3, v12, a7, (CFDataRef *)&v58, (CFDataRef *)&v57);
  }
  else
  {
    if (Logger)
    {
      v26 = object_getClass(v13);
      v27 = class_isMetaClass(v26);
      v52 = object_getClassName(v13);
      v54 = sel_getName("sseGetAuthRandom:uid:authRandom:mac:entangled:previous:");
      v28 = 45;
      if (v27)
        v28 = 43;
      v16(6, "%c[%{public}s %{public}s]:%i Get non-entangled auth %d", v28, v52, v54, 119, a7);
    }
    v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v30 = NFSharedLogGetLogger(v29);
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      v32 = object_getClass(v13);
      if (class_isMetaClass(v32))
        v33 = 43;
      else
        v33 = 45;
      *(_DWORD *)buf = 67110146;
      v60 = v33;
      v61 = 2082;
      v62 = object_getClassName(v13);
      v63 = 2082;
      v64 = sel_getName("sseGetAuthRandom:uid:authRandom:mac:entangled:previous:");
      v65 = 1024;
      v66 = 119;
      v67 = 1024;
      v68 = a7;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Get non-entangled auth %d", buf, 0x28u);
    }

    v25 = SSEGetAuthorizationRandom(a3, v12, (const __CFData **)&v58, (const __CFData **)&v57);
  }
  v34 = v25;

  if ((_DWORD)v34)
  {
    v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v36 = NFLogGetLogger(v35);
    if (v36)
    {
      v37 = (void (*)(uint64_t, const char *, ...))v36;
      v38 = object_getClass(v13);
      v39 = class_isMetaClass(v38);
      v40 = object_getClassName(v13);
      v55 = sel_getName("sseGetAuthRandom:uid:authRandom:mac:entangled:previous:");
      v41 = 45;
      if (v39)
        v41 = 43;
      v37(3, "%c[%{public}s %{public}s]:%i Failed to generate: error %d for uid %d", v41, v40, v55, 129, v34, a3);
    }
    v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v43 = NFSharedLogGetLogger(v42);
    v44 = objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v45 = object_getClass(v13);
      if (class_isMetaClass(v45))
        v46 = 43;
      else
        v46 = 45;
      v47 = object_getClassName(v13);
      v48 = sel_getName("sseGetAuthRandom:uid:authRandom:mac:entangled:previous:");
      *(_DWORD *)buf = 67110402;
      v60 = v46;
      v61 = 2082;
      v62 = v47;
      v63 = 2082;
      v64 = v48;
      v65 = 1024;
      v66 = 129;
      v67 = 1024;
      v68 = v34;
      v69 = 1024;
      v70 = a3;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to generate: error %d for uid %d", buf, 0x2Eu);
    }

    if ((_DWORD)v34 == -10)
      return 41;
    else
      return 6;
  }
  else
  {
    if (a4)
      *a4 = v58;
    if (a5)
    {
      v50 = v57;
      result = 0;
      *a5 = v50;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100208630(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, unsigned __int16 *a6, _QWORD *a7)
{
  id v13;
  const __CFData *v14;
  const __CFData *v15;
  void *v16;
  const __CFData *v17;
  const __CFData *v18;
  uint64_t v19;
  void *specific;
  uint64_t Logger;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  objc_class *v30;
  int v31;
  const char *v32;
  const char *v33;
  uint64_t result;
  id v35;
  const char *Name;
  id v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;

  v13 = a5;
  v14 = a4;
  v15 = a2;
  v16 = (void *)objc_opt_self(a1);
  v37 = 0;
  v17 = (const __CFData *)objc_msgSend(v13, "subdataWithRange:", 0, 8);
  v18 = (const __CFData *)objc_msgSend(v13, "subdataWithRange:", 8, 8);

  v19 = SSEGetActivationTimeout(v15, v14, v17, v18, a6, (const __CFData **)&v37);
  if ((_DWORD)v19)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v22 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v16);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v16);
      Name = sel_getName("sseGetAuthorizationTimeout:uid:challenge:response:timeout:mac:");
      v26 = 45;
      if (isMetaClass)
        v26 = 43;
      v22(3, "%c[%{public}s %{public}s]:%i Failed to get activation timeout: %d for uid %d", v26, ClassName, Name, 165, v19, a3);
    }
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFSharedLogGetLogger(v27);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = object_getClass(v16);
      if (class_isMetaClass(v30))
        v31 = 43;
      else
        v31 = 45;
      v32 = object_getClassName(v16);
      v33 = sel_getName("sseGetAuthorizationTimeout:uid:challenge:response:timeout:mac:");
      *(_DWORD *)buf = 67110402;
      v39 = v31;
      v40 = 2082;
      v41 = v32;
      v42 = 2082;
      v43 = v33;
      v44 = 1024;
      v45 = 165;
      v46 = 1024;
      v47 = v19;
      v48 = 1024;
      v49 = a3;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get activation timeout: %d for uid %d", buf, 0x2Eu);
    }

    switch((_DWORD)v19)
    {
      case 0xFFFFFFF6:
        return 41;
      case 0xFFFFFFFC:
        return 10;
      case 0xFFFFFFFD:
        return 8;
      default:
        return 6;
    }
  }
  else if (a7)
  {
    v35 = v37;
    result = 0;
    *a7 = v35;
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_1002088C0(uint64_t a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  uint64_t result;
  id v20;
  const char *ClassName;
  const char *Name;
  id v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v3 = (void *)objc_opt_self(a1);
  v23 = 0;
  v4 = SSEGetHostChallenge((CFDataRef *)&v23);
  if ((_DWORD)v4)
  {
    v5 = v4;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v3);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v3);
      Name = sel_getName("sseGetHostChallenge:");
      v11 = 45;
      if (isMetaClass)
        v11 = 43;
      v8(3, "%c[%{public}s %{public}s]:%i Failed to get host challenge: %d", v11, ClassName, Name, 188, v5);
    }
    v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v13 = NFSharedLogGetLogger(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = object_getClass(v3);
      if (class_isMetaClass(v15))
        v16 = 43;
      else
        v16 = 45;
      v17 = object_getClassName(v3);
      v18 = sel_getName("sseGetHostChallenge:");
      *(_DWORD *)buf = 67110146;
      v25 = v16;
      v26 = 2082;
      v27 = v17;
      v28 = 2082;
      v29 = v18;
      v30 = 1024;
      v31 = 188;
      v32 = 1024;
      v33 = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get host challenge: %d", buf, 0x28u);
    }

    if ((_DWORD)v5 == -10)
      return 41;
    else
      return 6;
  }
  else if (a2)
  {
    v20 = v23;
    result = 0;
    *a2 = v20;
  }
  else
  {
    return 0;
  }
  return result;
}

id sub_100208AA4(uint64_t a1, int a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, char *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, _QWORD *a13)
{
  id v19;
  const __CFData *v20;
  const __CFData *v21;
  const __CFData *v22;
  void *v23;
  const __CFData *v24;
  const __CFData *v25;
  uint64_t v26;
  _QWORD *v27;
  void *specific;
  uint64_t Logger;
  int v30;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  objc_class *v39;
  int v40;
  const char *v41;
  const char *v42;
  const char *v43;
  NSObject *v44;
  uint32_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void (*v49)(uint64_t, const char *, ...);
  objc_class *v50;
  _BOOL4 v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  objc_class *v55;
  int v56;
  const char *v57;
  const char *v58;
  char v60;
  char v61;
  BOOL v62;
  char v63;
  void *v64;
  uint64_t v65;
  void (*v66)(uint64_t, const char *, ...);
  objc_class *v67;
  _BOOL4 v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  objc_class *v75;
  int v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *Name;
  const char *v81;
  id v83;
  id v84;
  unsigned int v85;
  uint8_t buf[4];
  int v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  const char *v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;

  v19 = a7;
  v20 = a6;
  v21 = a4;
  v22 = a3;
  v23 = (void *)objc_opt_self(a1);
  v83 = 0;
  v85 = 0;
  v84 = 0;
  v24 = (const __CFData *)objc_msgSend(v19, "subdataWithRange:", 0, 8);
  v25 = (const __CFData *)objc_msgSend(v19, "subdataWithRange:", 8, 8);

  if (a2 == 5)
  {
    v26 = SSEAuthorizeWithPIN(5, v22, v21, v20, v24, v25, &v85, (CFDataRef *)&v84, (CFDataRef *)&v83);

    v27 = a9;
    if ((_DWORD)v26)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      v30 = a5;
      if (Logger)
      {
        v31 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v23);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v23);
        Name = sel_getName("sseAuthorize:handle:SEID:uid:challenge:response:validation:encryptedPIN:confirmationHash:confirmationSignature:confirmationVersion:certs:");
        v35 = 45;
        if (isMetaClass)
          v35 = 43;
        v31(3, "%c[%{public}s %{public}s]:%i Failed to authorize with PIN: %d for uid %d", v35, ClassName, Name, 291, v26, a5);
      }
      v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v37 = NFSharedLogGetLogger(v36);
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
      v39 = object_getClass(v23);
      if (class_isMetaClass(v39))
        v40 = 43;
      else
        v40 = 45;
      v41 = object_getClassName(v23);
      v42 = sel_getName("sseAuthorize:handle:SEID:uid:challenge:response:validation:encryptedPIN:confirmationHash:confirmationSignature:confirmationVersion:certs:");
      *(_DWORD *)buf = 67110402;
      v87 = v40;
      v88 = 2082;
      v89 = v41;
      v90 = 2082;
      v91 = v42;
      v92 = 1024;
      v93 = 291;
      v94 = 1024;
      v95 = v26;
      v96 = 1024;
      v97 = v30;
      v43 = "%c[%{public}s %{public}s]:%i Failed to authorize with PIN: %d for uid %d";
      v44 = v38;
      v45 = 46;
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, v43, buf, v45);
LABEL_23:

      return 0;
    }
  }
  else
  {
    v46 = SSEAuthorize(a2, v22, a5, v21, v20, v24, v25, &v85, (CFDataRef *)&v83);

    *a9 = 0;
    v27 = a9;
    if ((_DWORD)v46)
    {
      v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v48 = NFLogGetLogger(v47);
      if (v48)
      {
        v49 = (void (*)(uint64_t, const char *, ...))v48;
        v50 = object_getClass(v23);
        v51 = class_isMetaClass(v50);
        v79 = object_getClassName(v23);
        v81 = sel_getName("sseAuthorize:handle:SEID:uid:challenge:response:validation:encryptedPIN:confirmationHash:confirmationSignature:confirmationVersion:certs:");
        v52 = 45;
        if (v51)
          v52 = 43;
        v49(3, "%c[%{public}s %{public}s]:%i Failed to authorize: %d", v52, v79, v81, 328, v46);
      }
      v53 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v54 = NFSharedLogGetLogger(v53);
      v38 = objc_claimAutoreleasedReturnValue(v54);
      if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
      v55 = object_getClass(v23);
      if (class_isMetaClass(v55))
        v56 = 43;
      else
        v56 = 45;
      v57 = object_getClassName(v23);
      v58 = sel_getName("sseAuthorize:handle:SEID:uid:challenge:response:validation:encryptedPIN:confirmationHash:confirmationSignature:confirmationVersion:certs:");
      *(_DWORD *)buf = 67110146;
      v87 = v56;
      v88 = 2082;
      v89 = v57;
      v90 = 2082;
      v91 = v58;
      v92 = 1024;
      v93 = 328;
      v94 = 1024;
      v95 = v46;
      v43 = "%c[%{public}s %{public}s]:%i Failed to authorize: %d";
      v44 = v38;
      v45 = 40;
      goto LABEL_22;
    }
  }
  if (a12)
    *a12 = 0;
  if (a8)
  {
    v60 = v85;
    if (v85 == 3)
    {
      v62 = a2 == 5;
      v63 = 7;
    }
    else
    {
      if (v85 != 2)
      {
        if (v85 == 1)
        {
          if (a2 == 5)
            v61 = 5;
          else
            v61 = 1;
          *a8 = v61;
          if (!v27)
            goto LABEL_42;
        }
        else
        {
          v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v65 = NFLogGetLogger(v64);
          if (v65)
          {
            v66 = (void (*)(uint64_t, const char *, ...))v65;
            v67 = object_getClass(v23);
            v68 = class_isMetaClass(v67);
            v69 = object_getClassName(v23);
            v70 = sel_getName("sseAuthorize:handle:SEID:uid:challenge:response:validation:encryptedPIN:confirmationHash:confirmationSignature:confirmationVersion:certs:");
            v71 = 45;
            if (v68)
              v71 = 43;
            v66(3, "%c[%{public}s %{public}s]:%i Unknown validation: %d", v71, v69, v70, 350, v85);
          }
          v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v73 = NFSharedLogGetLogger(v72);
          v74 = objc_claimAutoreleasedReturnValue(v73);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          {
            v75 = object_getClass(v23);
            if (class_isMetaClass(v75))
              v76 = 43;
            else
              v76 = 45;
            v77 = object_getClassName(v23);
            v78 = sel_getName("sseAuthorize:handle:SEID:uid:challenge:response:validation:encryptedPIN:confirmationHash:confirmationSignature:confirmationVersion:certs:");
            *(_DWORD *)buf = 67110146;
            v87 = v76;
            v88 = 2082;
            v89 = v77;
            v90 = 2082;
            v91 = v78;
            v92 = 1024;
            v93 = 350;
            v94 = 1024;
            v95 = v85;
            _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown validation: %d", buf, 0x28u);
          }

          if (!v27)
            goto LABEL_42;
        }
        goto LABEL_41;
      }
      v62 = a2 == 5;
      v63 = 6;
    }
    if (v62)
      v60 = v63;
    *a8 = v60;
  }
  if (v27)
LABEL_41:
    *v27 = v84;
LABEL_42:
  if (a10)
    *a10 = 0;
  if (a11)
    *a11 = 0;
  if (a13)
    *a13 = 0;
  return v83;
}

uint64_t sub_10020906C(uint64_t a1, char *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  objc_opt_self(a1);
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10020913C;
  v9[3] = &unk_1002EB738;
  v9[4] = &v10;
  v9[5] = a4;
  ACMContextVerifyPolicyEx(a3, a2, 1, 0, 0, 0, (uint64_t)v9);
  v7 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_100209124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10020913C(uint64_t result, int a2, char a3)
{
  **(_DWORD **)(result + 40) = a2;
  if (!a2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a3;
  return result;
}

uint64_t sub_10020915C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _OWORD *v6;
  id v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *v14;
  _BOOL4 v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  const char *v23;
  const char *v24;
  void *specific;
  uint64_t Logger;
  void (*v28)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  int v37;
  int v38;
  void *v39;
  uint64_t v40;
  void (*v41)(uint64_t, const char *, ...);
  objc_class *v42;
  _BOOL4 v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  NSObject *v48;
  objc_class *v49;
  int v50;
  const char *v51;
  const char *v52;
  int v53;
  void *v54;
  uint64_t v55;
  void (*v56)(uint64_t, const char *, ...);
  objc_class *v57;
  _BOOL4 v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  objc_class *v65;
  int v66;
  const char *v67;
  const char *v68;
  void *v69;
  uint64_t v70;
  void (*v71)(uint64_t, const char *, ...);
  objc_class *v72;
  _BOOL4 v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  NSObject *v78;
  objc_class *v79;
  int v80;
  const char *v81;
  const char *v82;
  int v83;
  void *v84;
  uint64_t v85;
  void (*v86)(uint64_t, const char *, ...);
  objc_class *v87;
  _BOOL4 v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  NSObject *v93;
  objc_class *v94;
  int v95;
  const char *v96;
  const char *v97;
  const char *v98;
  const char *Name;
  const char *v100;
  const char *v101;
  const char *v102;
  unsigned int v103;
  uint8_t buf[4];
  int v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  int v111;
  __int16 v112;
  unsigned int v113;

  v3 = a2;
  v4 = (void *)objc_opt_self(a1);
  v103 = 0;
  v5 = objc_retainAutorelease(v3);
  v6 = objc_msgSend(v5, "bytes");
  v7 = objc_msgSend(v5, "length");

  v8 = ACMContextCreateWithExternalForm(v6, (uint64_t)v7);
  if (!v8)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v28 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v4);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v4);
      Name = sel_getName("acmGetOlsoType:");
      v32 = 45;
      if (isMetaClass)
        v32 = 43;
      v28(3, "%c[%{public}s %{public}s]:%i Unable to reconstruct cred context", v32, ClassName, Name, 410);
    }
    v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v34 = NFSharedLogGetLogger(v33);
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = object_getClass(v4);
      if (class_isMetaClass(v36))
        v37 = 43;
      else
        v37 = 45;
      *(_DWORD *)buf = 67109890;
      v105 = v37;
      v106 = 2082;
      v107 = object_getClassName(v4);
      v108 = 2082;
      v109 = sel_getName("acmGetOlsoType:");
      v110 = 1024;
      v111 = 410;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unable to reconstruct cred context", buf, 0x22u);
    }

    return 0;
  }
  v9 = v8;
  v10 = sub_10020906C((uint64_t)NFSSEWrapper, "PraguePIN", v8, (uint64_t)&v103);
  if (!v103 && v10)
  {
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFLogGetLogger(v11);
    if (v12)
    {
      v13 = (void (*)(uint64_t, const char *, ...))v12;
      v14 = object_getClass(v4);
      v15 = class_isMetaClass(v14);
      v16 = object_getClassName(v4);
      v98 = sel_getName("acmGetOlsoType:");
      v17 = 45;
      if (v15)
        v17 = 43;
      v13(6, "%c[%{public}s %{public}s]:%i Policy is prague PIN", v17, v16, v98, 423);
    }
    v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v19 = NFSharedLogGetLogger(v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = object_getClass(v4);
      if (class_isMetaClass(v21))
        v22 = 43;
      else
        v22 = 45;
      v23 = object_getClassName(v4);
      v24 = sel_getName("acmGetOlsoType:");
      *(_DWORD *)buf = 67109890;
      v105 = v22;
      v106 = 2082;
      v107 = v23;
      v108 = 2082;
      v109 = v24;
      v110 = 1024;
      v111 = 423;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Policy is prague PIN", buf, 0x22u);
    }

    ACMContextDelete(v9, 0);
    return 4;
  }
  v38 = sub_10020906C((uint64_t)NFSSEWrapper, "Prague", v9, (uint64_t)&v103);
  if (!v103 && v38)
  {
    v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v40 = NFLogGetLogger(v39);
    if (v40)
    {
      v41 = (void (*)(uint64_t, const char *, ...))v40;
      v42 = object_getClass(v4);
      v43 = class_isMetaClass(v42);
      v44 = object_getClassName(v4);
      v100 = sel_getName("acmGetOlsoType:");
      v45 = 45;
      if (v43)
        v45 = 43;
      v41(6, "%c[%{public}s %{public}s]:%i Policy is prague", v45, v44, v100, 430);
    }
    v46 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v47 = NFSharedLogGetLogger(v46);
    v48 = objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      v49 = object_getClass(v4);
      if (class_isMetaClass(v49))
        v50 = 43;
      else
        v50 = 45;
      v51 = object_getClassName(v4);
      v52 = sel_getName("acmGetOlsoType:");
      *(_DWORD *)buf = 67109890;
      v105 = v50;
      v106 = 2082;
      v107 = v51;
      v108 = 2082;
      v109 = v52;
      v110 = 1024;
      v111 = 430;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Policy is prague", buf, 0x22u);
    }

    ACMContextDelete(v9, 0);
    return 3;
  }
  v53 = sub_10020906C((uint64_t)NFSSEWrapper, "OsloPIN", v9, (uint64_t)&v103);
  if (v103)
  {
    v54 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v55 = NFLogGetLogger(v54);
    if (v55)
    {
      v56 = (void (*)(uint64_t, const char *, ...))v55;
      v57 = object_getClass(v4);
      v58 = class_isMetaClass(v57);
      v59 = object_getClassName(v4);
      v60 = sel_getName("acmGetOlsoType:");
      v61 = 45;
      if (v58)
        v61 = 43;
      v56(3, "%c[%{public}s %{public}s]:%i Error verifying with PIN policy: %d", v61, v59, v60, 438, v103);
    }
    v62 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v63 = NFSharedLogGetLogger(v62);
    v64 = objc_claimAutoreleasedReturnValue(v63);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      v65 = object_getClass(v4);
      if (class_isMetaClass(v65))
        v66 = 43;
      else
        v66 = 45;
      v67 = object_getClassName(v4);
      v68 = sel_getName("acmGetOlsoType:");
      *(_DWORD *)buf = 67110146;
      v105 = v66;
      v106 = 2082;
      v107 = v67;
      v108 = 2082;
      v109 = v68;
      v110 = 1024;
      v111 = 438;
      v112 = 1024;
      v113 = v103;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error verifying with PIN policy: %d", buf, 0x28u);
    }

    goto LABEL_47;
  }
  if (v53)
  {
    v69 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v70 = NFLogGetLogger(v69);
    if (v70)
    {
      v71 = (void (*)(uint64_t, const char *, ...))v70;
      v72 = object_getClass(v4);
      v73 = class_isMetaClass(v72);
      v74 = object_getClassName(v4);
      v101 = sel_getName("acmGetOlsoType:");
      v75 = 45;
      if (v73)
        v75 = 43;
      v71(6, "%c[%{public}s %{public}s]:%i Policy is oslo PIN", v75, v74, v101, 443);
    }
    v76 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v77 = NFSharedLogGetLogger(v76);
    v78 = objc_claimAutoreleasedReturnValue(v77);
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      v79 = object_getClass(v4);
      if (class_isMetaClass(v79))
        v80 = 43;
      else
        v80 = 45;
      v81 = object_getClassName(v4);
      v82 = sel_getName("acmGetOlsoType:");
      *(_DWORD *)buf = 67109890;
      v105 = v80;
      v106 = 2082;
      v107 = v81;
      v108 = 2082;
      v109 = v82;
      v110 = 1024;
      v111 = 443;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Policy is oslo PIN", buf, 0x22u);
    }

    ACMContextDelete(v9, 0);
    return 2;
  }
  else
  {
    v83 = sub_10020906C((uint64_t)NFSSEWrapper, "Oslo", v9, (uint64_t)&v103);
    if (v103 || !v83)
    {
LABEL_47:
      ACMContextDelete(v9, 0);
      return 0;
    }
    v84 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v85 = NFLogGetLogger(v84);
    if (v85)
    {
      v86 = (void (*)(uint64_t, const char *, ...))v85;
      v87 = object_getClass(v4);
      v88 = class_isMetaClass(v87);
      v89 = object_getClassName(v4);
      v102 = sel_getName("acmGetOlsoType:");
      v90 = 45;
      if (v88)
        v90 = 43;
      v86(6, "%c[%{public}s %{public}s]:%i Policy is oslo", v90, v89, v102, 450);
    }
    v91 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v92 = NFSharedLogGetLogger(v91);
    v93 = objc_claimAutoreleasedReturnValue(v92);
    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
    {
      v94 = object_getClass(v4);
      if (class_isMetaClass(v94))
        v95 = 43;
      else
        v95 = 45;
      v96 = object_getClassName(v4);
      v97 = sel_getName("acmGetOlsoType:");
      *(_DWORD *)buf = 67109890;
      v105 = v95;
      v106 = 2082;
      v107 = v96;
      v108 = 2082;
      v109 = v97;
      v110 = 1024;
      v111 = 450;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Policy is oslo", buf, 0x22u);
    }

    ACMContextDelete(v9, 0);
    return 1;
  }
}

__CFData *sub_1002099B8(uint64_t a1, int a2, void *a3, uint64_t a4, void *a5, void *a6, char a7, uint64_t a8, void *a9, void *a10, void *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15)
{
  const __CFData *v20;
  const __CFData *v21;
  const __CFData *v22;
  const __CFData *v23;
  const __CFData *v24;
  const __CFData *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *specific;
  uint64_t Logger;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  objc_class *v43;
  int v44;
  const char *v45;
  const char *v46;
  __CFData *v47;
  void *v49;
  uint64_t v50;
  void (*v51)(uint64_t, const char *, ...);
  objc_class *v52;
  _BOOL4 v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  NSObject *v58;
  objc_class *v59;
  int v60;
  const char *v61;
  const char *v62;
  const char *Name;
  const char *v64;
  __CFData *v67;
  uint8_t buf[4];
  int v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;

  v20 = a11;
  v21 = a10;
  v22 = a9;
  v23 = a6;
  v24 = a5;
  v25 = a3;
  v26 = (void *)objc_opt_self(a1);
  v67 = 0;
  if (a2 == 6)
  {
    v27 = a4;
    v28 = SSEAuthorizeAndSignAPDU(6, v24, a4, v23, v22, v21, v20, v25, &v67);

    v30 = a13;
    v29 = a15;
    v31 = a12;
  }
  else
  {
    v27 = a4;
    v28 = SSEAuthorizeAndSignECommerceBlob(v24, a4, v23, a7, v22, v21, v20, v25, &v67);

    v31 = a12;
    if (a12)
      *a12 = 0;
    v30 = a13;
    v29 = a15;
    if (a13)
      *a13 = 0;
    if (a15)
      *a15 = 0;
  }
  if ((_DWORD)v28)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    v34 = v27;
    if (Logger)
    {
      v35 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v26);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v26);
      Name = sel_getName("authorizeAndSign:requestBlob:uid:handle:SEID:usePIN:hasPrague:hostChallenge:cardChallenge:cardCryptogram:confirmationBlob:confirmationBlobSignature:confirmationVersion:certs:");
      v39 = 45;
      if (isMetaClass)
        v39 = 43;
      v35(3, "%c[%{public}s %{public}s]:%i Failed to authorize: %d for uid %d", v39, ClassName, Name, 547, v28, v34);
    }
    v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v41 = NFSharedLogGetLogger(v40);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      v43 = object_getClass(v26);
      if (class_isMetaClass(v43))
        v44 = 43;
      else
        v44 = 45;
      v45 = object_getClassName(v26);
      v46 = sel_getName("authorizeAndSign:requestBlob:uid:handle:SEID:usePIN:hasPrague:hostChallenge:cardChallenge:cardCryptogram:confirmationBlob:confirmationBlobSignature:confirmationVersion:certs:");
      *(_DWORD *)buf = 67110402;
      v69 = v44;
      v70 = 2082;
      v71 = v45;
      v72 = 2082;
      v73 = v46;
      v74 = 1024;
      v75 = 547;
      v76 = 1024;
      v77 = v28;
      v78 = 1024;
      v79 = v34;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to authorize: %d for uid %d", buf, 0x2Eu);
    }

LABEL_20:
    v47 = 0;
    return v47;
  }
  v47 = v67;
  if (!v67)
  {
    v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v50 = NFLogGetLogger(v49);
    if (v50)
    {
      v51 = (void (*)(uint64_t, const char *, ...))v50;
      v52 = object_getClass(v26);
      v53 = class_isMetaClass(v52);
      v54 = object_getClassName(v26);
      v64 = sel_getName("authorizeAndSign:requestBlob:uid:handle:SEID:usePIN:hasPrague:hostChallenge:cardChallenge:cardCryptogram:confirmationBlob:confirmationBlobSignature:confirmationVersion:certs:");
      v55 = 45;
      if (v53)
        v55 = 43;
      v51(3, "%c[%{public}s %{public}s]:%i Failed to get signed APDU, no error though", v55, v54, v64, 552);
    }
    v56 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v57 = NFSharedLogGetLogger(v56);
    v58 = objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      v59 = object_getClass(v26);
      if (class_isMetaClass(v59))
        v60 = 43;
      else
        v60 = 45;
      v61 = object_getClassName(v26);
      v62 = sel_getName("authorizeAndSign:requestBlob:uid:handle:SEID:usePIN:hasPrague:hostChallenge:cardChallenge:cardCryptogram:confirmationBlob:confirmationBlobSignature:confirmationVersion:certs:");
      *(_DWORD *)buf = 67109890;
      v69 = v60;
      v70 = 2082;
      v71 = v61;
      v72 = 2082;
      v73 = v62;
      v74 = 1024;
      v75 = 552;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get signed APDU, no error though", buf, 0x22u);
    }

    goto LABEL_20;
  }
  if (a14)
    *a14 = 0;
  if (v31)
    *v31 = 0;
  if (v30)
    *v30 = 0;
  if (v29)
    *v29 = 0;
  return v47;
}

id sub_100209E08(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v12;
  const __CFData *v13;
  const __CFData *v14;
  const __CFData *v15;
  __CFString *v16;
  void *v17;
  NSData *v18;
  void *v19;
  void *v20;
  void *v21;
  const __CFData *v22;
  const __CFData *v23;
  uint64_t v24;
  __CFData *v25;
  __CFData *v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  _BOOL4 v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  int v37;
  const char *v38;
  const char *v39;
  __CFData *v40;
  __CFData *v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  __CFData *v51;
  void *specific;
  uint64_t Logger;
  void (*v54)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  objc_class *v62;
  int v63;
  const char *v64;
  const char *v65;
  id v66;
  id v67;
  void *v68;
  const char *v70;
  const char *v71;
  const char *Name;
  void *v73;
  const __CFData *v74;
  __CFData *v76;
  __CFData *v77;
  _QWORD v78[2];
  _QWORD v79[5];
  _QWORD v80[5];
  _QWORD v81[5];
  _QWORD v82[5];
  uint8_t buf[4];
  int v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  const char *v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  _QWORD v93[2];

  v12 = a6;
  v13 = a5;
  v14 = a4;
  v15 = a3;
  v16 = a2;
  v73 = (void *)objc_opt_self(a1);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 4, v12));

  v93[0] = v17;
  v18 = objc_opt_new(NSData);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 4, v18));
  v93[1] = v19;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v93, 2));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 48, v20));
  v22 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "asData"));

  v76 = 0;
  v77 = 0;
  v23 = (const __CFData *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
  v74 = v22;
  v24 = SSEEvaluateSecureElementACL(v15, v13, v22, v23, v16, v14, 3u, &v77, &v76);

  v25 = v76;
  v26 = v77;
  if (!(_DWORD)v24)
  {
    if (v77 && v76)
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:fromData:](NFTLV, "TLVWithTag:fromData:", 48, v77));
      v78[0] = v43;
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 4, v25));
      v78[1] = v44;
      v45 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v78, 2));
      v46 = (id)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:children:](NFTLV, "TLVWithTag:children:", 236, v45));
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "asData"));
    }
    else
    {
      v51 = v77;
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v54 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v73);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v73);
        Name = sel_getName("getSignedOperationApproval:handle:nonce:SEID:acl:error:");
        v58 = 45;
        if (isMetaClass)
          v58 = 43;
        v54(3, "%c[%{public}s %{public}s]:%i Failed to get operation approval, no error though", v58, ClassName, Name, 603);
      }
      v59 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v60 = NFSharedLogGetLogger(v59);
      v61 = objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        v62 = object_getClass(v73);
        if (class_isMetaClass(v62))
          v63 = 43;
        else
          v63 = 45;
        v64 = object_getClassName(v73);
        v65 = sel_getName("getSignedOperationApproval:handle:nonce:SEID:acl:error:");
        *(_DWORD *)buf = 67109890;
        v84 = v63;
        v85 = 2082;
        v86 = v64;
        v87 = 2082;
        v88 = v65;
        v89 = 1024;
        v90 = 603;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get operation approval, no error though", buf, 0x22u);
      }

      if (!a7)
      {
        v50 = 0;
        v26 = v51;
        goto LABEL_29;
      }
      v66 = objc_alloc((Class)NSError);
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v79[0] = NSLocalizedDescriptionKey;
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
      v80[0] = v44;
      v80[1] = &off_1003031A0;
      v79[1] = CFSTR("Line");
      v79[2] = CFSTR("Method");
      v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getSignedOperationApproval:handle:nonce:SEID:acl:error:"));
      v80[2] = v45;
      v79[3] = NSDebugDescriptionErrorKey;
      v46 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getSignedOperationApproval:handle:nonce:SEID:acl:error:"), 605);
      v80[3] = v46;
      v79[4] = NSLocalizedFailureReasonErrorKey;
      v67 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("SSE inconsistent return"));
      v80[4] = v67;
      v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v80, v79, 5));
      *a7 = objc_msgSend(v66, "initWithDomain:code:userInfo:", v43, 6, v68);

      v50 = 0;
      v26 = v51;
    }
    goto LABEL_28;
  }
  v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v28 = NFLogGetLogger(v27);
  if (v28)
  {
    v29 = (void (*)(uint64_t, const char *, ...))v28;
    v30 = object_getClass(v73);
    v31 = class_isMetaClass(v30);
    v70 = object_getClassName(v73);
    v71 = sel_getName("getSignedOperationApproval:handle:nonce:SEID:acl:error:");
    v32 = 45;
    if (v31)
      v32 = 43;
    v29(3, "%c[%{public}s %{public}s]:%i Failed to authorize: %d", v32, v70, v71, 596, v24);
  }
  v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v34 = NFSharedLogGetLogger(v33);
  v35 = objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
  {
    v36 = object_getClass(v73);
    if (class_isMetaClass(v36))
      v37 = 43;
    else
      v37 = 45;
    v38 = object_getClassName(v73);
    v39 = sel_getName("getSignedOperationApproval:handle:nonce:SEID:acl:error:");
    *(_DWORD *)buf = 67110146;
    v84 = v37;
    v85 = 2082;
    v86 = v38;
    v87 = 2082;
    v88 = v39;
    v89 = 1024;
    v90 = 596;
    v91 = 1024;
    v92 = v24;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to authorize: %d", buf, 0x28u);
  }

  if (a7)
  {
    v40 = v25;
    v41 = v26;
    v42 = objc_alloc((Class)NSError);
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v81[0] = NSLocalizedDescriptionKey;
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Security Violation"));
    v82[0] = v44;
    v82[1] = &off_100303188;
    v81[1] = CFSTR("Line");
    v81[2] = CFSTR("Method");
    v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getSignedOperationApproval:handle:nonce:SEID:acl:error:"));
    v82[2] = v45;
    v81[3] = NSDebugDescriptionErrorKey;
    v46 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getSignedOperationApproval:handle:nonce:SEID:acl:error:"), 598);
    v82[3] = v46;
    v81[4] = NSLocalizedFailureReasonErrorKey;
    v47 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("SSE refused w/ %d"), v24);
    v82[4] = v47;
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v82, v81, 5));
    v49 = v42;
    v26 = v41;
    v25 = v40;
    *a7 = objc_msgSend(v49, "initWithDomain:code:userInfo:", v43, 8, v48);

    v50 = 0;
LABEL_28:

    goto LABEL_29;
  }
  v50 = 0;
LABEL_29:

  return v50;
}

id sub_10020A5DC(uint64_t a1, _QWORD *a2, void *a3)
{
  const __CFData *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *v12;
  _BOOL4 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *specific;
  uint64_t Logger;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  objc_class *v39;
  int v40;
  id v41;
  id v42;
  void *v44;
  uint64_t v45;
  void (*v46)(uint64_t, const char *, ...);
  objc_class *v47;
  _BOOL4 v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  objc_class *v55;
  int v56;
  const char *v57;
  const char *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t, const char *, ...);
  objc_class *v65;
  _BOOL4 v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  NSObject *v70;
  objc_class *v71;
  int v72;
  const char *v73;
  const char *v74;
  id v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *Name;
  const char *v86;
  id v87;
  unsigned int v88;
  NSErrorUserInfoKey v89;
  void *v90;
  NSErrorUserInfoKey v91;
  void *v92;
  NSErrorUserInfoKey v93;
  void *v94;
  NSErrorUserInfoKey v95;
  void *v96;
  uint8_t buf[4];
  int v98;
  __int16 v99;
  const char *v100;
  __int16 v101;
  const char *v102;
  __int16 v103;
  int v104;
  __int16 v105;
  unsigned int v106;
  NSErrorUserInfoKey v107;
  void *v108;

  v5 = a3;
  v6 = (void *)objc_opt_self(a1);
  v88 = 0;
  v87 = 0;
  if (!a2 || !v5)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v31 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v6);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v6);
      Name = sel_getName("getPlatformData:forSEID:");
      v35 = 45;
      if (isMetaClass)
        v35 = 43;
      v31(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v35, ClassName, Name, 627);
    }
    v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v37 = NFSharedLogGetLogger(v36);
    v38 = objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v39 = object_getClass(v6);
      if (class_isMetaClass(v39))
        v40 = 43;
      else
        v40 = 45;
      *(_DWORD *)buf = 67109890;
      v98 = v40;
      v99 = 2082;
      v100 = object_getClassName(v6);
      v101 = 2082;
      v102 = sel_getName("getPlatformData:forSEID:");
      v103 = 1024;
      v104 = 627;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
    }

    v41 = objc_alloc((Class)NSError);
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v107 = NSLocalizedDescriptionKey;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v108 = v24;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v108, &v107, 1));
    v26 = v41;
    v27 = v23;
    v28 = 10;
    goto LABEL_24;
  }
  v7 = SSEGetVersion(&v88);
  if ((_DWORD)v7)
  {
    v8 = v7;
    v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v10 = NFLogGetLogger(v9);
    if (v10)
    {
      v11 = (void (*)(uint64_t, const char *, ...))v10;
      v12 = object_getClass(v6);
      v13 = class_isMetaClass(v12);
      v82 = object_getClassName(v6);
      v84 = sel_getName("getPlatformData:forSEID:");
      v14 = 45;
      if (v13)
        v14 = 43;
      v11(3, "%c[%{public}s %{public}s]:%i Failed to get SSE version : %d", v14, v82, v84, 633, v8);
    }
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = object_getClass(v6);
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      v20 = object_getClassName(v6);
      v21 = sel_getName("getPlatformData:forSEID:");
      *(_DWORD *)buf = 67110146;
      v98 = v19;
      v99 = 2082;
      v100 = v20;
      v101 = 2082;
      v102 = v21;
      v103 = 1024;
      v104 = 633;
      v105 = 1024;
      v106 = v8;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get SSE version : %d", buf, 0x28u);
    }

    v22 = objc_alloc((Class)NSError);
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v95 = NSLocalizedDescriptionKey;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
    v96 = v24;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v96, &v95, 1));
    v26 = v22;
    v27 = v23;
    v28 = 13;
LABEL_24:
    v42 = objc_msgSend(v26, "initWithDomain:code:userInfo:", v27, v28, v25);

    goto LABEL_25;
  }
  if (v88 <= 1)
  {
    v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v45 = NFLogGetLogger(v44);
    if (v45)
    {
      v46 = (void (*)(uint64_t, const char *, ...))v45;
      v47 = object_getClass(v6);
      v48 = class_isMetaClass(v47);
      v49 = object_getClassName(v6);
      v50 = sel_getName("getPlatformData:forSEID:");
      v51 = 45;
      if (v48)
        v51 = 43;
      v46(3, "%c[%{public}s %{public}s]:%i SSE version too old : %d", v51, v49, v50, 637, v88);
    }
    v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v53 = NFSharedLogGetLogger(v52);
    v54 = objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      v55 = object_getClass(v6);
      if (class_isMetaClass(v55))
        v56 = 43;
      else
        v56 = 45;
      v57 = object_getClassName(v6);
      v58 = sel_getName("getPlatformData:forSEID:");
      *(_DWORD *)buf = 67110146;
      v98 = v56;
      v99 = 2082;
      v100 = v57;
      v101 = 2082;
      v102 = v58;
      v103 = 1024;
      v104 = 637;
      v105 = 1024;
      v106 = v88;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i SSE version too old : %d", buf, 0x28u);
    }

    v59 = objc_alloc((Class)NSError);
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v93 = NSLocalizedDescriptionKey;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Feature Not Supported"));
    v94 = v24;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v94, &v93, 1));
    v26 = v59;
    v27 = v23;
    v28 = 14;
    goto LABEL_24;
  }
  v60 = SSEGetSignedDeviceData(v5, (CFDataRef *)&v87);
  if ((_DWORD)v60)
  {
    v61 = v60;
    v62 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v63 = NFLogGetLogger(v62);
    if (v63)
    {
      v64 = (void (*)(uint64_t, const char *, ...))v63;
      v65 = object_getClass(v6);
      v66 = class_isMetaClass(v65);
      v83 = object_getClassName(v6);
      v86 = sel_getName("getPlatformData:forSEID:");
      v67 = 45;
      if (v66)
        v67 = 43;
      v64(3, "%c[%{public}s %{public}s]:%i Failed to get platform data : %d", v67, v83, v86, 644, v61);
    }
    v68 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v69 = NFSharedLogGetLogger(v68);
    v70 = objc_claimAutoreleasedReturnValue(v69);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      v71 = object_getClass(v6);
      if (class_isMetaClass(v71))
        v72 = 43;
      else
        v72 = 45;
      v73 = object_getClassName(v6);
      v74 = sel_getName("getPlatformData:forSEID:");
      *(_DWORD *)buf = 67110146;
      v98 = v72;
      v99 = 2082;
      v100 = v73;
      v101 = 2082;
      v102 = v74;
      v103 = 1024;
      v104 = 644;
      v105 = 1024;
      v106 = v61;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get platform data : %d", buf, 0x28u);
    }

    v75 = objc_alloc((Class)NSError);
    v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if ((_DWORD)v61 == -10)
    {
      v91 = NSLocalizedDescriptionKey;
      v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Keychain locked"));
      v92 = v77;
      v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v92, &v91, 1));
      v79 = v75;
      v80 = v76;
      v81 = 41;
    }
    else
    {
      v89 = NSLocalizedDescriptionKey;
      v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Security Violation"));
      v90 = v77;
      v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v90, &v89, 1));
      v79 = v75;
      v80 = v76;
      v81 = 8;
    }
    v42 = objc_msgSend(v79, "initWithDomain:code:userInfo:", v80, v81, v78);

  }
  else
  {
    v42 = 0;
    *a2 = v87;
  }
LABEL_25:

  return v42;
}

BOOL sub_10020ADF8(uint64_t a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  unsigned int v25;
  NSErrorUserInfoKey v26;
  void *v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  unsigned int v37;
  __int16 v38;
  int v39;

  v3 = (void *)objc_opt_self(a1);
  v25 = 0;
  v4 = SSEGetVersion(&v25);
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v7 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(v3);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(v3);
    Name = sel_getName("supportsAuthorizeAndSign:");
    v12 = 45;
    if (isMetaClass)
      v12 = 43;
    v7(6, "%c[%{public}s %{public}s]:%i SSEGetVersion version=0x%x, status=%d", v12, ClassName, Name, 665, v25, v4);
  }
  v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v14 = NFSharedLogGetLogger(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = object_getClass(v3);
    if (class_isMetaClass(v16))
      v17 = 43;
    else
      v17 = 45;
    v18 = object_getClassName(v3);
    v19 = sel_getName("supportsAuthorizeAndSign:");
    *(_DWORD *)buf = 67110402;
    v29 = v17;
    v30 = 2082;
    v31 = v18;
    v32 = 2082;
    v33 = v19;
    v34 = 1024;
    v35 = 665;
    v36 = 1024;
    v37 = v25;
    v38 = 1024;
    v39 = v4;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i SSEGetVersion version=0x%x, status=%d", buf, 0x2Eu);
  }

  if (!(_DWORD)v4)
    return v25 > 1;
  if (a2)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v26 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
    v27 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
    *a2 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 6, v23);

  }
  return 0;
}

BOOL sub_10020B070(uint64_t a1)
{
  objc_opt_self(a1);
  return !SSEIsFeatureSupported(46)
      && !SSEIsFeatureSupported(47)
      && SSEIsFeatureSupported(48) == 0;
}

uint64_t sub_10020B0B4(uint64_t a1, void *a2)
{
  const __CFData *v3;
  void *v4;
  uint64_t v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  unsigned __int8 v19;
  const char *ClassName;
  const char *Name;
  unsigned int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v3 = a2;
  v4 = (void *)objc_opt_self(a1);
  v23 = 0;
  v5 = SSEGetAuthKeySharingState(v3, &v23);

  if ((_DWORD)v5)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v4);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v4);
      Name = sel_getName("getSharingState:");
      v11 = 45;
      if (isMetaClass)
        v11 = 43;
      v8(3, "%c[%{public}s %{public}s]:%i Failed to get SSE sharing state : %d", v11, ClassName, Name, 694, v5);
    }
    v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v13 = NFSharedLogGetLogger(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = object_getClass(v4);
      if (class_isMetaClass(v15))
        v16 = 43;
      else
        v16 = 45;
      v17 = object_getClassName(v4);
      v18 = sel_getName("getSharingState:");
      *(_DWORD *)buf = 67110146;
      v25 = v16;
      v26 = 2082;
      v27 = v17;
      v28 = 2082;
      v29 = v18;
      v30 = 1024;
      v31 = 694;
      v32 = 1024;
      v33 = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get SSE sharing state : %d", buf, 0x28u);
    }

    return 0;
  }
  else
  {
    v19 = v23;
    if (v23 >= 4)
      return 0;
  }
  return v19;
}

id sub_10020B290(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  const __CFData *v8;
  const __CFData *v9;
  void *v10;
  void *specific;
  uint64_t Logger;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v16;
  const __CFData *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  const char *v23;
  const char *v24;
  id v25;
  NSObject *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, ...);
  objc_class *v36;
  _BOOL4 v37;
  id v38;
  const __CFData *v39;
  void *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  objc_class *v47;
  id v48;
  const __CFData *v49;
  void *v50;
  void *v51;
  int v52;
  const char *v53;
  const char *v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  NSObject *v59;
  uint64_t v60;
  objc_class *v61;
  _BOOL4 v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  objc_class *v67;
  int v68;
  const char *v69;
  const char *v70;
  const char *ClassName;
  const char *v73;
  const char *Name;
  const char *v75;
  const char *v76;
  id v77;
  void *v78;
  const __CFData *v79;
  uint8_t buf[4];
  int v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  int v87;
  __int16 v88;
  const __CFData *v89;
  __int16 v90;
  id v91;
  NSErrorUserInfoKey v92;
  void *v93;
  NSErrorUserInfoKey v94;
  void *v95;
  _QWORD v96[5];
  _QWORD v97[5];
  _QWORD v98[3];
  _QWORD v99[3];

  v3 = a2;
  v4 = (void *)objc_opt_self(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "NF_asHexString"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uppercaseString"));

  v79 = 0;
  v98[0] = CFSTR("VerifyData");
  v98[1] = CFSTR("StripImg4");
  v99[0] = &__kCFBooleanFalse;
  v99[1] = &__kCFBooleanFalse;
  v98[2] = CFSTR("GetCombined");
  v99[2] = &__kCFBooleanTrue;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v99, v98, 3));
  v8 = (const __CFData *)AMFDRSealingMapCopyLocalData(CFSTR("sePk"), v6, v7, &v79);
  v9 = v79;
  if (v79)
  {
    v77 = v3;
    v78 = v7;
    v10 = v6;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v13 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v4);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v4);
      Name = sel_getName("setSEPublicKeyWithSEID:");
      v16 = 45;
      if (isMetaClass)
        v16 = 43;
      v13(3, "%c[%{public}s %{public}s]:%i Failed to get FDR data : %{public}@", v16, ClassName, Name, 727, v9);
    }
    v17 = v8;
    v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v19 = NFSharedLogGetLogger(v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = object_getClass(v4);
      if (class_isMetaClass(v21))
        v22 = 43;
      else
        v22 = 45;
      v23 = object_getClassName(v4);
      v24 = sel_getName("setSEPublicKeyWithSEID:");
      *(_DWORD *)buf = 67110146;
      v81 = v22;
      v82 = 2082;
      v83 = v23;
      v84 = 2082;
      v85 = v24;
      v86 = 1024;
      v87 = 727;
      v88 = 2114;
      v89 = v9;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get FDR data : %{public}@", buf, 0x2Cu);
    }

    v25 = objc_alloc((Class)NSError);
    v26 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v96[0] = NSLocalizedDescriptionKey;
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Security Violation"));
    v97[0] = v27;
    v97[1] = v9;
    v96[1] = NSUnderlyingErrorKey;
    v96[2] = CFSTR("Line");
    v97[2] = &off_1003031B8;
    v96[3] = CFSTR("Method");
    v28 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setSEPublicKeyWithSEID:"));
    v97[3] = v28;
    v96[4] = NSDebugDescriptionErrorKey;
    v29 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setSEPublicKeyWithSEID:"), 728);
    v97[4] = v29;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v97, v96, 5));
    v31 = objc_msgSend(v25, "initWithDomain:code:userInfo:", v26, 8, v30);

    v6 = v10;
    v8 = v17;
    v3 = v77;
    v7 = v78;
  }
  else
  {
    v32 = SSESetSEPubKey((const __CFData *)v3, v8);
    v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v34 = NFLogGetLogger(v33);
    v35 = (void (*)(uint64_t, const char *, ...))v34;
    if ((_DWORD)v32)
    {
      if (v34)
      {
        v36 = object_getClass(v4);
        v37 = class_isMetaClass(v36);
        v38 = v3;
        v39 = v8;
        v40 = v7;
        v41 = v6;
        v42 = object_getClassName(v4);
        v75 = sel_getName("setSEPublicKeyWithSEID:");
        v43 = 45;
        if (v37)
          v43 = 43;
        v73 = v42;
        v6 = v41;
        v7 = v40;
        v8 = v39;
        v3 = v38;
        v9 = 0;
        v35(3, "%c[%{public}s %{public}s]:%i Failed to set SE Public key : %d", v43, v73, v75, 733, v32);
      }
      v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v45 = NFSharedLogGetLogger(v44);
      v46 = objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        v47 = object_getClass(v4);
        v48 = v3;
        v49 = v8;
        v50 = v7;
        v51 = v6;
        if (class_isMetaClass(v47))
          v52 = 43;
        else
          v52 = 45;
        v53 = object_getClassName(v4);
        v54 = sel_getName("setSEPublicKeyWithSEID:");
        *(_DWORD *)buf = 67110146;
        v81 = v52;
        v6 = v51;
        v7 = v50;
        v8 = v49;
        v3 = v48;
        v9 = 0;
        v82 = 2082;
        v83 = v53;
        v84 = 2082;
        v85 = v54;
        v86 = 1024;
        v87 = 733;
        v88 = 1024;
        LODWORD(v89) = v32;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set SE Public key : %d", buf, 0x28u);
      }

      v55 = objc_alloc((Class)NSError);
      v26 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      if ((_DWORD)v32 == -10)
      {
        v94 = NSLocalizedDescriptionKey;
        v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Keychain locked"));
        v95 = v56;
        v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v95, &v94, 1));
        v58 = v55;
        v59 = v26;
        v60 = 41;
      }
      else
      {
        v92 = NSLocalizedDescriptionKey;
        v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Security Violation"));
        v93 = v56;
        v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v93, &v92, 1));
        v58 = v55;
        v59 = v26;
        v60 = 8;
      }
      v31 = objc_msgSend(v58, "initWithDomain:code:userInfo:", v59, v60, v57);

    }
    else
    {
      if (v34)
      {
        v61 = object_getClass(v4);
        v62 = class_isMetaClass(v61);
        v63 = object_getClassName(v4);
        v76 = sel_getName("setSEPublicKeyWithSEID:");
        v64 = 45;
        if (v62)
          v64 = 43;
        v35(6, "%c[%{public}s %{public}s]:%i Successfully set SE Public key %{public}@ for SEID %{public}@", v64, v63, v76, 741, v8, v3);
      }
      v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v66 = NFSharedLogGetLogger(v65);
      v26 = objc_claimAutoreleasedReturnValue(v66);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v67 = object_getClass(v4);
        if (class_isMetaClass(v67))
          v68 = 43;
        else
          v68 = 45;
        v69 = object_getClassName(v4);
        v70 = sel_getName("setSEPublicKeyWithSEID:");
        *(_DWORD *)buf = 67110402;
        v81 = v68;
        v82 = 2082;
        v83 = v69;
        v84 = 2082;
        v85 = v70;
        v86 = 1024;
        v87 = 741;
        v88 = 2114;
        v89 = v8;
        v90 = 2114;
        v91 = v3;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Successfully set SE Public key %{public}@ for SEID %{public}@", buf, 0x36u);
      }
      v31 = 0;
    }
  }

  return v31;
}

id sub_10020BA00(uint64_t a1, void *a2, void *a3, void *a4, _QWORD *a5, _QWORD *a6)
{
  const __CFData *v11;
  const __CFData *v12;
  const __CFData *v13;
  void *v14;
  uint64_t v15;
  void *specific;
  uint64_t Logger;
  void (*v18)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  const char *v27;
  const char *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v37;
  const char *ClassName;
  const char *Name;
  id v40;
  id v41;
  NSErrorUserInfoKey v42;
  void *v43;
  NSErrorUserInfoKey v44;
  void *v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;

  v11 = a4;
  v12 = a3;
  v13 = a2;
  v14 = (void *)objc_opt_self(a1);
  v40 = 0;
  v41 = 0;
  v15 = SSEPerformAuthKeySharing(v11, v13, v12, (CFDataRef *)&v41, (CFDataRef *)&v40);

  if ((_DWORD)v15)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v18 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v14);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v14);
      Name = sel_getName("performSharing:signature:SEID:hostEphPK:hostEphPKSignature:");
      v21 = 45;
      if (isMetaClass)
        v21 = 43;
      v18(3, "%c[%{public}s %{public}s]:%i Failed to set SE Public key : %d", v21, ClassName, Name, 762, v15);
    }
    v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v23 = NFSharedLogGetLogger(v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = object_getClass(v14);
      if (class_isMetaClass(v25))
        v26 = 43;
      else
        v26 = 45;
      v27 = object_getClassName(v14);
      v28 = sel_getName("performSharing:signature:SEID:hostEphPK:hostEphPKSignature:");
      *(_DWORD *)buf = 67110146;
      v47 = v26;
      v48 = 2082;
      v49 = v27;
      v50 = 2082;
      v51 = v28;
      v52 = 1024;
      v53 = 762;
      v54 = 1024;
      v55 = v15;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set SE Public key : %d", buf, 0x28u);
    }

    v29 = objc_alloc((Class)NSError);
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if ((_DWORD)v15 == -10)
    {
      v44 = NSLocalizedDescriptionKey;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Keychain locked"));
      v45 = v31;
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1));
      v33 = v29;
      v34 = v30;
      v35 = 41;
    }
    else
    {
      v42 = NSLocalizedDescriptionKey;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Security Violation"));
      v43 = v31;
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
      v33 = v29;
      v34 = v30;
      v35 = 8;
    }
    v37 = objc_msgSend(v33, "initWithDomain:code:userInfo:", v34, v35, v32);

    return v37;
  }
  else
  {
    *a5 = v41;
    *a6 = v40;
    return 0;
  }
}

void sub_10020BD10(id a1)
{
  NFFieldTechnologyCALogger *v1;
  void *v2;

  v1 = objc_opt_new(NFFieldTechnologyCALogger);
  v2 = (void *)qword_10032AC10;
  qword_10032AC10 = (uint64_t)v1;

}

void sub_10020BD44(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_10020BE90((uint64_t)NFDailyStatisticsCALogger);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v9[0] = CFSTR("totalCEEnable");
  v9[1] = CFSTR("totalAuthEvents");
  v10[0] = &off_1003031D0;
  v10[1] = &off_1003031D0;
  v9[2] = CFSTR("totalDeAuth");
  v9[3] = CFSTR("totalAuthECommerce");
  v10[2] = &off_1003031D0;
  v10[3] = &off_1003031D0;
  v9[4] = CFSTR("dailyDeviceUUID");
  v10[4] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v6));

  objc_msgSend(v7, "setObject:forKeyedSubscript:", &off_1003031E8, v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  objc_msgSend(v8, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.crsAuthOperationStatistic"), v7);

}

__CFString *sub_10020BE90(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  __CFString *v4;

  objc_opt_self(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "generateDailyUUIDForCA"));

  v3 = objc_opt_class(NSString);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
    v4 = v2;
  else
    v4 = CFSTR("noUUID");

  return v4;
}

void sub_10020BF08(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  objc_opt_self(a1);
  v5 = objc_msgSend(v3, "mutableCopy");

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  objc_msgSend(v4, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.version"), v5);

}

void sub_10020BF78(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _UNKNOWN **v10;
  __CFString *v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  _QWORD v16[4];

  v5 = a2;
  objc_opt_self(a1);
  v15[0] = CFSTR("counter");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3));
  v16[0] = v6;
  v15[1] = CFSTR("JCOP_Dev");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v5, "signingKeyType") == (id)1));
  v16[1] = v7;
  v15[2] = CFSTR("OSVersion");
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sequenceCounter"));
  v9 = (void *)v8;
  v10 = &off_1003031D0;
  if (v8)
    v10 = (_UNKNOWN **)v8;
  v16[2] = v10;
  v15[3] = CFSTR("platformIdentifier");
  v11 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "platformIdentifier"));

  v12 = &stru_1002ED8A8;
  if (v11)
    v12 = v11;
  v16[3] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 4));

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  objc_msgSend(v14, "postCAEventFor:eventInput:", CFSTR("nfcd.exceptions.seAppletMigrationFailure"), v13);

}

id sub_10020C108(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *specific;
  uint64_t Logger;
  void (*v16)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  objc_class *v24;
  int v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, const char *, ...);
  objc_class *v29;
  _BOOL4 v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  int v37;
  const char *v38;
  const char *v39;
  const char *Name;
  const char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t v47[128];
  uint8_t buf[4];
  int v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  int v55;

  v1 = (void *)objc_opt_self(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "getCALoggerUserDefaults"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("flashCounters")));
  if (!v4)
  {
LABEL_32:
    v13 = 0;
    goto LABEL_33;
  }
  v5 = objc_opt_class(NSArray);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) == 0)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v16 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v1);
      Name = sel_getName("_getStoredCounters");
      v20 = 45;
      if (isMetaClass)
        v20 = 43;
      v16(3, "%c[%{public}s %{public}s]:%i Unexpected type in storage", v20, ClassName, Name, 77);
    }
    v21 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v22 = NFSharedLogGetLogger(v21);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = object_getClass(v1);
      if (class_isMetaClass(v24))
        v25 = 43;
      else
        v25 = 45;
      *(_DWORD *)buf = 67109890;
      v49 = v25;
      v50 = 2082;
      v51 = object_getClassName(v1);
      v52 = 2082;
      v53 = sel_getName("_getStoredCounters");
      v54 = 1024;
      v55 = 77;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected type in storage", buf, 0x22u);
    }

    objc_msgSend(v3, "removeObjectForKey:", CFSTR("flashCounters"));
    goto LABEL_32;
  }
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v44;
    while (2)
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v44 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
        v12 = objc_opt_class(NSNumber);
        if ((objc_opt_isKindOfClass(v11, v12) & 1) == 0)
        {
          v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v27 = NFLogGetLogger(v26);
          if (v27)
          {
            v28 = (void (*)(uint64_t, const char *, ...))v27;
            v29 = object_getClass(v1);
            v30 = class_isMetaClass(v29);
            v31 = object_getClassName(v1);
            v42 = sel_getName("_getStoredCounters");
            v32 = 45;
            if (v30)
              v32 = 43;
            v28(3, "%c[%{public}s %{public}s]:%i Unexpected type in storage", v32, v31, v42, 84, (_QWORD)v43);
          }
          v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v34 = NFSharedLogGetLogger(v33);
          v35 = objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            v36 = object_getClass(v1);
            if (class_isMetaClass(v36))
              v37 = 43;
            else
              v37 = 45;
            v38 = object_getClassName(v1);
            v39 = sel_getName("_getStoredCounters");
            *(_DWORD *)buf = 67109890;
            v49 = v37;
            v50 = 2082;
            v51 = v38;
            v52 = 2082;
            v53 = v39;
            v54 = 1024;
            v55 = 84;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected type in storage", buf, 0x22u);
          }

          objc_msgSend(v3, "removeObjectForKey:", CFSTR("flashCounters"));
          goto LABEL_32;
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
      if (v8)
        continue;
      break;
    }
  }

  v13 = v6;
LABEL_33:

  return v13;
}

void sub_10020C4FC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _UNKNOWN **v7;
  _UNKNOWN **v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  void *v23;
  void *v24;
  _BYTE *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  NSMutableDictionary *v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  NSMutableDictionary *v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  id v42;
  void *v43;
  unsigned int v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  uint8_t buf[4];
  id v59;

  v3 = a2;
  v4 = objc_opt_self(a1);
  v5 = v3;
  v6 = objc_opt_self(NFDailyStatisticsCALogger);
  v7 = &AMFDRSealingMapCopyLocalData_ptr;
  v8 = &AMFDRSealingMapCopyLocalData_ptr;
  if (NFIsInternalBuild(v6))
  {
    v9 = sub_10020C108(v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "getCALoggerUserDefaults"));

    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("flashCountersDate")));
    v14 = (void *)v13;
    if (v10 && v13)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      v16 = objc_msgSend(objc_alloc((Class)NSCalendar), "initWithCalendarIdentifier:", NSCalendarIdentifierGregorian);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "components:fromDate:", 28, v15));
      v55 = v16;
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "components:fromDate:", 28, v14));
      v19 = objc_msgSend(v17, "month");
      if (v19 != objc_msgSend(v18, "month") || (v20 = objc_msgSend(v17, "day"), v20 != objc_msgSend(v18, "day")))
      {
        v21 = objc_msgSend(v10, "count");
        if (v21 == objc_msgSend(v5, "count"))
        {
          if (objc_msgSend(v10, "count"))
          {
            v53 = v17;
            v54 = v15;
            v22 = 0;
            while (1)
            {
              v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndex:", v22));
              v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", v22));
              v25 = objc_msgSend(v24, "unsignedLongValue");
              if ((unint64_t)(v25 - (_BYTE *)objc_msgSend(v23, "unsignedLongValue")) >= 0x2BD)
                break;
              ++v22;

              if (v22 >= (unint64_t)objc_msgSend(v10, "count"))
              {
                v26 = 0;
                v7 = &AMFDRSealingMapCopyLocalData_ptr;
                v17 = v53;
                v15 = v54;
                goto LABEL_16;
              }
            }
            v27 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Page %d was %@ is %@"), v22, v23, v24);
            v52 = objc_claimAutoreleasedReturnValue(objc_msgSend(0, "stringByAppendingFormat:", CFSTR("%@%@"), CFSTR(" ; "), v27));
            sub_100187C44((uint64_t)NFBugCapture, CFSTR("Excessive flash writes"), v27, 0);
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412290;
              v59 = v27;
              _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Flash page write exceeded %@", buf, 0xCu);
            }

            v7 = &AMFDRSealingMapCopyLocalData_ptr;
            v17 = v53;
            v15 = v54;
            v26 = (void *)v52;
          }
          else
          {
            v26 = 0;
          }
LABEL_16:
          +[NFExceptionsCALogger postAnalyticsSEFailureEvent:context:error:](NFExceptionsCALogger, "postAnalyticsSEFailureEvent:context:error:", 0, v26, 0);

        }
      }

      v8 = &AMFDRSealingMapCopyLocalData_ptr;
    }

  }
  v28 = (id)v4;
  v29 = sub_10020C108(v4);
  v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  v31 = objc_msgSend(v30, "count");
  if (v31 != objc_msgSend(v5, "count"))
  {

    v30 = 0;
  }
  v32 = objc_opt_new(NSMutableDictionary);
  if (objc_msgSend(v5, "count"))
  {
    v33 = 0;
    do
    {
      v34 = v33 + 1;
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8[267], "stringWithFormat:", CFSTR("Page%02d"), v33 + 1));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", v33));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v32, "setObject:forKeyedSubscript:", v36, v35);

      v8 = &AMFDRSealingMapCopyLocalData_ptr;
      v33 = v34;
    }
    while ((unint64_t)objc_msgSend(v5, "count") > v34);
  }
  v37 = v30;
  if (v30)
  {
    v38 = objc_opt_new(NSMutableDictionary);
    if (objc_msgSend(v5, "count"))
    {
      v56 = v28;
      v39 = 0;
      do
      {
        v40 = v39 + 1;
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8[267], "stringWithFormat:", CFSTR("Page%02d"), v39 + 1));
        v42 = objc_alloc((Class)NSNumber);
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", v39));
        v44 = objc_msgSend(v43, "intValue");
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectAtIndexedSubscript:", v39));
        v46 = objc_msgSend(v42, "initWithInt:", v44 - objc_msgSend(v45, "intValue"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v38, "setObject:forKeyedSubscript:", v46, v41);

        v8 = &AMFDRSealingMapCopyLocalData_ptr;
        v39 = v40;
      }
      while ((unint64_t)objc_msgSend(v5, "count") > v40);
      v7 = &AMFDRSealingMapCopyLocalData_ptr;
      v28 = v56;
    }
  }
  else
  {
    v38 = 0;
  }
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  objc_msgSend(v47, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.flashCounterTotals"), v32);

  if (v38)
  {
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
    objc_msgSend(v48, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.flashCounterDeltas"), v38);

  }
  v57 = v5;
  objc_opt_self(v28);
  v49 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "getCALoggerUserDefaults"));

  objc_msgSend(v50, "setObject:forKey:", v57, CFSTR("flashCounters"));
  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7[236], "now"));
  objc_msgSend(v50, "setObject:forKey:", v51, CFSTR("flashCountersDate"));

}

void sub_10020CAC8(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[2];
  _QWORD v9[2];

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_10020BE90((uint64_t)NFDailyStatisticsCALogger);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v8[0] = CFSTR("dailyDeviceUUID");
  v8[1] = v3;
  v9[0] = v5;
  v9[1] = &off_1003031E8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 2));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));

  objc_msgSend(v7, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.deviceExceptionStatistic"), v6);
}

void sub_100210F5C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *v7;
  _BOOL4 v8;
  const char *v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  void *specific;
  uint64_t Logger;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  const char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  objc_class *v41;
  int v42;
  const char *v43;
  const char *v44;
  int v45;
  int v46;
  const char *v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  id v70;
  id v71;
  unsigned __int16 v72;
  int v73;
  _QWORD v74[4];
  _QWORD v75[4];
  _QWORD v76[5];
  _QWORD v77[5];
  uint8_t buf[4];
  int v79;
  __int16 v80;
  const char *v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  int v85;
  __int16 v86;
  _BYTE v87[10];
  __int16 v88;
  const char *v89;
  _QWORD v90[4];
  _QWORD v91[4];

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SESHAT_ALLOCATE_SLOT", "", buf, 2u);
  }

  v73 = 0;
  v72 = -1;
  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v31 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      if (*(_QWORD *)(a1 + 40))
        v36 = "YES";
      else
        v36 = "NO";
      v37 = 43;
      if (!isMetaClass)
        v37 = 45;
      v31(6, "%c[%{public}s %{public}s]:%i Allocate slot %d, authorizer %d, token : %s", v37, ClassName, Name, 75, *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), v36);
    }
    v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v39 = NFSharedLogGetLogger(v38);
    v40 = objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      v41 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v41))
        v42 = 43;
      else
        v42 = 45;
      v43 = object_getClassName(*(id *)(a1 + 32));
      v44 = sel_getName(*(SEL *)(a1 + 56));
      v45 = *(unsigned __int8 *)(a1 + 64);
      v46 = *(unsigned __int8 *)(a1 + 65);
      if (*(_QWORD *)(a1 + 40))
        v47 = "YES";
      else
        v47 = "NO";
      *(_DWORD *)buf = 67110658;
      v79 = v42;
      v80 = 2082;
      v81 = v43;
      v82 = 2082;
      v83 = v44;
      v84 = 1024;
      v85 = 75;
      v86 = 1024;
      *(_DWORD *)v87 = v45;
      *(_WORD *)&v87[4] = 1024;
      *(_DWORD *)&v87[6] = v46;
      v88 = 2080;
      v89 = v47;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Allocate slot %d, authorizer %d, token : %s", buf, 0x38u);
    }

    v49 = *(_QWORD **)(a1 + 32);
    if (v49[20])
    {
      NFDriverRedactLogging(1, v48);
      v49 = *(_QWORD **)(a1 + 32);
    }
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "embeddedSecureElementWrapper"));

    if (v50)
    {
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
      v52 = *(unsigned __int8 *)(a1 + 64);
      v53 = *(unsigned __int8 *)(a1 + 65);
      v54 = *(_QWORD *)(a1 + 40);
      v71 = 0;
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "allocateSlot:authorizingUser:authorizingUserToken:outToken:outWriteCount:appletResult:", v52, v53, v54, &v71, &v73, &v72));
      v24 = v71;

      v57 = (uint64_t)objc_msgSend(v55, "code");
      if (!v55)
      {
        v23 = 0;
LABEL_45:
        if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 160))
          NFDriverRedactLogging(0, v56);
        v67 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
        v68 = NFSharedSignpostLog(v67);
        v69 = objc_claimAutoreleasedReturnValue(v68);
        if (os_signpost_enabled(v69))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v69, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SESHAT_ALLOCATE_SLOT", "", buf, 2u);
        }

        objc_msgSend(*(id *)(a1 + 32), "maybeTTR:appletResult:", v57, v72);
        goto LABEL_17;
      }
      v58 = objc_alloc((Class)NSError);
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v60 = objc_msgSend(v55, "code");
      v76[0] = NSLocalizedDescriptionKey;
      v70 = v60;
      if ((uint64_t)objc_msgSend(v55, "code") > 70)
        v61 = 71;
      else
        v61 = (uint64_t)objc_msgSend(v55, "code");
      v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EB9B8[v61]));
      v77[0] = v63;
      v77[1] = v55;
      v76[1] = NSUnderlyingErrorKey;
      v76[2] = CFSTR("Line");
      v77[2] = &off_1003033C8;
      v76[3] = CFSTR("Method");
      v64 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
      v77[3] = v64;
      v76[4] = NSDebugDescriptionErrorKey;
      v65 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 88);
      v77[4] = v65;
      v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v77, v76, 5));
      v23 = objc_msgSend(v58, "initWithDomain:code:userInfo:", v59, v70, v66);

    }
    else
    {
      v62 = objc_alloc((Class)NSError);
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v74[0] = NSLocalizedDescriptionKey;
      v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v75[0] = v63;
      v75[1] = &off_1003033E0;
      v74[1] = CFSTR("Line");
      v74[2] = CFSTR("Method");
      v64 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
      v75[2] = v64;
      v74[3] = NSDebugDescriptionErrorKey;
      v65 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 91);
      v75[3] = v65;
      v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v75, v74, 4));
      v57 = 34;
      v23 = objc_msgSend(v62, "initWithDomain:code:userInfo:", v59, 34, v66);
      v24 = 0;
    }

    goto LABEL_45;
  }
  v4 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v5 = NFLogGetLogger(v4);
  if (v5)
  {
    v6 = (void (*)(uint64_t, const char *, ...))v5;
    v7 = object_getClass(*(id *)(a1 + 32));
    v8 = class_isMetaClass(v7);
    v9 = object_getClassName(*(id *)(a1 + 32));
    v10 = sel_getName(*(SEL *)(a1 + 56));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v12 = 45;
    if (v8)
      v12 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v12, v9, v10, 73, v11);

  }
  v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v14 = NFSharedLogGetLogger(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v16 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v16))
      v17 = 43;
    else
      v17 = 45;
    v18 = object_getClassName(*(id *)(a1 + 32));
    v19 = sel_getName(*(SEL *)(a1 + 56));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v79 = v17;
    v80 = 2082;
    v81 = v18;
    v82 = 2082;
    v83 = v19;
    v84 = 1024;
    v85 = 73;
    v86 = 2114;
    *(_QWORD *)v87 = v20;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v21 = *(_QWORD *)(a1 + 48);
  if (v21)
  {
    v22 = objc_alloc((Class)NSError);
    v23 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v90[0] = NSLocalizedDescriptionKey;
    v24 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v91[0] = v24;
    v91[1] = &off_1003033B0;
    v90[1] = CFSTR("Line");
    v90[2] = CFSTR("Method");
    v25 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
    v91[2] = v25;
    v90[3] = NSDebugDescriptionErrorKey;
    v26 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 72);
    v91[3] = v26;
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v91, v90, 4));
    v28 = objc_msgSend(v22, "initWithDomain:code:userInfo:", v23, 54, v27);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, id))(v21 + 16))(v21, 54, 0, 0, v28);

LABEL_17:
  }
}

void sub_100211950(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  int v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *v26;
  _BOOL4 v27;
  const char *v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  const char *v37;
  const char *v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  id v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  id v68;
  id v69;
  unsigned __int16 v70;
  int v71;
  _QWORD v72[4];
  _QWORD v73[4];
  _QWORD v74[5];
  _QWORD v75[5];
  _QWORD v76[4];
  _QWORD v77[4];
  uint8_t buf[4];
  int v79;
  __int16 v80;
  const char *v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  int v85;
  __int16 v86;
  _BYTE v87[14];

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SESHAT_DERIVE", "", buf, 2u);
  }

  v71 = 0;
  v70 = -1;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    if (*(_QWORD *)(a1 + 40))
      v11 = "YES";
    else
      v11 = "NO";
    v12 = 45;
    if (isMetaClass)
      v12 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i Derive slot %d, hash : %s", v12, ClassName, Name, 123, *(unsigned __int8 *)(a1 + 64), v11);
  }
  v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v14 = NFSharedLogGetLogger(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v16))
      v17 = 43;
    else
      v17 = 45;
    v18 = object_getClassName(*(id *)(a1 + 32));
    v19 = sel_getName(*(SEL *)(a1 + 56));
    v20 = *(unsigned __int8 *)(a1 + 64);
    if (*(_QWORD *)(a1 + 40))
      v21 = "YES";
    else
      v21 = "NO";
    *(_DWORD *)buf = 67110402;
    v79 = v17;
    v80 = 2082;
    v81 = v18;
    v82 = 2082;
    v83 = v19;
    v84 = 1024;
    v85 = 123;
    v86 = 1024;
    *(_DWORD *)v87 = v20;
    *(_WORD *)&v87[4] = 2080;
    *(_QWORD *)&v87[6] = v21;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Derive slot %d, hash : %s", buf, 0x32u);
  }

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v48 = *(_QWORD **)(a1 + 32);
    if (v48[20])
    {
      NFDriverRedactLogging(1, v22);
      v48 = *(_QWORD **)(a1 + 32);
    }
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "embeddedSecureElementWrapper"));

    if (v49)
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
      v51 = *(unsigned __int8 *)(a1 + 64);
      v52 = *(_QWORD *)(a1 + 40);
      v69 = 0;
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "derive:userHash:outData:outWriteCount:appletResult:", v51, v52, &v69, &v71, &v70));
      v43 = v69;

      v55 = (uint64_t)objc_msgSend(v53, "code");
      if (!v53)
      {
        v42 = 0;
LABEL_45:
        if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 160))
          NFDriverRedactLogging(0, v54);
        v65 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
        v66 = NFSharedSignpostLog(v65);
        v67 = objc_claimAutoreleasedReturnValue(v66);
        if (os_signpost_enabled(v67))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v67, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SESHAT_DERIVE", "", buf, 2u);
        }

        objc_msgSend(*(id *)(a1 + 32), "maybeTTR:appletResult:", v55, v70);
        goto LABEL_32;
      }
      v56 = objc_alloc((Class)NSError);
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v58 = objc_msgSend(v53, "code");
      v74[0] = NSLocalizedDescriptionKey;
      v68 = v58;
      if ((uint64_t)objc_msgSend(v53, "code") > 70)
        v59 = 71;
      else
        v59 = (uint64_t)objc_msgSend(v53, "code");
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EB9B8[v59]));
      v75[0] = v61;
      v75[1] = v53;
      v74[1] = NSUnderlyingErrorKey;
      v74[2] = CFSTR("Line");
      v75[2] = &off_100303410;
      v74[3] = CFSTR("Method");
      v62 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
      v75[3] = v62;
      v74[4] = NSDebugDescriptionErrorKey;
      v63 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 141);
      v75[4] = v63;
      v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v75, v74, 5));
      v42 = objc_msgSend(v56, "initWithDomain:code:userInfo:", v57, v68, v64);

    }
    else
    {
      v60 = objc_alloc((Class)NSError);
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v72[0] = NSLocalizedDescriptionKey;
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v73[0] = v61;
      v73[1] = &off_100303428;
      v72[1] = CFSTR("Line");
      v72[2] = CFSTR("Method");
      v62 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
      v73[2] = v62;
      v72[3] = NSDebugDescriptionErrorKey;
      v63 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 144);
      v73[3] = v63;
      v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v73, v72, 4));
      v55 = 34;
      v42 = objc_msgSend(v60, "initWithDomain:code:userInfo:", v57, 34, v64);
      v43 = 0;
    }

    goto LABEL_45;
  }
  v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v24 = NFLogGetLogger(v23);
  if (v24)
  {
    v25 = (void (*)(uint64_t, const char *, ...))v24;
    v26 = object_getClass(*(id *)(a1 + 32));
    v27 = class_isMetaClass(v26);
    v28 = object_getClassName(*(id *)(a1 + 32));
    v29 = sel_getName(*(SEL *)(a1 + 56));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v31 = 45;
    if (v27)
      v31 = 43;
    v25(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v31, v28, v29, 129, v30);

  }
  v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v33 = NFSharedLogGetLogger(v32);
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    v35 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v35))
      v36 = 43;
    else
      v36 = 45;
    v37 = object_getClassName(*(id *)(a1 + 32));
    v38 = sel_getName(*(SEL *)(a1 + 56));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v79 = v36;
    v80 = 2082;
    v81 = v37;
    v82 = 2082;
    v83 = v38;
    v84 = 1024;
    v85 = 129;
    v86 = 2114;
    *(_QWORD *)v87 = v39;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v40 = *(_QWORD *)(a1 + 48);
  if (v40)
  {
    v41 = objc_alloc((Class)NSError);
    v42 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v76[0] = NSLocalizedDescriptionKey;
    v43 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v77[0] = v43;
    v77[1] = &off_1003033F8;
    v76[1] = CFSTR("Line");
    v76[2] = CFSTR("Method");
    v44 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
    v77[2] = v44;
    v76[3] = NSDebugDescriptionErrorKey;
    v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 128);
    v77[3] = v45;
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v77, v76, 4));
    v47 = objc_msgSend(v41, "initWithDomain:code:userInfo:", v42, 54, v46);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, id))(v40 + 16))(v40, 54, 0, 0, v47);

LABEL_32:
  }
}

void sub_100212324(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  int v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *v26;
  _BOOL4 v27;
  const char *v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  const char *v37;
  const char *v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  id v66;
  unsigned __int16 v67;
  int v68;
  _QWORD v69[4];
  _QWORD v70[4];
  _QWORD v71[5];
  _QWORD v72[5];
  _QWORD v73[4];
  _QWORD v74[4];
  int buf;
  int v76;
  __int16 v77;
  const char *v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  int v82;
  __int16 v83;
  _BYTE v84[14];

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SESHAT_RESET_COUNTER", "", (uint8_t *)&buf, 2u);
  }

  v68 = 0;
  v67 = -1;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    if (*(_QWORD *)(a1 + 40))
      v11 = "YES";
    else
      v11 = "NO";
    v12 = 45;
    if (isMetaClass)
      v12 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i Reset counter %d, token : %s", v12, ClassName, Name, 175, *(unsigned __int8 *)(a1 + 64), v11);
  }
  v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v14 = NFSharedLogGetLogger(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v16))
      v17 = 43;
    else
      v17 = 45;
    v18 = object_getClassName(*(id *)(a1 + 32));
    v19 = sel_getName(*(SEL *)(a1 + 56));
    v20 = *(unsigned __int8 *)(a1 + 64);
    if (*(_QWORD *)(a1 + 40))
      v21 = "YES";
    else
      v21 = "NO";
    buf = 67110402;
    v76 = v17;
    v77 = 2082;
    v78 = v18;
    v79 = 2082;
    v80 = v19;
    v81 = 1024;
    v82 = 175;
    v83 = 1024;
    *(_DWORD *)v84 = v20;
    *(_WORD *)&v84[4] = 2080;
    *(_QWORD *)&v84[6] = v21;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Reset counter %d, token : %s", (uint8_t *)&buf, 0x32u);
  }

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v48 = *(_QWORD **)(a1 + 32);
    if (v48[20])
    {
      NFDriverRedactLogging(1, v22);
      v48 = *(_QWORD **)(a1 + 32);
    }
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "embeddedSecureElementWrapper"));

    if (v49)
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "resetCounter:userToken:outWriteCount:appletResult:", *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 40), &v68, &v67));

      v53 = (uint64_t)objc_msgSend(v51, "code");
      if (!v51)
      {
        v42 = 0;
LABEL_45:
        if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 160))
          NFDriverRedactLogging(0, v52);
        v63 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
        v64 = NFSharedSignpostLog(v63);
        v65 = objc_claimAutoreleasedReturnValue(v64);
        if (os_signpost_enabled(v65))
        {
          LOWORD(buf) = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v65, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SESHAT_RESET_COUNTER", "", (uint8_t *)&buf, 2u);
        }

        objc_msgSend(*(id *)(a1 + 32), "maybeTTR:appletResult:", v53, v67);
        goto LABEL_32;
      }
      v54 = objc_alloc((Class)NSError);
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v56 = objc_msgSend(v51, "code");
      v71[0] = NSLocalizedDescriptionKey;
      v66 = v56;
      if ((uint64_t)objc_msgSend(v51, "code") > 70)
        v57 = 71;
      else
        v57 = (uint64_t)objc_msgSend(v51, "code");
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EB9B8[v57]));
      v72[0] = v59;
      v72[1] = v51;
      v71[1] = NSUnderlyingErrorKey;
      v71[2] = CFSTR("Line");
      v72[2] = &off_100303458;
      v71[3] = CFSTR("Method");
      v60 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
      v72[3] = v60;
      v71[4] = NSDebugDescriptionErrorKey;
      v61 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 192);
      v72[4] = v61;
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v72, v71, 5));
      v42 = objc_msgSend(v54, "initWithDomain:code:userInfo:", v55, v66, v62);

    }
    else
    {
      v58 = objc_alloc((Class)NSError);
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v69[0] = NSLocalizedDescriptionKey;
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v70[0] = v59;
      v70[1] = &off_100303470;
      v69[1] = CFSTR("Line");
      v69[2] = CFSTR("Method");
      v60 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
      v70[2] = v60;
      v69[3] = NSDebugDescriptionErrorKey;
      v61 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 195);
      v70[3] = v61;
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v70, v69, 4));
      v42 = objc_msgSend(v58, "initWithDomain:code:userInfo:", v55, 34, v62);
      v53 = 34;
    }

    goto LABEL_45;
  }
  v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v24 = NFLogGetLogger(v23);
  if (v24)
  {
    v25 = (void (*)(uint64_t, const char *, ...))v24;
    v26 = object_getClass(*(id *)(a1 + 32));
    v27 = class_isMetaClass(v26);
    v28 = object_getClassName(*(id *)(a1 + 32));
    v29 = sel_getName(*(SEL *)(a1 + 56));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v31 = 45;
    if (v27)
      v31 = 43;
    v25(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v31, v28, v29, 181, v30);

  }
  v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v33 = NFSharedLogGetLogger(v32);
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    v35 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v35))
      v36 = 43;
    else
      v36 = 45;
    v37 = object_getClassName(*(id *)(a1 + 32));
    v38 = sel_getName(*(SEL *)(a1 + 56));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    buf = 67110146;
    v76 = v36;
    v77 = 2082;
    v78 = v37;
    v79 = 2082;
    v80 = v38;
    v81 = 1024;
    v82 = 181;
    v83 = 2114;
    *(_QWORD *)v84 = v39;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", (uint8_t *)&buf, 0x2Cu);

  }
  v40 = *(_QWORD *)(a1 + 48);
  if (v40)
  {
    v41 = objc_alloc((Class)NSError);
    v42 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v73[0] = NSLocalizedDescriptionKey;
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v74[0] = v43;
    v74[1] = &off_100303440;
    v73[1] = CFSTR("Line");
    v73[2] = CFSTR("Method");
    v44 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
    v74[2] = v44;
    v73[3] = NSDebugDescriptionErrorKey;
    v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 180);
    v74[3] = v45;
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v74, v73, 4));
    v47 = objc_msgSend(v41, "initWithDomain:code:userInfo:", v42, 54, v46);
    (*(void (**)(uint64_t, uint64_t, _QWORD, id))(v40 + 16))(v40, 54, 0, v47);

LABEL_32:
  }
}

void sub_100212CE0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  const char *v21;
  int v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  const char *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  const char *v39;
  const char *v40;
  char *v41;
  uint64_t v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  id v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  id v68;
  unsigned __int16 v69;
  int v70;
  _QWORD v71[4];
  _QWORD v72[4];
  _QWORD v73[5];
  _QWORD v74[5];
  _QWORD v75[4];
  _QWORD v76[4];
  int buf;
  int v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  const char *v82;
  __int16 v83;
  int v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  int v88;
  __int16 v89;
  const char *v90;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SESHAT_AUTH_UPDATE", "", (uint8_t *)&buf, 2u);
  }

  v70 = 0;
  v69 = -1;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    if (*(_BYTE *)(a1 + 64))
      v11 = "Authorize";
    else
      v11 = "De-authorize";
    if (*(_QWORD *)(a1 + 40))
      v12 = "YES";
    else
      v12 = "NO";
    v13 = 43;
    if (!isMetaClass)
      v13 = 45;
    v6(6, "%c[%{public}s %{public}s]:%i %s update, slot %d, token : %s", v13, ClassName, Name, 227, v11, *(unsigned __int8 *)(a1 + 65), v12);
  }
  v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v15 = NFSharedLogGetLogger(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v17))
      v18 = 43;
    else
      v18 = 45;
    v19 = object_getClassName(*(id *)(a1 + 32));
    v20 = sel_getName(*(SEL *)(a1 + 56));
    if (*(_BYTE *)(a1 + 64))
      v21 = "Authorize";
    else
      v21 = "De-authorize";
    v22 = *(unsigned __int8 *)(a1 + 65);
    if (*(_QWORD *)(a1 + 40))
      v23 = "YES";
    else
      v23 = "NO";
    buf = 67110658;
    v78 = v18;
    v79 = 2082;
    v80 = v19;
    v81 = 2082;
    v82 = v20;
    v83 = 1024;
    v84 = 227;
    v85 = 2080;
    v86 = v21;
    v87 = 1024;
    v88 = v22;
    v89 = 2080;
    v90 = v23;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %s update, slot %d, token : %s", (uint8_t *)&buf, 0x3Cu);
  }

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v50 = *(_QWORD **)(a1 + 32);
    if (v50[20])
    {
      NFDriverRedactLogging(1, v24);
      v50 = *(_QWORD **)(a1 + 32);
    }
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "embeddedSecureElementWrapper"));

    if (v51)
    {
      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "authorizeUpdate:slotIndex:userToken:outWriteCount:appletResult:", *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), *(_QWORD *)(a1 + 40), &v70, &v69));

      v55 = (uint64_t)objc_msgSend(v53, "code");
      if (!v53)
      {
        v44 = 0;
LABEL_51:
        if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 160))
          NFDriverRedactLogging(0, v54);
        v65 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
        v66 = NFSharedSignpostLog(v65);
        v67 = objc_claimAutoreleasedReturnValue(v66);
        if (os_signpost_enabled(v67))
        {
          LOWORD(buf) = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v67, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SESHAT_AUTH_UPDATE", "", (uint8_t *)&buf, 2u);
        }

        objc_msgSend(*(id *)(a1 + 32), "maybeTTR:appletResult:", v55, v69);
        goto LABEL_38;
      }
      v56 = objc_alloc((Class)NSError);
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v58 = objc_msgSend(v53, "code");
      v73[0] = NSLocalizedDescriptionKey;
      v68 = v58;
      if ((uint64_t)objc_msgSend(v53, "code") > 70)
        v59 = 71;
      else
        v59 = (uint64_t)objc_msgSend(v53, "code");
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EB9B8[v59]));
      v74[0] = v61;
      v74[1] = v53;
      v73[1] = NSUnderlyingErrorKey;
      v73[2] = CFSTR("Line");
      v74[2] = &off_1003034A0;
      v73[3] = CFSTR("Method");
      v62 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
      v74[3] = v62;
      v73[4] = NSDebugDescriptionErrorKey;
      v63 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 244);
      v74[4] = v63;
      v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v74, v73, 5));
      v44 = objc_msgSend(v56, "initWithDomain:code:userInfo:", v57, v68, v64);

    }
    else
    {
      v60 = objc_alloc((Class)NSError);
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v71[0] = NSLocalizedDescriptionKey;
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v72[0] = v61;
      v72[1] = &off_1003034B8;
      v71[1] = CFSTR("Line");
      v71[2] = CFSTR("Method");
      v62 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
      v72[2] = v62;
      v71[3] = NSDebugDescriptionErrorKey;
      v63 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 247);
      v72[3] = v63;
      v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v72, v71, 4));
      v44 = objc_msgSend(v60, "initWithDomain:code:userInfo:", v57, 34, v64);
      v55 = 34;
    }

    goto LABEL_51;
  }
  v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v26 = NFLogGetLogger(v25);
  if (v26)
  {
    v27 = (void (*)(uint64_t, const char *, ...))v26;
    v28 = object_getClass(*(id *)(a1 + 32));
    v29 = class_isMetaClass(v28);
    v30 = object_getClassName(*(id *)(a1 + 32));
    v31 = sel_getName(*(SEL *)(a1 + 56));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v33 = 45;
    if (v29)
      v33 = 43;
    v27(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v33, v30, v31, 233, v32);

  }
  v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v35 = NFSharedLogGetLogger(v34);
  v36 = objc_claimAutoreleasedReturnValue(v35);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    v37 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v37))
      v38 = 43;
    else
      v38 = 45;
    v39 = object_getClassName(*(id *)(a1 + 32));
    v40 = sel_getName(*(SEL *)(a1 + 56));
    v41 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    buf = 67110146;
    v78 = v38;
    v79 = 2082;
    v80 = v39;
    v81 = 2082;
    v82 = v40;
    v83 = 1024;
    v84 = 233;
    v85 = 2114;
    v86 = v41;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", (uint8_t *)&buf, 0x2Cu);

  }
  v42 = *(_QWORD *)(a1 + 48);
  if (v42)
  {
    v43 = objc_alloc((Class)NSError);
    v44 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v75[0] = NSLocalizedDescriptionKey;
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v76[0] = v45;
    v76[1] = &off_100303488;
    v75[1] = CFSTR("Line");
    v75[2] = CFSTR("Method");
    v46 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
    v76[2] = v46;
    v75[3] = NSDebugDescriptionErrorKey;
    v47 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 232);
    v76[3] = v47;
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v76, v75, 4));
    v49 = objc_msgSend(v43, "initWithDomain:code:userInfo:", v44, 54, v48);
    (*(void (**)(uint64_t, uint64_t, _QWORD, id))(v42 + 16))(v42, 54, 0, v49);

LABEL_38:
  }
}

void sub_1002136A4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  int v19;
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *v23;
  _BOOL4 v24;
  const char *v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  objc_class *v32;
  int v33;
  const char *v34;
  const char *v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  unsigned __int16 v61;
  int v62;
  _QWORD v63[4];
  _QWORD v64[4];
  _QWORD v65[5];
  _QWORD v66[5];
  _QWORD v67[4];
  _QWORD v68[4];
  int buf;
  int v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  int v76;
  __int16 v77;
  void *v78;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SESHAT_DELETE_SLOT", "", (uint8_t *)&buf, 2u);
  }

  v62 = 0;
  v61 = -1;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v11 = 45;
    if (isMetaClass)
      v11 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i Delete counter %d", v11, ClassName, Name, 277, *(unsigned __int8 *)(a1 + 56));
  }
  v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v13 = NFSharedLogGetLogger(v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v15))
      v16 = 43;
    else
      v16 = 45;
    v17 = object_getClassName(*(id *)(a1 + 32));
    v18 = sel_getName(*(SEL *)(a1 + 48));
    v19 = *(unsigned __int8 *)(a1 + 56);
    buf = 67110146;
    v70 = v16;
    v71 = 2082;
    v72 = v17;
    v73 = 2082;
    v74 = v18;
    v75 = 1024;
    v76 = 277;
    v77 = 1024;
    LODWORD(v78) = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Delete counter %d", (uint8_t *)&buf, 0x28u);
  }

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));

    if (v45)
    {
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "deleteSlot:outWriteCount:appletResult:", *(unsigned __int8 *)(a1 + 56), &v62, &v61));

      v48 = (uint64_t)objc_msgSend(v47, "code");
      if (!v47)
      {
        v39 = 0;
LABEL_37:
        v58 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        v59 = NFSharedSignpostLog(v58);
        v60 = objc_claimAutoreleasedReturnValue(v59);
        if (os_signpost_enabled(v60))
        {
          LOWORD(buf) = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v60, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SESHAT_DELETE_SLOT", "", (uint8_t *)&buf, 2u);
        }

        objc_msgSend(*(id *)(a1 + 32), "maybeTTR:appletResult:", v48, v61);
        goto LABEL_26;
      }
      v49 = objc_alloc((Class)NSError);
      v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v51 = objc_msgSend(v47, "code");
      v65[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v47, "code") > 70)
        v52 = 71;
      else
        v52 = (uint64_t)objc_msgSend(v47, "code");
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EB9B8[v52]));
      v66[0] = v54;
      v66[1] = v47;
      v65[1] = NSUnderlyingErrorKey;
      v65[2] = CFSTR("Line");
      v66[2] = &off_1003034E8;
      v65[3] = CFSTR("Method");
      v55 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
      v66[3] = v55;
      v65[4] = NSDebugDescriptionErrorKey;
      v56 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 292);
      v66[4] = v56;
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v66, v65, 5));
      v39 = objc_msgSend(v49, "initWithDomain:code:userInfo:", v50, v51, v57);

    }
    else
    {
      v53 = objc_alloc((Class)NSError);
      v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v63[0] = NSLocalizedDescriptionKey;
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v64[0] = v54;
      v64[1] = &off_100303500;
      v63[1] = CFSTR("Line");
      v63[2] = CFSTR("Method");
      v55 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
      v64[2] = v55;
      v63[3] = NSDebugDescriptionErrorKey;
      v56 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 295);
      v64[3] = v56;
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v64, v63, 4));
      v39 = objc_msgSend(v53, "initWithDomain:code:userInfo:", v50, 34, v57);
      v48 = 34;
    }

    goto LABEL_37;
  }
  v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v21 = NFLogGetLogger(v20);
  if (v21)
  {
    v22 = (void (*)(uint64_t, const char *, ...))v21;
    v23 = object_getClass(*(id *)(a1 + 32));
    v24 = class_isMetaClass(v23);
    v25 = object_getClassName(*(id *)(a1 + 32));
    v26 = sel_getName(*(SEL *)(a1 + 48));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v28 = 45;
    if (v24)
      v28 = 43;
    v22(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v28, v25, v26, 283, v27);

  }
  v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v30 = NFSharedLogGetLogger(v29);
  v31 = objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    v32 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v32))
      v33 = 43;
    else
      v33 = 45;
    v34 = object_getClassName(*(id *)(a1 + 32));
    v35 = sel_getName(*(SEL *)(a1 + 48));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    buf = 67110146;
    v70 = v33;
    v71 = 2082;
    v72 = v34;
    v73 = 2082;
    v74 = v35;
    v75 = 1024;
    v76 = 283;
    v77 = 2114;
    v78 = v36;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", (uint8_t *)&buf, 0x2Cu);

  }
  v37 = *(_QWORD *)(a1 + 40);
  if (v37)
  {
    v38 = objc_alloc((Class)NSError);
    v39 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v67[0] = NSLocalizedDescriptionKey;
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v68[0] = v40;
    v68[1] = &off_1003034D0;
    v67[1] = CFSTR("Line");
    v67[2] = CFSTR("Method");
    v41 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
    v68[2] = v41;
    v67[3] = NSDebugDescriptionErrorKey;
    v42 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 282);
    v68[3] = v42;
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v68, v67, 4));
    v44 = objc_msgSend(v38, "initWithDomain:code:userInfo:", v39, 54, v43);
    (*(void (**)(uint64_t, uint64_t, _QWORD, id))(v37 + 16))(v37, 54, 0, v44);

LABEL_26:
  }
}

void sub_100213FB4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  _BOOL4 v22;
  const char *v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  objc_class *v30;
  int v31;
  const char *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  const char *Name;
  id v59;
  id v60;
  unsigned __int16 v61;
  int v62;
  int v63;
  char v64;
  _QWORD v65[4];
  _QWORD v66[4];
  _QWORD v67[5];
  _QWORD v68[5];
  _QWORD v69[4];
  _QWORD v70[4];
  uint8_t buf[4];
  int v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  void *v80;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SESHAT_GET_DATA", "", buf, 2u);
  }

  v64 = 0;
  v62 = 0;
  v63 = 0;
  v61 = -1;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i ", v10, ClassName, Name, 325);
  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v72 = v15;
    v73 = 2082;
    v74 = v16;
    v75 = 2082;
    v76 = v17;
    v77 = 1024;
    v78 = 325;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));

    if (v43)
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
      v60 = 0;
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "getData:updateKUD:outWriteLimit:outWriteCount:appletResult:", &v60, &v64, &v63, &v62, &v61));
      v38 = v60;

      v46 = (uint64_t)objc_msgSend(v45, "code");
      if (!v45)
      {
        v37 = 0;
LABEL_37:
        v55 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        v56 = NFSharedSignpostLog(v55);
        v57 = objc_claimAutoreleasedReturnValue(v56);
        if (os_signpost_enabled(v57))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v57, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SESHAT_GET_DATA", "", buf, 2u);
        }

        objc_msgSend(*(id *)(a1 + 32), "maybeTTR:appletResult:", v46, v61);
        goto LABEL_26;
      }
      v59 = objc_alloc((Class)NSError);
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v48 = objc_msgSend(v45, "code");
      v67[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v45, "code") > 70)
        v49 = 71;
      else
        v49 = (uint64_t)objc_msgSend(v45, "code");
      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EB9B8[v49]));
      v68[0] = v51;
      v68[1] = v45;
      v67[1] = NSUnderlyingErrorKey;
      v67[2] = CFSTR("Line");
      v68[2] = &off_100303530;
      v67[3] = CFSTR("Method");
      v52 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
      v68[3] = v52;
      v67[4] = NSDebugDescriptionErrorKey;
      v53 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 342);
      v68[4] = v53;
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v68, v67, 5));
      v37 = objc_msgSend(v59, "initWithDomain:code:userInfo:", v47, v48, v54);

    }
    else
    {
      v50 = objc_alloc((Class)NSError);
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v65[0] = NSLocalizedDescriptionKey;
      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v66[0] = v51;
      v66[1] = &off_100303548;
      v65[1] = CFSTR("Line");
      v65[2] = CFSTR("Method");
      v52 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
      v66[2] = v52;
      v65[3] = NSDebugDescriptionErrorKey;
      v53 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 345);
      v66[3] = v53;
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v66, v65, 4));
      v46 = 34;
      v37 = objc_msgSend(v50, "initWithDomain:code:userInfo:", v47, 34, v54);
      v38 = 0;
    }

    goto LABEL_37;
  }
  v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v19 = NFLogGetLogger(v18);
  if (v19)
  {
    v20 = (void (*)(uint64_t, const char *, ...))v19;
    v21 = object_getClass(*(id *)(a1 + 32));
    v22 = class_isMetaClass(v21);
    v23 = object_getClassName(*(id *)(a1 + 32));
    v24 = sel_getName(*(SEL *)(a1 + 48));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v26 = 45;
    if (v22)
      v26 = 43;
    v20(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v26, v23, v24, 331, v25);

  }
  v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v28 = NFSharedLogGetLogger(v27);
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    v30 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v30))
      v31 = 43;
    else
      v31 = 45;
    v32 = object_getClassName(*(id *)(a1 + 32));
    v33 = sel_getName(*(SEL *)(a1 + 48));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v72 = v31;
    v73 = 2082;
    v74 = v32;
    v75 = 2082;
    v76 = v33;
    v77 = 1024;
    v78 = 331;
    v79 = 2114;
    v80 = v34;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v35 = *(_QWORD *)(a1 + 40);
  if (v35)
  {
    v36 = objc_alloc((Class)NSError);
    v37 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v69[0] = NSLocalizedDescriptionKey;
    v38 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v70[0] = v38;
    v70[1] = &off_100303518;
    v69[1] = CFSTR("Line");
    v69[2] = CFSTR("Method");
    v39 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
    v70[2] = v39;
    v69[3] = NSDebugDescriptionErrorKey;
    v40 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 330);
    v70[3] = v40;
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v70, v69, 4));
    v42 = objc_msgSend(v36, "initWithDomain:code:userInfo:", v37, 54, v41);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, id))(v35 + 16))(v35, 54, 0, 0, 0, 0, v42);

LABEL_26:
  }
}

void sub_1002148E0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  _BOOL4 v22;
  const char *v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  objc_class *v30;
  int v31;
  const char *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  const char *Name;
  id v59;
  id v60;
  unsigned __int16 v61;
  _QWORD v62[4];
  _QWORD v63[4];
  _QWORD v64[5];
  _QWORD v65[5];
  _QWORD v66[4];
  _QWORD v67[4];
  uint8_t buf[4];
  int v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  int v75;
  __int16 v76;
  void *v77;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SESHAT_GET_HASH", "", buf, 2u);
  }

  v61 = -1;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i ", v10, ClassName, Name, 371);
  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v69 = v15;
    v70 = 2082;
    v71 = v16;
    v72 = 2082;
    v73 = v17;
    v74 = 1024;
    v75 = 371;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));

    if (v43)
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
      v60 = 0;
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "getHash:appletResult:", &v60, &v61));
      v38 = v60;

      v46 = (uint64_t)objc_msgSend(v45, "code");
      if (!v45)
      {
        v37 = 0;
LABEL_37:
        v55 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        v56 = NFSharedSignpostLog(v55);
        v57 = objc_claimAutoreleasedReturnValue(v56);
        if (os_signpost_enabled(v57))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v57, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SESHAT_GET_HASH", "", buf, 2u);
        }

        objc_msgSend(*(id *)(a1 + 32), "maybeTTR:appletResult:", v46, v61);
        goto LABEL_26;
      }
      v59 = objc_alloc((Class)NSError);
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v48 = objc_msgSend(v45, "code");
      v64[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v45, "code") > 70)
        v49 = 71;
      else
        v49 = (uint64_t)objc_msgSend(v45, "code");
      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EB9B8[v49]));
      v65[0] = v51;
      v65[1] = v45;
      v64[1] = NSUnderlyingErrorKey;
      v64[2] = CFSTR("Line");
      v65[2] = &off_100303578;
      v64[3] = CFSTR("Method");
      v52 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
      v65[3] = v52;
      v64[4] = NSDebugDescriptionErrorKey;
      v53 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 385);
      v65[4] = v53;
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v65, v64, 5));
      v37 = objc_msgSend(v59, "initWithDomain:code:userInfo:", v47, v48, v54);

    }
    else
    {
      v50 = objc_alloc((Class)NSError);
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v62[0] = NSLocalizedDescriptionKey;
      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v63[0] = v51;
      v63[1] = &off_100303590;
      v62[1] = CFSTR("Line");
      v62[2] = CFSTR("Method");
      v52 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
      v63[2] = v52;
      v62[3] = NSDebugDescriptionErrorKey;
      v53 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 388);
      v63[3] = v53;
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v63, v62, 4));
      v46 = 34;
      v37 = objc_msgSend(v50, "initWithDomain:code:userInfo:", v47, 34, v54);
      v38 = 0;
    }

    goto LABEL_37;
  }
  v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v19 = NFLogGetLogger(v18);
  if (v19)
  {
    v20 = (void (*)(uint64_t, const char *, ...))v19;
    v21 = object_getClass(*(id *)(a1 + 32));
    v22 = class_isMetaClass(v21);
    v23 = object_getClassName(*(id *)(a1 + 32));
    v24 = sel_getName(*(SEL *)(a1 + 48));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v26 = 45;
    if (v22)
      v26 = 43;
    v20(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v26, v23, v24, 377, v25);

  }
  v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v28 = NFSharedLogGetLogger(v27);
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    v30 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v30))
      v31 = 43;
    else
      v31 = 45;
    v32 = object_getClassName(*(id *)(a1 + 32));
    v33 = sel_getName(*(SEL *)(a1 + 48));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v69 = v31;
    v70 = 2082;
    v71 = v32;
    v72 = 2082;
    v73 = v33;
    v74 = 1024;
    v75 = 377;
    v76 = 2114;
    v77 = v34;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v35 = *(_QWORD *)(a1 + 40);
  if (v35)
  {
    v36 = objc_alloc((Class)NSError);
    v37 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v66[0] = NSLocalizedDescriptionKey;
    v38 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v67[0] = v38;
    v67[1] = &off_100303560;
    v66[1] = CFSTR("Line");
    v66[2] = CFSTR("Method");
    v39 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
    v67[2] = v39;
    v66[3] = NSDebugDescriptionErrorKey;
    v40 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 376);
    v67[3] = v40;
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v67, v66, 4));
    v42 = objc_msgSend(v36, "initWithDomain:code:userInfo:", v37, 54, v41);
    (*(void (**)(uint64_t, uint64_t, _QWORD, id))(v35 + 16))(v35, 54, 0, v42);

LABEL_26:
  }
}

void sub_100215214(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  int v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *v26;
  _BOOL4 v27;
  const char *v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  const char *v37;
  const char *v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  id v66;
  int v67;
  unsigned __int16 v68;
  _QWORD v69[4];
  _QWORD v70[4];
  _QWORD v71[5];
  _QWORD v72[5];
  _QWORD v73[4];
  _QWORD v74[4];
  uint8_t buf[4];
  int v76;
  __int16 v77;
  const char *v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  int v82;
  __int16 v83;
  _BYTE v84[14];

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SESHAT_UPGRADE_KEY", "", buf, 2u);
  }

  v68 = -1;
  v67 = 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    if (*(_QWORD *)(a1 + 40))
      v11 = "YES";
    else
      v11 = "NO";
    v12 = 45;
    if (isMetaClass)
      v12 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i Upgrade:%d Data : %s", v12, ClassName, Name, 416, *(unsigned __int8 *)(a1 + 64), v11);
  }
  v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v14 = NFSharedLogGetLogger(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v16))
      v17 = 43;
    else
      v17 = 45;
    v18 = object_getClassName(*(id *)(a1 + 32));
    v19 = sel_getName(*(SEL *)(a1 + 56));
    v20 = *(unsigned __int8 *)(a1 + 64);
    if (*(_QWORD *)(a1 + 40))
      v21 = "YES";
    else
      v21 = "NO";
    *(_DWORD *)buf = 67110402;
    v76 = v17;
    v77 = 2082;
    v78 = v18;
    v79 = 2082;
    v80 = v19;
    v81 = 1024;
    v82 = 416;
    v83 = 1024;
    *(_DWORD *)v84 = v20;
    *(_WORD *)&v84[4] = 2080;
    *(_QWORD *)&v84[6] = v21;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Upgrade:%d Data : %s", buf, 0x32u);
  }

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v48 = *(_QWORD **)(a1 + 32);
    if (v48[20])
    {
      NFDriverRedactLogging(1, v22);
      v48 = *(_QWORD **)(a1 + 32);
    }
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "embeddedSecureElementWrapper"));

    if (v49)
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "upgradeKey:inputData:outWriteCount:appletResult:", *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 40), &v67, &v68));

      v53 = (uint64_t)objc_msgSend(v51, "code");
      if (!v51)
      {
        v42 = 0;
LABEL_45:
        if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 160))
          NFDriverRedactLogging(0, v52);
        v63 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
        v64 = NFSharedSignpostLog(v63);
        v65 = objc_claimAutoreleasedReturnValue(v64);
        if (os_signpost_enabled(v65))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v65, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SESHAT_UPGRADE_KEY", "", buf, 2u);
        }

        objc_msgSend(*(id *)(a1 + 32), "maybeTTR:appletResult:", v53, v68);
        goto LABEL_32;
      }
      v54 = objc_alloc((Class)NSError);
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v56 = objc_msgSend(v51, "code");
      v71[0] = NSLocalizedDescriptionKey;
      v66 = v56;
      if ((uint64_t)objc_msgSend(v51, "code") > 70)
        v57 = 71;
      else
        v57 = (uint64_t)objc_msgSend(v51, "code");
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EB9B8[v57]));
      v72[0] = v59;
      v72[1] = v51;
      v71[1] = NSUnderlyingErrorKey;
      v71[2] = CFSTR("Line");
      v72[2] = &off_1003035C0;
      v71[3] = CFSTR("Method");
      v60 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
      v72[3] = v60;
      v71[4] = NSDebugDescriptionErrorKey;
      v61 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 432);
      v72[4] = v61;
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v72, v71, 5));
      v42 = objc_msgSend(v54, "initWithDomain:code:userInfo:", v55, v66, v62);

    }
    else
    {
      v58 = objc_alloc((Class)NSError);
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v69[0] = NSLocalizedDescriptionKey;
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
      v70[0] = v59;
      v70[1] = &off_1003035D8;
      v69[1] = CFSTR("Line");
      v69[2] = CFSTR("Method");
      v60 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
      v70[2] = v60;
      v69[3] = NSDebugDescriptionErrorKey;
      v61 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 435);
      v70[3] = v61;
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v70, v69, 4));
      v42 = objc_msgSend(v58, "initWithDomain:code:userInfo:", v55, 34, v62);
      v53 = 34;
    }

    goto LABEL_45;
  }
  v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v24 = NFLogGetLogger(v23);
  if (v24)
  {
    v25 = (void (*)(uint64_t, const char *, ...))v24;
    v26 = object_getClass(*(id *)(a1 + 32));
    v27 = class_isMetaClass(v26);
    v28 = object_getClassName(*(id *)(a1 + 32));
    v29 = sel_getName(*(SEL *)(a1 + 56));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v31 = 45;
    if (v27)
      v31 = 43;
    v25(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v31, v28, v29, 422, v30);

  }
  v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v33 = NFSharedLogGetLogger(v32);
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    v35 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v35))
      v36 = 43;
    else
      v36 = 45;
    v37 = object_getClassName(*(id *)(a1 + 32));
    v38 = sel_getName(*(SEL *)(a1 + 56));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v76 = v36;
    v77 = 2082;
    v78 = v37;
    v79 = 2082;
    v80 = v38;
    v81 = 1024;
    v82 = 422;
    v83 = 2114;
    *(_QWORD *)v84 = v39;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v40 = *(_QWORD *)(a1 + 48);
  if (v40)
  {
    v41 = objc_alloc((Class)NSError);
    v42 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v73[0] = NSLocalizedDescriptionKey;
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v74[0] = v43;
    v74[1] = &off_1003035A8;
    v73[1] = CFSTR("Line");
    v73[2] = CFSTR("Method");
    v44 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
    v74[2] = v44;
    v73[3] = NSDebugDescriptionErrorKey;
    v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 421);
    v74[3] = v45;
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v74, v73, 4));
    v47 = objc_msgSend(v41, "initWithDomain:code:userInfo:", v42, 54, v46);
    (*(void (**)(uint64_t, uint64_t, _QWORD, id))(v40 + 16))(v40, 54, 0, v47);

LABEL_32:
  }
}

void sub_100215B90(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *v21;
  _BOOL4 v22;
  const char *v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  objc_class *v30;
  int v31;
  const char *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  NSObject *v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void (*v54)(uint64_t, const char *, ...);
  objc_class *v55;
  _BOOL4 v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  objc_class *v62;
  int v63;
  const char *v64;
  const char *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *Name;
  const char *v72;
  __int16 v73;
  int v74;
  _QWORD v75[4];
  _QWORD v76[4];
  uint8_t buf[4];
  int v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  const char *v82;
  __int16 v83;
  int v84;
  __int16 v85;
  void *v86;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SESHAT_OBLITERATE", "", buf, 2u);
  }

  v74 = 0;
  v73 = 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i Delete all counters", v10, ClassName, Name, 463);
  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v78 = v15;
    v79 = 2082;
    v80 = v16;
    v81 = 2082;
    v82 = v17;
    v83 = 1024;
    v84 = 463;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Delete all counters", buf, 0x22u);
  }

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "embeddedSecureElementWrapper"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "deleteSlot:outWriteCount:appletResult:", 238, &v74, &v73));

    objc_msgSend(v37, "code");
    v44 = kdebug_trace(724566148, 0, 0, 0, 0);
    v45 = NFSharedSignpostLog(v44);
    v46 = objc_claimAutoreleasedReturnValue(v45);
    if (os_signpost_enabled(v46))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseEffaceAuthorization in", buf, 2u);
    }

    v47 = sub_100207D1C((uint64_t)NFSSEWrapper, +[NFSecureElementWrapper isAuthRandomEntangled](NFSecureElementWrapper, "isAuthRandomEntangled"));
    v48 = kdebug_trace(724566148, 1, 0, 0, 0);
    v49 = NFSharedSignpostLog(v48);
    v50 = objc_claimAutoreleasedReturnValue(v49);
    if (os_signpost_enabled(v50))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "sseEffaceAuthorization out", buf, 2u);
    }

    if (v47)
    {
      v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v53 = NFLogGetLogger(v52);
      if (v53)
      {
        v54 = (void (*)(uint64_t, const char *, ...))v53;
        v55 = object_getClass(*(id *)(a1 + 32));
        v56 = class_isMetaClass(v55);
        v57 = object_getClassName(*(id *)(a1 + 32));
        v72 = sel_getName(*(SEL *)(a1 + 48));
        v58 = 45;
        if (v56)
          v58 = 43;
        v54(3, "%c[%{public}s %{public}s]:%i Failed to efface SEP", v58, v57, v72, 484);
      }
      v59 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v60 = NFSharedLogGetLogger(v59);
      v61 = objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        v62 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v62))
          v63 = 43;
        else
          v63 = 45;
        v64 = object_getClassName(*(id *)(a1 + 32));
        v65 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        v78 = v63;
        v79 = 2082;
        v80 = v64;
        v81 = 2082;
        v82 = v65;
        v83 = 1024;
        v84 = 484;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to efface SEP", buf, 0x22u);
      }

    }
    v66 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v66 + 160))
    {
      NFDriverRedactLogging(1, v51);
      v66 = *(_QWORD *)(a1 + 32);
    }
    v67 = sub_10022BEF4(*(void **)(v66 + 168), 0xFFFFFFFFLL);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 160))
      NFDriverRedactLogging(0, v68);
    v69 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v70 = NFSharedSignpostLog(v69);
    v38 = objc_claimAutoreleasedReturnValue(v70);
    if (os_signpost_enabled(v38))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SESHAT_OBLITERATE", "", buf, 2u);
    }
    goto LABEL_26;
  }
  v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v19 = NFLogGetLogger(v18);
  if (v19)
  {
    v20 = (void (*)(uint64_t, const char *, ...))v19;
    v21 = object_getClass(*(id *)(a1 + 32));
    v22 = class_isMetaClass(v21);
    v23 = object_getClassName(*(id *)(a1 + 32));
    v24 = sel_getName(*(SEL *)(a1 + 48));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v26 = 45;
    if (v22)
      v26 = 43;
    v20(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v26, v23, v24, 469, v25);

  }
  v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v28 = NFSharedLogGetLogger(v27);
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    v30 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v30))
      v31 = 43;
    else
      v31 = 45;
    v32 = object_getClassName(*(id *)(a1 + 32));
    v33 = sel_getName(*(SEL *)(a1 + 48));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v78 = v31;
    v79 = 2082;
    v80 = v32;
    v81 = 2082;
    v82 = v33;
    v83 = 1024;
    v84 = 469;
    v85 = 2114;
    v86 = v34;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v35 = *(_QWORD *)(a1 + 40);
  if (v35)
  {
    v36 = objc_alloc((Class)NSError);
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v75[0] = NSLocalizedDescriptionKey;
    v38 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v76[0] = v38;
    v76[1] = &off_1003035F0;
    v75[1] = CFSTR("Line");
    v75[2] = CFSTR("Method");
    v39 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
    v76[2] = v39;
    v75[3] = NSDebugDescriptionErrorKey;
    v40 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 468);
    v76[3] = v40;
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v76, v75, 4));
    v42 = objc_msgSend(v36, "initWithDomain:code:userInfo:", v37, 54, v41);
    (*(void (**)(uint64_t, uint64_t, id))(v35 + 16))(v35, 54, v42);

LABEL_26:
  }
}

id sub_10021828C()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_10032AC28;
  v7 = qword_10032AC28;
  if (!qword_10032AC28)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10021850C;
    v3[3] = &unk_1002E5E30;
    v3[4] = &v4;
    sub_10021850C((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10021832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id *sub_100218344(id *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  objc_super v14;
  __int128 v15;
  uint64_t v16;

  v6 = a2;
  v7 = a3;
  if (a1)
  {
    v14.receiver = a1;
    v14.super_class = (Class)NFManagedConfigMonitor;
    v8 = (id *)objc_msgSendSuper2(&v14, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeWeak(v8 + 3, v7);
      objc_storeStrong(a1 + 2, a2);
      if (!qword_10032AC30)
      {
        v15 = off_1002EBC20;
        v16 = 0;
        qword_10032AC30 = _sl_dlopen(&v15, 0);
      }
      if (qword_10032AC30)
      {
        v9 = objc_msgSend(sub_10021828C(), "sharedConnection");
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        objc_msgSend(v10, "registerObserver:", a1);

        v11 = objc_msgSend(sub_10021828C(), "sharedConnection");
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        *((_BYTE *)a1 + 8) = objc_msgSend(v12, "isNFCAllowed");

      }
      else
      {
        *((_BYTE *)a1 + 8) = 1;
      }
    }
  }

  return a1;
}

Class sub_10021850C(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;

  v6 = 0;
  if (!qword_10032AC30)
  {
    v7 = off_1002EBC20;
    v8 = 0;
    qword_10032AC30 = _sl_dlopen(&v7, &v6);
  }
  if (!qword_10032AC30)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *ManagedConfigurationLibrary(void)"));
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("NFManagedConfigMonitor.m"), 13, CFSTR("%s"), v6);

    goto LABEL_10;
  }
  if (v6)
    free(v6);
  result = objc_getClass("MCProfileConnection");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getMCProfileConnectionClass(void)_block_invoke"));
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("NFManagedConfigMonitor.m"), 14, CFSTR("Unable to find class %s"), "MCProfileConnection");

LABEL_10:
    __break(1u);
  }
  qword_10032AC28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1002196FC(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 163, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 163;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100219910(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 171, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 171;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_10021B4D8(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  void *v17;
  void *v18;
  const char *ClassName;
  const char *Name;
  _QWORD v21[4];
  __int128 v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  id v32;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i error: %{public}@", v9, ClassName, Name, 288, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v24 = v14;
    v25 = 2082;
    v26 = v15;
    v27 = 2082;
    v28 = v16;
    v29 = 1024;
    v30 = 288;
    v31 = 2114;
    v32 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i error: %{public}@", buf, 0x2Cu);
  }

  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10021B6E4;
  v21[3] = &unk_1002E5F60;
  v22 = *(_OWORD *)(a1 + 32);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v22, "_asynchronousRemoteProxyWithErrorHandler:", v21));
  objc_msgSend(v17, "didStartSession:", v3);

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stsHelper"));
  objc_msgSend(v18, "invalidate");

  objc_msgSend(*(id *)(a1 + 32), "setStsHelper:", 0);
}

void sub_10021B6E4(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 290, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 290;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_10021B878(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  __int128 v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10021B8EC;
  v2[3] = &unk_1002E5F60;
  v3 = *(_OWORD *)(a1 + 32);
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v3, "_asynchronousRemoteProxyWithErrorHandler:", v2));
  objc_msgSend(v1, "didStartSession:", 0);

}

void sub_10021B8EC(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 298, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 298;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_10021BA80(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  const char *ClassName;
  const char *Name;
  _QWORD v29[5];
  _QWORD v30[5];
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  id v40;

  v3 = a2;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(3, "%c[%{public}s %{public}s]:%i Reader start error: %{public}@", v9, ClassName, Name, 336, v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67110146;
      v32 = v14;
      v33 = 2082;
      v34 = v15;
      v35 = 2082;
      v36 = v16;
      v37 = 1024;
      v38 = 336;
      v39 = 2114;
      v40 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reader start error: %{public}@", buf, 0x2Cu);
    }

    v17 = *(_QWORD *)(a1 + 40);
    v18 = objc_alloc((Class)NSError);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v20 = objc_msgSend(v3, "code");
    v29[0] = NSLocalizedDescriptionKey;
    if ((uint64_t)objc_msgSend(v3, "code") > 70)
      v21 = 71;
    else
      v21 = (uint64_t)objc_msgSend(v3, "code");
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", (&off_1002EBC38)[v21]));
    v30[0] = v22;
    v30[1] = v3;
    v29[1] = NSUnderlyingErrorKey;
    v29[2] = CFSTR("Line");
    v30[2] = &off_1003036B0;
    v29[3] = CFSTR("Method");
    v23 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
    v30[3] = v23;
    v29[4] = NSDebugDescriptionErrorKey;
    v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 337);
    v30[4] = v24;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v30, v29, 5));
    v26 = objc_msgSend(v18, "initWithDomain:code:userInfo:", v19, v20, v25);
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v26);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_10021BDCC(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  const char *ClassName;
  const char *Name;
  _QWORD v29[5];
  _QWORD v30[5];
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  id v40;

  v3 = a2;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(3, "%c[%{public}s %{public}s]:%i Device start error: %{public}@", v9, ClassName, Name, 371, v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67110146;
      v32 = v14;
      v33 = 2082;
      v34 = v15;
      v35 = 2082;
      v36 = v16;
      v37 = 1024;
      v38 = 371;
      v39 = 2114;
      v40 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Device start error: %{public}@", buf, 0x2Cu);
    }

    v17 = *(_QWORD *)(a1 + 40);
    v18 = objc_alloc((Class)NSError);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v20 = objc_msgSend(v3, "code");
    v29[0] = NSLocalizedDescriptionKey;
    if ((uint64_t)objc_msgSend(v3, "code") > 70)
      v21 = 71;
    else
      v21 = (uint64_t)objc_msgSend(v3, "code");
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", (&off_1002EBC38)[v21]));
    v30[0] = v22;
    v30[1] = v3;
    v29[1] = NSUnderlyingErrorKey;
    v29[2] = CFSTR("Line");
    v30[2] = &off_1003036C8;
    v29[3] = CFSTR("Method");
    v23 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
    v30[3] = v23;
    v29[4] = NSDebugDescriptionErrorKey;
    v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 372);
    v30[4] = v24;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v30, v29, 5));
    v26 = objc_msgSend(v18, "initWithDomain:code:userInfo:", v19, v20, v25);
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v26);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_10021C61C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  const char *Name;
  _QWORD v34[4];
  _QWORD v35[4];
  uint8_t buf[4];
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  int v43;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
  if (v4
    && (v5 = (void *)v4,
        v6 = objc_msgSend(*(id *)(v4 + 88), "readerModeProtectionActive"),
        v5,
        v6))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v13 = 45;
      if (isMetaClass)
        v13 = 43;
      v9(4, "%c[%{public}s %{public}s]:%i Reader mode protection enabled", v13, ClassName, Name, 414);
    }
    v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v15 = NFSharedLogGetLogger(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v17))
        v18 = 43;
      else
        v18 = 45;
      v19 = object_getClassName(*(id *)(a1 + 32));
      v20 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v37 = v18;
      v38 = 2082;
      v39 = v19;
      v40 = 2082;
      v41 = v20;
      v42 = 1024;
      v43 = 414;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reader mode protection enabled", buf, 0x22u);
    }

    v21 = *(_QWORD *)(a1 + 40);
    v22 = objc_alloc((Class)NSError);
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v34[0] = NSLocalizedDescriptionKey;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Reader mode temporarily disabled"));
    v35[0] = v24;
    v35[1] = &off_1003036F8;
    v34[1] = CFSTR("Line");
    v34[2] = CFSTR("Method");
    v25 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
    v35[2] = v25;
    v34[3] = NSDebugDescriptionErrorKey;
    v26 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 415);
    v35[3] = v26;
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v35, v34, 4));
    v28 = objc_msgSend(v22, "initWithDomain:code:userInfo:", v23, 47, v27);
    (*(void (**)(uint64_t, id))(v21 + 16))(v21, v28);

  }
  else
  {
    if (!v3)
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "powerConsumptionReporter"));
      sub_10019E124((uint64_t)v29, *(void **)(a1 + 32));

      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig readerModeWithFD:](NFRoutingConfig, "readerModeWithFD:", 1));
      objc_msgSend(v30, "setPollingMask:tagConfig:", 19, 48);
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
      v32 = objc_msgSend(v31, "setRoutingConfig:", v30);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_10021D0B8(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  if ((objc_msgSend(*(id *)(a1 + 32), "didEnd") & 1) == 0)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "defaultRoutingConfig:", 3));
    v3 = objc_msgSend(v5, "setRoutingConfig:", v2);

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "powerConsumptionReporter"));
    sub_10019D694((uint64_t)v4, *(void **)(a1 + 32));

  }
}

void sub_10021D240(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *i;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  void *j;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  id v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  NSErrorUserInfoKey v61;
  void *v62;
  _QWORD v63[4];
  _QWORD v64[4];
  _BYTE v65[128];
  _QWORD v66[4];
  _QWORD v67[4];
  _BYTE v68[128];
  NSErrorUserInfoKey v69;
  void *v70;
  uint8_t buf[4];
  int v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  void *v80;

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 64));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, ClassName, Name, 485, v9);

    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 64));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v72 = v15;
      v73 = 2082;
      v74 = v16;
      v75 = 2082;
      v76 = v17;
      v77 = 1024;
      v78 = 485;
      v79 = 2114;
      v80 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v19 = *(_QWORD *)(a1 + 56);
    if (v19)
    {
      v20 = objc_alloc((Class)NSError);
      v21 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v69 = NSLocalizedDescriptionKey;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v70 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v70, &v69, 1));
      v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
      (*(void (**)(uint64_t, id))(v19 + 16))(v19, v24);

LABEL_15:
    }
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v21 = *(id *)(a1 + 40);
    v25 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v57, v68, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v58;
      while (2)
      {
        for (i = 0; i != v26; i = (char *)i + 1)
        {
          if (*(_QWORD *)v58 != v27)
            objc_enumerationMutation(v21);
          v29 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 8 * (_QWORD)i);
          v30 = objc_opt_class(NFTNEPService);
          if ((objc_opt_isKindOfClass(v29, v30) & 1) == 0)
          {
            v43 = *(_QWORD *)(a1 + 56);
            v44 = objc_alloc((Class)NSError);
            v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v66[0] = NSLocalizedDescriptionKey;
            v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
            v67[0] = v46;
            v67[1] = &off_100303710;
            v66[1] = CFSTR("Line");
            v66[2] = CFSTR("Method");
            v47 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 64)));
            v67[2] = v47;
            v66[3] = NSDebugDescriptionErrorKey;
            v48 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 64)), 489);
            v67[3] = v48;
            v49 = v67;
            v50 = v66;
LABEL_38:
            v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v49, v50, 4));
            v52 = objc_msgSend(v44, "initWithDomain:code:userInfo:", v45, 10, v51);
            (*(void (**)(uint64_t, id))(v43 + 16))(v43, v52);

            goto LABEL_15;
          }
        }
        v26 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v57, v68, 16);
        if (v26)
          continue;
        break;
      }
    }

    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v21 = *(id *)(a1 + 48);
    v31 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v53, v65, 16);
    if (v31)
    {
      v32 = v31;
      v33 = *(_QWORD *)v54;
      while (2)
      {
        for (j = 0; j != v32; j = (char *)j + 1)
        {
          if (*(_QWORD *)v54 != v33)
            objc_enumerationMutation(v21);
          v35 = *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)j);
          v36 = objc_opt_class(NFNdefRecordInternal);
          if ((objc_opt_isKindOfClass(v35, v36) & 1) == 0)
          {
            v43 = *(_QWORD *)(a1 + 56);
            v44 = objc_alloc((Class)NSError);
            v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v63[0] = NSLocalizedDescriptionKey;
            v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
            v64[0] = v46;
            v64[1] = &off_100303728;
            v63[1] = CFSTR("Line");
            v63[2] = CFSTR("Method");
            v47 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 64)));
            v64[2] = v47;
            v63[3] = NSDebugDescriptionErrorKey;
            v48 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 64)), 495);
            v64[3] = v48;
            v49 = v64;
            v50 = v63;
            goto LABEL_38;
          }
        }
        v32 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v53, v65, 16);
        if (v32)
          continue;
        break;
      }
    }

    if (objc_msgSend(*(id *)(a1 + 32), "role") == (id)3 || !objc_msgSend(*(id *)(a1 + 32), "role"))
    {
      objc_msgSend(*(id *)(a1 + 32), "_startTNEPDeviceWithServices:optionalRecords:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v37 = *(_QWORD *)(a1 + 56);
      v38 = objc_alloc((Class)NSError);
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v61 = NSLocalizedDescriptionKey;
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
      v62 = v40;
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v62, &v61, 1));
      v42 = objc_msgSend(v38, "initWithDomain:code:userInfo:", v39, 12, v41);
      (*(void (**)(uint64_t, id))(v37 + 16))(v37, v42);

    }
  }
}

void sub_10021DA2C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *v5;
  _BOOL4 v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *specific;
  uint64_t Logger;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  void (*v47)(uint64_t, const char *, ...);
  objc_class *v48;
  _BOOL4 v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  objc_class *v55;
  int v56;
  const char *v57;
  const char *v58;
  id v59;
  const char *Name;
  const char *v61;
  NSErrorUserInfoKey v62;
  void *v63;
  NSErrorUserInfoKey v64;
  void *v65;
  uint8_t buf[4];
  int v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  int v73;
  __int16 v74;
  void *v75;

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v30 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v34 = 45;
      if (isMetaClass)
        v34 = 43;
      v30(6, "%c[%{public}s %{public}s]:%i ", v34, ClassName, Name, 515);
    }
    v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v36 = NFSharedLogGetLogger(v35);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v38 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v38))
        v39 = 43;
      else
        v39 = 45;
      v40 = object_getClassName(*(id *)(a1 + 32));
      v41 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      v67 = v39;
      v68 = 2082;
      v69 = v40;
      v70 = 2082;
      v71 = v41;
      v72 = 1024;
      v73 = 515;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    v42 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));
    if (v42)
    {
      v43 = (void *)v42;
      v44 = objc_msgSend(*(id *)(a1 + 32), "role");

      if (v44 == (id)3)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));
        objc_msgSend(v21, "tnepTagDeviceSendNDEFMessage:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
        goto LABEL_16;
      }
    }
    v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v46 = NFLogGetLogger(v45);
    if (v46)
    {
      v47 = (void (*)(uint64_t, const char *, ...))v46;
      v48 = object_getClass(*(id *)(a1 + 32));
      v49 = class_isMetaClass(v48);
      v50 = object_getClassName(*(id *)(a1 + 32));
      v61 = sel_getName(*(SEL *)(a1 + 56));
      v51 = 45;
      if (v49)
        v51 = 43;
      v47(3, "%c[%{public}s %{public}s]:%i Invalid state", v51, v50, v61, 517);
    }
    v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v53 = NFSharedLogGetLogger(v52);
    v54 = objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      v55 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v55))
        v56 = 43;
      else
        v56 = 45;
      v57 = object_getClassName(*(id *)(a1 + 32));
      v58 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      v67 = v56;
      v68 = 2082;
      v69 = v57;
      v70 = 2082;
      v71 = v58;
      v72 = 1024;
      v73 = 517;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid state", buf, 0x22u);
    }

    v19 = *(_QWORD *)(a1 + 48);
    v59 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v62 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v63 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1));
    v24 = v59;
    v25 = v21;
    v26 = 12;
LABEL_15:
    v27 = objc_msgSend(v24, "initWithDomain:code:userInfo:", v25, v26, v23);
    (*(void (**)(uint64_t, id))(v19 + 16))(v19, v27);

LABEL_16:
    return;
  }
  v2 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v3 = NFLogGetLogger(v2);
  if (v3)
  {
    v4 = (void (*)(uint64_t, const char *, ...))v3;
    v5 = object_getClass(*(id *)(a1 + 32));
    v6 = class_isMetaClass(v5);
    v7 = object_getClassName(*(id *)(a1 + 32));
    v8 = sel_getName(*(SEL *)(a1 + 56));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (v6)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, v7, v8, 513, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 56));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v67 = v15;
    v68 = 2082;
    v69 = v16;
    v70 = 2082;
    v71 = v17;
    v72 = 1024;
    v73 = 513;
    v74 = 2114;
    v75 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 48);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v64 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v65 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1));
    v24 = v20;
    v25 = v21;
    v26 = 54;
    goto LABEL_15;
  }
}

void sub_10021E064(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  const char *v45;
  NSErrorUserInfoKey v46;
  void *v47;
  NSErrorUserInfoKey v48;
  void *v49;
  uint8_t buf[4];
  int v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  void *v59;

  if (!objc_msgSend(*(id *)(a1 + 32), "didStart")
    || (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, ClassName, Name, 530, v9);

    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 48));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
      *(_DWORD *)buf = 67110146;
      v51 = v15;
      v52 = 2082;
      v53 = v16;
      v54 = 2082;
      v55 = v17;
      v56 = 1024;
      v57 = 530;
      v58 = 2114;
      v59 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

    }
    v19 = *(_QWORD *)(a1 + 40);
    if (v19)
    {
      v20 = objc_alloc((Class)NSError);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v48 = NSLocalizedDescriptionKey;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
      v49 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1));
      v24 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 54, v23);
      (*(void (**)(uint64_t, id))(v19 + 16))(v19, v24);

    }
  }
  else if (objc_msgSend(*(id *)(a1 + 32), "role") == (id)4)
  {
    objc_msgSend(*(id *)(a1 + 32), "_startTNEPReaderWithCallback:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v26 = NFLogGetLogger(v25);
    if (v26)
    {
      v27 = (void (*)(uint64_t, const char *, ...))v26;
      v28 = object_getClass(*(id *)(a1 + 32));
      v29 = class_isMetaClass(v28);
      v30 = object_getClassName(*(id *)(a1 + 32));
      v45 = sel_getName(*(SEL *)(a1 + 48));
      v31 = 45;
      if (v29)
        v31 = 43;
      v27(3, "%c[%{public}s %{public}s]:%i Invalid state", v31, v30, v45, 533);
    }
    v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v33 = NFSharedLogGetLogger(v32);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v35 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v35))
        v36 = 43;
      else
        v36 = 45;
      v37 = object_getClassName(*(id *)(a1 + 32));
      v38 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v51 = v36;
      v52 = 2082;
      v53 = v37;
      v54 = 2082;
      v55 = v38;
      v56 = 1024;
      v57 = 533;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid state", buf, 0x22u);
    }

    v39 = *(_QWORD *)(a1 + 40);
    v40 = objc_alloc((Class)NSError);
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v46 = NSLocalizedDescriptionKey;
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v47 = v42;
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1));
    v44 = objc_msgSend(v40, "initWithDomain:code:userInfo:", v41, 12, v43);
    (*(void (**)(uint64_t, id))(v39 + 16))(v39, v44);

  }
}

void sub_10021E5E0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *v5;
  _BOOL4 v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *specific;
  uint64_t Logger;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  objc_class *v40;
  int v41;
  const char *v42;
  const char *v43;
  void *v44;
  objc_class *v45;
  _BOOL4 v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  NSObject *v51;
  objc_class *v52;
  int v53;
  const char *v54;
  const char *v55;
  id v56;
  const char *v57;
  NSErrorUserInfoKey v58;
  void *v59;
  NSErrorUserInfoKey v60;
  void *v61;
  uint8_t buf[4];
  int v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  int v69;
  __int16 v70;
  void *v71;

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));

    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    v31 = (void (*)(uint64_t, const char *, ...))Logger;
    if (v28)
    {
      if (Logger)
      {
        Class = object_getClass(*(id *)(a1 + 32));
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 56));
        v36 = 45;
        if (isMetaClass)
          v36 = 43;
        v31(6, "%c[%{public}s %{public}s]:%i %{public}@", v36, ClassName, Name, 551, *(_QWORD *)(a1 + 40));
      }
      v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v38 = NFSharedLogGetLogger(v37);
      v39 = objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        v40 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v40))
          v41 = 43;
        else
          v41 = 45;
        v42 = object_getClassName(*(id *)(a1 + 32));
        v43 = sel_getName(*(SEL *)(a1 + 56));
        v44 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 67110146;
        v63 = v41;
        v64 = 2082;
        v65 = v42;
        v66 = 2082;
        v67 = v43;
        v68 = 1024;
        v69 = 551;
        v70 = 2114;
        v71 = v44;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
      }

      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));
      objc_msgSend(v21, "tnepReaderSelectService:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      goto LABEL_16;
    }
    if (Logger)
    {
      v45 = object_getClass(*(id *)(a1 + 32));
      v46 = class_isMetaClass(v45);
      v47 = object_getClassName(*(id *)(a1 + 32));
      v57 = sel_getName(*(SEL *)(a1 + 56));
      v48 = 45;
      if (v46)
        v48 = 43;
      v31(3, "%c[%{public}s %{public}s]:%i Missing tnepHandler", v48, v47, v57, 548);
    }
    v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v50 = NFSharedLogGetLogger(v49);
    v51 = objc_claimAutoreleasedReturnValue(v50);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v52 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v52))
        v53 = 43;
      else
        v53 = 45;
      v54 = object_getClassName(*(id *)(a1 + 32));
      v55 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      v63 = v53;
      v64 = 2082;
      v65 = v54;
      v66 = 2082;
      v67 = v55;
      v68 = 1024;
      v69 = 548;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tnepHandler", buf, 0x22u);
    }

    v19 = *(_QWORD *)(a1 + 48);
    v56 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v58 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v59 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v59, &v58, 1));
    v24 = v56;
    v25 = v21;
    v26 = 12;
LABEL_15:
    v27 = objc_msgSend(v24, "initWithDomain:code:userInfo:", v25, v26, v23);
    (*(void (**)(uint64_t, id))(v19 + 16))(v19, v27);

LABEL_16:
    return;
  }
  v2 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v3 = NFLogGetLogger(v2);
  if (v3)
  {
    v4 = (void (*)(uint64_t, const char *, ...))v3;
    v5 = object_getClass(*(id *)(a1 + 32));
    v6 = class_isMetaClass(v5);
    v7 = object_getClassName(*(id *)(a1 + 32));
    v8 = sel_getName(*(SEL *)(a1 + 56));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (v6)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, v7, v8, 545, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 56));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v63 = v15;
    v64 = 2082;
    v65 = v16;
    v66 = 2082;
    v67 = v17;
    v68 = 1024;
    v69 = 545;
    v70 = 2114;
    v71 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 48);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v60 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v61 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1));
    v24 = v20;
    v25 = v21;
    v26 = 54;
    goto LABEL_15;
  }
}

void sub_10021EC0C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *v5;
  _BOOL4 v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *specific;
  uint64_t Logger;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  objc_class *v39;
  int v40;
  const char *v41;
  const char *v42;
  objc_class *v43;
  _BOOL4 v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  objc_class *v50;
  int v51;
  const char *v52;
  const char *v53;
  id v54;
  const char *Name;
  const char *v56;
  NSErrorUserInfoKey v57;
  void *v58;
  NSErrorUserInfoKey v59;
  void *v60;
  uint8_t buf[4];
  int v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  void *v70;

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));

    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    v31 = (void (*)(uint64_t, const char *, ...))Logger;
    if (v28)
    {
      if (Logger)
      {
        Class = object_getClass(*(id *)(a1 + 32));
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 48));
        v35 = 45;
        if (isMetaClass)
          v35 = 43;
        v31(6, "%c[%{public}s %{public}s]:%i ", v35, ClassName, Name, 566);
      }
      v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v37 = NFSharedLogGetLogger(v36);
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        v39 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v39))
          v40 = 43;
        else
          v40 = 45;
        v41 = object_getClassName(*(id *)(a1 + 32));
        v42 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        v62 = v40;
        v63 = 2082;
        v64 = v41;
        v65 = 2082;
        v66 = v42;
        v67 = 1024;
        v68 = 566;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
      }

      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));
      objc_msgSend(v21, "tnepReaderDeselectWithCallback:", *(_QWORD *)(a1 + 40));
      goto LABEL_16;
    }
    if (Logger)
    {
      v43 = object_getClass(*(id *)(a1 + 32));
      v44 = class_isMetaClass(v43);
      v45 = object_getClassName(*(id *)(a1 + 32));
      v56 = sel_getName(*(SEL *)(a1 + 48));
      v46 = 45;
      if (v44)
        v46 = 43;
      v31(3, "%c[%{public}s %{public}s]:%i Missing tnepHandler", v46, v45, v56, 563);
    }
    v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v48 = NFSharedLogGetLogger(v47);
    v49 = objc_claimAutoreleasedReturnValue(v48);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      v50 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v50))
        v51 = 43;
      else
        v51 = 45;
      v52 = object_getClassName(*(id *)(a1 + 32));
      v53 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v62 = v51;
      v63 = 2082;
      v64 = v52;
      v65 = 2082;
      v66 = v53;
      v67 = 1024;
      v68 = 563;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tnepHandler", buf, 0x22u);
    }

    v19 = *(_QWORD *)(a1 + 40);
    v54 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v57 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v58 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v58, &v57, 1));
    v24 = v54;
    v25 = v21;
    v26 = 12;
LABEL_15:
    v27 = objc_msgSend(v24, "initWithDomain:code:userInfo:", v25, v26, v23);
    (*(void (**)(uint64_t, id))(v19 + 16))(v19, v27);

LABEL_16:
    return;
  }
  v2 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v3 = NFLogGetLogger(v2);
  if (v3)
  {
    v4 = (void (*)(uint64_t, const char *, ...))v3;
    v5 = object_getClass(*(id *)(a1 + 32));
    v6 = class_isMetaClass(v5);
    v7 = object_getClassName(*(id *)(a1 + 32));
    v8 = sel_getName(*(SEL *)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (v6)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, v7, v8, 560, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v62 = v15;
    v63 = 2082;
    v64 = v16;
    v65 = 2082;
    v66 = v17;
    v67 = 1024;
    v68 = 560;
    v69 = 2114;
    v70 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 40);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v59 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v60 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v60, &v59, 1));
    v24 = v20;
    v25 = v21;
    v26 = 54;
    goto LABEL_15;
  }
}

void sub_10021F248(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *v5;
  _BOOL4 v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *specific;
  uint64_t Logger;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  objc_class *v39;
  int v40;
  const char *v41;
  const char *v42;
  objc_class *v43;
  _BOOL4 v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  objc_class *v50;
  int v51;
  const char *v52;
  const char *v53;
  id v54;
  const char *Name;
  const char *v56;
  NSErrorUserInfoKey v57;
  void *v58;
  NSErrorUserInfoKey v59;
  void *v60;
  uint8_t buf[4];
  int v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  void *v70;

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));

    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    v31 = (void (*)(uint64_t, const char *, ...))Logger;
    if (v28)
    {
      if (Logger)
      {
        Class = object_getClass(*(id *)(a1 + 32));
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 56));
        v35 = 45;
        if (isMetaClass)
          v35 = 43;
        v31(6, "%c[%{public}s %{public}s]:%i ", v35, ClassName, Name, 582);
      }
      v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v37 = NFSharedLogGetLogger(v36);
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        v39 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v39))
          v40 = 43;
        else
          v40 = 45;
        v41 = object_getClassName(*(id *)(a1 + 32));
        v42 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        v62 = v40;
        v63 = 2082;
        v64 = v41;
        v65 = 2082;
        v66 = v42;
        v67 = 1024;
        v68 = 582;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
      }

      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));
      objc_msgSend(v21, "tnepReaderSend:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      goto LABEL_16;
    }
    if (Logger)
    {
      v43 = object_getClass(*(id *)(a1 + 32));
      v44 = class_isMetaClass(v43);
      v45 = object_getClassName(*(id *)(a1 + 32));
      v56 = sel_getName(*(SEL *)(a1 + 56));
      v46 = 45;
      if (v44)
        v46 = 43;
      v31(3, "%c[%{public}s %{public}s]:%i Missing tnepHandler", v46, v45, v56, 579);
    }
    v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v48 = NFSharedLogGetLogger(v47);
    v49 = objc_claimAutoreleasedReturnValue(v48);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      v50 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v50))
        v51 = 43;
      else
        v51 = 45;
      v52 = object_getClassName(*(id *)(a1 + 32));
      v53 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      v62 = v51;
      v63 = 2082;
      v64 = v52;
      v65 = 2082;
      v66 = v53;
      v67 = 1024;
      v68 = 579;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tnepHandler", buf, 0x22u);
    }

    v19 = *(_QWORD *)(a1 + 48);
    v54 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v57 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v58 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v58, &v57, 1));
    v24 = v54;
    v25 = v21;
    v26 = 12;
LABEL_15:
    v27 = objc_msgSend(v24, "initWithDomain:code:userInfo:", v25, v26, v23);
    (*(void (**)(uint64_t, _QWORD, id))(v19 + 16))(v19, 0, v27);

LABEL_16:
    return;
  }
  v2 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v3 = NFLogGetLogger(v2);
  if (v3)
  {
    v4 = (void (*)(uint64_t, const char *, ...))v3;
    v5 = object_getClass(*(id *)(a1 + 32));
    v6 = class_isMetaClass(v5);
    v7 = object_getClassName(*(id *)(a1 + 32));
    v8 = sel_getName(*(SEL *)(a1 + 56));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (v6)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, v7, v8, 576, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 56));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v62 = v15;
    v63 = 2082;
    v64 = v16;
    v65 = 2082;
    v66 = v17;
    v67 = 1024;
    v68 = 576;
    v69 = 2114;
    v70 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 48);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v59 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v60 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v60, &v59, 1));
    v24 = v20;
    v25 = v21;
    v26 = 54;
    goto LABEL_15;
  }
}

void sub_10021F860(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *v5;
  _BOOL4 v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *specific;
  uint64_t Logger;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  objc_class *v39;
  int v40;
  const char *v41;
  const char *v42;
  void *v43;
  void *v44;
  void *v45;
  objc_class *v46;
  _BOOL4 v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  objc_class *v53;
  int v54;
  const char *v55;
  const char *v56;
  id v57;
  const char *Name;
  const char *v59;
  NSErrorUserInfoKey v60;
  void *v61;
  NSErrorUserInfoKey v62;
  void *v63;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  void *v73;

  if (objc_msgSend(*(id *)(a1 + 32), "didStart")
    && (objc_msgSend(*(id *)(a1 + 32), "isSuspended") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 32), "didEnd"))
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));

    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    v31 = (void (*)(uint64_t, const char *, ...))Logger;
    if (v28)
    {
      if (Logger)
      {
        Class = object_getClass(*(id *)(a1 + 32));
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 48));
        v35 = 45;
        if (isMetaClass)
          v35 = 43;
        v31(6, "%c[%{public}s %{public}s]:%i ", v35, ClassName, Name, 597);
      }
      v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v37 = NFSharedLogGetLogger(v36);
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        v39 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v39))
          v40 = 43;
        else
          v40 = 45;
        v41 = object_getClassName(*(id *)(a1 + 32));
        v42 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        v65 = v40;
        v66 = 2082;
        v67 = v41;
        v68 = 2082;
        v69 = v42;
        v70 = 1024;
        v71 = 597;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
      }

      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connectedTag"));
      sub_10017EF78(v43, v44, 0);

      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));
      objc_msgSend(v45, "tnepReaderRestartPollingWithCallback:", *(_QWORD *)(a1 + 40));

      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "driverWrapper"));
      sub_1001FBF60(v21);
      goto LABEL_16;
    }
    if (Logger)
    {
      v46 = object_getClass(*(id *)(a1 + 32));
      v47 = class_isMetaClass(v46);
      v48 = object_getClassName(*(id *)(a1 + 32));
      v59 = sel_getName(*(SEL *)(a1 + 48));
      v49 = 45;
      if (v47)
        v49 = 43;
      v31(3, "%c[%{public}s %{public}s]:%i Missing tnepHandler", v49, v48, v59, 594);
    }
    v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v51 = NFSharedLogGetLogger(v50);
    v52 = objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      v53 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v53))
        v54 = 43;
      else
        v54 = 45;
      v55 = object_getClassName(*(id *)(a1 + 32));
      v56 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v65 = v54;
      v66 = 2082;
      v67 = v55;
      v68 = 2082;
      v69 = v56;
      v70 = 1024;
      v71 = 594;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tnepHandler", buf, 0x22u);
    }

    v19 = *(_QWORD *)(a1 + 40);
    v57 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v60 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
    v61 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1));
    v24 = v57;
    v25 = v21;
    v26 = 12;
LABEL_15:
    v27 = objc_msgSend(v24, "initWithDomain:code:userInfo:", v25, v26, v23);
    (*(void (**)(uint64_t, id))(v19 + 16))(v19, v27);

LABEL_16:
    return;
  }
  v2 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v3 = NFLogGetLogger(v2);
  if (v3)
  {
    v4 = (void (*)(uint64_t, const char *, ...))v3;
    v5 = object_getClass(*(id *)(a1 + 32));
    v6 = class_isMetaClass(v5);
    v7 = object_getClassName(*(id *)(a1 + 32));
    v8 = sel_getName(*(SEL *)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    v10 = 45;
    if (v6)
      v10 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v10, v7, v8, 591, v9);

  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionUID"));
    *(_DWORD *)buf = 67110146;
    v65 = v15;
    v66 = 2082;
    v67 = v16;
    v68 = 2082;
    v69 = v17;
    v70 = 1024;
    v71 = 591;
    v72 = 2114;
    v73 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);

  }
  v19 = *(_QWORD *)(a1 + 40);
  if (v19)
  {
    v20 = objc_alloc((Class)NSError);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v62 = NSLocalizedDescriptionKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Session not active"));
    v63 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1));
    v24 = v20;
    v25 = v21;
    v26 = 54;
    goto LABEL_15;
  }
}

void sub_1002201A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002201BC(uint64_t a1)
{
  id WeakRetained;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  const char *Name;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(WeakRetained);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(WeakRetained);
      Name = sel_getName(*(SEL *)(a1 + 40));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v5(6, "%c[%{public}s %{public}s]:%i ", v9, ClassName, Name, 615);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(WeakRetained);
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(WeakRetained);
      v16 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      v23 = v14;
      v24 = 2082;
      v25 = v15;
      v26 = 2082;
      v27 = v16;
      v28 = 1024;
      v29 = 615;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tnepHandler"));
    objc_msgSend(v17, "tnepServiceInvalidate");

    objc_msgSend(WeakRetained, "setTnepHandler:", 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig embeddedWiredModeWithFD:](NFRoutingConfig, "embeddedWiredModeWithFD:", 1));
    v20 = objc_msgSend(v18, "setRoutingConfig:", v19);

  }
}

void sub_100220778(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 642, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 642;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100220D98(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 657, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 657;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100220F2C(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 672, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 672;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_1002210C0(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 676, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 676;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100221380(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7;
  id v8;
  void *specific;
  uint64_t Logger;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  const char *ClassName;
  const char *Name;
  _QWORD v32[5];
  id v33;
  uint64_t v34;
  char v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  id v45;

  v7 = a2;
  v8 = a4;
  objc_msgSend(*(id *)(a1 + 32), "setDeviceHandoverSelectError:", v8);
  if (v8)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v11 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v14 = 45;
      if (isMetaClass)
        v14 = 43;
      v11(3, "%c[%{public}s %{public}s]:%i CH process error=%{public}@", v14, ClassName, Name, 690, v8);
    }
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      v20 = object_getClassName(*(id *)(a1 + 32));
      v21 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      v37 = v19;
      v38 = 2082;
      v39 = v20;
      v40 = 2082;
      v41 = v21;
      v42 = 1024;
      v43 = 690;
      v44 = 2114;
      v45 = v8;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i CH process error=%{public}@", buf, 0x2Cu);
    }

  }
  if (objc_msgSend(v7, "length"))
  {
    v22 = objc_alloc((Class)NFNdefMessageInternal);
    v23 = objc_retainAutorelease(v7);
    v24 = objc_msgSend(v22, "initWithBytes:length:", objc_msgSend(v23, "bytes"), objc_msgSend(v23, "length"));
  }
  else
  {
    v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "createCHSelectErrorMessage"));
  }
  v25 = v24;
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_100221618;
  v32[3] = &unk_1002E62B8;
  v27 = *(_QWORD *)(a1 + 32);
  v28 = *(_QWORD *)(a1 + 40);
  v33 = v8;
  v34 = v28;
  v32[4] = v27;
  v35 = a3;
  v29 = v8;
  objc_msgSend(v26, "tnepTagDeviceSendNDEFMessage:callback:", v25, v32);

}

void sub_100221618(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint32_t v21;
  uint64_t v22;
  NSObject *v23;
  char *v24;
  os_signpost_id_t v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  objc_class *v30;
  _BOOL4 v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  objc_class *v36;
  int v37;
  const char *v38;
  const char *v39;
  const char *ClassName;
  const char *Name;
  const char *v42;
  uint8_t buf[4];
  _BYTE v44[24];
  __int16 v45;
  int v46;
  __int16 v47;
  void *v48;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v7(3, "%c[%{public}s %{public}s]:%i error=%{public}@", v10, ClassName, Name, 699, v4);
    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)v44 = v15;
    *(_WORD *)&v44[4] = 2082;
    *(_QWORD *)&v44[6] = v16;
    *(_WORD *)&v44[14] = 2082;
    *(_QWORD *)&v44[16] = v17;
    v45 = 1024;
    v46 = 699;
    v47 = 2114;
    v48 = v4;
    v18 = "%c[%{public}s %{public}s]:%i error=%{public}@";
    v19 = v13;
    v20 = OS_LOG_TYPE_ERROR;
    v21 = 44;
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, buf, v21);
LABEL_12:

    goto LABEL_14;
  }
  if (!*(_QWORD *)(a1 + 40) && *(_BYTE *)(a1 + 56))
  {
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFLogGetLogger(v27);
    if (v28)
    {
      v29 = (void (*)(uint64_t, const char *, ...))v28;
      v30 = object_getClass(*(id *)(a1 + 32));
      v31 = class_isMetaClass(v30);
      v32 = object_getClassName(*(id *)(a1 + 32));
      v42 = sel_getName(*(SEL *)(a1 + 48));
      v33 = 45;
      if (v31)
        v33 = 43;
      v29(6, "%c[%{public}s %{public}s]:%i TNEP is completed", v33, v32, v42, 701);
    }
    v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v35 = NFSharedLogGetLogger(v34);
    v13 = objc_claimAutoreleasedReturnValue(v35);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    v36 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v36))
      v37 = 43;
    else
      v37 = 45;
    v38 = object_getClassName(*(id *)(a1 + 32));
    v39 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)v44 = v37;
    *(_WORD *)&v44[4] = 2082;
    *(_QWORD *)&v44[6] = v38;
    *(_WORD *)&v44[14] = 2082;
    *(_QWORD *)&v44[16] = v39;
    v45 = 1024;
    v46 = 701;
    v18 = "%c[%{public}s %{public}s]:%i TNEP is completed";
    v19 = v13;
    v20 = OS_LOG_TYPE_DEFAULT;
    v21 = 34;
    goto LABEL_11;
  }
LABEL_14:
  v22 = NFSharedSignpostLog(v3);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  v24 = (char *)objc_msgSend(*(id *)(a1 + 32), "signpostId");
  if ((unint64_t)(v24 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v25 = (os_signpost_id_t)v24;
    if (os_signpost_enabled(v23))
    {
      if (v4)
      {
        v26 = "Failed";
      }
      else
      {
        v26 = "Failed";
        if (!*(_QWORD *)(a1 + 40) && *(_BYTE *)(a1 + 56))
          v26 = "Completed";
      }
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v44 = v26;
      *(_WORD *)&v44[8] = 2112;
      *(_QWORD *)&v44[10] = v4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, v25, "CH_Negotiation", "status=%s, error=%@", buf, 0x16u);
    }
  }

}

void sub_100221DC8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  _QWORD v14[4];
  __int128 v15;
  _QWORD v16[5];
  _QWORD v17[5];

  v3 = a2;
  v4 = objc_alloc((Class)NSError);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v6 = objc_msgSend(v3, "code");
  v16[0] = NSLocalizedDescriptionKey;
  if ((uint64_t)objc_msgSend(v3, "code") > 70)
    v7 = 71;
  else
    v7 = (uint64_t)objc_msgSend(v3, "code");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", (&off_1002EBC38)[v7]));
  v17[0] = v8;
  v17[1] = v3;
  v16[1] = NSUnderlyingErrorKey;
  v16[2] = CFSTR("Line");
  v17[2] = &off_100303740;
  v16[3] = CFSTR("Method");
  v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 40)));
  v17[3] = v9;
  v16[4] = NSDebugDescriptionErrorKey;
  v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 40)), 729);
  v17[4] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 5));
  v12 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v5, v6, v11);

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100222034;
  v14[3] = &unk_1002E5F60;
  v15 = *(_OWORD *)(a1 + 32);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v15, "_asynchronousRemoteProxyWithErrorHandler:", v14));
  objc_msgSend(v13, "connectionHandoverProcessFailure:", v12);

  if (objc_msgSend(v3, "code") == (id)47)
    objc_msgSend(*(id *)(a1 + 32), "tnepReaderServicesAborted:", v3);

}

void sub_100222034(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 731, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 731;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_1002221C8(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 740, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 740;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_10022235C(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  void *v17;
  void *v18;
  id v19;
  const char *ClassName;
  const char *Name;
  __int128 v22;
  _QWORD v23[5];
  __int128 v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  id v34;

  v3 = a2;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(3, "%c[%{public}s %{public}s]:%i select failed, error=%{public}@", v9, ClassName, Name, 745, v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      v26 = v14;
      v27 = 2082;
      v28 = v15;
      v29 = 2082;
      v30 = v16;
      v31 = 1024;
      v32 = 745;
      v33 = 2114;
      v34 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i select failed, error=%{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stsHelper"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10022259C;
    v23[3] = &unk_1002E6308;
    v23[4] = *(_QWORD *)(a1 + 32);
    v22 = *(_OWORD *)(a1 + 40);
    v19 = (id)v22;
    v24 = v22;
    objc_msgSend(v17, "generateConnectionHandoverRequestWithQueue:responseHandler:", v18, v23);

  }
}

void sub_10022259C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  const char *ClassName;
  const char *Name;
  __int128 v27;
  _QWORD v28[5];
  __int128 v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  id v39;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v9(3, "%c[%{public}s %{public}s]:%i CH Request generation fail: %{public}@", v12, ClassName, Name, 753, v6);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      v18 = object_getClassName(*(id *)(a1 + 32));
      v19 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      v31 = v17;
      v32 = 2082;
      v33 = v18;
      v34 = 2082;
      v35 = v19;
      v36 = 1024;
      v37 = 753;
      v38 = 2114;
      v39 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i CH Request generation fail: %{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v20 = objc_alloc((Class)NFNdefMessageInternal);
    v21 = objc_retainAutorelease(v5);
    v22 = objc_msgSend(v20, "initWithBytes:length:", objc_msgSend(v21, "bytes"), objc_msgSend(v21, "length"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_10022281C;
    v28[3] = &unk_1002E6330;
    v28[4] = *(_QWORD *)(a1 + 32);
    v27 = *(_OWORD *)(a1 + 40);
    v24 = (id)v27;
    v29 = v27;
    objc_msgSend(v23, "tnepReaderSend:callback:", v22, v28);

  }
}

void sub_10022281C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  const char *ClassName;
  const char *Name;
  __int128 v28;
  _QWORD v29[6];
  _QWORD v30[5];
  __int128 v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  id v41;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v9(3, "%c[%{public}s %{public}s]:%i CH exchange error=%{public}@", v12, ClassName, Name, 761, v6);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      v18 = object_getClassName(*(id *)(a1 + 32));
      v19 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      v33 = v17;
      v34 = 2082;
      v35 = v18;
      v36 = 2082;
      v37 = v19;
      v38 = 1024;
      v39 = 761;
      v40 = 2114;
      v41 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i CH exchange error=%{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stsHelper"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "asData"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100222AD4;
    v30[3] = &unk_1002E6218;
    v30[4] = *(_QWORD *)(a1 + 32);
    v28 = *(_OWORD *)(a1 + 40);
    v23 = (id)v28;
    v31 = v28;
    objc_msgSend(v20, "connectRemoteWithConnectionHandoverSelect:callbackQueue:responseHandler:", v21, v22, v30);

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tnepHandler"));
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_100222C7C;
    v29[3] = &unk_1002E5F60;
    v25 = *(_QWORD *)(a1 + 48);
    v29[4] = *(_QWORD *)(a1 + 32);
    v29[5] = v25;
    objc_msgSend(v24, "tnepReaderDeselectWithCallback:", v29);

  }
}

void sub_100222AD4(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(3, "%c[%{public}s %{public}s]:%i AC connection failure: %{public}@", v9, ClassName, Name, 771, v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      v20 = v14;
      v21 = 2082;
      v22 = v15;
      v23 = 2082;
      v24 = v16;
      v25 = 1024;
      v26 = 771;
      v27 = 2114;
      v28 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i AC connection failure: %{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_100222C7C(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  void *v17;
  const char *ClassName;
  const char *Name;
  _QWORD v20[4];
  __int128 v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  id v31;

  v3 = a2;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(6, "%c[%{public}s %{public}s]:%i Deselect failure: %@; ignore since AC has successfully negotiated and connection attempt started",
        v9,
        ClassName,
        Name,
        781,
        v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      v23 = v14;
      v24 = 2082;
      v25 = v15;
      v26 = 2082;
      v27 = v16;
      v28 = 1024;
      v29 = 781;
      v30 = 2112;
      v31 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Deselect failure: %@; ignore since AC has successfully negotiated and connection attempt started",
        buf,
        0x2Cu);
    }

  }
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100222E64;
  v20[3] = &unk_1002E5F60;
  v21 = *(_OWORD *)(a1 + 32);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v21, "_asynchronousRemoteProxyWithErrorHandler:", v20));
  objc_msgSend(v17, "connectionHandoverProcessCompleted");

}

void sub_100222E64(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 784, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 784;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100223218(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  void *v17;
  const char *ClassName;
  const char *Name;
  _QWORD v20[4];
  __int128 v21;
  _QWORD v22[4];
  __int128 v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  id v33;

  v3 = a2;
  if (v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v6(3, "%c[%{public}s %{public}s]:%i AC connection failure: %{public}@", v9, ClassName, Name, 799, v3);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      v25 = v14;
      v26 = 2082;
      v27 = v15;
      v28 = 2082;
      v29 = v16;
      v30 = 1024;
      v31 = 799;
      v32 = 2114;
      v33 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i AC connection failure: %{public}@", buf, 0x2Cu);
    }

    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10022345C;
    v22[3] = &unk_1002E5F60;
    v23 = *(_OWORD *)(a1 + 32);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v23, "_asynchronousRemoteProxyWithErrorHandler:", v22));
    objc_msgSend(v17, "connectionHandoverProcessFailure:", v3);
  }
  else
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1002235F0;
    v20[3] = &unk_1002E5F60;
    v21 = *(_OWORD *)(a1 + 32);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v21, "_asynchronousRemoteProxyWithErrorHandler:", v20));
    objc_msgSend(v17, "connectionHandoverProcessCompleted");
  }

}

void sub_10022345C(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 801, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 801;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_1002235F0(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 806, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 806;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_1002239DC(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 821, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 821;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

void sub_100224480(uint64_t a1, void *a2)
{
  id v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v3 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v9, ClassName, Name, 917, v3);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 2082;
    v24 = v16;
    v25 = 1024;
    v26 = 917;
    v27 = 2114;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }

}

id sub_100226308(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_10032AC40 != -1)
    dispatch_once(&qword_10032AC40, &stru_1002EBE78);
  return (id)qword_10032AC38;
}

void sub_10022634C(id a1)
{
  NFTagReadCALogger *v1;
  void *v2;

  v1 = objc_opt_new(NFTagReadCALogger);
  v2 = (void *)qword_10032AC38;
  qword_10032AC38 = (uint64_t)v1;

}

void sub_100226374(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  id v9;

  v4 = a2;
  v5 = v4;
  if (a1)
  {
    v6 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    v9 = v4;

    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    objc_msgSend(*(id *)(a1 + 48), "removeAllObjects");
    objc_msgSend(*(id *)(a1 + 48), "addEntriesFromDictionary:", &off_100306C40);
    v5 = v9;
    if (v9)
    {
      v7 = objc_msgSend(*(id *)(a1 + 40), "isEqualToNFTag:", v9);
      v5 = v9;
      if ((v7 & 1) == 0)
      {
        objc_storeStrong((id *)(a1 + 40), a2);
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
        *(_QWORD *)(a1 + 32) = objc_msgSend(v8, "getTimestamp");

        v5 = v9;
      }
    }
  }

}

void sub_100226434(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  void *v32;
  void *v33;
  _QWORD v34[7];
  _QWORD v35[7];

  v5 = a2;
  v6 = v5;
  if (a1)
  {
    if (v5 && objc_msgSend(v5, "isEqualToNFTag:", *(_QWORD *)(a1 + 40)))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
      v8 = objc_msgSend(v7, "getDurationFrom:", *(_QWORD *)(a1 + 32));

      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "UUIDString"));

      if (*(_QWORD *)(a1 + 40))
      {
        v11 = 0;
        switch(a3)
        {
          case 1u:
          case 2u:
          case 3u:
            v12 = *(_DWORD *)(a1 + 108);
            if ((((_BYTE)v12 + 1) & 0xF) != 0)
              ++v12;
            goto LABEL_13;
          case 4u:
          case 5u:
          case 6u:
            v12 = *(_DWORD *)(a1 + 108);
            v13 = v12 + 16;
            v14 = ((v12 + 16) & 0xF0) == 0;
            goto LABEL_11;
          case 7u:
            v25 = *(_DWORD *)(a1 + 108);
            if (((v25 + 256) & 0xF00) != 0)
              v25 += 256;
            *(_DWORD *)(a1 + 108) = v25;
            v11 = 3;
            goto LABEL_17;
          case 8u:
            v26 = *(_DWORD *)(a1 + 108);
            if (((v26 + 4096) & 0xF000) != 0)
              v26 += 4096;
            *(_DWORD *)(a1 + 108) = v26;
            v11 = 4;
            goto LABEL_17;
          case 9u:
          case 0xDu:
            v12 = *(_DWORD *)(a1 + 108);
            v13 = v12 + 0x10000;
            v14 = ((v12 + 0x10000) & 0xF0000) == 0;
LABEL_11:
            if (!v14)
              v12 = v13;
LABEL_13:
            *(_DWORD *)(a1 + 108) = v12;
            break;
          case 0xBu:
            v27 = *(_DWORD *)(a1 + 108);
            if (((v27 + 0x100000) & 0xF00000) != 0)
              v27 += 0x100000;
            *(_DWORD *)(a1 + 108) = v27;
            v11 = 6;
            goto LABEL_17;
          case 0xCu:
            v28 = *(_DWORD *)(a1 + 108);
            if (((v28 + 0x1000000) & 0xF000000) != 0)
              v28 += 0x1000000;
            *(_DWORD *)(a1 + 108) = v28;
            v11 = 7;
            goto LABEL_17;
          case 0xEu:
            v29 = *(_DWORD *)(a1 + 112);
            if ((((_BYTE)v29 + 1) & 0xF) != 0)
              ++v29;
            *(_DWORD *)(a1 + 112) = v29;
            v11 = 9;
            goto LABEL_17;
          case 0xFu:
            v30 = *(_DWORD *)(a1 + 108);
            if (v30 >> 28 != 15)
              v30 += 0x10000000;
            *(_DWORD *)(a1 + 108) = v30;
            v11 = 8;
            goto LABEL_17;
          case 0x10u:
            v31 = *(_DWORD *)(a1 + 112);
            if (((v31 + 16) & 0xF0) != 0)
              v31 += 16;
            *(_DWORD *)(a1 + 112) = v31;
            v11 = 10;
            goto LABEL_17;
          default:
            goto LABEL_17;
        }
      }
      if (a3 > 0x10)
        v11 = 0;
      else
        v11 = dword_10026AA30[a3];
LABEL_17:
      v32 = *(void **)(a1 + 48);
      v33 = (void *)v10;
      v35[0] = v10;
      v34[0] = CFSTR("transactionUUID");
      v34[1] = CFSTR("rawCommandCount");
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 24)));
      v35[1] = v15;
      v34[2] = CFSTR("rawBytesRx");
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 16)));
      v35[2] = v16;
      v34[3] = CFSTR("rawBytesTx");
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 8)));
      v35[3] = v17;
      v34[4] = CFSTR("duration");
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8));
      v35[4] = v18;
      v34[5] = CFSTR("tagType");
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v11));
      v35[5] = v19;
      v34[6] = CFSTR("isConnectionHandover");
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 157)));
      v35[6] = v20;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v35, v34, 7));
      objc_msgSend(v32, "addEntriesFromDictionary:", v21);

      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
      objc_msgSend(v22, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.tagReadEvent"), *(_QWORD *)(a1 + 48));

      ++*(_DWORD *)(a1 + 148);
      *(_DWORD *)(a1 + 104) += (_DWORD)v8;
      *(int32x2_t *)(a1 + 120) = vadd_s32(*(int32x2_t *)(a1 + 120), vrev64_s32(vmovn_s64(*(int64x2_t *)(a1 + 8))));
      *(_DWORD *)(a1 + 128) += *(_DWORD *)(a1 + 24);
      v23 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;

      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      objc_msgSend(*(id *)(a1 + 48), "removeAllObjects");
      objc_msgSend(*(id *)(a1 + 48), "addEntriesFromDictionary:", &off_100306C40);

    }
    v24 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;

  }
}

void sub_10022684C(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", &off_100303818, CFSTR("isNdef"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", a2));
      objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v4, CFSTR("ndefPayloadSize"));

      *(_BYTE *)(a1 + 152) = 1;
    }
  }
}

void sub_1002268C8(uint64_t a1, void *a2)
{
  id v3;

  if (a1)
  {
    if (a2)
    {
      v3 = a2;
      sub_100226374(a1, v3);
      objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", &off_100303818, CFSTR("tagProhibited"));
      objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", &off_100303830, CFSTR("resultCode"));
      sub_100226434(a1, v3, objc_msgSend(v3, "type"));

    }
  }
}

void sub_100226958(uint64_t a1, uint64_t a2)
{
  id v3;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
      objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v3, CFSTR("backgroundTagReadResult"));

    }
  }
}

void sub_1002269C8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  if (a1)
  {
    v5 = v3;
    if (((unint64_t)objc_msgSend(v3, "code") & 0x8000000000000000) != 0
      || (uint64_t)objc_msgSend(v5, "code") > 70)
    {
      objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", &off_100303848, CFSTR("resultCode"));
    }
    else
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v5, "code")));
      objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v4, CFSTR("resultCode"));

    }
    v3 = v5;
  }

}

void sub_100226A6C(uint64_t a1, void *a2, int a3)
{
  void *v6;
  id v7;

  v7 = a2;
  if (a1)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 148) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    *(_WORD *)(a1 + 155) = 0;
    *(_BYTE *)(a1 + 157) = 0;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 116) = 0u;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
    *(_QWORD *)(a1 + 56) = objc_msgSend(v6, "getTimestamp");

    objc_storeStrong((id *)(a1 + 136), a2);
    *(_DWORD *)(a1 + 144) = a3;
  }

}

void sub_100226B10(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  _UNKNOWN **v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[18];
  _QWORD v27[18];

  if (a1 && *(_QWORD *)(a1 + 56))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
    *(_DWORD *)(a1 + 64) = objc_msgSend(v4, "getDurationFrom:", *(_QWORD *)(a1 + 56));

    v5 = +[NFCALogger getBatteryPercent](NFCALogger, "getBatteryPercent");
    v27[0] = *(_QWORD *)(a1 + 136);
    v26[0] = CFSTR("sessionUUID");
    v26[1] = CFSTR("sessionType");
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 144)));
    v27[1] = v25;
    v26[2] = CFSTR("tagCount");
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 148)));
    v27[2] = v24;
    v26[3] = CFSTR("tagTypeCountSetA");
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 108)));
    v27[3] = v23;
    v26[4] = CFSTR("tagTypeCountSetB");
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 112)));
    v27[4] = v22;
    v26[5] = CFSTR("sessionDuration");
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 64)));
    v27[5] = v21;
    v26[6] = CFSTR("pollingDuration");
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 80)));
    v27[6] = v20;
    v26[7] = CFSTR("connectedDuration");
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 104)));
    v27[7] = v19;
    v26[8] = CFSTR("batteryLevel");
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v5));
    v27[8] = v18;
    v26[9] = CFSTR("exitReason");
    v6 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
    v7 = (void *)v6;
    if (*(_BYTE *)(a1 + 155))
      v8 = &off_100303818;
    else
      v8 = &off_1003037E8;
    v27[9] = v6;
    v27[10] = v8;
    v26[10] = CFSTR("burnout");
    v26[11] = CFSTR("pollingConfig");
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 116)));
    v27[11] = v9;
    v26[12] = CFSTR("bytesRx");
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 120)));
    v27[12] = v10;
    v26[13] = CFSTR("bytesTx");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 124)));
    v27[13] = v11;
    v26[14] = CFSTR("commandCount");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 128)));
    v27[14] = v12;
    v26[15] = CFSTR("didReadNdef");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 152)));
    v27[15] = v13;
    v26[16] = CFSTR("didPACE");
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 156)));
    v27[16] = v14;
    v26[17] = CFSTR("isConnectionHandover");
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 157)));
    v27[17] = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 18));

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
    objc_msgSend(v17, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.readerSessionEvent"), v16);

    if (*(_BYTE *)(a1 + 155))
      +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306C68);
    +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:](NFGeneralStatisticsCALogger, "updateGeneralDeviceStatistic:", &off_100306C90);
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 148) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    *(_WORD *)(a1 + 155) = 0;
    *(_BYTE *)(a1 + 157) = 0;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 116) = 0u;

  }
}

void sub_100226F44(uint64_t a1, int a2)
{
  void *v4;

  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
    *(_QWORD *)(a1 + 72) = objc_msgSend(v4, "getTimestamp");

    *(_DWORD *)(a1 + 116) = a2;
  }
}

void sub_100226F94(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
      *(_DWORD *)(a1 + 80) += objc_msgSend(v2, "getDurationFrom:", *(_QWORD *)(a1 + 72));

      *(_QWORD *)(a1 + 72) = 0;
    }
  }
}

void sub_100227028(uint64_t a1, void *a2, void *a3, char a4, int a5)
{
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *specific;
  uint64_t Logger;
  void (*v19)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  const char *v29;
  NSObject *v30;
  uint32_t v31;
  void *v32;
  uint64_t v33;
  void (*v34)(uint64_t, const char *, ...);
  objc_class *v35;
  _BOOL4 v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  objc_class *v40;
  int v41;
  _UNKNOWN **v42;
  _UNKNOWN **v43;
  _UNKNOWN **v44;
  _UNKNOWN **v45;
  _UNKNOWN **v46;
  _UNKNOWN **v47;
  _UNKNOWN **v48;
  _UNKNOWN **v49;
  _UNKNOWN **v50;
  _UNKNOWN **v51;
  void *v52;
  void *v53;
  uint64_t v54;
  char v55;
  __CFString *v56;
  __CFString *v57;
  void *v58;
  __objc2_prop_list **p_inst_props;
  void *v60;
  void *v61;
  double v62;
  unint64_t v63;
  _BOOL4 v64;
  void *v65;
  uint64_t v66;
  char v67;
  _UNKNOWN **v68;
  void *v69;
  uint64_t v70;
  char v71;
  void *v72;
  uint64_t v73;
  char v74;
  _UNKNOWN **v75;
  _UNKNOWN **v76;
  const __CFString *v77;
  void *v78;
  uint64_t v79;
  char v80;
  void *v81;
  uint64_t v82;
  char v83;
  void *v84;
  uint64_t v85;
  char v86;
  void *v87;
  uint64_t v88;
  char v89;
  _UNKNOWN **v90;
  void *v91;
  uint64_t v92;
  char v93;
  _UNKNOWN **v94;
  _UNKNOWN **v95;
  void *v96;
  uint64_t v97;
  char v98;
  _UNKNOWN **v99;
  void *v100;
  uint64_t v101;
  char v102;
  _UNKNOWN **v103;
  void *v104;
  uint64_t v105;
  char v106;
  void *v107;
  uint64_t v108;
  char v109;
  void *v110;
  _UNKNOWN **v111;
  void *v112;
  uint64_t v113;
  char v114;
  _UNKNOWN **v115;
  void *v116;
  uint64_t v117;
  char v118;
  void *v119;
  uint64_t v120;
  char v121;
  void *v122;
  uint64_t v123;
  char v124;
  void *v125;
  uint64_t v126;
  char v127;
  _UNKNOWN **v128;
  void *v129;
  uint64_t v130;
  char v131;
  void *v132;
  uint64_t v133;
  char v134;
  void *v135;
  uint64_t v136;
  char v137;
  void *v138;
  uint64_t v139;
  void *v140;
  char v141;
  void *v142;
  __CFString *v143;
  id v144;
  void *v145;
  id v146;
  void *v147;
  id v148;
  void *v149;
  void *v150;
  uint64_t v151;
  char v152;
  _UNKNOWN **v153;
  unsigned int v154;
  void *v155;
  unsigned int v156;
  void *v157;
  uint64_t v158;
  char v159;
  void *v160;
  double v161;
  unint64_t v162;
  double v163;
  unint64_t v164;
  id v165;
  _UNKNOWN **v166;
  _UNKNOWN **v167;
  _UNKNOWN **v168;
  _UNKNOWN **v169;
  void *v170;
  id v171;
  unsigned int v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  _UNKNOWN **v179;
  void *v180;
  void *v181;
  _UNKNOWN **v182;
  _UNKNOWN **v183;
  _UNKNOWN **v184;
  _UNKNOWN **v185;
  __CFString *v186;
  _UNKNOWN **v187;
  __CFString *v188;
  id v189;
  void *v190;
  _UNKNOWN **v191;
  void *v192;
  void *v193;
  void *v194;
  _UNKNOWN **v195;
  _UNKNOWN **v196;
  _UNKNOWN **v197;
  _UNKNOWN **v198;
  _UNKNOWN **v199;
  __CFString *v200;
  __CFString *v201;
  void *v202;
  uint64_t v203;
  void *v204;
  void *v205;
  uint64_t v206;
  char isKindOfClass;
  _UNKNOWN **v208;
  _UNKNOWN **v209;
  void *v210;
  uint64_t v211;
  char v212;
  _UNKNOWN **v213;
  _UNKNOWN **v214;
  void *v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  __objc2_prop_list *v219;
  void *v220;
  uint64_t v221;
  char v222;
  _UNKNOWN **v223;
  _UNKNOWN **v224;
  void *v225;
  uint64_t v226;
  char v227;
  __CFString *v228;
  __CFString *v229;
  const char *v230;
  const char *Name;
  const char *v232;
  unsigned __int8 v233;
  char v234;
  unsigned int v235;
  unsigned int v236;
  void *v237;
  _UNKNOWN **v238;
  _UNKNOWN **v239;
  _UNKNOWN **v240;
  _UNKNOWN **v241;
  _UNKNOWN **v242;
  _UNKNOWN **v243;
  _UNKNOWN **v244;
  _UNKNOWN **v245;
  _UNKNOWN **v246;
  void *v247;
  _UNKNOWN **v248;
  void *v249;
  _UNKNOWN **v250;
  _UNKNOWN **v251;
  _UNKNOWN **v252;
  _UNKNOWN **v253;
  void *v254;
  _UNKNOWN **v255;
  void *v256;
  void *v257;
  _QWORD v258[29];
  _QWORD v259[2];
  __int128 v260;
  _UNKNOWN **v261;
  _UNKNOWN **v262;
  __CFString *v263;
  _UNKNOWN **v264;
  _UNKNOWN **v265;
  _UNKNOWN **v266;
  _UNKNOWN **v267;
  _UNKNOWN **v268;
  _UNKNOWN **v269;
  _UNKNOWN **v270;
  _UNKNOWN **v271;
  _UNKNOWN **v272;
  _UNKNOWN **v273;
  _UNKNOWN **v274;
  _UNKNOWN **v275;
  void *v276;
  void *v277;
  _UNKNOWN **v278;
  _UNKNOWN **v279;
  _UNKNOWN **v280;
  void *v281;
  void *v282;
  _UNKNOWN **v283;
  void *v284;
  _UNKNOWN **v285;
  _QWORD v286[8];
  const __CFString *v287;
  const __CFString *v288;
  _QWORD v289[2];
  __int128 v290;
  _UNKNOWN **v291;
  __CFString *v292;
  _UNKNOWN **v293;
  const __CFString *v294;
  _UNKNOWN **v295;
  _UNKNOWN **v296;
  uint8_t buf[4];
  int v298;
  __int16 v299;
  const char *v300;
  __int16 v301;
  const char *v302;
  __int16 v303;
  int v304;
  __int16 v305;
  __CFString *v306;

  v9 = a2;
  v10 = a3;
  v11 = (void *)objc_opt_self(a1);
  v256 = v10;
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("EventType")));
  v257 = v9;
  v254 = (void *)v12;
  if (!v12)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v19 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v11);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v11);
      Name = sel_getName("postAnalyticsHciTransactionEventWithEventDict:atlData:withExpressEnabled:prepOnly:");
      v23 = 45;
      if (isMetaClass)
        v23 = 43;
      v19(6, "%c[%{public}s %{public}s]:%i No valid event from ATL, HCI didn't contain a relevant message", v23, ClassName, Name, 134);
    }
    v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v25 = NFSharedLogGetLogger(v24);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      goto LABEL_27;
    v27 = object_getClass(v11);
    if (class_isMetaClass(v27))
      v28 = 43;
    else
      v28 = 45;
    *(_DWORD *)buf = 67109890;
    v298 = v28;
    v299 = 2082;
    v300 = object_getClassName(v11);
    v301 = 2082;
    v302 = sel_getName("postAnalyticsHciTransactionEventWithEventDict:atlData:withExpressEnabled:prepOnly:");
    v303 = 1024;
    v304 = 134;
    v29 = "%c[%{public}s %{public}s]:%i No valid event from ATL, HCI didn't contain a relevant message";
    v30 = v26;
    v31 = 34;
    goto LABEL_26;
  }
  v13 = (__CFString *)v12;
  v14 = objc_opt_class(NSString);
  if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
  {
    if (-[__CFString isEqualToString:](v13, "isEqualToString:", CFSTR("EndEvent")))
      +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306CB8);
    if (a5)
    {
      if (-[__CFString isEqualToString:](v13, "isEqualToString:", CFSTR("ActivityTimeout")))
      {
        v15 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
        v16 = (void *)qword_10032AC50;
        qword_10032AC50 = v15;

      }
      else
      {
        p_inst_props = (__objc2_prop_list **)(&OBJC_PROTOCOL___NFHardwareManagerAccessoryCallbacks + 56);
        if (qword_10032AC48)
        {
          v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
          v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "UUIDString"));

          if (qword_10032AC50)
          {
            objc_msgSend((id)qword_10032AC50, "timeIntervalSinceDate:", qword_10032AC48);
            v63 = (unint64_t)(v62 * 1000.0);
            v64 = qword_10032AC50 == 0;
          }
          else
          {
            v63 = 0;
            v64 = 1;
          }
          v286[0] = CFSTR("transactionUUID");
          v286[1] = CFSTR("command");
          v289[0] = v61;
          v289[1] = off_10032A408[0];
          v286[2] = CFSTR("commandParam1");
          v286[3] = CFSTR("commandResult");
          v286[4] = CFSTR("status");
          v286[5] = CFSTR("aid");
          v291 = off_10032A430;
          v292 = off_10032A428;
          v290 = *(_OWORD *)off_10032A410;
          v293 = off_10032A420;
          v286[6] = CFSTR("expressType");
          v286[7] = CFSTR("closingEventType");
          if (v64)
          {
            v191 = &off_100303860;
            v294 = v13;
            v295 = &off_100303860;
            v287 = CFSTR("transactionDurationMS");
            v288 = CFSTR("timeoutValue");
          }
          else
          {
            v294 = CFSTR("ActivityTimeout");
            v295 = &off_100303860;
            v287 = CFSTR("transactionDurationMS");
            v288 = CFSTR("timeoutValue");
            v191 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v63));
          }
          v296 = v191;
          v192 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v289, v286, 10));
          if (!v64)

          v193 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
          objc_msgSend(v193, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.hciTransactionEvent"), v192);

          p_inst_props = &OBJC_PROTOCOL___NFHardwareManagerAccessoryCallbacks.inst_props;
          if (objc_msgSend(off_10032A418[0], "unsignedIntValue") != 36864)
            +[NFExceptionsCALogger postAnalyticsHciTransactionException:eventType:commandResult:status:](NFExceptionsCALogger, "postAnalyticsHciTransactionException:eventType:commandResult:status:", v61, v13, off_10032A418[0], &off_100303860);
          +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306CE0);
          if (qword_10032AC50)
          {
            +[NFExceptionsCALogger postAnalyticsHciTransactionException:eventType:commandResult:status:](NFExceptionsCALogger, "postAnalyticsHciTransactionException:eventType:commandResult:status:", v61, v13, &off_100303860, off_10032A430);
            +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", &off_100306D08);
          }
          v194 = (void *)qword_10032AC48;
          qword_10032AC48 = 0;

          v195 = off_10032A408[0];
          off_10032A408[0] = &off_100303860;

          v196 = off_10032A410[0];
          off_10032A410[0] = &off_100303860;

          v197 = off_10032A418[0];
          off_10032A418[0] = &off_100303860;

          v198 = off_10032A430;
          off_10032A430 = &off_100303860;

          v199 = off_10032A420;
          off_10032A420 = &off_100303860;

          v200 = off_10032A428;
          off_10032A428 = &stru_1002ED8A8;

          v201 = off_10032A438;
          off_10032A438 = &stru_1002ED8A8;

          v202 = (void *)qword_10032AC50;
          qword_10032AC50 = 0;

        }
        v203 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
        v204 = (void *)qword_10032AC48;
        qword_10032AC48 = v203;

        v205 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("command")));
        v206 = objc_opt_class(NSNumber);
        isKindOfClass = objc_opt_isKindOfClass(v205, v206);

        if ((isKindOfClass & 1) != 0)
        {
          v208 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("command")));
          v209 = off_10032A408[0];
          off_10032A408[0] = v208;

        }
        v210 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("commandParam1")));
        v211 = objc_opt_class(NSNumber);
        v212 = objc_opt_isKindOfClass(v210, v211);

        if ((v212 & 1) != 0)
        {
          v213 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("commandParam1")));
          v214 = off_10032A410[0];
          off_10032A410[0] = v213;

        }
        v215 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("commandResult")));
        v216 = objc_opt_class(NSNumber);
        v217 = objc_opt_isKindOfClass(v215, v216);

        if ((v217 & 1) != 0)
        {
          v218 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("commandResult")));
          v219 = p_inst_props[131];
          p_inst_props[131] = (__objc2_prop_list *)v218;

        }
        v220 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("expressType")));
        v221 = objc_opt_class(NSNumber);
        v222 = objc_opt_isKindOfClass(v220, v221);

        if ((v222 & 1) != 0)
        {
          v223 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("expressType")));
          v224 = off_10032A420;
          off_10032A420 = v223;

        }
        v225 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
        v226 = objc_opt_class(NSString);
        v227 = objc_opt_isKindOfClass(v225, v226);

        if ((v227 & 1) != 0)
        {
          v228 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
          v229 = off_10032A428;
          off_10032A428 = v228;

          objc_storeStrong((id *)&off_10032A438, off_10032A428);
        }
      }
      goto LABEL_28;
    }
    v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v249 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "UUIDString"));

    v237 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("aid")));
    v54 = objc_opt_class(NSData);
    v55 = objc_opt_isKindOfClass(v53, v54);

    if ((v55 & 1) != 0)
    {
      v247 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("aid")));
      v56 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v247, "NF_asHexString"));
      v57 = off_10032A438;
      off_10032A438 = v56;

      v58 = v10;
      if (!off_10032A438)
        off_10032A438 = &stru_1002ED8A8;
    }
    else
    {
      v247 = 0;
      v58 = v10;
    }
    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("informative")));
    v66 = objc_opt_class(NSNumber);
    v67 = objc_opt_isKindOfClass(v65, v66);

    if ((v67 & 1) != 0)
      v68 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("informative")));
    else
      v68 = &off_100303860;
    v234 = a4;
    v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("SPRaw")));
    v70 = objc_opt_class(NSNumber);
    v71 = objc_opt_isKindOfClass(v69, v70);

    if ((v71 & 1) != 0)
      v242 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("SPRaw")));
    else
      v242 = &off_100303860;
    v255 = v68;
    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("status")));
    v73 = objc_opt_class(NSNumber);
    v74 = objc_opt_isKindOfClass(v72, v73);

    if ((v74 & 1) != 0)
    {
      v75 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("status")));
      v76 = off_10032A430;
      off_10032A430 = v75;

    }
    v77 = CFSTR("transactionStatus");
    v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("transactionStatus")));
    v79 = objc_opt_class(NSNumber);
    v80 = objc_opt_isKindOfClass(v78, v79);

    if ((v80 & 1) != 0
      || (v77 = CFSTR("result"),
          v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("result"))),
          v82 = objc_opt_class(NSNumber),
          v83 = objc_opt_isKindOfClass(v81, v82),
          v81,
          (v83 & 1) != 0))
    {
      v243 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v77));
    }
    else
    {
      v243 = &off_100303860;
    }
    v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("transactionCategory")));
    v85 = objc_opt_class(NSNumber);
    v86 = objc_opt_isKindOfClass(v84, v85);

    if ((v86 & 1) != 0)
      v241 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("transactionCategory")));
    else
      v241 = &off_100303860;
    v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("transactionType")));
    v88 = objc_opt_class(NSNumber);
    v89 = objc_opt_isKindOfClass(v87, v88);

    if ((v89 & 1) != 0)
      v90 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("transactionType")));
    else
      v90 = &off_100303860;
    v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("expressType")));
    v92 = objc_opt_class(NSNumber);
    v93 = objc_opt_isKindOfClass(v91, v92);

    if ((v93 & 1) != 0)
    {
      v94 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("expressType")));
      v95 = off_10032A420;
      off_10032A420 = v94;

    }
    v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("transactionExtension")));
    v97 = objc_opt_class(NSNumber);
    v98 = objc_opt_isKindOfClass(v96, v97);

    if ((v98 & 1) != 0)
      v99 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("transactionExtension")));
    else
      v99 = &off_100303860;
    v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("accessUniversityCode")));
    v101 = objc_opt_class(NSNumber);
    v102 = objc_opt_isKindOfClass(v100, v101);

    if ((v102 & 1) != 0)
      v103 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("accessUniversityCode")));
    else
      v103 = &off_100303860;
    v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("interface")));
    v105 = objc_opt_class(NSNumber);
    v106 = objc_opt_isKindOfClass(v104, v105);

    if ((v106 & 1) != 0)
      v239 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("interface")));
    else
      v239 = &off_100303878;
    v252 = v103;
    v253 = v90;
    v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("ReadOperationInfo")));
    v108 = objc_opt_class(NSNumber);
    v109 = objc_opt_isKindOfClass(v107, v108);

    v110 = v9;
    if ((v109 & 1) != 0)
      v111 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("ReadOperationInfo")));
    else
      v111 = &off_100303860;
    v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectForKeyedSubscript:", CFSTR("WriteOperationInfo")));
    v113 = objc_opt_class(NSNumber);
    v114 = objc_opt_isKindOfClass(v112, v113);

    if ((v114 & 1) != 0)
      v115 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectForKeyedSubscript:", CFSTR("WriteOperationInfo")));
    else
      v115 = &off_100303860;
    v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectForKeyedSubscript:", CFSTR("NFMultiTagState")));
    v117 = objc_opt_class(NSNumber);
    v118 = objc_opt_isKindOfClass(v116, v117);

    if ((v118 & 1) != 0)
      v246 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectForKeyedSubscript:", CFSTR("NFMultiTagState")));
    else
      v246 = &off_100303860;
    v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectForKeyedSubscript:", CFSTR("terminalType")));
    v120 = objc_opt_class(NSNumber);
    v121 = objc_opt_isKindOfClass(v119, v120);

    if ((v121 & 1) != 0)
      v245 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectForKeyedSubscript:", CFSTR("terminalType")));
    else
      v245 = &off_100303860;
    v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectForKeyedSubscript:", CFSTR("command")));
    v123 = objc_opt_class(NSNumber);
    v124 = objc_opt_isKindOfClass(v122, v123);

    if ((v124 & 1) != 0
      || (v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKeyedSubscript:", CFSTR("command"))),
          v126 = objc_opt_class(NSNumber),
          v127 = objc_opt_isKindOfClass(v125, v126),
          v125,
          v110 = v58,
          (v127 & 1) != 0))
    {
      v128 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectForKeyedSubscript:", CFSTR("command")));
    }
    else
    {
      v128 = &off_100303860;
    }
    v240 = v111;
    v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v257, "objectForKeyedSubscript:", CFSTR("commandParam1")));
    v130 = objc_opt_class(NSNumber);
    v131 = objc_opt_isKindOfClass(v129, v130);

    v238 = v128;
    if ((v131 & 1) != 0)
      v244 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v257, "objectForKeyedSubscript:", CFSTR("commandParam1")));
    else
      v244 = &off_100303860;
    v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v257, "objectForKeyedSubscript:", CFSTR("status")));
    v133 = objc_opt_class(NSNumber);
    v134 = objc_opt_isKindOfClass(v132, v133);

    v250 = v99;
    v251 = v115;
    if ((v134 & 1) != 0)
    {
      v248 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v257, "objectForKeyedSubscript:", CFSTR("status")));
    }
    else
    {
      v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKeyedSubscript:", CFSTR("result")));
      v136 = objc_opt_class(NSNumber);
      v137 = objc_opt_isKindOfClass(v135, v136);

      if ((v137 & 1) != 0)
        v248 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKeyedSubscript:", CFSTR("result")));
      else
        v248 = &off_100303860;
    }
    v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKeyedSubscript:", CFSTR("didError")));
    v139 = objc_opt_class(NSNumber);
    v140 = v58;
    v141 = objc_opt_isKindOfClass(v138, v139);

    if ((v141 & 1) != 0)
    {
      v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v140, "objectForKeyedSubscript:", CFSTR("didError")));
      v236 = objc_msgSend(v142, "BOOLValue");

    }
    else
    {
      v236 = 0;
    }
    v143 = off_10032A438;
    objc_opt_self(v11);
    v144 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AA74, 7);
    v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "NF_asHexString"));
    if ((-[__CFString hasPrefix:](v143, "hasPrefix:", v145) & 1) == 0)
    {
      v146 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AA7B, 7);
      v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v146, "NF_asHexString"));
      if ((-[__CFString hasPrefix:](v143, "hasPrefix:", v147) & 1) == 0)
      {
        v148 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AA82, 9);
        v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v148, "NF_asHexString"));
        if ((-[__CFString hasPrefix:](v143, "hasPrefix:") & 1) == 0)
        {
          v189 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AA8B, 13);
          v190 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v189, "NF_asHexString"));
          v233 = -[__CFString hasPrefix:](v143, "hasPrefix:", v190);

          if ((v233 & 1) == 0)
          {
            v153 = &off_100303860;
            v154 = v236;
            goto LABEL_102;
          }
LABEL_99:
          v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v257, "objectForKeyedSubscript:", CFSTR("supportsUWB")));
          v151 = objc_opt_class(NSNumber);
          v152 = objc_opt_isKindOfClass(v150, v151);

          v153 = &off_100303878;
          v154 = v236;
          if ((v152 & 1) != 0)
          {
            v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v257, "objectForKeyedSubscript:", CFSTR("supportsUWB")));
            v156 = objc_msgSend(v155, "BOOLValue");

            if (v156)
              v153 = &off_100303890;
          }
LABEL_102:
          if ((v234 & 1) != 0)
          {
            v235 = 1;
          }
          else
          {
            v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v257, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
            v158 = objc_opt_class(NSNumber);
            v159 = objc_opt_isKindOfClass(v157, v158);

            if ((v159 & 1) != 0)
            {
              v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v257, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
              v235 = objc_msgSend(v160, "BOOLValue");

            }
            else
            {
              v235 = 0;
            }
          }
          if (qword_10032AC48)
          {
            objc_msgSend(v237, "timeIntervalSinceDate:");
            v162 = (unint64_t)(v161 * 1000.0);
            if (qword_10032AC50)
            {
              objc_msgSend((id)qword_10032AC50, "timeIntervalSinceDate:", qword_10032AC48);
              v164 = (unint64_t)(v163 * 1000.0);
              goto LABEL_112;
            }
          }
          else
          {
            v162 = 0;
          }
          v164 = 0;
LABEL_112:
          v165 = objc_msgSend(v247, "length");
          v166 = &off_100303860;
          v168 = v245;
          v167 = v246;
          v169 = v244;
          if ((unint64_t)v165 >= 0xA)
          {
            v170 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v247, "subdataWithRange:", 0, 10));
            v171 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AA98, 10);
            v172 = objc_msgSend(v170, "isEqualToData:", v171);

            if (v172)
              v166 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v256, "objectForKeyedSubscript:", CFSTR("identityAuthStatus")));
            v168 = v245;
            v167 = v246;
            v169 = v244;
            v154 = v236;
          }
          v258[0] = CFSTR("transactionUUID");
          v258[1] = CFSTR("command");
          v259[0] = v249;
          v259[1] = off_10032A408[0];
          v260 = *(_OWORD *)off_10032A410;
          v258[2] = CFSTR("commandParam1");
          v258[3] = CFSTR("commandResult");
          v258[4] = CFSTR("status");
          v258[5] = CFSTR("expressType");
          v261 = off_10032A430;
          v262 = off_10032A420;
          v258[6] = CFSTR("aid");
          v258[7] = CFSTR("informative");
          v263 = off_10032A438;
          v264 = v255;
          v258[8] = CFSTR("SPID");
          v258[9] = CFSTR("transactionStatus");
          v265 = v242;
          v266 = v243;
          v258[10] = CFSTR("transactionCategory");
          v258[11] = CFSTR("transactionType");
          v267 = v241;
          v268 = v253;
          v258[12] = CFSTR("transactionExtension");
          v258[13] = CFSTR("accessUniversityCode");
          v269 = v250;
          v270 = v252;
          v258[14] = CFSTR("endEventInterface");
          v258[15] = CFSTR("sfiRead");
          v271 = v239;
          v272 = v240;
          v258[16] = CFSTR("sfiUpdated");
          v258[17] = CFSTR("multiTagState");
          v273 = v251;
          v274 = v167;
          v275 = v168;
          v258[18] = CFSTR("terminalType");
          v258[19] = CFSTR("transactionDurationMS");
          v173 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v162));
          v276 = v173;
          v258[20] = CFSTR("timeoutValue");
          v174 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v164));
          v277 = v174;
          v278 = v238;
          v258[21] = CFSTR("endEventCommand");
          v258[22] = CFSTR("endEventCommandParam1");
          v279 = v169;
          v280 = v248;
          v258[23] = CFSTR("endEventCommandResult");
          v258[24] = CFSTR("didError");
          v175 = &__kCFBooleanFalse;
          if (v154)
            v175 = &__kCFBooleanTrue;
          v281 = v175;
          v282 = v254;
          v258[25] = CFSTR("closingEventType");
          v258[26] = CFSTR("keyType");
          v283 = v153;
          v258[27] = CFSTR("expressEnabled");
          v176 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v235));
          v258[28] = CFSTR("identityAuthStatus");
          v284 = v176;
          v285 = v166;
          v177 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v259, v258, 29));

          v178 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
          objc_msgSend(v178, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.hciTransactionEvent"), v177);

          if (objc_msgSend(v254, "isEqualToString:", CFSTR("EndEvent")))
          {
            if ((v154 & 1) == 0
              && objc_msgSend(v243, "unsignedIntValue") != 256
              && (objc_msgSend(v255, "unsignedIntValue") & 0x80) == 0)
            {
              goto LABEL_126;
            }
            v179 = &off_100306D30;
          }
          else
          {
            if (!objc_msgSend(v254, "isEqualToString:", CFSTR("ActivityTimeout")))
            {
LABEL_126:
              v180 = (void *)qword_10032AC48;
              qword_10032AC48 = 0;

              v181 = (void *)qword_10032AC50;
              qword_10032AC50 = 0;

              v182 = off_10032A408[0];
              off_10032A408[0] = &off_100303860;

              v183 = off_10032A410[0];
              off_10032A410[0] = &off_100303860;

              v184 = off_10032A418[0];
              off_10032A418[0] = &off_100303860;

              v185 = off_10032A420;
              off_10032A420 = &off_100303860;

              v186 = off_10032A428;
              off_10032A428 = &stru_1002ED8A8;

              v187 = off_10032A430;
              off_10032A430 = &off_100303860;

              v188 = off_10032A438;
              off_10032A438 = &stru_1002ED8A8;

              v47 = v242;
              v46 = v243;
              v42 = v240;
              v45 = v241;
              v50 = v238;
              v51 = v239;
              v44 = v245;
              v43 = v246;
              v49 = v244;
              v48 = v248;
              goto LABEL_29;
            }
            v179 = &off_100306D58;
          }
          +[NFExceptionsCALogger postAnalyticsHciTransactionException:eventType:commandResult:status:](NFExceptionsCALogger, "postAnalyticsHciTransactionException:eventType:commandResult:status:", v249, v254, v248, off_10032A430);
          +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:](NFGeneralStatisticsCALogger, "updateAnalyticsGeneralTransactionStatistics:", v179);
          goto LABEL_126;
        }

      }
    }

    goto LABEL_99;
  }
  v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v33 = NFLogGetLogger(v32);
  if (v33)
  {
    v34 = (void (*)(uint64_t, const char *, ...))v33;
    v35 = object_getClass(v11);
    v36 = class_isMetaClass(v35);
    v230 = object_getClassName(v11);
    v232 = sel_getName("postAnalyticsHciTransactionEventWithEventDict:atlData:withExpressEnabled:prepOnly:");
    v37 = 45;
    if (v36)
      v37 = 43;
    v34(6, "%c[%{public}s %{public}s]:%i Error : invalid event class : %{public}@", v37, v230, v232, 138, v13);
  }
  v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v39 = NFSharedLogGetLogger(v38);
  v26 = objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    v40 = object_getClass(v11);
    if (class_isMetaClass(v40))
      v41 = 43;
    else
      v41 = 45;
    *(_DWORD *)buf = 67110146;
    v298 = v41;
    v299 = 2082;
    v300 = object_getClassName(v11);
    v301 = 2082;
    v302 = sel_getName("postAnalyticsHciTransactionEventWithEventDict:atlData:withExpressEnabled:prepOnly:");
    v303 = 1024;
    v304 = 138;
    v305 = 2114;
    v306 = v13;
    v29 = "%c[%{public}s %{public}s]:%i Error : invalid event class : %{public}@";
    v30 = v26;
    v31 = 44;
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
  }
LABEL_27:

LABEL_28:
  v42 = &off_100303860;
  v251 = &off_100303860;
  v252 = &off_100303860;
  v43 = &off_100303860;
  v44 = &off_100303860;
  v250 = &off_100303860;
  v253 = &off_100303860;
  v45 = &off_100303860;
  v46 = &off_100303860;
  v47 = &off_100303860;
  v255 = &off_100303860;
  v48 = &off_100303860;
  v49 = &off_100303860;
  v50 = &off_100303860;
  v51 = &off_100303878;
LABEL_29:

}

void sub_1002288CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _UNKNOWN **v7;
  void *v8;
  void *v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  v10[0] = CFSTR("status");
  if (v5)
    v7 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v5, "code")));
  else
    v7 = &off_100303860;
  v10[1] = CFSTR("aid");
  v11[0] = v7;
  v11[1] = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 2));
  if (v5)

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  objc_msgSend(v9, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.eCommerceTransactionEvent"), v8);

}

void sub_1002289EC(uint64_t a1, void *a2, int a3)
{
  uint64_t v5;
  NSMutableDictionary *v6;
  NSMutableDictionary *v7;
  NSMutableDictionary *v8;
  BOOL v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char isKindOfClass;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;

  v30 = a2;
  v5 = objc_opt_self(a1);
  v6 = objc_opt_new(NSMutableDictionary);
  v7 = objc_opt_new(NSMutableDictionary);
  v8 = v7;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (v9)
    goto LABEL_27;
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", &off_100303890, CFSTR("version"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));

  if (v10)
  {
    v11 = CFSTR("appletIdentifier");
  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("aid")));

    if (!v12)
      goto LABEL_11;
    v11 = CFSTR("aid");
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", v11));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v13));

  if (v14)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v14, CFSTR("aid"));

  }
LABEL_11:
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("result")));

  if (v15)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("result")));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v16, CFSTR("result"));

  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("transactionStatus")));
  v18 = objc_opt_class(NSNumber);
  isKindOfClass = objc_opt_isKindOfClass(v17, v18);

  if ((isKindOfClass & 1) != 0)
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("transactionStatus")));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v20, CFSTR("transactionStatus"));

  }
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("expressType")));

  if (v21)
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("expressType")));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v22, CFSTR("expressType"));

  }
  if (a3)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("expressEnabled"));
LABEL_21:
    v24 = v30;
    goto LABEL_22;
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("expressEnabled")));

  v24 = v30;
  if (v23)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v25, CFSTR("expressEnabled"));

    goto LABEL_21;
  }
LABEL_22:
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("felicaInfo")));

  if (v26)
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("felicaInfo")));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("NFServiceProviderID")));

    if (v28)
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("NFServiceProviderID")));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v29, CFSTR("SPRaw"));

    }
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", CFSTR("EndEvent"), CFSTR("EventType"));
  sub_100227028(v5, v6, v8, a3, 0);
LABEL_27:

}

void sub_100228D64(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  char isKindOfClass;
  __CFString *v7;
  void *v8;
  uint64_t v9;
  char v10;
  _UNKNOWN **v11;
  void *v12;
  uint64_t v13;
  char v14;
  _UNKNOWN **v15;
  void *v16;
  uint64_t v17;
  char v18;
  _UNKNOWN **v19;
  void *v20;
  uint64_t v21;
  char v22;
  _UNKNOWN **v23;
  void *v24;
  void *v25;
  _QWORD v26[5];
  _QWORD v27[5];

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
  v5 = objc_opt_class(NSString);
  isKindOfClass = objc_opt_isKindOfClass(v4, v5);

  if ((isKindOfClass & 1) != 0)
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
  else
    v7 = &stru_1002ED8A8;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("Version")));
  v9 = objc_opt_class(NSNumber);
  v10 = objc_opt_isKindOfClass(v8, v9);

  if ((v10 & 1) != 0)
    v11 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("Version")));
  else
    v11 = &off_100303860;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("Interface")));
  v13 = objc_opt_class(NSNumber);
  v14 = objc_opt_isKindOfClass(v12, v13);

  if ((v14 & 1) != 0)
    v15 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("Interface")));
  else
    v15 = &off_100303860;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("UnavailableCertFileId")));
  v17 = objc_opt_class(NSNumber);
  v18 = objc_opt_isKindOfClass(v16, v17);

  if ((v18 & 1) != 0)
    v19 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("UnavailableCertFileId")));
  else
    v19 = &off_100303860;
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("UnavailableCertAvailablityInfo")));
  v21 = objc_opt_class(NSNumber);
  v22 = objc_opt_isKindOfClass(v20, v21);

  if ((v22 & 1) != 0)
    v23 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("UnavailableCertAvailablityInfo")));
  else
    v23 = &off_100303860;
  v26[0] = CFSTR("aid");
  v26[1] = CFSTR("version");
  v27[0] = v7;
  v27[1] = v11;
  v26[2] = CFSTR("interface");
  v26[3] = CFSTR("fileId");
  v27[2] = v15;
  v27[3] = v19;
  v26[4] = CFSTR("availabilityInfo");
  v27[4] = v23;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 5));
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NFCALogger sharedCALogger](NFCALogger, "sharedCALogger"));
  objc_msgSend(v25, "postCAEventFor:eventInput:", CFSTR("com.apple.nfcd.mDocHybridUnavailableCertEvent"), v24);

}

uint64_t sub_1002296F8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100229708(uint64_t a1)
{

}

void sub_100229710(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NFApplet *v33;
  void *v34;
  uint64_t v35;
  void (*v36)(uint64_t, const char *, ...);
  objc_class *v37;
  _BOOL4 v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  objc_class *v45;
  int v46;
  const char *v47;
  const char *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void (*v68)(uint64_t, const char *, ...);
  objc_class *v69;
  _BOOL4 v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  objc_class *v75;
  int v76;
  const char *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void (*v82)(uint64_t, const char *, ...);
  objc_class *v83;
  _BOOL4 v84;
  const char *v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  NSObject *v90;
  objc_class *v91;
  int v92;
  const char *v93;
  const char *v94;
  id v95;
  id v96;
  const char *v97;
  id v98;
  void *v99;
  NSObject *v100;
  void *v101;
  void *v102;
  void *v103;
  NSMutableArray *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  id obj;
  _QWORD v110[4];
  _QWORD v111[4];
  _BYTE v112[128];
  NSErrorUserInfoKey v113;
  void *v114;
  uint8_t buf[4];
  int v116;
  __int16 v117;
  const char *v118;
  __int16 v119;
  const char *v120;
  __int16 v121;
  int v122;
  __int16 v123;
  void *v124;
  __int16 v125;
  id v126;

  v2 = (void *)objc_opt_new(NFStorageService);
  v104 = objc_opt_new(NSMutableArray);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v3 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "fetchAppletEntitiesWithError:", &obj));
  objc_storeStrong((id *)(v3 + 40), obj);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) || !objc_msgSend(v4, "count"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v12 = 45;
      if (isMetaClass)
        v12 = 43;
      v7(3, "%c[%{public}s %{public}s]:%i Could not load applets from storage : %{public}@ (config %{public}@)", v12, ClassName, Name, 79, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v4);
    }
    v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v14 = NFSharedLogGetLogger(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v16))
        v17 = 43;
      else
        v17 = 45;
      v18 = object_getClassName(*(id *)(a1 + 32));
      v19 = sel_getName(*(SEL *)(a1 + 56));
      v20 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      *(_DWORD *)buf = 67110402;
      v116 = v17;
      v117 = 2082;
      v118 = v18;
      v119 = 2082;
      v120 = v19;
      v121 = 1024;
      v122 = 79;
      v123 = 2114;
      v124 = v20;
      v125 = 2114;
      v126 = v4;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not load applets from storage : %{public}@ (config %{public}@)", buf, 0x36u);
    }
    goto LABEL_11;
  }
  v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("applets")));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("crsUpdateCounter")));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("seid")));
  v103 = v22;
  if (v22)
  {
    v23 = v22;
    if ((objc_msgSend(v22, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40)) & 1) != 0)
    {
      if (!v15)
        goto LABEL_52;
      v101 = v21;
      v24 = objc_opt_class(NSArray);
      if ((objc_opt_isKindOfClass(v15, v24) & 1) != 0)
      {
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v25 = v15;
        v26 = -[NSObject countByEnumeratingWithState:objects:count:](v25, "countByEnumeratingWithState:objects:count:", &v105, v112, 16);
        if (!v26)
        {
LABEL_51:

          v21 = v101;
LABEL_52:
          if (v21)
          {
            v79 = objc_opt_class(NSNumber);
            if ((objc_opt_isKindOfClass(v21, v79) & 1) != 0)
            {
              if (-[NSMutableArray count](v104, "count"))
              {
                v80 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v81 = NFLogGetLogger(v80);
                if (v81)
                {
                  v82 = (void (*)(uint64_t, const char *, ...))v81;
                  v83 = object_getClass(*(id *)(a1 + 32));
                  v84 = class_isMetaClass(v83);
                  v85 = object_getClassName(*(id *)(a1 + 32));
                  v86 = sel_getName(*(SEL *)(a1 + 56));
                  v98 = -[NSMutableArray count](v104, "count");
                  v87 = 45;
                  if (v84)
                    v87 = 43;
                  v82(6, "%c[%{public}s %{public}s]:%i Loading applets from storage into cache using counter %{public}@ : %ld applets", v87, v85, v86, 73, v21, v98);
                }
                v88 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v89 = NFSharedLogGetLogger(v88);
                v90 = objc_claimAutoreleasedReturnValue(v89);
                if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                {
                  v91 = object_getClass(*(id *)(a1 + 32));
                  if (class_isMetaClass(v91))
                    v92 = 43;
                  else
                    v92 = 45;
                  v93 = object_getClassName(*(id *)(a1 + 32));
                  v94 = sel_getName(*(SEL *)(a1 + 56));
                  v95 = -[NSMutableArray count](v104, "count");
                  *(_DWORD *)buf = 67110402;
                  v116 = v92;
                  v117 = 2082;
                  v118 = v93;
                  v119 = 2082;
                  v120 = v94;
                  v121 = 1024;
                  v122 = 73;
                  v123 = 2114;
                  v124 = v21;
                  v125 = 2048;
                  v126 = v95;
                  _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Loading applets from storage into cache using counter %{public}@ : %ld applets", buf, 0x36u);
                }

                v96 = objc_msgSend(v21, "copy");
                objc_msgSend(*(id *)(a1 + 32), "setCachedAppletUpdateCounter:", v96);

                objc_msgSend(*(id *)(a1 + 32), "setCachedAppletsUnfiltered:", v104);
                v23 = v103;
              }
            }
          }

LABEL_11:
          objc_msgSend(v2, "disconnect");
          goto LABEL_12;
        }
        v27 = v26;
        v99 = v2;
        v28 = *(_QWORD *)v106;
        do
        {
          for (i = 0; i != v27; i = (char *)i + 1)
          {
            if (*(_QWORD *)v106 != v28)
              objc_enumerationMutation(v25);
            v30 = *(_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * (_QWORD)i);
            v31 = objc_opt_class(NSDictionary);
            if ((objc_opt_isKindOfClass(v30, v31) & 1) != 0)
            {
              v32 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", v30);
              objc_msgSend(v32, "setObject:forKeyedSubscript:", &off_1003038A8, CFSTR("activationState"));
              v33 = -[NFApplet initWithDictionary:]([NFApplet alloc], "initWithDictionary:", v32);
              if (v33)
                -[NSMutableArray addObject:](v104, "addObject:", v33);

            }
          }
          v27 = -[NSObject countByEnumeratingWithState:objects:count:](v25, "countByEnumeratingWithState:objects:count:", &v105, v112, 16);
        }
        while (v27);
        v2 = v99;
      }
      else
      {
        v100 = v15;
        v57 = objc_alloc((Class)NSError);
        v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v110[0] = NSLocalizedDescriptionKey;
        v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
        v111[0] = v59;
        v111[1] = &off_1003038C0;
        v110[1] = CFSTR("Line");
        v110[2] = CFSTR("Method");
        v60 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 56)));
        v111[2] = v60;
        v110[3] = NSDebugDescriptionErrorKey;
        v61 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 56)), 69);
        v111[3] = v61;
        v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v111, v110, 4));
        v63 = objc_msgSend(v57, "initWithDomain:code:userInfo:", v58, 12, v62);
        v64 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v65 = *(void **)(v64 + 40);
        *(_QWORD *)(v64 + 40) = v63;

        v66 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v67 = NFLogGetLogger(v66);
        if (v67)
        {
          v68 = (void (*)(uint64_t, const char *, ...))v67;
          v69 = object_getClass(*(id *)(a1 + 32));
          v70 = class_isMetaClass(v69);
          v71 = object_getClassName(*(id *)(a1 + 32));
          v97 = sel_getName(*(SEL *)(a1 + 56));
          v72 = 45;
          if (v70)
            v72 = 43;
          v68(3, "%c[%{public}s %{public}s]:%i Invalid applet storage", v72, v71, v97, 70);
        }
        v73 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v74 = NFSharedLogGetLogger(v73);
        v25 = objc_claimAutoreleasedReturnValue(v74);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          v75 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v75))
            v76 = 43;
          else
            v76 = 45;
          v77 = object_getClassName(*(id *)(a1 + 32));
          v78 = sel_getName(*(SEL *)(a1 + 56));
          *(_DWORD *)buf = 67109890;
          v116 = v76;
          v117 = 2082;
          v118 = v77;
          v119 = 2082;
          v120 = v78;
          v121 = 1024;
          v122 = 70;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid applet storage", buf, 0x22u);
        }
        v15 = v100;
      }
      v23 = v103;
      goto LABEL_51;
    }
  }
  v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v35 = NFLogGetLogger(v34);
  if (v35)
  {
    v36 = (void (*)(uint64_t, const char *, ...))v35;
    v37 = object_getClass(*(id *)(a1 + 32));
    v38 = class_isMetaClass(v37);
    v39 = object_getClassName(*(id *)(a1 + 32));
    v40 = sel_getName(*(SEL *)(a1 + 56));
    v41 = 45;
    if (v38)
      v41 = 43;
    v36(6, "%c[%{public}s %{public}s]:%i SEID is not matching : %{public}@ != %{public}@", v41, v39, v40, 47, v103, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  }
  v102 = v21;
  v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v43 = NFSharedLogGetLogger(v42);
  v44 = objc_claimAutoreleasedReturnValue(v43);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    v45 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v45))
      v46 = 43;
    else
      v46 = 45;
    v47 = object_getClassName(*(id *)(a1 + 32));
    v48 = sel_getName(*(SEL *)(a1 + 56));
    v49 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    *(_DWORD *)buf = 67110402;
    v116 = v46;
    v117 = 2082;
    v118 = v47;
    v119 = 2082;
    v120 = v48;
    v121 = 1024;
    v122 = 47;
    v123 = 2114;
    v124 = v103;
    v125 = 2114;
    v126 = v49;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i SEID is not matching : %{public}@ != %{public}@", buf, 0x36u);
  }

  v50 = objc_alloc((Class)NSError);
  v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v113 = NSLocalizedDescriptionKey;
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SEID changed"));
  v114 = v52;
  v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v114, &v113, 1));
  v54 = objc_msgSend(v50, "initWithDomain:code:userInfo:", v51, 30, v53);
  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v56 = *(void **)(v55 + 40);
  *(_QWORD *)(v55 + 40) = v54;

  objc_msgSend(v2, "disconnect");
LABEL_12:

}

void sub_10022A13C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "asDictionary"));
  objc_msgSend(v2, "addObject:", v3);

}

id sub_10022A180(id a1, _QWORD *a2, int a3)
{
  id v3;
  id v4;
  BOOL v5;
  _BOOL4 v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _BOOL4 v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v32;
  const char *ClassName;
  const char *Name;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  objc_class *v40;
  int v41;
  const char *v42;
  const char *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  NSMutableArray *v47;
  void *v48;
  void (*v49)(uint64_t, const char *, ...);
  objc_class *v50;
  uint64_t v51;
  const char *v52;
  const char *v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  objc_class *v57;
  int v58;
  const char *v59;
  const char *v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  void *v66;
  void (*v67)(uint64_t, const char *, ...);
  objc_class *v68;
  uint64_t v69;
  const char *v70;
  const char *v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  objc_class *v75;
  int v76;
  const char *v77;
  const char *v78;
  id v79;
  id v80;
  id v81;
  void *v82;
  id v83;
  id v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  void *v89;
  id v90;
  id v91;
  uint64_t v92;
  void *j;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  char v99;
  NSMutableDictionary *v100;
  NSMutableArray *v101;
  void *v102;
  void *v103;
  NSMutableArray *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void (*v109)(uint64_t, const char *, ...);
  objc_class *v110;
  uint64_t v111;
  const char *v112;
  const char *v113;
  void *v114;
  uint64_t v115;
  NSObject *v116;
  objc_class *v117;
  int v118;
  const char *v119;
  const char *v120;
  void *v121;
  void *v122;
  NSMutableArray *v123;
  unsigned int v127;
  void *v128;
  void *v129;
  void *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  id v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  void **v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(uint64_t, uint64_t);
  void (*v144)(uint64_t);
  uint64_t *v145;
  const char *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t (*v150)(uint64_t, uint64_t);
  void (*v151)(uint64_t);
  NSMutableDictionary *v152;
  _QWORD v153[4];
  _QWORD v154[4];
  _BYTE v155[128];
  _QWORD v156[4];
  _QWORD v157[4];
  _QWORD v158[5];
  _QWORD v159[5];
  uint8_t buf[8];
  _BYTE v161[58];

  v3 = a1;
  if (a1)
  {
    v135 = 0;
    v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "selectCRSWithError:", &v135));
    v4 = v135;
    if (v4)
      v5 = 1;
    else
      v5 = v129 == 0;
    v128 = v4;
    if (v5)
    {
      v6 = v4 != 0;
      v7 = objc_alloc((Class)NSError);
      v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      if (v6)
      {
        v8 = objc_msgSend(v128, "code");
        v158[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)objc_msgSend(v128, "code") > 70)
          v9 = 71;
        else
          v9 = (uint64_t)objc_msgSend(v128, "code");
        v23 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v9]));
        v159[0] = v23;
        v159[1] = v128;
        v158[1] = NSUnderlyingErrorKey;
        v158[2] = CFSTR("Line");
        v159[2] = &off_1003038D8;
        v158[3] = CFSTR("Method");
        v80 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_getApplicationsFromSE:filtered:"));
        v159[3] = v80;
        v158[4] = NSDebugDescriptionErrorKey;
        v81 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_getApplicationsFromSE:filtered:"), 124);
        v159[4] = v81;
        v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v159, v158, 5));
        v3 = objc_msgSend(v7, "initWithDomain:code:userInfo:", v130, v8, v82);

      }
      else
      {
        v156[0] = NSLocalizedDescriptionKey;
        v23 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        v157[0] = v23;
        v157[1] = &off_1003038D8;
        v156[1] = CFSTR("Line");
        v156[2] = CFSTR("Method");
        v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_getApplicationsFromSE:filtered:"));
        v157[2] = v24;
        v156[3] = NSDebugDescriptionErrorKey;
        v25 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_getApplicationsFromSE:filtered:"), 124);
        v157[3] = v25;
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v157, v156, 4));
        v3 = objc_msgSend(v7, "initWithDomain:code:userInfo:", v130, 16, v26);

      }
      goto LABEL_102;
    }
    *(_QWORD *)&v136 = 0;
    *((_QWORD *)&v136 + 1) = &v136;
    *(_QWORD *)&v137 = 0x3032000000;
    *((_QWORD *)&v137 + 1) = sub_1002296F8;
    *(_QWORD *)&v138 = sub_100229708;
    *((_QWORD *)&v138 + 1) = 0;
    v140 = 0;
    v141 = (uint64_t)&v140;
    v142 = 0x3032000000;
    v143 = sub_1002296F8;
    v144 = sub_100229708;
    v145 = (uint64_t *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "serialNumber"));
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)v161 = 3221225472;
    *(_QWORD *)&v161[8] = sub_100229710;
    *(_QWORD *)&v161[16] = &unk_1002EC0E0;
    *(_QWORD *)&v161[24] = v3;
    *(_QWORD *)&v161[32] = &v136;
    *(_QWORD *)&v161[40] = &v140;
    *(_QWORD *)&v161[48] = "loadStoredApplets";
    if (qword_10032AC58 != -1)
      dispatch_once(&qword_10032AC58, buf);
    v10 = *(id *)(*((_QWORD *)&v136 + 1) + 40);
    _Block_object_dispose(&v140, 8);

    _Block_object_dispose(&v136, 8);
    v131 = 0u;
    v132 = 0u;
    v133 = 0u;
    v134 = 0u;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v129, "data"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVsWithData:](NFTLV, "TLVsWithData:", v11));

    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v131, v155, 16);
    if (v13)
    {
      v14 = *(_QWORD *)v132;
      while (2)
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(_QWORD *)v132 != v14)
            objc_enumerationMutation(v12);
          v16 = *(void **)(*((_QWORD *)&v131 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v16, "tag") == 111)
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "childWithTag:", 165));
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "childWithTag:", 254));

            if ((v18
               || (v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "childWithTag:", 165)),
                   v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "childWithTag:", 128)),
                   v19,
                   v18))
              && (v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "value")),
                  v21 = objc_msgSend(v20, "length") == (id)2,
                  v20,
                  v21))
            {
              v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "value")));
              v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", ((int)bswap32(*(unsigned __int16 *)objc_msgSend(v22, "bytes")) >> 16)));

            }
            else
            {
              v130 = 0;
            }

            goto LABEL_28;
          }
        }
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v131, v155, 16);
        if (v13)
          continue;
        break;
      }
    }
    v130 = 0;
LABEL_28:

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cachedAppletsUnfiltered"));
    v127 = 0;
    if (v27 && v130)
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cachedAppletUpdateCounter"));
      v127 = objc_msgSend(v28, "isEqualToNumber:", v130);

    }
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(v3);
      if (class_isMetaClass(Class))
        v32 = 43;
      else
        v32 = 45;
      ClassName = object_getClassName(v3);
      Name = sel_getName("_getApplicationsFromSE:filtered:");
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cachedAppletsUnfiltered"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cachedAppletUpdateCounter"));
      Logger(6, "%c[%{public}s %{public}s]:%i haveCache %d cacheCtr %{public}@ currentCtr %{public}@ useCache %d", v32, ClassName, Name, 148, v35 != 0, v36, v130, v127);

    }
    v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v38 = NFSharedLogGetLogger(v37);
    v39 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      v40 = object_getClass(v3);
      if (class_isMetaClass(v40))
        v41 = 43;
      else
        v41 = 45;
      v42 = object_getClassName(v3);
      v43 = sel_getName("_getApplicationsFromSE:filtered:");
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cachedAppletsUnfiltered"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cachedAppletUpdateCounter"));
      *(_DWORD *)buf = 67110914;
      *(_DWORD *)&buf[4] = v41;
      *(_WORD *)v161 = 2082;
      *(_QWORD *)&v161[2] = v42;
      *(_WORD *)&v161[10] = 2082;
      *(_QWORD *)&v161[12] = v43;
      *(_WORD *)&v161[20] = 1024;
      *(_DWORD *)&v161[22] = 148;
      *(_WORD *)&v161[26] = 1024;
      *(_DWORD *)&v161[28] = v44 != 0;
      *(_WORD *)&v161[32] = 2114;
      *(_QWORD *)&v161[34] = v45;
      *(_WORD *)&v161[42] = 2114;
      *(_QWORD *)&v161[44] = v130;
      *(_WORD *)&v161[52] = 1024;
      *(_DWORD *)&v161[54] = v127;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i haveCache %d cacheCtr %{public}@ currentCtr %{public}@ useCache %d", buf, 0x42u);

    }
    if (v127)
    {
      v46 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cachedAppletsUnfiltered"));
    }
    else
    {
      if ((objc_msgSend(v3, "hasMultiOS") & 1) != 0)
      {
        v47 = objc_opt_new(NSMutableArray);
        v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v49 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v48);
        if (v49)
        {
          v50 = object_getClass(v3);
          if (class_isMetaClass(v50))
            v51 = 43;
          else
            v51 = 45;
          v52 = object_getClassName(v3);
          v53 = sel_getName("_getApplicationsFromSE:filtered:");
          v49(6, "%c[%{public}s %{public}s]:%i Getting JCOP applets", v51, v52, v53, 159);
        }
        v54 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v55 = NFSharedLogGetLogger(v54);
        v56 = objc_claimAutoreleasedReturnValue(v55);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          v57 = object_getClass(v3);
          if (class_isMetaClass(v57))
            v58 = 43;
          else
            v58 = 45;
          v59 = object_getClassName(v3);
          v60 = sel_getName("_getApplicationsFromSE:filtered:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v58;
          *(_WORD *)v161 = 2082;
          *(_QWORD *)&v161[2] = v59;
          *(_WORD *)&v161[10] = 2082;
          *(_QWORD *)&v161[12] = v60;
          *(_WORD *)&v161[20] = 1024;
          *(_DWORD *)&v161[22] = 159;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Getting JCOP applets", buf, 0x22u);
        }

        v61 = sub_10022B250(v3);
        v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
        -[NSMutableArray addObjectsFromArray:](v47, "addObjectsFromArray:", v62);

        v63 = -[NSMutableArray copy](v47, "copy");
        if (!v63)
          goto LABEL_71;
        goto LABEL_55;
      }
      v83 = sub_10022B250(v3);
      v46 = objc_claimAutoreleasedReturnValue(v83);
    }
    v63 = (id)v46;
    if (!v46)
    {
LABEL_71:
      v84 = objc_alloc((Class)NSError);
      v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v153[0] = NSLocalizedDescriptionKey;
      v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v154[0] = v86;
      v154[1] = &off_1003038F0;
      v153[1] = CFSTR("Line");
      v153[2] = CFSTR("Method");
      v87 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_getApplicationsFromSE:filtered:"));
      v154[2] = v87;
      v153[3] = NSDebugDescriptionErrorKey;
      v88 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_getApplicationsFromSE:filtered:"), 167);
      v154[3] = v88;
      v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v154, v153, 4));
      v3 = objc_msgSend(v84, "initWithDomain:code:userInfo:", v85, 16, v89);

      v23 = 0;
      goto LABEL_102;
    }
LABEL_55:
    v23 = v63;
    v147 = 0;
    v148 = &v147;
    v149 = 0x3032000000;
    v150 = sub_1002296F8;
    v151 = sub_100229708;
    v152 = objc_opt_new(NSMutableDictionary);
    v140 = _NSConcreteStackBlock;
    v141 = 3221225472;
    v142 = (uint64_t)sub_10022EBB8;
    v143 = (uint64_t (*)(uint64_t, uint64_t))&unk_1002EC130;
    v145 = &v147;
    v146 = "_addInstanceACLsToApplets:";
    v144 = (void (*)(uint64_t))v3;
    v64 = sub_10017CDE0(v3, 64, (uint64_t)&unk_10026AB49, 2uLL, &v140);
    v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
    if (v65)
    {
      v66 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v67 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v66);
      if (v67)
      {
        v68 = object_getClass(v3);
        if (class_isMetaClass(v68))
          v69 = 43;
        else
          v69 = 45;
        v70 = object_getClassName(v3);
        v71 = sel_getName("_addInstanceACLsToApplets:");
        v67(3, "%c[%{public}s %{public}s]:%i Failed proprietary get status for InstaneACL", v69, v70, v71, 595);
      }
      v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v73 = NFSharedLogGetLogger(v72);
      v74 = objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        v75 = object_getClass(v3);
        if (class_isMetaClass(v75))
          v76 = 43;
        else
          v76 = 45;
        v77 = object_getClassName(v3);
        v78 = sel_getName("_addInstanceACLsToApplets:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v76;
        *(_WORD *)v161 = 2082;
        *(_QWORD *)&v161[2] = v77;
        *(_WORD *)&v161[10] = 2082;
        *(_QWORD *)&v161[12] = v78;
        *(_WORD *)&v161[20] = 1024;
        *(_DWORD *)&v161[22] = 595;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed proprietary get status for InstaneACL", buf, 0x22u);
      }

      v79 = v65;
    }
    else
    {
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      v90 = v23;
      v91 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v136, buf, 16);
      if (v91)
      {
        v92 = *(_QWORD *)v137;
        do
        {
          for (j = 0; j != v91; j = (char *)j + 1)
          {
            if (*(_QWORD *)v137 != v92)
              objc_enumerationMutation(v90);
            v94 = *(void **)(*((_QWORD *)&v136 + 1) + 8 * (_QWORD)j);
            v95 = (void *)v148[5];
            v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "identifierAsData"));
            v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "objectForKeyedSubscript:", v96));

            if (v97)
              objc_msgSend(v94, "setInstanceACL:", v97);

          }
          v91 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v136, buf, 16);
        }
        while (v91);
      }

      v79 = 0;
    }

    _Block_object_dispose(&v147, 8);
    objc_msgSend(v3, "setCachedAppletsUnfiltered:", v23);
    objc_msgSend(v3, "setCachedAppletUpdateCounter:", v130);
    v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cachedAppletUpdateCounter"));
    if (v98)
      v99 = v127;
    else
      v99 = 1;

    if ((v99 & 1) == 0)
    {
      v100 = objc_opt_new(NSMutableDictionary);
      v101 = objc_opt_new(NSMutableArray);
      v102 = (void *)objc_opt_new(NFStorageService);
      v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cachedAppletsUnfiltered"));
      *(_QWORD *)&v136 = _NSConcreteStackBlock;
      *((_QWORD *)&v136 + 1) = 3221225472;
      *(_QWORD *)&v137 = sub_10022A13C;
      *((_QWORD *)&v137 + 1) = &unk_1002EC108;
      v104 = v101;
      *(_QWORD *)&v138 = v104;
      objc_msgSend(v103, "enumerateObjectsUsingBlock:", &v136);

      v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cachedAppletUpdateCounter"));
      -[NSMutableDictionary setObject:forKey:](v100, "setObject:forKey:", v105, CFSTR("crsUpdateCounter"));

      v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "serialNumber"));
      -[NSMutableDictionary setObject:forKey:](v100, "setObject:forKey:", v106, CFSTR("seid"));

      -[NSMutableDictionary setObject:forKey:](v100, "setObject:forKey:", v104, CFSTR("applets"));
      v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "updateAppletEntitiesWithConfig:", v100));
      v108 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v109 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v108);
      if (v109)
      {
        v110 = object_getClass(v3);
        if (class_isMetaClass(v110))
          v111 = 43;
        else
          v111 = 45;
        v112 = object_getClassName(v3);
        v113 = sel_getName("storeApplets");
        v109(6, "%c[%{public}s %{public}s]:%i Storing applets from cache : %{public}@, error %{public}@", v111, v112, v113, 104, v100, v107);
      }
      v114 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v115 = NFSharedLogGetLogger(v114);
      v116 = objc_claimAutoreleasedReturnValue(v115);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
      {
        v117 = object_getClass(v3);
        if (class_isMetaClass(v117))
          v118 = 43;
        else
          v118 = 45;
        v119 = object_getClassName(v3);
        v120 = sel_getName("storeApplets");
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = v118;
        *(_WORD *)v161 = 2082;
        *(_QWORD *)&v161[2] = v119;
        *(_WORD *)&v161[10] = 2082;
        *(_QWORD *)&v161[12] = v120;
        *(_WORD *)&v161[20] = 1024;
        *(_DWORD *)&v161[22] = 104;
        *(_WORD *)&v161[26] = 2114;
        *(_QWORD *)&v161[28] = v100;
        *(_WORD *)&v161[36] = 2114;
        *(_QWORD *)&v161[38] = v107;
        _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Storing applets from cache : %{public}@, error %{public}@", buf, 0x36u);
      }

      objc_msgSend(v102, "disconnect");
    }
    if (a2)
    {
      v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cachedAppletsUnfiltered"));
      v122 = v121;
      if (!a3)
      {
        v3 = 0;
        *a2 = v121;
        goto LABEL_102;
      }
      v123 = sub_10022B360((uint64_t)v3, v121);
      *a2 = (id)objc_claimAutoreleasedReturnValue(v123);

    }
    v3 = 0;
LABEL_102:

  }
  return v3;
}

void sub_10022B208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

id sub_10022B250(void *a1)
{
  NSMutableData *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  NSMutableArray *v8;
  void *v9;

  v2 = objc_opt_new(NSMutableData);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 79, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "asData"));
  -[NSMutableData appendData:](v2, "appendData:", v4);

  v5 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &unk_10026AAB0, 10);
  if ((objc_msgSend(a1, "supportedTechnologies") & 4) != 0)
    objc_msgSend(v5, "appendBytes:length:", &unk_10026AABA, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 92, v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "asData"));
  -[NSMutableData appendData:](v2, "appendData:", v7);

  v8 = sub_1000B3E38(a1, v2, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  return v9;
}

NSMutableArray *sub_10022B360(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  unsigned __int8 v24;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  NSMutableArray *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _QWORD v37[13];

  v29 = a2;
  if (a1)
  {
    v30 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AABB, 14);
    v37[0] = v30;
    v28 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AAC9, 12);
    v37[1] = v28;
    v27 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AAD5, 7);
    v37[2] = v27;
    v26 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AADC, 7);
    v37[3] = v26;
    v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AAE3, 9);
    v37[4] = v3;
    v4 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AAEC, 8);
    v37[5] = v4;
    v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AAF4, 12);
    v37[6] = v5;
    v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB00, 12);
    v37[7] = v6;
    v7 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB0C, 10);
    v37[8] = v7;
    v8 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB16, 14);
    v37[9] = v8;
    v9 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB24, 10);
    v37[10] = v9;
    v10 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB2E, 10);
    v37[11] = v10;
    v11 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB38, 9);
    v37[12] = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v37, 13));

    v31 = objc_opt_new(NSMutableArray);
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v13 = v29;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v33 != v16)
            objc_enumerationMutation(v13);
          v18 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifierAsData"));
          v20 = objc_msgSend(v12, "containsObject:", v19);

          if ((v20 & 1) == 0
            && objc_msgSend(v18, "lifecycleState") != 129
            && (objc_msgSend(v18, "isContainer") & 1) == 0
            && (objc_msgSend(v18, "isProxy") & 1) == 0)
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
            v22 = objc_msgSend(v21, "hasPrefix:", CFSTR("A00000085881"));

            if ((v22 & 1) == 0)
            {
              v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
              v24 = objc_msgSend(v23, "hasPrefix:", CFSTR("A000000704E0000100"));

              if ((v24 & 1) == 0)
                -[NSMutableArray addObject:](v31, "addObject:", v18);
            }
          }
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      }
      while (v15);
    }

  }
  else
  {
    v31 = 0;
  }

  return v31;
}

void sub_10022B744(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  void *i;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  _QWORD v21[2];
  _BYTE v22[128];

  if (a1)
  {
    v1 = sub_10022B938(a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = 0;
      v7 = *(_QWORD *)v17;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v17 != v7)
            objc_enumerationMutation(v2);
          v9 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v9, "lifecycleState") == 15)
          {
            v6 = (v6 + 1);
            v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
            v11 = (void *)v10;
            if (v5)
            {
              v12 = objc_claimAutoreleasedReturnValue(-[__CFString stringByAppendingFormat:](v5, "stringByAppendingFormat:", CFSTR("%@%@"), CFSTR("_"), v10));

              v5 = (__CFString *)v12;
            }
            else
            {
              v5 = (__CFString *)v10;
            }
          }
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v20[0] = CFSTR("totalCardProvisioned");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6));
    v20[1] = CFSTR("currentProvisionedCards");
    v21[0] = v13;
    v14 = &stru_1002ED8A8;
    if (v5)
      v14 = v5;
    v21[1] = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 2));
    +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:](NFGeneralStatisticsCALogger, "updateGeneralDeviceStatistic:", v15);

  }
}

id sub_10022B938(id a1)
{
  id v1;
  void *v2;
  void *v3;
  NSMutableArray *v4;

  v1 = a1;
  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "cachedAppletsUnfiltered"));
    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "cachedAppletsUnfiltered"));
      v4 = sub_10022B360((uint64_t)v1, v3);
      v1 = (id)objc_claimAutoreleasedReturnValue(v4);

    }
    else
    {
      v1 = 0;
    }

  }
  return v1;
}

id sub_10022B9AC(void *a1, void *a2, unsigned int a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *specific;
  uint64_t Logger;
  const __CFString *v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *Class;
  const char *Name;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  const __CFString *v34;
  int v35;
  const char *v36;
  const char *v37;
  void *v38;
  id v39;
  _BOOL4 isMetaClass;
  const char *ClassName;
  id v43;
  _QWORD v44[4];
  _QWORD v45[4];
  uint8_t buf[4];
  int v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  const __CFString *v55;
  __int16 v56;
  void *v57;
  _QWORD v58[5];
  _QWORD v59[5];

  v7 = a2;
  v43 = 0;
  v8 = objc_msgSend(a1, "selectCRSWithError:", &v43);
  v9 = v43;
  if (v9)
  {
    v10 = objc_alloc((Class)NSError);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v12 = objc_msgSend(v9, "code");
    v58[0] = NSLocalizedDescriptionKey;
    if ((uint64_t)objc_msgSend(v9, "code") > 70)
      v13 = 71;
    else
      v13 = (uint64_t)objc_msgSend(v9, "code");
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v13]));
    v59[0] = v15;
    v59[1] = v9;
    v58[1] = NSUnderlyingErrorKey;
    v58[2] = CFSTR("Line");
    v59[2] = &off_100303908;
    v58[3] = CFSTR("Method");
    v16 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setApplications:asSelectable:groupActivationStyle:"));
    v59[3] = v16;
    v58[4] = NSDebugDescriptionErrorKey;
    v17 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setApplications:asSelectable:groupActivationStyle:"), 297);
    v59[4] = v17;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v59, v58, 5));
    v19 = v10;
    v20 = v11;
    v21 = (uint64_t)v12;
LABEL_22:
    v14 = objc_msgSend(v19, "initWithDomain:code:userInfo:", v20, v21, v18);

    goto LABEL_23;
  }
  if ((sub_1000B5768(a1, v7, a3, a4) & 1) == 0)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    v24 = CFSTR("enable");
    if (Logger)
    {
      v25 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("setApplications:asSelectable:groupActivationStyle:");
      if (!a3)
        v24 = CFSTR("disable");
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NFApplet aidListForPrinting:](NFApplet, "aidListForPrinting:", v7));
      v29 = 45;
      if (isMetaClass)
        v29 = 43;
      v25(3, "%c[%{public}s %{public}s]:%i Failed to %{public}@ applications: %{public}@", v29, ClassName, Name, 301, v24, v28);

    }
    v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v31 = NFSharedLogGetLogger(v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = object_getClass(a1);
      v34 = CFSTR("enable");
      if (class_isMetaClass(v33))
        v35 = 43;
      else
        v35 = 45;
      v36 = object_getClassName(a1);
      v37 = sel_getName("setApplications:asSelectable:groupActivationStyle:");
      if (!a3)
        v34 = CFSTR("disable");
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NFApplet aidListForPrinting:](NFApplet, "aidListForPrinting:", v7));
      *(_DWORD *)buf = 67110402;
      v47 = v35;
      v48 = 2082;
      v49 = v36;
      v50 = 2082;
      v51 = v37;
      v52 = 1024;
      v53 = 301;
      v54 = 2114;
      v55 = v34;
      v56 = 2114;
      v57 = v38;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to %{public}@ applications: %{public}@", buf, 0x36u);

    }
    v39 = objc_alloc((Class)NSError);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v44[0] = NSLocalizedDescriptionKey;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v45[0] = v15;
    v45[1] = &off_100303920;
    v44[1] = CFSTR("Line");
    v44[2] = CFSTR("Method");
    v16 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setApplications:asSelectable:groupActivationStyle:"));
    v45[2] = v16;
    v44[3] = NSDebugDescriptionErrorKey;
    v17 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setApplications:asSelectable:groupActivationStyle:"), 302);
    v45[3] = v17;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v45, v44, 4));
    v19 = v39;
    v20 = v11;
    v21 = 16;
    goto LABEL_22;
  }
  v14 = 0;
LABEL_23:

  return v14;
}

id sub_10022BED0(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = sub_10022A180(a1, 0, 1);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }
  return a1;
}

id sub_10022BEF4(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *v10;
  _BOOL4 v11;
  const char *v12;
  const char *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  BOOL v20;
  void *v21;
  int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  char *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  void *i;
  void *v35;
  void *specific;
  uint64_t Logger;
  void (*v38)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  objc_class *v48;
  int v49;
  const char *v50;
  const char *v51;
  __CFString *v52;
  id v53;
  id v54;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  const char *v61;
  const char *v62;
  char *v63;
  id v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  id v70;
  NSErrorUserInfoKey v71;
  void *v72;
  uint8_t buf[4];
  int v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  const char *v78;
  __int16 v79;
  int v80;
  __int16 v81;
  const __CFString *v82;
  __int16 v83;
  int v84;
  __int16 v85;
  char *v86;
  _BYTE v87[128];

  if (!a1)
    return 0;
  v2 = a1;
  v3 = sub_1001E2744(a1, a2);
  v65 = v2;
  if (!(_DWORD)v3)
  {
    v70 = 0;
    v27 = sub_10022C46C(v2, &v70);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    v29 = v70;

    if (!v28)
    {
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = v29;
      v30 = v29;
      v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v66, v87, 16);
      if (v31)
      {
        v32 = v31;
        v33 = *(_QWORD *)v67;
        do
        {
          for (i = 0; i != v32; i = (char *)i + 1)
          {
            if (*(_QWORD *)v67 != v33)
              objc_enumerationMutation(v30);
            v35 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v35, "isGPLocked") && (sub_1000B64E8((uint64_t)v2, v35) & 1) == 0)
            {
              specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              Logger = NFLogGetLogger(specific);
              if (Logger)
              {
                v38 = (void (*)(uint64_t, const char *, ...))Logger;
                Class = object_getClass(v2);
                isMetaClass = class_isMetaClass(Class);
                ClassName = object_getClassName(v2);
                Name = sel_getName("deleteAllApplets:");
                v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "identifier"));
                v62 = ClassName;
                v44 = 45;
                if (isMetaClass)
                  v44 = 43;
                v2 = v65;
                v38(3, "%c[%{public}s %{public}s]:%i Failed to mark %{public}@ for MFF", v44, v62, Name, 344, v43);

              }
              v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v46 = NFSharedLogGetLogger(v45);
              v47 = objc_claimAutoreleasedReturnValue(v46);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              {
                v48 = object_getClass(v2);
                if (class_isMetaClass(v48))
                  v49 = 43;
                else
                  v49 = 45;
                v50 = object_getClassName(v2);
                v51 = sel_getName("deleteAllApplets:");
                v52 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "identifier"));
                *(_DWORD *)buf = 67110146;
                v74 = v49;
                v75 = 2082;
                v76 = v50;
                v77 = 2082;
                v78 = v51;
                v2 = v65;
                v79 = 1024;
                v80 = 344;
                v81 = 2114;
                v82 = v52;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to mark %{public}@ for MFF", buf, 0x2Cu);

              }
            }
          }
          v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v66, v87, 16);
        }
        while (v32);
      }

      v29 = v64;
    }

    v53 = sub_10022BED0(v2);
    v54 = objc_msgSend(v2, "refreshISDCounter");
    objc_msgSend(v2, "setActiveApplet:", 0);
    +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:](NFGeneralStatisticsCALogger, "updateGeneralDeviceStatistic:", &off_100306D80);
    return 0;
  }
  v4 = v3;
  v5 = sub_10022BED0(v2);
  v6 = objc_msgSend(v2, "refreshISDCounter");
  objc_msgSend(v2, "setActiveApplet:", 0);
  v7 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v8 = NFLogGetLogger(v7);
  if (v8)
  {
    v9 = (void (*)(uint64_t, const char *, ...))v8;
    v10 = object_getClass(v2);
    v11 = class_isMetaClass(v10);
    v12 = object_getClassName(v2);
    v13 = sel_getName("deleteAllApplets:");
    if (v4 >= 0x47)
      v14 = 71;
    else
      v14 = v4;
    v63 = off_1002EBE98[v14];
    v61 = v12;
    v15 = 43;
    if (!v11)
      v15 = 45;
    v2 = v65;
    v9(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v15, v61, v13, 357, CFSTR("Returned"), v4, v63);
  }
  v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v17 = NFSharedLogGetLogger(v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    v19 = object_getClass(v2);
    v20 = !class_isMetaClass(v19);
    v21 = v2;
    if (v20)
      v22 = 45;
    else
      v22 = 43;
    v23 = object_getClassName(v21);
    v24 = sel_getName("deleteAllApplets:");
    if (v4 >= 0x47)
      v25 = 71;
    else
      v25 = v4;
    v26 = off_1002EBE98[v25];
    *(_DWORD *)buf = 67110658;
    v74 = v22;
    v75 = 2082;
    v76 = v23;
    v77 = 2082;
    v78 = v24;
    v79 = 1024;
    v80 = 357;
    v81 = 2112;
    v82 = CFSTR("Returned");
    v83 = 1024;
    v84 = v4;
    v85 = 2080;
    v86 = v26;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", buf, 0x3Cu);
  }
  else if (v4 >= 0x47)
  {
    v25 = 71;
  }
  else
  {
    v25 = v4;
  }

  v56 = objc_alloc((Class)NSError);
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v71 = NSLocalizedDescriptionKey;
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v25]));
  v72 = v58;
  v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v72, &v71, 1));
  v60 = objc_msgSend(v56, "initWithDomain:code:userInfo:", v57, v4, v59);

  return v60;
}

id sub_10022C46C(void *a1, _QWORD *a2)
{
  id v4;
  void *v5;
  id v6;
  id v8;
  uint64_t v9;
  void *v10;
  void *specific;
  uint64_t Logger;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  const char *ClassName;
  const char *Name;
  _QWORD v33[5];
  _QWORD v34[5];
  uint8_t buf[4];
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  void *v44;

  if (!a1)
    return 0;
  v4 = sub_10022B938(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  if (v5 || (v8 = sub_10022A180(a1, a2, 1), (v9 = objc_claimAutoreleasedReturnValue(v8)) == 0))
  {
    if (a2)
    {
      v6 = sub_10022B938(a1);
      *a2 = (id)objc_claimAutoreleasedReturnValue(v6);
      return 0;
    }
    return 0;
  }
  v10 = (void *)v9;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v13 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("getApplets:");
    v16 = 45;
    if (isMetaClass)
      v16 = 43;
    v13(3, "%c[%{public}s %{public}s]:%i Failed to get applications : %@", v16, ClassName, Name, 516, v10);
  }
  v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v18 = NFSharedLogGetLogger(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    v20 = object_getClass(a1);
    if (class_isMetaClass(v20))
      v21 = 43;
    else
      v21 = 45;
    *(_DWORD *)buf = 67110146;
    v36 = v21;
    v37 = 2082;
    v38 = object_getClassName(a1);
    v39 = 2082;
    v40 = sel_getName("getApplets:");
    v41 = 1024;
    v42 = 516;
    v43 = 2112;
    v44 = v10;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get applications : %@", buf, 0x2Cu);
  }

  v22 = objc_alloc((Class)NSError);
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v24 = objc_msgSend(v10, "code");
  v33[0] = NSLocalizedDescriptionKey;
  if ((uint64_t)objc_msgSend(v10, "code") > 70)
    v25 = 71;
  else
    v25 = (uint64_t)objc_msgSend(v10, "code");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v25]));
  v34[0] = v26;
  v34[1] = v10;
  v33[1] = NSUnderlyingErrorKey;
  v33[2] = CFSTR("Line");
  v34[2] = &off_100303A10;
  v33[3] = CFSTR("Method");
  v27 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getApplets:"));
  v34[3] = v27;
  v33[4] = NSDebugDescriptionErrorKey;
  v28 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getApplets:"), 517);
  v34[4] = v28;
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v34, v33, 5));
  v30 = objc_msgSend(v22, "initWithDomain:code:userInfo:", v23, v24, v29);

  return v30;
}

id sub_10022C7F0(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *specific;
  uint64_t Logger;
  void (*v19)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  const char *Name;
  _QWORD v39[5];
  _QWORD v40[5];
  void *v41;
  NSErrorUserInfoKey v42;
  void *v43;
  uint8_t buf[4];
  _BYTE v45[14];
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;

  v3 = a2;
  v4 = v3;
  if (!a1)
  {
    v31 = 0;
    goto LABEL_23;
  }
  if (!v3)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v19 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("activateApplet:");
      v23 = 45;
      if (isMetaClass)
        v23 = 43;
      v19(3, "%c[%{public}s %{public}s]:%i Missing applet parameter", v23, ClassName, Name, 372);
    }
    v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v25 = NFSharedLogGetLogger(v24);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = object_getClass(a1);
      if (class_isMetaClass(v27))
        v28 = 43;
      else
        v28 = 45;
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)v45 = v28;
      *(_WORD *)&v45[4] = 2082;
      *(_QWORD *)&v45[6] = object_getClassName(a1);
      v46 = 2082;
      v47 = sel_getName("activateApplet:");
      v48 = 1024;
      v49 = 372;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing applet parameter", buf, 0x22u);
    }

    v29 = objc_alloc((Class)NSError);
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v42 = NSLocalizedDescriptionKey;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Missing Parameter"));
    v43 = v14;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
    v31 = objc_msgSend(v29, "initWithDomain:code:userInfo:", v10, 9, v30);

    goto LABEL_21;
  }
  v5 = NFSharedSignpostLog(v3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_signpost_enabled(v6))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v45 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ACTIVATE_APPLET", "Activate applet %@", buf, 0xCu);

  }
  v41 = v4;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v41, 1));
  v9 = sub_10022B9AC(a1, v8, 1u, (uint64_t)objc_msgSend(v4, "groupActivationStyle"));
  v10 = (id)objc_claimAutoreleasedReturnValue(v9);

  if (v10)
  {
    v11 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB41, 8);
    v12 = objc_msgSend(a1, "selectByName:error:", v11, 0);

    v13 = objc_alloc((Class)NSError);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v15 = objc_msgSend(v10, "code");
    v39[0] = NSLocalizedDescriptionKey;
    if ((uint64_t)objc_msgSend(v10, "code") > 70)
      v16 = 71;
    else
      v16 = (uint64_t)objc_msgSend(v10, "code");
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v16]));
    v40[0] = v33;
    v40[1] = v10;
    v39[1] = NSUnderlyingErrorKey;
    v39[2] = CFSTR("Line");
    v40[2] = &off_100303980;
    v39[3] = CFSTR("Method");
    v34 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateApplet:"));
    v40[3] = v34;
    v39[4] = NSDebugDescriptionErrorKey;
    v35 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateApplet:"), 389);
    v40[4] = v35;
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v40, v39, 5));
    v31 = objc_msgSend(v13, "initWithDomain:code:userInfo:", v14, v15, v36);

LABEL_21:
    goto LABEL_22;
  }
  objc_msgSend(a1, "setActiveApplet:", v4);
  v10 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB41, 8);
  v32 = objc_msgSend(a1, "selectByName:error:", v10, 0);
  v31 = 0;
LABEL_22:

LABEL_23:
  return v31;
}

id sub_10022CD00(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  void (*v17)(uint64_t, const char *, ...);
  objc_class *v18;
  _BOOL4 v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  const char *v27;
  const char *v28;
  void *specific;
  uint64_t Logger;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  void (*v46)(uint64_t, const char *, ...);
  objc_class *v47;
  _BOOL4 v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  NSObject *v53;
  objc_class *v54;
  int v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  void *v63;
  const char *ClassName;
  const char *v66;
  const char *Name;
  const char *v68;
  id v69;
  void *v70;
  _QWORD v71[5];
  _QWORD v72[5];
  uint8_t buf[4];
  _BYTE v74[24];
  __int16 v75;
  int v76;
  __int16 v77;
  void *v78;
  __int16 v79;
  id v80;
  _QWORD v81[4];
  _QWORD v82[4];
  _QWORD v83[4];
  _QWORD v84[4];

  v3 = a2;
  v4 = v3;
  if (!a1)
  {
    v43 = 0;
    goto LABEL_48;
  }
  if (!v3 || objc_msgSend(v3, "count") != (id)2)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v31 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("activateApplets:");
      v34 = 45;
      if (isMetaClass)
        v34 = 43;
      v31(3, "%c[%{public}s %{public}s]:%i Missing or invalid applets parameter %@", v34, ClassName, Name, 396, v4);
    }
    v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v36 = NFSharedLogGetLogger(v35);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v38 = object_getClass(a1);
      if (class_isMetaClass(v38))
        v39 = 43;
      else
        v39 = 45;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)v74 = v39;
      *(_WORD *)&v74[4] = 2082;
      *(_QWORD *)&v74[6] = object_getClassName(a1);
      *(_WORD *)&v74[14] = 2082;
      *(_QWORD *)&v74[16] = sel_getName("activateApplets:");
      v75 = 1024;
      v76 = 396;
      v77 = 2112;
      v78 = v4;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing or invalid applets parameter %@", buf, 0x2Cu);
    }

    v40 = objc_alloc((Class)NSError);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v83[0] = NSLocalizedDescriptionKey;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Missing Parameter"));
    v84[0] = v6;
    v84[1] = &off_100303998;
    v83[1] = CFSTR("Line");
    v83[2] = CFSTR("Method");
    v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateApplets:"));
    v84[2] = v14;
    v83[3] = NSDebugDescriptionErrorKey;
    v41 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateApplets:"), 397);
    v84[3] = v41;
    v42 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v84, v83, 4));
    v43 = objc_msgSend(v40, "initWithDomain:code:userInfo:", v5, 9, v42);
    goto LABEL_46;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
  v7 = objc_msgSend(v5, "groupActivationStyle");
  v8 = objc_msgSend(v6, "groupActivationStyle");
  if (v7 != (_DWORD)v8)
  {
    v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v45 = NFLogGetLogger(v44);
    if (v45)
    {
      v46 = (void (*)(uint64_t, const char *, ...))v45;
      v47 = object_getClass(a1);
      v48 = class_isMetaClass(v47);
      v49 = object_getClassName(a1);
      v68 = sel_getName("activateApplets:");
      v50 = 45;
      if (v48)
        v50 = 43;
      v46(3, "%c[%{public}s %{public}s]:%i Mismatch activation styles on both the applets.", v50, v49, v68, 406);
    }
    v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v52 = NFSharedLogGetLogger(v51);
    v53 = objc_claimAutoreleasedReturnValue(v52);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      v54 = object_getClass(a1);
      if (class_isMetaClass(v54))
        v55 = 43;
      else
        v55 = 45;
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)v74 = v55;
      *(_WORD *)&v74[4] = 2082;
      *(_QWORD *)&v74[6] = object_getClassName(a1);
      *(_WORD *)&v74[14] = 2082;
      *(_QWORD *)&v74[16] = sel_getName("activateApplets:");
      v75 = 1024;
      v76 = 406;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Mismatch activation styles on both the applets.", buf, 0x22u);
    }

    v56 = objc_alloc((Class)NSError);
    v14 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v81[0] = NSLocalizedDescriptionKey;
    v41 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v82[0] = v41;
    v82[1] = &off_1003039B0;
    v81[1] = CFSTR("Line");
    v81[2] = CFSTR("Method");
    v42 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateApplets:"));
    v82[2] = v42;
    v81[3] = NSDebugDescriptionErrorKey;
    v57 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateApplets:"), 407);
    v82[3] = v57;
    v58 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v82, v81, 4));
    v43 = objc_msgSend(v56, "initWithDomain:code:userInfo:", v14, 10, v58);
    goto LABEL_45;
  }
  v9 = NFSharedSignpostLog(v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_signpost_enabled(v10))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)v74 = v11;
    *(_WORD *)&v74[8] = 2112;
    *(_QWORD *)&v74[10] = v12;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ACTIVATE_APPLET", "Activate primary applet %@ and secondary applet %@", buf, 0x16u);

  }
  v13 = sub_10022B9AC(a1, v4, 1u, (uint64_t)objc_msgSend(v5, "groupActivationStyle"));
  v14 = (id)objc_claimAutoreleasedReturnValue(v13);
  if (v14)
  {
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFLogGetLogger(v15);
    if (v16)
    {
      v17 = (void (*)(uint64_t, const char *, ...))v16;
      v18 = object_getClass(a1);
      v19 = class_isMetaClass(v18);
      v20 = object_getClassName(a1);
      v66 = sel_getName("activateApplets:");
      v21 = 45;
      if (v19)
        v21 = 43;
      v17(3, "%c[%{public}s %{public}s]:%i Unable to activate applets %@. Error %@", v21, v20, v66, 419, v4, v14);
    }
    v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v23 = NFSharedLogGetLogger(v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = object_getClass(a1);
      if (class_isMetaClass(v25))
        v26 = 43;
      else
        v26 = 45;
      v27 = object_getClassName(a1);
      v28 = sel_getName("activateApplets:");
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)v74 = v26;
      *(_WORD *)&v74[4] = 2082;
      *(_QWORD *)&v74[6] = v27;
      *(_WORD *)&v74[14] = 2082;
      *(_QWORD *)&v74[16] = v28;
      v75 = 1024;
      v76 = 419;
      v77 = 2112;
      v78 = v4;
      v79 = 2112;
      v80 = v14;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unable to activate applets %@. Error %@", buf, 0x36u);
    }

  }
  else
  {
    objc_msgSend(a1, "setActiveApplet:", v5);
  }
  v59 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB41, 8);
  v60 = objc_msgSend(a1, "selectByName:error:", v59, 0);

  if (v14)
  {
    v61 = objc_alloc((Class)NSError);
    v41 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v71[0] = NSLocalizedDescriptionKey;
    v69 = objc_msgSend(v14, "code");
    v70 = v61;
    if ((uint64_t)objc_msgSend(v14, "code") > 70)
      v62 = 71;
    else
      v62 = (uint64_t)objc_msgSend(v14, "code");
    v42 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v62]));
    v72[0] = v42;
    v72[1] = v14;
    v71[1] = NSUnderlyingErrorKey;
    v71[2] = CFSTR("Line");
    v72[2] = &off_1003039C8;
    v71[3] = CFSTR("Method");
    v57 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateApplets:"));
    v72[3] = v57;
    v71[4] = NSDebugDescriptionErrorKey;
    v58 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateApplets:"), 424);
    v72[4] = v58;
    v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v72, v71, 5));
    v43 = objc_msgSend(v70, "initWithDomain:code:userInfo:", v41, v69, v63);

LABEL_45:
LABEL_46:

    goto LABEL_47;
  }
  v43 = 0;
LABEL_47:

LABEL_48:
  return v43;
}

id sub_10022D638(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *v26;
  _BOOL4 v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  void (*v42)(uint64_t, const char *, ...);
  objc_class *v43;
  _BOOL4 v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  objc_class *v50;
  int v51;
  void *v52;
  unsigned int v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  const char *ClassName;
  const char *Name;
  const char *v61;
  const char *v62;
  _QWORD v63[5];
  _QWORD v64[5];
  uint8_t buf[4];
  int v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  void *v74;
  NSErrorUserInfoKey v75;
  void *v76;

  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_36;
  if (v3)
  {
    if (objc_msgSend(v3, "count"))
    {
      v5 = sub_10022B9AC(a1, v4, 0, 0);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (v6)
      {
        v7 = (void *)v6;
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v10 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("deselectApplets:");
          v13 = 45;
          if (isMetaClass)
            v13 = 43;
          v10(3, "%c[%{public}s %{public}s]:%i Error in setApplications: %@", v13, ClassName, Name, 443, v7);
        }
        v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v15 = NFSharedLogGetLogger(v14);
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v17 = object_getClass(a1);
          if (class_isMetaClass(v17))
            v18 = 43;
          else
            v18 = 45;
          *(_DWORD *)buf = 67110146;
          v66 = v18;
          v67 = 2082;
          v68 = object_getClassName(a1);
          v69 = 2082;
          v70 = sel_getName("deselectApplets:");
          v71 = 1024;
          v72 = 443;
          v73 = 2112;
          v74 = v7;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error in setApplications: %@", buf, 0x2Cu);
        }

        v19 = objc_alloc((Class)NSError);
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v21 = objc_msgSend(v7, "code");
        v63[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)objc_msgSend(v7, "code") > 70)
          v22 = 71;
        else
          v22 = (uint64_t)objc_msgSend(v7, "code");
        v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v22]));
        v64[0] = v54;
        v64[1] = v7;
        v63[1] = NSUnderlyingErrorKey;
        v63[2] = CFSTR("Line");
        v64[2] = &off_1003039E0;
        v63[3] = CFSTR("Method");
        v55 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("deselectApplets:"));
        v64[3] = v55;
        v63[4] = NSDebugDescriptionErrorKey;
        v56 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("deselectApplets:"), 444);
        v64[4] = v56;
        v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v64, v63, 5));
        v39 = objc_msgSend(v19, "initWithDomain:code:userInfo:", v20, v21, v57);

        goto LABEL_42;
      }
      v39 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "activeApplet"));
      if (!v39)
        goto LABEL_42;
      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "activeApplet"));
      v53 = objc_msgSend(v4, "containsObject:", v52);

      if (v53)
        objc_msgSend(a1, "setActiveApplet:", 0);
    }
    else
    {
      v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v41 = NFLogGetLogger(v40);
      if (v41)
      {
        v42 = (void (*)(uint64_t, const char *, ...))v41;
        v43 = object_getClass(a1);
        v44 = class_isMetaClass(v43);
        v45 = object_getClassName(a1);
        v62 = sel_getName("deselectApplets:");
        v46 = 45;
        if (v44)
          v46 = 43;
        v42(6, "%c[%{public}s %{public}s]:%i Empty array", v46, v45, v62, 437);
      }
      v47 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v48 = NFSharedLogGetLogger(v47);
      v49 = objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        v50 = object_getClass(a1);
        if (class_isMetaClass(v50))
          v51 = 43;
        else
          v51 = 45;
        *(_DWORD *)buf = 67109890;
        v66 = v51;
        v67 = 2082;
        v68 = object_getClassName(a1);
        v69 = 2082;
        v70 = sel_getName("deselectApplets:");
        v71 = 1024;
        v72 = 437;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Empty array", buf, 0x22u);
      }

    }
LABEL_36:
    v39 = 0;
    goto LABEL_42;
  }
  v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v24 = NFLogGetLogger(v23);
  if (v24)
  {
    v25 = (void (*)(uint64_t, const char *, ...))v24;
    v26 = object_getClass(a1);
    v27 = class_isMetaClass(v26);
    v28 = object_getClassName(a1);
    v61 = sel_getName("deselectApplets:");
    v29 = 45;
    if (v27)
      v29 = 43;
    v25(3, "%c[%{public}s %{public}s]:%i Missing applets parameter", v29, v28, v61, 433);
  }
  v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v31 = NFSharedLogGetLogger(v30);
  v32 = objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    v33 = object_getClass(a1);
    if (class_isMetaClass(v33))
      v34 = 43;
    else
      v34 = 45;
    *(_DWORD *)buf = 67109890;
    v66 = v34;
    v67 = 2082;
    v68 = object_getClassName(a1);
    v69 = 2082;
    v70 = sel_getName("deselectApplets:");
    v71 = 1024;
    v72 = 433;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing applets parameter", buf, 0x22u);
  }

  v35 = objc_alloc((Class)NSError);
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v75 = NSLocalizedDescriptionKey;
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Missing Parameter"));
  v76 = v37;
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v76, &v75, 1));
  v39 = objc_msgSend(v35, "initWithDomain:code:userInfo:", v36, 9, v38);

LABEL_42:
  return v39;
}

id sub_10022DCC4(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v13;
  uint8_t buf[8];
  NSErrorUserInfoKey v15;
  void *v16;

  if (!a1)
    return 0;
  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "DEACTIVATE_ALL", "deactivate all applets on eSE", buf, 2u);
  }

  v13 = 0;
  v4 = objc_msgSend(a1, "selectCRSWithError:", &v13);
  v5 = v13;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    if ((sub_1000B531C(a1) & 1) != 0)
      goto LABEL_8;
    v8 = objc_alloc((Class)NSError);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v15 = NSLocalizedDescriptionKey;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v16 = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
    v7 = objc_msgSend(v8, "initWithDomain:code:userInfo:", v9, 16, v11);

    if (!v7)
    {
LABEL_8:
      objc_msgSend(a1, "setActiveApplet:", 0);
      v7 = 0;
    }
  }

  return v7;
}

id sub_10022DE7C(void *a1)
{
  void *v1;
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  void *v33;

  if (a1)
  {
    v1 = a1;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v1);
      Name = sel_getName("deselectAllIfNeeded");
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "activeApplet"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
      v11 = 45;
      if (isMetaClass)
        v11 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i eSE: activeApplet:%{public}@", v11, ClassName, Name, 479, v10);

    }
    v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v13 = NFSharedLogGetLogger(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = object_getClass(v1);
      if (class_isMetaClass(v15))
        v16 = 43;
      else
        v16 = 45;
      v17 = object_getClassName(v1);
      v18 = sel_getName("deselectAllIfNeeded");
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "activeApplet"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "identifier"));
      *(_DWORD *)buf = 67110146;
      v25 = v16;
      v26 = 2082;
      v27 = v17;
      v28 = 2082;
      v29 = v18;
      v30 = 1024;
      v31 = 479;
      v32 = 2114;
      v33 = v20;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i eSE: activeApplet:%{public}@", buf, 0x2Cu);

    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "activeApplet"));

    if (v21)
    {
      v22 = sub_10022DCC4(v1);
      a1 = (void *)objc_claimAutoreleasedReturnValue(v22);
    }
    else
    {
      a1 = 0;
    }
  }
  return a1;
}

id sub_10022E09C(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t, const char *, ...);
  objc_class *v16;
  _BOOL4 v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *specific;
  uint64_t Logger;
  void (*v38)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  objc_class *v48;
  int v49;
  const char *v50;
  const char *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  uint64_t v68;
  void (*v69)(uint64_t, const char *, ...);
  objc_class *v70;
  _BOOL4 v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  NSObject *v75;
  objc_class *v76;
  int v77;
  const char *v78;
  const char *v79;
  id v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  unsigned int v88;
  void *v89;
  id v90;
  id v91;
  void *v92;
  const char *v94;
  const char *v95;
  const char *v96;
  const char *v97;
  void *v98;
  void *v99;
  id v100;
  id obj;
  id v102;
  id v103;
  _QWORD v104[5];
  _QWORD v105[5];
  NSErrorUserInfoKey v106;
  void *v107;
  _QWORD v108[4];
  _QWORD v109[4];
  uint8_t v110[4];
  int v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  int v117;
  __int16 v118;
  void *v119;
  uint8_t buf[8];
  _BYTE v121[36];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;

  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_56;
  v102 = a1;
  if (v3 && objc_msgSend(v3, "count"))
  {
    v5 = v4;
    v103 = 0;
    v6 = objc_msgSend(a1, "selectCRSWithError:", &v103);
    v7 = v103;
    v98 = v5;
    v99 = v4;
    if (v7)
    {
      v8 = v7;
      v9 = objc_alloc((Class)NSError);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v11 = objc_msgSend(v8, "code");
      *(_QWORD *)&v122 = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v8, "code") > 70)
        v12 = 71;
      else
        v12 = (uint64_t)objc_msgSend(v8, "code");
      v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v12]));
      *(_QWORD *)buf = v60;
      *(_QWORD *)v121 = v8;
      *((_QWORD *)&v122 + 1) = NSUnderlyingErrorKey;
      *(_QWORD *)&v123 = CFSTR("Line");
      *(_QWORD *)&v121[8] = &off_100303938;
      *((_QWORD *)&v123 + 1) = CFSTR("Method");
      v61 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_markApplicationsForDelete:"));
      *(_QWORD *)&v121[16] = v61;
      *(_QWORD *)&v124 = NSDebugDescriptionErrorKey;
      v62 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_markApplicationsForDelete:"), 315);
      *(_QWORD *)&v121[24] = v62;
      v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v122, 5));
      v64 = objc_msgSend(v9, "initWithDomain:code:userInfo:", v10, v11, v63);

      a1 = v102;
    }
    else
    {
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      obj = v5;
      v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v122, buf, 16);
      if (v30)
      {
        v31 = v30;
        v32 = 0;
        v33 = *(_QWORD *)v123;
        do
        {
          v34 = 0;
          v100 = v31;
          do
          {
            if (*(_QWORD *)v123 != v33)
              objc_enumerationMutation(obj);
            v35 = *(void **)(*((_QWORD *)&v122 + 1) + 8 * (_QWORD)v34);
            if ((sub_1000B64E8((uint64_t)a1, v35) & 1) == 0)
            {
              specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              Logger = NFLogGetLogger(specific);
              if (Logger)
              {
                v38 = (void (*)(uint64_t, const char *, ...))Logger;
                Class = object_getClass(v102);
                isMetaClass = class_isMetaClass(Class);
                ClassName = object_getClassName(v102);
                Name = sel_getName("_markApplicationsForDelete:");
                v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "identifier"));
                v44 = 45;
                if (isMetaClass)
                  v44 = 43;
                v38(3, "%c[%{public}s %{public}s]:%i Failed to mark application for delete: %{public}@", v44, ClassName, Name, 320, v43);

              }
              v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v46 = NFSharedLogGetLogger(v45);
              v47 = objc_claimAutoreleasedReturnValue(v46);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              {
                v48 = object_getClass(v102);
                if (class_isMetaClass(v48))
                  v49 = 43;
                else
                  v49 = 45;
                v50 = object_getClassName(v102);
                v51 = sel_getName("_markApplicationsForDelete:");
                v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "identifier"));
                *(_DWORD *)v110 = 67110146;
                v111 = v49;
                v112 = 2082;
                v113 = v50;
                v114 = 2082;
                v115 = v51;
                v116 = 1024;
                v117 = 320;
                v118 = 2114;
                v119 = v52;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to mark application for delete: %{public}@", v110, 0x2Cu);

              }
              v53 = objc_alloc((Class)NSError);
              v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
              v108[0] = NSLocalizedDescriptionKey;
              v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
              v109[0] = v55;
              v109[1] = &off_100303950;
              v108[1] = CFSTR("Line");
              v108[2] = CFSTR("Method");
              v56 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_markApplicationsForDelete:"));
              v109[2] = v56;
              v108[3] = NSDebugDescriptionErrorKey;
              v57 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_markApplicationsForDelete:"), 321);
              v109[3] = v57;
              v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v109, v108, 4));
              v59 = objc_msgSend(v53, "initWithDomain:code:userInfo:", v54, 16, v58);

              v32 = v59;
              a1 = v102;
              v31 = v100;
            }
            v34 = (char *)v34 + 1;
          }
          while (v31 != v34);
          v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v122, buf, 16);
        }
        while (v31);
      }
      else
      {
        v32 = 0;
      }

      v65 = sub_10022BED0(a1);
      v66 = objc_msgSend(a1, "refreshISDCounter");
      objc_msgSend(a1, "setActiveApplet:", 0);
      v8 = v32;
      v64 = v8;
    }

    v4 = v99;
    if (v64)
    {
      v67 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v68 = NFLogGetLogger(v67);
      if (v68)
      {
        v69 = (void (*)(uint64_t, const char *, ...))v68;
        v70 = object_getClass(a1);
        v71 = class_isMetaClass(v70);
        v95 = object_getClassName(a1);
        v97 = sel_getName("deleteApplets:");
        v72 = 45;
        if (v71)
          v72 = 43;
        a1 = v102;
        v69(3, "%c[%{public}s %{public}s]:%i Failed to Mark For Delete : %@", v72, v95, v97, 495, v64);
      }
      v73 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v74 = NFSharedLogGetLogger(v73);
      v75 = objc_claimAutoreleasedReturnValue(v74);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        v76 = object_getClass(a1);
        if (class_isMetaClass(v76))
          v77 = 43;
        else
          v77 = 45;
        v78 = object_getClassName(a1);
        v79 = sel_getName("deleteApplets:");
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v77;
        *(_WORD *)v121 = 2082;
        *(_QWORD *)&v121[2] = v78;
        *(_WORD *)&v121[10] = 2082;
        *(_QWORD *)&v121[12] = v79;
        *(_WORD *)&v121[20] = 1024;
        *(_DWORD *)&v121[22] = 495;
        *(_WORD *)&v121[26] = 2112;
        *(_QWORD *)&v121[28] = v64;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to Mark For Delete : %@", buf, 0x2Cu);
      }

      v80 = objc_alloc((Class)NSError);
      v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v82 = objc_msgSend(v64, "code");
      v104[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v64, "code") > 70)
        v83 = 71;
      else
        v83 = (uint64_t)objc_msgSend(v64, "code");
      v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v83]));
      v105[0] = v89;
      v105[1] = v64;
      v104[1] = NSUnderlyingErrorKey;
      v104[2] = CFSTR("Line");
      v105[2] = &off_1003039F8;
      v104[3] = CFSTR("Method");
      v90 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("deleteApplets:"));
      v105[3] = v90;
      v104[4] = NSDebugDescriptionErrorKey;
      v91 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("deleteApplets:"), 496);
      v105[4] = v91;
      v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v105, v104, 5));
      v29 = objc_msgSend(v80, "initWithDomain:code:userInfo:", v81, v82, v92);

      v4 = v99;
      goto LABEL_59;
    }
    v84 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "activeApplet"));
    if (v84)
    {
      v85 = (void *)v84;
      v86 = a1;
      v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "activeApplet"));
      v88 = objc_msgSend(v98, "containsObject:", v87);

      if (v88)
        objc_msgSend(v86, "setActiveApplet:", 0);
    }
    +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:](NFGeneralStatisticsCALogger, "updateGeneralDeviceStatistic:", &off_100306DA8);
LABEL_56:
    v29 = 0;
    goto LABEL_59;
  }
  v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v14 = NFLogGetLogger(v13);
  if (v14)
  {
    v15 = (void (*)(uint64_t, const char *, ...))v14;
    v16 = object_getClass(a1);
    v17 = class_isMetaClass(v16);
    v18 = object_getClassName(a1);
    v96 = sel_getName("deleteApplets:");
    v19 = 45;
    if (v17)
      v19 = 43;
    v94 = v18;
    a1 = v102;
    v15(3, "%c[%{public}s %{public}s]:%i Missing applet parameter", v19, v94, v96, 489);
  }
  v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v21 = NFSharedLogGetLogger(v20);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    v23 = object_getClass(a1);
    if (class_isMetaClass(v23))
      v24 = 43;
    else
      v24 = 45;
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v24;
    *(_WORD *)v121 = 2082;
    *(_QWORD *)&v121[2] = object_getClassName(a1);
    *(_WORD *)&v121[10] = 2082;
    *(_QWORD *)&v121[12] = sel_getName("deleteApplets:");
    *(_WORD *)&v121[20] = 1024;
    *(_DWORD *)&v121[22] = 489;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing applet parameter", buf, 0x22u);
  }

  v25 = objc_alloc((Class)NSError);
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v106 = NSLocalizedDescriptionKey;
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Missing Parameter"));
  v107 = v27;
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v107, &v106, 1));
  v29 = objc_msgSend(v25, "initWithDomain:code:userInfo:", v26, 9, v28);

LABEL_59:
  return v29;
}

void sub_10022EBB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *specific;
  uint64_t Logger;
  void (*v17)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  objc_class *v24;
  int v25;
  const char *v26;
  const char *v27;
  const char *Name;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  _BYTE v41[128];

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVSsWithBytes:length:requireDefiniteEncoding:](NFTLV, "TLVSsWithBytes:length:requireDefiniteEncoding:", a2, a3, 1));
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v41, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v30 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "childWithTag:", 218));
        if (v10)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "childWithTag:", 79));
          if (v11)
          {
            v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "value"));
            v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "value"));
            objc_msgSend(v13, "setObject:forKeyedSubscript:", v12, v14);

          }
          else
          {
            specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            Logger = NFLogGetLogger(specific);
            if (Logger)
            {
              v17 = (void (*)(uint64_t, const char *, ...))Logger;
              Class = object_getClass(*(id *)(a1 + 32));
              isMetaClass = class_isMetaClass(Class);
              ClassName = object_getClassName(*(id *)(a1 + 32));
              Name = sel_getName(*(SEL *)(a1 + 48));
              v21 = 45;
              if (isMetaClass)
                v21 = 43;
              v17(3, "%c[%{public}s %{public}s]:%i Missing AID tag", v21, ClassName, Name, 588);
            }
            v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v23 = NFSharedLogGetLogger(v22);
            v12 = objc_claimAutoreleasedReturnValue(v23);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              v24 = object_getClass(*(id *)(a1 + 32));
              if (class_isMetaClass(v24))
                v25 = 43;
              else
                v25 = 45;
              v26 = object_getClassName(*(id *)(a1 + 32));
              v27 = sel_getName(*(SEL *)(a1 + 48));
              *(_DWORD *)buf = 67109890;
              v34 = v25;
              v35 = 2082;
              v36 = v26;
              v37 = 2082;
              v38 = v27;
              v39 = 1024;
              v40 = 588;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing AID tag", buf, 0x22u);
            }
          }

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v41, 16);
    }
    while (v6);
  }

}

id sub_10022EE68(void *a1, _QWORD *a2)
{
  void *v4;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *specific;
  uint64_t Logger;
  void (*v18)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  const char *v27;
  const char *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  const char *ClassName;
  const char *Name;
  id v40;
  _QWORD v41[5];
  _QWORD v42[5];
  uint8_t buf[4];
  int v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  void *v52;
  _QWORD v53[2];
  _QWORD v54[2];

  if (!a1)
    return 0;
  if (a2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "cachedAppletsUnfiltered"));

    if (v4)
    {
      *a2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "cachedAppletsUnfiltered"));
      return 0;
    }
    else
    {
      v40 = 0;
      v12 = sub_10022A180(a1, &v40, 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v14 = v40;
      v15 = v14;
      if (v13)
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v18 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("getUnfilteredApplets:");
          v21 = 45;
          if (isMetaClass)
            v21 = 43;
          v18(3, "%c[%{public}s %{public}s]:%i Error getting applications : %@", v21, ClassName, Name, 623, v13);
        }
        v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v23 = NFSharedLogGetLogger(v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v25 = object_getClass(a1);
          if (class_isMetaClass(v25))
            v26 = 43;
          else
            v26 = 45;
          v27 = object_getClassName(a1);
          v28 = sel_getName("getUnfilteredApplets:");
          *(_DWORD *)buf = 67110146;
          v44 = v26;
          v45 = 2082;
          v46 = v27;
          v47 = 2082;
          v48 = v28;
          v49 = 1024;
          v50 = 623;
          v51 = 2112;
          v52 = v13;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error getting applications : %@", buf, 0x2Cu);
        }

        v29 = objc_alloc((Class)NSError);
        v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v31 = objc_msgSend(v13, "code");
        v41[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)objc_msgSend(v13, "code") > 70)
          v32 = 71;
        else
          v32 = (uint64_t)objc_msgSend(v13, "code");
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v32]));
        v42[0] = v34;
        v42[1] = v13;
        v41[1] = NSUnderlyingErrorKey;
        v41[2] = CFSTR("Line");
        v42[2] = &off_100303A28;
        v41[3] = CFSTR("Method");
        v35 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getUnfilteredApplets:"));
        v42[3] = v35;
        v41[4] = NSDebugDescriptionErrorKey;
        v36 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getUnfilteredApplets:"), 624);
        v42[4] = v36;
        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v42, v41, 5));
        v33 = objc_msgSend(v29, "initWithDomain:code:userInfo:", v30, v31, v37);

      }
      else
      {
        v33 = 0;
        if (v14)
          *a2 = objc_retainAutorelease(v14);
      }

      return v33;
    }
  }
  else
  {
    v6 = objc_alloc((Class)NSError);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v53[0] = NSLocalizedDescriptionKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v54[0] = v8;
    v53[1] = NSLocalizedFailureReasonErrorKey;
    v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Nil outparam"));
    v54[1] = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v54, v53, 2));
    v11 = objc_msgSend(v6, "initWithDomain:code:userInfo:", v7, 10, v10);

    return v11;
  }
}

id sub_10022F2F0(void *a1, void *a2)
{
  id v2;

  if (a1)
  {
    v2 = sub_10022F310(a1, a2, 1);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v2);
  }
  return a1;
}

id sub_10022F310(void *a1, void *a2, char a3)
{
  id v5;
  void *v6;
  id v7;
  id *v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[128];

  v5 = a2;
  v6 = v5;
  v7 = 0;
  if (a1 && v5)
  {
    if ((a3 & 1) != 0)
    {
      v27 = 0;
      v8 = (id *)&v27;
      v9 = sub_10022C46C(a1, &v27);
      v10 = objc_claimAutoreleasedReturnValue(v9);
    }
    else
    {
      v26 = 0;
      v8 = (id *)&v26;
      v11 = sub_10022EE68(a1, &v26);
      v10 = objc_claimAutoreleasedReturnValue(v11);
    }
    v12 = (void *)v10;
    v13 = *v8;
    v14 = v13;
    if (v12)
    {
      v7 = 0;
    }
    else
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v15 = v13;
      v7 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
      if (v7)
      {
        v16 = *(_QWORD *)v23;
        while (2)
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(_QWORD *)v23 != v16)
              objc_enumerationMutation(v15);
            v18 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier", (_QWORD)v22));
            v20 = objc_msgSend(v6, "isEqualToString:", v19);

            if ((v20 & 1) != 0)
            {
              v7 = v18;
              goto LABEL_18;
            }
          }
          v7 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
          if (v7)
            continue;
          break;
        }
      }
LABEL_18:

    }
  }

  return v7;
}

id sub_10022F4B4(void *a1, uint64_t a2)
{
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *v23;
  _BOOL4 v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  objc_class *v30;
  int v31;
  const char *v32;
  const char *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void (*v40)(uint64_t, const char *, ...);
  objc_class *v41;
  _BOOL4 v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  NSObject *v48;
  objc_class *v49;
  void *v50;
  int v51;
  const char *v52;
  const char *v53;
  unsigned int v54;
  void *v55;
  unsigned int v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  void *v67;
  void *v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  id v78;
  uint64_t v79;
  void *v80;
  id v81;
  id v82;
  void *v83;
  id v84;
  id v85;
  void *v86;
  uint64_t v87;
  void *v88;
  id v89;
  id v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  const char *ClassName;
  const char *Name;
  const char *v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  unsigned int v104;
  id v105;
  void *v106;
  void *v107;
  id v108;
  _QWORD v109[4];
  _QWORD v110[4];
  _QWORD v111[5];
  _QWORD v112[5];
  _QWORD v113[4];
  _QWORD v114[4];
  _QWORD v115[5];
  _QWORD v116[5];
  _QWORD v117[4];
  _QWORD v118[4];
  _QWORD v119[5];
  _QWORD v120[5];
  _QWORD v121[4];
  _QWORD v122[4];
  _QWORD v123[5];
  _QWORD v124[5];
  uint8_t buf[4];
  int v126;
  __int16 v127;
  const char *v128;
  __int16 v129;
  const char *v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  id v136;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:");
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i visible=%d", v9, ClassName, Name, 697, a2);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(a1);
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    *(_DWORD *)buf = 67110146;
    v126 = v14;
    v127 = 2082;
    v128 = object_getClassName(a1);
    v129 = 2082;
    v130 = sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:");
    v131 = 1024;
    v132 = 697;
    v133 = 1024;
    v134 = a2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i visible=%d", buf, 0x28u);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:unsignedChar:](NFTLV, "TLVWithTag:unsignedChar:", 131, a2));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "asData"));
  v108 = 0;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 52, 0, 0, v16, &v108));
  v18 = v108;

  v107 = v17;
  if (!v17)
  {
    v106 = v15;
    v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v21 = NFLogGetLogger(v20);
    if (v21)
    {
      v22 = (void (*)(uint64_t, const char *, ...))v21;
      v23 = object_getClass(a1);
      v24 = class_isMetaClass(v23);
      v25 = object_getClassName(a1);
      v99 = sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:");
      v26 = 45;
      if (v24)
        v26 = 43;
      v22(3, "%c[%{public}s %{public}s]:%i Command (%02X) failed; error: %{public}@", v26, v25, v99, 709, 52, v18);
    }
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFSharedLogGetLogger(v27);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = object_getClass(a1);
      if (class_isMetaClass(v30))
        v31 = 43;
      else
        v31 = 45;
      v32 = object_getClassName(a1);
      v33 = sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:");
      *(_DWORD *)buf = 67110402;
      v126 = v31;
      v127 = 2082;
      v128 = v32;
      v129 = 2082;
      v130 = v33;
      v131 = 1024;
      v132 = 709;
      v133 = 1024;
      v134 = 52;
      v135 = 2114;
      v136 = v18;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command (%02X) failed; error: %{public}@",
        buf,
        0x32u);
    }

    sub_100187CDC((uint64_t)NFBugCapture, CFSTR("Failed to set instance visibility"), CFSTR("No Response from SE"), &off_100306DD0);
    v34 = objc_alloc((Class)NSError);
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v18)
    {
      v103 = v34;
      v36 = objc_msgSend(v18, "code");
      v123[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v18, "code") > 70)
        v37 = 71;
      else
        v37 = (uint64_t)objc_msgSend(v18, "code");
      v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v37]));
      v124[0] = v73;
      v124[1] = v18;
      v123[1] = NSUnderlyingErrorKey;
      v123[2] = CFSTR("Line");
      v124[2] = &off_100303A70;
      v123[3] = CFSTR("Method");
      v74 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"));
      v124[3] = v74;
      v123[4] = NSDebugDescriptionErrorKey;
      v75 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"), 715);
      v124[4] = v75;
      v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v124, v123, 5));
      v77 = objc_msgSend(v103, "initWithDomain:code:userInfo:", v35, v36, v76);
      +[NFExceptionsCALogger postAnalyticsContactlessErrorsEvent:status:error:](NFExceptionsCALogger, "postAnalyticsContactlessErrorsEvent:status:error:", 0, 0, v77);

      v105 = objc_alloc((Class)NSError);
      v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v78 = objc_msgSend(v18, "code");
      v119[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v18, "code") > 70)
        v79 = 71;
      else
        v79 = (uint64_t)objc_msgSend(v18, "code");
      v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v79]));
      v120[0] = v68;
      v120[1] = v18;
      v119[1] = NSUnderlyingErrorKey;
      v119[2] = CFSTR("Line");
      v120[2] = &off_100303AA0;
      v119[3] = CFSTR("Method");
      v69 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"));
      v120[3] = v69;
      v119[4] = NSDebugDescriptionErrorKey;
      v70 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"), 717);
      v120[4] = v70;
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v120, v119, 5));
      v72 = v105;
      v86 = v67;
      v87 = (uint64_t)v78;
      goto LABEL_52;
    }
    v121[0] = NSLocalizedDescriptionKey;
    v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v122[0] = v61;
    v122[1] = &off_100303A88;
    v121[1] = CFSTR("Line");
    v121[2] = CFSTR("Method");
    v62 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"));
    v122[2] = v62;
    v121[3] = NSDebugDescriptionErrorKey;
    v63 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"), 716);
    v122[3] = v63;
    v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v122, v121, 4));
    v65 = objc_msgSend(v34, "initWithDomain:code:userInfo:", v35, 16, v64);
    +[NFExceptionsCALogger postAnalyticsContactlessErrorsEvent:status:error:](NFExceptionsCALogger, "postAnalyticsContactlessErrorsEvent:status:error:", 0, 0, v65);

    v66 = objc_alloc((Class)NSError);
    v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v117[0] = NSLocalizedDescriptionKey;
    v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v118[0] = v68;
    v118[1] = &off_100303AA0;
    v117[1] = CFSTR("Line");
    v117[2] = CFSTR("Method");
    v69 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"));
    v118[2] = v69;
    v117[3] = NSDebugDescriptionErrorKey;
    v70 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"), 717);
    v118[3] = v70;
    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v118, v117, 4));
    v72 = v66;
    goto LABEL_44;
  }
  if (objc_msgSend(v17, "status") != 36864)
  {
    v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v39 = NFLogGetLogger(v38);
    if (v39)
    {
      v40 = (void (*)(uint64_t, const char *, ...))v39;
      v41 = object_getClass(a1);
      v42 = class_isMetaClass(v41);
      v43 = object_getClassName(a1);
      v44 = sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:");
      v101 = objc_msgSend(v107, "status");
      v100 = v44;
      v17 = v107;
      v45 = 45;
      if (v42)
        v45 = 43;
      v40(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v45, v43, v100, 720, v101);
    }
    v46 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v47 = NFSharedLogGetLogger(v46);
    v48 = objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      v49 = object_getClass(a1);
      v50 = v15;
      if (class_isMetaClass(v49))
        v51 = 43;
      else
        v51 = 45;
      v52 = object_getClassName(a1);
      v53 = sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:");
      v54 = objc_msgSend(v17, "status");
      *(_DWORD *)buf = 67110146;
      v126 = v51;
      v15 = v50;
      v127 = 2082;
      v128 = v52;
      v129 = 2082;
      v130 = v53;
      v131 = 1024;
      v132 = 720;
      v133 = 1024;
      v134 = v54;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
    }

    if (objc_msgSend(v17, "status") != 26880)
    {
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Non-90000 response. Response: 0x%04X"), objc_msgSend(v17, "status")));
      sub_100187CDC((uint64_t)NFBugCapture, CFSTR("Failed to set instance visibility"), v55, &off_100306DF8);

    }
    v56 = objc_msgSend(v17, "status");
    v57 = objc_alloc((Class)NSError);
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v106 = v15;
    v104 = v56;
    if (v18)
    {
      v102 = v57;
      v59 = objc_msgSend(v18, "code");
      v115[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v18, "code") > 70)
        v60 = 71;
      else
        v60 = (uint64_t)objc_msgSend(v18, "code");
      v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v60]));
      v116[0] = v88;
      v116[1] = v18;
      v115[1] = NSUnderlyingErrorKey;
      v115[2] = CFSTR("Line");
      v116[2] = &off_100303AB8;
      v115[3] = CFSTR("Method");
      v89 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"));
      v116[3] = v89;
      v115[4] = NSDebugDescriptionErrorKey;
      v90 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"), 730);
      v116[4] = v90;
      v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v116, v115, 5));
      v92 = objc_msgSend(v102, "initWithDomain:code:userInfo:", v58, v59, v91);
      +[NFExceptionsCALogger postAnalyticsContactlessErrorsEvent:status:error:](NFExceptionsCALogger, "postAnalyticsContactlessErrorsEvent:status:error:", 0, v104, v92);

      v93 = objc_alloc((Class)NSError);
      v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v94 = objc_msgSend(v18, "code");
      v111[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v18, "code") > 70)
        v95 = 71;
      else
        v95 = (uint64_t)objc_msgSend(v18, "code");
      v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v95]));
      v112[0] = v68;
      v112[1] = v18;
      v111[1] = NSUnderlyingErrorKey;
      v111[2] = CFSTR("Line");
      v112[2] = &off_100303AE8;
      v111[3] = CFSTR("Method");
      v69 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"));
      v112[3] = v69;
      v111[4] = NSDebugDescriptionErrorKey;
      v70 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"), 732);
      v112[4] = v70;
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v112, v111, 5));
      v72 = v93;
      v86 = v67;
      v87 = (uint64_t)v94;
      goto LABEL_52;
    }
    v113[0] = NSLocalizedDescriptionKey;
    v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v114[0] = v80;
    v114[1] = &off_100303AD0;
    v113[1] = CFSTR("Line");
    v113[2] = CFSTR("Method");
    v81 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"));
    v114[2] = v81;
    v113[3] = NSDebugDescriptionErrorKey;
    v82 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"), 731);
    v114[3] = v82;
    v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v114, v113, 4));
    v84 = objc_msgSend(v57, "initWithDomain:code:userInfo:", v58, 16, v83);
    +[NFExceptionsCALogger postAnalyticsContactlessErrorsEvent:status:error:](NFExceptionsCALogger, "postAnalyticsContactlessErrorsEvent:status:error:", 0, v104, v84);

    v85 = objc_alloc((Class)NSError);
    v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v109[0] = NSLocalizedDescriptionKey;
    v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v110[0] = v68;
    v110[1] = &off_100303AE8;
    v109[1] = CFSTR("Line");
    v109[2] = CFSTR("Method");
    v69 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"));
    v110[2] = v69;
    v109[3] = NSDebugDescriptionErrorKey;
    v70 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setTemporaryVisibilityOnAllEndpointsOfSelectedApplet:"), 732);
    v110[3] = v70;
    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v110, v109, 4));
    v72 = v85;
LABEL_44:
    v86 = v67;
    v87 = 16;
LABEL_52:
    v19 = objc_msgSend(v72, "initWithDomain:code:userInfo:", v86, v87, v71);

    v15 = v106;
    goto LABEL_53;
  }
  v19 = 0;
LABEL_53:

  return v19;
}

id sub_100230470(void *a1, void *a2, uint64_t a3)
{
  id v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  const __CFString *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  id v19;
  int v20;
  const char *v21;
  const char *v22;
  const __CFString *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, ...);
  objc_class *v36;
  _BOOL4 v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  objc_class *v43;
  int v44;
  const char *v45;
  const char *v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void (*v54)(uint64_t, const char *, ...);
  objc_class *v55;
  _BOOL4 v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  NSObject *v62;
  objc_class *v63;
  int v64;
  const char *v65;
  const char *v66;
  unsigned int v67;
  id v68;
  void *v69;
  id v70;
  id v71;
  uint64_t v72;
  void *v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  id v78;
  void *v79;
  void *v80;
  id v81;
  id v82;
  void *v83;
  void *v84;
  void *v85;
  id v86;
  id v87;
  void *v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  id v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  id v105;
  uint64_t v106;
  const char *v108;
  uint64_t v109;
  const __CFString *v110;
  unsigned int v111;
  id v112;
  void *v113;
  id v114;
  void *v115;
  void *v116;
  id v117;
  _QWORD v118[4];
  _QWORD v119[4];
  _QWORD v120[5];
  _QWORD v121[5];
  _QWORD v122[4];
  _QWORD v123[4];
  _QWORD v124[5];
  _QWORD v125[5];
  _QWORD v126[4];
  _QWORD v127[4];
  _QWORD v128[5];
  _QWORD v129[5];
  _QWORD v130[4];
  _QWORD v131[4];
  _QWORD v132[5];
  _QWORD v133[5];
  uint8_t buf[4];
  int v135;
  __int16 v136;
  const char *v137;
  __int16 v138;
  const char *v139;
  __int16 v140;
  int v141;
  __int16 v142;
  _BYTE v143[18];
  __int16 v144;
  id v145;

  v5 = a2;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v8 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("_setupEndpoint:activate:");
    if ((_DWORD)a3)
      v13 = &stru_1002ED8A8;
    else
      v13 = CFSTR("de");
    v110 = v13;
    v14 = 43;
    if (!isMetaClass)
      v14 = 45;
    v8(6, "%c[%{public}s %{public}s]:%i %{public}@ %{public}@activation for endpoint %{public}@", v14, ClassName, Name, 739, CFSTR("temporary"), v110, v5);
  }
  v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v16 = NFSharedLogGetLogger(v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = object_getClass(a1);
    v19 = v5;
    if (class_isMetaClass(v18))
      v20 = 43;
    else
      v20 = 45;
    v21 = object_getClassName(a1);
    v22 = sel_getName("_setupEndpoint:activate:");
    *(_DWORD *)buf = 67110658;
    if ((_DWORD)a3)
      v23 = &stru_1002ED8A8;
    else
      v23 = CFSTR("de");
    v135 = v20;
    v5 = v19;
    v136 = 2082;
    v137 = v21;
    v138 = 2082;
    v139 = v22;
    v140 = 1024;
    v141 = 739;
    v142 = 2114;
    *(_QWORD *)v143 = CFSTR("temporary");
    *(_WORD *)&v143[8] = 2114;
    *(_QWORD *)&v143[10] = v23;
    v144 = 2114;
    v145 = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@ %{public}@activation for endpoint %{public}@", buf, 0x40u);
  }

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v5));
  v25 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithCapacity:", (char *)objc_msgSend(v24, "length") + 7);
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 80, v24));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "asData"));
  objc_msgSend(v25, "appendData:", v27);

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:unsignedChar:](NFTLV, "TLVWithTag:unsignedChar:", 131, a3));
  v116 = v28;
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "asData"));
  objc_msgSend(v25, "appendData:", v29);

  v117 = 0;
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 126, 0, 0, v25, &v117));
  v31 = v117;
  if (!v30)
  {
    v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v34 = NFLogGetLogger(v33);
    if (v34)
    {
      v35 = (void (*)(uint64_t, const char *, ...))v34;
      v36 = object_getClass(a1);
      v37 = class_isMetaClass(v36);
      v38 = object_getClassName(a1);
      v108 = sel_getName("_setupEndpoint:activate:");
      v39 = 45;
      if (v37)
        v39 = 43;
      v35(3, "%c[%{public}s %{public}s]:%i Command (%02X) failed; error: %{public}@",
        v39,
        v38,
        v108,
        759,
        126,
        v31);
    }
    v113 = v24;
    v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v41 = NFSharedLogGetLogger(v40);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      v43 = object_getClass(a1);
      if (class_isMetaClass(v43))
        v44 = 43;
      else
        v44 = 45;
      v45 = object_getClassName(a1);
      v46 = sel_getName("_setupEndpoint:activate:");
      *(_DWORD *)buf = 67110402;
      v135 = v44;
      v136 = 2082;
      v137 = v45;
      v138 = 2082;
      v139 = v46;
      v140 = 1024;
      v141 = 759;
      v142 = 1024;
      *(_DWORD *)v143 = 126;
      *(_WORD *)&v143[4] = 2114;
      *(_QWORD *)&v143[6] = v31;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command (%02X) failed; error: %{public}@",
        buf,
        0x32u);
    }

    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("No Response from SE for endpoint keyID: %@"), v5));
    sub_100187CDC((uint64_t)NFBugCapture, CFSTR("Unable to set endpoint visibility"), v47, &off_100306E20);

    v48 = objc_alloc((Class)NSError);
    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v114 = v5;
    v115 = 0;
    v112 = v25;
    if (v31)
    {
      v50 = objc_msgSend(v31, "code");
      v132[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v31, "code") > 70)
        v51 = 71;
      else
        v51 = (uint64_t)objc_msgSend(v31, "code");
      v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v51]));
      v133[0] = v85;
      v133[1] = v31;
      v132[1] = NSUnderlyingErrorKey;
      v132[2] = CFSTR("Line");
      v133[2] = &off_100303B00;
      v132[3] = CFSTR("Method");
      v86 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setupEndpoint:activate:"));
      v133[3] = v86;
      v132[4] = NSDebugDescriptionErrorKey;
      v87 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setupEndpoint:activate:"), 766);
      v133[4] = v87;
      v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v133, v132, 5));
      v89 = objc_msgSend(v48, "initWithDomain:code:userInfo:", v49, v50, v88);
      +[NFExceptionsCALogger postAnalyticsContactlessErrorsEvent:status:error:](NFExceptionsCALogger, "postAnalyticsContactlessErrorsEvent:status:error:", 0, 0, v89);

      v90 = objc_alloc((Class)NSError);
      v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v91 = objc_msgSend(v31, "code");
      v128[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v31, "code") > 70)
        v92 = 71;
      else
        v92 = (uint64_t)objc_msgSend(v31, "code");
      v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v92]));
      v129[0] = v80;
      v129[1] = v31;
      v128[1] = NSUnderlyingErrorKey;
      v128[2] = CFSTR("Line");
      v129[2] = &off_100303B30;
      v128[3] = CFSTR("Method");
      v81 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setupEndpoint:activate:"));
      v129[3] = v81;
      v128[4] = NSDebugDescriptionErrorKey;
      v82 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setupEndpoint:activate:"), 768);
      v129[4] = v82;
      v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v129, v128, 5));
      v84 = v90;
      v93 = v79;
      v94 = (uint64_t)v91;
      goto LABEL_59;
    }
    v130[0] = NSLocalizedDescriptionKey;
    v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v131[0] = v73;
    v131[1] = &off_100303B18;
    v130[1] = CFSTR("Line");
    v130[2] = CFSTR("Method");
    v74 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setupEndpoint:activate:"));
    v131[2] = v74;
    v130[3] = NSDebugDescriptionErrorKey;
    v75 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setupEndpoint:activate:"), 767);
    v131[3] = v75;
    v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v131, v130, 4));
    v77 = objc_msgSend(v48, "initWithDomain:code:userInfo:", v49, 16, v76);
    +[NFExceptionsCALogger postAnalyticsContactlessErrorsEvent:status:error:](NFExceptionsCALogger, "postAnalyticsContactlessErrorsEvent:status:error:", 0, 0, v77);

    v78 = objc_alloc((Class)NSError);
    v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v126[0] = NSLocalizedDescriptionKey;
    v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v127[0] = v80;
    v127[1] = &off_100303B30;
    v126[1] = CFSTR("Line");
    v126[2] = CFSTR("Method");
    v81 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setupEndpoint:activate:"));
    v127[2] = v81;
    v126[3] = NSDebugDescriptionErrorKey;
    v82 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setupEndpoint:activate:"), 768);
    v127[3] = v82;
    v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v127, v126, 4));
    v84 = v78;
LABEL_58:
    v93 = v79;
    v94 = 16;
LABEL_59:
    v32 = objc_msgSend(v84, "initWithDomain:code:userInfo:", v93, v94, v83);
    v24 = v113;
LABEL_62:

    v5 = v114;
    v30 = v115;
    v25 = v112;
    goto LABEL_63;
  }
  if (objc_msgSend(v30, "status") != 36864)
  {
    v112 = v25;
    v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v53 = NFLogGetLogger(v52);
    if (v53)
    {
      v54 = (void (*)(uint64_t, const char *, ...))v53;
      v55 = object_getClass(a1);
      v56 = class_isMetaClass(v55);
      v57 = object_getClassName(a1);
      v58 = sel_getName("_setupEndpoint:activate:");
      v109 = objc_msgSend(v30, "status");
      v59 = 45;
      if (v56)
        v59 = 43;
      v54(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v59, v57, v58, 771, v109);
    }
    v113 = v24;
    v60 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v61 = NFSharedLogGetLogger(v60);
    v62 = objc_claimAutoreleasedReturnValue(v61);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      v63 = object_getClass(a1);
      if (class_isMetaClass(v63))
        v64 = 43;
      else
        v64 = 45;
      v65 = object_getClassName(a1);
      v66 = sel_getName("_setupEndpoint:activate:");
      v67 = objc_msgSend(v30, "status");
      *(_DWORD *)buf = 67110146;
      v135 = v64;
      v136 = 2082;
      v137 = v65;
      v138 = 2082;
      v139 = v66;
      v140 = 1024;
      v141 = 771;
      v142 = 1024;
      *(_DWORD *)v143 = v67;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
    }

    v115 = v30;
    if (objc_msgSend(v30, "status") != 26880)
    {
      v111 = objc_msgSend(v30, "status");
      v68 = objc_alloc((Class)NSError);
      v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      if (v31)
      {
        v70 = objc_msgSend(v31, "code");
        v124[0] = NSLocalizedDescriptionKey;
        v71 = v5;
        if ((uint64_t)objc_msgSend(v31, "code") > 70)
          v72 = 71;
        else
          v72 = (uint64_t)objc_msgSend(v31, "code");
        v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v72]));
        v125[0] = v95;
        v125[1] = v31;
        v124[1] = NSUnderlyingErrorKey;
        v124[2] = CFSTR("Line");
        v125[2] = &off_100303B48;
        v124[3] = CFSTR("Method");
        v96 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setupEndpoint:activate:"));
        v125[3] = v96;
        v124[4] = NSDebugDescriptionErrorKey;
        v97 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setupEndpoint:activate:"), 776);
        v125[4] = v97;
        v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v125, v124, 5));
        v99 = v68;
        v100 = v69;
        v101 = (uint64_t)v70;
      }
      else
      {
        v71 = v5;
        v122[0] = NSLocalizedDescriptionKey;
        v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        v123[0] = v95;
        v123[1] = &off_100303B60;
        v122[1] = CFSTR("Line");
        v122[2] = CFSTR("Method");
        v96 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setupEndpoint:activate:"));
        v123[2] = v96;
        v122[3] = NSDebugDescriptionErrorKey;
        v97 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setupEndpoint:activate:"), 777);
        v123[3] = v97;
        v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v123, v122, 4));
        v99 = v68;
        v100 = v69;
        v101 = 16;
      }
      v102 = objc_msgSend(v99, "initWithDomain:code:userInfo:", v100, v101, v98);
      +[NFExceptionsCALogger postAnalyticsContactlessErrorsEvent:status:error:](NFExceptionsCALogger, "postAnalyticsContactlessErrorsEvent:status:error:", 0, v111, v102);

      v5 = v71;
      v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Non-9000 Response from SE for endpoint keyID: %@, Response: 0x%04X"), v71, objc_msgSend(v115, "status")));
      sub_100187CDC((uint64_t)NFBugCapture, CFSTR("Unable to set endpoint visibility"), v103, &off_100306E48);

    }
    v104 = objc_alloc((Class)NSError);
    v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v114 = v5;
    if (v31)
    {
      v105 = objc_msgSend(v31, "code");
      v120[0] = NSLocalizedDescriptionKey;
      v24 = v113;
      if ((uint64_t)objc_msgSend(v31, "code") > 70)
        v106 = 71;
      else
        v106 = (uint64_t)objc_msgSend(v31, "code");
      v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v106]));
      v121[0] = v80;
      v121[1] = v31;
      v120[1] = NSUnderlyingErrorKey;
      v120[2] = CFSTR("Line");
      v121[2] = &off_100303B78;
      v120[3] = CFSTR("Method");
      v81 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setupEndpoint:activate:"));
      v121[3] = v81;
      v120[4] = NSDebugDescriptionErrorKey;
      v82 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setupEndpoint:activate:"), 784);
      v121[4] = v82;
      v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v121, v120, 5));
      v32 = objc_msgSend(v104, "initWithDomain:code:userInfo:", v79, v105, v83);
      goto LABEL_62;
    }
    v118[0] = NSLocalizedDescriptionKey;
    v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    v119[0] = v80;
    v119[1] = &off_100303B78;
    v118[1] = CFSTR("Line");
    v118[2] = CFSTR("Method");
    v81 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_setupEndpoint:activate:"));
    v119[2] = v81;
    v118[3] = NSDebugDescriptionErrorKey;
    v82 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_setupEndpoint:activate:"), 784);
    v119[3] = v82;
    v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v119, v118, 4));
    v84 = v104;
    goto LABEL_58;
  }
  v32 = 0;
LABEL_63:

  return v32;
}

id sub_100231554(void *a1, int a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  unsigned __int8 v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void (*v18)(uint64_t, const char *, ...);
  objc_class *v19;
  _BOOL4 v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  objc_class *v26;
  int v27;
  const char *v28;
  const char *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void (*v44)(uint64_t, const char *, ...);
  objc_class *v45;
  _BOOL4 v46;
  const char *v47;
  const char *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  NSObject *v53;
  objc_class *v54;
  int v55;
  const char *v56;
  const char *v57;
  void *v58;
  id v59;
  id v60;
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  void *specific;
  uint64_t Logger;
  id v66;
  void (*v67)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  objc_class *v75;
  int v76;
  const char *v77;
  const char *v78;
  id v79;
  id v80;
  uint64_t v81;
  id v82;
  _QWORD *v83;
  void *v84;
  id v85;
  id v87;
  void *v88;
  void *v89;
  id v90;
  void *v91;
  id v92;
  id v93;
  unsigned int v94;
  uint64_t v95;
  void *v96;
  id v97;
  void *v98;
  id v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  uint64_t v104;
  void (*v105)(uint64_t, const char *, ...);
  objc_class *v106;
  _BOOL4 v107;
  const char *v108;
  const char *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  NSObject *v113;
  objc_class *v114;
  int v115;
  const char *v116;
  const char *v117;
  unsigned int v118;
  id v119;
  id v120;
  id v121;
  void *v122;
  id v123;
  id v124;
  void *v125;
  uint64_t v126;
  void (*v127)(uint64_t, const char *, ...);
  objc_class *v128;
  const char *v129;
  void *v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  NSObject *v134;
  objc_class *v135;
  void *v136;
  int v137;
  const char *v138;
  const char *v139;
  void *v140;
  id v141;
  void *v142;
  id v143;
  id v144;
  _QWORD *v145;
  void *v146;
  void *v147;
  uint64_t v148;
  void (*v149)(uint64_t, const char *, ...);
  objc_class *v150;
  _BOOL4 v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  NSObject *v155;
  objc_class *v156;
  int v157;
  const char *v158;
  const char *v159;
  id v160;
  id v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  void (*v165)(uint64_t, const char *, ...);
  objc_class *v166;
  _BOOL4 v167;
  const char *v168;
  const char *v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  NSObject *v173;
  objc_class *v174;
  int v175;
  const char *v176;
  const char *v177;
  unsigned int v178;
  id v179;
  void *v180;
  uint64_t v181;
  id v182;
  id v183;
  void *v184;
  id v185;
  void *v186;
  id v187;
  id v188;
  void *v189;
  id v190;
  void *v191;
  id v192;
  id v193;
  _QWORD *v194;
  void *v195;
  id v196;
  void *v197;
  id v198;
  id v199;
  void *v200;
  id v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  const char *v205;
  const char *Name;
  const char *v207;
  uint64_t v208;
  id v209;
  uint64_t v210;
  _BOOL4 v211;
  const char *v212;
  id v213;
  void *v214;
  void *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  void *v219;
  SEL sel;
  char *sela;
  void *v222;
  id v223;
  id v224;
  id v225[2];
  _QWORD v226[4];
  _QWORD v227[4];
  _QWORD v228[5];
  _QWORD v229[5];
  _QWORD v230[4];
  _QWORD v231[4];
  _QWORD v232[5];
  _QWORD v233[5];
  _QWORD v234[4];
  _QWORD v235[4];
  _QWORD v236[4];
  _QWORD v237[4];
  _QWORD v238[4];
  _QWORD v239[4];
  _QWORD v240[4];
  _QWORD v241[4];
  _QWORD v242[5];
  _QWORD v243[5];
  uint8_t buf[4];
  int v245;
  __int16 v246;
  const char *v247;
  __int16 v248;
  const char *v249;
  __int16 v250;
  int v251;
  __int16 v252;
  id v253;
  __int16 v254;
  id v255;
  _QWORD v256[4];
  _QWORD v257[4];
  _QWORD v258[5];
  _QWORD v259[5];

  v9 = a3;
  v225[1] = 0;
  v223 = a4;
  v10 = objc_msgSend(a1, "selectApplet:error:");
  v11 = 0;
  v222 = v9;
  if ((v10 & 1) != 0)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v9));
    v225[0] = v11;
    LOBYTE(v202) = 0;
    if (a2)
      v13 = 132;
    else
      v13 = 133;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:useExtendedLength:error:", 128, 118, v13, 0, v12, 0, 0, v202, v225));
    v15 = v225[0];

    if (!v14)
    {
      v216 = a5;
      v63 = v12;
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      v66 = v9;
      if (Logger)
      {
        v67 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
        v71 = 45;
        if (isMetaClass)
          v71 = 43;
        v67(3, "%c[%{public}s %{public}s]:%i VIEW to %{public}@ failed: %{public}@", v71, ClassName, Name, 823, v66, v15);
      }
      v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v73 = NFSharedLogGetLogger(v72);
      v74 = objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        v75 = object_getClass(a1);
        if (class_isMetaClass(v75))
          v76 = 43;
        else
          v76 = 45;
        v77 = object_getClassName(a1);
        v78 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
        *(_DWORD *)buf = 67110402;
        v245 = v76;
        v246 = 2082;
        v247 = v77;
        v248 = 2082;
        v249 = v78;
        v250 = 1024;
        v251 = 823;
        v252 = 2114;
        v253 = v222;
        v254 = 2114;
        v255 = v15;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i VIEW to %{public}@ failed: %{public}@", buf, 0x36u);
      }

      if (!v216)
      {
        v14 = 0;
        v40 = 0;
        v12 = v63;
        goto LABEL_55;
      }
      v79 = objc_alloc((Class)NSError);
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v12 = v63;
      if (v15)
      {
        v80 = objc_msgSend(v15, "code");
        v242[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)objc_msgSend(v15, "code") > 70)
          v81 = 71;
        else
          v81 = (uint64_t)objc_msgSend(v15, "code");
        v32 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v81]));
        v243[0] = v32;
        v243[1] = v15;
        v242[1] = NSUnderlyingErrorKey;
        v242[2] = CFSTR("Line");
        v243[2] = &off_100303BA8;
        v242[3] = CFSTR("Method");
        v120 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"));
        v243[3] = v120;
        v242[4] = NSDebugDescriptionErrorKey;
        v121 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"), 825);
        v243[4] = v121;
        v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v243, v242, 5));
        v123 = objc_retainAutorelease(objc_msgSend(v79, "initWithDomain:code:userInfo:", v31, v80, v122));
        *v216 = v123;

        v41 = 0;
        v40 = 0;
        v11 = v15;
        goto LABEL_53;
      }
      v240[0] = NSLocalizedDescriptionKey;
      v32 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v241[0] = v32;
      v241[1] = &off_100303BA8;
      v240[1] = CFSTR("Line");
      v240[2] = CFSTR("Method");
      v99 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"));
      v241[2] = v99;
      v240[3] = NSDebugDescriptionErrorKey;
      v100 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"), 825);
      v241[3] = v100;
      v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v241, v240, 4));
      v102 = objc_retainAutorelease(objc_msgSend(v79, "initWithDomain:code:userInfo:", v31, 16, v101));
      *v216 = v102;

LABEL_67:
      v11 = 0;
LABEL_51:
      v41 = 0;
      goto LABEL_52;
    }
    v219 = v12;
    if (objc_msgSend(v14, "status") == 25600 || objc_msgSend(v14, "status") == 28410)
    {
      v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v17 = NFLogGetLogger(v16);
      if (v17)
      {
        v18 = (void (*)(uint64_t, const char *, ...))v17;
        v19 = object_getClass(a1);
        v20 = class_isMetaClass(v19);
        v21 = object_getClassName(a1);
        v205 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
        v22 = 45;
        if (v20)
          v22 = 43;
        v18(5, "%c[%{public}s %{public}s]:%i Endpoint not found", v22, v21, v205, 833);
      }
      v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v24 = NFSharedLogGetLogger(v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        v26 = object_getClass(a1);
        if (class_isMetaClass(v26))
          v27 = 43;
        else
          v27 = 45;
        v28 = object_getClassName(a1);
        v29 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
        *(_DWORD *)buf = 67109890;
        v245 = v27;
        v246 = 2082;
        v247 = v28;
        v248 = 2082;
        v249 = v29;
        v250 = 1024;
        v251 = 833;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Endpoint not found", buf, 0x22u);
      }

      if (a5)
      {
        v30 = objc_alloc((Class)NSError);
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v238[0] = NSLocalizedDescriptionKey;
        v32 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Not found"));
        v239[0] = v32;
        v239[1] = &off_100303BC0;
        v238[1] = CFSTR("Line");
        v238[2] = CFSTR("Method");
        v33 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"));
        v239[2] = v33;
        v238[3] = NSDebugDescriptionErrorKey;
        v34 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"), 837);
        v239[3] = v34;
        v35 = a5;
        v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v239, v238, 4));
        v37 = v30;
        v38 = v31;
        v39 = 65;
LABEL_19:
        *v35 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, v39, v36);

        v40 = 0;
        v11 = v15;
        v41 = v14;
        v12 = v219;
LABEL_53:

        v15 = v11;
        v14 = v41;
LABEL_54:

LABEL_55:
        v11 = v15;
        goto LABEL_56;
      }
      goto LABEL_79;
    }
    if (objc_msgSend(v14, "status") != 36864)
    {
      v103 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v104 = NFLogGetLogger(v103);
      if (v104)
      {
        v105 = (void (*)(uint64_t, const char *, ...))v104;
        v106 = object_getClass(a1);
        v107 = class_isMetaClass(v106);
        v108 = object_getClassName(a1);
        v109 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
        v208 = objc_msgSend(v14, "status");
        v110 = 45;
        if (v107)
          v110 = 43;
        v105(3, "%c[%{public}s %{public}s]:%i Failed to execute endpoint view command; status: 0x%04X",
          v110,
          v108,
          v109,
          842,
          v208);
      }
      v111 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v112 = NFSharedLogGetLogger(v111);
      v113 = objc_claimAutoreleasedReturnValue(v112);
      if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
      {
        v114 = object_getClass(a1);
        if (class_isMetaClass(v114))
          v115 = 43;
        else
          v115 = 45;
        v116 = object_getClassName(a1);
        v117 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
        v118 = objc_msgSend(v14, "status");
        *(_DWORD *)buf = 67110146;
        v245 = v115;
        v246 = 2082;
        v247 = v116;
        v248 = 2082;
        v249 = v117;
        v250 = 1024;
        v251 = 842;
        v252 = 1024;
        LODWORD(v253) = v118;
        _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to execute endpoint view command; status: 0x%04X",
          buf,
          0x28u);
      }

      if (a5)
      {
        v119 = objc_alloc((Class)NSError);
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v236[0] = NSLocalizedDescriptionKey;
        v32 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        v237[0] = v32;
        v237[1] = &off_100303BD8;
        v236[1] = CFSTR("Line");
        v236[2] = CFSTR("Method");
        v33 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"));
        v237[2] = v33;
        v236[3] = NSDebugDescriptionErrorKey;
        v34 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"), 844);
        v237[3] = v34;
        v35 = a5;
        v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v237, v236, 4));
        v37 = v119;
        v38 = v31;
        v39 = 16;
        goto LABEL_19;
      }
LABEL_79:
      v40 = 0;
      v12 = v219;
      goto LABEL_55;
    }
    v87 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB4B, 9);
    v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "NF_asHexString"));

    v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v223, "identifier"));
    v215 = v88;
    v90 = objc_msgSend(v89, "compare:options:range:", v88, 1, 0, objc_msgSend(v88, "length"));

    v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "response"));
    v92 = objc_msgSend(v91, "length");

    if (v90)
    {
      if (v92 == (id)2)
      {
        v93 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "response")));
        v94 = *(unsigned __int16 *)objc_msgSend(v93, "bytes");

        if (!v94)
        {
          v40 = 0;
LABEL_99:
          v12 = v219;
          goto LABEL_100;
        }
        v95 = __rev16(v94);
        v224 = v15;
        LOBYTE(v203) = 0;
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:useExtendedLength:error:", 128, 176, 0, 0, 0, v95, 0, v203, &v224));
        v11 = v224;

        if (v41)
        {
          if (objc_msgSend(v41, "status") == 36864)
          {
            v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "data"));
            v40 = objc_msgSend(v96, "length");

            if (v40)
            {
              v97 = objc_alloc((Class)NSData);
              v32 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "data"));
              v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "subdataWithRange:", 0, v95));
              v40 = objc_msgSend(v97, "initWithData:", v98);

              v12 = v219;
LABEL_96:
              v31 = v215;
              goto LABEL_53;
            }
            v15 = v11;
            v14 = v41;
            goto LABEL_99;
          }
          v163 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v164 = NFLogGetLogger(v163);
          if (v164)
          {
            v165 = (void (*)(uint64_t, const char *, ...))v164;
            v166 = object_getClass(a1);
            v167 = class_isMetaClass(v166);
            v168 = object_getClassName(a1);
            v169 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
            v210 = objc_msgSend(v41, "status");
            v170 = 45;
            if (v167)
              v170 = 43;
            v165(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v170, v168, v169, 895, v210);
          }
          v171 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v172 = NFSharedLogGetLogger(v171);
          v173 = objc_claimAutoreleasedReturnValue(v172);
          v31 = v215;
          if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
          {
            v174 = object_getClass(a1);
            if (class_isMetaClass(v174))
              v175 = 43;
            else
              v175 = 45;
            v176 = object_getClassName(a1);
            v177 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
            v178 = objc_msgSend(v41, "status");
            *(_DWORD *)buf = 67110146;
            v245 = v175;
            v246 = 2082;
            v247 = v176;
            v248 = 2082;
            v249 = v177;
            v250 = 1024;
            v251 = 895;
            v252 = 1024;
            LODWORD(v253) = v178;
            _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
          }

          if (a5)
          {
            v179 = objc_alloc((Class)NSError);
            v32 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v12 = v219;
            if (v11)
            {
              sel = (SEL)objc_msgSend(v11, "code");
              v228[0] = NSLocalizedDescriptionKey;
              v218 = a5;
              v180 = v179;
              if ((uint64_t)objc_msgSend(v11, "code") > 70)
                v181 = 71;
              else
                v181 = (uint64_t)objc_msgSend(v11, "code");
              v197 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v181]));
              v229[0] = v197;
              v229[1] = v11;
              v228[1] = NSUnderlyingErrorKey;
              v228[2] = CFSTR("Line");
              v229[2] = &off_100303C20;
              v228[3] = CFSTR("Method");
              v198 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"));
              v229[3] = v198;
              v228[4] = NSDebugDescriptionErrorKey;
              v199 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"), 898);
              v229[4] = v199;
              v200 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v229, v228, 5));
              v201 = objc_retainAutorelease(objc_msgSend(v180, "initWithDomain:code:userInfo:", v32, sel, v200));
              *v218 = v201;

LABEL_137:
              v40 = 0;
              goto LABEL_96;
            }
            v226[0] = NSLocalizedDescriptionKey;
            sela = (char *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
            v227[0] = sela;
            v227[1] = &off_100303C20;
            v226[1] = CFSTR("Line");
            v226[2] = CFSTR("Method");
            v191 = v179;
            v192 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"));
            v227[2] = v192;
            v226[3] = NSDebugDescriptionErrorKey;
            v193 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"), 898);
            v227[3] = v193;
            v194 = a5;
            v195 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v227, v226, 4));
            v196 = objc_retainAutorelease(objc_msgSend(v191, "initWithDomain:code:userInfo:", v32, 16, v195));
            *v194 = v196;

            v11 = 0;
LABEL_52:
            v40 = 0;
            goto LABEL_53;
          }
          v40 = 0;
          v15 = v11;
          v14 = v41;
LABEL_130:
          v12 = v219;
          goto LABEL_54;
        }
        v147 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v148 = NFLogGetLogger(v147);
        if (v148)
        {
          v149 = (void (*)(uint64_t, const char *, ...))v148;
          v150 = object_getClass(a1);
          v151 = class_isMetaClass(v150);
          v204 = object_getClassName(a1);
          v207 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
          v152 = 45;
          if (v151)
            v152 = 43;
          v149(3, "%c[%{public}s %{public}s]:%i Read binary failed: %{public}@", v152, v204, v207, 888, v11);
        }
        v153 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v154 = NFSharedLogGetLogger(v153);
        v155 = objc_claimAutoreleasedReturnValue(v154);
        v31 = v215;
        if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
        {
          v156 = object_getClass(a1);
          if (class_isMetaClass(v156))
            v157 = 43;
          else
            v157 = 45;
          v158 = object_getClassName(a1);
          v159 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
          *(_DWORD *)buf = 67110146;
          v245 = v157;
          v246 = 2082;
          v247 = v158;
          v248 = 2082;
          v249 = v159;
          v250 = 1024;
          v251 = 888;
          v252 = 2114;
          v253 = v11;
          _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Read binary failed: %{public}@", buf, 0x2Cu);
        }

        if (!a5)
        {
          v14 = 0;
          v40 = 0;
          v15 = v11;
          goto LABEL_130;
        }
        v160 = objc_alloc((Class)NSError);
        v32 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v12 = v219;
        if (v11)
        {
          v161 = objc_msgSend(v11, "code");
          v232[0] = NSLocalizedDescriptionKey;
          v217 = a5;
          if ((uint64_t)objc_msgSend(v11, "code") > 70)
            v162 = 71;
          else
            v162 = (uint64_t)objc_msgSend(v11, "code");
          v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v162]));
          v233[0] = v186;
          v233[1] = v11;
          v232[1] = NSUnderlyingErrorKey;
          v232[2] = CFSTR("Line");
          v233[2] = &off_100303C08;
          v232[3] = CFSTR("Method");
          v187 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"));
          v233[3] = v187;
          v232[4] = NSDebugDescriptionErrorKey;
          v188 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"), 890);
          v233[4] = v188;
          v189 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v233, v232, 5));
          v190 = objc_retainAutorelease(objc_msgSend(v160, "initWithDomain:code:userInfo:", v32, v161, v189));
          *v217 = v190;

          v41 = 0;
          goto LABEL_137;
        }
        v230[0] = NSLocalizedDescriptionKey;
        v214 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        v231[0] = v214;
        v231[1] = &off_100303C08;
        v230[1] = CFSTR("Line");
        v230[2] = CFSTR("Method");
        v182 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"));
        v231[2] = v182;
        v230[3] = NSDebugDescriptionErrorKey;
        v183 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"), 890);
        v231[3] = v183;
        v184 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v231, v230, 4));
        v185 = objc_retainAutorelease(objc_msgSend(v160, "initWithDomain:code:userInfo:", v32, 16, v184));
        *a5 = v185;

        goto LABEL_67;
      }
      v125 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v126 = NFLogGetLogger(v125);
      if (v126)
      {
        v127 = (void (*)(uint64_t, const char *, ...))v126;
        v128 = object_getClass(a1);
        v211 = class_isMetaClass(v128);
        v212 = object_getClassName(a1);
        v129 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
        v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "response"));
        v209 = objc_msgSend(v130, "length");
        v131 = 45;
        if (v211)
          v131 = 43;
        v127(3, "%c[%{public}s %{public}s]:%i Unexpected response length %lu", v131, v212, v129, 864, v209);

      }
      v132 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v133 = NFSharedLogGetLogger(v132);
      v134 = objc_claimAutoreleasedReturnValue(v133);
      if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
      {
        v135 = object_getClass(a1);
        v136 = v12;
        if (class_isMetaClass(v135))
          v137 = 43;
        else
          v137 = 45;
        v138 = object_getClassName(a1);
        v139 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
        v140 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "response"));
        v141 = objc_msgSend(v140, "length");
        *(_DWORD *)buf = 67110146;
        v245 = v137;
        v12 = v136;
        v246 = 2082;
        v247 = v138;
        v248 = 2082;
        v249 = v139;
        v250 = 1024;
        v251 = 864;
        v252 = 2048;
        v253 = v141;
        _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected response length %lu", buf, 0x2Cu);

      }
      if (a5)
      {
        v213 = objc_alloc((Class)NSError);
        v32 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v234[0] = NSLocalizedDescriptionKey;
        v142 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        v235[0] = v142;
        v235[1] = &off_100303BF0;
        v234[1] = CFSTR("Line");
        v234[2] = CFSTR("Method");
        v143 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"));
        v235[2] = v143;
        v234[3] = NSDebugDescriptionErrorKey;
        v144 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"), 866);
        v235[3] = v144;
        v145 = a5;
        v146 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v235, v234, 4));
        *v145 = objc_msgSend(v213, "initWithDomain:code:userInfo:", v32, 16, v146);

        v40 = 0;
        goto LABEL_95;
      }
    }
    else if (v92)
    {
      v124 = objc_alloc((Class)NSData);
      v32 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "response"));
      v40 = objc_msgSend(v124, "initWithData:", v32);
LABEL_95:
      v11 = v15;
      v41 = v14;
      goto LABEL_96;
    }
    v40 = 0;
LABEL_100:
    v31 = v215;
    goto LABEL_54;
  }
  v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v43 = NFLogGetLogger(v42);
  if (v43)
  {
    v44 = (void (*)(uint64_t, const char *, ...))v43;
    v45 = object_getClass(a1);
    v46 = class_isMetaClass(v45);
    v47 = object_getClassName(a1);
    v48 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v223, "identifier"));
    v50 = 45;
    if (v46)
      v50 = 43;
    v44(3, "%c[%{public}s %{public}s]:%i Failed to select %{public}@", v50, v47, v48, 801, v49);

  }
  v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v52 = NFSharedLogGetLogger(v51);
  v53 = objc_claimAutoreleasedReturnValue(v52);
  if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
  {
    v54 = object_getClass(a1);
    if (class_isMetaClass(v54))
      v55 = 43;
    else
      v55 = 45;
    v56 = object_getClassName(a1);
    v57 = sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:");
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v223, "identifier"));
    *(_DWORD *)buf = 67110146;
    v245 = v55;
    v246 = 2082;
    v247 = v56;
    v248 = 2082;
    v249 = v57;
    v250 = 1024;
    v251 = 801;
    v252 = 2114;
    v253 = v58;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select %{public}@", buf, 0x2Cu);

  }
  if (a5)
  {
    v59 = objc_alloc((Class)NSError);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v11)
    {
      v60 = objc_msgSend(v11, "code");
      v258[0] = NSLocalizedDescriptionKey;
      v61 = a5;
      if ((uint64_t)objc_msgSend(v11, "code") > 70)
        v62 = 71;
      else
        v62 = (uint64_t)objc_msgSend(v11, "code");
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v62]));
      v259[0] = v31;
      v259[1] = v11;
      v258[1] = NSUnderlyingErrorKey;
      v258[2] = CFSTR("Line");
      v259[2] = &off_100303B90;
      v258[3] = CFSTR("Method");
      v32 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"));
      v259[3] = v32;
      v258[4] = NSDebugDescriptionErrorKey;
      v82 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"), 803);
      v259[4] = v82;
      v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v259, v258, 5));
      v85 = objc_retainAutorelease(objc_msgSend(v59, "initWithDomain:code:userInfo:", v12, v60, v84));
      *v61 = v85;
    }
    else
    {
      v256[0] = NSLocalizedDescriptionKey;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v257[0] = v31;
      v257[1] = &off_100303B90;
      v256[1] = CFSTR("Line");
      v256[2] = CFSTR("Method");
      v32 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"));
      v257[2] = v32;
      v256[3] = NSDebugDescriptionErrorKey;
      v82 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_readTransactionCodesForContactless:forIdentifier:onApplet:outError:"), 803);
      v257[3] = v82;
      v83 = a5;
      v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v257, v256, 4));
      v85 = objc_retainAutorelease(objc_msgSend(v59, "initWithDomain:code:userInfo:", v12, 15, v84));
      *v83 = v85;
    }

    goto LABEL_51;
  }
  v14 = 0;
  v40 = 0;
LABEL_56:

  return v40;
}

id sub_1002330BC(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  int v11;
  id v12;
  id v13;

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "length");
  if (v5 == objc_msgSend(v4, "length"))
  {
    v6 = objc_msgSend(v3, "mutableCopy");
    v7 = objc_msgSend(v4, "mutableCopy");
    if (objc_msgSend(v6, "length"))
    {
      v8 = 0;
      do
      {
        if (objc_msgSend(v7, "length"))
        {
          v9 = 0;
          while (1)
          {
            v10 = objc_retainAutorelease(v6);
            v11 = *((unsigned __int8 *)objc_msgSend(v10, "mutableBytes") + v8);
            v12 = objc_retainAutorelease(v7);
            if (v11 == *((unsigned __int8 *)objc_msgSend(v12, "mutableBytes") + v9))
              break;
            if ((unint64_t)objc_msgSend(v12, "length") <= ++v9)
              goto LABEL_10;
          }
          *((_BYTE *)objc_msgSend(objc_retainAutorelease(v10), "mutableBytes") + v8) = 0;
          *((_BYTE *)objc_msgSend(objc_retainAutorelease(v12), "mutableBytes") + v9) = 0;
        }
LABEL_10:
        ++v8;
      }
      while ((unint64_t)objc_msgSend(v6, "length") > v8);
    }
    v13 = objc_msgSend(v6, "isEqual:", v7);

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

id sub_100233204(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, unsigned int a7)
{
  NSObject *v13;
  id v14;
  id v15;
  void *specific;
  uint64_t Logger;
  void (*v18)(_QWORD, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  id v26;
  id v27;
  int v28;
  id v29;
  void *v30;
  NSObject *v31;
  NSObject *v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void (*v40)(_QWORD, const char *, ...);
  objc_class *v41;
  _BOOL4 v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  objc_class *v48;
  id v49;
  id v50;
  int v51;
  const char *v52;
  const char *v53;
  id v54;
  NSObject *v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  NSObject *v61;
  unsigned int v62;
  unsigned int v63;
  id v64;
  char v65;
  void *v66;
  uint64_t v67;
  void (*v68)(_QWORD, const char *, ...);
  objc_class *v69;
  _BOOL4 v70;
  id v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  NSObject *v76;
  objc_class *v77;
  id v78;
  int v79;
  const char *v80;
  const char *v81;
  id v82;
  void *v83;
  NSObject *v84;
  NSObject *v85;
  id v86;
  void *v87;
  id v88;
  uint64_t v89;
  void *v90;
  id v91;
  id v92;
  void *v93;
  void *v95;
  uint64_t v96;
  void (*v97)(_QWORD, const char *, ...);
  objc_class *v98;
  _BOOL4 v99;
  id v100;
  const char *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  NSObject *v105;
  objc_class *v106;
  id v107;
  int v108;
  const char *v109;
  const char *v110;
  objc_class *v111;
  _BOOL4 v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  NSObject *v117;
  objc_class *v118;
  int v119;
  const char *v120;
  const char *v121;
  NSMutableData *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  id v129;
  id v130;
  NSObject *v131;
  uint64_t v132;
  NSObject *v133;
  id v134;
  uint64_t v135;
  id v136;
  uint64_t v137;
  unsigned __int8 v138;
  NSObject *v139;
  NSObject *v140;
  void *v141;
  id v142;
  NSObject *v143;
  void *v144;
  NSObject *v145;
  void *v146;
  uint64_t v147;
  void (*v148)(_QWORD, const char *, ...);
  objc_class *v149;
  _BOOL4 v150;
  const char *v151;
  const char *v152;
  void *v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  NSObject *v157;
  NSObject *v158;
  objc_class *v159;
  int v160;
  const char *v161;
  const char *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  id v168;
  void *v169;
  id v170;
  id v171;
  void *v172;
  void *v173;
  uint64_t v174;
  void (*v175)(_QWORD, const char *, ...);
  objc_class *v176;
  _BOOL4 v177;
  const char *v178;
  id v179;
  const char *v180;
  void *v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  NSObject *v185;
  objc_class *v186;
  int v187;
  const char *v188;
  const char *v189;
  id v190;
  void *v191;
  id v192;
  void *v193;
  id v194;
  uint64_t v195;
  void *v196;
  id v197;
  id v198;
  void *v199;
  void *v200;
  void *v201;
  id v202;
  void *v203;
  uint64_t v204;
  void (*v205)(_QWORD, const char *, ...);
  objc_class *v206;
  _BOOL4 v207;
  const char *v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  NSObject *v212;
  objc_class *v213;
  int v214;
  const char *v215;
  const char *v216;
  id v217;
  id v218;
  void *v219;
  id v220;
  id v221;
  uint64_t v222;
  NSObject *v223;
  id v224;
  void *v225;
  void *v226;
  void *v227;
  uint64_t v228;
  void (*v229)(_QWORD, const char *, ...);
  objc_class *v230;
  _BOOL4 v231;
  id v232;
  const char *v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  NSObject *v237;
  objc_class *v238;
  id v239;
  int v240;
  const char *v241;
  const char *v242;
  unsigned int v243;
  NSErrorUserInfoKey v244;
  NSErrorUserInfoKey v245;
  id v246;
  id v247;
  void *v248;
  void *v249;
  id v250;
  id v251;
  void *v252;
  id v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  id v260;
  uint64_t v261;
  id v262;
  void *v263;
  const char *ClassName;
  const char *v265;
  const char *v266;
  const char *v267;
  const char *Name;
  const char *v269;
  const char *v270;
  const char *v271;
  const char *v272;
  const char *v273;
  const char *v274;
  const char *v275;
  uint64_t v276;
  id v277;
  id v278;
  void *v279;
  void *v280;
  NSMutableData *v281;
  void *v282;
  void *v283;
  unsigned int v284;
  void *v285;
  NSObject *v286;
  const char *v287;
  void *v288;
  void *v289;
  void *v290;
  id v291;
  id v292;
  id v293;
  id v294;
  NSObject *v295;
  id v296;
  NSObject *v297;
  id v298;
  char v299;
  int v300;
  unsigned __int8 v301;
  id v302;
  id v303;
  _QWORD v304[4];
  _QWORD v305[4];
  _QWORD v306[3];
  _QWORD v307[3];
  _QWORD v308[4];
  _QWORD v309[4];
  NSErrorUserInfoKey v310;
  void *v311;
  _QWORD v312[5];
  _QWORD v313[5];
  _QWORD v314[2];
  _QWORD v315[2];
  _QWORD v316[4];
  _QWORD v317[4];
  _QWORD v318[5];
  _QWORD v319[5];
  _QWORD v320[5];
  _QWORD v321[5];
  _QWORD v322[5];
  _QWORD v323[5];
  _QWORD v324[5];
  _QWORD v325[5];
  _QWORD v326[4];
  _QWORD v327[4];
  uint8_t buf[4];
  int v329;
  __int16 v330;
  const char *v331;
  __int16 v332;
  const char *v333;
  __int16 v334;
  int v335;
  __int16 v336;
  void *v337;
  __int16 v338;
  NSObject *v339;
  __int16 v340;
  id v341;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v296 = a5;
  v294 = a6;
  v295 = v13;
  if (!a1)
  {
    v59 = 0;
    v60 = v294;
    goto LABEL_42;
  }
  v284 = a7;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v18 = (void (*)(_QWORD, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
    v21 = 43;
    if (!isMetaClass)
      v21 = 45;
    v18(6, "%c[%{public}s %{public}s]:%i setup key %{public}@ with contactless TC %{public}@ ; wired TC %{public}@",
      v21,
      ClassName,
      Name,
      944,
      v15,
      v13,
      v14);
  }
  v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v23 = NFSharedLogGetLogger(v22);
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v25 = object_getClass(a1);
    v26 = v15;
    v27 = v14;
    if (class_isMetaClass(v25))
      v28 = 43;
    else
      v28 = 45;
    *(_DWORD *)buf = 67110658;
    v329 = v28;
    v14 = v27;
    v15 = v26;
    v330 = 2082;
    v331 = object_getClassName(a1);
    v332 = 2082;
    v333 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
    v334 = 1024;
    v335 = 944;
    v336 = 2114;
    v337 = v26;
    v338 = 2114;
    v339 = v13;
    v340 = 2114;
    v341 = v14;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i setup key %{public}@ with contactless TC %{public}@ ; wired TC %{public}@",
      buf,
      0x40u);
  }

  if (!v13)
  {
    v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v39 = NFLogGetLogger(v38);
    if (v39)
    {
      v40 = (void (*)(_QWORD, const char *, ...))v39;
      v41 = object_getClass(a1);
      v42 = class_isMetaClass(v41);
      v43 = object_getClassName(a1);
      v269 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
      v44 = 45;
      if (v42)
        v44 = 43;
      v40(3, "%c[%{public}s %{public}s]:%i contactless transaction codes can't be nil", v44, v43, v269, 947);
    }
    v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v46 = NFSharedLogGetLogger(v45);
    v47 = objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      v48 = object_getClass(a1);
      v49 = v15;
      v50 = v14;
      if (class_isMetaClass(v48))
        v51 = 43;
      else
        v51 = 45;
      v52 = object_getClassName(a1);
      v53 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
      *(_DWORD *)buf = 67109890;
      v329 = v51;
      v14 = v50;
      v15 = v49;
      v330 = 2082;
      v331 = v52;
      v332 = 2082;
      v333 = v53;
      v334 = 1024;
      v335 = 947;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i contactless transaction codes can't be nil", buf, 0x22u);
    }

    v54 = objc_alloc((Class)NSError);
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v326[0] = NSLocalizedDescriptionKey;
    v55 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
    v327[0] = v55;
    v327[1] = &off_100303C38;
    v326[1] = CFSTR("Line");
    v326[2] = CFSTR("Method");
    v56 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"));
    v327[2] = v56;
    v326[3] = NSDebugDescriptionErrorKey;
    v57 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"), 948);
    v327[3] = v57;
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v327, v326, 4));
    v59 = objc_msgSend(v54, "initWithDomain:code:userInfo:", v30, 10, v58);

    v60 = v294;
    goto LABEL_41;
  }
  v303 = 0;
  v29 = sub_100231554(a1, 1, v15, v296, &v303);
  v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  v31 = v303;
  if (v31)
  {
    v32 = v31;
    v288 = v30;
    v33 = objc_alloc((Class)NSError);
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v35 = -[NSObject code](v32, "code");
    v324[0] = NSLocalizedDescriptionKey;
    v291 = v15;
    v36 = v14;
    if ((uint64_t)-[NSObject code](v32, "code") > 70)
      v37 = 71;
    else
      v37 = (uint64_t)-[NSObject code](v32, "code");
    v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v37]));
    v325[0] = v90;
    v325[1] = v32;
    v324[1] = NSUnderlyingErrorKey;
    v324[2] = CFSTR("Line");
    v325[2] = &off_100303C50;
    v324[3] = CFSTR("Method");
    v91 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"));
    v325[3] = v91;
    v324[4] = NSDebugDescriptionErrorKey;
    v92 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"), 956);
    v325[4] = v92;
    v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v325, v324, 5));
    v59 = objc_msgSend(v33, "initWithDomain:code:userInfo:", v34, v35, v93);

    v14 = v36;
    v30 = v288;
    v15 = v291;
    v60 = v294;
    v55 = v32;
    goto LABEL_41;
  }
  v61 = v295;
  v62 = sub_1002330BC(v295, v30);
  v63 = v62;
  v64 = v14;
  v65 = 0;
  v283 = v64;
  if (v64 && v62)
  {
    v66 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v67 = NFLogGetLogger(v66);
    if (v67)
    {
      v68 = (void (*)(_QWORD, const char *, ...))v67;
      v69 = object_getClass(a1);
      v70 = class_isMetaClass(v69);
      v71 = v15;
      v72 = object_getClassName(a1);
      v270 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
      v73 = 45;
      if (v70)
        v73 = 43;
      v265 = v72;
      v15 = v71;
      v68(6, "%c[%{public}s %{public}s]:%i contactless TC already set", v73, v265, v270, 963);
    }
    v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v75 = NFSharedLogGetLogger(v74);
    v76 = objc_claimAutoreleasedReturnValue(v75);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      v77 = object_getClass(a1);
      v78 = v15;
      if (class_isMetaClass(v77))
        v79 = 43;
      else
        v79 = 45;
      v80 = object_getClassName(a1);
      v81 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
      *(_DWORD *)buf = 67109890;
      v329 = v79;
      v15 = v78;
      v330 = 2082;
      v331 = v80;
      v332 = 2082;
      v333 = v81;
      v334 = 1024;
      v335 = 963;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i contactless TC already set", buf, 0x22u);
    }

    v302 = 0;
    v82 = sub_100231554(a1, 0, v15, v296, &v302);
    v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
    v84 = v302;
    if (v84)
    {
      v85 = v84;
      v285 = v83;
      v289 = v30;
      v86 = objc_alloc((Class)NSError);
      v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v88 = -[NSObject code](v85, "code");
      v322[0] = NSLocalizedDescriptionKey;
      v292 = v15;
      if ((uint64_t)-[NSObject code](v85, "code") > 70)
        v89 = 71;
      else
        v89 = (uint64_t)-[NSObject code](v85, "code");
      v169 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v89]));
      v323[0] = v169;
      v323[1] = v85;
      v322[1] = NSUnderlyingErrorKey;
      v322[2] = CFSTR("Line");
      v323[2] = &off_100303C68;
      v322[3] = CFSTR("Method");
      v170 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"));
      v323[3] = v170;
      v322[4] = NSDebugDescriptionErrorKey;
      v171 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"), 969);
      v323[4] = v171;
      v172 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v323, v322, 5));
      v59 = objc_msgSend(v86, "initWithDomain:code:userInfo:", v87, v88, v172);

      v14 = v283;
      v30 = v289;
      v15 = v292;
      v60 = v294;
      v55 = v85;
      goto LABEL_41;
    }
    v65 = sub_1002330BC(v283, v83) ^ 1;

    v61 = v295;
  }
  v95 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v96 = NFLogGetLogger(v95);
  v97 = (void (*)(_QWORD, const char *, ...))v96;
  if (v63 && (v65 & 1) == 0)
  {
    if (v96)
    {
      v98 = object_getClass(a1);
      v99 = class_isMetaClass(v98);
      v100 = v15;
      v101 = object_getClassName(a1);
      v271 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
      v102 = 45;
      if (v99)
        v102 = 43;
      v266 = v101;
      v15 = v100;
      v97(6, "%c[%{public}s %{public}s]:%i TC already set - bailing", v102, v266, v271, 976);
    }
    v103 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v104 = NFSharedLogGetLogger(v103);
    v105 = objc_claimAutoreleasedReturnValue(v104);
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
    {
      v106 = object_getClass(a1);
      v107 = v15;
      if (class_isMetaClass(v106))
        v108 = 43;
      else
        v108 = 45;
      v109 = object_getClassName(a1);
      v110 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
      *(_DWORD *)buf = 67109890;
      v329 = v108;
      v15 = v107;
      v330 = 2082;
      v331 = v109;
      v332 = 2082;
      v333 = v110;
      v334 = 1024;
      v335 = 976;
      _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i TC already set - bailing", buf, 0x22u);
    }
    v59 = 0;
    v14 = v283;
    v60 = v294;
    v55 = v105;
    goto LABEL_41;
  }
  v290 = v30;
  v293 = v15;
  if (v96)
  {
    v111 = object_getClass(a1);
    v112 = class_isMetaClass(v111);
    v113 = object_getClassName(a1);
    v272 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
    v114 = 45;
    if (v112)
      v114 = 43;
    v97(6, "%c[%{public}s %{public}s]:%i TC are not set - changing", v114, v113, v272, 980);
  }
  v115 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v116 = NFSharedLogGetLogger(v115);
  v117 = objc_claimAutoreleasedReturnValue(v116);
  if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
  {
    v118 = object_getClass(a1);
    if (class_isMetaClass(v118))
      v119 = 43;
    else
      v119 = 45;
    v120 = object_getClassName(a1);
    v121 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
    *(_DWORD *)buf = 67109890;
    v329 = v119;
    v330 = 2082;
    v331 = v120;
    v332 = 2082;
    v333 = v121;
    v334 = 1024;
    v335 = 980;
    _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i TC are not set - changing", buf, 0x22u);
  }

  v122 = objc_opt_new(NSMutableData);
  v280 = (void *)objc_claimAutoreleasedReturnValue(+[NSData NF_dataWithHexString:](NSData, "NF_dataWithHexString:", v293));
  v123 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 80));
  v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "asData"));
  -[NSMutableData appendData:](v122, "appendData:", v124);

  v125 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 132, v61));
  v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "asData"));
  -[NSMutableData appendData:](v122, "appendData:", v126);

  if (v283)
  {
    v127 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 133));

    v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "asData"));
    -[NSMutableData appendData:](v122, "appendData:", v128);

    v125 = v127;
  }
  v129 = objc_alloc((Class)NSMutableData);
  v300 = 32384;
  v301 = -[NSMutableData length](v122, "length");
  v130 = objc_msgSend(v129, "initWithBytes:length:", &v300, 5);
  objc_msgSend(v130, "appendData:", v122);
  v60 = v294;
  v281 = v122;
  v279 = v125;
  if (!v294
    || (v131 = sub_1001E121C(a1, v130, v296, 1, v294, v284), (v132 = objc_claimAutoreleasedReturnValue(v131)) == 0))
  {
    v299 = 0;
    objc_msgSend(v130, "appendBytes:length:", &v299, 1);
    v298 = 0;
    v138 = objc_msgSend(a1, "selectApplet:error:", v296, &v298);
    v139 = v298;
    v140 = v139;
    if ((v138 & 1) != 0)
    {
      v297 = v139;
      v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "transceiveData:toOS:error:", v130, 0, &v297));
      v142 = v130;
      v143 = v297;

      v144 = (void *)objc_claimAutoreleasedReturnValue(+[NFResponseAPDU responseWithData:](NFResponseAPDU, "responseWithData:", v141));
      v282 = v144;
      if (v143)
      {
        v145 = v143;
        v277 = v142;
        v146 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v147 = NFLogGetLogger(v146);
        if (v147)
        {
          v148 = (void (*)(_QWORD, const char *, ...))v147;
          v149 = object_getClass(a1);
          v150 = class_isMetaClass(v149);
          v151 = object_getClassName(a1);
          v152 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
          v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v296, "identifier"));
          v154 = 45;
          if (v150)
            v154 = 43;
          v148(3, "%c[%{public}s %{public}s]:%i SETUP_ENDPOINT to %{public}@ failed: %{public}@", v154, v151, v152, 1026, v153, v145);

        }
        v155 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v156 = NFSharedLogGetLogger(v155);
        v157 = objc_claimAutoreleasedReturnValue(v156);
        v158 = v145;
        if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
        {
          v159 = object_getClass(a1);
          if (class_isMetaClass(v159))
            v160 = 43;
          else
            v160 = 45;
          v161 = object_getClassName(a1);
          v162 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
          v163 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v296, "identifier"));
          *(_DWORD *)buf = 67110402;
          v329 = v160;
          v330 = 2082;
          v331 = v161;
          v332 = 2082;
          v333 = v162;
          v334 = 1024;
          v335 = 1026;
          v336 = 2114;
          v337 = v163;
          v338 = 2114;
          v339 = v145;
          _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i SETUP_ENDPOINT to %{public}@ failed: %{public}@", buf, 0x36u);

        }
        v164 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v296, "identifier"));
        v165 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Applet AID: %@, keyID: %@"), v164, v293));
        v314[0] = CFSTR("Applet Identifier");
        v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v296, "identifier"));
        v314[1] = CFSTR("FailureKey");
        v315[0] = v166;
        v315[1] = CFSTR("ttrContactless");
        v167 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v315, v314, 2));
        sub_100187CDC((uint64_t)NFBugCapture, CFSTR("Failed to set endpoint transaction codes"), v165, v167);

        if (v282)
          v168 = objc_msgSend(v282, "status");
        else
          v168 = 0;
        +[NFExceptionsCALogger postAnalyticsContactlessErrorsEvent:status:error:](NFExceptionsCALogger, "postAnalyticsContactlessErrorsEvent:status:error:", 2, v168, v145);
        v220 = objc_alloc((Class)NSError);
        v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v221 = -[NSObject code](v158, "code");
        v312[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)-[NSObject code](v158, "code") > 70)
          v222 = 71;
        else
          v222 = (uint64_t)-[NSObject code](v158, "code");
        v223 = v158;
        v196 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v222]));
        v313[0] = v196;
        v313[1] = v223;
        v312[1] = NSUnderlyingErrorKey;
        v312[2] = CFSTR("Line");
        v313[2] = &off_100303CB0;
        v312[3] = CFSTR("Method");
        v197 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"));
        v313[3] = v197;
        v312[4] = NSDebugDescriptionErrorKey;
        v224 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"), 1034);
        v313[4] = v224;
        v225 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v313, v312, 5));
        v59 = objc_msgSend(v220, "initWithDomain:code:userInfo:", v193, v221, v225);

        v286 = v223;
        goto LABEL_121;
      }
      v15 = v293;
      if (objc_msgSend(v144, "status") == 28181)
      {
        v203 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v204 = NFLogGetLogger(v203);
        v130 = v142;
        if (v204)
        {
          v205 = (void (*)(_QWORD, const char *, ...))v204;
          v206 = object_getClass(a1);
          v207 = class_isMetaClass(v206);
          v208 = object_getClassName(a1);
          v274 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
          v209 = 45;
          if (v207)
            v209 = 43;
          v267 = v208;
          v15 = v293;
          v205(5, "%c[%{public}s %{public}s]:%i Endpoint not found", v209, v267, v274, 1038);
        }
        v210 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v211 = NFSharedLogGetLogger(v210);
        v212 = objc_claimAutoreleasedReturnValue(v211);
        if (os_log_type_enabled(v212, OS_LOG_TYPE_DEFAULT))
        {
          v213 = object_getClass(a1);
          if (class_isMetaClass(v213))
            v214 = 43;
          else
            v214 = 45;
          v215 = object_getClassName(a1);
          v216 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
          *(_DWORD *)buf = 67109890;
          v329 = v214;
          v15 = v293;
          v330 = 2082;
          v331 = v215;
          v332 = 2082;
          v333 = v216;
          v334 = 1024;
          v335 = 1038;
          _os_log_impl((void *)&_mh_execute_header, v212, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Endpoint not found", buf, 0x22u);
        }

        v217 = objc_alloc((Class)NSError);
        v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v310 = NSLocalizedDescriptionKey;
        v196 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Not found"));
        v311 = v196;
        v197 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v311, &v310, 1));
        v59 = objc_msgSend(v217, "initWithDomain:code:userInfo:", v193, 65, v197);
        v286 = 0;
        goto LABEL_122;
      }
      v130 = v142;
      if (objc_msgSend(v144, "status") == 36864)
      {
        v55 = 0;
        v59 = 0;
        v14 = v283;
        v30 = v290;
        goto LABEL_123;
      }
      v226 = v144;
      v227 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v228 = NFLogGetLogger(v227);
      if (v228)
      {
        v229 = (void (*)(_QWORD, const char *, ...))v228;
        v230 = object_getClass(a1);
        v231 = class_isMetaClass(v230);
        v287 = object_getClassName(a1);
        v232 = v130;
        v233 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
        v276 = objc_msgSend(v226, "status");
        v275 = v233;
        v130 = v232;
        v234 = 45;
        if (v231)
          v234 = 43;
        v229(3, "%c[%{public}s %{public}s]:%i Failed to execute opaque data, resp: 0x%04X", v234, v287, v275, 1044, v276);
      }
      v235 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v236 = NFSharedLogGetLogger(v235);
      v237 = objc_claimAutoreleasedReturnValue(v236);
      if (os_log_type_enabled(v237, OS_LOG_TYPE_ERROR))
      {
        v238 = object_getClass(a1);
        v239 = v130;
        if (class_isMetaClass(v238))
          v240 = 43;
        else
          v240 = 45;
        v241 = object_getClassName(a1);
        v242 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
        v243 = objc_msgSend(v226, "status");
        *(_DWORD *)buf = 67110146;
        v329 = v240;
        v130 = v239;
        v330 = 2082;
        v331 = v241;
        v332 = 2082;
        v333 = v242;
        v334 = 1024;
        v335 = 1044;
        v336 = 1024;
        LODWORD(v337) = v243;
        _os_log_impl((void *)&_mh_execute_header, v237, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to execute opaque data, resp: 0x%04X", buf, 0x28u);
      }

      if (objc_msgSend(v226, "status") == 26880)
      {
        v244 = NSLocalizedDescriptionKey;
        v245 = NSDebugDescriptionErrorKey;
      }
      else
      {
        v246 = objc_msgSend(v226, "status");
        v247 = objc_alloc((Class)NSError);
        v278 = v130;
        v248 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v308[0] = NSLocalizedDescriptionKey;
        v249 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
        v309[0] = v249;
        v309[1] = &off_100303CC8;
        v308[1] = CFSTR("Line");
        v308[2] = CFSTR("Method");
        v250 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"));
        v309[2] = v250;
        v245 = NSDebugDescriptionErrorKey;
        v308[3] = NSDebugDescriptionErrorKey;
        v251 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"), 1048);
        v309[3] = v251;
        v252 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v309, v308, 4));
        v253 = objc_msgSend(v247, "initWithDomain:code:userInfo:", v248, 16, v252);
        +[NFExceptionsCALogger postAnalyticsContactlessErrorsEvent:status:error:](NFExceptionsCALogger, "postAnalyticsContactlessErrorsEvent:status:error:", 2, v246, v253);

        v254 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v296, "identifier"));
        v255 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Applet AID: %@, keyID: %@, Response: 0x%04X"), v254, v293, objc_msgSend(v226, "status")));
        v306[0] = CFSTR("Applet Identifier");
        v256 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v296, "identifier"));
        v307[0] = v256;
        v306[1] = CFSTR("Response");
        v257 = v226;
        v244 = NSLocalizedDescriptionKey;
        v258 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%04X"), objc_msgSend(v257, "status")));
        v306[2] = CFSTR("FailureKey");
        v307[1] = v258;
        v307[2] = CFSTR("ttrContactless");
        v259 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v307, v306, 3));
        v130 = v278;
        sub_100187CDC((uint64_t)NFBugCapture, CFSTR("Failed to set endpoint transaction codes"), v255, v259);

      }
      v260 = objc_alloc((Class)NSError);
      v261 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v304[0] = v244;
      v196 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
      v305[0] = v196;
      v305[1] = &off_100303CE0;
      v304[1] = CFSTR("Line");
      v304[2] = CFSTR("Method");
      v197 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"));
      v305[2] = v197;
      v304[3] = v245;
      v193 = (void *)v261;
      v262 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"), 1055);
      v305[3] = v262;
      v263 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v305, v304, 4));
      v59 = objc_msgSend(v260, "initWithDomain:code:userInfo:", v261, 16, v263);

    }
    else
    {
      v286 = v139;
      v173 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v174 = NFLogGetLogger(v173);
      if (v174)
      {
        v175 = (void (*)(_QWORD, const char *, ...))v174;
        v176 = object_getClass(a1);
        v177 = class_isMetaClass(v176);
        v178 = object_getClassName(a1);
        v179 = v130;
        v180 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
        v181 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v296, "identifier"));
        v273 = v180;
        v130 = v179;
        v182 = 45;
        if (v177)
          v182 = 43;
        v175(3, "%c[%{public}s %{public}s]:%i Failed to select %{public}@", v182, v178, v273, 1020, v181);

      }
      v183 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v184 = NFSharedLogGetLogger(v183);
      v185 = objc_claimAutoreleasedReturnValue(v184);
      if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
      {
        v186 = object_getClass(a1);
        if (class_isMetaClass(v186))
          v187 = 43;
        else
          v187 = 45;
        v188 = object_getClassName(a1);
        v189 = sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:");
        v190 = v130;
        v191 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v296, "identifier"));
        *(_DWORD *)buf = 67110146;
        v329 = v187;
        v330 = 2082;
        v331 = v188;
        v332 = 2082;
        v333 = v189;
        v334 = 1024;
        v335 = 1020;
        v336 = 2114;
        v337 = v191;
        _os_log_impl((void *)&_mh_execute_header, v185, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select %{public}@", buf, 0x2Cu);

        v130 = v190;
      }

      v192 = objc_alloc((Class)NSError);
      v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      if (v286)
      {
        v277 = v130;
        v194 = -[NSObject code](v286, "code");
        v318[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)-[NSObject code](v286, "code") > 70)
          v195 = 71;
        else
          v195 = (uint64_t)-[NSObject code](v286, "code");
        v196 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v195]));
        v319[0] = v196;
        v319[1] = v286;
        v318[1] = NSUnderlyingErrorKey;
        v318[2] = CFSTR("Line");
        v319[2] = &off_100303C98;
        v318[3] = CFSTR("Method");
        v197 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"));
        v319[3] = v197;
        v318[4] = NSDebugDescriptionErrorKey;
        v198 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"), 1021);
        v319[4] = v198;
        v199 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v319, v318, 5));
        v200 = v192;
        v201 = v193;
        v202 = v194;
        goto LABEL_115;
      }
      v316[0] = NSLocalizedDescriptionKey;
      v196 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v317[0] = v196;
      v317[1] = &off_100303C98;
      v316[1] = CFSTR("Line");
      v316[2] = CFSTR("Method");
      v197 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"));
      v317[2] = v197;
      v316[3] = NSDebugDescriptionErrorKey;
      v218 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"), 1021);
      v317[3] = v218;
      v219 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v317, v316, 4));
      v59 = objc_msgSend(v192, "initWithDomain:code:userInfo:", v193, 15, v219);

      v282 = 0;
    }
    v286 = 0;
    v15 = v293;
    goto LABEL_122;
  }
  v133 = v132;
  v277 = v130;
  v134 = objc_alloc((Class)NSError);
  v135 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v136 = -[NSObject code](v133, "code");
  v320[0] = NSLocalizedDescriptionKey;
  if ((uint64_t)-[NSObject code](v133, "code") > 70)
    v137 = 71;
  else
    v137 = (uint64_t)-[NSObject code](v133, "code");
  v196 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v137]));
  v321[0] = v196;
  v286 = v133;
  v321[1] = v133;
  v320[1] = NSUnderlyingErrorKey;
  v320[2] = CFSTR("Line");
  v321[2] = &off_100303C80;
  v320[3] = CFSTR("Method");
  v197 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"));
  v321[3] = v197;
  v320[4] = NSDebugDescriptionErrorKey;
  v198 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("setupContactlessTransactionCodes:wiredTransactionCodes:forIdentifier:onApplet:authorization:uid:"), 1009);
  v321[4] = v198;
  v199 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v321, v320, 5));
  v200 = v134;
  v193 = (void *)v135;
  v201 = (void *)v135;
  v202 = v136;
LABEL_115:
  v59 = objc_msgSend(v200, "initWithDomain:code:userInfo:", v201, v202, v199);

  v282 = 0;
LABEL_121:
  v15 = v293;
  v130 = v277;
LABEL_122:

  v14 = v283;
  v55 = v286;
  v60 = v294;
  v30 = v290;
  v125 = v279;
LABEL_123:

LABEL_41:
LABEL_42:

  return v59;
}

id sub_1002350C0(void *a1, uint64_t a2, void *a3, void *a4)
{
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  const __CFString *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  const __CFString *v23;
  unsigned __int8 v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void (*v34)(uint64_t, const char *, ...);
  objc_class *v35;
  _BOOL4 v36;
  const char *v37;
  const char *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  objc_class *v44;
  int v45;
  const char *v46;
  const char *v47;
  __CFString *v48;
  id v49;
  id v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  void *i;
  id v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  id v67;
  id v68;
  uint64_t v69;
  void *v70;
  id v72;
  void *v73;
  const __CFString *v74;
  id v75;
  id v76;
  id v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  id v82;
  _QWORD v83[5];
  _QWORD v84[5];
  _BYTE v85[128];
  _QWORD v86[5];
  _QWORD v87[5];
  _QWORD v88[5];
  _QWORD v89[5];
  _QWORD v90[4];
  _QWORD v91[4];
  _QWORD v92[5];
  _QWORD v93[5];
  uint8_t buf[4];
  int v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  int v101;
  __int16 v102;
  const __CFString *v103;
  __int16 v104;
  id v105;

  v77 = a3;
  v76 = a4;
  if (a1)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("activateKeys:forIdentifiers:onApplet:");
      if ((_DWORD)a2)
        v14 = &stru_1002ED8A8;
      else
        v14 = CFSTR("de");
      v74 = v14;
      v15 = 45;
      if (isMetaClass)
        v15 = 43;
      v9(6, "%c[%{public}s %{public}s]:%i Temporary %{public}@activation for keys %{public}@", v15, ClassName, Name, 1065, v74, v77);
    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = object_getClass(a1);
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      v21 = object_getClassName(a1);
      v22 = sel_getName("activateKeys:forIdentifiers:onApplet:");
      *(_DWORD *)buf = 67110402;
      if ((_DWORD)a2)
        v23 = &stru_1002ED8A8;
      else
        v23 = CFSTR("de");
      v95 = v20;
      v96 = 2082;
      v97 = v21;
      v98 = 2082;
      v99 = v22;
      v100 = 1024;
      v101 = 1065;
      v102 = 2114;
      v103 = v23;
      v104 = 2114;
      v105 = v77;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Temporary %{public}@activation for keys %{public}@", buf, 0x36u);
    }

    v82 = 0;
    v24 = objc_msgSend(a1, "selectApplet:error:", v76, &v82);
    v25 = v82;
    if ((v24 & 1) == 0)
    {
      v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v33 = NFLogGetLogger(v32);
      if (v33)
      {
        v34 = (void (*)(uint64_t, const char *, ...))v33;
        v35 = object_getClass(a1);
        v36 = class_isMetaClass(v35);
        v37 = object_getClassName(a1);
        v38 = sel_getName("activateKeys:forIdentifiers:onApplet:");
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "identifier"));
        v40 = 45;
        if (v36)
          v40 = 43;
        v34(3, "%c[%{public}s %{public}s]:%i Failed to select %{public}@", v40, v37, v38, 1070, v39);

      }
      v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v42 = NFSharedLogGetLogger(v41);
      v43 = objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        v44 = object_getClass(a1);
        if (class_isMetaClass(v44))
          v45 = 43;
        else
          v45 = 45;
        v46 = object_getClassName(a1);
        v47 = sel_getName("activateKeys:forIdentifiers:onApplet:");
        v48 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "identifier"));
        *(_DWORD *)buf = 67110146;
        v95 = v45;
        v96 = 2082;
        v97 = v46;
        v98 = 2082;
        v99 = v47;
        v100 = 1024;
        v101 = 1070;
        v102 = 2114;
        v103 = v48;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select %{public}@", buf, 0x2Cu);

      }
      v49 = objc_alloc((Class)NSError);
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      if (v25)
      {
        v50 = objc_msgSend(v25, "code");
        v92[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)objc_msgSend(v25, "code") > 70)
          v51 = 71;
        else
          v51 = (uint64_t)objc_msgSend(v25, "code");
        v54 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v51]));
        v93[0] = v54;
        v93[1] = v25;
        v92[1] = NSUnderlyingErrorKey;
        v92[2] = CFSTR("Line");
        v93[2] = &off_100303CF8;
        v92[3] = CFSTR("Method");
        v55 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateKeys:forIdentifiers:onApplet:"));
        v93[3] = v55;
        v92[4] = NSDebugDescriptionErrorKey;
        v56 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateKeys:forIdentifiers:onApplet:"), 1071);
        v93[4] = v56;
        v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v93, v92, 5));
        v57 = objc_msgSend(v49, "initWithDomain:code:userInfo:", v27, v50, v58);

        v29 = v27;
        goto LABEL_58;
      }
      v90[0] = NSLocalizedDescriptionKey;
      v29 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v91[0] = v29;
      v91[1] = &off_100303CF8;
      v90[1] = CFSTR("Line");
      v90[2] = CFSTR("Method");
      v54 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateKeys:forIdentifiers:onApplet:"));
      v91[2] = v54;
      v90[3] = NSDebugDescriptionErrorKey;
      v55 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateKeys:forIdentifiers:onApplet:"), 1071);
      v91[3] = v55;
      v56 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v91, v90, 4));
      v57 = objc_msgSend(v49, "initWithDomain:code:userInfo:", v27, 15, v56);
LABEL_57:
      v25 = v27;
LABEL_58:

      v29 = v25;
LABEL_59:

      goto LABEL_60;
    }
    if (v77)
    {
      v26 = sub_10022F4B4(a1, 0);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);

      if (!v27)
      {
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v29 = v77;
        v59 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v78, v85, 16);
        if (v59)
        {
          v60 = v59;
          v61 = *(_QWORD *)v79;
          while (2)
          {
            for (i = 0; i != v60; i = (char *)i + 1)
            {
              if (*(_QWORD *)v79 != v61)
                objc_enumerationMutation(v29);
              v63 = sub_100230470(a1, *(void **)(*((_QWORD *)&v78 + 1) + 8 * (_QWORD)i), a2);
              v64 = objc_claimAutoreleasedReturnValue(v63);
              if (v64)
              {
                v25 = (id)v64;
                v67 = objc_alloc((Class)NSError);
                v54 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
                v68 = objc_msgSend(v25, "code");
                v83[0] = NSLocalizedDescriptionKey;
                v75 = v68;
                if ((uint64_t)objc_msgSend(v25, "code") > 70)
                  v69 = 71;
                else
                  v69 = (uint64_t)objc_msgSend(v25, "code");
                v55 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v69]));
                v84[0] = v55;
                v84[1] = v25;
                v83[1] = NSUnderlyingErrorKey;
                v83[2] = CFSTR("Line");
                v84[2] = &off_100303D40;
                v83[3] = CFSTR("Method");
                v56 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateKeys:forIdentifiers:onApplet:"));
                v84[3] = v56;
                v83[4] = NSDebugDescriptionErrorKey;
                v72 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateKeys:forIdentifiers:onApplet:"), 1089);
                v84[4] = v72;
                v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v84, v83, 5));
                v57 = objc_msgSend(v67, "initWithDomain:code:userInfo:", v54, v75, v73);

                goto LABEL_58;
              }
            }
            v60 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v78, v85, 16);
            if (v60)
              continue;
            break;
          }
        }
        v57 = 0;
        goto LABEL_59;
      }
      v28 = objc_alloc((Class)NSError);
      v29 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v30 = objc_msgSend(v27, "code");
      v86[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v27, "code") > 70)
        v31 = 71;
      else
        v31 = (uint64_t)objc_msgSend(v27, "code");
      v54 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v31]));
      v87[0] = v54;
      v87[1] = v27;
      v86[1] = NSUnderlyingErrorKey;
      v86[2] = CFSTR("Line");
      v87[2] = &off_100303D28;
      v86[3] = CFSTR("Method");
      v55 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateKeys:forIdentifiers:onApplet:"));
      v87[3] = v55;
      v86[4] = NSDebugDescriptionErrorKey;
      v56 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateKeys:forIdentifiers:onApplet:"), 1084);
      v87[4] = v56;
      v65 = v87;
      v66 = v86;
      goto LABEL_56;
    }
    v52 = sub_10022F4B4(a1, a2);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v52);

    if (v27)
    {
      v28 = objc_alloc((Class)NSError);
      v29 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v30 = objc_msgSend(v27, "code");
      v88[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v27, "code") > 70)
        v53 = 71;
      else
        v53 = (uint64_t)objc_msgSend(v27, "code");
      v54 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v53]));
      v89[0] = v54;
      v89[1] = v27;
      v88[1] = NSUnderlyingErrorKey;
      v88[2] = CFSTR("Line");
      v89[2] = &off_100303D10;
      v88[3] = CFSTR("Method");
      v55 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateKeys:forIdentifiers:onApplet:"));
      v89[3] = v55;
      v88[4] = NSDebugDescriptionErrorKey;
      v56 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateKeys:forIdentifiers:onApplet:"), 1078);
      v89[4] = v56;
      v65 = v89;
      v66 = v88;
LABEL_56:
      v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v65, v66, 5));
      v57 = objc_msgSend(v28, "initWithDomain:code:userInfo:", v29, v30, v70);

      goto LABEL_57;
    }
  }
  v57 = 0;
LABEL_60:

  return v57;
}

id sub_100235BE4(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  const __CFString *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  const __CFString *v22;
  void *v23;
  uint64_t v24;
  __CFString *v25;
  id v26;
  __CFString *v27;
  unsigned __int8 v28;
  __CFString *v29;
  __CFString *v30;
  id v31;
  __CFString *v32;
  __CFString *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  void (*v40)(uint64_t, const char *, ...);
  objc_class *v41;
  _BOOL4 v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  objc_class *v47;
  int v48;
  const char *v49;
  const char *v50;
  id v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void (*v56)(uint64_t, const char *, ...);
  objc_class *v57;
  _BOOL4 v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  NSObject *v63;
  objc_class *v64;
  int v65;
  const char *v66;
  const char *v67;
  id v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void (*v72)(uint64_t, const char *, ...);
  objc_class *v73;
  _BOOL4 v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  NSObject *v79;
  objc_class *v80;
  int v81;
  const char *v82;
  const char *v83;
  id v84;
  id v85;
  id v86;
  void *v87;
  uint64_t v88;
  void (*v89)(uint64_t, const char *, ...);
  objc_class *v90;
  _BOOL4 v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  NSObject *v96;
  objc_class *v97;
  int v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  id v105;
  void *v106;
  const char *v108;
  const char *v109;
  const char *v110;
  const char *v111;
  const __CFString *v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  void *v118;
  const char *v119;
  id v120;
  _QWORD v121[5];
  _QWORD v122[5];
  _QWORD v123[4];
  _QWORD v124[4];
  _QWORD v125[5];
  _QWORD v126[5];
  _QWORD v127[4];
  _QWORD v128[4];
  _QWORD v129[5];
  _QWORD v130[5];
  uint8_t buf[4];
  int v132;
  __int16 v133;
  const char *v134;
  __int16 v135;
  const char *v136;
  __int16 v137;
  int v138;
  __int16 v139;
  const __CFString *v140;
  __int16 v141;
  id v142;

  v5 = a3;
  if (!a1)
  {
    v37 = 0;
    goto LABEL_84;
  }
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v8 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("activateKeys:aidsAndKeys:");
    if ((_DWORD)a2)
      v13 = &stru_1002ED8A8;
    else
      v13 = CFSTR("de");
    v112 = v13;
    v14 = 45;
    if (isMetaClass)
      v14 = 43;
    v8(6, "%c[%{public}s %{public}s]:%i Temporary %{public}@activation for keys %{public}@", v14, ClassName, Name, 1099, v112, v5);
  }
  v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v16 = NFSharedLogGetLogger(v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = object_getClass(a1);
    if (class_isMetaClass(v18))
      v19 = 43;
    else
      v19 = 45;
    v20 = object_getClassName(a1);
    v21 = sel_getName("activateKeys:aidsAndKeys:");
    *(_DWORD *)buf = 67110402;
    if ((_DWORD)a2)
      v22 = &stru_1002ED8A8;
    else
      v22 = CFSTR("de");
    v132 = v19;
    v133 = 2082;
    v134 = v20;
    v135 = 2082;
    v136 = v21;
    v137 = 1024;
    v138 = 1099;
    v139 = 2114;
    v140 = v22;
    v141 = 2114;
    v142 = v5;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Temporary %{public}@activation for keys %{public}@", buf, 0x36u);
  }

  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "keyEnumerator"));
  v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "nextObject"));
  if (!v24)
  {
LABEL_25:
    v37 = 0;
    goto LABEL_83;
  }
  v25 = (__CFString *)v24;
  while (1)
  {
    v26 = sub_10022F2F0(a1, v25);
    v27 = (__CFString *)objc_claimAutoreleasedReturnValue(v26);
    if (!v27)
    {
      v32 = 0;
LABEL_28:
      v38 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v39 = NFLogGetLogger(v38);
      if (v39)
      {
        v40 = (void (*)(uint64_t, const char *, ...))v39;
        v41 = object_getClass(a1);
        v42 = class_isMetaClass(v41);
        v108 = object_getClassName(a1);
        v109 = sel_getName("activateKeys:aidsAndKeys:");
        v43 = 45;
        if (v42)
          v43 = 43;
        v40(3, "%c[%{public}s %{public}s]:%i Failed to select %{public}@", v43, v108, v109, 1109, v25);
      }
      v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v45 = NFSharedLogGetLogger(v44);
      v46 = objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        v47 = object_getClass(a1);
        if (class_isMetaClass(v47))
          v48 = 43;
        else
          v48 = 45;
        v49 = object_getClassName(a1);
        v50 = sel_getName("activateKeys:aidsAndKeys:");
        *(_DWORD *)buf = 67110146;
        v132 = v48;
        v133 = 2082;
        v134 = v49;
        v135 = 2082;
        v136 = v50;
        v137 = 1024;
        v138 = 1109;
        v139 = 2114;
        v140 = v25;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select %{public}@", buf, 0x2Cu);
      }

      v51 = objc_alloc((Class)NSError);
      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      if (!v32)
      {
        v127[0] = NSLocalizedDescriptionKey;
        v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
        v128[0] = v118;
        v128[1] = &off_100303D58;
        v127[1] = CFSTR("Line");
        v127[2] = CFSTR("Method");
        v117 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateKeys:aidsAndKeys:"));
        v128[2] = v117;
        v127[3] = NSDebugDescriptionErrorKey;
        v85 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateKeys:aidsAndKeys:"), 1110);
        v128[3] = v85;
        v86 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v128, v127, 4));
        v37 = objc_msgSend(v51, "initWithDomain:code:userInfo:", v52, 15, v86);
        v32 = 0;
LABEL_78:
        v33 = v27;
        v27 = v25;
        goto LABEL_82;
      }
      v114 = -[__CFString code](v32, "code");
      v129[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)-[__CFString code](v32, "code") > 70)
        v53 = 71;
      else
        v53 = (uint64_t)-[__CFString code](v32, "code");
      v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v53]));
      v130[0] = v118;
      v130[1] = v32;
      v129[1] = NSUnderlyingErrorKey;
      v129[2] = CFSTR("Line");
      v130[2] = &off_100303D58;
      v129[3] = CFSTR("Method");
      v117 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateKeys:aidsAndKeys:"));
      v130[3] = v117;
      v129[4] = NSDebugDescriptionErrorKey;
      v85 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateKeys:aidsAndKeys:"), 1110);
      v130[4] = v85;
      v86 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v130, v129, 5));
      v103 = v51;
      v104 = v52;
      v105 = v114;
LABEL_77:
      v37 = objc_msgSend(v103, "initWithDomain:code:userInfo:", v104, v105, v86);
      goto LABEL_78;
    }
    v120 = 0;
    v28 = objc_msgSend(a1, "selectApplet:error:", v27, &v120);
    v29 = (__CFString *)v120;
    v30 = v29;
    if ((v28 & 1) == 0)
    {
      v32 = v29;
      goto LABEL_28;
    }
    v31 = sub_10022F4B4(a1, 0);
    v32 = (__CFString *)objc_claimAutoreleasedReturnValue(v31);

    if (v32)
    {
      v54 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v55 = NFLogGetLogger(v54);
      if (v55)
      {
        v56 = (void (*)(uint64_t, const char *, ...))v55;
        v57 = object_getClass(a1);
        v58 = class_isMetaClass(v57);
        v59 = object_getClassName(a1);
        v110 = sel_getName("activateKeys:aidsAndKeys:");
        v60 = 45;
        if (v58)
          v60 = 43;
        v56(3, "%c[%{public}s %{public}s]:%i Failed to Disable all keys", v60, v59, v110, 1116);
      }
      v61 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v62 = NFSharedLogGetLogger(v61);
      v63 = objc_claimAutoreleasedReturnValue(v62);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        v64 = object_getClass(a1);
        if (class_isMetaClass(v64))
          v65 = 43;
        else
          v65 = 45;
        v66 = object_getClassName(a1);
        v67 = sel_getName("activateKeys:aidsAndKeys:");
        *(_DWORD *)buf = 67109890;
        v132 = v65;
        v133 = 2082;
        v134 = v66;
        v135 = 2082;
        v136 = v67;
        v137 = 1024;
        v138 = 1116;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to Disable all keys", buf, 0x22u);
      }

      v115 = objc_alloc((Class)NSError);
      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v68 = -[__CFString code](v32, "code");
      v125[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)-[__CFString code](v32, "code") > 70)
        v69 = 71;
      else
        v69 = (uint64_t)-[__CFString code](v32, "code");
      v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v69]));
      v126[0] = v118;
      v126[1] = v32;
      v125[1] = NSUnderlyingErrorKey;
      v125[2] = CFSTR("Line");
      v126[2] = &off_100303D70;
      v125[3] = CFSTR("Method");
      v117 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateKeys:aidsAndKeys:"));
      v126[3] = v117;
      v125[4] = NSDebugDescriptionErrorKey;
      v85 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateKeys:aidsAndKeys:"), 1117);
      v126[4] = v85;
      v86 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v126, v125, 5));
      v103 = v115;
      v104 = v52;
      v105 = v68;
      goto LABEL_77;
    }
    v33 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v25));
    if (!v33)
    {
      v70 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v71 = NFLogGetLogger(v70);
      if (v71)
      {
        v72 = (void (*)(uint64_t, const char *, ...))v71;
        v73 = object_getClass(a1);
        v74 = class_isMetaClass(v73);
        v75 = object_getClassName(a1);
        v111 = sel_getName("activateKeys:aidsAndKeys:");
        v76 = 45;
        if (v74)
          v76 = 43;
        v72(3, "%c[%{public}s %{public}s]:%i Invalid keyIdent", v76, v75, v111, 1123);
      }
      v77 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v78 = NFSharedLogGetLogger(v77);
      v79 = objc_claimAutoreleasedReturnValue(v78);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        v80 = object_getClass(a1);
        if (class_isMetaClass(v80))
          v81 = 43;
        else
          v81 = 45;
        v82 = object_getClassName(a1);
        v83 = sel_getName("activateKeys:aidsAndKeys:");
        *(_DWORD *)buf = 67109890;
        v132 = v81;
        v133 = 2082;
        v134 = v82;
        v135 = 2082;
        v136 = v83;
        v137 = 1024;
        v138 = 1123;
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid keyIdent", buf, 0x22u);
      }

      v84 = objc_alloc((Class)NSError);
      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v123[0] = NSLocalizedDescriptionKey;
      v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v124[0] = v118;
      v124[1] = &off_100303D88;
      v123[1] = CFSTR("Line");
      v123[2] = CFSTR("Method");
      v117 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateKeys:aidsAndKeys:"));
      v124[2] = v117;
      v123[3] = NSDebugDescriptionErrorKey;
      v85 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateKeys:aidsAndKeys:"), 1124);
      v124[3] = v85;
      v86 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v124, v123, 4));
      v37 = objc_msgSend(v84, "initWithDomain:code:userInfo:", v52, 10, v86);
      goto LABEL_81;
    }
    v34 = sub_100230470(a1, v33, a2);
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (v35)
      break;

    v36 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "nextObject"));
    v25 = (__CFString *)v36;
    if (!v36)
      goto LABEL_25;
  }
  v52 = (void *)v35;
  v87 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v88 = NFLogGetLogger(v87);
  if (v88)
  {
    v89 = (void (*)(uint64_t, const char *, ...))v88;
    v90 = object_getClass(a1);
    v91 = class_isMetaClass(v90);
    v119 = object_getClassName(a1);
    v92 = sel_getName("activateKeys:aidsAndKeys:");
    v93 = 45;
    if (v91)
      v93 = 43;
    v89(3, "%c[%{public}s %{public}s]:%i Failed to activate keyIdentifier %@", v93, v119, v92, 1129, v33);
  }
  v94 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v95 = NFSharedLogGetLogger(v94);
  v96 = objc_claimAutoreleasedReturnValue(v95);
  if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
  {
    v97 = object_getClass(a1);
    if (class_isMetaClass(v97))
      v98 = 43;
    else
      v98 = 45;
    v99 = object_getClassName(a1);
    v100 = sel_getName("activateKeys:aidsAndKeys:");
    *(_DWORD *)buf = 67110146;
    v132 = v98;
    v133 = 2082;
    v134 = v99;
    v135 = 2082;
    v136 = v100;
    v137 = 1024;
    v138 = 1129;
    v139 = 2112;
    v140 = v33;
    _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to activate keyIdentifier %@", buf, 0x2Cu);
  }

  v116 = objc_alloc((Class)NSError);
  v101 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v113 = objc_msgSend(v52, "code");
  v121[0] = NSLocalizedDescriptionKey;
  v118 = (void *)v101;
  if ((uint64_t)objc_msgSend(v52, "code") > 70)
    v102 = 71;
  else
    v102 = (uint64_t)objc_msgSend(v52, "code");
  v117 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v102]));
  v122[0] = v117;
  v122[1] = v52;
  v121[1] = NSUnderlyingErrorKey;
  v121[2] = CFSTR("Line");
  v122[2] = &off_100303DA0;
  v121[3] = CFSTR("Method");
  v85 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("activateKeys:aidsAndKeys:"));
  v122[3] = v85;
  v121[4] = NSDebugDescriptionErrorKey;
  v86 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("activateKeys:aidsAndKeys:"), 1130);
  v122[4] = v86;
  v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v122, v121, 5));
  v37 = objc_msgSend(v116, "initWithDomain:code:userInfo:", v118, v113, v106);

LABEL_81:
  v32 = v25;
LABEL_82:

LABEL_83:
LABEL_84:

  return v37;
}

id sub_1002369DC(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  void *v21;
  unsigned __int8 v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *v31;
  _BOOL4 v32;
  const char *v33;
  const char *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  objc_class *v40;
  int v41;
  const char *v42;
  const char *v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void (*v50)(uint64_t, const char *, ...);
  objc_class *v51;
  _BOOL4 v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  objc_class *v58;
  int v59;
  const char *v60;
  const char *v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  void *v66;
  id v67;
  id v68;
  void *v69;
  void *v70;
  uint64_t v71;
  void (*v72)(uint64_t, const char *, ...);
  objc_class *v73;
  _BOOL4 v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  NSObject *v80;
  objc_class *v81;
  int v82;
  const char *v83;
  const char *v84;
  unsigned int v85;
  uint64_t v86;
  void *v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  id v92;
  id v93;
  const char *v94;
  uint64_t v95;
  id v96;
  const char *v97;
  uint64_t v98;
  id v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  const char *v105;
  uint64_t v106;
  id v107;
  void *v108;
  void *v109;
  id v110;
  id v111;
  _QWORD v112[4];
  _QWORD v113[4];
  _QWORD v114[5];
  _QWORD v115[5];
  NSErrorUserInfoKey v116;
  const __CFString *v117;
  const __CFString *v118;
  const __CFString *v119;
  NSErrorUserInfoKey v120;
  uint8_t buf[8];
  _BYTE v122[42];

  v3 = a2;
  v109 = v3;
  if (!a1)
  {
    v27 = 0;
    goto LABEL_65;
  }
  v4 = v3;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v7 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("resetVolatileConfigOnApplet:");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
    v13 = 45;
    if (isMetaClass)
      v13 = 43;
    v7(6, "%c[%{public}s %{public}s]:%i resetting keys on %{public}@", v13, ClassName, Name, 1139, v12);

  }
  v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v15 = NFSharedLogGetLogger(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = object_getClass(a1);
    if (class_isMetaClass(v17))
      v18 = 43;
    else
      v18 = 45;
    v19 = object_getClassName(a1);
    v20 = sel_getName("resetVolatileConfigOnApplet:");
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v18;
    *(_WORD *)v122 = 2082;
    *(_QWORD *)&v122[2] = v19;
    *(_WORD *)&v122[10] = 2082;
    *(_QWORD *)&v122[12] = v20;
    *(_WORD *)&v122[20] = 1024;
    *(_DWORD *)&v122[22] = 1139;
    *(_WORD *)&v122[26] = 2114;
    *(_QWORD *)&v122[28] = v21;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i resetting keys on %{public}@", buf, 0x2Cu);

  }
  v110 = 0;
  v22 = objc_msgSend(a1, "selectApplet:error:", v4, &v110);
  v23 = v110;
  if ((v22 & 1) == 0)
  {
    v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v29 = NFLogGetLogger(v28);
    if (v29)
    {
      v30 = (void (*)(uint64_t, const char *, ...))v29;
      v31 = object_getClass(a1);
      v32 = class_isMetaClass(v31);
      v33 = object_getClassName(a1);
      v34 = sel_getName("resetVolatileConfigOnApplet:");
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
      v36 = 45;
      if (v32)
        v36 = 43;
      v30(3, "%c[%{public}s %{public}s]:%i Failed to select %{public}@", v36, v33, v34, 1144, v35);

    }
    v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v38 = NFSharedLogGetLogger(v37);
    v39 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v40 = object_getClass(a1);
      if (class_isMetaClass(v40))
        v41 = 43;
      else
        v41 = 45;
      v42 = object_getClassName(a1);
      v43 = sel_getName("resetVolatileConfigOnApplet:");
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v41;
      *(_WORD *)v122 = 2082;
      *(_QWORD *)&v122[2] = v42;
      *(_WORD *)&v122[10] = 2082;
      *(_QWORD *)&v122[12] = v43;
      *(_WORD *)&v122[20] = 1024;
      *(_DWORD *)&v122[22] = 1144;
      *(_WORD *)&v122[26] = 2114;
      *(_QWORD *)&v122[28] = v44;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select %{public}@", buf, 0x2Cu);

    }
    v45 = objc_alloc((Class)NSError);
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v23)
    {
      v46 = objc_msgSend(v23, "code");
      v114[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v23, "code") > 70)
        v47 = 71;
      else
        v47 = (uint64_t)objc_msgSend(v23, "code");
      v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v47]));
      v115[0] = v87;
      v115[1] = v23;
      v114[1] = NSUnderlyingErrorKey;
      v114[2] = CFSTR("Line");
      v115[2] = &off_100303DB8;
      v114[3] = CFSTR("Method");
      v88 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("resetVolatileConfigOnApplet:"));
      v115[3] = v88;
      v114[4] = NSDebugDescriptionErrorKey;
      v89 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("resetVolatileConfigOnApplet:"), 1145);
      v115[4] = v89;
      v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v115, v114, 5));
      v27 = objc_msgSend(v45, "initWithDomain:code:userInfo:", v25, v46, v90);

    }
    else
    {
      v112[0] = NSLocalizedDescriptionKey;
      v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v113[0] = v66;
      v113[1] = &off_100303DB8;
      v112[1] = CFSTR("Line");
      v112[2] = CFSTR("Method");
      v67 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("resetVolatileConfigOnApplet:"));
      v113[2] = v67;
      v112[3] = NSDebugDescriptionErrorKey;
      v68 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("resetVolatileConfigOnApplet:"), 1145);
      v113[3] = v68;
      v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v113, v112, 4));
      v27 = objc_msgSend(v45, "initWithDomain:code:userInfo:", v25, 15, v69);

    }
    goto LABEL_64;
  }
  v108 = (void *)objc_claimAutoreleasedReturnValue(+[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 144, 0));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "asData"));
  v111 = 0;
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:", 128, 52, 0, 0, v24, &v111));
  v26 = v111;

  if (!v25)
  {
    v48 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v49 = NFLogGetLogger(v48);
    if (v49)
    {
      v50 = (void (*)(uint64_t, const char *, ...))v49;
      v51 = object_getClass(a1);
      v52 = class_isMetaClass(v51);
      v53 = object_getClassName(a1);
      v105 = sel_getName("_resetVolatileVisibilityOnAllEndpoints");
      v54 = 45;
      if (v52)
        v54 = 43;
      v50(3, "%c[%{public}s %{public}s]:%i Command (%02X) failed; error: %{public}@",
        v54,
        v53,
        v105,
        681,
        52,
        v26);
    }
    v55 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v56 = NFSharedLogGetLogger(v55);
    v57 = objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      v58 = object_getClass(a1);
      if (class_isMetaClass(v58))
        v59 = 43;
      else
        v59 = 45;
      v60 = object_getClassName(a1);
      v61 = sel_getName("_resetVolatileVisibilityOnAllEndpoints");
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v59;
      *(_WORD *)v122 = 2082;
      *(_QWORD *)&v122[2] = v60;
      *(_WORD *)&v122[10] = 2082;
      *(_QWORD *)&v122[12] = v61;
      *(_WORD *)&v122[20] = 1024;
      *(_DWORD *)&v122[22] = 681;
      *(_WORD *)&v122[26] = 1024;
      *(_DWORD *)&v122[28] = 52;
      *(_WORD *)&v122[32] = 2114;
      *(_QWORD *)&v122[34] = v26;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command (%02X) failed; error: %{public}@",
        buf,
        0x32u);
    }

    v62 = objc_alloc((Class)NSError);
    v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v26)
    {
      v107 = v62;
      v64 = objc_msgSend(v26, "code");
      v116 = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v26, "code") > 70)
        v65 = 71;
      else
        v65 = (uint64_t)objc_msgSend(v26, "code");
      v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v65]));
      *(_QWORD *)buf = v91;
      *(_QWORD *)v122 = v26;
      v117 = (const __CFString *)NSUnderlyingErrorKey;
      v118 = CFSTR("Line");
      *(_QWORD *)&v122[8] = &off_100303A40;
      v119 = CFSTR("Method");
      v92 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_resetVolatileVisibilityOnAllEndpoints"));
      *(_QWORD *)&v122[16] = v92;
      v120 = NSDebugDescriptionErrorKey;
      v96 = objc_alloc((Class)NSString);
      v97 = sel_getName("_resetVolatileVisibilityOnAllEndpoints");
      v98 = 682;
      goto LABEL_61;
    }
    v116 = NSLocalizedDescriptionKey;
    v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    *(_QWORD *)buf = v91;
    *(_QWORD *)v122 = &off_100303A40;
    v117 = CFSTR("Line");
    v118 = CFSTR("Method");
    v92 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_resetVolatileVisibilityOnAllEndpoints"));
    *(_QWORD *)&v122[8] = v92;
    v119 = (const __CFString *)NSDebugDescriptionErrorKey;
    v93 = objc_alloc((Class)NSString);
    v94 = sel_getName("_resetVolatileVisibilityOnAllEndpoints");
    v95 = 682;
LABEL_58:
    v99 = objc_msgSend(v93, "initWithFormat:", CFSTR("%s:%d"), v94, v95);
    *(_QWORD *)&v122[16] = v99;
    v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v116, 4));
    v101 = v62;
    v102 = v63;
    v103 = 16;
LABEL_62:
    v27 = objc_msgSend(v101, "initWithDomain:code:userInfo:", v102, v103, v100);

    goto LABEL_63;
  }
  if (objc_msgSend(v25, "status") != 36864)
  {
    v70 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v71 = NFLogGetLogger(v70);
    if (v71)
    {
      v72 = (void (*)(uint64_t, const char *, ...))v71;
      v73 = object_getClass(a1);
      v74 = class_isMetaClass(v73);
      v75 = object_getClassName(a1);
      v76 = sel_getName("_resetVolatileVisibilityOnAllEndpoints");
      v106 = objc_msgSend(v25, "status");
      v77 = 45;
      if (v74)
        v77 = 43;
      v72(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v77, v75, v76, 685, v106);
    }
    v78 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v79 = NFSharedLogGetLogger(v78);
    v80 = objc_claimAutoreleasedReturnValue(v79);
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      v81 = object_getClass(a1);
      if (class_isMetaClass(v81))
        v82 = 43;
      else
        v82 = 45;
      v83 = object_getClassName(a1);
      v84 = sel_getName("_resetVolatileVisibilityOnAllEndpoints");
      v85 = objc_msgSend(v25, "status");
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v82;
      *(_WORD *)v122 = 2082;
      *(_QWORD *)&v122[2] = v83;
      *(_WORD *)&v122[10] = 2082;
      *(_QWORD *)&v122[12] = v84;
      *(_WORD *)&v122[20] = 1024;
      *(_DWORD *)&v122[22] = 685;
      *(_WORD *)&v122[26] = 1024;
      *(_DWORD *)&v122[28] = v85;
      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
    }

    v62 = objc_alloc((Class)NSError);
    v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    if (v26)
    {
      v107 = v62;
      v64 = objc_msgSend(v26, "code");
      v116 = NSLocalizedDescriptionKey;
      if ((uint64_t)objc_msgSend(v26, "code") > 70)
        v86 = 71;
      else
        v86 = (uint64_t)objc_msgSend(v26, "code");
      v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EBE98[v86]));
      *(_QWORD *)buf = v91;
      *(_QWORD *)v122 = v26;
      v117 = (const __CFString *)NSUnderlyingErrorKey;
      v118 = CFSTR("Line");
      *(_QWORD *)&v122[8] = &off_100303A58;
      v119 = CFSTR("Method");
      v92 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_resetVolatileVisibilityOnAllEndpoints"));
      *(_QWORD *)&v122[16] = v92;
      v120 = NSDebugDescriptionErrorKey;
      v96 = objc_alloc((Class)NSString);
      v97 = sel_getName("_resetVolatileVisibilityOnAllEndpoints");
      v98 = 687;
LABEL_61:
      v99 = objc_msgSend(v96, "initWithFormat:", CFSTR("%s:%d"), v97, v98);
      *(_QWORD *)&v122[24] = v99;
      v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v116, 5));
      v101 = v107;
      v102 = v63;
      v103 = (uint64_t)v64;
      goto LABEL_62;
    }
    v116 = NSLocalizedDescriptionKey;
    v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Commmand Error"));
    *(_QWORD *)buf = v91;
    *(_QWORD *)v122 = &off_100303A58;
    v117 = CFSTR("Line");
    v118 = CFSTR("Method");
    v92 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_resetVolatileVisibilityOnAllEndpoints"));
    *(_QWORD *)&v122[8] = v92;
    v119 = (const __CFString *)NSDebugDescriptionErrorKey;
    v93 = objc_alloc((Class)NSString);
    v94 = sel_getName("_resetVolatileVisibilityOnAllEndpoints");
    v95 = 687;
    goto LABEL_58;
  }
  v27 = 0;
LABEL_63:

LABEL_64:
LABEL_65:

  return v27;
}

void sub_100237718(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v1 = a1;
  v2 = objc_alloc((Class)NSSet);
  v3 = objc_opt_class(NSArray);
  v12 = objc_msgSend(v2, "initWithObjects:", v3, objc_opt_class(NFNdefRecordInternal), 0);
  v4 = objc_alloc((Class)NSSet);
  v5 = objc_opt_class(NSArray);
  v6 = objc_msgSend(v4, "initWithObjects:", v5, objc_opt_class(NFTNEPService), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v6, "startTNEPDeviceWithServices:optionalRecords:callback:", 0, 0);

  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v12, "startTNEPDeviceWithServices:optionalRecords:callback:", 1, 0);
  v7 = objc_alloc((Class)NSSet);
  v8 = objc_opt_class(NSArray);
  v9 = objc_msgSend(v7, "initWithObjects:", v8, objc_opt_class(NFNdefMessageInternal), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v9, "tnepTagDeviceSendNDEFMessage:callback:", 0, 0);

  v10 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NFNdefMessageInternal), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v10, "tnepReaderSend:callback:", 0, 0);

  v11 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NFNdefMessageInternal), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v11, "tnepReaderSend:callback:", 0, 1);

}

void sub_1002378F8(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;

  v1 = a1;
  v2 = objc_alloc((Class)NSSet);
  v3 = objc_opt_class(NSArray);
  v5 = objc_msgSend(v2, "initWithObjects:", v3, objc_opt_class(NFNdefRecordInternal), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v5, "tnepTagDeviceSelected:respondHandler:", 1, 1);
  v4 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(NFNdefMessageInternal), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v4, "tnepTagDeviceNDEFMessageReceived:", 0, 0);

}

NSXPCInterface *sub_1002379DC(uint64_t a1)
{
  objc_opt_self(a1);
  return +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFCCardSessionInterface);
}

NSXPCInterface *sub_100237A00(uint64_t a1)
{
  objc_opt_self(a1);
  return +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NFCCardSessionCallbackInterface);
}

id sub_100237A30(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *specific;
  uint64_t Logger;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void (*v36)(uint64_t, const char *, ...);
  objc_class *v37;
  _BOOL4 v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  objc_class *v44;
  int v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  const char *Name;
  const char *v56;
  void *v57;
  void *v58;
  _QWORD *v59;
  id v60;
  id v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[4];
  _QWORD v65[4];
  uint8_t buf[4];
  int v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  int v73;

  v5 = a2;
  v6 = v5;
  if (a1)
  {
    if (v5)
    {
      v59 = a3;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "packageIdentifier"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "moduleIdentifier"));
      v61 = 0;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[AppletTranslator getAppletStateAndHistory:withPackage:withModule:withTransceiver:withError:](AppletTranslator, "getAppletStateAndHistory:withPackage:withModule:withTransceiver:withError:", v7, v8, v9, a1, &v61));
      v11 = v61;

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", CFSTR("didError")));
      if (objc_msgSend(v12, "BOOLValue"))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "packageIdentifier"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Applet AID: %@, Applet PID: %@"), v13, v14));
        v62[0] = CFSTR("Applet Identifier");
        v57 = v10;
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
        v62[1] = CFSTR("FailureKey");
        v63[0] = v16;
        v63[1] = CFSTR("ttrATL");
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v63, v62, 2));
        sub_100187DFC((uint64_t)NFBugCapture, CFSTR("Error while getting Applet State from ATL"), v15, v17);

        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
        +[NFExceptionsCALogger postAnalyticsATLFailureEvent:aid:error:](NFExceptionsCALogger, "postAnalyticsATLFailureEvent:aid:error:", 0, v18, v11);

        v10 = v57;
      }
      if (v11 && objc_msgSend(v11, "code") == (id)5)
      {
        v58 = v10;
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v21 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("getATLAppletState:error:");
          v25 = 45;
          if (isMetaClass)
            v25 = 43;
          v21(4, "%c[%{public}s %{public}s]:%i Applet is badly behaved, needs to be powercycled", v25, ClassName, Name, 54);
        }
        v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v27 = NFSharedLogGetLogger(v26);
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          v29 = object_getClass(a1);
          if (class_isMetaClass(v29))
            v30 = 43;
          else
            v30 = 45;
          v31 = object_getClassName(a1);
          v32 = sel_getName("getATLAppletState:error:");
          *(_DWORD *)buf = 67109890;
          v67 = v30;
          v68 = 2082;
          v69 = v31;
          v70 = 2082;
          v71 = v32;
          v72 = 1024;
          v73 = 54;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Applet is badly behaved, needs to be powercycled", buf, 0x22u);
        }

        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "powerCycleOrReset"));
        if (v33 && objc_msgSend(v33, "code"))
        {
          v11 = v33;
          v10 = v58;
        }
        else
        {

          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
          v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "packageIdentifier"));
          v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "moduleIdentifier"));
          v60 = 0;
          v53 = objc_claimAutoreleasedReturnValue(+[AppletTranslator getAppletStateAndHistory:withPackage:withModule:withTransceiver:withError:](AppletTranslator, "getAppletStateAndHistory:withPackage:withModule:withTransceiver:withError:", v50, v51, v52, a1, &v60));
          v11 = v60;

          v10 = (void *)v53;
        }
      }
      if (v59)
      {
        v11 = objc_retainAutorelease(v11);
        *v59 = v11;
      }
      goto LABEL_34;
    }
    v34 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v35 = NFLogGetLogger(v34);
    if (v35)
    {
      v36 = (void (*)(uint64_t, const char *, ...))v35;
      v37 = object_getClass(a1);
      v38 = class_isMetaClass(v37);
      v39 = object_getClassName(a1);
      v56 = sel_getName("getATLAppletState:error:");
      v40 = 45;
      if (v38)
        v40 = 43;
      v36(3, "%c[%{public}s %{public}s]:%i Failed to find applet", v40, v39, v56, 29);
    }
    v41 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v42 = NFSharedLogGetLogger(v41);
    v43 = objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      v44 = object_getClass(a1);
      if (class_isMetaClass(v44))
        v45 = 43;
      else
        v45 = 45;
      *(_DWORD *)buf = 67109890;
      v67 = v45;
      v68 = 2082;
      v69 = object_getClassName(a1);
      v70 = 2082;
      v71 = sel_getName("getATLAppletState:error:");
      v72 = 1024;
      v73 = 29;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to find applet", buf, 0x22u);
    }

    if (a3)
    {
      v46 = objc_alloc((Class)NSError);
      v11 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v64[0] = NSLocalizedDescriptionKey;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
      v65[0] = v12;
      v65[1] = &off_100303DD0;
      v64[1] = CFSTR("Line");
      v64[2] = CFSTR("Method");
      v47 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getATLAppletState:error:"));
      v65[2] = v47;
      v64[3] = NSDebugDescriptionErrorKey;
      v48 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getATLAppletState:error:"), 30);
      v65[3] = v48;
      v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v65, v64, 4));
      *a3 = objc_msgSend(v46, "initWithDomain:code:userInfo:", v11, 10, v49);

      v10 = 0;
LABEL_34:

      goto LABEL_35;
    }
  }
  v10 = 0;
LABEL_35:

  return v10;
}

id sub_1002380E0(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *specific;
  uint64_t Logger;
  void (*v14)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  const char *v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  const char *ClassName;
  const char *Name;
  const char *v45;
  id v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  id v56;
  _QWORD v57[4];
  _QWORD v58[4];

  v5 = a2;
  v6 = v5;
  if (!a1)
    goto LABEL_29;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "packageIdentifier"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "moduleIdentifier"));
    v46 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[AppletTranslator GetAppletProperties:withPackage:withModule:withTransceiver:withError:](AppletTranslator, "GetAppletProperties:withPackage:withModule:withTransceiver:withError:", v7, v8, v9, a1, &v46));
    v11 = v46;

    if (v11)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v14 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("getATLAppletProperties:error:");
        v17 = 45;
        if (isMetaClass)
          v17 = 43;
        v14(4, "%c[%{public}s %{public}s]:%i Could not get the Applet properties... %{public}@", v17, ClassName, Name, 87, v11);
      }
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFSharedLogGetLogger(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = object_getClass(a1);
        if (class_isMetaClass(v21))
          v22 = 43;
        else
          v22 = 45;
        v23 = object_getClassName(a1);
        v24 = sel_getName("getATLAppletProperties:error:");
        *(_DWORD *)buf = 67110146;
        v48 = v22;
        v49 = 2082;
        v50 = v23;
        v51 = 2082;
        v52 = v24;
        v53 = 1024;
        v54 = 87;
        v55 = 2114;
        v56 = v11;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not get the Applet properties... %{public}@", buf, 0x2Cu);
      }

    }
    if (a3)
    {
      v11 = objc_retainAutorelease(v11);
      *a3 = v11;
    }
    goto LABEL_27;
  }
  v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v26 = NFLogGetLogger(v25);
  if (v26)
  {
    v27 = (void (*)(uint64_t, const char *, ...))v26;
    v28 = object_getClass(a1);
    v29 = class_isMetaClass(v28);
    v30 = object_getClassName(a1);
    v45 = sel_getName("getATLAppletProperties:error:");
    v31 = 45;
    if (v29)
      v31 = 43;
    v27(3, "%c[%{public}s %{public}s]:%i Failed to find applet", v31, v30, v45, 75);
  }
  v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v33 = NFSharedLogGetLogger(v32);
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    v35 = object_getClass(a1);
    if (class_isMetaClass(v35))
      v36 = 43;
    else
      v36 = 45;
    *(_DWORD *)buf = 67109890;
    v48 = v36;
    v49 = 2082;
    v50 = object_getClassName(a1);
    v51 = 2082;
    v52 = sel_getName("getATLAppletProperties:error:");
    v53 = 1024;
    v54 = 75;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to find applet", buf, 0x22u);
  }

  if (!a3)
  {
LABEL_29:
    v10 = 0;
    goto LABEL_28;
  }
  v37 = objc_alloc((Class)NSError);
  v11 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v57[0] = NSLocalizedDescriptionKey;
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
  v58[0] = v38;
  v58[1] = &off_100303DE8;
  v57[1] = CFSTR("Line");
  v57[2] = CFSTR("Method");
  v39 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getATLAppletProperties:error:"));
  v58[2] = v39;
  v57[3] = NSDebugDescriptionErrorKey;
  v40 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getATLAppletProperties:error:"), 76);
  v58[3] = v40;
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v58, v57, 4));
  *a3 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v11, 10, v41);

  v10 = 0;
LABEL_27:

LABEL_28:
  return v10;
}

id sub_100238590(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *specific;
  uint64_t Logger;
  void (*v14)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  const char *v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  const char *ClassName;
  const char *Name;
  const char *v52;
  _QWORD *v53;
  id v54;
  uint8_t buf[4];
  int v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  id v64;
  _QWORD v65[4];
  _QWORD v66[4];
  _QWORD v67[4];
  _QWORD v68[4];

  v5 = a2;
  v6 = v5;
  if (!a1)
    goto LABEL_29;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "packageIdentifier"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "moduleIdentifier"));
    v54 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[AppletTranslator getServiceProviderData:withPackage:withModule:withTransceiver:withError:](AppletTranslator, "getServiceProviderData:withPackage:withModule:withTransceiver:withError:", v7, v8, v9, a1, &v54));
    v11 = v54;

    if (v11)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v14 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("getATLServiceProviderDataForAID:error:");
        v17 = 45;
        if (isMetaClass)
          v17 = 43;
        v14(4, "%c[%{public}s %{public}s]:%i Could not get service provider data... %{public}@", v17, ClassName, Name, 121, v11);
      }
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFSharedLogGetLogger(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = object_getClass(a1);
        if (class_isMetaClass(v21))
          v22 = 43;
        else
          v22 = 45;
        v23 = object_getClassName(a1);
        v24 = sel_getName("getATLServiceProviderDataForAID:error:");
        *(_DWORD *)buf = 67110146;
        v56 = v22;
        v57 = 2082;
        v58 = v23;
        v59 = 2082;
        v60 = v24;
        v61 = 1024;
        v62 = 121;
        v63 = 2114;
        v64 = v11;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not get service provider data... %{public}@", buf, 0x2Cu);
      }

    }
    if (a3)
    {
      v11 = objc_retainAutorelease(v11);
      *a3 = v11;
    }
    goto LABEL_27;
  }
  v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v26 = NFLogGetLogger(v25);
  if (v26)
  {
    v27 = (void (*)(uint64_t, const char *, ...))v26;
    v28 = object_getClass(a1);
    v29 = class_isMetaClass(v28);
    v30 = object_getClassName(a1);
    v52 = sel_getName("getATLServiceProviderDataForAID:error:");
    v31 = 45;
    if (v29)
      v31 = 43;
    v27(3, "%c[%{public}s %{public}s]:%i Failed to find applet", v31, v30, v52, 99);
  }
  v53 = a3;
  v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v33 = NFSharedLogGetLogger(v32);
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    v35 = object_getClass(a1);
    if (class_isMetaClass(v35))
      v36 = 43;
    else
      v36 = 45;
    *(_DWORD *)buf = 67109890;
    v56 = v36;
    v57 = 2082;
    v58 = object_getClassName(a1);
    v59 = 2082;
    v60 = sel_getName("getATLServiceProviderDataForAID:error:");
    v61 = 1024;
    v62 = 99;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to find applet", buf, 0x22u);
  }

  sub_100187DFC((uint64_t)NFBugCapture, CFSTR("Error while getting Applet Properties"), CFSTR("Applet AID: nil, Applet PID: nil"), &off_100306E70);
  v37 = objc_alloc((Class)NSError);
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v67[0] = NSLocalizedDescriptionKey;
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
  v68[0] = v39;
  v68[1] = &off_100303E00;
  v67[1] = CFSTR("Line");
  v67[2] = CFSTR("Method");
  v40 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getATLServiceProviderDataForAID:error:"));
  v68[2] = v40;
  v67[3] = NSDebugDescriptionErrorKey;
  v41 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getATLServiceProviderDataForAID:error:"), 108);
  v68[3] = v41;
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v68, v67, 4));
  v43 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 10, v42);
  +[NFExceptionsCALogger postAnalyticsATLFailureEvent:aid:error:](NFExceptionsCALogger, "postAnalyticsATLFailureEvent:aid:error:", 1, 0, v43);

  if (!a3)
  {
LABEL_29:
    v10 = 0;
    goto LABEL_28;
  }
  v44 = objc_alloc((Class)NSError);
  v11 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v65[0] = NSLocalizedDescriptionKey;
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
  v66[0] = v45;
  v66[1] = &off_100303E18;
  v65[1] = CFSTR("Line");
  v65[2] = CFSTR("Method");
  v46 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getATLServiceProviderDataForAID:error:"));
  v66[2] = v46;
  v65[3] = NSDebugDescriptionErrorKey;
  v47 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getATLServiceProviderDataForAID:error:"), 110);
  v66[3] = v47;
  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v66, v65, 4));
  *v53 = objc_msgSend(v44, "initWithDomain:code:userInfo:", v11, 10, v48);

  v10 = 0;
LABEL_27:

LABEL_28:
  return v10;
}

id sub_100238BB4(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *specific;
  uint64_t Logger;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  int v28;
  const char *v29;
  const char *v30;
  void *v31;
  uint64_t v32;
  void (*v33)(uint64_t, const char *, ...);
  objc_class *v34;
  _BOOL4 v35;
  _QWORD *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  objc_class *v42;
  int v43;
  id v44;
  void *v45;
  _QWORD *v46;
  id v47;
  id v48;
  void *v49;
  const char *ClassName;
  const char *v52;
  const char *Name;
  const char *v54;
  id v55;
  void *v56;
  id v57;
  uint8_t buf[4];
  int v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  int v65;
  __int16 v66;
  id v67;
  _QWORD v68[4];
  _QWORD v69[4];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v56 = v10;
  if (!a1)
    goto LABEL_29;
  if (v9)
  {
    v12 = a5;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "packageIdentifier"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "moduleIdentifier"));
    v57 = 0;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[AppletTranslator getServiceProviderData:withPackage:withModule:withPublicKey:withEncryptionScheme:withTransceiver:withError:](AppletTranslator, "getServiceProviderData:withPackage:withModule:withPublicKey:withEncryptionScheme:withTransceiver:withError:", v13, v14, v15, v10, v11, a1, &v57));
    v17 = v57;

    if (v17)
    {
      v55 = v11;
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v20 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("getATLServiceProviderDataForAID:publicKey:scheme:error:");
        v23 = 45;
        if (isMetaClass)
          v23 = 43;
        v20(4, "%c[%{public}s %{public}s]:%i Could not get service provider data with privacy scheme... %{public}@", v23, ClassName, Name, 150, v17);
      }
      v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v25 = NFSharedLogGetLogger(v24);
      v26 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v27 = object_getClass(a1);
        if (class_isMetaClass(v27))
          v28 = 43;
        else
          v28 = 45;
        v29 = object_getClassName(a1);
        v30 = sel_getName("getATLServiceProviderDataForAID:publicKey:scheme:error:");
        *(_DWORD *)buf = 67110146;
        v59 = v28;
        v60 = 2082;
        v61 = v29;
        v62 = 2082;
        v63 = v30;
        v64 = 1024;
        v65 = 150;
        v66 = 2114;
        v67 = v17;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not get service provider data with privacy scheme... %{public}@", buf, 0x2Cu);
      }

      v11 = v55;
    }
    if (v12)
    {
      v17 = objc_retainAutorelease(v17);
      *v12 = v17;
    }
    goto LABEL_27;
  }
  v31 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v32 = NFLogGetLogger(v31);
  if (v32)
  {
    v33 = (void (*)(uint64_t, const char *, ...))v32;
    v34 = object_getClass(a1);
    v35 = class_isMetaClass(v34);
    v36 = a5;
    v37 = object_getClassName(a1);
    v54 = sel_getName("getATLServiceProviderDataForAID:publicKey:scheme:error:");
    v38 = 45;
    if (v35)
      v38 = 43;
    v52 = v37;
    a5 = v36;
    v33(3, "%c[%{public}s %{public}s]:%i Failed to find applet", v38, v52, v54, 136);
  }
  v39 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v40 = NFSharedLogGetLogger(v39);
  v41 = objc_claimAutoreleasedReturnValue(v40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
  {
    v42 = object_getClass(a1);
    if (class_isMetaClass(v42))
      v43 = 43;
    else
      v43 = 45;
    *(_DWORD *)buf = 67109890;
    v59 = v43;
    v60 = 2082;
    v61 = object_getClassName(a1);
    v62 = 2082;
    v63 = sel_getName("getATLServiceProviderDataForAID:publicKey:scheme:error:");
    v64 = 1024;
    v65 = 136;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to find applet", buf, 0x22u);
  }

  if (!a5)
  {
LABEL_29:
    v16 = 0;
    goto LABEL_28;
  }
  v44 = objc_alloc((Class)NSError);
  v17 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v68[0] = NSLocalizedDescriptionKey;
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid Parameter"));
  v69[0] = v45;
  v69[1] = &off_100303E30;
  v68[1] = CFSTR("Line");
  v68[2] = CFSTR("Method");
  v46 = a5;
  v47 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("getATLServiceProviderDataForAID:publicKey:scheme:error:"));
  v69[2] = v47;
  v68[3] = NSDebugDescriptionErrorKey;
  v48 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("getATLServiceProviderDataForAID:publicKey:scheme:error:"), 137);
  v69[3] = v48;
  v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v69, v68, 4));
  *v46 = objc_msgSend(v44, "initWithDomain:code:userInfo:", v17, 10, v49);

  v16 = 0;
LABEL_27:

LABEL_28:
  return v16;
}

id sub_1002390B4(void *a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  void (*v19)(uint64_t, const char *, ...);
  objc_class *v20;
  _BOOL4 v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  objc_class *v26;
  int v27;
  const char *v28;
  const char *v29;
  id v30;
  NSMutableArray *v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  void *i;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, ...);
  objc_class *v46;
  _BOOL4 v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  NSObject *v51;
  objc_class *v52;
  int v53;
  const char *v54;
  const char *v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t, const char *, ...);
  objc_class *v65;
  _BOOL4 v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  NSObject *v71;
  objc_class *v72;
  int v73;
  const char *v74;
  const char *v75;
  id v76;
  void *v77;
  id v78;
  void *v79;
  uint64_t v80;
  void *v81;
  id v82;
  id v83;
  void *v84;
  void *v85;
  id v86;
  id v87;
  void *v88;
  const char *v89;
  const char *v90;
  const char *Name;
  const char *v92;
  const char *v93;
  const char *v94;
  id v95;
  id v96;
  id v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  id v102;
  _QWORD v103[4];
  _QWORD v104[4];
  _QWORD v105[5];
  _QWORD v106[5];
  _BYTE v107[128];
  _QWORD v108[5];
  _QWORD v109[5];
  uint8_t buf[4];
  int v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  int v117;
  __int16 v118;
  id v119;

  if (!a1)
    return 0;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("reConfigureApplets");
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 161);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(a1);
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    *(_DWORD *)buf = 67109890;
    v111 = v13;
    v112 = 2082;
    v113 = object_getClassName(a1);
    v114 = 2082;
    v115 = sel_getName("reConfigureApplets");
    v116 = 1024;
    v117 = 161;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v102 = 0;
  v14 = sub_10022C46C(a1, &v102);
  v15 = (id)objc_claimAutoreleasedReturnValue(v14);
  v16 = v102;
  if (v15)
  {
    v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v18 = NFLogGetLogger(v17);
    if (v18)
    {
      v19 = (void (*)(uint64_t, const char *, ...))v18;
      v20 = object_getClass(a1);
      v21 = class_isMetaClass(v20);
      v89 = object_getClassName(a1);
      v92 = sel_getName("reConfigureApplets");
      v22 = 45;
      if (v21)
        v22 = 43;
      v19(3, "%c[%{public}s %{public}s]:%i Failed to pull applets : %{public}@", v22, v89, v92, 166, v15);
    }
    v23 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v24 = NFSharedLogGetLogger(v23);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = object_getClass(a1);
      if (class_isMetaClass(v26))
        v27 = 43;
      else
        v27 = 45;
      v28 = object_getClassName(a1);
      v29 = sel_getName("reConfigureApplets");
      *(_DWORD *)buf = 67110146;
      v111 = v27;
      v112 = 2082;
      v113 = v28;
      v114 = 2082;
      v115 = v29;
      v116 = 1024;
      v117 = 166;
      v118 = 2114;
      v119 = v15;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to pull applets : %{public}@", buf, 0x2Cu);
    }

    v30 = objc_alloc((Class)NSError);
    v31 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v32 = objc_msgSend(v15, "code");
    v108[0] = NSLocalizedDescriptionKey;
    if ((uint64_t)objc_msgSend(v15, "code") > 70)
      v33 = 71;
    else
      v33 = (uint64_t)objc_msgSend(v15, "code");
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EC150[v33]));
    v109[0] = v40;
    v109[1] = v15;
    v108[1] = NSUnderlyingErrorKey;
    v108[2] = CFSTR("Line");
    v109[2] = &off_100303E48;
    v108[3] = CFSTR("Method");
    v58 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("reConfigureApplets"));
    v109[3] = v58;
    v108[4] = NSDebugDescriptionErrorKey;
    v59 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("reConfigureApplets"), 167);
    v109[4] = v59;
    v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v109, v108, 5));
    v57 = objc_msgSend(v30, "initWithDomain:code:userInfo:", v31, v32, v60);

  }
  else
  {
    v31 = objc_opt_new(NSMutableArray);
    v98 = 0u;
    v99 = 0u;
    v100 = 0u;
    v101 = 0u;
    v34 = v16;
    v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v98, v107, 16);
    if (v35)
    {
      v36 = v35;
      v37 = *(_QWORD *)v99;
      do
      {
        for (i = 0; i != v36; i = (char *)i + 1)
        {
          if (*(_QWORD *)v99 != v37)
            objc_enumerationMutation(v34);
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v98 + 1) + 8 * (_QWORD)i), "asDictionary"));
          -[NSMutableArray addObject:](v31, "addObject:", v39);

        }
        v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v98, v107, 16);
      }
      while (v36);
    }

    v97 = 0;
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queryISDCounter:", &v97));
    v15 = v97;
    if (v40)
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData"));
      v96 = v15;
      +[AppletTranslator appletCacheUpdated:serialNumber:isdSequenceCounter:transceiver:error:](AppletTranslator, "appletCacheUpdated:serialNumber:isdSequenceCounter:transceiver:error:", v31, v41, v40, a1, &v96);
      v42 = v96;

      if (v42)
      {
        v43 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v44 = NFLogGetLogger(v43);
        if (v44)
        {
          v45 = (void (*)(uint64_t, const char *, ...))v44;
          v46 = object_getClass(a1);
          v47 = class_isMetaClass(v46);
          v90 = object_getClassName(a1);
          v93 = sel_getName("reConfigureApplets");
          v48 = 45;
          if (v47)
            v48 = 43;
          v45(3, "%c[%{public}s %{public}s]:%i ATL failed to reconfigure : %{public}@", v48, v90, v93, 187, v42);
        }
        v49 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v50 = NFSharedLogGetLogger(v49);
        v51 = objc_claimAutoreleasedReturnValue(v50);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          v52 = object_getClass(a1);
          if (class_isMetaClass(v52))
            v53 = 43;
          else
            v53 = 45;
          v54 = object_getClassName(a1);
          v55 = sel_getName("reConfigureApplets");
          *(_DWORD *)buf = 67110146;
          v111 = v53;
          v112 = 2082;
          v113 = v54;
          v114 = 2082;
          v115 = v55;
          v116 = 1024;
          v117 = 187;
          v118 = 2114;
          v119 = v42;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i ATL failed to reconfigure : %{public}@", buf, 0x2Cu);
        }

        v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ATL failed to reconfigure : %@"), v42));
        sub_100187DFC((uint64_t)NFBugCapture, CFSTR("ATL failed to reconfigure"), v56, &off_100306E98);

        +[NFExceptionsCALogger postAnalyticsATLFailureEvent:aid:error:](NFExceptionsCALogger, "postAnalyticsATLFailureEvent:aid:error:", 2, 0, v42);
        v15 = v42;
        v57 = v15;
      }
      else
      {
        v15 = 0;
        v57 = 0;
      }
    }
    else
    {
      v62 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v63 = NFLogGetLogger(v62);
      if (v63)
      {
        v64 = (void (*)(uint64_t, const char *, ...))v63;
        v65 = object_getClass(a1);
        v66 = class_isMetaClass(v65);
        v67 = object_getClassName(a1);
        v94 = sel_getName("reConfigureApplets");
        v68 = 45;
        if (v66)
          v68 = 43;
        v64(3, "%c[%{public}s %{public}s]:%i Failed to get ISD counter", v68, v67, v94, 177);
      }
      v69 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v70 = NFSharedLogGetLogger(v69);
      v71 = objc_claimAutoreleasedReturnValue(v70);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        v72 = object_getClass(a1);
        if (class_isMetaClass(v72))
          v73 = 43;
        else
          v73 = 45;
        v74 = object_getClassName(a1);
        v75 = sel_getName("reConfigureApplets");
        *(_DWORD *)buf = 67109890;
        v111 = v73;
        v112 = 2082;
        v113 = v74;
        v114 = 2082;
        v115 = v75;
        v116 = 1024;
        v117 = 177;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get ISD counter", buf, 0x22u);
      }

      v76 = objc_alloc((Class)NSError);
      v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      if (v15)
      {
        v78 = objc_msgSend(v15, "code");
        v105[0] = NSLocalizedDescriptionKey;
        v95 = v78;
        v79 = v76;
        if ((uint64_t)objc_msgSend(v15, "code") > 70)
          v80 = 71;
        else
          v80 = (uint64_t)objc_msgSend(v15, "code");
        v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1002EC150[v80]));
        v106[0] = v85;
        v106[1] = v15;
        v105[1] = NSUnderlyingErrorKey;
        v105[2] = CFSTR("Line");
        v106[2] = &off_100303E60;
        v105[3] = CFSTR("Method");
        v86 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("reConfigureApplets"));
        v106[3] = v86;
        v105[4] = NSDebugDescriptionErrorKey;
        v87 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("reConfigureApplets"), 178);
        v106[4] = v87;
        v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v106, v105, 5));
        v57 = objc_msgSend(v79, "initWithDomain:code:userInfo:", v77, v95, v88);

        v40 = 0;
      }
      else
      {
        v103[0] = NSLocalizedDescriptionKey;
        v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
        v104[0] = v81;
        v104[1] = &off_100303E60;
        v103[1] = CFSTR("Line");
        v103[2] = CFSTR("Method");
        v82 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("reConfigureApplets"));
        v104[2] = v82;
        v103[3] = NSDebugDescriptionErrorKey;
        v83 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("reConfigureApplets"), 178);
        v104[3] = v83;
        v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v104, v103, 4));
        v57 = objc_msgSend(v76, "initWithDomain:code:userInfo:", v77, 6, v84);

        v40 = 0;
        v15 = 0;
      }
    }
  }

  return v57;
}

id sub_100239BA4(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void (*v26)(uint64_t, const char *, ...);
  objc_class *v27;
  _BOOL4 v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  objc_class *v34;
  int v35;
  const char *v36;
  const char *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  const char *Name;
  const char *v45;
  id v46;
  _QWORD v47[3];
  _QWORD v48[3];
  uint8_t buf[4];
  int v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  id v60;

  v5 = a3;
  v6 = v5;
  if (!a1)
  {
    v19 = 0;
    goto LABEL_25;
  }
  if (objc_msgSend(v5, "isTypeF"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("setPlasticCardMode:forApplet:");
      v13 = 45;
      if (isMetaClass)
        v13 = 43;
      v9(6, "%c[%{public}s %{public}s]:%i Applet is typeF, skipping", v13, ClassName, Name, 207);
    }
    v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v15 = NFSharedLogGetLogger(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = object_getClass(a1);
      if (class_isMetaClass(v17))
        v18 = 43;
      else
        v18 = 45;
      *(_DWORD *)buf = 67109890;
      v50 = v18;
      v51 = 2082;
      v52 = object_getClassName(a1);
      v53 = 2082;
      v54 = sel_getName("setPlasticCardMode:forApplet:");
      v55 = 1024;
      v56 = 207;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Applet is typeF, skipping", buf, 0x22u);
    }
    v19 = 0;
LABEL_24:

    goto LABEL_25;
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "packageIdentifier"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "moduleIdentifier"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serialNumberAsData"));
  v46 = 0;
  +[AppletTranslator setPlasticCardMode:withApplet:withPackage:withModule:serialNumber:transceiver:error:](AppletTranslator, "setPlasticCardMode:withApplet:withPackage:withModule:serialNumber:transceiver:error:", a2, v20, v21, v22, v23, a1, &v46);
  v19 = v46;

  if (v19)
  {
    v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v25 = NFLogGetLogger(v24);
    if (v25)
    {
      v26 = (void (*)(uint64_t, const char *, ...))v25;
      v27 = object_getClass(a1);
      v28 = class_isMetaClass(v27);
      v29 = object_getClassName(a1);
      v45 = sel_getName("setPlasticCardMode:forApplet:");
      v30 = 45;
      if (v28)
        v30 = 43;
      v26(3, "%c[%{public}s %{public}s]:%i ATL failed to configure plastic card mode : enable=%d %{public}@", v30, v29, v45, 222, a2, v19);
    }
    v31 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v32 = NFSharedLogGetLogger(v31);
    v33 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v34 = object_getClass(a1);
      if (class_isMetaClass(v34))
        v35 = 43;
      else
        v35 = 45;
      v36 = object_getClassName(a1);
      v37 = sel_getName("setPlasticCardMode:forApplet:");
      *(_DWORD *)buf = 67110402;
      v50 = v35;
      v51 = 2082;
      v52 = v36;
      v53 = 2082;
      v54 = v37;
      v55 = 1024;
      v56 = 222;
      v57 = 1024;
      v58 = a2;
      v59 = 2114;
      v60 = v19;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i ATL failed to configure plastic card mode : enable=%d %{public}@", buf, 0x32u);
    }

    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "packageIdentifier"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Applet AID: %@, Applet PID: %@"), v38, v39));
    v47[0] = CFSTR("Applet Identifier");
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    v48[0] = v41;
    v48[1] = CFSTR("Other Bug");
    v47[1] = CFSTR("Classification");
    v47[2] = CFSTR("FailureKey");
    v48[2] = CFSTR("ttrPlastic");
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v48, v47, 3));
    sub_100187DFC((uint64_t)NFBugCapture, CFSTR("ATL failed to configure plastic card mode"), v40, v42);

    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    +[NFExceptionsCALogger postAnalyticsATLFailureEvent:aid:error:](NFExceptionsCALogger, "postAnalyticsATLFailureEvent:aid:error:", 3, v16, v19);
    goto LABEL_24;
  }
LABEL_25:

  return v19;
}

id sub_10023A03C(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *i;
  void *v27;
  unsigned __int8 v28;
  char v29;
  unsigned __int8 v30;
  id v31;
  id v32;
  void *specific;
  uint64_t Logger;
  void (*v35)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  objc_class *v43;
  int v44;
  const char *v45;
  const char *v46;
  void *v47;
  char v48;
  NFApplet *v49;
  unsigned __int8 v50;
  void *v51;
  uint64_t v52;
  void (*v53)(uint64_t, const char *, ...);
  objc_class *v54;
  _BOOL4 v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  objc_class *v62;
  int v63;
  const char *v64;
  const char *v65;
  id v66;
  objc_class *v67;
  _BOOL4 v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  objc_class *v74;
  int v75;
  const char *v76;
  const char *v77;
  void *v78;
  const char *v80;
  const char *Name;
  const char *v82;
  id v83;
  unsigned int v84;
  unsigned int v85;
  id v86;
  id v87;
  id v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  BOOL v93;
  uint8_t buf[4];
  int v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  int v101;
  __int16 v102;
  _BYTE v103[10];
  _BYTE v104[6];
  _BYTE v105[128];

  v7 = a2;
  v86 = a3;
  if (a1)
  {
    v84 = a4;
    if (objc_msgSend(v7, "count") == (id)1
      && (v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "activeApplet"))) != 0)
    {
      v9 = (void *)v8;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "activeApplet"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifierAsData"));
      v12 = objc_msgSend(v11, "length");

      if (v12)
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", 0));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("appletIdentifier")));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("expressEnabled")));
        v16 = objc_msgSend(v15, "BOOLValue");

        if (v16)
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "activeApplet"));
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifierAsData"));
          v19 = v7;
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "NF_asHexString"));
          v85 = objc_msgSend(v20, "isEqualToString:", v14);

          v7 = v19;
        }
        else
        {
          v85 = 0;
        }

      }
      else
      {
        v85 = 0;
      }
      a4 = v84;
    }
    else
    {
      v85 = 0;
    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "activeApplet"));

    v93 = v21 != 0;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v83 = v7;
    v22 = v7;
    v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v89, v105, 16);
    if (v23)
    {
      v24 = v23;
      v25 = *(_QWORD *)v90;
      while (2)
      {
        for (i = 0; i != v24; i = (char *)i + 1)
        {
          if (*(_QWORD *)v90 != v25)
            objc_enumerationMutation(v22);
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v89 + 1) + 8 * (_QWORD)i), "objectForKeyedSubscript:", CFSTR("expressEnabled")));
          v28 = objc_msgSend(v27, "BOOLValue");

          if ((v28 & 1) != 0)
          {
            v29 = 1;
            goto LABEL_22;
          }
        }
        v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v89, v105, 16);
        if (v24)
          continue;
        break;
      }
      v29 = 0;
LABEL_22:
      a4 = v84;
    }
    else
    {
      v29 = 0;
    }

    v88 = 0;
    v30 = +[AppletTranslator configureSEWithPassInformation:transceiver:limitedToAID:seHasActivatedApplets:skipAllActivations:useLegacyBehavior:error:](AppletTranslator, "configureSEWithPassInformation:transceiver:limitedToAID:seHasActivatedApplets:skipAllActivations:useLegacyBehavior:error:", v22, a1, v86, &v93, v85, a4, &v88);
    v31 = v88;
    v32 = v31;
    if (v31 && objc_msgSend(v31, "code") == (id)5)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v35 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("configureSEExprWithPassInformation:limitedToAID:legacyWalletBehavior:");
        v39 = 45;
        if (isMetaClass)
          v39 = 43;
        v80 = ClassName;
        a4 = v84;
        v35(4, "%c[%{public}s %{public}s]:%i Applet is badly behaved, needs to be powercycled", v39, v80, Name, 275);
      }
      v40 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v41 = NFSharedLogGetLogger(v40);
      v42 = objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        v43 = object_getClass(a1);
        if (class_isMetaClass(v43))
          v44 = 43;
        else
          v44 = 45;
        v45 = object_getClassName(a1);
        v46 = sel_getName("configureSEExprWithPassInformation:limitedToAID:legacyWalletBehavior:");
        *(_DWORD *)buf = 67109890;
        v95 = v44;
        a4 = v84;
        v96 = 2082;
        v97 = v45;
        v98 = 2082;
        v99 = v46;
        v100 = 1024;
        v101 = 275;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Applet is badly behaved, needs to be powercycled", buf, 0x22u);
      }

      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "powerCycleOrReset"));
      if (v47 && objc_msgSend(v47, "code"))
      {
        v32 = v47;
      }
      else
      {

        v87 = 0;
        v30 = +[AppletTranslator configureSEWithPassInformation:transceiver:limitedToAID:seHasActivatedApplets:skipAllActivations:useLegacyBehavior:error:](AppletTranslator, "configureSEWithPassInformation:transceiver:limitedToAID:seHasActivatedApplets:skipAllActivations:useLegacyBehavior:error:", v22, a1, v86, &v93, v85, a4, &v87);
        v32 = v87;
      }
    }
    if (v93)
      v48 = 1;
    else
      v48 = v29;
    if ((v48 & 1) != 0)
    {
      v49 = objc_opt_new(NFApplet);
      objc_msgSend(a1, "setActiveApplet:", v49);

    }
    else
    {
      objc_msgSend(a1, "setActiveApplet:", 0);
    }
    if (v32)
      v50 = 0;
    else
      v50 = v30;
    v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v52 = NFLogGetLogger(v51);
    v53 = (void (*)(uint64_t, const char *, ...))v52;
    if ((v50 & 1) != 0)
    {
      if (v52)
      {
        v54 = object_getClass(a1);
        v55 = class_isMetaClass(v54);
        v56 = object_getClassName(a1);
        v57 = sel_getName("configureSEExprWithPassInformation:limitedToAID:legacyWalletBehavior:");
        v58 = 45;
        if (v55)
          v58 = 43;
        v53(6, "%c[%{public}s %{public}s]:%i Successfully configured ATL for Express. Skipped %d Dirty before %d after %d", v58, v56, v57, 306, v85, v21 != 0, v93);
      }
      v59 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v60 = NFSharedLogGetLogger(v59);
      v61 = objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        v62 = object_getClass(a1);
        if (class_isMetaClass(v62))
          v63 = 43;
        else
          v63 = 45;
        v64 = object_getClassName(a1);
        v65 = sel_getName("configureSEExprWithPassInformation:limitedToAID:legacyWalletBehavior:");
        *(_DWORD *)buf = 67110658;
        v95 = v63;
        v96 = 2082;
        v97 = v64;
        v98 = 2082;
        v99 = v65;
        v100 = 1024;
        v101 = 306;
        v102 = 1024;
        *(_DWORD *)v103 = v85;
        *(_WORD *)&v103[4] = 1024;
        *(_DWORD *)&v103[6] = v21 != 0;
        *(_WORD *)v104 = 1024;
        *(_DWORD *)&v104[2] = v93;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Successfully configured ATL for Express. Skipped %d Dirty before %d after %d", buf, 0x34u);
      }
      v66 = 0;
      v7 = v83;
    }
    else
    {
      if (v52)
      {
        v67 = object_getClass(a1);
        v68 = class_isMetaClass(v67);
        v69 = object_getClassName(a1);
        v82 = sel_getName("configureSEExprWithPassInformation:limitedToAID:legacyWalletBehavior:");
        v70 = 45;
        if (v68)
          v70 = 43;
        v53(3, "%c[%{public}s %{public}s]:%i Error : failed to configure SE pass information : %{public}@, useLegacyBehavior=%{public}d", v70, v69, v82, 292, v32, a4);
      }
      v71 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v72 = NFSharedLogGetLogger(v71);
      v73 = objc_claimAutoreleasedReturnValue(v72);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        v74 = object_getClass(a1);
        if (class_isMetaClass(v74))
          v75 = 43;
        else
          v75 = 45;
        v76 = object_getClassName(a1);
        v77 = sel_getName("configureSEExprWithPassInformation:limitedToAID:legacyWalletBehavior:");
        *(_DWORD *)buf = 67110402;
        v95 = v75;
        v96 = 2082;
        v97 = v76;
        v98 = 2082;
        v99 = v77;
        v100 = 1024;
        v101 = 292;
        v102 = 2114;
        *(_QWORD *)v103 = v32;
        *(_WORD *)&v103[8] = 1026;
        *(_DWORD *)v104 = a4;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error : failed to configure SE pass information : %{public}@, useLegacyBehavior=%{public}d", buf, 0x32u);
      }

      v7 = v83;
      if (v32)
      {
        v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "localizedDescription"));
        v61 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error: %@, Code: %ld"), v78, objc_msgSend(v32, "code")));

      }
      else
      {
        v61 = CFSTR("No response from ATL");
      }
      sub_100187DFC((uint64_t)NFBugCapture, CFSTR("Failed to configure SE Express info"), v61, &off_100306EC0);
      +[NFExceptionsCALogger postAnalyticsATLFailureEvent:aid:error:](NFExceptionsCALogger, "postAnalyticsATLFailureEvent:aid:error:", 4, 0, v32);
      v66 = v32;
    }

  }
  else
  {
    v66 = 0;
  }

  return v66;
}

uint64_t sub_10023A858(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  void *v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _QWORD v25[4];

  v3 = a2;
  if (a1)
  {
    v4 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB54, 10);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "NF_asHexString"));
    v25[0] = v5;
    v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB5E, 8);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "NF_asHexString"));
    v25[1] = v7;
    v8 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB66, 12);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "NF_asHexString"));
    v25[2] = v9;
    v10 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB72, 10);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "NF_asHexString"));
    v25[3] = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v25, 4));

    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v13 = v12;
    v14 = (uint64_t)objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v21;
      while (2)
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v21 != v15)
            objc_enumerationMutation(v13);
          v17 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "moduleIdentifier", (_QWORD)v20));
          LOBYTE(v17) = objc_msgSend(v18, "isEqualToString:", v17);

          if ((v17 & 1) != 0)
          {
            v14 = 1;
            goto LABEL_12;
          }
        }
        v14 = (uint64_t)objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        if (v14)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

id sub_10023AA88(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  BOOL v10;
  void *specific;
  uint64_t Logger;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  const char *v22;
  const char *v23;
  void *v24;
  __CFString *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  const char *ClassName;
  const char *Name;
  id v39;
  NSErrorUserInfoKey v40;
  void *v41;
  NSErrorUserInfoKey v42;
  void *v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  void *v53;

  v5 = a2;
  v6 = (void *)objc_opt_self(a1);
  v39 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[AppletTranslator checkSEExpressAppletCompatibilityWithPassInformation:error:](AppletTranslator, "checkSEExpressAppletCompatibilityWithPassInformation:error:", v5, &v39));

  v8 = v39;
  v9 = v8;
  if (v7)
    v10 = v8 == 0;
  else
    v10 = 0;
  if (!v10)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v13 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v6);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v6);
      Name = sel_getName("checkSEExpressPassCompatibility:error:");
      v16 = 45;
      if (isMetaClass)
        v16 = 43;
      v13(3, "%c[%{public}s %{public}s]:%i Error : failed to check SE Express Compatibility : %{public}@", v16, ClassName, Name, 335, v9);
    }
    v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v18 = NFSharedLogGetLogger(v17);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = object_getClass(v6);
      if (class_isMetaClass(v20))
        v21 = 43;
      else
        v21 = 45;
      v22 = object_getClassName(v6);
      v23 = sel_getName("checkSEExpressPassCompatibility:error:");
      *(_DWORD *)buf = 67110146;
      v45 = v21;
      v46 = 2082;
      v47 = v22;
      v48 = 2082;
      v49 = v23;
      v50 = 1024;
      v51 = 335;
      v52 = 2114;
      v53 = v9;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error : failed to check SE Express Compatibility : %{public}@", buf, 0x2Cu);
    }

    if (v9)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedDescription"));
      v25 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error: %@, Code: %ld"), v24, objc_msgSend(v9, "code")));

      sub_100187DFC((uint64_t)NFBugCapture, CFSTR("Failed to check SE Express compatibility"), v25, &off_100306EE8);
      +[NFExceptionsCALogger postAnalyticsATLFailureEvent:aid:error:](NFExceptionsCALogger, "postAnalyticsATLFailureEvent:aid:error:", 5, 0, v9);
      if (a3)
        *a3 = objc_retainAutorelease(v9);
    }
    else
    {
      v25 = CFSTR("No response received");
      sub_100187DFC((uint64_t)NFBugCapture, CFSTR("Failed to check SE Express compatibility"), CFSTR("No response received"), &off_100306EE8);
      v26 = objc_alloc((Class)NSError);
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v42 = NSLocalizedDescriptionKey;
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
      v43 = v28;
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
      v30 = objc_msgSend(v26, "initWithDomain:code:userInfo:", v27, 13, v29);
      +[NFExceptionsCALogger postAnalyticsATLFailureEvent:aid:error:](NFExceptionsCALogger, "postAnalyticsATLFailureEvent:aid:error:", 5, 0, v30);

      if (a3)
      {
        v31 = objc_alloc((Class)NSError);
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v40 = NSLocalizedDescriptionKey;
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
        v41 = v33;
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1));
        v35 = objc_retainAutorelease(objc_msgSend(v31, "initWithDomain:code:userInfo:", v32, 13, v34));
        *a3 = v35;

        v25 = CFSTR("No response received");
      }
    }

  }
  return v7;
}

id sub_10023AEA0(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  void *specific;
  uint64_t Logger;
  void (*v16)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  const char *v25;
  const char *v26;
  void *v27;
  __CFString *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  const char *ClassName;
  const char *Name;
  id v42;
  NSErrorUserInfoKey v43;
  void *v44;
  NSErrorUserInfoKey v45;
  void *v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  void *v56;

  v5 = a2;
  v6 = (void *)objc_opt_self(a1);
  v7 = objc_claimAutoreleasedReturnValue(+[_NFHardwareManager sharedHardwareManager](_NFHardwareManager, "sharedHardwareManager"));
  v8 = (void *)v7;
  if (v7)
  {
    v9 = (unint64_t)objc_msgSend(*(id *)(v7 + 120), "walletDomain");
    if (v9 <= 4)
      v10 = (0x19u >> v9) & 1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }

  v42 = 0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[AppletTranslator checkSEExpressAppletCompatibilityWithPassInformation:useLegacyBehavior:error:](AppletTranslator, "checkSEExpressAppletCompatibilityWithPassInformation:useLegacyBehavior:error:", v5, v10, &v42));

  v12 = v42;
  v13 = v12;
  if (!v11 || v12)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v16 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v6);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v6);
      Name = sel_getName("validateSEExpressPassCompatibility:outError:");
      v19 = 45;
      if (isMetaClass)
        v19 = 43;
      v16(3, "%c[%{public}s %{public}s]:%i Error : failed to check SE Express Compatibility : %{public}@", v19, ClassName, Name, 365, v13);
    }
    v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v21 = NFSharedLogGetLogger(v20);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = object_getClass(v6);
      if (class_isMetaClass(v23))
        v24 = 43;
      else
        v24 = 45;
      v25 = object_getClassName(v6);
      v26 = sel_getName("validateSEExpressPassCompatibility:outError:");
      *(_DWORD *)buf = 67110146;
      v48 = v24;
      v49 = 2082;
      v50 = v25;
      v51 = 2082;
      v52 = v26;
      v53 = 1024;
      v54 = 365;
      v55 = 2114;
      v56 = v13;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error : failed to check SE Express Compatibility : %{public}@", buf, 0x2Cu);
    }

    if (v13)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedDescription"));
      v28 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error: %@, Code: %ld"), v27, objc_msgSend(v13, "code")));

      sub_100187DFC((uint64_t)NFBugCapture, CFSTR("Failed to check SE Express compatibility"), v28, &off_100306F10);
      +[NFExceptionsCALogger postAnalyticsATLFailureEvent:aid:error:](NFExceptionsCALogger, "postAnalyticsATLFailureEvent:aid:error:", 5, 0, v13);
      if (a3)
        *a3 = objc_retainAutorelease(v13);
    }
    else
    {
      v28 = CFSTR("No response received");
      sub_100187DFC((uint64_t)NFBugCapture, CFSTR("Failed to check SE Express compatibility"), CFSTR("No response received"), &off_100306F10);
      v29 = objc_alloc((Class)NSError);
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v45 = NSLocalizedDescriptionKey;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
      v46 = v31;
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1));
      v33 = objc_msgSend(v29, "initWithDomain:code:userInfo:", v30, 13, v32);
      +[NFExceptionsCALogger postAnalyticsATLFailureEvent:aid:error:](NFExceptionsCALogger, "postAnalyticsATLFailureEvent:aid:error:", 5, 0, v33);

      if (a3)
      {
        v34 = objc_alloc((Class)NSError);
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v43 = NSLocalizedDescriptionKey;
        v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unexpected Result"));
        v44 = v36;
        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v44, &v43, 1));
        v38 = objc_retainAutorelease(objc_msgSend(v34, "initWithDomain:code:userInfo:", v35, 13, v37));
        *a3 = v38;

        v28 = CFSTR("No response received");
      }
    }

  }
  return v11;
}

id sub_10023B2F8(uint64_t a1, uint64_t a2)
{
  objc_opt_self(a1);
  return +[AppletTranslator getCurrentInMetroStatus:](AppletTranslator, "getCurrentInMetroStatus:", a2);
}

id sub_10023B324(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *specific;
  uint64_t Logger;
  void (*v14)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  const char *v23;
  const char *v24;
  void *v25;
  void *v26;
  void *v27;
  const char *ClassName;
  const char *Name;
  id v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  id v41;

  v5 = a2;
  v6 = v5;
  if (a1)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "packageIdentifier"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "moduleIdentifier"));
    v31 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[AppletTranslator processEndOfTransaction:withPackage:withModule:withTransceiver:withError:](AppletTranslator, "processEndOfTransaction:withPackage:withModule:withTransceiver:withError:", v7, v8, v9, a1, &v31));
    v11 = v31;

    if (v11)
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v14 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("processEndOfFelicaTransactionForApplet:error:");
        v17 = 45;
        if (isMetaClass)
          v17 = 43;
        v14(3, "%c[%{public}s %{public}s]:%i Error : failed to process End of Transaction : %{public}@", v17, ClassName, Name, 400, v11);
      }
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFSharedLogGetLogger(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = object_getClass(a1);
        if (class_isMetaClass(v21))
          v22 = 43;
        else
          v22 = 45;
        v23 = object_getClassName(a1);
        v24 = sel_getName("processEndOfFelicaTransactionForApplet:error:");
        *(_DWORD *)buf = 67110146;
        v33 = v22;
        v34 = 2082;
        v35 = v23;
        v36 = 2082;
        v37 = v24;
        v38 = 1024;
        v39 = 400;
        v40 = 2114;
        v41 = v11;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error : failed to process End of Transaction : %{public}@", buf, 0x2Cu);
      }

      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedDescription"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error: %@, Code: %ld"), v25, objc_msgSend(v11, "code")));
      sub_100187DFC((uint64_t)NFBugCapture, CFSTR("Error while processing end of transaction"), v26, 0);

      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
      +[NFExceptionsCALogger postAnalyticsATLFailureEvent:aid:error:](NFExceptionsCALogger, "postAnalyticsATLFailureEvent:aid:error:", 6, v27, v11);

      if (a3)
        *a3 = objc_retainAutorelease(v11);
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id sub_10023B608(id result, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  if (result)
  {
    v2 = a2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "identifier"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "packageIdentifier"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "moduleIdentifier"));

    v6 = +[AppletTranslator isLegacyApplet:withPackage:withModule:](AppletTranslator, "isLegacyApplet:withPackage:withModule:", v3, v4, v5);
    return v6;
  }
  return result;
}

id sub_10023B69C(uint64_t a1)
{
  objc_opt_self(a1);
  return +[AppletTranslator cleanup](AppletTranslator, "cleanup");
}

id *sub_10023B6B8(id *a1, void *a2, void *a3, void *a4, unint64_t a5)
{
  id v9;
  id v10;
  id *v11;
  dispatch_queue_attr_t v12;
  NSObject *v13;
  dispatch_queue_t v14;
  id v15;
  id v16;
  id v17;
  unint64_t v18;
  objc_super v20;

  v9 = a3;
  v10 = a4;
  if (a1)
  {
    v20.receiver = a1;
    v20.super_class = (Class)NFTNEPHandler;
    v11 = (id *)objc_msgSendSuper2(&v20, "init");
    a1 = v11;
    if (v11)
    {
      v11[2] = a2;
      objc_storeWeak(v11 + 5, v9);
      v12 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      v14 = dispatch_queue_create("com.apple.nfcd.tnepHandler", v13);
      v15 = a1[3];
      a1[3] = v14;

      dispatch_queue_set_specific((dispatch_queue_t)a1[3], kNFLOG_DISPATCH_SPECIFIC_KEY, 0, 0);
      objc_storeStrong(a1 + 11, a4);
      v16 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithLength:", 2050);
      v17 = a1[10];
      a1[10] = v16;

      v18 = 0xEEEEB0B5B2B2EEEELL;
      if (a5)
        v18 = a5;
      a1[13] = (id)v18;
    }
  }

  return a1;
}

void sub_10023B7E0(uint64_t a1, void *a2)
{
  void *v4;
  id v5;

  v5 = a2;
  if (a1)
  {
    v4 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;

    objc_storeStrong((id *)(a1 + 56), a2);
    *(_BYTE *)(a1 + 8) = 0;
    sub_10023F528(a1);
    sub_10023F918(a1, CFSTR("HCE_TagDeviceHandlingStart"));
  }

}

void sub_10023B858(id *a1, void *a2)
{
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  id v15;
  id v16;
  char v17;
  id v18;
  int v19;
  char v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *i;
  void *v26;
  void *v27;
  _BOOL4 v28;
  void *v29;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  const char *v40;
  const char *v41;
  void *v42;
  unsigned int v43;
  void *v44;
  void (*v45)(uint64_t, const char *, ...);
  objc_class *v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  void *v50;
  uint64_t v51;
  objc_class *v52;
  int v53;
  const char *v54;
  const char *v55;
  void *v56;
  unsigned int v57;
  void *v58;
  void (*v59)(uint64_t, const char *, ...);
  objc_class *v60;
  uint64_t v61;
  const char *v62;
  const char *v63;
  void *v64;
  uint64_t v65;
  objc_class *v66;
  int v67;
  const char *v68;
  const char *v69;
  id v70;
  id v71;
  uint64_t v72;
  void *j;
  void *v74;
  void *v75;
  unsigned int v76;
  void *v77;
  _BOOL4 v78;
  void *v79;
  void (*v80)(uint64_t, const char *, ...);
  objc_class *v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  void *v85;
  uint64_t v86;
  NSObject *v87;
  objc_class *v88;
  int v89;
  const char *v90;
  const char *v91;
  NSObject *v92;
  id v93;
  id v94;
  _BYTE *v95;
  void *v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void (*v102)(uint64_t, const char *, ...);
  objc_class *v103;
  uint64_t v104;
  const char *v105;
  const char *v106;
  void *v107;
  uint64_t v108;
  NSObject *v109;
  objc_class *v110;
  int v111;
  const char *v112;
  const char *v113;
  void *v114;
  void (*v115)(uint64_t, const char *, ...);
  objc_class *v116;
  uint64_t v117;
  const char *v118;
  const char *v119;
  void *v120;
  uint64_t v121;
  objc_class *v122;
  int v123;
  const char *v124;
  const char *v125;
  id *v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  NSObject *v130;
  os_signpost_id_t v131;
  NSObject *v132;
  void *v133;
  void (*v134)(uint64_t, const char *, ...);
  objc_class *v135;
  uint64_t v136;
  const char *v137;
  const char *v138;
  void *v139;
  uint64_t v140;
  NSObject *v141;
  objc_class *v142;
  int v143;
  const char *v144;
  const char *v145;
  id v146;
  id v147;
  id *v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  NSObject *v152;
  os_signpost_id_t v153;
  NSObject *v154;
  const char *Name;
  id v156;
  id v157;
  id v158;
  id v159;
  void *v160;
  id v161;
  NSMutableArray *v162;
  id v164;
  char v165;
  id v166;
  char obj;
  id obja;
  id v169;
  id v170;
  id v171;
  uint64_t v172[2];
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint8_t v182[128];
  uint8_t block[8];
  _BYTE v184[40];
  uint8_t buf[8];
  _BYTE v186[42];

  v161 = a2;
  if (!a1)
    goto LABEL_137;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(a1);
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("handleDeviceTag:");
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v5(6, "%c[%{public}s %{public}s]:%i ", v9, ClassName, Name, 120);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(a1);
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v14;
    *(_WORD *)v186 = 2082;
    *(_QWORD *)&v186[2] = object_getClassName(a1);
    *(_WORD *)&v186[10] = 2082;
    *(_QWORD *)&v186[12] = sel_getName("handleDeviceTag:");
    *(_WORD *)&v186[20] = 1024;
    *(_DWORD *)&v186[22] = 120;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  v172[0] = 0;
  v172[1] = 0;
  v173 = 0;
  v15 = a1[11];
  v171 = 0;
  v16 = v15;
  v17 = sub_10017F4D4(v16, v161, v172, (uint64_t)&v171);
  v18 = v171;
  v19 = v173;

  if (v19)
    v20 = v17;
  else
    v20 = 0;
  if ((v20 & 1) == 0)
  {
    v133 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v134 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v133);
    if (v134)
    {
      v135 = object_getClass(a1);
      if (class_isMetaClass(v135))
        v136 = 43;
      else
        v136 = 45;
      v137 = object_getClassName(a1);
      v138 = sel_getName("handleDeviceTag:");
      v134(4, "%c[%{public}s %{public}s]:%i NDEF capability query failed: %{public}@, readable=%d", v136, v137, v138, 127, v18, v173);
    }
    v139 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v140 = NFSharedLogGetLogger(v139);
    v141 = objc_claimAutoreleasedReturnValue(v140);
    if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
    {
      v142 = object_getClass(a1);
      if (class_isMetaClass(v142))
        v143 = 43;
      else
        v143 = 45;
      v144 = object_getClassName(a1);
      v145 = sel_getName("handleDeviceTag:");
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v143;
      *(_WORD *)v186 = 2082;
      *(_QWORD *)&v186[2] = v144;
      *(_WORD *)&v186[10] = 2082;
      *(_QWORD *)&v186[12] = v145;
      *(_WORD *)&v186[20] = 1024;
      *(_DWORD *)&v186[22] = 127;
      *(_WORD *)&v186[26] = 2114;
      *(_QWORD *)&v186[28] = v18;
      *(_WORD *)&v186[36] = 1024;
      *(_DWORD *)&v186[38] = v173;
      _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i NDEF capability query failed: %{public}@, readable=%d", buf, 0x32u);
    }

    sub_1001FBF60(a1[11]);
    goto LABEL_136;
  }
  v170 = v18;
  v21 = sub_10023C8B8(a1, v161, &v170);
  v160 = (void *)objc_claimAutoreleasedReturnValue(v21);
  v159 = v170;

  if (!v160 || v159)
  {
    if (v159 && objc_msgSend(v159, "code") == (id)47)
      goto LABEL_135;
    sub_1001FBF60(a1[11]);
  }
  v158 = v160;
  v157 = v161;
  v169 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026ABA8, 2);
  v164 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026ABAA, 2);
  v176 = 0u;
  v177 = 0u;
  v174 = 0u;
  v175 = 0u;
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v158, "records"));
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v174, v182, 16);
  if (!v23)
  {

    goto LABEL_134;
  }
  v165 = 0;
  obj = 0;
  v24 = *(_QWORD *)v175;
  do
  {
    for (i = 0; i != v23; i = (char *)i + 1)
    {
      if (*(_QWORD *)v175 != v24)
        objc_enumerationMutation(v22);
      v26 = *(void **)(*((_QWORD *)&v174 + 1) + 8 * (_QWORD)i);
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "payload"));
      v28 = (unint64_t)objc_msgSend(v27, "length") < 2;

      if (v28)
      {
        v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v29);
        if (v30)
        {
          v31 = object_getClass(a1);
          if (class_isMetaClass(v31))
            v32 = 43;
          else
            v32 = 45;
          v33 = object_getClassName(a1);
          v34 = sel_getName("_processNdefRead:tag:");
          v30(4, "%c[%{public}s %{public}s]:%i Invalid Service Parameter record; ignore", v32, v33, v34, 937);
        }
        v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v36 = NFSharedLogGetLogger(v35);
        v37 = objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          v38 = object_getClass(a1);
          if (class_isMetaClass(v38))
            v39 = 43;
          else
            v39 = 45;
          v40 = object_getClassName(a1);
          v41 = sel_getName("_processNdefRead:tag:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v39;
          *(_WORD *)v186 = 2082;
          *(_QWORD *)&v186[2] = v40;
          *(_WORD *)&v186[10] = 2082;
          *(_QWORD *)&v186[12] = v41;
          *(_WORD *)&v186[20] = 1024;
          *(_DWORD *)&v186[22] = 937;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid Service Parameter record; ignore",
            buf,
            0x22u);
        }
      }
      else
      {
        if (objc_msgSend(v26, "typeNameFormat") != 1)
          continue;
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "type"));
        v43 = objc_msgSend(v42, "isEqual:", v169);

        if (v43)
        {
          v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v44);
          if (v45)
          {
            v46 = object_getClass(a1);
            if (class_isMetaClass(v46))
              v47 = 43;
            else
              v47 = 45;
            v48 = object_getClassName(a1);
            v49 = sel_getName("_processNdefRead:tag:");
            v45(6, "%c[%{public}s %{public}s]:%i Negotiated Handover Exchange identified.", v47, v48, v49, 943);
          }
          v50 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v51 = NFSharedLogGetLogger(v50);
          v37 = objc_claimAutoreleasedReturnValue(v51);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            v52 = object_getClass(a1);
            if (class_isMetaClass(v52))
              v53 = 43;
            else
              v53 = 45;
            v54 = object_getClassName(a1);
            v55 = sel_getName("_processNdefRead:tag:");
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v53;
            *(_WORD *)v186 = 2082;
            *(_QWORD *)&v186[2] = v54;
            *(_WORD *)&v186[10] = 2082;
            *(_QWORD *)&v186[12] = v55;
            *(_WORD *)&v186[20] = 1024;
            *(_DWORD *)&v186[22] = 943;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Negotiated Handover Exchange identified.", buf, 0x22u);
          }
          obj = 1;
        }
        else
        {
          v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "type"));
          v57 = objc_msgSend(v56, "isEqual:", v164);

          if (!v57)
            continue;
          v58 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v59 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v58);
          if (v59)
          {
            v60 = object_getClass(a1);
            if (class_isMetaClass(v60))
              v61 = 43;
            else
              v61 = 45;
            v62 = object_getClassName(a1);
            v63 = sel_getName("_processNdefRead:tag:");
            v59(6, "%c[%{public}s %{public}s]:%i Static Handover Exchange identified.", v61, v62, v63, 946);
          }
          v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v65 = NFSharedLogGetLogger(v64);
          v37 = objc_claimAutoreleasedReturnValue(v65);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            v66 = object_getClass(a1);
            if (class_isMetaClass(v66))
              v67 = 43;
            else
              v67 = 45;
            v68 = object_getClassName(a1);
            v69 = sel_getName("_processNdefRead:tag:");
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v67;
            *(_WORD *)v186 = 2082;
            *(_QWORD *)&v186[2] = v68;
            *(_WORD *)&v186[10] = 2082;
            *(_QWORD *)&v186[12] = v69;
            *(_WORD *)&v186[20] = 1024;
            *(_DWORD *)&v186[22] = 946;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Static Handover Exchange identified.", buf, 0x22u);
          }
          v165 = 1;
        }
      }

    }
    v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v174, v182, 16);
  }
  while (v23);

  if ((obj & 1) != 0)
  {
    v70 = v158;
    v156 = v157;
    v166 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026ABA8, 2);
    v162 = objc_opt_new(NSMutableArray);
    v180 = 0u;
    v181 = 0u;
    v178 = 0u;
    v179 = 0u;
    obja = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "records"));
    v71 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v178, buf, 16);
    if (!v71)
      goto LABEL_109;
    v72 = *(_QWORD *)v179;
    while (1)
    {
      for (j = 0; j != v71; j = (char *)j + 1)
      {
        if (*(_QWORD *)v179 != v72)
          objc_enumerationMutation(obja);
        v74 = *(void **)(*((_QWORD *)&v178 + 1) + 8 * (_QWORD)j);
        if (objc_msgSend(v74, "typeNameFormat") == 1)
        {
          v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "type"));
          v76 = objc_msgSend(v75, "isEqual:", v166);

          if (v76)
          {
            v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "payload"));
            v78 = (unint64_t)objc_msgSend(v77, "length") < 2;

            if (v78)
            {
              v79 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v80 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v79);
              if (v80)
              {
                v81 = object_getClass(a1);
                if (class_isMetaClass(v81))
                  v82 = 43;
                else
                  v82 = 45;
                v83 = object_getClassName(a1);
                v84 = sel_getName("_processNegotiatedNdefRead:tag:");
                v80(4, "%c[%{public}s %{public}s]:%i Invalid Service Parameter record; ignore", v82, v83, v84, 874);
              }
              v85 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v86 = NFSharedLogGetLogger(v85);
              v87 = objc_claimAutoreleasedReturnValue(v86);
              if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
              {
                v88 = object_getClass(a1);
                if (class_isMetaClass(v88))
                  v89 = 43;
                else
                  v89 = 45;
                v90 = object_getClassName(a1);
                v91 = sel_getName("_processNegotiatedNdefRead:tag:");
                *(_DWORD *)block = 67109890;
                *(_DWORD *)&block[4] = v89;
                *(_WORD *)v184 = 2082;
                *(_QWORD *)&v184[2] = v90;
                *(_WORD *)&v184[10] = 2082;
                *(_QWORD *)&v184[12] = v91;
                *(_WORD *)&v184[20] = 1024;
                *(_DWORD *)&v184[22] = 874;
                v92 = v87;
                goto LABEL_105;
              }
            }
            else
            {
              v93 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "payload")));
              v94 = objc_msgSend(v93, "bytes");

              v95 = (_BYTE *)*((unsigned __int8 *)v94 + 1);
              v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "payload"));
              LOBYTE(v93) = (char *)objc_msgSend(v96, "length") - 7 == v95;

              if ((v93 & 1) != 0)
              {
                v97 = objc_alloc((Class)NSString);
                v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "payload"));
                v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "subdataWithRange:", 2, v95));
                v87 = objc_msgSend(v97, "initWithData:encoding:", v99, 1);

                v100 = (void *)objc_claimAutoreleasedReturnValue(+[NFTNEPService serviceWithURI:minWaitTime:maxWaitTimeExtension:maxMessageSize:](NFTNEPService, "serviceWithURI:minWaitTime:maxWaitTimeExtension:maxMessageSize:", v87, v95[(_QWORD)v94 + 3], v95[(_QWORD)v94 + 4], bswap32(*(unsigned __int16 *)&v95[(_QWORD)v94 + 5]) >> 16));
                objc_msgSend(a1[9], "addObject:", v100);
                -[NSMutableArray addObject:](v162, "addObject:", v87);
                v101 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v102 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v101);
                if (v102)
                {
                  v103 = object_getClass(a1);
                  if (class_isMetaClass(v103))
                    v104 = 43;
                  else
                    v104 = 45;
                  v105 = object_getClassName(a1);
                  v106 = sel_getName("_processNegotiatedNdefRead:tag:");
                  v102(6, "%c[%{public}s %{public}s]:%i Found TNEP service: %{public}@", v104, v105, v106, 894, v100);
                }
                v107 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v108 = NFSharedLogGetLogger(v107);
                v109 = objc_claimAutoreleasedReturnValue(v108);
                if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
                {
                  v110 = object_getClass(a1);
                  if (class_isMetaClass(v110))
                    v111 = 43;
                  else
                    v111 = 45;
                  v112 = object_getClassName(a1);
                  v113 = sel_getName("_processNegotiatedNdefRead:tag:");
                  *(_DWORD *)block = 67110146;
                  *(_DWORD *)&block[4] = v111;
                  *(_WORD *)v184 = 2082;
                  *(_QWORD *)&v184[2] = v112;
                  *(_WORD *)&v184[10] = 2082;
                  *(_QWORD *)&v184[12] = v113;
                  *(_WORD *)&v184[20] = 1024;
                  *(_DWORD *)&v184[22] = 894;
                  *(_WORD *)&v184[26] = 2114;
                  *(_QWORD *)&v184[28] = v100;
                  _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Found TNEP service: %{public}@", block, 0x2Cu);
                }

              }
              else
              {
                v114 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v115 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v114);
                if (v115)
                {
                  v116 = object_getClass(a1);
                  if (class_isMetaClass(v116))
                    v117 = 43;
                  else
                    v117 = 45;
                  v118 = object_getClassName(a1);
                  v119 = sel_getName("_processNegotiatedNdefRead:tag:");
                  v115(4, "%c[%{public}s %{public}s]:%i Invalid Service Parameter record; ignore",
                    v117,
                    v118,
                    v119,
                    881);
                }
                v120 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v121 = NFSharedLogGetLogger(v120);
                v87 = objc_claimAutoreleasedReturnValue(v121);
                if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
                {
                  v122 = object_getClass(a1);
                  if (class_isMetaClass(v122))
                    v123 = 43;
                  else
                    v123 = 45;
                  v124 = object_getClassName(a1);
                  v125 = sel_getName("_processNegotiatedNdefRead:tag:");
                  *(_DWORD *)block = 67109890;
                  *(_DWORD *)&block[4] = v123;
                  *(_WORD *)v184 = 2082;
                  *(_QWORD *)&v184[2] = v124;
                  *(_WORD *)&v184[10] = 2082;
                  *(_QWORD *)&v184[12] = v125;
                  *(_WORD *)&v184[20] = 1024;
                  *(_DWORD *)&v184[22] = 881;
                  v92 = v87;
LABEL_105:
                  _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid Service Parameter record; ignore",
                    block,
                    0x22u);
                }
              }
            }

            continue;
          }
        }
      }
      v71 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v178, buf, 16);
      if (!v71)
      {
LABEL_109:

        if (-[NSMutableArray count](v162, "count"))
        {
          v126 = a1;
          objc_sync_enter(v126);
          sub_10023F510((uint64_t)v126, v156);
          objc_sync_exit(v126);

          v128 = NFSharedSignpostLog(v127);
          v129 = objc_claimAutoreleasedReturnValue(v128);
          v130 = v129;
          v131 = (os_signpost_id_t)v126[13];
          if (v131 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v129))
          {
            *(_WORD *)block = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v130, OS_SIGNPOST_EVENT, v131, "TNEP_Reader_DiscoveredServices", "", block, 2u);
          }

          v132 = v126[3];
          *(_QWORD *)block = _NSConcreteStackBlock;
          *(_QWORD *)v184 = 3221225472;
          *(_QWORD *)&v184[8] = sub_1002428DC;
          *(_QWORD *)&v184[16] = &unk_1002E5CA8;
          *(_QWORD *)&v184[24] = v126;
          *(_QWORD *)&v184[32] = v162;
          dispatch_async(v132, block);

        }
        goto LABEL_134;
      }
    }
  }
  if ((v165 & 1) != 0)
  {
    v146 = v158;
    v147 = v157;
    if (v160)
    {
      v148 = a1;
      objc_sync_enter(v148);
      objc_storeStrong(v148 + 12, a2);
      objc_sync_exit(v148);

      v150 = NFSharedSignpostLog(v149);
      v151 = objc_claimAutoreleasedReturnValue(v150);
      v152 = v151;
      v153 = (os_signpost_id_t)v148[13];
      if (v153 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v151))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v152, OS_SIGNPOST_EVENT, v153, "StaticNFC_Reader_EngagementDiscovered", "", buf, 2u);
      }

      v154 = v148[3];
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)v186 = 3221225472;
      *(_QWORD *)&v186[8] = sub_100242928;
      *(_QWORD *)&v186[16] = &unk_1002E5CA8;
      *(_QWORD *)&v186[24] = v148;
      *(_QWORD *)&v186[32] = v146;
      dispatch_async(v154, buf);

    }
  }
LABEL_134:

LABEL_135:
  v18 = v159;
LABEL_136:

LABEL_137:
}

id sub_10023C8B8(_QWORD *a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  void *specific;
  uint64_t Logger;
  void (*v9)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  NSObject *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  const char *Name;
  _QWORD block[5];
  id v34;
  _QWORD v35[4];
  _QWORD v36[4];
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;

  v5 = a2;
  if (a1)
  {
    v6 = a1[11];
    if (v6)
    {
      if ((objc_msgSend(*(id *)(v6 + 88), "readerModeProtectionActive") & 1) != 0)
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v9 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(a1);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("_readNdefFromTag:outError:");
          v13 = 45;
          if (isMetaClass)
            v13 = 43;
          v9(4, "%c[%{public}s %{public}s]:%i Reader protection active", v13, ClassName, Name, 963);
        }
        v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v15 = NFSharedLogGetLogger(v14);
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v17 = object_getClass(a1);
          if (class_isMetaClass(v17))
            v18 = 43;
          else
            v18 = 45;
          *(_DWORD *)buf = 67109890;
          v38 = v18;
          v39 = 2082;
          v40 = object_getClassName(a1);
          v41 = 2082;
          v42 = sel_getName("_readNdefFromTag:outError:");
          v43 = 1024;
          v44 = 963;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reader protection active", buf, 0x22u);
        }

        v19 = objc_alloc((Class)NSError);
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v35[0] = NSLocalizedDescriptionKey;
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Reader mode temporarily disabled"));
        v36[0] = v21;
        v36[1] = &off_100303E90;
        v35[1] = CFSTR("Line");
        v35[2] = CFSTR("Method");
        v22 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName("_readNdefFromTag:outError:"));
        v36[2] = v22;
        v35[3] = NSDebugDescriptionErrorKey;
        v23 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName("_readNdefFromTag:outError:"), 964);
        v36[3] = v23;
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v36, v35, 4));
        v25 = objc_msgSend(v19, "initWithDomain:code:userInfo:", v20, 47, v24);

        if (a3)
          *a3 = objc_retainAutorelease(v25);
        v26 = a1[3];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100242974;
        block[3] = &unk_1002E5CA8;
        block[4] = a1;
        v34 = v25;
        v27 = v25;
        dispatch_async(v26, block);

        goto LABEL_16;
      }
      v29 = (void *)a1[11];
    }
    else
    {
      v29 = 0;
    }
    v30 = sub_100182124(v29, v5, a3);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v30);
    goto LABEL_19;
  }
LABEL_16:
  v28 = 0;
LABEL_19:

  return v28;
}

void sub_10023CF10(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 72), a2);
}

void sub_10023CF20(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 64), a2);
}

uint64_t sub_10023CF30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10023D380(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSErrorUserInfoKey v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_alloc((Class)NSError);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v7 = NSLocalizedDescriptionKey;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Invalid State"));
  v8 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
  v6 = objc_msgSend(v2, "initWithDomain:code:userInfo:", v3, 12, v5);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v6);

}

BOOL sub_10023D490(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _BYTE *v13;

  v3 = a2;
  v4 = *(id *)(a1 + 80);
  objc_sync_enter(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "asData"));
  v6 = objc_msgSend(v5, "length");
  if (v6)
  {
    v7 = *(id *)(a1 + 80);
    v8 = *(id *)(a1 + 80);
    objc_msgSend(v7, "resetBytesInRange:", 0, objc_msgSend(v8, "length"));

    v9 = *(id *)(a1 + 80);
    v10 = objc_msgSend(v5, "length");
    v11 = objc_retainAutorelease(v5);
    objc_msgSend(v9, "replaceBytesInRange:withBytes:length:", 2, v10, objc_msgSend(v11, "bytes"), objc_msgSend(v11, "length"));

    v12 = objc_retainAutorelease(*(id *)(a1 + 80));
    v13 = objc_msgSend(v12, "mutableBytes");

    *v13 = (unsigned __int16)objc_msgSend(v11, "length") >> 8;
    v13[1] = objc_msgSend(v11, "length");
  }

  objc_sync_exit(v4);
  return v6 != 0;
}

void sub_10023D5DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10023D5F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_10023D738(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10023DB6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10023DB90(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSErrorUserInfoKey v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_alloc((Class)NSError);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v7 = NSLocalizedDescriptionKey;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "TNEP invalid service"));
  v8 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
  v6 = objc_msgSend(v2, "initWithDomain:code:userInfo:", v3, 59, v5);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v6);

}

void sub_10023DCA0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  os_signpost_id_t v9;
  uint64_t v10;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v14;
  const char *ClassName;
  const char *Name;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  objc_class *v20;
  int v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *i;
  void *v30;
  void *v31;
  void *v32;
  _BOOL4 v33;
  unsigned __int8 *v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  NSErrorUserInfoKey v55;
  void *v56;
  NSErrorUserInfoKey v57;
  id v58;
  uint8_t buf[4];
  _BYTE v60[24];
  __int16 v61;
  int v62;
  __int16 v63;
  id v64;

  v49 = a2;
  v50 = a3;
  v5 = NFSharedSignpostLog(v50);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 104);
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      v10 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)v60 = v10;
      *(_WORD *)&v60[8] = 2112;
      *(_QWORD *)&v60[10] = v50;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, v9, "TNEP_Reader_Select", "service=%@  error=%@", buf, 0x16u);
    }
  }

  if (v50)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
    if (Logger)
    {
      Class = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(Class))
        v14 = 43;
      else
        v14 = 45;
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 64));
      Logger(3, "%c[%{public}s %{public}s]:%i %{public}@", v14, ClassName, Name, 215, v50);
    }
    v17 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v18 = NFSharedLogGetLogger(v17);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v20))
        v21 = 43;
      else
        v21 = 45;
      v22 = object_getClassName(*(id *)(a1 + 32));
      v23 = sel_getName(*(SEL *)(a1 + 64));
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)v60 = v21;
      *(_WORD *)&v60[4] = 2082;
      *(_QWORD *)&v60[6] = v22;
      *(_WORD *)&v60[14] = 2082;
      *(_QWORD *)&v60[16] = v23;
      v61 = 1024;
      v62 = 215;
      v63 = 2114;
      v64 = v50;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 32);
    v48 = v49;
    if (v24)
    {
      v25 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026ABA4, 2);
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "records"));
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v51, buf, 16);
      if (v27)
      {
        v28 = *(_QWORD *)v52;
        do
        {
          for (i = 0; i != v27; i = (char *)i + 1)
          {
            if (*(_QWORD *)v52 != v28)
              objc_enumerationMutation(v26);
            v30 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v30, "typeNameFormat") == 1)
            {
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "type"));
              if ((objc_msgSend(v31, "isEqualToData:", v25) & 1) != 0)
              {
                v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "payload"));
                v33 = objc_msgSend(v32, "length") == (id)1;

                if (v33)
                {
                  v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "payload")));
                  v34 = (unsigned __int8 *)objc_msgSend(v27, "bytes");

                  LODWORD(v24) = *v34;
                  LODWORD(v27) = 1;
                  goto LABEL_31;
                }
              }
              else
              {

              }
            }
          }
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v51, buf, 16);
        }
        while (v27);
      }
      LODWORD(v24) = 0;
LABEL_31:

    }
    else
    {
      LODWORD(v27) = 0;
    }

    v35 = *(id *)(a1 + 32);
    objc_sync_enter(v35);
    if ((_DWORD)v27)
    {
      sub_100051EF0(*(_QWORD *)(a1 + 32), *(void **)(a1 + 48));
      objc_sync_exit(v35);

      if ((_DWORD)v24)
      {
        v36 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("tnep.reader"), v24, 0);
        v37 = *(_QWORD *)(a1 + 56);
        v38 = objc_alloc((Class)NSError);
        v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
        v57 = NSUnderlyingErrorKey;
        v58 = v36;
        v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v58, &v57, 1));
        v41 = objc_msgSend(v38, "initWithDomain:code:userInfo:", v39, 61, v40);
        (*(void (**)(uint64_t, id))(v37 + 16))(v37, v41);

      }
      else
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      }
    }
    else
    {
      sub_100051EF0(*(_QWORD *)(a1 + 32), 0);
      objc_sync_exit(v35);

      v42 = *(_QWORD *)(a1 + 56);
      v43 = objc_alloc((Class)NSError);
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v55 = NSLocalizedDescriptionKey;
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "TNEP invalid service"));
      v56 = v45;
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1));
      v47 = objc_msgSend(v43, "initWithDomain:code:userInfo:", v44, 59, v46);
      (*(void (**)(uint64_t, id))(v42 + 16))(v42, v47);

    }
  }

}

void sub_10023E244(uint64_t a1, void *a2, unsigned int a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *specific;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  objc_class *v22;
  int v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *v31;
  _BOOL4 v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  objc_class *v38;
  int v39;
  const char *v40;
  const char *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  id WeakRetained;
  NSObject *v48;
  id v49;
  void *v50;
  unsigned __int8 v51;
  id v52;
  void *v53;
  void *v54;
  NSData *v55;
  void *v56;
  NSObject *v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  id v64;
  NSObject *v65;
  id v66;
  const char *v67;
  void *v68;
  void *v69;
  _QWORD v70[4];
  id v71;
  id v72;
  id v73;
  _QWORD v74[4];
  id v75;
  unsigned __int8 v76;
  _QWORD block[4];
  id v78;
  id v79;
  NSErrorUserInfoKey v80;
  void *v81;
  uint8_t buf[4];
  int v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  int v89;
  __int16 v90;
  void *v91;
  __int16 v92;
  unsigned int v93;

  v7 = a2;
  v8 = a4;
  v9 = v8;
  if (a1)
  {
    v68 = v8;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v12 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("_changeService:select:completionHandler:");
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uri"));
      v18 = 45;
      if (isMetaClass)
        v18 = 43;
      v12(6, "%c[%{public}s %{public}s]:%i svc:%{public}@   select:%d", v18, ClassName, Name, 816, v17, a3);

    }
    v69 = v7;
    v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v20 = NFSharedLogGetLogger(v19);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = object_getClass((id)a1);
      if (class_isMetaClass(v22))
        v23 = 43;
      else
        v23 = 45;
      v24 = object_getClassName((id)a1);
      v25 = sel_getName("_changeService:select:completionHandler:");
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "uri"));
      *(_DWORD *)buf = 67110402;
      v83 = v23;
      v84 = 2082;
      v85 = v24;
      v86 = 2082;
      v87 = v25;
      v88 = 1024;
      v89 = 816;
      v90 = 2114;
      v91 = v26;
      v92 = 1024;
      v93 = a3;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i svc:%{public}@   select:%d", buf, 0x32u);

    }
    v27 = *(_QWORD *)(a1 + 88);
    if (v27 && objc_msgSend(*(id *)(v27 + 88), "readerModeProtectionActive"))
    {
      v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v29 = NFLogGetLogger(v28);
      if (v29)
      {
        v30 = (void (*)(uint64_t, const char *, ...))v29;
        v31 = object_getClass((id)a1);
        v32 = class_isMetaClass(v31);
        v33 = object_getClassName((id)a1);
        v67 = sel_getName("_changeService:select:completionHandler:");
        v34 = 45;
        if (v32)
          v34 = 43;
        v30(4, "%c[%{public}s %{public}s]:%i Reader protection active", v34, v33, v67, 819);
      }
      v35 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v36 = NFSharedLogGetLogger(v35);
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        v38 = object_getClass((id)a1);
        if (class_isMetaClass(v38))
          v39 = 43;
        else
          v39 = 45;
        v40 = object_getClassName((id)a1);
        v41 = sel_getName("_changeService:select:completionHandler:");
        *(_DWORD *)buf = 67109890;
        v83 = v39;
        v84 = 2082;
        v85 = v40;
        v86 = 2082;
        v87 = v41;
        v88 = 1024;
        v89 = 819;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reader protection active", buf, 0x22u);
      }

      v42 = objc_alloc((Class)NSError);
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v80 = NSLocalizedDescriptionKey;
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Reader mode temporarily disabled"));
      v81 = v44;
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v81, &v80, 1));
      v46 = objc_msgSend(v42, "initWithDomain:code:userInfo:", v43, 47, v45);

      WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      objc_msgSend(WeakRetained, "tnepReaderServicesAborted:", v46);

      v48 = *(NSObject **)(a1 + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1002427A0;
      block[3] = &unk_1002E82A8;
      v9 = v68;
      v78 = v46;
      v79 = v68;
      v49 = v46;
      dispatch_async(v48, block);

      v7 = v69;
    }
    else
    {
      v49 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026ABA6, 2);
      v7 = v69;
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "uri"));
      v51 = objc_msgSend(v50, "length");

      v76 = v51;
      v52 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &v76, 1);
      if (v76)
      {
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "uri"));
        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "dataUsingEncoding:", 1));
        objc_msgSend(v52, "appendData:", v54);

      }
      *(_DWORD *)buf = 0;
      v55 = objc_opt_new(NSData);
      v56 = (void *)objc_claimAutoreleasedReturnValue(+[NFNdefRecordInternal recordsWithTNF:type:identifier:payload:chunkSize:outError:](NFNdefRecordInternal, "recordsWithTNF:type:identifier:payload:chunkSize:outError:", 1, v49, v55, v52, (char *)objc_msgSend(v52, "length") + 1, buf));

      if (*(_DWORD *)buf)
      {
        v57 = *(NSObject **)(a1 + 24);
        v74[0] = _NSConcreteStackBlock;
        v74[1] = 3221225472;
        v74[2] = sub_1002427B4;
        v74[3] = &unk_1002E8398;
        v9 = v68;
        v75 = v68;
        dispatch_async(v57, v74);
        v58 = v75;
      }
      else
      {
        v58 = (void *)objc_opt_new(NFNdefMessageInternal);
        objc_msgSend(v58, "addRecordArray:", v56);
        v9 = v68;
        if (a3)
        {
          sub_10023F128((_QWORD *)a1, v58, v69, v68);
        }
        else
        {
          v60 = *(void **)(a1 + 88);
          v59 = *(void **)(a1 + 96);
          v73 = 0;
          v61 = v59;
          v62 = v60;
          v7 = v69;
          v63 = v62;
          sub_1001821D4(v62, v58, v61, 0, &v73);
          v64 = v73;

          v65 = *(NSObject **)(a1 + 24);
          v70[0] = _NSConcreteStackBlock;
          v70[1] = 3221225472;
          v70[2] = sub_1002428C8;
          v70[3] = &unk_1002E82A8;
          v71 = v64;
          v72 = v68;
          v66 = v64;
          dispatch_async(v65, v70);

        }
      }

    }
  }

}

void sub_10023EB08(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  os_signpost_id_t v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  _QWORD v18[5];
  _QWORD v19[5];
  uint8_t buf[4];
  id v21;

  v4 = a3;
  v5 = NFSharedSignpostLog(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 104);
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, v9, "TNEP_Reader_Deselect", "error=%@", buf, 0xCu);
    }
  }

  v10 = *(id *)(a1 + 32);
  objc_sync_enter(v10);
  sub_100051EF0(*(_QWORD *)(a1 + 32), 0);
  objc_sync_exit(v10);

  if (v4)
  {
    if (objc_msgSend(v4, "code") != (id)47)
    {
      v11 = objc_alloc((Class)NSError);
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v18[0] = NSLocalizedDescriptionKey;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "TNEP service specific error"));
      v19[0] = v13;
      v19[1] = v4;
      v18[1] = NSUnderlyingErrorKey;
      v18[2] = CFSTR("Line");
      v19[2] = &off_100303E78;
      v18[3] = CFSTR("Method");
      v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), sel_getName(*(SEL *)(a1 + 48)));
      v19[3] = v14;
      v18[4] = NSDebugDescriptionErrorKey;
      v15 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), sel_getName(*(SEL *)(a1 + 48)), 259);
      v19[4] = v15;
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v18, 5));
      v17 = objc_msgSend(v11, "initWithDomain:code:userInfo:", v12, 61, v16);

      v4 = v17;
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

void sub_10023EEE0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  os_signpost_id_t v11;
  void *specific;
  uint64_t Logger;
  void (*v14)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint8_t buf[4];
  _BYTE v29[14];
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  id v37;

  v5 = a2;
  v6 = a3;
  v7 = NFSharedSignpostLog(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 104);
    if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v29 = v6;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v11, "TNEP_Reader_Send", "error=%@", buf, 0xCu);
    }
  }

  if (v6)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v14 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      v19 = 45;
      if (isMetaClass)
        v19 = 43;
      v14(3, "%c[%{public}s %{public}s]:%i Error sending msg=%{public}@\nerror=%{public}@", v19, ClassName, Name, 278, *(_QWORD *)(a1 + 40), v6);
    }
    v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v21 = NFSharedLogGetLogger(v20);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v23))
        v24 = 43;
      else
        v24 = 45;
      v25 = object_getClassName(*(id *)(a1 + 32));
      v26 = sel_getName(*(SEL *)(a1 + 56));
      v27 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)v29 = v24;
      *(_WORD *)&v29[4] = 2082;
      *(_QWORD *)&v29[6] = v25;
      v30 = 2082;
      v31 = v26;
      v32 = 1024;
      v33 = 278;
      v34 = 2114;
      v35 = v27;
      v36 = 2114;
      v37 = v6;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error sending msg=%{public}@\nerror=%{public}@", buf, 0x36u);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10023F128(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *specific;
  uint64_t Logger;
  void (*v12)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  objc_class *v22;
  int v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  NSObject *v34;
  id v35;
  unsigned int v36;
  int64_t v37;
  void *v38;
  _QWORD v39[5];
  id v40;
  id v41;
  id v42;
  const char *v43;
  id v44;
  _QWORD block[5];
  id v46;
  const char *v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  void *v57;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v38 = v7;
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v12 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_transmitMessage:toService:completionHandler:");
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "uri"));
      v18 = 45;
      if (isMetaClass)
        v18 = 43;
      v12(6, "%c[%{public}s %{public}s]:%i %{public}@", v18, ClassName, Name, 786, v17);

    }
    v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v20 = NFSharedLogGetLogger(v19);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = object_getClass(a1);
      if (class_isMetaClass(v22))
        v23 = 43;
      else
        v23 = 45;
      v24 = object_getClassName(a1);
      v25 = sel_getName("_transmitMessage:toService:completionHandler:");
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "uri"));
      *(_DWORD *)buf = 67110146;
      v49 = v23;
      v50 = 2082;
      v51 = v24;
      v52 = 2082;
      v53 = v25;
      v54 = 1024;
      v55 = 786;
      v56 = 2114;
      v57 = v26;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);

    }
    v27 = a1[11];
    if (v27)
    {
      if ((objc_msgSend(*(id *)(v27 + 88), "readerModeProtectionActive") & 1) != 0)
      {
        v28 = a1[3];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1002423A0;
        block[3] = &unk_1002E5D28;
        block[4] = a1;
        v47 = "_transmitMessage:toService:completionHandler:";
        v46 = v9;
        dispatch_async(v28, block);

        goto LABEL_22;
      }
      v29 = (void *)a1[11];
    }
    else
    {
      v29 = 0;
    }
    v30 = (void *)a1[12];
    v44 = 0;
    v31 = v30;
    v32 = v29;
    v7 = v38;
    sub_1001821D4(v32, v38, v31, 0, &v44);
    v33 = v44;

    if (v33)
    {
      v34 = a1[3];
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_1002425F8;
      v39[3] = &unk_1002EA850;
      v39[4] = a1;
      v43 = "_transmitMessage:toService:completionHandler:";
      v40 = v38;
      v41 = v33;
      v42 = v9;
      dispatch_async(v34, v39);

    }
    else
    {
      v35 = v8;
      v36 = objc_msgSend(v35, "minWaitTime");
      if (v36 >= 4)
        v37 = 1000000 * (1 << ((v36 >> 2) - 1));
      else
        v37 = 0;

      sub_100241C78((dispatch_queue_t *)a1, v37, (objc_msgSend(v35, "maxWaitTimeExtension") + 1), v9);
    }

  }
LABEL_22:

}

void sub_10023F510(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 96), a2);
}

void sub_10023F528(uint64_t a1)
{
  void *i;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  id v10;
  void *v11;
  id v12;
  void *specific;
  uint64_t Logger;
  void (*v15)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  objc_class *v25;
  int v26;
  const char *v27;
  const char *v28;
  id v29;
  id v30;
  id v31;
  id obj;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  char v37;
  unsigned __int8 v38;
  _BYTE v39[3];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  id v53;
  _BYTE v54[128];

  v34 = (void *)objc_opt_new(NFNdefMessageInternal);
  objc_msgSend(v34, "addRecordArray:", *(_QWORD *)(a1 + 64));
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v36 = (id)a1;
  obj = *(id *)(a1 + 72);
  v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v54, 16);
  if (v35)
  {
    v33 = *(_QWORD *)v41;
    do
    {
      for (i = 0; i != v35; i = (char *)i + 1)
      {
        if (*(_QWORD *)v41 != v33)
          objc_enumerationMutation(obj);
        v3 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
        v37 = 16;
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uri"));
        v38 = objc_msgSend(v4, "length");
        memset(v39, 0, sizeof(v39));

        v5 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &v37, 2);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uri"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dataUsingEncoding:", 4));
        objc_msgSend(v5, "appendData:", v7);

        v37 = 0;
        v38 = objc_msgSend(v3, "minWaitTime");
        v39[0] = objc_msgSend(v3, "maxWaitTimeExtension") & 0xF;
        v8 = objc_msgSend(v3, "maxMessageSize");
        if (v8 >= 0x800)
          v9 = 2048;
        else
          v9 = v8;
        *(_WORD *)&v39[1] = __rev16(v9);
        objc_msgSend(v5, "appendBytes:length:", &v37, 5);
        v10 = objc_alloc((Class)NFNdefRecordInternal);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("Tp"), "dataUsingEncoding:", 4));
        v12 = objc_msgSend(v10, "initWithHeader:type:identifier:payload:", 17, v11, 0, v5);

        objc_msgSend(v34, "addRecord:", v12);
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v15 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(v36);
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(v36);
          Name = sel_getName("_generateInitialServiceReadyMessage");
          v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uri")));
          v31 = objc_msgSend(v20, "UTF8String");
          v21 = 45;
          if (isMetaClass)
            v21 = 43;
          v15(6, "%c[%{public}s %{public}s]:%i service=%s", v21, ClassName, Name, 380, v31);

        }
        v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v23 = NFSharedLogGetLogger(v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v25 = object_getClass(v36);
          if (class_isMetaClass(v25))
            v26 = 43;
          else
            v26 = 45;
          v27 = object_getClassName(v36);
          v28 = sel_getName("_generateInitialServiceReadyMessage");
          v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uri")));
          v30 = objc_msgSend(v29, "UTF8String");
          *(_DWORD *)buf = 67110146;
          v45 = v26;
          v46 = 2082;
          v47 = v27;
          v48 = 2082;
          v49 = v28;
          v50 = 1024;
          v51 = 380;
          v52 = 2080;
          v53 = v30;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i service=%s", buf, 0x2Cu);

        }
      }
      v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v54, 16);
    }
    while (v35);
  }

  sub_10023D490((uint64_t)v36, v34);
}

void sub_10023F918(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD block[5];
  id v7;
  const char *v8;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100240DB0;
    block[3] = &unk_1002E5C80;
    block[4] = a1;
    v7 = v3;
    v8 = "_hceReadForPurpose:";
    dispatch_async(v5, block);

  }
}

uint64_t sub_10023F9AC(uint64_t a1)
{
  id v2;
  unsigned __int16 *v3;
  uint64_t v4;
  id v5;
  int v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  id v17;
  _BYTE *v18;
  void *v19;
  _BOOL4 v20;
  unint64_t v21;
  void *v22;
  BOOL v23;
  void *v24;
  void (*v25)(uint64_t, const char *, ...);
  objc_class *v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  objc_class *v33;
  int v34;
  const char *v35;
  const char *v36;
  NSObject *v37;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v41;
  const char *ClassName;
  const char *Name;
  void *v44;
  uint64_t v45;
  objc_class *v46;
  int v47;
  const char *v48;
  const char *v49;
  int v50;
  void *v51;
  void (*v52)(uint64_t, const char *, ...);
  objc_class *v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  objc_class *v60;
  int v61;
  int v62;
  char v63;
  void *v64;
  void (*v65)(uint64_t, const char *, ...);
  objc_class *v66;
  uint64_t v67;
  const char *v68;
  const char *v69;
  void *v70;
  uint64_t v71;
  NSObject *v72;
  objc_class *v73;
  int v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  NSObject *v80;
  os_signpost_id_t v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  void (*v86)(uint64_t, const char *, ...);
  objc_class *v87;
  uint64_t v88;
  const char *v89;
  const char *v90;
  void *v91;
  uint64_t v92;
  NSObject *v93;
  objc_class *v94;
  int v95;
  const char *v96;
  const char *v97;
  void *v98;
  void (*v99)(uint64_t, const char *, ...);
  objc_class *v100;
  uint64_t v101;
  const char *v102;
  const char *v103;
  void *v104;
  uint64_t v105;
  NSObject *v106;
  objc_class *v107;
  int v108;
  const char *v109;
  const char *v110;
  id v111;
  id v112;
  id v113;
  id v114;
  void *v116;
  void (*v117)(uint64_t, const char *, ...);
  objc_class *v118;
  uint64_t v119;
  const char *v120;
  const char *v121;
  void *v122;
  uint64_t v123;
  NSObject *v124;
  objc_class *v125;
  int v126;
  const char *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  NSObject *v132;
  os_signpost_id_t v133;
  id WeakRetained;
  id v135;
  void *v136;
  void *v137;
  void *v138;
  id v139;
  id v140;
  id v141;
  uint64_t v142;
  void *i;
  void *v144;
  void *v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  NSObject *v150;
  os_signpost_id_t v151;
  id v152;
  id v153;
  void *v154;
  void *v155;
  void *v156;
  id v157;
  id v158;
  id v159;
  int v160;
  id v161;
  void *v162;
  id obj;
  _QWORD v164[5];
  id v165;
  void *v166;
  const char *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  unsigned __int8 v176;
  NSErrorUserInfoKey v177;
  void *v178;
  _BYTE v179[128];
  uint8_t v180[128];
  uint8_t buf[4];
  int v182;
  __int16 v183;
  const char *v184;
  __int16 v185;
  const char *v186;
  __int16 v187;
  int v188;
  __int16 v189;
  int v190;

  v161 = *(id *)(a1 + 80);
  objc_sync_enter(v161);
  v2 = objc_retainAutorelease(*(id *)(a1 + 80));
  v3 = (unsigned __int16 *)objc_msgSend(v2, "bytes");

  v4 = __rev16(*v3);
  if ((_DWORD)v4)
  {
    v5 = objc_msgSend(objc_alloc((Class)NFNdefMessageInternal), "initWithBytes:length:", v3 + 1, v4);
    if (v5)
    {
      v6 = *(unsigned __int8 *)(a1 + 9);
      *(_BYTE *)(a1 + 9) = 0;
      v162 = v5;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "records"));
      v8 = objc_msgSend(v7, "count");

      if (v8 != (id)1)
      {
        v50 = 1;
        if (!v6)
          goto LABEL_60;
        goto LABEL_55;
      }
      v160 = v6;
      v174 = 0u;
      v175 = 0u;
      v172 = 0u;
      v173 = 0u;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v162, "records"));
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v172, v180, 16);
      obj = v9;
      if (!v10)
        goto LABEL_39;
      v11 = *(_QWORD *)v173;
LABEL_6:
      v12 = 0;
      while (1)
      {
        if (*(_QWORD *)v173 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v172 + 1) + 8 * v12);
        if (objc_msgSend(v13, "typeNameFormat") != 1)
          goto LABEL_37;
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "type"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("Ts"), "dataUsingEncoding:", 4));
        v16 = objc_msgSend(v14, "isEqualToData:", v15);

        if (!v16)
          goto LABEL_37;
        v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "payload")));
        v18 = objc_msgSend(v17, "bytes");

        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "payload"));
        v20 = objc_msgSend(v19, "length") == 0;

        if (v20)
        {
          specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
          if (Logger)
          {
            Class = object_getClass((id)a1);
            if (class_isMetaClass(Class))
              v41 = 43;
            else
              v41 = 45;
            ClassName = object_getClassName((id)a1);
            Name = sel_getName("_checkTagMemoryUpdate");
            Logger(4, "%c[%{public}s %{public}s]:%i Invalid Ts record", v41, ClassName, Name, 417);
          }
          v44 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v45 = NFSharedLogGetLogger(v44);
          v32 = objc_claimAutoreleasedReturnValue(v45);
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            goto LABEL_36;
          v46 = object_getClass((id)a1);
          if (class_isMetaClass(v46))
            v47 = 43;
          else
            v47 = 45;
          v48 = object_getClassName((id)a1);
          v49 = sel_getName("_checkTagMemoryUpdate");
          *(_DWORD *)buf = 67109890;
          v182 = v47;
          v183 = 2082;
          v184 = v48;
          v185 = 2082;
          v186 = v49;
          v187 = 1024;
          v188 = 417;
          v37 = v32;
        }
        else
        {
          if (!v18 || (v21 = *v18, !*v18))
          {
            v116 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v117 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v116);
            if (v117)
            {
              v118 = object_getClass((id)a1);
              if (class_isMetaClass(v118))
                v119 = 43;
              else
                v119 = 45;
              v120 = object_getClassName((id)a1);
              v121 = sel_getName("_checkTagMemoryUpdate");
              v117(6, "%c[%{public}s %{public}s]:%i TNEP Deselect", v119, v120, v121, 424);
            }
            v122 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v123 = NFSharedLogGetLogger(v122);
            v124 = objc_claimAutoreleasedReturnValue(v123);
            if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
            {
              v125 = object_getClass((id)a1);
              if (class_isMetaClass(v125))
                v126 = 43;
              else
                v126 = 45;
              v127 = object_getClassName((id)a1);
              v128 = sel_getName("_checkTagMemoryUpdate");
              *(_DWORD *)buf = 67109890;
              v182 = v126;
              v183 = 2082;
              v184 = v127;
              v185 = 2082;
              v186 = v128;
              v187 = 1024;
              v188 = 424;
              _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i TNEP Deselect", buf, 0x22u);
            }

            v130 = NFSharedSignpostLog(v129);
            v131 = objc_claimAutoreleasedReturnValue(v130);
            v132 = v131;
            v133 = *(_QWORD *)(a1 + 104);
            if (v133 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v131))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v132, OS_SIGNPOST_EVENT, v133, "TNEP_TagDevice_Deselect", "NoServiceName", buf, 2u);
            }

            *(_BYTE *)(a1 + 8) = 0;
            sub_10023F528(a1);
            WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
            objc_msgSend(WeakRetained, "tnepTagDeviceDeselected:", 0);

            v176 = 1;
LABEL_130:

            goto LABEL_99;
          }
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "payload"));
          v23 = (char *)objc_msgSend(v22, "length") - 1 == (_BYTE *)v21;

          if (v23)
          {
            v135 = objc_alloc((Class)NSString);
            v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "payload"));
            v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "payload"));
            v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "subdataWithRange:", 1, (char *)objc_msgSend(v137, "length") - 1));
            v139 = objc_msgSend(v135, "initWithData:encoding:", v138, 4);

            v170 = 0u;
            v171 = 0u;
            v168 = 0u;
            v169 = 0u;
            v140 = *(id *)(a1 + 72);
            v141 = objc_msgSend(v140, "countByEnumeratingWithState:objects:count:", &v168, v179, 16);
            if (v141)
            {
              v142 = *(_QWORD *)v169;
              while (2)
              {
                for (i = 0; i != v141; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v169 != v142)
                    objc_enumerationMutation(v140);
                  v144 = *(void **)(*((_QWORD *)&v168 + 1) + 8 * (_QWORD)i);
                  v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "uri"));
                  v146 = objc_msgSend(v145, "isEqualToString:", v139);

                  if (v146)
                  {
                    if (*(_BYTE *)(a1 + 8))
                    {
                      v158 = objc_loadWeakRetained((id *)(a1 + 40));
                      objc_msgSend(v158, "tnepTagDeviceDeselected:", 0);

                    }
                    v159 = objc_loadWeakRetained((id *)(a1 + 40));
                    v164[0] = _NSConcreteStackBlock;
                    v164[1] = 3221225472;
                    v164[2] = sub_1002409B4;
                    v164[3] = &unk_1002EC3E8;
                    v164[4] = a1;
                    v167 = "_checkTagMemoryUpdate";
                    v165 = v139;
                    v166 = v144;
                    objc_msgSend(v159, "tnepTagDeviceSelected:respondHandler:", v165, v164);

                    v176 = 0;
                    goto LABEL_129;
                  }
                }
                v141 = objc_msgSend(v140, "countByEnumeratingWithState:objects:count:", &v168, v179, 16);
                if (v141)
                  continue;
                break;
              }
            }

            v148 = NFSharedSignpostLog(v147);
            v149 = objc_claimAutoreleasedReturnValue(v148);
            v150 = v149;
            v151 = *(_QWORD *)(a1 + 104);
            if (v151 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v149))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v150, OS_SIGNPOST_EVENT, v151, "TNEP_TagDevice_Deselect", "InvalidServiceName", buf, 2u);
            }

            *(_BYTE *)(a1 + 8) = 0;
            sub_10023F528(a1);
            v152 = objc_loadWeakRetained((id *)(a1 + 40));
            v153 = objc_alloc((Class)NSError);
            v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
            v177 = NSLocalizedDescriptionKey;
            v155 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "TNEP invalid service"));
            v178 = v155;
            v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v178, &v177, 1));
            v157 = objc_msgSend(v153, "initWithDomain:code:userInfo:", v154, 59, v156);
            objc_msgSend(v152, "tnepTagDeviceDeselected:", v157);

            v176 = 1;
LABEL_129:

            goto LABEL_130;
          }
          v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v24);
          if (v25)
          {
            v26 = object_getClass((id)a1);
            if (class_isMetaClass(v26))
              v27 = 43;
            else
              v27 = 45;
            v28 = object_getClassName((id)a1);
            v29 = sel_getName("_checkTagMemoryUpdate");
            v25(4, "%c[%{public}s %{public}s]:%i Invalid Ts record", v27, v28, v29, 431);
          }
          v30 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v31 = NFSharedLogGetLogger(v30);
          v32 = objc_claimAutoreleasedReturnValue(v31);
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            goto LABEL_36;
          v33 = object_getClass((id)a1);
          if (class_isMetaClass(v33))
            v34 = 43;
          else
            v34 = 45;
          v35 = object_getClassName((id)a1);
          v36 = sel_getName("_checkTagMemoryUpdate");
          *(_DWORD *)buf = 67109890;
          v182 = v34;
          v183 = 2082;
          v184 = v35;
          v185 = 2082;
          v186 = v36;
          v187 = 1024;
          v188 = 431;
          v37 = v32;
        }
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid Ts record", buf, 0x22u);
LABEL_36:

LABEL_37:
        if (v10 == (id)++v12)
        {
          v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v172, v180, 16);
          if (v10)
            goto LABEL_6;
LABEL_39:

          v50 = 1;
          if (!v160)
          {
LABEL_60:
            v64 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v65 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v64);
            if (v65)
            {
              v66 = object_getClass((id)a1);
              if (class_isMetaClass(v66))
                v67 = 43;
              else
                v67 = 45;
              v68 = object_getClassName((id)a1);
              v69 = sel_getName("_checkTagMemoryUpdate");
              v65(6, "%c[%{public}s %{public}s]:%i Write completed", v67, v68, v69, 473);
            }
            v70 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v71 = NFSharedLogGetLogger(v70);
            v72 = objc_claimAutoreleasedReturnValue(v71);
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
            {
              v73 = object_getClass((id)a1);
              if (class_isMetaClass(v73))
                v74 = 43;
              else
                v74 = 45;
              v75 = object_getClassName((id)a1);
              v76 = sel_getName("_checkTagMemoryUpdate");
              *(_DWORD *)buf = 67109890;
              v182 = v74;
              v183 = 2082;
              v184 = v75;
              v185 = 2082;
              v186 = v76;
              v187 = 1024;
              v188 = 473;
              _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Write completed", buf, 0x22u);
            }

            if (*(_BYTE *)(a1 + 8))
            {
              if (v50)
              {
                v78 = NFSharedSignpostLog(v77);
                v79 = objc_claimAutoreleasedReturnValue(v78);
                v80 = v79;
                v81 = *(_QWORD *)(a1 + 104);
                if (v81 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v79))
                {
                  *(_WORD *)buf = 0;
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v80, OS_SIGNPOST_EVENT, v81, "TNEP_TagDevice_MsgReceived", "", buf, 2u);
                }

                v82 = objc_loadWeakRetained((id *)(a1 + 40));
                objc_msgSend(v82, "tnepTagDeviceNDEFMessageReceived:", v162);

                v83 = *(id *)(a1 + 80);
                v84 = *(id *)(a1 + 80);
                objc_msgSend(v83, "resetBytesInRange:", 0, objc_msgSend(v84, "length"));

              }
              else
              {
                v98 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v99 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v98);
                if (v99)
                {
                  v100 = object_getClass((id)a1);
                  if (class_isMetaClass(v100))
                    v101 = 43;
                  else
                    v101 = 45;
                  v102 = object_getClassName((id)a1);
                  v103 = sel_getName("_checkTagMemoryUpdate");
                  v99(3, "%c[%{public}s %{public}s]:%i Dropping invalid message received in TNEP select state", v101, v102, v103, 482);
                }
                v104 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v105 = NFSharedLogGetLogger(v104);
                v106 = objc_claimAutoreleasedReturnValue(v105);
                if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
                {
                  v107 = object_getClass((id)a1);
                  if (class_isMetaClass(v107))
                    v108 = 43;
                  else
                    v108 = 45;
                  v109 = object_getClassName((id)a1);
                  v110 = sel_getName("_checkTagMemoryUpdate");
                  *(_DWORD *)buf = 67109890;
                  v182 = v108;
                  v183 = 2082;
                  v184 = v109;
                  v185 = 2082;
                  v186 = v110;
                  v187 = 1024;
                  v188 = 482;
                  _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Dropping invalid message received in TNEP select state", buf, 0x22u);
                }

                v111 = *(id *)(a1 + 80);
                v112 = *(id *)(a1 + 80);
                objc_msgSend(v111, "resetBytesInRange:", 0, objc_msgSend(v112, "length"));

                *(_WORD *)buf = 1536;
                v113 = *(id *)(a1 + 80);
                objc_msgSend(v113, "replaceBytesInRange:withBytes:length:", 0, 2, buf, 2);

                v114 = *(id *)(a1 + 80);
                objc_msgSend(v114, "replaceBytesInRange:withBytes:length:", 2, 6, &unk_10026AB80, 6);

              }
            }
            else
            {
              v85 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v86 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v85);
              if (v86)
              {
                v87 = object_getClass((id)a1);
                if (class_isMetaClass(v87))
                  v88 = 43;
                else
                  v88 = 45;
                v89 = object_getClassName((id)a1);
                v90 = sel_getName("_checkTagMemoryUpdate");
                v86(4, "%c[%{public}s %{public}s]:%i Reset to TNEP initial state due to invalid message recevied", v88, v89, v90, 493);
              }
              v91 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v92 = NFSharedLogGetLogger(v91);
              v93 = objc_claimAutoreleasedReturnValue(v92);
              if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
              {
                v94 = object_getClass((id)a1);
                if (class_isMetaClass(v94))
                  v95 = 43;
                else
                  v95 = 45;
                v96 = object_getClassName((id)a1);
                v97 = sel_getName("_checkTagMemoryUpdate");
                *(_DWORD *)buf = 67109890;
                v182 = v95;
                v183 = 2082;
                v184 = v96;
                v185 = 2082;
                v186 = v97;
                v187 = 1024;
                v188 = 493;
                _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reset to TNEP initial state due to invalid message recevied", buf, 0x22u);
              }

              sub_10023F528(a1);
            }
            goto LABEL_98;
          }
LABEL_55:
          if ((_DWORD)v4)
            v63 = v50;
          else
            v63 = 0;
          if ((v63 & 1) != 0 || !*(_BYTE *)(a1 + 9))
            goto LABEL_60;
          goto LABEL_98;
        }
      }
    }
    v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v52 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v51);
    if (v52)
    {
      v53 = object_getClass((id)a1);
      if (class_isMetaClass(v53))
        v54 = 43;
      else
        v54 = 45;
      v55 = object_getClassName((id)a1);
      v56 = sel_getName("_checkTagMemoryUpdate");
      v52(4, "%c[%{public}s %{public}s]:%i Invalid NDEF message, NLEN=%d", v54, v55, v56, 402, v4);
    }
    v57 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v58 = NFSharedLogGetLogger(v57);
    v59 = objc_claimAutoreleasedReturnValue(v58);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      v60 = object_getClass((id)a1);
      if (class_isMetaClass(v60))
        v61 = 43;
      else
        v61 = 45;
      *(_DWORD *)buf = 67110146;
      v182 = v61;
      v183 = 2082;
      v184 = object_getClassName((id)a1);
      v185 = 2082;
      v186 = sel_getName("_checkTagMemoryUpdate");
      v187 = 1024;
      v188 = 402;
      v189 = 1024;
      v190 = v4;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid NDEF message, NLEN=%d", buf, 0x28u);
    }

  }
  v162 = 0;
  v62 = *(unsigned __int8 *)(a1 + 9);
  *(_BYTE *)(a1 + 9) = (_DWORD)v4 == 0;
  if (v62)
  {
    v50 = 0;
    goto LABEL_55;
  }
LABEL_98:
  v176 = 1;
LABEL_99:

  objc_sync_exit(v161);
  return v176;
}

void sub_100240904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1002409B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  int v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  os_signpost_id_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v44;
  os_signpost_id_t v45;
  uint64_t v46;
  uint8_t buf[4];
  _BYTE v48[24];
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  id v56;

  v5 = a3;
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v8 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    v13 = 43;
    if (!isMetaClass)
      v13 = 45;
    v8(6, "%c[%{public}s %{public}s]:%i Activated (%{public}@),status=0x%lx,optionalRecs=%{public}@", v13, ClassName, Name, 448, *(_QWORD *)(a1 + 40), a2, v5);
  }
  v14 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v15 = NFSharedLogGetLogger(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v17))
      v18 = 43;
    else
      v18 = 45;
    v19 = object_getClassName(*(id *)(a1 + 32));
    v20 = sel_getName(*(SEL *)(a1 + 56));
    v21 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)v48 = v18;
    *(_WORD *)&v48[4] = 2082;
    *(_QWORD *)&v48[6] = v19;
    *(_WORD *)&v48[14] = 2082;
    *(_QWORD *)&v48[16] = v20;
    v49 = 1024;
    v50 = 448;
    v51 = 2114;
    v52 = v21;
    v53 = 2048;
    v54 = a2;
    v55 = 2114;
    v56 = v5;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Activated (%{public}@),status=0x%lx,optionalRecs=%{public}@", buf, 0x40u);
  }

  v23 = NFSharedSignpostLog(v22);
  v24 = objc_claimAutoreleasedReturnValue(v23);
  v25 = v24;
  v26 = *(_QWORD *)(a1 + 32);
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 104);
    if (v27 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
    {
      v28 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)v48 = v28;
      *(_WORD *)&v48[8] = 2048;
      *(_QWORD *)&v48[10] = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_INTERVAL_BEGIN, v27, "TNEP_TagDevice_Select", "service=%@, status=%ld", buf, 0x16u);
    }
  }

  v30 = *(_QWORD *)(a1 + 32);
  if (v30)
  {
    v31 = v5;
    v32 = v5;
    v33 = (void *)objc_opt_new(NFNdefMessageInternal);
    v34 = a2;
    buf[0] = a2;
    v35 = objc_alloc((Class)NFNdefRecordInternal);
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("Te"), "dataUsingEncoding:", 4));
    v37 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", buf, 1);
    v38 = objc_msgSend(v35, "initWithHeader:type:identifier:payload:", 17, v36, 0, v37);

    objc_msgSend(v33, "addRecord:", v38);
    objc_msgSend(v33, "addRecordArray:", v32);

    if (sub_10023D490(v30, v33))
      *(_BYTE *)(v30 + 8) = 1;
    v39 = *(id *)(v30 + 56);
    v40 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB7E, 2);
    objc_msgSend(v39, "sendAPDU:", v40);

    v29 = sub_10023F918(v30, CFSTR("TNEP_ActivateService"));
    a2 = v34;
    v5 = v31;
  }
  v41 = NFSharedSignpostLog(v29);
  v42 = objc_claimAutoreleasedReturnValue(v41);
  v43 = v42;
  v44 = *(_QWORD *)(a1 + 32);
  if (v44)
  {
    v45 = *(_QWORD *)(v44 + 104);
    if (v45 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v42))
    {
      v46 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)v48 = v46;
      *(_WORD *)&v48[8] = 2048;
      *(_QWORD *)&v48[10] = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, OS_SIGNPOST_INTERVAL_END, v45, "TNEP_TagDevice_Select", "service=%@, status=%ld", buf, 0x16u);
    }
  }

}

void sub_100240DB0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  os_signpost_id_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  os_signpost_id_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  _BYTE *v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void (*v38)(uint64_t, const char *, ...);
  objc_class *v39;
  _BOOL4 v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  objc_class *v46;
  int v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  NSObject *v54;
  uint64_t v55;
  os_signpost_id_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  os_signpost_id_t v65;
  uint64_t v66;
  void *specific;
  uint64_t Logger;
  void (*v69)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  NSObject *v76;
  objc_class *v77;
  int v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  NSObject *v84;
  uint64_t v85;
  os_signpost_id_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  void *v93;
  id v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  NSObject *v99;
  os_signpost_id_t v100;
  id v101;
  void *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  NSObject *v109;
  os_signpost_id_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  void (*v117)(uint64_t, const char *, ...);
  objc_class *v118;
  _BOOL4 v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  NSObject *v123;
  objc_class *v124;
  int v125;
  const char *v126;
  const char *v127;
  void *v128;
  id v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  NSObject *v134;
  os_signpost_id_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v148;
  os_signpost_id_t v149;
  void *v150;
  void *v151;
  id v152;
  id v153;
  void *v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  NSObject *v158;
  NSObject *v159;
  os_signpost_id_t v160;
  const char *v161;
  const char *v162;
  const char *Name;
  const char *v164;
  void *v165;
  id v166;
  uint8_t buf[4];
  _BYTE v168[14];
  __int16 v169;
  const char *v170;
  __int16 v171;
  int v172;
  __int16 v173;
  int v174;

  v2 = objc_autoreleasePoolPush();
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(id *)(v3 + 112);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(a1 + 32);
      v7 = v6 ? *(void **)(v6 + 112) : 0;
      v8 = objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 40));

      if ((v8 & 1) == 0)
      {
        v10 = NFSharedSignpostLog(v9);
        v11 = objc_claimAutoreleasedReturnValue(v10);
        v12 = v11;
        v13 = *(_QWORD *)(a1 + 32);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 104);
          if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
          {
            v15 = *(_QWORD *)(a1 + 40);
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v168 = v15;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v14, "TNEP_HCE_Read", "%@", buf, 0xCu);
          }
        }

        sub_10011B76C(*(_QWORD *)(a1 + 32), 0);
      }
    }
    v16 = *(_QWORD *)(a1 + 32);
    if (v16 && *(_QWORD *)(v16 + 112))
      goto LABEL_18;
  }
  else
  {
    v16 = 0;
  }
  sub_10011B76C(v16, *(void **)(a1 + 40));
  v18 = NFSharedSignpostLog(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  v20 = v19;
  v21 = *(_QWORD *)(a1 + 32);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 104);
    if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
    {
      v23 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v168 = v23;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_BEGIN, v22, "TNEP_HCE_Read", "%@", buf, 0xCu);
    }
  }

  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
  {
LABEL_18:
    v24 = *(void **)(v16 + 56);
    goto LABEL_19;
  }
  v24 = 0;
LABEL_19:
  v166 = 0;
  v25 = v24;
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "readApduAndReturnError:", &v166));
  v27 = v166;

  if (v26)
  {
    v28 = *(_QWORD *)(a1 + 32);
    v29 = v26;
    v30 = v29;
    if (!v28)
    {
      v33 = 0;
LABEL_24:

      if (-[NSObject length](v33, "length"))
      {
        v34 = *(_QWORD *)(a1 + 32);
        if (v34)
          v35 = *(void **)(v34 + 56);
        else
          v35 = 0;
        objc_msgSend(v35, "sendAPDU:", v33);
        sub_10023F918(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
      }
      else
      {
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v69 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(*(id *)(a1 + 32));
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(*(id *)(a1 + 32));
          Name = sel_getName(*(SEL *)(a1 + 48));
          v73 = 45;
          if (isMetaClass)
            v73 = 43;
          v69(6, "%c[%{public}s %{public}s]:%i read complete", v73, ClassName, Name, 696);
        }
        v74 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v75 = NFSharedLogGetLogger(v74);
        v76 = objc_claimAutoreleasedReturnValue(v75);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          v77 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v77))
            v78 = 43;
          else
            v78 = 45;
          v79 = object_getClassName(*(id *)(a1 + 32));
          v80 = sel_getName(*(SEL *)(a1 + 48));
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)v168 = v78;
          *(_WORD *)&v168[4] = 2082;
          *(_QWORD *)&v168[6] = v79;
          v169 = 2082;
          v170 = v80;
          v171 = 1024;
          v172 = 696;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i read complete", buf, 0x22u);
        }

        sub_10011B76C(*(_QWORD *)(a1 + 32), 0);
        v82 = NFSharedSignpostLog(v81);
        v83 = objc_claimAutoreleasedReturnValue(v82);
        v84 = v83;
        v85 = *(_QWORD *)(a1 + 32);
        if (v85)
        {
          v86 = *(_QWORD *)(v85 + 104);
          if (v86 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v83))
          {
            v87 = *(_QWORD *)(a1 + 40);
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v168 = v87;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v84, OS_SIGNPOST_INTERVAL_END, v86, "TNEP_HCE_Read", "%@", buf, 0xCu);
          }
        }

      }
      goto LABEL_66;
    }
    if ((unint64_t)objc_msgSend(v29, "length") <= 3
      || (v31 = objc_retainAutorelease(v30), v32 = objc_msgSend(v31, "bytes"), *v32))
    {
      v33 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB7C, 2);
      goto LABEL_24;
    }
    v88 = v32;
    v165 = v2;
    v89 = v32[1];
    v90 = v32[2];
    v91 = v32[3];
    if ((unint64_t)objc_msgSend(v31, "length") < 5)
      v92 = 0;
    else
      v92 = v88[4];
    switch((_DWORD)v89)
    {
      case 0xD6:
        if (*(_QWORD *)(v28 + 48) != 2)
          goto LABEL_99;
        v112 = v92;
        if ((unint64_t)objc_msgSend(v31, "length") > 4)
        {
          if ((unint64_t)objc_msgSend(v31, "length") > 0x104)
          {
            if (v112)
              break;
            v140 = __rev16(*(unsigned __int16 *)(v88 + 5));
            if (!(_DWORD)v140)
              break;
            v141 = v140;
            if (objc_msgSend(v31, "length") != (id)(v140 + 7))
              break;
            v113 = v141;
            v114 = 7;
          }
          else
          {
            if (!v112 || objc_msgSend(v31, "length") != (id)(v112 + 5))
              break;
            v113 = v112;
            v114 = 5;
          }
          v142 = v91 | (v90 << 8);
          v143 = v113;
          if (v113 + (unint64_t)v142 <= (unint64_t)objc_msgSend(*(id *)(v28 + 80), "length"))
          {
            v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "subdataWithRange:", v114, v143));
            v151 = *(void **)(v28 + 80);
            v152 = objc_retainAutorelease(v150);
            v153 = v151;
            v154 = v152;
            v155 = v153;
            objc_msgSend(v153, "replaceBytesInRange:withBytes:length:", v142, v143, objc_msgSend(v154, "bytes"), objc_msgSend(v154, "length"));

            if (v142 > 1
              || (objc_msgSend(objc_retainAutorelease(*(id *)(v28 + 80)), "bytes"),
                  v156 = sub_10023F9AC(v28),
                  (_DWORD)v156))
            {
              v157 = NFSharedSignpostLog(v156);
              v158 = objc_claimAutoreleasedReturnValue(v157);
              v159 = v158;
              v160 = *(_QWORD *)(v28 + 104);
              if (v160 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v158))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v159, OS_SIGNPOST_EVENT, v160, "TNEP_TagDevice_UpdatedMemory", "NDEF", buf, 2u);
              }

              v33 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB7E, 2);
            }
            else
            {
              v33 = 0;
            }
            v2 = v165;

            goto LABEL_24;
          }
        }
        break;
      case 0xB0:
        if (objc_msgSend(v31, "length") == (id)5)
        {
          v103 = v88[4];
        }
        else
        {
          if (objc_msgSend(v31, "length") != (id)7 || v88[4])
            break;
          v103 = __rev16(*(unsigned __int16 *)(v88 + 5));
        }
        v104 = v91 | (v90 << 8);
        v105 = *(_QWORD *)(v28 + 48);
        if (v105 == 2)
        {
          if (v103)
            v137 = v103;
          else
            v137 = 512;
          v33 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithLength:", v137);
          v2 = v165;
          if ((unint64_t)objc_msgSend(*(id *)(v28 + 80), "length") > v104)
          {
            if ((unint64_t)objc_msgSend(*(id *)(v28 + 80), "length") < (v137 + v104))
              LODWORD(v137) = objc_msgSend(*(id *)(v28 + 80), "length") - v104;
            -[NSObject replaceBytesInRange:withBytes:](v33, "replaceBytesInRange:withBytes:", 0, (int)v137, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(v28 + 80)), "bytes") + v104);
          }
          v138 = NFSharedSignpostLog(-[NSObject appendBytes:length:](v33, "appendBytes:length:", &unk_10026AB7E, 2));
          v139 = objc_claimAutoreleasedReturnValue(v138);
          v109 = v139;
          v110 = *(_QWORD *)(v28 + 104);
          if (v110 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v139))
            goto LABEL_132;
          *(_WORD *)buf = 0;
          v111 = "NDEF";
          goto LABEL_131;
        }
        if (v105 != 3)
          goto LABEL_99;
        if (v103)
          v106 = v103;
        else
          v106 = 15;
        if ((v106 + v104) < 0x10)
        {
          v33 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", (char *)&unk_10026AB95 + v104, v106);
          v107 = NFSharedSignpostLog(-[NSObject appendBytes:length:](v33, "appendBytes:length:", &unk_10026AB7E, 2));
          v108 = objc_claimAutoreleasedReturnValue(v107);
          v109 = v108;
          v110 = *(_QWORD *)(v28 + 104);
          v2 = v165;
          if (v110 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v108))
            goto LABEL_132;
          *(_WORD *)buf = 0;
          v111 = "CC";
LABEL_131:
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v109, OS_SIGNPOST_EVENT, v110, "TNEP_TagDevice_ReadBinaryCmd", v111, buf, 2u);
LABEL_132:

          goto LABEL_24;
        }
        break;
      case 0xA4:
        if (v90 == 4 && !v91 && v92 == 7)
        {
          if ((unint64_t)objc_msgSend(v31, "length") >= 0xB)
          {
            v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "subdataWithRange:", 5, 7));
            v94 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB86, 7);
            v95 = objc_msgSend(v93, "isEqualToData:", v94);

            if (v95)
            {
              v97 = NFSharedSignpostLog(v96);
              v98 = objc_claimAutoreleasedReturnValue(v97);
              v99 = v98;
              v100 = *(_QWORD *)(v28 + 104);
              if (v100 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v98))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v99, OS_SIGNPOST_EVENT, v100, "TNEP_TagDevice_SelectCmd", "NDEFApp", buf, 2u);
              }

              *(_QWORD *)(v28 + 48) = 1;
              v101 = objc_alloc((Class)NSData);
              v102 = &unk_10026AB7E;
              goto LABEL_145;
            }
          }
          goto LABEL_144;
        }
        if (!v90 && v91 == 12 && v92 == 2 && (unint64_t)objc_msgSend(v31, "length") >= 6)
        {
          v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "subdataWithRange:", 5, 2));
          v129 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB8D, 2);
          v130 = objc_msgSend(v128, "isEqualToData:", v129);

          if (v130)
          {
            v132 = NFSharedSignpostLog(v131);
            v133 = objc_claimAutoreleasedReturnValue(v132);
            v134 = v133;
            v135 = *(_QWORD *)(v28 + 104);
            if (v135 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v133))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v134, OS_SIGNPOST_EVENT, v135, "TNEP_TagDevice_SelectCmd", "CC", buf, 2u);
            }
            v136 = 3;
            goto LABEL_154;
          }
          v144 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB8F, 2);
          v145 = objc_msgSend(v128, "isEqualToData:", v144);

          if (v145)
          {
            v147 = NFSharedSignpostLog(v146);
            v148 = objc_claimAutoreleasedReturnValue(v147);
            v134 = v148;
            v149 = *(_QWORD *)(v28 + 104);
            if (v149 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v148))
            {
              *(_WORD *)buf = 0;
              v136 = 2;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v134, OS_SIGNPOST_EVENT, v149, "TNEP_TagDevice_SelectCmd", "NDEF", buf, 2u);
            }
            else
            {
              v136 = 2;
            }
LABEL_154:

            *(_QWORD *)(v28 + 48) = v136;
            v33 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &unk_10026AB7E, 2);

            goto LABEL_146;
          }

        }
LABEL_144:
        *(_QWORD *)(v28 + 48) = 0;
        v101 = objc_alloc((Class)NSData);
        v102 = &unk_10026AB91;
        goto LABEL_145;
      default:
LABEL_99:
        v115 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v116 = NFLogGetLogger(v115);
        if (v116)
        {
          v117 = (void (*)(uint64_t, const char *, ...))v116;
          v118 = object_getClass((id)v28);
          v119 = class_isMetaClass(v118);
          v161 = object_getClassName((id)v28);
          v164 = sel_getName("_parseAPDU:");
          v120 = 45;
          if (v119)
            v120 = 43;
          v117(4, "%c[%{public}s %{public}s]:%i Unsupported command; CMD=0x%x", v120, v161, v164, 643, v89);
        }
        v121 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v122 = NFSharedLogGetLogger(v121);
        v123 = objc_claimAutoreleasedReturnValue(v122);
        if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
        {
          v124 = object_getClass((id)v28);
          if (class_isMetaClass(v124))
            v125 = 43;
          else
            v125 = 45;
          v126 = object_getClassName((id)v28);
          v127 = sel_getName("_parseAPDU:");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)v168 = v125;
          *(_WORD *)&v168[4] = 2082;
          *(_QWORD *)&v168[6] = v126;
          v169 = 2082;
          v170 = v127;
          v171 = 1024;
          v172 = 643;
          v173 = 1024;
          v174 = v89;
          _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unsupported command; CMD=0x%x",
            buf,
            0x28u);
        }

        v101 = objc_alloc((Class)NSData);
        v102 = &unk_10026AB7C;
        goto LABEL_145;
    }
    v101 = objc_alloc((Class)NSData);
    v102 = &unk_10026AB93;
LABEL_145:
    v33 = objc_msgSend(v101, "initWithBytes:length:", v102, 2);
LABEL_146:
    v2 = v165;
    goto LABEL_24;
  }
  v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v37 = NFLogGetLogger(v36);
  if (v37)
  {
    v38 = (void (*)(uint64_t, const char *, ...))v37;
    v39 = object_getClass(*(id *)(a1 + 32));
    v40 = class_isMetaClass(v39);
    v41 = object_getClassName(*(id *)(a1 + 32));
    v162 = sel_getName(*(SEL *)(a1 + 48));
    v42 = 45;
    if (v40)
      v42 = 43;
    v38(6, "%c[%{public}s %{public}s]:%i Connection lost, read complete", v42, v41, v162, 671);
  }
  v43 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v44 = NFSharedLogGetLogger(v43);
  v45 = objc_claimAutoreleasedReturnValue(v44);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    v46 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v46))
      v47 = 43;
    else
      v47 = 45;
    v48 = object_getClassName(*(id *)(a1 + 32));
    v49 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)v168 = v47;
    *(_WORD *)&v168[4] = 2082;
    *(_QWORD *)&v168[6] = v48;
    v169 = 2082;
    v170 = v49;
    v171 = 1024;
    v172 = 671;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Connection lost, read complete", buf, 0x22u);
  }

  v51 = *(_QWORD *)(a1 + 32);
  if (!v51)
    goto LABEL_162;
  if (*(_BYTE *)(v51 + 8))
  {
    v52 = NFSharedSignpostLog(v50);
    v53 = objc_claimAutoreleasedReturnValue(v52);
    v54 = v53;
    v55 = *(_QWORD *)(a1 + 32);
    if (v55)
    {
      v56 = *(_QWORD *)(v55 + 104);
      if (v56 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v53))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, OS_SIGNPOST_EVENT, v56, "TNEP_TagDevice_Deselect", "ConnectionLost", buf, 2u);
      }
    }

    v57 = *(_QWORD *)(a1 + 32);
    v58 = v57 ? objc_loadWeakRetained((id *)(v57 + 40)) : 0;
    objc_msgSend(v58, "tnepTagDeviceDeselected:", v27);

    v51 = *(_QWORD *)(a1 + 32);
    if (!v51)
      goto LABEL_162;
  }
  *(_BYTE *)(v51 + 8) = 0;
  v59 = *(_QWORD *)(a1 + 32);
  if (v59)
  {
    objc_storeStrong((id *)(v59 + 56), 0);
    v60 = *(_QWORD *)(a1 + 32);
  }
  else
  {
LABEL_162:
    v60 = 0;
  }
  sub_10011B76C(v60, 0);
  v62 = NFSharedSignpostLog(v61);
  v63 = objc_claimAutoreleasedReturnValue(v62);
  v33 = v63;
  v64 = *(_QWORD *)(a1 + 32);
  if (v64)
  {
    v65 = *(_QWORD *)(v64 + 104);
    if (v65 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v63))
    {
      v66 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v168 = v66;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_INTERVAL_END, v65, "TNEP_HCE_Read", "%@", buf, 0xCu);
    }
  }
LABEL_66:

  objc_autoreleasePoolPop(v2);
}

void sub_100241C78(dispatch_queue_t *a1, int64_t a2, int a3, void *a4)
{
  id v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  _QWORD *v9;
  dispatch_time_t v10;
  void *specific;
  uint64_t Logger;
  void (*v13)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  const char *Name;
  _QWORD v29[5];
  id v30;
  const char *v31;
  int64_t v32;
  char v33;
  NSErrorUserInfoKey v34;
  void *v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  int v43;

  v7 = a4;
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))v7;
  if (a1)
  {
    if (a3)
    {
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_100241F5C;
      v29[3] = &unk_1002EC410;
      v29[4] = a1;
      v31 = "_receiveWithWaitTime:timeExtension:completionHandler:";
      v30 = v7;
      v32 = a2;
      v33 = a3;
      v9 = objc_retainBlock(v29);
      if (a2)
      {
        v10 = dispatch_time(0, a2);
        dispatch_after(v10, a1[3], v9);
      }
      else
      {
        dispatch_async(a1[3], v9);
      }

    }
    else
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v13 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("_receiveWithWaitTime:timeExtension:completionHandler:");
        v17 = 45;
        if (isMetaClass)
          v17 = 43;
        v13(4, "%c[%{public}s %{public}s]:%i Timeout", v17, ClassName, Name, 749);
      }
      v18 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v19 = NFSharedLogGetLogger(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = object_getClass(a1);
        if (class_isMetaClass(v21))
          v22 = 43;
        else
          v22 = 45;
        *(_DWORD *)buf = 67109890;
        v37 = v22;
        v38 = 2082;
        v39 = object_getClassName(a1);
        v40 = 2082;
        v41 = sel_getName("_receiveWithWaitTime:timeExtension:completionHandler:");
        v42 = 1024;
        v43 = 749;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Timeout", buf, 0x22u);
      }

      v23 = objc_alloc((Class)NSError);
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v34 = NSLocalizedDescriptionKey;
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Timeout"));
      v35 = v25;
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
      v27 = objc_msgSend(v23, "initWithDomain:code:userInfo:", v24, 5, v26);
      ((void (**)(_QWORD, _QWORD, id))v8)[2](v8, 0, v27);

    }
  }

}

void sub_100241F5C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  id WeakRetained;
  void *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void (*v31)(uint64_t, const char *, ...);
  objc_class *v32;
  _BOOL4 v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  objc_class *v40;
  int v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  int v45;
  const char *Name;
  id v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  NSErrorUserInfoKey v60;
  void *v61;

  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_33;
  v3 = v2[11];
  if (!v3)
    goto LABEL_17;
  if (objc_msgSend(*(id *)(v3 + 88), "readerModeProtectionActive"))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v10 = 45;
      if (isMetaClass)
        v10 = 43;
      v6(4, "%c[%{public}s %{public}s]:%i Reader protection active", v10, ClassName, Name, 756);
    }
    v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v12 = NFSharedLogGetLogger(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14))
        v15 = 43;
      else
        v15 = 45;
      v16 = object_getClassName(*(id *)(a1 + 32));
      v17 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v49 = v15;
      v50 = 2082;
      v51 = v16;
      v52 = 2082;
      v53 = v17;
      v54 = 1024;
      v55 = 756;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reader protection active", buf, 0x22u);
    }

    v18 = objc_alloc((Class)NSError);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v60 = NSLocalizedDescriptionKey;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Reader mode temporarily disabled"));
    v61 = v20;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1));
    v22 = objc_msgSend(v18, "initWithDomain:code:userInfo:", v19, 47, v21);

    v23 = *(_QWORD *)(a1 + 32);
    if (v23)
      WeakRetained = objc_loadWeakRetained((id *)(v23 + 40));
    else
      WeakRetained = 0;
    objc_msgSend(WeakRetained, "tnepReaderServicesAborted:", v22);

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_32;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
LABEL_17:
    v25 = (void *)v2[12];
  else
LABEL_33:
    v25 = 0;
  v47 = 0;
  v26 = v25;
  v27 = sub_10023C8B8(v2, v26, &v47);
  v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  v22 = v47;

  if (!v28 || v22)
  {
    v29 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v30 = NFLogGetLogger(v29);
    if (v30)
    {
      v31 = (void (*)(uint64_t, const char *, ...))v30;
      v32 = object_getClass(*(id *)(a1 + 32));
      v33 = class_isMetaClass(v32);
      v34 = object_getClassName(*(id *)(a1 + 32));
      v35 = sel_getName(*(SEL *)(a1 + 48));
      v36 = 45;
      if (v33)
        v36 = 43;
      v31(6, "%c[%{public}s %{public}s]:%i Retry in %ld, N=%d", v36, v34, v35, 766, *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
    }
    v37 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v38 = NFSharedLogGetLogger(v37);
    v39 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      v40 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v40))
        v41 = 43;
      else
        v41 = 45;
      v42 = object_getClassName(*(id *)(a1 + 32));
      v43 = sel_getName(*(SEL *)(a1 + 48));
      v44 = *(_QWORD *)(a1 + 56);
      v45 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 67110402;
      v49 = v41;
      v50 = 2082;
      v51 = v42;
      v52 = 2082;
      v53 = v43;
      v54 = 1024;
      v55 = 766;
      v56 = 2048;
      v57 = v44;
      v58 = 1024;
      v59 = v45;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Retry in %ld, N=%d", buf, 0x32u);
    }

    sub_100241C78(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), (*(_BYTE *)(a1 + 64) - 1), *(_QWORD *)(a1 + 40));
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

LABEL_32:
}

void sub_1002423A0(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  id WeakRetained;
  const char *Name;
  NSErrorUserInfoKey v24;
  void *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(4, "%c[%{public}s %{public}s]:%i Reader protection active", v8, ClassName, Name, 790);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v27 = v13;
    v28 = 2082;
    v29 = v14;
    v30 = 2082;
    v31 = v15;
    v32 = 1024;
    v33 = 790;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reader protection active", buf, 0x22u);
  }

  v16 = objc_alloc((Class)NSError);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v24 = NSLocalizedDescriptionKey;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Reader mode temporarily disabled"));
  v25 = v18;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
  v20 = objc_msgSend(v16, "initWithDomain:code:userInfo:", v17, 47, v19);

  v21 = *(_QWORD *)(a1 + 32);
  if (v21)
    WeakRetained = objc_loadWeakRetained((id *)(v21 + 40));
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "tnepReaderServicesAborted:", v20);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1002425F8(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 64));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v4(3, "%c[%{public}s %{public}s]:%i NDEF write failed: %{public}@  error:%{public}@", v9, ClassName, Name, 802, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 64));
    v17 = *(_QWORD *)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110402;
    v21 = v14;
    v22 = 2082;
    v23 = v15;
    v24 = 2082;
    v25 = v16;
    v26 = 1024;
    v27 = 802;
    v28 = 2114;
    v29 = v17;
    v30 = 2114;
    v31 = v18;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i NDEF write failed: %{public}@  error:%{public}@", buf, 0x36u);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

uint64_t sub_1002427A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_1002427B4(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSErrorUserInfoKey v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_alloc((Class)NSError);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v7 = NSLocalizedDescriptionKey;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "No resources"));
  v8 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
  v6 = objc_msgSend(v2, "initWithDomain:code:userInfo:", v3, 34, v5);
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v6);

}

uint64_t sub_1002428C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_1002428DC(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 40));
  else
    WeakRetained = 0;
  v4 = WeakRetained;
  objc_msgSend(WeakRetained, "tnepReaderServicesDiscovered:", *(_QWORD *)(a1 + 40));

}

void sub_100242928(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 40));
  else
    WeakRetained = 0;
  v4 = WeakRetained;
  objc_msgSend(WeakRetained, "staticReaderEngagementDiscovered:", *(_QWORD *)(a1 + 40));

}

void sub_100242974(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 40));
  else
    WeakRetained = 0;
  v4 = WeakRetained;
  objc_msgSend(WeakRetained, "tnepReaderServicesAborted:", *(_QWORD *)(a1 + 40));

}

void sub_100246C88(id a1)
{
  uint64_t v1;
  void *v2;
  NFUnifiedAccessSessionInterface *v3;

  v3 = -[NFSecureTransactionServicesHandoverBaseSessionInterface initWithProtocol:]([NFUnifiedAccessSessionInterface alloc], "initWithProtocol:", &OBJC_PROTOCOL___NFUnifiedAccessSessionInterface);
  v1 = objc_claimAutoreleasedReturnValue(-[NFSecureTransactionServicesHandoverBaseSessionInterface protocolInterface](v3, "protocolInterface"));
  v2 = (void *)qword_10032AC60;
  qword_10032AC60 = v1;

}

void sub_100246D4C(id a1)
{
  uint64_t v1;
  void *v2;
  NFUnifiedAccessSessionCallbacksInterface *v3;

  v3 = -[NFSecureTransactionServicesHandoverBaseSessionCallbacksInterface initWithProtocol:]([NFUnifiedAccessSessionCallbacksInterface alloc], "initWithProtocol:", &OBJC_PROTOCOL___NFUnifiedAccessSessionCallbacksInterface);
  v1 = objc_claimAutoreleasedReturnValue(-[NFSecureTransactionServicesHandoverBaseSessionCallbacksInterface protocolInterface](v3, "protocolInterface"));
  v2 = (void *)qword_10032AC70;
  qword_10032AC70 = v1;

}

void sub_100246E10(id a1)
{
  _NFACHardwareManager *v1;
  void *v2;

  v1 = objc_alloc_init(_NFACHardwareManager);
  v2 = (void *)qword_10032AC88;
  qword_10032AC88 = (uint64_t)v1;

}

void sub_100247514(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100247530(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "failForwardCompleted");
  return objc_msgSend(*(id *)(a1 + 32), "_probeHW");
}

void sub_100247A08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100247A28(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 16);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100247AB8;
  v5[3] = &unk_1002E5EA8;
  v5[4] = v1;
  v5[5] = &v6;
  dispatch_async_and_wait(v2, v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

id sub_100247AB8(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "dumpState");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100247AE8(uint64_t a1, xpc_object_t xdict)
{
  const char *string;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  kern_return_t v18;
  uint32_t denom;
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *v23;
  _BOOL4 v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  objc_class *v38;
  _BOOL4 v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  objc_class *v44;
  int v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  NSObject *v49;
  const char *ClassName;
  const char *Name;
  const char *v52;
  _QWORD block[5];
  mach_timebase_info info;
  uint8_t buf[4];
  int v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  unint64_t v64;

  string = xpc_dictionary_get_string(xdict, _xpc_event_key_name);
  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i Launched by %s", v9, ClassName, Name, 200, string);
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v56 = v14;
    v57 = 2082;
    v58 = v15;
    v59 = 2082;
    v60 = v16;
    v61 = 1024;
    v62 = 200;
    v63 = 2080;
    v64 = (unint64_t)string;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Launched by %s", buf, 0x2Cu);
  }

  if (!strcmp(string, "fury.spmi.activity"))
  {
    v17 = mach_absolute_time();
    info = 0;
    v18 = mach_timebase_info(&info);
    denom = info.denom;
    v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v21 = NFLogGetLogger(v20);
    v22 = (void (*)(uint64_t, const char *, ...))v21;
    if (v18 || !denom)
    {
      if (v21)
      {
        v38 = object_getClass(*(id *)(a1 + 32));
        v39 = class_isMetaClass(v38);
        v40 = object_getClassName(*(id *)(a1 + 32));
        v52 = sel_getName(*(SEL *)(a1 + 40));
        v41 = 45;
        if (v39)
          v41 = 43;
        v22(6, "%c[%{public}s %{public}s]:%i Fury SPMI activity", v41, v40, v52, 209);
      }
      v42 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v43 = NFSharedLogGetLogger(v42);
      v30 = objc_claimAutoreleasedReturnValue(v43);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      v44 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v44))
        v45 = 43;
      else
        v45 = 45;
      v46 = object_getClassName(*(id *)(a1 + 32));
      v47 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      v56 = v45;
      v57 = 2082;
      v58 = v46;
      v59 = 2082;
      v60 = v47;
      v61 = 1024;
      v62 = 209;
      v35 = "%c[%{public}s %{public}s]:%i Fury SPMI activity";
      v36 = v30;
      v37 = 34;
    }
    else
    {
      if (v21)
      {
        v23 = object_getClass(*(id *)(a1 + 32));
        v24 = class_isMetaClass(v23);
        v25 = object_getClassName(*(id *)(a1 + 32));
        v26 = sel_getName(*(SEL *)(a1 + 40));
        v27 = 45;
        if (v24)
          v27 = 43;
        v22(6, "%c[%{public}s %{public}s]:%i Fury SPMI activity (%llu)", v27, v25, v26, 206, v17 * info.numer / info.denom);
      }
      v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v29 = NFSharedLogGetLogger(v28);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      v31 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v31))
        v32 = 43;
      else
        v32 = 45;
      v33 = object_getClassName(*(id *)(a1 + 32));
      v34 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      v56 = v32;
      v57 = 2082;
      v58 = v33;
      v59 = 2082;
      v60 = v34;
      v61 = 1024;
      v62 = 206;
      v63 = 2048;
      v64 = v17 * info.numer / info.denom;
      v35 = "%c[%{public}s %{public}s]:%i Fury SPMI activity (%llu)";
      v36 = v30;
      v37 = 44;
    }
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v35, buf, v37);
LABEL_32:

    v48 = *(_QWORD *)(a1 + 32);
    v49 = *(NSObject **)(v48 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100247F38;
    block[3] = &unk_1002E5C58;
    block[4] = v48;
    dispatch_async(v49, block);
  }
}

id sub_100247F38(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_probeHW");
}

void sub_100247F40(uint64_t a1)
{
  id v2;
  void *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  const char *Name;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;

  v2 = sub_1001F2AB0((uint64_t)NFFuryCALogger);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1001F3D78((uint64_t)v3);

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v10 = 45;
    if (isMetaClass)
      v10 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i com.apple.nfcacd.coreanalytics.event ready", v10, ClassName, Name, 222);
  }
  v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v12 = NFSharedLogGetLogger(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14))
      v15 = 43;
    else
      v15 = 45;
    v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67109890;
    v20 = v15;
    v21 = 2082;
    v22 = v16;
    v23 = 2082;
    v24 = v17;
    v25 = 1024;
    v26 = 222;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i com.apple.nfcacd.coreanalytics.event ready", buf, 0x22u);
  }

}

void sub_100248460(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100248D08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100248F18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100248F34(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "failForwardCompleted");
}

void sub_1002491A8(uint64_t a1)
{
  uint64_t v1;
  id v3;
  void *specific;
  void (*Logger)(uint64_t, const char *, ...);
  objc_class *Class;
  uint64_t v7;
  const char *ClassName;
  const char *Name;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  int v15;
  const char *v16;
  const char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  void *v37;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 8))
  {
    v3 = *(id *)(v1 + 48);
    objc_sync_enter(v3);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64))
    {
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(specific);
      if (Logger)
      {
        Class = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(Class))
          v7 = 43;
        else
          v7 = 45;
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 48));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "clientName"));
        Logger(6, "%c[%{public}s %{public}s]:%i Invalidating active session for %{public}@ due to sleep", v7, ClassName, Name, 336, v10);

      }
      v11 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v12 = NFSharedLogGetLogger(v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v14))
          v15 = 43;
        else
          v15 = 45;
        v16 = object_getClassName(*(id *)(a1 + 32));
        v17 = sel_getName(*(SEL *)(a1 + 48));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "clientName"));
        *(_DWORD *)buf = 67110146;
        v29 = v15;
        v30 = 2082;
        v31 = v16;
        v32 = 2082;
        v33 = v17;
        v34 = 1024;
        v35 = 336;
        v36 = 2114;
        v37 = v18;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Invalidating active session for %{public}@ due to sleep", buf, 0x2Cu);

      }
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "connection"));
      objc_msgSend(v19, "invalidate");

      v21 = NFSharedSignpostLog(v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_signpost_enabled(v22))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "powerObserverSystemWillSleep: session in progress; preventing sleep",
          "",
          buf,
          2u);
      }

      objc_sync_exit(v3);
    }
    else
    {
      objc_sync_exit(v3);

      v26 = NFSharedSignpostLog(v25);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_signpost_enabled(v27))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "powerObserverSystemWillSleep: allowing to sleep", "", buf, 2u);
      }

      objc_msgSend(*(id *)(a1 + 40), "allowSleep");
    }
  }
  else
  {
    v23 = NFSharedSignpostLog(objc_msgSend(*(id *)(v1 + 72), "allowSleep"));
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_signpost_enabled(v24))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "powerObserverSystemWillSleep: not running; allowing to sleep",
        "",
        buf,
        2u);
    }

  }
}

void sub_1002494DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100249714(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  id v3;

  v1 = result[4];
  if (*(_BYTE *)(v1 + 8))
  {
    v2 = result;
    v3 = *(id *)(v1 + 48);
    objc_sync_enter(v3);
    *(_BYTE *)(v2[4] + 104) = 0;
    objc_sync_exit(v3);

    return objc_msgSend((id)v2[4], "maybeStartNextSession");
  }
  return result;
}

void sub_100249CD8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];
  uint8_t buf[16];

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFCACD_GET_INFO", "", buf, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getInfo"));
  v5 = NFSharedSignpostLog(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_signpost_enabled(v6))
  {
    *(_WORD *)v7 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCACD_GET_INFO", "", v7, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100249E50(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[16];
  _QWORD v9[6];
  uint8_t buf[8];
  uint8_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFCACD_GET_DIE_ID", "", buf, 2u);
  }

  *(_QWORD *)buf = 0;
  v11 = buf;
  v12 = 0x3032000000;
  v13 = sub_100249FE8;
  v14 = sub_100249FF8;
  v15 = 0;
  v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10024A000;
  v9[3] = &unk_1002EC518;
  v9[4] = v4;
  v9[5] = buf;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_executeWithDriverSessionSync:block:", CFSTR("GetDieId"), v9));
  v6 = NFSharedSignpostLog(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_signpost_enabled(v7))
  {
    *(_WORD *)v8 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCACD_GET_DIE_ID", "", v8, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_object_dispose(buf, 8);

}

void sub_100249FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100249FE8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100249FF8(uint64_t a1)
{

}

id sub_10024A000(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSErrorUserInfoKey v11;
  void *v12;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "getDieID"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    return 0;
  v6 = objc_alloc((Class)NSError);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v11 = NSLocalizedDescriptionKey;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
  v12 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
  v10 = objc_msgSend(v6, "initWithDomain:code:userInfo:", v7, 15, v9);

  return v10;
}

void sub_10024A1B0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[16];
  _QWORD v9[6];
  uint8_t buf[8];
  uint8_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFCACD_GET_POWER_COUNTERS", "", buf, 2u);
  }

  *(_QWORD *)buf = 0;
  v11 = buf;
  v12 = 0x3032000000;
  v13 = sub_100249FE8;
  v14 = sub_100249FF8;
  v15 = 0;
  v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10024A348;
  v9[3] = &unk_1002EC518;
  v9[4] = v4;
  v9[5] = buf;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_executeWithDriverSessionSync:block:", CFSTR("GetPowerCounters"), v9));
  v6 = NFSharedSignpostLog(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_signpost_enabled(v7))
  {
    *(_WORD *)v8 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCACD_GET_POWER_COUNTERS", "", v8, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_object_dispose(buf, 8);

}

void sub_10024A32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10024A348(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id obj;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 88);
  v3 = *(_QWORD *)(v1 + 8);
  obj = *(id *)(v3 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "getPowerCounters:", &obj));
  objc_storeStrong((id *)(v3 + 40), obj);
  return v4;
}

void sub_10024A418(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[16];
  _QWORD v9[6];
  uint8_t buf[8];
  uint8_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFCACD_GET_RF_SETTINGS", "", buf, 2u);
  }

  *(_QWORD *)buf = 0;
  v11 = buf;
  v12 = 0x3032000000;
  v13 = sub_100249FE8;
  v14 = sub_100249FF8;
  v15 = 0;
  v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10024A5B0;
  v9[3] = &unk_1002EC518;
  v9[4] = v4;
  v9[5] = buf;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_executeWithDriverSessionSync:block:", CFSTR("GetRfSettings"), v9));
  v6 = NFSharedSignpostLog(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_signpost_enabled(v7))
  {
    *(_WORD *)v8 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCACD_GET_RF_SETTINGS", "", v8, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_object_dispose(buf, 8);

}

void sub_10024A594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10024A5B0(uint64_t a1)
{
  NSMutableDictionary *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  NSErrorUserInfoKey v9;
  void *v10;

  v2 = objc_opt_new(NSMutableDictionary);
  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "getRFSettings:", v2) & 1) != 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v2);
    v3 = 0;
  }
  else
  {
    v4 = objc_alloc((Class)NSError);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v9 = NSLocalizedDescriptionKey;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v10 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
    v3 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v5, 15, v7);

  }
  return v3;
}

void sub_10024AAF4(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  _QWORD v25[6];
  char v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) = 0;
  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 106))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i MultiTagDetection already set to: %d", v9, ClassName, Name, 506, *(unsigned __int8 *)(a1 + 56));
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 48));
      v17 = *(unsigned __int8 *)(a1 + 56);
      *(_DWORD *)buf = 67110146;
      v28 = v14;
      v29 = 2082;
      v30 = v15;
      v31 = 2082;
      v32 = v16;
      v33 = 1024;
      v34 = 506;
      v35 = 1024;
      v36 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i MultiTagDetection already set to: %d", buf, 0x28u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v18 = NFSharedSignpostLog(a1);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_signpost_enabled(v19))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFCACD_ENABLE_MULTI_TAG", "", buf, 2u);
    }

    v20 = *(void **)(a1 + 32);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10024ADC4;
    v25[3] = &unk_1002EC540;
    v26 = *(_BYTE *)(a1 + 56);
    v21 = *(_QWORD *)(a1 + 48);
    v25[4] = v20;
    v25[5] = v21;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "_executeWithDriverSessionSync:block:", CFSTR("enableMultiTag"), v25));
    v23 = NFSharedSignpostLog(v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_signpost_enabled(v24))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCACD_ENABLE_MULTI_TAG", "", buf, 2u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

id sub_10024ADC4(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  objc_class *v18;
  int v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  int v37;
  const char *v38;
  const char *v39;
  int v40;
  void *v41;
  id v42;
  id v44;
  void *v45;
  uint64_t v46;
  void (*v47)(uint64_t, const char *, ...);
  objc_class *v48;
  _BOOL4 v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  NSObject *v53;
  objc_class *v54;
  int v55;
  const char *v56;
  const char *v57;
  id v58;
  void *v59;
  void *v60;
  void *v61;
  const char *v62;
  const char *Name;
  const char *v64;
  NSErrorUserInfoKey v65;
  void *v66;
  uint8_t buf[4];
  int v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  id v76;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 88);
  if (!v2)
  {
    objc_msgSend(v3, "clearMultiTagPollingState");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "closeSession:", CFSTR("MultiTagSession"));
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v10 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v14 = 45;
      if (isMetaClass)
        v14 = 43;
      v10(6, "%c[%{public}s %{public}s]:%i releaseing multitag transaction", v14, ClassName, Name, 535);
    }
    v15 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v16 = NFSharedLogGetLogger(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v18))
        v19 = 43;
      else
        v19 = 45;
      v20 = object_getClassName(*(id *)(a1 + 32));
      v21 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      v68 = v19;
      v69 = 2082;
      v70 = v20;
      v71 = 2082;
      v72 = v21;
      v73 = 1024;
      v74 = 535;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i releaseing multitag transaction", buf, 0x22u);
    }

    v22 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v22 + 128);
    *(_QWORD *)(v22 + 128) = 0;
    goto LABEL_14;
  }
  v4 = objc_msgSend(v3, "openSession:", CFSTR("MultiTagSession"));
  if (v4 == (id)1)
  {
    v5 = os_transaction_create("com.apple.nfcacd.multitag");
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 128);
    *(_QWORD *)(v6 + 128) = v5;
LABEL_14:

LABEL_15:
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 106) = *(_BYTE *)(a1 + 48);
    v23 = *(_QWORD *)(a1 + 32);
    v24 = *(void **)(v23 + 152);
    *(_QWORD *)(v23 + 152) = 0;

    v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v26 = NFLogGetLogger(v25);
    if (v26)
    {
      v27 = (void (*)(uint64_t, const char *, ...))v26;
      v28 = object_getClass(*(id *)(a1 + 32));
      v29 = class_isMetaClass(v28);
      v30 = object_getClassName(*(id *)(a1 + 32));
      v31 = sel_getName(*(SEL *)(a1 + 40));
      v32 = 45;
      if (v29)
        v32 = 43;
      v27(6, "%c[%{public}s %{public}s]:%i Multitag state: %d", v32, v30, v31, 542, *(unsigned __int8 *)(a1 + 48));
    }
    v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v34 = NFSharedLogGetLogger(v33);
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      v36 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v36))
        v37 = 43;
      else
        v37 = 45;
      v38 = object_getClassName(*(id *)(a1 + 32));
      v39 = sel_getName(*(SEL *)(a1 + 40));
      v40 = *(unsigned __int8 *)(a1 + 48);
      *(_DWORD *)buf = 67110146;
      v68 = v37;
      v69 = 2082;
      v70 = v38;
      v71 = 2082;
      v72 = v39;
      v73 = 1024;
      v74 = 542;
      v75 = 1024;
      LODWORD(v76) = v40;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Multitag state: %d", buf, 0x28u);
    }

    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getDefaults"));
    objc_msgSend(v41, "setBool:forKey:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 106), CFSTR("MultiTagDetectionOn"));
    objc_msgSend(v41, "synchronize");

    objc_msgSend(*(id *)(a1 + 32), "maybeStartNextSession");
    v42 = 0;
    return v42;
  }
  v44 = v4;
  v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v46 = NFLogGetLogger(v45);
  if (v46)
  {
    v47 = (void (*)(uint64_t, const char *, ...))v46;
    v48 = object_getClass(*(id *)(a1 + 32));
    v49 = class_isMetaClass(v48);
    v62 = object_getClassName(*(id *)(a1 + 32));
    v64 = sel_getName(*(SEL *)(a1 + 40));
    v50 = 45;
    if (v49)
      v50 = 43;
    v47(3, "%c[%{public}s %{public}s]:%i Failed to open session; hwState=%lu", v50, v62, v64, 520, v44);
  }
  v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v52 = NFSharedLogGetLogger(v51);
  v53 = objc_claimAutoreleasedReturnValue(v52);
  if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
  {
    v54 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v54))
      v55 = 43;
    else
      v55 = 45;
    v56 = object_getClassName(*(id *)(a1 + 32));
    v57 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    v68 = v55;
    v69 = 2082;
    v70 = v56;
    v71 = 2082;
    v72 = v57;
    v73 = 1024;
    v74 = 520;
    v75 = 2048;
    v76 = v44;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session; hwState=%lu",
      buf,
      0x2Cu);
  }

  v58 = objc_alloc((Class)NSError);
  v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
  v65 = NSLocalizedDescriptionKey;
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
  v66 = v60;
  v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v66, &v65, 1));
  v42 = objc_msgSend(v58, "initWithDomain:code:userInfo:", v59, 6, v61);

  if (!v42)
    goto LABEL_15;
  return v42;
}

void sub_10024B380(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  _QWORD v25[6];
  char v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 105))
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v4(6, "%c[%{public}s %{public}s]:%i LPCD is already set to: %d", v9, ClassName, Name, 566, *(unsigned __int8 *)(a1 + 56));
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 48));
      v17 = *(unsigned __int8 *)(a1 + 56);
      *(_DWORD *)buf = 67110146;
      v28 = v14;
      v29 = 2082;
      v30 = v15;
      v31 = 2082;
      v32 = v16;
      v33 = 1024;
      v34 = 566;
      v35 = 1024;
      v36 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i LPCD is already set to: %d", buf, 0x28u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v18 = NFSharedSignpostLog(a1);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_signpost_enabled(v19))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFCACD_ENABLE_LPCD", "", buf, 2u);
    }

    v20 = *(void **)(a1 + 32);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10024B648;
    v25[3] = &unk_1002EC540;
    v26 = *(_BYTE *)(a1 + 56);
    v21 = *(_QWORD *)(a1 + 48);
    v25[4] = v20;
    v25[5] = v21;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "_executeWithDriverSessionSync:block:", CFSTR("enableLPCD"), v25));
    v23 = NFSharedSignpostLog(v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_signpost_enabled(v24))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCACD_ENABLE_LPCD", "", buf, 2u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

uint64_t sub_10024B648(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;
  id v5;
  void *specific;
  uint64_t Logger;
  void (*v8)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  int v37;
  const char *v38;
  const char *v39;
  int v40;
  void *v41;
  const char *ClassName;
  const char *Name;
  uint8_t buf[4];
  int v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  id v54;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 88);
  if (v2)
  {
    v4 = objc_msgSend(v3, "openSession:", CFSTR("LpcdSession"));
    if (v4 != (id)1)
    {
      v5 = v4;
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v8 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(*(id *)(a1 + 32));
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 40));
        v11 = 45;
        if (isMetaClass)
          v11 = 43;
        v8(3, "%c[%{public}s %{public}s]:%i Failed to open session; hwState=%lu", v11, ClassName, Name, 581, v5);
      }
      v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v13 = NFSharedLogGetLogger(v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v15))
          v16 = 43;
        else
          v16 = 45;
        v17 = object_getClassName(*(id *)(a1 + 32));
        v18 = sel_getName(*(SEL *)(a1 + 40));
        *(_DWORD *)buf = 67110146;
        v46 = v16;
        v47 = 2082;
        v48 = v17;
        v49 = 2082;
        v50 = v18;
        v51 = 1024;
        v52 = 581;
        v53 = 2048;
        v54 = v5;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session; hwState=%lu",
          buf,
          0x2Cu);
      }

    }
    v19 = os_transaction_create("com.apple.nfcacd.lpcd");
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(void **)(v20 + 120);
    *(_QWORD *)(v20 + 120) = v19;

    v22 = 1;
  }
  else
  {
    objc_msgSend(v3, "closeSession:", CFSTR("LpcdSession"));
    v23 = *(_QWORD *)(a1 + 32);
    v24 = *(void **)(v23 + 120);
    *(_QWORD *)(v23 + 120) = 0;

    v22 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 105) = v22;
  v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v26 = NFLogGetLogger(v25);
  if (v26)
  {
    v27 = (void (*)(uint64_t, const char *, ...))v26;
    v28 = object_getClass(*(id *)(a1 + 32));
    v29 = class_isMetaClass(v28);
    v30 = object_getClassName(*(id *)(a1 + 32));
    v31 = sel_getName(*(SEL *)(a1 + 40));
    v32 = 45;
    if (v29)
      v32 = 43;
    v27(6, "%c[%{public}s %{public}s]:%i enabled: %d", v32, v30, v31, 594, *(unsigned __int8 *)(a1 + 48));
  }
  v33 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v34 = NFSharedLogGetLogger(v33);
  v35 = objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    v36 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v36))
      v37 = 43;
    else
      v37 = 45;
    v38 = object_getClassName(*(id *)(a1 + 32));
    v39 = sel_getName(*(SEL *)(a1 + 40));
    v40 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    v46 = v37;
    v47 = 2082;
    v48 = v38;
    v49 = 2082;
    v50 = v39;
    v51 = 1024;
    v52 = 594;
    v53 = 1024;
    LODWORD(v54) = v40;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i enabled: %d", buf, 0x28u);
  }

  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getDefaults"));
  objc_msgSend(v41, "setBool:forKey:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 105), CFSTR("LpcdAlwaysOn"));
  objc_msgSend(v41, "synchronize");

  objc_msgSend(*(id *)(a1 + 32), "maybeStartNextSession");
  return 0;
}

void sub_10024BA28(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t v9[16];
  _QWORD v10[8];
  uint8_t buf[8];
  uint8_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;
  _QWORD v17[3];
  char v18;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFCACD_GET_LAST_DETECTED_TAGS", "", buf, 2u);
  }

  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x2020000000;
  v18 = 0;
  *(_QWORD *)buf = 0;
  v12 = buf;
  v13 = 0x3032000000;
  v14 = sub_100249FE8;
  v15 = sub_100249FF8;
  v16 = 0;
  v4 = (void *)a1[4];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10024BBF8;
  v10[3] = &unk_1002EC568;
  v10[4] = v4;
  v10[5] = buf;
  v5 = a1[6];
  v10[6] = v17;
  v10[7] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_executeWithDriverSessionSync:block:", CFSTR("getLastDetectedTags"), v10));
  v7 = NFSharedSignpostLog(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_signpost_enabled(v8))
  {
    *(_WORD *)v9 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCACD_GET_LAST_DETECTED_TAGS", "", v9, 2u);
  }

  (*(void (**)(void))(a1[5] + 16))();
  _Block_object_dispose(buf, 8);

  _Block_object_dispose(v17, 8);
}

void sub_10024BBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_10024BBF8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *specific;
  uint64_t Logger;
  void (*v10)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  int v23;
  void *v24;
  uint64_t v25;
  void (*v26)(uint64_t, const char *, ...);
  objc_class *v27;
  _BOOL4 v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  int v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  id v41;
  uint8_t buf[4];
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  _QWORD v51[2];

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 88);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24;
  v41 = 0;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "queryMultiTagState:error:", v3, &v41));
  v5 = v41;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v4;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v10 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    v15 = 45;
    if (isMetaClass)
      v15 = 43;
    v10(6, "%c[%{public}s %{public}s]:%i enabled : %d  error: %{public}@", v15, ClassName, Name, 624, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v5);
  }
  v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v17 = NFSharedLogGetLogger(v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v19 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v19))
      v20 = 43;
    else
      v20 = 45;
    v21 = object_getClassName(*(id *)(a1 + 32));
    v22 = sel_getName(*(SEL *)(a1 + 56));
    v23 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    *(_DWORD *)buf = 67110402;
    v43 = v20;
    v44 = 2082;
    v45 = v21;
    v46 = 2082;
    v47 = v22;
    v48 = 1024;
    v49 = 624;
    v50 = 1024;
    LODWORD(v51[0]) = v23;
    WORD2(v51[0]) = 2114;
    *(_QWORD *)((char *)v51 + 6) = v5;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i enabled : %d  error: %{public}@", buf, 0x32u);
  }

  v24 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v25 = NFLogGetLogger(v24);
  if (v25)
  {
    v26 = (void (*)(uint64_t, const char *, ...))v25;
    v27 = object_getClass(*(id *)(a1 + 32));
    v28 = class_isMetaClass(v27);
    v29 = object_getClassName(*(id *)(a1 + 32));
    v30 = sel_getName(*(SEL *)(a1 + 56));
    v31 = 45;
    if (v28)
      v31 = 43;
    v26(6, "%c[%{public}s %{public}s]:%i %{public}@", v31, v29, v30, 625, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
  v32 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v33 = NFSharedLogGetLogger(v32);
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    v35 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v35))
      v36 = 43;
    else
      v36 = 45;
    v37 = object_getClassName(*(id *)(a1 + 32));
    v38 = sel_getName(*(SEL *)(a1 + 56));
    v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    *(_DWORD *)buf = 67110146;
    v43 = v36;
    v44 = 2082;
    v45 = v37;
    v46 = 2082;
    v47 = v38;
    v48 = 1024;
    v49 = 625;
    v50 = 2114;
    v51[0] = v39;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 152), *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  return v5;
}

uint64_t sub_10024BFD4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFCACD_GET_MULTI_TAG_STATE", "", buf, 2u);
  }

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v11 = 45;
    if (isMetaClass)
      v11 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i %{public}@", v11, ClassName, Name, 644, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152));
  }
  v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v13 = NFSharedLogGetLogger(v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v15))
      v16 = 43;
    else
      v16 = 45;
    v17 = object_getClassName(*(id *)(a1 + 32));
    v18 = sel_getName(*(SEL *)(a1 + 48));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152);
    *(_DWORD *)buf = 67110146;
    v22 = v16;
    v23 = 2082;
    v24 = v17;
    v25 = 2082;
    v26 = v18;
    v27 = 1024;
    v28 = 644;
    v29 = 2114;
    v30 = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10024C48C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[5];
  uint8_t buf[16];

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFCACD_CLEAR_MULTI_TAG_STATE", "", buf, 2u);
  }

  v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10024C5C0;
  v8[3] = &unk_1002E6E78;
  v8[4] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_executeWithDriverSessionSync:block:", CFSTR("clearMultiTagState"), v8));
  v6 = NFSharedSignpostLog(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCACD_CLEAR_MULTI_TAG_STATE", "", buf, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_10024C5C0(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  NSErrorUserInfoKey v11;
  void *v12;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "clearMultiTagPollingState");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 152);
  *(_QWORD *)(v3 + 152) = 0;

  v5 = 0;
  if ((v2 & 1) == 0)
  {
    v6 = objc_alloc((Class)NSError);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v11 = NSLocalizedDescriptionKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
    v12 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
    v5 = objc_msgSend(v6, "initWithDomain:code:userInfo:", v7, 6, v9);

  }
  return v5;
}

void sub_10024C978(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10024CD0C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "maybeStartNextSession");
}

void sub_10024D680(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10024D9B0(uint64_t a1)
{
  id v2;
  void *specific;
  uint64_t Logger;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  void (*v23)(uint64_t, const char *, ...);
  objc_class *v24;
  _BOOL4 v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  objc_class *v30;
  int v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  const char *v40;
  const char *Name;
  const char *v42;
  _QWORD block[6];
  NSErrorUserInfoKey v44;
  void *v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  id v55;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "openSession:", CFSTR("Shutdown preparation"));
  if (v2 == (id)1)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    objc_msgSend(*(id *)(a1 + 32), "_unloadService");
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      v9 = 45;
      if (isMetaClass)
        v9 = 43;
      v5(6, "%c[%{public}s %{public}s]:%i stop now but leave HW on", v9, ClassName, Name, 844);
    }
    v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v11 = NFSharedLogGetLogger(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13))
        v14 = 43;
      else
        v14 = 45;
      v15 = object_getClassName(*(id *)(a1 + 32));
      v16 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v47 = v14;
      v48 = 2082;
      v49 = v15;
      v50 = 2082;
      v51 = v16;
      v52 = 1024;
      v53 = 844;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i stop now but leave HW on", buf, 0x22u);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "stopNowAndLeveHWEnabled:", *(unsigned __int8 *)(a1 + 56));
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(NSObject **)(v17 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024DD94;
    block[3] = &unk_1002E5C30;
    v19 = *(_QWORD *)(a1 + 48);
    block[4] = v17;
    block[5] = v19;
    dispatch_async(v18, block);
  }
  else
  {
    v20 = v2;
    v21 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v22 = NFLogGetLogger(v21);
    if (v22)
    {
      v23 = (void (*)(uint64_t, const char *, ...))v22;
      v24 = object_getClass(*(id *)(a1 + 32));
      v25 = class_isMetaClass(v24);
      v40 = object_getClassName(*(id *)(a1 + 32));
      v42 = sel_getName(*(SEL *)(a1 + 48));
      v26 = 45;
      if (v25)
        v26 = 43;
      v23(3, "%c[%{public}s %{public}s]:%i Failed to open session; hwState=%lu", v26, v40, v42, 838, v20);
    }
    v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v28 = NFSharedLogGetLogger(v27);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v30))
        v31 = 43;
      else
        v31 = 45;
      v32 = object_getClassName(*(id *)(a1 + 32));
      v33 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      v47 = v31;
      v48 = 2082;
      v49 = v32;
      v50 = 2082;
      v51 = v33;
      v52 = 1024;
      v53 = 838;
      v54 = 2048;
      v55 = v20;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session; hwState=%lu",
        buf,
        0x2Cu);
    }

    v34 = *(_QWORD *)(a1 + 40);
    v35 = objc_alloc((Class)NSError);
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v44 = NSLocalizedDescriptionKey;
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unknown Error"));
    v45 = v37;
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1));
    v39 = objc_msgSend(v35, "initWithDomain:code:userInfo:", v36, 6, v38);
    (*(void (**)(uint64_t, id))(v34 + 16))(v34, v39);

  }
}

void sub_10024DD94(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  const char *Name;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i exiting now...", v8, ClassName, Name, 848);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67109890;
    v18 = v13;
    v19 = 2082;
    v20 = v14;
    v21 = 2082;
    v22 = v15;
    v23 = 1024;
    v24 = 848;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i exiting now...", buf, 0x22u);
  }

  exit(0);
}

id sub_10024DF5C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_dequeueSession:startNextSession:", *(_QWORD *)(a1 + 40), 1);
}

void sub_10024E488(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10024E4B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "maybeStartNextSession");
}

id sub_10024E6AC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  id v8;
  void *specific;
  uint64_t Logger;
  void (*v11)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  objc_class *v19;
  int v20;
  const char *v21;
  const char *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  const char *Name;
  id v31;
  NSErrorUserInfoKey v32;
  void *v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 88);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig none](NFRoutingConfig, "none"));
  v4 = objc_msgSend(v2, "setRouting:", v3);

  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 88);
  v31 = 0;
  v6 = objc_msgSend(v5, "getControllerInfo:", &v31);
  v7 = v31;
  v8 = 0;
  if ((v6 & 1) == 0)
  {
    specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    Logger = NFLogGetLogger(specific);
    if (Logger)
    {
      v11 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      v15 = 45;
      if (isMetaClass)
        v15 = 43;
      v11(3, "%c[%{public}s %{public}s]:%i Failed to get controller info", v15, ClassName, Name, 924);
    }
    v16 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v17 = NFSharedLogGetLogger(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v19))
        v20 = 43;
      else
        v20 = 45;
      v21 = object_getClassName(*(id *)(a1 + 32));
      v22 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      v35 = v20;
      v36 = 2082;
      v37 = v21;
      v38 = 2082;
      v39 = v22;
      v40 = 1024;
      v41 = 924;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get controller info", buf, 0x22u);
    }

    v23 = objc_alloc((Class)NSError);
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v32 = NSLocalizedDescriptionKey;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v33 = v25;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1));
    v8 = objc_msgSend(v23, "initWithDomain:code:userInfo:", v24, 15, v26);

  }
  v27 = *(_QWORD *)(a1 + 32);
  v28 = *(void **)(v27 + 144);
  *(_QWORD *)(v27 + 144) = v7;

  return v8;
}

id sub_10024EF4C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "preferencesDidChange");
}

void sub_10024F20C(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *i;
  void *v22;
  void (*v23)(uint64_t, const char *, ...);
  objc_class *v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  id v35;
  const char *Name;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t v41[128];
  uint8_t buf[4];
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i Releasing queued sessions", v8, ClassName, Name, 1016);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v43 = v13;
    v44 = 2082;
    v45 = v14;
    v46 = 2082;
    v47 = v15;
    v48 = 1024;
    v49 = 1016;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Releasing queued sessions", buf, 0x22u);
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "NF_userInfo"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("ProxyObjects")));

  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v18 = objc_msgSend(v17, "copy");
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v19; i = (char *)i + 1)
      {
        if (*(_QWORD *)v38 != v20)
          objc_enumerationMutation(v18);
        objc_msgSend(*(id *)(a1 + 32), "_dequeueSession:startNextSession:", *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i), 1);
      }
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
    }
    while (v19);
  }

  v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger(v22);
  if (v23)
  {
    v24 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v24))
      v25 = 43;
    else
      v25 = 45;
    v26 = object_getClassName(*(id *)(a1 + 32));
    v27 = sel_getName(*(SEL *)(a1 + 48));
    v23(6, "%c[%{public}s %{public}s]:%i removing xpc connection from list", v25, v26, v27, 1024, (_QWORD)v37);
  }
  v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v29 = NFSharedLogGetLogger(v28);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    v31 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v31))
      v32 = 43;
    else
      v32 = 45;
    v33 = object_getClassName(*(id *)(a1 + 32));
    v34 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v43 = v32;
    v44 = 2082;
    v45 = v33;
    v46 = 2082;
    v47 = v34;
    v48 = 1024;
    v49 = 1024;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i removing xpc connection from list", buf, 0x22u);
  }

  v35 = *(id *)(*(_QWORD *)(a1 + 32) + 40);
  objc_sync_enter(v35);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "removeObject:", *(_QWORD *)(a1 + 40));
  objc_sync_exit(v35);

}

void sub_10024F59C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10024FC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_10024FCCC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];
  uint8_t buf[16];

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "initialLoad", "", buf, 2u);
  }

  v4 = objc_msgSend(*(id *)(a1 + 32), "_loadHW");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v4;
  v5 = NFSharedSignpostLog(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_signpost_enabled(v6))
  {
    *(_WORD *)v7 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "initialLoad", "", v7, 2u);
  }

}

void sub_10024FDAC(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  v1 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v1, "didCloseXPCConnection:", WeakRetained);

}

void sub_10024FDEC(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  v1 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v1, "didCloseXPCConnection:", WeakRetained);

}

void sub_10024FEEC(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  char v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  const char *Name;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i Reader mode must stop", v8, ClassName, Name, 1086);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67109890;
    v23 = v13;
    v24 = 2082;
    v25 = v14;
    v26 = 2082;
    v27 = v15;
    v28 = 1024;
    v29 = 1086;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Reader mode must stop", buf, 0x22u);
  }

  v16 = objc_opt_respondsToSelector(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), "handleReaderBurnoutTimer");
  v17 = *(_QWORD *)(a1 + 32);
  if ((v16 & 1) != 0)
  {
    objc_msgSend(*(id *)(v17 + 64), "handleReaderBurnoutTimer");
  }
  else
  {
    v18 = *(void **)(v17 + 88);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig none](NFRoutingConfig, "none"));
    v20 = objc_msgSend(v18, "setRouting:", v19);

  }
}

id sub_10025017C(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  char v16;
  id *v17;
  const char *Name;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i Reader mode can resume", v8, ClassName, Name, 1102);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67109890;
    v21 = v13;
    v22 = 2082;
    v23 = v14;
    v24 = 2082;
    v25 = v15;
    v26 = 1024;
    v27 = 1102;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Reader mode can resume", buf, 0x22u);
  }

  v16 = objc_opt_respondsToSelector(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), "handleReaderBurnoutCleared");
  v17 = *(id **)(a1 + 32);
  if ((v16 & 1) != 0)
    return objc_msgSend(v17[8], "handleReaderBurnoutCleared");
  else
    return objc_msgSend(v17, "maybeStartNextSession");
}

void sub_1002505F4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void (*v5)(uint64_t, const char *, ...);
  objc_class *v6;
  _BOOL4 v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  void *v17;
  void *specific;
  uint64_t Logger;
  void (*v20)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  dispatch_time_t v35;
  uint64_t v36;
  NSObject *v37;
  const char *v38;
  _QWORD block[5];
  uint8_t buf[4];
  int v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 106))
  {
    if (*(_QWORD *)(v1 + 112) < 5uLL)
    {
      if (!*(_BYTE *)(v1 + 107))
      {
        *(_BYTE *)(v1 + 107) = 1;
        ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112);
        specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        Logger = NFLogGetLogger(specific);
        if (Logger)
        {
          v20 = (void (*)(uint64_t, const char *, ...))Logger;
          Class = object_getClass(*(id *)(a1 + 32));
          isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(*(id *)(a1 + 32));
          Name = sel_getName(*(SEL *)(a1 + 40));
          v25 = 45;
          if (isMetaClass)
            v25 = 43;
          v20(6, "%c[%{public}s %{public}s]:%i Restart MT detection : %d", v25, ClassName, Name, 1151, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112));
        }
        v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v27 = NFSharedLogGetLogger(v26);
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          v29 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v29))
            v30 = 43;
          else
            v30 = 45;
          v31 = object_getClassName(*(id *)(a1 + 32));
          v32 = sel_getName(*(SEL *)(a1 + 40));
          v33 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112);
          *(_DWORD *)buf = 67110146;
          v41 = v30;
          v42 = 2082;
          v43 = v31;
          v44 = 2082;
          v45 = v32;
          v46 = 1024;
          v47 = 1151;
          v48 = 1024;
          v49 = v33;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Restart MT detection : %d", buf, 0x28u);
        }

        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NFPowerAssertion sharedPowerAssertion](NFPowerAssertion, "sharedPowerAssertion"));
        objc_msgSend(v34, "holdPowerAssertion:", CFSTR("NfcacdPLLUnlock"));

        v35 = dispatch_time(0, 5000000000);
        v36 = *(_QWORD *)(a1 + 32);
        v37 = *(NSObject **)(v36 + 16);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100250998;
        block[3] = &unk_1002E5C58;
        block[4] = v36;
        dispatch_after(v35, v37, block);
      }
    }
    else
    {
      v3 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v4 = NFLogGetLogger(v3);
      if (v4)
      {
        v5 = (void (*)(uint64_t, const char *, ...))v4;
        v6 = object_getClass(*(id *)(a1 + 32));
        v7 = class_isMetaClass(v6);
        v8 = object_getClassName(*(id *)(a1 + 32));
        v38 = sel_getName(*(SEL *)(a1 + 40));
        v9 = 45;
        if (v7)
          v9 = 43;
        v5(3, "%c[%{public}s %{public}s]:%i Max restarts reached", v9, v8, v38, 1139);
      }
      v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v11 = NFSharedLogGetLogger(v10);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v13))
          v14 = 43;
        else
          v14 = 45;
        v15 = object_getClassName(*(id *)(a1 + 32));
        v16 = sel_getName(*(SEL *)(a1 + 40));
        *(_DWORD *)buf = 67109890;
        v41 = v14;
        v42 = 2082;
        v43 = v15;
        v44 = 2082;
        v45 = v16;
        v46 = 1024;
        v47 = 1139;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Max restarts reached", buf, 0x22u);
      }

      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
      objc_msgSend(v17, "postNotificationName:object:userInfo:options:", CFSTR("com.apple.nfcacd.multitag.restart.error"), 0, 0, 3);

      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "sendSimpleEvent:", CFSTR("com.apple.nfcacd.multitag.restart.error"));
    }
  }
}

void sub_100250998(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "maybeStartNextSession");
  v1 = (id)objc_claimAutoreleasedReturnValue(+[NFPowerAssertion sharedPowerAssertion](NFPowerAssertion, "sharedPowerAssertion"));
  objc_msgSend(v1, "releasePowerAssertion:", CFSTR("NfcacdPLLUnlock"));

}

void sub_100250E08(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *specific;
  uint64_t Logger;
  void (*v6)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  objc_class *v15;
  int v16;
  const char *v17;
  const char *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, ...);
  objc_class *v25;
  _BOOL4 v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  objc_class *v31;
  int v32;
  const char *v33;
  const char *v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  void (*v38)(uint64_t, const char *, ...);
  objc_class *v39;
  _BOOL4 v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  objc_class *v46;
  int v47;
  const char *v48;
  const char *v49;
  const char *v50;
  void *v51;
  uint64_t v52;
  void (*v53)(uint64_t, const char *, ...);
  objc_class *v54;
  _BOOL4 v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  NSObject *v60;
  objc_class *v61;
  int v62;
  const char *v63;
  const char *v64;
  void *v65;
  uint64_t v66;
  void (*v67)(uint64_t, const char *, ...);
  objc_class *v68;
  _BOOL4 v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  objc_class *v74;
  int v75;
  const char *v76;
  const char *v77;
  void *v78;
  uint64_t v79;
  void (*v80)(uint64_t, const char *, ...);
  objc_class *v81;
  _BOOL4 v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  NSObject *v87;
  objc_class *v88;
  int v89;
  const char *v90;
  const char *v91;
  const char *v92;
  const char *v93;
  const char *v94;
  const char *v95;
  const char *v96;
  const char *v97;
  uint8_t buf[4];
  int v99;
  __int16 v100;
  const char *v101;
  __int16 v102;
  const char *v103;
  __int16 v104;
  int v105;
  __int16 v106;
  void *v107;

  v2 = NFSharedSignpostLog(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFCACD_TAGS_DETECTED", "", buf, 2u);
  }

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v6 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v11 = 45;
    if (isMetaClass)
      v11 = 43;
    v6(6, "%c[%{public}s %{public}s]:%i %{public}@", v11, ClassName, Name, 1179, *(_QWORD *)(a1 + 40));
  }
  v12 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v13 = NFSharedLogGetLogger(v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v15))
      v16 = 43;
    else
      v16 = 45;
    v17 = object_getClassName(*(id *)(a1 + 32));
    v18 = sel_getName(*(SEL *)(a1 + 48));
    v19 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 67110146;
    v99 = v16;
    v100 = 2082;
    v101 = v17;
    v102 = 2082;
    v103 = v18;
    v104 = 1024;
    v105 = 1179;
    v106 = 2114;
    v107 = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }

  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if (v20 && (objc_opt_respondsToSelector(v20, "handleRemoteTagsDetected:") & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "handleRemoteTagsDetected:", *(_QWORD *)(a1 + 40));
    return;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndex:", 0));
    v22 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v23 = NFLogGetLogger(v22);
    if (v23)
    {
      v24 = (void (*)(uint64_t, const char *, ...))v23;
      v25 = object_getClass(*(id *)(a1 + 32));
      v26 = class_isMetaClass(v25);
      v92 = object_getClassName(*(id *)(a1 + 32));
      v93 = sel_getName(*(SEL *)(a1 + 48));
      v27 = 45;
      if (v26)
        v27 = 43;
      v24(6, "%c[%{public}s %{public}s]:%i Connecting to tag; %{public}@", v27, v92, v93, 1185, v21);
    }
    v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v29 = NFSharedLogGetLogger(v28);
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v31 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v31))
        v32 = 43;
      else
        v32 = 45;
      v33 = object_getClassName(*(id *)(a1 + 32));
      v34 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      v99 = v32;
      v100 = 2082;
      v101 = v33;
      v102 = 2082;
      v103 = v34;
      v104 = 1024;
      v105 = 1185;
      v106 = 2114;
      v107 = v21;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Connecting to tag; %{public}@",
        buf,
        0x2Cu);
    }

    v35 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "connectTag:", v21);
    if (v35)
    {
      if (v35 != 51)
      {
        v78 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v79 = NFLogGetLogger(v78);
        if (v79)
        {
          v80 = (void (*)(uint64_t, const char *, ...))v79;
          v81 = object_getClass(*(id *)(a1 + 32));
          v82 = class_isMetaClass(v81);
          v83 = object_getClassName(*(id *)(a1 + 32));
          v97 = sel_getName(*(SEL *)(a1 + 48));
          v84 = 45;
          if (v82)
            v84 = 43;
          v80(6, "%c[%{public}s %{public}s]:%i Resuming discovery after failed connection", v84, v83, v97, 1192);
        }
        v85 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v86 = NFSharedLogGetLogger(v85);
        v87 = objc_claimAutoreleasedReturnValue(v86);
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          v88 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v88))
            v89 = 43;
          else
            v89 = 45;
          v90 = object_getClassName(*(id *)(a1 + 32));
          v91 = sel_getName(*(SEL *)(a1 + 48));
          *(_DWORD *)buf = 67109890;
          v99 = v89;
          v100 = 2082;
          v101 = v90;
          v102 = 2082;
          v103 = v91;
          v104 = 1024;
          v105 = 1192;
          _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Resuming discovery after failed connection", buf, 0x22u);
        }

        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "resumeDiscovery");
        goto LABEL_67;
      }
      v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v37 = NFLogGetLogger(v36);
      if (v37)
      {
        v38 = (void (*)(uint64_t, const char *, ...))v37;
        v39 = object_getClass(*(id *)(a1 + 32));
        v40 = class_isMetaClass(v39);
        v41 = object_getClassName(*(id *)(a1 + 32));
        v94 = sel_getName(*(SEL *)(a1 + 48));
        v42 = 45;
        if (v40)
          v42 = 43;
        v38(6, "%c[%{public}s %{public}s]:%i Restarting discovery after failed connection", v42, v41, v94, 1189);
      }
      v43 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v44 = NFSharedLogGetLogger(v43);
      v45 = objc_claimAutoreleasedReturnValue(v44);
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
LABEL_56:

        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "restartDiscovery");
LABEL_67:

        return;
      }
      v46 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v46))
        v47 = 43;
      else
        v47 = 45;
      v48 = object_getClassName(*(id *)(a1 + 32));
      v49 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v99 = v47;
      v100 = 2082;
      v101 = v48;
      v102 = 2082;
      v103 = v49;
      v104 = 1024;
      v105 = 1189;
      v50 = "%c[%{public}s %{public}s]:%i Restarting discovery after failed connection";
    }
    else
    {
      v51 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v52 = NFLogGetLogger(v51);
      if (v52)
      {
        v53 = (void (*)(uint64_t, const char *, ...))v52;
        v54 = object_getClass(*(id *)(a1 + 32));
        v55 = class_isMetaClass(v54);
        v56 = object_getClassName(*(id *)(a1 + 32));
        v95 = sel_getName(*(SEL *)(a1 + 48));
        v57 = 45;
        if (v55)
          v57 = 43;
        v53(6, "%c[%{public}s %{public}s]:%i Disconnecting with tag removal detection", v57, v56, v95, 1197);
      }
      v58 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v59 = NFSharedLogGetLogger(v58);
      v60 = objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        v61 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v61))
          v62 = 43;
        else
          v62 = 45;
        v63 = object_getClassName(*(id *)(a1 + 32));
        v64 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        v99 = v62;
        v100 = 2082;
        v101 = v63;
        v102 = 2082;
        v103 = v64;
        v104 = 1024;
        v105 = 1197;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Disconnecting with tag removal detection", buf, 0x22u);
      }

      if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "disconnectTag:tagRemovalDetect:", v21, 1))goto LABEL_67;
      v65 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v66 = NFLogGetLogger(v65);
      if (v66)
      {
        v67 = (void (*)(uint64_t, const char *, ...))v66;
        v68 = object_getClass(*(id *)(a1 + 32));
        v69 = class_isMetaClass(v68);
        v70 = object_getClassName(*(id *)(a1 + 32));
        v96 = sel_getName(*(SEL *)(a1 + 48));
        v71 = 45;
        if (v69)
          v71 = 43;
        v67(6, "%c[%{public}s %{public}s]:%i Restarting discovery after failed disconnection", v71, v70, v96, 1200);
      }
      v72 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v73 = NFSharedLogGetLogger(v72);
      v45 = objc_claimAutoreleasedReturnValue(v73);
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        goto LABEL_56;
      v74 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v74))
        v75 = 43;
      else
        v75 = 45;
      v76 = object_getClassName(*(id *)(a1 + 32));
      v77 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v99 = v75;
      v100 = 2082;
      v101 = v76;
      v102 = 2082;
      v103 = v77;
      v104 = 1024;
      v105 = 1200;
      v50 = "%c[%{public}s %{public}s]:%i Restarting discovery after failed disconnection";
    }
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v50, buf, 0x22u);
    goto LABEL_56;
  }
}

void sub_10025166C(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  _QWORD *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, ...);
  objc_class *v31;
  _BOOL4 v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  objc_class *v39;
  int v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void (*v47)(uint64_t, const char *, ...);
  objc_class *v48;
  _BOOL4 v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  objc_class *v55;
  int v56;
  const char *v57;
  const char *v58;
  void *v59;
  const char *v60;
  uint8_t buf[4];
  int v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  uint64_t v70;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 1211, *(_QWORD *)(a1 + 40));
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 48));
    v17 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 67110146;
    v62 = v14;
    v63 = 2082;
    v64 = v15;
    v65 = 2082;
    v66 = v16;
    v67 = 1024;
    v68 = 1211;
    v69 = 2114;
    v70 = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }

  v19 = NFSharedSignpostLog(v18);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_signpost_enabled(v20))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFCACD_MULTI_TAG_STATE_CHANGE", "", buf, 2u);
  }

  v21 = sub_1001F2AB0((uint64_t)NFFuryCALogger);
  v22 = (_QWORD *)objc_claimAutoreleasedReturnValue(v21);
  v23 = sub_1001F30A4(v22, *(void **)(a1 + 40), *(void **)(*(_QWORD *)(a1 + 32) + 152), *(unsigned __int8 *)(a1 + 56));
  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);

  if (!*(_BYTE *)(a1 + 56))
  {
    v25 = objc_msgSend(*(id *)(a1 + 40), "copy");
    v26 = *(_QWORD *)(a1 + 32);
    v27 = *(void **)(v26 + 152);
    *(_QWORD *)(v26 + 152) = v25;

  }
  v28 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v29 = NFLogGetLogger(v28);
  if (v29)
  {
    v30 = (void (*)(uint64_t, const char *, ...))v29;
    v31 = object_getClass(*(id *)(a1 + 32));
    v32 = class_isMetaClass(v31);
    v33 = object_getClassName(*(id *)(a1 + 32));
    v34 = sel_getName(*(SEL *)(a1 + 48));
    v35 = 45;
    if (v32)
      v35 = 43;
    v30(6, "%c[%{public}s %{public}s]:%i %{public}@", v35, v33, v34, 1221, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152));
  }
  v36 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v37 = NFSharedLogGetLogger(v36);
  v38 = objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    v39 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v39))
      v40 = 43;
    else
      v40 = 45;
    v41 = object_getClassName(*(id *)(a1 + 32));
    v42 = sel_getName(*(SEL *)(a1 + 48));
    v43 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152);
    *(_DWORD *)buf = 67110146;
    v62 = v40;
    v63 = 2082;
    v64 = v41;
    v65 = 2082;
    v66 = v42;
    v67 = 1024;
    v68 = 1221;
    v69 = 2114;
    v70 = v43;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }

  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
  objc_msgSend(v44, "postNotificationName:object:userInfo:options:", CFSTR("com.apple.nfcacd.multitag.state.change"), 0, v24, 3);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "sendSimpleEvent:", CFSTR("com.apple.nfcacd.multitag.state.change"));
  if (*(_BYTE *)(a1 + 56))
  {
    v45 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v46 = NFLogGetLogger(v45);
    if (v46)
    {
      v47 = (void (*)(uint64_t, const char *, ...))v46;
      v48 = object_getClass(*(id *)(a1 + 32));
      v49 = class_isMetaClass(v48);
      v50 = object_getClassName(*(id *)(a1 + 32));
      v60 = sel_getName(*(SEL *)(a1 + 48));
      v51 = 45;
      if (v49)
        v51 = 43;
      v47(3, "%c[%{public}s %{public}s]:%i RF Error seen during multitag scan", v51, v50, v60, 1229);
    }
    v52 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v53 = NFSharedLogGetLogger(v52);
    v54 = objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      v55 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v55))
        v56 = 43;
      else
        v56 = 45;
      v57 = object_getClassName(*(id *)(a1 + 32));
      v58 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      v62 = v56;
      v63 = 2082;
      v64 = v57;
      v65 = 2082;
      v66 = v58;
      v67 = 1024;
      v68 = 1229;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i RF Error seen during multitag scan", buf, 0x22u);
    }

    v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
    objc_msgSend(v59, "postNotificationName:object:userInfo:options:", CFSTR("com.apple.nfcacd.multitag.state.change.rfError"), 0, 0, 3);

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "sendSimpleEvent:", CFSTR("com.apple.nfcacd.multitag.state.change.rfError"));
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) = 0;

}

void sub_1002528A8(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  uint64_t v4;
  void *specific;
  uint64_t Logger;
  void (*v7)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  objc_class *v16;
  int v17;
  const char *v18;
  const char *v19;
  int v20;
  dispatch_time_t v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  void *v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  objc_class *v28;
  _BOOL4 v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  objc_class *v34;
  int v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  const char *v49;
  const char *v50;
  _QWORD block[5];
  NSErrorUserInfoKey v52;
  void *v53;
  NSErrorUserInfoKey v54;
  void *v55;
  uint8_t buf[4];
  int v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  int v63;
  __int16 v64;
  id v65;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "openSession:", CFSTR("Delayed Sleep"));
  if (v2 == (id)1)
  {
    v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "triggerDelayedWake:", *(unsigned __int8 *)(a1 + 56));
    v4 = *(_QWORD *)(a1 + 40);
    if ((v3 & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD))(v4 + 16))(*(_QWORD *)(a1 + 40), 0);
      specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      Logger = NFLogGetLogger(specific);
      if (Logger)
      {
        v7 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(*(id *)(a1 + 32));
        isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 48));
        v12 = 45;
        if (isMetaClass)
          v12 = 43;
        v7(6, "%c[%{public}s %{public}s]:%i Delaying session close for %d seconds", v12, ClassName, Name, 1422, *(unsigned __int8 *)(a1 + 56) + 1);
      }
      v13 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v14 = NFSharedLogGetLogger(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v16))
          v17 = 43;
        else
          v17 = 45;
        v18 = object_getClassName(*(id *)(a1 + 32));
        v19 = sel_getName(*(SEL *)(a1 + 48));
        v20 = *(unsigned __int8 *)(a1 + 56) + 1;
        *(_DWORD *)buf = 67110146;
        v57 = v17;
        v58 = 2082;
        v59 = v18;
        v60 = 2082;
        v61 = v19;
        v62 = 1024;
        v63 = 1422;
        v64 = 1024;
        LODWORD(v65) = v20;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Delaying session close for %d seconds", buf, 0x28u);
      }

      v21 = dispatch_time(0, 1000000000 * *(unsigned __int8 *)(a1 + 56) + 1000000000);
      v22 = *(_QWORD *)(a1 + 32);
      v23 = *(NSObject **)(v22 + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100252D84;
      block[3] = &unk_1002E5C58;
      block[4] = v22;
      dispatch_after(v21, v23, block);
    }
    else
    {
      v44 = objc_alloc((Class)NSError);
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
      v52 = NSLocalizedDescriptionKey;
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
      v53 = v46;
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1));
      v48 = objc_msgSend(v44, "initWithDomain:code:userInfo:", v45, 15, v47);
      (*(void (**)(uint64_t, id))(v4 + 16))(v4, v48);

      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "closeSession:", CFSTR("Delayed Sleep"));
    }
  }
  else
  {
    v24 = v2;
    v25 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v26 = NFLogGetLogger(v25);
    if (v26)
    {
      v27 = (void (*)(uint64_t, const char *, ...))v26;
      v28 = object_getClass(*(id *)(a1 + 32));
      v29 = class_isMetaClass(v28);
      v49 = object_getClassName(*(id *)(a1 + 32));
      v50 = sel_getName(*(SEL *)(a1 + 48));
      v30 = 45;
      if (v29)
        v30 = 43;
      v27(3, "%c[%{public}s %{public}s]:%i Failed to open session; hwState=%lu", v30, v49, v50, 1407, v24);
    }
    v31 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v32 = NFSharedLogGetLogger(v31);
    v33 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v34 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v34))
        v35 = 43;
      else
        v35 = 45;
      v36 = object_getClassName(*(id *)(a1 + 32));
      v37 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      v57 = v35;
      v58 = 2082;
      v59 = v36;
      v60 = 2082;
      v61 = v37;
      v62 = 1024;
      v63 = 1407;
      v64 = 2048;
      v65 = v24;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session; hwState=%lu",
        buf,
        0x2Cu);
    }

    v38 = *(_QWORD *)(a1 + 40);
    v39 = objc_alloc((Class)NSError);
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nfcd"));
    v54 = NSLocalizedDescriptionKey;
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Stack Error"));
    v55 = v41;
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v55, &v54, 1));
    v43 = objc_msgSend(v39, "initWithDomain:code:userInfo:", v40, 15, v42);
    (*(void (**)(uint64_t, id))(v38 + 16))(v38, v43);

  }
}

id sub_100252D84(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "closeSession:", CFSTR("Delayed Sleep"));
}

id sub_100252E40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_sync_pushSignedRF:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_100252F0C(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  int v13;
  const char *v14;
  const char *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, ...);
  objc_class *v23;
  _BOOL4 v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  objc_class *v30;
  int v31;
  const char *v32;
  const char *v33;
  const char *Name;
  const char *v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    v8 = 45;
    if (isMetaClass)
      v8 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i Disabling all routing to change RF settings", v8, ClassName, Name, 1442);
  }
  v9 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v10 = NFSharedLogGetLogger(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12))
      v13 = 43;
    else
      v13 = 45;
    v14 = object_getClassName(*(id *)(a1 + 32));
    v15 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v38 = v13;
    v39 = 2082;
    v40 = v14;
    v41 = 2082;
    v42 = v15;
    v43 = 1024;
    v44 = 1442;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Disabling all routing to change RF settings", buf, 0x22u);
  }

  v16 = *(void **)(*(_QWORD *)(a1 + 32) + 88);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NFRoutingConfig none](NFRoutingConfig, "none"));
  v18 = objc_msgSend(v16, "setRouting:", v17);

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "pushSignedRF:", *(_QWORD *)(a1 + 40)));
  v20 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v21 = NFLogGetLogger(v20);
  if (v21)
  {
    v22 = (void (*)(uint64_t, const char *, ...))v21;
    v23 = object_getClass(*(id *)(a1 + 32));
    v24 = class_isMetaClass(v23);
    v25 = object_getClassName(*(id *)(a1 + 32));
    v36 = sel_getName(*(SEL *)(a1 + 48));
    v26 = 45;
    if (v24)
      v26 = 43;
    v22(6, "%c[%{public}s %{public}s]:%i Restoring routing", v26, v25, v36, 1448);
  }
  v27 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v28 = NFSharedLogGetLogger(v27);
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    v30 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v30))
      v31 = 43;
    else
      v31 = 45;
    v32 = object_getClassName(*(id *)(a1 + 32));
    v33 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    v38 = v31;
    v39 = 2082;
    v40 = v32;
    v41 = 2082;
    v42 = v33;
    v43 = 1024;
    v44 = 1448;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Restoring routing", buf, 0x22u);
  }

  objc_msgSend(*(id *)(a1 + 32), "maybeStartNextSession");
  return v19;
}

void sub_100253248(uint64_t a1)
{
  void *specific;
  uint64_t Logger;
  void (*v4)(uint64_t, const char *, ...);
  objc_class *Class;
  _BOOL4 isMetaClass;
  const char *ClassName;
  const char *Name;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  objc_class *v13;
  int v14;
  const char *v15;
  const char *v16;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, ...);
  objc_class *v22;
  _BOOL4 v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  objc_class *v29;
  int v30;
  const char *v31;
  const char *v32;
  const char *v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;

  specific = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  Logger = NFLogGetLogger(specific);
  if (Logger)
  {
    v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    v9 = 45;
    if (isMetaClass)
      v9 = 43;
    v4(6, "%c[%{public}s %{public}s]:%i %d", v9, ClassName, Name, 1460, *(unsigned __int8 *)(a1 + 48));
  }
  v10 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  v11 = NFSharedLogGetLogger(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v13))
      v14 = 43;
    else
      v14 = 45;
    v15 = object_getClassName(*(id *)(a1 + 32));
    v16 = sel_getName(*(SEL *)(a1 + 40));
    v17 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    v35 = v14;
    v36 = 2082;
    v37 = v15;
    v38 = 2082;
    v39 = v16;
    v40 = 1024;
    v41 = 1460;
    v42 = 1024;
    v43 = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %d", buf, 0x28u);
  }

  v18 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v18 + 106) && *(_QWORD *)(v18 + 128) || *(_BYTE *)(v18 + 105) && *(_QWORD *)(v18 + 120))
  {
    objc_msgSend((id)v18, "maybeStartNextSession");
  }
  else
  {
    v19 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v20 = NFLogGetLogger(v19);
    if (v20)
    {
      v21 = (void (*)(uint64_t, const char *, ...))v20;
      v22 = object_getClass(*(id *)(a1 + 32));
      v23 = class_isMetaClass(v22);
      v24 = object_getClassName(*(id *)(a1 + 32));
      v33 = sel_getName(*(SEL *)(a1 + 40));
      v25 = 45;
      if (v23)
        v25 = 43;
      v21(5, "%c[%{public}s %{public}s]:%i MultiTag or LPCD not setup yet", v25, v24, v33, 1467);
    }
    v26 = dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v27 = NFSharedLogGetLogger(v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      v29 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v29))
        v30 = 43;
      else
        v30 = 45;
      v31 = object_getClassName(*(id *)(a1 + 32));
      v32 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      v35 = v30;
      v36 = 2082;
      v37 = v31;
      v38 = 2082;
      v39 = v32;
      v40 = 1024;
      v41 = 1467;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i MultiTag or LPCD not setup yet", buf, 0x22u);
    }

  }
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_100254B98(double a1)
{
  dlopen("/System/Library/PrivateFrameworks/SEService.framework/SEService", 0);
  atomic_store(1u, (unsigned int *)&unk_100327E10);
  return a1;
}

double sub_100254C38(double result)
{
  if (!atomic_load((unsigned int *)&unk_100327E10))
    return sub_100254B98(result);
  return result;
}

double sub_100254C5C(double result)
{
  if (!atomic_load((unsigned int *)&unk_100327E10))
    return sub_100254B98(result);
  return result;
}

id objc_msgSend_AIDAllowList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "AIDAllowList");
}

id objc_msgSend_DERItem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "DERItem");
}

id objc_msgSend_Device(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Device");
}

id objc_msgSend_GetAppletProperties_withPackage_withModule_withTransceiver_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "GetAppletProperties:withPackage:withModule:withTransceiver:withError:");
}

id objc_msgSend_IDm(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "IDm");
}

id objc_msgSend_NFCTag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NFCTag");
}

id objc_msgSend_NF_arrayForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_arrayForKey:");
}

id objc_msgSend_NF_asHexString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_asHexString");
}

id objc_msgSend_NF_clearFDPresentmentIntentSuppressionHolder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_clearFDPresentmentIntentSuppressionHolder");
}

id objc_msgSend_NF_clearPresentmentIntentSuppressionHolder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_clearPresentmentIntentSuppressionHolder");
}

id objc_msgSend_NF_dataForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_dataForKey:");
}

id objc_msgSend_NF_dataWithHexString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_dataWithHexString:");
}

id objc_msgSend_NF_fdPresentmentIntentSuppressionHolder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_fdPresentmentIntentSuppressionHolder");
}

id objc_msgSend_NF_isZeroed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_isZeroed");
}

id objc_msgSend_NF_numberForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_numberForKey:");
}

id objc_msgSend_NF_presentmentIntentSuppressionHolder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_presentmentIntentSuppressionHolder");
}

id objc_msgSend_NF_setFDPresentmentIntentSuppressionHolder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_setFDPresentmentIntentSuppressionHolder");
}

id objc_msgSend_NF_setPresentmentIntentSuppressionHolder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_setPresentmentIntentSuppressionHolder");
}

id objc_msgSend_NF_stringForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_stringForKey:");
}

id objc_msgSend_NF_toUint64_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_toUint64:");
}

id objc_msgSend_NF_userInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_userInfo");
}

id objc_msgSend_NF_whitelistChecker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NF_whitelistChecker");
}

id objc_msgSend_OSMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "OSMode");
}

id objc_msgSend_PMm(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "PMm");
}

id objc_msgSend_PerformRecovery_logSink_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "PerformRecovery:logSink:");
}

id objc_msgSend_ROMVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ROMVersion");
}

id objc_msgSend_SystemCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SystemCode");
}

id objc_msgSend_TLVSsWithBytes_length_requireDefiniteEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TLVSsWithBytes:length:requireDefiniteEncoding:");
}

id objc_msgSend_TLVWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TLVWithData:");
}

id objc_msgSend_TLVWithTag_children_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TLVWithTag:children:");
}

id objc_msgSend_TLVWithTag_fromData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TLVWithTag:fromData:");
}

id objc_msgSend_TLVWithTag_unsignedChar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TLVWithTag:unsignedChar:");
}

id objc_msgSend_TLVWithTag_unsignedLongValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TLVWithTag:unsignedLongValue:");
}

id objc_msgSend_TLVWithTag_unsignedShort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TLVWithTag:unsignedShort:");
}

id objc_msgSend_TLVWithTag_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TLVWithTag:value:");
}

id objc_msgSend_TLVsWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TLVsWithData:");
}

id objc_msgSend_TLVsWithData_requireDefiniteEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TLVsWithData:requireDefiniteEncoding:");
}

id objc_msgSend_UID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UID");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URL");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_Wireless(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Wireless");
}

id objc_msgSend__RequestService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_RequestService:");
}

id objc_msgSend__RequestService_forSystemCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_RequestService:forSystemCode:");
}

id objc_msgSend__activateAppOnConnect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_activateAppOnConnect:");
}

id objc_msgSend__activateKeys_aidsAndKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_activateKeys:aidsAndKeys:");
}

id objc_msgSend__activateKeys_forIdentifiers_onApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_activateKeys:forIdentifiers:onApplet:");
}

id objc_msgSend__activateSecureElementWrapper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_activateSecureElementWrapper:");
}

id objc_msgSend__activateUIControllerWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_activateUIControllerWithCompletion:");
}

id objc_msgSend__allOperationsSince_referenceTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_allOperationsSince:referenceTime:");
}

id objc_msgSend__asyncReadWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_asyncReadWithCompletion:");
}

id objc_msgSend__asynchronousRemoteProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_asynchronousRemoteProxyWithErrorHandler:");
}

id objc_msgSend__attemptNFCCRecovery(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_attemptNFCCRecovery");
}

id objc_msgSend__authorize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_authorize:");
}

id objc_msgSend__buildTapToRadarURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_buildTapToRadarURL");
}

id objc_msgSend__cardRemovalDetect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cardRemovalDetect:");
}

id objc_msgSend__checkActiveAppletCompatibilityWithField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_checkActiveAppletCompatibilityWithField:");
}

id objc_msgSend__checkActiveVASCompatibilityWithField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_checkActiveVASCompatibilityWithField:");
}

id objc_msgSend__checkDeferredActiveAppletCompatibilityWithField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_checkDeferredActiveAppletCompatibilityWithField:");
}

id objc_msgSend__checkFailForwardState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_checkFailForwardState");
}

id objc_msgSend__cleanupVAS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cleanupVAS");
}

id objc_msgSend__closeDriverAndLeaveHWEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_closeDriverAndLeaveHWEnabled:");
}

id objc_msgSend__componentModeToSERouting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_componentModeToSERouting:");
}

id objc_msgSend__configureEmulationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_configureEmulationType:");
}

id objc_msgSend__configureEmulationType_routingConfigWhenEmulationOff_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_configureEmulationType:routingConfigWhenEmulationOff:");
}

id objc_msgSend__configureInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_configureInterface:");
}

id objc_msgSend__creationDateString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_creationDateString");
}

id objc_msgSend__crsGetPersoState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_crsGetPersoState:");
}

id objc_msgSend__crsGetSharingRequest_signature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_crsGetSharingRequest:signature:");
}

id objc_msgSend__crsSetSharingResult_signature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_crsSetSharingResult:signature:");
}

id objc_msgSend__deauthorize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_deauthorize");
}

id objc_msgSend__dequeueSession_startNextSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dequeueSession:startNextSession:");
}

id objc_msgSend__didLoseTarget_suspendAssertion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_didLoseTarget:suspendAssertion:");
}

id objc_msgSend__disconnectWithCardRemoval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_disconnectWithCardRemoval:");
}

id objc_msgSend__dumpLPEMAppletLogs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dumpLPEMAppletLogs");
}

id objc_msgSend__executeWithDriverSessionSync_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_executeWithDriverSessionSync:block:");
}

id objc_msgSend__expressModeRequiredForApplet_keySet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_expressModeRequiredForApplet:keySet:");
}

id objc_msgSend__findAppFromSet_tag_foundApp_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_findAppFromSet:tag:foundApp:outError:");
}

id objc_msgSend__fireFelicaTransactionEndEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_fireFelicaTransactionEndEvent");
}

id objc_msgSend__fireFelicaTransactionStartEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_fireFelicaTransactionStartEvent");
}

id objc_msgSend__getActiveAppletEmulationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getActiveAppletEmulationType:");
}

id objc_msgSend__getAllApplets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getAllApplets:");
}

id objc_msgSend__getAppletsForAids_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getAppletsForAids:");
}

id objc_msgSend__getApplicationNameFromFciTemplate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getApplicationNameFromFciTemplate:");
}

id objc_msgSend__getDefaults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getDefaults");
}

id objc_msgSend__getDriverConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getDriverConfig:");
}

id objc_msgSend__getExtendedIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getExtendedIdentifier:");
}

id objc_msgSend__getFCITemplate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getFCITemplate:");
}

id objc_msgSend__getFilterWithType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getFilterWithType:");
}

id objc_msgSend__getHandleForTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getHandleForTag:");
}

id objc_msgSend__getIDMFromTag_systemCode_outIdm_outPmm_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getIDMFromTag:systemCode:outIdm:outPmm:");
}

id objc_msgSend__getInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getInfo");
}

id objc_msgSend__getInstance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getInstance");
}

id objc_msgSend__getKeyVersionForNodes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getKeyVersionForNodes:");
}

id objc_msgSend__getLastConnectionTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getLastConnectionTime:");
}

id objc_msgSend__getLastDisconnectionTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getLastDisconnectionTime:");
}

id objc_msgSend__getMaxRFTimeLimitOverride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getMaxRFTimeLimitOverride");
}

id objc_msgSend__getNodeList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getNodeList");
}

id objc_msgSend__getReaderOnTime_andOff_since_referenceTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getReaderOnTime:andOff:since:referenceTime:");
}

id objc_msgSend__getRelatedGroupMembersForActiveApplet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getRelatedGroupMembersForActiveApplet");
}

id objc_msgSend__getRestoreStateAndRunBlockIfUnlocked_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getRestoreStateAndRunBlockIfUnlocked:");
}

id objc_msgSend__getSecureElementForAID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getSecureElementForAID:");
}

id objc_msgSend__getSecureElementWrapperForApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getSecureElementWrapperForApplet:");
}

id objc_msgSend__getSecureElementWrapperForSEID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getSecureElementWrapperForSEID:");
}

id objc_msgSend__getSystemCodeListFromTag_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getSystemCodeListFromTag:outError:");
}

id objc_msgSend__getSystemInfo_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getSystemInfo:outError:");
}

id objc_msgSend__getTagNotificationConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getTagNotificationConfig");
}

id objc_msgSend__getTagTypeFromTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getTagTypeFromTag:");
}

id objc_msgSend__handleOneAPDU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleOneAPDU:");
}

id objc_msgSend__handleReaderBurnoutProtectionDebounceTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleReaderBurnoutProtectionDebounceTimer");
}

id objc_msgSend__handleReaderBurnoutProtectionTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleReaderBurnoutProtectionTimer");
}

id objc_msgSend__hceComplete(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_hceComplete");
}

id objc_msgSend__initCategoryWithType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initCategoryWithType:");
}

id objc_msgSend__initManagedBySP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initManagedBySP");
}

id objc_msgSend__initPaymentAIDList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initPaymentAIDList");
}

id objc_msgSend__initialize7816AidList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initialize7816AidList:");
}

id objc_msgSend__internalCleanup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_internalCleanup");
}

id objc_msgSend__internalTagFromMultiTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_internalTagFromMultiTag:");
}

id objc_msgSend__invalidateStepupController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_invalidateStepupController");
}

id objc_msgSend__invalidateUIController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_invalidateUIController");
}

id objc_msgSend__isAIDStringValid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isAIDStringValid:");
}

id objc_msgSend__isClosed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isClosed");
}

id objc_msgSend__isCoreNFCSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isCoreNFCSession");
}

id objc_msgSend__isEMVPolling(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isEMVPolling");
}

id objc_msgSend__isFelicaPollingCommand_systemCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isFelicaPollingCommand:systemCode:");
}

id objc_msgSend__isField_compatibleWithApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isField:compatibleWithApplet:");
}

id objc_msgSend__isPayloadConnectionHandover_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isPayloadConnectionHandover:");
}

id objc_msgSend__loadHW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_loadHW");
}

id objc_msgSend__loadHWInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_loadHWInfo");
}

id objc_msgSend__loadService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_loadService");
}

id objc_msgSend__ntag5DriverRateFromTagRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_ntag5DriverRateFromTagRate:");
}

id objc_msgSend__openDriver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_openDriver:");
}

id objc_msgSend__parseCHTerminalTypeData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_parseCHTerminalTypeData:");
}

id objc_msgSend__performAuthAndStartCardEmulation_fromDeferred_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_performAuthAndStartCardEmulation:fromDeferred:completion:");
}

id objc_msgSend__performDeferredAuthIfNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_performDeferredAuthIfNeeded:");
}

id objc_msgSend__performType4AppSelect_tag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_performType4AppSelect:tag:");
}

id objc_msgSend__powerAssertionIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_powerAssertionIdentifier");
}

id objc_msgSend__printHceCurrentState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_printHceCurrentState");
}

id objc_msgSend__processCommandDataProtocol_response_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processCommandDataProtocol:response:");
}

id objc_msgSend__processFelicaTagForCoreNFC_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processFelicaTagForCoreNFC:outError:");
}

id objc_msgSend__processISO14443TagForCoreNFC_tagIsConnected_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processISO14443TagForCoreNFC:tagIsConnected:outError:");
}

id objc_msgSend__processISO15693TagForCoreNFC_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processISO15693TagForCoreNFC:outError:");
}

id objc_msgSend__processIso14Tag_connected_appFound_updatedTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processIso14Tag:connected:appFound:updatedTag:");
}

id objc_msgSend__processMifareTag_connected_isMifare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processMifareTag:connected:isMifare:");
}

id objc_msgSend__processNDEFTagForCoreNFC_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processNDEFTagForCoreNFC:outError:");
}

id objc_msgSend__processRawTagsForCoreNFC_requireDiscoveryRestart_supportedTags_caEvents_outError_outConnectedTagIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processRawTagsForCoreNFC:requireDiscoveryRestart:supportedTags:caEvents:outError:outConnectedTagIndex:");
}

id objc_msgSend__processRawTagsForInternalSession_supportedTags_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processRawTagsForInternalSession:supportedTags:outError:");
}

id objc_msgSend__processRawTagsForNDEF_ndefMessages_supportedTags_caEvents_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processRawTagsForNDEF:ndefMessages:supportedTags:caEvents:outError:");
}

id objc_msgSend__purgeOldOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_purgeOldOperations");
}

id objc_msgSend__queryMifareType_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_queryMifareType:outError:");
}

id objc_msgSend__queueNewSession_onConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_queueNewSession:onConnection:");
}

id objc_msgSend__readDriverSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_readDriverSettings");
}

id objc_msgSend__readEFCardAccessFromTag_buffer_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_readEFCardAccessFromTag:buffer:outError:");
}

id objc_msgSend__readFromTag_offset_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_readFromTag:offset:outError:");
}

id objc_msgSend__readNdefMessageFromTag_rawLength_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_readNdefMessageFromTag:rawLength:error:");
}

id objc_msgSend__readTypeATagId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_readTypeATagId:");
}

id objc_msgSend__readTypeVTagId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_readTypeVTagId:");
}

id objc_msgSend__readerModeStoppedShouldCooloffRun_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_readerModeStoppedShouldCooloffRun:");
}

id objc_msgSend__recoveryFailed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_recoveryFailed");
}

id objc_msgSend__recoverySucceeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_recoverySucceeded");
}

id objc_msgSend__refreshNdefTagConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_refreshNdefTagConnection");
}

id objc_msgSend__refreshTagInfo_update_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_refreshTagInfo:update:");
}

id objc_msgSend__requestAutoBugCapture_withSubType_withSubTypeContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_requestAutoBugCapture:withSubType:withSubTypeContext:");
}

id objc_msgSend__requiresDeferredActivation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_requiresDeferredActivation:");
}

id objc_msgSend__requiresMifareUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_requiresMifareUpdate:");
}

id objc_msgSend__requiresReaderModeProtection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_requiresReaderModeProtection");
}

id objc_msgSend__requiresThermalModeProtection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_requiresThermalModeProtection");
}

id objc_msgSend__requiresTypeFUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_requiresTypeFUpdate:");
}

id objc_msgSend__resetVolatileConfigOnApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_resetVolatileConfigOnApplet:");
}

id objc_msgSend__restartDiscoveryWithReconfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_restartDiscoveryWithReconfig:");
}

id objc_msgSend__routingConfigWithECPBroadcastInHCE(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_routingConfigWithECPBroadcastInHCE");
}

id objc_msgSend__selectEF_p2_tag_outResponse_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_selectEF:p2:tag:outResponse:outError:");
}

id objc_msgSend__selectEF_tag_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_selectEF:tag:outError:");
}

id objc_msgSend__selectFromTag_aid_resolvedAid_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_selectFromTag:aid:resolvedAid:error:");
}

id objc_msgSend__selectMFFromTag_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_selectMFFromTag:outError:");
}

id objc_msgSend__selectTag_aid_p1_p2_shortLe_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_selectTag:aid:p1:p2:shortLe:error:");
}

id objc_msgSend__send7816Command_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_send7816Command:error:");
}

id objc_msgSend__sendErrorStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_sendErrorStatus:");
}

id objc_msgSend__setActiveSecureElementWrapper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setActiveSecureElementWrapper:");
}

id objc_msgSend__setAtqa_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setAtqa:");
}

id objc_msgSend__setFileNameLocalizationEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setFileNameLocalizationEnabled:");
}

id objc_msgSend__setHeadlessModeFeature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setHeadlessModeFeature:");
}

id objc_msgSend__setHistoricalBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setHistoricalBytes:");
}

id objc_msgSend__setIDm_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setIDm:");
}

id objc_msgSend__setIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setIdentifier:");
}

id objc_msgSend__setIsInRestrictedMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setIsInRestrictedMode:");
}

id objc_msgSend__setMultiTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setMultiTag:");
}

id objc_msgSend__setNDEFAvailability_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setNDEFAvailability:");
}

id objc_msgSend__setNDEFContainerSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setNDEFContainerSize:");
}

id objc_msgSend__setNDEFMessageSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setNDEFMessageSize:");
}

id objc_msgSend__setPMm_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setPMm:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__setReaderECP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setReaderECP");
}

id objc_msgSend__setSFGI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setSFGI:");
}

id objc_msgSend__setSak_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setSak:");
}

id objc_msgSend__setSilentType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setSilentType:");
}

id objc_msgSend__setSystemCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setSystemCode:");
}

id objc_msgSend__setSystemCodes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setSystemCodes:");
}

id objc_msgSend__setTechnology_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setTechnology:");
}

id objc_msgSend__setType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setType:");
}

id objc_msgSend__setUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setUID:");
}

id objc_msgSend__shouldWalletIntentSessionIgnoreField_session_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_shouldWalletIntentSessionIgnoreField:session:");
}

id objc_msgSend__startAfterRecovery_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_startAfterRecovery:");
}

id objc_msgSend__startFieldDetectAndKeepSEOn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_startFieldDetectAndKeepSEOn:");
}

id objc_msgSend__startSEProxyListener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_startSEProxyListener");
}

id objc_msgSend__startTNEPDeviceWithServices_optionalRecords_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_startTNEPDeviceWithServices:optionalRecords:callback:");
}

id objc_msgSend__startTNEPReaderWithCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_startTNEPReaderWithCallback:");
}

id objc_msgSend__storeFailForwardRecovery_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_storeFailForwardRecovery:");
}

id objc_msgSend__switchToBestGroupMemberOfHead_forField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_switchToBestGroupMemberOfHead:forField:");
}

id objc_msgSend__syncResumeSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_syncResumeSession:");
}

id objc_msgSend__syncResumeSession_field_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_syncResumeSession:field:");
}

id objc_msgSend__syncStartAssertionTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_syncStartAssertionTimer:");
}

id objc_msgSend__sync_startDeferredCardEmulationWithAuthorization_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_sync_startDeferredCardEmulationWithAuthorization:completion:");
}

id objc_msgSend__synchronousRemoteProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_synchronousRemoteProxyWithErrorHandler:");
}

id objc_msgSend__tagDetectedWithDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_tagDetectedWithDate:");
}

id objc_msgSend__tagRemovalDetect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_tagRemovalDetect:");
}

id objc_msgSend__triggerProvisioningBugCatpture_response_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_triggerProvisioningBugCatpture:response:");
}

id objc_msgSend__typeADriverRateFromTagRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_typeADriverRateFromTagRate:");
}

id objc_msgSend__unloadService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_unloadService");
}

id objc_msgSend__updateAllPowerCounters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_updateAllPowerCounters");
}

id objc_msgSend__updateFelicaTagInfo_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_updateFelicaTagInfo:outError:");
}

id objc_msgSend__updateMifareTagInfo_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_updateMifareTagInfo:outError:");
}

id objc_msgSend__updateReaderSettingsBasedOnConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_updateReaderSettingsBasedOnConfig:");
}

id objc_msgSend__validateAPDU_outCheckFciResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_validateAPDU:outCheckFciResponse:");
}

id objc_msgSend__validateFelicaCommand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_validateFelicaCommand:");
}

id objc_msgSend__validateISO15693Packet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_validateISO15693Packet:");
}

id objc_msgSend__validateMifareAPDU_response_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_validateMifareAPDU:response:");
}

id objc_msgSend__validateSessionRequest_withConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_validateSessionRequest:withConnection:");
}

id objc_msgSend__validateStartStopSequence(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_validateStartStopSequence");
}

id objc_msgSend__wasActiveTooLong(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_wasActiveTooLong");
}

id objc_msgSend__writeSMCMultiTagEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_writeSMCMultiTagEnabled:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_accessoryMultiTag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessoryMultiTag");
}

id objc_msgSend_accessoryReaderWithLPCD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessoryReaderWithLPCD");
}

id objc_msgSend_accessoryReaderWithPolling_lpcd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessoryReaderWithPolling:lpcd:");
}

id objc_msgSend_acknowledgePowerBudget_forClientId_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acknowledgePowerBudget:forClientId:error:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activate");
}

id objc_msgSend_activateUIControllerWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateUIControllerWithCompletion:");
}

id objc_msgSend_activeApplet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeApplet");
}

id objc_msgSend_activeAppletGroupMembers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeAppletGroupMembers");
}

id objc_msgSend_activeKeyIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeKeyIdentifiers");
}

id objc_msgSend_activeRouting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeRouting");
}

id objc_msgSend_activityStoppedWithLevel_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityStoppedWithLevel:options:error:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addFieldDetectSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addFieldDetectSession:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addPersistentFieldObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPersistentFieldObserver:");
}

id objc_msgSend_addRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRecord:");
}

id objc_msgSend_addRecordArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRecordArray:");
}

id objc_msgSend_addStateInfo_appletAID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addStateInfo:appletAID:");
}

id objc_msgSend_admissionCheckWithLevel_options_error_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "admissionCheckWithLevel:options:error:handler:");
}

id objc_msgSend_aid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aid");
}

id objc_msgSend_aidListForPrinting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aidListForPrinting:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allSystemCodes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allSystemCodes");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allValues");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allocateSlot_authorizingUser_authorizingUserToken_outToken_outWriteCount_appletResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocateSlot:authorizingUser:authorizingUserToken:outToken:outWriteCount:appletResult:");
}

id objc_msgSend_allowBackgroundedSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowBackgroundedSession");
}

id objc_msgSend_allowSleep(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowSleep");
}

id objc_msgSend_allowTransactionsInWiredMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowTransactionsInWiredMode");
}

id objc_msgSend_allowlistChecker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowlistChecker");
}

id objc_msgSend_allowsBackgroundMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowsBackgroundMode");
}

id objc_msgSend_alternateDSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "alternateDSID");
}

id objc_msgSend_appWithAid_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appWithAid:type:");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendExpectedLength_usingExtendedLength_toAPDU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendExpectedLength:usingExtendedLength:toAPDU:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appleTransactionHash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appleTransactionHash");
}

id objc_msgSend_applet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applet");
}

id objc_msgSend_appletCacheUpdated_serialNumber_isdSequenceCounter_transceiver_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appletCacheUpdated:serialNumber:isdSequenceCounter:transceiver:error:");
}

id objc_msgSend_appletForIdentifier_filtered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appletForIdentifier:filtered:");
}

id objc_msgSend_appletIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appletIdentifier");
}

id objc_msgSend_appletWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appletWithIdentifier:");
}

id objc_msgSend_applets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applets");
}

id objc_msgSend_applicationIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationIdentifier");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayConfigFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayConfigFromDictionary:");
}

id objc_msgSend_arrayForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayForKey:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_asData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asData");
}

id objc_msgSend_asDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asDictionary");
}

id objc_msgSend_asMutableData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asMutableData");
}

id objc_msgSend_asXPCObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asXPCObject");
}

id objc_msgSend_assert_isFirst_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assert:isFirst:");
}

id objc_msgSend_assertionHolders(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assertionHolders");
}

id objc_msgSend_assertionTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assertionTime");
}

id objc_msgSend_assertionType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assertionType");
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "auditToken");
}

id objc_msgSend_authTransientConfigurable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authTransientConfigurable");
}

id objc_msgSend_authTransientSupport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authTransientSupport");
}

id objc_msgSend_authorize_withToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authorize:withToken:");
}

id objc_msgSend_authorizeUpdate_slotIndex_userToken_outWriteCount_appletResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authorizeUpdate:slotIndex:userToken:outWriteCount:appletResult:");
}

id objc_msgSend_background(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "background");
}

id objc_msgSend_backgroundTagReadCustomECP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundTagReadCustomECP");
}

id objc_msgSend_backgroundTagReadEcpOption(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundTagReadEcpOption");
}

id objc_msgSend_basebandStateChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "basebandStateChanged:");
}

id objc_msgSend_bgTagReadingAssertion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bgTagReadingAssertion");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_broadwayPresentCardWithCode_options_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "broadwayPresentCardWithCode:options:completion:");
}

id objc_msgSend_buildAPDUHeaderWithClass_instruction_p1_p2_len_useExtendedLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildAPDUHeaderWithClass:instruction:p1:p2:len:useExtendedLength:");
}

id objc_msgSend_bundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundle");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytes");
}

id objc_msgSend_caLogger(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "caLogger");
}

id objc_msgSend_cachedAppletUpdateCounter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedAppletUpdateCounter");
}

id objc_msgSend_cachedAppletsUnfiltered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedAppletsUnfiltered");
}

id objc_msgSend_cachedBeforeRFReset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedBeforeRFReset");
}

id objc_msgSend_calculateFieldDetectEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "calculateFieldDetectEnabled:");
}

id objc_msgSend_canEnableExpress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canEnableExpress");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancel");
}

id objc_msgSend_cardEmulationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cardEmulationType");
}

id objc_msgSend_cardModeAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cardModeAccess");
}

id objc_msgSend_cardState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cardState");
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "category");
}

id objc_msgSend_chAssertion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "chAssertion");
}

id objc_msgSend_chFieldType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "chFieldType");
}

id objc_msgSend_chRandomData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "chRandomData");
}

id objc_msgSend_challenge(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "challenge");
}

id objc_msgSend_charValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "charValue");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "characterIsMember:");
}

id objc_msgSend_characterSetWithCharactersInString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "characterSetWithCharactersInString:");
}

id objc_msgSend_checkAIDAllowList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkAIDAllowList");
}

id objc_msgSend_checkDeepSleepTimerRunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkDeepSleepTimerRunning:");
}

id objc_msgSend_checkPairing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkPairing");
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkResourceIsReachableAndReturnError:");
}

id objc_msgSend_checkSEExpressAppletCompatibilityWithPassInformation_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkSEExpressAppletCompatibilityWithPassInformation:error:");
}

id objc_msgSend_checkSEExpressAppletCompatibilityWithPassInformation_useLegacyBehavior_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkSEExpressAppletCompatibilityWithPassInformation:useLegacyBehavior:error:");
}

id objc_msgSend_checkTagPresence_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkTagPresence:");
}

id objc_msgSend_childWithTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "childWithTag:");
}

id objc_msgSend_children(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "children");
}

id objc_msgSend_childrenWithTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "childrenWithTag:");
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanup");
}

id objc_msgSend_cleanupUI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanupUI");
}

id objc_msgSend_clearMultiTagPollingState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearMultiTagPollingState");
}

id objc_msgSend_clearUIControllerInvalidationHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearUIControllerInvalidationHandler");
}

id objc_msgSend_clientAppIsSuspended_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientAppIsSuspended:");
}

id objc_msgSend_clientName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientName");
}

id objc_msgSend_cloneWithFieldDetect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloneWithFieldDetect:");
}

id objc_msgSend_cloneWithHCE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloneWithHCE:");
}

id objc_msgSend_cloneWithReaderDisabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloneWithReaderDisabled");
}

id objc_msgSend_closeSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "closeSession:");
}

id objc_msgSend_clss(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clss");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "code");
}

id objc_msgSend_coder_decodeArrayOfArrayOfClass_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coder:decodeArrayOfArrayOfClass:forKey:");
}

id objc_msgSend_coder_decodeArrayOfClass_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coder:decodeArrayOfClass:forKey:");
}

id objc_msgSend_coder_decodeDictOfClass_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coder:decodeDictOfClass:forKey:");
}

id objc_msgSend_combineFlashWriteCounters_with_overflow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "combineFlashWriteCounters:with:overflow:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:options:");
}

id objc_msgSend_compare_options_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:options:range:");
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsWithString:");
}

id objc_msgSend_configurationForDefaultMainDisplayMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationForDefaultMainDisplayMonitor");
}

id objc_msgSend_configureDriverSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureDriverSettings:");
}

id objc_msgSend_configureECPPolling_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureECPPolling:");
}

id objc_msgSend_configureExpressFelicaEntry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureExpressFelicaEntry:");
}

id objc_msgSend_configureSEWithPassInformation_transceiver_limitedToAID_seHasActivatedApplets_skipAllActivations_useLegacyBehavior_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureSEWithPassInformation:transceiver:limitedToAID:seHasActivatedApplets:skipAllActivations:useLegacyBehavior:error:");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connectRemoteWithConnectionHandoverSelect_callbackQueue_responseHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectRemoteWithConnectionHandoverSelect:callbackQueue:responseHandler:");
}

id objc_msgSend_connectTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectTag:");
}

id objc_msgSend_connectToNotificationListener_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectToNotificationListener:");
}

id objc_msgSend_connectedTag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectedTag");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connection");
}

id objc_msgSend_connectionHandoverProcessCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectionHandoverProcessCompleted");
}

id objc_msgSend_connectionHandoverProcessFailure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectionHandoverProcessFailure:");
}

id objc_msgSend_connectionHandoverTNEPServiceSelected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectionHandoverTNEPServiceSelected:");
}

id objc_msgSend_contactlessOnAny(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contactlessOnAny");
}

id objc_msgSend_containsFieldDetectSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsFieldDetectSession:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsSubKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsSubKeys");
}

id objc_msgSend_controllerInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controllerInfo");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copy");
}

id objc_msgSend_copyPMUService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPMUService");
}

id objc_msgSend_copyPowerBudgetForRequest_forClient_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPowerBudgetForRequest:forClient:error:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_coreDuetActivityRevoked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coreDuetActivityRevoked");
}

id objc_msgSend_coreNFCUIActivateWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coreNFCUIActivateWithCompletion:");
}

id objc_msgSend_coreNFCUIInvalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coreNFCUIInvalidate");
}

id objc_msgSend_coreNFCUISetInvalidationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coreNFCUISetInvalidationHandler:");
}

id objc_msgSend_coreNFCUISetMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coreNFCUISetMode:");
}

id objc_msgSend_coreNFCUISetScanText_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coreNFCUISetScanText:");
}

id objc_msgSend_coreNFCUITagScannedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coreNFCUITagScannedCount:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_counterLimit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "counterLimit");
}

id objc_msgSend_counterValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "counterValue");
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countryCode");
}

id objc_msgSend_createCHSelectErrorMessage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createCHSelectErrorMessage");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_createHandoffTokenWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createHandoffTokenWithCompletion:");
}

id objc_msgSend_createSessionWithWorkQueue_routing_sessionQueuer_didStartWork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createSessionWithWorkQueue:routing:sessionQueuer:didStartWork:");
}

id objc_msgSend_creation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "creation");
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "creationDate");
}

id objc_msgSend_currencyCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currencyCode");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentConnection");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentHandler");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_currentRouting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentRouting");
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentState");
}

id objc_msgSend_currentTag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentTag");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "data");
}

id objc_msgSend_dataForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataForKey:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataValueForField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataValueForField:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "date");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "day");
}

id objc_msgSend_deactivateAllApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deactivateAllApps");
}

id objc_msgSend_deactivateExpressConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deactivateExpressConfig");
}

id objc_msgSend_deassert_isLast_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deassert:isLast:");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "debugDescription");
}

id objc_msgSend_decimalNumberByRoundingAccordingToBehavior_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decimalNumberByRoundingAccordingToBehavior:");
}

id objc_msgSend_decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:");
}

id objc_msgSend_decimalValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decimalValue");
}

id objc_msgSend_decode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decode");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeEvent:");
}

id objc_msgSend_decodeEvent_reverse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeEvent:reverse:");
}

id objc_msgSend_decodeInt32ForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeInt32ForKey:");
}

id objc_msgSend_decodeIntForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeIntForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeLogEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeLogEvent:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decodeProvider_service_blocks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeProvider:service:blocks:");
}

id objc_msgSend_decodeSecureElementTransaction_event_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeSecureElementTransaction:event:");
}

id objc_msgSend_decodeUnderlyingAppletError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeUnderlyingAppletError:");
}

id objc_msgSend_defaultAppIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultAppIdentifier");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultEmulationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultEmulationType");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultRoutingConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultRoutingConfig:");
}

id objc_msgSend_defaultSetting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultSetting");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_defaults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaults");
}

id objc_msgSend_deferredActivationApplet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deferredActivationApplet");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "delegate");
}

id objc_msgSend_deleteCharactersInRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteCharactersInRange:");
}

id objc_msgSend_deleteDBKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteDBKey:");
}

id objc_msgSend_deleteSlot_outWriteCount_appletResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteSlot:outWriteCount:appletResult:");
}

id objc_msgSend_dequeueDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dequeueDate");
}

id objc_msgSend_dequeueSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dequeueSession:");
}

id objc_msgSend_derive_userHash_outData_outWriteCount_appletResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "derive:userHash:outData:outWriteCount:appletResult:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "description");
}

id objc_msgSend_descriptionWithLocale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptionWithLocale:");
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptor");
}

id objc_msgSend_deselectInstance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deselectInstance");
}

id objc_msgSend_detectPaceAppOnTag_appFound_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "detectPaceAppOnTag:appFound:");
}

id objc_msgSend_deviceHandoverSelectError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceHandoverSelectError");
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceType");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryForKey:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryRepresentation");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didCameraStateChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didCameraStateChange:");
}

id objc_msgSend_didChangeRadioState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didChangeRadioState:");
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didChangeValueForKey:");
}

id objc_msgSend_didCloseXPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didCloseXPCConnection:");
}

id objc_msgSend_didConnectToReader(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didConnectToReader");
}

id objc_msgSend_didDetectExternalReaderWithNotification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didDetectExternalReaderWithNotification:");
}

id objc_msgSend_didDetectField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didDetectField:");
}

id objc_msgSend_didDetectFieldNotification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didDetectFieldNotification:");
}

id objc_msgSend_didDetectNDEFMessages_fromTags_connectedTagIndex_updateUICallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didDetectNDEFMessages:fromTags:connectedTagIndex:updateUICallback:");
}

id objc_msgSend_didDetectTags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didDetectTags:");
}

id objc_msgSend_didDetectTags_connectedTagIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didDetectTags:connectedTagIndex:");
}

id objc_msgSend_didDisconnectFromReader(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didDisconnectFromReader");
}

id objc_msgSend_didEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didEnd");
}

id objc_msgSend_didEndSecureElementReader_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didEndSecureElementReader:");
}

id objc_msgSend_didEndSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didEndSession:");
}

id objc_msgSend_didEndTransaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didEndTransaction:");
}

id objc_msgSend_didError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didError");
}

id objc_msgSend_didExpireTransactionForApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didExpireTransactionForApplet:");
}

id objc_msgSend_didExpressModeStateChange_withObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didExpressModeStateChange:withObject:");
}

id objc_msgSend_didFailDeferredAuthorization(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didFailDeferredAuthorization");
}

id objc_msgSend_didFelicaStateChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didFelicaStateChange:");
}

id objc_msgSend_didPerformValueAddedServiceTransactions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didPerformValueAddedServiceTransactions:");
}

id objc_msgSend_didReceiveAPDU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didReceiveAPDU:");
}

id objc_msgSend_didReceiveActivityTimeout_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didReceiveActivityTimeout:");
}

id objc_msgSend_didReceiveField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didReceiveField:");
}

id objc_msgSend_didReceivePendingServerRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didReceivePendingServerRequest");
}

id objc_msgSend_didReceiveThermalIndication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didReceiveThermalIndication:");
}

id objc_msgSend_didScreenStateChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didScreenStateChange:");
}

id objc_msgSend_didSelectApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didSelectApplet:");
}

id objc_msgSend_didSelectValueAddedService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didSelectValueAddedService:");
}

id objc_msgSend_didStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didStart");
}

id objc_msgSend_didStartSecureElementReader_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didStartSecureElementReader:");
}

id objc_msgSend_didStartSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didStartSession:");
}

id objc_msgSend_didStartTransaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didStartTransaction:");
}

id objc_msgSend_didTagStateChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didTagStateChange:");
}

id objc_msgSend_didTerminate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didTerminate:");
}

id objc_msgSend_didUIControllerInvalidate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didUIControllerInvalidate:");
}

id objc_msgSend_disableAutoStartOnField(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableAutoStartOnField");
}

id objc_msgSend_disableCompletionNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableCompletionNotification");
}

id objc_msgSend_disableExpressForKeys_onApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableExpressForKeys:onApplet:");
}

id objc_msgSend_disableLPEMFeature_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableLPEMFeature:completion:");
}

id objc_msgSend_disconnect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnect");
}

id objc_msgSend_disconnectTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnectTag:");
}

id objc_msgSend_disconnectTag_tagRemovalDetect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnectTag:tagRemovalDetect:");
}

id objc_msgSend_discretionaryData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "discretionaryData");
}

id objc_msgSend_displayBacklightLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "displayBacklightLevel");
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "distantFuture");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domain");
}

id objc_msgSend_dontResetAssertion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dontResetAssertion");
}

id objc_msgSend_dontWaitForEOT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dontWaitForEOT");
}

id objc_msgSend_doubleClickEnable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doubleClickEnable");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_driver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "driver");
}

id objc_msgSend_driverDidReceiveTechnologyEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "driverDidReceiveTechnologyEvent:");
}

id objc_msgSend_driverExpressModeEntered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "driverExpressModeEntered:");
}

id objc_msgSend_driverExpressModeExited(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "driverExpressModeExited");
}

id objc_msgSend_driverFieldEntered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "driverFieldEntered");
}

id objc_msgSend_driverFieldExited(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "driverFieldExited");
}

id objc_msgSend_driverPLLUnlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "driverPLLUnlock");
}

id objc_msgSend_driverRSSIStatsWithTotalSamples_avgRSSI_maxRSSI_minRSSI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "driverRSSIStatsWithTotalSamples:avgRSSI:maxRSSI:minRSSI:");
}

id objc_msgSend_driverRequestService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "driverRequestService:");
}

id objc_msgSend_driverRestartDiscovery(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "driverRestartDiscovery");
}

id objc_msgSend_driverWrapper(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "driverWrapper");
}

id objc_msgSend_dumpConfig_logLevel_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dumpConfig:logLevel:prefix:");
}

id objc_msgSend_dumpState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dumpState");
}

id objc_msgSend_eCommerceAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eCommerceAccess");
}

id objc_msgSend_eccCertificate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eccCertificate");
}

id objc_msgSend_ecdsaCertificate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ecdsaCertificate");
}

id objc_msgSend_eckaCertificate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eckaCertificate");
}

id objc_msgSend_ecpBroadcastConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ecpBroadcastConfig");
}

id objc_msgSend_effectiveECPFrame(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveECPFrame");
}

id objc_msgSend_embeddedCardEmulationWithHCE_emulationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "embeddedCardEmulationWithHCE:emulationType:");
}

id objc_msgSend_embeddedMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "embeddedMode");
}

id objc_msgSend_embeddedSecureElementWrapper(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "embeddedSecureElementWrapper");
}

id objc_msgSend_embeddedWiredMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "embeddedWiredMode");
}

id objc_msgSend_embeddedWiredModeWithFD_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "embeddedWiredModeWithFD:");
}

id objc_msgSend_embeddedWiredModeWithHCE(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "embeddedWiredModeWithHCE");
}

id objc_msgSend_emulationOnSessionStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "emulationOnSessionStart");
}

id objc_msgSend_enableContinuousWave_withFrequencySweep_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableContinuousWave:withFrequencySweep:");
}

id objc_msgSend_enableGreenCarThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableGreenCarThreshold:");
}

id objc_msgSend_enableHeadlessMode_shutdown_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableHeadlessMode:shutdown:");
}

id objc_msgSend_enablePowerCountersLogging_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enablePowerCountersLogging:");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeInt32_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInt32:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_endSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endSession:");
}

id objc_msgSend_endowmentNamespaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endowmentNamespaces");
}

id objc_msgSend_enumerateFieldDetectSessionsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateFieldDetectSessionsUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateMatchesInString_options_range_usingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateMatchesInString:options:range:usingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_exportedInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exportedInterface");
}

id objc_msgSend_expressModeManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expressModeManager");
}

id objc_msgSend_expressOnly(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expressOnly");
}

id objc_msgSend_expressTypeForATLConfigKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expressTypeForATLConfigKey:");
}

id objc_msgSend_expressWithECP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expressWithECP:");
}

id objc_msgSend_externalReaderAccessAllow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "externalReaderAccessAllow");
}

id objc_msgSend_extractConfigFrom_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extractConfigFrom:");
}

id objc_msgSend_failForwardCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "failForwardCompleted");
}

id objc_msgSend_fdOn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fdOn");
}

id objc_msgSend_feliCaSystemCodeList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "feliCaSystemCodeList");
}

id objc_msgSend_felicaInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "felicaInfo");
}

id objc_msgSend_fetchAppletEntitiesWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchAppletEntitiesWithError:");
}

id objc_msgSend_fetchESEExpressEntitiesWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchESEExpressEntitiesWithError:");
}

id objc_msgSend_fetchFromStorage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchFromStorage");
}

id objc_msgSend_fieldChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fieldChange:");
}

id objc_msgSend_fieldChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fieldChanged:");
}

id objc_msgSend_fieldDetectRequested(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fieldDetectRequested");
}

id objc_msgSend_fieldDetectSessionClientNames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fieldDetectSessionClientNames");
}

id objc_msgSend_fieldDetectSessions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fieldDetectSessions");
}

id objc_msgSend_fieldDetectType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fieldDetectType");
}

id objc_msgSend_fieldHandlingInSuspension(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fieldHandlingInSuspension");
}

id objc_msgSend_fieldNotification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fieldNotification:");
}

id objc_msgSend_fieldPresent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fieldPresent");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_filterUsingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterUsingPredicate:");
}

id objc_msgSend_findAID_filterType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findAID:filterType:");
}

id objc_msgSend_firmwareVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firmwareVersion");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstObject");
}

id objc_msgSend_floatForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "floatForKey:");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "floatValue");
}

id objc_msgSend_forceExpressExit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceExpressExit");
}

id objc_msgSend_forceNotifyFieldDetectPresentmentWithFieldNotification_walletDomain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceNotifyFieldDetectPresentmentWithFieldNotification:walletDomain:");
}

id objc_msgSend_fragment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fragment");
}

id objc_msgSend_furyDelegateRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "furyDelegateRegistered:");
}

id objc_msgSend_generateConnectionHandoverRequestWithQueue_responseHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateConnectionHandoverRequestWithQueue:responseHandler:");
}

id objc_msgSend_generateDailyUUIDForCA(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateDailyUUIDForCA");
}

id objc_msgSend_generateUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateUUID");
}

id objc_msgSend_getAppInfoDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAppInfoDictionary");
}

id objc_msgSend_getAppletStateAndHistory_withPackage_withModule_withTransceiver_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAppletStateAndHistory:withPackage:withModule:withTransceiver:withError:");
}

id objc_msgSend_getBatteryPercent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBatteryPercent");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getBytes_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBytes:range:");
}

id objc_msgSend_getCALoggerUserDefaults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCALoggerUserDefaults");
}

id objc_msgSend_getCAUniversityCode_universityCodes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCAUniversityCode:universityCodes:");
}

id objc_msgSend_getCHConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCHConfig");
}

id objc_msgSend_getCharacters_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCharacters:range:");
}

id objc_msgSend_getControllerInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getControllerInfo:");
}

id objc_msgSend_getCooloffTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCooloffTime");
}

id objc_msgSend_getData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getData:");
}

id objc_msgSend_getData_subtag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getData:subtag:");
}

id objc_msgSend_getData_tag_data_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getData:tag:data:error:");
}

id objc_msgSend_getData_updateKUD_outWriteLimit_outWriteCount_appletResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getData:updateKUD:outWriteLimit:outWriteCount:appletResult:");
}

id objc_msgSend_getDieID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDieID");
}

id objc_msgSend_getDurationFrom_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDurationFrom:");
}

id objc_msgSend_getECPFrame(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getECPFrame");
}

id objc_msgSend_getExpressAidsForType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getExpressAidsForType:");
}

id objc_msgSend_getExpressAidsForType_onlyInExpress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getExpressAidsForType:onlyInExpress:");
}

id objc_msgSend_getFractionDigitsFromCurrencyStringCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFractionDigitsFromCurrencyStringCode:");
}

id objc_msgSend_getHardwareTypeForCA_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getHardwareTypeForCA:");
}

id objc_msgSend_getHash_appletResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getHash:appletResult:");
}

id objc_msgSend_getIndexFromLocale(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIndexFromLocale");
}

id objc_msgSend_getLPEMBluetoothLog_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLPEMBluetoothLog:callback:");
}

id objc_msgSend_getLPMControl(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLPMControl");
}

id objc_msgSend_getListOfKeysWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getListOfKeysWithError:");
}

id objc_msgSend_getMaxOnTimeAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMaxOnTimeAtIndex:");
}

id objc_msgSend_getNFCSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNFCSettings");
}

id objc_msgSend_getNumberOfKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNumberOfKeys:");
}

id objc_msgSend_getPairingVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPairingVersion");
}

id objc_msgSend_getPermissible7816AppsFromInfoPlist_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPermissible7816AppsFromInfoPlist:");
}

id objc_msgSend_getPermissibleFelicaSystemCodeFromInfoPlist_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPermissibleFelicaSystemCodeFromInfoPlist:");
}

id objc_msgSend_getPowerCounters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPowerCounters:");
}

id objc_msgSend_getPrimaryHardwareState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPrimaryHardwareState");
}

id objc_msgSend_getRFSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRFSettings:");
}

id objc_msgSend_getSTSHelperOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSTSHelperOperation");
}

id objc_msgSend_getSecureElementWrapper(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSecureElementWrapper");
}

id objc_msgSend_getSecureElementWrapperAndSetRouting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSecureElementWrapperAndSetRouting");
}

id objc_msgSend_getServiceProviderData_withPackage_withModule_withPublicKey_withEncryptionScheme_withTransceiver_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServiceProviderData:withPackage:withModule:withPublicKey:withEncryptionScheme:withTransceiver:withError:");
}

id objc_msgSend_getServiceProviderData_withPackage_withModule_withTransceiver_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServiceProviderData:withPackage:withModule:withTransceiver:withError:");
}

id objc_msgSend_getStateDumpInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStateDumpInfo");
}

id objc_msgSend_getTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTimestamp");
}

id objc_msgSend_getTransactionEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTransactionEvent");
}

id objc_msgSend_globalUnmountCOX(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "globalUnmountCOX");
}

id objc_msgSend_groupActivationStyle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupActivationStyle");
}

id objc_msgSend_groupHeadID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupHeadID");
}

id objc_msgSend_groupMemberIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupMemberIDs");
}

id objc_msgSend_handle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handle");
}

id objc_msgSend_handleAPDU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleAPDU:");
}

id objc_msgSend_handleAppletInactivityTimeout_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleAppletInactivityTimeout:");
}

id objc_msgSend_handleAppletInactivityTimeout_atlData_caData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleAppletInactivityTimeout:atlData:caData:");
}

id objc_msgSend_handleDeferredAuthTimeout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDeferredAuthTimeout");
}

id objc_msgSend_handleDeselect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDeselect");
}

id objc_msgSend_handleDetectedTags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDetectedTags:");
}

id objc_msgSend_handleEraseCounterExceeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleEraseCounterExceeded");
}

id objc_msgSend_handleExpressModeExited(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleExpressModeExited");
}

id objc_msgSend_handleExpressModeStarted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleExpressModeStarted");
}

id objc_msgSend_handleExpressModeTimeout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleExpressModeTimeout");
}

id objc_msgSend_handleFailForwardCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFailForwardCompleted");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleFelicaStateEvent_appletAID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFelicaStateEvent:appletAID:");
}

id objc_msgSend_handleFieldChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFieldChanged:");
}

id objc_msgSend_handleFieldNotification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFieldNotification:");
}

id objc_msgSend_handleFieldReset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFieldReset");
}

id objc_msgSend_handleFilteredFieldNotification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFilteredFieldNotification:");
}

id objc_msgSend_handleForIdentifier_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleForIdentifier:error:");
}

id objc_msgSend_handleForPredicate_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleForPredicate:error:");
}

id objc_msgSend_handleForceExpressModeEndEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleForceExpressModeEndEvent");
}

id objc_msgSend_handleHWRecoveryCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleHWRecoveryCompletion:");
}

id objc_msgSend_handleHWRecoveryStarted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleHWRecoveryStarted");
}

id objc_msgSend_handleHardwareReset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleHardwareReset:");
}

id objc_msgSend_handleHceTargetLost(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleHceTargetLost");
}

id objc_msgSend_handleHostCardReaderDetected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleHostCardReaderDetected:");
}

id objc_msgSend_handleInvalidatedXPCWithConnectionUserInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleInvalidatedXPCWithConnectionUserInfo:");
}

id objc_msgSend_handleMultiTagStateChanged_rfError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleMultiTagStateChanged:rfError:");
}

id objc_msgSend_handleNdefTagRead(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleNdefTagRead");
}

id objc_msgSend_handlePLLUnlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePLLUnlock");
}

id objc_msgSend_handlePendingServerRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePendingServerRequest");
}

id objc_msgSend_handleReaderBurnoutCleared(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleReaderBurnoutCleared");
}

id objc_msgSend_handleReaderBurnoutTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleReaderBurnoutTimer");
}

id objc_msgSend_handleReaderModeProhibitTimerEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleReaderModeProhibitTimerEvent:");
}

id objc_msgSend_handleRemoteTagsDetected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRemoteTagsDetected:");
}

id objc_msgSend_handleRemoteTagsDetected_dropAndRestartDiscovery_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRemoteTagsDetected:dropAndRestartDiscovery:");
}

id objc_msgSend_handleRequestService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRequestService:");
}

id objc_msgSend_handleRequestService_inExpress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRequestService:inExpress:");
}

id objc_msgSend_handleRestartDiscovery(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRestartDiscovery");
}

id objc_msgSend_handleSecureElementEndOfOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSecureElementEndOfOperation");
}

id objc_msgSend_handleSecureElementEnteredRestrictedMode_os_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSecureElementEnteredRestrictedMode:os:");
}

id objc_msgSend_handleSecureElementEnteredRestrictedModeExit_os_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSecureElementEnteredRestrictedModeExit:os:");
}

id objc_msgSend_handleSecureElementOSReset_withReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSecureElementOSReset:withReason:");
}

id objc_msgSend_handleSecureElementReaderModeEnded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSecureElementReaderModeEnded:");
}

id objc_msgSend_handleSecureElementReaderModeStarted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSecureElementReaderModeStarted:");
}

id objc_msgSend_handleSecureElementRemoved_withReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSecureElementRemoved:withReason:");
}

id objc_msgSend_handleSecureElementTransactionData_appletIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSecureElementTransactionData:appletIdentifier:");
}

id objc_msgSend_handleSelect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSelect:");
}

id objc_msgSend_handleSelectEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSelectEvent:");
}

id objc_msgSend_handleSessionResumed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSessionResumed");
}

id objc_msgSend_handleSessionSuspended_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSessionSuspended:");
}

id objc_msgSend_handleStackLoad(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleStackLoad");
}

id objc_msgSend_handleStackUnload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleStackUnload");
}

id objc_msgSend_handleStepUpEvent_forApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleStepUpEvent:forApplet:");
}

id objc_msgSend_handleStepUpEvent_transactionType_forApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleStepUpEvent:transactionType:forApplet:");
}

id objc_msgSend_handleTemperatureChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTemperatureChange:");
}

id objc_msgSend_handleTimerExpiredEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTimerExpiredEvent:");
}

id objc_msgSend_handleTransactionEndEvent_atlData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTransactionEndEvent:atlData:");
}

id objc_msgSend_handleTransactionEndEvent_atlData_caData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTransactionEndEvent:atlData:caData:");
}

id objc_msgSend_handleTransactionStartEvent_atlData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTransactionStartEvent:atlData:");
}

id objc_msgSend_handleTransactionStartEvent_atlData_caData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTransactionStartEvent:atlData:caData:");
}

id objc_msgSend_hardwareVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hardwareVersion");
}

id objc_msgSend_hasAntenna(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasAntenna");
}

id objc_msgSend_hasAppleLPM(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasAppleLPM");
}

id objc_msgSend_hasError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasError");
}

id objc_msgSend_hasLPEMSupport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasLPEMSupport");
}

id objc_msgSend_hasMultiOS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasMultiOS");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasReaderModeSupport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasReaderModeSupport");
}

id objc_msgSend_hasSentRAPDU(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSentRAPDU");
}

id objc_msgSend_hasSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSession");
}

id objc_msgSend_hasTransactionEnded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasTransactionEnded");
}

id objc_msgSend_hasUWBKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasUWBKeys:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hash");
}

id objc_msgSend_hceAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hceAccess");
}

id objc_msgSend_hceReadWithHandle_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hceReadWithHandle:completion:");
}

id objc_msgSend_headlessTimerLogic(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "headlessTimerLogic");
}

id objc_msgSend_historicalBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "historicalBytes");
}

id objc_msgSend_holdAssertion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "holdAssertion");
}

id objc_msgSend_holdPowerAssertion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "holdPowerAssertion:");
}

id objc_msgSend_holdPowerAssertion_onBehalfOf_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "holdPowerAssertion:onBehalfOf:");
}

id objc_msgSend_homeKitSchemeDataPayload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "homeKitSchemeDataPayload");
}

id objc_msgSend_homed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "homed");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "host");
}

id objc_msgSend_hostCardEmulation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hostCardEmulation");
}

id objc_msgSend_hostCardEmulationLog(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hostCardEmulationLog");
}

id objc_msgSend_hostCardEmulationVASBroadcastWithFrame_lpcdEnable_fieldDetect_pollDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hostCardEmulationVASBroadcastWithFrame:lpcdEnable:fieldDetect:pollDuration:");
}

id objc_msgSend_hostCardEmulationWithFieldDetect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hostCardEmulationWithFieldDetect:");
}

id objc_msgSend_hostCards(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hostCards");
}

id objc_msgSend_hostMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hostMode");
}

id objc_msgSend_hwStateDidChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hwStateDidChange:");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifier");
}

id objc_msgSend_identifierAsData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifierAsData");
}

id objc_msgSend_identifierWithPid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifierWithPid:");
}

id objc_msgSend_ignoreAppStateMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ignoreAppStateMonitor");
}

id objc_msgSend_ignoreRFTechOnIsEqual(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ignoreRFTechOnIsEqual");
}

id objc_msgSend_includeAPDUDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "includeAPDUDuration");
}

id objc_msgSend_increaseLengthBy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "increaseLengthBy:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "info");
}

id objc_msgSend_informative(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "informative");
}

id objc_msgSend_initFromStorageWithDriverWrapper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFromStorageWithDriverWrapper:");
}

id objc_msgSend_initLibraryWithDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initLibraryWithDelegate:");
}

id objc_msgSend_initPollingType_wantsSEReader_wantsExpress_cardEmulationType_hostMode_embeddedMode_fieldDetect_pollingDuration_lpcdEcpFrame_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initPollingType:wantsSEReader:wantsExpress:cardEmulationType:hostMode:embeddedMode:fieldDetect:pollingDuration:lpcdEcpFrame:");
}

id objc_msgSend_initPollingType_wantsSEReader_wantsExpress_cardEmulationType_hostMode_embeddedMode_fieldDetect_pollingDuration_lpcdEcpFrame_ecpBroadcast_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initPollingType:wantsSEReader:wantsExpress:cardEmulationType:hostMode:embeddedMode:fieldDetect:pollingDuration:lpcdEcpFrame:ecpBroadcast:");
}

id objc_msgSend_initSETransactionsStates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initSETransactionsStates");
}

id objc_msgSend_initSleepTimerWithCallback_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initSleepTimerWithCallback:queue:");
}

id objc_msgSend_initWithAid_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAid:type:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytesNoCopy_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytesNoCopy:length:");
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCalendarIdentifier:");
}

id objc_msgSend_initWithCallback_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCallback:queue:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithConfig_allowlistChecker_remoteObject_workQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConfig:allowlistChecker:remoteObject:workQueue:");
}

id objc_msgSend_initWithConnection_coreNFCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConnection:coreNFCConnection:");
}

id objc_msgSend_initWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfFile:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:error:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithData_uniformLengthCheck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:uniformLengthCheck:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionaryForDavenport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionaryForDavenport:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithDriverWrapper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDriverWrapper:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithHandle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithHandle:");
}

id objc_msgSend_initWithHeader_type_identifier_payload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithHeader:type:identifier:payload:");
}

id objc_msgSend_initWithID_driverWrapper_seInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithID:driverWrapper:seInfo:");
}

id objc_msgSend_initWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInt:");
}

id objc_msgSend_initWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInteger:");
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLength:");
}

id objc_msgSend_initWithMachPort_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMachPort:queue:");
}

id objc_msgSend_initWithMachPort_xpcConnectionQueue_eventSendQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMachPort:xpcConnectionQueue:eventSendQueue:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithNFNdefMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNFNdefMessage:");
}

id objc_msgSend_initWithNFTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNFTag:");
}

id objc_msgSend_initWithNFTagForUIDOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNFTagForUIDOnly:");
}

id objc_msgSend_initWithNotificationType_rfTechnology_typeFSystemCode_creationDate_cachedBeforeRFReset_odaRequired_terminalMode_terminalType_ignoreRFTechOnIsEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNotificationType:rfTechnology:typeFSystemCode:creationDate:cachedBeforeRFReset:odaRequired:terminalMode:terminalType:ignoreRFTechOnIsEqual:");
}

id objc_msgSend_initWithNotificationType_rfTechnology_typeFSystemCode_creationDate_cachedBeforeRFReset_odaRequired_terminalMode_terminalType_terminalSubType_tciArray_openLoopSchemeBitfield_homeKitSchemeDataPayload_readerIdentifier_pairingMode_terminalTypeData_ignoreRFTechOnIsEqual_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNotificationType:rfTechnology:typeFSystemCode:creationDate:cachedBeforeRFReset:odaRequired:terminalMode:terminalType:terminalSubType:tciArray:openLoopSchemeBitfield:homeKitSchemeDataPayload:readerIdentifier:pairingMode:terminalTypeData:ignoreRFTechOnIsEqual:userInfo:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithProtocol:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithQueue_driverWrapper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueue:driverWrapper:");
}

id objc_msgSend_initWithRemoteAssertion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRemoteAssertion:");
}

id objc_msgSend_initWithRemoteObject_expressModeManager_driverWrapper_workQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRemoteObject:expressModeManager:driverWrapper:workQueue:");
}

id objc_msgSend_initWithRemoteObject_role_type_expressModeManager_seWrapper_driverWrapper_workQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRemoteObject:role:type:expressModeManager:seWrapper:driverWrapper:workQueue:");
}

id objc_msgSend_initWithRemoteObject_workQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRemoteObject:workQueue:");
}

id objc_msgSend_initWithRemoteObject_workQueue_expressModeManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRemoteObject:workQueue:expressModeManager:");
}

id objc_msgSend_initWithRemoteObject_workQueue_expressModeManager_allowsBackgroundMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRemoteObject:workQueue:expressModeManager:allowsBackgroundMode:");
}

id objc_msgSend_initWithRemoteObject_workQueue_whitelist_serviceType_showSharingUI_coreNFCSessionType_scanText_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRemoteObject:workQueue:whitelist:serviceType:showSharingUI:coreNFCSessionType:scanText:");
}

id objc_msgSend_initWithSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSet:");
}

id objc_msgSend_initWithStreamName_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithStreamName:queue:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithTagID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTagID:");
}

id objc_msgSend_initWithThermalMonitor_delegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithThermalMonitor:delegate:");
}

id objc_msgSend_initWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTimeIntervalSinceNow:");
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithType:");
}

id objc_msgSend_initWithType_delegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithType:delegate:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUnsignedChar:");
}

id objc_msgSend_initWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUnsignedShort:");
}

id objc_msgSend_initWithWorkQueue_routing_sessionQueuer_didStartWork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWorkQueue:routing:sessionQueuer:didStartWork:");
}

id objc_msgSend_initialECPConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialECPConfig");
}

id objc_msgSend_initialRoutingConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialRoutingConfig");
}

id objc_msgSend_initialRoutingConfigWithField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialRoutingConfigWithField:");
}

id objc_msgSend_initialScanText(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialScanText");
}

id objc_msgSend_initialSelectBeforeRun(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialSelectBeforeRun");
}

id objc_msgSend_initialUIText(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialUIText");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_instanceACL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instanceACL");
}

id objc_msgSend_instanceAID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instanceAID");
}

id objc_msgSend_instruction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instruction");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerValue");
}

id objc_msgSend_integerValueForField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerValueForField:");
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interface");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_internalAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "internalAccess");
}

id objc_msgSend_internalEndSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "internalEndSession:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidate");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActive");
}

id objc_msgSend_isAsserted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAsserted:");
}

id objc_msgSend_isAuthRandomEntangled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAuthRandomEntangled");
}

id objc_msgSend_isCHTerminal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCHTerminal");
}

id objc_msgSend_isCPMSSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCPMSSupported");
}

id objc_msgSend_isComplete(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isComplete");
}

id objc_msgSend_isContainer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isContainer");
}

id objc_msgSend_isDirty(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDirty");
}

id objc_msgSend_isEligible(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEligible");
}

id objc_msgSend_isEligibleForDoubleClick(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEligibleForDoubleClick");
}

id objc_msgSend_isEligibleWithUserPrompt_auditToken_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEligibleWithUserPrompt:auditToken:completion:");
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEmpty");
}

id objc_msgSend_isEnding(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnding");
}

id objc_msgSend_isEntitled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEntitled:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualTerminalInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualTerminalInfo:");
}

id objc_msgSend_isEqualToApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToApplet:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToNFTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToNFTag:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isEqualType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualType:");
}

id objc_msgSend_isEquivalentRouting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEquivalentRouting:");
}

id objc_msgSend_isFeatureSupported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFeatureSupported:");
}

id objc_msgSend_isFirstInQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFirstInQueue");
}

id objc_msgSend_isGPLocked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isGPLocked");
}

id objc_msgSend_isGetVasDataCommand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isGetVasDataCommand");
}

id objc_msgSend_isInstanceSelected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInstanceSelected");
}

id objc_msgSend_isJCOPTooOld_prod_version_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isJCOPTooOld:prod:version:");
}

id objc_msgSend_isLegacyApplet_withPackage_withModule_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLegacyApplet:withPackage:withModule:");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isNFCAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNFCAllowed");
}

id objc_msgSend_isOperational(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isOperational");
}

id objc_msgSend_isPRCIDSupported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPRCIDSupported:");
}

id objc_msgSend_isPaceSupported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPaceSupported:");
}

id objc_msgSend_isProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isProxy");
}

id objc_msgSend_isRecoveryInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRecoveryInProgress");
}

id objc_msgSend_isRoleValid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRoleValid:");
}

id objc_msgSend_isSEOperational(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSEOperational");
}

id objc_msgSend_isSecureElement_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSecureElement:");
}

id objc_msgSend_isSecureMessaging(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSecureMessaging");
}

id objc_msgSend_isSelectByDFNameCommand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSelectByDFNameCommand");
}

id objc_msgSend_isSelectCommand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSelectCommand");
}

id objc_msgSend_isSessionSEOnly(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSessionSEOnly");
}

id objc_msgSend_isSilent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSilent");
}

id objc_msgSend_isSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSupported");
}

id objc_msgSend_isSuspended(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSuspended");
}

id objc_msgSend_isTypeF(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isTypeF");
}

id objc_msgSend_isURIRecord(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isURIRecord");
}

id objc_msgSend_isUnifiedAccess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUnifiedAccess:");
}

id objc_msgSend_isWalletAttached(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWalletAttached");
}

id objc_msgSend_iso7816AppList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iso7816AppList");
}

id objc_msgSend_jcopSupportsEntanglement(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "jcopSupportsEntanglement");
}

id objc_msgSend_jcopSupportsPerBootAuthKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "jcopSupportsPerBootAuthKeys");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "key");
}

id objc_msgSend_keyAttestation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyAttestation");
}

id objc_msgSend_keyAttestationAuthority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyAttestationAuthority");
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyEnumerator");
}

id objc_msgSend_keyIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyIdentifier");
}

id objc_msgSend_keyWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyWithIdentifier:");
}

id objc_msgSend_keys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keys");
}

id objc_msgSend_kickRTCTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kickRTCTimer");
}

id objc_msgSend_lastKnownRoutingConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastKnownRoutingConfig");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastObject");
}

id objc_msgSend_launchBundleWithIdentifier_launchReason_launchDomain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchBundleWithIdentifier:launchReason:launchDomain:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_lengthExpected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lengthExpected");
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lengthOfBytesUsingEncoding:");
}

id objc_msgSend_lifecycleState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lifecycleState");
}

id objc_msgSend_listKeysWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "listKeysWithCompletion:");
}

id objc_msgSend_loadCustomDefaults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadCustomDefaults");
}

id objc_msgSend_loadDefaultValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadDefaultValues");
}

id objc_msgSend_localTimeZone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localTimeZone");
}

id objc_msgSend_localValidations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localValidations");
}

id objc_msgSend_localeChanged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localeChanged");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lock");
}

id objc_msgSend_logLPCDFalseDetects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logLPCDFalseDetects:");
}

id objc_msgSend_logsTransactionDetails(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logsTransactionDetails");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longLongValue");
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longValue");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_lpcdEcpFrame(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lpcdEcpFrame");
}

id objc_msgSend_lpemConfigSessionAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lpemConfigSessionAccess");
}

id objc_msgSend_lpmFactoryTest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lpmFactoryTest");
}

id objc_msgSend_managedConfigChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managedConfigChanged:");
}

id objc_msgSend_map(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "map");
}

id objc_msgSend_markApplicationForDelete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "markApplicationForDelete:");
}

id objc_msgSend_markAsDirty_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "markAsDirty:");
}

id objc_msgSend_maxMessageSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxMessageSize");
}

id objc_msgSend_maxOperationTimeSpan(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxOperationTimeSpan");
}

id objc_msgSend_maxReaderTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxReaderTime");
}

id objc_msgSend_maxWaitTimeExtension(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxWaitTimeExtension");
}

id objc_msgSend_maybeStartNextSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maybeStartNextSession");
}

id objc_msgSend_maybeTTR_appletResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maybeTTR:appletResult:");
}

id objc_msgSend_merchantCapabilities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "merchantCapabilities");
}

id objc_msgSend_merchantData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "merchantData");
}

id objc_msgSend_merchantId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "merchantId");
}

id objc_msgSend_methodForSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "methodForSelector:");
}

id objc_msgSend_middlewareVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "middlewareVersion");
}

id objc_msgSend_migrateFromDefaults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migrateFromDefaults");
}

id objc_msgSend_migrationContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migrationContext");
}

id objc_msgSend_migrationInstances(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migrationInstances");
}

id objc_msgSend_migrationPackages(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migrationPackages");
}

id objc_msgSend_migrationState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migrationState");
}

id objc_msgSend_minWaitTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minWaitTime");
}

id objc_msgSend_miniNVWriteAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "miniNVWriteAccess");
}

id objc_msgSend_minusHashTable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minusHashTable:");
}

id objc_msgSend_moduleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moduleIdentifier");
}

id objc_msgSend_monitorWithConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitorWithConfiguration:");
}

id objc_msgSend_month(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "month");
}

id objc_msgSend_multiSEGroupMemberIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiSEGroupMemberIDs");
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableBytes");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_needsCleanup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "needsCleanup");
}

id objc_msgSend_negotiatePerBootAuthKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "negotiatePerBootAuthKeys");
}

id objc_msgSend_networkMerchantIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkMerchantIdentifier");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextObject");
}

id objc_msgSend_nextRetryTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextRetryTime");
}

id objc_msgSend_nfcCardSessionAIDPrefixList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nfcCardSessionAIDPrefixList");
}

id objc_msgSend_nfcCardSessionAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nfcCardSessionAccess");
}

id objc_msgSend_nfcISO15693ReaderAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nfcISO15693ReaderAccess");
}

id objc_msgSend_nfcNDEFReaderAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nfcNDEFReaderAccess");
}

id objc_msgSend_nfcRadioEnabled_showUIPopup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nfcRadioEnabled:showUIPopup:");
}

id objc_msgSend_nfcTagReaderAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nfcTagReaderAccess");
}

id objc_msgSend_nfcTagReaderPACEPollingAllow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nfcTagReaderPACEPollingAllow");
}

id objc_msgSend_nfcVASReaderAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nfcVASReaderAccess");
}

id objc_msgSend_nonce(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nonce");
}

id objc_msgSend_none(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "none");
}

id objc_msgSend_notANumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notANumber");
}

id objc_msgSend_notificationCategories(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notificationCategories");
}

id objc_msgSend_notificationConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notificationConfig");
}

id objc_msgSend_notificationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notificationType");
}

id objc_msgSend_notificationWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notificationWithDictionary:");
}

id objc_msgSend_notifyFieldDetectPresentmentWithFieldNotification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyFieldDetectPresentmentWithFieldNotification:");
}

id objc_msgSend_notifyPresentmentFieldExit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyPresentmentFieldExit");
}

id objc_msgSend_notifyReaderModeActivityEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyReaderModeActivityEnd");
}

id objc_msgSend_notifyReaderModeActivityStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyReaderModeActivityStart");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "now");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "null");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithShort:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectsForKeys_notFoundMarker_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectsForKeys:notFoundMarker:");
}

id objc_msgSend_observeValueForKeyPath_ofObject_change_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "observeValueForKeyPath:ofObject:change:context:");
}

id objc_msgSend_odaRequired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "odaRequired");
}

id objc_msgSend_onAssertWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onAssertWithCompletion:");
}

id objc_msgSend_onDeassertWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onDeassertWithCompletion:");
}

id objc_msgSend_one(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "one");
}

id objc_msgSend_openLoopSchemeBitfield(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openLoopSchemeBitfield");
}

id objc_msgSend_openSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openSession:");
}

id objc_msgSend_openStackAndUpdateAllWriteCounters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openStackAndUpdateAllWriteCounters:");
}

id objc_msgSend_openURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openURL:configuration:completionHandler:");
}

id objc_msgSend_orderedSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "orderedSet");
}

id objc_msgSend_owners(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "owners");
}

id objc_msgSend_p1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "p1");
}

id objc_msgSend_p2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "p2");
}

id objc_msgSend_packageIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "packageIdentifier");
}

id objc_msgSend_pairedState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairedState");
}

id objc_msgSend_pairingMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairingMode");
}

id objc_msgSend_parentToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parentToken");
}

id objc_msgSend_parseHCIEvent_withApplet_withPackage_withModule_withTransceiver_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseHCIEvent:withApplet:withPackage:withModule:withTransceiver:withError:");
}

id objc_msgSend_parseResponseAPDU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseResponseAPDU:");
}

id objc_msgSend_parsedInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parsedInfo");
}

id objc_msgSend_passForAid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "passForAid:");
}

id objc_msgSend_password(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "password");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "path");
}

id objc_msgSend_pauseExpressAndStartDefaultModeAfter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pauseExpressAndStartDefaultModeAfter:");
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "payload");
}

id objc_msgSend_payloadBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "payloadBytes");
}

id objc_msgSend_payloadLength(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "payloadLength");
}

id objc_msgSend_paymentAIDList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "paymentAIDList");
}

id objc_msgSend_paymentResponse(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "paymentResponse");
}

id objc_msgSend_paymentSignResponseWithSignResponse_paymentResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "paymentSignResponseWithSignResponse:paymentResponse:");
}

id objc_msgSend_performChainAuthIfNeededForACL_operation_auth_seHandle_seid_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performChainAuthIfNeededForACL:operation:auth:seHandle:seid:error:");
}

id objc_msgSend_performSharing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performSharing");
}

id objc_msgSend_persistentConfigID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistentConfigID");
}

id objc_msgSend_persistentFieldDetectClients(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistentFieldDetectClients");
}

id objc_msgSend_persistentObserverNames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistentObserverNames");
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pid");
}

id objc_msgSend_plasticCardMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plasticCardMode");
}

id objc_msgSend_platformIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "platformIdentifier");
}

id objc_msgSend_pointerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pointerValue");
}

id objc_msgSend_polling(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "polling");
}

id objc_msgSend_pollingDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pollingDuration");
}

id objc_msgSend_pollingProfileUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pollingProfileUpdate");
}

id objc_msgSend_pollingType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pollingType");
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "port");
}

id objc_msgSend_postAnalyticsATLFailureEvent_aid_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsATLFailureEvent:aid:error:");
}

id objc_msgSend_postAnalyticsAppletProvisioningFailureEvent_responseCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsAppletProvisioningFailureEvent:responseCode:");
}

id objc_msgSend_postAnalyticsCRSAuthECommerceWithParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsCRSAuthECommerceWithParameters:");
}

id objc_msgSend_postAnalyticsCRSAuthInitEventWithStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsCRSAuthInitEventWithStatus:");
}

id objc_msgSend_postAnalyticsCRSAuthWithStatus_withMethod_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsCRSAuthWithStatus:withMethod:");
}

id objc_msgSend_postAnalyticsCRSDeAuthWithStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsCRSDeAuthWithStatus:");
}

id objc_msgSend_postAnalyticsContactlessErrorsEvent_status_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsContactlessErrorsEvent:status:error:");
}

id objc_msgSend_postAnalyticsExpressSetupFailureEvent_context_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsExpressSetupFailureEvent:context:error:");
}

id objc_msgSend_postAnalyticsGeneralTransactionStatistics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsGeneralTransactionStatistics");
}

id objc_msgSend_postAnalyticsHciTransactionException_eventType_commandResult_status_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsHciTransactionException:eventType:commandResult:status:");
}

id objc_msgSend_postAnalyticsLPCDStatistic_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsLPCDStatistic:");
}

id objc_msgSend_postAnalyticsMobileSoftwareUpdateExceptionEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsMobileSoftwareUpdateExceptionEvent:");
}

id objc_msgSend_postAnalyticsOsResetEvent_osID_hardwareType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsOsResetEvent:osID:hardwareType:");
}

id objc_msgSend_postAnalyticsReaderModeExceptionForType_tagType_rfFrameInterface_withErrorCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsReaderModeExceptionForType:tagType:rfFrameInterface:withErrorCode:");
}

id objc_msgSend_postAnalyticsSEFailureEvent_context_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsSEFailureEvent:context:error:");
}

id objc_msgSend_postAnalyticsSERestrictedModeEntered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsSERestrictedModeEntered:");
}

id objc_msgSend_postAnalyticsSERestrictedModeExited_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsSERestrictedModeExited:");
}

id objc_msgSend_postAnalyticsSetupEndpoints_totalUnknowntoSE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsSetupEndpoints:totalUnknowntoSE:");
}

id objc_msgSend_postAnalyticsVASTransactionException_withSWStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postAnalyticsVASTransactionException:withSWStatus:");
}

id objc_msgSend_postCAEventFor_eventInput_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postCAEventFor:eventInput:");
}

id objc_msgSend_postComponentStatusEventFor_status_withReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postComponentStatusEventFor:status:withReply:");
}

id objc_msgSend_postEventForPublisher_event_objectString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postEventForPublisher:event:objectString:");
}

id objc_msgSend_postGeneralDeviceStatistics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postGeneralDeviceStatistics");
}

id objc_msgSend_postNotificationForURL_payload_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postNotificationForURL:payload:completionHandler:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_postNotificationName_object_userInfo_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postNotificationName:object:userInfo:options:");
}

id objc_msgSend_postPlasticCardEnableStatus_aid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postPlasticCardEnableStatus:aid:");
}

id objc_msgSend_powerAssertionIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "powerAssertionIdentifier");
}

id objc_msgSend_powerConsumptionReporter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "powerConsumptionReporter");
}

id objc_msgSend_powerCycleOrReset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "powerCycleOrReset");
}

id objc_msgSend_powerCycleSE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "powerCycleSE:");
}

id objc_msgSend_poweredRunDuringSleep(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "poweredRunDuringSleep");
}

id objc_msgSend_predicateMatchingIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateMatchingIdentifier:");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_preferredLanguages(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredLanguages");
}

id objc_msgSend_preferredLocalizationsFromArray_forPreferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredLocalizationsFromArray:forPreferences:");
}

id objc_msgSend_preloadApplets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preloadApplets");
}

id objc_msgSend_primaryDelegateRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryDelegateRegistered:");
}

id objc_msgSend_primitiveLocalValidation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primitiveLocalValidation");
}

id objc_msgSend_print(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "print");
}

id objc_msgSend_prioritizeSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prioritizeSession:");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "priority");
}

id objc_msgSend_process(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "process");
}

id objc_msgSend_processConfigurationChange_newConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processConfigurationChange:newConfiguration:");
}

id objc_msgSend_processConnectionHandoverRequestData_callbackQueue_responseHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processConnectionHandoverRequestData:callbackQueue:responseHandler:");
}

id objc_msgSend_processEndOfTransaction_withPackage_withModule_withTransceiver_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processEndOfTransaction:withPackage:withModule:withTransceiver:withError:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processIdentifier");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processNDEFMesssage_outputMessage_tag_stopProcessing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processNDEFMesssage:outputMessage:tag:stopProcessing:");
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processName");
}

id objc_msgSend_processUnifiedAccessStepupAPDU_callbackQueue_responseHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processUnifiedAccessStepupAPDU:callbackQueue:responseHandler:");
}

id objc_msgSend_protocolInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "protocolInterface");
}

id objc_msgSend_publicTransactionHash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publicTransactionHash");
}

id objc_msgSend_pupi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pupi");
}

id objc_msgSend_purpleTrustAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "purpleTrustAccess");
}

id objc_msgSend_pushB0LPToSMC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pushB0LPToSMC:");
}

id objc_msgSend_pushIndexToPMU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pushIndexToPMU:");
}

id objc_msgSend_pushSignedRF_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pushSignedRF:");
}

id objc_msgSend_queryISDCounter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryISDCounter:");
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queryMultiTagState_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryMultiTagState:error:");
}

id objc_msgSend_queryPMUCapability(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryPMUCapability");
}

id objc_msgSend_queryTagNDEFCapability_hasNdefAbility_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryTagNDEFCapability:hasNdefAbility:error:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue");
}

id objc_msgSend_queueResume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueResume");
}

id objc_msgSend_queueSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueSession:");
}

id objc_msgSend_queueSuspend(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueSuspend");
}

id objc_msgSend_radioToggle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "radioToggle");
}

id objc_msgSend_rawGPState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rawGPState");
}

id objc_msgSend_readAPDU(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readAPDU");
}

id objc_msgSend_readAPDUWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readAPDUWithCompletion:");
}

id objc_msgSend_readApduAndReturnError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readApduAndReturnError:");
}

id objc_msgSend_readBinary_offset_tag_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readBinary:offset:tag:error:");
}

id objc_msgSend_readFromBridge_fragmentationSupport_response_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readFromBridge:fragmentationSupport:response:");
}

id objc_msgSend_readNdefDataFromTag_messageSize_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readNdefDataFromTag:messageSize:error:");
}

id objc_msgSend_readOnConnected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readOnConnected");
}

id objc_msgSend_readerIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readerIdentifier");
}

id objc_msgSend_readerInternalAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readerInternalAccess");
}

id objc_msgSend_readerModeProtectionActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readerModeProtectionActive");
}

id objc_msgSend_readerModeStoppedShouldCooloffRun(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readerModeStoppedShouldCooloffRun");
}

id objc_msgSend_readerModeWithFD_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readerModeWithFD:");
}

id objc_msgSend_readerOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readerOperations");
}

id objc_msgSend_readerPurposeString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readerPurposeString");
}

id objc_msgSend_readerWithLPCD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readerWithLPCD");
}

id objc_msgSend_readerWithLPCD_fieldDetect_pollDuration_ecp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readerWithLPCD:fieldDetect:pollDuration:ecp:");
}

id objc_msgSend_readyForPayment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readyForPayment");
}

id objc_msgSend_readyForVAS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readyForVAS");
}

id objc_msgSend_receivedSecureElementReaderData_forApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receivedSecureElementReaderData:forApplet:");
}

id objc_msgSend_reconfigureDynamicTransitRF_withOverride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reconfigureDynamicTransitRF:withOverride:");
}

id objc_msgSend_reconfigureWithArray_restoreAuthorization_updateStorage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reconfigureWithArray:restoreAuthorization:updateStorage:");
}

id objc_msgSend_reconfigureWithArray_updateStorage_avoidChangingRouting_restoreAuthorization_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reconfigureWithArray:updateStorage:avoidChangingRouting:restoreAuthorization:");
}

id objc_msgSend_records(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "records");
}

id objc_msgSend_recordsWithTNF_type_identifier_payload_chunkSize_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordsWithTNF:type:identifier:payload:chunkSize:outError:");
}

id objc_msgSend_recoverSLAM(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recoverSLAM");
}

id objc_msgSend_redactLogging_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "redactLogging:");
}

id objc_msgSend_referenceCounter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "referenceCounter");
}

id objc_msgSend_refreshISDCounter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshISDCounter");
}

id objc_msgSend_refreshSecureElementInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshSecureElementInfo");
}

id objc_msgSend_refreshUserDefaultsOverride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshUserDefaultsOverride");
}

id objc_msgSend_registerClientWithDescription_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerClientWithDescription:error:");
}

id objc_msgSend_registerForEvents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForEvents");
}

id objc_msgSend_registerForNotificationsWithError_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForNotificationsWithError:handler:");
}

id objc_msgSend_registerObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerObserver:");
}

id objc_msgSend_registerSpringBoardActionHandler_withIdentifierCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerSpringBoardActionHandler:withIdentifierCallback:");
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_releaseAssertion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "releaseAssertion");
}

id objc_msgSend_releaseECPOption_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "releaseECPOption:");
}

id objc_msgSend_releaseObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "releaseObjects");
}

id objc_msgSend_releasePowerAssertion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "releasePowerAssertion:");
}

id objc_msgSend_releasePowerAssertion_logFaultOnOverRelease_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "releasePowerAssertion:logFaultOnOverRelease:");
}

id objc_msgSend_releaseRemoteObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "releaseRemoteObject");
}

id objc_msgSend_remoteAssertion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteAssertion");
}

id objc_msgSend_remoteObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteObject");
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteObjectProxy");
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_removeActionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeActionHandler:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeAllPersistentFieldObservers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllPersistentFieldObservers");
}

id objc_msgSend_removeAppletsFromConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAppletsFromConfig:");
}

id objc_msgSend_removeFieldDetectSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFieldDetectSession:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:forKeyPath:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removePersistentFieldObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePersistentFieldObserver:");
}

id objc_msgSend_replaceBytesInRange_withBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceBytesInRange:withBytes:");
}

id objc_msgSend_replaceBytesInRange_withBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceBytesInRange:withBytes:length:");
}

id objc_msgSend_requestAutoBugCapture_withSubType_withSubTypeContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestAutoBugCapture:withSubType:withSubTypeContext:");
}

id objc_msgSend_requestUserSettingsNotificationWithCompletion_popupInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestUserSettingsNotificationWithCompletion:popupInterval:");
}

id objc_msgSend_requireSuppressDefaultAppPresentmentAssertion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requireSuppressDefaultAppPresentmentAssertion");
}

id objc_msgSend_resetBytesInRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetBytesInRange:");
}

id objc_msgSend_resetCounter_userToken_outWriteCount_appletResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetCounter:userToken:outWriteCount:appletResult:");
}

id objc_msgSend_resolvedAuthorization(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resolvedAuthorization");
}

id objc_msgSend_response(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "response");
}

id objc_msgSend_responseWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "responseWithData:");
}

id objc_msgSend_restartDiscovery(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restartDiscovery");
}

id objc_msgSend_restrictedMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restrictedMode");
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "result");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resume");
}

id objc_msgSend_resume_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resume:");
}

id objc_msgSend_resumeDiscovery(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resumeDiscovery");
}

id objc_msgSend_retainECPOption_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retainECPOption:");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_rfTechnology(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rfTechnology");
}

id objc_msgSend_role(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "role");
}

id objc_msgSend_routingOff(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routingOff");
}

id objc_msgSend_routingOffWithFD_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routingOffWithFD:");
}

id objc_msgSend_routingOffWithFD_ecp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routingOffWithFD:ecp:");
}

id objc_msgSend_rsaCertificate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rsaCertificate");
}

id objc_msgSend_runService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runService:");
}

id objc_msgSend_schedulePreRegisteredActivity_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "schedulePreRegisteredActivity:callback:");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheme");
}

id objc_msgSend_seLoggingSessionAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seLoggingSessionAccess");
}

id objc_msgSend_seName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seName");
}

id objc_msgSend_seOS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seOS");
}

id objc_msgSend_seProxyListener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seProxyListener");
}

id objc_msgSend_seSessionAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seSessionAccess");
}

id objc_msgSend_seType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seType");
}

id objc_msgSend_secureElementAsReaderMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "secureElementAsReaderMode");
}

id objc_msgSend_secureElementDidExitRestrictedMode_os_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "secureElementDidExitRestrictedMode:os:");
}

id objc_msgSend_secureElementReturnedRestrictedMode_os_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "secureElementReturnedRestrictedMode:os:");
}

id objc_msgSend_secureElementWithIdentifier_didChangeRestrictedMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "secureElementWithIdentifier:didChangeRestrictedMode:");
}

id objc_msgSend_secureElementWrapper(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "secureElementWrapper");
}

id objc_msgSend_securityInfoArrayFromData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "securityInfoArrayFromData:");
}

id objc_msgSend_seid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seid");
}

id objc_msgSend_seidForApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seidForApplet:");
}

id objc_msgSend_select_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "select:error:");
}

id objc_msgSend_selectApplet_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectApplet:error:");
}

id objc_msgSend_selectApplets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectApplets:");
}

id objc_msgSend_selectByName_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectByName:error:");
}

id objc_msgSend_selectCRSWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectCRSWithError:");
}

id objc_msgSend_selectInstance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectInstance");
}

id objc_msgSend_selectPRCIDApp_fromTag_resolvedAid_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectPRCIDApp:fromTag:resolvedAid:outError:");
}

id objc_msgSend_selectPaceApp_fromTag_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectPaceApp:fromTag:outError:");
}

id objc_msgSend_selectPaceApp_fromTag_resolvedAid_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectPaceApp:fromTag:resolvedAid:outError:");
}

id objc_msgSend_selectStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectStatus");
}

id objc_msgSend_selectTag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectTag");
}

id objc_msgSend_selectedAID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectedAID");
}

id objc_msgSend_sendAPDU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendAPDU:");
}

id objc_msgSend_sendAPDU_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendAPDU:completion:");
}

id objc_msgSend_sendAPDU_startReadOnCompletion_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendAPDU:startReadOnCompletion:completion:");
}

id objc_msgSend_sendCommandWithClass_instruction_p1_p2_data_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:error:");
}

id objc_msgSend_sendCommandWithClass_instruction_p1_p2_data_expectedLength_toOS_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:error:");
}

id objc_msgSend_sendCommandWithClass_instruction_p1_p2_data_expectedLength_toOS_useExtendedLength_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendCommandWithClass:instruction:p1:p2:data:expectedLength:toOS:useExtendedLength:error:");
}

id objc_msgSend_sendDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendDictionary:");
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendEvent:");
}

id objc_msgSend_sendRepeatingExtendedCommandWithClass_instruction_p1_firstP2_nextP2_expectedLength_toOS_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRepeatingExtendedCommandWithClass:instruction:p1:firstP2:nextP2:expectedLength:toOS:error:");
}

id objc_msgSend_sendSimpleEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendSimpleEvent:");
}

id objc_msgSend_sendSimpleEvent_objectNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendSimpleEvent:objectNumber:");
}

id objc_msgSend_sendSimpleEvent_objectString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendSimpleEvent:objectString:");
}

id objc_msgSend_sendXpcNotificationEventWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendXpcNotificationEventWithDictionary:");
}

id objc_msgSend_sendXpcNotificationEventWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendXpcNotificationEventWithString:");
}

id objc_msgSend_sequenceCounter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sequenceCounter");
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serialNumber");
}

id objc_msgSend_serialNumberAsData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serialNumberAsData");
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "server");
}

id objc_msgSend_serviceType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceType");
}

id objc_msgSend_serviceWithURI_minWaitTime_maxWaitTimeExtension_maxMessageSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceWithURI:minWaitTime:maxWaitTimeExtension:maxMessageSize:");
}

id objc_msgSend_services(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "services");
}

id objc_msgSend_sesdEventPublisher(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sesdEventPublisher");
}

id objc_msgSend_seshatAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seshatAccess");
}

id objc_msgSend_sessionConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionConfig");
}

id objc_msgSend_sessionConfigWithUIMode_sessionType_initialScanText_vasPass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionConfigWithUIMode:sessionType:initialScanText:vasPass:");
}

id objc_msgSend_sessionID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionID");
}

id objc_msgSend_sessionResumeField(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionResumeField");
}

id objc_msgSend_sessionTimeLimit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionTimeLimit");
}

id objc_msgSend_sessionType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionType");
}

id objc_msgSend_sessionTypeString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionTypeString:");
}

id objc_msgSend_sessionUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionUID");
}

id objc_msgSend_setActiveApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveApplet:");
}

id objc_msgSend_setActiveApplets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveApplets:");
}

id objc_msgSend_setActiveKeys_allowBackgroundTransactions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveKeys:allowBackgroundTransactions:");
}

id objc_msgSend_setActiveKeys_onApplet_allowBackgroundTransactions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveKeys:onApplet:allowBackgroundTransactions:");
}

id objc_msgSend_setAlwaysOn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAlwaysOn:");
}

id objc_msgSend_setApplicationIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setApplicationIdentifier:");
}

id objc_msgSend_setAuthRandomEntangled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthRandomEntangled");
}

id objc_msgSend_setBackgroundTagReadCustomECP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBackgroundTagReadCustomECP:");
}

id objc_msgSend_setBackgroundTagReadEcpOption_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBackgroundTagReadEcpOption:");
}

id objc_msgSend_setBool_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBool:forKey:");
}

id objc_msgSend_setBootHistory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBootHistory:");
}

id objc_msgSend_setByAddingObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setByAddingObject:");
}

id objc_msgSend_setByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setByAddingObjectsFromArray:");
}

id objc_msgSend_setCachedAppletUpdateCounter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedAppletUpdateCounter:");
}

id objc_msgSend_setCachedAppletsUnfiltered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedAppletsUnfiltered:");
}

id objc_msgSend_setCachedBeforeRFReset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedBeforeRFReset:");
}

id objc_msgSend_setCardState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCardState:");
}

id objc_msgSend_setCategory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCategory:");
}

id objc_msgSend_setCerts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCerts:");
}

id objc_msgSend_setChallenge_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChallenge:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setClientId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientId:");
}

id objc_msgSend_setConfirmationBlobHash_withSignature_version_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfirmationBlobHash:withSignature:version:");
}

id objc_msgSend_setConnectedTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnectedTag:");
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnection:");
}

id objc_msgSend_setCounterLimit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCounterLimit:");
}

id objc_msgSend_setCounterValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCounterValue:");
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setData:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDebugContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDebugContext:");
}

id objc_msgSend_setDefaultAppIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDefaultAppIdentifier:");
}

id objc_msgSend_setDeferredActivationApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeferredActivationApplet:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDeviceHandoverSelectError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceHandoverSelectError:");
}

id objc_msgSend_setDisableAutoStartOnField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableAutoStartOnField:");
}

id objc_msgSend_setDiscretionaryData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiscretionaryData:");
}

id objc_msgSend_setDispatchQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDispatchQueue:");
}

id objc_msgSend_setDouble_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDouble:forKey:");
}

id objc_msgSend_setDoubleClickEnable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDoubleClickEnable:");
}

id objc_msgSend_setDriverCallbacks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDriverCallbacks");
}

id objc_msgSend_setDriverWrapper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDriverWrapper:");
}

id objc_msgSend_setEcpBroadcastConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEcpBroadcastConfig:");
}

id objc_msgSend_setEmulationOnSessionStart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEmulationOnSessionStart:");
}

id objc_msgSend_setEnableDebug_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnableDebug:");
}

id objc_msgSend_setEndowmentNamespaces_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndowmentNamespaces:");
}

id objc_msgSend_setEventHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEventHandler:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setFailForwardDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFailForwardDelegate:");
}

id objc_msgSend_setFieldDetectTransaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFieldDetectTransaction:");
}

id objc_msgSend_setFieldHandlingInSuspension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFieldHandlingInSuspension:");
}

id objc_msgSend_setFieldPresent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFieldPresent:");
}

id objc_msgSend_setForceExpressExit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceExpressExit:");
}

id objc_msgSend_setGetCurrentPower_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGetCurrentPower:");
}

id objc_msgSend_setHomed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHomed:");
}

id objc_msgSend_setHost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHost:");
}

id objc_msgSend_setHostCards_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHostCards:");
}

id objc_msgSend_setHostEmulationEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHostEmulationEnabled:");
}

id objc_msgSend_setHour_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHour:");
}

id objc_msgSend_setISO15693DataRate_forTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setISO15693DataRate:forTag:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInfo:");
}

id objc_msgSend_setInitialPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInitialPayload:");
}

id objc_msgSend_setInstanceACL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceACL:");
}

id objc_msgSend_setInstanceAID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceAID:");
}

id objc_msgSend_setInteger_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInteger:forKey:");
}

id objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterface:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsContinuous_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsContinuous:");
}

id objc_msgSend_setIsEligible_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsEligible:");
}

id objc_msgSend_setIsInstanceSelected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsInstanceSelected:");
}

id objc_msgSend_setKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKey:");
}

id objc_msgSend_setKeyAttestation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKeyAttestation:");
}

id objc_msgSend_setKeyAttestationAuthority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKeyAttestationAuthority:");
}

id objc_msgSend_setKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKeys:");
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLength:");
}

id objc_msgSend_setLocalValidations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalValidations:");
}

id objc_msgSend_setManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setManager:");
}

id objc_msgSend_setMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMap:");
}

id objc_msgSend_setMatching_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMatching:");
}

id objc_msgSend_setMaxMessageSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxMessageSize:");
}

id objc_msgSend_setMaxWaitTimeExtension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxWaitTimeExtension:");
}

id objc_msgSend_setMinWaitTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinWaitTime:");
}

id objc_msgSend_setMinute_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinute:");
}

id objc_msgSend_setMobileCapabilities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMobileCapabilities:");
}

id objc_msgSend_setMonth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMonth:");
}

id objc_msgSend_setNotificationCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNotificationCallback:");
}

id objc_msgSend_setNotificationCategories_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNotificationCategories:");
}

id objc_msgSend_setNotificationConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNotificationConfig:");
}

id objc_msgSend_setNotificationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNotificationType:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setParentToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParentToken:");
}

id objc_msgSend_setPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPayload:");
}

id objc_msgSend_setPaymentAIDList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPaymentAIDList:");
}

id objc_msgSend_setPaymentResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPaymentResponse:");
}

id objc_msgSend_setPlasticCardMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPlasticCardMode:");
}

id objc_msgSend_setPlasticCardMode_withApplet_withPackage_withModule_serialNumber_transceiver_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPlasticCardMode:withApplet:withPackage:withModule:serialNumber:transceiver:error:");
}

id objc_msgSend_setPollingConfig_tagNotificationConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPollingConfig:tagNotificationConfig:");
}

id objc_msgSend_setPollingMask_tagConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPollingMask:tagConfig:");
}

id objc_msgSend_setPowerBudgetUpdateMinimumPeriod_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPowerBudgetUpdateMinimumPeriod:");
}

id objc_msgSend_setPowerConsumptionReporter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPowerConsumptionReporter:");
}

id objc_msgSend_setPowerLevels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPowerLevels:");
}

id objc_msgSend_setPredicates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPredicates:");
}

id objc_msgSend_setPrimitiveLocalValidation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimitiveLocalValidation:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setPublicKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPublicKey:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setReadOnConnected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReadOnConnected:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRemovalHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemovalHandler:");
}

id objc_msgSend_setRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequest:");
}

id objc_msgSend_setRouting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRouting:");
}

id objc_msgSend_setRoutingConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoutingConfig:");
}

id objc_msgSend_setSEPCerts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSEPCerts:");
}

id objc_msgSend_setScheme_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScheme:");
}

id objc_msgSend_setSeProxyListener_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSeProxyListener:");
}

id objc_msgSend_setSecureElementWrapper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSecureElementWrapper:");
}

id objc_msgSend_setSelected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSelected:");
}

id objc_msgSend_setServiceNotificationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceNotificationHandler:");
}

id objc_msgSend_setServiceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceType:");
}

id objc_msgSend_setSessionID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSessionID:");
}

id objc_msgSend_setSessionResumeField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSessionResumeField:");
}

id objc_msgSend_setSignResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSignResponse:");
}

id objc_msgSend_setStartOnFieldList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartOnFieldList:");
}

id objc_msgSend_setStateDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStateDescriptor:");
}

id objc_msgSend_setStatusCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStatusCode:");
}

id objc_msgSend_setStsHelper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStsHelper:");
}

id objc_msgSend_setSubjectIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubjectIdentifier:");
}

id objc_msgSend_setSuspendOnDisconnect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSuspendOnDisconnect:");
}

id objc_msgSend_setSuspendOnFieldList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSuspendOnFieldList:");
}

id objc_msgSend_setTagUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTagUUID:");
}

id objc_msgSend_setTnepHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTnepHandler:");
}

id objc_msgSend_setToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setToken:");
}

id objc_msgSend_setTransitionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransitionHandler:");
}

id objc_msgSend_setTrustDB_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTrustDB:");
}

id objc_msgSend_setTrustDBApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTrustDBApplet:");
}

id objc_msgSend_setTrustObjectInternalRawNSData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTrustObjectInternalRawNSData:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setType:");
}

id objc_msgSend_setTypeATagDataRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTypeATagDataRate:");
}

id objc_msgSend_setTypeNameFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTypeNameFormat:");
}

id objc_msgSend_setUiInvalidationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUiInvalidationHandler:");
}

id objc_msgSend_setUid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUid:");
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUnderlyingQueue:");
}

id objc_msgSend_setUnfiltered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUnfiltered:");
}

id objc_msgSend_setUnpairedState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUnpairedState");
}

id objc_msgSend_setUpdateHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUpdateHandler:");
}

id objc_msgSend_setUpgradeChecked_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUpgradeChecked:");
}

id objc_msgSend_setUri_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUri:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValues:");
}

id objc_msgSend_setVasData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVasData:");
}

id objc_msgSend_setWallet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWallet:");
}

id objc_msgSend_setWalletDomain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWalletDomain:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setYear_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setYear:");
}

id objc_msgSend_setupInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupInterface");
}

id objc_msgSend_sharedCALogger(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedCALogger");
}

id objc_msgSend_sharedCPMSAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedCPMSAgent");
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedConnection");
}

id objc_msgSend_sharedHardwareManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedHardwareManager");
}

id objc_msgSend_sharedInstanceWithClientRepresentation_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedInstanceWithClientRepresentation:error:");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedManager");
}

id objc_msgSend_sharedPowerAssertion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedPowerAssertion");
}

id objc_msgSend_shouldHandleSecureElementTransactionData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldHandleSecureElementTransactionData");
}

id objc_msgSend_signResponse(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signResponse");
}

id objc_msgSend_signResponseWithRawData_counterValueData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signResponseWithRawData:counterValueData:");
}

id objc_msgSend_signalUnifiedAccessStepUpWithEventDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signalUnifiedAccessStepUpWithEventDictionary:");
}

id objc_msgSend_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:");
}

id objc_msgSend_signingKeyType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signingKeyType");
}

id objc_msgSend_signpostId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signpostId");
}

id objc_msgSend_signupUrl(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signupUrl");
}

id objc_msgSend_silentType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "silentType");
}

id objc_msgSend_siliconName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "siliconName");
}

id objc_msgSend_siliconVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "siliconVersion");
}

id objc_msgSend_simpleTLVsWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "simpleTLVsWithData:");
}

id objc_msgSend_simpleTLVsWithTag_fromData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "simpleTLVsWithTag:fromData:");
}

id objc_msgSend_simulateCrash_reason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "simulateCrash:reason:");
}

id objc_msgSend_skipMifareClassification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skipMifareClassification");
}

id objc_msgSend_snapshotWithSignature_delay_events_payload_actions_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snapshotWithSignature:delay:events:payload:actions:reply:");
}

id objc_msgSend_softResetSE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "softResetSE:");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "source");
}

id objc_msgSend_spIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "spIdentifier");
}

id objc_msgSend_stackLoaded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stackLoaded:");
}

id objc_msgSend_stackUnloaded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stackUnloaded");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "start");
}

id objc_msgSend_start_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "start:");
}

id objc_msgSend_startCardEmulationWithType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startCardEmulationWithType:");
}

id objc_msgSend_startDefaultMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startDefaultMode");
}

id objc_msgSend_startDefaultModeAndKeepSEOn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startDefaultModeAndKeepSEOn:");
}

id objc_msgSend_startHCEProcessingWithDevice_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startHCEProcessingWithDevice:completion:");
}

id objc_msgSend_startISO18013WithConnectionHandoverConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startISO18013WithConnectionHandoverConfiguration");
}

id objc_msgSend_startISO18013WithConnectionHandoverConfiguration_type_delegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startISO18013WithConnectionHandoverConfiguration:type:delegate:");
}

id objc_msgSend_startOnFieldList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startOnFieldList");
}

id objc_msgSend_startPublisherWithXPCQueue_eventSendQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startPublisherWithXPCQueue:eventSendQueue:");
}

id objc_msgSend_startSEProxyListener_parameters_workQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startSEProxyListener:parameters:workQueue:");
}

id objc_msgSend_startTNEPDeviceWithServices_optionalRecords_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startTNEPDeviceWithServices:optionalRecords:callback:");
}

id objc_msgSend_startTNEPReaderWithCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startTNEPReaderWithCallback:");
}

id objc_msgSend_startTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startTimer:");
}

id objc_msgSend_startTimer_leeway_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startTimer:leeway:");
}

id objc_msgSend_startWiredMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startWiredMode");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "state");
}

id objc_msgSend_stateInformationWithRedirectInfo_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stateInformationWithRedirectInfo:completion:");
}

id objc_msgSend_staticReaderEngagementDiscovered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "staticReaderEngagementDiscovered:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "status");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stop");
}

id objc_msgSend_stopEmulationAndConfigWithRouting_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopEmulationAndConfigWithRouting:completion:");
}

id objc_msgSend_stopFury(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopFury");
}

id objc_msgSend_stopNowAndLeveHWEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopNowAndLeveHWEnabled:");
}

id objc_msgSend_stopSEProxyListener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopSEProxyListener");
}

id objc_msgSend_stopTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopTimer");
}

id objc_msgSend_storePairedState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storePairedState");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringFromDate_timeZone_formatOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringFromDate:timeZone:formatOptions:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strongToWeakObjectsMapTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "strongToWeakObjectsMapTable");
}

id objc_msgSend_stsHelper(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stsHelper");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_subjectIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subjectIdentifier");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_supportPayment_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportPayment:");
}

id objc_msgSend_supportedTechnologies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportedTechnologies");
}

id objc_msgSend_supportedTypeFSystem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportedTypeFSystem");
}

id objc_msgSend_suppressTypeA(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suppressTypeA");
}

id objc_msgSend_suppressTypeB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suppressTypeB");
}

id objc_msgSend_surfSessionAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "surfSessionAccess");
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspend");
}

id objc_msgSend_suspend_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspend:");
}

id objc_msgSend_suspendOnDisconnect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendOnDisconnect");
}

id objc_msgSend_suspendOnFieldList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendOnFieldList");
}

id objc_msgSend_suspendWithInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendWithInfo:");
}

id objc_msgSend_suspensionRequestor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspensionRequestor");
}

id objc_msgSend_suspensionStateUpdate_triggeredByField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspensionStateUpdate:triggeredByField:");
}

id objc_msgSend_switchToSecureElementWrapperForApplet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "switchToSecureElementWrapperForApplet:");
}

id objc_msgSend_switchToSession_withToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "switchToSession:withToken:");
}

id objc_msgSend_syncSendSimpleEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syncSendSimpleEvent:");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "synchronize");
}

id objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_systemOSSerialNumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemOSSerialNumber");
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tag");
}

id objc_msgSend_tagA(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tagA");
}

id objc_msgSend_tagB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tagB");
}

id objc_msgSend_tagDetected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tagDetected");
}

id objc_msgSend_tagDiscoveryConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tagDiscoveryConfig");
}

id objc_msgSend_tagF(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tagF");
}

id objc_msgSend_tagID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tagID");
}

id objc_msgSend_taskState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskState");
}

id objc_msgSend_tciArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tciArray");
}

id objc_msgSend_technology(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "technology");
}

id objc_msgSend_temperatureChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "temperatureChanged:");
}

id objc_msgSend_temporaryDirectory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "temporaryDirectory");
}

id objc_msgSend_terminalCap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminalCap");
}

id objc_msgSend_terminalMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminalMode");
}

id objc_msgSend_terminalProtocol(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminalProtocol");
}

id objc_msgSend_terminalSubType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminalSubType");
}

id objc_msgSend_terminalType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminalType");
}

id objc_msgSend_thermalPressureBackoff(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "thermalPressureBackoff");
}

id objc_msgSend_thermalPressureCritical(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "thermalPressureCritical");
}

id objc_msgSend_thermalPressureNominal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "thermalPressureNominal");
}

id objc_msgSend_thermalStateChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "thermalStateChanged:");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeLimitedSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeLimitedSession");
}

id objc_msgSend_tnepHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tnepHandler");
}

id objc_msgSend_tnepReaderDeselectWithCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tnepReaderDeselectWithCallback:");
}

id objc_msgSend_tnepReaderRestartPollingWithCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tnepReaderRestartPollingWithCallback:");
}

id objc_msgSend_tnepReaderSelectService_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tnepReaderSelectService:callback:");
}

id objc_msgSend_tnepReaderSend_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tnepReaderSend:callback:");
}

id objc_msgSend_tnepReaderServicesAborted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tnepReaderServicesAborted:");
}

id objc_msgSend_tnepReaderServicesDiscovered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tnepReaderServicesDiscovered:");
}

id objc_msgSend_tnepServiceInvalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tnepServiceInvalidate");
}

id objc_msgSend_tnepTagDeviceDeselected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tnepTagDeviceDeselected:");
}

id objc_msgSend_tnepTagDeviceNDEFMessageReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tnepTagDeviceNDEFMessageReceived:");
}

id objc_msgSend_tnepTagDeviceSelected_respondHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tnepTagDeviceSelected:respondHandler:");
}

id objc_msgSend_tnepTagDeviceSendNDEFMessage_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tnepTagDeviceSendNDEFMessage:callback:");
}

id objc_msgSend_toSystemOS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toSystemOS");
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "token");
}

id objc_msgSend_topUpRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "topUpRequest");
}

id objc_msgSend_totalFieldDetectSessions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalFieldDetectSessions");
}

id objc_msgSend_totalPersistentClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalPersistentClient");
}

id objc_msgSend_touchSystemReady_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "touchSystemReady:");
}

id objc_msgSend_transactionAmount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transactionAmount");
}

id objc_msgSend_transactionCountry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transactionCountry");
}

id objc_msgSend_transactionCurrency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transactionCurrency");
}

id objc_msgSend_transactionDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transactionDate");
}

id objc_msgSend_transactionIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transactionIdentifier");
}

id objc_msgSend_transceive_tag_maxTimeout_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transceive:tag:maxTimeout:error:");
}

id objc_msgSend_transceiveData_toOS_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transceiveData:toOS:error:");
}

id objc_msgSend_transferRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transferRequest");
}

id objc_msgSend_transitionReasons(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transitionReasons");
}

id objc_msgSend_triggerBurnoutTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerBurnoutTimer");
}

id objc_msgSend_triggerDelayedWake_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerDelayedWake:");
}

id objc_msgSend_triggerFailForward(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerFailForward");
}

id objc_msgSend_triggerHammerfestRecoveryAt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerHammerfestRecoveryAt:");
}

id objc_msgSend_trustDB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trustDB");
}

id objc_msgSend_trustDBApplet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trustDBApplet");
}

id objc_msgSend_trustObjectInternalRawNSData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trustObjectInternalRawNSData");
}

id objc_msgSend_trustedISO7816AidList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trustedISO7816AidList");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "type");
}

id objc_msgSend_typeFSystemCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "typeFSystemCode");
}

id objc_msgSend_typeNameFormat(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "typeNameFormat");
}

id objc_msgSend_uiActivated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uiActivated");
}

id objc_msgSend_uiMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uiMode");
}

id objc_msgSend_uiShown(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uiShown");
}

id objc_msgSend_uid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uid");
}

id objc_msgSend_unarchivedArrayOfObjectsOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedArrayOfObjectsOfClasses:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_unfiltered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unfiltered");
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unlock");
}

id objc_msgSend_unpredictableNumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unpredictableNumber");
}

id objc_msgSend_unregisterForEvents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterForEvents");
}

id objc_msgSend_unregisterObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterObserver:");
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedCharValue");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongValue");
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedShortValue");
}

id objc_msgSend_updateAllPowerCounters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAllPowerCounters");
}

id objc_msgSend_updateAnalyticsGeneralTransactionStatistics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAnalyticsGeneralTransactionStatistics:");
}

id objc_msgSend_updateAppletCountOnMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAppletCountOnMap:");
}

id objc_msgSend_updateAppletEntitiesWithConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAppletEntitiesWithConfig:");
}

id objc_msgSend_updateConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateConfiguration:");
}

id objc_msgSend_updateESEExpressEntitiesWithConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateESEExpressEntitiesWithConfig:");
}

id objc_msgSend_updateExpressAppletNumbers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateExpressAppletNumbers");
}

id objc_msgSend_updateExpressConfigLimitedTo_andActivate_hasChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateExpressConfigLimitedTo:andActivate:hasChanged:");
}

id objc_msgSend_updateGeneralDeviceStatistic_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateGeneralDeviceStatistic:");
}

id objc_msgSend_updateSeInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateSeInfo:");
}

id objc_msgSend_updateStorage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateStorage");
}

id objc_msgSend_upgradeChecked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "upgradeChecked");
}

id objc_msgSend_upgradeKey_inputData_outWriteCount_appletResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "upgradeKey:inputData:outWriteCount:appletResult:");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uppercaseString");
}

id objc_msgSend_uri(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uri");
}

id objc_msgSend_useFilteredApplets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useFilteredApplets");
}

id objc_msgSend_useUnfilteredApplets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useUnfilteredApplets");
}

id objc_msgSend_user(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "user");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userInterventionRequired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userInterventionRequired");
}

id objc_msgSend_validateAID_allowsPrefixMatch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateAID:allowsPrefixMatch:");
}

id objc_msgSend_validateAID_withSelectResponse_outRealAid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateAID:withSelectResponse:outRealAid:");
}

id objc_msgSend_validateAndUpdateExpressConfig_avoidChangingRouting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateAndUpdateExpressConfig:avoidChangingRouting:");
}

id objc_msgSend_validateDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateDictionary:");
}

id objc_msgSend_validateEntitlements_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateEntitlements:");
}

id objc_msgSend_validateISO15693TagAccessWithManufacturerCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateISO15693TagAccessWithManufacturerCode:");
}

id objc_msgSend_validateISO15693TagAcesssWithUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateISO15693TagAcesssWithUID:");
}

id objc_msgSend_validateReceivedAPDU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateReceivedAPDU:");
}

id objc_msgSend_validateSystemCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateSystemCode:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "value");
}

id objc_msgSend_valueAsHexString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueAsHexString");
}

id objc_msgSend_valueAsString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueAsString");
}

id objc_msgSend_valueAsUnsignedLong(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueAsUnsignedLong");
}

id objc_msgSend_valueAsUnsignedShort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueAsUnsignedShort");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueWithPointer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueWithPointer:");
}

id objc_msgSend_vasData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vasData");
}

id objc_msgSend_vasPasses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vasPasses");
}

id objc_msgSend_waitForSafeTransactionCompletion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForSafeTransactionCompletion");
}

id objc_msgSend_wallet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wallet");
}

id objc_msgSend_walletBundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "walletBundleIdentifier");
}

id objc_msgSend_walletDomain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "walletDomain");
}

id objc_msgSend_wantsCardEmulation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wantsCardEmulation");
}

id objc_msgSend_wantsExpress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wantsExpress");
}

id objc_msgSend_wantsIsoDepToHost(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wantsIsoDepToHost");
}

id objc_msgSend_wantsLPCD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wantsLPCD");
}

id objc_msgSend_wantsLPCD_expressForEmbedded_hostCardEmulation_fieldDetect_lpcdEcpFrame_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wantsLPCD:expressForEmbedded:hostCardEmulation:fieldDetect:lpcdEcpFrame:");
}

id objc_msgSend_wantsMultiTag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wantsMultiTag");
}

id objc_msgSend_wantsReader(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wantsReader");
}

id objc_msgSend_wantsSEReader(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wantsSEReader");
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "weakObjectsHashTable");
}

id objc_msgSend_whitelistChecker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "whitelistChecker");
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "whitespaceAndNewlineCharacterSet");
}

id objc_msgSend_willChangeValueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "willChangeValueForKey:");
}

id objc_msgSend_willStartSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "willStartSession");
}

id objc_msgSend_workQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "workQueue");
}

id objc_msgSend_writeToBridge_fragmentationSupport_response_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToBridge:fragmentationSupport:response:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToURL_atomically_encoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToURL:atomically:encoding:error:");
}

id objc_msgSend_writeToURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToURL:error:");
}

id objc_msgSend_xpcEventNotificationQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "xpcEventNotificationQueue");
}

id objc_msgSend_year(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "year");
}

id objc_msgSend_zero(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "zero");
}
