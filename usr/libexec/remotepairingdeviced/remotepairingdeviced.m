void sub_10000DCAC()
{
  sub_10000DCCC();
}

void sub_10000DCCC()
{
  uint64_t v0;

  nw_connection_cancel(*(nw_connection_t *)(v0 + 32));
}

uint64_t sub_10000DCD4()
{
  uint64_t v0;

  sub_10000DCF4();
  return swift_deallocClassInstance(v0, 42, 7);
}

uint64_t sub_10000DCF4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t sub_10000DD18(uint64_t a1)
{
  uint64_t v1;

  return sub_10000DD30(a1, v1);
}

uint64_t sub_10000DD30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = String.utf8CString.getter(*(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
  xpc_set_event("com.apple.bonjour.registration", v3 + 32, a1);
  return swift_release(v3);
}

uint64_t sub_10000DD84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return v1;
}

uint64_t sub_10000DDB4(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);
  uint64_t v4;

  v3 = *(void (**)(uint64_t))(a1 + 32);
  sub_10000E49C();
  v4 = swift_unknownObjectRetain(a2);
  v3(v4);
  sub_1000118D4();
  return swift_unknownObjectRelease(a2);
}

void sub_10000DDF4(NSObject *a1)
{
  nw_tcp_options_set_connection_timeout(a1, 0xAu);
  nw_tcp_options_set_retransmit_connection_drop_time(a1, 0x14u);
  nw_tcp_options_set_enable_keepalive(a1, 1);
  nw_tcp_options_set_keepalive_interval(a1, 0xAu);
  nw_tcp_options_set_keepalive_idle_time(a1, 0x96u);
}

void sub_10000DE44()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_1000138FC();
  OS_nw_connection.receive(minLength:maxLength:peerConnectionInfo:completion:)(v3, v2, 0, v1, v0);
  sub_1000123F0();
}

void OS_nw_connection.receive(minLength:maxLength:peerConnectionInfo:completion:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v5;
  uint32_t v7;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  _QWORD aBlock[5];
  _QWORD *v17;

  if ((a1 & 0x8000000000000000) == 0)
  {
    if (HIDWORD(a1))
    {
LABEL_7:
      sub_1000119C4();
      v14 = "Not enough bits to represent the passed value";
      v15 = 45;
      goto LABEL_8;
    }
    v7 = a2;
    if ((a2 & 0x8000000000000000) == 0)
    {
      if (!HIDWORD(a2))
      {
        v11 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007C5A0, 48);
        v11[2] = a3;
        v11[3] = a1;
        v11[4] = a4;
        v11[5] = a5;
        aBlock[4] = sub_10000E648;
        v17 = v11;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10000E5B4;
        aBlock[3] = &unk_10007C5B8;
        v12 = _Block_copy(aBlock);
        v13 = v17;
        swift_bridgeObjectRetain(a3);
        swift_retain(a5);
        swift_release(v13);
        nw_connection_receive(v5, a1, v7, v12);
        _Block_release(v12);
        return;
      }
      goto LABEL_7;
    }
  }
  sub_1000119C4();
  v14 = "Negative value is not representable";
  v15 = 35;
LABEL_8:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v14, v15, 2, "Swift/Integers.swift", 20);
  __break(1u);
}

void sub_10000DFE4(NSObject *a1, uint64_t a2, uint64_t a3)
{
  sub_10000E004(a1, a2, a3);
}

void sub_10000E004(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  _QWORD v13[5];
  _QWORD *v14;

  v4 = v3;
  v8 = *(NSObject **)(v4 + 32);
  v9 = swift_allocObject(&unk_10007BD48, 24, 7);
  swift_weakInit(v9 + 16, v4);
  v10 = (_QWORD *)swift_allocObject(&unk_10007BD70, 40, 7);
  v10[2] = v9;
  v10[3] = a2;
  v10[4] = a3;
  v13[4] = sub_1000101F0;
  v14 = v10;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100016A04;
  v13[3] = &unk_10007BD88;
  v11 = _Block_copy(v13);
  v12 = v14;
  swift_retain(a3);
  swift_release(v12);
  nw_connection_set_state_changed_handler(v8, v11);
  _Block_release(v11);
  nw_connection_set_queue(v8, a1);
  nw_connection_start(v8);
}

uint64_t sub_10000E108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  LOBYTE(a3) = v6(a2, a3);
  swift_release(v5);
  return a3 & 1;
}

uint64_t sub_10000E15C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10000E164(a1, a2, v2);
}

uint64_t sub_10000E164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  type metadata accessor for XPCDictionary(0);
  v6 = swift_projectBox(a3);
  v7 = Data.init(bytes:count:)(a1, a2);
  v9 = v8;
  swift_beginAccess(v6, v11, 33, 0);
  XPCDictionary.subscript.setter(v7, v9, 0x726F636552545854, 0xE900000000000064);
  swift_endAccess(v11);
  return 1;
}

uint64_t sub_10000E208(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = sub_10000E49C();
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10000E230()
{
  uint64_t v0;

  return sub_10000E23C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10000E23C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_10000E298();
    return swift_release();
  }
  return result;
}

void sub_10000E298()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  os_log_type_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_100011610();
  v2 = v1;
  v3 = sub_1000150C0((uint64_t *)&unk_1000869E0);
  sub_1000115F0();
  __chkstk_darwin(v4, v5);
  sub_100011928();
  v8 = v7 - v6;
  v10 = static os_log_type_t.info.getter(v9);
  v11 = qword_1000886E0;
  v12 = v10;
  if (sub_100016244())
  {
    v13 = (uint8_t *)sub_1000123C4(8);
    *(_DWORD *)v13 = 67109120;
    LODWORD(v28) = v2;
    sub_10003F870((uint64_t)v13, v14, (uint64_t)(v13 + 4));
    sub_10003F824((void *)&_mh_execute_header, v11, v12, "Dispatch source event handler fired for listening socket %d", v13);
    sub_100012398((uint64_t)v13);
  }
  v15 = accept(v2, 0, 0);
  if ((v15 & 0x80000000) != 0)
  {
    v18 = static os_log_type_t.error.getter(v15);
    v19 = qword_1000886E0;
    v20 = v18;
    if (sub_100016244())
    {
      v21 = sub_1000123C4(18);
      v22 = sub_1000123C4(32);
      v28 = v22;
      *(_DWORD *)v21 = 67109378;
      LODWORD(v27) = v2;
      v23 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4, v21 + 4);
      *(_WORD *)(v21 + 8) = 2080;
      static POSIXError.current.getter(v23);
      v24 = String.init<A>(describing:)(v8, v3);
      sub_100010D40(v24, v25, &v28);
      v27 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v21 + 10);
      sub_100015524();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "NetworkControlChannelService: error accepting connection from listening socket %d: %s", (uint8_t *)v21, 0x12u);
      sub_1000135B4(v22);
      sub_100012398(v22);
      sub_100012398(v21);
    }
  }
  else
  {
    v16 = v15;
    v17 = static os_log_type_t.default.getter(v15);
    sub_10001539C(v17, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"NetworkControlChannelService: accepted connected socket from peer", 65);
    sub_10000E49C();
    sub_100012700(0, v0, v16, v0);
  }
  sub_1000138B4();
}

uint64_t sub_10000E49C()
{
  uint64_t v0;

  return swift_retain(v0);
}

void *sub_10000E4BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = a1;
  *(_QWORD *)(v2 - 104) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

uint64_t sub_10000E4C8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_10000E4D0(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  sub_10001513C(a1, a2, v3, a3);
}

uint64_t sub_10000E4D8()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10000E4E0()
{
  return type metadata accessor for DiscoveredPairableHost.State(0);
}

uint64_t sub_10000E4FC()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10000E504()
{
  return type metadata accessor for DispatchQoS(0);
}

uint64_t sub_10000E520()
{
  uint64_t v0;

  return swift_retain(v0);
}

void sub_10000E530()
{
  void *v0;

}

BOOL sub_10000E538(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_10000E548(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 + 8 * a1) = v8 | v7;
  *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v10) = a7;
}

uint64_t sub_10000E568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_10000E578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  a9 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v11);
  return dispatch thunk of static Equatable.== infix(_:_:)(&a9, &a10, v12, v13);
}

uint64_t sub_10000E59C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return TunnelEndpoint.init(id:connection:workQueue:)(v1, v2, v3 - 160, a1);
}

void sub_10000E5B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void (*v10)(void *, uint64_t, uint64_t, uint64_t);
  id v11;

  v10 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  swift_retain(v9);
  v11 = a2;
  swift_unknownObjectRetain(a3);
  swift_unknownObjectRetain(a5);
  v10(a2, a3, a4, a5);
  swift_release(v9);
  sub_100015474();
  swift_unknownObjectRelease(a3);

}

uint64_t sub_10000E648(void *a1, NSObject *a2, char a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10000E654(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t sub_10000E654(void *a1, NSObject *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD, _QWORD, _QWORD), uint64_t a8)
{
  uint64_t v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  _BOOL4 is_final;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  const char *v42;
  unint64_t v44;
  Swift::String v45;
  uint64_t v46;
  void *object;
  Swift::String v48;
  Swift::String v49;
  void *v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD, _QWORD, _QWORD);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __int128 v68;
  unint64_t v69;
  _OWORD v70[2];

  v65 = type metadata accessor for RemotePairingError(0);
  __chkstk_darwin();
  v64 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    goto LABEL_14;
  if (!nw_content_context_get_is_wake_packet(a2))
    goto LABEL_5;
  v17 = static os_log_type_t.default.getter();
  v18 = powerLog.getter();
  if (os_log_type_enabled(v18, v17))
  {
    swift_bridgeObjectRetain_n(a5, 2);
    v62 = a8;
    v19 = swift_slowAlloc(12, -1);
    v61 = a6;
    v20 = (uint8_t *)v19;
    v60 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v70[0] = v60;
    v63 = a7;
    *(_DWORD *)v20 = 136315138;
    v59 = v20 + 4;
    *(_QWORD *)&v68 = a5;
    swift_bridgeObjectRetain(a5);
    v21 = sub_1000150C0(&qword_100086EA0);
    v22 = String.init<A>(describing:)(&v68, v21);
    v24 = v23;
    sub_100010D40(v22, v23, (uint64_t *)v70);
    *(_QWORD *)&v68 = v25;
    a7 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, (char *)&v68 + 8, v59);
    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v18, v17, "Received a wake packet from: %s", v20, 0xCu);
    v26 = v60;
    swift_arrayDestroy(v60, 1);
    swift_slowDealloc(v26, -1, -1);
    v27 = v20;
    a6 = v61;
    swift_slowDealloc(v27, -1, -1);

LABEL_5:
    if ((a3 & 1) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }

  if ((a3 & 1) != 0)
  {
LABEL_6:
    is_final = nw_content_context_get_is_final(a2);
    if (!a4)
      goto LABEL_7;
LABEL_15:
    swift_unknownObjectRetain(a4);
    sub_1000449A4();
    v30 = v36;
    swift_unknownObjectRelease(a4);
LABEL_21:
    v31 = 0;
    v33 = 1;
    goto LABEL_22;
  }
LABEL_14:
  is_final = 0;
  if (a4)
    goto LABEL_15;
LABEL_7:
  if (!a1)
  {
LABEL_17:
    v38 = v64;
    v37 = v65;
    v39 = sub_10000EC00((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    static Error<>.dataCorrupted.getter(v37, v39);
    v40 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v30 = swift_allocError(v37, v40, 0, 0);
    if (is_final)
    {
      v41 = 0xD00000000000002ELL;
      v42 = "Connection closed by remote side with no error";
    }
    else
    {
      v41 = 0xD00000000000002BLL;
      v42 = "Connection received no content and no error";
    }
    Error<>.init(_:_:)(v38, v41, (unint64_t)(v42 - 32) | 0x8000000000000000, v37);
    goto LABEL_21;
  }
  v69 = sub_10000EBC4();
  *(_QWORD *)&v68 = a1;
  sub_100015FB0(&v68, v70);
  sub_100015100((uint64_t)v70, (uint64_t)&v68);
  v29 = a1;
  if ((swift_dynamicCast(&v66, &v68, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
    sub_100010DFC(v70);
    goto LABEL_17;
  }
  v30 = v66;
  v31 = v67;
  v32 = Data.count.getter(v66, v67);
  v33 = v32 < a6;
  if (v32 < a6)
  {
    *(_QWORD *)&v68 = 0;
    *((_QWORD *)&v68 + 1) = 0xE000000000000000;
    if (is_final)
    {
      _StringGuts.grow(_:)(61);
      v34 = 0xD000000000000017;
      v35 = "Connection closed with ";
    }
    else
    {
      _StringGuts.grow(_:)(63);
      v34 = 0xD000000000000019;
      v35 = "Connection received only ";
    }
    v44 = (unint64_t)(v35 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v34);
    v66 = Data.count.getter(v30, v31);
    v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v46 = a6;
    object = v45._object;
    String.append(_:)(v45);
    swift_bridgeObjectRelease(object);
    v48._countAndFlagsBits = 543584032;
    v48._object = (void *)0xE400000000000000;
    String.append(_:)(v48);
    v66 = v46;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v50 = v49._object;
    String.append(_:)(v49);
    swift_bridgeObjectRelease(v50);
    v51._object = (void *)0x800000010006DE60;
    v51._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v51);
    v52 = *((_QWORD *)&v68 + 1);
    v63 = (void (*)(_QWORD, _QWORD, _QWORD))v68;
    v53 = sub_10000EC00((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v54 = v64;
    v55 = v65;
    static Error<>.dataCorrupted.getter(v65, v53);
    v56 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v57 = swift_allocError(v55, v56, 0, 0);
    Error<>.init(_:_:)(v54, v63, v52, v55);
    sub_100015430(v30, v31);
    sub_100010DFC(v70);
    v31 = 0;
    v30 = v57;
  }
  else
  {
    sub_100010DFC(v70);
  }
LABEL_22:
  a7(v30, v31, v33);
  return sub_10000EBB8(v30, v31, v33);
}

uint64_t sub_10000EBB8(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return sub_100015430(a1, a2);
}

unint64_t sub_10000EBC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086E98;
  if (!qword_100086E98)
  {
    v1 = objc_opt_self(OS_dispatch_data);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100086E98);
  }
  return result;
}

uint64_t sub_10000EC00(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10000EC40(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_100014510();
}

void sub_10000EC7C(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = a2(255);
    atomic_store(sub_1000164A8(v3), a1);
  }
  sub_100014510();
}

uint64_t sub_10000ECB0(uint64_t a1, uint64_t a2)
{
  uint64_t IsEnabled;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  os_log_type_t v10;
  NSObject *v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  void *v50;
  size_t v51;
  uint64_t aBlock[5];
  _QWORD *v53;

  swift_retain(a2);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  IsEnabled = remotePairingIsEnabled();
  if (!(_DWORD)IsEnabled)
  {
    v38 = static os_log_type_t.default.getter(IsEnabled);
    v39 = qword_1000886E0;
    v40 = os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, qword_1000886E0, "Not configuring launchd-managed TCP control channel due to RemotePairing support being disabled", 95, 2, &_swiftEmptyArrayStorage);
LABEL_14:
    v44 = static os_log_type_t.error.getter(v40);
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v39, "Not configuring TCP control channel bonjour advertisment as launchd-managed TCP control channels are not enabled", 112, 2, &_swiftEmptyArrayStorage);
    return swift_release_n(a2, 2);
  }
  v5 = static Defaults.deviceAllowTCPControlChannels.getter();
  if ((v5 & 1) == 0)
  {
    v41 = static os_log_type_t.error.getter(v5);
    v39 = qword_1000886E0;
    v40 = os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, qword_1000886E0, "Not configuring launchd-managed TCP control channel due to 'deviceAllowTCPControlChannel' not being set to true", 111, 2, &_swiftEmptyArrayStorage);
    goto LABEL_14;
  }
  v6 = sub_100012F88();
  if (!v6)
  {
    v42 = static os_log_type_t.error.getter(v6);
    v39 = qword_1000886E0;
    v40 = os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, qword_1000886E0, "Not configuring launchd-managed TCP control channel due to no hosts being paired", 80, 2, &_swiftEmptyArrayStorage);
    goto LABEL_14;
  }
  if (!RPIdentity)
  {
    v43 = static os_log_type_t.error.getter(v6);
    v39 = qword_1000886E0;
    v40 = os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, qword_1000886E0, "Not configuring launchd-managed TCP control channel as Rapport is not available and auth tag generation is unsupported", 118, 2, &_swiftEmptyArrayStorage);
    goto LABEL_14;
  }
  v7 = swift_allocObject(&unk_10007BFF0, 24, 7);
  *(_QWORD *)(v7 + 16) = 0;
  v51 = 8;
  v8 = sysctlbyname("security.mac.amfi.developer_mode_status", (void *)(v7 + 16), &v51, 0, 0);
  if (!(_DWORD)v8)
    goto LABEL_9;
  v9 = v8;
  v10 = static os_log_type_t.error.getter(v8);
  v11 = qword_1000886E0;
  if (!os_log_type_enabled((os_log_t)qword_1000886E0, v10))
    goto LABEL_9;
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v13 = swift_slowAlloc(32, -1);
  aBlock[0] = v13;
  *(_DWORD *)v12 = 136446210;
  if (strerror(v9))
  {
    v14 = String.init(cString:)();
    v16 = v15;
    sub_100010D40(v14, v15, aBlock);
    v50 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v12 + 4);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v11, v10, "Failed to fetch developer mode status: (%{public}s)", v12, 0xCu);
    swift_arrayDestroy(v13, 1);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
LABEL_9:
    v49 = *(_QWORD *)(a1 + 40);
    v18 = (_QWORD *)swift_allocObject(&unk_10007C220, 48, 7);
    v18[2] = v7;
    v18[3] = a1;
    v18[4] = sub_10000F890;
    v18[5] = a2;
    aBlock[4] = (uint64_t)sub_10003F788;
    v53 = v18;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10000E208;
    aBlock[3] = (uint64_t)&unk_10007C238;
    v19 = _Block_copy(aBlock);
    v46 = type metadata accessor for DispatchQoS(0);
    v47 = v7;
    v48 = &v45;
    v20 = v7;
    v21 = *(_QWORD *)(v46 - 8);
    v23 = __chkstk_darwin(v20, v22);
    v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain(v23);
    swift_retain(a1);
    v26 = swift_retain(a2);
    static DispatchQoS.unspecified.getter(v26);
    v27 = type metadata accessor for DispatchWorkItemFlags(0);
    v45 = (uint64_t)&v45;
    v28 = *(_QWORD *)(v27 - 8);
    __chkstk_darwin(v27, &type metadata accessor for DispatchWorkItemFlags);
    v30 = (char *)&v45 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    v50 = &_swiftEmptyArrayStorage;
    sub_10000EC40((unint64_t *)&unk_1000853B0, v31, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v33 = v32;
    v34 = sub_1000150C0(&qword_1000850F0);
    sub_10000F4A4((unint64_t *)&qword_1000853C0, &qword_1000850F0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v34, v35, v27, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v25, v30, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v46);
    v36 = v53;
    swift_release_n(a2, 2);
    swift_release(v47);
    return swift_release(v36);
  }
  result = swift_release(a2);
  __break(1u);
  return result;
}

void sub_10000F1A0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(v0 + 16))(1);
  sub_100014510();
}

uint64_t sub_10000F1C4()
{
  uint64_t *v0;

  return sub_10000F1D0(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10000F1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void **aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  uint64_t (*v36)();
  uint64_t v37;
  _BYTE v38[24];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_10000F4E0() & 1) != 0
    && ((lockdown_wifi_sync_enabled() & 1) != 0 || (lockdown_wifi_debug_enabled() & 1) != 0)
    || (v16 = (_QWORD *)(a1 + 16), v17 = swift_beginAccess(v16, v38, 0, 0), *v16))
  {
    v18 = swift_allocObject(&unk_10007C0B8, 32, 7);
    *(_QWORD *)(v18 + 16) = a3;
    *(_QWORD *)(v18 + 24) = a4;
    v36 = sub_10000F1C0;
    v37 = v18;
    aBlock = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_10000E208;
    v35 = &unk_10007C0D0;
    v19 = _Block_copy(&aBlock);
    v20 = swift_retain(a4);
    static DispatchQoS.unspecified.getter(v20);
    v31 = &_swiftEmptyArrayStorage;
  }
  else
  {
    v21 = static os_log_type_t.error.getter(v17);
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1000886E0, "Not configuring launchd.managed TCP control channel as both wireless connections via lockdown and developer mode are disabled.", 126, 2, &_swiftEmptyArrayStorage);
    v22 = swift_allocObject(&unk_10007C068, 32, 7);
    *(_QWORD *)(v22 + 16) = a3;
    *(_QWORD *)(v22 + 24) = a4;
    v36 = sub_10003F820;
    v37 = v22;
    aBlock = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_10000E208;
    v35 = &unk_10007C080;
    v19 = _Block_copy(&aBlock);
    v23 = swift_retain(a4);
    static DispatchQoS.unspecified.getter(v23);
    v31 = &_swiftEmptyArrayStorage;
  }
  sub_10000EC40((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = v24;
  v26 = sub_1000150C0(&qword_1000850F0);
  sub_10000F4A4((unint64_t *)&qword_1000853C0, &qword_1000850F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v26, v27, v7, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v10, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return swift_release();
}

void sub_10000F4A4(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_10001AE64(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }
  sub_100014510();
}

uint64_t sub_10000F4E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  if (qword_1000849E8 != -1)
    swift_once(&qword_1000849E8, sub_10005B268);
  objc_msgSend((id)qword_100087788, "lock");
  if (byte_100087780 == 2)
  {
    dlopen("/usr/lib/liblockdown.dylib", 2);
    v0 = sub_1000150C0(&qword_100087790);
    v1 = Optional.isNil.getter(v0);
    v2 = v1 ^ 1;
    byte_100087780 = (v1 ^ 1) & 1;
    if (((v1 ^ 1) & 1) == 0)
    {
      v3 = static os_log_type_t.error.getter(v1);
      os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1000886E0, "liblockdown.dylib is not present. remotepairingdeviced will not call into liblockdown API.", 90, 2);
    }
  }
  else
  {
    v2 = byte_100087780 & 1;
  }
  objc_msgSend((id)qword_100087788, "unlock");
  return v2 & 1;
}

uint64_t sub_10000F5D8(char a1)
{
  uint64_t v1;

  return sub_10000F5E8(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10000F5E8(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  void **aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  void (*v36)();
  uint64_t v37;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0 || (a1 & 1) != 0)
  {
    v23 = swift_allocObject(&unk_10007C158, 32, 7);
    *(_QWORD *)(v23 + 16) = a4;
    *(_QWORD *)(v23 + 24) = a5;
    v36 = sub_10000F1A0;
    v37 = v23;
    aBlock = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_10000E208;
    v35 = &unk_10007C170;
    v21 = _Block_copy(&aBlock);
    v24 = swift_retain(a5);
    static DispatchQoS.unspecified.getter(v24);
    v31 = &_swiftEmptyArrayStorage;
  }
  else
  {
    v19 = static os_log_type_t.error.getter(v16);
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_1000886E0, "Rejecting TCP control channel connection from launchd-managed socket as launchd-managed TCP control channels are not enabled", 124, 2, &_swiftEmptyArrayStorage);
    v20 = swift_allocObject(&unk_10007C108, 32, 7);
    *(_QWORD *)(v20 + 16) = a4;
    *(_QWORD *)(v20 + 24) = a5;
    v36 = sub_10003F4E4;
    v37 = v20;
    aBlock = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_10000E208;
    v35 = &unk_10007C120;
    v21 = _Block_copy(&aBlock);
    v22 = swift_retain(a5);
    static DispatchQoS.unspecified.getter(v22);
    v31 = &_swiftEmptyArrayStorage;
  }
  sub_10000EC40((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = v25;
  v27 = sub_1000150C0(&qword_1000850F0);
  sub_10000F4A4((unint64_t *)&qword_1000853C0, &qword_1000850F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v27, v28, v9, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v12, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  return swift_release();
}

uint64_t sub_10000F890(char a1)
{
  uint64_t v1;

  return sub_10000F898(a1, v1);
}

uint64_t sub_10000F898(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void **v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **aBlock;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  void *v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  uint64_t v65;

  v59 = a2;
  v3 = type metadata accessor for XPCDictionary(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BonjourService(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BonjourAdvertFlags(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v20 = __chkstk_darwin(v18, v19);
  if ((a1 & 1) != 0)
  {
    if (*(_BYTE *)(v59 + 74) == 1)
    {
      v23 = static os_log_type_t.error.getter(v20);
      return os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, qword_1000886E0, "Not configuring TCP control channel bonjour advertisment as listening port number is unknown", 92, 2, &_swiftEmptyArrayStorage);
    }
    else
    {
      v57 = v22;
      v58 = v20;
      v53 = v7;
      v54 = v4;
      v55 = v3;
      v56 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      v52 = (void **)*(unsigned __int16 *)(v59 + 72);
      UUID.init()(v20);
      aBlock = (void **)&_swiftEmptyArrayStorage;
      sub_10000EC40(&qword_1000869C0, (uint64_t (*)(uint64_t))&type metadata accessor for BonjourAdvertFlags, (uint64_t)&protocol conformance descriptor for BonjourAdvertFlags);
      v27 = v26;
      v28 = sub_1000150C0(&qword_1000869C8);
      sub_10000F4A4(&qword_1000869D0, &qword_1000869C8);
      v29 = v27;
      v30 = v56;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v28, v31, v13, v29);
      v32 = sub_100013114();
      v33 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
      if (v32)
      {
        v34 = static os_log_type_t.default.getter(v33);
        os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, qword_1000886E0, "Updating bonjour advertisment", 29, 2, &_swiftEmptyArrayStorage);
        v35 = v55;
        v51 = swift_allocBox(v55);
        v37 = v36;
        XPCDictionary.init()(v51);
        aBlock = 0;
        LOBYTE(v61) = 0;
        v38 = sub_10000FD74();
        XPCDictionary.subscript.setter(&aBlock, 0x7367616C46, 0xE500000000000000, &type metadata for Int, v38);
        v39 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for BonjourService.default(_:), v8);
        v40 = BonjourService.rawValue.getter(v39);
        v42 = v41;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        XPCDictionary.subscript.setter(v40, v42, 0xD000000000000010, 0x800000010006D460);
        aBlock = 0;
        LOBYTE(v61) = 0;
        XPCDictionary.subscript.setter(&aBlock, 0x6361667265746E49, 0xEE007865646E4965, &type metadata for Int, v38);
        aBlock = v52;
        LOBYTE(v61) = 0;
        v43 = XPCDictionary.subscript.setter(&aBlock, 1953656656, 0xE400000000000000, &type metadata for Int, v38);
        v44 = UUID.uuidString.getter(v43);
        XPCDictionary.subscript.setter(v44, v45, 1701667150, 0xE400000000000000);
        v46 = v51;
        v64 = sub_10000E15C;
        v65 = v51;
        aBlock = _NSConcreteStackBlock;
        v61 = 1107296256;
        v62 = sub_10000E108;
        v63 = &unk_10007C260;
        v47 = _Block_copy(&aBlock);
        v48 = v65;
        swift_retain(v46);
        swift_release(v48);
        nw_txt_record_access_bytes(v32, v47);
        _Block_release(v47);
        swift_beginAccess(v37, &aBlock, 0, 0);
        v50 = v53;
        v49 = v54;
        (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v37, v35);
        XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(sub_10000DD18, v59, (char *)&type metadata for () + 8);
        swift_unknownObjectRelease(v32);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v35);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v30, v58);
        return swift_release(v46);
      }
      else
      {
        return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v30, v58);
      }
    }
  }
  else
  {
    v25 = static os_log_type_t.error.getter(v20);
    return os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1000886E0, "Not configuring TCP control channel bonjour advertisment as launchd-managed TCP control channels are not enabled", 112, 2, &_swiftEmptyArrayStorage);
  }
}

unint64_t sub_10000FD74()
{
  unint64_t result;

  result = qword_1000869D8;
  if (!qword_1000869D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1000869D8);
  }
  return result;
}

uint64_t sub_10000FDB0(char a1)
{
  uint64_t v1;

  return sub_10000FDBC(a1, *(_DWORD *)(v1 + 16));
}

uint64_t sub_10000FDBC(char a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t result;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = sub_1000150C0((uint64_t *)&unk_1000869E0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v8 = sub_1000100EC();
    v9 = _remotepairing_nw_connection_create_with_connected_socket_and_parameters();
    v10 = swift_unknownObjectRelease(v8);
    if (v9)
    {
      sub_100011248();
      return swift_unknownObjectRelease(v9);
    }
    v22 = static os_log_type_t.error.getter(v10);
    v23 = qword_1000886E0;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1000886E0, "Error creating nw_connection_t from connected socket", 52, 2, &_swiftEmptyArrayStorage);
    result = close(a2);
    if ((_DWORD)result == -1)
    {
      v24 = static os_log_type_t.error.getter(result);
      result = os_log_type_enabled(v23, v24);
      if ((_DWORD)result)
      {
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = swift_slowAlloc(32, -1);
        v32 = v26;
        *(_DWORD *)v25 = 136446210;
        static POSIXError.current.getter();
        v27 = String.init<A>(describing:)(v7, v4);
        v29 = v28;
        sub_100010D40(v27, v28, &v32);
        v31 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v25 + 4);
        swift_bridgeObjectRelease(v29);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Received error closing socket: %{public}s", v25, 0xCu);
        swift_arrayDestroy(v26, 1);
        swift_slowDealloc(v26, -1, -1);
        v21 = v25;
        return swift_slowDealloc(v21, -1, -1);
      }
    }
  }
  else
  {
    result = close(a2);
    if ((_DWORD)result == -1)
    {
      v12 = static os_log_type_t.error.getter(result);
      v13 = qword_1000886E0;
      v14 = v12;
      result = os_log_type_enabled((os_log_t)qword_1000886E0, v12);
      if ((_DWORD)result)
      {
        v15 = (uint8_t *)swift_slowAlloc(12, -1);
        v16 = swift_slowAlloc(32, -1);
        v32 = v16;
        *(_DWORD *)v15 = 136446210;
        static POSIXError.current.getter();
        v17 = String.init<A>(describing:)(v7, v4);
        v19 = v18;
        sub_100010D40(v17, v18, &v32);
        v31 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v15 + 4);
        swift_bridgeObjectRelease(v19);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received error closing rejected socket: %{public}s", v15, 0xCu);
        swift_arrayDestroy(v16, 1);
        swift_slowDealloc(v16, -1, -1);
        v21 = v15;
        return swift_slowDealloc(v21, -1, -1);
      }
    }
  }
  return result;
}

id _remotepairing_nw_connection_create_with_connected_socket_and_parameters()
{
  return (id)nw_connection_create_with_connected_socket_and_parameters();
}

NSObject *sub_1000100EC()
{
  void *v0;
  NSObject *v1;
  _QWORD v3[6];

  v3[4] = sub_10000DDF4;
  v3[5] = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_100016A28;
  v3[3] = &unk_10007C3C8;
  v0 = _Block_copy(v3);
  v1 = create_nw_parameters_for_tcp(v0);
  _Block_release(v0);
  nw_parameters_prohibit_interface_type(v1, nw_interface_type_cellular);
  nw_parameters_prohibit_interface_type(v1, nw_interface_type_loopback);
  return v1;
}

nw_parameters_t create_nw_parameters_for_tcp(nw_parameters_configure_protocol_block_t configure_tcp)
{
  return nw_parameters_create_secure_tcp(_nw_parameters_configure_protocol_disable, configure_tcp);
}

uint64_t sub_1000101A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  sub_1000124D0();
  sub_10004A938();
  v6(a2, a3);
  swift_release(v5);
  return sub_10004A904(a3);
}

uint64_t sub_1000101F0(int a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000101FC(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1000101FC(int a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t result;
  uint64_t v17;
  os_log_type_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  os_log_type_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  os_log_type_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  os_log_type_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  void (*v108)(_QWORD);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  char v117[24];

  v10 = type metadata accessor for RemotePairingError(0);
  __chkstk_darwin();
  v112 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ControlChannelTransportEvent(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v15 = (uint64_t *)((char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  a3 += 16;
  swift_beginAccess(a3, v117, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (result)
  {
    v17 = result;
    v113 = a2;
    v18 = static os_log_type_t.default.getter();
    v19 = qword_1000886E0;
    v20 = v18;
    v21 = os_log_type_enabled((os_log_t)qword_1000886E0, v18);
    v114 = v15;
    if (v21)
    {
      swift_retain(v17);
      v22 = swift_slowAlloc(22, -1);
      v111 = v13;
      v23 = v22;
      v24 = swift_slowAlloc(64, -1);
      v116 = v24;
      *(_DWORD *)v23 = 136446466;
      v108 = a4;
      v109 = v10;
      v25 = a5;
      v110 = v12;
      v27 = *(_QWORD *)(v17 + 16);
      v26 = *(_QWORD *)(v17 + 24);
      swift_bridgeObjectRetain(v26);
      sub_100010D40(v27, v26, &v116);
      v115 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v23 + 4);
      swift_release(v17);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v23 + 12) = 2082;
      LODWORD(v115) = a1;
      type metadata accessor for nw_connection_state_t(0);
      v30 = String.init<A>(describing:)(&v115, v29);
      v32 = v31;
      sub_100010D40(v30, v31, &v116);
      v115 = v33;
      a5 = v25;
      v10 = v109;
      v12 = v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v23 + 14);
      v34 = v32;
      a4 = v108;
      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s: Connection state changed to %{public}s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2);
      v35 = v24;
      v15 = v114;
      swift_slowDealloc(v35, -1, -1);
      v36 = v23;
      v13 = v111;
      swift_slowDealloc(v36, -1, -1);
    }
    if (a1 == 1)
    {
      if (v113)
      {
        swift_getObjectType(v113);
        sub_1000449A4();
        v62 = v61;
      }
      else
      {
        v68 = sub_1000121B8((unint64_t *)&unk_1000853D0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
        v69 = v112;
        static Error<>.networkingError.getter(v10, v68);
        v70 = sub_1000121B8((unint64_t *)&unk_1000859D0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
        v62 = swift_allocError(v10, v70, 0, 0);
        Error<>.init(_:_:)(v69, 0xD00000000000002BLL, 0x800000010006C7F0, v10);
      }
      v71 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
      v72 = qword_1000886E0;
      v73 = v71;
      if (os_log_type_enabled((os_log_t)qword_1000886E0, v71))
      {
        swift_retain(v17);
        swift_errorRetain(v62);
        swift_retain(v17);
        swift_errorRetain(v62);
        v74 = swift_slowAlloc(22, -1);
        v113 = a5;
        v75 = v74;
        v76 = swift_slowAlloc(64, -1);
        v116 = v76;
        *(_DWORD *)v75 = 136446466;
        v110 = v12;
        v111 = v13;
        v77 = v17;
        v78 = *(_QWORD *)(v17 + 16);
        v79 = *(_QWORD *)(v17 + 24);
        swift_bridgeObjectRetain(v79);
        sub_100010D40(v78, v79, &v116);
        v115 = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v75 + 4);
        swift_release_n(v77, 2);
        swift_bridgeObjectRelease(v79);
        *(_WORD *)(v75 + 12) = 2082;
        v115 = v62;
        swift_errorRetain(v62);
        v81 = sub_1000150C0(&qword_100085A00);
        v82 = String.init<A>(describing:)(&v115, v81);
        v84 = v83;
        sub_100010D40(v82, v83, &v116);
        v115 = v85;
        v17 = v77;
        v13 = v111;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v75 + 14);
        v86 = v84;
        v12 = v110;
        swift_bridgeObjectRelease(v86);
        swift_errorRelease(v62);
        swift_errorRelease(v62);
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "%{public}s: Connection failed with error %{public}s", (uint8_t *)v75, 0x16u);
        swift_arrayDestroy(v76, 2);
        swift_slowDealloc(v76, -1, -1);
        swift_slowDealloc(v75, -1, -1);
      }
      v87 = v114;
      *v114 = v62;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v13 + 104))(v87, enum case for ControlChannelTransportEvent.error(_:), v12);
      swift_errorRetain(v62);
      a4(v87);
      (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v87, v12);
      nw_connection_cancel(*(nw_connection_t *)(v17 + 32));
      swift_release(v17);
      return swift_errorRelease(v62);
    }
    else if (a1 == 4)
    {
      if (v113)
      {
        swift_getObjectType(v113);
        sub_1000449A4();
        v64 = v63;
      }
      else
      {
        v88 = sub_1000121B8((unint64_t *)&unk_1000853D0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
        v89 = v112;
        static Error<>.networkingError.getter(v10, v88);
        v90 = sub_1000121B8((unint64_t *)&unk_1000859D0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
        v64 = swift_allocError(v10, v90, 0, 0);
        Error<>.init(_:_:)(v89, 0xD00000000000002BLL, 0x800000010006C7F0, v10);
      }
      v91 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
      v92 = qword_1000886E0;
      v93 = v91;
      if (os_log_type_enabled((os_log_t)qword_1000886E0, v91))
      {
        swift_retain(v17);
        swift_errorRetain(v64);
        swift_retain(v17);
        swift_errorRetain(v64);
        v94 = swift_slowAlloc(22, -1);
        v113 = a5;
        v95 = v94;
        v96 = swift_slowAlloc(64, -1);
        v116 = v96;
        *(_DWORD *)v95 = 136446466;
        v110 = v12;
        v111 = v13;
        v97 = v17;
        v98 = *(_QWORD *)(v17 + 16);
        v99 = *(_QWORD *)(v17 + 24);
        swift_bridgeObjectRetain(v99);
        sub_100010D40(v98, v99, &v116);
        v115 = v100;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v95 + 4);
        swift_release_n(v97, 2);
        swift_bridgeObjectRelease(v99);
        *(_WORD *)(v95 + 12) = 2082;
        v115 = v64;
        swift_errorRetain(v64);
        v101 = sub_1000150C0(&qword_100085A00);
        v102 = String.init<A>(describing:)(&v115, v101);
        v104 = v103;
        sub_100010D40(v102, v103, &v116);
        v115 = v105;
        v17 = v97;
        v13 = v111;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v95 + 14);
        v106 = v104;
        v12 = v110;
        swift_bridgeObjectRelease(v106);
        swift_errorRelease(v64);
        swift_errorRelease(v64);
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "%{public}s: Connection failed with error %{public}s", (uint8_t *)v95, 0x16u);
        swift_arrayDestroy(v96, 2);
        swift_slowDealloc(v96, -1, -1);
        swift_slowDealloc(v95, -1, -1);
      }
      v107 = v114;
      *v114 = v64;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v13 + 104))(v107, enum case for ControlChannelTransportEvent.error(_:), v12);
      swift_errorRetain(v64);
      a4(v107);
      swift_errorRelease(v64);
      swift_release(v17);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(v107, v12);
    }
    else
    {
      if (a1 == 3)
      {
        v109 = v10;
        v37 = *(_QWORD *)(v17 + 32);
        swift_getObjectType(v37);
        swift_unknownObjectRetain(v37);
        v38 = sub_1000111F0();
        v39 = swift_unknownObjectRelease(v37);
        if (v38)
        {
          v111 = v13;
          v40 = static os_log_type_t.error.getter(v39);
          v41 = qword_1000886E0;
          v42 = v40;
          if (os_log_type_enabled((os_log_t)qword_1000886E0, v40))
          {
            swift_retain_n(v17, 2);
            v43 = swift_slowAlloc(22, -1);
            v44 = swift_slowAlloc(64, -1);
            v116 = v44;
            *(_DWORD *)v43 = 136446466;
            v110 = v12;
            v45 = v17;
            v46 = *(_QWORD *)(v17 + 16);
            v47 = *(_QWORD *)(v17 + 24);
            swift_bridgeObjectRetain(v47);
            sub_100010D40(v46, v47, &v116);
            v115 = v48;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v43 + 4);
            swift_bridgeObjectRelease(v47);
            *(_WORD *)(v43 + 12) = 2082;
            v115 = *(_QWORD *)(v45 + 32);
            swift_unknownObjectRetain(v115);
            v49 = sub_1000150C0(&qword_1000865A8);
            v50 = String.init<A>(describing:)(&v115, v49);
            v52 = v51;
            sub_100010D40(v50, v51, &v116);
            v115 = v53;
            v17 = v45;
            v15 = v114;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v43 + 14);
            swift_release_n(v17, 2);
            v54 = v52;
            v12 = v110;
            swift_bridgeObjectRelease(v54);
            _os_log_impl((void *)&_mh_execute_header, v41, v42, "%{public}s: Rejecting control channel connection originating from local machine: %{public}s", (uint8_t *)v43, 0x16u);
            swift_arrayDestroy(v44, 2);
            swift_slowDealloc(v44, -1, -1);
            swift_slowDealloc(v43, -1, -1);
          }
          v55 = sub_1000121B8((unint64_t *)&unk_1000853D0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
          v56 = v112;
          v57 = v109;
          static Error<>.networkingError.getter(v109, v55);
          v58 = sub_1000121B8((unint64_t *)&unk_1000859D0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
          v59 = swift_allocError(v57, v58, 0, 0);
          Error<>.init(_:_:)(v56, 0xD000000000000030, 0x800000010006C820, v57);
          *v15 = v59;
          v60 = v111;
          (*(void (**)(uint64_t *, _QWORD, uint64_t))(v111 + 104))(v15, enum case for ControlChannelTransportEvent.error(_:), v12);
          a4(v15);
          (*(void (**)(uint64_t *, uint64_t))(v60 + 8))(v15, v12);
          nw_connection_cancel(*(nw_connection_t *)(v17 + 32));
        }
        else
        {
          (*(void (**)(uint64_t *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for ControlChannelTransportEvent.transportStarted(_:), v12);
          a4(v15);
          (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v15, v12);
          v65 = type metadata accessor for NWObjcConnectionControlChannelTransport();
          v67 = sub_1000121B8(&qword_1000865A0, v66, (uint64_t (*)(uint64_t))type metadata accessor for NWObjcConnectionControlChannelTransport, (uint64_t)&unk_100066480);
          JSONDataBasedControlChannelTransport.startReceivingMessages(usingEventHandler:)(a4, a5, v65, v67);
        }
      }
      return swift_release(v17);
    }
  }
  return result;
}

void sub_100010D40(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  void *ObjectType;

  sub_100016060();
  v6 = sub_100010E1C(v10, 0, 0, 1, v4, v3);
  if (v6)
  {
    v7 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v10[0] = v7;
    v8 = *a3;
    if (*a3)
    {
      sub_100015100((uint64_t)v10, *a3);
      *a3 = v8 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v10[0] = v4;
    v10[1] = v3;
    v9 = *a3;
    if (*a3)
    {
      sub_100015100((uint64_t)v10, *a3);
      *a3 = v9 + 32;
    }
    swift_bridgeObjectRetain(v3);
  }
  sub_100010DFC(v10);
  sub_1000165A0();
}

uint64_t sub_100010DFC(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *sub_100010E1C(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_10004A2D8((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_100010F70(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (_QWORD *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

_QWORD *sub_100010F70(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_100011004(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10004A39C(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_10004A39C((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

_QWORD *sub_100011004(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return &_swiftEmptyArrayStorage;
LABEL_6:
  v5 = sub_100011174(v4, 0);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, 2, 430, 0);
    goto LABEL_15;
  }
  if (v7 == v4)
    return v6;
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 1122, 0);
LABEL_15:
  __break(1u);
  return result;
}

_QWORD *sub_100011174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_1000150C0((uint64_t *)&unk_1000870B0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

void type metadata accessor for nw_connection_state_t(uint64_t a1)
{
  sub_10001580C(a1, &qword_100084CB8, (uint64_t)&unk_10007A660);
}

BOOL sub_1000111F0()
{
  NSObject *v0;
  nw_path_t v1;
  NSObject *v2;
  _BOOL8 v3;

  v1 = nw_connection_copy_current_path(v0);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = (nw_path_is_local() & 1) != 0 || nw_path_uses_interface_type(v2, nw_interface_type_loopback);
  sub_100015474();
  return v3;
}

void sub_100011248()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;

  sub_100011610();
  v2 = v0;
  v3 = type metadata accessor for ControlChannelConnection.Options(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  sub_100011928();
  v8 = v7 - v6;
  v9 = type metadata accessor for ControlChannelConnection.Options.Device(0);
  v10 = *(_QWORD *)(v9 - 8);
  v34 = v10;
  __chkstk_darwin(v9, v11);
  sub_1000158C8();
  v32 = (void *)v0[10];
  OS_dispatch_queue.assertOnQueueHierarchy()();
  v33 = v1;
  ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)(0, 0, 1, 0, 1);
  v12 = type metadata accessor for NWObjcConnectionControlChannelTransport();
  sub_1000138D4(v12, 42);
  v13 = sub_10003F8A0();
  v14 = sub_100011C1C(v13);
  v37 = v12;
  sub_10000EC40((unint64_t *)&unk_100086590, (uint64_t (*)(uint64_t))type metadata accessor for NWObjcConnectionControlChannelTransport, (uint64_t)&unk_100066410);
  v38 = v15;
  v36[0] = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v1, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v8, enum case for ControlChannelConnection.Options.device(_:), v3);
  v16 = v0[17];
  v35[3] = type metadata accessor for SystemKeychainPairingManager();
  sub_10000EC40(&qword_100084F88, (uint64_t (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager, (uint64_t)&unk_100065DFC);
  v35[4] = v17;
  v35[0] = v16;
  v18 = sub_1000135A4();
  swift_retain(v14);
  v19 = v32;
  v20 = sub_10000E49C();
  v21 = static ControlChannelConnection.defaultMaxReconnectionAttempts.getter(v20);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v22 = ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)(v36, v19, v8, v21, v35, 0);
  v23 = v2[16];
  v37 = type metadata accessor for MetadataService(0);
  sub_10000EC40(&qword_100086960, type metadata accessor for MetadataService, (uint64_t)&unk_100066770);
  v38 = v24;
  v36[0] = v23;
  sub_10000E49C();
  dispatch thunk of ControlChannelConnection.customDeviceMetadataProvider.setter(v36);
  sub_1000167AC((uint64_t)(v2 + 18), (uint64_t)v36);
  dispatch thunk of ControlChannelConnection.tunnelListenerCreator.setter(v36);
  sub_1000123DC((uint64_t)(v2 + 6), (uint64_t)v36, 33);
  sub_1000144D8();
  sub_100011708();
  swift_endAccess(v36);
  sub_1000118D4();
  sub_100012940();
  v25 = sub_100015378((uint64_t)&unk_10007BEB0);
  sub_100016450(v25);
  v26 = sub_100015378((uint64_t)&unk_10007BED8);
  sub_100015E04(v26);
  v27 = sub_1000138D4((uint64_t)&unk_10007BF00, 32);
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v26;
  swift_retain(v25);
  swift_retain(v26);
  dispatch thunk of ControlChannelConnection.invalidationHandler.setter(sub_100016A30, v27);
  swift_release();
  swift_release();
  v28 = sub_100015378((uint64_t)&unk_10007BEB0);
  sub_100016450(v28);
  v29 = sub_100015378((uint64_t)&unk_10007BED8);
  sub_100015E04(v29);
  v30 = sub_1000138D4((uint64_t)&unk_10007BF28, 32);
  *(_QWORD *)(v30 + 16) = v29;
  *(_QWORD *)(v30 + 24) = v28;
  swift_retain(v29);
  swift_retain(v28);
  dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter(sub_10003F45C, v30);
  swift_release();
  swift_release();
  v31 = *sub_100016418(v2 + 11, v2[14]);
  sub_1000144D8();
  sub_10004ADDC(0xD00000000000002ELL, 0x800000010006CAA0, v31, v22);
  swift_release();
  sub_100015384();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v9);
  sub_1000138B4();
}

uint64_t sub_1000115DC()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000115E4(uint64_t a1)
{
  return swift_allocObject(a1, 32, 7);
}

uint64_t sub_100011600()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_100011608(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  return sub_10000EC00(a1, v3, a3);
}

uint64_t sub_100011628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 136))(v1, v0);
}

uint64_t sub_100011638()
{
  return type metadata accessor for DiscoveredBonjourAdvert(0);
}

void sub_100011640(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_10000EC40(a1, v3, a3);
}

uint64_t sub_100011664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 72) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 72, v2, v1);
}

uint64_t sub_100011678()
{
  return 0;
}

uint64_t sub_1000116A4()
{
  return NWTXTRecord.subscript.setter();
}

uint64_t sub_1000116AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v2 - 96, v1);
}

uint64_t sub_1000116C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 - 264);
  *v2 = v0;
  return swift_storeEnumTagMultiPayload(v2, *(_QWORD *)(v1 - 272), 1);
}

uint64_t type metadata accessor for NWObjcConnectionControlChannelTransport()
{
  return objc_opt_self(_TtC20remotepairingdeviced39NWObjcConnectionControlChannelTransport);
}

void sub_100011708()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  sub_10005A8C0();
  if (v3)
  {
    v15 = *(_QWORD *)(v2 + 40);
    sub_1000135A4();
    sub_10000EC00(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    sub_100015868();
    sub_10005A8A0();
    sub_10005A708();
    if ((v16 & 1) != 0)
    {
      v17 = sub_10000EC00(&qword_1000872C8, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
      while ((sub_10005A6C4(v17, v18) & 1) == 0)
      {
        sub_10005A860();
        if ((v19 & 1) == 0)
          goto LABEL_11;
      }
      sub_10000E4FC();
      sub_1000135C8();
      sub_10005A814();
    }
    else
    {
LABEL_11:
      sub_1000135C8();
      v20 = sub_10005AAF8();
      v28 = sub_100015AA0(v20, v21, v22, v23, v24, v25, v26, v27, v40, v43, v45, v47);
      sub_100011A24(v28, v15, v1);
      sub_10005A9EC(v29, v30, v31, v32, v33, v34, v35, v36, v42, v44, v46);
      *v0 = v2;
    }
    goto LABEL_19;
  }
  if (v2 < 0)
    v4 = v2;
  else
    v4 = v2 & 0xFFFFFFFFFFFFFF8;
  sub_100015868();
  v5 = sub_10001612C();
  v6 = sub_10005ABAC(v5);
  sub_10000E4FC();
  if (v6)
  {
    sub_1000135C8();
    sub_10000E4FC();
    sub_1000135A4();
    sub_10005A778();
    v7 = sub_10005A7A0((uint64_t)&type metadata for Swift.AnyObject, v40);
    sub_100015FF8(v7, v8, v9, v10, v11, v12, v13, v14, v41, v6, v45);
LABEL_19:
    sub_100015784();
    return;
  }
  v37 = sub_10005ABDC();
  if (!__OFADD__(v37, 1))
  {
    sub_10005689C(v4, v37 + 1, &qword_1000876C0, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, &qword_100086130, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    sub_10005AAD0();
    if (!v3 & v38)
    {
      sub_10001612C();
    }
    else
    {
      v39 = sub_10001612C();
      sub_10005AC54(v39, &qword_1000876C0, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, &qword_100086130, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    }
    sub_10005AB5C();
    sub_10005A83C();
    *v0 = v1;
    goto LABEL_19;
  }
  __break(1u);
}

uint64_t sub_1000118D4()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_1000118DC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_1000118E4()
{
  uint64_t v0;

  return swift_endAccess(v0 - 144);
}

uint64_t sub_1000118EC()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1000118F4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000118FC()
{
  return type metadata accessor for UUID(0);
}

void *sub_100011904@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  a4 = a1;
  a5 = v5;
  return _Block_copy(&a2);
}

NSString sub_100011910()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10001191C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return swift_retain(*(_QWORD *)(a9 + 8 * v9));
}

uint64_t sub_100011938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100011948()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100011950()
{
  return sub_10001B3D0();
}

uint64_t sub_10001195C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100011970()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100011978()
{
  return 0;
}

uint64_t sub_100011984()
{
  return type metadata accessor for OS_dispatch_queue.Attributes(0);
}

uint64_t sub_1000119A0(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_1000119D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_allocError(v2, a2, 0, 0);
}

size_t sub_1000119E8(const void *a1)
{
  return j__malloc_size(a1);
}

uint64_t sub_100011A00()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10001F51C(v1, v0, 1);
}

id sub_100011A10()
{
  void *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = v0;
  return objc_msgSend(v0, "publicKey");
}

void sub_100011A24(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a1;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100056D9C(v9, &qword_1000876C0, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, &qword_100086130, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000575A4(&qword_1000876C0);
      goto LABEL_12;
    }
    sub_1000579EC(v9, &qword_1000876C0, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, &qword_100086130, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
  }
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v4 = type metadata accessor for ControlChannelConnection(0);
  v12 = sub_10000EC00(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = sub_10000EC00(&qword_1000872C8, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v21, &v22, v4, v16) & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v17 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = a1;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (!v19)
  {
    *(_QWORD *)(v17 + 16) = v20;
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
}

uint64_t sub_100011C1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *object;

  v2 = v1;
  *(_WORD *)(v1 + 40) = 512;
  *(_QWORD *)(v1 + 32) = a1;
  v4 = qword_1000849D8;
  v5 = swift_unknownObjectRetain(a1);
  if (v4 != -1)
    v5 = swift_once(&qword_1000849D8, sub_10003B8CC);
  dispatch thunk of AtomicCounter.next()(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  object = v6._object;
  String.append(_:)(v6);
  swift_unknownObjectRelease(a1);
  swift_bridgeObjectRelease(object);
  *(_QWORD *)(v2 + 16) = 762340212;
  *(_QWORD *)(v2 + 24) = 0xE400000000000000;
  return v2;
}

uint64_t type metadata accessor for SystemKeychainPairingManager()
{
  return objc_opt_self(_TtC20remotepairingdeviced28SystemKeychainPairingManager);
}

void sub_100011D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, _QWORD, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  char v64[24];
  char v65[24];

  v4 = type metadata accessor for ControlChannelConnectionError.Code(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v58 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v57 = (char *)&v54 - v10;
  v11 = type metadata accessor for ControlChannelConnectionError(0);
  v59 = *(_QWORD *)(v11 - 8);
  v60 = v11;
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v54 - v17;
  v19 = type metadata accessor for RemotePairingError(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000150C0(&qword_100086968);
  __chkstk_darwin(v24, v25);
  v27 = (uint64_t *)((char *)&v54 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  a1 += 16;
  swift_beginAccess(a1, v65, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v29 = Strong;
    v56 = v5;
    v30 = a2 + 16;
    swift_beginAccess(v30, v64, 0, 0);
    if (!swift_weakLoadStrong(v30))
      goto LABEL_12;
    swift_beginAccess(v29 + 48, v63, 33, 0);
    sub_1000121F8();
    swift_endAccess(v63);
    swift_release();
    v31 = sub_100012940();
    dispatch thunk of ControlChannelConnection.invalidationReason.getter(v31);
    v32 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
    if (sub_100015658((uint64_t)v27, 1, v32) == 1)
    {
      swift_release();
      swift_release();
      sub_10003F608((uint64_t)v27, &qword_100086968);
      return;
    }
    v55 = v4;
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v33 + 88))(v27, v32) == enum case for ControlChannelConnection.InvalidationReason.internalError(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v33 + 96))(v27, v32);
      v34 = *v27;
      swift_errorRetain(*v27);
      sub_10000EC40((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      v36 = v35;
      static Error<>.networkingError.getter(v19, v35);
      v37 = static _Error.~= infix(_:_:)(v23, v34, v19, v36);
      swift_errorRelease(v34);
      v38 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
      if ((v37 & 1) != 0)
      {
LABEL_11:
        v53 = static os_log_type_t.default.getter(v38);
        os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, qword_1000886E0, "Rolling bonjour advert after host disconnected", 46, 2, &_swiftEmptyArrayStorage);
        sub_100016758();
        swift_errorRelease(v34);
        swift_release();
LABEL_12:
        swift_release();
        return;
      }
      v63[0] = v34;
      swift_errorRetain(v34);
      v39 = sub_1000150C0(&qword_100085A00);
      v40 = v60;
      if (swift_dynamicCast(v18, v63, v39, v60, 0))
      {
        v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v59 + 32))(v15, v18, v40);
        v42 = v57;
        ControlChannelConnectionError.code.getter(v41);
        v44 = v55;
        v43 = v56;
        v45 = *(void (**)(char *, _QWORD, uint64_t))(v56 + 104);
        v54 = v34;
        v46 = v58;
        v45(v58, enum case for ControlChannelConnectionError.Code.transportError(_:), v55);
        sub_10000EC40(&qword_100086970, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnectionError.Code, (uint64_t)&protocol conformance descriptor for ControlChannelConnectionError.Code);
        v48 = v47;
        dispatch thunk of RawRepresentable.rawValue.getter(&v62, v44, v47);
        dispatch thunk of RawRepresentable.rawValue.getter(&v61, v44, v48);
        v50 = v61;
        v49 = v62;
        v51 = *(void (**)(char *, uint64_t))(v43 + 8);
        v52 = v46;
        v34 = v54;
        v51(v52, v44);
        v51(v42, v44);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v15, v40);
        if (v49 == v50)
        {
          v38 = swift_errorRelease(v63[0]);
          goto LABEL_11;
        }
      }
      swift_release();
      swift_release();
      swift_errorRelease(v34);
      swift_errorRelease(v63[0]);
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v27, v32);
    }
  }
}

uint64_t sub_1000121B8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000121F8()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  sub_100015A24();
  sub_10005AB00();
  if (v2)
  {
    sub_1000135A4();
    sub_10000EC00(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    sub_100011970();
    sub_10005A978();
    sub_10005A730();
    if ((v7 & 1) != 0)
    {
      v8 = sub_10000EC00(&qword_1000872C8, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
      while ((sub_10000E578(v8, v9, v10, v11, v12, v13, v14, v15, v18, v20) & 1) == 0)
      {
        sub_10005A98C();
        if ((v16 & 1) == 0)
          goto LABEL_11;
      }
      sub_1000155B8();
      sub_100015E4C();
      v19 = *v0;
      sub_10005AC3C();
      if ((v17 & 1) == 0)
        sub_1000575A4(&qword_1000876C0);
      sub_10005AC28(v17, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, &qword_100086130, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
      v6 = *v0;
      *v0 = v19;
      goto LABEL_15;
    }
  }
  else
  {
    if (v1 < 0)
      v3 = v1;
    else
      v3 = v1 & 0xFFFFFFFFFFFFFF8;
    sub_100011970();
    v4 = sub_10000E49C();
    v5 = __CocoaSet.contains(_:)(v4, v3);
    sub_1000118D4();
    if ((v5 & 1) != 0)
    {
      sub_100057F58();
      v6 = v1;
LABEL_15:
      swift_bridgeObjectRelease(v6);
      goto LABEL_16;
    }
  }
LABEL_11:
  sub_1000155B8();
LABEL_16:
  sub_100015734();
}

void sub_10001234C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }
  sub_100014510();
}

uint64_t sub_100012388(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_100012398(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

uint64_t sub_1000123BC()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_1000123C4(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

uint64_t sub_1000123CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_beginAccess(v2, a2, 33, 0);
}

uint64_t sub_1000123DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0);
}

uint64_t sub_100012400()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100013AB4(v0, v1);
}

_OWORD *sub_10001240C()
{
  uint64_t v0;

  return sub_100015FB0((_OWORD *)(v0 - 160), (_OWORD *)(v0 - 128));
}

uint64_t sub_100012418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(v1, v0);
}

uint64_t sub_10001242C()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_100012454()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_100012478()
{
  return 0;
}

NSDictionary sub_100012488()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_100012494()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_10001249C(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_1000124A4()
{
  uint64_t *v0;

  return sub_1000150C0(v0);
}

uint64_t sub_1000124AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, a2, a3);
}

uint64_t sub_1000124B4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 40));
}

uint64_t sub_1000124BC()
{
  return 0;
}

uint64_t sub_1000124D0()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000124D8()
{
  uint64_t v0;

  return sub_100015614(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_1000124E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100015670(v2 + 96, a2);
}

uint64_t sub_1000124F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 112, a2, v2);
}

uint64_t sub_1000124FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return AnyHashable.init<A>(_:)(v2 - 280, v0, v1);
}

void *sub_100012510()
{
  uint64_t v0;

  return _Block_copy((const void *)(v0 - 152));
}

uint64_t sub_100012518(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33, 0);
}

uint64_t sub_100012524()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

void sub_10001252C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010D40(a1, a2, (uint64_t *)(v2 - 168));
}

unint64_t sub_100012534(unint64_t result, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v5 = result;
  v6 = *v4;
  v7 = *v4 + 56;
  v8 = -1 << *(_BYTE *)(*v4 + 32);
  v9 = (result + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v13 = ~v8;
    swift_retain(*v4);
    v14 = _HashTable.previousHole(before:)(v5, v7, v13);
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v15 = a4;
      v16 = (v14 + 1) & v13;
      v17 = a2(0);
      v18 = sub_10000EC00(a3, a2, v15);
      do
      {
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40), v17, v18) & v13;
        if (v5 >= (uint64_t)v16)
        {
          if (v19 >= v16 && v5 >= v19)
          {
LABEL_15:
            v22 = *(_QWORD *)(v6 + 48);
            v23 = (_QWORD *)(v22 + 8 * v5);
            v24 = (_QWORD *)(v22 + 8 * v9);
            v25 = v5 != v9 || v23 >= v24 + 1;
            v5 = v9;
            if (v25)
            {
              *v23 = *v24;
              v5 = v9;
            }
          }
        }
        else if (v19 >= v16 || v5 >= v19)
        {
          goto LABEL_15;
        }
        v9 = (v9 + 1) & v13;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v7 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v5) - 1;
    result = swift_release(v6);
  }
  else
  {
    *(_QWORD *)(v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v26 = *(_QWORD *)(v6 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v6 + 16) = v28;
    ++*(_DWORD *)(v6 + 36);
  }
  return result;
}

uint64_t sub_100012700(char a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t IsEnabled;
  uint64_t v14;
  os_log_type_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _BYTE v25[24];

  v8 = swift_allocObject(&unk_10007C298, 32, 7);
  *(_DWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  swift_retain(a4);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  swift_beginAccess(a2 + 48, v25, 0, 0);
  v9 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain(v9);
  v11 = sub_100012A70(v10);
  v12 = swift_bridgeObjectRelease(v9);
  if (v11 > 39)
  {
    v15 = static os_log_type_t.error.getter(v12);
    v16 = qword_1000886E0;
    v17 = v15;
    if (os_log_type_enabled((os_log_t)qword_1000886E0, v15))
    {
      swift_retain(a2);
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v18 = 134217984;
      v19 = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain(v19);
      v21 = sub_100012A70(v20);
      swift_bridgeObjectRelease(v19);
      v24 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v18 + 4);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Rejecting incoming TCP connection as we already have %ld TCP peers", v18, 0xCu);
      swift_slowDealloc(v18, -1, -1);
    }
  }
  else
  {
    IsEnabled = remotePairingIsEnabled(v12);
    if ((IsEnabled & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 216) & 1) == 0)
      {
        swift_retain(a2);
        swift_retain(v8);
        sub_100012A74(a2, a1 & 1, a2, (uint64_t)sub_10000FDB0, v8);
        goto LABEL_9;
      }
      v14 = static os_log_type_t.error.getter(IsEnabled);
      os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1000886E0, "Rejecting TCP control channel connection as service is shutting down", 68, 2, &_swiftEmptyArrayStorage);
    }
    else
    {
      v22 = static os_log_type_t.error.getter(IsEnabled);
      os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1000886E0, "Rejecting TCP control channel connection due to remotepairing support being disabled", 84, 2, &_swiftEmptyArrayStorage);
    }
  }
  sub_10000FDBC(0, a3);
LABEL_9:
  swift_release();
  return swift_release();
}

uint64_t sub_100012940()
{
  uint64_t v0;
  os_log_type_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t result;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = static os_log_type_t.default.getter();
  v2 = qword_1000886E0;
  v3 = v1;
  result = os_log_type_enabled((os_log_t)qword_1000886E0, v1);
  if ((_DWORD)result)
  {
    swift_retain(v0);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    swift_beginAccess(v0 + 48, v10, 0, 0);
    v6 = *(_QWORD *)(v0 + 48);
    v7 = swift_bridgeObjectRetain(v6);
    v8 = sub_100012A70(v7);
    swift_bridgeObjectRelease(v6);
    v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, v10, v5 + 4);
    swift_release(v0);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "TCP connected peers updated. Total count: %ld", v5, 0xCu);
    return swift_slowDealloc(v5, -1, -1);
  }
  return result;
}

uint64_t sub_100012A50(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(_QWORD *)(a1 + 16);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return __CocoaSet.count.getter(a1);
}

uint64_t sub_100012A74(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t IsEnabled;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  os_log_type_t v18;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  size_t v54;
  uint64_t aBlock[6];

  v10 = swift_allocObject(&unk_10007BFC8, 48, 7);
  *(_BYTE *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  *(_QWORD *)(v10 + 32) = a4;
  *(_QWORD *)(v10 + 40) = a5;
  swift_retain(a3);
  swift_retain(a5);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  IsEnabled = remotePairingIsEnabled(v11);
  if (!(_DWORD)IsEnabled)
  {
    v41 = static os_log_type_t.default.getter(IsEnabled);
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, qword_1000886E0, "Not configuring launchd-managed TCP control channel due to RemotePairing support being disabled", 95, 2, &_swiftEmptyArrayStorage);
LABEL_14:
    sub_10000F5E8(0, a2 & 1, a3, a4, a5);
    swift_release();
    goto LABEL_15;
  }
  v13 = static Defaults.deviceAllowTCPControlChannels.getter();
  if ((v13 & 1) == 0)
  {
    v42 = static os_log_type_t.error.getter(v13);
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, qword_1000886E0, "Not configuring launchd-managed TCP control channel due to 'deviceAllowTCPControlChannel' not being set to true", 111, 2, &_swiftEmptyArrayStorage);
    goto LABEL_14;
  }
  v14 = sub_100012F88();
  if (!v14)
  {
    v43 = static os_log_type_t.error.getter(v14);
    os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, qword_1000886E0, "Not configuring launchd-managed TCP control channel due to no hosts being paired", 80, 2, &_swiftEmptyArrayStorage);
    goto LABEL_14;
  }
  if (!RPIdentity)
  {
    v44 = static os_log_type_t.error.getter(v14);
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, qword_1000886E0, "Not configuring launchd-managed TCP control channel as Rapport is not available and auth tag generation is unsupported", 118, 2, &_swiftEmptyArrayStorage);
    goto LABEL_14;
  }
  v15 = swift_allocObject(&unk_10007BFF0, 24, 7);
  *(_QWORD *)(v15 + 16) = 0;
  v54 = 8;
  v16 = sysctlbyname("security.mac.amfi.developer_mode_status", (void *)(v15 + 16), &v54, 0, 0);
  v52 = v15;
  if (!(_DWORD)v16)
    goto LABEL_9;
  v17 = v16;
  v18 = static os_log_type_t.error.getter(v16);
  v19 = qword_1000886E0;
  if (!os_log_type_enabled((os_log_t)qword_1000886E0, v18))
    goto LABEL_9;
  v20 = (uint8_t *)swift_slowAlloc(12, -1);
  v21 = swift_slowAlloc(32, -1);
  aBlock[0] = v21;
  *(_DWORD *)v20 = 136446210;
  if (strerror(v17))
  {
    v22 = String.init(cString:)();
    v24 = v23;
    sub_100010D40(v22, v23, aBlock);
    v53 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v20 + 4);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v19, v18, "Failed to fetch developer mode status: (%{public}s)", v20, 0xCu);
    swift_arrayDestroy(v21, 1);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
    v15 = v52;
LABEL_9:
    v51 = *(_QWORD *)(a1 + 40);
    v26 = (_QWORD *)swift_allocObject(&unk_10007C018, 48, 7);
    v26[2] = v15;
    v26[3] = a1;
    v26[4] = sub_10000F5D8;
    v26[5] = v10;
    aBlock[4] = (uint64_t)sub_10000F1C4;
    aBlock[5] = (uint64_t)v26;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10000E208;
    aBlock[3] = (uint64_t)&unk_10007C030;
    v47 = _Block_copy(aBlock);
    v49 = type metadata accessor for DispatchQoS(0);
    v50 = &v46;
    v48 = *(_QWORD *)(v49 - 8);
    __chkstk_darwin(v49, v27);
    v29 = (char *)&v46 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain(v15);
    swift_retain(a1);
    v30 = swift_retain(v10);
    static DispatchQoS.unspecified.getter(v30);
    v31 = type metadata accessor for DispatchWorkItemFlags(0);
    v46 = (uint64_t)&v46;
    v32 = *(_QWORD *)(v31 - 8);
    __chkstk_darwin(v31, &type metadata accessor for DispatchWorkItemFlags);
    v34 = (char *)&v46 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    v53 = &_swiftEmptyArrayStorage;
    sub_10000EC40((unint64_t *)&unk_1000853B0, v35, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v37 = v36;
    v38 = sub_1000150C0(&qword_1000850F0);
    sub_10000F4A4((unint64_t *)&qword_1000853C0, &qword_1000850F0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v38, v39, v31, v37);
    v40 = v47;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v34, v47);
    _Block_release(v40);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v49);
    swift_release();
    swift_release();
    swift_release();
LABEL_15:
    swift_release();
    return swift_release();
  }
  swift_release();
  result = swift_release();
  __break(1u);
  return result;
}

BOOL sub_100012F88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_100013C20();
  if ((unint64_t)v0 >> 62)
  {
    if (v0 < 0)
      v3 = v0;
    else
      v3 = v0 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v0);
    v1 = _CocoaArrayWrapper.endIndex.getter(v3);
    sub_100015524();
  }
  else
  {
    v1 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  sub_100015524();
  return v1 != 0;
}

uint64_t sub_100013114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  nw_txt_record_t dictionary;
  os_log_type_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[12];
  uint64_t v48;
  uint64_t v49;

  sub_100011610();
  v48 = v1;
  v49 = v2;
  v4 = v3;
  v5 = sub_1000118FC();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  sub_100011928();
  v10 = v9 - v8;
  v11 = type metadata accessor for String.Encoding(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  sub_100012460();
  v45 = v4;
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  static String.Encoding.utf8.getter(v15);
  v18 = String.data(using:allowLossyConversion:)(v0, 0, v15, v17);
  v20 = v19;
  swift_bridgeObjectRelease(v17);
  result = sub_10001F5E4(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  if (v20 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v22 = sub_10001667C(v18, v20);
    v43 = v18;
    v44 = v20;
    sub_100015614(v22, v23);
    dictionary = nw_txt_record_create_dictionary();
    v25 = static os_log_type_t.debug.getter(dictionary);
    v26 = qword_1000886E0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v45, v5);
    v27 = v25;
    if (sub_100016244())
    {
      v28 = (uint8_t *)sub_1000123C4(12);
      v42 = sub_1000123C4(32);
      v47[0] = v42;
      *(_DWORD *)v28 = 136446210;
      sub_10000EC40(&qword_1000859C8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v5, v29);
      v32 = v31;
      sub_100010D40(v30, v31, v47);
      v46 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v28 + 4);
      swift_bridgeObjectRelease(v32);
      sub_10001650C();
      sub_1000118DC((void *)&_mh_execute_header, v26, v27, "NetworkControlChannelService: Creating new bonjour advertisment with UUID=%{public}s", v28);
      sub_1000135B4(v42);
      sub_100012398(v42);
      sub_100012398((uint64_t)v28);
    }
    else
    {
      sub_10001650C();
    }
    ObjectType = swift_getObjectType(dictionary);
    v35 = static NetworkPairingKeys.identifier.getter(ObjectType);
    UUID.uuidString.getter(v35);
    sub_100015D6C();
    static NetworkPairingKeys.authTag.getter(v36);
    Data.base64EncodedString(options:)(0);
    sub_10003F888();
    sub_100015D6C();
    type metadata accessor for ControlChannelConnectionWireProtocolVersion(0);
    v37 = (void *)static ControlChannelConnectionWireProtocolVersion.current.getter();
    v38 = objc_msgSend(v37, "description");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    static NetworkPairingKeys.wireProtocolVersion.getter();
    sub_100015D6C();
    v39 = (void *)((uint64_t (*)(void))static ControlChannelConnectionWireProtocolVersion.minimumSupported.getter)();
    v40 = objc_msgSend(v39, "description");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    static NetworkPairingKeys.minimumSupportedWireProtocolVersion.getter();
    sub_100015D6C();
    ((void (*)(void))static NetworkPairingKeys.flags.getter)();
    v47[0] = ((uint64_t (*)(void))BonjourAdvertFlags.rawValue.getter)();
    v41 = sub_100016640();
    ((void (*)(void *, unint64_t))BinaryInteger.description.getter)(&type metadata for UInt64, v41);
    sub_100015D6C();
    sub_10003F888();
    sub_100013AB4(v43, v44);
    return (uint64_t)dictionary;
  }
  return result;
}

uint64_t sub_1000135A4()
{
  return type metadata accessor for ControlChannelConnection(0);
}

uint64_t sub_1000135AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000135B4(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1);
}

void *sub_1000135BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = v1;
  *(_QWORD *)(v2 - 120) = a1;
  return _Block_copy((const void *)(v2 - 144));
}

uint64_t sub_1000135C8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000135D0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000135D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return Error<>.init(_:_:)(v2, 0xD000000000000027, (a1 - 32) | 0x8000000000000000, v1);
}

uint64_t sub_1000135FC()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100013604(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(a1, a2, 7);
}

uint64_t sub_10001360C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v3 - 88, v2, a1, v1, *(_QWORD *)(v3 - 136));
}

uint64_t sub_10001362C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 - 232))(a1, a2, *(_QWORD *)(v2 - 224));
}

uint64_t sub_10001363C(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10001364C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

uint64_t sub_100013658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return swift_dynamicCast(v5 - 136, v5 - 96, v4 + 8, a4, 6);
}

void sub_10001366C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_100011610();
  v2 = v1;
  v4 = v3;
  v5 = type metadata accessor for String.Encoding(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  sub_1000119AC();
  static String.Encoding.utf8.getter(v8);
  String.data(using:allowLossyConversion:)(v0, 0, v4, v2);
  v10 = v9;
  swift_bridgeObjectRelease(v2);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v0, v5);
  if (v10 >> 60 != 15)
  {
    __chkstk_darwin(v11, v12);
    __asm { BR              X10 }
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003ALL, 0x800000010006D300, "remotepairingdeviced/NetworkControlChannelService.swift", 55, 2, 747, 0);
  __break(1u);
  JUMPOUT(0x100013880);
}

void sub_100013894(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t sub_1000138A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000138CC()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000138D4(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7);
}

uint64_t sub_1000138F0(const char *a1, void *a2, size_t *a3)
{
  return sysctlbyname(a1, a2, a3, 0, 0);
}

uint64_t sub_1000138FC()
{
  uint64_t v0;

  return swift_getObjectType(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100013918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return swift_dynamicCast(v4 - 160, v4 - 192, a3, a4, 0);
}

uint64_t sub_100013928(float *a1, float a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  va_arg(va1, _QWORD);
  *a1 = a2;
  v5 = v3;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, a1 + 1);
}

uint64_t sub_100013948(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 128, v1 - 120, *(_QWORD *)(v1 - 152));
}

id sub_100013964(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_100013970(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

void sub_100013980()
{
  uint64_t v0;

  dispatch_suspend(*(dispatch_object_t *)(v0 + 40));
}

uint64_t sub_10001399C(uint64_t a1)
{
  return swift_release(a1);
}

void sub_1000139A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t sub_1000139B4()
{
  return type metadata accessor for XPCEventPublisher.Token(0);
}

uint64_t sub_1000139D0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return Error<>.init(_:_:)(v3, a1, (a2 - 32) | 0x8000000000000000, v2);
}

uint64_t sub_100013A00()
{
  return type metadata accessor for XPCDictionary(0);
}

uint64_t sub_100013A2C()
{
  return type metadata accessor for DiscoveredBonjourAdvert(0);
}

uint64_t sub_100013A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

BOOL sub_100013A58(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

unint64_t sub_100013A78()
{
  unint64_t result;

  result = qword_100085A98;
  if (!qword_100085A98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100085A98);
  }
  return result;
}

uint64_t sub_100013AB4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100015430(result, a2);
  return result;
}

uint64_t sub_100013AE0()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_100013AF4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100013B08()
{
  return type metadata accessor for DispatchQoS(0);
}

uint64_t sub_100013B10(uint64_t a1)
{
  return MGCopyAnswer(a1, 0);
}

void sub_100013B1C()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 1024;
}

uint64_t sub_100013B38@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = v3;
  return swift_endAccess(va);
}

uint64_t sub_100013B44()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100013B58()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100013B68@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_100013B88(a1, *(NSObject **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), a2);
}

uint64_t sub_100013B88@<X0>(uint64_t result@<X0>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _BYTE *a7@<X8>)
{
  const uint8_t *v10;
  size_t v12;
  uint64_t v13;

  if (result)
  {
    v10 = (const uint8_t *)result;
    v12 = Data.count.getter(a5, a6);
    v13 = String.utf8CString.getter(a3, a4);
    LOBYTE(v10) = nw_txt_record_set_key(a2, (const char *)(v13 + 32), v10, v12);
    result = swift_release(v13);
    *a7 = (_BYTE)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100013C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  const __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CFDictionary *isa;
  OSStatus v32;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  id v54;
  id v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  CFTypeRef v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::String v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  NSObject *v77;
  unint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  CFStringRef v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];
  unint64_t v95;
  __int128 v96;
  uint64_t v97;
  CFTypeRef v98;
  _QWORD v99[4];
  uint64_t v100;

  sub_100013AC8();
  v4 = sub_10001F66C();
  sub_1000115F0();
  __chkstk_darwin(v5, v6);
  sub_10000E4A4();
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000115F0();
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000118FC();
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  sub_10001547C();
  v14 = sub_100016390();
  if (v1)
    goto LABEL_24;
  v91 = v3;
  v92 = v12;
  v93 = v11;
  v87 = v10;
  v88 = v0;
  v89 = v4;
  v90 = v2;
  v95 = (unint64_t)&_swiftEmptyArrayStorage;
  v15 = static os_log_type_t.info.getter(v14);
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1000886E0, "Fetching all paired peers from keychain", 39, 2);
  v16 = sub_1000150C0(&qword_100085580);
  inited = swift_initStackObject(v16, &v100);
  *(_OWORD *)(inited + 16) = xmmword_100065CB0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v18;
  sub_100024BB8();
  v20 = v19;
  *(_QWORD *)(inited + 72) = v19;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  if (kSecUseSystemKeychain)
  {
    *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseSystemKeychain);
    *(_QWORD *)(inited + 88) = v21;
    *(_QWORD *)(inited + 120) = &type metadata for Bool;
    *(_BYTE *)(inited + 96) = 1;
    *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
    *(_QWORD *)(inited + 136) = v22;
    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 144) = 0xD00000000000001ALL;
    *(_QWORD *)(inited + 152) = 0x800000010006A850;
    *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnAttributes);
    *(_QWORD *)(inited + 184) = v23;
    *(_QWORD *)(inited + 216) = &type metadata for Bool;
    *(_BYTE *)(inited + 192) = 1;
    *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecMatchLimit);
    *(_QWORD *)(inited + 232) = v24;
    *(_QWORD *)(inited + 264) = v20;
    *(_QWORD *)(inited + 240) = kSecMatchLimitAll;
    v25 = (id)kSecClassGenericPassword;
    v26 = (id)kSecMatchLimitAll;
    v94[2] = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
    sub_100011964();
    v99[3] = &type metadata for String;
    sub_100024BC8();
    v99[0] = 0xD000000000000017;
    v99[1] = v27;
    sub_100015920((uint64_t)v99, v28, v29, v30);
    v98 = 0;
    isa = sub_100012488().super.isa;
    sub_1000118F4();
    v32 = SecItemCopyMatching(isa, &v98);

    v33 = v98;
    if (v32)
    {
      sub_100024BDC();
      if (v32 == -25300)
      {
LABEL_5:
        swift_unknownObjectRelease(v33);
LABEL_24:
        sub_1000123A4();
        return;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      sub_100015DC4();
      v59 = objc_allocWithZone((Class)NSError);
      sub_100015768();
      sub_100024CC8();
      v60 = v33;
    }
    else
    {
      v34 = v90;
      if (v98
        && (v99[0] = v98,
            swift_unknownObjectRetain(v98),
            v35 = sub_1000150C0(&qword_1000855B8),
            v36 = sub_100015CB0((uint64_t)&v96, (uint64_t)v99, (uint64_t)&type metadata for Swift.AnyObject + 8, v35),
            (v36 & 1) != 0))
      {
        v37 = v96;
        v38 = static os_log_type_t.debug.getter(v36);
        v39 = qword_1000886E0;
        v40 = v38;
        if (os_log_type_enabled((os_log_t)qword_1000886E0, v38))
        {
          swift_bridgeObjectRetain(v37);
          v41 = v37;
          v42 = (uint8_t *)sub_1000123C4(12);
          *(_DWORD *)v42 = 134217984;
          v99[0] = *(_QWORD *)(v41 + 16);
          sub_100024D08((uint64_t)v42, v43, (uint64_t)(v42 + 4));
          swift_bridgeObjectRelease(v41);
          sub_1000118DC((void *)&_mh_execute_header, v39, v40, "Successfully fetched %ld peer items from keychain", v42);
          v44 = (uint64_t)v42;
          v37 = v41;
          sub_100012398(v44);
        }
        v45 = *(_QWORD *)(v37 + 16);
        v46 = (uint64_t)v87;
        if (!v45)
        {
          v74 = v37;
LABEL_31:
          v75 = swift_bridgeObjectRelease(v74);
          v76 = static os_log_type_t.debug.getter(v75);
          v77 = qword_1000886E0;
          v78 = v95;
          if (sub_100024E44(v76))
          {
            sub_100024D78(v78);
            v79 = (uint8_t *)sub_1000123C4(12);
            *(_DWORD *)v79 = 134217984;
            if (v78 >> 62)
            {
              swift_bridgeObjectRetain(v78);
              v80 = sub_100024E64();
              sub_1000135D0();
            }
            else
            {
              v80 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            v81 = sub_1000135D0();
            v99[0] = v80;
            sub_100024D08(v81, v82, (uint64_t)(v79 + 4));
            sub_1000135D0();
            sub_1000118DC((void *)&_mh_execute_header, v77, v76, "Successfully parsed %ld peer items from keychain", v79);
            sub_100012398((uint64_t)v79);
          }
          sub_1000156AC((uint64_t)&v95, (uint64_t)v99);
          v33 = v98;
          goto LABEL_5;
        }
        v84 = v37;
        v47 = v37 + 32;
        v85 = kSecAttrAccount;
        v86 = (uint64_t)&type metadata for Any + 8;
        while (1)
        {
          sub_100015100(v47, (uint64_t)v99);
          sub_100015100((uint64_t)v99, (uint64_t)&v96);
          v48 = sub_1000150C0(&qword_1000855A8);
          if ((sub_100015CB0((uint64_t)v94, (uint64_t)&v96, v86, v48) & 1) == 0)
            goto LABEL_28;
          v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
          v51 = v50;
          sub_10000E4D0(v49, v50, &v96);
          swift_bridgeObjectRelease(v51);
          sub_1000118F4();
          if (!v97)
          {
            sub_100015670((uint64_t)&v96, &qword_100085588);
LABEL_28:
            sub_100024C70();
            v66 = sub_100024BDC();
            goto LABEL_30;
          }
          if ((sub_100015CB0((uint64_t)v94, (uint64_t)&v96, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) == 0)goto LABEL_28;
          UUID.init(uuidString:)(v94[0], v94[1]);
          sub_1000118F4();
          v52 = v93;
          sub_100016110(v46, 1, v93);
          if (v53)
            break;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32))(v91, v46, v52);
          sub_1000145B0();
          v55 = v54;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v57 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v56 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v57 >= v56 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
          v58 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v57, v55);
          specialized Array._endMutation()(v58);

          sub_100024CE0();
          sub_100024D18();
          v47 += 32;
          if (!--v45)
          {
            v74 = v84;
            goto LABEL_31;
          }
        }
        sub_100024C70();
        v67 = sub_100024BDC();
        v66 = sub_100024D60(v67, (uint64_t *)&unk_100086150);
LABEL_30:
        v68 = v90;
        static RemotePairingError.pairingFailed.getter(v66);
        *(_QWORD *)&v96 = 0;
        *((_QWORD *)&v96 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(34);
        v69._countAndFlagsBits = 0xD000000000000020;
        v69._object = (void *)0x800000010006A950;
        String.append(_:)(v69);
        _print_unlocked<A, B>(_:_:)(v99, &v96, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v70 = v96;
        v71 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
        v72 = v89;
        sub_1000156B8(v89, v71);
        sub_10000EC00((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
        v73 = Error<>.init(_:_:)(v68, v70, *((_QWORD *)&v70 + 1), v72);
        swift_willThrow(v73);
        sub_100024D18();
      }
      else
      {
        v61 = sub_100024BDC();
        static RemotePairingError.pairingFailed.getter(v61);
        v63 = sub_100011608((unint64_t *)&unk_1000859D0, v62, (uint64_t)&protocol conformance descriptor for RemotePairingError);
        sub_1000156B8(v89, v63);
        sub_100011608((unint64_t *)&unk_1000853D0, v64, (uint64_t)&protocol conformance descriptor for RemotePairingError);
        v65 = sub_100014478(v34, 0xD000000000000027, 0x800000010006A920);
        swift_willThrow(v65);
      }
      v60 = v98;
    }
    swift_unknownObjectRelease(v60);
    goto LABEL_24;
  }
  __break(1u);
}

uint64_t sub_100014464()
{
  uint64_t v0;

  return swift_getObjectType(v0);
}

void sub_10001446C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010D40(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_100014478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return Error<>.init(_:_:)(a1, a2, a3, v3);
}

uint64_t sub_100014484(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + v2) = a1;
  return swift_retain(a1);
}

void sub_100014494()
{
  sub_100049484();
}

uint64_t sub_1000144A0()
{
  return type metadata accessor for TunnelConnectionIdentifierCategory(0);
}

uint64_t sub_1000144AC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10004C1F4(v1, v0);
}

uint64_t sub_1000144B8()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_1000144C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v4, a2, v3);
}

uint64_t sub_1000144D8()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000144FC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100014518()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100014520(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_10001452C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v10);
}

uint64_t sub_100014548()
{
  uint64_t v0;

  return v0;
}

id sub_100014554(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_100014560@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 - 256));
}

uint64_t sub_100014578()
{
  uint64_t v0;

  return static _SetStorage.allocate(capacity:)(v0);
}

void sub_100014588(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_10001459C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  *v0 = v1;
  return swift_storeEnumTagMultiPayload(v0, *(_QWORD *)(v2 - 208), 1);
}

void sub_1000145B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const __CFDictionary *isa;
  OSStatus v37;
  CFTypeRef v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  Class v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  Class v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  CFTypeRef v133;
  __int128 v134;
  void *v135;
  uint64_t v136;

  sub_100013AC8();
  v128 = v0;
  v1 = sub_10001F66C();
  sub_1000115F0();
  __chkstk_darwin(v2, v3);
  sub_1000138DC();
  v129 = v4;
  sub_1000150C0(&qword_100085590);
  sub_1000115F0();
  __chkstk_darwin(v5, v6);
  v127 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024B80();
  v10 = __chkstk_darwin(v8, v9);
  v126 = (uint64_t)&v120 - v11;
  v12 = static os_log_type_t.debug.getter(v10);
  v13 = qword_1000886E0;
  v14 = sub_1000150C0(&qword_100085570);
  v15 = sub_1000153A4(v14);
  *(_OWORD *)(v15 + 16) = xmmword_100065C90;
  v16 = sub_100024DA0();
  v18 = v17;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_100016354();
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v18;
  sub_100024DF8(v12, (uint64_t)&_mh_execute_header, v13, (uint64_t)"Fetching paired peer with identifier %{public}@", 47);
  sub_100016038();
  v19 = sub_1000150C0(&qword_100085580);
  inited = swift_initStackObject(v19, &v136);
  *(_OWORD *)(inited + 16) = xmmword_100065CF0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v21;
  sub_100024BB8();
  *(_QWORD *)(inited + 72) = v22;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(_QWORD *)(inited + 88) = v23;
  v24 = (id)kSecClassGenericPassword;
  v25 = sub_100024DA0();
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 96) = v25;
  *(_QWORD *)(inited + 104) = v26;
  if (!kSecUseSystemKeychain)
    __break(1u);
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseSystemKeychain);
  *(_QWORD *)(inited + 136) = v27;
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = 1;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
  *(_QWORD *)(inited + 184) = v28;
  *(_QWORD *)(inited + 216) = &type metadata for String;
  *(_QWORD *)(inited + 192) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 200) = 0x800000010006A850;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnData);
  *(_QWORD *)(inited + 232) = v29;
  *(_QWORD *)(inited + 264) = &type metadata for Bool;
  *(_BYTE *)(inited + 240) = 1;
  *(_QWORD *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnAttributes);
  *(_QWORD *)(inited + 280) = v30;
  *(_QWORD *)(inited + 312) = &type metadata for Bool;
  *(_BYTE *)(inited + 288) = 1;
  v130 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
  sub_100011964();
  v135 = &type metadata for String;
  sub_100024BC8();
  *(_QWORD *)&v134 = 0xD000000000000017;
  *((_QWORD *)&v134 + 1) = v31;
  sub_100015920((uint64_t)&v134, v32, v33, v34);
  v133 = 0;
  v35 = v130;
  swift_bridgeObjectRetain(v130);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_100014518();
  v37 = SecItemCopyMatching(isa, &v133);

  v38 = v133;
  if (v37)
  {
    sub_100014518();
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    sub_100015DC4();
    v39 = objc_allocWithZone((Class)NSError);
    sub_100015768();
    sub_100024CC8();
LABEL_19:
    swift_unknownObjectRelease(v38);
LABEL_20:
    sub_1000123A4();
    return;
  }
  if (!v133
    || (*(_QWORD *)&v134 = v133,
        swift_unknownObjectRetain(v133),
        v40 = sub_1000150C0(&qword_1000855A8),
        (sub_100015CB0((uint64_t)&v131, (uint64_t)&v134, (uint64_t)&type metadata for Swift.AnyObject + 8, v40) & 1) == 0))
  {
    v47 = v35;
LABEL_17:
    v51 = swift_bridgeObjectRelease(v47);
    v52 = v129;
    static RemotePairingError.pairingFailed.getter(v51);
    v54 = sub_100011608((unint64_t *)&unk_1000859D0, v53, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_1000156B8(v1, v54);
    sub_100011608((unint64_t *)&unk_1000853D0, v55, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_100024C88();
    Error<>.init(_:_:)(v52, v56, v57, v1);
    sub_100015DD4();
    goto LABEL_18;
  }
  v41 = v131;
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
  sub_10001513C(v42, v43, v41, &v134);
  sub_100014518();
  if (!v135)
  {
    v48 = v41;
LABEL_12:
    v49 = swift_bridgeObjectRelease(v48);
LABEL_13:
    sub_10001657C(v49, &qword_100085588);
LABEL_16:
    v47 = v130;
    goto LABEL_17;
  }
  if ((sub_100015CB0((uint64_t)&v131, (uint64_t)&v134, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data) & 1) == 0)
  {
    v50 = v41;
LABEL_15:
    swift_bridgeObjectRelease(v50);
    goto LABEL_16;
  }
  v45 = v131;
  v44 = v132;
  v46 = v128;
  OPACKDecode(data:)(&v134, v131, v132);
  if (v46)
  {
    swift_bridgeObjectRelease(v130);
    sub_100015430(v45, v44);
    swift_bridgeObjectRelease(v41);
LABEL_18:
    v38 = v133;
    goto LABEL_19;
  }
  v125 = v44;
  v128 = v45;
  if ((sub_100015CB0((uint64_t)&v131, (uint64_t)&v134, (uint64_t)&type metadata for Any + 8, v40) & 1) == 0)
  {
    sub_1000135D0();
    v76 = v128;
    v77 = v125;
LABEL_36:
    sub_100015430(v76, v77);
    goto LABEL_16;
  }
  v58 = v131;
  sub_10000E4D0(27504, 0xE200000000000000, &v134);
  if (!v135)
  {
    sub_1000135D0();
    sub_100024BAC();
    v48 = v58;
    goto LABEL_12;
  }
  if ((sub_100015CB0((uint64_t)&v131, (uint64_t)&v134, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data) & 1) == 0)
  {
    sub_1000135D0();
    sub_100024BAC();
    v50 = v58;
    goto LABEL_15;
  }
  v124 = v41;
  v59 = v131;
  v60 = v132;
  v61 = sub_100024DC0();
  sub_10000E4D0(v61, v62, v63);
  if (!v135)
  {
    swift_bridgeObjectRelease(v124);
    sub_100024BAC();
    sub_1000118F4();
    v49 = sub_100015430(v59, v60);
    goto LABEL_13;
  }
  v121 = v59;
  v122 = v60;
  v123 = v58;
  if ((sub_100015CB0((uint64_t)&v131, (uint64_t)&v134, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data) & 1) == 0)
  {
    swift_bridgeObjectRelease(v124);
    sub_100024BAC();
    swift_bridgeObjectRelease(v123);
    v76 = v121;
    v77 = v122;
    goto LABEL_36;
  }
  v129 = v131;
  v120 = v132;
  v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
  sub_10001513C(v64, v65, v124, &v134);
  v66 = sub_1000118F4();
  if (!v135)
  {
    sub_10001657C(v66, &qword_100085588);
    v68 = v121;
    goto LABEL_42;
  }
  v67 = sub_100015CB0((uint64_t)&v131, (uint64_t)&v134, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
  v68 = v121;
  if ((v67 & 1) == 0)
  {
LABEL_42:
    v69 = v68;
    swift_bridgeObjectRelease(v130);
    goto LABEL_43;
  }
  if (kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate)
  {
    v69 = v121;
    v71 = v131;
    v70 = v132;
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate);
    if (v71 == v72 && v70 == v73)
    {
      sub_100015A54(v70);
LABEL_72:
      sub_100023DE0(v130);
      sub_1000118F4();
LABEL_43:
      v78 = objc_msgSend(objc_allocWithZone((Class)CUPairedPeer), "init");
      v79 = UUID._bridgeToObjectiveC()().super.isa;
      sub_100013964((uint64_t)v79, "setIdentifier:");

      sub_100016080(v69, v122, v78);
      sub_1000160C4(v129, v120, v78);
      v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrModificationDate);
      sub_1000152E8(v80, v81);
      v82 = sub_1000118F4();
      if (v135)
      {
        v83 = sub_100016490();
        v84 = v126;
        v85 = sub_100015CB0(v126, (uint64_t)&v134, (uint64_t)&type metadata for Any + 8, v83);
        sub_100015664(v84, v85 ^ 1u, 1, v83);
        v86 = sub_100015658(v84, 1, v83);
        v87 = 0;
        v88 = (uint64_t)v127;
        if ((_DWORD)v86 != 1)
        {
          v87 = Date._bridgeToObjectiveC()().super.isa;
          v86 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 8))(v84, v83);
        }
      }
      else
      {
        sub_10001657C(v82, &qword_100085588);
        sub_100016490();
        sub_100024C04();
        v86 = sub_100015664(v89, v90, v91, v92);
        v87 = 0;
        v88 = (uint64_t)v127;
      }
      sub_100013964(v86, "setDateModified:");

      v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrLabel);
      sub_1000152E8(v93, v94);
      v95 = sub_1000118F4();
      if (v135)
      {
        v96 = sub_100015CB0((uint64_t)&v131, (uint64_t)&v134, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
        if ((v96 & 1) != 0)
        {
          sub_100024D8C();
          v97 = sub_100024E9C();
          v96 = swift_bridgeObjectRelease(v97);
          goto LABEL_52;
        }
      }
      else
      {
        v96 = sub_10001657C(v95, &qword_100085588);
      }
      v87 = 0;
LABEL_52:
      sub_100013964(v96, "setName:");

      sub_10001513C(7103329, 0xE300000000000000, v123, &v134);
      if (v135)
      {
        v99 = sub_1000150C0(&qword_1000855B0);
        v100 = (char *)&type metadata for Any + 8;
        v101 = sub_100015CB0((uint64_t)&v131, (uint64_t)&v134, (uint64_t)&type metadata for Any + 8, v99);
        if ((v101 & 1) != 0)
        {
          sub_100024D34();
          v102 = sub_100024E9C();
          v101 = swift_bridgeObjectRelease(v102);
          goto LABEL_57;
        }
      }
      else
      {
        v101 = sub_10001657C(v98, &qword_100085588);
      }
      v100 = 0;
LABEL_57:
      sub_100013964(v101, "setAcl:");

      sub_10001513C(0x6C65646F6DLL, 0xE500000000000000, v123, &v134);
      if (v135)
      {
        v104 = sub_100015CB0((uint64_t)&v131, (uint64_t)&v134, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
        if ((v104 & 1) != 0)
        {
          sub_100024D8C();
          v105 = sub_100024E9C();
          v104 = swift_bridgeObjectRelease(v105);
          goto LABEL_62;
        }
      }
      else
      {
        v104 = sub_10001657C(v103, &qword_100085588);
      }
      v100 = 0;
LABEL_62:
      sub_100013964(v104, "setModel:");

      sub_10000E4D0(1868983913, 0xE400000000000000, &v134);
      v106 = sub_1000118F4();
      if (v135)
      {
        v107 = sub_1000150C0(&qword_1000855B0);
        v108 = (char *)&type metadata for Any + 8;
        v109 = sub_100015CB0((uint64_t)&v131, (uint64_t)&v134, (uint64_t)&type metadata for Any + 8, v107);
        if ((v109 & 1) != 0)
        {
          sub_100024D34();
          v110 = sub_100024E9C();
          v109 = swift_bridgeObjectRelease(v110);
LABEL_67:
          sub_100013964(v109, "setInfo:");

          v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrCreationDate);
          sub_1000152E8(v111, v112);
          sub_1000118F4();
          v113 = sub_100016504();
          if (v135)
          {
            v114 = sub_100016490();
            v115 = sub_100015CB0(v88, (uint64_t)&v134, (uint64_t)&type metadata for Any + 8, v114) ^ 1;
            v116 = v88;
            v117 = 1;
            v118 = v114;
          }
          else
          {
            sub_10001657C(v113, &qword_100085588);
            sub_100016490();
            sub_100024C04();
          }
          sub_100015664(v116, v115, v117, v118);
          v119 = v128;
          CUPairedPeer.initialPairingTime.setter(v88);
          sub_100015430(v119, v125);
          sub_100015430(v69, v122);
          sub_100024D80();
          swift_unknownObjectRelease(v133);
          goto LABEL_20;
        }
      }
      else
      {
        v109 = sub_10001657C(v106, &qword_100085588);
      }
      v108 = 0;
      goto LABEL_67;
    }
    v75 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v70, v72, v73, 0);
    sub_1000135D0();
    sub_1000118F4();
    if ((v75 & 1) != 0)
      goto LABEL_72;
    goto LABEL_42;
  }
  __break(1u);
}

uint64_t sub_1000150C0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100015100(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_10001513C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v6;
  char v7;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_100015264(a1, a2), (v7 & 1) != 0))
  {
    sub_100016604(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    sub_100014510();
  }
}

unint64_t sub_100015184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100015264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  String.hash(into:)(v8, a1, a2);
  Hasher._finalize()();
  v4 = sub_10005A9E0();
  return sub_100015184(v4, v5, v6);
}

uint64_t sub_1000152D4()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000152DC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100015430(v1, v0);
}

void sub_1000152E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_10001513C(a1, a2, v3, (_OWORD *)(v2 + 112));
}

void sub_1000152F8()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 0;
  *(_QWORD *)(v0 - 88) = 0xE000000000000000;
}

uint64_t sub_100015318()
{
  return type metadata accessor for DispatchQoS(0);
}

uint64_t sub_100015334@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100015340()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_10001534C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100015364()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_100015378(uint64_t a1)
{
  return swift_allocObject(a1, 24, 7);
}

uint64_t sub_100015384()
{
  uint64_t v0;

  return swift_release(v0);
}

BOOL sub_10001538C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001539C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, a5, 2);
}

uint64_t sub_1000153A4(uint64_t a1)
{
  return swift_allocObject(a1, 72, 7);
}

uint64_t sub_1000153B0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000153B8@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v3, a1, v2);
}

void sub_1000153E0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v0 + 16) = v1 + 1;
}

uint64_t sub_1000153F4(uint64_t a1)
{
  uint64_t v1;

  return sub_100015658(a1, 1, v1);
}

uint64_t sub_100015410@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for DispatchQoS(0);
}

uint64_t sub_100015430(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100015474()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100015494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10001549C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return Dictionary.init(dictionaryLiteral:)(v3, v0, v2, v1);
}

uint64_t sub_1000154B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000150C0(a3);
}

uint64_t sub_1000154C0()
{
  uint64_t v0;

  return swift_endAccess(v0 - 56);
}

uint64_t sub_1000154C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_retain(a4);
}

uint64_t sub_1000154D4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10001E814(v0, v1);
}

uint64_t sub_1000154E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100015664(a1, a2, 1, v2);
}

uint64_t sub_1000154EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  sub_100015664(v5, a2, 1, a4);
  return String.init<A>(describing:)(v5, v4);
}

uint64_t sub_100015510(uint64_t a1)
{
  uint64_t v1;

  return swift_allocError(v1, a1, 0, 0);
}

uint64_t sub_100015524()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001552C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100015538()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100015664(v0, 1, 1, v1);
}

uint64_t sub_10001554C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11, 2, a4, 55, 2, a7, 25);
}

uint64_t sub_100015564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v10);
}

uint64_t sub_100015580(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000155AC(uint64_t a1)
{
  uint64_t v1;

  return sub_100015658(a1, 1, v1);
}

uint64_t sub_1000155B8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_1000155C0()
{
  const void *v0;

  _Block_release(v0);
}

BOOL sub_1000155C8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_1000155F0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_100015600()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

void sub_100015608()
{
  uint64_t v0;

  sub_10002D498(v0 - 160, v0 - 208);
}

uint64_t sub_100015614(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100015658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_100015664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100015670(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1000150C0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000156AC(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0, 0);
}

uint64_t sub_1000156B8(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0, 0);
}

uint64_t sub_1000156D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  *v1 = v0;
  return swift_storeEnumTagMultiPayload(v1, v2, 1);
}

uint64_t sub_1000156EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v0);
}

uint64_t sub_100015700(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_10001570C(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  return sub_10003F6FC(a1, a2, 32);
}

void sub_100015724(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  sub_100010D40(v2, v1, (uint64_t *)va);
}

void sub_10001574C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_100015768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100045288(v1, v2, v0, 0);
}

uint64_t sub_1000157B8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000157C4()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000157D4(uint64_t a1)
{
  uint64_t v1;

  return swift_allocError(v1, a1, 0, 0);
}

uint64_t sub_1000157E8(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_1000157F8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

void sub_10001580C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_10001585C()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 - 312));
}

uint64_t sub_100015868()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100015870(uint64_t a1)
{
  return swift_release_n(a1, 2);
}

uint64_t sub_100015878(uint64_t a1)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(a1 + 64)));
}

uint64_t sub_100015890()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 144) + 8))(v0, *(_QWORD *)(v1 - 136));
}

uint64_t sub_1000158A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return OS_dispatch_queue.childQueue(label:qos:attributes:autoreleaseFrequency:)(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, v4, v3, v2);
}

uint64_t sub_1000158B8()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_1000158E0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000413E0(v0, v1);
}

uint64_t sub_1000158EC()
{
  return AuxiliaryMetadataUpdate.domain.getter();
}

uint64_t sub_1000158F4()
{
  uint64_t v0;

  return v0 + 32;
}

void sub_100015900(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100015914()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100015430(v0, v1);
}

void sub_100015920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100015BEC(a1, a3, a4);
}

uint64_t sub_10001592C()
{
  uint64_t v0;

  return v0;
}

BOOL sub_10001593C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_10001594C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100015968()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_100015978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10004EDAC(a1, v1, *(_QWORD *)(v2 - 216), 0);
}

void sub_100015988(uint64_t a1)
{
  uint64_t *v1;

  sub_10003F608(a1, v1);
}

uint64_t sub_100015990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t sub_1000159A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000159A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000159B0()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000159B8()
{
  uint64_t v0;

  return swift_retain(v0);
}

void sub_1000159DC(uint64_t a1)
{
  uint64_t *v1;

  sub_10002D678(a1, v1);
}

uint64_t sub_1000159E4()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_100015A18()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

_QWORD *sub_100015A38()
{
  uint64_t v0;

  return sub_100016418((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
}

uint64_t sub_100015A44()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100015A4C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  return sub_10000EC00(a1, v3, a3);
}

uint64_t sub_100015A54(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2);
}

uint64_t sub_100015A5C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v3 - 128);
  *(_QWORD *)(v0 + v2) = *(_QWORD *)(v3 - 120);
  v5 = *(_QWORD *)(v3 - 136);
  *v1 = v4;
  v1[1] = v5;
  return v0;
}

uint64_t sub_100015A78()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

void sub_100015A84()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t sub_100015A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_1000150C0(a5);
}

uint64_t sub_100015A94()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100015AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;

  *v12 = 0x8000000000000000;
  return swift_retain(a12);
}

uint64_t sub_100015AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 144, a2, v2);
}

uint64_t sub_100015AD0(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_100015AE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = v1 + 4;
  *(_QWORD *)(v2 - 128) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_100015AF4()
{
  uint64_t v0;

  return v0 - 136;
}

void sub_100015B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100045288(a1, a2, a3, 0);
}

uint64_t sub_100015B1C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t);

  return sub_1000121B8(a1, 255, v4, a4);
}

uint64_t sub_100015B54()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease(v0);
}

void sub_100015B60(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100015B74()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10000EBB8(v1, v0, 1);
}

uint64_t sub_100015B84(uint64_t a1)
{
  uint64_t v1;

  return swift_allocError(v1, a1, 0, 0);
}

uint64_t sub_100015B98()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_100013AB4(v2, v3);
  sub_100013AB4(v1, v0);
  return sub_100013AB4(v1, v0);
}

uint64_t sub_100015BC8()
{
  return swift_slowAlloc(12, -1);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_10001580C(a1, &qword_100084CA8, (uint64_t)&unk_10007A610);
}

void sub_100015BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v5[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100015FB0((_OWORD *)a1, v5);
    sub_100015C68(v5, a2, a3);
    sub_100015524();
  }
  else
  {
    sub_10003F608(a1, &qword_100085588);
    sub_1000586DC(v5, a2, a3);
    sub_100015524();
    sub_10003F608((uint64_t)v5, &qword_100085588);
  }
  sub_100014568();
}

#error "100015C88: call analysis failed (funcsize=11)"

uint64_t sub_100015C94()
{
  return type metadata accessor for DispatchQoS(0);
}

uint64_t sub_100015CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6);
}

void sub_100015CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010D40(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_100015CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 25);
}

uint64_t sub_100015CD0(float a1)
{
  uint64_t v1;
  float *v2;

  *v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_100015CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, a5, a6);
}

BOOL sub_100015D18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_100015D2C()
{
  uint64_t v0;

  return swift_slowDealloc(v0, -1, -1);
}

uint64_t sub_100015D3C()
{
  return type metadata accessor for XPCDictionary(0);
}

uint64_t sub_100015D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v0);
}

void sub_100015D6C()
{
  sub_10001366C();
}

uint64_t sub_100015D78()
{
  return static os_log_type_t.default.getter();
}

void sub_100015D90()
{
  sub_100048FF4();
}

uint64_t sub_100015DBC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100015DD4()
{
  return swift_willThrow();
}

uint64_t sub_100015DDC(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_100015DEC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_100015DF4(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  sub_100010D40(v2, v1, (uint64_t *)va);
}

uint64_t sub_100015E04(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

void sub_100015E20(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_10000EC40(a1, v3, a3);
}

uint64_t sub_100015E4C()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_100015E54(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;

  sub_100015264(a2, a3);
  sub_10005A78C();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = v9;
  v13 = v10;
  sub_1000150C0((uint64_t *)&unk_100087710);
  if (!sub_10005ABF0(a4 & 1))
    goto LABEL_5;
  v14 = sub_10005A9E0();
  v16 = sub_100015264(v14, v15);
  if ((v13 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v12 = v16;
LABEL_5:
  v18 = *v4;
  if ((v13 & 1) != 0)
  {
    v19 = (_QWORD *)(*(_QWORD *)(v18 + 56) + 32 * v12);
    sub_100010DFC(v19);
    sub_100015FB0(a1, v19);
  }
  else
  {
    sub_100015F58(v12, a2, a3, (uint64_t)a1, v18);
    swift_bridgeObjectRetain(a3);
  }
}

_OWORD *sub_100015F58(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = sub_10005A6F0(a1, a5 + 8 * (a1 >> 6));
  v8 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v6);
  *v8 = v9;
  v8[1] = v10;
  result = sub_100015FB0(v11, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v6));
  v13 = *(_QWORD *)(a5 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(a5 + 16) = v15;
  return result;
}

_OWORD *sub_100015FB0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100015FC0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 88));
}

uint64_t sub_100015FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100015664(a1, a2, a3, v3);
}

uint64_t sub_100015FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 120, v1, v0);
}

uint64_t sub_100015FE0()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
}

void *sub_100015FEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = a1;
  *(_QWORD *)(v2 - 144) = v1;
  return _Block_copy((const void *)(v2 - 168));
}

uint64_t sub_100015FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;

  *v11 = a11;
  return swift_unknownObjectRelease(v12);
}

uint64_t sub_100016008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100016018()
{
  return swift_willThrow();
}

uint64_t sub_100016038()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100016040(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 120, a2, v2);
}

void sub_10001604C(unint64_t *a1)
{
  uint64_t *v1;

  sub_10000F4A4(a1, v1);
}

uint64_t sub_100016054()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

BOOL sub_10001606C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

void sub_100016080(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa;

  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a3, "setPublicKey:", isa);

}

void sub_1000160C4(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa;

  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a3, "setAltIRK:", isa);

}

uint64_t sub_100016108()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 104));
}

uint64_t sub_100016110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100015658(a1, a2, a3);
}

uint64_t sub_100016124@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10001612C()
{
  uint64_t v0;

  return swift_retain(v0);
}

void sub_100016134()
{
  OS_dispatch_queue.assertOnQueueHierarchy()();
}

uint64_t sub_10001613C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100016144@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_unknownObjectRelease(*(_QWORD *)(v1 + a1));
}

void sub_10001614C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_100016158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_100016170()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = v0;
  *(_QWORD *)(v2 - 200) = v1;
  return sub_100015614(v0, v1);
}

uint64_t sub_100016180()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_10001619C(uint64_t a1)
{
  uint64_t v1;

  return swift_allocError(v1, a1, 0, 0);
}

uint64_t sub_1000161B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return swift_dynamicCast(v5 - 144, v5 - 72, v4 + 8, a4, 6);
}

void *sub_1000161C4@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_1000161D4@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return swift_beginAccess(v2 + a1, va, 33, 0);
}

void sub_1000161EC()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_100016208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100016218()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100015614(v0, v1);
}

uint64_t sub_100016224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_100016234()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001623C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

BOOL sub_100016244()
{
  NSObject *v0;
  os_log_type_t v1;

  return os_log_type_enabled(v0, v1);
}

uint64_t sub_100016250@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 - 256) = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100016288()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_100016290()
{
  return type metadata accessor for DispatchWorkItemFlags(0);
}

uint64_t sub_100016298()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100015430(v0, v1);
}

uint64_t sub_1000162AC()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000162CC()
{
  return 0;
}

uint64_t sub_1000162F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100016308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v11 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v7);
  return dispatch thunk of static Equatable.== infix(_:_:)((uint64_t *)va, va1, v9, v8);
}

uint64_t sub_10001632C()
{
  return 0;
}

uint64_t sub_100016348()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

unint64_t sub_100016354()
{
  unint64_t result;

  result = qword_100085578;
  if (!qword_100085578)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100085578);
  }
  return result;
}

_QWORD *sub_100016390()
{
  uint64_t v0;
  _QWORD *result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_100016418((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
  if (*(_BYTE *)(*result + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted) != 1)
  {
    v2 = sub_10001F66C();
    v3 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_1000156B8(v2, v3);
    v4 = static RemotePairingError.unlockRequired.getter();
    return (_QWORD *)swift_willThrow(v4);
  }
  return result;
}

_QWORD *sub_100016418(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

void sub_10001643C()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t sub_100016444()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100016450(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_100016470()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_100016478()
{
  OS_dispatch_queue.assertOnQueueHierarchy()();
}

uint64_t sub_100016480(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_10001F01C(a1, a2, v3, v2);
}

uint64_t sub_100016490()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_100016498()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_1000164A0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t sub_1000164A8(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_1000164B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return Set.Iterator.init(_cocoa:)(v1, v2, a1);
}

void *sub_1000164C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = a1;
  *(_QWORD *)(v2 - 120) = v1;
  return _Block_copy((const void *)(v2 - 144));
}

uint64_t sub_1000164D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000164E8()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_100016504()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001650C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100016528()
{
  return type metadata accessor for XPCDictionary(0);
}

uint64_t sub_100016540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static HashableByObjectIdentity.== infix(_:_:)(a1, v2, v3, v1);
}

uint64_t sub_100016554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 96, v1, v0);
}

uint64_t sub_100016564()
{
  return XPCDictionary.auditToken.getter();
}

uint64_t sub_100016570@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10001657C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100015670(v2 + 112, a2);
}

uint64_t sub_100016584(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_100016590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v0, v2);
}

void sub_1000165D0()
{
  OS_dispatch_queue.assertOnQueueHierarchy()();
}

id sub_1000165EC(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000165F4(uint64_t a1)
{
  return swift_retain_n(a1, 2);
}

uint64_t sub_1000165FC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100016604(uint64_t a1, uint64_t a2)
{
  return sub_100015100(a1, a2);
}

uint64_t sub_10001661C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100016630@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

unint64_t sub_100016640()
{
  unint64_t result;

  result = qword_1000869B0;
  if (!qword_1000869B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1000869B0);
  }
  return result;
}

uint64_t sub_10001667C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  void *v6;

  sub_100016390();
  if (!v2)
  {
    sub_1000166F4();
    v6 = v5;
    CUPairingIdentity.authTag(for:type:)(a1, a2, 1);

  }
  return sub_100024D4C();
}

void sub_1000166F4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(void **)(v0 + 104);
  if (!v2)
  {
    sub_1000207B4();
    if (v1)
      goto LABEL_4;
    v5 = *(void **)(v0 + 104);
    *(_QWORD *)(v0 + 104) = v4;
    v6 = v4;

    v2 = 0;
  }
  v3 = v2;
LABEL_4:
  sub_100024EA8();
}

uint64_t sub_100016758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OS_dispatch_queue.assertOnQueueHierarchy()();
  v1 = String.utf8CString.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  xpc_set_event("com.apple.bonjour.registration", v1 + 32, 0);
  sub_1000118D4();
  v2 = swift_retain(v0);
  return sub_10000ECB0(v2, v0);
}

uint64_t sub_1000167AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000167F0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  result = __DataStorage._bytes.getter();
  v8 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_15;
  }
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  v13 = v8 + v12;
  if (v8)
    v14 = v13;
  else
    v14 = 0;
  a3(&v16, v8, v14);
  if (!v3)
    v15 = v16;
  return v15 & 1;
}

uint64_t sub_10001689C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000168A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000168AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000168B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000168BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000168C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000168CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000168D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000168DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000168E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000168EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000168F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000168FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100016904(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001690C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100016914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100016924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100016934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100016944(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100016954(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100016964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100016974(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100016984(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100016994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000169A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000169B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000169C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000169D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000169E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000169F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

void sub_100016A30()
{
  uint64_t v0;

  sub_100011D04(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

BOOL socket_deny_cellular(int a1)
{
  int v2;

  v2 = 4;
  return setsockopt(a1, 0xFFFF, 4225, &v2, 4u) == 0;
}

uint64_t is_setup_complete()
{
  if (&_BYSetupAssistantHasCompletedInitialRun)
    return BYSetupAssistantHasCompletedInitialRun();
  else
    return 1;
}

BOOL is_pairing_restricted_by_findMy()
{
  void *v0;
  void *v1;
  _BOOL8 v2;
  id v3;
  NSObject *v4;
  id v5;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[FMDFMIPManager sharedInstance](FMDFMIPManager, "sharedInstance"));
  v1 = v0;
  v2 = v0 != 0;
  if (v0)
  {
    if (objc_msgSend(v0, "lockdownShouldDisableDevicePairing"))
    {
      v3 = pairing_utilities_log();
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_100062CB8();
LABEL_9:

      goto LABEL_10;
    }
  }
  else if ((os_variant_is_darwinos("com.apple.RemotePairing") & 1) == 0)
  {
    v5 = pairing_utilities_log();
    v4 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      sub_100062CE4();
    goto LABEL_9;
  }
  v2 = 0;
LABEL_10:

  return v2;
}

id pairing_utilities_log()
{
  if (qword_100087958[0] != -1)
    dispatch_once(qword_100087958, &stru_10007A3B8);
  return (id)qword_100087950;
}

uint64_t managed_configuration_allow_pairing(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  NSObject *v13;

  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
  v6 = v5;
  if (v5)
  {
    v7 = objc_msgSend(v5, "hostMayPairWithOptions:challenge:", v3, v4);
    v8 = v7;
    switch(v7)
    {
      case 0u:
        v9 = pairing_utilities_log();
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_100062DAC();
        goto LABEL_8;
      case 1u:
        goto LABEL_13;
      case 2u:
        v8 = 2;
        break;
      case 3u:
        break;
      default:
        v12 = pairing_utilities_log();
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          sub_100062D3C(v8, v13);

LABEL_13:
        v8 = 1;
        break;
    }
  }
  else
  {
    if ((os_variant_is_darwinos("com.apple.RemotePairing") & 1) == 0)
    {
      v11 = pairing_utilities_log();
      v10 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        sub_100062D10();
LABEL_8:

    }
    v8 = 0;
  }

  return v8;
}

void sub_100016CCC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.dt.remotepairing", "pairingutilities");
  v2 = (void *)qword_100087950;
  qword_100087950 = (uint64_t)v1;

}

BOOL lockdown_wifi_pairing_enabled()
{
  uint64_t v0;
  _BOOL8 v1;
  CFBooleanRef v2;

  v0 = lockdown_connect();
  v1 = v0;
  if (v0)
  {
    v2 = (CFBooleanRef)lockdown_copy_value(v0, CFSTR("com.apple.mobile.wireless_lockdown"), CFSTR("EnableWifiPairing"));
    lockdown_disconnect(v1);
    if (v2)
    {
      v1 = v2 == kCFBooleanTrue;
      CFRelease(v2);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_100016F64(uint64_t a1, void *a2, int a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v8[5];

  v5 = a2;
  if (a3 && objc_msgSend(*(id *)(a1 + 32), "active"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setBrowser:", 0);
    if ((objc_msgSend(*(id *)(a1 + 32), "startOnQueue:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    {
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "log"));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_100062E5C();

    }
  }
  else
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100017038;
    v8[3] = &unk_10007A3E0;
    v7 = *(_QWORD *)(a1 + 40);
    v8[4] = *(_QWORD *)(a1 + 32);
    remote_device_set_disconnected_callback(v5, v7, v8);
  }

}

id sub_100017038(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "dispatchDisconnectListeners");
}

void sub_100017110(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100017234(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;

  sub_1000173F0(0, (unint64_t *)&unk_1000849F0, NSError_ptr);
  static NSError.setRemotePairingNormalizationProviders()();
  sub_1000173F0(0, (unint64_t *)&qword_100086990, OS_os_log_ptr);
  qword_1000886E0 = OS_os_log.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100069CD0, 0xD000000000000014, 0x8000000100069CF0);
  v3 = type metadata accessor for RemotePairingDeviceService();
  swift_allocObject(v3, 161, 7);
  sub_100034FAC();
  qword_1000886E8 = v4;
  sub_100035170();
  CFRunLoopRun();
  return 0;
}

uint64_t sub_1000173F0(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for CFUserNotification(uint64_t a1)
{
  sub_10001580C(a1, &qword_100084CA0, (uint64_t)&unk_10007A5E0);
}

uint64_t sub_10001743C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10006588C, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100017478(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10006588C, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000174C0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  WitnessTable = swift_getWitnessTable(&unk_10006588C, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

BOOL sub_100017518(int *a1, int *a2)
{
  return sub_1000456E8(*a1, *a2);
}

uint64_t sub_100017524@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10003F3BC();
  *a1 = result;
  return result;
}

uint64_t sub_100017548@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_10003F3C4(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100017574(_QWORD *a1, uint64_t *a2)
{
  return sub_10003F3CC(a1, *a2);
}

uint64_t sub_10001757C(uint64_t *a1)
{
  return sub_10003F3F8(*a1);
}

uint64_t sub_100017584(uint64_t *a1)
{
  return sub_10003F408(*a1);
}

uint64_t sub_10001758C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10006588C, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

BOOL sub_1000175D8(uint64_t *a1, uint64_t *a2)
{
  return sub_100017768(*a1, *a2);
}

_QWORD *sub_1000175E4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1000175F0(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_DWORD *sub_1000175FC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_10001760C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void type metadata accessor for RPUSBConnectedHostTrustState(uint64_t a1)
{
  sub_10001580C(a1, &qword_100084CB0, (uint64_t)&unk_10007A640);
}

uint64_t initializeBufferWithCopyOfBuffer for Tunnel.MutableState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_100017660(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001766C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001768C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
  sub_10001580C(a1, &qword_100084CC0, (uint64_t)&unk_10007A6E0);
}

void type metadata accessor for remote_device_type_t(uint64_t a1)
{
  sub_10001580C(a1, &qword_100084CC8, (uint64_t)&unk_10007A708);
}

uint64_t sub_1000176E0()
{
  return sub_100017728(&qword_100084CD0, (uint64_t)&unk_1000658B8);
}

uint64_t sub_100017704()
{
  return sub_100017728(&qword_100084CD8, (uint64_t)&unk_100065860);
}

uint64_t sub_100017728(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_100017768(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_10001777C()
{
  uint64_t v0;
  os_log_type_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t result;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = static os_log_type_t.default.getter();
  v2 = qword_1000886E0;
  v3 = v1;
  result = os_log_type_enabled((os_log_t)qword_1000886E0, v1);
  if ((_DWORD)result)
  {
    swift_retain(v0);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    swift_beginAccess(v0 + 16, v10, 0, 0);
    v6 = *(_QWORD *)(v0 + 16);
    v7 = swift_bridgeObjectRetain(v6);
    v8 = sub_100012A70(v7);
    swift_bridgeObjectRelease(v6);
    v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, v10, v5 + 4);
    swift_release(v0);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Lockdown Peers updated. Total count: %ld", v5, 0xCu);
    return swift_slowDealloc(v5, -1, -1);
  }
  return result;
}

double sub_10001788C()
{
  uint64_t v0;
  double result;
  _BYTE v2[24];

  sub_1000156AC(v0 + 16, (uint64_t)v2);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16)).n128_u64[0];
  return result;
}

void sub_1000178B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int socket;
  unsigned int is_usb;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];
  _QWORD v45[5];

  v2 = v1;
  v4 = type metadata accessor for ControlChannelConnection.Options(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  sub_100011928();
  v9 = v8 - v7;
  v10 = type metadata accessor for ControlChannelConnection.Options.Device(0);
  __chkstk_darwin(v10, v11);
  sub_100011928();
  v16 = v15 - v14;
  if ((*(_BYTE *)(v2 + 72) & 1) != 0)
  {
    v17 = static os_log_type_t.error.getter(v12);
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1000886E0, "Rejecting remote XPC control pairing channel connection as service is shutting down", 83, 2);
    lockdown_disconnect(a1);
  }
  else
  {
    v41 = v16;
    v42 = v12;
    v43 = v13;
    ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)(1, 1, 0, 0, 1);
    is_usb = lockdown_connection_is_usb(a1);
    socket = lockdown_get_socket(a1);
    v18 = sub_100015378((uint64_t)&unk_10007A820);
    *(_QWORD *)(v18 + 16) = a1;
    v19 = sub_100015378((uint64_t)&unk_10007A848);
    *(_QWORD *)(v19 + 16) = a1;
    v20 = sub_100015378((uint64_t)&unk_10007A870);
    *(_QWORD *)(v20 + 16) = a1;
    v21 = sub_100015378((uint64_t)&unk_10007A898);
    *(_QWORD *)(v21 + 16) = a1;
    v22 = type metadata accessor for SecureSocketDataTransport(0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v23 = SecureSocketDataTransport.init(physicallyConnected:underlyingConnectionSocket:bufferedReceiveSizeHandler:syncReceiveHandler:syncSendHandler:cleanupConnectionHandler:)(is_usb, socket, sub_100018CE8, v18, sub_100018CF4, v19, sub_100018D08, v20, sub_100018D1C, v21);
    v45[3] = v22;
    v45[4] = &protocol witness table for SecureSocketDataTransport;
    v45[0] = v23;
    v24 = *(void **)(v2 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v9, v41, v42);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v9, enum case for ControlChannelConnection.Options.device(_:), v4);
    v25 = *(_QWORD *)(v2 + 80);
    v44[3] = type metadata accessor for SystemKeychainPairingManager();
    v44[4] = sub_10000EC00(&qword_100084F88, (uint64_t (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager, (uint64_t)&unk_100065DFC);
    v44[0] = v25;
    v26 = sub_1000135A4();
    swift_retain(v23);
    v27 = v24;
    v28 = sub_10000E49C();
    v29 = static ControlChannelConnection.defaultMaxReconnectionAttempts.getter(v28);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v30 = ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)(v45, v27, v9, v29, v44, 0);
    swift_beginAccess(v2 + 16, v45, 33, 0);
    sub_1000144D8();
    sub_100011708();
    v31 = v44[0];
    swift_endAccess(v45);
    swift_release(v31);
    sub_10001777C();
    v32 = sub_100015378((uint64_t)&unk_10007A8C0);
    sub_100012388(v32);
    v33 = sub_100015378((uint64_t)&unk_10007A8E8);
    sub_100015AD0(v33);
    v34 = sub_1000115E4((uint64_t)&unk_10007A910);
    *(_QWORD *)(v34 + 16) = v26;
    *(_QWORD *)(v34 + 24) = v27;
    sub_1000124D0();
    swift_retain(v27);
    dispatch thunk of ControlChannelConnection.invalidationHandler.setter(sub_100018D4C, v34);
    sub_1000115DC();
    swift_release(v27);
    v35 = sub_100015378((uint64_t)&unk_10007A8C0);
    sub_100012388(v35);
    v36 = sub_100015378((uint64_t)&unk_10007A8E8);
    sub_100015AD0(v36);
    v37 = sub_1000115E4((uint64_t)&unk_10007A938);
    *(_QWORD *)(v37 + 16) = v27;
    *(_QWORD *)(v37 + 24) = v26;
    swift_retain(v27);
    sub_1000124D0();
    dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter(sub_100018D84, v37);
    sub_1000115DC();
    swift_release(v27);
    dispatch thunk of ControlChannelConnection.requireUserConsentForPairing.setter(0);
    v38 = *sub_100016418((_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 56));
    sub_1000144D8();
    sub_10004A9CC(0xD00000000000002FLL, 0x8000000100069ED0, v38, v30);
    swift_release(v23);
    sub_100015384();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
    sub_1000138B4();
  }
}

uint64_t sub_100017CCC(uint64_t a1)
{
  uint64_t v2;

  v2 = 0;
  if (lockdown_get_buffered_read_size(a1, &v2))
    return v2;
  else
    return -1;
}

uint64_t sub_100017D28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE v12[24];
  _BYTE v13[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = a2 + 16;
    swift_beginAccess(v6, v12, 0, 0);
    Strong = swift_weakLoadStrong(v6);
    if (Strong)
    {
      v8 = Strong;
      swift_beginAccess(v5 + 16, v11, 33, 0);
      sub_1000121F8();
      v10 = v9;
      swift_endAccess(v11);
      swift_release(v10);
      sub_10001777C();
      swift_release(v8);
    }
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100017DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  _BYTE v17[24];
  _BYTE v18[24];

  v4 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v18, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v10 = result;
    v11 = a2 + 16;
    swift_beginAccess(v11, v17, 0, 0);
    Strong = swift_weakLoadStrong(v11);
    if (Strong)
    {
      v13 = Strong;
      v14 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter();
      if (v14)
      {
        v15 = (void *)v14;
        sub_100053A18();
        if ((v16 & 1) == 0)
        {
          (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:), v4);
          dispatch thunk of ControlChannelConnection.invalidate(for:)(v8);

          swift_release(v13);
          swift_release(v10);
          return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
        }

      }
      swift_release(v13);
    }
    return swift_release(v10);
  }
  return result;
}

uint64_t sub_100017F38()
{
  return dispatch thunk of ControlChannelConnection.start()();
}

void sub_100017F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v1 = static RemoteServiceNames.lockdownService.getter();
  v3 = v2;
  v4 = *(_QWORD *)(v0 + 24);
  v7[4] = sub_100018CDC;
  v8 = v0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_10004F610;
  v7[3] = &unk_10007A7E8;
  v5 = _Block_copy(v7);
  sub_10000E49C();
  sub_100015384();
  v6 = String.utf8CString.getter(v1, v3);
  swift_bridgeObjectRelease(v3);
  lockdown_checkin_xpc(v6 + 32, 0, v4, v5);
  swift_release(v6);
  _Block_release(v5);
}

void sub_100018024(uint64_t a1)
{
  if (a1)
    sub_1000178B8(a1);
}

void sub_100018048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[24];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v1 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  sub_100011928();
  v7 = v6 - v5;
  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
  {
    v8 = static os_log_type_t.error.getter(v4);
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_1000886E0, "LockdownService: Ignoring shutdown request as service is already shutting down", 78, 2);
    return;
  }
  *(_BYTE *)(v0 + 72) = 1;
  sub_1000156AC(v0 + 16, (uint64_t)v35);
  v9 = *(_QWORD *)(v0 + 16);
  if ((v9 & 0xC000000000000001) != 0)
  {
    if (v9 < 0)
      v10 = *(_QWORD *)(v0 + 16);
    else
      v10 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v11 = __CocoaSet.makeIterator()(v10);
    v12 = sub_1000135A4();
    v13 = sub_10000EC00(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    v14 = Set.Iterator.init(_cocoa:)(v11, v12, v13);
    v9 = v36;
    v32 = v37;
    v15 = v38;
    v16 = v39;
    v17 = v40;
  }
  else
  {
    v32 = v9 + 56;
    v15 = ~(-1 << *(_BYTE *)(v9 + 32));
    sub_1000139EC();
    v17 = v18 & v19;
    swift_bridgeObjectRetain(v9);
    v16 = 0;
  }
  v31 = (unint64_t)(v15 + 64) >> 6;
  v20 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
  if (v9 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v17)
    {
      v21 = (v17 - 1) & v17;
      v22 = __clz(__rbit64(v17)) | (v16 << 6);
      v23 = v16;
      goto LABEL_29;
    }
    v28 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v28 >= v31)
      goto LABEL_32;
    v29 = *(_QWORD *)(v32 + 8 * v28);
    v23 = v16 + 1;
    if (!v29)
    {
      v23 = v16 + 2;
      if (v16 + 2 >= v31)
        goto LABEL_32;
      v29 = *(_QWORD *)(v32 + 8 * v23);
      if (!v29)
      {
        v23 = v16 + 3;
        if (v16 + 3 >= v31)
          goto LABEL_32;
        v29 = *(_QWORD *)(v32 + 8 * v23);
        if (!v29)
        {
          v23 = v16 + 4;
          if (v16 + 4 >= v31)
            goto LABEL_32;
          v29 = *(_QWORD *)(v32 + 8 * v23);
          if (!v29)
          {
            v30 = v16 + 5;
            while (v30 < v31)
            {
              v29 = *(_QWORD *)(v32 + 8 * v30++);
              if (v29)
              {
                v23 = v30 - 1;
                goto LABEL_28;
              }
            }
LABEL_32:
            sub_100018CD4(v9);
            sub_1000138B4();
            return;
          }
        }
      }
    }
LABEL_28:
    v21 = (v29 - 1) & v29;
    v22 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_29:
    v27 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22);
    sub_10000E49C();
    if (!v27)
      goto LABEL_32;
    while (1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v7, v20, v1);
      dispatch thunk of ControlChannelConnection.invalidate(for:)(v7);
      swift_release(v27);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v7, v1);
      v16 = v23;
      v17 = v21;
      if ((v9 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v24 = __CocoaSet.Iterator.next()(v14);
      if (v24)
      {
        v25 = v24;
        v33 = v24;
        v26 = sub_1000135A4();
        swift_unknownObjectRetain(v25);
        swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v26, 7);
        v27 = v34;
        swift_unknownObjectRelease(v25);
        v23 = v16;
        v21 = v17;
        if (v27)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_100018384(NSObject *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40[24];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  sub_1000156AC(v1 + 16, (uint64_t)v40);
  v3 = *(_QWORD *)(v1 + 16);
  if ((v3 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v4 = *(_QWORD *)(v1 + 16);
    else
      v4 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_1000135A4();
    v7 = sub_10000EC00(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    v8 = Set.Iterator.init(_cocoa:)(v5, v6, v7);
    v3 = v41;
    v37 = v42;
    v9 = v43;
    v10 = v44;
    v11 = v45;
  }
  else
  {
    v37 = v3 + 56;
    v9 = ~(-1 << *(_BYTE *)(v3 + 32));
    sub_1000139EC();
    v11 = v12 & v13;
    swift_bridgeObjectRetain(v3);
    v10 = 0;
  }
  v36 = (unint64_t)(v9 + 64) >> 6;
  if (v3 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v11)
    {
      v14 = (v11 - 1) & v11;
      v15 = __clz(__rbit64(v11)) | (v10 << 6);
      v16 = v10;
      goto LABEL_27;
    }
    v22 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v22 >= v36)
      goto LABEL_32;
    v23 = *(_QWORD *)(v37 + 8 * v22);
    v16 = v10 + 1;
    if (!v23)
    {
      v16 = v10 + 2;
      if (v10 + 2 >= v36)
        goto LABEL_32;
      v23 = *(_QWORD *)(v37 + 8 * v16);
      if (!v23)
      {
        v16 = v10 + 3;
        if (v10 + 3 >= v36)
          goto LABEL_32;
        v23 = *(_QWORD *)(v37 + 8 * v16);
        if (!v23)
        {
          v16 = v10 + 4;
          if (v10 + 4 >= v36)
            goto LABEL_32;
          v23 = *(_QWORD *)(v37 + 8 * v16);
          if (!v23)
          {
            v24 = v10 + 5;
            while (v24 < v36)
            {
              v23 = *(_QWORD *)(v37 + 8 * v24++);
              if (v23)
              {
                v16 = v24 - 1;
                goto LABEL_26;
              }
            }
LABEL_32:
            sub_100018CD4(v3);
            return;
          }
        }
      }
    }
LABEL_26:
    v14 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
    v21 = sub_1000144D8();
    if (!v20)
      goto LABEL_32;
    while (1)
    {
      v25 = static os_log_type_t.default.getter(v21);
      if (os_log_type_enabled(a1, v25))
      {
        swift_retain_n(v20, 2);
        v26 = swift_slowAlloc(12, -1);
        v27 = swift_slowAlloc(32, -1);
        v38 = v20;
        v39 = v27;
        *(_DWORD *)v26 = 136446210;
        v28 = a1;
        v29 = v9;
        v30 = sub_1000135A4();
        sub_1000144D8();
        v31 = String.init<A>(describing:)(&v38, v30);
        v33 = v32;
        sub_100010D40(v31, v32, &v39);
        *(_QWORD *)(v26 + 4) = v34;
        swift_release_n(v20, 2);
        v35 = v33;
        v9 = v29;
        a1 = v28;
        swift_bridgeObjectRelease(v35);
        _os_log_impl((void *)&_mh_execute_header, v28, v25, "State dump: LockdownService control channel connection: %{public}s", (uint8_t *)v26, 0xCu);
        swift_arrayDestroy(v27, 1);
        sub_100012398(v27);
        sub_100012398(v26);
      }
      v8 = sub_100015384();
      v10 = v16;
      v11 = v14;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      v17 = __CocoaSet.Iterator.next()(v8);
      if (v17)
      {
        v18 = v17;
        v38 = v17;
        v19 = sub_1000135A4();
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v39, &v38, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
        v20 = v39;
        v21 = swift_unknownObjectRelease(v18);
        v16 = v10;
        v14 = v11;
        if (v20)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t sub_100018708()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  sub_100010DFC((_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 80));
  return v0;
}

uint64_t sub_10001873C()
{
  uint64_t v0;

  sub_100018708();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for LockdownService()
{
  return objc_opt_self(_TtC20remotepairingdeviced15LockdownService);
}

double sub_10001877C()
{
  return sub_10001788C();
}

void sub_10001879C()
{
  sub_100017F58();
}

void sub_1000187BC()
{
  sub_100018048();
}

void sub_1000187DC(NSObject *a1)
{
  sub_100018384(a1);
}

_QWORD *sub_1000187FC(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v3 = v2;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_10004C284((unint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    v6 = &_swiftEmptySetSingleton;
  }
  v3[4] = a1;
  v3[5] = v6;
  v3[2] = a2;
  v7 = type metadata accessor for SystemXPCListenerConnection(0);
  sub_1000124D0();
  v8 = a2;
  v9 = static RemoteServiceNames.lockdownService.getter();
  v11 = v10;
  v12 = v8;
  v13 = static SystemXPCConnection.machServiceListenerConnection(name:targetQueue:)(v9, v11, v8);
  swift_bridgeObjectRelease(v11);
  sub_1000115DC();

  v3[3] = swift_dynamicCastClassUnconditional(v13, v7, 0, 0, 0);
  return v3;
}

uint64_t sub_1000188F0()
{
  uint64_t v0;

  v0 = dispatch thunk of SystemXPCListenerConnection.setPeerConnectionHandler(_:)(sub_100018920, 0);
  return dispatch thunk of XPCConnection.activate()(v0);
}

uint64_t sub_100018920(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t EnumCaseMultiPayload;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  void (*v23)(char *, char *, uint64_t);
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint8_t *v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = type metadata accessor for XPCError(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v5, v8);
  v11 = (char *)&v38 - v10;
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v38 - v13;
  v15 = sub_1000150C0(&qword_100084F80);
  __chkstk_darwin(v15, v16);
  v18 = (uint64_t *)((char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100018C8C(a1, (uint64_t)v18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v20 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v14, v18, v2);
    v21 = static os_log_type_t.error.getter(v20);
    v22 = qword_1000886E0;
    v23 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v23(v11, v14, v2);
    v24 = v21;
    if (os_log_type_enabled(v22, v21))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v39 = v22;
      v27 = v26;
      v41 = v26;
      *(_DWORD *)v25 = 136315138;
      v38 = v25 + 4;
      v23(v7, v11, v2);
      v28 = String.init<A>(describing:)(v7, v2);
      v30 = v29;
      sub_100010D40(v28, v29, &v41);
      v40 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v38);
      swift_bridgeObjectRelease(v30);
      v32 = *(void (**)(char *, uint64_t))(v3 + 8);
      v32(v11, v2);
      _os_log_impl((void *)&_mh_execute_header, v39, v24, "Failed to start dummy lockdown service with error: %s", v25, 0xCu);
      swift_arrayDestroy(v27, 1);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v25, -1, -1);
      return ((uint64_t (*)(char *, uint64_t))v32)(v14, v2);
    }
    else
    {
      v37 = *(void (**)(char *, uint64_t))(v3 + 8);
      v37(v11, v2);
      return ((uint64_t (*)(char *, uint64_t))v37)(v14, v2);
    }
  }
  else
  {
    v34 = *v18;
    v35 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, qword_1000886E0, "Unexpected peer connected to lockdown mach service on device without liblockdown", 80, 2);
    v36 = swift_retain(v34);
    dispatch thunk of XPCConnection.cancel()(v36);
    return swift_release_n(v34, 2);
  }
}

uint64_t sub_100018BEC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t sub_100018C20()
{
  uint64_t v0;

  sub_100018BEC();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for DummyLockdownService()
{
  return objc_opt_self(_TtC20remotepairingdeviced20DummyLockdownService);
}

uint64_t sub_100018C60()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 40));
}

uint64_t sub_100018C6C()
{
  return sub_1000188F0();
}

uint64_t sub_100018C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0(&qword_100084F80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018CD4(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_100018CDC(uint64_t a1)
{
  sub_100018024(a1);
}

uint64_t sub_100018CE8()
{
  uint64_t v0;

  return sub_100017CCC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100018CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return lockdown_recv(*(_QWORD *)(v2 + 16), a1, a2);
}

uint64_t sub_100018D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return lockdown_send(*(_QWORD *)(v2 + 16), a1, a2);
}

uint64_t sub_100018D1C()
{
  uint64_t v0;

  return lockdown_disconnect(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100018D24()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100018D4C()
{
  uint64_t v0;

  return sub_100017D28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018D58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100018D84()
{
  uint64_t v0;

  return sub_100017DF0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018D90(uint64_t a1)
{
  char v1;

  sub_10001A304(a1);
  return v1 & 1;
}

void sub_100018DB4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  sub_100013AC8();
  sub_10001AFA8(v5, v6, v7);
  v8 = sub_1000150C0(&qword_1000850E8);
  sub_1000115F0();
  __chkstk_darwin(v9, v10);
  sub_100013A00();
  sub_1000165D8();
  __chkstk_darwin(v11, v12);
  sub_100015DA0();
  __chkstk_darwin(v13, v14);
  v16 = (char *)v34 - v15;
  v17 = *(int *)(v8 + 48);
  v18 = v3 + v17;
  v19 = *v0;
  sub_1000159A0(v18, (uint64_t)v0 + v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  sub_1000159A0((uint64_t)v16, v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  v20 = sub_1000152D4();
  v21 = static os_log_type_t.default.getter(v20);
  sub_10001539C(v21, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Handling pairing deletion request", 33);
  v22 = sub_100016564();
  XPCDictionary.entitlements.getter(v22);
  sub_10001AFBC();
  sub_100019930();
  if (v1)
  {
    v35 = v19;
    v23 = *(_QWORD *)(v2 + 8);
    v24 = sub_10001AF80(v4);
    v25 = static os_log_type_t.error.getter(v24);
    if (sub_10001538C(v25))
    {
      sub_1000123BC();
      sub_1000123BC();
      v26 = sub_1000123C4(12);
      v34[2] = v23;
      v27 = (_DWORD *)v26;
      v36 = sub_1000123C4(32);
      *v27 = 136315138;
      sub_100015AE0();
      v28 = sub_1000150C0(&qword_100085A00);
      v29 = sub_10001AF88(v28);
      sub_10001AF94(v29, v30);
      sub_100013948(v31);
      sub_10001AFA0();
      sub_100011600();
      sub_100011600();
      sub_100015900((void *)&_mh_execute_header, v32, v33, "Pairing deletion failed with error: %s");
      sub_1000135B4(v36);
      sub_100012398(v36);
      sub_100012398((uint64_t)v27);
    }
    sub_100016018();
    swift_release(v35);
    sub_10001AF80((uint64_t)v16);
  }
  else
  {
    swift_release(v19);
    sub_1000135AC(v4);
    sub_1000135AC((uint64_t)v16);
  }
  sub_100015850();
  sub_1000123A4();
}

void sub_100018F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  sub_100013AC8();
  a19 = v23;
  a20 = v24;
  v26 = v25;
  v27 = sub_1000150C0(&qword_1000850E8);
  sub_1000115F0();
  __chkstk_darwin(v28, v29);
  sub_100011928();
  v32 = v31 - v30;
  type metadata accessor for XPCDictionary(0);
  sub_1000165D8();
  __chkstk_darwin(v33, v34);
  sub_1000144E0();
  __chkstk_darwin(v35, v36);
  v38 = (char *)v58 - v37;
  v39 = *(int *)(v27 + 48);
  v40 = v32 + v39;
  v41 = *v26;
  sub_1000159A0(v40, (uint64_t)v26 + v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
  sub_1000159A0((uint64_t)v38, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32));
  v42 = swift_retain(v41);
  v43 = static os_log_type_t.debug.getter(v42);
  sub_10001539C(v43, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Handling paired host list request", 33);
  v44 = sub_100016564();
  XPCDictionary.entitlements.getter(v44);
  sub_1000199F0();
  if (v20)
  {
    v45 = *(_QWORD *)(v21 + 8);
    v46 = sub_10001AF80(v22);
    v47 = static os_log_type_t.error.getter(v46);
    if (sub_10001538C(v47))
    {
      sub_1000123BC();
      sub_1000123BC();
      v48 = sub_1000123C4(12);
      v60 = v45;
      v49 = (_DWORD *)v48;
      v59 = sub_1000123C4(32);
      a10 = v59;
      *v49 = 136315138;
      sub_100015AE0();
      v50 = sub_1000150C0(&qword_100085A00);
      v51 = sub_10001AF88(v50);
      v53 = v52;
      sub_100010D40(v51, v52, &a10);
      v61 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v58[1]);
      swift_bridgeObjectRelease(v53);
      sub_100011600();
      sub_100011600();
      sub_100015900((void *)&_mh_execute_header, v55, v56, "Listing paired hosts failed with error: %s");
      v57 = v59;
      sub_1000135B4(v59);
      sub_100012398(v57);
      sub_100012398((uint64_t)v49);
    }
    sub_100016018();
    sub_100015A44();
    sub_10001AF80((uint64_t)v38);
  }
  else
  {
    sub_100015A44();
    sub_1000135AC(v22);
    sub_1000135AC((uint64_t)v38);
  }
  sub_100015850();
  sub_1000123A4();
}

#error "1000192D4: call analysis failed (funcsize=77)"

void sub_100019304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_100013AC8();
  a19 = v24;
  a20 = v25;
  a10 = v20;
  v27 = v26;
  v28 = sub_1000150C0(&qword_1000850E8);
  sub_1000115F0();
  __chkstk_darwin(v29, v30);
  sub_100015D3C();
  sub_1000152C4();
  __chkstk_darwin(v31, v32);
  sub_10001626C();
  __chkstk_darwin(v33, v34);
  v36 = (char *)&a9 - v35;
  v37 = *(int *)(v28 + 48);
  v38 = v21 + v37;
  sub_1000159A0(v21 + v37, v27 + v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
  v39 = sub_1000159A0((uint64_t)v36, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32));
  XPCDictionary.entitlements.getter(v39);
  sub_100019A44();
  sub_1000159A8(v22);
  sub_1000159A8((uint64_t)v36);
  sub_100015850();
  sub_1000123A4();
}

void sub_1000193E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t *v29;

  sub_100013AC8();
  v28[1] = v4;
  v6 = v5;
  v29 = v7;
  v8 = sub_1000150C0(&qword_1000850E8);
  sub_1000115F0();
  __chkstk_darwin(v9, v10);
  sub_10000E4A4();
  v11 = type metadata accessor for XPCDictionary(0);
  sub_1000152C4();
  __chkstk_darwin(v12, v13);
  sub_10001626C();
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)v28 - v17;
  v19 = static os_log_type_t.debug.getter(v16);
  sub_10001539C(v19, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Handling current host trust state request", 41);
  v20 = *(int *)(v8 + 48);
  v21 = v1 + v20;
  sub_1000159A0(v1 + v20, v6 + v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  v22 = sub_1000159A0((uint64_t)v18, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  XPCDictionary.entitlements.getter(v22);
  sub_1000197FC();
  if (v0)
  {
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    v24 = v23(v2, v11);
    v25 = static os_log_type_t.error.getter(v24);
    v26 = sub_10001539C(v25, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Querying current host trust state failed with error", 51);
    swift_willThrow(v26);
    v23((uint64_t)v18, v11);
  }
  else
  {
    v27 = sub_100038694();
    sub_1000159A8(v2);
    sub_1000159A8((uint64_t)v18);
    *v29 = v27;
  }
  sub_1000123A4();
}

void sub_10001956C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  sub_100013AC8();
  sub_10001AFA8(v5, v6, v7);
  v8 = sub_1000150C0(&qword_1000850E8);
  sub_1000115F0();
  __chkstk_darwin(v9, v10);
  sub_100013A00();
  sub_1000165D8();
  __chkstk_darwin(v11, v12);
  sub_100015DA0();
  __chkstk_darwin(v13, v14);
  v16 = (char *)v34 - v15;
  v17 = *(int *)(v8 + 48);
  v18 = v3 + v17;
  v19 = *v0;
  sub_1000159A0(v18, (uint64_t)v0 + v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  sub_1000159A0((uint64_t)v16, v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  v20 = sub_1000152D4();
  v21 = static os_log_type_t.debug.getter(v20);
  sub_10001539C(v21, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Handling promptless pairing request", 35);
  v22 = sub_100016564();
  XPCDictionary.entitlements.getter(v22);
  sub_10001AFBC();
  sub_10001AB88();
  if (v1)
  {
    v35 = v19;
    v23 = *(_QWORD *)(v2 + 8);
    v24 = sub_10001AF80(v4);
    v25 = static os_log_type_t.error.getter(v24);
    if (sub_10001538C(v25))
    {
      sub_1000123BC();
      sub_1000123BC();
      v26 = sub_1000123C4(12);
      v34[2] = v23;
      v27 = (_DWORD *)v26;
      v36 = sub_1000123C4(32);
      *v27 = 136315138;
      sub_100015AE0();
      v28 = sub_1000150C0(&qword_100085A00);
      v29 = sub_10001AF88(v28);
      sub_10001AF94(v29, v30);
      sub_100013948(v31);
      sub_10001AFA0();
      sub_100011600();
      sub_100011600();
      sub_100015900((void *)&_mh_execute_header, v32, v33, "Allowing promptless pairing failed with error: %s");
      sub_1000135B4(v36);
      sub_100012398(v36);
      sub_100012398((uint64_t)v27);
    }
    sub_100016018();
    swift_release(v35);
    sub_10001AF80((uint64_t)v16);
  }
  else
  {
    swift_release(v19);
    sub_1000135AC(v4);
    sub_1000135AC((uint64_t)v16);
  }
  sub_100015850();
  sub_1000123A4();
}

uint64_t sub_100019750(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  dispatch thunk of XPCConnection.activate()(a1);
  v3 = *sub_100015A38();
  swift_retain(v2);
  v4 = sub_10004AACC(0xD000000000000021, 0x800000010006A210, v3, v2);
  v5 = static os_log_type_t.debug.getter(v4);
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_1000886E0, "Started pairing management XPC service", 38, 2, &_swiftEmptyArrayStorage);
  return sub_10001A6E8();
}

uint64_t sub_1000197DC()
{
  return sub_10001A66C();
}

uint64_t sub_1000197FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0 = type metadata accessor for RemotePairingError(0);
  sub_1000115F0();
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = XPCDictionary.subscript.getter(0xD00000000000002CLL, 0x800000010006A190);
  if ((result & 1) == 0)
  {
    result = _RPIsAppleInternal();
    if ((result & 1) == 0)
    {
      v6 = sub_10000EC00((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      static Error<>.permissionDenied.getter(v0, v6);
      v7 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      swift_allocError(v0, v7, 0, 0);
      v8 = Error<>.init(_:_:)(v4, 0xD00000000000004ALL, 0x800000010006A1C0, v0);
      return swift_willThrow(v8);
    }
  }
  return result;
}

uint64_t sub_100019930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = type metadata accessor for HostDeletionTarget(0);
  __chkstk_darwin(v2, v3);
  sub_10000E4A4();
  result = sub_1000197FC();
  if (!v0)
  {
    DeletePairedHostRecordRequest.target.getter(result);
    sub_1000371B0(v1);
    v5 = sub_100011938();
    return EmptyResponse.init()(v5);
  }
  return result;
}

uint64_t sub_1000199F0()
{
  uint64_t v0;
  uint64_t result;

  result = sub_1000197FC();
  if (!v0)
  {
    sub_1000378D0();
    return ListPairedHostRecordResponse.init(hosts:)();
  }
  return result;
}

uint64_t sub_100019A44()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1000197FC();
  if (!v0)
  {
    sub_100034508();
    v2 = sub_10004D2D0();
    v4 = v3;
    sub_100015384();
    return FetchNetworkPairingSessionIDResponse.init(networkPairingSessionID:)(v2, v4);
  }
  return result;
}

void sub_100019ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _xpc_endpoint_s *WirelessPairingSession;
  xpc_connection_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];

  sub_100013AC8();
  a19 = v22;
  a20 = v23;
  v24 = type metadata accessor for PinNotificationEvent(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  sub_100011928();
  v29 = v28 - v27;
  sub_1000197FC();
  if (!v21)
  {
    v30 = v20;
    v31 = type metadata accessor for SystemXPCPeerConnection(0);
    WirelessPairingSession = (_xpc_endpoint_s *)CreateWirelessPairingSessionRequest.endpoint.getter();
    v33 = xpc_connection_create_from_endpoint(WirelessPairingSession);
    swift_unknownObjectRelease(WirelessPairingSession);
    v34 = static SystemXPCConnection.unsafePeer(from:)(v33);
    swift_unknownObjectRelease(v33);
    v52 = v31;
    v35 = swift_dynamicCastClassUnconditional(v34, v31, 0, 0, 0);
    dispatch thunk of XPCConnection.setTargetQueue(_:)(*(_QWORD *)(v30 + 40));
    v36 = swift_retain(v34);
    LOBYTE(WirelessPairingSession) = CreateWirelessPairingSessionRequest.requestCustomPinHandler.getter(v36);
    swift_beginAccess(v30 + 32, v54, 33, 0);
    sub_100058FD0(WirelessPairingSession & 1, v35);
    swift_endAccess(v54);
    v53 = v34;
    sub_100015384();
    v37 = swift_allocObject(&unk_10007AA60, 24, 7);
    swift_weakInit(v37 + 16, v35);
    v38 = swift_allocObject(&unk_10007AA88, 32, 7);
    *(_QWORD *)(v38 + 16) = v37;
    *(_QWORD *)(v38 + 24) = v30;
    swift_retain(v37);
    swift_retain(v30);
    dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)(sub_10001AF28, v38);
    swift_release(v37);
    v39 = sub_100015384();
    dispatch thunk of XPCConnection.activate()(v39);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 104))(v29, enum case for PinNotificationEvent.empty(_:), v24);
    v40 = sub_10000EC00(&qword_1000850F8, (uint64_t (*)(uint64_t))&type metadata accessor for PinNotificationEvent, (uint64_t)&protocol conformance descriptor for PinNotificationEvent);
    v41 = sub_10000EC00((unint64_t *)&unk_100085100, (uint64_t (*)(uint64_t))&type metadata accessor for PinNotificationEvent, (uint64_t)&protocol conformance descriptor for PinNotificationEvent);
    XPCConnection.send<A>(value:)(v29, v24, v40, v41);
    sub_100016208();
    v42 = sub_10001A66C();
    v43 = static os_log_type_t.debug.getter(v42);
    v44 = qword_1000886E0;
    v45 = v43;
    v46 = os_log_type_enabled((os_log_t)qword_1000886E0, v43);
    if ((_DWORD)v46)
    {
      swift_retain_n(v53, 2);
      v47 = (uint8_t *)sub_1000123C4(12);
      v48 = sub_1000123C4(32);
      v54[0] = v48;
      *(_DWORD *)v47 = 136315138;
      a10 = v35;
      swift_retain(v53);
      v49 = String.init<A>(describing:)(&a10, v52);
      sub_100010D40(v49, v50, v54);
      a10 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v47 + 4);
      swift_release_n(v53, 2);
      sub_10001AFA0();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Configured wireless pairing session for %s", v47, 0xCu);
      sub_1000135B4(v48);
      sub_100012398(v48);
      v46 = sub_100012398((uint64_t)v47);
    }
    EmptyResponse.init()(v46);
    sub_100015A44();
  }
  sub_1000123A4();
}

uint64_t sub_100019E14(uint64_t a1, uint64_t a2, uint8_t *a3)
{
  Class isa;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  uint64_t v32;
  char *v33;
  os_log_t v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *v37;
  void (*v38)(char *, char *, os_log_t);
  char *v39;
  os_log_type_t v40;
  uint8_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, os_log_t);
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  NSObject *v52;
  void (*v53)(char *, char *, uint64_t);
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint8_t *v67;
  os_log_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71[3];
  char v72[24];

  v67 = a3;
  v68 = (os_log_t)type metadata accessor for XPCError(0);
  isa = v68[-1].isa;
  v7 = __chkstk_darwin(v68, v6);
  v65 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7, v9);
  v66 = (char *)&v63 - v11;
  __chkstk_darwin(v10, v12);
  v69 = (char *)&v63 - v13;
  v14 = type metadata accessor for XPCDictionary(0);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v17, v20);
  v23 = (char *)&v63 - v22;
  __chkstk_darwin(v21, v24);
  v26 = (char *)&v63 - v25;
  v27 = sub_1000150C0(&qword_100085A80);
  __chkstk_darwin(v27, v28);
  v30 = (char *)&v63 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v72, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v32 = result;
    sub_10001AF30(a1, (uint64_t)v30);
    if (swift_getEnumCaseMultiPayload(v30, v27) == 1)
    {
      v34 = v68;
      v33 = v69;
      v35 = (*((uint64_t (**)(char *, char *, os_log_t))isa + 4))(v69, v30, v68);
      v36 = static os_log_type_t.error.getter(v35);
      v37 = qword_1000886E0;
      v38 = (void (*)(char *, char *, os_log_t))*((_QWORD *)isa + 2);
      v39 = v66;
      v38(v66, v33, v34);
      v40 = v36;
      if (os_log_type_enabled(v37, v36))
      {
        v41 = (uint8_t *)swift_slowAlloc(12, -1);
        v64 = swift_slowAlloc(32, -1);
        v71[0] = v64;
        *(_DWORD *)v41 = 136315138;
        v63 = v41 + 4;
        v42 = v65;
        v38(v65, v39, v34);
        v43 = String.init<A>(describing:)(v42, v34);
        v45 = v44;
        sub_100010D40(v43, v44, v71);
        v70 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v63);
        v47 = v45;
        v34 = v68;
        swift_bridgeObjectRelease(v47);
        v48 = (void (*)(char *, os_log_t))*((_QWORD *)isa + 1);
        v48(v39, v34);
        _os_log_impl((void *)&_mh_execute_header, v37, v40, "Received error from wireless pairing session peer: %s", v41, 0xCu);
        v49 = v64;
        swift_arrayDestroy(v64, 1);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v41, -1, -1);
      }
      else
      {
        v48 = (void (*)(char *, os_log_t))*((_QWORD *)isa + 1);
        v48(v39, v34);
      }
      swift_beginAccess(v67 + 32, v71, 33, 0);
      swift_retain(v32);
      sub_100058838();
      swift_endAccess(v71);
      swift_release(v32);
      sub_10001A66C();
      swift_release(v32);
      v61 = v69;
      v62 = (uint64_t)v34;
    }
    else
    {
      v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v26, v30, v14);
      v51 = static os_log_type_t.error.getter(v50);
      v52 = qword_1000886E0;
      v53 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v53(v23, v26, v14);
      v54 = v51;
      if (os_log_type_enabled(v52, v51))
      {
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v69 = (char *)swift_slowAlloc(32, -1);
        v71[0] = (uint64_t)v69;
        v68 = v52;
        *(_DWORD *)v55 = 136315138;
        v67 = v55 + 4;
        v53(v19, v23, v14);
        v56 = String.init<A>(describing:)(v19, v14);
        v58 = v57;
        sub_100010D40(v56, v57, v71);
        v70 = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v67);
        swift_bridgeObjectRelease(v58);
        v48 = *(void (**)(char *, os_log_t))(v15 + 8);
        v48(v23, (os_log_t)v14);
        _os_log_impl((void *)&_mh_execute_header, v68, v54, "Received unexpected message from wireless pairing session peer: %s", v55, 0xCu);
        v60 = v69;
        swift_arrayDestroy(v69, 1);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v55, -1, -1);
      }
      else
      {
        v48 = *(void (**)(char *, os_log_t))(v15 + 8);
        v48(v23, (os_log_t)v14);
      }
      swift_release(v32);
      v61 = v26;
      v62 = v14;
    }
    return ((uint64_t (*)(char *, uint64_t))v48)(v61, v62);
  }
  return result;
}

void sub_10001A304(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  char v20[24];

  sub_1000156AC(v1 + 32, (uint64_t)v20);
  v3 = *(_QWORD *)(v1 + 32);
  v18 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  v19 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(v3);
  v7 = 0;
  while (v6)
  {
    v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v9 = v8 | (v7 << 6);
LABEL_17:
    if ((*(_BYTE *)(*(_QWORD *)(v3 + 56) + v9) & 1) != 0)
    {
      v13 = swift_retain(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v9));
      v14 = static os_log_type_t.debug.getter(v13);
      os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1000886E0, "Custom pin handler found.  Sending pin.", 39, 2, &_swiftEmptyArrayStorage);
      v15 = type metadata accessor for PinNotificationEvent(0);
      v16 = sub_10000EC00(&qword_1000850F8, (uint64_t (*)(uint64_t))&type metadata accessor for PinNotificationEvent, (uint64_t)&protocol conformance descriptor for PinNotificationEvent);
      v17 = sub_10000EC00((unint64_t *)&unk_100085100, (uint64_t (*)(uint64_t))&type metadata accessor for PinNotificationEvent, (uint64_t)&protocol conformance descriptor for PinNotificationEvent);
      XPCConnection.send<A>(value:)(a1, v15, v16, v17);
      sub_1000118D4();
    }
  }
  if (__OFADD__(v7++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v7 >= v19)
    goto LABEL_24;
  v11 = *(_QWORD *)(v18 + 8 * v7);
  if (v11)
  {
LABEL_16:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_17;
  }
  v12 = v7 + 1;
  if (v7 + 1 >= v19)
    goto LABEL_24;
  v11 = *(_QWORD *)(v18 + 8 * v12);
  if (v11)
    goto LABEL_15;
  v12 = v7 + 2;
  if (v7 + 2 >= v19)
    goto LABEL_24;
  v11 = *(_QWORD *)(v18 + 8 * v12);
  if (v11)
    goto LABEL_15;
  v12 = v7 + 3;
  if (v7 + 3 >= v19)
  {
LABEL_24:
    swift_release(v3);
    return;
  }
  v11 = *(_QWORD *)(v18 + 8 * v12);
  if (v11)
  {
LABEL_15:
    v7 = v12;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v19)
      goto LABEL_24;
    v11 = *(_QWORD *)(v18 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_16;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_10001A66C()
{
  uint64_t v0;
  char v1;
  _BYTE v3[24];

  OS_dispatch_queue.assertOnQueueHierarchy()();
  if ((static Defaults.networkPairingEnabled.getter() & 1) != 0
    || (sub_1000156AC(v0 + 32, (uint64_t)v3), *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16))
    || *(_BYTE *)(v0 + 96) == 1)
  {
    v1 = *(_BYTE *)(*sub_100015A38() + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted);
  }
  else
  {
    v1 = 0;
  }
  return sub_1000388D4(v1);
}

uint64_t sub_10001A6E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  sub_100011928();
  v7 = v6 - v5;
  v8 = type metadata accessor for DispatchQoS(0);
  sub_1000152C4();
  __chkstk_darwin(v9, v10);
  sub_100011928();
  v13 = v12 - v11;
  aBlock[4] = sub_10001AE18;
  v22 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E208;
  aBlock[3] = &unk_10007A9D8;
  v14 = _Block_copy(aBlock);
  v15 = sub_1000152D4();
  static DispatchQoS.unspecified.getter(v15);
  v20 = &_swiftEmptyArrayStorage;
  v16 = sub_10000EC00((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_1000150C0(&qword_1000850F0);
  v18 = sub_10001AE20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v17, v18, v2, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v7, v14);
  _Block_release(v14);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v13, v8);
  return swift_release(v22);
}

uint64_t sub_10001A884(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  void *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (sub_10000F4E0() & 1) != 0 && lockdown_wifi_pairing_enabled();
  v13 = swift_allocObject(&unk_10007AA10, 25, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_BYTE *)(v13 + 24) = v12;
  aBlock[4] = sub_10001AECC;
  v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E208;
  aBlock[3] = &unk_10007AA28;
  v14 = _Block_copy(aBlock);
  v15 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v15);
  v21 = &_swiftEmptyArrayStorage;
  v16 = sub_10000EC00((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_1000150C0(&qword_1000850F0);
  v18 = sub_10001AE20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v2, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v6, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return swift_release(v23);
}

uint64_t sub_10001AA6C(uint64_t result, char a2)
{
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  if (*(_BYTE *)(result + 96) != (a2 & 1))
  {
    v3 = result;
    v4 = static os_log_type_t.default.getter(result);
    v5 = qword_1000886E0;
    v6 = v4;
    if (os_log_type_enabled((os_log_t)qword_1000886E0, v4))
    {
      swift_retain(v3);
      v7 = swift_slowAlloc(14, -1);
      *(_DWORD *)v7 = 67109376;
      v9 = *(unsigned __int8 *)(v3 + 96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4);
      swift_release(v3);
      *(_WORD *)(v7 + 8) = 1024;
      v8 = a2 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v7 + 10);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "lockdown_wifi_pairing_enabled value changed: %{BOOL}d -> %{BOOL}d", (uint8_t *)v7, 0xEu);
      swift_slowDealloc(v7, -1, -1);
    }
    *(_BYTE *)(v3 + 96) = a2 & 1;
    return sub_10001A66C();
  }
  return result;
}

uint64_t sub_10001AB88()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_1000197FC();
  if (!v0)
  {
    AllowPromptlessPairingWithHostRequest.pairingShouldBeMarkedForAutomation.getter(result);
    AllowPromptlessPairingWithHostRequest.associatedHostBUID.getter();
    v3 = v2;
    sub_100034134();
    v5 = v4;
    sub_100032B90();
    swift_bridgeObjectRelease(v3);
    v6 = swift_release(v5);
    return EmptyResponse.init()(v6);
  }
  return result;
}

uint64_t sub_10001AC24()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 48));
  sub_100010DFC((_QWORD *)(v0 + 56));

  return v0;
}

uint64_t sub_10001AC68()
{
  uint64_t v0;

  sub_10001AC24();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for PairingManagementService()
{
  return objc_opt_self(_TtC20remotepairingdeviced24PairingManagementService);
}

_BYTE *initializeBufferWithCopyOfBuffer for SystemKeychainPairingManager.PeersChangedEvent(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WirelessPairingOptions(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WirelessPairingOptions(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10001AD98 + 4 * byte_1000659E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001ADCC + 4 * byte_1000659E0[v4]))();
}

uint64_t sub_10001ADCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001ADD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001ADDCLL);
  return result;
}

uint64_t sub_10001ADE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001ADF0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10001ADF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001ADFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WirelessPairingOptions()
{
  return &type metadata for WirelessPairingOptions;
}

uint64_t sub_10001AE18()
{
  uint64_t v0;

  return sub_10001A884(v0);
}

unint64_t sub_10001AE20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000853C0;
  if (!qword_1000853C0)
  {
    v1 = sub_10001AE64(&qword_1000850F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000853C0);
  }
  return result;
}

uint64_t sub_10001AE64(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10001AEA8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10001AECC()
{
  uint64_t v0;

  return sub_10001AA6C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10001AED8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001AEFC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001AF28(uint64_t a1)
{
  uint64_t v1;

  return sub_100019E14(a1, *(_QWORD *)(v1 + 16), *(uint8_t **)(v1 + 24));
}

uint64_t sub_10001AF30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0(&qword_100085A80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001AF80(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10001AF88(uint64_t a1)
{
  uint64_t v1;

  return String.init<A>(describing:)(v1 - 128, a1);
}

void sub_10001AF94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010D40(a1, a2, (uint64_t *)(v2 - 72));
}

uint64_t sub_10001AFA0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_10001AFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 144) = a3;
  *(_QWORD *)(v4 - 136) = v3;
}

uint64_t sub_10001AFBC()
{
  uint64_t v0;

  return v0;
}

void sub_10001AFD0()
{
  sub_10001F664();
}

uint64_t sub_10001AFD8()
{
  return 0x10000;
}

uint64_t sub_10001AFE8(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t socket;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t ObjectType;
  void *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  id v43;
  uint64_t v44;

  v44 = sub_100016290();
  v41 = *(_QWORD *)(v44 - 8);
  sub_1000123E4();
  __chkstk_darwin(v5, v6);
  sub_100011928();
  v9 = v8 - v7;
  v10 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v10 - 8);
  v40 = v10;
  sub_1000123E4();
  __chkstk_darwin(v11, v12);
  sub_100011928();
  v15 = v14 - v13;
  *(_OWORD *)(v2 + 16) = xmmword_100065AB0;
  *(_QWORD *)(v2 + 32) = static IPv6Header.minHeaderLength.getter();
  *(_QWORD *)(v2 + 40) = 0x80000;
  v16 = type metadata accessor for TunnelConnectionIdentifierCategory(0);
  Identifier.init()(v16, &protocol witness table for TunnelConnectionIdentifierCategory);
  v17 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests) = &_swiftEmptyArrayStorage;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData) = xmmword_100065AC0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v2 + v17) = a1;
  socket = lockdown_get_socket(a1);
  *(_DWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__underlyingConnectionSocket) = socket;
  v19 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue) = a2;
  sub_10001E828();
  v20 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__underlyingConnectionSocket;
  v43 = a2;
  v21 = static OS_dispatch_source.makeReadSource(fileDescriptor:queue:)(socket, a2);
  v22 = *(_QWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource) = v21;
  v23 = v21;
  swift_unknownObjectRetain(v21);
  swift_unknownObjectRelease(v22);
  v24 = *(unsigned int *)(v2 + v20);
  v25 = *(void **)(v2 + v19);
  v26 = v25;
  v27 = static OS_dispatch_source.makeWriteSource(fileDescriptor:queue:)(v24, v25);

  *(_QWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource) = v27;
  swift_unknownObjectRetain(v27);
  sub_100015DBC();
  ObjectType = swift_getObjectType(v23);
  v29 = sub_1000135BC((uint64_t)&unk_10007ABA8);
  sub_100011948();
  sub_10001F5B4();
  v30 = v9;
  sub_10001B3D0();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v15, v9, v29, ObjectType);
  sub_10001643C();
  v31 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v31(v30, v44);
  v42 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  v42(v15, v40);
  sub_100016108();
  sub_1000135BC((uint64_t)&unk_10007ABD0);
  sub_100011948();
  sub_10001F5B4();
  sub_100011950();
  v32 = sub_1000144FC();
  OS_dispatch_source.setCancelHandler(qos:flags:handler:)(v32);
  sub_10001643C();
  v31(v30, v44);
  v42(v15, v40);
  sub_100016108();
  sub_100014464();
  sub_1000135BC((uint64_t)&unk_10007ABF8);
  sub_100011948();
  sub_10001F5B4();
  sub_100011950();
  v33 = sub_1000144FC();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v33, v34, v35, v36);
  sub_10001643C();
  sub_10001F61C();
  sub_10001F658();
  sub_100016108();
  sub_1000135BC((uint64_t)&unk_10007AC20);
  sub_100011948();
  sub_10001F5B4();
  sub_100011950();
  v37 = sub_1000144FC();
  OS_dispatch_source.setCancelHandler(qos:flags:handler:)(v37);
  sub_10001643C();
  swift_unknownObjectRelease(v23);
  sub_100015DBC();

  sub_10001F61C();
  sub_10001F658();
  sub_100016108();
  return v2;
}

uint64_t sub_10001B3D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v5;

  v0 = sub_100016290();
  v5 = &_swiftEmptyArrayStorage;
  v1 = sub_10000EC00((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_1000150C0(&qword_1000850F0);
  v3 = sub_10001AE20();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

void sub_10001B460(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + *a2);
  *(_QWORD *)(a1 + *a2) = 0;
  swift_unknownObjectRelease(v3);
  v4 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection;
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection);
  if (v5)
  {
    lockdown_disconnect(v5);
    *(_QWORD *)(a1 + v4) = 0;
  }
  sub_100014510();
}

void sub_10001B4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t ErrorValue;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[2];
  _QWORD v100[3];
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106[5];

  sub_100011610();
  v1 = v0;
  v2 = sub_10001F66C();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v10 = (char *)v79 - v9;
  v11 = type metadata accessor for POSIXError(0);
  v92 = *(uint8_t **)(v11 - 8);
  sub_1000123E4();
  __chkstk_darwin(v12, v13);
  sub_100011928();
  sub_10001F608(v15 - v14);
  v16 = *(id *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  OS_dispatch_queue.assertOnQueueHierarchy()();

  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource);
  if (!v17)
    goto LABEL_11;
  v90 = v11;
  ObjectType = swift_getObjectType(v17);
  swift_unknownObjectRetain(v17);
  if (!OS_dispatch_source.data.getter(ObjectType)
    || (v19 = *(_QWORD *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection)) == 0)
  {
    static RemotePairingError.connectionFailed.getter();
    v29 = sub_100015A4C((unint64_t *)&unk_1000859D0, v28, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v30 = sub_1000156B8(v2, v29);
    sub_100015A4C((unint64_t *)&unk_1000853D0, v31, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_10001F578();
    v34 = Error<>.init(_:_:)(v10, v32, v33, v2);
    v35 = swift_willThrow(v34);
    v36 = static os_log_type_t.error.getter(v35);
    v37 = qword_1000886E0;
    if (sub_10001F5A4(v36))
    {
      sub_100016288();
      sub_100016288();
      v38 = v17;
      v39 = (uint8_t *)sub_1000123C4(12);
      v40 = sub_1000123C4(32);
      v106[0] = v40;
      *(_DWORD *)v39 = 136315138;
      swift_getErrorValue(v30, &v101, v100);
      v41 = Error.localizedDescription.getter(v100[1], v100[2]);
      v43 = v42;
      sub_100010D40(v41, v42, v106);
      v104 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v39 + 4);
      swift_bridgeObjectRelease(v43);
      sub_1000159B0();
      sub_1000159B0();
      sub_1000118DC((void *)&_mh_execute_header, v37, (os_log_type_t)v10, "Lockdown tunnel connection failed with error: %s", v39);
      sub_1000135B4(v40);
      sub_100012398(v40);
      v45 = (uint64_t)v39;
      v17 = v38;
      sub_100012398(v45);
    }
    sub_100016288();
    sub_10001DC70();
    sub_1000159B0();
    sub_1000159B0();
    goto LABEL_10;
  }
  v20 = v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests;
  v21 = sub_1000123DC(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests, (uint64_t)v106, 0);
  if (!*(_QWORD *)(*(_QWORD *)v20 + 16))
  {
LABEL_10:
    swift_unknownObjectRelease(v17);
    goto LABEL_11;
  }
  v79[1] = ObjectType;
  v80 = v7;
  v81 = v3;
  v82 = v10;
  v83 = v2;
  v87 = v17;
  sub_1000123CC(v21, (uint64_t)&v104);
  v86 = v20;
  v84 = sub_10001BFB4();
  v85 = v22;
  v88 = v23;
  v89 = v24;
  sub_1000118E4();
  v25 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = __DataStorage.init(length:)(0x2000);
  v102 = 0x200000000000;
  v103 = (v26 | 0x4000000000000000);
  v99[1] = 0;
  v93 = v19;
  sub_10001E8AC((uint64_t)&v102);
  if (v27 > 0)
  {
    v94 = v103;
    __asm { BR              X10 }
  }
  if (v27 < 0)
  {
    v55 = v91;
    v56 = static POSIXError.current(or:)(5);
    v50 = POSIXError._nsError.getter(v56);
    v54 = (*((uint64_t (**)(uint64_t, uint64_t))v92 + 1))(v55, v90);
    v49 = v83;
    v46 = (uint64_t)v82;
  }
  else
  {
    v46 = (uint64_t)v82;
    ((void (*)(void))static RemotePairingError.mobileDeviceError.getter)();
    v48 = sub_100011608((unint64_t *)&unk_1000859D0, v47, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v49 = v83;
    v50 = sub_1000156B8(v83, v48);
    sub_100011608((unint64_t *)&unk_1000853D0, v51, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_10001F578();
    v54 = sub_10001F570(v46, v52, v53, v49);
  }
  v57 = static os_log_type_t.error.getter(v54);
  v58 = qword_1000886E0;
  v59 = v57;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v57))
  {
    sub_100013AE0();
    sub_100013AE0();
    v94 = v58;
    v60 = (uint8_t *)sub_1000123C4(12);
    v93 = sub_1000123C4(32);
    v104 = v93;
    *(_DWORD *)v60 = 136315138;
    v92 = v60 + 4;
    ErrorValue = swift_getErrorValue(v50, v99, &v96);
    v62 = v97;
    v63 = v98;
    v64 = *(_QWORD *)(v97 - 8);
    __chkstk_darwin(ErrorValue, v96);
    sub_100016020();
    sub_10001F5CC(v65, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 16));
    v66 = Error.localizedDescription.getter(v62, v63);
    v68 = v67;
    sub_10001F5D8(*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8));
    sub_100010D40(v66, v68, &v104);
    v95 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v92);
    sub_1000135C8();
    sub_1000138CC();
    sub_1000138CC();
    sub_1000118DC((void *)&_mh_execute_header, v94, v59, "Lockdown tunnel connection receive error: %s", v60);
    v70 = v93;
    sub_1000135B4(v93);
    sub_100012398(v70);
    v71 = (uint64_t)v60;
    v46 = (uint64_t)v82;
    v49 = v83;
    sub_100012398(v71);
  }
  v72 = v89;
  v73 = sub_100011948();
  v74 = (uint64_t)v80;
  static RemotePairingError.mobileDeviceError.getter(v73);
  sub_10000EC00((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
  sub_10001F578();
  sub_10001F570(v74, 0xD000000000000018, v75, v49);
  v76 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
  v77 = sub_100015510(v76);
  sub_100013AE0();
  v78 = sub_10001F5FC();
  _Error.wrapping(_:)(v78);
  sub_1000138CC();
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v46, v49);
  sub_10001F594();
  swift_errorRelease(v77);
  sub_10001585C();
  swift_release_n(v72, 2);
  sub_1000138CC();
  sub_100015430(v102, (unint64_t)v103);
LABEL_11:
  sub_1000138B4();
}

uint64_t sub_10001BFB4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *v0;
  if (*(_QWORD *)(*v0 + 16))
  {
    v2 = *(_QWORD *)(v1 + 32);
    swift_retain(*(_QWORD *)(v1 + 56));
    sub_10001EC50(0, 1);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10001C018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x10001C150);
}

void sub_10001C184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x10001C2C0);
}

void sub_10001C2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  NSObject *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[10];
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[3];
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  sub_100011610();
  v56 = v1;
  v57 = v2;
  v3 = v0;
  v4 = sub_10001F66C();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)v47 - v11;
  v13 = type metadata accessor for POSIXError(0);
  __chkstk_darwin(v13, v14);
  sub_100011928();
  v15 = *(id *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  OS_dispatch_queue.assertOnQueueHierarchy()();

  v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource);
  if (!v16)
    goto LABEL_15;
  v49 = v9;
  v50 = v5;
  ObjectType = swift_getObjectType(v16);
  swift_unknownObjectRetain(v16);
  v18 = OS_dispatch_source.data.getter(ObjectType);
  if (v18 < 0)
  {
    v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v19 = v18;
    if (!v18)
    {
      static RemotePairingError.connectionFailed.getter();
      v28 = sub_100011608((unint64_t *)&unk_1000859D0, v27, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      v29 = sub_100015510(v28);
      v30 = (uint64_t)v12;
      sub_100011608((unint64_t *)&unk_1000853D0, v31, (uint64_t)&protocol conformance descriptor for RemotePairingError);
LABEL_11:
      sub_10001F578();
      v37 = sub_10001F570(v30, v35, v36, v4);
      v38 = swift_willThrow(v37);
      v39 = static os_log_type_t.error.getter(v38);
      v40 = qword_1000886E0;
      if (sub_10001F5A4(v39))
      {
        sub_100016288();
        sub_100016288();
        v41 = (uint8_t *)sub_1000123C4(12);
        v42 = sub_1000123C4(32);
        v53[0] = v42;
        *(_DWORD *)v41 = 136315138;
        swift_getErrorValue(v29, &v55, v54);
        v43 = Error.localizedDescription.getter(v54[1], v54[2]);
        v45 = v44;
        sub_100010D40(v43, v44, v53);
        v51 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v41 + 4);
        swift_bridgeObjectRelease(v45);
        sub_1000159B0();
        sub_1000159B0();
        sub_1000118DC((void *)&_mh_execute_header, v40, (os_log_type_t)v4, "Lockdown tunnel connection failed with error: %s", v41);
        sub_1000135B4(v42);
        sub_100012398(v42);
        sub_100012398((uint64_t)v41);
      }
      sub_100016288();
      sub_10001DC70();
      sub_1000159B0();
      sub_1000159B0();
      goto LABEL_14;
    }
  }
  v48 = v12;
  if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection))
  {
    v30 = (uint64_t)v48;
    static RemotePairingError.connectionFailed.getter();
    v33 = sub_100011608((unint64_t *)&unk_1000859D0, v32, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v29 = sub_100015510(v33);
    sub_100011608((unint64_t *)&unk_1000853D0, v34, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    goto LABEL_11;
  }
  if (v19 >= 0x401)
  {
    v20 = v3 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests;
    v21 = sub_1000123DC(v3 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests, (uint64_t)v53, 0);
    if (*(_QWORD *)(*(_QWORD *)v20 + 16))
    {
      v47[8] = ObjectType;
      sub_1000123CC(v21, (uint64_t)&v51);
      v22 = *(_QWORD **)v20;
      v23 = *(_QWORD *)(*(_QWORD *)v20 + 16);
      v47[9] = v20;
      if (v23)
      {
        v25 = v22[4];
        v24 = v22[5];
        v26 = v22[7];
        v47[3] = v22[6];
        sub_10001F608(v24 >> 62);
        sub_10001F614(v25);
        v47[4] = v26;
        sub_10000E49C();
        sub_10001EB54(0, 1);
        swift_endAccess(&v51);
        v47[7] = v25;
        v47[6] = v24;
        Data.count.getter(v25, v24);
        __asm { BR              X9 }
      }
      __break(1u);
      JUMPOUT(0x10001CBF8);
    }
LABEL_14:
    sub_100015474();
LABEL_15:
    sub_1000138B4();
    return;
  }
  swift_unknownObjectRelease(v16);
}

uint64_t sub_10001CC0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001DC70();
  sub_100013AB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection_identifier;
  v2 = sub_1000150C0((uint64_t *)&unk_1000853A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource));
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests));
  sub_100015430(*(_QWORD *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData), *(_QWORD *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests));
  return v0;
}

uint64_t sub_10001CCC8()
{
  uint64_t v0;

  sub_10001CC0C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10001CCEC()
{
  return type metadata accessor for LockdownTunnelConnection(0);
}

uint64_t type metadata accessor for LockdownTunnelConnection(uint64_t a1)
{
  uint64_t result;

  result = qword_100085178;
  if (!qword_100085178)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LockdownTunnelConnection);
  return result;
}

void sub_10001CD2C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = &unk_100065B30;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10001E0BC(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = &unk_100065B48;
    v4[8] = &unk_100065B48;
    v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[10] = &unk_100065B60;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
  }
}

void sub_10001CDF4()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::String v2;
  void *object;

  v1 = *v0;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2._countAndFlagsBits = _typeName(_:qualified:)(v1, 0);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000044, 0x800000010006A4A0, "remotepairingdeviced/LockdownTunnelConnection.swift", 51, 2, 238, 0);
  __break(1u);
}

void sub_10001CE98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_100011610();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v27 = *(_QWORD *)(sub_100016290() - 8);
  sub_1000123E4();
  __chkstk_darwin(v10, v11);
  sub_100015C94();
  sub_1000123E4();
  __chkstk_darwin(v12, v13);
  sub_100012460();
  v14 = *(void **)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  v15 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007AD98, 40);
  v15[2] = v14;
  v15[3] = v5;
  v15[4] = v3;
  v16 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007ADC0, 56);
  v16[2] = v1;
  v16[3] = sub_10001F2A0;
  v16[4] = v15;
  v16[5] = v9;
  v16[6] = v7;
  v17 = sub_10000E4BC((uint64_t)sub_10000E208);
  v18 = v14;
  swift_retain(v3);
  swift_retain(v1);
  sub_1000144D8();
  sub_10001F650();
  v19 = sub_10000EC00((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000150C0(&qword_1000850F0);
  sub_10001F63C();
  v20 = sub_100015AF4();
  dispatch thunk of SetAlgebra.init<A>(_:)(v20, v21, v22, v23, v19);
  v24 = sub_100012478();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v24, v25, v26, v17);
  _Block_release(v17);
  swift_release(v15);

  sub_100016570(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
  sub_10001F584();
  sub_100015FC0();
  sub_1000138B4();
}

uint64_t sub_10001D03C(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v29 = a4;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_allocObject(&unk_10007AE10, 49, 7);
  *(_QWORD *)(v20 + 16) = a5;
  *(_QWORD *)(v20 + 24) = a6;
  *(_QWORD *)(v20 + 32) = a1;
  *(_QWORD *)(v20 + 40) = a2;
  a3 &= 1u;
  *(_BYTE *)(v20 + 48) = a3;
  aBlock[4] = sub_10001F4F4;
  v32 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E208;
  aBlock[3] = &unk_10007AE28;
  v21 = _Block_copy(aBlock);
  swift_retain(a6);
  v22 = sub_10001F51C(a1, a2, a3);
  static DispatchQoS.unspecified.getter(v22);
  v30 = &_swiftEmptyArrayStorage;
  v23 = sub_10000EC00((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_1000150C0(&qword_1000850F0);
  v25 = sub_10001AE20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v24, v25, v11, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v14, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  return swift_release(v32);
}

uint64_t sub_10001D23C(uint64_t a1, void (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE v43[24];
  __int128 v44;
  _BYTE v45[24];

  v10 = type metadata accessor for RemotePairingError(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = &v43[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17 = __chkstk_darwin(v13, v16);
  v19 = &v43[-v18 - 8];
  v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource);
  if (!v20)
  {
    static RemotePairingError.mobileDeviceError.getter(v17);
    sub_10000EC00((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    Error<>.init(_:_:)(v15, 0xD000000000000027, 0x800000010006A430, v10);
    v22 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v23 = swift_allocError(v10, v22, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v24, v19, v10);
    a2(v23, 0, 1);
    swift_errorRelease(v23);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v19, v10);
  }
  v21 = (uint64_t *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests);
  swift_beginAccess(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests, v45, 0, 0);
  if (*(_QWORD *)(*v21 + 16))
  {
    swift_unknownObjectRetain(v20);
    goto LABEL_6;
  }
  v26 = (uint64_t *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData);
  swift_beginAccess(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData, v43, 1, 0);
  v27 = *v26;
  v28 = v26[1];
  swift_unknownObjectRetain(v20);
  sub_100015614(v27, v28);
  v29 = Data.count.getter(v27, v28);
  sub_100015430(v27, v28);
  if (v29 < a4)
  {
LABEL_6:
    swift_beginAccess(v21, &v44, 33, 0);
    swift_retain(a3);
    sub_100048EA0();
    v30 = *(_QWORD *)(*v21 + 16);
    sub_100049000();
    v31 = *v21;
    *(_QWORD *)(v31 + 16) = v30 + 1;
    v32 = (_QWORD *)(v31 + 32 * v30);
    v32[4] = a4;
    v32[5] = a5;
    v32[6] = a2;
    v32[7] = a3;
    v33 = *v21;
    swift_endAccess(&v44);
    if (*(_QWORD *)(v33 + 16) == 1)
    {
      swift_getObjectType(v20);
      OS_dispatch_source.resume()();
    }
    return swift_unknownObjectRelease(v20);
  }
  v34 = *v26;
  v35 = v26[1];
  sub_100015614(*v26, v35);
  sub_10001C018(a5, v34, v35);
  v36 = v44;
  v37 = *v26;
  v38 = v26[1];
  sub_100015614(*v26, v38);
  v39 = Data.count.getter(v36, *((_QWORD *)&v36 + 1));
  sub_10001C184(v39, v37, v38);
  v40 = *v26;
  v41 = v26[1];
  *(_OWORD *)v26 = v44;
  sub_100015430(v40, v41);
  sub_100015614(v36, *((unint64_t *)&v36 + 1));
  a2(v36, *((_QWORD *)&v36 + 1), 0);
  sub_100015430(v36, *((unint64_t *)&v36 + 1));
  sub_100015430(v36, *((unint64_t *)&v36 + 1));
  return swift_unknownObjectRelease(v20);
}

void sub_10001D56C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_100011610();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v27 = *(_QWORD *)(sub_100016290() - 8);
  sub_1000123E4();
  __chkstk_darwin(v10, v11);
  sub_100015C94();
  sub_1000123E4();
  __chkstk_darwin(v12, v13);
  sub_100012460();
  v14 = *(void **)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  v15 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007ACD0, 40);
  v15[2] = v14;
  v15[3] = v5;
  v15[4] = v3;
  v16 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007ACF8, 56);
  v16[2] = v1;
  v16[3] = sub_10001F1E0;
  v16[4] = v15;
  v16[5] = v9;
  v16[6] = v7;
  v17 = sub_10000E4BC((uint64_t)sub_10000E208);
  v18 = v14;
  swift_retain(v3);
  sub_1000159B8();
  sub_1000144D8();
  sub_100015614(v9, v7);
  sub_10001F650();
  v19 = sub_10000EC00((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000150C0(&qword_1000850F0);
  sub_10001F63C();
  v20 = sub_100015AF4();
  dispatch thunk of SetAlgebra.init<A>(_:)(v20, v21, v22, v23, v19);
  v24 = sub_100012478();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v24, v25, v26, v17);
  _Block_release(v17);
  swift_release(v15);

  sub_100016570(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
  sub_10001F584();
  sub_100015FC0();
  sub_1000138B4();
}

uint64_t sub_10001D718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  void *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v24 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)swift_allocObject(&unk_10007AD48, 40, 7);
  v17[2] = a3;
  v17[3] = a4;
  v17[4] = a1;
  aBlock[4] = sub_10001F250;
  v27 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E208;
  aBlock[3] = &unk_10007AD60;
  v18 = _Block_copy(aBlock);
  swift_retain(a4);
  v19 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v19);
  v25 = &_swiftEmptyArrayStorage;
  v20 = sub_10000EC00((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_1000150C0(&qword_1000850F0);
  v22 = sub_10001AE20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v22, v7, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v11, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  return swift_release(v27);
}

uint64_t sub_10001D8FC(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[24];

  v10 = type metadata accessor for RemotePairingError(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = &v31[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17 = __chkstk_darwin(v13, v16);
  v19 = &v31[-v18 - 8];
  v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource);
  if (v20)
  {
    v21 = (uint64_t *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests);
    swift_beginAccess(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests, v31, 33, 0);
    swift_unknownObjectRetain(v20);
    sub_100015614(a4, a5);
    swift_retain(a3);
    sub_100048F1C();
    v22 = *(_QWORD *)(*v21 + 16);
    sub_100049054();
    v23 = *v21;
    *(_QWORD *)(v23 + 16) = v22 + 1;
    v24 = (_QWORD *)(v23 + 32 * v22);
    v24[4] = a4;
    v24[5] = a5;
    v24[6] = a2;
    v24[7] = a3;
    v25 = *v21;
    swift_endAccess(v31);
    if (*(_QWORD *)(v25 + 16) == 1)
    {
      swift_getObjectType(v20);
      OS_dispatch_source.resume()();
    }
    return swift_unknownObjectRelease(v20);
  }
  else
  {
    static RemotePairingError.mobileDeviceError.getter(v17);
    sub_10000EC00((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    Error<>.init(_:_:)(v15, 0xD000000000000024, 0x800000010006A400, v10);
    v27 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v28 = swift_allocError(v10, v27, 0, 0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 16))(v29, v19, v10);
    a2(v28);
    swift_errorRelease(v28);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v19, v10);
  }
}

void sub_10001DB10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_100011610();
  v1 = sub_100016290();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v4 = sub_100015C94();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  sub_100012460();
  v7 = *(void **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  v8 = sub_10000E4BC((uint64_t)sub_10000E208);
  v9 = v7;
  sub_1000144D8();
  sub_10001F650();
  v11 = sub_100011608((unint64_t *)&unk_1000853B0, v10, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000150C0(&qword_1000850F0);
  sub_10001F63C();
  v12 = sub_100015AF4();
  dispatch thunk of SetAlgebra.init<A>(_:)(v12, v13, v14, v15, v11);
  v16 = sub_100012478();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v16, v17, v18, v8);
  _Block_release(v8);

  sub_100016570(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10001F5E4(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_100015FC0();
  sub_1000138B4();
}

void sub_10001DC4C()
{
  sub_10001DC70();
}

void sub_10001DC70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void (*v38)(_QWORD *);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void (*v42)(_QWORD *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD v50[2];
  char v51;
  _QWORD *v52;
  uint64_t v53;

  sub_100011610();
  v1 = v0;
  v3 = v2;
  v4 = sub_10001F66C();
  sub_1000123E4();
  __chkstk_darwin(v5, v6);
  sub_100011928();
  v9 = v8 - v7;
  if (v3)
  {
    v10 = v3;
  }
  else
  {
    static RemotePairingError.mobileDeviceError.getter();
    v11 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v10 = sub_1000156B8(v4, v11);
    sub_10000EC00((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    Error<>.init(_:_:)(v9, 0xD000000000000015, 0x800000010006A3E0, v4);
  }
  v49 = v10;
  v12 = (uint64_t *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests);
  sub_1000123DC(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests, (uint64_t)&v53, 1);
  v48 = v12;
  v13 = *v12;
  v14 = *(_QWORD *)(*v12 + 16);
  if (v14)
  {
    swift_errorRetain(v3);
    v52 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v13);
    sub_10004167C(0, v14, 0);
    v15 = &_swiftEmptyArrayStorage;
    v16 = v13;
    v17 = (uint64_t *)(v13 + 56);
    do
    {
      v19 = *(v17 - 1);
      v18 = *v17;
      v20 = sub_1000138D4((uint64_t)&unk_10007AC58, 32);
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = v18;
      sub_100011948();
      if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      {
        sub_10004167C(0, v15[2] + 1, 1);
        v15 = v52;
      }
      v22 = v15[2];
      v21 = v15[3];
      if (v22 >= v21 >> 1)
      {
        sub_10004167C((_QWORD *)(v21 > 1), v22 + 1, 1);
        v15 = v52;
      }
      v15[2] = v22 + 1;
      v23 = (char *)&v15[2 * v22];
      *((_QWORD *)v23 + 4) = sub_10001F18C;
      *((_QWORD *)v23 + 5) = v20;
      v17 += 4;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    swift_errorRetain(v3);
    v15 = &_swiftEmptyArrayStorage;
  }
  v24 = (uint64_t *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests);
  sub_1000123DC(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests, (uint64_t)&v52, 1);
  v25 = *v24;
  v26 = *(_QWORD *)(*v24 + 16);
  v27 = &_swiftEmptyArrayStorage;
  if (v26)
  {
    v50[0] = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v25);
    sub_100041650(0, v26, 0);
    v27 = &_swiftEmptyArrayStorage;
    v47 = v25;
    v28 = (uint64_t *)(v25 + 56);
    do
    {
      v30 = *(v28 - 1);
      v29 = *v28;
      v31 = sub_1000138D4((uint64_t)&unk_10007AC80, 32);
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = v29;
      sub_10000E49C();
      if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      {
        sub_100041650(0, v27[2] + 1, 1);
        v27 = (_QWORD *)v50[0];
      }
      v33 = v27[2];
      v32 = v27[3];
      if (v33 >= v32 >> 1)
      {
        sub_100041650((_QWORD *)(v32 > 1), v33 + 1, 1);
        v27 = (_QWORD *)v50[0];
      }
      v27[2] = v33 + 1;
      v34 = (char *)&v27[2 * v33];
      *((_QWORD *)v34 + 4) = sub_10001F1B4;
      *((_QWORD *)v34 + 5) = v31;
      v28 += 4;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease(v47);
  }
  v35 = v15[2];
  if (v35)
  {
    swift_bridgeObjectRetain(v15);
    v36 = v15 + 5;
    do
    {
      v38 = (void (*)(_QWORD *))*(v36 - 1);
      v37 = *v36;
      v50[0] = v49;
      v50[1] = 0;
      v51 = 1;
      sub_10000E49C();
      v38(v50);
      swift_release(v37);
      v36 += 2;
      --v35;
    }
    while (v35);
    sub_1000135C8();
  }
  sub_1000135C8();
  v39 = v27[2];
  if (v39)
  {
    swift_bridgeObjectRetain(v27);
    v40 = v27 + 5;
    do
    {
      v42 = (void (*)(_QWORD *))*(v40 - 1);
      v41 = *v40;
      v50[0] = v49;
      sub_10000E49C();
      v42(v50);
      swift_release(v41);
      v40 += 2;
      --v39;
    }
    while (v39);
    sub_10000E4C8();
  }
  sub_10000E4C8();
  v43 = *v48;
  *v48 = (uint64_t)&_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v43);
  v44 = *v24;
  *v24 = (uint64_t)&_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v44);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource))
  {
    sub_100014464();
    sub_10001F644();
    OS_dispatch_source.cancel()();
    sub_100015DBC();
  }
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource))
  {
    sub_100014464();
    sub_10001F644();
    OS_dispatch_source.cancel()();
    sub_100015DBC();
  }
  v45 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection;
  v46 = *(_QWORD *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection);
  if (v46)
  {
    lockdown_disconnect(v46);
    swift_errorRelease(v49);
    *(_QWORD *)(v1 + v45) = 0;
  }
  else
  {
    swift_errorRelease(v49);
  }
  sub_1000138B4();
}

void sub_10001E0BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100086EF0)
  {
    v2 = type metadata accessor for TunnelConnectionIdentifierCategory(255);
    v3 = type metadata accessor for Identifier(a1, v2, &protocol witness table for TunnelConnectionIdentifierCategory);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100086EF0);
  }
}

uint64_t sub_10001E118(uint64_t *a1)
{
  sub_100015430(*a1, a1[1]);
  return swift_release(a1[3]);
}

uint64_t *sub_10001E144(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = a2[1];
  sub_100015614(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain(v6);
  return a1;
}

uint64_t *sub_10001E190(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = a2[1];
  sub_100015614(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100015430(v6, v7);
  v9 = a2[2];
  v8 = a2[3];
  v10 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v10);
  return a1;
}

__n128 sub_10001E1F0(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001E1FC(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  sub_100015430(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_release(v6);
  return a1;
}

void type metadata accessor for LockdownTunnelConnection.SendRequest()
{
  sub_10001F664();
}

uint64_t sub_10001E258(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t sub_10001E260(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain(v3);
  return a1;
}

_QWORD *sub_10001E294(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[3];
  v4 = a1[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t sub_10001E2DC(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  swift_release(v3);
  return a1;
}

uint64_t sub_10001E30C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10001E34C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for LockdownTunnelConnection.ReceiveRequest()
{
  sub_10001F664();
}

uint64_t sub_10001E398()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 16, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 16);
  sub_10001E814(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_10001E3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v2 + 16, v8, 1, 0);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return sub_100013AB4(v5, v6);
}

uint64_t (*sub_10001E434(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10001E470()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_10001E4A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 32, v4, 1, 0);
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*sub_10001E4DC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 32, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10001E518()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 40, v2, 0, 0);
  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_10001E548(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 40, v4, 1, 0);
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*sub_10001E584(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 40, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10001E5CC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection_identifier;
  v4 = sub_1000150C0((uint64_t *)&unk_1000853A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10001E618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100065C0C, a4);
  return StreamBasedTunnelConnection.send(packets:completion:)(a1, a2, a3, a4, WitnessTable);
}

uint64_t sub_10001E67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100065C0C, a4);
  return StreamBasedTunnelConnection.send(controlMessage:completion:)(a1, a2, a3, a4, WitnessTable);
}

uint64_t sub_10001E6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100065C0C, a3);
  return StreamBasedTunnelConnection.receivePackets(completion:)(a1, a2, a3, WitnessTable);
}

uint64_t sub_10001E734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100065C0C, a3);
  return StreamBasedTunnelConnection.receiveControlMessage(completion:)(a1, a2, a3, WitnessTable);
}

void sub_10001E788()
{
  sub_10001DB10();
}

void sub_10001E7A8()
{
  sub_10001CDF4();
}

uint64_t sub_10001E7BC()
{
  return sub_10001AFD8() & 0x1FFFF;
}

uint64_t sub_10001E7DC()
{
  return 0;
}

uint64_t sub_10001E7E8()
{
  return sub_10000EC00(&qword_100085398, type metadata accessor for LockdownTunnelConnection, (uint64_t)&unk_100065BA4);
}

uint64_t sub_10001E814(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100015614(result, a2);
  return result;
}

unint64_t sub_10001E828()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086200;
  if (!qword_100086200)
  {
    v1 = objc_opt_self(OS_dispatch_source);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100086200);
  }
  return result;
}

void sub_10001E868()
{
  uint64_t v0;

  sub_10001B460(v0, &OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource);
}

void sub_10001E88C()
{
  uint64_t v0;

  sub_10001B460(v0, &OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource);
}

void sub_10001E8AC(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10001E90C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;

  v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  v9 = BYTE4(a1);
  v10 = BYTE5(a1);
  v11 = BYTE6(a1);
  result = lockdown_recv(v3, &v7, v2);
  v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v1 = v7;
  v1[1] = v6;
  return result;
}

char *sub_10001EB54(char *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = result;
  v7 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v8 = &result[-a2];
  if (__OFSUB__(0, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = (uint64_t)&v8[v5];
    else
      v11 = v5;
    sub_100049250(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    v4 = v12;
  }
  v13 = (char *)(v4 + 32 + 32 * (_QWORD)v6);
  result = (char *)swift_arrayDestroy(v13, v7);
  if (!v7)
    goto LABEL_16;
  v14 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v14, a2))
    goto LABEL_22;
  result = sub_100049F7C((char *)(v4 + 32 + 32 * a2), v14 - a2, v13);
  v15 = *(_QWORD *)(v4 + 16);
  v16 = __OFADD__(v15, v8);
  v17 = v15 - v7;
  if (!v16)
  {
    *(_QWORD *)(v4 + 16) = v17;
LABEL_16:
    *v2 = v4;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

char *sub_10001EC50(char *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = result;
  v7 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v8 = &result[-a2];
  if (__OFSUB__(0, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = (uint64_t)&v8[v5];
    else
      v11 = v5;
    sub_10004926C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    v4 = v12;
  }
  v13 = (char *)(v4 + 32 + 32 * (_QWORD)v6);
  result = (char *)swift_arrayDestroy(v13, v7);
  if (!v7)
    goto LABEL_16;
  v14 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v14, a2))
    goto LABEL_22;
  result = sub_100049F7C((char *)(v4 + 32 + 32 * a2), v14 - a2, v13);
  v15 = *(_QWORD *)(v4 + 16);
  v16 = __OFADD__(v15, v8);
  v17 = v15 - v7;
  if (!v16)
  {
    *(_QWORD *)(v4 + 16) = v17;
LABEL_16:
    *v2 = v4;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

char *sub_10001ED4C(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v8 = *v6;
  v9 = *(_QWORD *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v10 = result;
  v11 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v13 > *(_QWORD *)(v8 + 24) >> 1)
  {
    if (v9 <= v13)
      v17 = v9 + v12;
    else
      v17 = v9;
    sub_10004926C(isUniquelyReferenced_nonNull_native, v17, 1, v8);
    v8 = v18;
  }
  v19 = v8 + 32 + 32 * (_QWORD)v10;
  result = (char *)swift_arrayDestroy(v19, v11);
  if (!v12)
    goto LABEL_16;
  v20 = *(_QWORD *)(v8 + 16);
  if (__OFSUB__(v20, a2))
    goto LABEL_22;
  result = sub_100049F7C((char *)(v8 + 32 + 32 * a2), v20 - a2, (char *)(v19 + 32));
  v21 = *(_QWORD *)(v8 + 16);
  v22 = __OFADD__(v21, v12);
  v23 = v21 + v12;
  if (!v22)
  {
    *(_QWORD *)(v8 + 16) = v23;
LABEL_16:
    *(_QWORD *)v19 = a3;
    *(_QWORD *)(v19 + 8) = a4;
    *(_QWORD *)(v19 + 16) = a5;
    *(_QWORD *)(v19 + 24) = a6;
    *v6 = v8;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

char *sub_10001EE78(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v8 = *v6;
  v9 = *(_QWORD *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v10 = result;
  v11 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v13 > *(_QWORD *)(v8 + 24) >> 1)
  {
    if (v9 <= v13)
      v17 = v9 + v12;
    else
      v17 = v9;
    sub_100049250(isUniquelyReferenced_nonNull_native, v17, 1, v8);
    v8 = v18;
  }
  v19 = v8 + 32 + 32 * (_QWORD)v10;
  result = (char *)swift_arrayDestroy(v19, v11);
  if (!v12)
    goto LABEL_16;
  v20 = *(_QWORD *)(v8 + 16);
  if (__OFSUB__(v20, a2))
    goto LABEL_22;
  result = sub_100049F7C((char *)(v8 + 32 + 32 * a2), v20 - a2, (char *)(v19 + 32));
  v21 = *(_QWORD *)(v8 + 16);
  v22 = __OFADD__(v21, v12);
  v23 = v21 + v12;
  if (!v22)
  {
    *(_QWORD *)(v8 + 16) = v23;
LABEL_16:
    *(_QWORD *)v19 = a3;
    *(_QWORD *)(v19 + 8) = a4;
    *(_QWORD *)(v19 + 16) = a5;
    *(_QWORD *)(v19 + 24) = a6;
    *v6 = v8;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10001EFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = __DataStorage._bytes.getter();
  if (result)
  {
    v9 = result;
    result = __DataStorage._offset.getter();
    if (!__OFSUB__(a1, result))
    {
      v10 = v9 + a1 - result;
      __DataStorage._length.getter();
      return lockdown_recv(a4, v10, a5);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10001F01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v5 = a1;
  v6 = a2;
  v7 = BYTE2(a2);
  v8 = BYTE3(a2);
  v9 = BYTE4(a2);
  v10 = BYTE5(a2);
  return lockdown_send(a3, &v5, a4);
}

uint64_t sub_10001F0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v8 = __DataStorage._bytes.getter();
  if (v8)
  {
    v9 = v8;
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
      __break(1u);
      goto LABEL_8;
    }
    v11 = v9 + a1 - result;
  }
  else
  {
    v11 = 0;
  }
  result = __DataStorage._length.getter();
  if (v11)
    return lockdown_send(a4, v11, a5);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10001F16C()
{
  uint64_t v0;

  sub_1000118EC();
  return swift_deallocObject(v0, 32, 7);
}

void sub_10001F18C(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  sub_100014510();
}

void sub_10001F1B4(_QWORD *a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD))(v1 + 16))(*a1);
  sub_100014510();
}

void sub_10001F1D4()
{
  sub_10001DC4C();
}

uint64_t sub_10001F1E0(uint64_t a1)
{
  uint64_t *v1;

  return sub_10001D718(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10001F1EC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_10001F634();
  sub_100015430(v0[5], v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10001F21C()
{
  return sub_10001F2E4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001D8FC);
}

uint64_t sub_10001F228()
{
  uint64_t v0;

  sub_1000118EC();
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10001F250()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
  sub_100014510();
}

uint64_t sub_10001F278()
{
  uint64_t v0;

  sub_10001F634();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001F2A0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;

  return sub_10001D03C(a1, a2, a3 & 1, v3[2], v3[3], v3[4]);
}

uint64_t sub_10001F2B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_10001F634();
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10001F2D8()
{
  return sub_10001F2E4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001D23C);
}

uint64_t sub_10001F2E4(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10001F2F8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x10001F354);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_10001F310 + *((int *)qword_10001F358 + (a4 >> 62))))(v5);
}

uint64_t sub_10001F368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;

  v9 = sub_10001F3EC(a1, a3, a4, a5);
  if (a2 <= 0)
  {
    if (v9 <= 0 && v9 > a2)
      return 0;
  }
  else if ((v9 & 0x8000000000000000) == 0 && v9 < (unint64_t)a2)
  {
    return 0;
  }
  return sub_10001F2F8(a1, a2, a4, a5);
}

uint64_t sub_10001F3EC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_10001F400 + *((int *)qword_10001F4A8 + (a4 >> 62))))();
}

uint64_t sub_10001F41C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;

  if (v1 >= a1)
  {
    v5 = __OFSUB__(0, a1);
    v3 = a1 == 0;
    v4 = -a1 < 0;
  }
  else
  {
    v5 = 0;
    v3 = 0;
    v4 = 0;
  }
  if (!(v4 ^ v5 | v3))
  {
    __break(1u);
    JUMPOUT(0x10001F4A0);
  }
  return ((uint64_t (*)(void))((char *)&loc_10001F454 + *((int *)qword_10001F4B8 + v2)))();
}

uint64_t sub_10001F4C8()
{
  uint64_t v0;

  sub_1000118EC();
  sub_10000EBB8(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject(v0, 49, 7);
}

void sub_10001F4F4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
  sub_100014510();
}

uint64_t sub_10001F51C(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return sub_100015614(a1, a2);
}

uint64_t sub_10001F570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Error<>.init(_:_:)(a1, a2, a3, a4);
}

uint64_t sub_10001F584()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 160) + 8))(v0, *(_QWORD *)(v1 - 152));
}

uint64_t sub_10001F594()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 304))();
}

BOOL sub_10001F5A4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001F5B4()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_10001F5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return sub_10001F0E8(a1, a2, a3, v4, v3);
}

uint64_t sub_10001F5CC@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t sub_10001F5D8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10001F5E4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10001F5F0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100015614(v0, *(_QWORD *)(v1 - 256));
}

uint64_t sub_10001F5FC()
{
  uint64_t v0;

  return v0;
}

void sub_10001F608(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 280) = a1;
}

uint64_t sub_10001F614(uint64_t a1)
{
  unint64_t v1;

  return sub_100015614(a1, v1);
}

uint64_t sub_10001F61C()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, *(_QWORD *)(v2 - 152));
}

uint64_t sub_10001F628()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 296))();
}

uint64_t sub_10001F634()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 32));
}

unint64_t sub_10001F63C()
{
  return sub_10001AE20();
}

uint64_t sub_10001F644()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10001F650()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_10001F658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_10001F66C()
{
  return type metadata accessor for RemotePairingError(0);
}

BOOL sub_10001F674(char a1, char a2)
{
  return a1 == a2;
}

void sub_10001F684(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int sub_10001F6A8(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL sub_10001F6EC(char *a1, char *a2)
{
  return sub_10001F674(*a1, *a2);
}

Swift::Int sub_10001F6F8()
{
  unsigned __int8 *v0;

  return sub_10001F6A8(*v0);
}

void sub_10001F700(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10001F684(a1, *v1);
}

Swift::Int sub_10001F708()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001F748(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, unint64_t, _QWORD), uint64_t a5)
{
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v9 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007AFA8, 48);
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  v9[5] = a5;
  sub_100024E6C();
  sub_100011948();
  sub_100016390();
  sub_1000166F4();
  v11 = v10;
  v12 = CUPairingIdentity.authTag(for:type:)(a2, a3, 1);
  v14 = v13;
  a4(v12, v13, 0);
  sub_10000EBB8(v12, v14, 0);
  swift_release(v9);

  sub_100015430(a2, a3);
  swift_release(a5);
  sub_100015784();
}

void sub_10001F990(void (*a1)(void *, _QWORD))
{
  void *v2;
  void *v3;
  id v4;

  sub_100016390();
  sub_1000166F4();
  v3 = v2;
  v4 = v2;
  a1(v3, 0);

}

void sub_10001FB74(void *a1, unint64_t a2, char a3, uint64_t a4, void (*a5)(_QWORD, _QWORD))
{
  void *v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(_QWORD, _QWORD);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  v9 = a1;
  v10 = static os_log_type_t.default.getter(a1);
  v11 = qword_1000886E0;
  v12 = v10;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v10))
  {
    swift_retain_n(a4, 2);
    v27 = a3;
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v30 = v14;
    *(_DWORD *)v13 = 136446210;
    sub_1000167AC(a4 + 24, (uint64_t)&v28);
    v15 = sub_1000150C0(&qword_100085568);
    v16 = String.init<A>(describing:)(&v28, v15);
    v17 = a2;
    v18 = a5;
    v20 = v19;
    sub_100010D40(v16, v19, &v30);
    v28 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v13 + 4);
    swift_release_n(a4, 2);
    v22 = v20;
    a5 = v18;
    a2 = v17;
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Fetched IRK from IRK generator %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1);
    sub_100012398(v14);
    v23 = (uint64_t)v13;
    a3 = v27;
    sub_100012398(v23);
  }
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(v9);
    v24 = 1;
  }
  else
  {
    sub_100015614((uint64_t)v9, a2);
    sub_10001FD78(a4, (uint64_t)v9, a2, &v30, &v28);
    v24 = 0;
    v25 = sub_100024D4C();
    sub_10000EBB8(v25, v26, 0);
    v9 = v28;
  }
  a5(v9, v24);
  sub_1000245E8(v9, v24);
}

void sub_10001FD78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  os_log_type_t v20;
  NSObject *v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t PairingKey;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSUUID v35;
  Class isa;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v47 = a2;
  v48 = a3;
  v9 = sub_1000150C0((uint64_t *)&unk_100086150);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void **)(a1 + 104);
  if (!v18)
  {
    v43 = a4;
    v45 = a5;
    v19 = objc_msgSend(objc_allocWithZone((Class)CUPairingIdentity), "init");
    PairingKey = generatePairingKeyPair()();
    v44 = v13;
    v28 = PairingKey;
    v30 = v29;
    v32 = v31;
    v34 = v33;
    UUID.init()();
    v35.super.isa = UUID._bridgeToObjectiveC()().super.isa;
    v46 = v5;
    isa = v35.super.isa;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v44);
    objc_msgSend(v19, "setIdentifier:", isa);

    sub_100016080(v28, v30, v19);
    sub_100024970(v32, v34, v19);
    sub_1000160C4(v47, v48, v19);
    v37 = v46;
    sub_1000200B4();
    if (v37)
    {
      sub_100015430(v32, v34);
      sub_100015430(v28, v30);

      *v43 = v37;
      return;
    }
    sub_100015430(v28, v30);
    sub_100015430(v32, v34);
    goto LABEL_10;
  }
  v19 = v18;
  v20 = static os_log_type_t.debug.getter(v19);
  v21 = qword_1000886E0;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v20))
  {
    v45 = a5;
    v46 = v5;
    v19 = v19;
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v51 = v23;
    *(_DWORD *)v22 = 136315138;
    v24 = objc_msgSend(v19, "identifier");
    if (v24)
    {
      v25 = v24;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v26 = 0;
    }
    else
    {
      v26 = 1;
    }
    sub_100015664((uint64_t)v12, v26, 1, v13);
    v38 = String.init<A>(describing:)(v12, v9);
    v40 = v39;
    sub_100010D40(v38, v39, &v51);
    v49 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v22 + 4);

    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v21, v20, "Not saving new pairing identity as one has already been created. Using already created identity %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
LABEL_10:
    a5 = v45;
  }
  *a5 = v19;
}

void sub_1000200B4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t inited;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const __CFString *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const __CFString *v81;
  int v82;
  id v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  id v95;
  void *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  void *v116;

  sub_100013AC8();
  v109 = v1;
  v103 = v0;
  v5 = v4;
  sub_1000118FC();
  sub_100024E30();
  __chkstk_darwin(v6, v7);
  sub_1000138DC();
  v108 = v8;
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000115F0();
  __chkstk_darwin(v9, v10);
  v107 = (uint64_t)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024B80();
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v101 - v15;
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v101 - v19;
  v21 = static os_log_type_t.info.getter(v18);
  v22 = qword_1000886E0;
  v106 = sub_1000150C0(&qword_100085570);
  v23 = sub_1000153A4(v106);
  v105 = xmmword_100065C90;
  *(_OWORD *)(v23 + 16) = xmmword_100065C90;
  v116 = v5;
  v24 = objc_msgSend(v5, "identifier");
  if (v24)
  {
    v25 = v24;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v26 = 0;
  }
  else
  {
    v26 = 1;
  }
  sub_100015FC8((uint64_t)v16, v26, 1);
  sub_100024A40((uint64_t)v16, (uint64_t)v20);
  v27 = sub_1000155AC((uint64_t)v20);
  v110 = v2;
  if (v27)
  {
    sub_100015670((uint64_t)v20, (uint64_t *)&unk_100086150);
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v30 = v108;
    sub_100024CC0(v108, (uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
    v31 = sub_100015670((uint64_t)v20, (uint64_t *)&unk_100086150);
    v28 = UUID.uuidString.getter(v31);
    v29 = v32;
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v30, v3);
  }
  *(_QWORD *)&v113 = v28;
  *((_QWORD *)&v113 + 1) = v29;
  v33 = sub_1000150C0(&qword_100085598);
  v34 = String.init<A>(describing:)(&v113, v33);
  v36 = v35;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  v104 = sub_100016354();
  *(_QWORD *)(v23 + 64) = v104;
  *(_QWORD *)(v23 + 32) = v34;
  *(_QWORD *)(v23 + 40) = v36;
  sub_100024C10(v21, (uint64_t)&_mh_execute_header, v22, (uint64_t)"Saving new pairing identity (id=%{public}@) to system keychain", 62);
  sub_10000E4C8();
  v115 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v37 = sub_100024D58(v115, (SEL *)&selRef_altIRK);
  if (v38 >> 60 == 15)
  {
    v113 = 0u;
    v114 = 0u;
  }
  else
  {
    *((_QWORD *)&v114 + 1) = &type metadata for Data;
    *(_QWORD *)&v113 = v37;
    *((_QWORD *)&v113 + 1) = v38;
  }
  sub_100015BEC((uint64_t)&v113, 0x4B5249746C61, 0xE600000000000000);
  v40 = sub_100024D58(v39, (SEL *)&selRef_secretKey);
  if (v41 >> 60 == 15)
  {
    v113 = 0u;
    v114 = 0u;
  }
  else
  {
    *((_QWORD *)&v114 + 1) = &type metadata for Data;
    *(_QWORD *)&v113 = v40;
    *((_QWORD *)&v113 + 1) = v41;
  }
  sub_100015BEC((uint64_t)&v113, 27507, 0xE200000000000000);
  v43 = sub_100024D58(v42, (SEL *)&selRef_publicKey);
  if (v44 >> 60 == 15)
  {
    v113 = 0u;
    v114 = 0u;
  }
  else
  {
    *((_QWORD *)&v114 + 1) = &type metadata for Data;
    *(_QWORD *)&v113 = v43;
    *((_QWORD *)&v113 + 1) = v44;
  }
  v45 = v110;
  sub_100015BEC((uint64_t)&v113, 27504, 0xE200000000000000);
  v46 = v115;
  *((_QWORD *)&v114 + 1) = sub_1000150C0(&qword_1000855A8);
  *(_QWORD *)&v113 = v46;
  sub_1000153B0();
  v47 = v109;
  v48 = OPACKEncoderCreateData(from:)(&v113);
  if (v47)
  {
    sub_1000118F4();
    sub_100010DFC(&v113);
LABEL_24:
    sub_1000123A4();
    return;
  }
  v102 = v48;
  v109 = v49;
  sub_100010DFC(&v113);
  v50 = sub_1000150C0(&qword_100085580);
  inited = swift_initStackObject(v50, &v111);
  *(_OWORD *)(inited + 16) = xmmword_100065CA0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v52;
  sub_100024BB8();
  v101 = v53;
  *(_QWORD *)(inited + 72) = v53;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(_QWORD *)(inited + 88) = v54;
  v55 = (id)kSecClassGenericPassword;
  v56 = objc_msgSend(v116, "identifier");
  if (!v56)
  {
    sub_100024C04();
    sub_100015FC8(v98, v99, v100);
    goto LABEL_26;
  }
  v57 = v56;
  v58 = v108;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v59 = v107;
  sub_100024CC0(v107, v58, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 32));
  sub_100024BF8();
  sub_100015FC8(v60, v61, v62);
  v63 = sub_1000155AC(v59);
  if ((_DWORD)v63 == 1)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v64 = UUID.uuidString.getter(v63);
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 96) = v64;
  *(_QWORD *)(inited + 104) = v65;
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v59, v3);
  v66 = kSecUseSystemKeychain;
  if (kSecUseSystemKeychain)
  {
    swift_bridgeObjectRelease(v115);
    *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    *(_QWORD *)(inited + 136) = v67;
    *(_QWORD *)(inited + 168) = &type metadata for Bool;
    *(_BYTE *)(inited + 144) = 1;
    *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrDescription);
    *(_QWORD *)(inited + 184) = v68;
    *(_QWORD *)(inited + 216) = &type metadata for String;
    *(_QWORD *)(inited + 192) = 0xD000000000000017;
    *(_QWORD *)(inited + 200) = 0x800000010006AAF0;
    *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrLabel);
    *(_QWORD *)(inited + 232) = v69;
    *(_QWORD *)(inited + 264) = &type metadata for String;
    *(_QWORD *)(inited + 240) = 0xD000000000000017;
    *(_QWORD *)(inited + 248) = 0x800000010006AAF0;
    *(_QWORD *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
    *(_QWORD *)(inited + 280) = v70;
    *(_QWORD *)(inited + 312) = &type metadata for String;
    *(_QWORD *)(inited + 288) = 0xD000000000000017;
    *(_QWORD *)(inited + 296) = 0x800000010006AAF0;
    *(_QWORD *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
    *(_QWORD *)(inited + 328) = v71;
    *(_QWORD *)(inited + 360) = &type metadata for Data;
    v72 = v102;
    v73 = v109;
    *(_QWORD *)(inited + 336) = v102;
    *(_QWORD *)(inited + 344) = v73;
    sub_100015614(v72, v73);
    v112 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
    sub_100011964();
    *((_QWORD *)&v114 + 1) = &type metadata for String;
    sub_100024BC8();
    *(_QWORD *)&v113 = 0xD000000000000017;
    *((_QWORD *)&v113 + 1) = v74;
    sub_100015920((uint64_t)&v113, v75, v76, v77);
    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
    v80 = v79;
    *((_QWORD *)&v114 + 1) = v101;
    *(_QWORD *)&v113 = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    v81 = (id)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    sub_100015BEC((uint64_t)&v113, v78, v80);
    v82 = v112;
    Dictionary._bridgeToObjectiveC()();
    sub_1000118F4();
    sub_100024D40();
    sub_100024D70();
    if (v82)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      sub_100015DC4();
      v83 = objc_allocWithZone((Class)NSError);
      sub_100015768();
      v85 = v84;
      v86 = static os_log_type_t.error.getter(v84);
      v87 = qword_1000886E0;
      v88 = sub_1000153A4(v106);
      *(_OWORD *)(v88 + 16) = v105;
      v89 = v85;
      v90 = objc_msgSend(v89, "description");
      v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
      v93 = v92;

      v94 = v104;
      *(_QWORD *)(v88 + 56) = &type metadata for String;
      *(_QWORD *)(v88 + 64) = v94;
      *(_QWORD *)(v88 + 32) = v91;
      *(_QWORD *)(v88 + 40) = v93;
      os_log(_:dso:log:_:_:)(v86, &_mh_execute_header, v87, "Failed to save new pairing identity to system keychain: %{public}@", 66, 2, v88);
      sub_1000135D0();
      v95 = v89;
      swift_willThrow(v95);
      sub_100024DA8();

    }
    else
    {
      sub_100024DA8();
      v96 = *(void **)(v103 + 104);
      *(_QWORD *)(v103 + 104) = v116;
      v97 = v116;

    }
    goto LABEL_24;
  }
LABEL_27:
  __break(1u);
}

void sub_1000207B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFDictionary *isa;
  OSStatus v28;
  CFTypeRef v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  char v64;
  id v65;
  NSUUID v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_log_type_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  CFTypeRef v89;
  __int128 v90;
  void *v91;
  uint64_t v92;

  sub_100013AC8();
  v2 = sub_10001F66C();
  sub_1000115F0();
  __chkstk_darwin(v3, v4);
  sub_1000138DC();
  v84 = v5;
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000115F0();
  __chkstk_darwin(v6, v7);
  v8 = sub_1000164E8();
  v82 = *(_QWORD *)(v8 - 8);
  v83 = v8;
  __chkstk_darwin(v8, v9);
  sub_1000138DC();
  v81 = v10;
  v12 = static os_log_type_t.info.getter(v11);
  sub_10001539C(v12, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Loading self identity from system keychain", 42);
  v13 = sub_1000150C0(&qword_100085580);
  inited = swift_initStackObject(v13, &v92);
  *(_OWORD *)(inited + 16) = xmmword_100065CB0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v15;
  sub_100024BB8();
  *(_QWORD *)(inited + 72) = v16;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  if (!kSecUseSystemKeychain)
    __break(1u);
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseSystemKeychain);
  *(_QWORD *)(inited + 88) = v17;
  *(_QWORD *)(inited + 120) = &type metadata for Bool;
  *(_BYTE *)(inited + 96) = 1;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
  *(_QWORD *)(inited + 136) = v18;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  sub_100024BC8();
  *(_QWORD *)(inited + 144) = 0xD000000000000017;
  *(_QWORD *)(inited + 152) = v19;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnAttributes);
  *(_QWORD *)(inited + 184) = v20;
  *(_QWORD *)(inited + 216) = &type metadata for Bool;
  *(_BYTE *)(inited + 192) = 1;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnData);
  *(_QWORD *)(inited + 232) = v21;
  *(_QWORD *)(inited + 264) = &type metadata for Bool;
  *(_BYTE *)(inited + 240) = 1;
  v22 = (id)kSecClassGenericPassword;
  v86 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
  sub_100011964();
  v91 = &type metadata for String;
  sub_100024BC8();
  *(_QWORD *)&v90 = 0xD000000000000017;
  *((_QWORD *)&v90 + 1) = v23;
  sub_100015920((uint64_t)&v90, v24, v25, v26);
  v89 = 0;
  sub_1000153B0();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_1000118F4();
  v28 = SecItemCopyMatching(isa, &v89);

  v29 = v89;
  if (v28)
  {
    sub_1000118F4();
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    v32 = v31;
    v33 = objc_allocWithZone((Class)NSError);
    sub_100015B10(v30, v32, v28);
    sub_100024CC8();
LABEL_19:
    swift_unknownObjectRelease(v29);
LABEL_20:
    sub_1000123A4();
    return;
  }
  if (!v89
    || (*(_QWORD *)&v90 = v89,
        swift_unknownObjectRetain(v89),
        v34 = sub_1000150C0(&qword_1000855A8),
        (sub_100015CB0((uint64_t)&v87, (uint64_t)&v90, (uint64_t)&type metadata for Swift.AnyObject + 8, v34) & 1) == 0))
  {
    v42 = v86;
LABEL_15:
    v41 = swift_bridgeObjectRelease(v42);
    goto LABEL_16;
  }
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  sub_10000E4D0(v35, v36, &v90);
  sub_100014518();
  if (!v91)
  {
    v43 = sub_1000118F4();
    sub_1000124E8(v43, &qword_100085588);
LABEL_14:
    v42 = v86;
    goto LABEL_15;
  }
  if ((sub_100015CB0((uint64_t)&v87, (uint64_t)&v90, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) == 0)
  {
    sub_1000118F4();
    goto LABEL_14;
  }
  v37 = v87;
  v38 = v88;
  UUID.init(uuidString:)(v87, v88);
  v39 = v83;
  sub_100016110(v1, 1, v83);
  if (v63)
  {
    sub_1000135D0();
    sub_1000118F4();
    v40 = sub_100014518();
    v41 = sub_100024D60(v40, (uint64_t *)&unk_100086150);
LABEL_16:
    v44 = v84;
LABEL_17:
    static RemotePairingError.pairingFailed.getter(v41);
    v46 = sub_100011608((unint64_t *)&unk_1000859D0, v45, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_1000156B8(v2, v46);
    sub_100011608((unint64_t *)&unk_1000853D0, v47, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_100024C88();
    Error<>.init(_:_:)(v44, v48, v49, v2);
    sub_100024D68();
LABEL_18:
    v29 = v89;
    goto LABEL_19;
  }
  v80 = v37;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 32))(v81, v1, v83);
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
  sub_10000E4D0(v50, v51, &v90);
  sub_100014518();
  if (!v91)
  {
    sub_100024BD4();
    v54 = sub_1000118F4();
    sub_1000124E8(v54, &qword_100085588);
LABEL_27:
    v44 = v84;
    sub_100024BC0(v81, *(uint64_t (**)(uint64_t, uint64_t))(v82 + 8));
    v41 = swift_bridgeObjectRelease(v86);
    goto LABEL_17;
  }
  if ((sub_100015CB0((uint64_t)&v87, (uint64_t)&v90, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data) & 1) == 0)
  {
    sub_100024BD4();
    sub_1000118F4();
    goto LABEL_27;
  }
  v52 = v87;
  v53 = v88;
  OPACKDecode(data:)(&v90, v87, v88);
  if (v0)
  {
    sub_100024BD4();
    sub_1000118F4();
    sub_100024C98(v52);
    sub_100024B9C();
    swift_bridgeObjectRelease(v86);
    goto LABEL_18;
  }
  if ((sub_100015CB0((uint64_t)&v87, (uint64_t)&v90, (uint64_t)&type metadata for Any + 8, v34) & 1) == 0)
  {
    sub_100024BD4();
    sub_1000118F4();
    sub_100024C98(v52);
    sub_100024B9C();
    goto LABEL_14;
  }
  v85 = v52;
  v55 = v87;
  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
  sub_10000E4D0(v56, v57, &v90);
  sub_100014518();
  v58 = sub_1000118F4();
  if (!v91)
  {
    sub_1000124E8(v58, &qword_100085588);
    goto LABEL_40;
  }
  if ((sub_100015CB0((uint64_t)&v87, (uint64_t)&v90, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) == 0)goto LABEL_40;
  if (kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate)
  {
    v60 = v87;
    v59 = v88;
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate);
    v63 = v60 == v61 && v59 == v62;
    if (v63)
    {
      sub_100015A54(v59);
      v39 = v83;
    }
    else
    {
      v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v59, v61, v62, 0);
      sub_10000E4C8();
      sub_1000118F4();
      v39 = v83;
      if ((v64 & 1) == 0)
        goto LABEL_40;
    }
    sub_100023DE0(v86);
LABEL_40:
    sub_1000118F4();
    v65 = objc_msgSend(objc_allocWithZone((Class)CUPairingIdentity), "init");
    v66.super.isa = UUID._bridgeToObjectiveC()().super.isa;
    sub_1000165EC(v65, "setIdentifier:");

    v67 = sub_100024DC0();
    sub_10001513C(v67, v68, v55, v69);
    if (v91)
    {
      if ((sub_100015CB0((uint64_t)&v87, (uint64_t)&v90, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data) & 1) != 0)
      {
        sub_100024B8C();
        sub_100016298();
        goto LABEL_45;
      }
    }
    else
    {
      sub_1000124E8(v70, &qword_100085588);
    }
    v66.super.isa = 0;
LABEL_45:
    sub_1000165EC(v65, "setAltIRK:");

    sub_100024DB4(27507, &v90);
    if (v91)
    {
      if ((sub_100015CB0((uint64_t)&v87, (uint64_t)&v90, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data) & 1) != 0)
      {
        sub_100024B8C();
        sub_100016298();
        goto LABEL_50;
      }
    }
    else
    {
      sub_1000124E8(v71, &qword_100085588);
    }
    v66.super.isa = 0;
LABEL_50:
    sub_1000165EC(v65, "setSecretKey:");

    sub_100024DB4(27504, &v90);
    v72 = sub_100016038();
    if (v91)
    {
      if ((sub_100015CB0((uint64_t)&v87, (uint64_t)&v90, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data) & 1) != 0)
      {
        sub_100024B8C();
        sub_100016298();
LABEL_55:
        sub_1000165EC(v65, "setPublicKey:");

        v74 = static os_log_type_t.info.getter(v73);
        v75 = qword_1000886E0;
        v76 = v74;
        if (os_log_type_enabled((os_log_t)qword_1000886E0, v74))
        {
          swift_bridgeObjectRetain(v38);
          v77 = (uint8_t *)sub_1000123C4(12);
          v78 = sub_1000123C4(32);
          *(_QWORD *)&v90 = v78;
          *(_DWORD *)v77 = 136315138;
          swift_bridgeObjectRetain(v38);
          sub_100010D40(v80, v38, (uint64_t *)&v90);
          v87 = v79;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v77 + 4);
          swift_bridgeObjectRelease_n(v38, 3);
          sub_1000118DC((void *)&_mh_execute_header, v75, v76, "Fetched existing system pairing identity (id=%s from keychain", v77);
          swift_arrayDestroy(v78, 1);
          sub_100012398(v78);
          sub_100012398((uint64_t)v77);
          sub_100015430(v85, v53);
          (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v83);
        }
        else
        {
          sub_100024C98(v85);
          sub_100024BD4();
          (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v39);
        }
        swift_unknownObjectRelease(v89);
        goto LABEL_20;
      }
    }
    else
    {
      sub_1000124E8(v72, &qword_100085588);
    }
    v66.super.isa = 0;
    goto LABEL_55;
  }
  __break(1u);
}

void sub_1000210F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_100013AC8();
  v4 = v3;
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000115F0();
  __chkstk_darwin(v5, v6);
  sub_100024CF0();
  v7 = sub_1000118FC();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  sub_100013A1C();
  v12 = v10 - v11;
  __chkstk_darwin(v13, v14);
  sub_100024CD0();
  sub_100024EB4();
  if (!v0)
  {
    v15 = objc_msgSend(v4, "identifier");
    if (v15)
    {
      v16 = v15;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
      v17(v2, v12, v7);
      sub_100024BF8();
      sub_100015664(v18, v19, v20, v7);
      sub_100016110(v2, 1, v7);
      if (!v21)
      {
        v22 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v17)(v1, v2, v7);
        v23 = static os_log_type_t.debug.getter(v22);
        v42 = qword_1000886E0;
        v24 = sub_1000150C0(&qword_100085570);
        v25 = sub_1000153A4(v24);
        *(_OWORD *)(v25 + 16) = xmmword_100065C90;
        v26 = sub_100024DA0();
        v28 = v27;
        *(_QWORD *)(v25 + 56) = &type metadata for String;
        *(_QWORD *)(v25 + 64) = sub_100016354();
        *(_QWORD *)(v25 + 32) = v26;
        *(_QWORD *)(v25 + 40) = v28;
        sub_100024DF8(v23, (uint64_t)&_mh_execute_header, v42, (uint64_t)"Trying to fetch peer with ID %{public}@", 39);
        sub_100016038();
        sub_1000145B0();
        v40 = sub_100024BC0(v1, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
LABEL_10:
        v41 = static os_log_type_t.debug.getter(v40);
        sub_10001539C(v41, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Found paired peer matching query", 32);
        goto LABEL_7;
      }
    }
    else
    {
      sub_100024C04();
      sub_100015664(v29, v30, v31, v7);
    }
    v32 = sub_100015670(v2, (uint64_t *)&unk_100086150);
    v33 = static os_log_type_t.debug.getter(v32);
    sub_10001539C(v33, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Trying to find peer based on public key", 39);
    sub_100013C20();
    v35 = sub_1000213B8(v34, v4);
    v40 = sub_100014518();
    if (v35)
      goto LABEL_10;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    v38 = v37;
    v39 = objc_allocWithZone((Class)NSError);
    sub_100015B10(v36, v38, -25300);
    sub_100024CC8();
  }
LABEL_7:
  sub_1000123A4();
}

void *sub_1000213B8(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v16 = v2;
    v17 = v2 & 0xC000000000000001;
    for (i = 4; ; ++i)
    {
      v5 = v17 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v2) : *(id *)(v2 + 8 * i);
      v6 = v5;
      v7 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v8 = sub_100024914(v5, (SEL *)&selRef_publicKey);
      v10 = v9;
      v12 = sub_100024914(a2, (SEL *)&selRef_publicKey);
      v13 = v11;
      if (v10 >> 60 == 15)
      {
        if (v11 >> 60 == 15)
        {

          swift_bridgeObjectRelease(v2);
          return v6;
        }
      }
      else if (v11 >> 60 != 15)
      {
        __asm { BR              X8 }
      }
      sub_100013AB4(v8, v10);
      sub_100013AB4(v12, v13);

      v2 = v16;
      if (v7 == v3)
      {

        swift_bridgeObjectRelease(v16);
        return 0;
      }
    }
    __break(1u);
LABEL_16:
    if (v2 < 0)
      v14 = v2;
    else
      v14 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
  }

  swift_bridgeObjectRelease(v2);
  return 0;
}

void *sub_100021C64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v10; v10 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v11 = 4;
    while (1)
    {
      v12 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a1)
          : *(id *)(a1 + 8 * v11);
      v13 = v12;
      v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      if ((CUPairedPeer.verify(authTag:data:type:)(a2, a3, a4, a5, a6) & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        sub_100015430(a2, a3);
        goto LABEL_18;
      }

      ++v11;
      if (v14 == v10)
        goto LABEL_17;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_17:
  swift_bridgeObjectRelease(a1);
  sub_100015430(a2, a3);
  v13 = 0;
LABEL_18:
  sub_100015430(a4, a5);
  return v13;
}

void sub_100021DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t inited;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  Class isa;
  const __CFDictionary *v91;
  CFDictionaryRef v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t *);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __CFString *v114;
  id v115;
  void *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  unint64_t v124;
  id v125;
  void *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t (*v133)(uint64_t, _QWORD);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *);
  uint64_t v140;
  __CFString *v141;
  uint64_t v142;
  uint64_t v143;
  __CFString *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[2];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _OWORD v168[3];

  sub_100013AC8();
  v156 = v8;
  v154 = sub_10001F66C();
  sub_1000115F0();
  __chkstk_darwin(v9, v10);
  sub_10000E4A4();
  sub_1000150C0(&qword_100085590);
  sub_1000115F0();
  __chkstk_darwin(v11, v12);
  sub_100024CF0();
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000115F0();
  __chkstk_darwin(v13, v14);
  sub_1000164E8();
  sub_100024E30();
  __chkstk_darwin(v15, v16);
  sub_100013A1C();
  v19 = v17 - v18;
  __chkstk_darwin(v20, v21);
  sub_100024CD0();
  sub_100016390();
  if (v1)
    goto LABEL_10;
  v152 = v2;
  v149 = v0;
  v151 = v4;
  v22 = objc_msgSend(v156, "identifier");
  if (!v22)
  {
    sub_100024C04();
    v28 = sub_100015664(v33, v34, v35, v6);
    goto LABEL_7;
  }
  v23 = v22;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v24(v7, v19, v6);
  sub_100024BF8();
  sub_100015664(v25, v26, v27, v6);
  v28 = sub_100016110(v7, 1, v6);
  if (v29)
  {
LABEL_7:
    v32 = sub_100024D60(v28, (uint64_t *)&unk_100086150);
    goto LABEL_8;
  }
  v24(v4, v7, v6);
  v30 = sub_100024914(v156, (SEL *)&selRef_altIRK);
  if (v31 >> 60 == 15)
  {
    v32 = sub_100016224();
LABEL_8:
    v36 = v3;
LABEL_9:
    static RemotePairingError.pairingFailed.getter(v32);
    v38 = sub_100011608((unint64_t *)&unk_1000859D0, v37, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_1000156B8(v154, v38);
    sub_100011608((unint64_t *)&unk_1000853D0, v39, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_100024C88();
    sub_100014478(v36, v40, v41);
    sub_100015DD4();
LABEL_10:
    sub_1000123A4();
    return;
  }
  v42 = v30;
  v43 = v31;
  v44 = sub_100024914(v156, (SEL *)&selRef_publicKey);
  v148 = v45;
  if (v45 >> 60 == 15)
  {
    sub_100016224();
    v32 = sub_100024D20(v42);
    goto LABEL_8;
  }
  v147 = v44;
  v46 = sub_100039348(v156);
  if (v47)
  {
    *((_QWORD *)&v165 + 1) = &type metadata for String;
    *(_QWORD *)&v164 = v46;
    *((_QWORD *)&v164 + 1) = v47;
    sub_100015FB0(&v164, &v166);
  }
  else
  {
    v48 = v42;
    sub_1000392E4(v156);
    if (v49)
    {
      v50 = v49;
      v163[0] = 1701667182;
      v163[1] = 0xE400000000000000;
      AnyHashable.init<A>(_:)(v163, &type metadata for String, &protocol witness table for String);
      sub_100041C2C(v50, &v166);
      sub_100024B18((uint64_t)&v164);
      sub_1000118F4();
    }
    else
    {
      v166 = 0u;
      v167 = 0u;
    }
    v42 = v48;
  }
  v36 = v3;
  if (!*((_QWORD *)&v167 + 1))
  {
    sub_100016224();
    sub_100024D20(v42);
    sub_100013AB4(v147, v148);
    v32 = sub_100015670((uint64_t)&v166, &qword_100085588);
    goto LABEL_9;
  }
  v51 = sub_100015FB0(&v166, v168);
  Date.init()(v51);
  sub_100016490();
  sub_100024BF8();
  sub_100015664(v52, v53, v54, v55);
  v56 = v42;
  sub_10005AC60(v5);
  v153 = sub_1000150C0(&qword_100085580);
  inited = swift_initStackObject(v153, &v162);
  *(_OWORD *)(inited + 16) = xmmword_100065CC0;
  *(_QWORD *)(inited + 32) = 0x4B5249746C61;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 48) = v56;
  *(_QWORD *)(inited + 56) = v43;
  *(_QWORD *)(inited + 72) = &type metadata for Data;
  *(_QWORD *)(inited + 80) = 27504;
  *(_QWORD *)(inited + 120) = &type metadata for Data;
  *(_QWORD *)(inited + 88) = 0xE200000000000000;
  *(_QWORD *)(inited + 96) = v147;
  *(_QWORD *)(inited + 104) = v148;
  v155 = v56;
  v58 = sub_100024D4C();
  sub_10001E814(v58, v59);
  sub_10001E814(v147, v148);
  *(_QWORD *)&v166 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v60 = sub_1000248AC(v156);
  if (v60)
  {
    v61 = v60;
    *((_QWORD *)&v165 + 1) = sub_1000150C0(&qword_1000855B0);
    *(_QWORD *)&v164 = v61;
  }
  else
  {
    v164 = 0u;
    v165 = 0u;
  }
  sub_100015BEC((uint64_t)&v164, 7103329, 0xE300000000000000);
  v62 = sub_100039354(v156);
  if (v63)
  {
    *((_QWORD *)&v165 + 1) = &type metadata for String;
    *(_QWORD *)&v164 = v62;
    *((_QWORD *)&v164 + 1) = v63;
  }
  else
  {
    v164 = 0u;
    v165 = 0u;
  }
  sub_100015BEC((uint64_t)&v164, 0x6C65646F6DLL, 0xE500000000000000);
  sub_1000392E4(v156);
  if (v64)
  {
    v65 = v64;
    *((_QWORD *)&v165 + 1) = sub_1000150C0(&qword_1000855B0);
    *(_QWORD *)&v164 = v65;
  }
  else
  {
    v164 = 0u;
    v165 = 0u;
  }
  sub_100015BEC((uint64_t)&v164, 1868983913, 0xE400000000000000);
  v66 = v166;
  *((_QWORD *)&v165 + 1) = sub_1000150C0(&qword_1000855A8);
  *(_QWORD *)&v164 = v66;
  sub_1000153B0();
  v157 = OPACKEncoderCreateData(from:)(&v164);
  v150 = v67;
  v145 = v43;
  sub_100010DFC(&v164);
  v68 = swift_initStackObject(v153, &v161);
  *(_OWORD *)(v68 + 16) = xmmword_100065CD0;
  *(_QWORD *)(v68 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(v68 + 40) = v69;
  sub_100024BB8();
  v146 = v70;
  *(_QWORD *)(v68 + 72) = v70;
  *(_QWORD *)(v68 + 48) = kSecClassGenericPassword;
  *(_QWORD *)(v68 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(_QWORD *)(v68 + 88) = v71;
  v144 = (id)kSecClassGenericPassword;
  v72 = ((uint64_t (*)(void))UUID.uuidString.getter)();
  *(_QWORD *)(v68 + 120) = &type metadata for String;
  *(_QWORD *)(v68 + 96) = v72;
  *(_QWORD *)(v68 + 104) = v73;
  if (kSecUseSystemKeychain)
  {
    v140 = kSecUseSystemKeychain;
    *(_QWORD *)(v68 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseSystemKeychain);
    *(_QWORD *)(v68 + 136) = v74;
    *(_QWORD *)(v68 + 168) = &type metadata for Bool;
    *(_BYTE *)(v68 + 144) = 1;
    *(_QWORD *)(v68 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
    *(_QWORD *)(v68 + 184) = v75;
    *(_QWORD *)(v68 + 216) = &type metadata for String;
    *(_QWORD *)(v68 + 192) = 0xD00000000000001ALL;
    *(_QWORD *)(v68 + 200) = 0x800000010006A850;
    v163[0] = Dictionary.init(dictionaryLiteral:)(v68, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
    sub_100011964();
    *((_QWORD *)&v165 + 1) = &type metadata for String;
    sub_100024BC8();
    v142 = v76;
    v143 = v77;
    *(_QWORD *)&v164 = v77;
    *((_QWORD *)&v164 + 1) = v76;
    sub_100015920((uint64_t)&v164, v78, v79, v80);
    v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
    v83 = v82;
    *((_QWORD *)&v165 + 1) = v146;
    *(_QWORD *)&v164 = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    v141 = (id)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    sub_100015BEC((uint64_t)&v164, v81, v83);
    v84 = swift_initStackObject(v153, &v160);
    *(_OWORD *)(v84 + 16) = xmmword_100065CE0;
    *(_QWORD *)(v84 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrDescription);
    *(_QWORD *)(v84 + 40) = v85;
    *(_QWORD *)(v84 + 72) = &type metadata for String;
    *(_QWORD *)(v84 + 48) = 0xD00000000000001ALL;
    *(_QWORD *)(v84 + 56) = 0x800000010006A850;
    *(_QWORD *)(v84 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrLabel);
    *(_QWORD *)(v84 + 88) = v86;
    sub_100015100((uint64_t)v168, v84 + 96);
    *(_QWORD *)(v84 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
    *(_QWORD *)(v84 + 136) = v87;
    *(_QWORD *)(v84 + 168) = &type metadata for Data;
    *(_QWORD *)(v84 + 144) = v157;
    *(_QWORD *)(v84 + 152) = v150;
    sub_100015614(v157, v150);
    v88 = Dictionary.init(dictionaryLiteral:)(v84, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v89 = v163[0];
    swift_bridgeObjectRetain(v163[0]);
    sub_100012488();
    sub_100016038();
    isa = sub_100012488().super.isa;
    sub_1000118F4();
    v91 = (const __CFDictionary *)sub_100024D4C();
    SecItemUpdate(v91, v92);
    sub_100024D70();

    if (v88 == -25300)
    {
      v98 = swift_allocObject(v153, 368, 7);
      *(_OWORD *)(v98 + 16) = xmmword_100065CA0;
      *(_QWORD *)(v98 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
      *(_QWORD *)(v98 + 40) = v99;
      *(_QWORD *)(v98 + 72) = v146;
      *(_QWORD *)(v98 + 48) = v144;
      *(_QWORD *)(v98 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
      *(_QWORD *)(v98 + 88) = v100;
      v101 = UUID.uuidString.getter(v144);
      *(_QWORD *)(v98 + 120) = &type metadata for String;
      *(_QWORD *)(v98 + 96) = v101;
      *(_QWORD *)(v98 + 104) = v102;
      sub_100016038();
      swift_bridgeObjectRelease(v166);
      *(_QWORD *)(v98 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
      *(_QWORD *)(v98 + 136) = v103;
      *(_QWORD *)(v98 + 168) = &type metadata for Bool;
      *(_BYTE *)(v98 + 144) = 1;
      *(_QWORD *)(v98 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrDescription);
      *(_QWORD *)(v98 + 184) = v104;
      *(_QWORD *)(v98 + 216) = &type metadata for String;
      *(_QWORD *)(v98 + 192) = 0xD00000000000001ALL;
      *(_QWORD *)(v98 + 200) = 0x800000010006A850;
      *(_QWORD *)(v98 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrLabel);
      *(_QWORD *)(v98 + 232) = v105;
      sub_100015100((uint64_t)v168, v98 + 240);
      *(_QWORD *)(v98 + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
      *(_QWORD *)(v98 + 280) = v106;
      *(_QWORD *)(v98 + 312) = &type metadata for String;
      *(_QWORD *)(v98 + 288) = 0xD00000000000001ALL;
      *(_QWORD *)(v98 + 296) = 0x800000010006A850;
      *(_QWORD *)(v98 + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
      *(_QWORD *)(v98 + 328) = v107;
      *(_QWORD *)(v98 + 360) = &type metadata for Data;
      *(_QWORD *)(v98 + 336) = v157;
      *(_QWORD *)(v98 + 344) = v150;
      sub_100015614(v157, v150);
      v159 = Dictionary.init(dictionaryLiteral:)(v98, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
      sub_100011964();
      *((_QWORD *)&v165 + 1) = &type metadata for String;
      *(_QWORD *)&v164 = v143;
      *((_QWORD *)&v164 + 1) = v142;
      sub_100015920((uint64_t)&v164, v108, v109, v110);
      v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
      v113 = v112;
      *((_QWORD *)&v165 + 1) = v146;
      *(_QWORD *)&v164 = v141;
      v114 = v141;
      sub_100015BEC((uint64_t)&v164, v111, v113);
      Dictionary._bridgeToObjectiveC()();
      sub_1000118F4();
      sub_100024D40();
      sub_100024D70();
      if (!(_DWORD)v159)
      {
        sub_1000156AC(v149 + 16, (uint64_t)&v164);
        v135 = *(_QWORD *)(v149 + 16);
        v136 = *(_QWORD *)(v135 + 16);
        if (v136)
        {
          sub_100015868();
          v137 = v135 + 40;
          v138 = v151;
          do
          {
            v139 = *(void (**)(char *))(v137 - 8);
            v158 = 0;
            sub_10000E49C();
            v139(&v158);
            sub_1000118D4();
            v137 += 16;
            --v136;
          }
          while (v136);
        }
        else
        {
          sub_100015868();
          v138 = v151;
        }
        sub_100024E84();
        sub_100024C1C();
        sub_100010DFC(v168);
        v133 = *(uint64_t (**)(uint64_t, _QWORD))(v152 + 8);
        v134 = v138;
        goto LABEL_49;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      sub_100015DC4();
      v115 = objc_allocWithZone((Class)NSError);
      sub_100015768();
      v117 = v116;
      v118 = static os_log_type_t.error.getter(v116);
      v119 = qword_1000886E0;
      v120 = sub_1000150C0(&qword_100085570);
      v121 = sub_1000153A4(v120);
      *(_OWORD *)(v121 + 16) = xmmword_100065C90;
      v122 = objc_msgSend(v117, "description");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
      sub_100024DE0();

      *(_QWORD *)(v121 + 56) = &type metadata for String;
      *(_QWORD *)(v121 + 64) = sub_100016354();
      *(_QWORD *)(v121 + 32) = v163;
      *(_QWORD *)(v121 + 40) = (char *)&type metadata for Any + 8;
      sub_100024C10(v118, (uint64_t)&_mh_execute_header, v119, (uint64_t)"Failed to save new pairing record to system keychain: %{public}@", 64);
      sub_10000E4C8();
      sub_100024D68();
      v123 = v157;
      v124 = v150;
    }
    else
    {
      if (!v88)
      {
        swift_bridgeObjectRelease(v89);
        sub_100024D28();
        sub_1000156AC(v149 + 16, (uint64_t)&v164);
        v93 = *(_QWORD *)(v149 + 16);
        v94 = *(_QWORD *)(v93 + 16);
        if (v94)
        {
          sub_100015868();
          v95 = v93 + 40;
          v96 = v151;
          do
          {
            v97 = *(void (**)(uint64_t *))(v95 - 8);
            LOBYTE(v159) = 2;
            sub_10000E49C();
            v97(&v159);
            sub_1000118D4();
            v95 += 16;
            --v94;
          }
          while (v94);
        }
        else
        {
          sub_100015868();
          v96 = v151;
        }
        sub_100024E84();
        sub_100024C1C();
        sub_100010DFC(v168);
        v133 = *(uint64_t (**)(uint64_t, _QWORD))(v152 + 8);
        v134 = v96;
LABEL_49:
        sub_100024E5C(v134, v133);
        goto LABEL_10;
      }
      swift_bridgeObjectRelease(v89);
      sub_100024D28();
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      sub_100015DC4();
      v125 = objc_allocWithZone((Class)NSError);
      sub_100015768();
      v127 = v126;
      v128 = static os_log_type_t.error.getter(v126);
      v129 = qword_1000886E0;
      v130 = sub_1000150C0(&qword_100085570);
      v131 = sub_1000153A4(v130);
      *(_OWORD *)(v131 + 16) = xmmword_100065C90;
      v132 = objc_msgSend(v127, "description");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
      sub_100024DE0();

      *(_QWORD *)(v131 + 56) = &type metadata for String;
      *(_QWORD *)(v131 + 64) = sub_100016354();
      *(_QWORD *)(v131 + 32) = &type metadata for String;
      *(_QWORD *)(v131 + 40) = v89;
      sub_100024C10(v128, (uint64_t)&_mh_execute_header, v129, (uint64_t)"Failed to update pairing record to system keychain: %{public}@", 62);
      sub_10000E4C8();
      sub_100024D68();
      v123 = v157;
      v124 = v150;
    }
    sub_100015430(v123, v124);
    sub_100013AB4(v147, v148);
    sub_100013AB4(v155, v145);
    sub_100010DFC(v168);
    sub_100024E5C(v151, *(uint64_t (**)(uint64_t, _QWORD))(v152 + 8));
    goto LABEL_10;
  }
  __break(1u);
}

void sub_100022A98(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t v4;

  sub_100015614(a1, a2);
  sub_100011948();
  sub_10001F748(v4, a1, a2, a3, a4);
}

uint64_t sub_100022AEC(void *a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v6;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = (uint64_t)a1;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v12 = 0;
    v13 = 1;
  }
  else
  {
    v9 = a1;
    v10 = CUPairingIdentity.authTag(for:type:)(a3, a4, 1);
    v12 = v11;
    sub_100024E78();
    v13 = 0;
    v6 = v10;
  }
  a5(v6, v12, v13);
  return sub_10000EBB8(v6, v12, v13);
}

void sub_100022BBC()
{
  uint64_t v0;
  unint64_t v1;

  sub_100013C20();
  if (!v0)
  {
    if (v1 >> 62)
    {
      sub_1000153B0();
      sub_100024E64();
      sub_1000118F4();
    }
    sub_1000118F4();
  }
  sub_100024EA8();
}

uint64_t sub_100022C20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v5 = sub_1000138D4((uint64_t)&unk_10007AFF8, 32);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  swift_beginAccess(v2 + 16, v10, 33, 0);
  swift_retain(a2);
  sub_100048F38();
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
  sub_100049070();
  v7 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v7 + 16) = v6 + 1;
  v8 = v7 + 16 * v6;
  *(_QWORD *)(v8 + 32) = sub_100024AF4;
  *(_QWORD *)(v8 + 40) = v5;
  return swift_endAccess(v10);
}

void sub_100022CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const __CFDictionary *isa;
  OSStatus v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  sub_100013AC8();
  v3 = v0;
  v5 = v4;
  v6 = sub_10001F66C();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  sub_10001547C();
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000115F0();
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024EB4();
  if (v1)
    goto LABEL_16;
  v57 = v2;
  v58 = v7;
  v64 = v6;
  v13 = sub_1000118FC();
  HIDWORD(v56) = sub_100015658(v5, 1, v13);
  v14 = sub_1000150C0(&qword_100085580);
  inited = swift_initStackObject(v14, &v62);
  *(_OWORD *)(inited + 16) = xmmword_100065CE0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v16;
  sub_100024BB8();
  *(_QWORD *)(inited + 72) = v17;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  if (kSecUseSystemKeychain)
  {
    *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseSystemKeychain);
    *(_QWORD *)(inited + 88) = v18;
    *(_QWORD *)(inited + 120) = &type metadata for Bool;
    *(_BYTE *)(inited + 96) = 1;
    *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
    *(_QWORD *)(inited + 136) = v19;
    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 144) = 0xD00000000000001ALL;
    *(_QWORD *)(inited + 152) = 0x800000010006A850;
    v20 = (id)kSecClassGenericPassword;
    v63 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
    v23 = v22;
    sub_100024A88(v5, (uint64_t)v12);
    v24 = sub_100016110((uint64_t)v12, 1, v13);
    if (v25)
    {
      sub_100015670((uint64_t)v12, (uint64_t *)&unk_100086150);
      v60 = 0u;
      v61 = 0u;
    }
    else
    {
      v26 = UUID.uuidString.getter(v24);
      *((_QWORD *)&v61 + 1) = &type metadata for String;
      *(_QWORD *)&v60 = v26;
      *((_QWORD *)&v60 + 1) = v27;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    }
    v28 = v58;
    v29 = v57;
    sub_100015BEC((uint64_t)&v60, v21, v23);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
    sub_100011964();
    *((_QWORD *)&v61 + 1) = &type metadata for String;
    sub_100024BC8();
    *(_QWORD *)&v60 = 0xD000000000000017;
    *((_QWORD *)&v60 + 1) = v30;
    sub_100015920((uint64_t)&v60, v31, v32, v33);
    v34 = v63;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v34);
    v36 = SecItemDelete(isa);

    if (!v36)
      goto LABEL_9;
    if (v36 == -25300)
    {
      if (HIDWORD(v56) == 1)
      {
LABEL_9:
        sub_1000156AC(v3 + 16, (uint64_t)&v60);
        v37 = *(_QWORD *)(v3 + 16);
        v38 = *(_QWORD *)(v37 + 16);
        if (v38)
        {
          swift_bridgeObjectRetain(*(_QWORD *)(v3 + 16));
          v39 = v37 + 40;
          do
          {
            v40 = *(void (**)(char *))(v39 - 8);
            v59 = 1;
            sub_10000E49C();
            v40(&v59);
            sub_1000118D4();
            v39 += 16;
            --v38;
          }
          while (v38);
          swift_bridgeObjectRelease(v37);
        }
        goto LABEL_16;
      }
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      v50 = v49;
      v51 = objc_allocWithZone((Class)NSError);
      sub_100015B10(v48, v50, -25300);
      v46 = v52;
      static RemotePairingError.pairingRecordNotFound.getter();
    }
    else
    {
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      v43 = v42;
      v44 = objc_allocWithZone((Class)NSError);
      sub_100015B10(v41, v43, v36);
      v46 = v45;
      static RemotePairingError.pairingRecordRemovalFailed.getter();
    }
    v53 = sub_100011608((unint64_t *)&unk_1000859D0, v47, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_1000156B8(v64, v53);
    sub_100011608((unint64_t *)&unk_1000853D0, v54, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v55 = v46;
    _Error.wrapping(_:)(v46);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v64);
    sub_100015DD4();

LABEL_16:
    sub_1000123A4();
    return;
  }
  __break(1u);
}

void sub_100023158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject **v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  uint64_t v51;
  id v52;
  NSObject **v53;
  id v54;
  void *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  id v65;
  uint64_t v66;
  int v67;
  NSObject *v68;
  uint64_t v69;
  id v70;
  uint8_t *v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  int v85;
  NSObject *v86;
  uint64_t v87;
  _BOOL4 v88;
  id v89;
  uint64_t v90;
  id v91;
  uint64_t (**v92)(uint64_t, uint64_t, uint64_t);
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (**v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (**v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  os_log_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t (**v142)(uint64_t, uint64_t, uint64_t);
  char *v143;
  __int128 v144;
  uint64_t *v145;
  uint64_t v146;
  id v147;
  os_log_t v148;
  uint64_t v149;
  char *v150;
  NSObject *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t (**v167)(uint64_t, uint64_t, uint64_t);
  NSObject **v168;
  uint64_t v169;
  char *v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  os_log_t v175;

  sub_1000150C0(&qword_100085590);
  sub_1000115F0();
  __chkstk_darwin(v3, v4);
  sub_1000156C4();
  v165 = v5;
  sub_100024B80();
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v140 - v8;
  v10 = sub_100016490();
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  sub_1000156C4();
  v159 = v13;
  sub_100024B80();
  __chkstk_darwin(v14, v15);
  sub_100024E90();
  v164 = v16;
  sub_100024B80();
  __chkstk_darwin(v17, v18);
  sub_100024CD0();
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000115F0();
  __chkstk_darwin(v19, v20);
  sub_1000156C4();
  v158 = v21;
  sub_100024B80();
  __chkstk_darwin(v22, v23);
  sub_100024E90();
  v157 = v24;
  sub_100024B80();
  v27 = __chkstk_darwin(v25, v26);
  v29 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((char *)&v140 - v28);
  __chkstk_darwin(v27, v30);
  sub_100024E90();
  v154 = v31;
  sub_100024B80();
  __chkstk_darwin(v32, v33);
  sub_100024E90();
  v153 = v34;
  sub_100024B80();
  __chkstk_darwin(v35, v36);
  v38 = (char *)&v140 - v37;
  v172 = sub_1000118FC();
  v167 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v172 - 8);
  __chkstk_darwin(v172, v39);
  sub_1000156C4();
  v168 = (NSObject **)v40;
  sub_100024B80();
  __chkstk_darwin(v41, v42);
  v170 = (char *)&v140 - v43;
  v44 = sub_100024EB4();
  v45 = v1;
  if (v1)
    return;
  v46 = static os_log_type_t.default.getter(v44);
  v47 = (NSObject **)&unk_100088000;
  sub_10001539C(v46, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Removing expired pairing records", 32);
  sub_100013C20();
  v50 = v48;
  v155 = v0;
  v156 = v2;
  v163 = v48;
  if (!(v48 >> 62))
  {
    v51 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v51)
      goto LABEL_4;
LABEL_37:
    v136 = v50;
LABEL_41:
    swift_bridgeObjectRelease(v136);
    return;
  }
LABEL_44:
  swift_bridgeObjectRetain(v50);
  v51 = sub_100024E64();
  swift_bridgeObjectRelease(v163);
  v50 = v163;
  if (!v51)
    goto LABEL_37;
LABEL_4:
  v150 = (char *)v11;
  v162 = v50 & 0xC000000000000001;
  v145 = &v174;
  v11 = 4;
  *(_QWORD *)&v49 = 136315138;
  v144 = v49;
  v143 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v49 = 136315394;
  v140 = v49;
  v146 = v10;
  v152 = v9;
  v142 = (char *)v29;
  v29 = v167;
  v160 = v51;
  v161 = v38;
  while (1)
  {
    if (v162)
      v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v50);
    else
      v52 = *(id *)(v50 + 8 * v11);
    if (__OFADD__(v11 - 4, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    v169 = v11 - 3;
    v53 = v47;
    v171 = v52;
    v54 = objc_msgSend(v52, "identifier");
    if (!v54)
      break;
    v55 = v54;
    v56 = (uint64_t)v168;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v54);

    v57 = (void (*)(char *, uint64_t, uint64_t))v29[4];
    v58 = (uint64_t)v161;
    v59 = v56;
    v60 = v172;
    v57(v161, v59, v172);
    sub_100024BF8();
    sub_100015664(v61, v62, v63, v60);
    sub_100016110(v58, 1, v60);
    if (v64)
      goto LABEL_47;
    v57(v170, v58, v60);
    v65 = v171;
    sub_10005AD60((uint64_t)v9);
    sub_100016110((uint64_t)v9, 1, v10);
    v47 = v53;
    if (v64)
    {
      v66 = sub_100015670((uint64_t)v9, &qword_100085590);
      v67 = static os_log_type_t.default.getter(v66);
      v68 = v53[220];
      v69 = sub_100024E44((os_log_type_t)v67);
      if ((_DWORD)v69)
      {
        v151 = v68;
        v166 = v45;
        v70 = v65;
        v71 = (uint8_t *)sub_1000123C4(12);
        v148 = (os_log_t)sub_1000123C4(32);
        v175 = v148;
        *(_DWORD *)v71 = v144;
        v147 = v70;
        v72 = objc_msgSend(v70, "identifier");
        LODWORD(v149) = v67;
        if (v72)
        {
          v73 = v72;
          v74 = v158;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v72);

          v75 = 0;
        }
        else
        {
          v75 = 1;
          v74 = v158;
        }
        sub_100015FC8(v74, v75, 1);
        v98 = v74;
        v99 = v157;
        sub_100024A40(v98, v157);
        if (sub_1000155AC(v99))
        {
          sub_100015670(v99, (uint64_t *)&unk_100086150);
          v100 = 0;
          v101 = 0;
        }
        else
        {
          v102 = v167;
          v47 = v168;
          sub_100024CC0((uint64_t)v168, v99, v167[2]);
          v103 = sub_100015670(v99, (uint64_t *)&unk_100086150);
          v100 = UUID.uuidString.getter(v103);
          v101 = v104;
          sub_100024C60((uint64_t (*)(uint64_t, uint64_t))v102[1]);
        }
        v173 = v100;
        v174 = v101;
        v105 = sub_1000150C0(&qword_100085598);
        v106 = sub_100024E04(v105);
        sub_10001446C(v106, v107);
        v173 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, v145, v71 + 4);
        v109 = v147;

        sub_1000118F4();
        sub_1000118DC((void *)&_mh_execute_header, v151, (os_log_type_t)v149, "Found old peer %s without last used date set. Setting last used date to now.", v71);
        v110 = v148;
        swift_arrayDestroy(v148, 1);
        sub_100012398((uint64_t)v110);
        v69 = sub_100012398((uint64_t)v71);
        v10 = v146;
        v45 = v166;
        v29 = v167;
        v65 = v171;
      }
      v111 = v165;
      Date.init()(v69);
      sub_100024BF8();
      sub_100015664(v112, v113, v114, v10);
      sub_10005AC60(v111);
      sub_100021DC8();
      v115 = v65;
      v38 = v170;
      if (v45)
      {

LABEL_40:
        sub_100024C50();
        v136 = v163;
        goto LABEL_41;
      }
      sub_100024C50();

      v9 = v152;
    }
    else
    {
      v166 = v45;
      v76 = v156;
      v38 = v150;
      v77 = (*((uint64_t (**)(uint64_t, char *, uint64_t))v150 + 4))(v156, v9, v10);
      v78 = v164;
      Date.init()(v77);
      v79 = Date.distance(to:)(v78);
      v80 = v78;
      v81 = *((_QWORD *)v38 + 1);
      ((void (*)(uint64_t, uint64_t))v81)(v80, v10);
      sub_100024A04();
      sub_10005ADB4();
      if (v83 >= v79)
      {
        sub_100024D98();
        ((void (*)(uint64_t, uint64_t))v81)(v76, v10);
        v96 = (char *)v167;
        ((void (*)(char *, uint64_t))v167[1])(v170, v172);
        v29 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v96;
        v45 = v166;
      }
      else
      {
        v149 = v11;
        v84 = v10;
        v85 = static os_log_type_t.default.getter(v82);
        v86 = v53[220];
        v87 = v159;
        (*((void (**)(uint64_t, uint64_t, uint64_t))v38 + 2))(v159, v76, v84);
        LODWORD(v147) = v85;
        v148 = v86;
        v88 = os_log_type_enabled(v86, (os_log_type_t)v85);
        v151 = v81;
        if (v88)
        {
          v89 = v171;
          v90 = sub_1000123C4(22);
          v141 = sub_1000123C4(64);
          v175 = (os_log_t)v141;
          *(_DWORD *)v90 = v140;
          v91 = objc_msgSend(v89, "identifier");
          v92 = v167;
          if (v91)
          {
            v93 = v91;
            v94 = v154;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v91);

            v95 = 0;
          }
          else
          {
            v95 = 1;
            v94 = v154;
          }
          v47 = (NSObject **)&unk_100088000;
          v11 = v149;
          sub_100015FC8(v94, v95, 1);
          v116 = v153;
          sub_100024A40(v94, v153);
          if (sub_1000155AC(v116))
          {
            sub_100015670(v116, (uint64_t *)&unk_100086150);
            v117 = 0;
            v118 = 0;
          }
          else
          {
            v47 = v168;
            sub_100024CC0((uint64_t)v168, v116, v92[2]);
            v119 = sub_100015670(v116, (uint64_t *)&unk_100086150);
            v117 = UUID.uuidString.getter(v119);
            v118 = v120;
            sub_100024C60((uint64_t (*)(uint64_t, uint64_t))v92[1]);
          }
          v173 = v117;
          v174 = v118;
          v121 = sub_1000150C0(&qword_100085598);
          v122 = sub_100024E04(v121);
          sub_10001446C(v122, v123);
          v173 = v124;
          v125 = v145;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, v145, v90 + 4);

          sub_1000118F4();
          *(_WORD *)(v90 + 12) = 2080;
          v126 = sub_10000EC00(&qword_1000855A0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v127 = v159;
          v128 = v146;
          v129 = dispatch thunk of CustomStringConvertible.description.getter(v146, v126);
          sub_10001446C(v129, v130);
          v173 = v131;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, v125, v90 + 14);
          sub_1000118F4();
          ((void (*)(uint64_t, uint64_t))v151)(v127, v128);
          _os_log_impl((void *)&_mh_execute_header, v148, (os_log_type_t)v147, "Found expired peer %s with last used date %s. Removing.", (uint8_t *)v90, 0x16u);
          v132 = v141;
          swift_arrayDestroy(v141, 2);
          sub_100012398(v132);
          v133 = v90;
          v10 = v128;
          sub_100012398(v133);
          v9 = v152;
          v97 = (uint64_t)v142;
          v29 = v167;
        }
        else
        {
          ((void (*)(uint64_t, uint64_t))v81)(v87, v84);
          v97 = (uint64_t)v142;
          v29 = v167;
          v47 = (NSObject **)&unk_100088000;
          v10 = v84;
          v11 = v149;
        }
        v38 = v170;
        v134 = v172;
        v29[2](v97, (uint64_t)v170, v172);
        sub_100024C78(v97);
        v135 = v166;
        sub_100022CCC();
        if (v135)
        {
          sub_100024D98();
          sub_100015670(v97, (uint64_t *)&unk_100086150);
          sub_100024BE4();
          goto LABEL_40;
        }
        sub_100024D98();
        sub_100015670(v97, (uint64_t *)&unk_100086150);
        sub_100024BE4();
        ((void (*)(char *, uint64_t))v29[1])(v38, v134);
        v45 = 0;
      }
    }
    ++v11;
    v50 = v163;
    if (v169 == v160)
      goto LABEL_37;
  }
  v58 = (uint64_t)v161;
  sub_100024C04();
  sub_100015664(v137, v138, v139, v172);
LABEL_47:
  sub_100015670(v58, (uint64_t *)&unk_100086150);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000042, 0x800000010006A800, "remotepairingdeviced/SystemKeychainPairingManager.swift", 55, 2, 542, 0);
  __break(1u);
}

void sub_100023C18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  double v25;
  void (*v26)(uint64_t, uint64_t);
  double v27;
  double v28;
  uint64_t v29;
  _QWORD v30[6];

  sub_1000150C0(&qword_100085590);
  sub_1000115F0();
  __chkstk_darwin(v4, v5);
  sub_100013A1C();
  v8 = v6 - v7;
  __chkstk_darwin(v9, v10);
  v12 = (char *)v30 - v11;
  v13 = sub_100016490();
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  sub_100013A1C();
  v18 = v16 - v17;
  __chkstk_darwin(v19, v20);
  v22 = (char *)v30 - v21;
  sub_100016390();
  if (!v2)
  {
    v30[5] = v1;
    v30[1] = a1;
    sub_10005AD60((uint64_t)v12);
    sub_100016110((uint64_t)v12, 1, v13);
    if (v23)
    {
      v29 = sub_100015670((uint64_t)v12, &qword_100085590);
LABEL_6:
      Date.init()(v29);
      sub_100024C78(v8);
      sub_10005AC60(v8);
      sub_100021DC8();
      return;
    }
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v22, v12, v13);
    Date.init()(v24);
    v25 = Date.distance(to:)(v18);
    v26 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v26(v18, v13);
    sub_100024A04();
    sub_10005AE3C();
    v28 = v27;
    v29 = ((uint64_t (*)(char *, uint64_t))v26)(v22, v13);
    if (v28 < v25)
      goto LABEL_6;
  }
}

void sub_100023DE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t inited;
  uint64_t v61;
  uint64_t v62;
  const __CFString *v63;
  const __CFDictionary *isa;
  const __CFDictionary *v65;
  OSStatus v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  void *v72;
  os_log_type_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  id v77;
  uint8_t *v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;

  v2 = v1;
  v107 = a1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnData);
  v5 = v4;
  v105 = 0u;
  v106 = 0u;
  sub_1000153B0();
  sub_100015BEC((uint64_t)&v105, v3, v5);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnAttributes);
  sub_100011964();
  v105 = 0u;
  v106 = 0u;
  sub_100015920((uint64_t)&v105, v6, v7, v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = qword_1000886E0;
  v12 = v107;
  sub_100024D78(v107);
  if (sub_100024DD4())
  {
    sub_100024D78(v12);
    v13 = sub_1000123C4(22);
    v14 = sub_1000123C4(64);
    v94 = v14;
    *(_DWORD *)v13 = 136315394;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
    sub_100024CB0(v15, v16, v17, v18, v19, v20, v21, v22, v86, v2, v93, v94, v95, v96, v97, v98, v99, v100, v101,
      v102,
      v103,
      v104,
      v105);
    sub_100016504();
    v23 = sub_1000150C0(&qword_100085588);
    v31 = sub_100024E50(v23, v24, v25, v26, v27, v28, v29, v30, v87, v90, v93, v94, v95, v96);
    v33 = v32;
    sub_100010D40(v31, v32, &v94);
    sub_100024E1C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v35, v36);
    sub_100015A54(v12);
    swift_bridgeObjectRelease(v33);
    *(_WORD *)(v13 + 12) = 2080;
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
    v39 = v38;
    sub_100024CB0(v37, v38, v40, v41, v42, v43, v44, v45, v88, v91, v93, v94, v95, v96, v97, v98, v99, v100, v101,
      v102,
      v103,
      v104,
      v105);
    v46 = swift_bridgeObjectRelease(v39);
    v54 = sub_100024E50(v46, v47, v48, v49, v50, v51, v52, v53, v89, v92, v93, v94, v95, v96);
    sub_100010D40(v54, v55, &v94);
    sub_100024E1C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v57, v58);
    sub_100015A54(v12);
    sub_100016504();
    _os_log_impl((void *)&_mh_execute_header, v11, v10, "Migrating storage class of keychain item (account=%s, service=%s)", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2);
    sub_100012398(v14);
    sub_100012398(v13);
  }
  else
  {
    sub_100015A54(v12);
  }
  v59 = sub_1000150C0(&qword_100085580);
  inited = swift_initStackObject(v59, &v95);
  *(_OWORD *)(inited + 16) = xmmword_100065C90;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
  *(_QWORD *)(inited + 40) = v61;
  sub_100024BB8();
  *(_QWORD *)(inited + 72) = v62;
  *(_QWORD *)(inited + 48) = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  v63 = (id)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  sub_1000156AC((uint64_t)&v107, (uint64_t)&v105);
  isa = sub_100024C40().super.isa;
  sub_10000E4C8();
  v65 = sub_100024C40().super.isa;
  sub_1000118F4();
  v66 = SecItemUpdate(isa, v65);

  if (v66)
  {
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    v69 = v68;
    v70 = objc_allocWithZone((Class)NSError);
    sub_100015B10(v67, v69, v66);
    v72 = v71;
    v73 = static os_log_type_t.error.getter(v71);
    v74 = qword_1000886E0;
    v75 = v73;
    v76 = sub_100024DD4();
    if ((_DWORD)v76)
    {
      v77 = v72;
      v78 = (uint8_t *)sub_1000123C4(12);
      v79 = sub_1000123C4(32);
      v94 = v79;
      *(_DWORD *)v78 = 136446210;
      v80 = v77;
      v81 = objc_msgSend(v80, "description");
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v84 = v83;

      sub_100010D40(v82, v84, &v94);
      v93 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v78 + 4);

      swift_bridgeObjectRelease(v84);
      sub_1000118DC((void *)&_mh_execute_header, v74, v75, "Failed to migrate keychain item accessibility: %{public}s", v78);
      swift_arrayDestroy(v79, 1);
      sub_100012398(v79);
      v76 = sub_100012398((uint64_t)v78);
    }
    swift_willThrow(v76);
  }
}

void *sub_10002422C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  if (RPIdentity)
  {
    sub_100013C20();
    v12 = v11;
    sub_100015614(a1, a2);
    sub_100024E6C();
    v13 = sub_100021C64(v12, a1, a2, a3, a4, a5);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    v10 = static os_log_type_t.fault.getter(a1);
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1000886E0, "Unable to verify auth tags on platforms where Rapport is unavailable", 68, 2, &_swiftEmptyArrayStorage);
    return 0;
  }
  return v13;
}

uint64_t sub_100024310()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100010DFC((_QWORD *)(v0 + 24));
  sub_100010DFC((_QWORD *)(v0 + 64));

  return v0;
}

uint64_t sub_100024344()
{
  uint64_t v0;

  sub_100024310();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t getEnumTagSinglePayload for SystemKeychainPairingManager.PeersChangedEvent(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemKeychainPairingManager.PeersChangedEvent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100024438 + 4 * byte_100065D15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10002446C + 4 * byte_100065D10[v4]))();
}

uint64_t sub_10002446C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100024474(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002447CLL);
  return result;
}

uint64_t sub_100024488(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100024490);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100024494(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002449C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000244A8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000244B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SystemKeychainPairingManager.PeersChangedEvent()
{
  return &type metadata for SystemKeychainPairingManager.PeersChangedEvent;
}

unint64_t sub_1000244CC()
{
  unint64_t result;

  result = qword_100085560;
  if (!qword_100085560)
  {
    result = swift_getWitnessTable(&unk_100065DD4, &type metadata for SystemKeychainPairingManager.PeersChangedEvent);
    atomic_store(result, (unint64_t *)&qword_100085560);
  }
  return result;
}

void sub_100024508(void (*a1)(void *, _QWORD))
{
  sub_10001F990(a1);
}

void sub_100024528()
{
  sub_1000210F4();
}

void sub_100024548()
{
  sub_100021DC8();
}

void *sub_100024568(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return sub_10002422C(a1, a2, a3, a4, a5);
}

uint64_t sub_100024588(uint64_t a1, uint64_t a2)
{
  return sub_10001667C(a1, a2);
}

void sub_1000245A8(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  sub_100022A98(a1, a2, a3, a4);
}

void sub_1000245C8()
{
  sub_100022BBC();
}

void sub_1000245E8(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

void sub_1000245F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_100024654(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  BOOL *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  __int16 v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v40 = v37;
  v41 = v38;
  v42 = BYTE2(v38);
  v43 = BYTE3(v38);
  v44 = BYTE4(v38);
  v45 = BYTE5(v38);
  if (!v36)
  {
    __break(1u);
    JUMPOUT(0x1000247D8);
  }
  result = memcmp(v36, &v40, BYTE6(v38));
  *v35 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_100024810(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;
  char *v8;
  BOOL v9;
  int64_t v10;
  size_t v11;

  result = __DataStorage._bytes.getter();
  v8 = (char *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10)
    v11 = v10;
  else
    v11 = result;
  return memcmp(a4, v8, v11) == 0;
}

uint64_t sub_1000248AC(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "acl");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  return v3;
}

uint64_t sub_100024914(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

void sub_100024970(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa;

  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a3, "setSecretKey:", isa);

}

uint64_t sub_1000249B4()
{
  _QWORD *v0;

  sub_100015430(v0[2], v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000249E0(void *a1, char a2)
{
  uint64_t v2;

  return sub_100022AEC(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t, unint64_t, uint64_t))(v2 + 32));
}

void sub_1000249F4(void *a1, unint64_t a2, char a3)
{
  uint64_t v3;

  sub_10001FB74(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16), *(void (**)(_QWORD, _QWORD))(v3 + 24));
}

unint64_t sub_100024A04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086160;
  if (!qword_100086160)
  {
    v1 = objc_opt_self(CUPairedPeer);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100086160);
  }
  return result;
}

uint64_t sub_100024A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0((uint64_t *)&unk_100086150);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100024A88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0((uint64_t *)&unk_100086150);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100024AD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100024AF4(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_100024B18(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_100024B50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

NSData sub_100024B8C()
{
  return Data._bridgeToObjectiveC()();
}

uint64_t sub_100024B9C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 32), v1);
}

uint64_t sub_100024BAC()
{
  uint64_t v0;

  return sub_100015430(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40));
}

void sub_100024BB8()
{
  type metadata accessor for CFString(0);
}

uint64_t sub_100024BC0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100024BD4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100024BDC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
}

uint64_t sub_100024BE4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 - 288))(*(_QWORD *)(v1 - 248), v0);
}

uint64_t sub_100024C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, a5, 2);
}

uint64_t sub_100024C1C()
{
  uint64_t v0;
  uint64_t v1;

  sub_100013AB4(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_100013AB4(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 112));
  return swift_bridgeObjectRelease(v1);
}

NSDictionary sub_100024C40()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_100024C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 120));
}

uint64_t sub_100024C60@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100024C70()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8));
}

uint64_t sub_100024C78(uint64_t a1)
{
  uint64_t v1;

  return sub_100015664(a1, 0, 1, v1);
}

uint64_t sub_100024C98(uint64_t a1)
{
  unint64_t v1;

  return sub_100015430(a1, v1);
}

uint64_t sub_100024CA0(__n128 *a1, __n128 a2)
{
  uint64_t v2;

  a1[1] = a2;
  return swift_errorRetain(v2);
}

void sub_100024CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,__int128 a23)
{
  uint64_t v23;

  sub_10001513C(a1, a2, v23, &a23);
}

uint64_t sub_100024CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_100024CC8()
{
  return swift_willThrow();
}

uint64_t sub_100024CE0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[9] + 8))(v0[8], v0[10]);
}

uint64_t sub_100024D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 + 160, v3 + 168, a3);
}

uint64_t sub_100024D18()
{
  uint64_t v0;

  return sub_100010DFC((_QWORD *)(v0 + 160));
}

uint64_t sub_100024D20(uint64_t a1)
{
  unint64_t v1;

  return sub_100013AB4(a1, v1);
}

uint64_t sub_100024D28()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 160));
}

NSDictionary sub_100024D34()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_100024D40()
{
  const __CFDictionary *v0;

  return SecItemAdd(v0, 0);
}

uint64_t sub_100024D4C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100024D58(uint64_t a1, SEL *a2)
{
  void *v2;

  return sub_100024914(v2, a2);
}

uint64_t sub_100024D60(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100015670(v2, a2);
}

uint64_t sub_100024D68()
{
  return swift_willThrow();
}

void sub_100024D70()
{
  void *v0;

}

uint64_t sub_100024D78(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2);
}

uint64_t sub_100024D80()
{
  uint64_t v0;

  return sub_100015430(*(_QWORD *)(v0 + 72), *(_QWORD *)v0);
}

NSString sub_100024D8C()
{
  return String._bridgeToObjectiveC()();
}

void sub_100024D98()
{
  uint64_t v0;

}

uint64_t sub_100024DA0()
{
  return UUID.uuidString.getter();
}

uint64_t sub_100024DA8()
{
  uint64_t v0;

  return sub_100015430(*(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 72));
}

void sub_100024DB4(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  sub_10001513C(a1, 0xE200000000000000, v2, a2);
}

uint64_t sub_100024DC0()
{
  return 0x4B5249746C61;
}

BOOL sub_100024DD4()
{
  NSObject *v0;
  os_log_type_t v1;

  return os_log_type_enabled(v0, v1);
}

void sub_100024DE0()
{
  void *v0;

}

uint64_t sub_100024DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, 41, 2);
}

uint64_t sub_100024DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, a5, 2);
}

uint64_t sub_100024E04(uint64_t a1)
{
  uint64_t v1;

  return String.init<A>(describing:)(v1 - 112, a1);
}

uint64_t sub_100024E10(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return String.init<A>(describing:)(va, a1);
}

BOOL sub_100024E44(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100024E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  return String.init<A>(describing:)(va, v14);
}

uint64_t sub_100024E5C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 72));
}

uint64_t sub_100024E64()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100024E6C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100015614(v1, v0);
}

void sub_100024E78()
{
  void *v0;

  sub_1000245E8(v0, 0);
}

uint64_t sub_100024E84()
{
  uint64_t v0;

  return sub_100015430(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 152));
}

uint64_t sub_100024E9C()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_100024EB4()
{
  return sub_100016390();
}

uint64_t sub_100024EBC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = v3;
  v8 = static os_log_type_t.default.getter(a1);
  v9 = qword_1000886E0;
  v10 = v8;
  result = os_log_type_enabled((os_log_t)qword_1000886E0, v8);
  if ((_DWORD)result)
  {
    sub_100026D54(a1, a2, a3);
    swift_retain(v4);
    sub_100026D54(a1, a2, a3);
    swift_retain(v4);
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v26 = a3;
    v27 = v13;
    *(_DWORD *)v12 = 136446466;
    v24 = a1;
    v25 = a2;
    sub_100026D54(a1, a2, a3);
    v14 = String.init<A>(describing:)(&v24, &type metadata for DeviceInitiatedPairingService.State);
    v16 = v15;
    sub_100010D40(v14, v15, &v27);
    v24 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 4);
    swift_bridgeObjectRelease(v16);
    sub_100026DD8(a1, a2, a3);
    sub_100026DD8(a1, a2, a3);
    *(_WORD *)(v12 + 12) = 2082;
    v18 = v4[3];
    v19 = v4[4];
    v24 = v4[2];
    v25 = v18;
    v26 = v19;
    sub_100026D54(v24, v18, v19);
    v20 = String.init<A>(describing:)(&v24, &type metadata for DeviceInitiatedPairingService.State);
    v22 = v21;
    sub_100010D40(v20, v21, &v27);
    v24 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 14);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "DeviceInitiatedPairingService state changed %{public}s -> %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2);
    swift_slowDealloc(v13, -1, -1);
    return swift_slowDealloc(v12, -1, -1);
  }
  return result;
}

unint64_t sub_1000250CC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  v7 = sub_10001592C();
  sub_100026D54(v7, v8, v9);
  sub_100026D54(a1, a2, a3);
  v10 = sub_10001592C();
  sub_100026DD8(v10, v11, v12);
  v13 = sub_10001592C();
  sub_100024EBC(v13, v14, v15);
  sub_100026DD8(a1, a2, a3);
  v16 = sub_10001592C();
  return sub_100026DD8(v16, v17, v18);
}

void sub_100025154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  sub_100011610();
  v1 = v0;
  v35 = v3;
  v36 = v2;
  v5 = v4;
  sub_1000150C0(&qword_1000856D0);
  sub_1000115F0();
  __chkstk_darwin(v6, v7);
  sub_1000157A0();
  v8 = sub_1000150C0(&qword_1000850E8);
  sub_1000115F0();
  __chkstk_darwin(v9, v10);
  sub_100011928();
  v13 = v12 - v11;
  v14 = type metadata accessor for XPCDictionary(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  sub_100013A1C();
  v19 = v17 - v18;
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v33 - v22;
  v1 += 16;
  swift_beginAccess(v1, &v37, 0, 0);
  if (swift_weakLoadStrong(v1))
  {
    v24 = *(int *)(v8 + 48);
    v25 = v13 + v24;
    v26 = *v5;
    sub_1000159A0(v25, (uint64_t)v5 + v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16));
    sub_1000159A0((uint64_t)v23, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
    v27 = swift_retain(v26);
    XPCDictionary.entitlements.getter(v27);
    sub_10002685C();
    v34 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
    v28 = v34(v19, v14);
    v29 = static os_log_type_t.info.getter(v28);
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_1000886E0, "Handling new browser request", 28, 2, &_swiftEmptyArrayStorage);
    v30 = swift_allocObject(&unk_10007B150, 32, 7);
    v31 = v35;
    *(_QWORD *)(v30 + 16) = v36;
    *(_QWORD *)(v30 + 24) = v31;
    v32 = sub_1000144D8();
    sub_1000254CC(v32, v26, (uint64_t)sub_100026D4C, v30);
    sub_100011628();
    sub_1000162AC();
    sub_10000E4D8();
    swift_release(v30);
  }
  sub_1000138B4();
}

uint64_t sub_1000253DC(void (*a1)(char *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = sub_1000150C0(&qword_1000856D0);
  v4 = __chkstk_darwin(v2, v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  EmptyResponse.init()(v4);
  swift_storeEnumTagMultiPayload(v6, v2, 0);
  a1(v6);
  return sub_100015670((uint64_t)v6, &qword_1000856D0);
}

uint64_t sub_10002547C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = dispatch thunk of XPCConnection.activate()();
  v1 = static os_log_type_t.debug.getter(v0);
  return os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, qword_1000886E0, "Started device-initiated network pairing XPC service", 52, 2);
}

uint64_t sub_1000254CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = v4;
  v11 = static os_log_type_t.info.getter(a1);
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1000886E0, "Received client browse registration", 35, 2, &_swiftEmptyArrayStorage);
  v12 = type metadata accessor for PairableHostsBrowseRegistration();
  sub_1000138D4(v12, 56);
  sub_100026FE0();
  sub_10000E49C();
  v13 = sub_10003BAE4(a2, a3, a4);
  dispatch thunk of XPCConnection.setTargetQueue(_:)(*(_QWORD *)(v7 + 40));
  v14 = sub_1000138D4((uint64_t)&unk_10007B178, 24);
  sub_100015DDC(v14);
  v15 = sub_1000138D4((uint64_t)&unk_10007B1F0, 24);
  sub_100013970(v15);
  v16 = sub_1000138D4((uint64_t)&unk_10007B218, 32);
  *(_QWORD *)(v16 + 16) = v5;
  *(_QWORD *)(v16 + 24) = v6;
  sub_1000152D4();
  sub_100026FF4();
  dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)(sub_100026DD0, v16);
  swift_release(v5);
  sub_100012494();
  swift_release(v16);
  sub_10002577C(v13);
  return sub_100015384();
}

uint64_t sub_100025608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[24];

  v6 = sub_1000150C0(&qword_100085A80);
  __chkstk_darwin(v6, v7);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v19, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v11 = result;
    v12 = a3 + 16;
    swift_beginAccess(v12, v18, 0, 0);
    Strong = swift_weakLoadStrong(v12);
    if (Strong)
    {
      v14 = Strong;
      sub_10001AF30(a1, (uint64_t)v9);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v6);
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v16 = static os_log_type_t.info.getter(EnumCaseMultiPayload);
        os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_1000886E0, "Browser client disconnected. Unregistering", 42, 2, &_swiftEmptyArrayStorage);
      }
      else
      {
        v17 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
        os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1000886E0, "Unexpected message from browser client. Unregistering.", 54, 2, &_swiftEmptyArrayStorage);
      }
      sub_100015670((uint64_t)v9, &qword_100085A80);
      sub_100025E14();
      swift_release(v11);
    }
    else
    {
      v14 = v11;
    }
    return swift_release(v14);
  }
  return result;
}

uint64_t sub_10002577C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;
  int64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[40];
  _QWORD v55[5];
  uint64_t v56;

  v3 = v1;
  v5 = type metadata accessor for RemotePairingError(0);
  sub_1000115F0();
  __chkstk_darwin(v6, v7);
  sub_100011928();
  v10 = v9 - v8;
  v11 = type metadata accessor for BonjourBrowser.Mode(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  sub_10000E4A4();
  v14 = type metadata accessor for BonjourService(0);
  __chkstk_darwin(v14, v15);
  sub_100011928();
  v20 = v19 - v18;
  v21 = v3[2];
  if (v21)
  {
    if (v21 != 1)
    {
      v27 = v3[3];
      v37 = v3[4];
      v55[0] = v3[2];
      sub_100026FE0();
      v53 = v37;
      sub_100026D54(v21, v27, v37);
      v33 = (int64_t)v55;
      sub_100056270(&v56, a1);
      swift_release(v56);
      v38 = v27 + 64;
      v39 = 1 << *(_BYTE *)(v27 + 32);
      v40 = -1;
      if (v39 < 64)
        v40 = ~(-1 << v39);
      v41 = v40 & *(_QWORD *)(v27 + 64);
      v42 = (unint64_t)(v39 + 63) >> 6;
      swift_bridgeObjectRetain(v27);
      v43 = 0;
      if (!v41)
        goto LABEL_12;
LABEL_11:
      for (v41 &= v41 - 1; ; v41 = (v45 - 1) & v45)
      {
        sub_100026FF4();
        v33 = a1;
        sub_10003BC48();
        sub_100012494();
        if (v41)
          goto LABEL_11;
LABEL_12:
        v44 = v43 + 1;
        if (__OFADD__(v43, 1))
        {
          __break(1u);
          goto LABEL_34;
        }
        if (v44 >= v42)
          goto LABEL_30;
        v45 = *(_QWORD *)(v38 + 8 * v44);
        ++v43;
        if (!v45)
        {
          v43 = v44 + 1;
          if (v44 + 1 >= v42)
            goto LABEL_30;
          v45 = *(_QWORD *)(v38 + 8 * v43);
          if (!v45)
          {
            v43 = v44 + 2;
            if (v44 + 2 >= v42)
              goto LABEL_30;
            v45 = *(_QWORD *)(v38 + 8 * v43);
            if (!v45)
            {
              v43 = v44 + 3;
              if (v44 + 3 >= v42)
                goto LABEL_30;
              v45 = *(_QWORD *)(v38 + 8 * v43);
              if (!v45)
              {
                v46 = v44 + 4;
                if (v46 >= v42)
                {
LABEL_30:
                  sub_100015384();
                  v47 = v55[0];
                  swift_bridgeObjectRetain(v27);
                  swift_bridgeObjectRetain(v47);
                  sub_100011948();
                  sub_1000250CC(v47, v27, v53);
                  swift_release(v53);
                  swift_bridgeObjectRelease(v27);
                  return swift_bridgeObjectRelease(v47);
                }
                v45 = *(_QWORD *)(v38 + 8 * v46);
                if (!v45)
                {
                  while (1)
                  {
                    v43 = v46 + 1;
                    if (__OFADD__(v46, 1))
                      break;
                    if (v43 >= v42)
                      goto LABEL_30;
                    v45 = *(_QWORD *)(v38 + 8 * v43);
                    ++v46;
                    if (v45)
                      goto LABEL_27;
                  }
LABEL_34:
                  __break(1u);
LABEL_35:
                  if (v33 < 0)
                    v52 = v33;
                  else
                    v52 = v33 & 0xFFFFFFFFFFFFFF8;
                  sub_100026FE0();
                  sub_1000153B0();
                  v34 = _CocoaArrayWrapper.endIndex.getter(v52);
                  swift_bridgeObjectRelease(v33);
                  goto LABEL_6;
                }
                v43 = v46;
              }
            }
          }
        }
LABEL_27:
        ;
      }
    }
    static RemotePairingError.invalidOperation.getter(v16);
    v22 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_1000156B8(v5, v22);
    sub_10000EC00((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v23 = Error<>.init(_:_:)(v10, 0xD00000000000001CLL, 0x800000010006AC60, v5);
    return swift_willThrow(v23);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(v17 + 104))(v20, enum case for BonjourService.pairableHost(_:));
    v25 = objc_msgSend(objc_allocWithZone((Class)CUNetLinkManager), "init");
    sub_1000167AC((uint64_t)(v3 + 7), (uint64_t)v55);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v2, enum case for BonjourBrowser.Mode.onDemand(_:), v11);
    v26 = type metadata accessor for BonjourBrowser(0);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v27 = BonjourBrowser.init(service:includePeerToPeer:netLinkManager:pairingManager:mode:)(v20, 1, v25, v55, v2);
    v28 = sub_1000138D4((uint64_t)&unk_10007B178, 24);
    sub_100015DDC(v28);
    v29 = sub_1000138D4((uint64_t)&unk_10007B1A0, 24);
    sub_100013970(v29);
    v30 = sub_1000138D4((uint64_t)&unk_10007B1C8, 32);
    *(_QWORD *)(v30 + 16) = v10;
    *(_QWORD *)(v30 + 24) = v20;
    sub_1000152D4();
    sub_100026FF4();
    dispatch thunk of BonjourBrowser.resultsChangedHandler.setter(sub_100026DA0, v30);
    swift_release(v10);
    sub_100012494();
    v31 = sub_1000150C0(&qword_1000856E8);
    inited = swift_initStackObject(v31, v54);
    *(_OWORD *)(inited + 16) = xmmword_100065E60;
    *(_QWORD *)(inited + 32) = a1;
    v55[0] = inited;
    specialized Array._endMutation()(inited);
    v33 = v55[0];
    if (v55[0] >> 62)
      goto LABEL_35;
    v34 = *(_QWORD *)((v55[0] & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_100026FE0();
LABEL_6:
    if (v34)
    {
      sub_10004C584(v33);
      v36 = v35;
    }
    else
    {
      swift_bridgeObjectRelease(v33);
      v36 = &_swiftEmptySetSingleton;
    }
    v48 = type metadata accessor for UUID(0);
    v49 = type metadata accessor for DiscoveredPairableHost(0);
    v50 = sub_10000EC00(&qword_100086300, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v51 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v48, v49, v50);
    sub_1000144D8();
    sub_1000250CC((unint64_t)v36, v51, v27);
    dispatch thunk of BonjourBrowser.start(queue:)(v3[5]);
    return sub_100015384();
  }
}

uint64_t sub_100025CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE v18[24];
  char v19[24];

  v6 = type metadata accessor for BonjourBrowser.Change.Kind(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v19, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v12 = result;
    v13 = a3 + 16;
    swift_beginAccess(v13, v18, 0, 0);
    Strong = swift_weakLoadStrong(v13);
    if (Strong)
    {
      v15 = Strong;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
      v16 = (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 88))(v10, v6);
      if (v16 == enum case for BonjourBrowser.Change.Kind.added(_:))
      {
        type metadata accessor for BonjourBrowser.Change(0);
        sub_100026068();
        v17 = v15;
      }
      else
      {
        if (v16 != enum case for BonjourBrowser.Change.Kind.lost(_:))
        {
          result = _diagnoseUnexpectedEnumCase<A>(type:)(v6, v6);
          __break(1u);
          return result;
        }
        type metadata accessor for BonjourBrowser.Change(0);
        sub_1000265E0();
        v17 = v12;
        v12 = v15;
      }
      swift_release(v17);
    }
    return swift_release(v12);
  }
  return result;
}

void sub_100025E14()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  unint64_t v39;

  sub_100011610();
  v2 = v0;
  sub_1000150C0(&qword_100085A10);
  sub_1000115F0();
  __chkstk_darwin(v3, v4);
  sub_1000157A0();
  v5 = sub_1000150C0(&qword_1000856D8);
  sub_1000115F0();
  __chkstk_darwin(v6, v7);
  sub_100013A1C();
  v10 = v8 - v9;
  __chkstk_darwin(v11, v12);
  v14 = (char *)v37 - v13;
  sub_10003BC14();
  v15 = v0[2];
  if (v15 >= 2)
  {
    v17 = v0[4];
    v38 = v0[3];
    v16 = v38;
    v39 = v15;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_retain(v17);
    v18 = sub_100057C68();
    swift_release(v18);
    v19 = v39;
    v20 = sub_100011970();
    v21 = sub_100026030(v20);
    v22 = sub_1000155B8();
    if (v21)
    {
      dispatch thunk of BonjourBrowser.cancel()(v22);
      if (*(_QWORD *)(v16 + 16))
      {
        v37[0] = v17;
        v37[1] = v2;
        do
        {
          v23 = *(int *)(v5 + 48);
          v24 = sub_100052990(v16);
          v26 = v25;
          v28 = v27 & 1;
          v29 = sub_1000150C0(&qword_1000856E0);
          Dictionary._Variant.remove(at:)(v10, v10 + v23, v24, v26, v28, v29);
          sub_100026D90(v24, v26, v28);
          v30 = type metadata accessor for UUID(0);
          (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v14, v10, v30);
          *(_QWORD *)&v14[v23] = *(_QWORD *)(v10 + v23);
          v31 = sub_100011638();
          sub_100026FE8(v1, v32, v33, v31);
          sub_10000E49C();
          sub_100028938();
          sub_100015670(v1, &qword_100085A10);
          sub_100028EC8();
          sub_1000118D4();
          sub_100015670((uint64_t)v14, &qword_1000856D8);
          v16 = v38;
        }
        while (*(_QWORD *)(v38 + 16));
      }
      v34 = 0;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      sub_100011970();
      swift_bridgeObjectRetain(v16);
      swift_retain(v17);
      v34 = v19;
      v35 = v16;
      v36 = v17;
    }
    sub_1000250CC(v34, v35, v36);
    sub_1000162AC();
    sub_100016504();
    sub_1000155B8();
  }
  sub_1000138B4();
}

BOOL sub_100026030(uint64_t a1)
{
  uint64_t v1;

  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v1 = __CocoaSet.count.getter(a1);
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 16);
  }
  return v1 == 0;
}

void sub_100026068()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *);
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  id v35;
  _QWORD *v36;
  os_log_type_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  unint64_t v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  void (*v77)(uint64_t, char *);
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[5];

  sub_100011610();
  v4 = v3;
  v6 = v5;
  v7 = sub_100011638();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  sub_10000E4A4();
  sub_1000150C0(&qword_100085A10);
  sub_1000115F0();
  __chkstk_darwin(v10, v11);
  v12 = sub_100016180();
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  sub_100013A1C();
  v17 = __chkstk_darwin(v15, v16);
  v20 = (char *)&v74 - v19;
  v21 = v0[2];
  v22 = v0[4];
  if (v21 < 2 || v22 != v4)
    goto LABEL_5;
  v78 = v18;
  v79 = v0;
  v80 = v4;
  v24 = v0[3];
  v82 = (char *)v17;
  v25 = v22;
  swift_bridgeObjectRetain(v24);
  v81 = v21;
  v26 = v21;
  v27 = v25;
  v28 = sub_100026D54(v26, v24, v25);
  DiscoveredBonjourAdvert.identifier.getter(v28);
  sub_100041C74((uint64_t)v20, v24);
  v30 = v29;
  sub_100016504();
  v31 = *(void (**)(char *, char *))(v13 + 8);
  v31(v20, v82);
  if (v30)
  {
    sub_1000159A0(v1, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
    sub_100015664(v1, 0, 1, v7);
    sub_100028938();
    sub_1000118D4();
    sub_100015670(v1, &qword_100085A10);
    swift_release(v80);
    swift_bridgeObjectRelease(v81);
    sub_100016504();
LABEL_5:
    sub_1000138B4();
    return;
  }
  v76 = v27;
  v77 = (void (*)(uint64_t, char *))v31;
  sub_1000159A0(v2, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
  v32 = v79;
  sub_1000167AC((uint64_t)(v79 + 7), (uint64_t)v85);
  v33 = (void *)v32[5];
  v34 = type metadata accessor for DiscoveredPairableHost(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v35 = v33;
  v36 = sub_1000286AC();
  v37 = static os_log_type_t.default.getter(v36);
  v38 = qword_1000886E0;
  v39 = v37;
  v40 = os_log_type_enabled((os_log_t)qword_1000886E0, v37);
  if ((_DWORD)v40)
  {
    sub_1000144D8();
    v41 = (uint8_t *)sub_1000123C4(12);
    v42 = sub_1000123C4(32);
    v85[0] = v42;
    *(_DWORD *)v41 = 136315138;
    v75 = v41 + 4;
    v43 = v36[2];
    v44 = v36[3];
    sub_100016498();
    sub_100010D40(v43, v44, v85);
    v84 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v75);
    swift_release(v36);
    sub_100014518();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Created new wirelessly pairable host: %s", v41, 0xCu);
    swift_arrayDestroy(v42, 1);
    sub_100012398(v42);
    v40 = sub_100012398((uint64_t)v41);
  }
  v46 = v78;
  DiscoveredBonjourAdvert.identifier.getter(v40);
  sub_1000144D8();
  swift_isUniquelyReferenced_nonNull_native(v24);
  v85[0] = v24;
  sub_100059B3C();
  v47 = v85[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v77(v46, v82);
  v75 = (uint8_t *)v47;
  if ((v81 & 0xC000000000000001) != 0)
  {
    if (v81 >= 0)
      v48 = v81 & 0xFFFFFFFFFFFFFF8;
    else
      v48 = v81;
    swift_bridgeObjectRetain(v81);
    v49 = __CocoaSet.makeIterator()(v48);
    v50 = type metadata accessor for PairableHostsBrowseRegistration();
    v51 = sub_10000EC00(&qword_1000866A0, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066550);
    v52 = Set.Iterator.init(_cocoa:)(v49, v50, v51);
    v54 = v85[0];
    v53 = v85[1];
    v55 = v85[2];
    v56 = v85[3];
    v57 = v85[4];
  }
  else
  {
    v58 = -1 << *(_BYTE *)(v81 + 32);
    v53 = v81 + 56;
    v55 = ~v58;
    v59 = -v58;
    if (v59 < 64)
      v60 = ~(-1 << v59);
    else
      v60 = -1;
    v57 = v60 & *(_QWORD *)(v81 + 56);
    swift_bridgeObjectRetain(v81);
    v56 = 0;
    v54 = v52;
  }
  v78 = v55;
  v61 = (unint64_t)(v55 + 64) >> 6;
  v82 = (char *)&type metadata for Swift.AnyObject + 8;
  if (v54 < 0)
    goto LABEL_22;
LABEL_20:
  if (v57)
  {
    v62 = (v57 - 1) & v57;
    v63 = __clz(__rbit64(v57)) | (v56 << 6);
    v64 = v56;
    goto LABEL_38;
  }
  v69 = v56 + 1;
  if (!__OFADD__(v56, 1))
  {
    if (v69 < v61)
    {
      v70 = *(_QWORD *)(v53 + 8 * v69);
      v64 = v56 + 1;
      if (v70)
        goto LABEL_37;
      v64 = v56 + 2;
      if (v56 + 2 >= v61)
        goto LABEL_42;
      v70 = *(_QWORD *)(v53 + 8 * v64);
      if (v70)
        goto LABEL_37;
      v64 = v56 + 3;
      if (v56 + 3 >= v61)
        goto LABEL_42;
      v70 = *(_QWORD *)(v53 + 8 * v64);
      if (v70)
      {
LABEL_37:
        v62 = (v70 - 1) & v70;
        v63 = __clz(__rbit64(v70)) + (v64 << 6);
LABEL_38:
        v68 = *(_QWORD *)(*(_QWORD *)(v54 + 48) + 8 * v63);
        sub_10000E49C();
        while (v68)
        {
          sub_10003BC48();
          v52 = sub_1000118D4();
          v56 = v64;
          v57 = v62;
          if ((v54 & 0x8000000000000000) == 0)
            goto LABEL_20;
LABEL_22:
          v65 = __CocoaSet.Iterator.next()(v52);
          if (!v65)
            goto LABEL_42;
          v66 = v65;
          v83 = v65;
          v67 = type metadata accessor for PairableHostsBrowseRegistration();
          swift_unknownObjectRetain(v66);
          swift_dynamicCast(&v84, &v83, v82, v67, 7);
          v68 = v84;
          swift_unknownObjectRelease(v66);
          v64 = v56;
          v62 = v57;
        }
        goto LABEL_42;
      }
      v64 = v56 + 4;
      if (v56 + 4 < v61)
      {
        v70 = *(_QWORD *)(v53 + 8 * v64);
        if (!v70)
        {
          v71 = v56 + 5;
          while (v71 < v61)
          {
            v70 = *(_QWORD *)(v53 + 8 * v71++);
            if (v70)
            {
              v64 = v71 - 1;
              goto LABEL_37;
            }
          }
          goto LABEL_42;
        }
        goto LABEL_37;
      }
    }
LABEL_42:
    sub_100018CD4(v54);
    v72 = v81;
    sub_100011970();
    v73 = (uint64_t)v75;
    sub_100016498();
    sub_100011948();
    sub_1000250CC(v72, v73, v76);
    sub_10001195C();
    sub_1000155B8();
    sub_100014518();
    swift_release(v36);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_1000265E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  sub_100011610();
  v37 = v2;
  v38 = v3;
  v5 = v4;
  sub_1000150C0(&qword_100085A10);
  sub_1000115F0();
  __chkstk_darwin(v6, v7);
  v8 = sub_100016180();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  sub_100011928();
  v13 = v12 - v11;
  v14 = v0[2];
  if (v14 < 2)
  {
LABEL_2:
    sub_1000138B4();
    return;
  }
  v16 = v0[3];
  v15 = v0[4];
  v36 = v16;
  sub_100016498();
  if (v15 == v5)
  {
    swift_bridgeObjectRetain(v16);
    v17 = sub_100011948();
    DiscoveredBonjourAdvert.identifier.getter(v17);
    sub_1000588E8();
    v19 = v18;
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v13, v8);
    if (v19)
    {
      v21 = static os_log_type_t.default.getter(v20);
      v22 = qword_1000886E0;
      v23 = v21;
      if (os_log_type_enabled((os_log_t)qword_1000886E0, v21))
      {
        sub_1000152D4();
        v33 = v22;
        v24 = (uint8_t *)sub_1000123C4(12);
        v32 = sub_1000123C4(32);
        v35 = v32;
        *(_DWORD *)v24 = 136315138;
        v26 = *(_QWORD *)(v19 + 16);
        v25 = *(_QWORD *)(v19 + 24);
        sub_1000153B0();
        sub_100010D40(v26, v25, &v35);
        v34 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v24 + 4);
        swift_release(v19);
        swift_bridgeObjectRelease(v25);
        _os_log_impl((void *)&_mh_execute_header, v33, v23, "Removing wireless pairing host %s because the wireless pairing advert was lost", v24, 0xCu);
        swift_arrayDestroy(v32, 1);
        sub_100012398(v32);
        sub_100012398((uint64_t)v24);
      }
      v28 = sub_100011638();
      sub_100026FE8(v1, v29, v30, v28);
      sub_100028938();
      sub_100015670(v1, &qword_100085A10);
      sub_100028EC8();
      v31 = v36;
      sub_100016498();
      swift_bridgeObjectRetain(v31);
      sub_100011948();
      sub_1000250CC(v14, v31, v15);
      sub_10001195C();
      sub_100014518();
      swift_bridgeObjectRelease(v31);
      swift_release(v19);
    }
    else
    {
      sub_10001195C();
      sub_100014518();
      swift_bridgeObjectRelease(v36);
    }
    goto LABEL_2;
  }
  swift_bridgeObjectRelease(v14);
}

uint64_t sub_10002685C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for RemotePairingError(0);
  sub_1000115F0();
  __chkstk_darwin(v2, v3);
  sub_1000157A0();
  result = XPCDictionary.subscript.getter(0xD00000000000002CLL, 0x800000010006A190);
  if ((result & 1) == 0)
  {
    result = _RPIsAppleInternal();
    if ((result & 1) == 0)
    {
      v5 = sub_10000EC00((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      static Error<>.permissionDenied.getter(v1, v5);
      v6 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      sub_1000156B8(v1, v6);
      v7 = Error<>.init(_:_:)(v0, 0xD00000000000004ALL, 0x800000010006A1C0, v1);
      return swift_willThrow(v7);
    }
  }
  return result;
}

uint64_t sub_100026978()
{
  uint64_t v0;

  sub_100026DD8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 48));
  sub_100010DFC((_QWORD *)(v0 + 56));
  return v0;
}

uint64_t sub_1000269B0()
{
  uint64_t v0;

  sub_100026978();
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for DeviceInitiatedPairingService()
{
  return objc_opt_self(_TtC20remotepairingdeviced29DeviceInitiatedPairingService);
}

unint64_t destroy for DeviceInitiatedPairingService.State(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[1]);
    return swift_release(a1[2]);
  }
  return result;
}

void _s20remotepairingdeviced29DeviceInitiatedPairingServiceC5StateOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
  }
  else
  {
    v4 = a2[1];
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    swift_bridgeObjectRetain(v3);
    sub_1000153B0();
    swift_retain(v5);
  }
  sub_100013AE8();
}

unint64_t *assignWithCopy for DeviceInitiatedPairingService.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;

  v4 = *a1;
  v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      v10 = a2[1];
      a1[1] = v10;
      v11 = a2[2];
      a1[2] = v11;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v10);
      swift_retain(v11);
      return a1;
    }
LABEL_7:
    v12 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v12;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[1]);
    swift_release(a1[2]);
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

__n128 initializeWithTake for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for DeviceInitiatedPairingService.State(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = *a1;
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[1]);
    swift_release(a1[2]);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[1]);
  v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceInitiatedPairingService.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DeviceInitiatedPairingService.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_100026CE0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100026CF8(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DeviceInitiatedPairingService.State()
{
  return &type metadata for DeviceInitiatedPairingService.State;
}

uint64_t sub_100026D28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100026D4C()
{
  uint64_t v0;

  return sub_1000253DC(*(void (**)(char *))(v0 + 16));
}

unint64_t sub_100026D54(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= 2)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    return swift_retain(a3);
  }
  return result;
}

uint64_t sub_100026D90(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_100026DA0(uint64_t a1)
{
  uint64_t v1;

  return sub_100025CA8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100026DA8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100026DD0(uint64_t a1)
{
  uint64_t v1;

  return sub_100025608(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_100026DD8(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= 2)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    return swift_release(a3);
  }
  return result;
}

uint64_t destroy for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_release(a1[2]);
}

void _s20remotepairingdeviced29DeviceInitiatedPairingServiceC5StateO28BrowsingForPairableHostsInfoVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  sub_1000153B0();
  swift_retain(v5);
  sub_100013AE8();
}

uint64_t *assignWithCopy for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

_QWORD *assignWithTake for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo()
{
  return &type metadata for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo;
}

uint64_t sub_100026FE0()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100026FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100015664(a1, 1, 1, a4);
}

uint64_t sub_100026FF4()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100026FFC(uint64_t a1)
{
  return sub_100027014(a1, &qword_1000856F0);
}

uint64_t sub_100027008(uint64_t a1)
{
  return sub_100027014(a1, &qword_1000856F8);
}

uint64_t sub_100027014(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = type metadata accessor for AtomicCounter(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  result = AtomicCounter.init()();
  *a2 = result;
  return result;
}

void sub_100027050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v1 = sub_10002D724();
  sub_1000115F0();
  __chkstk_darwin(v2, v3);
  sub_100011928();
  v6 = v5 - v4;
  sub_10002D454(v0, v5 - v4);
  v7 = (char *)sub_1000270C0 + 4 * asc_100065F00[swift_getEnumCaseMultiPayload(v6, v1)];
  __asm { BR              X10 }
}

uint64_t sub_1000270C0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;

  v1 = (int *)sub_1000150C0(&qword_100085918);
  swift_release(*(_QWORD *)(v0 + v1[12]));
  swift_release(*(_QWORD *)(v0 + v1[16]));
  sub_100016124(v0 + v1[20]);
  v2 = sub_100011638();
  sub_100013AF4(v2);
  return 1;
}

void sub_100027114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  sub_100011610();
  v1 = v0;
  v2 = sub_1000118FC();
  __chkstk_darwin(v2, v3);
  v4 = sub_100013A2C();
  __chkstk_darwin(v4, v5);
  sub_1000162B4();
  v6 = type metadata accessor for DiscoveredPairableHost.State(0);
  sub_1000115F0();
  __chkstk_darwin(v7, v8);
  sub_100011928();
  v11 = v10 - v9;
  sub_10002D454(v1, v10 - v9);
  v12 = (char *)sub_1000271EC + 4 * byte_100065F05[swift_getEnumCaseMultiPayload(v11, v6)];
  __asm { BR              X10 }
}

uint64_t sub_1000271EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v7;

  sub_1000156EC();
  sub_1000152F8();
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 - 88));
  sub_10002D7A4();
  *(_QWORD *)(v2 - 96) = v3 + 16;
  *(_QWORD *)(v2 - 88) = 0x800000010006AEA0;
  sub_10002D84C();
  sub_10000EC40(&qword_1000859C8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7._countAndFlagsBits = sub_10002D72C(v4);
  sub_10001249C(v7);
  sub_1000135D0();
  sub_10002D784();
  sub_10002D828();
  v5 = *(_QWORD *)(v2 - 96);
  sub_100015DEC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return v5;
}

void sub_1000273D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;

  v3 = type metadata accessor for DiscoveredPairableHost.State(0);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v5, v8);
  v11 = (char *)&v29 - v10;
  v12 = static os_log_type_t.default.getter(v9);
  v13 = qword_1000886E0;
  sub_10002D454(a1, (uint64_t)v11);
  v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    swift_retain_n(v1, 2);
    v15 = swift_slowAlloc(32, -1);
    v29 = swift_slowAlloc(96, -1);
    v33 = v29;
    *(_DWORD *)v15 = 136446722;
    v17 = *(_QWORD *)(v1 + 16);
    v16 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain(v16);
    sub_100010D40(v17, v16, &v33);
    v31 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v15 + 4);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v15 + 12) = 2082;
    sub_10002D454((uint64_t)v11, (uint64_t)v7);
    v19 = String.init<A>(describing:)(v7, v3);
    v21 = v20;
    sub_100010D40(v19, v20, &v33);
    v31 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v15 + 14);
    swift_bridgeObjectRelease(v21);
    sub_10002CFE8((uint64_t)v11);
    *(_WORD *)(v15 + 22) = 2082;
    v23 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
    swift_beginAccess(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, &v31, 0, 0);
    sub_10002D454(v23, (uint64_t)v7);
    v24 = String.init<A>(describing:)(v7, v3);
    v26 = v25;
    sub_100010D40(v24, v25, &v33);
    v30 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 24);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: State changed from %{public}s -> %{public}s", (uint8_t *)v15, 0x20u);
    v28 = v29;
    swift_arrayDestroy(v29, 3);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    sub_10002CFE8((uint64_t)v11);
  }
  sub_10002B548();
}

uint64_t sub_100027668(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE v9[24];

  sub_10002D724();
  sub_1000115F0();
  __chkstk_darwin(v4, v5);
  sub_1000162B4();
  v6 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_1000156AC(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)v9);
  sub_10002D454(v6, v2);
  swift_beginAccess(v6, v8, 33, 0);
  sub_10002D6A0(a1, v6);
  swift_endAccess(v8);
  sub_1000273D4(v2);
  sub_10002CFE8(a1);
  return sub_10002CFE8(v2);
}

void sub_100027710()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(uint64_t *)((char *)v0
                  + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___listener);
  if (!v1)
  {
    v2 = sub_100027760((uint64_t)v0, *v0);
    sub_100014484(v2);
    sub_1000115DC();
    v1 = 0;
  }
  swift_retain(v1);
  sub_100013AE8();
}

uint64_t sub_100027760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for SystemXPCListenerConnection(0);
  v5 = static SystemXPCConnection.anonymousListenerConnection(targetQueue:)(0);
  v6 = swift_dynamicCastClassUnconditional(v5, v4, 0, 0, 0);
  dispatch thunk of XPCConnection.setTargetQueue(_:)(*(_QWORD *)(a1
                                                               + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__queue));
  v7 = swift_allocObject(&unk_10007B2C8, 24, 7);
  swift_weakInit(v7 + 16, a1);
  v8 = swift_allocObject(&unk_10007B390, 32, 7);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = a2;
  swift_retain(v7);
  dispatch thunk of SystemXPCListenerConnection.setPeerConnectionHandler(_:)(sub_10002D5FC, v8);
  swift_release(v7);
  v9 = swift_release(v8);
  dispatch thunk of XPCConnection.activate()(v9);
  return v6;
}

uint64_t sub_100027834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  Swift::String v25;
  void *object;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE v48[24];

  v6 = sub_1000150C0(&qword_100084F80);
  __chkstk_darwin(v6, v7);
  v9 = (uint64_t *)((char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v48, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v11 = result;
    sub_10002D638(a1, (uint64_t)v9, &qword_100084F80);
    if (swift_getEnumCaseMultiPayload(v9, v6) == 1)
    {
      sub_10002D678((uint64_t)v9, &qword_100084F80);
      v13 = static os_log_type_t.error.getter(v12);
      v14 = qword_1000886E0;
      v15 = v13;
      if (os_log_type_enabled((os_log_t)qword_1000886E0, v13))
      {
        swift_retain(v11);
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        v17 = swift_slowAlloc(32, -1);
        v45 = v17;
        *(_DWORD *)v16 = 136446210;
        v18 = *(_QWORD *)(v11 + 16);
        v19 = *(_QWORD *)(v11 + 24);
        swift_bridgeObjectRetain(v19);
        sub_100010D40(v18, v19, &v45);
        v47 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v16 + 4);
        swift_release(v11);
        swift_bridgeObjectRelease(v19);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s: Received error from host listener", v16, 0xCu);
        swift_arrayDestroy(v17, 1);
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v16, -1, -1);
      }
      return swift_release(v11);
    }
    else
    {
      v21 = *v9;
      v22 = type metadata accessor for SystemXPCPeerConnection(0);
      v23 = swift_dynamicCastClassUnconditional(v21, v22, 0, 0, 0);
      swift_retain(v21);
      dispatch thunk of XPCConnection.withUnsafeUnderlyingConnection<A>(_:)(&v45, sub_100027D08, 0, &type metadata for Int32);
      v24 = v45;
      swift_beginAccess(v11 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers, &v45, 33, 0);
      swift_retain(v21);
      sub_1000564B0();
      swift_endAccess(&v45);
      swift_release(v47);
      v45 = 0;
      v46 = 0xE000000000000000;
      swift_retain(v21);
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease(v46);
      v45 = 0xD000000000000018;
      v46 = 0x800000010006B000;
      v25._countAndFlagsBits = _typeName(_:qualified:)(a3, 0);
      object = v25._object;
      String.append(_:)(v25);
      swift_bridgeObjectRelease(object);
      v27._countAndFlagsBits = 46;
      v27._object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      v28 = *(_QWORD *)(v11 + 16);
      v29 = *(void **)(v11 + 24);
      swift_bridgeObjectRetain(v29);
      v30._countAndFlagsBits = v28;
      v30._object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(v29);
      v31._countAndFlagsBits = 0x2E746E65696C632ELL;
      v31._object = (void *)0xE800000000000000;
      String.append(_:)(v31);
      LODWORD(v47) = v24;
      v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      v33 = v32._object;
      String.append(_:)(v32);
      swift_bridgeObjectRelease(v33);
      v34 = v46;
      v35 = String.utf8CString.getter(v45, v46);
      swift_bridgeObjectRelease(v34);
      v36 = os_transaction_create(v35 + 32);
      swift_release(v35);
      swift_beginAccess(v11 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__transactions, &v45, 33, 0);
      if (v36)
      {
        sub_100059014();
        swift_release(v21);
      }
      else
      {
        sub_100058A04();
        v38 = v37;
        swift_release(v21);
        swift_unknownObjectRelease(v38);
      }
      swift_endAccess(&v45);
      v39 = *(void **)(v11 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__queue);
      v40 = v39;
      dispatch thunk of XPCConnection.setTargetQueue(_:)(v39);

      v41 = swift_allocObject(&unk_10007B2C8, 24, 7);
      swift_weakInit(v41 + 16, v11);
      v42 = swift_allocObject(&unk_10007B3B8, 24, 7);
      swift_weakInit(v42 + 16, v23);
      v43 = swift_allocObject(&unk_10007B3E0, 32, 7);
      *(_QWORD *)(v43 + 16) = v41;
      *(_QWORD *)(v43 + 24) = v42;
      swift_retain(v41);
      swift_retain(v42);
      dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)(sub_10002D630, v43);
      swift_release(v41);
      swift_release(v42);
      v44 = swift_release(v43);
      dispatch thunk of XPCConnection.activate()(v44);
      swift_release(v11);
      return swift_release_n(v21, 2);
    }
  }
  return result;
}

uint64_t sub_100027D08@<X0>(_xpc_connection_s *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = xpc_connection_get_pid(a1);
  *a2 = result;
  return result;
}

void sub_100027D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[3];
  char v45[24];
  char v46[24];

  v6 = type metadata accessor for XPCDictionary(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v44[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000150C0(&qword_100085A80);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v44[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v46, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
    return;
  v16 = Strong;
  v17 = a3 + 16;
  swift_beginAccess(v17, v45, 0, 0);
  v18 = swift_weakLoadStrong(v17);
  if (!v18)
  {
    v40 = v16;
LABEL_8:
    swift_release(v40);
    return;
  }
  v19 = v18;
  sub_10002D638(a1, (uint64_t)v14, &qword_100085A80);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v11);
  if ((_DWORD)EnumCaseMultiPayload != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v14, v6);
    sub_100028114();
    v42 = v41;
    v44[0] = v19;
    dispatch thunk of CodableDispatcher.dispatch(encodedData:context:completion:)(v10, v44, 0, 0);
    swift_release(v16);
    swift_release(v42);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v40 = v19;
    goto LABEL_8;
  }
  dispatch thunk of XPCConnection.cancel()(EnumCaseMultiPayload);
  swift_beginAccess(v16 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers, v44, 33, 0);
  sub_100057E04();
  v22 = v21;
  swift_endAccess(v44);
  swift_release(v22);
  swift_beginAccess(v16 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__transactions, v44, 33, 0);
  sub_100058A04();
  v24 = v23;
  swift_endAccess(v44);
  swift_unknownObjectRelease(v24);
  sub_10002BB94();
  v26 = static os_log_type_t.default.getter(v25);
  v27 = qword_1000886E0;
  v28 = v26;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v26))
  {
    swift_retain_n(v16, 2);
    swift_retain_n(v19, 2);
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(64, -1);
    v44[0] = v30;
    *(_DWORD *)v29 = 136446466;
    v31 = *(_QWORD *)(v16 + 16);
    v32 = *(_QWORD *)(v16 + 24);
    swift_bridgeObjectRetain(v32);
    sub_100010D40(v31, v32, v44);
    v43 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v29 + 4);
    swift_release_n(v16, 2);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v29 + 12) = 2080;
    v43 = v19;
    v34 = type metadata accessor for SystemXPCPeerConnection(0);
    swift_retain(v19);
    v35 = String.init<A>(describing:)(&v43, v34);
    v37 = v36;
    sub_100010D40(v35, v36, v44);
    v43 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v29 + 14);
    swift_release_n(v19, 2);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s: Releasing usage assertions owned by disconnected peer %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v30, 2);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
    swift_release(v16);
    v39 = v19;
  }
  else
  {
    swift_release(v19);
    v39 = v16;
  }
  swift_release(v39);
  sub_10002D678((uint64_t)v14, &qword_100085A80);
}

void sub_100028114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___dispatcher);
  if (!v1)
  {
    v2 = sub_100028160(v0);
    sub_100014484(v2);
    sub_1000115DC();
    v1 = 0;
  }
  swift_retain(v1);
  sub_100013AE8();
}

uint64_t sub_100028160(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;

  v41 = a1;
  v2 = type metadata accessor for XPCReplyProviding(0);
  v4 = __chkstk_darwin(v2, v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static XPCReplyProviding.passthrough.getter(v4);
  v7 = sub_1000150C0(&qword_100085A18);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)(v6, 0, 0, 0, 0);
  v9 = type metadata accessor for RemotePairingErrorCodingWrapper(0);
  v10 = swift_allocObject(&unk_10007B2C8, 24, 7);
  swift_weakInit(v10 + 16, a1);
  v11 = type metadata accessor for AttemptPairingPinCommand(0);
  v12 = type metadata accessor for EmptyResponse(0);
  v40 = v12;
  sub_10000EC40(&qword_100085A20, (uint64_t (*)(uint64_t))&type metadata accessor for AttemptPairingPinCommand, (uint64_t)&protocol conformance descriptor for AttemptPairingPinCommand);
  v14 = v13;
  sub_10000EC40(&qword_100085A28, (uint64_t (*)(uint64_t))&type metadata accessor for AttemptPairingPinCommand, (uint64_t)&protocol conformance descriptor for AttemptPairingPinCommand);
  v16 = v15;
  sub_10000EC40(&qword_100085A30, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse, (uint64_t)&protocol conformance descriptor for EmptyResponse);
  v18 = v17;
  sub_10000EC40(&qword_100085A38, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse, (uint64_t)&protocol conformance descriptor for EmptyResponse);
  v20 = v19;
  sub_10000EC40(&qword_100085A40, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingErrorCodingWrapper, (uint64_t)&protocol conformance descriptor for RemotePairingErrorCodingWrapper);
  v22 = v21;
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)(v9, sub_10002D5A4, v10, v11, v12, v9, v14, v16, v18, v20, v21);
  swift_release(v10);
  v23 = swift_allocObject(&unk_10007B2C8, 24, 7);
  v24 = v41;
  swift_weakInit(v23 + 16, v41);
  v25 = type metadata accessor for CancelPairingCommand(0);
  sub_10000EC40(&qword_100085A48, (uint64_t (*)(uint64_t))&type metadata accessor for CancelPairingCommand, (uint64_t)&protocol conformance descriptor for CancelPairingCommand);
  v27 = v26;
  sub_10000EC40(&qword_100085A50, (uint64_t (*)(uint64_t))&type metadata accessor for CancelPairingCommand, (uint64_t)&protocol conformance descriptor for CancelPairingCommand);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)(v9, sub_10002D5BC, v23, v25, v40, v9, v27, v28, v18, v20, v22);
  swift_release(v23);
  v29 = swift_allocObject(&unk_10007B2C8, 24, 7);
  swift_weakInit(v29 + 16, v24);
  v30 = type metadata accessor for InitiatePairingWithHostCommand(0);
  v31 = type metadata accessor for PairableHostInfo(0);
  sub_10000EC40(&qword_100085A58, (uint64_t (*)(uint64_t))&type metadata accessor for InitiatePairingWithHostCommand, (uint64_t)&protocol conformance descriptor for InitiatePairingWithHostCommand);
  v33 = v32;
  sub_10000EC40(&qword_100085A60, (uint64_t (*)(uint64_t))&type metadata accessor for InitiatePairingWithHostCommand, (uint64_t)&protocol conformance descriptor for InitiatePairingWithHostCommand);
  v35 = v34;
  sub_10000EC40(&qword_100085A68, (uint64_t (*)(uint64_t))&type metadata accessor for PairableHostInfo, (uint64_t)&protocol conformance descriptor for PairableHostInfo);
  v37 = v36;
  sub_10000EC40((unint64_t *)&unk_100085A70, (uint64_t (*)(uint64_t))&type metadata accessor for PairableHostInfo, (uint64_t)&protocol conformance descriptor for PairableHostInfo);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)(v9, sub_10002D5D4, v29, v30, v31, v9, v33, v35, v37, v38, v22);
  swift_release(v29);
  return v8;
}

uint64_t sub_1000284F8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  v4 = *a2;
  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v12, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    v8 = AttemptPairingPinCommand.pinAttempt.getter();
    v10 = v9;
    sub_10002912C(v8, v9, v4);
    if (v3)
    {
      swift_release(v7);
      return swift_bridgeObjectRelease(v10);
    }
    swift_release(v7);
    Strong = swift_bridgeObjectRelease(v10);
  }
  return EmptyResponse.init()(Strong);
}

uint64_t sub_1000285AC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v4 = *a2;
  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (!result)
    return EmptyResponse.init()(result);
  v7 = result;
  sub_100029620(v4);
  result = swift_release(v7);
  if (!v3)
    return EmptyResponse.init()(result);
  return result;
}

uint64_t sub_100028634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a5 + 16;
  swift_beginAccess(a5 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_100029D68();
    return swift_release(v7);
  }
  return result;
}

_QWORD *sub_1000286AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 *v33[2];
  _OWORD v34[6];
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;

  sub_100011610();
  v35 = v2;
  v36 = v3;
  v4 = v0;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = sub_1000118FC();
  sub_1000152C4();
  __chkstk_darwin(v12, v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[0] = v8;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_10004C404((unint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    v16 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers) = v16;
  v17 = OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__transactions;
  v18 = sub_10002D708();
  v19 = sub_1000150C0(&qword_100085A88);
  sub_10000EC40(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
  *(_QWORD *)((char *)v4 + v17) = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v18, v19, v20);
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___listener) = 0;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___dispatcher) = 0;
  strcpy((char *)v34, "pairablehost-");
  HIWORD(v34[0]) = -4864;
  if (qword_100084988 != -1)
    swift_once(&qword_100084988, sub_100027008);
  v33[1] = (__int128 *)((uint64_t (*)(void))dispatch thunk of AtomicCounter.next())();
  v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  sub_10001249C(v37);
  sub_100016504();
  v21 = *((_QWORD *)&v34[0] + 1);
  v4[2] = *(_QWORD *)&v34[0];
  v4[3] = v21;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__queue) = v6;
  v22 = (uint64_t)v4 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  v23 = sub_100011638();
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, v10, v23);
  v25 = sub_10002D724();
  sub_10002D878(v22, v25);
  v26 = v6;
  v27 = ((uint64_t (*)(void))DiscoveredBonjourAdvert.userAssignedName.getter)();
  v29 = 0x6E776F6E6B6E55;
  if (v28)
    v29 = v27;
  v30 = 0xE700000000000000;
  if (v28)
    v30 = v28;
  v4[4] = v29;
  v4[5] = v30;
  v4[6] = ((uint64_t (*)(void))DiscoveredBonjourAdvert.model.getter)();
  v4[7] = v31;
  DiscoveredBonjourAdvert.identifier.getter();

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v10, v23);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))((uint64_t)v4 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__advertID, v15, v11);
  sub_10002D6E4(v33[0], (uint64_t)v4 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__pairingManager);
  return v4;
}

void sub_100028938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  sub_100011610();
  v5 = v4;
  v6 = type metadata accessor for DiscoveredPairableHost.State(0);
  sub_1000115F0();
  __chkstk_darwin(v7, v8);
  sub_100013A1C();
  v11 = v9 - v10;
  __chkstk_darwin(v12, v13);
  sub_10002D754();
  sub_1000150C0(&qword_100085A10);
  sub_1000115F0();
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100011638();
  sub_1000152C4();
  __chkstk_darwin(v19, v20);
  sub_100012460();
  sub_10002D638(v5, (uint64_t)v17, &qword_100085A10);
  if (sub_100015658((uint64_t)v17, 1, v18) != 1)
  {
    sub_100015494(v2, (uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    v23 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
    sub_1000156AC(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)&v26);
    sub_10002D454(v23, v0);
    v24 = (char *)&loc_100028A8C + 4 * byte_100065F0A[swift_getEnumCaseMultiPayload(v0, v6)];
    __asm { BR              X10 }
  }
  sub_10002D678((uint64_t)v17, &qword_100085A10);
  v21 = sub_100016444();
  swift_storeEnumTagMultiPayload(v21, v22, 4);
  sub_100027668(v11);
  sub_1000138B4();
}

void sub_100028BB8()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000005DLL, 0x800000010006AFA0, "remotepairingdeviced/DiscoveredPairableHost.swift", 49, 2, 164, 0);
  __break(1u);
}

uint64_t sub_100028C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  if (qword_100084980 != -1)
    swift_once(&qword_100084980, sub_100026FFC);
  v1 = sub_10000E49C();
  v2 = dispatch thunk of AtomicCounter.next()(v1);
  sub_1000118D4();
  sub_100027710();
  v3 = SystemXPCListenerConnection.createEndpoint()();
  v4 = sub_1000118D4();
  __chkstk_darwin(v4, v5);
  v8[2] = v0;
  v8[3] = v2;
  v6 = type metadata accessor for PairableHostInfo(0);
  dispatch thunk of XPCEndpoint.withUnsafeUnderlyingEndpoint<A>(_:)(sub_10002D58C, v8, v6);
  return swift_release(v3);
}

uint64_t sub_100028CEC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  _BYTE v32[24];

  v30[1] = a4;
  v31 = a3;
  v30[0] = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DiscoveredPairableHost.State(0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)v30 - v16;
  v18 = (uint64_t)a2 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  swift_beginAccess((char *)a2 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, v32, 0, 0);
  sub_10002D454(v18, (uint64_t)v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v10);
  if (EnumCaseMultiPayload == 3)
  {
    v20 = type metadata accessor for DiscoveredBonjourAdvert(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v17, v20);
  }
  else
  {
    sub_10002CFE8((uint64_t)v17);
  }
  v21 = EnumCaseMultiPayload == 3;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, (uint64_t)a2 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__advertID, v5);
  v22 = a2[4];
  v23 = a2[5];
  v24 = a2[6];
  v25 = a2[7];
  sub_10002D454(v18, (uint64_t)v14);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v23);
  sub_100027050();
  v27 = v26;
  sub_10002CFE8((uint64_t)v14);
  v28 = swift_unknownObjectRetain(v30[0]);
  return PairableHostInfo.init(identifier:name:model:available:paired:monotonicIdentifier:endpoint:)(v9, v22, v23, v24, v25, v27 & 1, v21, v31, v28);
}

void sub_100028EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[24];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  sub_100027710();
  dispatch thunk of XPCConnection.cancel()(v1);
  sub_1000118D4();
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers);
  sub_1000156AC(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers, (uint64_t)v29);
  v3 = *v2;
  if ((v3 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_10002D708();
    sub_10000EC40(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
    v8 = Set.Iterator.init(_cocoa:)(v5, v6, v7);
    v3 = v30;
    v9 = v31;
    v10 = v32;
    v11 = v33;
    v12 = v34;
  }
  else
  {
    v9 = v3 + 56;
    v10 = ~(-1 << *(_BYTE *)(v3 + 32));
    sub_1000139EC();
    v12 = v13 & v14;
    swift_bridgeObjectRetain(v3);
    v11 = 0;
  }
  v15 = (unint64_t)(v10 + 64) >> 6;
  if (v3 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v12)
    {
      v16 = (v12 - 1) & v12;
      v17 = __clz(__rbit64(v12)) | (v11 << 6);
      v18 = v11;
      goto LABEL_27;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v23 >= v15)
      goto LABEL_30;
    v24 = *(_QWORD *)(v9 + 8 * v23);
    v18 = v11 + 1;
    if (!v24)
    {
      v18 = v11 + 2;
      if (v11 + 2 >= v15)
        goto LABEL_30;
      v24 = *(_QWORD *)(v9 + 8 * v18);
      if (!v24)
      {
        v18 = v11 + 3;
        if (v11 + 3 >= v15)
          goto LABEL_30;
        v24 = *(_QWORD *)(v9 + 8 * v18);
        if (!v24)
        {
          v18 = v11 + 4;
          if (v11 + 4 >= v15)
            goto LABEL_30;
          v24 = *(_QWORD *)(v9 + 8 * v18);
          if (!v24)
          {
            v25 = v11 + 5;
            while (v25 < v15)
            {
              v24 = *(_QWORD *)(v9 + 8 * v25++);
              if (v24)
              {
                v18 = v25 - 1;
                goto LABEL_26;
              }
            }
LABEL_30:
            sub_100018CD4(v3);
            return;
          }
        }
      }
    }
LABEL_26:
    v16 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_27:
    v26 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    v22 = sub_10000E49C();
    if (!v26)
      goto LABEL_30;
    while (1)
    {
      dispatch thunk of XPCConnection.cancel()(v22);
      v8 = sub_1000118D4();
      v11 = v18;
      v12 = v16;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      v19 = __CocoaSet.Iterator.next()(v8);
      if (v19)
      {
        v20 = v19;
        v27 = v19;
        sub_10002D708();
        sub_10002D858();
        sub_10002D7F8((uint64_t)&v28, (uint64_t)&v27, (uint64_t)&type metadata for Swift.AnyObject + 8);
        v21 = v28;
        v22 = swift_unknownObjectRelease(v20);
        v18 = v11;
        v16 = v12;
        if (v21)
          continue;
      }
      goto LABEL_30;
    }
  }
  __break(1u);
}

void sub_10002912C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t EnumCaseMultiPayload;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[24];
  uint64_t v70;

  v5 = v4;
  v68 = type metadata accessor for RemotePairingError(0);
  sub_1000115F0();
  __chkstk_darwin(v9, v10);
  sub_1000138DC();
  v67 = v11;
  v12 = sub_10002D7CC();
  sub_1000115F0();
  __chkstk_darwin(v13, v14);
  sub_100013A1C();
  v17 = v15 - v16;
  __chkstk_darwin(v18, v19);
  sub_10002D754();
  v20 = v5 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_1000156AC(v5 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)v69);
  sub_10002D454(v20, v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v12);
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v22 = (int *)sub_1000150C0(&qword_100085918);
    v23 = *(_QWORD *)(v3 + v22[12]);
    v24 = *(_QWORD *)(v3 + v22[16]);
    swift_release(*(_QWORD *)(v3 + v22[20] + 8));
    type metadata accessor for XPCConnection(0);
    v25 = static XPCConnection.== infix(_:_:)(v24, a3);
    if ((v25 & 1) != 0)
    {
      dispatch thunk of ControlChannelConnection.attempt(pairingPIN:)(a1, a2);
      v26 = v23;
    }
    else
    {
      v41 = static os_log_type_t.error.getter(v25);
      v42 = qword_1000886E0;
      v43 = v41;
      v44 = os_log_type_enabled((os_log_t)qword_1000886E0, v41);
      if ((_DWORD)v44)
      {
        sub_1000165F4(v5);
        sub_1000165F4(a3);
        sub_1000165F4(v24);
        v64 = v42;
        v45 = sub_1000123C4(32);
        v65 = sub_1000123C4(96);
        v70 = v65;
        *(_DWORD *)v45 = 136446722;
        v46 = *(_QWORD *)(v5 + 16);
        v47 = *(_QWORD *)(v5 + 24);
        swift_bridgeObjectRetain(v47);
        sub_100010D40(v46, v47, &v70);
        sub_1000124F0(v48, (uint64_t)v69);
        sub_100015870(v5);
        swift_bridgeObjectRelease(v47);
        *(_WORD *)(v45 + 12) = 2082;
        type metadata accessor for SystemXPCPeerConnection(0);
        sub_1000159B8();
        v49 = sub_10002D834();
        sub_10002D700(v49, v50);
        sub_1000124F0(v51, (uint64_t)v69);
        sub_100015870(a3);
        sub_10000E4C8();
        *(_WORD *)(v45 + 22) = 2082;
        sub_1000144D8();
        v52 = sub_10002D834();
        v54 = v53;
        sub_10002D700(v52, v53);
        sub_1000124F0(v55, (uint64_t)v69);
        sub_100015870(v24);
        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v64, v43, "%{public}s: Received PIN challenge from peer %{public}s but pairing was initiated by %{public}s", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy(v65, 3);
        sub_100012398(v65);
        v44 = sub_100012398(v45);
      }
      static RemotePairingError.invalidOperation.getter(v44);
      sub_100011640((unint64_t *)&unk_1000859D0, v56, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      sub_1000156B8(v68, v57);
      sub_100011640((unint64_t *)&unk_1000853D0, v58, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      v59 = sub_10002D864();
      v62 = sub_10002D710(v59, v60, v61);
      swift_willThrow(v62);
      v26 = v23;
    }
    swift_release(v26);
    swift_release(v24);
    v63 = type metadata accessor for DiscoveredBonjourAdvert(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v3, v63);
  }
  else
  {
    v27 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    v28 = qword_1000886E0;
    v29 = sub_10002D794(v27);
    if ((_DWORD)v29)
    {
      sub_1000165F4(v5);
      v30 = sub_1000123C4(22);
      v66 = sub_1000123C4(64);
      v70 = v66;
      *(_DWORD *)v30 = 136446466;
      sub_10002D840();
      sub_10002D774();
      sub_10002D744();
      sub_10000E4C8();
      *(_WORD *)(v30 + 12) = 2082;
      v31 = sub_100016444();
      sub_10002D454(v31, v32);
      v33 = String.init<A>(describing:)(v17, v12);
      v35 = v34;
      sub_10002D700(v33, v34);
      sub_10002D744();
      sub_100015870(v5);
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)a2, "%{public}s: Invalid state to attempt PIN pairing: %{public}s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(v66, 2);
      sub_100012398(v66);
      v29 = sub_100012398(v30);
    }
    static RemotePairingError.invalidOperation.getter(v29);
    sub_100011640((unint64_t *)&unk_1000859D0, v36, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_1000156B8(v68, v37);
    sub_100011640((unint64_t *)&unk_1000853D0, v38, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v40 = sub_10002D710(v67, v39, 0x800000010006AF70);
    swift_willThrow(v40);
    sub_10002CFE8(v3);
  }
  sub_1000123A4();
}

void sub_100029620(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t *);
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  os_log_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[32];
  uint64_t v118;

  v111 = a1;
  v104 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
  v106 = *(_QWORD *)(v104 - 8);
  sub_1000123E4();
  __chkstk_darwin(v2, v3);
  sub_1000138DC();
  v105 = v4;
  v5 = sub_100011978();
  v109 = type metadata accessor for POSIXError(v5);
  v6 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109, v7);
  sub_100011928();
  v10 = v9 - v8;
  v11 = type metadata accessor for PairingOutcome(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v115 = type metadata accessor for RemotePairingError(0);
  sub_1000115F0();
  __chkstk_darwin(v16, v17);
  sub_1000138DC();
  v114 = v18;
  v19 = sub_100011978();
  v20 = type metadata accessor for DiscoveredBonjourAdvert(v19);
  v113 = *(_QWORD *)(v20 - 8);
  sub_1000123E4();
  __chkstk_darwin(v21, v22);
  v112 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10002D7CC();
  sub_1000115F0();
  __chkstk_darwin(v25, v26);
  sub_1000156C4();
  v107 = v27;
  sub_100024B80();
  __chkstk_darwin(v28, v29);
  v31 = (char *)&v98 - v30;
  v110 = v1;
  v32 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_1000156AC(v32, (uint64_t)v117);
  sub_10002D454(v32, (uint64_t)v31);
  v108 = v24;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v24);
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v34 = v10;
    v100 = v15;
    v101 = v12;
    v35 = v109;
    v99 = v11;
    v36 = (int *)sub_1000150C0(&qword_100085918);
    v102 = *(_QWORD *)&v31[v36[12]];
    v37 = *(_QWORD *)&v31[v36[16]];
    v38 = &v31[v36[20]];
    v39 = *((_QWORD *)v38 + 1);
    v98 = *(void (**)(uint64_t *))v38;
    v40 = v112;
    v41 = v113;
    v42 = v31;
    v43 = v37;
    (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v112, v42, v20);
    type metadata accessor for XPCConnection(0);
    v103 = v43;
    v44 = static XPCConnection.== infix(_:_:)(v43, v111);
    if ((v44 & 1) != 0)
    {
      LODWORD(v118) = 89;
      v45 = sub_100045328((uint64_t)&_swiftEmptyArrayStorage);
      sub_10000EC40(&qword_1000859E0, (uint64_t (*)(uint64_t))&type metadata accessor for POSIXError, (uint64_t)&protocol conformance descriptor for POSIXError);
      v46 = v20;
      v48 = _BridgedStoredNSError.init(_:userInfo:)(&v118, v45, v35, v47);
      v49 = POSIXError._nsError.getter(v48);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v34, v35);
      v50 = v100;
      v51 = v101;
      *v100 = v49;
      v52 = v99;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v51 + 104))(v50, enum case for PairingOutcome.failure(_:), v99);
      v53 = v39;
      v98(v50);
      (*(void (**)(uint64_t *, uint64_t))(v51 + 8))(v50, v52);
      v54 = v107;
      (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v107, v40, v46);
      swift_storeEnumTagMultiPayload(v54, v108, 0);
      sub_100027668(v54);
      v56 = v105;
      v55 = v106;
      v57 = v104;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v106 + 104))(v105, enum case for ControlChannelConnection.InvalidationReason.onDemandTaskCompleted(_:), v104);
      v58 = v102;
      dispatch thunk of ControlChannelConnection.invalidate(for:)(v56);
      swift_release(v103);
      swift_release(v58);
      swift_release(v53);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v57);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v46);
    }
    else
    {
      v77 = v111;
      v109 = v39;
      v78 = static os_log_type_t.error.getter(v44);
      v79 = qword_1000886E0;
      v80 = v78;
      if (os_log_type_enabled((os_log_t)qword_1000886E0, v78))
      {
        v81 = v110;
        sub_1000165F4(v110);
        v108 = v79;
        v82 = v77;
        sub_1000165F4(v77);
        v83 = v103;
        sub_1000165F4(v103);
        v84 = sub_1000123C4(32);
        v107 = sub_1000123C4(96);
        v118 = v107;
        *(_DWORD *)v84 = 136446722;
        sub_10002D840();
        sub_10002D774();
        v116 = v85;
        sub_100016040(v85, (uint64_t)v117);
        sub_100015870(v81);
        sub_10000E4C8();
        *(_WORD *)(v84 + 12) = 2082;
        v116 = v82;
        type metadata accessor for SystemXPCPeerConnection(0);
        sub_100011948();
        v86 = sub_10002D7E4();
        v88 = v87;
        sub_10002D700(v86, v87);
        v116 = v89;
        sub_100016040(v89, (uint64_t)v117);
        sub_100015870(v82);
        swift_bridgeObjectRelease(v88);
        *(_WORD *)(v84 + 22) = 2082;
        v116 = v83;
        swift_retain(v83);
        v90 = sub_10002D7E4();
        sub_10002D700(v90, v91);
        v116 = v92;
        sub_100016040(v92, (uint64_t)v117);
        sub_100015870(v83);
        sub_10000E4C8();
        _os_log_impl((void *)&_mh_execute_header, v108, v80, "%{public}s: Received PIN challenge from peer %{public}s but pairing was initiated by %{public}s", (uint8_t *)v84, 0x20u);
        v93 = v107;
        swift_arrayDestroy(v107, 3);
        sub_100012398(v93);
        sub_100012398(v84);
      }
      sub_10002D7D8();
      sub_10002D73C((unint64_t *)&unk_1000859D0, v94, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      sub_1000156B8(v115, v95);
      sub_10002D73C((unint64_t *)&unk_1000853D0, v96, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      v97 = sub_1000135D8((uint64_t)"The host is not currently being paired.");
      swift_willThrow(v97);
      swift_release(v103);
      swift_release(v102);
      swift_release(v109);
      (*(void (**)(char *, uint64_t))(v113 + 8))(v112, v20);
    }
  }
  else
  {
    v59 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    v60 = qword_1000886E0;
    if (sub_10002D794(v59))
    {
      v61 = v110;
      sub_1000165F4(v110);
      v62 = sub_1000123C4(22);
      v113 = sub_1000123C4(64);
      v118 = v113;
      *(_DWORD *)v62 = 136446466;
      v63 = *(_QWORD *)(v61 + 16);
      v64 = *(_QWORD *)(v61 + 24);
      sub_10002D7B0();
      sub_100010D40(v63, v64, &v118);
      v116 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v62 + 4);
      swift_bridgeObjectRelease(v64);
      *(_WORD *)(v62 + 12) = 2082;
      v66 = v32;
      v67 = v107;
      sub_10002D454(v66, v107);
      v68 = String.init<A>(describing:)(v67, v108);
      v70 = v69;
      sub_10002D700(v68, v69);
      v116 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v62 + 14);
      sub_100015870(v61);
      swift_bridgeObjectRelease(v70);
      _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v10, "%{public}s: Invalid state to handle pairing cancellation: %{public}s", (uint8_t *)v62, 0x16u);
      v72 = v113;
      swift_arrayDestroy(v113, 2);
      sub_100012398(v72);
      sub_100012398(v62);
    }
    sub_10002D7D8();
    sub_10002D73C((unint64_t *)&unk_1000859D0, v73, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_1000156B8(v115, v74);
    sub_10002D73C((unint64_t *)&unk_1000853D0, v75, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v76 = sub_1000135D8((uint64_t)"The host is not currently being paired.");
    swift_willThrow(v76);
    sub_10002CFE8((uint64_t)v31);
  }
  sub_1000123A4();
}

void sub_100029D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  os_log_type_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD v45[9];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];

  sub_100011610();
  v1 = v0;
  v48 = v2;
  v4 = v3;
  v6 = v5;
  v45[7] = sub_1000150C0(&qword_100085A08);
  sub_1000115F0();
  __chkstk_darwin(v7, v8);
  sub_1000138DC();
  v45[8] = v9;
  v10 = sub_100011638();
  v45[6] = *(_QWORD *)(v10 - 8);
  sub_1000123E4();
  __chkstk_darwin(v11, v12);
  sub_1000138DC();
  v45[2] = v13;
  v14 = sub_100011978();
  v45[5] = type metadata accessor for RemotePairingError(v14);
  sub_1000115F0();
  __chkstk_darwin(v15, v16);
  v45[4] = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100011978();
  v19 = type metadata accessor for DiscoveredPairableHost.State(v18);
  sub_1000115F0();
  __chkstk_darwin(v20, v21);
  sub_1000156C4();
  v45[3] = v22;
  sub_100024B80();
  v25 = __chkstk_darwin(v23, v24);
  v27 = (char *)v45 - v26;
  v28 = static os_log_type_t.default.getter(v25);
  v29 = qword_1000886E0;
  v30 = v28;
  v31 = os_log_type_enabled((os_log_t)qword_1000886E0, v28);
  v46 = v19;
  v47 = v4;
  if (v31)
  {
    sub_1000165F4(v1);
    sub_1000165F4(v6);
    v32 = sub_1000123C4(22);
    v33 = sub_1000123C4(64);
    v51[0] = v33;
    *(_DWORD *)v32 = 136446466;
    v45[1] = v10;
    v34 = *(_QWORD *)(v1 + 16);
    v35 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain(v35);
    sub_100010D40(v34, v35, v51);
    v49 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v32 + 4);
    sub_100015870(v1);
    swift_bridgeObjectRelease(v35);
    *(_WORD *)(v32 + 12) = 2082;
    v49 = v6;
    v37 = sub_10002D708();
    sub_10001612C();
    v38 = String.init<A>(describing:)(&v49, v37);
    v40 = v39;
    sub_100010D40(v38, v39, v51);
    v49 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v32 + 14);
    sub_100015870(v6);
    swift_bridgeObjectRelease(v40);
    sub_1000164A0((void *)&_mh_execute_header, v29, v30, "%{public}s: Received request to wirelessly pair from peer: %{public}s", (uint8_t *)v32);
    sub_10002D80C(v33);
    sub_100012398(v33);
    v42 = v32;
    v19 = v46;
    sub_100012398(v42);
  }
  v43 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_1000156AC(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)v51);
  sub_10002D454(v43, (uint64_t)v27);
  v44 = (char *)sub_100029FFC + 4 * byte_100065F0F[swift_getEnumCaseMultiPayload(v27, v19)];
  __asm { BR              X10 }
}

void sub_100029FFC()
{
  uint64_t v0;
  void (*v1)(uint64_t *);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v6 = (int *)sub_1000150C0(&qword_100085918);
  swift_release(*(_QWORD *)(v3 + v6[12]));
  swift_release(*(_QWORD *)(v3 + v6[16]));
  sub_100016124(v3 + v6[20]);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 176) + 8))(v3, v0);
  static RemotePairingError.pairingFailed.getter(v7);
  sub_10000EC40((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
  v8 = *(_QWORD *)(v5 - 184);
  v10 = sub_1000156B8(v8, v9);
  sub_10000EC40((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
  v11 = sub_10002D864();
  v14 = Error<>.init(_:_:)(v11, v12, v13, v8);
  v15 = swift_willThrow(v14);
  v16 = static os_log_type_t.error.getter(v15);
  v17 = qword_1000886E0;
  v18 = v16;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v16))
  {
    sub_1000165F4(v2);
    v19 = sub_1000123C4(22);
    v20 = sub_1000123C4(64);
    *(_QWORD *)(v5 - 120) = v20;
    *(_DWORD *)v19 = 136446466;
    v21 = v2;
    v22 = *(_QWORD *)(v2 + 16);
    v23 = v4;
    v24 = *(_QWORD *)(v21 + 24);
    sub_10002D7B0();
    sub_100010D40(v22, v24, (uint64_t *)(v5 - 120));
    *(_QWORD *)(v5 - 128) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 128, v5 - 120, v19 + 4);
    sub_100016504();
    *(_WORD *)(v19 + 12) = 2082;
    v26 = *(_QWORD *)(v5 - 200);
    sub_10002D454(v23, v26);
    v27 = String.init<A>(describing:)(v26, *(_QWORD *)(v5 - 152));
    sub_100010D40(v27, v28, (uint64_t *)(v5 - 120));
    *(_QWORD *)(v5 - 128) = v29;
    v1 = *(void (**)(uint64_t *))(v5 - 144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 128, v5 - 120, v19 + 14);
    sub_100015870(v21);
    sub_100016504();
    sub_1000164A0((void *)&_mh_execute_header, v17, v18, "%{public}s: Invalid state to handle pairing initiation request: %{public}s", (uint8_t *)v19);
    sub_10002D80C(v20);
    sub_100012398(v20);
    sub_100012398(v19);
  }
  v30 = *(_QWORD *)(v5 - 168);
  v31 = *(uint64_t **)(v5 - 160);
  *v31 = v10;
  sub_10002D7F0((uint64_t)v31, v30);
  swift_errorRetain(v10);
  v1(v31);
  swift_errorRelease(v10);
  sub_10002D678((uint64_t)v31, &qword_100085A08);
  sub_1000138B4();
}

void sub_10002A3DC(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t Strong;
  uint64_t v34;
  os_log_type_t v35;
  NSObject *v36;
  void (*v37)(_QWORD, _QWORD, _QWORD);
  uint64_t v38;
  void (*v39)(_QWORD, _QWORD, _QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _BYTE v63[12];
  int v64;
  uint64_t v65;
  void (*v66)(_QWORD, _QWORD, _QWORD);
  _BYTE *v67;
  os_log_t v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  void (*v78)(_QWORD *);
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83[2];
  char v84[32];

  v70 = a5;
  v77 = a4;
  v78 = a3;
  v72 = type metadata accessor for DeviceServiceEvent(0);
  v80 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72, v7);
  v71 = &v63[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v79 = type metadata accessor for PairingChallengeEvent(0);
  v74 = *(_QWORD *)(v79 - 8);
  v10 = __chkstk_darwin(v79, v9);
  v81 = &v63[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v10, v12);
  v69 = &v63[-v14];
  __chkstk_darwin(v13, v15);
  v17 = &v63[-v16];
  v75 = sub_1000150C0(&qword_100085A08);
  __chkstk_darwin(v75, v18);
  v76 = &v63[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for PairingOutcome(0);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = __chkstk_darwin(v20, v22);
  v25 = &v63[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = __chkstk_darwin(v23, v26);
  v29 = &v63[-v28];
  __chkstk_darwin(v27, v30);
  v32 = &v63[-v31];
  a2 += 16;
  swift_beginAccess(a2, v84, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v34 = Strong;
    v35 = static os_log_type_t.default.getter(Strong);
    v36 = qword_1000886E0;
    v37 = *(void (**)(_QWORD, _QWORD, _QWORD))(v21 + 16);
    v73 = a1;
    v38 = a1;
    v39 = v37;
    v37(v32, v38, v20);
    v68 = v36;
    if (os_log_type_enabled(v36, v35))
    {
      swift_retain(v34);
      v40 = swift_slowAlloc(22, -1);
      v67 = v17;
      v41 = v40;
      v65 = swift_slowAlloc(64, -1);
      v83[0] = v65;
      *(_DWORD *)v41 = 136446466;
      v66 = v39;
      v64 = v35;
      v42 = *(_QWORD *)(v34 + 16);
      v43 = *(_QWORD *)(v34 + 24);
      swift_bridgeObjectRetain(v43);
      sub_100010D40(v42, v43, v83);
      v82 = v44;
      v39 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v41 + 4);
      swift_release(v34);
      swift_bridgeObjectRelease(v43);
      *(_WORD *)(v41 + 12) = 2082;
      v39(v29, v32, v20);
      v45 = String.init<A>(describing:)(v29, v20);
      v47 = v46;
      sub_100010D40(v45, v46, v83);
      v82 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v41 + 14);
      swift_bridgeObjectRelease(v47);
      (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v32, v20);
      _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v64, "%{public}s: Received pairing outcome %{public}s", (uint8_t *)v41, 0x16u);
      v49 = v65;
      swift_arrayDestroy(v65, 2);
      swift_slowDealloc(v49, -1, -1);
      v50 = v41;
      v17 = v67;
      swift_slowDealloc(v50, -1, -1);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v32, v20);
    }
    v51 = v80;
    v39(v25, v73, v20);
    v52 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v21 + 88))(v25, v20);
    if (v52 == enum case for PairingOutcome.failure(_:))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v21 + 96))(v25, v20);
      v53 = *(_QWORD *)v25;
      v54 = v75;
      v55 = v76;
      *v76 = *(_QWORD *)v25;
      swift_storeEnumTagMultiPayload(v55, v54, 1);
      swift_errorRetain(v53);
      v78(v55);
      swift_errorRelease(v53);
      swift_release(v34);
      v56 = (uint64_t)v55;
LABEL_7:
      sub_10002D678(v56, &qword_100085A08);
      return;
    }
    if (v52 == enum case for PairingOutcome.challenge(_:))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v21 + 96))(v25, v20);
      PairingChallengeEvent.init(lastAttemptIncorrect:throttleSeconds:)(*v25, *((_QWORD *)v25 + 1), v25[16]);
      v57 = v71;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v74 + 16))(v71, v17, v79);
      v58 = v72;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v51 + 104))(v57, enum case for DeviceServiceEvent.pairingChallenge(_:), v72);
      sub_10000EC40(&qword_1000859F0, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceServiceEvent, (uint64_t)&protocol conformance descriptor for DeviceServiceEvent);
      v60 = v59;
      sub_10000EC40(&qword_1000859F8, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceServiceEvent, (uint64_t)&protocol conformance descriptor for DeviceServiceEvent);
      XPCConnection.send<A>(value:)(v57, v58, v60, v61);
      swift_release(v34);
      (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v57, v58);
      (*(void (**)(_BYTE *, uint64_t))(v74 + 8))(v17, v79);
      return;
    }
    if (v52 == enum case for PairingOutcome.success(_:))
    {
      v62 = v76;
      sub_100028C0C();
      swift_storeEnumTagMultiPayload(v62, v75, 0);
      v78(v62);
      swift_release(v34);
      v56 = (uint64_t)v62;
      goto LABEL_7;
    }
    if (v52 == enum case for PairingOutcome.awaitingUserConsent(_:))
    {
      swift_release(v34);
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "remotepairingdeviced/DiscoveredPairableHost.swift", 49, 2, 266, 0);
      __break(1u);
    }
  }
}

void sub_10002AC18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_100011610();
  v3 = v2;
  v5 = v4;
  v36 = v6;
  v8 = v7;
  v10 = v9;
  v37 = sub_10002D724();
  sub_1000115F0();
  __chkstk_darwin(v11, v12);
  sub_100012460();
  v14 = static os_log_type_t.default.getter(v13);
  v15 = qword_1000886E0;
  v16 = v14;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v14))
  {
    sub_10000E49C();
    v17 = (uint8_t *)sub_1000123C4(12);
    v35 = sub_1000123C4(32);
    v39 = v35;
    *(_DWORD *)v17 = 136446210;
    v33 = v17 + 4;
    v34 = v17;
    v18 = v8;
    v19 = v10;
    v20 = v3;
    v22 = *(_QWORD *)(v0 + 16);
    v21 = *(_QWORD *)(v0 + 24);
    sub_100016498();
    v23 = v22;
    v3 = v20;
    v10 = v19;
    v8 = v18;
    sub_100010D40(v23, v21, &v39);
    v38 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v33);
    sub_1000118D4();
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s: Initating pairing", v34, 0xCu);
    sub_1000135B4(v35);
    sub_100012398(v35);
    sub_100012398((uint64_t)v34);
  }
  v25 = (int *)sub_1000150C0(&qword_100085918);
  v26 = v25[12];
  v27 = v25[16];
  v28 = (_QWORD *)(v1 + v25[20]);
  sub_100011638();
  v29 = sub_10002D7B8();
  v30(v29, v36);
  *(_QWORD *)(v1 + v26) = v8;
  *(_QWORD *)(v1 + v27) = v10;
  *v28 = v5;
  v28[1] = v3;
  swift_storeEnumTagMultiPayload(v1, v37, 2);
  sub_100011948();
  sub_100026FF4();
  swift_retain(v3);
  sub_100027668(v1);
  v31 = sub_1000138D4((uint64_t)&unk_10007B2C8, 24);
  swift_weakInit(v31 + 16, v0);
  v32 = sub_1000138D4((uint64_t)&unk_10007B340, 32);
  *(_QWORD *)(v32 + 16) = v31;
  *(_QWORD *)(v32 + 24) = v8;
  sub_100011948();
  swift_retain(v31);
  dispatch thunk of ControlChannelConnection.initiatePairing(withOptions:pairingOutcomeHandler:)(0, sub_10002D548, v32);
  sub_1000115DC();
  swift_release(v32);
  sub_1000138B4();
}

uint64_t sub_10002AE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(_QWORD *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _QWORD *v56;
  os_log_type_t v57;
  NSObject *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  unsigned int v78;
  char *v79;
  uint64_t v80;
  void (*v81)(_QWORD *);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[24];
  char v95[32];

  v88 = a1;
  v5 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
  v87 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v86 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PairingOutcome(0);
  v90 = *(_QWORD *)(v8 - 8);
  v91 = v8;
  v10 = __chkstk_darwin(v8, v9);
  v89 = (uint64_t *)((char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v75 - v13;
  v15 = type metadata accessor for DiscoveredPairableHost.State(0);
  v17 = __chkstk_darwin(v15, v16);
  v85 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v75 - v20;
  v22 = type metadata accessor for DiscoveredBonjourAdvert(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 16, v95, 0, 0);
  result = swift_weakLoadStrong(a2 + 16);
  if (result)
  {
    v28 = result;
    v29 = result + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
    swift_beginAccess(result + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, v94, 0, 0);
    sub_10002D454(v29, (uint64_t)v21);
    if (swift_getEnumCaseMultiPayload(v21, v15) != 2)
    {
      swift_release(v28);
      return sub_10002CFE8((uint64_t)v21);
    }
    v83 = v5;
    v84 = v28;
    v30 = a3;
    v31 = v22;
    v32 = (int *)sub_1000150C0(&qword_100085918);
    v33 = *(_QWORD *)&v21[v32[12]];
    swift_release(*(_QWORD *)&v21[v32[16]]);
    v34 = &v21[v32[20]];
    v35 = *(void (**)(_QWORD *))v34;
    v36 = *((_QWORD *)v34 + 1);
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v26, v21, v31);
    if (v33 != v30)
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v31);
      swift_release(v84);
      swift_release(v36);
      return swift_release(v33);
    }
    v81 = v35;
    v82 = v31;
    v37 = v90;
    v38 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v14, v88, v91);
    v39 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v14, v38);
    v40 = v39;
    if ((_DWORD)v39 == enum case for PairingOutcome.failure(_:))
    {
      (*(void (**)(char *, uint64_t))(v37 + 96))(v14, v38);
      v41 = *(_QWORD *)v14;
      v79 = v26;
      v80 = v23;
      v42 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
      v43 = v85;
      v42(v85, v26, v82);
      swift_storeEnumTagMultiPayload(v43, v15, 0);
      v44 = v43;
      v45 = v84;
      sub_100027668(v44);
      v46 = v89;
      *v89 = v41;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v37 + 104))(v46, v40, v38);
      swift_errorRetain(v41);
      v81(v46);
      (*(void (**)(_QWORD *, uint64_t))(v37 + 8))(v46, v38);
      v48 = v86;
      v47 = v87;
      v49 = v83;
      (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v86, enum case for ControlChannelConnection.InvalidationReason.onDemandTaskCompleted(_:), v83);
      dispatch thunk of ControlChannelConnection.invalidate(for:)(v48);
      swift_release(v36);
      swift_errorRelease(v41);
      swift_release(v30);
      swift_release(v45);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
      v50 = v79;
      v51 = *(uint64_t (**)(char *, uint64_t))(v80 + 8);
      return v51(v50, v82);
    }
    v52 = v30;
    if ((_DWORD)v39 == enum case for PairingOutcome.challenge(_:))
    {
      v53 = v91;
      (*(void (**)(char *, uint64_t))(v37 + 96))(v14, v91);
      v54 = *((_QWORD *)v14 + 1);
      v55 = v14[16];
      v56 = v89;
      *(_BYTE *)v89 = *v14;
      v56[1] = v54;
      *((_BYTE *)v56 + 16) = v55;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v37 + 104))(v56, v40, v53);
LABEL_16:
      v81(v56);
      swift_release(v52);
      swift_release(v84);
      swift_release(v36);
      (*(void (**)(_QWORD *, uint64_t))(v37 + 8))(v56, v53);
      v51 = *(uint64_t (**)(char *, uint64_t))(v23 + 8);
      v50 = v26;
      return v51(v50, v82);
    }
    if ((_DWORD)v39 != enum case for PairingOutcome.success(_:))
    {
      if ((_DWORD)v39 != enum case for PairingOutcome.awaitingUserConsent(_:))
      {
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "remotepairingdeviced/DiscoveredPairableHost.swift", 49, 2, 308, 0);
        __break(1u);
        return result;
      }
      v56 = v89;
      v53 = v91;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v37 + 104))(v89, v39, v91);
      goto LABEL_16;
    }
    v78 = v39;
    v88 = v36;
    v57 = static os_log_type_t.default.getter(v39);
    v58 = qword_1000886E0;
    v59 = v57;
    v60 = os_log_type_enabled((os_log_t)qword_1000886E0, v57);
    v61 = v84;
    if (v60)
    {
      swift_retain(v84);
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v77 = swift_slowAlloc(32, -1);
      v93 = v77;
      *(_DWORD *)v62 = 136446210;
      v76 = v62 + 4;
      v63 = *(_QWORD *)(v61 + 24);
      v75 = *(_QWORD *)(v61 + 16);
      swift_bridgeObjectRetain(v63);
      sub_100010D40(v75, v63, &v93);
      v92 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v76);
      swift_release(v61);
      swift_bridgeObjectRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "%{public}s: Successfully wirelessly paired with host", v62, 0xCu);
      v65 = v77;
      swift_arrayDestroy(v77, 1);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v62, -1, -1);
    }
    v66 = v85;
    v67 = v82;
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v85, v26, v82);
    swift_storeEnumTagMultiPayload(v66, v15, 3);
    sub_100027668(v66);
    v69 = v89;
    v68 = v90;
    v70 = v91;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v90 + 104))(v89, v78, v91);
    v71 = v88;
    v81(v69);
    (*(void (**)(_QWORD *, uint64_t))(v68 + 8))(v69, v70);
    v73 = v86;
    v72 = v87;
    v74 = v83;
    (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v86, enum case for ControlChannelConnection.InvalidationReason.devicePaired(_:), v83);
    dispatch thunk of ControlChannelConnection.invalidate(for:)(v73);
    swift_release(v52);
    swift_release(v61);
    swift_release(v71);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v74);
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v67);
  }
  return result;
}

void sub_10002B548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD, uint64_t);
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v76[16];
  uint64_t v77[6];

  sub_100011610();
  v2 = type metadata accessor for DeviceServiceEvent(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  sub_1000156C4();
  v61 = v5;
  sub_100024B80();
  __chkstk_darwin(v6, v7);
  v69 = (char *)v59 - v8;
  sub_100024B80();
  __chkstk_darwin(v9, v10);
  sub_10002D754();
  sub_100028C0C();
  v11 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v3 + 104);
  v62 = v0;
  v12 = v11(v0, enum case for DeviceServiceEvent.pairableHostFound(_:), v2);
  v13 = static os_log_type_t.debug.getter(v12);
  v14 = qword_1000886E0;
  v15 = v13;
  v16 = os_log_type_enabled((os_log_t)qword_1000886E0, v13);
  v70 = v3;
  if (v16)
  {
    sub_10000E49C();
    v17 = sub_1000123C4(22);
    v18 = sub_1000123C4(32);
    v77[0] = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = v2;
    v21 = *(_QWORD *)(v1 + 16);
    v20 = *(_QWORD *)(v1 + 24);
    sub_10002D7B0();
    sub_100010D40(v21, v20, v77);
    v75 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v17 + 4);
    sub_100016504();
    *(_WORD *)(v17 + 12) = 2048;
    v23 = (uint64_t *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers);
    sub_1000156AC(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers, (uint64_t)&v72);
    v24 = *v23;
    swift_bridgeObjectRetain(v24);
    v26 = v14;
    v27 = sub_100012A70(v25);
    swift_bridgeObjectRelease(v24);
    v75 = v27;
    v2 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v17 + 14);
    sub_1000118D4();
    sub_1000164A0((void *)&_mh_execute_header, v26, v15, "%{public}s: Publishing discovered host state changes to %ld peers", (uint8_t *)v17);
    sub_1000135B4(v18);
    sub_100012398(v18);
    v28 = v17;
    v3 = v70;
    sub_100012398(v28);
  }
  v29 = (uint64_t *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers);
  sub_1000156AC((uint64_t)v29, (uint64_t)&v75);
  v30 = *v29;
  if ((*v29 & 0xC000000000000001) != 0)
  {
    if (v30 < 0)
      v31 = *v29;
    else
      v31 = v30 & 0xFFFFFFFFFFFFFF8;
    sub_100016498();
    v32 = __CocoaSet.makeIterator()(v31);
    v33 = sub_10002D708();
    sub_10000EC40(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
    v35 = Set.Iterator.init(_cocoa:)(v32, v33, v34);
    v30 = v77[0];
    v66 = v77[1];
    v38 = v77[2];
    v37 = v77[3];
    v39 = v77[4];
  }
  else
  {
    v40 = -1 << *(_BYTE *)(v30 + 32);
    v66 = v30 + 56;
    v38 = ~v40;
    sub_1000139EC();
    v39 = v41 & v42;
    v35 = sub_100016498();
    v37 = 0;
  }
  v43 = v62;
  v64 = v30 & 0x7FFFFFFFFFFFFFFFLL;
  v65 = (unint64_t)(v38 + 64) >> 6;
  *(_QWORD *)&v36 = 136315394;
  v60 = v36;
  v59[1] = (char *)&type metadata for Any + 8;
  v63 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  v67 = v38;
  v68 = v30;
  while (v30 < 0)
  {
    v46 = __CocoaSet.Iterator.next()(v35);
    if (!v46)
      goto LABEL_35;
    v47 = v46;
    v73 = v46;
    sub_10002D708();
    sub_10002D858();
    sub_10002D7F8((uint64_t)&v74, (uint64_t)&v73, v63);
    v48 = v74;
    swift_unknownObjectRelease(v47);
    v45 = v37;
    v71 = v39;
    if (!v48)
      goto LABEL_35;
LABEL_28:
    sub_10000EC40(&qword_1000859F0, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceServiceEvent, (uint64_t)&protocol conformance descriptor for DeviceServiceEvent);
    v55 = v54;
    sub_10000EC40(&qword_1000859F8, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceServiceEvent, (uint64_t)&protocol conformance descriptor for DeviceServiceEvent);
    XPCConnection.send<A>(value:)(v43, v2, v55, v56);
    v35 = sub_1000118D4();
    v37 = v45;
    v39 = v71;
  }
  if (v39)
  {
    v71 = (v39 - 1) & v39;
    v44 = __clz(__rbit64(v39)) | (v37 << 6);
    v45 = v37;
LABEL_27:
    v53 = *(_QWORD *)(*(_QWORD *)(v30 + 48) + 8 * v44);
    sub_10000E49C();
    if (!v53)
      goto LABEL_35;
    goto LABEL_28;
  }
  v45 = v37 + 1;
  if (!__OFADD__(v37, 1))
  {
    if (v45 >= v65)
      goto LABEL_35;
    v49 = *(_QWORD *)(v66 + 8 * v45);
    if (!v49)
    {
      sub_10002D764();
      if (v51 == v52)
        goto LABEL_35;
      v49 = *(_QWORD *)(v66 + 8 * v50);
      if (v49)
        goto LABEL_25;
      sub_10002D764();
      if (v51 == v52)
        goto LABEL_35;
      v49 = *(_QWORD *)(v66 + 8 * v50);
      if (v49)
      {
LABEL_25:
        v45 = v50;
      }
      else
      {
        v45 = v37 + 4;
        if (v37 + 4 >= v65)
          goto LABEL_35;
        v49 = *(_QWORD *)(v66 + 8 * v45);
        if (!v49)
        {
          while (1)
          {
            sub_10002D764();
            if (v51 == v52)
              break;
            v49 = *(_QWORD *)(v66 + 8 * v57);
            v58 = v57 + 1;
            if (v49)
            {
              v45 = v58 - 1;
              goto LABEL_26;
            }
          }
LABEL_35:
          sub_100018CD4(v30);
          sub_10002D814(v43, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
          sub_1000138B4();
          return;
        }
      }
    }
LABEL_26:
    v71 = (v49 - 1) & v49;
    v44 = __clz(__rbit64(v49)) + (v45 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

void sub_10002BB94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD v25[20];
  uint64_t v26;

  sub_100011610();
  v25[17] = v1;
  v25[16] = *(_QWORD *)(type metadata accessor for ControlChannelConnection.InvalidationReason(0) - 8);
  sub_1000123E4();
  __chkstk_darwin(v2, v3);
  v25[15] = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100011978();
  v6 = type metadata accessor for POSIXError(v5);
  v25[11] = *(_QWORD *)(v6 - 8);
  v25[12] = v6;
  sub_1000123E4();
  __chkstk_darwin(v7, v8);
  v25[10] = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100011978();
  v11 = type metadata accessor for PairingOutcome(v10);
  v25[13] = *(_QWORD *)(v11 - 8);
  v25[14] = v11;
  sub_1000123E4();
  __chkstk_darwin(v12, v13);
  v14 = sub_10000E4E0();
  sub_1000115F0();
  __chkstk_darwin(v15, v16);
  sub_100013A1C();
  __chkstk_darwin(v17, v18);
  v20 = (char *)v25 - v19;
  v21 = sub_100011638();
  __chkstk_darwin(v21, v22);
  sub_1000162B4();
  v23 = v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_1000156AC(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)&v26);
  sub_10002D454(v23, (uint64_t)v20);
  v24 = (char *)sub_10002BCEC + 4 * byte_100065F14[swift_getEnumCaseMultiPayload(v20, v14)];
  __asm { BR              X10 }
}

void sub_10002BCEC()
{
  uint64_t v0;
  uint64_t v1;

  sub_100015DEC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000138B4();
}

void sub_10002BFBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[40];
  _BYTE v39[40];
  _QWORD v40[5];

  sub_100011610();
  v36 = v1;
  v37 = v2;
  v4 = v3;
  v6 = v5;
  v7 = type metadata accessor for DiscoveredPairableHost.State(0);
  sub_1000115F0();
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ControlChannelConnection.Options(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  sub_100011928();
  v17 = v16 - v15;
  v18 = *(void **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__queue);
  DiscoveredBonjourAdvert.createTransport(withTargetQueue:)(v40, v18);
  sub_10002D498((uint64_t)v40, (uint64_t)v39);
  v19 = v18;
  ControlChannelConnection.Options.Host.init(attemptPairVerify:)(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v17, enum case for ControlChannelConnection.Options.host(_:), v12);
  sub_10002D498(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__pairingManager, (uint64_t)v38);
  v20 = type metadata accessor for ControlChannelConnection(0);
  v21 = static ControlChannelConnection.defaultMaxReconnectionAttempts.getter(v20);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v22 = ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)(v39, v19, v17, v21, v38, 0);
  v23 = sub_1000138D4((uint64_t)&unk_10007B2C8, 24);
  sub_100015700(v23);
  v24 = sub_1000138D4((uint64_t)&unk_10007B2F0, 32);
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = v22;
  swift_retain(v23);
  sub_1000159B8();
  dispatch thunk of ControlChannelConnection.invalidationHandler.setter(sub_10002D500, v24);
  swift_release(v23);
  v25 = sub_1000138D4((uint64_t)&unk_10007B2C8, 24);
  sub_100015700(v25);
  v26 = sub_1000138D4((uint64_t)&unk_10007B318, 32);
  *(_QWORD *)(v26 + 16) = v25;
  *(_QWORD *)(v26 + 24) = v22;
  sub_1000159B8();
  sub_1000144D8();
  dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter(sub_10002D524, v26);
  sub_100015384();
  v27 = (int *)sub_1000150C0(&qword_100085918);
  v28 = v27[12];
  v29 = v27[16];
  v30 = &v11[v27[20]];
  sub_100011638();
  v31 = sub_10002D7B8();
  v32(v31, v6);
  *(_QWORD *)&v11[v28] = v22;
  *(_QWORD *)&v11[v29] = v4;
  v33 = v37;
  *(_QWORD *)v30 = v36;
  *((_QWORD *)v30 + 1) = v33;
  sub_10002D7F0((uint64_t)v11, v7);
  sub_1000159B8();
  sub_10001612C();
  sub_10000E49C();
  v34 = sub_100027668(v11);
  dispatch thunk of ControlChannelConnection.start()(v34);
  sub_1000162AC();
  sub_100010DFC(v40);
  sub_1000138B4();
}

uint64_t sub_10002C220(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];

  v5 = a1 + 16;
  sub_1000156AC(a1 + 16, (uint64_t)v7);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    a3(a2);
    return sub_1000115DC();
  }
  return result;
}

void sub_10002C280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[7];
  uint64_t v16;

  sub_100011610();
  v1 = type metadata accessor for PairingOutcome(0);
  v15[3] = *(_QWORD *)(v1 - 8);
  v15[4] = v1;
  sub_1000123E4();
  __chkstk_darwin(v2, v3);
  v4 = sub_100013A2C();
  __chkstk_darwin(v4, v5);
  v6 = sub_10000E4E0();
  sub_1000115F0();
  __chkstk_darwin(v7, v8);
  sub_100013A1C();
  __chkstk_darwin(v9, v10);
  v12 = (char *)v15 - v11;
  v13 = v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_1000156AC(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)&v16);
  sub_10002D454(v13, (uint64_t)v12);
  v14 = (char *)sub_10002C368 + 4 * byte_100065F19[swift_getEnumCaseMultiPayload(v12, v6)];
  __asm { BR              X10 }
}

void sub_10002C368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = sub_1000165FC(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v6 = static os_log_type_t.error.getter(v5);
  v7 = qword_1000886E0;
  v8 = v6;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v6))
  {
    sub_1000165F4(v0);
    sub_10000E49C();
    v9 = sub_1000123C4(22);
    v10 = sub_1000123C4(64);
    *(_QWORD *)(v4 - 112) = v10;
    *(_DWORD *)v9 = 136446466;
    v11 = *(_QWORD *)(v1 + 16);
    v12 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain(v12);
    sub_100010D40(v11, v12, (uint64_t *)(v4 - 112));
    *(_QWORD *)(v4 - 120) = v13;
    sub_100015FD0();
    sub_1000118D4();
    v14 = swift_bridgeObjectRelease(v12);
    *(_WORD *)(v9 + 12) = 2080;
    v15 = dispatch thunk of ControlChannelConnection.id.getter(v14);
    v17 = v16;
    sub_100010D40(v15, v16, (uint64_t *)(v4 - 112));
    *(_QWORD *)(v4 - 120) = v18;
    sub_100015FD0();
    sub_100015870(v0);
    swift_bridgeObjectRelease(v17);
    sub_1000164A0((void *)&_mh_execute_header, v7, v8, "%{public}s: Unexpectedly received control channel invalidation for %s while in state unavailable", (uint8_t *)v9);
    sub_10002D80C(v10);
    sub_100012398(v10);
    sub_100012398(v9);
  }
  sub_1000138B4();
}

void sub_10002C624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_100011610();
  v4 = v3;
  v5 = type metadata accessor for DiscoveredPairableHost.State(0);
  sub_1000115F0();
  __chkstk_darwin(v6, v7);
  sub_100013A2C();
  sub_1000152C4();
  __chkstk_darwin(v8, v9);
  sub_100011928();
  v12 = v11 - v10;
  v13 = v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_1000156AC(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)&v15);
  sub_10002D454(v13, v1);
  if (swift_getEnumCaseMultiPayload(v1, v5) == 1)
  {
    v14 = *(_QWORD *)(v1 + *(int *)(sub_1000150C0(&qword_100085918) + 48));
    sub_100015494(v12, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
    if (v14 == v4)
    {
      sub_10002AC18();
      sub_10001195C();
      sub_100016234();
      sub_100015384();
      sub_1000165FC(v12, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    }
    else
    {
      sub_1000165FC(v12, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      sub_100012494();
      sub_100016234();
      sub_100015384();
    }
  }
  else
  {
    sub_10002CFE8(v1);
  }
  sub_1000138B4();
}

void sub_10002C75C()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  v1 = sub_1000118FC();
  sub_100013AF4(v1);
  sub_100010DFC((_QWORD *)((char *)v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__pairingManager));

  sub_10002CFE8((uint64_t)v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__transactions));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___listener));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___dispatcher));
  sub_100014510();
}

uint64_t sub_10002C810()
{
  uint64_t v0;

  sub_10002C75C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10002C834()
{
  return type metadata accessor for DiscoveredPairableHost(0);
}

uint64_t type metadata accessor for DiscoveredPairableHost(uint64_t a1)
{
  return sub_10002C934(a1, qword_100085768, (uint64_t)&nominal type descriptor for DiscoveredPairableHost);
}

uint64_t sub_10002C850(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[11];

  v5[0] = &unk_100065F88;
  v5[1] = &unk_100065F88;
  v5[2] = &unk_100065FA0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    v5[4] = &unk_100065FB8;
    v5[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = type metadata accessor for DiscoveredPairableHost.State(319);
    if (v4 <= 0x3F)
    {
      v5[6] = *(_QWORD *)(result - 8) + 64;
      v5[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[9] = &unk_100065FD0;
      v5[10] = &unk_100065FD0;
      return swift_updateClassMetadata2(a1, 256, 11, v5, a1 + 80);
    }
  }
  return result;
}

uint64_t type metadata accessor for DiscoveredPairableHost.State(uint64_t a1)
{
  return sub_10002C934(a1, qword_100085990, (uint64_t)&nominal type descriptor for DiscoveredPairableHost.State);
}

uint64_t sub_10002C934(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t *sub_10002C964(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v12);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = type metadata accessor for DiscoveredBonjourAdvert(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_9;
      case 1u:
        v13 = type metadata accessor for DiscoveredBonjourAdvert(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v14 = (int *)sub_1000150C0(&qword_100085918);
        v15 = v14[12];
        v16 = *(uint64_t *)((char *)a2 + v15);
        *(uint64_t *)((char *)a1 + v15) = v16;
        v17 = v14[16];
        v18 = *(uint64_t *)((char *)a2 + v17);
        *(uint64_t *)((char *)a1 + v17) = v18;
        v19 = v14[20];
        v20 = (uint64_t *)((char *)a1 + v19);
        v21 = (uint64_t *)((char *)a2 + v19);
        v22 = v21[1];
        *v20 = *v21;
        v20[1] = v22;
        swift_retain(v16);
        swift_retain(v18);
        swift_retain(v22);
        v9 = a1;
        v10 = a3;
        v11 = 1;
        goto LABEL_9;
      case 2u:
        v23 = type metadata accessor for DiscoveredBonjourAdvert(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
        v24 = (int *)sub_1000150C0(&qword_100085918);
        v25 = v24[12];
        v26 = *(uint64_t *)((char *)a2 + v25);
        *(uint64_t *)((char *)a1 + v25) = v26;
        v27 = v24[16];
        v28 = *(uint64_t *)((char *)a2 + v27);
        *(uint64_t *)((char *)a1 + v27) = v28;
        v29 = v24[20];
        v30 = (uint64_t *)((char *)a1 + v29);
        v31 = (uint64_t *)((char *)a2 + v29);
        v32 = v31[1];
        *v30 = *v31;
        v30[1] = v32;
        swift_retain(v26);
        swift_retain(v28);
        swift_retain(v32);
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_9;
      case 3u:
        v33 = type metadata accessor for DiscoveredBonjourAdvert(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(a1, a2, v33);
        v9 = a1;
        v10 = a3;
        v11 = 3;
LABEL_9:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10002CB64(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int *v6;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 3:
      v4 = type metadata accessor for DiscoveredBonjourAdvert(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 1:
    case 2:
      v5 = type metadata accessor for DiscoveredBonjourAdvert(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      v6 = (int *)sub_1000150C0(&qword_100085918);
      swift_release(*(_QWORD *)(a1 + v6[12]));
      swift_release(*(_QWORD *)(a1 + v6[16]));
      result = swift_release(*(_QWORD *)(a1 + v6[20] + 8));
      break;
    default:
      return result;
  }
  return result;
}

char *sub_10002CC28(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for DiscoveredBonjourAdvert(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_7;
    case 1u:
      v10 = type metadata accessor for DiscoveredBonjourAdvert(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = (int *)sub_1000150C0(&qword_100085918);
      v12 = v11[12];
      v13 = *(_QWORD *)&a2[v12];
      *(_QWORD *)&a1[v12] = v13;
      v14 = v11[16];
      v15 = *(_QWORD *)&a2[v14];
      *(_QWORD *)&a1[v14] = v15;
      v16 = v11[20];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = *((_QWORD *)v18 + 1);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *((_QWORD *)v17 + 1) = v19;
      swift_retain(v13);
      swift_retain(v15);
      swift_retain(v19);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_7;
    case 2u:
      v20 = type metadata accessor for DiscoveredBonjourAdvert(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
      v21 = (int *)sub_1000150C0(&qword_100085918);
      v22 = v21[12];
      v23 = *(_QWORD *)&a2[v22];
      *(_QWORD *)&a1[v22] = v23;
      v24 = v21[16];
      v25 = *(_QWORD *)&a2[v24];
      *(_QWORD *)&a1[v24] = v25;
      v26 = v21[20];
      v27 = &a1[v26];
      v28 = &a2[v26];
      v29 = *((_QWORD *)v28 + 1);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = v29;
      swift_retain(v23);
      swift_retain(v25);
      swift_retain(v29);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_7;
    case 3u:
      v30 = type metadata accessor for DiscoveredBonjourAdvert(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(a1, a2, v30);
      v7 = a1;
      v8 = a3;
      v9 = 3;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_10002CE00(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 != a2)
  {
    sub_10002CFE8((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for DiscoveredBonjourAdvert(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_8;
      case 1u:
        v10 = type metadata accessor for DiscoveredBonjourAdvert(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = (int *)sub_1000150C0(&qword_100085918);
        v12 = v11[12];
        v13 = *(_QWORD *)&a2[v12];
        *(_QWORD *)&a1[v12] = v13;
        v14 = v11[16];
        v15 = *(_QWORD *)&a2[v14];
        *(_QWORD *)&a1[v14] = v15;
        v16 = v11[20];
        v17 = &a1[v16];
        v18 = &a2[v16];
        v19 = *((_QWORD *)v18 + 1);
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *((_QWORD *)v17 + 1) = v19;
        swift_retain(v13);
        swift_retain(v15);
        swift_retain(v19);
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_8;
      case 2u:
        v20 = type metadata accessor for DiscoveredBonjourAdvert(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
        v21 = (int *)sub_1000150C0(&qword_100085918);
        v22 = v21[12];
        v23 = *(_QWORD *)&a2[v22];
        *(_QWORD *)&a1[v22] = v23;
        v24 = v21[16];
        v25 = *(_QWORD *)&a2[v24];
        *(_QWORD *)&a1[v24] = v25;
        v26 = v21[20];
        v27 = &a1[v26];
        v28 = &a2[v26];
        v29 = *((_QWORD *)v28 + 1);
        *(_QWORD *)v27 = *(_QWORD *)v28;
        *((_QWORD *)v27 + 1) = v29;
        swift_retain(v23);
        swift_retain(v25);
        swift_retain(v29);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_8;
      case 3u:
        v30 = type metadata accessor for DiscoveredBonjourAdvert(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(a1, a2, v30);
        v7 = a1;
        v8 = a3;
        v9 = 3;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10002CFE8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DiscoveredPairableHost.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_10002D024(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for DiscoveredBonjourAdvert(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_7;
    case 1u:
      v10 = type metadata accessor for DiscoveredBonjourAdvert(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = (int *)sub_1000150C0(&qword_100085918);
      *(_QWORD *)&a1[v11[12]] = *(_QWORD *)&a2[v11[12]];
      *(_QWORD *)&a1[v11[16]] = *(_QWORD *)&a2[v11[16]];
      *(_OWORD *)&a1[v11[20]] = *(_OWORD *)&a2[v11[20]];
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_7;
    case 2u:
      v12 = type metadata accessor for DiscoveredBonjourAdvert(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v13 = (int *)sub_1000150C0(&qword_100085918);
      *(_QWORD *)&a1[v13[12]] = *(_QWORD *)&a2[v13[12]];
      *(_QWORD *)&a1[v13[16]] = *(_QWORD *)&a2[v13[16]];
      *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_7;
    case 3u:
      v14 = type metadata accessor for DiscoveredBonjourAdvert(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      v7 = a1;
      v8 = a3;
      v9 = 3;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_10002D1BC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_10002CFE8((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for DiscoveredBonjourAdvert(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_8;
      case 1u:
        v10 = type metadata accessor for DiscoveredBonjourAdvert(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = (int *)sub_1000150C0(&qword_100085918);
        *(_QWORD *)&a1[v11[12]] = *(_QWORD *)&a2[v11[12]];
        *(_QWORD *)&a1[v11[16]] = *(_QWORD *)&a2[v11[16]];
        *(_OWORD *)&a1[v11[20]] = *(_OWORD *)&a2[v11[20]];
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_8;
      case 2u:
        v12 = type metadata accessor for DiscoveredBonjourAdvert(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        v13 = (int *)sub_1000150C0(&qword_100085918);
        *(_QWORD *)&a1[v13[12]] = *(_QWORD *)&a2[v13[12]];
        *(_QWORD *)&a1[v13[16]] = *(_QWORD *)&a2[v13[16]];
        *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_8;
      case 3u:
        v14 = type metadata accessor for DiscoveredBonjourAdvert(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        v7 = a1;
        v8 = a3;
        v9 = 3;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10002D370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10002D380(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _BYTE v10[32];
  _QWORD v11[4];

  result = type metadata accessor for DiscoveredBonjourAdvert(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    v11[0] = v4;
    v6 = v4;
    v7 = (char *)&value witness table for Builtin.NativeObject + 64;
    v8 = (char *)&value witness table for Builtin.NativeObject + 64;
    v9 = (char *)&value witness table for () + 64;
    swift_getTupleTypeLayout(v10, 0, 4, &v6);
    v11[1] = v10;
    v6 = v4;
    v7 = (char *)&value witness table for Builtin.NativeObject + 64;
    v8 = (char *)&value witness table for Builtin.NativeObject + 64;
    v9 = (char *)&value witness table for () + 64;
    swift_getTupleTypeLayout(v5, 0, 4, &v6);
    v11[2] = v5;
    v11[3] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 4, v11);
    return 0;
  }
  return result;
}

uint64_t sub_10002D454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DiscoveredPairableHost.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10002D498(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_100014510();
}

uint64_t sub_10002D4D8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002D500()
{
  uint64_t v0;

  return sub_10002C220(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(uint64_t))sub_10002C280);
}

uint64_t sub_10002D524()
{
  uint64_t v0;

  return sub_10002C220(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(uint64_t))sub_10002C624);
}

uint64_t sub_10002D548(uint64_t a1)
{
  uint64_t v1;

  return sub_10002AE40(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10002D550()
{
  uint64_t v0;

  sub_1000135FC();
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10002D580(uint64_t a1)
{
  uint64_t v1;

  sub_10002A3DC(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD *))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10002D58C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100028CEC(a1, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_10002D5A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_1000284F8(a1, a2, v2);
}

uint64_t sub_10002D5BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_1000285AC(a1, a2, v2);
}

uint64_t sub_10002D5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100028634(a1, a2, a3, a4, v4);
}

uint64_t sub_10002D5DC()
{
  uint64_t v0;

  sub_1000135FC();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002D5FC(uint64_t a1)
{
  uint64_t v1;

  return sub_100027834(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10002D608()
{
  uint64_t v0;

  sub_1000135FC();
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10002D630(uint64_t a1)
{
  uint64_t v1;

  sub_100027D34(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_10002D638(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000150C0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_100014510();
}

void sub_10002D678(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_1000150C0(a2);
  sub_100013AF4(v2);
  sub_100014510();
}

uint64_t sub_10002D6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DiscoveredPairableHost.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002D6E4(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_10002D700(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010D40(a1, a2, (uint64_t *)(v2 - 72));
}

uint64_t sub_10002D708()
{
  return type metadata accessor for SystemXPCPeerConnection(0);
}

uint64_t sub_10002D710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return Error<>.init(_:_:)(a1, 0xD000000000000027, a3, v3);
}

uint64_t sub_10002D724()
{
  return type metadata accessor for DiscoveredPairableHost.State(0);
}

uint64_t sub_10002D72C(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

void sub_10002D73C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_10000EC40(a1, v3, a3);
}

uint64_t sub_10002D744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v1, v0);
}

void sub_10002D774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100010D40(v0, v1, (uint64_t *)(v2 - 72));
}

uint64_t sub_10002D784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

BOOL sub_10002D794(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10002D7B0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10002D7B8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002D7CC()
{
  return type metadata accessor for DiscoveredPairableHost.State(0);
}

uint64_t sub_10002D7D8()
{
  return static RemotePairingError.invalidOperation.getter();
}

uint64_t sub_10002D7E4()
{
  uint64_t v0;
  uint64_t v1;

  return String.init<A>(describing:)(v1 - 120, v0);
}

uint64_t sub_10002D7F0(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 1);
}

uint64_t sub_10002D7F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_dynamicCast(a1, a2, a3, v3, 7);
}

uint64_t sub_10002D804@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

uint64_t sub_10002D80C(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2);
}

uint64_t sub_10002D814@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_10002D81C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010D40(a1, a2, (uint64_t *)(v2 - 168));
}

void sub_10002D828()
{
  Swift::String v0;

  v0._countAndFlagsBits = 41;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10002D834()
{
  uint64_t v0;
  uint64_t v1;

  return String.init<A>(describing:)(v1 - 112, v0);
}

uint64_t sub_10002D840()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10002D84C()
{
  return DiscoveredBonjourAdvert.identifier.getter();
}

uint64_t sub_10002D858()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10002D864()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002D878(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 0);
}

void sub_10002D880()
{
  off_100085A90 = &off_10007A428;
}

uint64_t sub_10002D894()
{
  size_t v0;
  _QWORD *v1;
  uint64_t result;
  size_t v3;

  v3 = 0;
  sub_1000138F0("kern.bootargs", 0, &v3);
  v0 = v3;
  if ((v3 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17);
    __break(1u);
  }
  else
  {
    if (v3)
    {
      v1 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v3, &type metadata for Int8);
      v1[2] = v0;
      bzero(v1 + 4, v0);
    }
    else
    {
      v1 = &_swiftEmptyArrayStorage;
    }
    sub_1000138F0("kern.bootargs", v1 + 4, &v3);
    return sub_10002D998((uint64_t)v1);
  }
  return result;
}

uint64_t sub_10002D998(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = *(unsigned __int8 *)(result + 32);
  result += 32;
  if (v3)
  {
    v4 = 0;
    v5 = v1 - 1;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v2 + 33 + v4++))
        goto LABEL_8;
    }
    __break(1u);
    goto LABEL_10;
  }
  v4 = 0;
LABEL_8:
  v7 = static String._fromUTF8Repairing(_:)(result, v4);
  swift_bridgeObjectRelease(v2);
  return v7;
}

uint64_t sub_10002DA18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v0 = sub_10002D894();
  v2 = v1;
  if (!os_variant_allows_internal_security_policies("com.apple.RemotePairing"))
    goto LABEL_9;
  if (qword_100084990 != -1)
    swift_once(&qword_100084990, sub_10002D880);
  v3 = (char *)off_100085A90;
  v4 = *((_QWORD *)off_100085A90 + 2);
  if (v4)
  {
    swift_bridgeObjectRetain_n(off_100085A90, 2);
    for (i = (uint64_t *)(v3 + 40); ; i += 2)
    {
      v6 = *(i - 1);
      v7 = *i;
      v15 = v0;
      v16 = v2;
      v13 = v6;
      v14 = v7;
      swift_bridgeObjectRetain_n(v7, 2);
      v8._countAndFlagsBits = 12605;
      v8._object = (void *)0xE200000000000000;
      String.append(_:)(v8);
      v9 = v14;
      v10 = sub_100013A78();
      v11 = StringProtocol.contains<A>(_:)(&v13, &type metadata for String, &type metadata for String, v10, v10);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v9);
      if ((v11 & 1) != 0)
        break;
      if (!--v4)
      {
        sub_100015524();
        sub_1000157B8();
        return 0;
      }
    }
    sub_100015524();
    sub_1000157B8();
    return 1;
  }
  else
  {
LABEL_9:
    sub_100015524();
    return 0;
  }
}

uint64_t sub_10002DB5C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for SystemXPCListenerConnection(0);
  v7 = a3;
  v8 = static SystemXPCConnection.machServiceListenerConnection(name:targetQueue:)(a1, a2, a3);

  v9 = swift_dynamicCastClassUnconditional(v8, v6, 0, 0, 0);
  v10 = type metadata accessor for RemotePairingDeviceXPCServer();
  v11 = sub_1000138D4(v10, 48);
  sub_10002DC00(v9, a1, a2, v7);
  return v11;
}

_QWORD *sub_10002DC00(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v21;

  v5 = v4;
  v10 = type metadata accessor for XPCReplyProviding(0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static XPCReplyProviding.passthrough.getter(v12);
  v15 = sub_1000150C0(&qword_100085B80);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v5[2] = XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)(v14, 0, 0, 0, 0);
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_10004C404((unint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    v16 = &_swiftEmptySetSingleton;
  }
  v5[4] = a4;
  v5[5] = v16;
  v5[3] = a1;
  v17 = sub_1000138D4((uint64_t)&unk_10007B418, 24);
  sub_100015700(v17);
  v18 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007B440, 40);
  v18[2] = v17;
  v18[3] = a2;
  v18[4] = a3;
  v19 = a4;
  swift_retain(a1);
  swift_retain(v17);
  dispatch thunk of SystemXPCListenerConnection.setPeerConnectionHandler(_:)(sub_10002E808, v18);
  swift_release(a1);
  swift_release(v17);
  swift_release(v18);

  return v5;
}

uint64_t sub_10002DD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t EnumCaseMultiPayload;
  uint64_t v27;
  os_log_type_t v28;
  NSObject *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[3];
  uint64_t v56;
  _BYTE v57[24];

  v54 = a3;
  v7 = type metadata accessor for XPCError(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v10, v13);
  v16 = (char *)&v50 - v15;
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v50 - v18;
  v20 = sub_1000150C0(&qword_100084F80);
  __chkstk_darwin(v20, v21);
  v23 = (uint64_t *)((char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v57, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v25 = result;
    sub_10002E844(a1, (uint64_t)v23, &qword_100084F80);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23, v20);
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v27 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v19, v23, v7);
      v28 = static os_log_type_t.error.getter(v27);
      v29 = qword_1000886E0;
      v30 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
      v30(v16, v19, v7);
      if (os_log_type_enabled(v29, v28))
      {
        swift_bridgeObjectRetain_n(a4, 2);
        v31 = swift_slowAlloc(22, -1);
        v52 = v29;
        v32 = v31;
        v53 = swift_slowAlloc(64, -1);
        v55[0] = v53;
        *(_DWORD *)v32 = 136315394;
        v51 = v32 + 4;
        swift_bridgeObjectRetain(a4);
        sub_100010D40(v54, a4, v55);
        v56 = v33;
        LODWORD(v54) = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v51);
        swift_bridgeObjectRelease_n(a4, 3);
        *(_WORD *)(v32 + 12) = 2080;
        v30(v12, v16, v7);
        v34 = String.init<A>(describing:)(v12, v7);
        v36 = v35;
        sub_100010D40(v34, v35, v55);
        v56 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v32 + 14);
        swift_bridgeObjectRelease(v36);
        v38 = *(void (**)(char *, uint64_t))(v8 + 8);
        v38(v16, v7);
        _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v54, "Failed to start %s with error: %s", (uint8_t *)v32, 0x16u);
        v39 = v53;
        swift_arrayDestroy(v53, 2);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v32, -1, -1);
        swift_release(v25);
        return ((uint64_t (*)(char *, uint64_t))v38)(v19, v7);
      }
      else
      {
        swift_release(v25);
        v49 = *(void (**)(char *, uint64_t))(v8 + 8);
        v49(v16, v7);
        return ((uint64_t (*)(char *, uint64_t))v49)(v19, v7);
      }
    }
    else
    {
      v40 = *v23;
      v41 = static os_log_type_t.debug.getter(EnumCaseMultiPayload);
      v42 = qword_1000886E0;
      v43 = v41;
      if (os_log_type_enabled((os_log_t)qword_1000886E0, v41))
      {
        swift_bridgeObjectRetain_n(a4, 2);
        v44 = (uint8_t *)swift_slowAlloc(12, -1);
        v45 = swift_slowAlloc(32, -1);
        v55[0] = v45;
        *(_DWORD *)v44 = 136315138;
        swift_bridgeObjectRetain(a4);
        sub_100010D40(v54, a4, v55);
        v56 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v44 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Peer connected to %s XPC service", v44, 0xCu);
        swift_arrayDestroy(v45, 1);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v44, -1, -1);
      }
      v47 = type metadata accessor for SystemXPCPeerConnection(0);
      swift_dynamicCastClassUnconditional(v40, v47, 0, 0, 0);
      swift_beginAccess(v25 + 40, v55, 33, 0);
      swift_retain(v40);
      sub_1000564B0();
      swift_endAccess(v55);
      swift_release(v56);
      v48 = swift_dynamicCastClassUnconditional(v40, v47, 0, 0, 0);
      swift_retain(v40);
      sub_10002E260(v48);
      swift_release_n(v40, 2);
      return swift_release(v25);
    }
  }
  return result;
}

uint64_t sub_10002E260(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  dispatch thunk of XPCConnection.setTargetQueue(_:)(*(_QWORD *)(v1 + 32));
  swift_beginAccess(v1 + 40, v8, 33, 0);
  swift_retain(a1);
  sub_1000564B0();
  swift_endAccess(v8);
  swift_release(v8[3]);
  v3 = sub_1000138D4((uint64_t)&unk_10007B418, 24);
  swift_weakInit(v3 + 16, v1);
  v4 = sub_1000138D4((uint64_t)&unk_10007B468, 24);
  sub_100015700(v4);
  v5 = sub_1000138D4((uint64_t)&unk_10007B490, 32);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain(v3);
  swift_retain(v4);
  dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)(sub_10002E83C, v5);
  swift_release(v3);
  swift_release(v4);
  v6 = swift_release(v5);
  return dispatch thunk of XPCConnection.activate()(v6);
}

uint64_t sub_10002E370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint8_t *v44;
  uint64_t v45;
  char *v46;
  uint8_t *v47;
  int v48;
  os_log_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54[3];
  char v55[24];
  char v56[24];

  v51 = sub_1000150C0(&qword_1000850E8);
  __chkstk_darwin(v51, v6);
  v52 = (uint64_t *)((char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for XPCDictionary(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v11, v14);
  v17 = (char *)&v47 - v16;
  __chkstk_darwin(v15, v18);
  v20 = (char *)&v47 - v19;
  v21 = sub_1000150C0(&qword_100085A80);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v56, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v26 = result;
    v27 = a3 + 16;
    swift_beginAccess(v27, v55, 0, 0);
    Strong = swift_weakLoadStrong(v27);
    if (Strong)
    {
      v29 = Strong;
      sub_10002E844(a1, (uint64_t)v24, &qword_100085A80);
      if (swift_getEnumCaseMultiPayload(v24, v21) == 1)
      {
        swift_beginAccess(v26 + 40, v54, 33, 0);
        sub_100057E04();
        v31 = v30;
        swift_endAccess(v54);
        swift_release(v29);
        swift_release(v26);
        swift_release(v31);
        return sub_100015670((uint64_t)v24, &qword_100085A80);
      }
      v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v20, v24, v8);
      v33 = static os_log_type_t.debug.getter(v32);
      v34 = qword_1000886E0;
      v35 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
      v35(v17, v20, v8);
      v49 = v34;
      if (os_log_type_enabled(v34, v33))
      {
        v36 = swift_slowAlloc(12, -1);
        v50 = v35;
        v37 = (uint8_t *)v36;
        v38 = swift_slowAlloc(32, -1);
        v54[0] = v38;
        v48 = v33;
        *(_DWORD *)v37 = 136315138;
        v47 = v37 + 4;
        v50(v13, v17, v8);
        v39 = String.init<A>(describing:)(v13, v8);
        v41 = v40;
        sub_100010D40(v39, v40, v54);
        v53 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v47);
        swift_bridgeObjectRelease(v41);
        v43 = *(void (**)(char *, uint64_t))(v9 + 8);
        v43(v17, v8);
        _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v48, "Received XPC event from local peer: %s", v37, 0xCu);
        swift_arrayDestroy(v38, 1);
        swift_slowDealloc(v38, -1, -1);
        v44 = v37;
        v35 = v50;
        swift_slowDealloc(v44, -1, -1);
      }
      else
      {
        v43 = *(void (**)(char *, uint64_t))(v9 + 8);
        v43(v17, v8);
      }
      v45 = (uint64_t)v52;
      v46 = (char *)v52 + *(int *)(v51 + 48);
      *v52 = v29;
      v35(v46, v20, v8);
      swift_retain(v29);
      dispatch thunk of CodableDispatcher.dispatch(encodedData:context:completion:)(v20, v45, 0, 0);
      swift_release(v29);
      sub_100015670(v45, &qword_1000850E8);
      v43(v20, v8);
    }
    return swift_release(v26);
  }
  return result;
}

uint64_t sub_10002E74C()
{
  uint64_t v0;

  sub_1000135FC();
  swift_release(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t sub_10002E77C()
{
  uint64_t v0;

  sub_10002E74C();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RemotePairingDeviceXPCServer()
{
  return objc_opt_self(_TtC20remotepairingdeviced28RemotePairingDeviceXPCServer);
}

uint64_t sub_10002E7BC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002E7E0()
{
  uint64_t v0;

  sub_1000135FC();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002E808(uint64_t a1)
{
  uint64_t *v1;

  return sub_10002DD80(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10002E814()
{
  uint64_t v0;

  sub_1000135FC();
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002E83C(uint64_t a1)
{
  uint64_t v1;

  return sub_10002E370(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10002E844(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000150C0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002E88C()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t result;
  Swift::String v3;
  Swift::String v4;

  if (qword_1000849E0 != -1)
    swift_once(&qword_1000849E0, sub_100045648);
  v4._countAndFlagsBits = 0xD00000000000003BLL;
  v4._object = (void *)0x800000010006B690;
  v0._object = (void *)0x800000010006B670;
  v0._countAndFlagsBits = 0xD000000000000014;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100088708, v1, v4);
  result = v3._countAndFlagsBits;
  xmmword_100085B88 = (__int128)v3;
  return result;
}

uint64_t sub_10002E92C()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t result;
  Swift::String v3;
  Swift::String v4;

  if (qword_1000849E0 != -1)
    swift_once(&qword_1000849E0, sub_100045648);
  v4._object = (void *)0x800000010006B620;
  v0._countAndFlagsBits = 0x7473757254;
  v0._object = (void *)0xE500000000000000;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD00000000000004BLL;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100088708, v1, v4);
  result = v3._countAndFlagsBits;
  xmmword_100085B98 = (__int128)v3;
  return result;
}

uint64_t sub_10002E9C0()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t result;
  Swift::String v3;
  Swift::String v4;

  if (qword_1000849E0 != -1)
    swift_once(&qword_1000849E0, sub_100045648);
  v4._object = (void *)0x800000010006B620;
  v0._countAndFlagsBits = 0x20749980E26E6F44;
  v0._object = (void *)0xAD00007473757254;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD00000000000004BLL;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100088708, v1, v4);
  result = v3._countAndFlagsBits;
  xmmword_100085BA8 = (__int128)v3;
  return result;
}

uint64_t sub_10002EA64()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t result;
  Swift::String v3;
  Swift::String v4;

  if (qword_1000849E0 != -1)
    swift_once(&qword_1000849E0, sub_100045648);
  v0._countAndFlagsBits = 0xD000000000000068;
  v4._object = (void *)0x800000010006B740;
  v0._object = (void *)0x800000010006B6D0;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD00000000000005DLL;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100088708, v1, v4);
  result = v3._countAndFlagsBits;
  xmmword_100085BB8 = (__int128)v3;
  return result;
}

Swift::String *sub_10002EB04()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String *result;
  Swift::String v4;

  if (qword_1000849E0 != -1)
    swift_once(&qword_1000849E0, sub_100045648);
  v4._object = (void *)0x800000010006B5E0;
  v0._object = (void *)0x800000010006B570;
  v0._countAndFlagsBits = 0x1000000000000063;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD000000000000039;
  v2 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100088708, v1, v4);
  result = (Swift::String *)swift_allocObject(&unk_10007B6D8, 32, 7);
  result[1] = v2;
  qword_100085BC8 = (uint64_t)sub_100033584;
  unk_100085BD0 = result;
  return result;
}

uint64_t sub_10002EBD0()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t result;
  Swift::String v3;
  Swift::String v4;

  if (qword_1000849E0 != -1)
    swift_once(&qword_1000849E0, sub_100045648);
  v4._countAndFlagsBits = 0xD000000000000061;
  v4._object = (void *)0x800000010006B890;
  v0._object = (void *)0x800000010006B860;
  v0._countAndFlagsBits = 0xD00000000000002CLL;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100088708, v1, v4);
  result = v3._countAndFlagsBits;
  xmmword_100085BD8 = (__int128)v3;
  return result;
}

uint64_t sub_10002EC70()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t result;
  Swift::String v3;
  Swift::String v4;

  if (qword_1000849E0 != -1)
    swift_once(&qword_1000849E0, sub_100045648);
  v0._countAndFlagsBits = 0xD00000000000004CLL;
  v4._object = (void *)0x800000010006B950;
  v0._object = (void *)0x800000010006B900;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD000000000000049;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100088708, v1, v4);
  result = v3._countAndFlagsBits;
  xmmword_100085BE8 = (__int128)v3;
  return result;
}

uint64_t sub_10002ED10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v10 = (char *)&v27 - v9;
  sub_100058BA4();
  v12 = v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v13(v10, a1, v2);
  if (v12)
  {
    v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v10, v2);
    result = swift_bridgeObjectRelease(v12);
  }
  else
  {
    sub_100058BA4();
    v17 = v16;
    v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v10, v2);
    result = swift_bridgeObjectRelease(v17);
    if (!v17)
      return result;
  }
  v18 = static os_log_type_t.default.getter(result);
  v19 = qword_1000886E0;
  v13(v7, a1, v2);
  v20 = v18;
  if (!os_log_type_enabled(v19, v18))
    return ((uint64_t (*)(char *, uint64_t))v14)(v7, v2);
  v21 = (uint8_t *)swift_slowAlloc(12, -1);
  v22 = swift_slowAlloc(32, -1);
  v28 = v22;
  *(_DWORD *)v21 = 136446210;
  v23 = UUID.uuidString.getter(v22);
  v25 = v24;
  sub_100010D40(v23, v24, &v28);
  v27 = v26;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v21 + 4);
  swift_bridgeObjectRelease(v25);
  v14(v7, v2);
  _os_log_impl((void *)&_mh_execute_header, v19, v20, "Ended promptless pairing session %{public}s", v21, 0xCu);
  swift_arrayDestroy(v22, 1);
  swift_slowDealloc(v22, -1, -1);
  return swift_slowDealloc(v21, -1, -1);
}

uint64_t sub_10002EF34(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  os_log_type_t v18;
  NSObject *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v44 = a3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v11, v14);
  v17 = (char *)&v39 - v16;
  v18 = static os_log_type_t.default.getter(v15);
  v19 = qword_1000886E0;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  if ((a2 & 1) != 0)
  {
    v43 = a1;
    v20(v17, a1, v8);
    v21 = v18;
    if (os_log_type_enabled(v19, v18))
    {
      v22 = swift_slowAlloc(12, -1);
      v41 = a4;
      v42 = v4;
      v23 = (uint8_t *)v22;
      v24 = swift_slowAlloc(32, -1);
      v46 = v24;
      *(_DWORD *)v23 = 136446210;
      v25 = UUID.uuidString.getter(v24);
      v27 = v26;
      sub_100010D40(v25, v26, &v46);
      v45 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v23 + 4);
      swift_bridgeObjectRelease(v27);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
      _os_log_impl((void *)&_mh_execute_header, v19, v21, "Automation promptless pairing allowed by session %{public}s", v23, 0xCu);
      swift_arrayDestroy(v24, 1);
      swift_slowDealloc(v24, -1, -1);
      v29 = v23;
      a4 = v41;
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    }
  }
  else
  {
    v20(v13, a1, v8);
    v30 = v18;
    if (os_log_type_enabled(v19, v18))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v43 = a1;
      v33 = v32;
      v46 = v32;
      v41 = a4;
      v42 = v4;
      *(_DWORD *)v31 = 136446210;
      v40 = v31 + 4;
      v34 = UUID.uuidString.getter(v32);
      v36 = v35;
      sub_100010D40(v34, v35, &v46);
      v45 = v37;
      a4 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v40);
      swift_bridgeObjectRelease(v36);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      _os_log_impl((void *)&_mh_execute_header, v19, v30, "Non-automation promptless pairing allowed by session %{public}s", v31, 0xCu);
      swift_arrayDestroy(v33, 1);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    }
  }
  swift_bridgeObjectRetain(a4);
  return sub_10005909C();
}

uint64_t sub_10002F264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v6 = sub_1000150C0(&qword_100085DC8);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  v13 = (char *)&v36 - v12;
  swift_bridgeObjectRetain(a1);
  sub_10004F66C(v14, (uint64_t)v13);
  swift_bridgeObjectRelease(a1);
  v15 = sub_1000150C0(&qword_100085DD0);
  if (sub_100015658((uint64_t)v13, 1, v15) != 1)
  {
    v20 = &v13[*(int *)(v15 + 48)];
    v21 = *(_QWORD *)v20;
    v22 = *((_QWORD *)v20 + 1);
    v23 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v13, v23);
    v24 = sub_1000150C0(&qword_100085DC0);
    v25 = (_QWORD *)(a3 + *(int *)(v24 + 48));
    v26 = enum case for PermittedPromptlessPairingMode.automation(_:);
    v27 = type metadata accessor for PermittedPromptlessPairingMode(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(a3, v26, v27);
    *v25 = v21;
    v25[1] = v22;
LABEL_6:
    v18 = a3;
    v19 = 0;
    v17 = v24;
    return sub_100015664(v18, v19, 1, v17);
  }
  sub_100033848((uint64_t)v13);
  swift_bridgeObjectRetain(a2);
  sub_10004F66C(v16, (uint64_t)v10);
  swift_bridgeObjectRelease(a2);
  if (sub_100015658((uint64_t)v10, 1, v15) != 1)
  {
    v28 = &v10[*(int *)(v15 + 48)];
    v29 = *(_QWORD *)v28;
    v30 = *((_QWORD *)v28 + 1);
    v31 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v10, v31);
    v24 = sub_1000150C0(&qword_100085DC0);
    v32 = (_QWORD *)(a3 + *(int *)(v24 + 48));
    v33 = enum case for PermittedPromptlessPairingMode.nonAutomation(_:);
    v34 = type metadata accessor for PermittedPromptlessPairingMode(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(a3, v33, v34);
    *v32 = v29;
    v32[1] = v30;
    goto LABEL_6;
  }
  sub_100033848((uint64_t)v10);
  v17 = sub_1000150C0(&qword_100085DC0);
  v18 = a3;
  v19 = 1;
  return sub_100015664(v18, v19, 1, v17);
}

uint64_t sub_10002F488()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 48, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(v1);
  sub_1000153B0();
  return v1;
}

uint64_t sub_10002F4D4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;

  v1 = *(unsigned __int8 *)(v0 + 72);
  v3 = *(void **)(v0 + 80);
  v2 = *(void **)(v0 + 88);
  v4 = v3;
  v5 = v2;
  return v1;
}

uint64_t sub_10002F510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;

  sub_100011610();
  v46 = v1;
  v47 = v2;
  v3 = v0;
  v40 = v4;
  v5 = ((uint64_t (*)(_QWORD))type metadata accessor for DispatchQoS.QoSClass)(0);
  v42 = *(_QWORD *)(v5 - 8);
  v43 = v5;
  sub_1000123E4();
  __chkstk_darwin(v6, v7);
  sub_1000138DC();
  v39 = v8;
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_1000123E4();
  __chkstk_darwin(v10, v11);
  sub_1000138DC();
  v13 = v12;
  v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v15 = *(_QWORD *)(v14 - 8);
  v38 = v14;
  __chkstk_darwin(v14, v16);
  sub_100011928();
  v19 = v18 - v17;
  sub_100013B08();
  sub_1000123E4();
  __chkstk_darwin(v20, v21);
  sub_100011928();
  v24 = v23 - v22;
  sub_100033380();
  static DispatchQoS.userInitiated.getter();
  v44 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v37 = *(void (**)(uint64_t))(v15 + 104);
  v37(v19);
  v45 = &_swiftEmptyArrayStorage;
  sub_10000EC7C((unint64_t *)&unk_100086210, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v26 = v25;
  v27 = sub_1000150C0(&qword_100085D80);
  sub_10003352C((unint64_t *)&unk_100086220, &qword_100085D80);
  v28 = v13;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v27, v29, v9, v26);
  *(_QWORD *)(v3 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002BLL, 0x800000010006B1D0, v24, v13, v19, 0);
  sub_1000118FC();
  sub_10000EC7C(&qword_100086300, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  v30 = sub_10001549C();
  v31 = sub_10001549C();
  *(_QWORD *)(v3 + 48) = v30;
  *(_QWORD *)(v3 + 56) = v31;
  *(_QWORD *)(v3 + 64) = objc_msgSend(objc_allocWithZone((Class)USBListener), "init");
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 16) = v40;
  v41 = v40;
  ((void (*)(void))static OS_dispatch_queue.Attributes.concurrent.getter)();
  ((void (*)(uint64_t, _QWORD, uint64_t))v37)(v19, v44, v38);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v42 + 104))(v39, enum case for DispatchQoS.QoSClass.userInteractive(_:), v43);
  v32 = ((uint64_t (*)(uint64_t))static OS_dispatch_queue.global(qos:))(v39);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v39, v43);
  static DispatchQoS.unspecified.getter(v33);
  v34 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000032, 0x800000010006B200, v24, v28, v19, v32);
  *(_QWORD *)(v3 + 32) = v34;
  ((void (*)(void))static OS_dispatch_queue.Attributes.concurrent.getter)();
  ((void (*)(uint64_t, _QWORD, uint64_t))v37)(v19, v44, v38);
  static DispatchQoS.unspecified.getter(v34);
  v35 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000031, 0x800000010006B240, v24, v28, v19, v34);

  *(_QWORD *)(v3 + 40) = v35;
  return v3;
}

void sub_10002F86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  void (*v40)();
  uint64_t v41;

  sub_100011610();
  v32 = v2;
  v33 = v3;
  v31 = v4;
  v6 = v5;
  v7 = sub_100013B08();
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  sub_1000123E4();
  __chkstk_darwin(v8, v9);
  v10 = sub_1000118FC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  v14 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100016290();
  v34 = *(_QWORD *)(v15 - 8);
  v35 = v15;
  sub_1000123E4();
  __chkstk_darwin(v16, v17);
  sub_100013980();
  v30 = *(_QWORD *)(v0 + 32);
  sub_100033A6C();
  v18 = sub_100015378((uint64_t)&unk_10007B5C0);
  sub_100014520(v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v6, v10);
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = v20 + v12;
  v22 = (v20 + v12) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_10007B958, v22 + 24, v19 | 7);
  v24 = v22 + v23;
  *(_QWORD *)(v23 + 16) = v18;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v23 + v20, v14, v10);
  *(_BYTE *)(v23 + v21) = v31;
  v25 = v33;
  *(_QWORD *)(v24 + 8) = v32;
  *(_QWORD *)(v24 + 16) = v25;
  v40 = sub_100033994;
  v41 = v23;
  v38 = _NSConcreteStackBlock;
  v39 = 1107296256;
  sub_10000E4BC((uint64_t)sub_10000E208);
  swift_retain(v18);
  sub_1000153B0();
  sub_100033A5C();
  v26 = sub_100033A48();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v26, v27, v28, v29);
  sub_1000155C0();
  sub_100015890();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v1, v35);
  sub_100012494();
  sub_10001195C();
  sub_1000138B4();
}

void sub_10002FA28(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _BYTE v15[24];
  _BYTE v16[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v16, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    v11 = Strong;
    swift_beginAccess(Strong + 48, v15, 33, 0);
    sub_10002EF34(a2, a3 & 1, a4, a5);
    swift_endAccess(v15);
    OS_dispatch_queue.assertOnQueueHierarchy()();
    swift_release(v11);
  }
  swift_beginAccess(v9, v15, 0, 0);
  v12 = swift_weakLoadStrong(v9);
  if (v12)
  {
    v13 = v12;
    v14 = *(id *)(v12 + 40);
    swift_release(v13);
    dispatch_resume(v14);

  }
}

void sub_10002FB24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[10];

  sub_100011610();
  v2 = v0;
  v24[0] = v3;
  v4 = sub_100013B08();
  v24[2] = *(_QWORD *)(v4 - 8);
  v24[3] = v4;
  sub_1000123E4();
  __chkstk_darwin(v5, v6);
  v7 = sub_1000118FC();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  v11 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100016290();
  sub_100015308();
  __chkstk_darwin(v12, v13);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_suspend(*(dispatch_object_t *)(v2 + 40));
  v24[1] = *(_QWORD *)(v2 + 32);
  sub_100033A6C();
  v16 = sub_100015378((uint64_t)&unk_10007B5C0);
  swift_weakInit(v16 + 16, v2);
  sub_10001623C((uint64_t)v11, v24[0], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = swift_allocObject(&unk_10007B908, v18 + v9, v17 | 7);
  *(_QWORD *)(v19 + 16) = v16;
  sub_10001623C(v19 + v18, (uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
  v24[8] = (uint64_t)sub_1000338DC;
  v24[9] = v19;
  v24[4] = (uint64_t)_NSConcreteStackBlock;
  v24[5] = 1107296256;
  sub_10000E4BC((uint64_t)sub_10000E208);
  sub_1000144D8();
  sub_100033A5C();
  v20 = sub_100033A48();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v20, v21, v22, v23);
  sub_1000155C0();
  sub_100015890();
  sub_100033A64((uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_100015384();
  sub_10001195C();
  sub_1000138B4();
}

void sub_10002FCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _BYTE v9[24];
  _BYTE v10[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    swift_beginAccess(Strong + 48, v9, 33, 0);
    sub_10002ED10(a2);
    swift_endAccess(v9);
    OS_dispatch_queue.assertOnQueueHierarchy()();
    swift_release(v5);
  }
  swift_beginAccess(v3, v9, 0, 0);
  v6 = swift_weakLoadStrong(v3);
  if (v6)
  {
    v7 = v6;
    v8 = *(id *)(v6 + 40);
    swift_release(v7);
    dispatch_resume(v8);

  }
}

void sub_10002FD9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[6];

  sub_100011610();
  sub_100013B08();
  sub_100015308();
  __chkstk_darwin(v3, v4);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100016290();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  sub_100013980();
  sub_100033A6C();
  v10 = sub_100015378((uint64_t)&unk_10007B5C0);
  swift_weakInit(v10 + 16, v0);
  v12[4] = sub_100033888;
  v12[5] = v10;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v11 = sub_10000E4BC((uint64_t)sub_10000E208);
  sub_1000144D8();
  sub_100033A5C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v1, v11);
  _Block_release(v11);
  sub_100015DEC((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100033A64(v1, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  sub_100015384();
  sub_10001195C();
  sub_1000138B4();
}

void sub_10002FEBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _BYTE v9[24];
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    swift_beginAccess(Strong + 48, v9, 33, 0);
    sub_1000150C0(&qword_100085DD8);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    v5 = static os_log_type_t.default.getter(v4);
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_1000886E0, "Ended all promptless pairing sessions", 37, 2, &_swiftEmptyArrayStorage);
    swift_endAccess(v9);
    OS_dispatch_queue.assertOnQueueHierarchy()();
    swift_release(v3);
  }
  swift_beginAccess(v1, v9, 0, 0);
  v6 = swift_weakLoadStrong(v1);
  if (v6)
  {
    v7 = v6;
    v8 = *(id *)(v6 + 40);
    swift_release(v7);
    dispatch_resume(v8);

  }
}

uint64_t sub_10002FFDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  _QWORD aBlock[6];

  v2 = v1;
  sub_1000150C0(&qword_100085DB8);
  sub_1000123E4();
  __chkstk_darwin(v4, v5);
  sub_100011928();
  v8 = v7 - v6;
  v9 = sub_1000150C0(&qword_100085DC0);
  sub_100015664(v8, 1, 1, v9);
  v10 = *(NSObject **)(v2 + 40);
  v11 = sub_1000138D4((uint64_t)&unk_10007B868, 32);
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v2;
  v12 = sub_1000138D4((uint64_t)&unk_10007B890, 32);
  *(_QWORD *)(v12 + 16) = sub_100033784;
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = sub_100033798;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000301EC;
  aBlock[3] = &unk_10007B8A8;
  v13 = _Block_copy(aBlock);
  swift_retain(v2);
  swift_retain(v12);
  sub_100012494();
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v12, "", 102, 195, 52, 1);
  result = sub_100015A44();
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_1000337B8(v8, a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100030158(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = sub_1000150C0(&qword_100085DB8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10002F488();
  v8 = v7;
  sub_10002F264(v6, v7, (uint64_t)v5);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v6);
  return sub_100033800((uint64_t)v5, a1);
}

uint64_t sub_1000301EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10003020C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  v1 = *(void **)(v0 + 64);
  v2 = sub_100015378((uint64_t)&unk_10007B5C0);
  sub_100014520(v2);
  v14[4] = sub_10003377C;
  v15 = v2;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_10000E208;
  v14[3] = &unk_10007B830;
  v3 = _Block_copy(v14);
  v4 = v15;
  v5 = v1;
  swift_release(v4);
  LODWORD(v4) = objc_msgSend(v5, "addDisconnectHandler:", v3);
  sub_1000155C0();

  if ((_DWORD)v4)
  {
    v7 = objc_msgSend(*(id *)(v0 + 64), "startOnQueue:", *(_QWORD *)(v0 + 16));
    if ((_DWORD)v7)
    {
      v8 = static os_log_type_t.debug.getter(v7);
      sub_10001539C(v8, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"USB listener started", 20);
      return 1;
    }
    v10 = static os_log_type_t.error.getter(v7);
    v11 = qword_1000886E0;
    v12 = "Failed to start USB listener.";
    v13 = 29;
  }
  else
  {
    v10 = static os_log_type_t.error.getter(v6);
    v11 = qword_1000886E0;
    v12 = "Failed to register USB disconnect handler.";
    v13 = 42;
  }
  sub_10001539C(v10, (uint64_t)&_mh_execute_header, v11, (uint64_t)v12, v13);
  return 0;
}

uint64_t sub_100030370(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    sub_10002FD9C();
    Strong = swift_release(v3);
  }
  v4 = static os_log_type_t.default.getter(Strong);
  return os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1000886E0, "USB host disconnected; promptless pairing disabled.",
           51,
           2,
           &_swiftEmptyArrayStorage);
}

void sub_1000303F4()
{
  uint64_t v0;
  __CFUserNotification *v1;
  __CFUserNotification *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;

  sub_10002F4D4();
  v2 = v1;

  if (v2)
  {
    CFUserNotificationCancel(v2);
    v4 = *(void **)(v0 + 80);
    *(_QWORD *)(v0 + 80) = 0;

    sub_100016134();
  }
  sub_10002F4D4();
  v6 = v5;

  if (v6)
  {
    objc_msgSend(v6, "invalidate");
    v8 = *(void **)(v0 + 88);
    *(_QWORD *)(v0 + 88) = 0;

    sub_100016134();
  }
  *(_BYTE *)(v0 + 72) = 0;
  sub_100016134();
}

BOOL sub_100030484()
{
  uint64_t v0;
  char v1;
  void *v2;
  void *v3;
  id v4;

  v1 = sub_10002F4D4();
  v3 = v2;

  if ((v1 & 1) == 0)
  {
    *(_BYTE *)(v0 + 72) = 1;
    OS_dispatch_queue.assertOnQueueHierarchy()();
  }
  return (v1 & 1) == 0;
}

void sub_1000304D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t *);
  void (*v4)(uint64_t *);
  unint64_t v5;
  unint64_t v6;
  objc_class *v7;
  Class isa;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _BOOL8 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t *, uint64_t);
  uint64_t v31;
  _BOOL8 My;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  Class v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  sub_100011610();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  isa = v7;
  v10 = v9;
  v56 = v11;
  v12 = sub_100033A40();
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_100030484();
  if (!v17)
  {
    v27 = static os_log_type_t.error.getter(v17);
    sub_10001539C(v27, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Already collecting pairing consent. Rejecting new pairing request.", 66);
    sub_10001F66C();
    sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
    v29 = sub_10001619C(v28);
    static RemotePairingError.deviceIsAlreadyPairingWithHost.getter();
    *v16 = v29;
    sub_1000153B8(enum case for PairingConsentCollectionOutcome.rejected(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 104));
    v4(v16);
    v30 = *(void (**)(uint64_t *, uint64_t))(v13 + 8);
LABEL_5:
    v30(v16, v12);
    goto LABEL_6;
  }
  v53 = v10;
  v54 = v13;
  v55 = v12;
  v18 = (uint64_t)v4;
  v19 = *(void **)(v0 + 16);
  v20 = sub_100015378((uint64_t)&unk_10007B5C0);
  sub_100014520(v20);
  v21 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007B638, 48);
  v21[2] = v19;
  v21[3] = v20;
  v21[4] = v18;
  v21[5] = v2;
  swift_retain(v20);
  sub_1000144D8();
  v22 = v19;
  v23 = sub_10002DA18();
  if ((v23 & 1) == 0)
  {
    v52 = v18;
    if ((os_variant_is_darwinos("com.apple.RemotePairing") & 1) != 0)
    {
      v31 = v54;
      v12 = v55;
      sub_1000153B8(enum case for PairingConsentCollectionOutcome.consentNotRequired(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 104));
      sub_1000309E4((uint64_t)v16, (uint64_t)v22, v20, v52, v2);
      sub_100015A44();
      sub_10000E4FC();
      v30 = *(void (**)(uint64_t *, uint64_t))(v31 + 8);
    }
    else
    {
      v51 = v22;
      My = is_pairing_restricted_by_findMy();
      if (My)
      {
        v33 = static os_log_type_t.error.getter(My);
        sub_10001539C(v33, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Rejecting pairing request as pairing is currently restricted by FindMy", 70);
        sub_10001F66C();
        sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
        v35 = sub_10001619C(v34);
        static RemotePairingError.findMyRejectedPairing.getter();
LABEL_11:
        *v16 = v35;
        v36 = (unsigned int *)&enum case for PairingConsentCollectionOutcome.rejected(_:);
      }
      else
      {
        if (isa)
        {
          v37 = sub_100030D00((uint64_t)isa);
          isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v37);
        }
        if (v6 >> 60 == 15)
          v38 = 0;
        else
          v38 = Data._bridgeToObjectiveC()().super.isa;
        v39 = managed_configuration_allow_pairing(isa, v38);

        switch(v39)
        {
          case 0:
            sub_10001F66C();
            sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
            v35 = sub_10001619C(v41);
            static RemotePairingError.managedConfigurationRejectedPairing.getter();
            goto LABEL_11;
          case 1:
            v46 = static os_log_type_t.default.getter(v40);
            v47 = qword_1000886E0;
            sub_10001539C(v46, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"ManagedConfiguration approved pairing.", 38);
            v48 = is_setup_complete();
            if ((v48 & 1) != 0)
            {
              v49 = v54;
              sub_1000153B8(enum case for PairingConsentCollectionOutcome.promptingUserForConsent(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 104));
              sub_100033A2C();
              sub_100012494();
              sub_100015DEC((uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
              swift_retain(v21);
              swift_retain(v0);
              sub_1000318A0(v56, v53, v0, (void (*)(uint64_t *))sub_1000333F4, (uint64_t)v21, v0);
              sub_10000E4FC();
              goto LABEL_6;
            }
            v42 = static os_log_type_t.default.getter(v48);
            v44 = "Setup has not completed yet. Approving trust without user dialog.";
            v43 = v47;
            v45 = 65;
LABEL_24:
            sub_10001539C(v42, (uint64_t)&_mh_execute_header, v43, (uint64_t)v44, v45);
            v36 = (unsigned int *)&enum case for PairingConsentCollectionOutcome.consentNotRequired(_:);
            break;
          case 2:
            v42 = static os_log_type_t.default.getter(v40);
            v43 = qword_1000886E0;
            v44 = "ManagedConfiguration approved pairing without prompt.";
            v45 = 53;
            goto LABEL_24;
          case 3:
            v36 = (unsigned int *)&enum case for PairingConsentCollectionOutcome.challengeRequired(_:);
            break;
          default:
            sub_100012494();
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6168636165726E55, 0xEB00000000656C62, "remotepairingdeviced/PairingConsentCollector.swift", 50, 2, 316, 0);
            __break(1u);
            return;
        }
      }
      v50 = v54;
      v12 = v55;
      sub_1000153B8(*v36, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 104));
      sub_100033A2C();
      sub_100012494();
      sub_10000E4FC();
      v30 = *(void (**)(uint64_t *, uint64_t))(v50 + 8);
    }
    goto LABEL_5;
  }
  v24 = static os_log_type_t.default.getter(v23);
  sub_10001539C(v24, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Free pairing boot arg set. Approving trust without user dialog.", 63);
  v26 = v54;
  v25 = v55;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v54 + 104))(v16, enum case for PairingConsentCollectionOutcome.consentNotRequired(_:), v55);
  sub_1000309E4((uint64_t)v16, (uint64_t)v22, v20, v18, v2);
  sub_100015A44();
  sub_10000E4FC();
  (*(void (**)(uint64_t *, uint64_t))(v26 + 8))(v16, v25);
LABEL_6:
  sub_1000138B4();
}

uint64_t sub_1000309E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD aBlock[6];

  v36 = a4;
  v37 = a5;
  v35 = a3;
  v41 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v10 - 8);
  v39 = v10;
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PairingConsentCollectionOutcome(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14, v17);
  v18 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, v14);
  v19 = *(unsigned __int8 *)(v15 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_10007B7F0, v22 + 16, v19 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v23 + v20, v18, v14);
  v25 = v35;
  v24 = v36;
  *(_QWORD *)(v23 + v21) = v35;
  v26 = (_QWORD *)(v23 + v22);
  v27 = v37;
  *v26 = v24;
  v26[1] = v27;
  aBlock[4] = sub_100033730;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E208;
  aBlock[3] = &unk_10007B808;
  v28 = _Block_copy(aBlock);
  swift_retain(v25);
  v29 = swift_retain(v27);
  static DispatchQoS.unspecified.getter(v29);
  v42 = &_swiftEmptyArrayStorage;
  sub_10000EC7C((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v31 = v30;
  v32 = sub_1000150C0(&qword_1000850F0);
  sub_10003352C((unint64_t *)&qword_1000853C0, &qword_1000850F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v32, v33, v6, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v39);
  return swift_release();
}

uint64_t sub_100030C74(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _BYTE v7[24];

  if ((PairingConsentCollectionOutcome.terminal.getter() & 1) != 0)
  {
    swift_beginAccess(a2 + 16, v7, 0, 0);
    if (swift_weakLoadStrong(a2 + 16))
    {
      sub_1000303F4();
      swift_release();
    }
  }
  return a3(a1);
}

uint64_t sub_100030D00(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000150C0(&qword_100085D88);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_8:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v18 = *v16;
    v17 = v16[1];
    sub_100015100(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v41);
    *(_QWORD *)&v40 = v18;
    *((_QWORD *)&v40 + 1) = v17;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v18;
    *((_QWORD *)&v38[0] + 1) = v17;
    swift_bridgeObjectRetain(v17);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_100015FB0(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_100015FB0(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_100015FB0(v37, v38);
    sub_100015FB0(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v19 = -1 << *((_BYTE *)v3 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)&v7[8 * (v20 >> 6)]) == 0)
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)&v7[8 * v21];
        if (v26 != -1)
        {
          v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)&v7[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)&v7[(v22 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v22;
    v27 = v3[6] + 40 * v22;
    *(_OWORD *)v27 = v30;
    *(_OWORD *)(v27 + 16) = v31;
    *(_QWORD *)(v27 + 32) = v32;
    result = (uint64_t)sub_100015FB0(&v34, (_OWORD *)(v3[7] + 32 * v22));
    ++v3[2];
    if (v6)
      goto LABEL_8;
LABEL_9:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_38;
    if (v12 >= v28)
      goto LABEL_36;
    v13 = *(_QWORD *)(v29 + 8 * v12);
    v14 = v9 + 1;
    if (!v13)
    {
      v14 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_36;
      v13 = *(_QWORD *)(v29 + 8 * v14);
      if (!v13)
      {
        v14 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_36;
        v13 = *(_QWORD *)(v29 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_36;
          v13 = *(_QWORD *)(v29 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v9 = v14;
  }
  v15 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_36:
    swift_release();
    sub_100018CD4(a1);
    return (uint64_t)v3;
  }
  v13 = *(_QWORD *)(v29 + 8 * v15);
  if (v13)
  {
    v14 = v9 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v28)
      goto LABEL_36;
    v13 = *(_QWORD *)(v29 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_24;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000310C0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];
  _OWORD v37[2];
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000150C0(&qword_100085D88);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v27 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_8:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    v16 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v11);
    sub_100015100(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v39 + 8);
    LODWORD(v39[0]) = v16;
    v37[0] = v39[0];
    v37[1] = v39[1];
    v38 = v40;
    LODWORD(v36[0]) = v16;
    swift_dynamicCast(&v28, v36, &type metadata for Int32, &type metadata for AnyHashable, 7);
    sub_100015FB0((_OWORD *)((char *)v37 + 8), v31);
    v32 = v28;
    v33 = v29;
    v34 = v30;
    sub_100015FB0(v31, v35);
    v28 = v32;
    v29 = v33;
    v30 = v34;
    sub_100015FB0(v35, v36);
    sub_100015FB0(v36, &v32);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v17 = -1 << *((_BYTE *)v3 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)&v7[8 * (v18 >> 6)]) == 0)
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v17) >> 6;
      while (++v19 != v22 || (v21 & 1) == 0)
      {
        v23 = v19 == v22;
        if (v19 == v22)
          v19 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)&v7[8 * v19];
        if (v24 != -1)
        {
          v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)&v7[8 * (v18 >> 6)])) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)&v7[(v20 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v20;
    v25 = v3[6] + 40 * v20;
    *(_OWORD *)v25 = v28;
    *(_OWORD *)(v25 + 16) = v29;
    *(_QWORD *)(v25 + 32) = v30;
    result = (uint64_t)sub_100015FB0(&v32, (_OWORD *)(v3[7] + 32 * v20));
    ++v3[2];
    if (v6)
      goto LABEL_8;
LABEL_9:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_38;
    if (v12 >= v26)
      goto LABEL_36;
    v13 = *(_QWORD *)(v27 + 8 * v12);
    v14 = v9 + 1;
    if (!v13)
    {
      v14 = v9 + 2;
      if (v9 + 2 >= v26)
        goto LABEL_36;
      v13 = *(_QWORD *)(v27 + 8 * v14);
      if (!v13)
      {
        v14 = v9 + 3;
        if (v9 + 3 >= v26)
          goto LABEL_36;
        v13 = *(_QWORD *)(v27 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 4;
          if (v9 + 4 >= v26)
            goto LABEL_36;
          v13 = *(_QWORD *)(v27 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v9 = v14;
  }
  v15 = v9 + 5;
  if (v9 + 5 >= v26)
  {
LABEL_36:
    swift_release();
    sub_100018CD4(a1);
    return (uint64_t)v3;
  }
  v13 = *(_QWORD *)(v27 + 8 * v15);
  if (v13)
  {
    v14 = v9 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v26)
      goto LABEL_36;
    v13 = *(_QWORD *)(v27 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_24;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_100031470(char a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = type metadata accessor for PairingConsentCollectionOutcome(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = static os_log_type_t.default.getter(v11);
  if ((a1 & 1) != 0)
  {
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1000886E0, "Authenticating user with passcode challenge", 43, 2, &_swiftEmptyArrayStorage);
    swift_retain(a3);
    sub_1000326DC(a4, a2, a3);
  }
  else
  {
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1000886E0, "User declined pairing prompt", 28, 2, &_swiftEmptyArrayStorage);
    v15 = type metadata accessor for RemotePairingError(0);
    sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
    v17 = swift_allocError(v15, v16, 0, 0);
    static RemotePairingError.userRejectedPairing.getter();
    *v13 = v17;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v9 + 104))(v13, enum case for PairingConsentCollectionOutcome.rejected(_:), v8);
    a2((char *)v13);
    (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v13, v8);
  }
}

uint64_t sub_1000315EC(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  void (*v34)(_QWORD);
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for PairingConsentCollectionOutcome(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    v12 = swift_errorRetain(a1);
    v13 = static os_log_type_t.default.getter(v12);
    v14 = qword_1000886E0;
    v15 = v13;
    if (os_log_type_enabled((os_log_t)qword_1000886E0, v13))
    {
      swift_errorRetain(a1);
      swift_errorRetain(a1);
      v16 = swift_slowAlloc(12, -1);
      v34 = a2;
      v17 = (uint8_t *)v16;
      v18 = swift_slowAlloc(32, -1);
      v33 = a3;
      v19 = v18;
      v35 = a1;
      v36 = v18;
      *(_DWORD *)v17 = 136315138;
      v32 = v17 + 4;
      swift_errorRetain(a1);
      v20 = sub_1000150C0(&qword_100085A00);
      v21 = String.init<A>(describing:)(&v35, v20);
      v23 = v22;
      sub_100010D40(v21, v22, &v36);
      v35 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v32);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Rejecting pairing attempt as authentication policy evaluation failed with error: %s", v17, 0xCu);
      swift_arrayDestroy(v19, 1);
      swift_slowDealloc(v19, -1, -1);
      v25 = v17;
      a2 = v34;
      swift_slowDealloc(v25, -1, -1);
    }
    v26 = type metadata accessor for RemotePairingError(0);
    sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
    v28 = swift_allocError(v26, v27, 0, 0);
    static RemotePairingError.failedToAuthenticateUser.getter();
    *v11 = v28;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v7 + 104))(v11, enum case for PairingConsentCollectionOutcome.rejected(_:), v6);
    a2(v11);
    swift_errorRelease(a1);
  }
  else
  {
    v29 = static os_log_type_t.default.getter(v9);
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_1000886E0, "Successfully authenticated user", 31, 2, &_swiftEmptyArrayStorage);
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v7 + 104))(v11, enum case for PairingConsentCollectionOutcome.userConsented(_:), v6);
    a2(v11);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v11, v6);
}

uint64_t sub_1000318A0(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t (*v36)(uint64_t);
  void *v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t inited;
  const __CFString *v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  const __CFString *v60;
  const __CFString *v61;
  __int128 v62;
  const __CFString *v63;
  __int128 v64;
  id v65;
  id v66;
  uint64_t v67;
  const __CFDictionary *isa;
  CFUserNotificationRef v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  void *v73;
  void *v74;
  id v75;
  uint64_t v76;
  void *v77;
  __CFUserNotification *v78;
  _QWORD *v79;
  _QWORD *v80;
  void *v81;
  __CFUserNotification *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t *);
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  CFStringRef v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t);
  void *v125;
  uint64_t (*v126)();
  _QWORD *v127;
  _QWORD v128[3];
  void *v129;
  uint64_t v130;
  uint64_t v131;

  v115 = a3;
  v11 = type metadata accessor for CharacterSet(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  v113 = *(_QWORD *)(v16 - 8);
  v114 = v16;
  __chkstk_darwin(v16, v17);
  v112 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v110 = *(_QWORD *)(v19 - 8);
  v111 = v19;
  __chkstk_darwin(v19, v20);
  v109 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PairingConsentCollectionOutcome(0);
  v116 = *(_QWORD *)(v22 - 8);
  v117 = v22;
  __chkstk_darwin(v22, v23);
  v25 = (uint64_t *)((char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = (_QWORD *)swift_allocObject(&unk_10007B660, 40, 7);
  v118 = a4;
  v119 = v26;
  v26[2] = a4;
  v26[3] = a5;
  v26[4] = a6;
  v120 = a5;
  v121 = a6;
  if (!a2)
    goto LABEL_11;
  v27 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v27 = a1 & 0xFFFFFFFFFFFFLL;
  if (v27)
  {
    swift_retain(a5);
    swift_retain(a6);
    v28 = swift_bridgeObjectRetain(a2);
    v29 = String.count.getter(a1, a2, v28);
    if (v29 >= 63)
      v30 = 63;
    else
      v30 = v29;
    v31 = String.index(_:offsetBy:)(15, v30, a1, a2);
    v32 = String.subscript.getter(15, v31, a1, a2);
    v34 = v33;
    v36 = v35;
    v38 = v37;
    v39 = swift_bridgeObjectRelease(a2);
    v122 = (CFStringRef)v32;
    v123 = v34;
    v124 = v36;
    v125 = v38;
    static CharacterSet.newlines.getter(v39);
    v40 = sub_1000334F0();
    v41 = StringProtocol.components(separatedBy:)(v15, &type metadata for Substring, v40);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    swift_bridgeObjectRelease(v125);
    v122 = (CFStringRef)v41;
    v42 = sub_1000150C0(&qword_100086980);
    sub_10003352C(&qword_100085DA8, &qword_100086980);
    v44 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v42, v43);
    v46 = v45;
    swift_bridgeObjectRelease(v41);
    if (qword_1000849B8 != -1)
      swift_once(&qword_1000849B8, sub_10002EB04);
    v47 = (uint64_t (*)(uint64_t))qword_100085BC8;
    v48 = sub_1000150C0(&qword_100085570);
    v49 = swift_allocObject(v48, 72, 7);
    *(_OWORD *)(v49 + 16) = xmmword_100065C90;
    *(_QWORD *)(v49 + 56) = &type metadata for String;
    *(_QWORD *)(v49 + 64) = sub_100016354();
    *(_QWORD *)(v49 + 32) = v44;
    *(_QWORD *)(v49 + 40) = v46;
    v50 = v47(v49);
    v52 = v51;
    swift_bridgeObjectRelease(v49);
  }
  else
  {
LABEL_11:
    v53 = qword_1000849B0;
    swift_retain(a5);
    swift_retain(a6);
    if (v53 != -1)
      swift_once(&qword_1000849B0, sub_10002EA64);
    v52 = *((_QWORD *)&xmmword_100085BB8 + 1);
    v50 = xmmword_100085BB8;
    swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100085BB8 + 1));
  }
  v54 = sub_1000150C0(&qword_100085D90);
  inited = swift_initStackObject(v54, &v130);
  *(_OWORD *)(inited + 16) = xmmword_100065CD0;
  v122 = kCFUserNotificationAlertHeaderKey;
  v56 = (id)kCFUserNotificationAlertHeaderKey;
  v57 = sub_1000150C0((uint64_t *)&unk_100086180);
  v58 = sub_100033434();
  AnyHashable.init<A>(_:)(&v122, v57, v58);
  if (qword_100084998 != -1)
    swift_once(&qword_100084998, sub_10002E88C);
  v59 = xmmword_100085B88;
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_OWORD *)(inited + 72) = v59;
  v122 = kCFUserNotificationAlertMessageKey;
  v60 = (id)kCFUserNotificationAlertMessageKey;
  swift_bridgeObjectRetain(*((_QWORD *)&v59 + 1));
  AnyHashable.init<A>(_:)(&v122, v57, v58);
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 144) = v50;
  *(_QWORD *)(inited + 152) = v52;
  v122 = kCFUserNotificationDefaultButtonTitleKey;
  v61 = (id)kCFUserNotificationDefaultButtonTitleKey;
  AnyHashable.init<A>(_:)(&v122, v57, v58);
  if (qword_1000849A8 != -1)
    swift_once(&qword_1000849A8, sub_10002E9C0);
  v62 = xmmword_100085BA8;
  *(_QWORD *)(inited + 240) = &type metadata for String;
  *(_OWORD *)(inited + 216) = v62;
  v122 = kCFUserNotificationAlternateButtonTitleKey;
  v63 = (id)kCFUserNotificationAlternateButtonTitleKey;
  swift_bridgeObjectRetain(*((_QWORD *)&v62 + 1));
  AnyHashable.init<A>(_:)(&v122, v57, v58);
  if (qword_1000849A0 != -1)
    swift_once(&qword_1000849A0, sub_10002E92C);
  v64 = xmmword_100085B98;
  *(_QWORD *)(inited + 312) = &type metadata for String;
  *(_OWORD *)(inited + 288) = v64;
  swift_bridgeObjectRetain(*((_QWORD *)&v64 + 1));
  v131 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v128[0] = SBUserNotificationAlternateButtonPresentationStyleKey;
  v65 = SBUserNotificationAlternateButtonPresentationStyleKey;
  AnyHashable.init<A>(_:)(v128, v57, v58);
  v129 = &type metadata for UInt32;
  LODWORD(v128[0]) = 0;
  sub_100041964((uint64_t)v128, (uint64_t)&v122);
  v128[0] = SBUserNotificationDefaultButtonPresentationStyleKey;
  v66 = SBUserNotificationDefaultButtonPresentationStyleKey;
  AnyHashable.init<A>(_:)(v128, v57, v58);
  v129 = &type metadata for UInt32;
  LODWORD(v128[0]) = 2;
  sub_100041964((uint64_t)v128, (uint64_t)&v122);
  v67 = v131;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v67);
  v69 = CFUserNotificationCreate(0, 0.0, 3uLL, 0, isa);

  if (v69)
  {
    v71 = v115;
    v72 = sub_10002F4D4();
    v74 = v73;

    if ((v72 & 1) == 0)
    {
      v101 = static os_log_type_t.default.getter(v76);
      os_log(_:dso:log:_:_:)(v101, &_mh_execute_header, qword_1000886E0, "User declined pairing prompt", 28, 2, &_swiftEmptyArrayStorage);
      v102 = type metadata accessor for RemotePairingError(0);
      sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
      v104 = swift_allocError(v102, v103, 0, 0);
      static RemotePairingError.userRejectedPairing.getter();
      *v25 = v104;
      v106 = v116;
      v105 = v117;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v116 + 104))(v25, enum case for PairingConsentCollectionOutcome.rejected(_:), v117);
      v118(v25);
      (*(void (**)(uint64_t *, uint64_t))(v106 + 8))(v25, v105);
      swift_release();
      swift_release();

      return swift_release();
    }
    v77 = *(void **)(v71 + 80);
    *(_QWORD *)(v71 + 80) = v69;
    v78 = v69;

    OS_dispatch_queue.assertOnQueueHierarchy()();
    v79 = (_QWORD *)swift_allocObject(&unk_10007B688, 48, 7);
    v79[2] = v78;
    v79[3] = v71;
    v80 = v119;
    v79[4] = sub_100033428;
    v79[5] = v80;
    v126 = sub_1000334E4;
    v127 = v79;
    v122 = (CFStringRef)_NSConcreteStackBlock;
    v123 = 1107296256;
    v124 = sub_10000E208;
    v125 = &unk_10007B6A0;
    v81 = _Block_copy(&v122);
    v82 = v78;
    swift_retain(v71);
    v83 = swift_retain(v80);
    v84 = v109;
    static DispatchQoS.unspecified.getter(v83);
    v128[0] = &_swiftEmptyArrayStorage;
    sub_10000EC7C((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    v86 = v85;
    v87 = sub_1000150C0(&qword_1000850F0);
    sub_10003352C((unint64_t *)&qword_1000853C0, &qword_1000850F0);
    v88 = v112;
    v89 = v87;
    v90 = v114;
    dispatch thunk of SetAlgebra.init<A>(_:)(v128, v89, v91, v114, v86);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v84, v88, v81);
    _Block_release(v81);

    (*(void (**)(char *, uint64_t))(v113 + 8))(v88, v90);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v84, v111);
    swift_release();
    swift_release();
  }
  else
  {
    v92 = static os_log_type_t.fault.getter(v70);
    v93 = qword_1000886E0;
    v94 = os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, qword_1000886E0, "Failed to present trust dialog to the user", 42, 2, &_swiftEmptyArrayStorage);
    v95 = static os_log_type_t.default.getter(v94);
    os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v93, "User declined pairing prompt", 28, 2, &_swiftEmptyArrayStorage);
    v96 = type metadata accessor for RemotePairingError(0);
    sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
    v98 = swift_allocError(v96, v97, 0, 0);
    static RemotePairingError.userRejectedPairing.getter();
    *v25 = v98;
    v100 = v116;
    v99 = v117;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v116 + 104))(v25, enum case for PairingConsentCollectionOutcome.rejected(_:), v117);
    v118(v25);
    (*(void (**)(uint64_t *, uint64_t))(v100 + 8))(v25, v99);
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t sub_100032260(__CFUserNotification *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  SInt32 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27, v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject(&unk_10007B700, 24, 7);
  *(_QWORD *)(v16 + 16) = 0;
  v17 = CFUserNotificationReceiveResponse(a1, 0.0, (CFOptionFlags *)(v16 + 16));
  v18 = swift_allocObject(&unk_10007B728, 56, 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_DWORD *)(v18 + 24) = v17;
  *(_QWORD *)(v18 + 32) = v16;
  *(_QWORD *)(v18 + 40) = a3;
  *(_QWORD *)(v18 + 48) = a4;
  aBlock[4] = sub_1000335C8;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E208;
  aBlock[3] = &unk_10007B740;
  v19 = _Block_copy(aBlock);
  swift_retain(a2);
  swift_retain(v16);
  v20 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v20);
  v29 = &_swiftEmptyArrayStorage;
  sub_10000EC7C((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v22 = v21;
  v23 = sub_1000150C0(&qword_1000850F0);
  sub_10003352C((unint64_t *)&qword_1000853C0, &qword_1000850F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v8, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v27);
  swift_release();
  return swift_release();
}

uint64_t sub_1000324B0(uint64_t a1, int a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  _BYTE v8[24];

  swift_beginAccess(a3 + 16, v8, 0, 0);
  return sub_100032520(a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t sub_100032520(int a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t result;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  OS_dispatch_queue.assertOnQueueHierarchy()();
  if (!a1)
  {
    if ((a2 & 3) == 3)
    {
      v12 = static os_log_type_t.default.getter(v6);
      v13 = qword_1000886E0;
      v14 = "The notification was cancelled";
      v15 = 30;
    }
    else
    {
      if ((a2 & 3) == 1)
      {
        v16 = static os_log_type_t.default.getter(v6);
        sub_10001539C(v16, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"User approved trust dialog", 26);
        v17 = 1;
        return a3(v17);
      }
      if ((a2 & 3) != 0)
      {
        v12 = static os_log_type_t.fault.getter(v6);
        v13 = qword_1000886E0;
        v14 = "User selected unknown button on trust dialog prompt";
        v15 = 51;
      }
      else
      {
        v12 = static os_log_type_t.default.getter(v6);
        v13 = qword_1000886E0;
        v14 = "User declined trust dialog";
        v15 = 26;
      }
    }
    sub_10001539C(v12, (uint64_t)&_mh_execute_header, v13, (uint64_t)v14, v15);
    v17 = 0;
    return a3(v17);
  }
  v7 = static os_log_type_t.error.getter(v6);
  v8 = qword_1000886E0;
  v9 = v7;
  result = os_log_type_enabled((os_log_t)qword_1000886E0, v7);
  if ((_DWORD)result)
  {
    v11 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 67109120;
    v18 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 4);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received invalid status code %d when reading response to trust prompt notification", v11, 8u);
    return swift_slowDealloc(v11, -1, -1);
  }
  return result;
}

void sub_1000326DC(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t inited;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  __int128 aBlock;
  uint64_t (*v41)(uint64_t, uint64_t, void *);
  void *v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  _BYTE v45[72];
  uint64_t v46;

  v6 = type metadata accessor for POSIXError(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PairingConsentCollectionOutcome(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject(&unk_10007B778, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  swift_retain(a3);
  v17 = MKBGetDeviceLockState(0);
  if ((_DWORD)v17 == 3)
  {
    v18 = static os_log_type_t.default.getter(v17);
    v19 = qword_1000886E0;
    v20 = os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, qword_1000886E0, "Not requiring user passcode as key bag is disabled", 50, 2, &_swiftEmptyArrayStorage);
    v21 = static os_log_type_t.default.getter(v20);
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v19, "Successfully authenticated user", 31, 2, &_swiftEmptyArrayStorage);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for PairingConsentCollectionOutcome.userConsented(_:), v11);
    a2(v15);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
LABEL_9:
    swift_release();
    swift_release();
    return;
  }
  v22 = objc_msgSend(objc_allocWithZone((Class)LAContext), "init");
  v23 = sub_10002F4D4();
  v25 = v24;

  if ((v23 & 1) != 0)
  {
    v27 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v22;
    v28 = v22;

    OS_dispatch_queue.assertOnQueueHierarchy()();
    v29 = sub_1000150C0(&qword_100085DB0);
    inited = swift_initStackObject(v29, v45);
    *(_OWORD *)(inited + 16) = xmmword_100065C90;
    *(_DWORD *)(inited + 32) = 2;
    if (qword_1000849C8 != -1)
      swift_once(&qword_1000849C8, sub_10002EC70);
    v31 = xmmword_100085BE8;
    *(_QWORD *)(inited + 64) = &type metadata for String;
    *(_OWORD *)(inited + 40) = v31;
    swift_bridgeObjectRetain(*((_QWORD *)&v31 + 1));
    v46 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for Int32, (char *)&type metadata for Any + 8, &protocol witness table for Int32);
    if (qword_1000849C0 != -1)
      swift_once(&qword_1000849C0, sub_10002EBD0);
    v42 = &type metadata for String;
    aBlock = xmmword_100085BD8;
    swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100085BD8 + 1));
    sub_1000419DC((uint64_t)&aBlock, 0x40Du);
    v32 = v46;
    v33 = sub_1000310C0(v46);
    swift_bridgeObjectRelease(v32);
    v34 = swift_allocObject(&unk_10007B7A0, 32, 7);
    *(_QWORD *)(v34 + 16) = sub_1000335FC;
    *(_QWORD *)(v34 + 24) = v16;
    v43 = sub_100033604;
    v44 = v34;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v41 = sub_100032AFC;
    v42 = &unk_10007B7B8;
    v35 = _Block_copy(&aBlock);
    swift_retain(v16);
    swift_release();
    sub_100033628(1013, v33, (uint64_t)v35, v28);

    _Block_release(v35);
    goto LABEL_9;
  }
  LODWORD(aBlock) = 89;
  v36 = sub_100045328((uint64_t)&_swiftEmptyArrayStorage);
  sub_10000EC7C(&qword_1000859E0, (uint64_t (*)(uint64_t))&type metadata accessor for POSIXError);
  v38 = _BridgedStoredNSError.init(_:userInfo:)(&aBlock, v36, v6, v37);
  v39 = (void *)POSIXError._nsError.getter(v38);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_1000315EC((uint64_t)v39, (void (*)(_QWORD))a2, a3);
  swift_release();
  swift_release();

}

uint64_t sub_100032AFC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

void sub_100032B90()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(char *, uint64_t);
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _DWORD v53[4];
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  _QWORD v67[7];

  sub_100011610();
  v55 = v2;
  v56 = v3;
  v53[3] = v4;
  v5 = sub_100016290();
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  sub_1000123E4();
  __chkstk_darwin(v6, v7);
  sub_1000138DC();
  v62 = v8;
  v9 = sub_100013B08();
  v60 = *(_QWORD *)(v9 - 8);
  v61 = v9;
  sub_1000123E4();
  __chkstk_darwin(v10, v11);
  sub_1000138DC();
  v59 = v12;
  v13 = type metadata accessor for DispatchTimeInterval(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  sub_100011928();
  v18 = (_QWORD *)(v17 - v16);
  v65 = type metadata accessor for DispatchTime(0);
  sub_100015308();
  v21 = __chkstk_darwin(v19, v20);
  v23 = (char *)v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  v26 = (char *)v53 - v25;
  v27 = sub_1000118FC();
  v57 = *(_QWORD *)(v27 - 8);
  v58 = v27;
  v28 = *(_QWORD *)(v57 + 64);
  v30 = __chkstk_darwin(v27, v29);
  v31 = (char *)v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v30, v32);
  v35 = (char *)v53 - v34;
  UUID.init()(v33);
  sub_10002F86C();
  v36 = (uint64_t)objc_msgSend(*(id *)(v0 + 64), "active");
  if ((v36 & 1) == 0)
  {
    v36 = sub_10003020C();
    if ((v36 & 1) == 0)
    {
      v37 = static os_log_type_t.error.getter(v36);
      v36 = sub_10001539C(v37, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Failed to start USB listener.", 29);
    }
  }
  v56 = *(_QWORD *)(v0 + 16);
  static DispatchTime.now()(v36);
  *v18 = 10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v18, enum case for DispatchTimeInterval.seconds(_:), v13);
  v54 = v26;
  + infix(_:_:)(v23, v18);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v18, v13);
  v55 = *(void (**)(char *, uint64_t))(v1 + 8);
  v55(v23, v65);
  v38 = sub_100015378((uint64_t)&unk_10007B5C0);
  sub_100014520(v38);
  v39 = v57;
  v40 = v58;
  sub_10001623C((uint64_t)v31, (uint64_t)v35, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 16));
  v41 = *(unsigned __int8 *)(v39 + 80);
  v42 = (v41 + 24) & ~v41;
  v43 = swift_allocObject(&unk_10007B5E8, v42 + v28, v41 | 7);
  *(_QWORD *)(v43 + 16) = v38;
  sub_10001623C(v43 + v42, (uint64_t)v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 32));
  v67[4] = sub_1000333E4;
  v67[5] = v43;
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 1107296256;
  v67[2] = sub_10000E208;
  v67[3] = &unk_10007B600;
  v44 = _Block_copy(v67);
  v45 = sub_1000144D8();
  v46 = v59;
  static DispatchQoS.unspecified.getter(v45);
  v66 = &_swiftEmptyArrayStorage;
  sub_10000EC7C((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v48 = v47;
  v49 = sub_1000150C0(&qword_1000850F0);
  sub_10003352C((unint64_t *)&qword_1000853C0, &qword_1000850F0);
  v50 = v62;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v49, v51, v64, v48);
  v52 = v54;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v54, v46, v50, v44);
  sub_1000155C0();
  sub_100033A64(v50, *(uint64_t (**)(uint64_t, uint64_t))(v63 + 8));
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v46, v61);
  v55(v52, v65);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v35, v40);
  sub_100015384();
  sub_10001195C();
  sub_1000138B4();
}

uint64_t sub_100032F48(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_10002FB24();
    return swift_release(v3);
  }
  return result;
}

void sub_100032FA4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(v1);

  v2 = *(void **)(v0 + 88);
  sub_100014510();
}

uint64_t sub_100033000()
{
  uint64_t v0;

  sub_100032FA4();
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for PairingConsentCollector()
{
  return objc_opt_self(_TtC20remotepairingdeviced23PairingConsentCollector);
}

uint64_t initializeBufferWithCopyOfBuffer for PairingConsentCollector.State(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for PairingConsentCollector.State(uint64_t a1)
{

}

uint64_t assignWithCopy for PairingConsentCollector.State(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v5;

  v7 = *(void **)(a1 + 16);
  v8 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for PairingConsentCollector.State(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;

  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for PairingConsentCollector.State(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairingConsentCollector.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingConsentCollector.State()
{
  return &type metadata for PairingConsentCollector.State;
}

uint64_t destroy for PromptlessPairingSessionState(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

void _s20remotepairingdeviced29PromptlessPairingSessionStateVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  sub_1000153B0();
  sub_100014510();
}

uint64_t *assignWithCopy for PromptlessPairingSessionState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for PromptlessPairingSessionState(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for PromptlessPairingSessionState(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptlessPairingSessionState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptlessPairingSessionState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptlessPairingSessionState()
{
  return &type metadata for PromptlessPairingSessionState;
}

unint64_t sub_100033380()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086250;
  if (!qword_100086250)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100086250);
  }
  return result;
}

uint64_t sub_1000333BC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000333E4()
{
  return sub_1000338E8((uint64_t (*)(_QWORD, uint64_t))sub_100032F48);
}

uint64_t sub_1000333F4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000309E4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100033400()
{
  uint64_t v0;

  sub_1000118EC();
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100033428(char a1)
{
  uint64_t v1;

  sub_100031470(a1, *(void (**)(char *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t sub_100033434()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100085D98;
  if (!qword_100085D98)
  {
    v1 = sub_10001AE64((uint64_t *)&unk_100086180);
    sub_10000EC7C(&qword_100084CD0, (uint64_t (*)(uint64_t))type metadata accessor for CFString);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100085D98);
  }
  return result;
}

uint64_t sub_1000334B4()
{
  uint64_t v0;

  sub_1000118EC();
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000334E4()
{
  uint64_t v0;

  return sub_100032260(*(__CFUserNotification **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

unint64_t sub_1000334F0()
{
  unint64_t result;

  result = qword_100085DA0;
  if (!qword_100085DA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100085DA0);
  }
  return result;
}

void sub_10003352C(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_10001AE64(a2);
    atomic_store(sub_1000164A8(v3), a1);
  }
  sub_100014510();
}

uint64_t sub_100033560()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100033584(uint64_t a1)
{
  uint64_t v1;

  return sub_10004569C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10003358C()
{
  uint64_t v0;

  return sub_100013604(v0, 24);
}

uint64_t sub_100033598()
{
  uint64_t v0;

  sub_1000135FC();
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000335C8()
{
  uint64_t v0;

  return sub_1000324B0(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(uint64_t (**)(uint64_t))(v0 + 40));
}

uint64_t sub_1000335DC()
{
  uint64_t v0;

  sub_1000118EC();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000335FC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000315EC(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100033604(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

void sub_100033628(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a4, "evaluatePolicy:options:reply:", a1, isa, a3);

}

uint64_t sub_1000336B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = sub_100033A40();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return sub_100013A48(v0, v7 + 16, v5);
}

uint64_t sub_100033730()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_100033A40() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100030C74(v0 + v2, *(_QWORD *)(v0 + v3), *(uint64_t (**)(uint64_t))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10003377C()
{
  uint64_t v0;

  return sub_100030370(v0);
}

uint64_t sub_100033784()
{
  uint64_t v0;

  return sub_100030158(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10003378C()
{
  uint64_t v0;

  return sub_100013604(v0, 32);
}

uint64_t sub_100033798()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000337B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0(&qword_100085DB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033800(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0(&qword_100085DB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033848(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000150C0(&qword_100085DC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100033888()
{
  uint64_t v0;

  sub_10002FEBC(v0);
}

uint64_t sub_100033894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000118FC();
  sub_1000159C0();
  v4 = v2 + v3;
  v6 = v5 | 7;
  sub_1000135FC();
  sub_100015DEC(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return sub_100013A48(v0, v4, v6);
}

uint64_t sub_1000338DC()
{
  return sub_1000338E8((uint64_t (*)(_QWORD, uint64_t))sub_10002FCC8);
}

uint64_t sub_1000338E8(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000118FC() - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_100033924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  sub_1000118FC();
  sub_1000159C0();
  v4 = v2 + v3;
  v6 = v5 | 7;
  v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + v0;
  v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 24;
  sub_1000135FC();
  sub_100015DEC(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 16));
  return swift_deallocObject(v0, v8, v6);
}

void sub_100033994()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_1000118FC() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10002FA28(*(_QWORD *)(v0 + 16), v0 + v2, *(_BYTE *)(v0 + v2 + *(_QWORD *)(v1 + 64)), *(_QWORD *)(((v2 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + v0 + 8), *(_QWORD *)(((v2 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + v0 + 16));
}

uint64_t sub_100033A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_1000309E4(v0, *(_QWORD *)(v3 - 128), v2, *(_QWORD *)(v3 - 120), v1);
}

uint64_t sub_100033A40()
{
  return type metadata accessor for PairingConsentCollectionOutcome(0);
}

uint64_t sub_100033A48()
{
  return 0;
}

uint64_t sub_100033A5C()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_100033A64@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100033A6C()
{
  return static DispatchWorkItemFlags.barrier.getter();
}

void sub_100033A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  void (*v80)(uint64_t, uint64_t);
  _QWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[7];

  sub_100011610();
  v2 = v1;
  v4 = v3;
  v96 = v5;
  v6 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
  v90 = *(_QWORD *)(v6 - 8);
  v91 = v6;
  sub_1000123E4();
  __chkstk_darwin(v7, v8);
  sub_1000138DC();
  v89 = v9;
  v103 = type metadata accessor for UUID(0);
  v83 = *(_QWORD *)(v103 - 8);
  sub_1000123E4();
  __chkstk_darwin(v10, v11);
  sub_1000138DC();
  v82 = v12;
  v86 = sub_1000150C0(&qword_100086168);
  sub_1000123E4();
  __chkstk_darwin(v13, v14);
  sub_1000138DC();
  v99 = v15;
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000123E4();
  __chkstk_darwin(v16, v17);
  sub_1000156C4();
  v85 = v18;
  sub_100024B80();
  __chkstk_darwin(v19, v20);
  v84 = (char *)v81 - v21;
  sub_100024B80();
  __chkstk_darwin(v22, v23);
  v87 = (uint64_t)v81 - v24;
  sub_100024B80();
  __chkstk_darwin(v25, v26);
  v97 = (uint64_t)v81 - v27;
  v98 = type metadata accessor for ControlChannelConnection.State(0);
  v101 = *(_QWORD *)(v98 - 8);
  sub_1000123E4();
  __chkstk_darwin(v28, v29);
  sub_10001547C();
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v4, v2);
  if ((v30 & 0xC000000000000001) != 0)
  {
    if (v30 >= 0)
      v30 &= 0xFFFFFFFFFFFFFF8uLL;
    __CocoaSet.makeIterator()(v30);
    sub_1000135A4();
    sub_10003AFD8(&qword_100086130, v31, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    sub_1000164B4(v32);
    v30 = v105[1];
    v95 = v105[2];
    v33 = v105[3];
    v34 = v105[4];
    v35 = v105[5];
  }
  else
  {
    v34 = 0;
    v36 = -1 << *(_BYTE *)(v30 + 32);
    v37 = *(_QWORD *)(v30 + 56);
    v95 = v30 + 56;
    v33 = ~v36;
    v38 = -v36;
    if (v38 < 64)
      v39 = ~(-1 << v38);
    else
      v39 = -1;
    v35 = v39 & v37;
  }
  v40 = v98;
  v81[1] = v33;
  v93 = v30 & 0x7FFFFFFFFFFFFFFFLL;
  v94 = (unint64_t)(v33 + 64) >> 6;
  v100 = enum case for ControlChannelConnection.State.authenticated(_:);
  v88 = enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:);
  v92 = (char *)&type metadata for Swift.AnyObject + 8;
  v102 = v30;
  while (v30 < 0)
  {
    v44 = __CocoaSet.Iterator.next()(v30);
    if (!v44)
      goto LABEL_51;
    v45 = v44;
    v104 = v44;
    v46 = sub_1000135A4();
    swift_unknownObjectRetain(v45);
    swift_dynamicCast(v105, &v104, v92, v46, 7);
    v47 = v105[0];
    v48 = sub_100015DBC();
    v43 = v34;
    v41 = v35;
    if (!v47)
      goto LABEL_51;
LABEL_31:
    dispatch thunk of ControlChannelConnection.state.getter(v48);
    v56 = v101;
    v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 88))(v0, v40);
    if (v57 != v100)
    {
      sub_10001195C();
      sub_1000165FC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
      goto LABEL_48;
    }
    sub_1000165FC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
    v58 = v96;
    v59 = sub_100015658(v96, 1, v103);
    v60 = v97;
    sub_10003B00C(v58, v97);
    v61 = v60;
    if (v59 == 1)
      goto LABEL_42;
    v62 = (void *)dispatch thunk of ControlChannelConnection.resolvedIdentity.getter(v60);
    if (v62)
    {
      v63 = v62;
      v64 = objc_msgSend(v62, "identifier");

      if (v64)
      {
        v65 = (uint64_t)v84;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v64);

        v66 = 0;
      }
      else
      {
        v66 = 1;
        v65 = (uint64_t)v84;
      }
      sub_10003B108(v65, v66);
      v67 = v87;
      sub_100039474(v65, v87, (uint64_t *)&unk_100086150);
    }
    else
    {
      v67 = v87;
      sub_10003B108(v87, 1);
    }
    v68 = v85;
    v69 = v99;
    v70 = v99 + *(int *)(v86 + 48);
    sub_10003B00C(v67, v99);
    sub_10003B00C(v60, v70);
    if (sub_100015658(v69, 1, v103) == 1)
    {
      sub_1000159DC(v67);
      sub_1000159DC(v60);
      v71 = sub_10003B0AC();
      v40 = v98;
      v61 = v99;
      if (v71 == 1)
      {
LABEL_42:
        sub_1000159DC(v61);
LABEL_43:
        v73 = v90;
        v72 = v91;
        v74 = v89;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v90 + 104))(v89, v88, v91);
        dispatch thunk of ControlChannelConnection.invalidate(for:)(v74);
        sub_10001195C();
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v74, v72);
        goto LABEL_44;
      }
      goto LABEL_47;
    }
    sub_10003B00C(v99, v68);
    if (sub_10003B0AC() == 1)
    {
      sub_1000159DC(v67);
      sub_1000159DC(v60);
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v68, v103);
      v40 = v98;
LABEL_47:
      sub_10002D678(v99, &qword_100086168);
      sub_10001195C();
LABEL_48:
      v34 = v43;
      v35 = v41;
      v30 = v102;
    }
    else
    {
      v75 = v83;
      v76 = v82;
      v77 = v103;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 32))(v82, v70, v103);
      sub_10001234C(&qword_100086170, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v79 = dispatch thunk of static Equatable.== infix(_:_:)(v68, v76, v77, v78);
      v80 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      v80(v76, v77);
      sub_1000159DC(v87);
      sub_1000159DC(v97);
      v80(v68, v77);
      sub_1000159DC(v99);
      if ((v79 & 1) != 0)
        goto LABEL_43;
      sub_10001195C();
LABEL_44:
      v34 = v43;
      v35 = v41;
      v40 = v98;
      v30 = v102;
    }
  }
  if (v35)
  {
    v41 = (v35 - 1) & v35;
    v42 = __clz(__rbit64(v35)) | (v34 << 6);
    v43 = v34;
LABEL_30:
    v55 = *(_QWORD *)(*(_QWORD *)(v30 + 48) + 8 * v42);
    v48 = sub_100011948();
    if (!v55)
      goto LABEL_51;
    goto LABEL_31;
  }
  v49 = v34 + 1;
  if (!__OFADD__(v34, 1))
  {
    if (v49 >= v94)
      goto LABEL_51;
    v43 = v34 + 1;
    if (!*(_QWORD *)(v95 + 8 * v49))
    {
      v43 = v34 + 2;
      if (v34 + 2 >= v94)
        goto LABEL_51;
      if (!*(_QWORD *)(v95 + 8 * v43))
      {
        v43 = v34 + 3;
        if (v34 + 3 >= v94)
          goto LABEL_51;
        if (!*(_QWORD *)(v95 + 8 * v43))
        {
          v43 = v34 + 4;
          if (v34 + 4 >= v94)
            goto LABEL_51;
          if (!*(_QWORD *)(v95 + 8 * v43))
          {
            v50 = v34 + 5;
            while (v50 < v94)
            {
              if (*(_QWORD *)(v95 + 8 * v50++))
              {
                v43 = v50 - 1;
                goto LABEL_29;
              }
            }
LABEL_51:
            sub_100018CD4(v102);
            sub_1000138B4();
            return;
          }
        }
      }
    }
LABEL_29:
    sub_10003B074();
    v41 = v53 & v52;
    v42 = v54 + (v43 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

void sub_100034134()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  if (!v1)
  {
    v2 = *(void **)(v0 + 16);
    v3 = type metadata accessor for PairingConsentCollector();
    sub_1000138D4(v3, 96);
    v4 = v2;
    v5 = sub_10002F510();
    *(_QWORD *)(v0 + 24) = v5;
    swift_retain(v5);
    sub_1000115DC();
    v1 = 0;
  }
  swift_retain(v1);
  sub_100013AE8();
}

void sub_10003419C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[4];
  if (!v1)
  {
    v2 = (void *)v0[2];
    v3 = v0[15];
    sub_100011948();
    v4 = sub_10003A124(v2, v3, 0);
    v0[4] = v4;
    swift_retain(v4);
    sub_1000115DC();
    v1 = 0;
  }
  swift_retain(v1);
  sub_100013AE8();
}

void sub_100034200()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 40);
  if (!v1)
  {
    v2 = sub_100034250(v0);
    *(_QWORD *)(v0 + 40) = v2;
    swift_retain(v2);
    sub_1000115DC();
    v1 = 0;
  }
  swift_retain(v1);
  sub_100013AE8();
}

_QWORD *sub_100034250(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v2 = type metadata accessor for InProcessIRKGenerator(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v5, v8);
  v11 = (char *)&v15 - v10;
  InProcessIRKGenerator.init()(v9);
  v12 = *(_QWORD *)(a1 + 120);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v11, v2);
  swift_retain(v12);
  v13 = sub_100039588((uint64_t)v7, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
  return v13;
}

void sub_100034320()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[6];
  if (!v1)
  {
    v2 = (void *)v0[2];
    v3 = v0[15];
    sub_100011948();
    v4 = v2;
    v5 = sub_10000E49C();
    v6 = sub_10003A468(v5, v4, v3);
    v0[6] = v6;
    swift_retain(v6);
    sub_1000115DC();
    v1 = 0;
  }
  swift_retain(v1);
  sub_100013AE8();
}

void sub_10003438C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_100011610();
  v3 = sub_100015FE0();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  sub_100011984();
  sub_10003AFFC();
  __chkstk_darwin(v6, v7);
  sub_10000E504();
  sub_1000152C4();
  __chkstk_darwin(v8, v9);
  sub_100024CF0();
  v10 = *(_QWORD *)(v0 + 56);
  if (!v10)
  {
    swift_retain_n(v0, 2);
    sub_10003B0F0();
    v20 = v11;
    sub_10003492C();
    sub_10003AF4C(v12);
    sub_10003AFD8((unint64_t *)&unk_100086210, v13, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    sub_1000124A4();
    sub_10001604C((unint64_t *)&unk_100086220);
    sub_10001360C(v14);
    sub_10003AF6C(enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104));
    sub_1000153C4();
    v16 = sub_1000158A0(57, v15);
    sub_1000165FC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    sub_10003AF8C();
    sub_10003B158(*(uint64_t (**)(uint64_t, _QWORD))(v2 + 8));
    v17 = *(_QWORD *)(v0 + 120);
    sub_1000124D0();
    v18 = sub_1000398C4(v0, v0, v20, v19, v16, v17);
    *(_QWORD *)(v0 + 56) = v18;
    swift_retain(v18);
    sub_1000115DC();
    v10 = 0;
  }
  swift_retain(v10);
  sub_1000138B4();
}

void sub_100034508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;

  sub_100011610();
  v3 = sub_100015FE0();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  sub_100012460();
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_10003AFFC();
  __chkstk_darwin(v7, v8);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v0 + 64);
  if (!v16)
  {
    sub_10003B114();
    v30 = v1;
    sub_100034200();
    v32 = v17;
    v29[1] = *(_QWORD *)(v0 + 16);
    static DispatchQoS.userInitiated.getter();
    v33 = &_swiftEmptyArrayStorage;
    sub_10003AFD8((unint64_t *)&unk_100086210, v18, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v29[0] = v19;
    v20 = sub_1000124A4();
    sub_10001604C((unint64_t *)&unk_100086220);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v20, v21, v6, v29[0]);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
    sub_1000153C4();
    v23 = OS_dispatch_queue.childQueue(label:qos:attributes:autoreleaseFrequency:)(0xD00000000000003ELL, v22, v15, v10, v2);
    sub_1000165FC(v2, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v6);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v31);
    v24 = type metadata accessor for NetworkPairingService();
    v25 = sub_1000138D4(v24, 112);
    *(_QWORD *)(v25 + 88) = type metadata accessor for RemotePairingDeviceService();
    sub_10001234C(&qword_100086258, v26, (uint64_t (*)(uint64_t))type metadata accessor for RemotePairingDeviceService, (uint64_t)&unk_100066270);
    *(_QWORD *)(v25 + 16) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v25 + 24) = 0;
    *(_QWORD *)(v25 + 32) = 0;
    *(_QWORD *)(v25 + 40) = 0;
    *(_BYTE *)(v25 + 48) = 2;
    v27 = v32;
    *(_QWORD *)(v25 + 96) = v28;
    *(_QWORD *)(v25 + 104) = v27;
    *(_QWORD *)(v25 + 56) = v23;
    *(_QWORD *)(v25 + 64) = v0;
    *(_QWORD *)(v0 + 64) = v25;
    sub_1000124D0();
    sub_1000118D4();
    v16 = 0;
  }
  swift_retain(v16);
  sub_1000138B4();
}

void sub_100034744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_100011610();
  sub_100015FE0();
  sub_1000152C4();
  __chkstk_darwin(v3, v4);
  sub_100011984();
  sub_10003AFFC();
  __chkstk_darwin(v5, v6);
  v7 = sub_10000E504();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  sub_100024CF0();
  v10 = *(_QWORD *)(v0 + 72);
  if (!v10)
  {
    sub_10003B114();
    sub_10003B0F0();
    v20 = v11;
    sub_10003492C();
    sub_10003AF4C(v12);
    sub_10003AFD8((unint64_t *)&unk_100086210, v13, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    sub_1000124A4();
    sub_10001604C((unint64_t *)&unk_100086220);
    sub_10001360C(v14);
    sub_10003AF6C(enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
    sub_1000153C4();
    v16 = sub_1000158A0(69, v15);
    sub_1000165FC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    sub_10003AF8C();
    sub_10003B158(*(uint64_t (**)(uint64_t, _QWORD))(v8 + 8));
    v17 = *(_QWORD *)(v0 + 120);
    sub_1000124D0();
    v18 = sub_100039B14(v0, v20, v19, v16, v17);
    *(_QWORD *)(v0 + 72) = v18;
    swift_retain(v18);
    sub_1000115DC();
    v10 = 0;
  }
  swift_retain(v10);
  sub_1000138B4();
}

void sub_1000348B0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 80);
  if (!v1)
  {
    v2 = *(id *)(v0 + 16);
    sub_100034200();
    v3 = type metadata accessor for DeviceInitiatedPairingService();
    sub_1000138D4(v3, 96);
    v4 = (void *)sub_100014548();
    v7 = sub_10003A204(v4, v5, 0, v6);
    *(_QWORD *)(v0 + 80) = v7;
    swift_retain(v7);
    sub_1000115DC();
    v1 = 0;
  }
  swift_retain(v1);
  sub_100013AE8();
}

void sub_10003492C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 88);
  if (!v1)
  {
    sub_1000349C8();
    v3 = v2;
    v4 = *(void **)(v0 + 16);
    v5 = type metadata accessor for MetadataService(0);
    v6 = (_QWORD *)sub_1000119A0(v5);
    v7 = sub_100039760(v3, (uint64_t)v4, (uint64_t)sub_10003F8C0, 0, 0xD000000000000019, 0x800000010006C350, v6);
    *(_QWORD *)(v0 + 88) = v7;
    swift_retain(v7);
    sub_1000115DC();
    v1 = 0;
  }
  swift_retain(v1);
  sub_100013AE8();
}

void sub_1000349C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 96);
  if (!v1)
  {
    v2 = v0;
    v3 = *(void **)(v0 + 16);
    v4 = type metadata accessor for XPCEventPublisher();
    v5 = type metadata accessor for AuxiliaryMetadataService();
    sub_1000138D4(v5, 104);
    *(_QWORD *)(v2 + 96) = sub_100041E2C(v3, v4, (uint64_t)&off_10007C458, 0);
    sub_10000E49C();
    sub_1000115DC();
    v1 = 0;
  }
  swift_retain(v1);
  sub_100013AE8();
}

void sub_100034A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  if (!v1)
  {
    v2 = sub_100034AA0(v0);
    *(_QWORD *)(v0 + 104) = v2;
    swift_bridgeObjectRetain(v2);
    sub_1000155B8();
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  sub_100013AE8();
}

uint64_t sub_100034AA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  _UNKNOWN **v62;

  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v58 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v59 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000150C0(&qword_100087130);
  v16 = swift_allocObject(v15, 152, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100065CE0;
  sub_10003438C();
  v18 = v17;
  *(_QWORD *)(v16 + 56) = type metadata accessor for RSDService();
  *(_QWORD *)(v16 + 64) = &off_10007D078;
  *(_QWORD *)(v16 + 32) = v18;
  sub_100034508();
  v20 = v19;
  *(_QWORD *)(v16 + 96) = type metadata accessor for NetworkPairingService();
  *(_QWORD *)(v16 + 104) = &off_10007CCD0;
  *(_QWORD *)(v16 + 72) = v20;
  sub_100034744();
  v22 = v21;
  *(_QWORD *)(v16 + 136) = type metadata accessor for NetworkControlChannelService();
  *(_QWORD *)(v16 + 144) = &off_10007BE70;
  *(_QWORD *)(v16 + 112) = v22;
  v23 = sub_10000F4E0();
  if ((v23 & 1) != 0)
  {
    sub_100034200();
    v57 = v24;
    v55 = *(_QWORD *)(a1 + 16);
    static DispatchQoS.userInitiated.getter();
    *(_QWORD *)&v60 = &_swiftEmptyArrayStorage;
    sub_10001234C((unint64_t *)&unk_100086210, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v56 = v12;
    v26 = v25;
    v27 = sub_1000150C0(&qword_100085D80);
    v54 = v8;
    v28 = v2;
    v29 = v27;
    sub_10000F4A4((unint64_t *)&unk_100086220, &qword_100085D80);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v29, v30, v7, v26);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v28);
    v31 = v59;
    v32 = OS_dispatch_queue.childQueue(label:qos:attributes:autoreleaseFrequency:)(0xD00000000000003FLL, 0x800000010006C310, v59, v11, v6);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v28);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v11, v7);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v31, v56);
    v33 = *(_QWORD *)(a1 + 120);
    v34 = type metadata accessor for LockStateManager(0);
    v61 = v34;
    v62 = &off_10007CAE0;
    *(_QWORD *)&v60 = v33;
    v35 = type metadata accessor for LockdownService();
    v36 = swift_allocObject(v35, 88, 7);
    v37 = sub_100039560((uint64_t)&v60, v34);
    __chkstk_darwin(v37, v37);
    v39 = (uint64_t *)((char *)&v53 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v40 + 16))(v39);
    v41 = *v39;
    *(_QWORD *)(v36 + 56) = v34;
    *(_QWORD *)(v36 + 64) = &off_10007CAE0;
    *(_QWORD *)(v36 + 32) = v41;
    *(_BYTE *)(v36 + 72) = 0;
    *(_QWORD *)(v36 + 80) = v57;
    *(_QWORD *)(v36 + 16) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v36 + 24) = v32;
    swift_retain(v33);
    sub_100010DFC(&v60);
    v42 = *(_QWORD *)(v16 + 16);
    v43 = *(_QWORD *)(v16 + 24);
    swift_retain(v36);
    if (v42 >= v43 >> 1)
    {
      sub_1000490F8();
      v16 = v52;
    }
    v61 = v35;
    v62 = &off_10007A7B8;
    *(_QWORD *)&v60 = v36;
    *(_QWORD *)(v16 + 16) = v42 + 1;
    sub_10002D6E4(&v60, v16 + 40 * v42 + 32);
    swift_release(v36);
  }
  else
  {
    v44 = static os_log_type_t.default.getter(v23);
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, qword_1000886E0, "Not initializing real LockdownService as liblockdown is not available", 69, 2);
    sub_100034200();
    v46 = v45;
    v47 = *(void **)(a1 + 16);
    v48 = type metadata accessor for DummyLockdownService();
    swift_allocObject(v48, 48, 7);
    v49 = sub_1000187FC(v46, v47);
    sub_1000490F8();
    v16 = v50;
    v61 = v48;
    v62 = &off_10007A788;
    *(_QWORD *)&v60 = v49;
    *(_QWORD *)(v50 + 16) = 4;
    sub_10002D6E4(&v60, v50 + 152);
  }
  return v16;
}

void sub_100034F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  if (!v1)
  {
    sub_1000173F0(0, (unint64_t *)&qword_100086200, OS_dispatch_source_ptr);
    v2 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15, *(_QWORD *)(v0 + 16));
    v3 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)(v0 + 112) = v2;
    swift_unknownObjectRetain(v2);
    swift_unknownObjectRelease(v3);
    v1 = 0;
  }
  swift_unknownObjectRetain(v1);
  sub_100013AE8();
}

void sub_100034FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  sub_100011610();
  v5 = v0;
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_1000123E4();
  __chkstk_darwin(v7, v8);
  sub_100015C94();
  sub_1000123E4();
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  sub_10003B19C();
  __chkstk_darwin(v13, v14);
  sub_10000E4A4();
  sub_1000173F0(0, (unint64_t *)&qword_100086250, OS_dispatch_queue_ptr);
  v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  static DispatchQoS.unspecified.getter(v15);
  v23 = &_swiftEmptyArrayStorage;
  sub_10001234C((unint64_t *)&unk_100086210, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = v16;
  v18 = sub_1000150C0(&qword_100085D80);
  sub_10000F4A4((unint64_t *)&unk_100086220, &qword_100085D80);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v6, v17);
  sub_1000153C4();
  *(_QWORD *)(v5 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002FLL, v20, v12, v1, v2, 0);
  v21 = type metadata accessor for LockStateManager(0);
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  sub_1000119A0(v21);
  *(_QWORD *)(v5 + 120) = sub_10004C15C();
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_BYTE *)(v5 + 160) = 1;
  sub_100038EA8();
  sub_1000138B4();
}

void sub_100035170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  uint64_t v16;

  sub_100011610();
  v5 = sub_100016290();
  sub_1000152C4();
  __chkstk_darwin(v6, v7);
  v8 = sub_100015C94();
  sub_10003B064();
  __chkstk_darwin(v9, v10);
  sub_100012460();
  v15[5] = sub_10003AF04;
  v16 = v0;
  v15[1] = _NSConcreteStackBlock;
  v15[2] = 1107296256;
  v11 = sub_10000E4BC((uint64_t)sub_10000E208);
  v12 = sub_1000152D4();
  static DispatchQoS.unspecified.getter(v12);
  v15[0] = &_swiftEmptyArrayStorage;
  sub_10001234C((unint64_t *)&unk_1000853B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_1000124A4();
  sub_10001604C((unint64_t *)&qword_1000853C0);
  sub_10003B02C((uint64_t)v15, v13, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v2, v1, v11);
  _Block_release(v11);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v8);
  swift_release(v16);
  sub_1000138B4();
}

void sub_1000352C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (__cdecl *v29)(int);
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t (*v40)();
  uint64_t v41;

  sub_100011610();
  v1 = sub_100016290();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v4 = sub_100015318();
  v37 = *(_QWORD *)(v4 - 8);
  sub_1000123E4();
  __chkstk_darwin(v5, v6);
  sub_1000138DC();
  v36 = v7;
  sub_100011948();
  sub_1000153C4();
  sub_10004ACD8(0xD00000000000001CLL);
  sub_10003492C();
  v9 = v8;
  v10 = sub_1000138D4((uint64_t)&unk_10007B9E8, 24);
  sub_100015700(v10);
  v11 = *(_QWORD *)(v9 + 24);
  v12 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 24) = sub_100039548;
  *(_QWORD *)(v9 + 32) = v10;
  sub_1000392D4(v11, v12);
  sub_1000118D4();
  sub_100034A50();
  v14 = v13;
  v15 = *(_QWORD *)(v13 + 16);
  if (v15)
  {
    v35 = v4;
    v16 = v0;
    v17 = v2;
    v18 = v1;
    v19 = v13 + 32;
    do
    {
      sub_10002D498(v19, (uint64_t)v38);
      v20 = v39;
      v21 = v40;
      sub_100016418(v38, v39);
      (*((void (**)(uint64_t, uint64_t (*)()))v21 + 3))(v20, v21);
      sub_100010DFC(v38);
      v19 += 40;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease(v14);
    v1 = v18;
    v2 = v17;
    v0 = v16;
    v4 = v35;
  }
  else
  {
    swift_bridgeObjectRelease(v13);
  }
  sub_10003B024();
  sub_10005087C();
  sub_1000118D4();
  sub_10003B024();
  sub_10004FC24();
  sub_1000118D4();
  sub_100034320();
  sub_100019750(v22);
  sub_1000118D4();
  sub_1000348B0();
  sub_10002547C();
  sub_1000118D4();
  sub_10003492C();
  sub_10003F938();
  sub_1000118D4();
  sub_1000153C4();
  sub_100035C04(v23, v24);
  sub_1000153C4();
  sub_100035C04(v25, v26);
  sub_100034200();
  v27 = sub_1000138D4((uint64_t)&unk_10007B9E8, 24);
  sub_100015700(v27);
  swift_retain(v27);
  sub_100022C20((uint64_t)sub_100039550, v27);
  sub_1000118D4();
  v28 = swift_release_n(v27, 2);
  v29 = (void (__cdecl *)(int))SIG_IGN.getter(v28);
  signal(15, v29);
  sub_100034F38();
  ObjectType = swift_getObjectType(v30);
  v32 = sub_1000138D4((uint64_t)&unk_10007B9E8, 24);
  sub_100015700(v32);
  v40 = sub_100039558;
  v41 = v32;
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 1107296256;
  v33 = sub_10000E4BC((uint64_t)sub_10000E208);
  sub_1000152D4();
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
  sub_10001B3CC(ObjectType);
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v36, v0, v33, ObjectType);
  _Block_release(v33);
  sub_100015DBC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v4);
  swift_release();
  sub_1000118D4();
  sub_100034F38();
  swift_getObjectType(v34);
  OS_dispatch_source.resume()();
  sub_100015DBC();
  sub_1000389A8();
  sub_1000138B4();
}

uint64_t sub_10003561C()
{
  sub_100034200();
  sub_100023158();
  sub_100015784();
  return swift_release();
}

uint64_t sub_10003577C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v1 = a1 + 16;
  v2 = static os_log_type_t.default.getter(a1);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1000886E0, "Device metadata did change. Pushing updated info to host via control channels", 77, 2, &_swiftEmptyArrayStorage);
  swift_beginAccess(v1, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_100035934();
    return swift_release();
  }
  return result;
}

uint64_t sub_100035800(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    notify_post((const char *)objc_msgSend(objc_retainAutorelease(kRemotePairingTrustedHostsUpdatedNotificationName), "UTF8String"));
    if (a1 <= 2u)
      notify_post((const char *)objc_msgSend(objc_retainAutorelease(*(id *)*(&off_10007BB90 + (char)a1)), "UTF8String"));
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_1000358AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    sub_100038908();
    Strong = swift_release();
  }
  return xpc_transaction_exit_clean(Strong);
}

uint64_t sub_100035904(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = a2;
  sub_1000394E4(a1, a2);
  v3 = sub_100014548();
  return sub_1000392D4(v3, v4);
}

void sub_100035934()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  sub_100034A50();
  v33 = *(_QWORD *)(v0 + 16);
  if (!v33)
  {
    swift_bridgeObjectRelease(v0);
    return;
  }
  v1 = 0;
  v32 = v0 + 32;
  v31 = v0;
LABEL_3:
  if (v1 >= *(_QWORD *)(v0 + 16))
    goto LABEL_36;
  sub_10002D498(v32 + 40 * v1, (uint64_t)v37);
  v2 = v38;
  v3 = v39;
  sub_100016418(v37, v38);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  v5 = v4;
  if ((v4 & 0xC000000000000001) != 0)
  {
    if (v4 >= 0)
      v4 &= 0xFFFFFFFFFFFFFF8uLL;
    v6 = __CocoaSet.makeIterator()(v4);
    v7 = sub_1000135A4();
    sub_10001234C(&qword_100086130, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    v9 = Set.Iterator.init(_cocoa:)(v6, v7, v8);
    v5 = v40;
    v10 = v41;
    v11 = v42;
    v12 = v43;
    v13 = v44;
  }
  else
  {
    v12 = 0;
    v10 = v4 + 56;
    sub_10003AFB0();
    v13 = v14 & v15;
  }
  v34 = v1 + 1;
  v16 = (unint64_t)(v11 + 64) >> 6;
  if (v5 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v13)
    {
      v17 = (v13 - 1) & v13;
      v18 = __clz(__rbit64(v13)) | (v12 << 6);
      v19 = v12;
      goto LABEL_29;
    }
    v24 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v24 >= v16)
      goto LABEL_32;
    v19 = v12 + 1;
    if (!*(_QWORD *)(v10 + 8 * v24))
    {
      v19 = v12 + 2;
      if (v12 + 2 >= v16)
        goto LABEL_32;
      if (!*(_QWORD *)(v10 + 8 * v19))
      {
        v19 = v12 + 3;
        if (v12 + 3 >= v16)
          goto LABEL_32;
        if (!*(_QWORD *)(v10 + 8 * v19))
        {
          v19 = v12 + 4;
          if (v12 + 4 >= v16)
            goto LABEL_32;
          if (!*(_QWORD *)(v10 + 8 * v19))
          {
            v25 = v12 + 5;
            while (v25 < v16)
            {
              if (*(_QWORD *)(v10 + 8 * v25++))
              {
                v19 = v25 - 1;
                goto LABEL_28;
              }
            }
LABEL_32:
            sub_100018CD4(v5);
            sub_100010DFC(v37);
            v1 = v34;
            v0 = v31;
            if (v34 == v33)
            {
              swift_bridgeObjectRelease(v31);
              return;
            }
            goto LABEL_3;
          }
        }
      }
    }
LABEL_28:
    sub_10003B074();
    v17 = v28 & v27;
    v18 = v29 + (v19 << 6);
LABEL_29:
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    v23 = sub_10000E49C();
    if (!v30)
      goto LABEL_32;
    while (1)
    {
      dispatch thunk of ControlChannelConnection.pushDeviceInfoChangesToHost()(v23);
      v9 = sub_1000118D4();
      v12 = v19;
      v13 = v17;
      if ((v5 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v20 = __CocoaSet.Iterator.next()(v9);
      if (v20)
      {
        v21 = v20;
        v35 = v20;
        sub_1000135A4();
        swift_unknownObjectRetain(v21);
        sub_10002D7F8((uint64_t)&v36, (uint64_t)&v35, (uint64_t)&type metadata for Swift.AnyObject + 8);
        v22 = v36;
        v23 = swift_unknownObjectRelease(v21);
        v19 = v12;
        v17 = v13;
        if (v22)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
}

void sub_100035C04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = v2;
  v6 = sub_1000138D4((uint64_t)&unk_10007B9E8, 24);
  swift_weakInit(v6 + 16, v3);
  v7 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007BAB0, 40);
  v7[2] = v6;
  v7[3] = a1;
  v7[4] = a2;
  v12 = v7;
  v8 = sub_100011904((uint64_t)sub_100016A28, (uint64_t)_NSConcreteStackBlock, 1107296256, v10, v11);
  sub_1000153B0();
  swift_release(v12);
  v9 = String.utf8CString.getter(a1, a2);
  xpc_activity_register((const char *)(v9 + 32), XPC_ACTIVITY_CHECK_IN, v8);
  sub_1000118D4();
  _Block_release(v8);
}

void sub_100035CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  _BYTE v16[31];
  uint64_t v17;

  v8 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  Strong = swift_weakLoadStrong(v8);
  if (Strong)
  {
    v10 = Strong;
    v11 = *(id *)(Strong + 16);
    v12 = swift_release(v10);
    __chkstk_darwin(v12, v13);
    v15[2] = a2;
    v15[3] = a1;
    v15[4] = a3;
    v15[5] = a4;
    v14 = sub_1000150C0(&qword_1000861F8);
    OS_dispatch_queue.sync<A>(execute:)(&v17, sub_10003952C, v15, v14);

  }
}

uint64_t sub_100035DDC@<X0>(uint64_t a1@<X0>, _xpc_activity_s *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  result = swift_weakLoadStrong(v9);
  v11 = result;
  if (result)
  {
    sub_100035E74(a2, a3, a4);
    result = swift_release(v11);
  }
  *a5 = v11 == 0;
  return result;
}

void sub_100035E74(_xpc_activity_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v8;
  _BOOL8 should_defer;
  _BOOL8 v10;
  os_log_type_t v11;
  NSObject *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = v3;
  v8 = *(_QWORD *)(v3 + 16);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  if (!xpc_activity_get_state(a1))
  {
    v21 = static os_log_type_t.default.getter(0);
    v22 = qword_1000886E0;
    if (!sub_10003AFEC(v21))
      return;
    sub_100015A78();
    v23 = (uint8_t *)sub_1000123C4(12);
    v24 = sub_1000123C4(32);
    v58 = v24;
    *(_DWORD *)v23 = 136446210;
    v25 = sub_10001613C();
    sub_100015DF4(v25);
    sub_10001452C(v26, v27, v28, v29, v30, v31, v32, v33, v57, v58);
    sub_10003AF60();
    sub_1000118DC((void *)&_mh_execute_header, v22, v4, "Received check in event in for XPC activity %{public}s", v23);
LABEL_9:
    sub_1000135B4(v24);
    sub_100012398(v24);
    v20 = (uint64_t)v23;
    goto LABEL_10;
  }
  if (xpc_activity_get_state(a1) != 2)
    return;
  should_defer = xpc_activity_should_defer(a1);
  if (should_defer)
  {
    v10 = xpc_activity_set_state(a1, 3);
    if (!v10)
    {
      v11 = static os_log_type_t.fault.getter(v10);
      v12 = qword_1000886E0;
      if (sub_1000155C8(v11))
      {
        swift_unknownObjectRetain_n(a1, 2);
        v13 = (uint8_t *)sub_1000123C4(12);
        v14 = sub_1000123C4(32);
        v57 = (uint64_t)a1;
        v58 = v14;
        *(_DWORD *)v13 = 136315138;
        swift_unknownObjectRetain(a1);
        v15 = sub_1000150C0(&qword_1000861F0);
        v16 = String.init<A>(describing:)(&v57, v15);
        sub_10003B184(v16, v17, v18, v57, v58);
        v57 = v19;
        sub_100016584((uint64_t)&v57, (uint64_t)&v58);
        swift_unknownObjectRelease_n(a1, 2);
        sub_100016504();
        sub_1000118DC((void *)&_mh_execute_header, v12, (os_log_type_t)v8, "Failed to defer activity %s", v13);
        sub_1000135B4(v14);
        sub_100012398(v14);
        v20 = (uint64_t)v13;
LABEL_10:
        sub_100012398(v20);
        return;
      }
    }
    return;
  }
  v34 = static os_log_type_t.default.getter(should_defer);
  v35 = qword_1000886E0;
  v36 = v34;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v34))
  {
    sub_100015A78();
    v37 = (uint8_t *)sub_1000123C4(12);
    v38 = sub_1000123C4(32);
    v58 = v38;
    *(_DWORD *)v37 = 136446210;
    v39 = sub_10001613C();
    sub_100015DF4(v39);
    sub_10003B138();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v41, v37 + 4);
    sub_10003AF60();
    sub_1000118DC((void *)&_mh_execute_header, v35, v36, "XPC activity %{public}s fired", v37);
    sub_1000135B4(v38);
    sub_100012398(v38);
    sub_100012398((uint64_t)v37);
  }
  if (a2 == 0xD00000000000002ELL && a3 == 0x800000010006C1F0
    || (sub_1000153C4(), v44 = sub_10003AFA0(v42, v43), (v44 & 1) != 0))
  {
    sub_100036244();
    return;
  }
  if (a2 == 0xD00000000000002BLL && a3 == 0x800000010006C220
    || (sub_1000153C4(), v44 = sub_10003AFA0(0xD00000000000002BLL, v45), (v44 & 1) != 0))
  {
    sub_10004AFDC(v44);
    return;
  }
  v46 = static os_log_type_t.fault.getter(v44);
  v47 = qword_1000886E0;
  if (sub_10003AFEC(v46))
  {
    sub_100015A78();
    v23 = (uint8_t *)sub_1000123C4(12);
    v24 = sub_1000123C4(32);
    v58 = v24;
    *(_DWORD *)v23 = 136315138;
    v48 = sub_10001613C();
    sub_100015DF4(v48);
    sub_10001452C(v49, v50, v51, v52, v53, v54, v55, v56, v57, v58);
    sub_10003AF60();
    sub_1000118DC((void *)&_mh_execute_header, v47, v4, "Received event for unexpected XPC activity %s", v23);
    goto LABEL_9;
  }
}

void sub_100036244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[11];

  sub_100011610();
  v1 = v0;
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000123E4();
  __chkstk_darwin(v2, v3);
  sub_1000155D8();
  sub_100034A50();
  v5 = v4;
  v46 = *(_QWORD *)(v4 + 16);
  if (!v46)
    goto LABEL_36;
  sub_1000173F0(0, (unint64_t *)&qword_100086990, OS_os_log_ptr);
  v6 = 0;
  v45 = v5 + 32;
  v44 = v5;
  while (2)
  {
    if (v6 >= *(_QWORD *)(v5 + 16))
    {
LABEL_38:
      __break(1u);
      return;
    }
    v47 = v6;
    sub_10002D498(v45 + 40 * v6, (uint64_t)v53);
    v8 = static os_log_type_t.info.getter(v7);
    v9 = (void *)static OS_os_log.default.getter(v8);
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Updating last used times for any existing pairing records", 57, 2, &_swiftEmptyArrayStorage);

    v10 = v53[4];
    sub_100016418(v53, v53[3]);
    v11 = sub_10003AFE0();
    v13 = v12(v11, v10);
    v14 = v13;
    if ((v13 & 0xC000000000000001) != 0)
    {
      if (v13 >= 0)
        v13 &= 0xFFFFFFFFFFFFFF8uLL;
      __CocoaSet.makeIterator()(v13);
      sub_1000135A4();
      sub_10001234C(&qword_100086130, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
      v16 = sub_1000164B4(v15);
      v14 = v53[5];
      v50 = v53[6];
      v17 = v53[7];
      v18 = v53[8];
      v19 = v53[9];
    }
    else
    {
      v18 = 0;
      v50 = v13 + 56;
      sub_10003AFB0();
      v19 = v20 & v21;
    }
    v48 = v47 + 1;
    v49 = (unint64_t)(v17 + 64) >> 6;
    while (v14 < 0)
    {
      v25 = __CocoaSet.Iterator.next()(v16);
      if (!v25)
        goto LABEL_35;
      v26 = v25;
      v51 = v25;
      sub_1000135A4();
      v27 = sub_10003AFE0();
      swift_unknownObjectRetain(v27);
      sub_10002D7F8((uint64_t)&v52, (uint64_t)&v51, (uint64_t)&type metadata for Swift.AnyObject + 8);
      v28 = v52;
      v29 = swift_unknownObjectRelease(v26);
      v24 = v18;
      v22 = v19;
      if (!v28)
        goto LABEL_35;
LABEL_26:
      v35 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter(v29);
      if (v35)
      {
        v36 = (void *)v35;
        sub_100034200();
        v37 = sub_10003AFE0();
        sub_100023C18(v37);
        swift_release(v1);

      }
      v16 = sub_1000162AC();
      v18 = v24;
      v19 = v22;
    }
    if (v19)
    {
      v22 = (v19 - 1) & v19;
      v23 = __clz(__rbit64(v19)) | (v18 << 6);
      v24 = v18;
      goto LABEL_25;
    }
    v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v24 >= v49)
      goto LABEL_35;
    if (*(_QWORD *)(v50 + 8 * v24))
    {
LABEL_24:
      sub_10003B074();
      v22 = v32 & v31;
      v23 = v33 + (v24 << 6);
LABEL_25:
      v34 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v23);
      v29 = swift_retain(v34);
      if (!v34)
        goto LABEL_35;
      goto LABEL_26;
    }
    v30 = v18 + 2;
    if (v18 + 2 >= v49)
      goto LABEL_35;
    if (*(_QWORD *)(v50 + 8 * v30))
      goto LABEL_23;
    v30 = v18 + 3;
    if (v18 + 3 >= v49)
      goto LABEL_35;
    if (*(_QWORD *)(v50 + 8 * v30))
    {
LABEL_23:
      v24 = v30;
      goto LABEL_24;
    }
    v24 = v18 + 4;
    if (v18 + 4 >= v49)
      goto LABEL_35;
    if (*(_QWORD *)(v50 + 8 * v24))
      goto LABEL_24;
    v38 = v18 + 5;
    while (v38 < v49)
    {
      if (*(_QWORD *)(v50 + 8 * v38++))
      {
        v24 = v38 - 1;
        goto LABEL_24;
      }
    }
LABEL_35:
    sub_100018CD4(v14);
    sub_100010DFC(v53);
    v6 = v48;
    v5 = v44;
    if (v48 != v46)
      continue;
    break;
  }
LABEL_36:
  v40 = sub_1000118F4();
  v41 = static os_log_type_t.default.getter(v40);
  os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, qword_1000886E0, "Clearing expired pairing records", 32, 2, &_swiftEmptyArrayStorage);
  sub_100034200();
  v43 = v42;
  sub_100023158();
  swift_release(v43);
  sub_1000138B4();
}

uint64_t sub_10003693C()
{
  return 0;
}

void sub_100036944(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *);
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  os_log_type_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t inited;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CFUserNotificationRef v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v53[2];
  char v54[184];

  v6 = v4;
  v9 = type metadata accessor for PinNotificationEvent(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  sub_10001547C();
  v13 = static os_log_type_t.error.getter(v12);
  v14 = qword_1000886E0;
  v15 = v13;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v13))
  {
    sub_10003B0D8();
    v50 = v6;
    v16 = (_DWORD *)sub_1000123C4(12);
    v49 = v9;
    v17 = sub_1000123C4(32);
    v53[0] = v17;
    *v16 = 136315138;
    swift_bridgeObjectRetain(a2);
    sub_100010D40(a1, (uint64_t)a2, v53);
    v19 = sub_10003AF38(v18);
    a4 = *(_QWORD *)(v20 - 256);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v21, v16 + 1);
    sub_10003B0E4();
    sub_10003B16C((void *)&_mh_execute_header, v14, v15, ">>>>> show pin: %s");
    swift_arrayDestroy(v17, 1);
    v22 = v17;
    v9 = v49;
    sub_100012398(v22);
    v23 = (uint64_t)v16;
    v6 = v50;
    sub_100012398(v23);
  }
  v24 = (uint64_t (*)(uint64_t *))v6[17];
  if (!v24)
    goto LABEL_9;
  v25 = v6[18];
  *v5 = a1;
  v5[1] = (uint64_t)a2;
  v5[2] = a3;
  v5[3] = a4;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v10 + 104))(v5, enum case for PinNotificationEvent.show(_:), v9);
  swift_bridgeObjectRetain(a2);
  sub_1000394E4((uint64_t)v24, v25);
  sub_1000153B0();
  v26 = v24(v5);
  v27 = v9;
  v28 = v26;
  v29 = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v5, v27);
  if ((v28 & 1) == 0)
  {
    sub_10003B14C();
LABEL_9:
    v38 = sub_1000150C0(&qword_100085D90);
    inited = swift_initStackObject(v38, v54);
    *(_OWORD *)(inited + 16) = xmmword_100065CC0;
    sub_10003B120((void *)kCFUserNotificationAlertHeaderKey);
    sub_1000150C0((uint64_t *)&unk_100086180);
    sub_100033434();
    sub_1000124FC();
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 72) = 0x72696170206E6950;
    *(_QWORD *)(inited + 80) = 0xEB00000000676E69;
    sub_10003B120((void *)kCFUserNotificationAlertMessageKey);
    sub_1000124FC();
    v53[0] = 0;
    v53[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease(v53[1]);
    strcpy((char *)v53, "Enter the PIN ");
    HIBYTE(v53[1]) = -18;
    v40._countAndFlagsBits = a1;
    v40._object = a2;
    String.append(_:)(v40);
    sub_1000153C4();
    v41._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v41);
    v42 = v53[0];
    v43 = v53[1];
    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 144) = v42;
    *(_QWORD *)(inited + 152) = v43;
    Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    Dictionary._bridgeToObjectiveC()();
    v44 = sub_10003AFE0();
    swift_bridgeObjectRelease(v44);
    v45 = CFUserNotificationCreate(0, 0.0, 0x23uLL, 0, (CFDictionaryRef)((char *)&type metadata for Any + 8));

    v46 = (void *)v6[16];
    v6[16] = v45;

    v48 = static os_log_type_t.error.getter(v47);
    os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, qword_1000886E0, ">>>>> created CFUsernotification", 32, 2, &_swiftEmptyArrayStorage);
    goto LABEL_10;
  }
  v30 = static os_log_type_t.error.getter(v29);
  v31 = qword_1000886E0;
  v32 = v30;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v30))
  {
    sub_10003B0D8();
    v33 = (_DWORD *)sub_1000123C4(12);
    v34 = sub_1000123C4(32);
    v53[0] = v34;
    *v33 = 136315138;
    swift_bridgeObjectRetain(a2);
    sub_100010D40(a1, (uint64_t)a2, v53);
    v36 = sub_10003AF38(v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, v37, v33 + 1);
    sub_10003B0E4();
    sub_10003B16C((void *)&_mh_execute_header, v31, v32, ">>>>> used custom pin handler: %s");
    sub_1000158B8();
    sub_100012398(v34);
    sub_100012398((uint64_t)v33);
  }
  sub_10003B14C();
LABEL_10:
  sub_1000123A4();
}

void sub_100036DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *);
  uint64_t v8;
  __CFUserNotification *v9;
  void *v10;
  uint64_t v11;

  v2 = v0;
  type metadata accessor for PinNotificationEvent(0);
  sub_10003B064();
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void (**)(char *))(v0 + 136);
  if (v7)
  {
    v8 = *(_QWORD *)(v0 + 144);
    sub_10003AF6C(enum case for PinNotificationEvent.hide(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
    sub_10000E49C();
    v7(v6);
    sub_1000392D4((uint64_t)v7, v8);
    sub_1000165FC((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }
  v9 = *(__CFUserNotification **)(v2 + 128);
  if (v9)
  {
    CFUserNotificationCancel(v9);
    v10 = *(void **)(v2 + 128);
    *(_QWORD *)(v2 + 128) = 0;

  }
}

uint64_t sub_100036EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(char *, uint64_t), uint64_t a9)
{
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_10003B084();
  v11 = v10;
  swift_retain_n(a9, 2);
  v12 = v11;
  sub_10003419C();
  v14 = v13;
  sub_10003B04C();
  sub_10004FC48(v15, v16, v17, v18, v19, v20, v14, v12, a8, a9);
  sub_1000162AC();

  return swift_release();
}

void sub_100036F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[7];

  sub_100011610();
  v3 = v2;
  v5 = v4;
  v31 = v6;
  v8 = v7;
  v9 = sub_100016290();
  v30 = *(_QWORD *)(v9 - 8);
  sub_1000123E4();
  __chkstk_darwin(v10, v11);
  v12 = sub_100015318();
  v28 = *(_QWORD *)(v12 - 8);
  v29 = v12;
  sub_1000123E4();
  __chkstk_darwin(v13, v14);
  sub_10000E4A4();
  v15 = sub_1000150C0(&qword_100086178);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15, v18);
  v19 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000393BC(v8, (uint64_t)v19, &qword_100086178);
  v20 = *(unsigned __int8 *)(v16 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(&unk_10007BA60, v21 + v17, v20 | 7);
  *(_QWORD *)(v22 + 16) = v5;
  *(_QWORD *)(v22 + 24) = v3;
  sub_100039474((uint64_t)v19, v22 + v21, &qword_100086178);
  v32[5] = sub_1000394A0;
  v32[6] = v22;
  v32[1] = _NSConcreteStackBlock;
  v32[2] = 1107296256;
  v23 = sub_10000E4BC((uint64_t)sub_10000E208);
  v24 = sub_1000152D4();
  static DispatchQoS.unspecified.getter(v24);
  v32[0] = &_swiftEmptyArrayStorage;
  sub_10001234C((unint64_t *)&unk_1000853B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_1000124A4();
  sub_10001604C((unint64_t *)&qword_1000853C0);
  sub_10003B02C((uint64_t)v32, v25, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v1, v0, v23);
  sub_100015A84();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v0, v9);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v1, v29);
  swift_release();
  sub_1000138B4();
}

uint64_t sub_100037134()
{
  sub_10003B084();
  sub_100034134();
  sub_10003B04C();
  sub_1000304D4();
  return swift_release();
}

uint64_t sub_10003718C()
{
  uint64_t v0;
  uint64_t v1;

  sub_100034134();
  v1 = v0;
  sub_1000303F4();
  return sub_10001399C(v1);
}

void sub_1000371B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v5;
  uint64_t isa;
  uint64_t v7;
  void (*v8)(_QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSString v47;
  int v48;
  uint64_t v49;
  os_log_type_t v50;
  NSObject *v51;
  void (*v52)(char *, NSObject *, NSObject *);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  NSObject *v63;
  void (*v64)(_QWORD, _QWORD);
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  NSObject *v76;
  void (*v77)(char *, NSObject *, NSObject *);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  os_log_t v85;
  os_log_t v86;
  id v87;
  char *v88;
  void (*v89)(_QWORD, _QWORD);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92[3];
  uint64_t v93;

  v5 = type metadata accessor for UUID(0);
  isa = (uint64_t)v5[-1].isa;
  __chkstk_darwin(v5, v7);
  sub_1000156C4();
  v89 = v8;
  sub_100024B80();
  __chkstk_darwin(v9, v10);
  v88 = (char *)&v82 - v11;
  sub_100024B80();
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v82 - v14;
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000123E4();
  __chkstk_darwin(v16, v17);
  sub_1000156C4();
  v90 = v18;
  sub_100024B80();
  v21 = __chkstk_darwin(v19, v20);
  v23 = (char *)&v82 - v22;
  __chkstk_darwin(v21, v24);
  v26 = (char *)&v82 - v25;
  type metadata accessor for HostDeletionTarget(0);
  sub_10003B19C();
  __chkstk_darwin(v27, v28);
  sub_10001547C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, a1, v1);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v3, v1);
  if ((_DWORD)v29 == enum case for HostDeletionTarget.singleHost(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 96))(v3, v1);
    (*(void (**)(char *, uint64_t, NSObject *))(isa + 32))(v15, v3, v5);
    sub_10003B0C4();
    v30 = v91;
    sub_100016390();
    v31 = v15;
    if (!v30)
    {
      sub_1000145B0();
      v41 = v40;
      v42 = sub_1000118D4();
      v87 = v41;
      v43 = CUPairedPeer.associatedLockdownHostBUID.getter(v42);
      if (v44)
      {
        v45 = v43;
        v46 = v44;
        v47 = String._bridgeToObjectiveC()();
        v48 = lockdown_unpair_host_by_id();

        if (v48)
        {
          v50 = static os_log_type_t.error.getter(v49);
          v51 = qword_1000886E0;
          v91 = isa;
          v52 = *(void (**)(char *, NSObject *, NSObject *))(isa + 16);
          v53 = v88;
          v86 = v5;
          v52(v88, v31, v5);
          v85 = v51;
          v84 = v50;
          if (os_log_type_enabled(v51, v50))
          {
            sub_1000153B0();
            v54 = sub_1000123C4(22);
            v83 = sub_1000123C4(64);
            v92[0] = v83;
            *(_DWORD *)v54 = 136446466;
            sub_1000153B0();
            sub_100010D40(v45, v46, v92);
            v93 = v55;
            sub_10003B03C();
            v56 = swift_bridgeObjectRelease_n(v46, 3);
            *(_WORD *)(v54 + 12) = 2082;
            v46 = (uint64_t)v53;
            v57 = UUID.uuidString.getter(v56);
            sub_10003B178(v57, v58);
            v93 = v59;
            sub_10003B03C();
            sub_1000118F4();
            sub_10003AF78();
            _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v84, "Failed to delete lockdown record with host buid %{public}s associated with RemotePairing record %{public}s", (uint8_t *)v54, 0x16u);
            v60 = v83;
            swift_arrayDestroy(v83, 2);
            sub_100012398(v60);
            v43 = sub_100012398(v54);
          }
          else
          {
            sub_1000118F4();
            v43 = sub_10003AF78();
          }
          isa = v46;
        }
        else
        {
          v43 = sub_1000118F4();
        }
      }
      v62 = static os_log_type_t.default.getter(v43);
      v63 = qword_1000886E0;
      v64 = v89;
      v88 = *(char **)(isa + 16);
      ((void (*)(void (*)(_QWORD, _QWORD), NSObject *, NSObject *))v88)(v89, v31, v5);
      v86 = v63;
      if (os_log_type_enabled(v63, v62))
      {
        v84 = v62;
        v65 = sub_1000123C4(12);
        v85 = v31;
        v66 = (uint8_t *)v65;
        v67 = sub_1000123C4(32);
        v92[0] = v67;
        v91 = isa;
        *(_DWORD *)v66 = 136315138;
        v68 = UUID.uuidString.getter(v67);
        sub_10003B178(v68, v69);
        v71 = sub_10003AF38(v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v72, v66 + 4);
        sub_1000118F4();
        sub_10003B014(*(uint64_t (**)(uint64_t, uint64_t))(v91 + 8));
        _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v84, "Deleting pairing record for host %s", v66, 0xCu);
        sub_1000158B8();
        sub_100012398(v67);
        v73 = (uint64_t)v66;
        v31 = v85;
        sub_100012398(v73);
      }
      else
      {
        sub_10003B014(*(uint64_t (**)(uint64_t, uint64_t))(isa + 8));
      }
      v74 = v5;
      sub_10003B0C4();
      v75 = v90;
      v76 = v5;
      v77 = (void (*)(char *, NSObject *, NSObject *))v88;
      ((void (*)(uint64_t, NSObject *, NSObject *))v88)(v90, v31, v76);
      sub_10003AFC8(v75);
      sub_100022CCC();
      v89 = v64;
      v91 = 0;
      sub_10003B164(v78, (uint64_t *)&unk_100086150);
      sub_1000118D4();
      sub_100034A50();
      v80 = *(_QWORD *)(v79 + 16);
      if (v80)
      {
        v90 = v79;
        v81 = v79 + 32;
        do
        {
          sub_10002D498(v81, (uint64_t)v92);
          sub_10003B190();
          v77(v23, v31, v74);
          sub_10003AFC8((uint64_t)v23);
          sub_100033A74();
          sub_10002D678((uint64_t)v23, (uint64_t *)&unk_100086150);
          sub_100010DFC(v92);
          v81 += 40;
          --v80;
        }
        while (v80);
        swift_bridgeObjectRelease(v90);
      }
      else
      {
        swift_bridgeObjectRelease(v79);
      }
      sub_10003419C();
      sub_100051A98((uint64_t)v31);

      sub_1000118D4();
      v89(v31, v74);
      goto LABEL_18;
    }
    (*(void (**)(char *, NSObject *))(isa + 8))(v15, v5);
    goto LABEL_17;
  }
  v32 = v91;
  if ((_DWORD)v29 == enum case for HostDeletionTarget.all(_:))
  {
    v33 = static os_log_type_t.default.getter(v29);
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, qword_1000886E0, "Deleting all pairing records", 28, 2, &_swiftEmptyArrayStorage);
    sub_10003B0C4();
    v34 = (uint64_t)v5;
    sub_100015664((uint64_t)v26, 1, 1, (uint64_t)v5);
    sub_100022CCC();
    sub_10003B164(v35, (uint64_t *)&unk_100086150);
    sub_1000118D4();
    if (v32)
    {
LABEL_18:
      sub_1000123A4();
      return;
    }
    sub_100034A50();
    v37 = v36;
    v38 = *(_QWORD *)(v36 + 16);
    if (v38)
    {
      v91 = 0;
      v39 = v36 + 32;
      do
      {
        sub_10002D498(v39, (uint64_t)v92);
        sub_10003B190();
        sub_100015664((uint64_t)v23, 1, 1, v34);
        sub_100033A74();
        sub_10002D678((uint64_t)v23, (uint64_t *)&unk_100086150);
        sub_100010DFC(v92);
        v39 += 40;
        --v38;
      }
      while (v38);
      swift_bridgeObjectRelease(v37);
    }
    else
    {
      swift_bridgeObjectRelease(v36);
    }
    sub_10003419C();
    sub_10005170C(v61);
LABEL_17:
    sub_1000118D4();
    goto LABEL_18;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6168636165726E55, 0xEB00000000656C62, "remotepairingdeviced/RemotePairingDeviceService.swift", 53, 2, 479, 0);
  __break(1u);
}

void sub_1000378D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;

  sub_1000150C0((uint64_t *)&unk_100086140);
  sub_1000123E4();
  __chkstk_darwin(v3, v4);
  sub_1000155D8();
  v5 = type metadata accessor for PairedHostInfo(0);
  sub_10003B064();
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  v13 = (char *)&v30 - v12;
  sub_100034200();
  v15 = v14;
  sub_100013C20();
  v17 = v16;
  swift_release(v15);
  if (!v1)
  {
    v18 = v17;
    if ((unint64_t)v17 >> 62)
    {
      if (v17 < 0)
        v29 = v17;
      else
        v29 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v19 = _CocoaArrayWrapper.endIndex.getter(v29);
      if (v19)
        goto LABEL_4;
    }
    else
    {
      v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v17);
      if (v19)
      {
LABEL_4:
        v33 = v19;
        if (v19 < 1)
        {
          __break(1u);
          return;
        }
        v31 = v13;
        v20 = 0;
        v34 = v17 & 0xC000000000000001;
        v35 = v2;
        v21 = &_swiftEmptyArrayStorage;
        v32 = v10;
        v22 = v33;
        do
        {
          if (v34)
            v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
          else
            v23 = *(id *)(v18 + 8 * v20 + 32);
          v24 = v23;
          v36 = v23;
          sub_100037B68(&v36, v0);

          if (sub_100015658(v0, 1, v5) == 1)
          {
            sub_10002D678(v0, (uint64_t *)&unk_100086140);
          }
          else
          {
            v25 = (uint64_t)v31;
            sub_10003B0BC((uint64_t)v31, v0);
            sub_10003B0BC((uint64_t)v10, v25);
            if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
              v21 = (_QWORD *)sub_10003B0FC(0, v21[2] + 1);
            v27 = v21[2];
            v26 = v21[3];
            if (v27 >= v26 >> 1)
              v21 = (_QWORD *)sub_10003B0FC(v26 > 1, v27 + 1);
            v21[2] = v27 + 1;
            v28 = (uint64_t)v21
                + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
                + *(_QWORD *)(v35 + 72) * v27;
            v10 = v32;
            sub_10003B0BC(v28, (uint64_t)v32);
            v22 = v33;
          }
          ++v20;
        }
        while (v22 != v20);
      }
    }
    swift_bridgeObjectRelease_n(v18, 2);
  }
}

uint64_t sub_100037B68@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  _BYTE *v45;
  id v46;
  void *v47;
  uint64_t v48;
  void (*v49)(uint64_t, _BYTE *, uint64_t);
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v61[4];
  int v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;

  v4 = sub_1000150C0(&qword_100085590);
  v6 = __chkstk_darwin(v4, v5);
  v8 = &v61[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6, v9);
  v11 = &v61[-v10];
  v12 = sub_1000150C0((uint64_t *)&unk_100086150);
  __chkstk_darwin(v12, v13);
  v68 = &v61[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = __chkstk_darwin(v15, v17);
  v20 = &v61[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18, v21);
  v65 = &v61[-v22];
  v23 = *a1;
  v24 = sub_100039360(*a1, (SEL *)&selRef_name);
  v26 = 0x6E776F6E6B6E55;
  if (v25)
    v26 = v24;
  v64 = v26;
  v27 = 0xE700000000000000;
  if (v25)
    v27 = v25;
  v69 = v27;
  v28 = sub_100039360(v23, (SEL *)&selRef_model);
  v70 = a2;
  v66 = v16;
  if (v29)
  {
    v30 = v28;
    v67 = v29;
    goto LABEL_16;
  }
  sub_1000392E4(v23);
  if (!v31)
  {
    v75 = 0u;
    v76 = 0u;
    goto LABEL_15;
  }
  v32 = v31;
  v71 = 0x6C65646F6DLL;
  v72 = 0xE500000000000000;
  AnyHashable.init<A>(_:)(&v71, &type metadata for String, &protocol witness table for String);
  sub_100041C2C(v32, &v75);
  sub_100024B18((uint64_t)&v73);
  swift_bridgeObjectRelease(v32);
  if (!*((_QWORD *)&v76 + 1))
  {
LABEL_15:
    sub_10002D678((uint64_t)&v75, &qword_100085588);
    v67 = 0;
    v30 = 0;
    goto LABEL_16;
  }
  v33 = swift_dynamicCast(&v73, &v75, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  v34 = v74;
  if (!v33)
    v34 = 0;
  v67 = v34;
  if (v33)
    v30 = (uint64_t)v73;
  else
    v30 = 0;
LABEL_16:
  v35 = v20;
  v36 = v15;
  v37 = (uint64_t)v68;
  v38 = CUPairedPeer.serialNumber.getter();
  if (v39)
  {
    v40 = v39;
    v68 = (_BYTE *)v38;
    goto LABEL_28;
  }
  sub_1000392E4(v23);
  if (!v41)
  {
    v75 = 0u;
    v76 = 0u;
    goto LABEL_27;
  }
  v42 = v41;
  sub_1000173F0(0, (unint64_t *)&qword_100086160, CUPairedPeer_ptr);
  v71 = static CUPairedPeer.serialNumberInfoKey.getter();
  v72 = v43;
  AnyHashable.init<A>(_:)(&v71, &type metadata for String, &protocol witness table for String);
  sub_100041C2C(v42, &v75);
  sub_100024B18((uint64_t)&v73);
  swift_bridgeObjectRelease(v42);
  if (!*((_QWORD *)&v76 + 1))
  {
LABEL_27:
    sub_10002D678((uint64_t)&v75, &qword_100085588);
    v40 = 0;
    v68 = 0;
    goto LABEL_28;
  }
  v44 = swift_dynamicCast(&v73, &v75, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  v45 = v73;
  if (v44)
    v40 = v74;
  else
    v40 = 0;
  if (!v44)
    v45 = 0;
  v68 = v45;
LABEL_28:
  v46 = objc_msgSend(v23, "identifier");
  if (!v46)
  {
    sub_100015664(v37, 1, 1, v36);
    goto LABEL_32;
  }
  v47 = v46;
  v63 = v30;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

  v48 = v66;
  v49 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v66 + 32);
  v49(v37, v35, v36);
  sub_100015664(v37, 0, 1, v36);
  if (sub_100015658(v37, 1, v36) == 1)
  {
LABEL_32:
    swift_bridgeObjectRelease(v69);
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(v40);
    sub_10002D678(v37, (uint64_t *)&unk_100086150);
    v58 = static os_log_type_t.error.getter(v57);
    os_log(_:dso:log:_:_:)(v58, &_mh_execute_header, qword_1000886E0, "Ignoring malformed CUPairedPeer without identifier", 50, 2, &_swiftEmptyArrayStorage);
    v56 = 1;
    v55 = v70;
    goto LABEL_33;
  }
  v50 = v37;
  v51 = v35;
  v52 = v65;
  v53 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v49)(v65, v50, v36);
  v62 = CUPairedPeer.isPairedForAutomation.getter(v53);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v48 + 16))(v51, v52, v36);
  v54 = sub_10005AD60((uint64_t)v11);
  CUPairedPeer.initialPairingTime.getter(v54);
  v55 = v70;
  PairedHostInfo.init(name:identifier:lastUsed:initialPairingTime:pairedForAutomation:model:serialNumber:)(v64, v69, v51, v11, v8, v62 & 1, v63, v67, v68, v40);
  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v52, v36);
  v56 = 0;
LABEL_33:
  v59 = type metadata accessor for PairedHostInfo(0);
  return sub_100015664(v55, v56, 1, v59);
}

uint64_t sub_100038068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  int v31;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t result;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[7];
  uint64_t v66;

  v3 = type metadata accessor for ControlChannelConnection.State(0);
  v63 = *(_QWORD *)(v3 - 8);
  v64 = v3;
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = type metadata accessor for ControlChannelConnection(0);
    sub_10001234C(&qword_100086130, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    isUniquelyReferenced_nonNull_native = Set.Iterator.init(_cocoa:)(v8, v9, v10);
    a1 = v65[1];
    v51 = v65[2];
    v12 = v65[3];
    v13 = v65[4];
    v14 = v65[5];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 56);
    v51 = a1 + 56;
    v12 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & v16;
    swift_bridgeObjectRetain(a1);
    v13 = 0;
  }
  v49 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v46 = v12;
  v50 = (unint64_t)(v12 + 64) >> 6;
  v19 = enum case for ControlChannelConnection.State.preparingPairingSession(_:);
  v62 = enum case for ControlChannelConnection.State.setUpManualPairingInProgress(_:);
  v60 = enum case for ControlChannelConnection.State.deviceRequestUserPairingConsentInProgress(_:);
  v61 = enum case for ControlChannelConnection.State.upgradeLockdownPairingInProgress(_:);
  v58 = enum case for ControlChannelConnection.State.transportStarting(_:);
  v59 = enum case for ControlChannelConnection.State.notStarted(_:);
  v56 = enum case for ControlChannelConnection.State.verifyManualPairingInProgress(_:);
  v57 = enum case for ControlChannelConnection.State.handshakeInProgress(_:);
  v54 = enum case for ControlChannelConnection.State.unauthenticated(_:);
  v55 = enum case for ControlChannelConnection.State.authenticated(_:);
  v53 = enum case for ControlChannelConnection.State.invalidated(_:);
  v45 = enum case for ControlChannelConnection.State.hostRequestPeerInfoInProgress(_:);
  v44 = enum case for ControlChannelConnection.State.deviceAwaitingPairVerify(_:);
  v48 = (char *)&type metadata for Swift.AnyObject + 8;
  v52 = &_swiftEmptyArrayStorage;
  while (1)
  {
    v20 = v13;
    if ((a1 & 0x8000000000000000) == 0)
      break;
    v23 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v23)
      goto LABEL_69;
    v24 = v23;
    v65[0] = v23;
    v25 = type metadata accessor for ControlChannelConnection(0);
    swift_unknownObjectRetain(v24);
    swift_dynamicCast(&v66, v65, v48, v25, 7);
    v26 = v66;
    v27 = swift_unknownObjectRelease(v24);
    if (!v26)
      goto LABEL_69;
LABEL_34:
    dispatch thunk of ControlChannelConnection.state.getter(v27);
    v31 = (*(uint64_t (**)(char *, uint64_t))(v63 + 88))(v6, v64);
    if (v31 == v19)
    {
      (*(void (**)(char *, uint64_t))(v63 + 96))(v6, v64);
      v37 = sub_1000150C0(&qword_100086138);
      sub_1000392D4(*(_QWORD *)&v6[*(int *)(v37 + 48)], *(_QWORD *)&v6[*(int *)(v37 + 48) + 8]);
      sub_100013AB4(*(_QWORD *)&v6[*(int *)(v37 + 64)], *(_QWORD *)&v6[*(int *)(v37 + 64) + 8]);
      v38 = type metadata accessor for PairingData.Kind(0);
      v39 = *(_QWORD *)(v38 - 8);
      v40 = 3;
LABEL_58:
      (*(void (**)(char *, uint64_t))(v39 + 8))(v6, v38);
      goto LABEL_64;
    }
    if (v31 == v62 || v31 == v61 || v31 == v60)
    {
      v39 = v63;
      v38 = v64;
      v40 = 4;
      goto LABEL_58;
    }
    if (v31 == v59 || v31 == v58 || v31 == v57 || v31 == v56)
      goto LABEL_63;
    if (v31 == v55)
    {
      v40 = 5;
      goto LABEL_64;
    }
    if (v31 == v54)
    {
      v40 = 2;
      goto LABEL_64;
    }
    if (v31 == v53)
    {
      isUniquelyReferenced_nonNull_native = swift_release(v26);
    }
    else
    {
      if (v31 == v45)
        goto LABEL_71;
      if (v31 != v44)
      {
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6168636165726E55, 0xEB00000000656C62, "remotepairingdeviced/RemotePairingDeviceService.swift", 53, 2, 532, 0);
        goto LABEL_73;
      }
LABEL_63:
      v40 = 3;
LABEL_64:
      swift_release(v26);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v52);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000491B4();
        v52 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v41 = v52[2];
      if (v41 >= v52[3] >> 1)
      {
        sub_1000491B4();
        v52 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v42 = v52;
      v52[2] = v41 + 1;
      v42[v41 + 4] = v40;
    }
  }
  if (v14)
  {
    v21 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v22 = v21 | (v13 << 6);
LABEL_33:
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v22);
    v27 = swift_retain(v26);
    if (!v26)
      goto LABEL_69;
    goto LABEL_34;
  }
  v28 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v28 >= v50)
      goto LABEL_69;
    v29 = *(_QWORD *)(v51 + 8 * v28);
    ++v13;
    if (!v29)
    {
      v13 = v20 + 2;
      if (v20 + 2 >= v50)
        goto LABEL_69;
      v29 = *(_QWORD *)(v51 + 8 * v13);
      if (!v29)
      {
        v13 = v20 + 3;
        if (v20 + 3 >= v50)
          goto LABEL_69;
        v29 = *(_QWORD *)(v51 + 8 * v13);
        if (!v29)
        {
          v13 = v20 + 4;
          if (v20 + 4 >= v50)
            goto LABEL_69;
          v29 = *(_QWORD *)(v51 + 8 * v13);
          if (!v29)
          {
            v13 = v20 + 5;
            if (v20 + 5 >= v50)
              goto LABEL_69;
            v29 = *(_QWORD *)(v51 + 8 * v13);
            if (!v29)
            {
              v30 = v20 + 6;
              while (v30 < v50)
              {
                v29 = *(_QWORD *)(v51 + 8 * v30++);
                if (v29)
                {
                  v13 = v30 - 1;
                  goto LABEL_32;
                }
              }
LABEL_69:
              sub_100018CD4(a1);
              return (uint64_t)v52;
            }
          }
        }
      }
    }
LABEL_32:
    v14 = (v29 - 1) & v29;
    v22 = __clz(__rbit64(v29)) + (v13 << 6);
    goto LABEL_33;
  }
  __break(1u);
LABEL_71:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001CLL, 0x800000010006C0B0, "remotepairingdeviced/RemotePairingDeviceService.swift", 53, 2, 530, 0);
LABEL_73:
  __break(1u);
  return result;
}

uint64_t sub_100038668@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  sub_100034134();
  v3 = v2;
  sub_10002FFDC(a1);
  return sub_10001399C(v3);
}

uint64_t sub_100038694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  Class isa;
  Class v10;
  char *v11;
  char *v12;
  Class v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char v31[24];

  sub_10003438C();
  v1 = v0;
  swift_beginAccess(v0 + 24, v31, 0, 0);
  v2 = *(_QWORD *)(v1 + 24);
  sub_10001613C();
  v3 = sub_1000118D4();
  v4 = static os_log_type_t.debug.getter(v3);
  v5 = qword_1000886E0;
  v6 = v4;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v4))
  {
    sub_10001613C();
    v7 = (uint8_t *)sub_1000123C4(12);
    *(_DWORD *)v7 = 134217984;
    v29 = sub_100012A70(v2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v7 + 4);
    swift_bridgeObjectRelease(v2);
    sub_1000118DC((void *)&_mh_execute_header, v5, v6, "Determining USB host trust state across %ld control channels", v7);
    sub_100012398((uint64_t)v7);
  }
  sub_100038068(v2);
  v8 = sub_10003AFE0();
  swift_bridgeObjectRelease(v8);
  isa = v5[2].isa;
  if (isa)
  {
    v10 = v5[4].isa;
    v11 = (char *)isa - 1;
    if (isa != (Class)1)
    {
      sub_1000153B0();
      v12 = 0;
      do
      {
        v13 = v5[(_QWORD)v12 + 5].isa;
        v14 = sub_100014548();
        if ((static RPUSBConnectedHostTrustState.< infix(_:_:)(v14) & 1) != 0)
          v10 = v13;
        ++v12;
      }
      while (v11 != v12);
      sub_1000118F4();
    }
    v15 = sub_1000118F4();
    v16 = static os_log_type_t.default.getter(v15);
    v17 = qword_1000886E0;
    v18 = v16;
    if (os_log_type_enabled((os_log_t)qword_1000886E0, v16))
    {
      v19 = (uint8_t *)sub_1000123C4(12);
      v20 = sub_1000123C4(32);
      v29 = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = RPUSBConnectedHostTrustState.description.getter(v10);
      sub_10003B184(v21, v22, v23);
      sub_10003B138();
      sub_100016584(v24, v25);
      sub_100016504();
      sub_1000118DC((void *)&_mh_execute_header, v17, v18, "Overall USB host trust state is %s", v19);
      sub_1000135B4(v20);
      sub_100012398(v20);
      sub_100012398((uint64_t)v19);
    }
  }
  else
  {
    v26 = sub_1000118F4();
    v27 = static os_log_type_t.default.getter(v26);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1000886E0, "No hosts connected over USB", 27, 2, &_swiftEmptyArrayStorage);
    return 1;
  }
  return (uint64_t)v10;
}

uint64_t sub_1000388D4(char a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_100034508();
  v3 = v2;
  if ((a1 & 1) != 0)
    sub_10004CE78();
  else
    sub_10004CCCC();
  return sub_10001399C(v3);
}

uint64_t sub_100038908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  sub_100034A50();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = v0 + 32;
    do
    {
      sub_10003B12C(v0);
      v3 = v7;
      v4 = v8;
      sub_100016418(v6, v7);
      (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
      v0 = sub_100010DFC(v6);
      v2 += 40;
      --v1;
    }
    while (v1);
  }
  sub_1000155B8();
  sub_10003B024();
  sub_1000518CC();
  return sub_1000118D4();
}

void sub_1000389A8()
{
  uint64_t v0;
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(NSObject **)(v0 + 16);
  v2 = sub_100011904((uint64_t)sub_100016A28, (uint64_t)_NSConcreteStackBlock, 1107296256, v3, v4);
  sub_10000E49C();
  swift_release();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v1, v2);
  sub_100015A84();
  sub_10003B09C();
}

uint64_t sub_100038A2C(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = (const char *)XPC_EVENT_KEY_NAME.getter();
  if (!xpc_dictionary_get_string(a1, v2))
  {
    v7 = static os_log_type_t.error.getter(0);
    return os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1000886E0, "Bug in libxpc: event name not set in XPC launch event", 53, 2, &_swiftEmptyArrayStorage);
  }
  v4 = String.init(cString:)();
  v5 = v3;
  if (v4 == 0xD000000000000025 && v3 == 0x800000010006BE10)
  {
    v6 = 0x800000010006BE10;
LABEL_8:
    v9 = swift_bridgeObjectRelease(v6);
    v10 = static os_log_type_t.default.getter(v9);
    v11 = os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1000886E0, "Received first unlock darwin notification", 41, 2, &_swiftEmptyArrayStorage);
    return sub_10004AFDC(v11);
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x800000010006BE10, v4, v3, 0) & 1) != 0)
  {
    v6 = v5;
    goto LABEL_8;
  }
  if (v4 == 0xD00000000000002FLL)
  {
    v12 = 0x800000010006BE40;
    if (v5 == 0x800000010006BE40)
      goto LABEL_14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002FLL, 0x800000010006BE40, v4, v5, 0) & 1) != 0)
  {
    v12 = v5;
LABEL_14:
    v13 = swift_bridgeObjectRelease(v12);
    v14 = static os_log_type_t.default.getter(v13);
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1000886E0, "Received notification that wifi connection enablement state changed in lockdown. Re-evaluating network behavior", 111, 2, &_swiftEmptyArrayStorage);
LABEL_15:
    sub_100034744();
    v16 = v15;
    sub_100016758();
    return swift_release(v16);
  }
  if (v4 == 0xD000000000000036 && v5 == 0x800000010006BE70)
  {
    v17 = 0x800000010006BE70;
LABEL_22:
    v18 = swift_bridgeObjectRelease(v17);
    v19 = static os_log_type_t.default.getter(v18);
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_1000886E0, "Received notification that wifi pairing enablement state changed in lockdown. Re-evaluating network behavior", 108, 2, &_swiftEmptyArrayStorage);
    sub_100034320();
    v16 = v20;
    sub_10001A6E8();
    return swift_release(v16);
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000036, 0x800000010006BE70, v4, v5, 0) & 1) != 0)
  {
    v17 = v5;
    goto LABEL_22;
  }
  if (v4 == 0xD00000000000002FLL)
  {
    v21 = 0x800000010006BEB0;
    if (v5 == 0x800000010006BEB0)
    {
LABEL_27:
      v23 = swift_bridgeObjectRelease(v21);
      v24 = static os_log_type_t.default.getter(v23);
      os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1000886E0, "Received notification that developer mode status changed. Re-evaluating network behavior", 88, 2, &_swiftEmptyArrayStorage);
      goto LABEL_15;
    }
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002FLL, 0x800000010006BEB0, v4, v5, 0);
  if ((v22 & 1) != 0)
  {
    v21 = v5;
    goto LABEL_27;
  }
  v25 = static os_log_type_t.error.getter(v22);
  v26 = qword_1000886E0;
  v27 = v25;
  if (!os_log_type_enabled((os_log_t)qword_1000886E0, v25))
    return swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRetain(v5);
  v28 = (uint8_t *)swift_slowAlloc(12, -1);
  v29 = swift_slowAlloc(32, -1);
  v32 = v29;
  *(_DWORD *)v28 = 136315138;
  swift_bridgeObjectRetain(v5);
  sub_100010D40(v4, v5, &v32);
  v31 = v30;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v28 + 4);
  swift_bridgeObjectRelease_n(v5, 3);
  _os_log_impl((void *)&_mh_execute_header, v26, v27, "Received unknown notifyd launch event: %s", v28, 0xCu);
  swift_arrayDestroy(v29, 1);
  swift_slowDealloc(v29, -1, -1);
  return swift_slowDealloc(v28, -1, -1);
}

uint64_t sub_100038E38()
{
  uint64_t result;

  sub_1000173F0(0, (unint64_t *)&qword_100086990, OS_os_log_ptr);
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100069CD0, 0x6D75646574617473, 0xE900000000000070);
  qword_1000886F8 = result;
  return result;
}

void sub_100038EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_1000138D4((uint64_t)&unk_10007B9E8, 24);
  swift_weakInit(v1 + 16, v0);
  sub_100011904((uint64_t)sub_100038F9C, (uint64_t)_NSConcreteStackBlock, 1107296256, v4, v5);
  swift_release(v1);
  v2 = sub_100014548();
  v3 = os_state_add_handler(v2);
  sub_100015A84();
  *(_QWORD *)(v0 + 152) = v3;
  *(_BYTE *)(v0 + 160) = 0;
  sub_10003B09C();
}

uint64_t sub_100038F44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    sub_100038FE4();
    swift_release(v4);
  }
  return 0;
}

uint64_t sub_100038F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = v4(a2);
  swift_release(v3);
  return v5;
}

uint64_t sub_100038FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  sub_100034A50();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = v0 + 32;
    do
    {
      sub_10003B12C(v0);
      v3 = v7;
      v4 = v8;
      sub_100016418(v6, v7);
      if (qword_1000849D0 != -1)
        swift_once(&qword_1000849D0, sub_100038E38);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(qword_1000886F8, v3, v4);
      v0 = sub_100010DFC(v6);
      v2 += 40;
      --v1;
    }
    while (v1);
  }
  sub_1000155B8();
  sub_10003B024();
  if (qword_1000849D0 != -1)
    swift_once(&qword_1000849D0, sub_100038E38);
  sub_100052624(qword_1000886F8);
  return sub_1000118D4();
}

uint64_t sub_1000390EC()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 160) & 1) == 0)
    os_state_remove_handler(*(_QWORD *)(v0 + 152));

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 112));
  swift_release();

  sub_1000392D4(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  return v0;
}

uint64_t sub_100039190()
{
  uint64_t v0;

  sub_1000390EC();
  return swift_deallocClassInstance(v0, 161, 7);
}

uint64_t type metadata accessor for RemotePairingDeviceService()
{
  return objc_opt_self(_TtC20remotepairingdeviced26RemotePairingDeviceService);
}

void sub_1000391D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100036944(a1, a2, a3, a4);
}

void sub_1000391F0()
{
  sub_100036DF8();
}

uint64_t sub_100039210()
{
  return sub_100037134();
}

uint64_t sub_100039230()
{
  return sub_10003718C();
}

uint64_t sub_100039250@<X0>(uint64_t a1@<X8>)
{
  return sub_100038668(a1);
}

uint64_t sub_100039270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(char *, uint64_t), uint64_t a9)
{
  return sub_100036EB4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1000392A0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000392C4(uint64_t a1)
{
  uint64_t v1;

  return sub_100038F44(a1, v1);
}

uint64_t sub_1000392CC(void *a1)
{
  return sub_100038A2C(a1);
}

uint64_t sub_1000392D4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void sub_1000392E4(void *a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(a1, "info");
  if (v1)
  {
    v2 = v1;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  }
  sub_100014510();
}

uint64_t sub_100039348(void *a1)
{
  return sub_100039360(a1, (SEL *)&selRef_name);
}

uint64_t sub_100039354(void *a1)
{
  return sub_100039360(a1, (SEL *)&selRef_model);
}

uint64_t sub_100039360(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

void sub_1000393BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1000154B0(a1, a2, a3);
  sub_100015334(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_100014510();
}

uint64_t sub_1000393E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(sub_1000150C0(&qword_100086178) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release();
  v5 = sub_100014548();
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    swift_errorRelease(*(_QWORD *)(v0 + v3));
  }
  else
  {
    v7 = type metadata accessor for ListenerStartedResponse(0);
    sub_100013AF4(v7);
  }
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_100039474(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1000154B0(a1, a2, a3);
  sub_100015334(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_100014510();
}

uint64_t sub_1000394A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000150C0(&qword_100086178) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_1000394E4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1000394F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100039520(uint64_t a1)
{
  uint64_t *v1;

  sub_100035CFC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10003952C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100035DDC(*(_QWORD *)(v1 + 16), *(_xpc_activity_s **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_100039548()
{
  uint64_t v0;

  return sub_10003577C(v0);
}

uint64_t sub_100039550(unsigned __int8 a1)
{
  uint64_t v1;

  return sub_100035800(a1, v1);
}

uint64_t sub_100039558()
{
  uint64_t v0;

  return sub_1000358AC(v0);
}

uint64_t sub_100039560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

_QWORD *sub_100039588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v19[5];

  v4 = type metadata accessor for InProcessIRKGenerator(0);
  v5 = *(_QWORD *)(v4 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v7 = (char *)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LockStateManager(0);
  v19[3] = v8;
  v19[4] = &off_10007CAE0;
  v19[0] = a2;
  v9 = type metadata accessor for SystemKeychainPairingManager();
  v10 = (_QWORD *)swift_allocObject(v9, 112, 7);
  v11 = sub_100039560((uint64_t)v19, v8);
  __chkstk_darwin(v11, v11);
  v13 = (_QWORD *)((char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = *v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v16 = sub_1000396C8((uint64_t)v7, v15, v10);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  sub_100010DFC(v19);
  return v16;
}

_QWORD *sub_1000396C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = a3 + 3;
  v7 = type metadata accessor for InProcessIRKGenerator(0);
  a3[6] = v7;
  a3[7] = &protocol witness table for InProcessIRKGenerator;
  v8 = sub_10003AEB0(v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v8, a1, v7);
  a3[11] = type metadata accessor for LockStateManager(0);
  a3[12] = &off_10007CAE0;
  a3[8] = a2;
  a3[2] = &_swiftEmptyArrayStorage;
  a3[13] = 0;
  return a3;
}

_QWORD *sub_100039760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000173F0(0, (unint64_t *)&qword_100086990, OS_os_log_ptr);
  v14 = OS_os_log.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100069CD0, 0x617461646174656DLL, 0xE800000000000000);
  a7[12] = 0;
  a7[3] = 0;
  a7[4] = 0;
  a7[2] = v14;
  v15 = (uint64_t)a7 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys;
  v16 = type metadata accessor for PeerDeviceInfo(0);
  sub_100015664(v15, 1, 1, v16);
  sub_100015664((uint64_t)a7 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys, 1, 1, v16);
  *(_DWORD *)((char *)a7 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService_darwinNotificationToken) = -1;
  a7[5] = a1;
  a7[6] = &off_10007C490;
  a7[7] = a2;
  a7[8] = a3;
  a7[9] = a4;
  a7[10] = a5;
  a7[11] = a6;
  v17 = swift_allocObject(&unk_10007BB28, 24, 7);
  swift_weakInit(v17 + 16, a7);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = sub_1000398BC;
  *(_QWORD *)(a1 + 64) = v17;
  sub_1000392D4(v18, v19);
  return a7;
}

uint64_t sub_1000398BC()
{
  uint64_t v0;

  return sub_10003F8E4(v0);
}

uint64_t sub_1000398C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v22 = type metadata accessor for LockStateManager(0);
  v23 = &off_10007CAE0;
  v21[0] = a6;
  v12 = type metadata accessor for RSDService();
  v13 = swift_allocObject(v12, 192, 7);
  v14 = sub_100039560((uint64_t)v21, v22);
  __chkstk_darwin(v14, v14);
  v16 = (_QWORD *)((char *)&v21[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_1000399C4(a1, a2, a3, a4, a5, *v16, v13);
  sub_100010DFC(v21);
  return v18;
}

uint64_t sub_1000399C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  _UNKNOWN **v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v27 = type metadata accessor for RemotePairingDeviceService();
  sub_10001234C(&qword_100086248, v14, (uint64_t (*)(uint64_t))type metadata accessor for RemotePairingDeviceService, (uint64_t)&unk_100066248);
  v28 = v15;
  *(_QWORD *)&v26 = a1;
  v24 = v27;
  sub_10001234C(&qword_100086258, v16, (uint64_t (*)(uint64_t))type metadata accessor for RemotePairingDeviceService, (uint64_t)&unk_100066270);
  v25 = v17;
  *(_QWORD *)&v23 = a2;
  v21 = type metadata accessor for LockStateManager(0);
  v22 = &off_10007CAE0;
  *(_QWORD *)&v20 = a6;
  *(_QWORD *)(a7 + 16) = 50;
  *(_QWORD *)(a7 + 24) = &_swiftEmptySetSingleton;
  v18 = sub_1000173F0(0, (unint64_t *)&qword_100086260, OS_remote_device_ptr);
  *(_QWORD *)(a7 + 32) = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for ObjectIdentifier, v18, &protocol witness table for ObjectIdentifier);
  *(_BYTE *)(a7 + 176) = 0;
  *(_QWORD *)(a7 + 184) = a3;
  sub_10002D6E4(&v26, a7 + 88);
  sub_10002D6E4(&v23, a7 + 48);
  *(_QWORD *)(a7 + 168) = a4;
  *(_QWORD *)(a7 + 40) = a5;
  sub_10002D6E4(&v20, a7 + 128);
  return a7;
}

uint64_t sub_100039B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v20 = type metadata accessor for LockStateManager(0);
  v21 = &off_10007CAE0;
  v19[0] = a5;
  v10 = type metadata accessor for NetworkControlChannelService();
  v11 = swift_allocObject(v10, 232, 7);
  v12 = sub_100039560((uint64_t)v19, v20);
  __chkstk_darwin(v12, v12);
  v14 = (_QWORD *)((char *)&v19[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = sub_100039C0C(a1, a2, a3, a4, *v14, v11);
  sub_100010DFC(v19);
  return v16;
}

uint64_t sub_100039C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  _UNKNOWN **v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v31 = a4;
  v32 = a3;
  v30 = a2;
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v28 = *(_QWORD *)(v9 - 8);
  v29 = v9;
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for RemotePairingDeviceService();
  sub_10001234C(&qword_100086248, v21, (uint64_t (*)(uint64_t))type metadata accessor for RemotePairingDeviceService, (uint64_t)&unk_100066248);
  v39 = v22;
  *(_QWORD *)&v37 = a1;
  v35 = type metadata accessor for LockStateManager(0);
  v36 = &off_10007CAE0;
  *(_QWORD *)&v34 = a5;
  *(_OWORD *)(a6 + 16) = xmmword_100066130;
  *(_QWORD *)(a6 + 32) = 0x800000010006C3C0;
  sub_1000173F0(0, (unint64_t *)&qword_100086250, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter();
  v33 = &_swiftEmptyArrayStorage;
  sub_10001234C((unint64_t *)&unk_100086210, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v24 = v23;
  v25 = sub_1000150C0(&qword_100085D80);
  sub_10000F4A4((unint64_t *)&unk_100086220, &qword_100085D80);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v13, v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v29);
  *(_QWORD *)(a6 + 40) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000055, 0x800000010006C3E0, v20, v16, v12, 0);
  *(_QWORD *)(a6 + 48) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a6 + 56) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(a6 + 64) = &_swiftEmptyArrayStorage;
  *(_WORD *)(a6 + 72) = 0;
  *(_BYTE *)(a6 + 74) = 1;
  *(_QWORD *)(a6 + 208) = 0;
  *(_BYTE *)(a6 + 216) = 0;
  *(_QWORD *)(a6 + 184) = 0;
  *(_QWORD *)(a6 + 192) = 0;
  *(_DWORD *)(a6 + 200) = 0;
  *(_QWORD *)(a6 + 224) = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  sub_10002D6E4(&v37, a6 + 144);
  *(_QWORD *)(a6 + 136) = v30;
  *(_QWORD *)(a6 + 80) = v31;
  sub_10002D6E4(&v34, a6 + 88);
  *(_QWORD *)(a6 + 128) = v32;
  return a6;
}

uint64_t sub_100039ED4(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v32[5];

  v32[3] = type metadata accessor for LockStateManager(0);
  v32[4] = &off_10007CAE0;
  v32[0] = a2;
  v8 = type metadata accessor for UUID(0);
  v9 = type metadata accessor for Tunnel(0);
  sub_10001234C(&qword_100086300, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  *(_QWORD *)(a4 + 24) = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v8, v9, v10);
  *(_QWORD *)(a4 + 32) = a1;
  *(_BYTE *)(a4 + 80) = a3;
  sub_10002D498((uint64_t)v32, a4 + 40);
  type metadata accessor for RemotePairingDeviceXPCServer();
  v11 = a1;
  v12 = static MachServiceNames.tunnelManagementService.getter();
  v14 = v13;
  v15 = v11;
  v16 = sub_10002DB5C(v12, v14, v15);
  *(_QWORD *)(a4 + 16) = v16;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = type metadata accessor for RemotePairingErrorCodingWrapper(0);
  v31 = type metadata accessor for RemoteUnlockDeviceKeyForTunnelRequest(0);
  v19 = type metadata accessor for RemoteUnlockDeviceKeyForTunnelResponse(0);
  sub_10001234C(&qword_100086308, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteUnlockDeviceKeyForTunnelRequest, (uint64_t)&protocol conformance descriptor for RemoteUnlockDeviceKeyForTunnelRequest);
  v21 = v20;
  sub_10001234C(&qword_100086310, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteUnlockDeviceKeyForTunnelRequest, (uint64_t)&protocol conformance descriptor for RemoteUnlockDeviceKeyForTunnelRequest);
  v23 = v22;
  sub_10001234C(&qword_100086318, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteUnlockDeviceKeyForTunnelResponse, (uint64_t)&protocol conformance descriptor for RemoteUnlockDeviceKeyForTunnelResponse);
  v25 = v24;
  sub_10001234C((unint64_t *)&unk_100086320, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteUnlockDeviceKeyForTunnelResponse, (uint64_t)&protocol conformance descriptor for RemoteUnlockDeviceKeyForTunnelResponse);
  v27 = v26;
  sub_10001234C(&qword_100085A40, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingErrorCodingWrapper, (uint64_t)&protocol conformance descriptor for RemotePairingErrorCodingWrapper);
  v29 = v28;
  swift_retain(v17);
  swift_retain(a4);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)(v18, sub_10003AEEC, a4, v31, v19, v18, v21, v23, v25, v27, v29);

  swift_release(v17);
  swift_release(a4);
  sub_100010DFC(v32);
  return a4;
}

uint64_t sub_10003A124(void *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[3];
  uint64_t v16;
  _UNKNOWN **v17;

  v16 = type metadata accessor for LockStateManager(0);
  v17 = &off_10007CAE0;
  v15[0] = a2;
  v6 = type metadata accessor for DeviceTunnelManager();
  v7 = swift_allocObject(v6, 81, 7);
  v8 = sub_100039560((uint64_t)v15, v16);
  __chkstk_darwin(v8, v8);
  v10 = (_QWORD *)((char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  v12 = sub_100039ED4(a1, *v10, a3, v7);
  sub_100010DFC(v15);
  return v12;
}

_QWORD *sub_10003A204(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD v32[5];

  v32[3] = type metadata accessor for SystemKeychainPairingManager();
  sub_10001234C(&qword_100084F88, 255, (uint64_t (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager, (uint64_t)&unk_100065DFC);
  v32[4] = v8;
  v31 = a1;
  v32[0] = a2;
  a4[5] = a1;
  v30 = a3;
  if (a3)
  {
    v9 = a1;
    v10 = a3;
  }
  else
  {
    type metadata accessor for RemotePairingDeviceXPCServer();
    v11 = a1;
    v12 = static MachServiceNames.deviceInitiatedPairingService.getter();
    v10 = sub_10002DB5C(v12, v13, v11);
  }
  a4[6] = v10;
  sub_10002D498((uint64_t)v32, (uint64_t)(a4 + 7));
  a4[3] = 0;
  a4[4] = 0;
  a4[2] = 0;
  v14 = *(_QWORD *)(a4[6] + 16);
  v15 = type metadata accessor for RemotePairingErrorCodingWrapper(0);
  v16 = swift_allocObject(&unk_10007BB50, 24, 7);
  swift_weakInit(v16 + 16, a4);
  v29 = type metadata accessor for BrowseForPairableHostRequest(0);
  v28 = type metadata accessor for EmptyResponse(0);
  sub_10001234C(&qword_100086230, 255, (uint64_t (*)(uint64_t))&type metadata accessor for BrowseForPairableHostRequest, (uint64_t)&protocol conformance descriptor for BrowseForPairableHostRequest);
  v18 = v17;
  sub_10001234C((unint64_t *)&unk_100086238, 255, (uint64_t (*)(uint64_t))&type metadata accessor for BrowseForPairableHostRequest, (uint64_t)&protocol conformance descriptor for BrowseForPairableHostRequest);
  v20 = v19;
  sub_10001234C(&qword_100085A30, 255, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse, (uint64_t)&protocol conformance descriptor for EmptyResponse);
  v22 = v21;
  sub_10001234C(&qword_100085A38, 255, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse, (uint64_t)&protocol conformance descriptor for EmptyResponse);
  v24 = v23;
  sub_10001234C(&qword_100085A40, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingErrorCodingWrapper, (uint64_t)&protocol conformance descriptor for RemotePairingErrorCodingWrapper);
  v26 = v25;
  swift_retain(v30);
  swift_retain(v14);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)(v15, sub_10003A460, v16, v29, v28, v15, v18, v20, v22, v24, v26);

  swift_release(v30);
  swift_release(v14);
  swift_release(v16);
  sub_100010DFC(v32);
  return a4;
}

void sub_10003A460()
{
  sub_100025154();
}

uint64_t sub_10003A468(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[3];
  uint64_t v16;
  _UNKNOWN **v17;

  v16 = type metadata accessor for LockStateManager(0);
  v17 = &off_10007CAE0;
  v15[0] = a3;
  v6 = type metadata accessor for PairingManagementService();
  v7 = swift_allocObject(v6, 112, 7);
  v8 = sub_100039560((uint64_t)v15, v16);
  __chkstk_darwin(v8, v8);
  v10 = (_QWORD *)((char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  v12 = sub_10003A548(a1, a2, *v10, v7);
  sub_100010DFC(v15);
  return v12;
}

uint64_t sub_10003A548(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t WirelessPairingSessionRequest;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t NetworkPairingSessionIDRequest;
  uint64_t NetworkPairingSessionIDResponse;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t USBConnectedHostTrustStateRequest;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  _QWORD v101[5];

  v98 = a2;
  v99 = a1;
  v97 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97, v7);
  v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101[3] = type metadata accessor for LockStateManager(0);
  v101[4] = &off_10007CAE0;
  v101[0] = a3;
  v18 = type metadata accessor for SystemXPCPeerConnection(0);
  sub_10001234C(&qword_1000859E8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
  *(_QWORD *)(a4 + 32) = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v18, &type metadata for WirelessPairingOptions, v19);
  *(_BYTE *)(a4 + 96) = 0;
  v20 = sub_1000173F0(0, (unint64_t *)&qword_100086250, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v20);
  v100 = &_swiftEmptyArrayStorage;
  sub_10001234C((unint64_t *)&unk_100086210, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = v21;
  v23 = sub_1000150C0(&qword_100085D80);
  sub_10000F4A4((unint64_t *)&unk_100086220, &qword_100085D80);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v100, v23, v24, v10, v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v97);
  *(_QWORD *)(a4 + 104) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000051, 0x800000010006C4C0, v17, v13, v9, 0);
  v25 = v98;
  v26 = v99;
  *(_QWORD *)(a4 + 40) = v98;
  *(_QWORD *)(a4 + 16) = v26;
  *(_QWORD *)(a4 + 24) = &off_10007B998;
  type metadata accessor for RemotePairingDeviceXPCServer();
  v27 = v25;
  v28 = swift_retain(v26);
  v29 = static MachServiceNames.pairingManagementService.getter(v28);
  v31 = v30;
  v95 = v27;
  *(_QWORD *)(a4 + 48) = sub_10002DB5C(v29, v31, v95);
  sub_10002D498((uint64_t)v101, a4 + 56);
  v32 = *(_QWORD *)(a4 + 16);
  swift_unknownObjectRetain(v32);
  swift_retain(a4);
  sub_100035904((uint64_t)sub_10003AE18, a4);
  swift_unknownObjectRelease(v32);
  swift_release(a4);
  v33 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16);
  v34 = type metadata accessor for RemotePairingErrorCodingWrapper(0);
  v35 = type metadata accessor for DeletePairedHostRecordRequest(0);
  v36 = type metadata accessor for EmptyResponse(0);
  v96 = v36;
  sub_10001234C(&qword_100086270, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DeletePairedHostRecordRequest, (uint64_t)&protocol conformance descriptor for DeletePairedHostRecordRequest);
  v38 = v37;
  sub_10001234C(&qword_100086278, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DeletePairedHostRecordRequest, (uint64_t)&protocol conformance descriptor for DeletePairedHostRecordRequest);
  v40 = v39;
  sub_10001234C(&qword_100085A30, 255, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse, (uint64_t)&protocol conformance descriptor for EmptyResponse);
  v42 = v41;
  v98 = v41;
  sub_10001234C(&qword_100085A38, 255, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse, (uint64_t)&protocol conformance descriptor for EmptyResponse);
  v44 = v43;
  v97 = v43;
  sub_10001234C(&qword_100085A40, 255, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingErrorCodingWrapper, (uint64_t)&protocol conformance descriptor for RemotePairingErrorCodingWrapper);
  v46 = v45;
  swift_retain(a4);
  swift_retain(v33);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)(v34, sub_10003AE20, a4, v35, v36, v34, v38, v40, v42, v44, v46);
  swift_release(v33);
  swift_release(a4);
  v47 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16);
  v48 = type metadata accessor for ListPairedHostRecordRequest(0);
  v49 = type metadata accessor for ListPairedHostRecordResponse(0);
  sub_10001234C(&qword_100086280, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ListPairedHostRecordRequest, (uint64_t)&protocol conformance descriptor for ListPairedHostRecordRequest);
  v51 = v50;
  sub_10001234C(&qword_100086288, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ListPairedHostRecordRequest, (uint64_t)&protocol conformance descriptor for ListPairedHostRecordRequest);
  v53 = v52;
  sub_10001234C(&qword_100086290, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ListPairedHostRecordResponse, (uint64_t)&protocol conformance descriptor for ListPairedHostRecordResponse);
  v55 = v54;
  sub_10001234C(&qword_100086298, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ListPairedHostRecordResponse, (uint64_t)&protocol conformance descriptor for ListPairedHostRecordResponse);
  v57 = v56;
  swift_retain(a4);
  swift_retain(v47);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)(v34, sub_10003AE38, a4, v48, v49, v34, v51, v53, v55, v57, v46);
  swift_release(v47);
  swift_release(a4);
  v58 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16);
  WirelessPairingSessionRequest = type metadata accessor for CreateWirelessPairingSessionRequest(0);
  sub_10001234C(&qword_1000862A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CreateWirelessPairingSessionRequest, (uint64_t)&protocol conformance descriptor for CreateWirelessPairingSessionRequest);
  v61 = v60;
  sub_10001234C(&qword_1000862A8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CreateWirelessPairingSessionRequest, (uint64_t)&protocol conformance descriptor for CreateWirelessPairingSessionRequest);
  v63 = v62;
  swift_retain(a4);
  swift_retain(v58);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)(v34, sub_10003AE50, a4, WirelessPairingSessionRequest, v96, v34, v61, v63, v98, v97, v46);
  swift_release(v58);
  swift_release(a4);
  v64 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16);
  NetworkPairingSessionIDRequest = type metadata accessor for FetchNetworkPairingSessionIDRequest(0);
  NetworkPairingSessionIDResponse = type metadata accessor for FetchNetworkPairingSessionIDResponse(0);
  sub_10001234C(&qword_1000862B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for FetchNetworkPairingSessionIDRequest, (uint64_t)&protocol conformance descriptor for FetchNetworkPairingSessionIDRequest);
  v68 = v67;
  sub_10001234C(&qword_1000862B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for FetchNetworkPairingSessionIDRequest, (uint64_t)&protocol conformance descriptor for FetchNetworkPairingSessionIDRequest);
  v70 = v69;
  sub_10001234C(&qword_1000862C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for FetchNetworkPairingSessionIDResponse, (uint64_t)&protocol conformance descriptor for FetchNetworkPairingSessionIDResponse);
  v72 = v71;
  sub_10001234C(&qword_1000862C8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for FetchNetworkPairingSessionIDResponse, (uint64_t)&protocol conformance descriptor for FetchNetworkPairingSessionIDResponse);
  v74 = v73;
  swift_retain(a4);
  swift_retain(v64);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)(v34, sub_10003AE68, a4, NetworkPairingSessionIDRequest, NetworkPairingSessionIDResponse, v34, v68, v70, v72, v74, v46);
  swift_release(v64);
  swift_release(a4);
  v75 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16);
  USBConnectedHostTrustStateRequest = type metadata accessor for QueryUSBConnectedHostTrustStateRequest(0);
  type metadata accessor for RPUSBConnectedHostTrustState(0);
  v78 = v77;
  sub_10001234C(&qword_1000862D0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for QueryUSBConnectedHostTrustStateRequest, (uint64_t)&protocol conformance descriptor for QueryUSBConnectedHostTrustStateRequest);
  v80 = v79;
  sub_10001234C(&qword_1000862D8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for QueryUSBConnectedHostTrustStateRequest, (uint64_t)&protocol conformance descriptor for QueryUSBConnectedHostTrustStateRequest);
  v82 = v81;
  sub_10001234C(&qword_1000862E0, 255, (uint64_t (*)(uint64_t))type metadata accessor for RPUSBConnectedHostTrustState, (uint64_t)&protocol conformance descriptor for RPUSBConnectedHostTrustState);
  v84 = v83;
  sub_10001234C(&qword_1000862E8, 255, (uint64_t (*)(uint64_t))type metadata accessor for RPUSBConnectedHostTrustState, (uint64_t)&protocol conformance descriptor for RPUSBConnectedHostTrustState);
  v86 = v85;
  swift_retain(a4);
  swift_retain(v75);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)(v34, sub_10003AE80, a4, USBConnectedHostTrustStateRequest, v78, v34, v80, v82, v84, v86, v46);
  swift_release(v75);
  swift_release(a4);
  v87 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16);
  v88 = type metadata accessor for AllowPromptlessPairingWithHostRequest(0);
  sub_10001234C(&qword_1000862F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for AllowPromptlessPairingWithHostRequest, (uint64_t)&protocol conformance descriptor for AllowPromptlessPairingWithHostRequest);
  v90 = v89;
  sub_10001234C(&qword_1000862F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for AllowPromptlessPairingWithHostRequest, (uint64_t)&protocol conformance descriptor for AllowPromptlessPairingWithHostRequest);
  v92 = v91;
  swift_retain(a4);
  swift_retain(v87);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)(v34, sub_10003AE98, a4, v88, v96, v34, v90, v92, v98, v97, v46);
  swift_release(v99);

  swift_release(v87);
  swift_release(a4);
  sub_100010DFC(v101);
  return a4;
}

uint64_t sub_10003AE18(uint64_t a1)
{
  return sub_100018D90(a1);
}

void sub_10003AE20()
{
  sub_100018DB4();
}

#error "10003AE44: call analysis failed (funcsize=6)"

uint64_t sub_10003AE50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000191C4(a1, a2, v2);
}

#error "10003AE74: call analysis failed (funcsize=6)"

void sub_10003AE80()
{
  sub_1000193E8();
}

void sub_10003AE98()
{
  sub_10001956C();
}

_QWORD *sub_10003AEB0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

void sub_10003AEEC(uint64_t a1, char *a2)
{
  uint64_t (*v2)(char *, uint64_t);

  sub_10004F95C(a1, a2, v2);
}

uint64_t sub_10003AF38(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return v1 - 72;
}

uint64_t sub_10003AF4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = a1;
  *(_QWORD *)(v2 - 128) = *(_QWORD *)(v1 + 16);
  return static DispatchQoS.userInitiated.getter();
}

uint64_t sub_10003AF60()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

uint64_t sub_10003AF6C@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v3, a1, v2);
}

uint64_t sub_10003AF78()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 136) + 8))(v0, *(_QWORD *)(v1 - 176));
}

uint64_t sub_10003AF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(v1, v0);
}

uint64_t sub_10003AFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_10003AFC8(uint64_t a1)
{
  uint64_t v1;

  return sub_100015664(a1, 0, 1, v1);
}

void sub_10003AFD8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  sub_10001234C(a1, 255, a3, a4);
}

uint64_t sub_10003AFE0()
{
  uint64_t v0;

  return v0;
}

BOOL sub_10003AFEC(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_10003B00C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000393BC(a1, a2, v2);
}

uint64_t sub_10003B014@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void sub_10003B024()
{
  sub_10003419C();
}

uint64_t sub_10003B02C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(a1, a2, a3, v3, v4);
}

uint64_t sub_10003B03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 72, v0, v1);
}

uint64_t sub_10003B0AC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100015658(v0, 1, *(_QWORD *)(v1 - 152));
}

uint64_t sub_10003B0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

void sub_10003B0C4()
{
  sub_100034200();
}

void sub_10003B0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010D40(a1, a2, (uint64_t *)(v2 - 184));
}

uint64_t sub_10003B0D8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_10003B0E4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

void sub_10003B0F0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = v0;
  sub_100034200();
}

uint64_t sub_10003B0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000491A0(a1, a2, 1, v2);
}

uint64_t sub_10003B108(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100015664(a1, a2, 1, *(_QWORD *)(v2 - 152));
}

uint64_t sub_10003B114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = v0;
  return swift_retain(v1);
}

id sub_10003B120@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 280) = a1;
  return a1;
}

void sub_10003B12C(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  sub_10002D498(v1, (uint64_t)va);
}

uint64_t sub_10003B14C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000392D4(v0, v1);
}

uint64_t sub_10003B158@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 104));
}

void sub_10003B164(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10002D678(v2, a2);
}

void sub_10003B16C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

void sub_10003B178(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010D40(a1, a2, (uint64_t *)(v2 - 120));
}

void sub_10003B184(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100010D40(a1, a2, (uint64_t *)va);
}

_QWORD *sub_10003B190()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100016418((_QWORD *)(v1 - 120), v0);
}

uint64_t sub_10003B1B0(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = a1;
  *(_BYTE *)(v2 + 40) = a2;
  return v2;
}

void sub_10003B1C4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(NSObject **)(v3 + 32);
  if (*(_BYTE *)(v3 + 40) == 1)
  {
    v7 = sub_1000138D4((uint64_t)&unk_10007BCF8, 32);
    *(_QWORD *)(v7 + 16) = a2;
    *(_QWORD *)(v7 + 24) = a3;
    sub_100011904((uint64_t)sub_10003B2D8, (uint64_t)_NSConcreteStackBlock, 1107296256, v9, v10);
    sub_1000157C4();
    swift_release();
    nw_listener_set_new_connection_group_handler(v6, a2);
  }
  else
  {
    v8 = sub_1000138D4((uint64_t)&unk_10007BCA8, 32);
    *(_QWORD *)(v8 + 16) = a2;
    *(_QWORD *)(v8 + 24) = a3;
    sub_100011904((uint64_t)sub_1000456B0, (uint64_t)_NSConcreteStackBlock, 1107296256, v9, v10);
    sub_1000157C4();
    swift_release();
    nw_listener_set_new_connection_handler(v6, a2);
  }
  _Block_release(a2);
}

uint64_t sub_10003B2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void sub_10003B320(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = v3;
  v8 = *(NSObject **)(v4 + 32);
  v9 = sub_1000138D4((uint64_t)&unk_10007BC30, 24);
  swift_unknownObjectWeakInit(v9 + 16, v8);
  v10 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007BC58, 48);
  v10[2] = v9;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = v4;
  v11 = sub_100011904((uint64_t)sub_10003B6B0, (uint64_t)_NSConcreteStackBlock, 1107296256, v12, v13);
  swift_retain(a3);
  swift_retain(v4);
  swift_release();
  nw_listener_set_state_changed_handler(v8, v11);
  _Block_release(v11);
  nw_listener_set_queue(v8, a1);
  nw_listener_start(v8);
}

NSObject *sub_10003B41C(int a1, NSObject *a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  NSObject *result;
  NSObject *v12;
  uint64_t port;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  char v37[24];

  v10 = a3 + 16;
  swift_beginAccess(a3 + 16, v37, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v10);
  if (result)
  {
    v12 = result;
    switch(a1)
    {
      case 4:
        v20 = static os_log_type_t.default.getter(result);
        v21 = qword_1000886E0;
        v22 = sub_1000150C0(&qword_100085570);
        v23 = swift_allocObject(v22, 72, 7);
        *(_OWORD *)(v23 + 16) = xmmword_100065C90;
        v36 = v12;
        swift_unknownObjectRetain(v12);
        v24 = sub_1000150C0((uint64_t *)&unk_1000863F0);
        v25 = String.init<A>(describing:)(&v36, v24);
        v27 = v26;
        *(_QWORD *)(v23 + 56) = &type metadata for String;
        *(_QWORD *)(v23 + 64) = sub_100016354();
        *(_QWORD *)(v23 + 32) = v25;
        *(_QWORD *)(v23 + 40) = v27;
        os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Server listener cancelled: %{public}s", 37, 2, v23, v36);
        swift_bridgeObjectRelease(v23);
        v19 = 1;
        break;
      case 3:
        v28 = static os_log_type_t.error.getter(result);
        v29 = qword_1000886E0;
        v30 = sub_1000150C0(&qword_100085570);
        v31 = swift_allocObject(v30, 72, 7);
        *(_OWORD *)(v31 + 16) = xmmword_100065C90;
        v36 = a2;
        swift_unknownObjectRetain(a2);
        v32 = sub_1000150C0((uint64_t *)&unk_100086460);
        v33 = String.init<A>(describing:)(&v36, v32);
        v35 = v34;
        *(_QWORD *)(v31 + 56) = &type metadata for String;
        *(_QWORD *)(v31 + 64) = sub_100016354();
        *(_QWORD *)(v31 + 32) = v33;
        *(_QWORD *)(v31 + 40) = v35;
        os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Server listener failed with %{public}s", 38, 2, v31, v36);
        swift_bridgeObjectRelease(v31);
        nw_listener_cancel(*(nw_listener_t *)(a6 + 32));
        return swift_unknownObjectRelease(v12);
      case 2:
        port = nw_listener_get_port(result);
        v14 = port;
        v15 = static os_log_type_t.default.getter(port);
        v16 = qword_1000886E0;
        v17 = sub_1000150C0(&qword_100085570);
        v18 = swift_allocObject(v17, 72, 7);
        *(_OWORD *)(v18 + 16) = xmmword_100065C90;
        *(_QWORD *)(v18 + 56) = &type metadata for UInt16;
        *(_QWORD *)(v18 + 64) = &protocol witness table for UInt16;
        *(_WORD *)(v18 + 32) = v14;
        os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Server ready on port %d", (_DWORD)v36);
        swift_bridgeObjectRelease(v18);
        v19 = 0;
        break;
      default:
        return swift_unknownObjectRelease(v12);
    }
    a4(v19);
    return swift_unknownObjectRelease(v12);
  }
  return result;
}

uint64_t sub_10003B6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  swift_unknownObjectRetain(a3);
  v6(a2, a3);
  swift_release(v5);
  return swift_unknownObjectRelease(a3);
}

_QWORD *sub_10003B708()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  return v0;
}

uint64_t sub_10003B734()
{
  uint64_t v0;

  sub_10003B708();
  return swift_deallocClassInstance(v0, 41, 7);
}

uint64_t type metadata accessor for NWObjcListener()
{
  return objc_opt_self(_TtC20remotepairingdeviced14NWObjcListener);
}

uint64_t sub_10003B774()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003B798()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

NSObject *sub_10003B7CC(int a1, NSObject *a2)
{
  uint64_t v2;

  return sub_10003B41C(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_10003B7D8(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 16))(a1, 0);
}

uint64_t sub_10003B7FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003B820(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(a1, 1);
}

nw_path_t sub_10003B858()
{
  uint64_t v0;
  nw_path_t result;
  nw_path_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int subtype;

  result = nw_connection_copy_current_path(*(nw_connection_t *)(v0 + 32));
  if (result)
  {
    v2 = result;
    v3 = nw_path_copy_interface();
    if (v3)
    {
      v4 = v3;
      v5 = swift_unknownObjectRetain(v3);
      subtype = nw_interface_get_subtype(v5);
      swift_unknownObjectRelease_n(v4, 2);
      swift_unknownObjectRelease(v2);
      return (nw_path_t)(subtype == 1002);
    }
    else
    {
      swift_unknownObjectRelease(v2);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10003B8CC()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for AtomicCounter(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = AtomicCounter.init()();
  qword_100086470 = result;
  return result;
}

double sub_10003B908@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void sub_10003B918()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000004BLL, 0x800000010006C7A0, "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift", 66, 2, 88, 0);
  __break(1u);
}

void sub_10003B970()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = sub_1000138FC();
  OS_nw_connection.send(content:completion:)(v3, v2, v1, v0, v4);
  sub_1000123F0();
}

uint64_t sub_10003B9AC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 41);
}

uint64_t sub_10003B9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100066480, a5);
  return JSONDataBasedControlChannelTransport.send(message:invokingCompletionHandlerOn:completion:)(a1, a2, a3, a4, a5, WitnessTable);
}

void sub_10003BA24()
{
  sub_10003B918();
}

double sub_10003BA30@<D0>(uint64_t a1@<X8>)
{
  return sub_10003B908(a1);
}

unint64_t sub_10003BA44()
{
  return (unint64_t)sub_10003B858() & 1;
}

uint64_t sub_10003BA68(uint64_t a1, uint64_t a2)
{
  return sub_1000121B8((unint64_t *)&unk_100086590, a2, (uint64_t (*)(uint64_t))type metadata accessor for NWObjcConnectionControlChannelTransport, (uint64_t)&unk_100066410);
}

uint64_t sub_10003BA94()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003BAB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003BAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  Swift::String v8;
  Swift::String v9;
  void *object;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;

  v4 = (_QWORD *)v3;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = a1;
  swift_retain(a1);
  dispatch thunk of XPCConnection.withUnsafeUnderlyingConnection<A>(_:)(&v15, sub_100027D08, 0, &type metadata for Int32);
  v15 = 0;
  v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v8._object = (void *)0x800000010006C8E0;
  v8._countAndFlagsBits = 0xD00000000000003FLL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11 = v16;
  v12 = String.utf8CString.getter(v15, v16);
  swift_bridgeObjectRelease(v11);
  v13 = os_transaction_create(v12 + 32);
  result = swift_release(v12);
  if (v13)
  {
    swift_release(a1);
    v4[4] = v13;
    v4[5] = a2;
    v4[6] = a3;
    return (uint64_t)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003BC14()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v0 + 16) = 1;
  v1 = (*(uint64_t (**)(void))(v0 + 40))();
  return dispatch thunk of XPCConnection.cancel()(v1);
}

uint64_t sub_10003BC48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v20;

  v0 = type metadata accessor for DeviceServiceEvent(0);
  v1 = *(_QWORD *)(v0 - 8);
  v3 = __chkstk_darwin(v0, v2);
  v5 = __chkstk_darwin(v3, v4);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v20 - v7;
  sub_100028C0C();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v8, enum case for DeviceServiceEvent.pairableHostFound(_:), v0);
  v11 = sub_100015B1C(&qword_1000859F0, v9, v10, (uint64_t)&protocol conformance descriptor for DeviceServiceEvent);
  sub_100015B1C(&qword_1000859F8, v12, v13, (uint64_t)&protocol conformance descriptor for DeviceServiceEvent);
  v14 = sub_10001552C();
  XPCConnection.send<A>(value:)(v14, v15, v11, v16);
  v17 = sub_10001552C();
  return v18(v17);
}

_QWORD *sub_10003BF28()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  swift_release(v0[6]);
  return v0;
}

uint64_t sub_10003BF54()
{
  uint64_t v0;

  sub_10003BF28();
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for PairableHostsBrowseRegistration()
{
  return objc_opt_self(_TtC20remotepairingdeviced31PairableHostsBrowseRegistration);
}

Swift::Int sub_10003BF94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  v0 = type metadata accessor for PairableHostsBrowseRegistration();
  v2 = sub_1000121B8(&qword_1000866A8, v1, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066590);
  HashableByObjectIdentity.hash(into:)(v4, v0, v2);
  return Hasher._finalize()();
}

Swift::Int sub_10003BFFC()
{
  return sub_10003BF94();
}

uint64_t sub_10003C01C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100066590, a2);
  return HashableByObjectIdentity.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_10003C064(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  WitnessTable = swift_getWitnessTable(&unk_100066590, a2);
  HashableByObjectIdentity.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_10003C0BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_100066590, a3);
  return static HashableByObjectIdentity.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_10003C108(uint64_t a1, uint64_t a2)
{
  return sub_1000121B8(&qword_100086698, a2, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066528);
}

uint64_t sub_10003C134(uint64_t a1, uint64_t a2)
{
  return sub_1000121B8(&qword_1000866A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066550);
}

double sub_10003C160()
{
  uint64_t v0;
  double result;
  _BYTE v2[24];

  sub_1000123DC(v0 + 48, (uint64_t)v2, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48)).n128_u64[0];
  return result;
}

void sub_10003C190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(*(_QWORD *)(v1 + 224) + 16))
  {
    if (!v2)
      sub_10003DE5C();
  }
  else if (v2)
  {
    sub_10003E05C();
  }
}

uint64_t sub_10003C1B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 224);
  *(_QWORD *)(v1 + 224) = a1;
  sub_10003C190(v2);
  return swift_bridgeObjectRelease(v2);
}

void sub_10003C1E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int **v15;
  uint64_t v16;
  int v17;
  os_log_type_t v18;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;
  size_t v22;
  int *v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  int **v56;
  int *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  size_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  void **v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t (*v75)();
  uint64_t v76;

  sub_10003F844();
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v6 = sub_1000162CC();
  v68 = type metadata accessor for DispatchQoS(v6);
  v7 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68, v8);
  sub_1000158C8();
  v9 = *(_QWORD *)(v0 + 80);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  v10 = sub_100015378((uint64_t)&unk_10007BEB0);
  v69 = v0;
  swift_weakInit(v10 + 16, v0);
  v11 = sub_10003F82C();
  swift_release();
  xpc_activity_register("com.apple.dt.remotepairing.updatebonjour", XPC_ACTIVITY_CHECK_IN, v11);
  sub_100015A84();
  v12 = sub_10003F82C();
  sub_10003F8AC("com.apple.bonjour.registration");
  _Block_release(v12);
  v75 = sub_10003CA3C;
  v76 = 0;
  v71 = _NSConcreteStackBlock;
  v72 = 1107296256;
  v73 = sub_100016A28;
  v74 = &unk_10007C300;
  v13 = v9;
  v14 = sub_10003F82C();
  sub_10003F8AC("com.apple.bluetooth.discovery");
  _Block_release(v14);
  v15 = (int **)sub_1000123C4(8);
  v70 = 0;
  v16 = launch_activate_socket("TCPControlChannelSocket", v15, &v70);
  if ((_DWORD)v16)
  {
    v17 = v16;
    v18 = static os_log_type_t.error.getter(v16);
    v19 = qword_1000886E0;
    if (sub_1000155C8(v18))
    {
      v20 = (uint8_t *)sub_1000123C4(8);
      *(_DWORD *)v20 = 67109120;
      LODWORD(v71) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 4, v20 + 4);
      sub_10003F824((void *)&_mh_execute_header, v19, (os_log_type_t)v14, "NetworkControlChannelService: failed to fetch sockets from launchd. Received result %d", v20);
      sub_100012398((uint64_t)v20);
    }
    v21 = (uint64_t)v15;
  }
  else
  {
    v62 = v2;
    v63 = v1;
    v64 = v3;
    v56 = v15;
    v57 = *v15;
    if (v70)
    {
      v61 = (_QWORD *)(v69 + 56);
      v22 = 4 * v70;
      v23 = *v15;
      v60 = v4;
      v67 = v7;
      v59 = v13;
      v58 = (_QWORD *)(v69 + 64);
      do
      {
        v24 = *v23;
        v25 = socket_deny_cellular(*v23);
        if (v25)
        {
          v66 = v22;
          sub_1000173F0(0, (unint64_t *)&qword_100086200, OS_dispatch_source_ptr);
          v26 = static OS_dispatch_source.makeReadSource(fileDescriptor:queue:)(v24, v13);
          ObjectType = swift_getObjectType(v26);
          v28 = sub_100015378((uint64_t)&unk_10007BEB0);
          swift_weakInit(v28 + 16, v69);
          v29 = sub_1000138D4((uint64_t)&unk_10007C338, 36);
          *(_QWORD *)(v29 + 16) = v28;
          *(_QWORD *)(v29 + 24) = v26;
          *(_DWORD *)(v29 + 32) = v24;
          v75 = sub_10000E230;
          v76 = v29;
          v71 = _NSConcreteStackBlock;
          v72 = 1107296256;
          v73 = sub_10000E208;
          v74 = &unk_10007C350;
          v30 = sub_10003F82C();
          sub_10001612C();
          sub_10003F8B8();
          j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
          sub_10001B3CC(ObjectType);
          OS_dispatch_source.setEventHandler(qos:flags:handler:)(v62, v63, v30, ObjectType);
          _Block_release(v30);
          v65 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
          v65(v63, v64);
          v31 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
          v31(v62, v68);
          sub_10000E4FC();
          sub_1000118D4();
          v32 = sub_100015378((uint64_t)&unk_10007C388);
          *(_QWORD *)(v32 + 16) = v26;
          v75 = sub_10003F768;
          v76 = v32;
          v71 = _NSConcreteStackBlock;
          v72 = 1107296256;
          v73 = sub_10000E208;
          v74 = &unk_10007C3A0;
          v33 = sub_10003F82C();
          sub_10003F8B8();
          j_j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
          sub_10001B3CC(ObjectType);
          OS_dispatch_source.setCancelHandler(qos:flags:handler:)(v62);
          _Block_release(v33);
          v65(v63, v64);
          v31(v62, v68);
          swift_release();
          OS_dispatch_source.resume()();
          sub_1000123DC((uint64_t)v61, (uint64_t)&v71, 33);
          v34 = *(_QWORD *)(v69 + 56);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
          *(_QWORD *)(v69 + 56) = v34;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100014494();
            v34 = v50;
            *v61 = v50;
          }
          v36 = *(_QWORD *)(v34 + 16);
          v4 = v60;
          v7 = v67;
          v13 = v59;
          if (v36 >= *(_QWORD *)(v34 + 24) >> 1)
          {
            sub_100014494();
            v34 = v51;
            *v61 = v51;
          }
          *(_QWORD *)(v34 + 16) = v36 + 1;
          *(_DWORD *)(v34 + 4 * v36 + 32) = v24;
          swift_endAccess(&v71);
          sub_1000123DC((uint64_t)v58, (uint64_t)&v71, 33);
          v37 = sub_10003F8B8();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
          v39 = *(_QWORD *)((*v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v38 = *(_QWORD *)((*v58 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v39 >= v38 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v26);
          specialized Array._endMutation()(v40);
          swift_endAccess(&v71);
          swift_unknownObjectRelease(v26);
          v22 = v66;
        }
        else
        {
          v41 = static os_log_type_t.error.getter(v25);
          v42 = qword_1000886E0;
          v43 = v41;
          if (os_log_type_enabled((os_log_t)qword_1000886E0, v41))
          {
            v44 = sub_1000123C4(8);
            v45 = v24;
            v46 = v7;
            v47 = v22;
            v48 = v44;
            *(_DWORD *)v44 = 67109120;
            *(_DWORD *)(v44 + 4) = v45;
            sub_10003F824((void *)&_mh_execute_header, v42, v43, "NetworkControlChannelService: Failed to set restrictions on socket %d", (uint8_t *)v44);
            v49 = v48;
            v22 = v47;
            v7 = v46;
            sub_100012398(v49);
          }
        }
        ++v23;
        v22 -= 4;
      }
      while (v22);
    }
    sub_1000123DC(v69 + 56, (uint64_t)&v71, 0);
    v52 = *(_QWORD *)(v69 + 56);
    if (*(_QWORD *)(v52 + 16))
    {
      v53 = sub_10003EC08(*(_DWORD *)(v52 + 32));
      *(_WORD *)(v69 + 72) = v53;
      *(_BYTE *)(v69 + 74) = BYTE2(v53) & 1;
    }
    v54 = sub_100015378((uint64_t)&unk_10007BEB0);
    swift_weakInit(v54 + 16, v69);
    swift_retain(v54);
    sub_100022C20((uint64_t)sub_10003F6DC, v54);
    swift_release_n(v54, 2);
    sub_100016418((_QWORD *)(v69 + 88), *(_QWORD *)(v69 + 112));
    swift_retain(v69);
    v55 = sub_10003F834();
    sub_10004ABD0(v55);
    sub_100012398((uint64_t)v57);
    v21 = (uint64_t)v56;
  }
  sub_100012398(v21);
  sub_100015B28();
}

void sub_10003C8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t Strong;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  _BYTE v11[31];
  uint64_t v12;

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v6 = *(id *)(Strong + 80);
    v7 = swift_release();
    __chkstk_darwin(v7, v8);
    v10[2] = a2;
    v10[3] = a1;
    v9 = sub_1000150C0(&qword_1000861F8);
    OS_dispatch_queue.sync<A>(execute:)(&v12, sub_10003F770, v10, v9);

  }
}

uint64_t sub_10003C9BC@<X0>(uint64_t a1@<X0>, _xpc_activity_s *a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  v7 = result;
  if (result)
  {
    sub_10003D048(a2);
    result = swift_release();
  }
  *a3 = v7 == 0;
  return result;
}

uint64_t sub_10003CA3C()
{
  uint64_t v0;

  v0 = static os_log_type_t.info.getter();
  return os_log(_:dso:log:_:_:)(v0, &_mh_execute_header, qword_1000886E0, "Received CoreBlutooth discovery XPC event", 41, 2);
}

uint64_t sub_10003CA78(uint64_t a1)
{
  os_log_type_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t result;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = static os_log_type_t.error.getter(a1);
  v3 = qword_1000886E0;
  v4 = v2;
  result = os_log_type_enabled((os_log_t)qword_1000886E0, v2);
  if ((_DWORD)result)
  {
    swift_unknownObjectRetain_n(a1, 2);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = a1;
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_unknownObjectRetain(a1);
    v8 = sub_1000150C0(&qword_1000869F0);
    v9 = String.init<A>(describing:)(&v13, v8);
    v11 = v10;
    sub_100010D40(v9, v10, &v14);
    v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4);
    swift_unknownObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "NetworkControlChannelService: listener source %s cancelled", v6, 0xCu);
    swift_arrayDestroy(v7, 1);
    swift_slowDealloc(v7, -1, -1);
    return swift_slowDealloc(v6, -1, -1);
  }
  return result;
}

uint64_t sub_10003CBDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_100016758();
    sub_10003D0EC();
    return swift_release();
  }
  return result;
}

void sub_10003CC34()
{
  sub_100016758();
  sub_10003D0EC();
  sub_100014510();
}

void sub_10003CC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[18];
  uint64_t v47;
  uint64_t v48;

  sub_100011610();
  v47 = v1;
  v48 = v2;
  v3 = v0;
  v4 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + 216) & 1) != 0)
  {
    v10 = static os_log_type_t.error.getter(v7);
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1000886E0, "NetworkControlChannelService: Ignoring shutdown request as service is already shutting down", 91, 2, &_swiftEmptyArrayStorage);
  }
  else
  {
    *(_BYTE *)(v0 + 216) = 1;
    sub_1000123DC(v0 + 64, (uint64_t)v46, 0);
    v11 = *(_QWORD *)(v0 + 64);
    if ((unint64_t)v11 >> 62)
      goto LABEL_42;
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
    if (!v12)
      goto LABEL_11;
LABEL_5:
    if (v12 < 1)
    {
      __break(1u);
    }
    else
    {
      v13 = 0;
      do
      {
        if ((v11 & 0xC000000000000001) != 0)
        {
          v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
        }
        else
        {
          v14 = *(_QWORD *)(v11 + 8 * v13 + 32);
          swift_unknownObjectRetain(v14);
        }
        ++v13;
        swift_getObjectType(v14);
        OS_dispatch_source.cancel()();
        swift_unknownObjectRelease(v14);
      }
      while (v12 != v13);
      while (1)
      {
LABEL_11:
        swift_bridgeObjectRelease(v11);
        sub_1000123DC(v3 + 48, (uint64_t)&v45, 0);
        v3 = *(_QWORD *)(v3 + 48);
        if ((v3 & 0xC000000000000001) != 0)
        {
          v15 = v3 < 0 ? v3 : v3 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v3);
          v16 = __CocoaSet.makeIterator()(v15);
          v17 = sub_1000135A4();
          sub_10000EC40(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
          v19 = Set.Iterator.init(_cocoa:)(v16, v17, v18);
          v3 = v46[3];
          v42 = v46[4];
          v20 = v46[5];
          v21 = v46[6];
          v22 = v46[7];
        }
        else
        {
          v23 = -1 << *(_BYTE *)(v3 + 32);
          v42 = v3 + 56;
          v20 = ~v23;
          sub_1000139EC();
          v22 = v24 & v25;
          swift_bridgeObjectRetain(v3);
          v21 = 0;
        }
        v38 = v20;
        v40 = v3 & 0x7FFFFFFFFFFFFFFFLL;
        v41 = (unint64_t)(v20 + 64) >> 6;
        v26 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
        v39 = (char *)&type metadata for Swift.AnyObject + 8;
        if (v3 < 0)
          break;
LABEL_18:
        if (v22)
        {
          v27 = (v22 - 1) & v22;
          v28 = __clz(__rbit64(v22)) | (v21 << 6);
          v11 = v21;
          goto LABEL_37;
        }
        v33 = v21 + 1;
        if (!__OFADD__(v21, 1))
        {
          if (v33 >= v41)
            goto LABEL_40;
          v34 = *(_QWORD *)(v42 + 8 * v33);
          v11 = v21 + 1;
          if (!v34)
          {
            v11 = v21 + 2;
            if (v21 + 2 >= v41)
              goto LABEL_40;
            v34 = *(_QWORD *)(v42 + 8 * v11);
            if (!v34)
            {
              v11 = v21 + 3;
              if (v21 + 3 >= v41)
                goto LABEL_40;
              v34 = *(_QWORD *)(v42 + 8 * v11);
              if (!v34)
              {
                v11 = v21 + 4;
                if (v21 + 4 >= v41)
                  goto LABEL_40;
                v34 = *(_QWORD *)(v42 + 8 * v11);
                if (!v34)
                {
                  v35 = v21 + 5;
                  while (v35 < v41)
                  {
                    v34 = *(_QWORD *)(v42 + 8 * v35++);
                    if (v34)
                    {
                      v11 = v35 - 1;
                      goto LABEL_36;
                    }
                  }
                  goto LABEL_40;
                }
              }
            }
          }
LABEL_36:
          v27 = (v34 - 1) & v34;
          v28 = __clz(__rbit64(v34)) + (v11 << 6);
LABEL_37:
          v36 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v28);
          sub_10000E49C();
          if (v36)
            goto LABEL_38;
          goto LABEL_40;
        }
        __break(1u);
LABEL_42:
        if (v11 < 0)
          v37 = v11;
        else
          v37 = v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v11);
        v12 = _CocoaArrayWrapper.endIndex.getter(v37);
        if (v12)
          goto LABEL_5;
      }
      while (1)
      {
        v29 = v40;
        v30 = __CocoaSet.Iterator.next()(v19);
        if (!v30)
          break;
        v31 = v30;
        v43 = v30;
        sub_1000135A4();
        sub_10003F8A0();
        swift_dynamicCast(&v44, &v43, v39, v29, 7);
        v32 = v44;
        swift_unknownObjectRelease(v31);
        v11 = v21;
        v27 = v22;
        if (!v32)
          break;
LABEL_38:
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 104))(v9, v26, v4);
        dispatch thunk of ControlChannelConnection.invalidate(for:)(v9);
        sub_1000118D4();
        v19 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
        v21 = v11;
        v22 = v27;
        if ((v3 & 0x8000000000000000) == 0)
          goto LABEL_18;
      }
LABEL_40:
      sub_100018CD4(v3);
      sub_1000138B4();
    }
  }
}

uint64_t sub_10003D048(_xpc_activity_s *a1)
{
  xpc_activity_state_t state;
  uint64_t v3;

  OS_dispatch_queue.assertOnQueueHierarchy()();
  state = xpc_activity_get_state(a1);
  v3 = static os_log_type_t.info.getter(state);
  if (!state)
    return os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1000886E0, "Checking in for bonjour registration XPC activity", 49, 2, &_swiftEmptyArrayStorage);
  sub_10001539C(v3, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Bonjour registration XPC activity fired", 39);
  return sub_100016758();
}

void sub_10003D0EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString *v7;
  Class v8;
  uint64_t v9;
  uint64_t IsEnabled;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD v34[5];
  void **v35;
  uint64_t v36;
  void (*v37)(uint64_t, void *);
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_10003F844();
  v41 = v1;
  v42 = v2;
  v3 = v0;
  v4 = type metadata accessor for XPCDictionary(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  sub_100012460();
  v7 = (NSString *)String._bridgeToObjectiveC()();
  v8 = NSClassFromString(v7);

  if (!v8)
  {
    v13 = static os_log_type_t.default.getter(v9);
    v14 = qword_1000886E0;
    v15 = "Not configuring Bluetooth discovery as CoreBluetooth is not loaded";
    v16 = 66;
    goto LABEL_8;
  }
  IsEnabled = remotePairingIsEnabled(v9);
  if (!(_DWORD)IsEnabled)
  {
    v17 = static os_log_type_t.default.getter(IsEnabled);
    v18 = qword_1000886E0;
    v19 = "Not configuring Bluetooth discovery due to due to remote pairing support being disabled";
    v20 = 87;
LABEL_12:
    sub_10001539C(v17, (uint64_t)&_mh_execute_header, v18, (uint64_t)v19, v20);
    xpc_set_event("com.apple.bluetooth.discovery", "remotepairing.bluetooth", 0);
    objc_msgSend(*(id *)(v3 + 184), "invalidate");
    v21 = *(void **)(v3 + 184);
    *(_QWORD *)(v3 + 184) = 0;

    return;
  }
  v11 = ((uint64_t (*)(void))static Defaults.deviceAllowBluetoothDeviceDiscovery.getter)();
  if ((v11 & 1) == 0)
  {
    v17 = static os_log_type_t.error.getter(v11);
    v18 = qword_1000886E0;
    v19 = "Not configuring Bluetooth discovery due to deviceAllowBluetoothDeviceDiscovery default value";
    v20 = 92;
    goto LABEL_12;
  }
  v12 = sub_100012F88();
  if (!v12)
  {
    v17 = static os_log_type_t.error.getter(v12);
    v18 = qword_1000886E0;
    v19 = "Not configuring Bluetooth discovery as no hosts are paired";
    v20 = 58;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v3 + 184))
  {
    v13 = static os_log_type_t.info.getter(v12);
    v14 = qword_1000886E0;
    v15 = "Bluetooth discovery already configured";
    v16 = 38;
LABEL_8:
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, v15, v16, 2, &_swiftEmptyArrayStorage);
    return;
  }
  v22 = sub_1000150C0(&qword_100086978);
  v23 = sub_1000138D4(v22, 160);
  *(_OWORD *)(v23 + 16) = xmmword_100065CC0;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  strcpy((char *)(v23 + 32), "discoveryFlags");
  *(_BYTE *)(v23 + 47) = -18;
  v24 = sub_1000150C0(&qword_100086980);
  *(_QWORD *)(v23 + 64) = &off_10007A468;
  *(_QWORD *)(v23 + 88) = v24;
  *(_QWORD *)(v23 + 96) = 0x526E616353656C62;
  *(_QWORD *)(v23 + 104) = 0xEB00000000657461;
  *(_QWORD *)(v23 + 152) = &type metadata for String;
  *(_QWORD *)(v23 + 120) = &type metadata for String;
  *(_QWORD *)(v23 + 128) = 0x756F72676B636142;
  *(_QWORD *)(v23 + 136) = 0xEA0000000000646ELL;
  sub_1000173F0(0, &qword_100086988, NSDictionary_ptr);
  v25 = ((uint64_t (*)(uint64_t))NSDictionary.init(dictionaryLiteral:))(v23);
  v26 = ((uint64_t (*)(uint64_t))XPCDictionary.init(nsDictionary:))(v25);
  __chkstk_darwin(v26, v27);
  v34[2] = 0xD000000000000017;
  v34[3] = 0x800000010006D0A0;
  XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(sub_10003F504, v34, (char *)&type metadata for () + 8);
  v28 = objc_msgSend(objc_allocWithZone((Class)CBDiscovery), "init");
  objc_msgSend(v28, "setDiscoveryFlags:", 33685504);
  v29 = sub_10003F894((uint64_t)objc_msgSend(v28, "setDispatchQueue:", *(_QWORD *)(v3 + 80)), "setBleScanRate:");
  sub_10003F894((uint64_t)v29, "setBleScanRateScreenOff:");
  v39 = sub_10003F51C;
  v40 = v3;
  v35 = _NSConcreteStackBlock;
  v36 = 1107296256;
  v37 = sub_10003D8E0;
  v38 = &unk_10007C198;
  sub_100012510();
  sub_10000E520();
  v30 = sub_100015384();
  sub_100014554(v30, "setDeviceFoundHandler:");
  sub_100015A84();
  v39 = sub_10003F524;
  v40 = v3;
  v35 = _NSConcreteStackBlock;
  v36 = 1107296256;
  v37 = sub_10003D8E0;
  v38 = &unk_10007C1C0;
  sub_100012510();
  sub_10000E520();
  v31 = sub_100015384();
  sub_100014554(v31, "setDeviceLostHandler:");
  sub_100015A84();
  v39 = sub_10003DC30;
  v40 = 0;
  v35 = _NSConcreteStackBlock;
  v36 = 1107296256;
  v37 = sub_10003DE08;
  v38 = &unk_10007C1E8;
  v32 = sub_100012510();
  sub_100014554((uint64_t)v32, "activateWithCompletion:");
  sub_100015A84();
  sub_10001F5E4(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  v33 = *(void **)(v3 + 184);
  *(_QWORD *)(v3 + 184) = v28;

  sub_100015B28();
}

uint64_t sub_10003D568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = String.utf8CString.getter(a2, a3);
  xpc_set_event("com.apple.bluetooth.discovery", v4 + 32, a1);
  return swift_release(v4);
}

uint64_t sub_10003D5C0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[4];

  v4 = type metadata accessor for Data.HexStringEncodingOptions(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_100039360(a1, (SEL *)&selRef_identifier);
  if (v10)
  {
    v11 = result;
    v12 = v10;
    v13 = static os_log_type_t.default.getter(result);
    sub_1000173F0(0, (unint64_t *)&qword_100086990, OS_os_log_ptr);
    v14 = a1;
    v15 = static OS_os_log.default.getter(v14);
    if (os_log_type_enabled(v15, (os_log_type_t)v13))
    {
      v34 = v12;
      v36 = v13;
      v37 = v11;
      v38 = a2;
      v16 = swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(64, -1);
      v40[0] = v35;
      *(_DWORD *)v16 = 136315394;
      v17 = sub_100039360(v14, (SEL *)&selRef_name);
      if (!v18)
        v17 = 0x6E776F6E6B6E553CLL;
      v19 = 0xE90000000000003ELL;
      if (v18)
        v20 = v18;
      else
        v20 = 0xE90000000000003ELL;
      sub_100010D40(v17, v20, v40);
      v39 = v21;
      v33 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v16 + 4);

      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v16 + 12) = 2080;
      v22 = sub_10003F640(v14);
      if (v23 >> 60 == 15)
      {
        v24 = 0x6E776F6E6B6E553CLL;
      }
      else
      {
        v25 = v22;
        v26 = v23;
        static Data.HexStringEncodingOptions.bluetoothAddress.getter();
        v24 = Data.hexEncodedString(options:)(v8, v25, v26);
        v19 = v27;
        sub_100013AB4(v25, v26);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      }
      sub_100010D40(v24, v19, v40);
      v39 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v33, v16 + 14);

      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v36, "Discovered NearbyAction trigger from device (name=%s, address=%s)", (uint8_t *)v16, 0x16u);
      v29 = v35;
      swift_arrayDestroy(v35, 2);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      v11 = v37;
      a2 = v38;
      v12 = v34;
    }
    else
    {

    }
    v40[3] = sub_1000173F0(0, &qword_1000869A0, CBDevice_ptr);
    v39 = *(_QWORD *)(a2 + 224);
    v30 = v39;
    v40[0] = (uint64_t)v14;
    v31 = v14;
    swift_bridgeObjectRetain(v30);
    sub_100015BEC((uint64_t)v40, v11, v12);
    return sub_10003C1B4(v39);
  }
  return result;
}

void sub_10003D8E0(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_10003D930(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[4];

  v4 = type metadata accessor for Data.HexStringEncodingOptions(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_100039360(a1, (SEL *)&selRef_identifier);
  if (v10)
  {
    v11 = result;
    v12 = v10;
    v13 = static os_log_type_t.default.getter(result);
    sub_1000173F0(0, (unint64_t *)&qword_100086990, OS_os_log_ptr);
    v14 = a1;
    v15 = static OS_os_log.default.getter(v14);
    if (os_log_type_enabled(v15, (os_log_type_t)v13))
    {
      v33 = v13;
      v34 = v11;
      v35 = v12;
      v36 = a2;
      v16 = 0x6E776F6E6B6E553CLL;
      v17 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(64, -1);
      v38[0] = v32;
      *(_DWORD *)v17 = 136315394;
      v18 = sub_100039360(v14, (SEL *)&selRef_name);
      if (!v19)
        v18 = 0x6E776F6E6B6E553CLL;
      v20 = 0xE90000000000003ELL;
      if (v19)
        v21 = v19;
      else
        v21 = 0xE90000000000003ELL;
      sub_100010D40(v18, v21, v38);
      v37 = v22;
      v31 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v17 + 4);

      swift_bridgeObjectRelease(v21);
      *(_WORD *)(v17 + 12) = 2080;
      v23 = sub_10003F640(v14);
      if (v24 >> 60 != 15)
      {
        v25 = v23;
        v26 = v24;
        static Data.HexStringEncodingOptions.bluetoothAddress.getter();
        v16 = Data.hexEncodedString(options:)(v8, v25, v26);
        v20 = v27;
        sub_100013AB4(v25, v26);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      }
      sub_100010D40(v16, v20, v38);
      v37 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v31, v17 + 14);

      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v33, "Lost NearbyAction trigger from device (name=%s, address=%s)", (uint8_t *)v17, 0x16u);
      v29 = v32;
      swift_arrayDestroy(v32, 2);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      v12 = v35;
      a2 = v36;
      v11 = v34;
    }
    else
    {

    }
    v37 = *(_QWORD *)(a2 + 224);
    swift_bridgeObjectRetain(v37);
    sub_1000586DC(v38, v11, v12);
    sub_10003F608((uint64_t)v38, &qword_100085588);
    sub_10003C1B4(v37);
    return swift_bridgeObjectRelease(v12);
  }
  return result;
}

uint64_t sub_10003DC30(uint64_t a1)
{
  uint64_t v2;
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[8];
  uint64_t v17;

  if (a1)
  {
    v2 = swift_errorRetain(a1);
    v3 = static os_log_type_t.error.getter(v2);
    v4 = qword_1000886E0;
    v5 = v3;
    if (os_log_type_enabled((os_log_t)qword_1000886E0, v3))
    {
      swift_errorRetain(a1);
      swift_errorRetain(a1);
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v17 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_getErrorValue(a1, v16, v15);
      v8 = Error.localizedDescription.getter(v15[1], v15[2]);
      v10 = v9;
      sub_100010D40(v8, v9, &v17);
      v14 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v6 + 4);
      swift_bridgeObjectRelease(v10);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Bluetooth discovery activation failed: %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
      return swift_errorRelease(a1);
    }
    else
    {
      return swift_errorRelease(a1);
    }
  }
  else
  {
    v13 = static os_log_type_t.default.getter(0);
    return os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1000886E0, "Bluetooth discovery activated", 29, 2, &_swiftEmptyArrayStorage);
  }
}

void sub_10003DE08(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

void sub_10003DE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  IOReturn v11;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD v18[6];

  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000115F0();
  __chkstk_darwin(v2, v3);
  v4 = sub_1000159E4();
  sub_10001539C(v4, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Bluetooth discovery activating WiFi keep alive and on-demand listener", 69);
  v5 = *(_QWORD *)(v0 + 192);
  if (!v5)
  {
    v6 = type metadata accessor for WiFiKeepAlive();
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v7 = sub_10003F834();
    v5 = WiFiKeepAlive.init(reason:)(v7);
  }
  *(_QWORD *)(v0 + 192) = v5;
  sub_10001612C();
  sub_1000118D4();
  v8 = (__CFString *)sub_100011910();
  v9 = (__CFString *)sub_100011910();
  sub_10003F834();
  v10 = (__CFString *)String._bridgeToObjectiveC()();
  sub_1000123DC(v0 + 200, (uint64_t)v18, 33);
  v11 = IOPMAssertionCreateWithDescription(v8, v9, v10, 0, 0, 0.0, 0, (IOPMAssertionID *)(v0 + 200));
  swift_endAccess(v18);

  if (v11)
  {
    v13 = static os_log_type_t.error.getter(v12);
    v14 = qword_1000886E0;
    v12 = sub_100013A58(v13);
    if ((_DWORD)v12)
    {
      v15 = (uint8_t *)sub_1000123C4(8);
      *(_DWORD *)v15 = 67109120;
      v18[0] = v11;
      sub_10003F870((uint64_t)v15, v16, (uint64_t)(v15 + 4));
      sub_10003F824((void *)&_mh_execute_header, v14, (os_log_type_t)v9, "Failed to create power assertion for NearbyAction: %d", v15);
      v12 = sub_100012398((uint64_t)v15);
    }
  }
  UUID.init()(v12);
  v17 = sub_1000118FC();
  sub_100015664(v1, 0, 1, v17);
  sub_10003E1D0();
  sub_10003F608(v1, (uint64_t *)&unk_100086150);
}

void sub_10003E05C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000115F0();
  __chkstk_darwin(v2, v3);
  v4 = sub_1000159E4();
  sub_10001539C(v4, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Bluetooth discovery disabling WiFi keep alive and on-demand listener", 68);
  *(_QWORD *)(v0 + 192) = 0;
  swift_release();
  sub_10003E108();
  v5 = sub_1000118FC();
  sub_100015664(v1, 1, 1, v5);
  sub_10003E1D0();
  sub_10003F608(v1, (uint64_t *)&unk_100086150);
}

uint64_t sub_10003E108()
{
  uint64_t v0;
  os_log_type_t v1;
  _DWORD *v2;
  uint64_t result;
  int v4;
  os_log_type_t v5;
  NSObject *v6;
  float *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];

  v2 = (_DWORD *)(v0 + 200);
  sub_1000123DC(v0 + 200, (uint64_t)v10, 1);
  result = *(unsigned int *)(v0 + 200);
  if ((_DWORD)result)
  {
    result = IOPMAssertionRelease(result);
    if ((_DWORD)result)
    {
      v4 = result;
      v5 = static os_log_type_t.error.getter(result);
      v6 = qword_1000886E0;
      result = sub_10001593C(v5);
      if ((_DWORD)result)
      {
        v7 = (float *)sub_1000123C4(8);
        sub_10003F860(v7, 1.5047e-36);
        v9 = v4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, v10, v8);
        sub_10003F824((void *)&_mh_execute_header, v6, v1, "Failed to release power assertion for NearbyAction: %d", (uint8_t *)v7);
        result = sub_100012398((uint64_t)v7);
      }
    }
    *v2 = 0;
  }
  return result;
}

void sub_10003E1D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  id v27;
  void *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  nw_listener_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *bonjour_service;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  sub_10003F844();
  v3 = v0;
  v5 = v4;
  v6 = type metadata accessor for BonjourService(0);
  v55 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  sub_100011928();
  v10 = v9 - v8;
  v11 = type metadata accessor for BonjourAdvertFlags(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  sub_1000119AC();
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000115F0();
  __chkstk_darwin(v14, v15);
  v16 = sub_1000162CC();
  v17 = type metadata accessor for UUID(v16);
  v56 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  sub_100011928();
  v21 = v20 - v19;
  v22 = *(NSObject **)(v3 + 208);
  if (v22)
  {
    nw_listener_cancel(v22);
    v23 = *(_QWORD *)(v3 + 208);
    *(_QWORD *)(v3 + 208) = 0;
    swift_unknownObjectRelease(v23);
  }
  sub_100024A88(v5, v1);
  if (sub_100015658(v1, 1, v17) != 1)
  {
    v54 = v6;
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v21, v1, v17);
    static BonjourAdvertFlags.onDemand.getter(v24);
    v25 = sub_100013114();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v2, v11);
    if (!v25)
    {
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v21, v17);
      goto LABEL_16;
    }
    v53 = v17;
    v26 = sub_1000100EC();
    nw_parameters_set_no_wake_from_sleep(v26, 1);
    v27 = objc_msgSend((id)objc_opt_self(WiFiP2PAWDLState), "currentState");
    if (v27)
    {
      v28 = v27;
      v29 = objc_msgSend(v27, "supportsDataTransfer");

      if (v29)
      {
        v31 = static os_log_type_t.debug.getter(v30);
        sub_10001539C(v31, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Enabling peer-to-peer connectivity on on-demand network control channel listener", 80);
        nw_parameters_set_include_peer_to_peer(v26, 1);
      }
    }
    v32 = nw_listener_create(v26);
    if (v32)
    {
      v51 = v32;
      v52 = v25;
      v33 = UUID.uuidString.getter(v32);
      v35 = v34;
      v36 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v55 + 104))(v10, enum case for BonjourService.default(_:), v54);
      v37 = BonjourService.rawValue.getter(v36);
      v39 = v38;
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v10, v54);
      v40 = String.utf8CString.getter(v33, v35);
      swift_bridgeObjectRelease(v35);
      v41 = String.utf8CString.getter(v37, v39);
      swift_bridgeObjectRelease(v39);
      bonjour_service = nw_advertise_descriptor_create_bonjour_service((const char *)(v40 + 32), (const char *)(v41 + 32), 0);
      swift_release();
      v43 = swift_release();
      if (bonjour_service)
      {
        nw_advertise_descriptor_set_txt_record_object(bonjour_service, v52);
        nw_listener_set_advertise_descriptor(v51, bonjour_service);
        v44 = sub_1000164C8((uint64_t)sub_10003B6B0);
        nw_listener_set_state_changed_handler(v51, v44);
        _Block_release(v44);
        v45 = sub_1000164C8((uint64_t)sub_1000456B0);
        swift_retain(v3);
        sub_100015384();
        nw_listener_set_new_connection_handler(v51, v45);
        _Block_release(v45);
        nw_listener_set_queue(v51, *(dispatch_queue_t *)(v3 + 80));
        nw_listener_start(v51);
        sub_10003F880();
        swift_unknownObjectRelease(v52);
        swift_unknownObjectRelease(bonjour_service);
        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v21, v53);
        v46 = *(_QWORD *)(v3 + 208);
        *(_QWORD *)(v3 + 208) = v51;
        swift_unknownObjectRelease(v46);
        goto LABEL_16;
      }
      v50 = static os_log_type_t.error.getter(v43);
      sub_10001539C(v50, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Unable to create network listener service for Bluetooth discovery", 65);
      sub_10003F880();
      swift_unknownObjectRelease(v52);
      swift_unknownObjectRelease(v51);
      v48 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v49 = v21;
    }
    else
    {
      v47 = static os_log_type_t.error.getter(0);
      sub_10001539C(v47, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Unable to create network listener for Bluetooth discovery", 57);
      sub_10003F880();
      swift_unknownObjectRelease(v25);
      v48 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v49 = v21;
    }
    v48(v49, v53);
    goto LABEL_16;
  }
  sub_10003F608(v1, (uint64_t *)&unk_100086150);
LABEL_16:
  sub_100015B28();
}

uint64_t sub_10003E648(uint64_t a1, void *a2)
{
  int v3;
  os_log_type_t v4;
  NSObject *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1;
  v4 = static os_log_type_t.default.getter(a1);
  v5 = qword_1000886E0;
  result = os_log_type_enabled((os_log_t)qword_1000886E0, v4);
  if ((_DWORD)result)
  {
    swift_unknownObjectRetain_n(a2, 2);
    v7 = swift_slowAlloc(18, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v8;
    *(_DWORD *)v7 = 67109378;
    LODWORD(v14) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, (char *)&v14 + 4, v7 + 4);
    *(_WORD *)(v7 + 8) = 2080;
    if (a2)
    {
      v9 = objc_msgSend(a2, "description");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

    }
    else
    {
      v12 = 0xE600000000000000;
      v10 = 0x29656E6F6E28;
    }
    sub_100010D40(v10, v12, &v15);
    v14 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v7 + 10);
    swift_unknownObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v5, v4, "Bluetooth discovery bonjour listener state changed: %u, error: %s", (uint8_t *)v7, 0x12u);
    swift_arrayDestroy(v8, 1);
    swift_slowDealloc(v8, -1, -1);
    return swift_slowDealloc(v7, -1, -1);
  }
  return result;
}

uint64_t sub_10003E7F0(NSObject *a1, uint64_t a2)
{
  swift_unknownObjectRetain(a1);
  swift_retain(a2);
  return sub_10003E860(1, a2, a1, a2);
}

void sub_10003E82C(char a1, nw_connection_t connection)
{
  if ((a1 & 1) != 0)
    sub_100011248();
  else
    nw_connection_cancel(connection);
}

uint64_t sub_10003E860(char a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t IsEnabled;
  uint64_t v14;
  os_log_type_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _BYTE v25[24];

  v8 = swift_allocObject(&unk_10007BFA0, 32, 7);
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  swift_unknownObjectRetain(a3);
  swift_retain(a4);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  swift_beginAccess(a2 + 48, v25, 0, 0);
  v9 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain(v9);
  v11 = sub_100012A70(v10);
  v12 = swift_bridgeObjectRelease(v9);
  if (v11 > 39)
  {
    v15 = static os_log_type_t.error.getter(v12);
    v16 = qword_1000886E0;
    v17 = v15;
    if (os_log_type_enabled((os_log_t)qword_1000886E0, v15))
    {
      swift_retain(a2);
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v18 = 134217984;
      v19 = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain(v19);
      v21 = sub_100012A70(v20);
      swift_bridgeObjectRelease(v19);
      v24 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v18 + 4);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Rejecting incoming TCP connection as we already have %ld TCP peers", v18, 0xCu);
      swift_slowDealloc(v18, -1, -1);
    }
  }
  else
  {
    IsEnabled = remotePairingIsEnabled(v12);
    if ((IsEnabled & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 216) & 1) == 0)
      {
        swift_retain(a2);
        swift_retain(v8);
        sub_100012A74(a2, a1 & 1, a2, (uint64_t)sub_10003F480, v8);
        goto LABEL_9;
      }
      v14 = static os_log_type_t.error.getter(IsEnabled);
      os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1000886E0, "Rejecting TCP control channel connection as service is shutting down", 68, 2, &_swiftEmptyArrayStorage);
    }
    else
    {
      v22 = static os_log_type_t.error.getter(IsEnabled);
      os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1000886E0, "Rejecting TCP control channel connection due to remotepairing support being disabled", 84, 2, &_swiftEmptyArrayStorage);
    }
  }
  nw_connection_cancel(a3);
LABEL_9:
  swift_unknownObjectRelease(a3);
  swift_release();
  return swift_release();
}

uint64_t sub_10003EAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  void *v13;
  char v14;
  _BYTE v15[24];
  _BYTE v16[24];

  v4 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v16, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v10 = a2 + 16;
    swift_beginAccess(v10, v15, 0, 0);
    Strong = swift_weakLoadStrong(v10);
    if (Strong)
    {
      v12 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter(Strong);
      if (v12)
      {
        v13 = (void *)v12;
        sub_100053CB4();
        if ((v14 & 1) == 0)
        {
          (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:), v4);
          dispatch thunk of ControlChannelConnection.invalidate(for:)(v8);

          swift_release();
          swift_release();
          return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
        }

      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

void sub_10003EBEC(uint64_t a1)
{
  dispatch thunk of ControlChannelConnection.start()(a1);
  sub_100014510();
}

uint64_t sub_10003EC08(int a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  os_log_type_t v5;
  NSObject *v6;
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  os_log_type_t v17;
  NSObject *v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v25;
  NSObject *v26;
  uint8_t *v28;
  uint64_t v29;
  int v30;
  socklen_t v31;

  v2 = sub_1000123C4(128);
  v31 = 128;
  v3 = getsockname(a1, (sockaddr *)v2, &v31);
  if ((_DWORD)v3)
  {
    v4 = v3;
    v5 = static os_log_type_t.error.getter(v3);
    v6 = qword_1000886E0;
    if (!sub_10001593C(v5))
    {
LABEL_5:
      sub_100012398(v2);
      v13 = 0;
      v14 = 1;
      return v13 | (v14 << 16);
    }
    v7 = (float *)sub_1000123C4(8);
    v8 = sub_10003F860(v7, 1.5047e-36);
    v30 = v4;
    sub_1000124AC((uint64_t)v8, (uint64_t)&v31, v9, v10, v11);
    sub_10003F824((void *)&_mh_execute_header, v6, (os_log_type_t)0x80u, "Unable to resolve port for listening socket. getsockname returned %d", (uint8_t *)v7);
    v12 = (uint64_t)v7;
LABEL_4:
    sub_100012398(v12);
    goto LABEL_5;
  }
  v15 = *(unsigned __int8 *)(v2 + 1);
  if (v15 != 30 && v15 != 2)
  {
    v25 = static os_log_type_t.error.getter(v3);
    v26 = qword_1000886E0;
    if (!sub_10001593C(v25))
      goto LABEL_5;
    v28 = (uint8_t *)sub_1000123C4(5);
    *(_DWORD *)v28 = 16777472;
    LOBYTE(v30) = *(_BYTE *)(v2 + 1);
    sub_1000124AC((uint64_t)v28, (uint64_t)&v30 + 1, (uint64_t)(v28 + 4), (uint64_t)(v28 + 5), v29);
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)0x80u, "Unknown socket family %hhu", v28, 5u);
    v12 = (uint64_t)v28;
    goto LABEL_4;
  }
  v13 = bswap32(*(unsigned __int16 *)(v2 + 2)) >> 16;
  v17 = static os_log_type_t.default.getter(v3);
  v18 = qword_1000886E0;
  if (sub_10001593C(v17))
  {
    v19 = (float *)sub_1000123C4(6);
    v20 = sub_10003F860(v19, 9.4042e-38);
    LOWORD(v30) = v13;
    sub_1000124AC((uint64_t)v20, (uint64_t)&v30 + 2, v21, v22, v23);
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)0x80u, "Resolved listening port for network control channel service: %hu", (uint8_t *)v19, 6u);
    sub_100012398((uint64_t)v19);
  }
  sub_100012398(v2);
  v14 = 0;
  return v13 | (v14 << 16);
}

uint64_t sub_10003EE1C()
{
  uint64_t v0;

  sub_10003E108();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));

  sub_100010DFC((_QWORD *)(v0 + 88));
  swift_release();
  swift_release();
  sub_100010DFC((_QWORD *)(v0 + 144));

  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 208));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 224));
  return v0;
}

uint64_t sub_10003EEA4()
{
  uint64_t v0;

  sub_10003EE1C();
  return swift_deallocClassInstance(v0, 232, 7);
}

uint64_t type metadata accessor for NetworkControlChannelService()
{
  return objc_opt_self(_TtC20remotepairingdeviced28NetworkControlChannelService);
}

void sub_10003EEE4(NSObject *a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  char v43[24];
  uint64_t v44;
  uint64_t v45;
  char v46[24];
  uint64_t v47;
  _QWORD v48[5];

  v2 = a1;
  v3 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v2, v3))
  {
    sub_10000E49C();
    v4 = sub_1000123C4(18);
    *(_DWORD *)v4 = 67109376;
    LODWORD(v47) = *(_QWORD *)(v1 + 184) != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 4, v4 + 4);
    *(_WORD *)(v4 + 8) = 2048;
    sub_1000123DC(v1 + 48, (uint64_t)v43, 0);
    v5 = *(_QWORD *)(v1 + 48);
    swift_bridgeObjectRetain(v5);
    v7 = sub_100012A70(v6);
    swift_bridgeObjectRelease(v5);
    v47 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v4 + 10);
    sub_1000118D4();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "NetworkControlChannelService state: ble enabled = %{BOOL}d, connection count = %ld", (uint8_t *)v4, 0x12u);
    sub_100012398(v4);
  }
  sub_1000123DC(v1 + 48, (uint64_t)v46, 0);
  v8 = *(_QWORD *)(v1 + 48);
  if ((v8 & 0xC000000000000001) != 0)
  {
    if (v8 < 0)
      v9 = *(_QWORD *)(v1 + 48);
    else
      v9 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v10 = __CocoaSet.makeIterator()(v9);
    v11 = sub_1000135A4();
    sub_10000EC40(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    v13 = Set.Iterator.init(_cocoa:)(v10, v11, v12);
    v8 = v47;
    v42 = v48[0];
    v14 = v48[1];
    v15 = v48[2];
    v16 = v48[3];
  }
  else
  {
    v42 = v8 + 56;
    v14 = ~(-1 << *(_BYTE *)(v8 + 32));
    sub_1000139EC();
    v16 = v17 & v18;
    swift_bridgeObjectRetain(v8);
    v15 = 0;
  }
  v41 = (unint64_t)(v14 + 64) >> 6;
  if (v8 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v16)
    {
      v19 = (v16 - 1) & v16;
      v20 = __clz(__rbit64(v16)) | (v15 << 6);
      v21 = v15;
      goto LABEL_29;
    }
    v27 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v27 >= v41)
      goto LABEL_34;
    v28 = *(_QWORD *)(v42 + 8 * v27);
    v21 = v15 + 1;
    if (!v28)
    {
      v21 = v15 + 2;
      if (v15 + 2 >= v41)
        goto LABEL_34;
      v28 = *(_QWORD *)(v42 + 8 * v21);
      if (!v28)
      {
        v21 = v15 + 3;
        if (v15 + 3 >= v41)
          goto LABEL_34;
        v28 = *(_QWORD *)(v42 + 8 * v21);
        if (!v28)
        {
          v21 = v15 + 4;
          if (v15 + 4 >= v41)
            goto LABEL_34;
          v28 = *(_QWORD *)(v42 + 8 * v21);
          if (!v28)
          {
            v29 = v15 + 5;
            while (v29 < v41)
            {
              v28 = *(_QWORD *)(v42 + 8 * v29++);
              if (v28)
              {
                v21 = v29 - 1;
                goto LABEL_28;
              }
            }
LABEL_34:
            sub_100018CD4(v8);
            return;
          }
        }
      }
    }
LABEL_28:
    v19 = (v28 - 1) & v28;
    v20 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_29:
    v25 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20);
    v26 = sub_1000144D8();
    if (!v25)
      goto LABEL_34;
    while (1)
    {
      v30 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v2, v30))
      {
        swift_retain_n(v25, 2);
        v31 = sub_1000123C4(12);
        v32 = sub_1000123C4(32);
        v44 = v25;
        v45 = v32;
        *(_DWORD *)v31 = 136446210;
        v33 = v2;
        v34 = v14;
        v35 = sub_1000135A4();
        sub_1000144D8();
        v36 = String.init<A>(describing:)(&v44, v35);
        v38 = v37;
        sub_100010D40(v36, v37, &v45);
        *(_QWORD *)(v31 + 4) = v39;
        swift_release_n(v25, 2);
        v40 = v38;
        v14 = v34;
        v2 = v33;
        swift_bridgeObjectRelease(v40);
        sub_1000118DC((void *)&_mh_execute_header, v33, v30, "NetworkControlChannelService control channel connection: %{public}s", (uint8_t *)v31);
        swift_arrayDestroy(v32, 1);
        sub_100012398(v32);
        sub_100012398(v31);
      }
      v13 = sub_100015384();
      v15 = v21;
      v16 = v19;
      if ((v8 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v22 = __CocoaSet.Iterator.next()(v13);
      if (v22)
      {
        v23 = v22;
        v44 = v22;
        v24 = sub_1000135A4();
        swift_unknownObjectRetain(v23);
        swift_dynamicCast(&v45, &v44, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
        v25 = v45;
        v26 = swift_unknownObjectRelease(v23);
        v21 = v15;
        v19 = v16;
        if (v25)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

double sub_10003F33C()
{
  return sub_10003C160();
}

void sub_10003F35C()
{
  sub_10003C1E0();
}

void sub_10003F37C()
{
  sub_10003CC54();
}

void sub_10003F39C(NSObject *a1)
{
  sub_10003EEE4(a1);
}

uint64_t sub_10003F3BC()
{
  return 0;
}

uint64_t sub_10003F3C4(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

BOOL sub_10003F3CC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_10003F3F8(uint64_t result)
{
  _QWORD *v1;

  *v1 |= result;
  return result;
}

uint64_t sub_10003F408(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

uint64_t sub_10003F418()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003F43C()
{
  return sub_10001570C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10003F44C()
{
  return sub_10001570C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10003F45C()
{
  uint64_t v0;

  return sub_10003EAA4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10003F464(NSObject *a1)
{
  uint64_t v1;

  return sub_10003E7F0(a1, v1);
}

uint64_t sub_10003F46C()
{
  return sub_10001570C((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release);
}

void sub_10003F480(char a1)
{
  uint64_t v1;

  sub_10003E82C(a1, *(nw_connection_t *)(v1 + 16));
}

uint64_t sub_10003F488()
{
  uint64_t v0;

  sub_1000118EC();
  swift_release();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10003F4B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003F4C4()
{
  uint64_t v0;

  sub_1000118EC();
  return swift_deallocObject(v0, 32, 7);
}

void sub_10003F4E4()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(0);
  sub_100014510();
}

uint64_t sub_10003F504(uint64_t a1)
{
  uint64_t v1;

  return sub_10003D568(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10003F51C(void *a1)
{
  uint64_t v1;

  return sub_10003D5C0(a1, v1);
}

uint64_t sub_10003F524(void *a1)
{
  uint64_t v1;

  return sub_10003D930(a1, v1);
}

uint64_t sub_10003F52C(uint64_t a1, uint64_t a2, void (*a3)(char *__return_ptr, uint64_t *, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  char v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v9 = a1;
  v10 = a2;
  v11 = BYTE2(a2);
  v12 = BYTE3(a2);
  v13 = BYTE4(a2);
  v14 = BYTE5(a2);
  a3(&v8, &v9, (char *)&v9 + a5);
  if (!v5)
    v6 = v8;
  return v6 & 1;
}

void sub_10003F608(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1000150C0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_100014510();
}

uint64_t sub_10003F640(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "btAddressData");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10003F6A4()
{
  uint64_t v0;

  swift_release();
  sub_1000118EC();
  swift_release();
  return swift_deallocObject(v0, 48, 7);
}

void sub_10003F6D4(uint64_t a1)
{
  uint64_t v1;

  sub_10003C8F0(a1, v1);
}

uint64_t sub_10003F6DC(uint64_t a1)
{
  uint64_t v1;

  return sub_10003CBDC(a1, v1);
}

uint64_t sub_10003F6E4()
{
  return sub_10003F6FC((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_unknownObjectRelease, 36);
}

uint64_t sub_10003F6FC(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;

  a1(*(_QWORD *)(v3 + 16));
  a2(*(_QWORD *)(v3 + 24));
  return swift_deallocObject(v3, a3, 7);
}

uint64_t sub_10003F744()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003F768()
{
  uint64_t v0;

  return sub_10003CA78(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10003F770@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_10003C9BC(*(_QWORD *)(v1 + 16), *(_xpc_activity_s **)(v1 + 24), a1);
}

void sub_10003F824(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 8u);
}

void *sub_10003F82C()
{
  uint64_t v0;

  return _Block_copy((const void *)(v0 - 160));
}

unint64_t sub_10003F834()
{
  return 0xD000000000000028;
}

float *sub_10003F860(float *result, float a2)
{
  *result = a2;
  return result;
}

uint64_t sub_10003F870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 88, v3 - 84, a3);
}

uint64_t sub_10003F880()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10003F888()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100015430(v1, v0);
}

id sub_10003F894(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 20);
}

uint64_t sub_10003F8A0()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

void sub_10003F8AC(const char *a1)
{
  void *v1;
  NSObject *v2;

  xpc_set_event_stream_handler(a1, v2, v1);
}

uint64_t sub_10003F8B8()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

void sub_10003F8C0()
{
  type metadata accessor for DeviceKeyValueStore(0);
  static DeviceKeyValueStore.keyValueStoreContainingStandardKeys()();
  sub_100014510();
}

uint64_t sub_10003F8E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_1000410B8();
    return swift_release(v3);
  }
  return result;
}

void sub_10003F938()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  int *v10;
  _QWORD v11[6];

  v1 = v0;
  v2 = v0[6];
  ObjectType = swift_getObjectType(v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
  v4 = v0[10];
  v5 = v0[11];
  v6 = v0[7];
  v7 = swift_allocObject(&unk_10007C408, 24, 7);
  swift_weakInit(v7 + 16, v1);
  v11[4] = sub_100041924;
  v11[5] = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1000456F4;
  v11[3] = &unk_10007C420;
  v8 = _Block_copy(v11);
  swift_release();
  v9 = (const char *)(String.utf8CString.getter(v4, v5) + 32);
  v10 = (int *)((char *)v1 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService_darwinNotificationToken);
  sub_100012518((uint64_t)v10, (uint64_t)v11);
  notify_register_dispatch(v9, v10, v6, v8);
  swift_endAccess(v11);
  swift_release();
  _Block_release(v8);
}

uint64_t sub_10003FA58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_100040FDC();
    return swift_release();
  }
  return result;
}

void sub_10003FAAC(int a1@<W0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSString v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ObjectType;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t i;
  uint64_t v65;
  char v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  uint64_t *v90;
  unint64_t v91;
  int64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSString v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  char *v122;
  unint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  int64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  void *v151;
  char v152[8];
  char v153[8];
  char *v154;

  v139 = a2;
  v5 = type metadata accessor for RemotePairingError(0);
  sub_1000115F0();
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PeerDeviceInfo(0);
  v137 = *(_QWORD *)(v10 - 8);
  v138 = v10;
  __chkstk_darwin(v10, v11);
  sub_1000138DC();
  v133 = v12;
  v13 = type metadata accessor for AuxiliaryMetadataItem(0);
  v148 = *(_QWORD *)(v13 - 8);
  v149 = v13;
  __chkstk_darwin(v13, v14);
  sub_1000138DC();
  v146 = v15;
  sub_1000150C0(&qword_100086BB0);
  sub_1000115F0();
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  v23 = (uint64_t)&v119 - v22;
  sub_1000150C0(&qword_100086BA8);
  sub_1000115F0();
  __chkstk_darwin(v24, v25);
  sub_1000156C4();
  sub_1000139A4();
  __chkstk_darwin(v26, v27);
  sub_1000139A4();
  __chkstk_darwin(v28, v29);
  v31 = (char *)&v119 - v30;
  v134 = a1;
  if ((a1 & 1) != 0)
    v32 = OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys;
  else
    v32 = OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys;
  v33 = v2;
  v34 = (uint64_t)&v2[v32];
  swift_beginAccess(&v2[v32], v152, 0, 0);
  sub_100041428(v34, (uint64_t)v31);
  v35 = v138;
  if (sub_100015658((uint64_t)v31, 1, v138) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v137 + 32))(v139, v31, v35);
    return;
  }
  sub_10003F608((uint64_t)v31, &qword_100086BA8);
  v36 = String._bridgeToObjectiveC()();
  sub_100013B10((uint64_t)v36);
  sub_10000E530();
  if (!v31)
    goto LABEL_59;
  v126 = v3;
  v154 = v31;
  if ((sub_1000161B0(v37, v38, v39, (uint64_t)&type metadata for String) & 1) == 0)
    goto LABEL_59;
  v40 = *((_QWORD *)&v150 + 1);
  v125 = v150;
  v41 = String._bridgeToObjectiveC()();
  sub_100013B10((uint64_t)v41);
  sub_10000E530();
  v154 = v31;
  if ((sub_1000161B0(v42, v43, v44, (uint64_t)&type metadata for String) & 1) == 0)
  {
LABEL_58:
    swift_bridgeObjectRelease(v40);
LABEL_59:
    sub_100041470((unint64_t *)&unk_1000853D0, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    static Error<>.dataCorrupted.getter(v5, v98);
    sub_100041470((unint64_t *)&unk_1000859D0, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    swift_allocError(v5, v99, 0, 0);
    v100 = Error<>.init(_:_:)(v9, 0xD000000000000047, 0x800000010006D910, v5);
    swift_willThrow(v100);
    return;
  }
  v124 = v150;
  v45 = String._bridgeToObjectiveC()();
  sub_100013B10((uint64_t)v45);
  sub_10000E530();
  v154 = v31;
  if ((sub_1000161B0(v46, v47, v48, (uint64_t)&type metadata for String) & 1) == 0)
  {
    sub_100014560((uint64_t)v153);
    goto LABEL_58;
  }
  v120 = v40;
  v123 = *((_QWORD *)&v150 + 1);
  v119 = v150;
  sub_100040F8C();
  v50 = v49;
  v51 = objc_allocWithZone((Class)type metadata accessor for DeviceKeyValueStore(0));
  v143 = DeviceKeyValueStore.init(copyingValuesFrom:)(v50);
  v53 = *((_QWORD *)v33 + 5);
  v52 = *((_QWORD *)v33 + 6);
  v122 = v33;
  ObjectType = swift_getObjectType(v53);
  v121 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(ObjectType, v52);
  v56 = v55;
  v127 = v55 + 64;
  sub_100011648();
  v59 = v58 & v57;
  v128 = (unint64_t)(v60 + 63) >> 6;
  swift_bridgeObjectRetain(v61);
  v62 = 0;
  v63 = v139;
  v145 = v20;
  v130 = v56;
  if (!v59)
    goto LABEL_11;
LABEL_10:
  v135 = (v59 - 1) & v59;
  v136 = v62;
  for (i = __clz(__rbit64(v59)) | (v62 << 6); ; i = __clz(__rbit64(v68)) + (v69 << 6))
  {
    v72 = *(_QWORD *)(v56 + 56);
    v73 = (uint64_t *)(*(_QWORD *)(v56 + 48) + 16 * i);
    v74 = v73[1];
    v144 = *v73;
    v75 = *(_QWORD *)(v72 + 8 * i);
    v140 = v75 + 64;
    sub_100011648();
    v78 = v77 & v76;
    v141 = (unint64_t)(v79 + 63) >> 6;
    sub_100016250(v141 - 1);
    v142 = v75;
    swift_bridgeObjectRetain(v75);
    v147 = 0;
    if (v78)
    {
LABEL_31:
      v80 = __clz(__rbit64(v78));
      v78 &= v78 - 1;
      v81 = v80 | (v147 << 6);
      v82 = v145;
      goto LABEL_32;
    }
    while (1)
    {
      v89 = v147 + 1;
      v82 = v145;
      v90 = &qword_100086BB8;
      if (__OFADD__(v147, 1))
      {
        __break(1u);
        goto LABEL_64;
      }
      if (v89 < v141)
      {
        v91 = *(_QWORD *)(v140 + 8 * v89);
        if (v91)
          goto LABEL_36;
        v92 = v147 + 2;
        ++v147;
        if (v89 + 1 < v141)
        {
          v91 = *(_QWORD *)(v140 + 8 * v92);
          if (v91)
            goto LABEL_39;
          v147 = v89 + 1;
          if (v89 + 2 < v141)
          {
            v91 = *(_QWORD *)(v140 + 8 * (v89 + 2));
            if (v91)
            {
              v89 += 2;
              goto LABEL_36;
            }
            v92 = v89 + 3;
            v147 = v89 + 2;
            if (v89 + 3 < v141)
            {
              v91 = *(_QWORD *)(v140 + 8 * v92);
              if (!v91)
              {
                while (1)
                {
                  v89 = v92 + 1;
                  if (__OFADD__(v92, 1))
                    break;
                  if (v89 >= v141)
                  {
                    v147 = v129;
                    goto LABEL_50;
                  }
                  v91 = *(_QWORD *)(v140 + 8 * v89);
                  ++v92;
                  if (v91)
                    goto LABEL_36;
                }
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
                return;
              }
LABEL_39:
              v89 = v92;
LABEL_36:
              v78 = (v91 - 1) & v91;
              v81 = __clz(__rbit64(v91)) + (v89 << 6);
              v147 = v89;
LABEL_32:
              v83 = *(_QWORD *)(v142 + 56);
              v84 = (_QWORD *)(*(_QWORD *)(v142 + 48) + 16 * v81);
              v85 = v84[1];
              *(_QWORD *)v82 = *v84;
              *((_QWORD *)v82 + 1) = v85;
              v86 = v148;
              v87 = v83 + *(_QWORD *)(v148 + 72) * v81;
              v88 = sub_10004195C();
              (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(&v82[*(int *)(v88 + 48)], v87, v149);
              sub_100015664((uint64_t)v82, 0, 1, v88);
              swift_bridgeObjectRetain(v85);
              goto LABEL_51;
            }
          }
        }
      }
LABEL_50:
      v93 = sub_10004195C();
      sub_100015664((uint64_t)v82, 1, 1, v93);
      v78 = 0;
LABEL_51:
      sub_1000418C0((uint64_t)v82, v23, &qword_100086BB0);
      v53 = sub_10004195C();
      if (sub_100015658(v23, 1, v53) == 1)
        break;
      v63 = *(_QWORD *)v23;
      v94 = *(_QWORD *)(v23 + 8);
      v96 = v148;
      v95 = v149;
      v97 = v146;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 32))(v146, v23 + *(int *)(v53 + 48), v149);
      swift_bridgeObjectRetain(v74);
      sub_100040580(&v150);
      v53 = v143;
      dispatch thunk of DeviceKeyValueStore.setValue(_:_:_:sensitive:)(v144, v74, v63, v94, &v150, 1);
      swift_bridgeObjectRelease(v94);
      sub_100015524();
      sub_100010DFC(&v150);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v97, v95);
      if (v78)
        goto LABEL_31;
    }
    sub_100015524();
    swift_release();
    v63 = v139;
    v56 = v130;
    v62 = v136;
    v59 = v135;
    if (v135)
      goto LABEL_10;
LABEL_11:
    if (__OFADD__(v62, 1))
    {
      __break(1u);
      goto LABEL_75;
    }
    sub_10001651C();
    if (v66 == v67)
      goto LABEL_60;
    v68 = *(_QWORD *)(v127 + 8 * v65);
    v69 = v65;
    if (!v68)
    {
      sub_10004192C();
      if (v66 == v67)
        goto LABEL_60;
      sub_100015E10();
      if (!v68)
      {
        sub_10004192C();
        if (v66 == v67)
          goto LABEL_60;
        sub_100015E10();
        if (!v68)
          break;
      }
    }
LABEL_29:
    v135 = (v68 - 1) & v68;
    v136 = v69;
  }
  sub_10001651C();
  if (v66 != v67)
  {
    v68 = *(_QWORD *)(v127 + 8 * v70);
    if (!v68)
    {
      while (!__OFADD__(v70, 1))
      {
        sub_10004192C();
        if (v66 == v67)
          goto LABEL_60;
        sub_100015E10();
        v70 = v71 + 1;
        if (v68)
          goto LABEL_29;
      }
      goto LABEL_76;
    }
    v69 = v70;
    goto LABEL_29;
  }
LABEL_60:
  swift_release();
  v151 = &type metadata for Bool;
  LOBYTE(v150) = v121 & 1;
  dispatch thunk of DeviceKeyValueStore.setValue(_:_:_:sensitive:)(0, 0, 0xD00000000000001FLL, 0x800000010006D960, &v150, 0);
  sub_100015524();
  sub_100010DFC(&v150);
  v101 = String._bridgeToObjectiveC()();
  v53 = MGCopyAnswer(v101, 0);

  v82 = v122;
  LOBYTE(v23) = v134;
  v90 = (uint64_t *)*((_QWORD *)&v124 + 1);
  if (v53)
  {
    v103 = objc_opt_self(NSNumber);
    v104 = (void *)swift_dynamicCastObjCClass(v53, v103);
    if (v104)
    {
      v105 = objc_msgSend(v104, "unsignedLongLongValue");
      swift_unknownObjectRelease(v53);
      v106 = 0;
      goto LABEL_66;
    }
LABEL_64:
    v102 = swift_unknownObjectRelease(v53);
  }
  v107 = static os_log_type_t.info.getter(v102);
  os_log(_:dso:log:_:_:)(v107, &_mh_execute_header, *((_QWORD *)v82 + 2), "Unable to fetch device ECID", 27, 2, &_swiftEmptyArrayStorage);
  v105 = 0;
  v106 = 1;
LABEL_66:
  if ((v23 & 1) == 0)
  {
    sub_100014560((uint64_t)v152);
    v105 = 0;
    v119 = 0;
    v123 = 0xE000000000000000;
    v106 = 1;
  }
  v108 = v126;
  v109 = (void *)v143;
  v110 = dispatch thunk of DeviceKeyValueStore.data(includeSensitive:)(v23 & 1);
  if (v108)
  {
    sub_100014560((uint64_t)&v150 + 8);
    swift_bridgeObjectRelease(v90);
    sub_100014560((uint64_t)v152);

  }
  else
  {
    v112 = v133;
    PeerDeviceInfo.init(name:model:udid:ecid:deviceKVSData:deviceKVSIncludesSensitiveInfo:)(v125, v120, v124, v90, v119, v123, v105, v106, v110, v111, v23 & 1);

    v113 = v131;
    v114 = v112;
    v115 = v138;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 16))(v131, v114, v138);
    sub_100015664(v113, 0, 1, v115);
    v116 = v132;
    sub_1000418C0(v113, v132, &qword_100086BA8);
    if ((v23 & 1) != 0)
      v117 = OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys;
    else
      v117 = OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys;
    v118 = (uint64_t)&v82[v117];
    swift_beginAccess(&v82[v117], &v150, 33, 0);
    sub_1000413E0(v116, v118);
    swift_endAccess(&v150);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 32))(v63, v133, v115);
  }
}

_OWORD *sub_100040580@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(void);
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  _OWORD *result;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(void);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t);
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  int64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __n128 v112;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v114;
  char v115;
  uint64_t v116;
  _BOOL8 v117;
  Swift::Int v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  char v122;
  _QWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t *v134;
  uint64_t v135;
  char *v136;
  uint64_t *v137;
  uint64_t v138;
  void (*v139)(void);
  uint64_t v140;
  _OWORD *v141;
  uint64_t *v142;
  _QWORD *v143;
  _OWORD v144[2];
  _OWORD v145[2];
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;

  v141 = a1;
  v138 = sub_1000150C0(&qword_100086BB8);
  sub_1000115F0();
  __chkstk_darwin(v1, v2);
  sub_1000156C4();
  v137 = v3;
  v6 = __chkstk_darwin(v4, v5);
  v142 = (uint64_t *)((char *)&v128 - v7);
  __chkstk_darwin(v6, v8);
  v136 = (char *)&v128 - v9;
  v10 = type metadata accessor for AuxiliaryMetadataItem(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  sub_1000156C4();
  sub_1000139A4();
  __chkstk_darwin(v13, v14);
  sub_1000139A4();
  v17 = __chkstk_darwin(v15, v16);
  v19 = (char *)&v128 - v18;
  v21 = __chkstk_darwin(v17, v20);
  v23 = (char *)&v128 - v22;
  v25 = __chkstk_darwin(v21, v24);
  v27 = (char *)&v128 - v26;
  v29 = __chkstk_darwin(v25, v28);
  v31 = (char *)&v128 - v30;
  v33 = __chkstk_darwin(v29, v32);
  v35 = (char *)&v128 - v34;
  v37 = __chkstk_darwin(v33, v36);
  v39 = (char *)&v128 - v38;
  __chkstk_darwin(v37, v40);
  v42 = (char *)&v128 - v41;
  v43 = *(void (**)(void))(v11 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v43)((char *)&v128 - v41, v140, v10);
  v44 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v42, v10);
  if (v44 == enum case for AuxiliaryMetadataItem.BOOLean(_:))
  {
    ((void (*)(char *, char *, uint64_t))v43)(v39, v42, v10);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v11 + 96))(v39, v10);
    LOBYTE(v144[0]) = *(_BYTE *)(*(_QWORD *)v39 + 16);
    if (sub_100013918(v45, v46, (uint64_t)&type metadata for Bool, (uint64_t)&type metadata for Any + 8))
      goto LABEL_6;
    goto LABEL_71;
  }
  v139 = v43;
  v133 = v42;
  v135 = v11;
  v140 = v10;
  if (v44 == enum case for AuxiliaryMetadataItem.int(_:))
  {
    sub_1000162E8();
    sub_10001362C(v47, v48);
    sub_100015B44();
    v50 = sub_1000165FC((uint64_t)v35, v49);
    *(_QWORD *)&v144[0] = *(_QWORD *)(*(_QWORD *)v35 + 16);
    if (sub_100013918(v50, v51, (uint64_t)&type metadata for Int64, (uint64_t)v43 + 8))
    {
LABEL_6:
      sub_10001240C();
LABEL_7:
      sub_10001195C();
LABEL_8:
      sub_1000165FC((uint64_t)v42, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
      return sub_100015FB0(&v146, v141);
    }
    goto LABEL_71;
  }
  if (v44 == enum case for AuxiliaryMetadataItem.float(_:))
  {
    sub_10001362C((uint64_t)v31, (uint64_t)v133);
    sub_100015B44();
    v54 = sub_1000165FC((uint64_t)v31, v53);
    *(_QWORD *)&v144[0] = *(_QWORD *)(*(_QWORD *)v31 + 16);
    if (sub_100013918(v54, v55, (uint64_t)&type metadata for Double, (uint64_t)v43 + 8))
    {
      sub_10001240C();
      sub_10001195C();
      v42 = v133;
      goto LABEL_8;
    }
LABEL_71:
    sub_10001195C();
    goto LABEL_72;
  }
  v56 = v139;
  if (v44 == enum case for AuxiliaryMetadataItem.string(_:))
  {
    sub_1000162E8();
    v57 = v140;
    v59 = v58;
    v56();
    sub_100015B44();
    v60(v27, v57);
    v61 = *(_QWORD *)(*(_QWORD *)v27 + 24);
    *(_QWORD *)&v144[0] = *(_QWORD *)(*(_QWORD *)v27 + 16);
    *((_QWORD *)&v144[0] + 1) = v61;
    swift_bridgeObjectRetain(v61);
    if (sub_100013918(v62, v63, (uint64_t)&type metadata for String, v59 + 8))
    {
      sub_10001240C();
      v64 = *((_QWORD *)&v144[0] + 1);
      sub_10001195C();
      swift_bridgeObjectRelease(v64);
      goto LABEL_8;
    }
    goto LABEL_69;
  }
  if (v44 == enum case for AuxiliaryMetadataItem.data(_:))
  {
    sub_1000162E8();
    v66 = v65;
    v56();
    sub_100015B44();
    sub_1000165FC((uint64_t)v23, v67);
    v68 = *(_QWORD *)(*(_QWORD *)v23 + 24);
    *(_QWORD *)&v144[0] = *(_QWORD *)(*(_QWORD *)v23 + 16);
    *((_QWORD *)&v144[0] + 1) = v68;
    v69 = sub_100015614(*(uint64_t *)&v144[0], v68);
    if (sub_100013918(v69, v70, (uint64_t)&type metadata for Data, v66 + 8))
    {
      sub_10001240C();
      sub_100015430(*(uint64_t *)&v144[0], *((unint64_t *)&v144[0] + 1));
      goto LABEL_7;
    }
    sub_100015430(*(uint64_t *)&v144[0], *((unint64_t *)&v144[0] + 1));
    goto LABEL_71;
  }
  v71 = v140;
  v72 = v141;
  if (v44 != enum case for AuxiliaryMetadataItem.array(_:))
  {
    if (v44 != enum case for AuxiliaryMetadataItem.dictionary(_:))
    {
LABEL_72:
      result = (_OWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "remotepairingdeviced/MetadataService.swift", 42, 2, 158, 0);
      __break(1u);
      return result;
    }
    v83 = v134;
    sub_10004193C((uint64_t)v134, (uint64_t)v133);
    v84 = v135;
    sub_100033A64((uint64_t)v83, *(uint64_t (**)(uint64_t, uint64_t))(v135 + 96));
    v128 = *v83;
    v85 = *(_QWORD *)(v128 + 16);
    v86 = (_QWORD *)Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v72[3] = sub_1000150C0(&qword_1000855A8);
    sub_100041888(v85, &v146);
    v129 = *((_QWORD *)&v146 + 1);
    v131 = v146;
    v132 = v148;
    v87 = v149;
    sub_100016250((unint64_t)(v147 + 64) >> 6);
    v88 = &qword_100086BB8;
    if (!v87)
      goto LABEL_30;
LABEL_29:
    v134 = (uint64_t *)((v87 - 1) & v87);
    v89 = __clz(__rbit64(v87)) | (v132 << 6);
    while (1)
    {
      v98 = (uint64_t *)(*(_QWORD *)(v131 + 48) + 16 * v89);
      v99 = *v98;
      v100 = v98[1];
      v101 = *(_QWORD *)(v131 + 56) + *(_QWORD *)(v84 + 72) * v89;
      v102 = v138;
      v103 = v136;
      sub_10004193C((uint64_t)&v136[*(int *)(v138 + 48)], v101);
      *v103 = v99;
      v103[1] = v100;
      v104 = (uint64_t)v103;
      v105 = v142;
      v106 = v88;
      sub_1000418C0(v104, (uint64_t)v142, v88);
      v107 = *(int *)(v102 + 48);
      v108 = v137;
      v109 = (uint64_t)v137 + v107;
      v110 = *v105;
      v111 = v105[1];
      *v137 = *v105;
      v108[1] = v111;
      sub_10004193C((uint64_t)v108 + v107, (uint64_t)v105 + v107);
      swift_bridgeObjectRetain(v100);
      v112 = swift_bridgeObjectRetain(v111);
      sub_100040580(v145, v112);
      sub_100015FB0(v145, v144);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v86);
      v143 = v86;
      v114 = sub_100015264(v110, v111);
      v116 = v86[2];
      v117 = (v115 & 1) == 0;
      v118 = v116 + v117;
      if (__OFADD__(v116, v117))
        break;
      v119 = v114;
      v120 = v115;
      sub_1000150C0((uint64_t *)&unk_100087710);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v118))
      {
        v121 = sub_100015264(v110, v111);
        if ((v120 & 1) != (v122 & 1))
          goto LABEL_68;
        v119 = v121;
      }
      v86 = v143;
      if ((v120 & 1) != 0)
      {
        v123 = (_QWORD *)(v143[7] + 32 * v119);
        sub_100010DFC(v123);
        sub_100015FB0(v144, v123);
      }
      else
      {
        v143[(v119 >> 6) + 8] |= 1 << v119;
        v124 = (uint64_t *)(v86[6] + 16 * v119);
        *v124 = v110;
        v124[1] = v111;
        sub_100015FB0(v144, (_OWORD *)(v86[7] + 32 * v119));
        v125 = v86[2];
        v95 = __OFADD__(v125, 1);
        v126 = v125 + 1;
        if (v95)
          goto LABEL_66;
        v86[2] = v126;
        swift_bridgeObjectRetain(v111);
      }
      swift_bridgeObjectRelease(v111);
      swift_bridgeObjectRelease(0x8000000000000000);
      v84 = v135;
      v71 = v140;
      sub_100033A64(v109, *(uint64_t (**)(uint64_t, uint64_t))(v135 + 8));
      v88 = v106;
      sub_10003F608((uint64_t)v142, v106);
      v87 = (unint64_t)v134;
      if (v134)
        goto LABEL_29;
LABEL_30:
      v90 = v132 + 1;
      if (__OFADD__(v132, 1))
        goto LABEL_67;
      v91 = v141;
      if (v90 >= v130)
        goto LABEL_63;
      v92 = *(_QWORD *)(v129 + 8 * v90);
      v93 = v132 + 1;
      if (!v92)
      {
        sub_1000153D0();
        if (v94 == v95)
          goto LABEL_63;
        sub_100013A68();
        if (!v92)
        {
          sub_1000153D0();
          if (v94 == v95)
            goto LABEL_63;
          sub_100013A68();
          if (!v92)
          {
            sub_1000153D0();
            if (v94 == v95)
              goto LABEL_63;
            sub_100013A68();
            if (!v92)
            {
              sub_1000153D0();
              if (v94 == v95)
                goto LABEL_63;
              sub_100013A68();
              if (!v92)
              {
                sub_10001651C();
                if (v94 == v95)
                  goto LABEL_63;
                v92 = *(_QWORD *)(v129 + 8 * v93);
                if (!v92)
                {
                  while (1)
                  {
                    sub_10001651C();
                    if (v94 == v95)
                      break;
                    v92 = *(_QWORD *)(v129 + 8 * v96);
                    v97 = v96 + 1;
                    if (v92)
                    {
                      v93 = v97 - 1;
                      goto LABEL_52;
                    }
                  }
LABEL_63:
                  swift_release();
                  swift_release();
                  *v91 = v86;
                  return (_OWORD *)(*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v133, v71);
                }
              }
            }
          }
        }
      }
LABEL_52:
      v134 = (uint64_t *)((v92 - 1) & v92);
      v89 = __clz(__rbit64(v92)) + (v93 << 6);
      v132 = v93;
    }
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
LABEL_69:
    v127 = *((_QWORD *)&v144[0] + 1);
    sub_10001195C();
    swift_bridgeObjectRelease(v127);
    goto LABEL_72;
  }
  sub_10004193C((uint64_t)v19, (uint64_t)v133);
  sub_100015B44();
  sub_100033A64((uint64_t)v19, v73);
  v74 = *(_QWORD *)(*(_QWORD *)v19 + 16);
  v75 = *(_QWORD *)(v74 + 16);
  v76 = &_swiftEmptyArrayStorage;
  if (v75)
  {
    *(_QWORD *)&v145[0] = &_swiftEmptyArrayStorage;
    sub_1000416A8(0, v75, 0);
    v77 = v74 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v78 = *(_QWORD *)(v11 + 72);
    v79 = v132;
    do
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))v56)(v79, v77, v140);
      sub_100040580(&v146, v80);
      sub_1000165FC(v79, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
      v76 = *(_QWORD **)&v145[0];
      if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v145[0]) & 1) == 0)
      {
        sub_1000416A8(0, v76[2] + 1, 1);
        v76 = *(_QWORD **)&v145[0];
      }
      v82 = v76[2];
      v81 = v76[3];
      if (v82 >= v81 >> 1)
      {
        sub_1000416A8((char *)(v81 > 1), v82 + 1, 1);
        v76 = *(_QWORD **)&v145[0];
      }
      v76[2] = v82 + 1;
      sub_100015FB0(&v146, &v76[4 * v82 + 4]);
      v77 += v78;
      --v75;
      v56 = v139;
    }
    while (v75);
    v72 = v141;
  }
  v72[3] = sub_1000150C0(&qword_1000855B8);
  sub_10001195C();
  *v72 = v76;
  return (_OWORD *)(*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v133, v140);
}

void sub_100040F8C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;

  v1 = *(void **)(v0 + 96);
  if (!v1)
  {
    v2 = v0;
    v3 = (void *)(*(uint64_t (**)(void))(v0 + 64))();
    v4 = *(void **)(v0 + 96);
    *(_QWORD *)(v2 + 96) = v3;
    v5 = v3;

    v1 = 0;
  }
  v6 = v1;
  sub_100014510();
}

void sub_100040FDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  _BYTE v7[24];

  sub_1000150C0(&qword_100086BA8);
  sub_1000115F0();
  __chkstk_darwin(v1, v2);
  v3 = sub_100015D78();
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v0[2], "Received darwin notification for device user assigned name change. Invalidating previously computed metadata", 108, 2, &_swiftEmptyArrayStorage);
  v4 = (void *)v0[12];
  v0[12] = 0;

  type metadata accessor for PeerDeviceInfo(0);
  sub_100015538();
  sub_100012518((uint64_t)v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys, (uint64_t)v7);
  sub_100041944();
  sub_1000154C0();
  sub_100015538();
  sub_100012518((uint64_t)v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys, (uint64_t)v7);
  sub_1000158E0();
  sub_1000154C0();
  v5 = (void (*)(uint64_t))v0[3];
  if (v5)
  {
    v6 = sub_100015340();
    v5(v6);
    sub_100041950();
  }
  sub_100013AE8();
}

void sub_1000410B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  _BYTE v6[24];

  sub_1000150C0(&qword_100086BA8);
  sub_1000115F0();
  __chkstk_darwin(v1, v2);
  v3 = sub_100015D78();
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, *(_QWORD *)(v0 + 16), "Auxiliary device metadata did change. Invalidating previously computed metadata", 79, 2);
  type metadata accessor for PeerDeviceInfo(0);
  sub_100015538();
  sub_100012518(v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys, (uint64_t)v6);
  sub_100041944();
  sub_1000154C0();
  sub_100015538();
  sub_100012518(v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys, (uint64_t)v6);
  sub_1000158E0();
  sub_1000154C0();
  v4 = *(void (**)(uint64_t))(v0 + 24);
  if (v4)
  {
    v5 = sub_100015340();
    v4(v5);
    sub_100041950();
  }
  sub_100013AE8();
}

uint64_t sub_100041188()
{
  uint64_t v0;
  int *v1;
  _BYTE v3[24];

  v1 = (int *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService_darwinNotificationToken);
  swift_beginAccess(v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService_darwinNotificationToken, v3, 1, 0);
  if (*v1 != -1)
  {
    notify_cancel(*v1);
    *v1 = -1;
  }

  sub_1000392D4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));

  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));

  sub_10003F608(v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys, &qword_100086BA8);
  sub_10003F608(v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys, &qword_100086BA8);
  return v0;
}

uint64_t sub_10004124C()
{
  uint64_t v0;

  sub_100041188();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100041270()
{
  return type metadata accessor for MetadataService(0);
}

uint64_t type metadata accessor for MetadataService(uint64_t a1)
{
  uint64_t result;

  result = qword_100086A30;
  if (!qword_100086A30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetadataService);
  return result;
}

void sub_1000412B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_100066728;
  v4[2] = &unk_100066740;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = &unk_100066740;
  v4[6] = &unk_100066758;
  sub_10004136C(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = (char *)&value witness table for Builtin.Int32 + 64;
    swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
  }
}

void sub_10004136C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100086A40)
  {
    v2 = type metadata accessor for PeerDeviceInfo(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100086A40);
  }
}

void sub_1000413C0(int a1@<W0>, uint64_t a2@<X8>)
{
  sub_10003FAAC(a1, a2);
}

uint64_t sub_1000413E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0(&qword_100086BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100041428(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0(&qword_100086BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100041470(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for RemotePairingError(255);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }
  sub_100014510();
}

uint64_t sub_1000414AC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;

  if (a2 < 0)
  {
    sub_1000119C4();
    v7 = "UnsafeMutablePointer.initialize with negative count";
    v8 = 51;
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
    {
      sub_1000150C0(&qword_100086BD0);
      return swift_arrayInitWithCopy(a3, a1);
    }
    sub_1000119C4();
    v7 = "UnsafeMutablePointer.initialize overlapping range";
    v8 = 49;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v7, v8, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_100041580(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  const char *v5;
  uint64_t v6;

  if (a2 < 0)
  {
    v5 = "UnsafeMutablePointer.initialize with negative count";
    v6 = 51;
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
      return swift_arrayInitWithCopy(a3, a1);
    v5 = "UnsafeMutablePointer.initialize overlapping range";
    v6 = 49;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v5, v6, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

_QWORD *sub_100041650(_QWORD *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  _QWORD *result;

  result = sub_1000416C4(a1, a2, a3, *v3, &qword_100086BC8, (void (*)(unint64_t, uint64_t, unint64_t))sub_100049FD4);
  *v3 = (uint64_t)result;
  return result;
}

_QWORD *sub_10004167C(_QWORD *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  _QWORD *result;

  result = sub_1000416C4(a1, a2, a3, *v3, &qword_100086BD8, (void (*)(unint64_t, uint64_t, unint64_t))sub_100049FD4);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_1000416A8(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_1000417A8(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

_QWORD *sub_1000416C4(_QWORD *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(unint64_t, uint64_t, unint64_t))
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_1000150C0(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 16);
  }
  else
  {
    v14 = &_swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = a4 + 32;
  if ((v8 & 1) != 0)
  {
    a6(v17, v11, v16);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000414AC(v17, v11, v16);
  }
  sub_10001195C();
  return v14;
}

char *sub_1000417A8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000150C0(&qword_100086BC0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 32);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100049F7C(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100041580((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release();
  return v11;
}

uint64_t sub_100041888@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

void sub_1000418C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000150C0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_100014510();
}

uint64_t sub_100041900()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100041924(uint64_t a1)
{
  uint64_t v1;

  return sub_10003FA58(a1, v1);
}

uint64_t sub_10004193C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100041944()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000413E0(v0, v1);
}

uint64_t sub_100041950()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000392D4(v0, v1);
}

uint64_t sub_10004195C()
{
  uint64_t *v0;

  return sub_1000150C0(v0);
}

void sub_100041964(uint64_t a1, uint64_t a2)
{
  _OWORD v3[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100015FB0((_OWORD *)a1, v3);
    sub_100058F94((uint64_t)v3, a2);
    sub_100024B18(a2);
  }
  else
  {
    sub_10003F608(a1, &qword_100085588);
    sub_100058778(v3, a2);
    sub_100024B18(a2);
    sub_10003F608((uint64_t)v3, &qword_100085588);
  }
  sub_100014568();
}

void sub_1000419DC(uint64_t a1, unsigned int a2)
{
  _QWORD *v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100015FB0((_OWORD *)a1, v12);
    sub_1000590B8((uint64_t)v12, a2);
  }
  else
  {
    sub_10003F608(a1, &qword_100085588);
    v4 = sub_100055D6C(a2);
    if ((v5 & 1) != 0)
    {
      v6 = v4;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v11 = *v2;
      v8 = *v2;
      *v2 = 0x8000000000000000;
      v9 = *(_QWORD *)(v8 + 24);
      sub_1000150C0((uint64_t *)&unk_100086E78);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
      sub_100015FB0((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v6), v12);
      _NativeDictionary._delete(at:)(v6, v11, &type metadata for Int32);
      v10 = *v2;
      *v2 = v11;
      swift_bridgeObjectRelease(v10);
    }
    else
    {
      memset(v12, 0, sizeof(v12));
    }
    sub_10003F608((uint64_t)v12, &qword_100085588);
  }
}

void sub_100041AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v6 = sub_1000150C0(&qword_100086E40);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for XPCEventPublisher.Token(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v15 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100015658(a1, 1, v10) == 1)
  {
    sub_10003F608(a1, &qword_100086E40);
    sub_100058C54();
    swift_bridgeObjectRelease(a3);
    sub_10003F608((uint64_t)v9, &qword_100086E40);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v14, a1, v10);
    sub_10005914C(v14, a2, a3);
    swift_bridgeObjectRelease(a3);
  }
}

void sub_100041C2C(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a1 + 16) && (v4 = sub_100055C40(), (v5 & 1) != 0))
  {
    sub_100016604(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)a2);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
    sub_100014510();
  }
}

void sub_100041C74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_100055C6C();
    if ((v4 & 1) != 0)
      swift_retain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v3));
  }
  sub_100014510();
}

uint64_t sub_100041CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = sub_100015264(a1, a2), (v5 & 1) != 0))
    return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v4));
  else
    return 0;
}

uint64_t sub_100041CFC()
{
  uint64_t v0;

  v0 = sub_1000150C0(&qword_100086E60);
  Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, v0, &protocol witness table for String);
  return 1;
}

uint64_t sub_100041D40()
{
  uint64_t v0;

  sub_1000392D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for StubAuxiliaryMetadataService()
{
  return objc_opt_self(_TtC20remotepairingdeviced28StubAuxiliaryMetadataService);
}

uint64_t sub_100041D84()
{
  sub_100041CFC();
  return 1;
}

BOOL sub_100041D9C()
{
  uint64_t v0;
  uint64_t v1;
  _BOOL8 v2;
  _BYTE v4[24];
  _BYTE v5[24];
  _BYTE v6[24];

  if (*(_BYTE *)(v0 + 72) == 1)
  {
    sub_1000123DC(v0 + 96, (uint64_t)v5, 0);
    v1 = *(_QWORD *)(*(_QWORD *)(v0 + 96) + 16);
    sub_1000123DC(v0 + 80, (uint64_t)v4, 0);
    v2 = v1 == *(_QWORD *)(*(_QWORD *)(v0 + 80) + 16);
  }
  else
  {
    v2 = 0;
  }
  sub_1000123DC(v0 + 96, (uint64_t)v6, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
  return v2;
}

uint64_t sub_100041E2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, id, uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  void *v42;

  v5 = v4;
  sub_1000448E8();
  *(_QWORD *)(v4 + 16) = OS_os_log.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100069CD0, 0x617461646174656DLL, 0xE800000000000000);
  v10 = sub_1000139B4();
  sub_10000EC40(&qword_1000876E0, (uint64_t (*)(uint64_t))&type metadata accessor for XPCEventPublisher.Token, (uint64_t)&protocol conformance descriptor for XPCEventPublisher.Token);
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v10, &type metadata for String, v11);
  *(_QWORD *)(v5 + 88) = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, v10, &protocol witness table for String);
  v12 = sub_1000150C0(&qword_100086E60);
  *(_QWORD *)(v5 + 96) = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, v12, &protocol witness table for String);
  v13 = static AuxiliaryMetadataProvider.XPCKeys.xpcEventStreamName.getter();
  v15 = v14;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(a3 + 8);
  v17 = a1;
  v18 = v16(v13, v15, v17, a2, a3);
  if (v18)
  {
    v19 = v18;
    *(_QWORD *)(v5 + 32) = v18;
    *(_QWORD *)(v5 + 40) = a3;
    *(_QWORD *)(v5 + 24) = v17;
    v42 = v17;
    if (a4)
    {
      v20 = v17;
      swift_unknownObjectRetain(v19);
      v21 = a4;
    }
    else
    {
      type metadata accessor for RemotePairingDeviceXPCServer();
      v22 = v17;
      v23 = swift_unknownObjectRetain(v19);
      v24 = static MachServiceNames.auxiliaryMetadata.getter(v23);
      v21 = sub_10002DB5C(v24, v25, v22);
    }
    *(_QWORD *)(v5 + 48) = v21;
    v26 = sub_100015378((uint64_t)&unk_10007C500);
    sub_100015700(v26);
    swift_retain(a4);
    swift_retain(v26);
    sub_10004495C((uint64_t)sub_100044924, v26);
    sub_100044974();
    v27 = sub_100015378((uint64_t)&unk_10007C500);
    sub_100015700(v27);
    swift_retain(v27);
    sub_10004495C((uint64_t)sub_10004492C, v27);
    sub_100044974();
    v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16);
    v29 = sub_100015378((uint64_t)&unk_10007C500);
    sub_100015700(v29);
    v30 = type metadata accessor for AuxiliaryMetadataUpdate(0);
    v31 = type metadata accessor for EmptyResponse(0);
    v41 = a4;
    sub_10000EC40(&qword_100086E68, (uint64_t (*)(uint64_t))&type metadata accessor for AuxiliaryMetadataUpdate, (uint64_t)&protocol conformance descriptor for AuxiliaryMetadataUpdate);
    v33 = v32;
    sub_10000EC40(&qword_100086E70, (uint64_t (*)(uint64_t))&type metadata accessor for AuxiliaryMetadataUpdate, (uint64_t)&protocol conformance descriptor for AuxiliaryMetadataUpdate);
    v35 = v34;
    sub_10000EC40(&qword_100085A30, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse, (uint64_t)&protocol conformance descriptor for EmptyResponse);
    v37 = v36;
    sub_10000EC40(&qword_100085A38, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse, (uint64_t)&protocol conformance descriptor for EmptyResponse);
    v39 = v38;
    sub_10000E49C();
    dispatch thunk of CodableDispatcher.register<A, B>(handler:)(sub_100044934, v29, v30, v31, v33, v35, v37, v39);
    swift_unknownObjectRelease(v19);
    swift_release(v28);
    swift_release(v29);

    swift_release(v41);
    return v5;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x800000010006DCC0, "remotepairingdeviced/AuxiliaryMetadataService.swift", 51, 2, 81, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000421B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_1000441BC(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100042214(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_100042EA4(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100042270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (!Strong)
    return EmptyResponse.init()();
  v7 = Strong;
  sub_1000150C0(&qword_1000850E8);
  sub_100042344(a1);
  result = swift_release(v7);
  if (!v3)
    return EmptyResponse.init()();
  return result;
}

void sub_100042318()
{
  uint64_t v0;

  v0 = dispatch thunk of XPCEventPublisher.activate()();
  dispatch thunk of XPCConnection.activate()(v0);
  sub_100014510();
}

uint64_t sub_100042344(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  os_log_type_t v35;
  NSObject *v36;
  uint64_t v37;
  void (*v38)(_QWORD, _QWORD, _QWORD);
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  os_log_type_t v70;
  NSObject *v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  void (*v73)(_QWORD, _QWORD);
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(_QWORD, _QWORD);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t result;
  os_log_t v91;
  os_log_t v92;
  uint64_t v93;
  uint64_t v94;
  Swift::String v95;
  Swift::String v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  os_log_t v101;
  uint64_t v102;
  unint64_t v103;
  os_log_t v104;
  os_log_type_t v105;
  NSObject *v106;
  uint64_t v107;
  void (*v108)(_QWORD, _QWORD, _QWORD);
  uint64_t v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  os_log_t v118;
  Swift::String v119;
  void *object;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  os_log_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  os_log_type_t v128;
  NSObject *v129;
  void (*v130)(_QWORD, _QWORD, _QWORD);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  os_log_t v145;
  uint64_t v146;
  void (*v147)(_QWORD, _QWORD);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(_QWORD);
  uint64_t v154;
  uint64_t v155;
  void (*v156)(_QWORD, _QWORD);
  void (*v157)(_QWORD, _QWORD);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  os_log_t v162;
  os_log_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  os_log_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _QWORD v173[4];
  _QWORD v174[4];
  char v175;
  uint64_t v176;

  v166 = a1;
  v163 = (os_log_t)type metadata accessor for RemotePairingError(0);
  sub_1000123E4();
  __chkstk_darwin(v2, v3);
  sub_100011928();
  v162 = (os_log_t)(v5 - v4);
  v165 = type metadata accessor for AuxiliaryMetadataUpdate(0);
  v6 = *(_QWORD *)(v165 - 8);
  sub_1000123E4();
  __chkstk_darwin(v7, v8);
  sub_100013A1C();
  v11 = v9 - v10;
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v157 - v15;
  __chkstk_darwin(v14, v17);
  sub_1000139A4();
  __chkstk_darwin(v18, v19);
  sub_1000139A4();
  __chkstk_darwin(v20, v21);
  sub_1000139A4();
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v157 - v24;
  v26 = type metadata accessor for XPCDictionary(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v28);
  sub_100011928();
  v31 = v30 - v29;
  XPCDictionary.auditToken.getter(v173);
  sub_1000418C0((uint64_t)v173, (uint64_t)v174, &qword_100086E50);
  v159 = v1;
  if ((v175 & 1) != 0)
  {
    v161 = -1;
  }
  else
  {
    v32 = audit_token_t.processIdentifier.getter(v174[0], v174[1], v174[2], v174[3]);
    v161 = v32;
  }
  XPCDictionary.entitlements.getter(v32);
  v33 = XPCDictionary.subscript.getter(0xD00000000000002BLL, 0x800000010006DB90);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v31, v26);
  if ((v33 & 1) == 0)
  {
    v35 = static os_log_type_t.error.getter(v34);
    v36 = *(NSObject **)(v164 + 16);
    v37 = v6;
    v38 = *(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 16);
    v39 = v165;
    v38(v11, v166, v165);
    if (os_log_type_enabled(v36, v35))
    {
      v40 = (_DWORD *)sub_1000123C4(18);
      v41 = sub_1000123C4(32);
      v171 = v41;
      *v40 = 136315394;
      v42 = AuxiliaryMetadataUpdate.domain.getter(v41);
      sub_100010D40(v42, v43, &v171);
      v169 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, &v170, v40 + 1);
      sub_1000118F4();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v11, v165);
      sub_100013B1C();
      LODWORD(v169) = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, (char *)&v169 + 4, v46);
      sub_10004498C((void *)&_mh_execute_header, v36, v35, "Received metadata update for domain %s from unentitled client pid/%d. Rejecting");
      swift_arrayDestroy(v41, 1);
      sub_100012398(v41);
      sub_100012398((uint64_t)v40);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v11, v39);
    }
    v91 = v163;
    v92 = v162;
    sub_100015E20((unint64_t *)&unk_1000853D0, v47, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    static Error<>.permissionDenied.getter(v91, v93);
    v171 = 0;
    v172 = 0xE000000000000000;
    _StringGuts.grow(_:)(83);
    sub_10001594C(0xD000000000000031, (uint64_t)"Rejecting metadata update from client for domain ");
    v95._countAndFlagsBits = AuxiliaryMetadataUpdate.domain.getter(v94);
    String.append(_:)(v95);
    sub_1000135C8();
    sub_10001594C(0xD00000000000001ELL, (uint64_t)" without required entitlement ");
    v96._object = (void *)0x800000010006DB90;
    v96._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v96);
    v97 = v171;
    v98 = v172;
    sub_100015E20((unint64_t *)&unk_1000859D0, v99, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_1000119D8(v100, v100);
    v101 = v92;
    v102 = v97;
    v103 = v98;
    v104 = v91;
LABEL_20:
    v127 = Error<>.init(_:_:)(v101, v102, v103, v104);
    return swift_willThrow(v127);
  }
  v48 = (_QWORD *)v164;
  sub_1000123DC(v164 + 88, (uint64_t)&v171, 0);
  v49 = v48[11];
  swift_bridgeObjectRetain(v49);
  v50 = v166;
  v51 = sub_1000158EC();
  if (!*(_QWORD *)(v49 + 16))
  {
    sub_1000135C8();
    v55 = sub_10000E4C8();
    goto LABEL_16;
  }
  sub_100015264(v51, v52);
  v54 = v53;
  sub_1000135C8();
  v55 = sub_10000E4C8();
  if ((v54 & 1) == 0)
  {
LABEL_16:
    v105 = static os_log_type_t.error.getter(v55);
    v106 = v48[2];
    v107 = v6;
    v108 = *(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 16);
    v109 = v165;
    v108(v16, v50, v165);
    if (os_log_type_enabled(v106, v105))
    {
      v110 = (_DWORD *)sub_1000123C4(18);
      v111 = sub_1000123C4(32);
      v169 = v111;
      *v110 = 136315394;
      v112 = ((uint64_t (*)(void))AuxiliaryMetadataUpdate.domain.getter)();
      sub_100010D40(v112, v113, &v169);
      v167 = (os_log_t)v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, &v168, v110 + 1);
      sub_1000118F4();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v16, v165);
      sub_100013B1C();
      LODWORD(v167) = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, (char *)&v167 + 4, v116);
      sub_10004498C((void *)&_mh_execute_header, v106, v105, "Received metadata update for domain %s from client pid/%d without associated subscription. Rejecting");
      swift_arrayDestroy(v111, 1);
      sub_100012398(v111);
      v117 = sub_100012398((uint64_t)v110);
    }
    else
    {
      v117 = (*(uint64_t (**)(char *, uint64_t))(v107 + 8))(v16, v109);
    }
    v118 = v162;
    static RemotePairingError.invalidInput.getter(v117);
    v169 = 0;
    v170 = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    sub_10001594C(0xD000000000000025, (uint64_t)"Rejecting metadata update for domain ");
    v119._countAndFlagsBits = sub_1000158EC();
    object = v119._object;
    String.append(_:)(v119);
    swift_bridgeObjectRelease(object);
    sub_10001594C(0xD00000000000002DLL, (uint64_t)" without associated launch event subscription");
    v121 = v169;
    v122 = v170;
    sub_100015E20((unint64_t *)&unk_1000859D0, v123, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v124 = v163;
    sub_1000119D8(v125, v125);
    sub_100015E20((unint64_t *)&unk_1000853D0, v126, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v101 = v118;
    v102 = v121;
    v103 = v122;
    v104 = v124;
    goto LABEL_20;
  }
  v56 = sub_1000158EC();
  v58 = v57;
  v59 = (uint64_t)(v48 + 12);
  sub_1000123DC((uint64_t)(v48 + 12), (uint64_t)&v169, 0);
  v60 = v48[12];
  swift_bridgeObjectRetain(v60);
  v61 = sub_100041CB0(v56, v58, v60);
  sub_10000E4C8();
  v62 = v166;
  v63 = swift_bridgeObjectRelease(v60);
  v64 = AuxiliaryMetadataUpdate.metadata.getter(v63);
  v65 = v64;
  if (v61)
  {
    v66 = swift_bridgeObjectRetain(v61);
    v67 = sub_100044394(v66, v65);
    swift_bridgeObjectRelease_n(v61, 2);
    v68 = swift_bridgeObjectRelease(v65);
    v69 = v6;
    if ((v67 & 1) != 0)
    {
      v70 = static os_log_type_t.default.getter(v68);
      v71 = *(NSObject **)(v164 + 16);
      v72 = *(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 16);
      v73 = v157;
      v74 = v165;
      v72(v157, v62, v165);
      v75 = v158;
      v72(v158, v62, v74);
      v76 = v70;
      if (os_log_type_enabled(v71, v70))
      {
        v77 = sub_1000123C4(28);
        v78 = sub_1000123C4(64);
        v166 = v78;
        v167 = (os_log_t)v78;
        *(_DWORD *)v77 = 136315650;
        LODWORD(v164) = v76;
        v79 = AuxiliaryMetadataUpdate.domain.getter(v78);
        sub_100044980(v79, v80);
        v176 = v81;
        v163 = v71;
        sub_10004494C();
        sub_1000118F4();
        v82 = *(void (**)(_QWORD, _QWORD))(v69 + 8);
        v82(v73, v74);
        *(_WORD *)(v77 + 12) = 1024;
        LODWORD(v176) = v161;
        v83 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, (char *)&v176 + 4, v77 + 14);
        *(_WORD *)(v77 + 18) = 2080;
        AuxiliaryMetadataUpdate.metadata.getter(v83);
        v84 = sub_100044968();
        v85 = Dictionary.description.getter(v75, &type metadata for String, v84, &protocol witness table for String);
        v87 = v86;
        sub_1000118F4();
        sub_100010D40(v85, v87, (uint64_t *)&v167);
        sub_100011664(v88);
        swift_bridgeObjectRelease(v87);
        v82(v75, v74);
        _os_log_impl((void *)&_mh_execute_header, v163, (os_log_type_t)v164, "Received metadata update for domain %s from pid/%d but there is no change since last update: %s", (uint8_t *)v77, 0x1Cu);
        v89 = v166;
        sub_100016054();
        sub_100012398(v89);
        return sub_100012398(v77);
      }
      else
      {
        v156 = *(void (**)(_QWORD, _QWORD))(v69 + 8);
        v156(v73, v74);
        return ((uint64_t (*)(uint64_t, uint64_t))v156)(v75, v74);
      }
    }
  }
  else
  {
    v68 = swift_bridgeObjectRelease(v64);
    v69 = v6;
  }
  v128 = static os_log_type_t.default.getter(v68);
  v129 = *(NSObject **)(v164 + 16);
  v130 = *(void (**)(_QWORD, _QWORD, _QWORD))(v69 + 16);
  v131 = v165;
  v130(v25, v62, v165);
  v132 = v160;
  v130(v160, v62, v131);
  if (os_log_type_enabled(v129, v128))
  {
    v133 = sub_1000123C4(28);
    v163 = (os_log_t)sub_1000123C4(64);
    v167 = v163;
    *(_DWORD *)v133 = 136315650;
    v162 = v129;
    v134 = ((uint64_t (*)(void))AuxiliaryMetadataUpdate.domain.getter)();
    sub_100044980(v134, v135);
    v176 = v136;
    LODWORD(v158) = v128;
    sub_10004494C();
    sub_1000118F4();
    v157 = *(void (**)(_QWORD, _QWORD))(v69 + 8);
    v157(v25, v131);
    *(_WORD *)(v133 + 12) = 1024;
    LODWORD(v176) = v161;
    v137 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, (char *)&v176 + 4, v133 + 14);
    *(_WORD *)(v133 + 18) = 2080;
    v138 = v160;
    v139 = v160;
    AuxiliaryMetadataUpdate.metadata.getter(v137);
    v140 = sub_100044968();
    v141 = Dictionary.description.getter(v139, &type metadata for String, v140, &protocol witness table for String);
    v143 = v142;
    sub_1000118F4();
    sub_100010D40(v141, v143, (uint64_t *)&v167);
    sub_100011664(v144);
    swift_bridgeObjectRelease(v143);
    v157(v138, v131);
    _os_log_impl((void *)&_mh_execute_header, v162, (os_log_type_t)v158, "Received metadata update for domain %s from pid/%d: %s", (uint8_t *)v133, 0x1Cu);
    v145 = v163;
    sub_100016054();
    sub_100012398((uint64_t)v145);
    v146 = sub_100012398(v133);
  }
  else
  {
    v147 = *(void (**)(_QWORD, _QWORD))(v69 + 8);
    v147(v25, v131);
    v146 = ((uint64_t (*)(uint64_t, uint64_t))v147)(v132, v131);
  }
  v148 = v164;
  v149 = AuxiliaryMetadataUpdate.domain.getter(v146);
  v151 = v150;
  v152 = AuxiliaryMetadataUpdate.metadata.getter(v149);
  sub_1000123DC(v59, (uint64_t)&v167, 33);
  sub_100059218(v152, v149, v151);
  swift_endAccess(&v167);
  result = swift_bridgeObjectRelease(v151);
  v153 = *(void (**)(_QWORD))(v148 + 56);
  if (v153)
  {
    v154 = *(_QWORD *)(v148 + 64);
    v155 = sub_10000E49C();
    v153(v155);
    return sub_1000392D4((uint64_t)v153, v154);
  }
  return result;
}

void sub_100042EA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];

  v40 = sub_100016528();
  v2 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40, v3);
  sub_100011928();
  v6 = v5 - v4;
  v7 = sub_1000139B4();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  sub_100013A1C();
  v12 = v10 - v11;
  __chkstk_darwin(v13, v14);
  v16 = (uint8_t *)&v39 - v15;
  v17 = type metadata accessor for XPCEventPublisher.SubscriptionAction(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  sub_100011928();
  v22 = v21 - v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v21 - v20, a1, v17);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v22, v17);
  if (v23 == enum case for XPCEventPublisher.SubscriptionAction.add(_:))
  {
    sub_100016590();
    v24 = v22 + *(int *)(sub_1000150C0(&qword_100086E48) + 48);
    sub_100044998((uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
    v25 = v40;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v24, v40);
    sub_100043138(v16, v6);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v25);
    v26 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v27 = (uint64_t)v16;
LABEL_8:
    v26(v27, v7);
    goto LABEL_9;
  }
  v28 = v41;
  if (v23 == enum case for XPCEventPublisher.SubscriptionAction.remove(_:))
  {
    sub_100016590();
    v29 = v8;
    sub_100044998(v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
    sub_1000123DC(v28 + 80, (uint64_t)v42, 33);
    sub_100058D4C();
    v31 = v30;
    swift_endAccess(v42);
    if (v31)
    {
      sub_1000123DC(v28 + 96, (uint64_t)v42, 33);
      v32 = sub_100058DFC();
      swift_endAccess(v42);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v32);
      v33 = *(void (**)(uint64_t))(v28 + 56);
      if (v33)
      {
        v34 = *(_QWORD *)(v28 + 64);
        v35 = sub_10000E49C();
        v33(v35);
        sub_1000392D4((uint64_t)v33, v34);
      }
    }
    v26 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v27 = v12;
    goto LABEL_8;
  }
  if (v23 == enum case for XPCEventPublisher.SubscriptionAction.initialBarrier(_:))
  {
    *(_BYTE *)(v41 + 72) = 1;
    v36 = *(void (**)(uint64_t))(v28 + 56);
    if (v36)
    {
      v37 = *(_QWORD *)(v28 + 64);
      v38 = sub_10000E49C();
      v36(v38);
      sub_1000392D4((uint64_t)v36, v37);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v22, v17);
  }
LABEL_9:
  sub_1000138B4();
}

void sub_100043138(uint8_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  os_log_type_t v32;
  NSObject *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  NSObject *v41;
  void (*v42)(char *, uint64_t, uint64_t);
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];

  v3 = v2;
  v50 = a1;
  v5 = sub_100016528();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  sub_100013A1C();
  v10 = (char *)(v8 - v9);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v50 - v13;
  sub_1000150C0(&qword_100086E40);
  sub_1000123E4();
  __chkstk_darwin(v15, v16);
  sub_100011928();
  v19 = v18 - v17;
  v21 = static AuxiliaryMetadataProvider.XPCKeys.domainKey.getter(v20);
  v23 = v22;
  v24 = XPCDictionary.subscript.getter(v21);
  v26 = v25;
  v27 = swift_bridgeObjectRelease(v23);
  if (!v26)
  {
    v40 = static os_log_type_t.fault.getter(v27);
    v41 = *(NSObject **)(v3 + 16);
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v42(v14, a2, v5);
    v43 = v40;
    if (!os_log_type_enabled(v41, v40))
    {
      sub_1000162F8();
      goto LABEL_12;
    }
    v44 = (uint8_t *)sub_1000123C4(12);
    v45 = sub_1000123C4(32);
    v54[0] = v45;
    *(_DWORD *)v44 = 136315138;
    v50 = v44 + 4;
    v42(v10, (uint64_t)v14, v5);
    v46 = String.init<A>(describing:)(v10, v5);
    v48 = v47;
    sub_100010D40(v46, v47, v54);
    v52 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v50);
    swift_bridgeObjectRelease(v48);
    sub_1000162F8();
    sub_1000118DC((void *)&_mh_execute_header, v41, v43, "Invalid XPC event subscription descriptor. Could not read target domain from descriptor dictionary %s", v44);
    sub_1000135B4(v45);
    sub_100012398(v45);
    v37 = (uint64_t)v44;
    goto LABEL_10;
  }
  sub_1000123DC(v3 + 88, (uint64_t)v54, 0);
  v28 = *(_QWORD *)(v3 + 88);
  if (*(_QWORD *)(v28 + 16)
    && (swift_bridgeObjectRetain(*(_QWORD *)(v3 + 88)),
        sub_100015264(v24, v26),
        v30 = v29,
        v31 = swift_bridgeObjectRelease(v28),
        (v30 & 1) != 0))
  {
    v32 = static os_log_type_t.fault.getter(v31);
    v33 = *(NSObject **)(v3 + 16);
    if (sub_10000E538(v32))
    {
      sub_10001613C();
      v34 = (uint8_t *)sub_1000123C4(12);
      v35 = sub_1000123C4(32);
      v52 = v35;
      *(_DWORD *)v34 = 136446210;
      sub_10001613C();
      sub_100010D40(v24, v26, &v52);
      v51 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v34 + 4);
      swift_bridgeObjectRelease_n(v26, 3);
      sub_1000118DC((void *)&_mh_execute_header, v33, (os_log_type_t)v6, "Multiple subscribers have registered for ownership of domain %{public}s. Ignoring additional subscriber.", v34);
      sub_1000135B4(v35);
      sub_100012398(v35);
      v37 = (uint64_t)v34;
LABEL_10:
      sub_100012398(v37);
      goto LABEL_12;
    }
  }
  else
  {
    sub_1000123DC(v3 + 80, (uint64_t)&v52, 33);
    sub_10001613C();
    v38 = (uint64_t)v50;
    sub_100059178();
    swift_endAccess(&v52);
    v39 = sub_1000139B4();
    sub_1000164D4(v19, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16));
    sub_100015664(v19, 0, 1, v39);
    sub_1000123DC(v3 + 88, (uint64_t)&v52, 33);
    sub_10001613C();
    sub_100041AFC(v19, v24, v26);
    swift_endAccess(&v52);
    sub_1000434C8(v38, v24, v26);
  }
  sub_100015524();
LABEL_12:
  sub_1000138B4();
}

void sub_1000434C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  os_log_type_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = v3;
  v54 = *v3;
  v8 = sub_1000139B4();
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  __chkstk_darwin(v8, v9);
  v50 = v10;
  v51 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100016528();
  v57 = *(_QWORD *)(v11 - 8);
  v58 = v11;
  sub_1000123E4();
  __chkstk_darwin(v12, v13);
  sub_100013A1C();
  v16 = v14 - v15;
  v19 = __chkstk_darwin(v17, v18);
  v21 = (char *)&v47 - v20;
  v22 = XPCDictionary.init()(v19);
  v23 = static AuxiliaryMetadataProvider.XPCKeys.domainKey.getter(v22);
  v25 = v24;
  swift_bridgeObjectRetain(a3);
  v55 = a3;
  v56 = a2;
  v26 = v21;
  v27 = XPCDictionary.subscript.setter(a2, a3, v23, v25);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = v4[2];
  if (sub_10000E538(v28))
  {
    v30 = v55;
    swift_bridgeObjectRetain_n(v55, 2);
    v31 = sub_1000123C4(12);
    v48 = a1;
    v32 = (uint8_t *)v31;
    v33 = sub_1000123C4(32);
    v60 = v33;
    *(_DWORD *)v32 = 136446210;
    swift_bridgeObjectRetain(v30);
    sub_100010D40(v56, v30, &v60);
    v59 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v32 + 4);
    swift_bridgeObjectRelease_n(v30, 3);
    sub_1000118DC((void *)&_mh_execute_header, v29, (os_log_type_t)v25, "Firing event to request metadata for domain %{public}s", v32);
    sub_1000135B4(v33);
    sub_100012398(v33);
    a1 = v48;
    sub_100012398((uint64_t)v32);
  }
  v48 = v4[4];
  v49 = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 16))(v16, v26, v58);
  v47 = v4[3];
  v35 = sub_100015378((uint64_t)&unk_10007C500);
  sub_100015700(v35);
  v37 = v51;
  v36 = v52;
  v38 = a1;
  sub_1000164D4(v51, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16));
  v39 = *(unsigned __int8 *)(v36 + 80);
  v40 = (v39 + 40) & ~v39;
  v41 = (v50 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  v42 = (_QWORD *)swift_allocObject(&unk_10007C528, v41 + 8, v39 | 7);
  v44 = v55;
  v43 = v56;
  v42[2] = v35;
  v42[3] = v43;
  v42[4] = v44;
  sub_1000164D4((uint64_t)v42 + v40, v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 32));
  *(_QWORD *)((char *)v42 + v41) = v54;
  swift_bridgeObjectRetain(v44);
  swift_retain(v35);
  dispatch thunk of XPCEventPublisher.fire(event:forToken:replyQueue:replyHandler:)(v16, v38, v47, sub_100044894, v42);
  swift_release(v42);
  v45 = v58;
  v46 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  v46(v16, v58);
  v46((uint64_t)v49, v45);
  swift_release(v35);
  sub_1000138B4();
}

uint64_t sub_1000437B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t result;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t (*v46)(char *, uint64_t);
  uint64_t v47;
  os_log_type_t v48;
  NSObject *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  os_log_type_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  os_log_type_t v73;
  NSObject *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  char *v95;
  _BOOL4 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120[3];
  char v121[24];

  v113 = a5;
  v115 = a4;
  v116 = a3;
  v117 = type metadata accessor for XPCError(0);
  v7 = *(_QWORD *)(v117 - 8);
  v9 = __chkstk_darwin(v117, v8);
  v112 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v111 = (char *)&v108 - v13;
  v15 = __chkstk_darwin(v12, v14);
  v110 = (char *)&v108 - v16;
  v18 = __chkstk_darwin(v15, v17);
  v114 = (char *)&v108 - v19;
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v108 - v21;
  v23 = type metadata accessor for XPCDictionary(0);
  v24 = *(_QWORD *)(v23 - 8);
  v26 = __chkstk_darwin(v23, v25);
  v28 = (char *)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v29);
  v31 = (char *)&v108 - v30;
  v32 = sub_1000150C0(&qword_100085A80);
  __chkstk_darwin(v32, v33);
  v35 = (char *)&v108 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v121, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (!result)
    return result;
  v37 = result;
  sub_10001AF30(a1, (uint64_t)v35);
  if (swift_getEnumCaseMultiPayload(v35, v32) != 1)
  {
    v62 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v31, v35, v23);
    XPCDictionary.entitlements.getter(v62);
    v63 = XPCDictionary.subscript.getter(0xD00000000000002BLL, 0x800000010006DB90);
    v46 = *(uint64_t (**)(char *, uint64_t))(v24 + 8);
    v64 = v46(v28, v23);
    if ((v63 & 1) != 0)
    {
      v90 = static os_log_type_t.default.getter(v64);
      v66 = *(NSObject **)(v37 + 16);
      v67 = v90;
      if (os_log_type_enabled(v66, v90))
      {
        v91 = v115;
        swift_bridgeObjectRetain_n(v115, 2);
        v69 = (uint8_t *)swift_slowAlloc(12, -1);
        v70 = swift_slowAlloc(32, -1);
        v120[0] = v70;
        v109 = v37;
        *(_DWORD *)v69 = 136446210;
        swift_bridgeObjectRetain(v91);
        sub_100010D40(v116, v91, v120);
        v119 = (char *)v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v69 + 4);
        swift_bridgeObjectRelease_n(v91, 3);
        v72 = "Received response to request for metadata for domain %{public}s";
        goto LABEL_15;
      }
    }
    else
    {
      v65 = static os_log_type_t.fault.getter(v64);
      v66 = *(NSObject **)(v37 + 16);
      v67 = v65;
      if (os_log_type_enabled(v66, v65))
      {
        v68 = v115;
        swift_bridgeObjectRetain_n(v115, 2);
        v69 = (uint8_t *)swift_slowAlloc(12, -1);
        v70 = swift_slowAlloc(32, -1);
        v120[0] = v70;
        v109 = v37;
        *(_DWORD *)v69 = 136315138;
        swift_bridgeObjectRetain(v68);
        sub_100010D40(v116, v68, v120);
        v119 = (char *)v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v69 + 4);
        swift_bridgeObjectRelease_n(v68, 3);
        v72 = "Binary registered as metadata provider for domain %s does not have required entitlement";
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v66, v67, v72, v69, 0xCu);
        swift_arrayDestroy(v70, 1);
        swift_slowDealloc(v70, -1, -1);
        swift_slowDealloc(v69, -1, -1);
        v61 = v31;
LABEL_16:
        v46(v61, v23);
LABEL_17:
        v93 = v109;
        return swift_release(v93);
      }
    }
    v46(v31, v23);
    v93 = v37;
    return swift_release(v93);
  }
  v38 = v22;
  v23 = v117;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v22, v35, v117);
  v39 = swift_beginAccess(v37 + 80, v120, 0, 0);
  v40 = *(_QWORD *)(v37 + 80);
  if (!*(_QWORD *)(v40 + 16)
    || (swift_bridgeObjectRetain(*(_QWORD *)(v37 + 80)),
        sub_100055DA0(),
        v42 = v41,
        v39 = swift_bridgeObjectRelease(v40),
        (v42 & 1) == 0))
  {
    v73 = static os_log_type_t.error.getter(v39);
    v74 = *(NSObject **)(v37 + 16);
    v75 = v37;
    v76 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v77 = v112;
    v76(v112, v38, v23);
    v78 = v73;
    if (!os_log_type_enabled(v74, v73))
    {
      v94 = *(void (**)(char *, uint64_t))(v7 + 8);
      v94(v77, v23);
      v94(v38, v23);
      v93 = v75;
      return swift_release(v93);
    }
    v79 = v115;
    swift_bridgeObjectRetain_n(v115, 2);
    v80 = swift_slowAlloc(22, -1);
    v113 = v38;
    v81 = v80;
    v111 = (char *)swift_slowAlloc(64, -1);
    v119 = v111;
    *(_DWORD *)v81 = 136446466;
    swift_bridgeObjectRetain(v79);
    sub_100010D40(v116, v79, (uint64_t *)&v119);
    v118 = v82;
    v109 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v81 + 4);
    swift_bridgeObjectRelease_n(v79, 3);
    *(_WORD *)(v81 + 12) = 2080;
    v83 = v114;
    v76(v114, v77, v23);
    v84 = String.init<A>(describing:)(v83, v23);
    v86 = v85;
    sub_100010D40(v84, v85, (uint64_t *)&v119);
    v118 = v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v81 + 14);
    swift_bridgeObjectRelease(v86);
    v88 = *(void (**)(char *, uint64_t))(v7 + 8);
    v88(v77, v23);
    _os_log_impl((void *)&_mh_execute_header, v74, v78, "Received error response to request for metadata for domain %{public}s from now-unregistered subscriber: %s. Not retrying", (uint8_t *)v81, 0x16u);
    v89 = v111;
    swift_arrayDestroy(v111, 2);
    swift_slowDealloc(v89, -1, -1);
    swift_slowDealloc(v81, -1, -1);
    v88(v113, v23);
    goto LABEL_17;
  }
  v43 = v114;
  static XPCError.connectionInvalid.getter(v39);
  sub_10000EC40(&qword_100086E38, (uint64_t (*)(uint64_t))&type metadata accessor for XPCError, (uint64_t)&protocol conformance descriptor for XPCError);
  v45 = static _Error.~= infix(_:_:)(v22, v43, v23, v44);
  v46 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  v47 = v46(v43, v23);
  v48 = static os_log_type_t.error.getter(v47);
  v109 = v37;
  v49 = *(NSObject **)(v37 + 16);
  v50 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  if ((v45 & 1) != 0)
  {
    v51 = v110;
    v50(v110, v22, v23);
    if (os_log_type_enabled(v49, v48))
    {
      v52 = v115;
      swift_bridgeObjectRetain_n(v115, 2);
      v53 = swift_slowAlloc(22, -1);
      v112 = (char *)swift_slowAlloc(64, -1);
      v113 = v38;
      v119 = v112;
      *(_DWORD *)v53 = 136446466;
      swift_bridgeObjectRetain(v52);
      sub_100010D40(v116, v52, (uint64_t *)&v119);
      v118 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v53 + 4);
      swift_bridgeObjectRelease_n(v52, 3);
      *(_WORD *)(v53 + 12) = 2080;
      v55 = v114;
      v50(v114, v51, v23);
      v56 = String.init<A>(describing:)(v55, v23);
      v58 = v57;
      sub_100010D40(v56, v57, (uint64_t *)&v119);
      v118 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v53 + 14);
      swift_bridgeObjectRelease(v58);
      v46(v51, v23);
      _os_log_impl((void *)&_mh_execute_header, v49, v48, "Received XPC_ERRROR_CONNECTION_INVALID response to request for metadata for domain %{public}s: %s. Not retrying", (uint8_t *)v53, 0x16u);
      v60 = v112;
      swift_arrayDestroy(v112, 2);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v53, -1, -1);
      v61 = v113;
    }
    else
    {
      v46(v51, v23);
      v61 = v22;
    }
    goto LABEL_16;
  }
  v95 = v111;
  v50(v111, v22, v23);
  v96 = os_log_type_enabled(v49, v48);
  v98 = v115;
  v97 = v116;
  if (v96)
  {
    swift_bridgeObjectRetain_n(v115, 2);
    v99 = swift_slowAlloc(22, -1);
    v112 = (char *)swift_slowAlloc(64, -1);
    v119 = v112;
    *(_DWORD *)v99 = 136446466;
    LODWORD(v110) = v48;
    swift_bridgeObjectRetain(v98);
    sub_100010D40(v97, v98, (uint64_t *)&v119);
    v118 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v99 + 4);
    swift_bridgeObjectRelease_n(v98, 3);
    *(_WORD *)(v99 + 12) = 2080;
    v101 = v114;
    v50(v114, v95, v117);
    v102 = String.init<A>(describing:)(v101, v117);
    v104 = v103;
    sub_100010D40(v102, v103, (uint64_t *)&v119);
    v118 = v105;
    v97 = v116;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v99 + 14);
    swift_bridgeObjectRelease(v104);
    v46(v95, v117);
    _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v110, "Received error response to request for metadata for domain %{public}s: %s. Retrying", (uint8_t *)v99, 0x16u);
    v106 = v112;
    swift_arrayDestroy(v112, 2);
    v23 = v117;
    swift_slowDealloc(v106, -1, -1);
    swift_slowDealloc(v99, -1, -1);
  }
  else
  {
    v46(v95, v23);
  }
  v107 = v109;
  sub_1000434C8(v113, v97, v98);
  swift_release(v107);
  return v46(v38, v23);
}

uint64_t sub_1000441BC(uint64_t a1)
{
  uint64_t v1;
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t result;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = static os_log_type_t.fault.getter();
  v4 = *(NSObject **)(v1 + 16);
  v5 = v3;
  result = os_log_type_enabled(v4, v3);
  if ((_DWORD)result)
  {
    sub_100013AE0();
    sub_100013AE0();
    v7 = (uint8_t *)sub_1000123C4(12);
    v8 = sub_1000123C4(32);
    v14 = a1;
    v15 = v8;
    *(_DWORD *)v7 = 136315138;
    sub_100013AE0();
    v9 = sub_1000150C0(&qword_100085A00);
    v10 = String.init<A>(describing:)(&v14, v9);
    v12 = v11;
    sub_100010D40(v10, v11, &v15);
    v14 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v7 + 4);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    sub_1000118DC((void *)&_mh_execute_header, v4, v5, "Received error from metadata XPC event publisher: %s", v7);
    sub_1000135B4(v8);
    sub_100012398(v8);
    return sub_100012398((uint64_t)v7);
  }
  return result;
}

uint64_t sub_1000442F8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release();
  sub_1000392D4(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  return v0;
}

uint64_t sub_10004434C()
{
  uint64_t v0;

  sub_1000442F8();
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for AuxiliaryMetadataService()
{
  return objc_opt_self(_TtC20remotepairingdeviced24AuxiliaryMetadataService);
}

uint64_t sub_100044394(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  char v53;
  char v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  int64_t v68;
  _BOOL4 v69;
  uint64_t v70;
  unint64_t v71;

  v4 = type metadata accessor for AuxiliaryMetadataItem(0);
  v67 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4, v5);
  v66 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v60 - v9;
  v11 = sub_1000150C0(&qword_100086BB0);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v13, v16);
  v19 = (uint64_t *)((char *)&v60 - v18);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v68 = 0;
  v64 = a1;
  v65 = a2;
  v22 = *(_QWORD *)(a1 + 64);
  v21 = a1 + 64;
  v20 = v22;
  v23 = 1 << *(_BYTE *)(v21 - 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v20;
  v62 = v21;
  v63 = (unint64_t)(v23 + 63) >> 6;
  v61 = v63 - 1;
  v26 = (uint64_t *)&unk_100086BB8;
  v70 = v4;
  while (1)
  {
    if (v25)
    {
      v27 = __clz(__rbit64(v25));
      v28 = (v25 - 1) & v25;
      v29 = v67;
      v30 = v27 | (v68 << 6);
LABEL_8:
      v31 = *(_QWORD *)(v64 + 56);
      v32 = (_QWORD *)(*(_QWORD *)(v64 + 48) + 16 * v30);
      v33 = v32[1];
      *(_QWORD *)v15 = *v32;
      *((_QWORD *)v15 + 1) = v33;
      v34 = v31 + *(_QWORD *)(v29 + 72) * v30;
      v35 = sub_1000150C0(v26);
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(&v15[*(int *)(v35 + 48)], v34, v70);
      sub_100015664((uint64_t)v15, 0, 1, v35);
      swift_bridgeObjectRetain(v33);
      goto LABEL_30;
    }
    v36 = v68 + 1;
    if (__OFADD__(v68, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    v29 = v67;
    if (v36 < v63)
    {
      v37 = *(_QWORD *)(v62 + 8 * v36);
      if (v37)
        goto LABEL_12;
      v38 = v68 + 2;
      ++v68;
      if (v36 + 1 < v63)
      {
        v37 = *(_QWORD *)(v62 + 8 * v38);
        if (v37)
          goto LABEL_15;
        v68 = v36 + 1;
        if (v36 + 2 < v63)
        {
          v37 = *(_QWORD *)(v62 + 8 * (v36 + 2));
          if (v37)
          {
            v36 += 2;
            goto LABEL_12;
          }
          v68 = v36 + 2;
          if (v36 + 3 < v63)
          {
            v37 = *(_QWORD *)(v62 + 8 * (v36 + 3));
            if (v37)
            {
              v36 += 3;
              goto LABEL_12;
            }
            v38 = v36 + 4;
            v68 = v36 + 3;
            if (v36 + 4 < v63)
              break;
          }
        }
      }
    }
LABEL_29:
    v39 = sub_1000150C0(v26);
    sub_100015664((uint64_t)v15, 1, 1, v39);
    v28 = 0;
LABEL_30:
    sub_1000418C0((uint64_t)v15, (uint64_t)v19, &qword_100086BB0);
    v40 = sub_1000150C0(v26);
    v41 = sub_100015658((uint64_t)v19, 1, v40);
    v69 = v41 == 1;
    if (v41 == 1)
      return v69;
    v71 = v28;
    v42 = v26;
    v43 = v15;
    v44 = (char *)v19 + *(int *)(v40 + 48);
    v45 = *v19;
    v46 = v19[1];
    v47 = v19;
    v48 = v70;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v10, v44, v70);
    v49 = v45;
    v50 = v65;
    v51 = v10;
    v52 = sub_100015264(v49, v46);
    v54 = v53;
    swift_bridgeObjectRelease(v46);
    if ((v54 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v51, v48);
      return 0;
    }
    v55 = *(_QWORD *)(v50 + 56) + *(_QWORD *)(v29 + 72) * v52;
    v56 = v66;
    (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(v66, v55, v48);
    sub_10000EC40(&qword_100086E58, (uint64_t (*)(uint64_t))&type metadata accessor for AuxiliaryMetadataItem, (uint64_t)&protocol conformance descriptor for AuxiliaryMetadataItem);
    v58 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v51, v48, v57);
    v59 = *(void (**)(char *, uint64_t))(v29 + 8);
    v59(v56, v48);
    result = ((uint64_t (*)(char *, uint64_t))v59)(v51, v48);
    v10 = v51;
    v15 = v43;
    v19 = v47;
    v26 = v42;
    v25 = v71;
    if ((v58 & 1) == 0)
      return v69;
  }
  v37 = *(_QWORD *)(v62 + 8 * v38);
  if (v37)
  {
LABEL_15:
    v36 = v38;
LABEL_12:
    v28 = (v37 - 1) & v37;
    v30 = __clz(__rbit64(v37)) + (v36 << 6);
    v68 = v36;
    goto LABEL_8;
  }
  while (1)
  {
    v36 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v36 >= v63)
    {
      v68 = v61;
      goto LABEL_29;
    }
    v37 = *(_QWORD *)(v62 + 8 * v36);
    ++v38;
    if (v37)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000447EC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100044810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_1000139B4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100044894(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000139B4() - 8) + 80);
  return sub_1000437B0(a1, v1[2], v1[3], v1[4], (char *)v1 + ((v3 + 40) & ~v3));
}

unint64_t sub_1000448E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086990;
  if (!qword_100086990)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100086990);
  }
  return result;
}

uint64_t sub_100044924(uint64_t a1)
{
  uint64_t v1;

  return sub_1000421B8(a1, v1);
}

uint64_t sub_10004492C(uint64_t a1)
{
  uint64_t v1;

  return sub_100042214(a1, v1);
}

uint64_t sub_100044934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100042270(a1, a2, v2);
}

uint64_t sub_10004494C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 72, v0, v1);
}

uint64_t sub_10004495C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(a1, a2, v4, v3);
}

uint64_t sub_100044968()
{
  return type metadata accessor for AuxiliaryMetadataItem(0);
}

uint64_t sub_100044974()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

void sub_100044980(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010D40(a1, a2, (uint64_t *)(v2 - 240));
}

void sub_10004498C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x12u);
}

uint64_t sub_100044998@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

void sub_1000449A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  nw_error_domain_t error_domain;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t error_code;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v1 = type metadata accessor for POSIXError(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  error_domain = nw_error_get_error_domain(v0);
  if (error_domain - 2 >= 2)
  {
    if (error_domain != nw_error_domain_posix
      || (error_code = nw_error_get_error_code(v0),
          v12 = POSIXErrorCode.init(rawValue:)(error_code),
          (v12 & 0x100000000) != 0))
    {
      v16 = type metadata accessor for RemotePairingError(0);
      v17 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      swift_allocError(v16, v17, 0, 0);
      v18 = sub_10000EC00((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      static Error<>.unknown.getter(v16, v18);
    }
    else
    {
      v20 = v12;
      v13 = sub_100045328((uint64_t)&_swiftEmptyArrayStorage);
      v14 = sub_10000EC00(&qword_1000859E0, (uint64_t (*)(uint64_t))&type metadata accessor for POSIXError, (uint64_t)&protocol conformance descriptor for POSIXError);
      v15 = _BridgedStoredNSError.init(_:userInfo:)(&v20, v13, v1, v14);
      POSIXError._nsError.getter(v15);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
  }
  else
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    v8 = v7;
    v9 = nw_error_get_error_code(v0);
    v10 = objc_allocWithZone((Class)NSError);
    sub_100045288(v6, v8, v9, 0);
  }
  sub_1000123F0();
}

void OS_nw_connection.send(content:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v5;
  Class isa;
  NSObject *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v12 = NWCreateDispatchDataFromNSData();

  v13 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007C550, 64);
  v13[2] = a5;
  v13[3] = v5;
  v13[4] = a1;
  v13[5] = a2;
  v13[6] = a3;
  v13[7] = a4;
  v14 = sub_100011904((uint64_t)sub_10003B2D8, (uint64_t)_NSConcreteStackBlock, 1107296256, v15, v16);
  swift_unknownObjectRetain(v5);
  sub_100015614(a1, a2);
  swift_retain(a4);
  swift_release();
  nw_connection_send(v5, v12, _nw_content_context_default_message, 1, v14);
  _Block_release(v14);

}

void OS_nw_connection.receive(completion:)(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = sub_1000138D4((uint64_t)&unk_10007C5F0, 32);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = sub_100011904((uint64_t)sub_10000E5B4, (uint64_t)_NSConcreteStackBlock, 1107296256, v7, v8);
  swift_retain(a2);
  swift_release();
  nw_connection_receive_message(v2, v6);
  _Block_release(v6);
}

uint64_t sub_100044D14()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint64_t result;
  int stream_type;

  v1 = nw_protocol_copy_quic_definition();
  v2 = nw_connection_copy_protocol_metadata(v0, v1);
  result = swift_unknownObjectRelease(v1);
  if (v2)
  {
    stream_type = nw_quic_get_stream_type(v2);
    sub_100015474();
    return stream_type == 3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100044D74(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *log;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a1)
  {
    v10 = swift_unknownObjectRetain(a1);
    v11 = static os_log_type_t.error.getter(v10);
    v12 = qword_1000886E0;
    v13 = v11;
    if (os_log_type_enabled((os_log_t)qword_1000886E0, v11))
    {
      swift_unknownObjectRetain(a1);
      swift_unknownObjectRetain(a2);
      sub_100015614(a3, a4);
      swift_unknownObjectRetain(a1);
      swift_unknownObjectRetain(a2);
      sub_100015614(a3, a4);
      v14 = swift_slowAlloc(32, -1);
      v30 = swift_slowAlloc(64, -1);
      v32 = v30;
      *(_DWORD *)v14 = 136446722;
      v15 = objc_msgSend(a2, "description");
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      log = v12;
      v18 = v17;

      sub_100010D40(v16, v18, &v32);
      v31 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v14 + 4);
      swift_unknownObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v14 + 12) = 2048;
      v20 = Data.count.getter(a3, a4);
      sub_100015430(a3, a4);
      v31 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v14 + 14);
      sub_100015430(a3, a4);
      *(_WORD *)(v14 + 22) = 2080;
      v31 = a1;
      swift_unknownObjectRetain(a1);
      v21 = sub_1000150C0(&qword_100086EA8);
      v22 = String.init<A>(describing:)(&v31, v21);
      v24 = v23;
      sub_100010D40(v22, v23, &v32);
      v31 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v14 + 24);
      swift_unknownObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, log, v13, "%{public}s: Error sending %ld bytes of data %s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy(v30, 2);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    swift_unknownObjectRelease(a1);
    sub_1000449A4();
    v27 = v26;
  }
  else
  {
    v27 = 0;
  }
  a5(v27);
  return swift_errorRelease(v27);
}

uint64_t sub_100045028()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[3]);
  sub_100015430(v0[4], v0[5]);
  swift_release();
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10004505C(uint64_t a1)
{
  uint64_t v1;

  return sub_100044D74(a1, *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(uint64_t))(v1 + 48));
}

uint64_t sub_10004506C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100045098(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  __int128 v21;
  unint64_t v22;
  _OWORD v23[2];

  v8 = type metadata accessor for RemotePairingError(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1
    && (v22 = sub_10000EBC4(),
        *(_QWORD *)&v21 = a1,
        sub_100015FB0(&v21, v23),
        sub_100015FB0(v23, &v21),
        v12 = a1,
        (swift_dynamicCast(v20, &v21, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0))
  {
    v13 = 0;
    v15 = v20[0];
    v14 = v20[1];
  }
  else
  {
    if (a4)
    {
      swift_unknownObjectRetain(a4);
      sub_1000449A4();
      v15 = v16;
      swift_unknownObjectRelease(a4);
    }
    else
    {
      v17 = sub_10000EC00((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      static Error<>.dataCorrupted.getter(v8, v17);
      v18 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      v15 = swift_allocError(v8, v18, 0, 0);
      Error<>.init(_:_:)(v11, 0xD00000000000002ELL, 0x800000010006DDE0, v8);
    }
    v14 = 0;
    v13 = 1;
  }
  a5(v15, v14, v13);
  return sub_10000EBB8(v15, v14, v13);
}

uint64_t sub_10004525C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100045280(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100045098(a1, a2, a3, a4, *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16));
}

void sub_100045288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  NSString v8;
  NSDictionary v9;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v9.super.isa = 0;
  }
  objc_msgSend(v4, "initWithDomain:code:userInfo:", v8, a3, v9.super.isa);

  sub_1000123F0();
}

unint64_t sub_100045328(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000150C0(&qword_100086E88);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000454B4(v7, (uint64_t)&v16);
    v8 = v16;
    v9 = v17;
    result = sub_100045450(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100015FB0(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100045450(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_1000454FC(a1, a2, v4);
}

uint64_t sub_1000454B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0(&qword_100086E90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000454FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

id sub_100045648()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id result;

  v0 = type metadata accessor for ControlChannelConnection(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  result = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  qword_100088708 = (uint64_t)result;
  return result;
}

uint64_t sub_10004569C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return String.init(format:arguments:)(a2, a3, a1);
}

uint64_t sub_1000456B0(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);
  uint64_t v4;

  v3 = *(void (**)(uint64_t))(a1 + 32);
  sub_10000E49C();
  v4 = sub_10004A938();
  v3(v4);
  swift_release();
  return sub_10004A904(a2);
}

BOOL sub_1000456E8(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_1000456F4(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  sub_10000E49C();
  v3(a2);
  return swift_release();
}

uint64_t sub_10004572C()
{
  uint64_t v0;
  NSObject *v1;
  const char *name;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;

  if (!nw_connection_copy_current_path(*(nw_connection_t *)(v0
                                                           + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection)))
    return 0;
  v1 = nw_path_copy_interface();
  if (!v1)
  {
    sub_100015474();
    return 0;
  }
  name = nw_interface_get_name(v1);
  v3 = String.init(cString:)(name);
  v5 = v4;
  v6 = static os_log_type_t.info.getter(v3);
  v7 = qword_1000886E0;
  v8 = v6;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v6))
  {
    swift_bridgeObjectRetain_n(v5, 2);
    v9 = (uint8_t *)sub_1000123C4(12);
    v10 = sub_1000123C4(32);
    v22 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v5);
    sub_100010D40(v3, v5, &v22);
    v19 = sub_10004A91C(v11, v12, v13, v14, v15, v16, v17, v18, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v20, v9 + 4);
    swift_bridgeObjectRelease_n(v5, 3);
    sub_1000118DC((void *)&_mh_execute_header, v7, v8, "Tunnel connection path interface name: %s", v9);
    swift_arrayDestroy(v10, 1);
    sub_100012398(v10);
    sub_100012398((uint64_t)v9);
  }
  sub_100012524();
  sub_100015474();
  return v3;
}

void sub_1000458A0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  *(_OWORD *)(v3 + 16) = xmmword_100065AB0;
  *(_QWORD *)(v3 + 32) = static IPv6Header.minHeaderLength.getter();
  *(_QWORD *)(v3 + 40) = 0x80000;
  v7 = sub_1000144A0();
  Identifier.init()(v7, &protocol witness table for TunnelConnectionIdentifierCategory);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection) = a1;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper__allowLocalConnectionsOnly) = a2;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_peerConnectionsInfo) = a3;
  sub_1000123F0();
}

void sub_100045924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  sub_10004A998();
  ObjectType = swift_getObjectType(*(_QWORD *)(v1
                                             + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
  OS_nw_connection.send(content:completion:)(v4, v3, v2, v0, ObjectType);
  sub_1000123F0();
}

void sub_100045970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_10004A998();
  swift_getObjectType(*(_QWORD *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
  OS_nw_connection.receive(minLength:maxLength:peerConnectionInfo:completion:)(v4, v3, *(_QWORD *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_peerConnectionsInfo), v2, v0);
  sub_1000123F0();
}

void sub_1000459CC()
{
  uint64_t v0;

  nw_connection_cancel(*(nw_connection_t *)(v0
                                          + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
}

void sub_1000459DC(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = *(NSObject **)(v4 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection);
  v9 = sub_1000138D4((uint64_t)&unk_10007C6D0, 24);
  sub_10004A978(v9);
  v10 = sub_100011904((uint64_t)sub_100045D0C, (uint64_t)_NSConcreteStackBlock, 1107296256, v15, v17);
  swift_release();
  nw_connection_set_viability_changed_handler(v8, v10);
  _Block_release(v10);
  v11 = sub_1000138D4((uint64_t)&unk_10007C6D0, 24);
  sub_10004A978(v11);
  v12 = sub_1000138D4((uint64_t)&unk_10007C720, 24);
  swift_unknownObjectWeakInit(v12 + 16, v8);
  v13 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007C748, 48);
  v13[2] = v11;
  v13[3] = v12;
  v13[4] = a2;
  v13[5] = a3;
  v14 = sub_100011904((uint64_t)sub_100016A04, (uint64_t)_NSConcreteStackBlock, 1107296256, v16, v18);
  sub_1000124D0();
  sub_100015A44();
  nw_connection_set_state_changed_handler(v8, v14);
  _Block_release(v14);
  nw_connection_set_queue(v8, a1);
  nw_connection_start(v8);
  sub_1000159FC();
}

uint64_t sub_100045B40(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v19, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    if ((a1 & 1) == 0)
    {
      v6 = static os_log_type_t.error.getter(result);
      v7 = qword_1000886E0;
      v8 = v6;
      if (os_log_type_enabled((os_log_t)qword_1000886E0, v6))
      {
        swift_retain_n(v5, 2);
        v9 = (uint8_t *)swift_slowAlloc(12, -1);
        v10 = swift_slowAlloc(32, -1);
        *(_DWORD *)v9 = 136446210;
        v18 = v10;
        v11 = sub_1000150C0((uint64_t *)&unk_1000853A0);
        sub_10003352C(&qword_1000870A8, (uint64_t *)&unk_1000853A0);
        v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
        v15 = v14;
        sub_100010D40(v13, v14, &v18);
        v17 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 4);
        swift_release_n(v5, 2);
        swift_bridgeObjectRelease(v15);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s: Cancelling tunnel connection as it is no longer viable", v9, 0xCu);
        swift_arrayDestroy(v10, 1);
        swift_slowDealloc(v10, -1, -1);
        swift_slowDealloc(v9, -1, -1);
      }
      nw_connection_cancel(*(nw_connection_t *)(v5
                                              + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100045D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_100045D48(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t Strong;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE v42[24];
  _BYTE v43[24];

  v10 = type metadata accessor for TunnelConnectionState(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v43, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (result)
  {
    v16 = result;
    v17 = a4 + 16;
    swift_beginAccess(v17, v42, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v17);
    if (Strong)
    {
      v19 = Strong;
      switch(a1)
      {
        case 1:
          v40 = static os_log_type_t.error.getter(Strong);
          v39 = qword_1000886E0;
          v20 = sub_1000150C0(&qword_100085570);
          v21 = swift_allocObject(v20, 72, 7);
          *(_OWORD *)(v21 + 16) = xmmword_100065C90;
          v41 = a2;
          swift_unknownObjectRetain(a2);
          v22 = sub_1000150C0((uint64_t *)&unk_100086460);
          v23 = String.init<A>(describing:)(&v41, v22);
          v25 = v24;
          *(_QWORD *)(v21 + 56) = &type metadata for String;
          *(_QWORD *)(v21 + 64) = sub_100016354();
          *(_QWORD *)(v21 + 32) = v23;
          *(_QWORD *)(v21 + 40) = v25;
          os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Connection waiting: %{public}s", 30, 2, v21);
          goto LABEL_14;
        case 2:
          v28 = static os_log_type_t.default.getter(Strong);
          os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, qword_1000886E0, "Connection preparing", 20, 2, &_swiftEmptyArrayStorage);
          goto LABEL_8;
        case 3:
          swift_getObjectType(Strong);
          v29 = sub_1000111F0();
          if (v29
            && *(_BYTE *)(v16
                        + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper__allowLocalConnectionsOnly) != 1)
          {
            v37 = static os_log_type_t.error.getter(v29);
            os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, qword_1000886E0, "Rejecting tunnel connection originating from local machine", 58, 2, &_swiftEmptyArrayStorage);
LABEL_16:
            nw_connection_cancel(v19);
            v31 = (unsigned int *)&enum case for TunnelConnectionState.stopped(_:);
          }
          else
          {
            v30 = static os_log_type_t.default.getter(v29);
            os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, qword_1000886E0, "Connection established", 22, 2, &_swiftEmptyArrayStorage);
            v31 = (unsigned int *)&enum case for TunnelConnectionState.ready(_:);
          }
          (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, *v31, v10);
          a5(v14);
          swift_unknownObjectRelease(v19);
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
        case 4:
          v40 = static os_log_type_t.error.getter(Strong);
          v39 = qword_1000886E0;
          v32 = sub_1000150C0(&qword_100085570);
          v21 = swift_allocObject(v32, 72, 7);
          *(_OWORD *)(v21 + 16) = xmmword_100065C90;
          v41 = a2;
          swift_unknownObjectRetain(a2);
          v33 = sub_1000150C0((uint64_t *)&unk_100086460);
          v34 = String.init<A>(describing:)(&v41, v33);
          v36 = v35;
          *(_QWORD *)(v21 + 56) = &type metadata for String;
          *(_QWORD *)(v21 + 64) = sub_100016354();
          *(_QWORD *)(v21 + 32) = v34;
          *(_QWORD *)(v21 + 40) = v36;
          os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Connection failed: %{public}s", 29, 2, v21);
LABEL_14:
          swift_bridgeObjectRelease(v21);
          goto LABEL_16;
        case 5:
          v26 = static os_log_type_t.default.getter(Strong);
          os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_1000886E0, "Connection cancelled", 20, 2, &_swiftEmptyArrayStorage);
          goto LABEL_16;
        default:
          v27 = static os_log_type_t.default.getter(Strong);
          os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1000886E0, "Unknown connection state", 24, 2, &_swiftEmptyArrayStorage);
LABEL_8:
          swift_unknownObjectRelease(v19);
          return swift_release();
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100046120()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t MetatypeMetadata;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  Swift::String v19;

  v1 = *v0;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(0xE000000000000000);
  v16 = 60;
  v17 = 0xE100000000000000;
  v15 = v1;
  MetatypeMetadata = swift_getMetatypeMetadata(v1);
  v18._countAndFlagsBits = String.init<A>(describing:)(&v15, MetatypeMetadata);
  sub_10004A984(v18);
  swift_bridgeObjectRelease(v1);
  v3._countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4 = sub_1000150C0((uint64_t *)&unk_1000853A0);
  sub_10003352C(&qword_1000870A8, (uint64_t *)&unk_1000853A0);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v5);
  sub_10004A984(v19);
  swift_bridgeObjectRelease(&unk_1000853A0);
  v6._object = (void *)0x800000010006DFB0;
  v6._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v6);
  v7 = (void *)nw_connection_copy_connected_remote_endpoint(*(uint64_t *)((char *)v0
                                                                       + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
  if (v7)
  {
    v8 = objc_msgSend(v7, "description");
    sub_100015474();
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

  }
  else
  {
    v11 = (void *)0xE600000000000000;
    v9 = 0x3E656E6F6E3CLL;
  }
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  sub_100015524();
  v13._countAndFlagsBits = 32032;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  return v16;
}

void sub_1000462A0()
{
  uint64_t v0;
  uint64_t v1;

  sub_100013AB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  v1 = sub_1000150C0((uint64_t *)&unk_1000853A0);
  sub_100013AF4(v1);
  sub_100016144(OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_peerConnectionsInfo));
  sub_100014510();
}

uint64_t sub_1000462F8()
{
  return sub_100048A18(sub_1000462A0);
}

uint64_t sub_100046304()
{
  return type metadata accessor for NWObjcTunnelConnectionWrapper(0);
}

uint64_t type metadata accessor for NWObjcTunnelConnectionWrapper(uint64_t a1)
{
  return sub_10002C934(a1, (uint64_t *)&unk_100086EE0, (uint64_t)&nominal type descriptor for NWObjcTunnelConnectionWrapper);
}

void sub_100046320(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_100066960;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10001E0BC(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_100066978;
    v4[5] = &unk_100066990;
    v4[6] = &unk_1000669A8;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
  }
}

uint64_t sub_1000463CC()
{
  return sub_100046120();
}

uint64_t sub_1000463EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100048CD4(&OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_identifier, a1);
}

uint64_t sub_1000463F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  sub_10000EC7C((unint64_t *)&unk_1000870C0, type metadata accessor for NWObjcTunnelConnectionWrapper);
  return StreamBasedTunnelConnection.send(packets:completion:)(a1, a2, a3, a4, v8);
}

uint64_t sub_100046468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  sub_10000EC7C((unint64_t *)&unk_1000870C0, type metadata accessor for NWObjcTunnelConnectionWrapper);
  return StreamBasedTunnelConnection.send(controlMessage:completion:)(a1, a2, a3, a4, v8);
}

uint64_t sub_1000464D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_10000EC7C((unint64_t *)&unk_1000870C0, type metadata accessor for NWObjcTunnelConnectionWrapper);
  return StreamBasedTunnelConnection.receivePackets(completion:)(a1, a2, a3, v6);
}

uint64_t sub_100046538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_10000EC7C((unint64_t *)&unk_1000870C0, type metadata accessor for NWObjcTunnelConnectionWrapper);
  return StreamBasedTunnelConnection.receiveControlMessage(completion:)(a1, a2, a3, v6);
}

void sub_100046598()
{
  sub_1000459CC();
}

void sub_1000465B8(NSObject *a1, uint64_t a2, uint64_t a3)
{
  sub_1000459DC(a1, a2, a3);
  sub_100014510();
}

uint64_t sub_1000465D4()
{
  return sub_10004572C();
}

uint64_t sub_1000465F4(__int16 a1, __int16 a2)
{
  if (a1 == 2)
    return a2 == 2;
  if (a1 == 3)
    return a2 == 3;
  if ((a2 & 0xFE) == 2)
    return 0;
  if (((a1 & 1) == 0) == (a2 & 1))
    return 0;
  else
    return ((a1 & 0x100) == 0) ^ ((unsigned __int16)(a2 & 0x100) >> 8);
}

uint64_t sub_10004666C(__int16 *a1, __int16 *a2)
{
  return sub_1000465F4(*a1, *a2);
}

uint64_t sub_100046678()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t result;
  uint64_t stream_usable_datagram_frame_size;
  unsigned int v6;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(NSObject **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  if (!v1)
  {
    LOWORD(v6) = 1280;
    return (unsigned __int16)v6;
  }
  sub_10004A938();
  v2 = nw_protocol_copy_quic_definition();
  v3 = nw_connection_copy_protocol_metadata(v1, v2);
  result = sub_100015DBC();
  if (v3)
  {
    stream_usable_datagram_frame_size = nw_quic_get_stream_usable_datagram_frame_size(v3);
    v6 = stream_usable_datagram_frame_size;
    v7 = static os_log_type_t.default.getter(stream_usable_datagram_frame_size);
    v8 = qword_1000886E0;
    v9 = v7;
    if (os_log_type_enabled((os_log_t)qword_1000886E0, v7))
    {
      v10 = (uint8_t *)sub_1000123C4(12);
      *(_DWORD *)v10 = 134217984;
      v16 = sub_10004A91C((uint64_t)v10, v11, (uint64_t)(v10 + 4), (uint64_t)(v10 + 12), v12, v13, v14, v15, v6);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v16, v17, v18);
      sub_1000118DC((void *)&_mh_execute_header, v8, v9, "Tunnel MTU datagaram = %ld", v10);
      sub_100012398((uint64_t)v10);
    }
    if (!v6)
    {
      type metadata accessor for VirtualInterface(0);
      LOWORD(v6) = static VirtualInterface.minSupportedMTU.getter();
    }
    sub_100015474();
    swift_unknownObjectRelease(v3);
    return (unsigned __int16)v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000467A0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const char *name;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream))
  {
    v15 = static os_log_type_t.fault.getter(a1);
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1000886E0, "Tunnel connection path nw_path_copy_interface: nil", 50, 2, &_swiftEmptyArrayStorage);
    return 0;
  }
  v2 = sub_10004A938();
  if (!nw_connection_copy_current_path(v2))
  {
LABEL_9:
    sub_100015474();
    return 0;
  }
  v3 = nw_path_copy_interface();
  if (!v3)
  {
    sub_100015DBC();
    goto LABEL_9;
  }
  v4 = v3;
  name = nw_interface_get_name(v3);
  v6 = String.init(cString:)(name);
  v8 = v7;
  v9 = static os_log_type_t.default.getter(v6);
  v10 = qword_1000886E0;
  v11 = v9;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v9))
  {
    swift_bridgeObjectRetain_n(v8, 2);
    v12 = (uint8_t *)sub_1000123C4(12);
    v13 = sub_1000123C4(32);
    v18 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain(v8);
    sub_100010D40(v6, v8, &v18);
    v17 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v12 + 4);
    swift_bridgeObjectRelease_n(v8, 3);
    sub_1000118DC((void *)&_mh_execute_header, v10, v11, "Tunnel connection path interface name: %s", v12);
    swift_arrayDestroy(v13, 1);
    sub_100012398(v13);
    sub_100012398((uint64_t)v12);
  }
  sub_100015474();
  swift_unknownObjectRelease(v4);
  sub_100015DBC();
  return v6;
}

uint64_t sub_100046968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  int v7;
  void (*v8)(char *);
  uint64_t v9;
  uint64_t *v10;
  void (*v11)(char *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for TunnelConnectionState(0);
  v2 = *(_QWORD *)(v1 - 8);
  result = __chkstk_darwin(v1, v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(unsigned __int8 *)(v0 + 16);
  if (v7 == 3)
  {
    v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
    v11 = *(void (**)(char *))(v0
                                        + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
    if (v11)
    {
      v12 = v10[1];
      (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v6, enum case for TunnelConnectionState.stopped(_:), v1);
      swift_retain(v12);
      v11(v6);
      sub_1000392D4((uint64_t)v11, v12);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
      v13 = *v10;
    }
    else
    {
      v13 = 0;
    }
    v14 = v10[1];
    *v10 = 0;
    v10[1] = 0;
    return sub_1000392D4(v13, v14);
  }
  else if (v7 == 2)
  {
    v8 = *(void (**)(char *))(v0
                                       + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
    if (v8)
    {
      v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler + 8);
      (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v6, enum case for TunnelConnectionState.ready(_:), v1);
      swift_retain(v9);
      v8(v6);
      sub_1000392D4((uint64_t)v8, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v6, v1);
    }
  }
  return result;
}

void sub_100046ABC(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;

  v7 = sub_1000144A0();
  Identifier.init()(v7, &protocol witness table for TunnelConnectionIdentifierCategory);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream) = 0;
  v8 = (_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
  *v8 = 0;
  v8[1] = 0;
  *(_WORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group) = a1;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection__allowLocalConnectionsOnly) = a2;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_peerConnectionsInfo) = a3;
  sub_1000123F0();
}

void sub_100046B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  Class isa;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD aBlock[6];

  v7 = type metadata accessor for TunnelPacket(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  sub_1000138DC();
  v58 = v10;
  v11 = sub_1000150C0(&qword_1000870E8);
  __chkstk_darwin(v11, v12);
  sub_1000138DC();
  v56 = v13;
  v14 = sub_1000150C0((uint64_t *)&unk_1000870F0);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (unint64_t *)((char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16, v19);
  v21 = (uint64_t *)((char *)&v53 - v20);
  v22 = *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  if (v22)
  {
    v23 = *(_QWORD *)(a1 + 16);
    if (v23 >> 60)
    {
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      sub_1000119C4();
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20);
      __break(1u);
    }
    else
    {
      v61 = v8;
      v54 = a2;
      v55 = a3;
      v53 = v22;
      swift_unknownObjectRetain_n(v22, 2);
      v60 = sub_1000123C4(8 * v23);
      v57 = a1;
      swift_bridgeObjectRetain(a1);
      v24 = 0;
      v25 = v7;
      v26 = v58;
      v59 = v18;
      while (1)
      {
        if (v24 == v23)
        {
          v27 = 1;
          v28 = v23;
          v29 = v61;
        }
        else
        {
          v29 = v61;
          if (v24 >= v23)
          {
            __break(1u);
            goto LABEL_15;
          }
          v28 = v24 + 1;
          v30 = v56 + *(int *)(v11 + 48);
          sub_10004A9AC(v57+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(_QWORD *)(v61 + 72) * v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 16));
          v31 = (char *)v18 + *(int *)(v11 + 48);
          *v18 = v24;
          v32 = v30;
          v26 = v58;
          (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v31, v32, v25);
          v27 = 0;
        }
        sub_100015664((uint64_t)v18, v27, 1, v11);
        sub_10004A84C((uint64_t)v18, (uint64_t)v21);
        if (sub_100015658((uint64_t)v21, 1, v11) == 1)
          break;
        v62 = v28;
        v33 = v23;
        v34 = *v21;
        v35 = v11;
        v36 = v21;
        v37 = sub_10004A9AC((uint64_t)v21 + *(int *)(v11 + 48), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 32));
        v38 = v29;
        v39 = v26;
        v40 = TunnelPacket.packetData.getter(v37);
        v41 = v25;
        v43 = v42;
        isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100015430(v40, v43);
        v45 = NWCreateDispatchDataFromNSData(isa);

        if (!v45)
          goto LABEL_16;
        *(_QWORD *)(v60 + 8 * v34) = v45;
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v41);
        v23 = v33;
        v25 = v41;
        v26 = v39;
        v11 = v35;
        v18 = v59;
        v21 = v36;
        v24 = v62;
      }
      v46 = v57;
      swift_bridgeObjectRelease(v57);
      if (HIDWORD(v23))
        goto LABEL_17;
      v47 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007C9C8, 48);
      v48 = v60;
      v47[2] = v60;
      v47[3] = v46;
      v49 = v55;
      v47[4] = v54;
      v47[5] = v49;
      aBlock[4] = sub_10004A8B4;
      aBlock[5] = v47;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000456F4;
      aBlock[3] = &unk_10007C9E0;
      v50 = _Block_copy(aBlock);
      swift_bridgeObjectRetain(v46);
      sub_1000124D0();
      swift_release();
      v51 = v53;
      nw_connection_write_multiple(v53, v48, v23, v50);
      swift_unknownObjectRelease_n(v51, 2);
      _Block_release(v50);
    }
  }
  else
  {
    v52 = static os_log_type_t.error.getter(0);
    os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, qword_1000886E0, "Tunnel stream trying to receive packets on a nil datagram stream", 64, 2, &_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100046F54(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = type metadata accessor for POSIXError(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a3 + 16);
  sub_10000EBC4();
  swift_arrayDestroy(a2, v13);
  swift_slowDealloc(a2, -1, -1);
  if ((_DWORD)a1)
  {
    v14 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v15 = POSIXError.init(uncheckedCode:userInfo:)(a1, v14);
    v16 = POSIXError._nsError.getter(v15);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  else
  {
    v16 = 0;
  }
  a4(v16);
  return swift_errorRelease(v16);
}

void sub_100047074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream);
  if (v6)
  {
    sub_100016060();
    v8 = type metadata accessor for NWObjcTunnelConnectionWrapper(0);
    sub_10000EC7C((unint64_t *)&unk_1000870C0, type metadata accessor for NWObjcTunnelConnectionWrapper);
    v10 = v9;
    sub_10000E49C();
    StreamBasedTunnelConnection.send(controlMessage:completion:)(v5, v4, a3, v8, v10);
    sub_10001363C(v6);
  }
  else
  {
    sub_1000123F0();
  }
}

uint64_t sub_1000470FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  if (v4)
  {
    sub_100016060();
    v5 = sub_1000138D4((uint64_t)&unk_10007C950, 24);
    *(_QWORD *)(v5 + 16) = &_swiftEmptyArrayStorage;
    v6 = sub_1000138D4((uint64_t)&unk_10007C7C0, 24);
    sub_100014520(v6);
    v7 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007C978, 48);
    v7[2] = v6;
    v7[3] = v3;
    v7[4] = v2;
    v7[5] = v5;
    v8 = sub_100011904((uint64_t)sub_10000E5B4, (uint64_t)_NSConcreteStackBlock, 1107296256, v11, v12);
    swift_unknownObjectRetain_n(v4, 2);
    sub_1000124D0();
    swift_retain(v5);
    swift_release();
    nw_connection_receive_multiple(v4, 1, 16, v8);
    swift_unknownObjectRelease_n(v4, 2);
    _Block_release(v8);
    return sub_100015A44();
  }
  else
  {
    v10 = static os_log_type_t.error.getter(a1);
    return os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1000886E0, "Tunnel stream trying to receive packets on a nil datagram stream", 64, 2, &_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100047260(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(__n128), uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t is_wake_packet;
  int v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint8_t *v55;
  uint8_t *v56;
  int v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(__n128);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[4];
  char v69[32];

  v60 = a8;
  v64 = a7;
  v65 = a6;
  v62 = a3;
  v63 = a1;
  v61 = type metadata accessor for TunnelPacket(0);
  v11 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61, v12);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for RemotePairingError(0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for NWError(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  a5 += 16;
  swift_beginAccess(a5, v69, 0, 0);
  result = swift_weakLoadStrong(a5);
  v66 = result;
  if (result)
  {
    if (a2)
    {
      is_wake_packet = nw_content_context_get_is_wake_packet(a2);
      if ((_DWORD)is_wake_packet)
      {
        v26 = static os_log_type_t.default.getter(is_wake_packet);
        v59 = powerLog.getter();
        if (os_log_type_enabled(v59, (os_log_type_t)v26))
        {
          swift_retain_n(v66, 2);
          v27 = (uint8_t *)swift_slowAlloc(12, -1);
          v58 = swift_slowAlloc(32, -1);
          v68[0] = v58;
          v57 = v26;
          *(_DWORD *)v27 = 136315138;
          v55 = v27 + 4;
          v56 = v27;
          v67 = *(_QWORD *)(v66 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_peerConnectionsInfo);
          swift_bridgeObjectRetain(v67);
          v28 = sub_1000150C0(&qword_100086EA0);
          v29 = String.init<A>(describing:)(&v67, v28);
          v31 = v30;
          sub_100010D40(v29, v30, v68);
          v67 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v55);
          swift_release_n(v66, 2);
          swift_bridgeObjectRelease(v31);
          v33 = v56;
          _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v57, "Received a wake packet from: %s", v56, 0xCu);
          v34 = v58;
          swift_arrayDestroy(v58, 1);
          swift_slowDealloc(v34, -1, -1);
          swift_slowDealloc(v33, -1, -1);
        }

      }
    }
    if (a4)
    {
      v35 = swift_unknownObjectRetain_n(a4, 2);
      NWError.init(_:)(v35);
      sub_10000EC7C((unint64_t *)&unk_1000870D0, (uint64_t (*)(uint64_t))&type metadata accessor for NWError);
      v37 = swift_allocError(v19, v36, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(v38, v23, v19);
      ((void (*)(uint64_t, uint64_t))v65)(v37, 1);
      swift_errorRelease(v37);
      swift_unknownObjectRelease(a4);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    }
    else
    {
      v39 = NWCreateNSDataFromDispatchData(v63);
      if (v39)
      {
        v40 = (void *)v39;
        v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v43 = v42;

        sub_100015614(v41, v43);
        TunnelPacket.init(data:)(v41, v43);
        v47 = (_QWORD *)(v60 + 16);
        swift_beginAccess(v60 + 16, v68, 33, 0);
        sub_100048F9C();
        v48 = *(_QWORD *)(*v47 + 16);
        sub_1000490AC(v48);
        v49 = *v47;
        *(_QWORD *)(v49 + 16) = v48 + 1;
        v50 = v49
            + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
            + *(_QWORD *)(v11 + 72) * v48;
        v51 = v61;
        (*(void (**)(unint64_t, char *, uint64_t))(v11 + 16))(v50, v14, v61);
        swift_endAccess(v68);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v51);
        if ((v62 & 1) != 0)
        {
          swift_beginAccess(v47, v68, 0, 0);
          v52 = *v47;
          v53 = swift_bridgeObjectRetain(*v47);
          v65(v53);
          swift_release();
          sub_100015430(v41, v43);
          return swift_bridgeObjectRelease(v52);
        }
        else
        {
          swift_release();
          return sub_100015430(v41, v43);
        }
      }
      else
      {
        sub_10000EC7C((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
        static Error<>.dataCorrupted.getter(v15, v44);
        sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
        v46 = swift_allocError(v15, v45, 0, 0);
        Error<>.init(_:_:)(v18, 0xD000000000000034, 0x800000010006E500, v15);
        ((void (*)(uint64_t, uint64_t))v65)(v46, 1);
        swift_errorRelease(v46);
        return swift_release();
      }
    }
  }
  return result;
}

void sub_1000478B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream);
  if (v3)
  {
    v6 = type metadata accessor for NWObjcTunnelConnectionWrapper(0);
    sub_10000EC7C((unint64_t *)&unk_1000870C0, type metadata accessor for NWObjcTunnelConnectionWrapper);
    v8 = v7;
    sub_10000E49C();
    StreamBasedTunnelConnection.receiveControlMessage(completion:)(a1, a2, v6, v8);
    sub_10001363C(v3);
  }
  else
  {
    sub_1000123F0();
  }
}

uint64_t sub_100047934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;

  nw_connection_group_cancel(*(nw_connection_group_t *)(v0
                                                      + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group));
  v1 = OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream);
  if (v2)
    nw_connection_cancel(*(nw_connection_t *)(v2
                                            + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
  v3 = OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream;
  v4 = *(NSObject **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  if (v4)
    nw_connection_cancel(v4);
  *(_QWORD *)(v0 + v1) = 0;
  swift_release();
  v5 = *(_QWORD *)(v0 + v3);
  *(_QWORD *)(v0 + v3) = 0;
  swift_unknownObjectRelease(v5);
  *(_WORD *)(v0 + 16) = 3;
  return sub_100046968();
}

void sub_1000479B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v7)(uint64_t);
  uint64_t (**v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v7 = (uint64_t (*)(uint64_t))sub_1000138D4((uint64_t)&unk_10007C798, 40);
  *((_QWORD *)v7 + 2) = a1;
  *((_QWORD *)v7 + 3) = a2;
  *((_QWORD *)v7 + 4) = a3;
  v8 = (uint64_t (**)(uint64_t))(v3
                                        + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
  v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler + 8);
  *v8 = sub_10004A5B0;
  v8[1] = v7;
  v11 = a1;
  sub_1000124D0();
  sub_1000392D4(v9, v10);
  v12 = OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group;
  v13 = *(NSObject **)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group);
  v14 = sub_1000138D4((uint64_t)&unk_10007C7C0, 24);
  sub_100014520(v14);
  v15 = sub_1000138D4((uint64_t)&unk_10007C7E8, 24);
  swift_unknownObjectWeakInit(v15 + 16, v13);
  v16 = sub_1000138D4((uint64_t)&unk_10007C810, 32);
  *(_QWORD *)(v16 + 16) = v14;
  *(_QWORD *)(v16 + 24) = v15;
  v17 = sub_100011904((uint64_t)sub_100016A04, (uint64_t)_NSConcreteStackBlock, 1107296256, v23, v25);
  swift_unknownObjectRetain(v13);
  swift_release();
  nw_connection_group_set_state_changed_handler(v13, v17);
  _Block_release(v17);
  sub_100012524();
  v18 = *(NSObject **)(v3 + v12);
  v19 = sub_1000138D4((uint64_t)&unk_10007C7C0, 24);
  sub_100014520(v19);
  v20 = sub_1000138D4((uint64_t)&unk_10007C860, 32);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = v11;
  v21 = sub_100011904((uint64_t)sub_1000456B0, (uint64_t)_NSConcreteStackBlock, 1107296256, v24, v26);
  v22 = v11;
  swift_unknownObjectRetain(v18);
  sub_100015A44();
  nw_connection_group_set_new_connection_handler(v18, v21);
  _Block_release(v21);
  sub_100012524();
  nw_connection_group_set_queue(*(nw_connection_group_t *)(v3 + v12), v22);
  nw_connection_group_start(*(nw_connection_group_t *)(v3 + v12));
  sub_1000159FC();
}

uint64_t sub_100047B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD aBlock[6];

  v34 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v11 - 8);
  v32 = v11;
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TunnelConnectionState(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15, v18);
  v19 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, v15);
  v20 = *(unsigned __int8 *)(v16 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(&unk_10007C900, v21 + v17, v20 | 7);
  *(_QWORD *)(v22 + 16) = a3;
  *(_QWORD *)(v22 + 24) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v22 + v21, v19, v15);
  aBlock[4] = sub_10004A7C4;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E208;
  aBlock[3] = &unk_10007C918;
  v23 = _Block_copy(aBlock);
  v24 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v24);
  v35 = &_swiftEmptyArrayStorage;
  sub_10000EC7C((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v26 = v25;
  v27 = sub_1000150C0(&qword_1000850F0);
  sub_10003352C((unint64_t *)&qword_1000853C0, &qword_1000850F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v27, v28, v7, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
  return swift_release();
}

uint64_t sub_100047DFC(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t Strong;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[24];
  char v52[24];

  v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v52, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v9 = a4 + 16;
    swift_beginAccess(v9, v51, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v9);
    if (Strong)
    {
      v11 = Strong;
      switch(a1)
      {
        case 0:
          if (a2)
          {
            swift_getObjectType(a2);
            sub_1000449A4();
            v13 = v12;
          }
          else
          {
            v36 = type metadata accessor for RemotePairingError(0);
            sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
            v13 = swift_allocError(v36, v37, 0, 0);
            sub_10000EC7C((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
            v12 = static Error<>.networkingError.getter(v36, v38);
          }
          v39 = static os_log_type_t.error.getter(v12);
          v40 = qword_1000886E0;
          v41 = v39;
          if (os_log_type_enabled((os_log_t)qword_1000886E0, v39))
          {
            swift_errorRetain(v13);
            swift_errorRetain(v13);
            v42 = (uint8_t *)swift_slowAlloc(12, -1);
            v43 = swift_slowAlloc(32, -1);
            v49 = v13;
            v50 = v43;
            *(_DWORD *)v42 = 136315138;
            swift_errorRetain(v13);
            v44 = sub_1000150C0(&qword_100085A00);
            v45 = String.init<A>(describing:)(&v49, v44);
            v47 = v46;
            sub_100010D40(v45, v46, &v50);
            v49 = v48;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v42 + 4);
            swift_bridgeObjectRelease(v47);
            swift_errorRelease(v13);
            swift_errorRelease(v13);
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "Tunnel connection group invalid state %s", v42, 0xCu);
            swift_arrayDestroy(v43, 1);
            swift_slowDealloc(v43, -1, -1);
            swift_slowDealloc(v42, -1, -1);
          }
          nw_connection_group_cancel(v11);
          sub_100047934();
          swift_unknownObjectRelease(v11);
          swift_release();
          return swift_errorRelease(v13);
        case 1:
          v18 = static os_log_type_t.default.getter(Strong);
          os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, qword_1000886E0, "Tunnel connection group waiting", 31, 2, &_swiftEmptyArrayStorage);
          goto LABEL_18;
        case 2:
          v19 = static os_log_type_t.default.getter(Strong);
          os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_1000886E0, "Tunnel connection group ready and established", 45, 2, &_swiftEmptyArrayStorage);
          goto LABEL_18;
        case 3:
          v20 = static os_log_type_t.error.getter(Strong);
          v21 = qword_1000886E0;
          v22 = v20;
          if (!os_log_type_enabled((os_log_t)qword_1000886E0, v20))
            goto LABEL_17;
          swift_unknownObjectRetain_n(a2, 2);
          v17 = (uint8_t *)swift_slowAlloc(12, -1);
          v23 = swift_slowAlloc(32, -1);
          v49 = a2;
          v50 = v23;
          *(_DWORD *)v17 = 136315138;
          swift_unknownObjectRetain(a2);
          v24 = sub_1000150C0((uint64_t *)&unk_100086460);
          v25 = String.init<A>(describing:)(&v49, v24);
          v27 = v26;
          sub_100010D40(v25, v26, &v50);
          v49 = v28;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v17 + 4);
          swift_unknownObjectRelease_n(a2, 2);
          swift_bridgeObjectRelease(v27);
          v29 = "Tunnel connection group failed %s";
          goto LABEL_15;
        case 4:
          v30 = static os_log_type_t.default.getter(Strong);
          v21 = qword_1000886E0;
          v22 = v30;
          if (!os_log_type_enabled((os_log_t)qword_1000886E0, v30))
            goto LABEL_17;
          swift_unknownObjectRetain_n(a2, 2);
          v17 = (uint8_t *)swift_slowAlloc(12, -1);
          v23 = swift_slowAlloc(32, -1);
          v49 = a2;
          v50 = v23;
          *(_DWORD *)v17 = 136315138;
          swift_unknownObjectRetain(a2);
          v31 = sub_1000150C0((uint64_t *)&unk_100086460);
          v32 = String.init<A>(describing:)(&v49, v31);
          v34 = v33;
          sub_100010D40(v32, v33, &v50);
          v49 = v35;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v17 + 4);
          swift_unknownObjectRelease_n(a2, 2);
          swift_bridgeObjectRelease(v34);
          v29 = "Tunnel connection group canceled %s";
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v21, v22, v29, v17, 0xCu);
          swift_arrayDestroy(v23, 1);
          swift_slowDealloc(v23, -1, -1);
          break;
        default:
          v14 = static os_log_type_t.default.getter(Strong);
          v15 = qword_1000886E0;
          v16 = v14;
          if (!os_log_type_enabled((os_log_t)qword_1000886E0, v14))
            goto LABEL_17;
          v17 = (uint8_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v17 = 67109120;
          LODWORD(v50) = a1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, (char *)&v50 + 4, v17 + 4);
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Tunnel connection group unknown state %u", v17, 8u);
          break;
      }
      swift_slowDealloc(v17, -1, -1);
LABEL_17:
      nw_connection_group_cancel(v11);
      sub_100047934();
LABEL_18:
      swift_unknownObjectRelease(v11);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100048394(NSObject *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = static os_log_type_t.default.getter(result);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1000886E0, "Tunnel connection group set new connection handler", 50, 2, &_swiftEmptyArrayStorage);
    sub_100048434(a1, a3);
    return swift_release();
  }
  return result;
}

void sub_100048434(NSObject *a1, NSObject *a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];

  v5 = swift_allocObject(&unk_10007C8B0, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v2;
  v7[4] = sub_10004A654;
  v7[5] = v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100016A04;
  v7[3] = &unk_10007C8C8;
  v6 = _Block_copy(v7);
  swift_unknownObjectRetain(a1);
  swift_retain(v2);
  swift_release();
  nw_connection_set_state_changed_handler(a1, v6);
  _Block_release(v6);
  nw_connection_set_queue(a1, a2);
  nw_connection_start(a1);
}

uint64_t sub_10004850C(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  os_log_type_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  __int16 v22;
  os_log_type_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  switch((int)a1)
  {
    case 1:
      v6 = static os_log_type_t.error.getter(a1);
      os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, qword_1000886E0, "Tunnel stream connection waiting, error", 39, 2, &_swiftEmptyArrayStorage);
      goto LABEL_21;
    case 2:
      v12 = static os_log_type_t.default.getter(a1);
      return os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, qword_1000886E0, "Tunnel stream connection preparing", 34, 2, &_swiftEmptyArrayStorage);
    case 3:
      swift_getObjectType(a3);
      v14 = sub_1000111F0();
      if (v14
        && *(_BYTE *)(a4 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection__allowLocalConnectionsOnly) != 1)
      {
        v39 = static os_log_type_t.error.getter(v14);
        os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, qword_1000886E0, "Rejecting tunnel connection originating from local machine", 58, 2, &_swiftEmptyArrayStorage);
LABEL_21:
        nw_connection_cancel(a3);
        return sub_100047934();
      }
      else
      {
        v15 = sub_100044D14();
        v16 = v15;
        v17 = static os_log_type_t.default.getter(v15);
        v18 = qword_1000886E0;
        v19 = v17;
        if (os_log_type_enabled((os_log_t)qword_1000886E0, v17))
        {
          v20 = (uint8_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v20 = 67109120;
          LODWORD(v41) = v16 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 4, v20 + 4);
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Tunnel stream (datagram=%{BOOL}d) connection established", v20, 8u);
          swift_slowDealloc(v20, -1, -1);
        }
        if ((v16 & 1) != 0)
        {
          v21 = *(_QWORD *)(a4 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
          *(_QWORD *)(a4 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream) = a3;
          swift_unknownObjectRelease(v21);
          if ((*(_WORD *)(a4 + 16) & 0xFE) != 2)
          {
            if ((*(_WORD *)(a4 + 16) & 0x100) != 0)
              v22 = 2;
            else
              v22 = 1;
            *(_WORD *)(a4 + 16) = v22;
          }
          swift_unknownObjectRetain(a3);
        }
        else
        {
          v34 = type metadata accessor for NWObjcTunnelConnectionWrapper(0);
          v35 = swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
          v36 = swift_unknownObjectRetain(a3);
          sub_1000458A0(v36, 0, 0);
          *(_QWORD *)(a4 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream) = v35;
          swift_release();
          v37 = *(_WORD *)(a4 + 16);
          if ((v37 & 0xFE) != 2)
          {
            if ((v37 & 1) != 0)
              v38 = 2;
            else
              v38 = 256;
            *(_WORD *)(a4 + 16) = v38;
          }
        }
        return sub_100046968();
      }
    case 4:
      v24 = static os_log_type_t.error.getter(a1);
      v25 = qword_1000886E0;
      v26 = v24;
      if (!os_log_type_enabled((os_log_t)qword_1000886E0, v24))
        goto LABEL_21;
      swift_unknownObjectRetain_n(a2, 2);
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v40 = a2;
      v41 = v27;
      *(_DWORD *)v11 = 136315138;
      swift_unknownObjectRetain(a2);
      v28 = sub_1000150C0((uint64_t *)&unk_100086460);
      v29 = String.init<A>(describing:)(&v40, v28);
      v31 = v30;
      sub_100010D40(v29, v30, &v41);
      v40 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v11 + 4);
      swift_unknownObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Tunnel stream connection failed, error: %s", v11, 0xCu);
      swift_arrayDestroy(v27, 1);
      swift_slowDealloc(v27, -1, -1);
      goto LABEL_19;
    case 5:
      v33 = static os_log_type_t.default.getter(a1);
      os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, qword_1000886E0, "Tunnel stream connection cancelled", 34, 2, &_swiftEmptyArrayStorage);
      goto LABEL_21;
    default:
      v7 = a1;
      v8 = static os_log_type_t.default.getter(a1);
      v9 = qword_1000886E0;
      v10 = v8;
      if (!os_log_type_enabled((os_log_t)qword_1000886E0, v8))
        goto LABEL_21;
      v11 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 67109120;
      LODWORD(v41) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 4, v11 + 4);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Tunnel stream unknown connection state %u", v11, 8u);
LABEL_19:
      swift_slowDealloc(v11, -1, -1);
      goto LABEL_21;
  }
}

void sub_10004898C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1000150C0((uint64_t *)&unk_1000853A0);
  sub_100013AF4(v1);
  sub_100016144(OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group);
  swift_release();
  sub_100016144(OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_peerConnectionsInfo));
  sub_1000392D4(*(_QWORD *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler), *(_QWORD *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler + 8));
  sub_100014510();
}

uint64_t sub_100048A0C()
{
  return sub_100048A18(sub_10004898C);
}

uint64_t sub_100048A18(void (*a1)(void))
{
  uint64_t v1;

  a1();
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_100048A3C()
{
  return type metadata accessor for NWQUICTunnelConnection(0);
}

uint64_t type metadata accessor for NWQUICTunnelConnection(uint64_t a1)
{
  return sub_10002C934(a1, qword_100086FD8, (uint64_t)&nominal type descriptor for NWQUICTunnelConnection);
}

void sub_100048A58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_1000669E8;
  sub_10001E0BC(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100066978;
    v4[3] = &unk_100066990;
    v4[4] = &unk_100066990;
    v4[5] = &unk_100066990;
    v4[6] = &unk_1000669A8;
    v4[7] = &unk_100066A00;
    swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
  }
}

_WORD *initializeBufferWithCopyOfBuffer for NWQUICTunnelConnection.State(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NWQUICTunnelConnection.State(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 1;
      if (v7 > 1)
        return result;
    }
    return 0;
  }
  v2 = a2 + 65283;
  if (a2 + 65283 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (v2 < 0xFF0000)
    v3 = 1;
  if (v2 >= 0x10000)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_100048B58 + 4 * byte_1000668EF[v4]))();
}

uint64_t storeEnumTagSinglePayload for NWQUICTunnelConnection.State(_WORD *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 65283;
  if (a3 + 65283 <= 0xFFFEFFFF)
    v4 = 2;
  else
    v4 = 4;
  if (v3 < 0xFF0000)
    v4 = 1;
  if (v3 >= 0x10000)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFD)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100048C08 + 4 * byte_1000668F9[v5]))();
  *a1 = a2 - 253;
  return ((uint64_t (*)(void))((char *)sub_100048C3C + 4 * byte_1000668F4[v5]))();
}

uint64_t sub_100048C3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_100048C44(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x100048C4CLL);
  return result;
}

uint64_t sub_100048C58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x100048C60);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100048C64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100048C6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100048C78(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_WORD *sub_100048C94(_WORD *result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *result = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWQUICTunnelConnection.State()
{
  return &type metadata for NWQUICTunnelConnection.State;
}

uint64_t sub_100048CC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100048CD4(&OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_identifier, a1);
}

uint64_t sub_100048CD4@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2 + *a1;
  v5 = sub_1000150C0((uint64_t *)&unk_1000853A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void sub_100048D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100046B54(a1, a2, a3);
}

void sub_100048D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100047074(a1, a2, a3);
}

uint64_t sub_100048D5C(uint64_t a1)
{
  return sub_1000470FC(a1);
}

void sub_100048D7C(uint64_t a1, uint64_t a2)
{
  sub_1000478B0(a1, a2);
}

uint64_t sub_100048D9C()
{
  return sub_100047934();
}

void sub_100048DBC(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000479B8(a1, a2, a3);
  sub_100014510();
}

uint64_t sub_100048DD8()
{
  return sub_100046678() & 0x1FFFF;
}

uint64_t sub_100048E04(uint64_t a1)
{
  return sub_1000467A0(a1);
}

void sub_100048E24()
{
  sub_10000EC7C((unint64_t *)&unk_100087098, type metadata accessor for NWObjcTunnelConnectionWrapper);
}

uint64_t sub_100048E50(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100048E60(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void sub_100048E94()
{
  sub_100048F44();
}

void sub_100048EA0()
{
  sub_100048EBC((uint64_t)&unk_100087150, (uint64_t)sub_1000499C0, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100049F7C);
}

void sub_100048EBC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, _QWORD *))
{
  uint64_t *v3;
  void (*v4)(_QWORD, uint64_t, _QWORD *, uint64_t);
  uint64_t *v5;
  uint64_t v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  sub_100016060();
  v7 = *v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v7;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
  {
    sub_100049288(isUniquelyReferenced_nonNull_native, *(_QWORD *)(v7 + 16) + 1, 1, v7, v5, v4, a3);
    *v3 = v9;
  }
  sub_1000123F0();
}

void sub_100048F1C()
{
  sub_100048EBC((uint64_t)&qword_100087148, (uint64_t)sub_1000498CC, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100049F7C);
}

void sub_100048F38()
{
  sub_100048F44();
}

void sub_100048F44()
{
  _QWORD *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v3;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100049350();
    *v0 = v3;
  }
}

uint64_t sub_100048F9C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!(_DWORD)result)
  {
    result = sub_100049520(result, *(_QWORD *)(v1 + 16) + 1, 1, v1, &qword_1000870E0, (void (*)(_QWORD))&type metadata accessor for TunnelPacket);
    *v0 = result;
  }
  return result;
}

void sub_100048FF4()
{
  sub_10004907C();
}

void sub_100049000()
{
  sub_10004901C();
}

void sub_10004901C()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(_QWORD, uint64_t, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t *v4;
  void (*v5)(uint64_t, uint64_t, _QWORD *);
  unint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;

  sub_10004A960();
  if (!(v8 ^ v9 | v7))
  {
    sub_100049288(v6 > 1, v1, 1, v3, v4, v2, v5);
    *v0 = v10;
  }
}

void sub_100049054()
{
  sub_10004901C();
}

void sub_100049070()
{
  sub_10004907C();
}

void sub_10004907C()
{
  _QWORD *v0;
  char v1;
  char v2;
  char v3;
  uint64_t v4;

  sub_10004A960();
  if (!(v2 ^ v3 | v1))
  {
    sub_100049350();
    *v0 = v4;
  }
}

uint64_t sub_1000490AC(uint64_t result)
{
  uint64_t *v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
  {
    result = sub_100049520(v2 > 1, result + 1, 1, *v1, &qword_1000870E0, (void (*)(_QWORD))&type metadata accessor for TunnelPacket);
    *v1 = result;
  }
  return result;
}

void sub_1000490F8()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  sub_10004A92C();
  if ((v3 & 1) != 0)
  {
    sub_100015714();
    if (v4 != v5)
    {
      sub_10004A910();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_100015958();
    }
  }
  sub_10001660C();
  if (v2)
  {
    v6 = sub_1000150C0(&qword_100087130);
    v7 = (const void *)sub_1000138D4(v6, 40 * v2 + 32);
    sub_1000119E8(v7);
    *(_QWORD *)(v2 + 16) = v1;
    *(_QWORD *)(v2 + 24) = 2 * (v8 / 40);
  }
  if ((v0 & 1) != 0)
  {
    v9 = (char *)sub_1000158F4();
    sub_100049E6C(v9, v10, v11);
    sub_100015B54();
  }
  else
  {
    v12 = sub_100011678();
    sub_1000496C0(v12, v13, v14, v15);
  }
  sub_1000123F0();
}

uint64_t sub_1000491A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100049520(a1, a2, a3, a4, &qword_100087128, (void (*)(_QWORD))&type metadata accessor for PairedHostInfo);
}

void sub_1000491B4()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  sub_10004A92C();
  if ((v2 & 1) != 0)
  {
    sub_100015714();
    if (v3 != v4)
    {
      sub_10004A910();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_100015958();
    }
  }
  sub_10001660C();
  if (v1)
  {
    v5 = sub_1000150C0(&qword_100087120);
    v6 = (const void *)sub_1000138D4(v5, 8 * v1 + 32);
    sub_1000119E8(v6);
    sub_1000155F0(v7);
  }
  if ((v0 & 1) != 0)
  {
    v8 = (char *)sub_1000158F4();
    sub_100049EF8(v8, v9, v10);
    sub_100015B54();
  }
  else
  {
    v11 = sub_100011678();
    sub_1000497DC(v11, v12, v13, v14);
  }
  sub_100013AE8();
}

void sub_100049250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100049288(a1, a2, a3, a4, &qword_100087148, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))sub_1000498CC, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100049F7C);
}

void sub_10004926C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100049288(a1, a2, a3, a4, (uint64_t *)&unk_100087150, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))sub_1000499C0, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100049F7C);
}

void sub_100049288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD, uint64_t, _QWORD *, uint64_t), void (*a7)(uint64_t, uint64_t, _QWORD *))
{
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;

  v10 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100015714();
    if (v12 != v13)
    {
      sub_10004A910();
      if (v12)
      {
        __break(1u);
        return;
      }
      sub_100015958();
    }
  }
  else
  {
    v11 = a2;
  }
  v14 = *(_QWORD *)(a4 + 16);
  if (v11 <= v14)
    v15 = *(_QWORD *)(a4 + 16);
  else
    v15 = v11;
  if (v15)
  {
    v16 = sub_100015A8C(a1, a2, a3, a4, a5);
    v17 = (_QWORD *)sub_1000138D4(v16, 32 * v15 + 32);
    v18 = j__malloc_size(v17);
    v17[2] = v14;
    v17[3] = 2 * ((uint64_t)(v18 - 32) / 32);
  }
  else
  {
    v17 = &_swiftEmptyArrayStorage;
  }
  v19 = v17 + 4;
  if ((v10 & 1) != 0)
  {
    a7(a4 + 32, v14, v19);
    sub_100015B54();
  }
  else
  {
    a6(0, v14, v19, a4);
  }
  sub_1000123F0();
}

void sub_100049350()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  sub_10004A92C();
  if ((v2 & 1) != 0)
  {
    sub_100015714();
    if (v3 != v4)
    {
      sub_10004A910();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_100015958();
    }
  }
  sub_10001660C();
  if (v1)
  {
    v10 = sub_100015A8C(v5, v6, v7, v8, v9);
    v11 = (const void *)sub_1000138D4(v10, 16 * v1 + 32);
    sub_1000119E8(v11);
    sub_1000155F0(v12);
  }
  if ((v0 & 1) != 0)
  {
    v13 = (char *)sub_1000158F4();
    sub_100049FD8(v13, v14, v15);
    sub_100015B54();
  }
  else
  {
    v16 = sub_100011678();
    sub_100049AB4(v16, v17, v18, v19);
  }
  sub_100013AE8();
}

void sub_1000493E4()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  sub_10004A92C();
  if ((v3 & 1) != 0)
  {
    sub_100015714();
    if (v4 != v5)
    {
      sub_10004A910();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_100015958();
    }
  }
  sub_10001660C();
  if (v2)
  {
    v6 = sub_1000150C0(&qword_100087110);
    v7 = (_QWORD *)sub_1000138D4(v6, v2 + 32);
    v8 = j__malloc_size(v7);
    v7[2] = v1;
    v7[3] = 2 * v8 - 64;
  }
  if ((v0 & 1) != 0)
  {
    v9 = (char *)sub_1000158F4();
    sub_10004A030(v9, v10, v11);
    sub_100015B54();
  }
  else
  {
    v12 = sub_100011678();
    sub_100049B94(v12, v13, v14, v15);
  }
  sub_100013AE8();
}

void sub_100049484()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  sub_10004A92C();
  if ((v2 & 1) != 0)
  {
    sub_100015714();
    if (v3 != v4)
    {
      sub_10004A910();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_100015958();
    }
  }
  sub_10001660C();
  if (v1)
  {
    v5 = sub_1000150C0(&qword_100087118);
    v6 = (const void *)sub_1000138D4(v5, 4 * v1 + 32);
    sub_1000119E8(v6);
    sub_1000155F0(v7);
  }
  if ((v0 & 1) != 0)
  {
    v8 = (char *)sub_1000158F4();
    sub_10004A0B0(v8, v9, v10);
    sub_100015B54();
  }
  else
  {
    v11 = sub_100011678();
    sub_100049C80(v11, v12, v13, v14);
  }
  sub_100013AE8();
}

uint64_t sub_100049520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD))
{
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  const char *v26;
  uint64_t v27;

  v8 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100015714();
    if (v10 != v11)
    {
      sub_10004A910();
      if (v10)
      {
        __break(1u);
LABEL_23:
        sub_1000119C4();
        v26 = "Division by zero";
        v27 = 16;
LABEL_25:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v26, v27, 2, "Swift/IntegerTypes.swift", 24);
        __break(1u);
        return result;
      }
      sub_100015958();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v9;
  if (!v13)
  {
    v19 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v14 = sub_100015A8C(a1, a2, a3, a4, a5);
  v15 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (_QWORD *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  v20 = j__malloc_size(v19);
  if (!v16)
    goto LABEL_23;
  if (v20 - v18 == 0x8000000000000000 && v16 == -1)
  {
    sub_1000119C4();
    v26 = "Division results in an overflow";
    v27 = 31;
    goto LABEL_25;
  }
  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  v22 = *(unsigned __int8 *)(*(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8) + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = (unint64_t)v19 + v23;
  if ((v8 & 1) != 0)
  {
    sub_10004A134(a4 + v23, v12, v24, a6);
    sub_100015B54();
  }
  else
  {
    sub_100049D70(0, v12, v24, a4, (uint64_t (*)(_QWORD))a6);
  }
  return (uint64_t)v19;
}

uint64_t sub_1000496C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  const char *v11;
  uint64_t v12;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v11 = "UnsafeMutablePointer.initialize with negative count";
    v12 = 51;
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v4;
  if (v7 >= v8 || v7 + 40 * v4 <= a3)
  {
    sub_1000150C0(&qword_100087138);
    swift_arrayInitWithCopy(a3, v7);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  v11 = "UnsafeMutablePointer.initialize overlapping range";
  v12 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v11, v12, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

char *sub_1000497DC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  char *result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 8 * a1 + 32);
  v7 = &__dst[8 * v4];
  if (v6 >= v7 || &v6[8 * v4] <= __dst)
  {
    memcpy(__dst, v6, 8 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1000498CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1000499C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

void sub_100049AB4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_1000119C4();
    v9 = "UnsafeMutablePointer.initialize with negative count";
    v10 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  if (v6 >= a3 + 16 * v4 || v6 + 16 * v4 <= a3)
  {
    sub_1000150C0(&qword_100086BD0);
    swift_arrayInitWithCopy(a3, v6);
    sub_100015524();
    sub_1000165A0();
    return;
  }
  sub_1000119C4();
  v9 = "UnsafeMutablePointer.initialize overlapping range";
  v10 = 49;
LABEL_11:
  sub_100015CC4((uint64_t)"Fatal error", 11, 2, (uint64_t)v9, v10, v8, (uint64_t)"Swift/UnsafePointer.swift");
  __break(1u);
}

char *sub_100049B94(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v6;
  char *v7;
  char *result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = (char *)(a4 + a1 + 32);
  v7 = &__dst[v4];
  if (v6 >= &__dst[v4] || &v6[v4] <= __dst)
  {
    memcpy(__dst, v6, v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

char *sub_100049C80(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  char *result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 4 * a1 + 32);
  v7 = &__dst[4 * v4];
  if (v6 >= v7 || &v6[4 * v4] <= __dst)
  {
    memcpy(__dst, v6, 4 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_100049D70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_1000119C4();
    v19 = "UnsafeMutablePointer.initialize with negative count";
    v20 = 51;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3, v12);
    sub_100015524();
    return v14;
  }
  sub_1000119C4();
  v19 = "UnsafeMutablePointer.initialize overlapping range";
  v20 = 49;
LABEL_11:
  result = sub_100015CC4((uint64_t)"Fatal error", 11, 2, (uint64_t)v19, v20, v18, (uint64_t)"Swift/UnsafePointer.swift");
  __break(1u);
  return result;
}

char *sub_100049E6C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

char *sub_100049EF8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

char *sub_100049F7C(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0)
  {
    sub_1000119C4();
    result = (char *)sub_10001554C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_1000161C4(a3, result);
  }
  return result;
}

char *sub_100049FD8(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0)
  {
    sub_1000119C4();
    result = (char *)sub_10001554C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_1000161C4(a3, result);
  }
  return result;
}

char *sub_10004A030(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *sub_10004A0B0(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[4 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 4 * a2);
  }
  return __src;
}

uint64_t sub_10004A134(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD))
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 < 0)
  {
    sub_1000119C4();
    result = sub_10001554C((uint64_t)"Fatal error", v11, v12, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v13, v14, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (a3 < a1
         || (result = ((uint64_t (*)(_QWORD))a4)(0),
             a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    a4(0);
    v10 = sub_10004A9B8();
    return swift_arrayInitWithTakeFrontToBack(v10);
  }
  else if (a3 != a1)
  {
    v9 = sub_10004A9B8();
    return swift_arrayInitWithTakeBackToFront(v9);
  }
  return result;
}

void sub_10004A1FC(uint64_t (*a1)(void)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1();
  sub_100014510();
}

uint64_t sub_10004A220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

_BYTE **sub_10004A244(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_10004A254(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10004A274(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a4();
  v8 = v7;
  sub_100010D40(v6, v7, a3);
  v9 = *a1;
  v10 = *a1 + 8;
  v12 = v11;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9);
  swift_bridgeObjectRelease(v8);
  *a1 = v10;
  sub_100016530();
}

void *sub_10004A2D8(char *__src, size_t __n, char *__dst)
{
  void *result;
  const char *v5;
  uint64_t v6;

  if ((__n & 0x8000000000000000) != 0)
  {
    v5 = "UnsafeMutableRawPointer.initializeMemory with negative count";
    v6 = 60;
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    v5 = "UnsafeMutableRawPointer.initializeMemory overlapping range";
    v6 = 58;
  }
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v5, v6, 2, "Swift/UnsafeRawPointer.swift", 28);
  __break(1u);
  return result;
}

char *sub_10004A39C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000150C0((uint64_t *)&unk_1000870B0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10004A030(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10004A470(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_10004A470(char *__src, size_t __n, char *__dst)
{
  void *result;
  const char *v5;
  uint64_t v6;

  if ((__n & 0x8000000000000000) != 0)
  {
    v5 = "UnsafeMutablePointer.initialize with negative count";
    v6 = 51;
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    v5 = "UnsafeMutablePointer.initialize overlapping range";
    v6 = 49;
  }
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v5, v6, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_10004A534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = sub_10004A940();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004A550(char a1)
{
  uint64_t v1;

  return sub_100045B40(a1, v1);
}

uint64_t sub_10004A558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000135FC();
  sub_1000118EC();
  sub_1000124B4();
  v0 = sub_10004A950();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10004A578(int a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100045D48(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(char *))(v2 + 32));
}

uint64_t sub_10004A584()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10004A5B0(uint64_t a1)
{
  uint64_t *v1;

  return sub_100047B98(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10004A5BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectWeakDestroy(v0 + 16);
  v1 = sub_10004A940();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004A5D8()
{
  return sub_10004A628((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10004A5E4(int a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100047DFC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10004A5EC()
{
  uint64_t v0;

  sub_1000135FC();

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004A614(NSObject *a1)
{
  uint64_t v1;

  return sub_100048394(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_10004A61C()
{
  return sub_10004A628((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

uint64_t sub_10004A628(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  sub_1000118EC();
  return swift_deallocObject(v1, 32, 7);
}

uint64_t sub_10004A654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10004850C(a1, a2, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_10004A65C(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  *a2 = sub_10004A990(a1);
  sub_100014510();
}

uint64_t sub_10004A67C(uint64_t (*a1)(void))
{
  return sub_10004A990(a1) & 1;
}

uint64_t sub_10004A69C(uint64_t (*a1)(void))
{
  return sub_10004A990(a1);
}

void sub_10004A6B8(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v6 = a4();
  v13 = (void *)v6;
  v14 = *a1;
  v15 = *a1 + 8;
  if (v6)
    v16 = sub_10004A91C(v6, v7, v14, v8, v9, v10, v11, v12, v6);
  else
    v16 = sub_10004A91C(0, v7, v14, v8, v9, v10, v11, v12, 0);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v16, v17, v18);
  *a1 = v15;
  v19 = *a2;
  if (*a2)
  {
    *v19 = v13;
    *a2 = v19 + 1;
  }
  else
  {

  }
  sub_100016530();
}

uint64_t sub_10004A754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for TunnelConnectionState(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  sub_1000118EC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10004A7C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TunnelConnectionState(0) - 8) + 80);
  (*(void (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
  sub_100014510();
}

uint64_t sub_10004A800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  v1 = sub_10004A940();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004A81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000135FC();
  swift_release();
  sub_1000124B4();
  v0 = sub_10004A950();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10004A840(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100047260(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void (**)(__n128))(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t sub_10004A84C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0((uint64_t *)&unk_1000870F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004A894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  sub_1000124B4();
  v1 = sub_10004A950();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004A8B4(uint64_t a1)
{
  uint64_t v1;

  return sub_100046F54(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_10004A904(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t *sub_10004A91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t sub_10004A938()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10004A940()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004A950()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004A978(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

void sub_10004A984(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10004A990(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10004A9AC@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t sub_10004A9B8()
{
  uint64_t v0;

  return v0;
}

#error "10004AA44: call analysis failed (funcsize=59)"

#error "10004AB48: call analysis failed (funcsize=60)"

#error "10004AC50: call analysis failed (funcsize=61)"

#error "10004AD54: call analysis failed (funcsize=60)"

#error "10004AE54: call analysis failed (funcsize=59)"

#error "10004AF54: call analysis failed (funcsize=59)"

uint64_t sub_10004AFDC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  v2 = OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted) & 1) == 0)
  {
    v3 = MKBDeviceUnlockedSinceBoot(result);
    if ((_DWORD)v3 == 1)
    {
      *(_BYTE *)(v1 + v2) = 1;
      v4 = static os_log_type_t.default.getter(v3);
      os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1000886E0, "First unlock notification received. Executing deferred work", 59, 2, &_swiftEmptyArrayStorage);
      v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__registeredFirstUnlockHandlers);
      swift_beginAccess(v1 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__registeredFirstUnlockHandlers, v13, 1, 0);
      v6 = *v5;
      v7 = *(_QWORD *)(*v5 + 16);
      if (v7)
      {
        swift_bridgeObjectRetain(*v5);
        v8 = (_QWORD *)(v6 + 40);
        do
        {
          v10 = (void (*)(uint64_t))*(v8 - 1);
          v9 = *v8;
          v11 = swift_retain(*v8);
          v10(v11);
          swift_release(v9);
          v8 += 2;
          --v7;
        }
        while (v7);
        sub_100014518();
      }
      *v5 = &_swiftEmptyArrayStorage;
      return sub_100014518();
    }
    else
    {
      v12 = static os_log_type_t.fault.getter(v3);
      return os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, qword_1000886E0, "Received first lock notification but device has not actually been unlocked since boot", 85, 2, &_swiftEmptyArrayStorage);
    }
  }
  return result;
}

BOOL sub_10004B120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  os_log_type_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  _BOOL8 result;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  _BOOL8 v54;
  uint64_t v55;
  os_log_type_t v56;
  NSObject *v57;
  uint64_t v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  os_log_type_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  os_log_t v83;
  char *v84;
  uint64_t *v85;
  void **v86;
  uint64_t *v87;
  uint64_t v88;
  void **v89;
  uint64_t v90[3];
  void *v91;
  uint64_t v92;
  char v93[24];

  v2 = v1;
  v4 = sub_100016490();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v8 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000150C0(&qword_100085590);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  __chkstk_darwin(v9, v11);
  sub_10001625C();
  v12 = v1 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate;
  swift_beginAccess(v1 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate, v93, 0, 0);
  sub_1000144AC();
  if (sub_100015658(v1, 1, v4) == 1)
  {
    sub_10004C23C(v1);
  }
  else
  {
    sub_1000159A0((uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    v13 = sub_10004B9A0(a1);
    if (v13)
    {
      v14 = static os_log_type_t.debug.getter(v13);
      v15 = v14;
      v16 = qword_1000886E0;
      __chkstk_darwin(v14, v17);
      sub_10001625C();
      sub_1000159A0((uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
      v18 = v15;
      if (os_log_type_enabled(v16, v15))
      {
        v19 = (_DWORD *)sub_1000123C4(12);
        v20 = sub_1000123C4(32);
        v87 = &v82;
        v21 = v20;
        v89 = (void **)v20;
        *v19 = 136446210;
        v86 = (void **)(v19 + 1);
        v22 = sub_10000EC00(&qword_1000855A0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v23 = sub_10004CB9C(v22);
        v24 = v5;
        v26 = v25;
        sub_10001252C(v23, v25);
        v88 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v86);
        swift_bridgeObjectRelease(v26);
        v28 = *(void (**)(char *, uint64_t))(v24 + 8);
        v28(v8, v4);
        sub_10001614C((void *)&_mh_execute_header, v16, v18, "Previously fetched last unlock date %{public}s is still recent");
        swift_arrayDestroy(v21, 1);
        sub_100012398(v21);
        sub_100012398((uint64_t)v19);
        v28(v8, v4);
      }
      else
      {
        sub_10004CB74((uint64_t)v8);
        sub_10004CB74((uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
      }
      return 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))((char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  v29 = MKBGetDeviceLockState(0);
  if (v29 <= 3 && (_DWORD)v29 != 1)
    return 1;
  if (!&_BiomeLibrary)
  {
    v50 = static os_log_type_t.default.getter(v29);
    os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, qword_1000886E0, "BiomeLibrary not available at runtime. Unable to determine last unlock date", 75, 2, &_swiftEmptyArrayStorage);
    return 0;
  }
  v86 = (void **)a1;
  v87 = (uint64_t *)v5;
  v32 = (id)BiomeLibrary();
  v33 = objc_msgSend(v32, "Device");
  swift_unknownObjectRelease(v32);
  v34 = objc_msgSend(v33, "KeybagLocked");
  swift_unknownObjectRelease(v33);
  v35 = objc_msgSend((id)objc_opt_self(BMPublisherOptions), "reversed");
  v36 = objc_msgSend(v34, "publisherWithOptions:", v35);

  v91 = sub_10004BBFC;
  v92 = 0;
  v89 = _NSConcreteStackBlock;
  v90[0] = 1107296256;
  v37 = sub_100015FEC((uint64_t)sub_10003D8E0);
  v91 = sub_10004C27C;
  v92 = v2;
  v89 = _NSConcreteStackBlock;
  v90[0] = 1107296256;
  v38 = sub_100015FEC((uint64_t)sub_10004BFB4);
  swift_retain(v2);
  swift_release();
  v39 = objc_msgSend(v36, "sinkWithCompletion:shouldContinue:", v37, v38);
  _Block_release(v38);
  _Block_release(v37);

  v42 = __chkstk_darwin(v40, v41);
  v43 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42, v44);
  sub_10001625C();
  sub_1000144AC();
  if (sub_100015658((uint64_t)v39, 1, v4) != 1)
  {
    v85 = &v82;
    v51 = v87;
    sub_1000159A0((uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v39, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v87[4]);
    v52 = (uint64_t)v86;
    v53 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v54 = sub_10004B9A0((uint64_t)v86);
    if (!v54)
    {
      v69 = static os_log_type_t.default.getter(v54);
      v70 = qword_1000886E0;
      v71 = v69;
      if (os_log_type_enabled((os_log_t)qword_1000886E0, v69))
      {
        swift_retain_n(v2, 2);
        v72 = sub_1000123C4(22);
        v84 = v43;
        v73 = v72;
        v74 = sub_1000123C4(32);
        v83 = v70;
        v89 = (void **)v74;
        v75 = v74;
        *(_DWORD *)v73 = 136315394;
        v82 = v73 + 4;
        __chkstk_darwin(v74, v76);
        v77 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_10004C1F4(v12, (uint64_t)v77);
        v78 = String.init<A>(describing:)(v77, v9);
        v80 = v79;
        sub_10001252C(v78, v79);
        v88 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v82);
        swift_release_n(v2, 2);
        swift_bridgeObjectRelease(v80);
        *(_WORD *)(v73 + 12) = 2048;
        v88 = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v73 + 14);
        _os_log_impl((void *)&_mh_execute_header, v83, v71, "Last unlock was at date %s, which is not within %ld", (uint8_t *)v73, 0x16u);
        swift_arrayDestroy(v75, 1);
        sub_100012398(v75);
        sub_100012398(v73);
        ((void (*)(char *, uint64_t))v87[1])(v84, v4);
      }
      else
      {
        ((void (*)(char *, uint64_t))v87[1])(v43, v4);
      }
      return 0;
    }
    v55 = static os_log_type_t.info.getter(v54);
    v56 = v55;
    v57 = qword_1000886E0;
    __chkstk_darwin(v55, v58);
    sub_10001625C();
    sub_1000159A0((uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(uint64_t, uint64_t, uint64_t))v51[2]);
    v59 = v56;
    if (os_log_type_enabled(v57, v56))
    {
      v60 = sub_1000123C4(22);
      v61 = sub_1000123C4(32);
      v83 = v57;
      v62 = v61;
      v89 = (void **)v61;
      *(_DWORD *)v60 = 136446466;
      v63 = sub_10000EC00(&qword_1000855A0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v64 = sub_10004CB9C(v63);
      v84 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
      v66 = v65;
      sub_10001252C(v64, v65);
      v88 = v67;
      v82 = (uint64_t)&v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v60 + 4);
      swift_bridgeObjectRelease(v66);
      v68 = (void (*)(char *, uint64_t))v51[1];
      v68(v53, v4);
      *(_WORD *)(v60 + 12) = 2048;
      v88 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v60 + 14);
      _os_log_impl((void *)&_mh_execute_header, v83, v59, "Last unlock date %{public}s is within %ld", (uint8_t *)v60, 0x16u);
      sub_100015968();
      sub_100012398(v62);
      sub_100012398(v60);
      v68(v84, v4);
    }
    else
    {
      sub_10004CB74((uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
      sub_10004CB74((uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    return 1;
  }
  v45 = sub_10004C23C((uint64_t)v39);
  v46 = static os_log_type_t.error.getter(v45);
  v47 = qword_1000886E0;
  v48 = v46;
  result = os_log_type_enabled((os_log_t)qword_1000886E0, v46);
  if (result)
  {
    v49 = (_DWORD *)sub_1000123C4(12);
    *v49 = 134217984;
    v89 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v49 + 1);
    sub_10001614C((void *)&_mh_execute_header, v47, v48, "Could not find last unlock event. Unable to confirm whether device was unlocked within requested %ld hours. Will return false");
    sub_100012398((uint64_t)v49);
    return 0;
  }
  return result;
}

BOOL sub_10004B9A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = sub_100016490();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  sub_100011928();
  v6 = v5 - v4;
  v7 = type metadata accessor for DateComponents(0);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  __chkstk_darwin(v7, v8);
  sub_100011928();
  v11 = v10 - v9;
  v12 = type metadata accessor for Calendar.Identifier(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  sub_100011928();
  v17 = v16 - v15;
  v38 = type metadata accessor for Calendar(0);
  v18 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38, v19);
  sub_100011928();
  v22 = v21 - v20;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v17, enum case for Calendar.Identifier.gregorian(_:), v12);
  Calendar.init(identifier:)(v17);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v12);
  v23 = sub_1000150C0(&qword_1000872A0);
  v24 = type metadata accessor for Calendar.Component(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = (v26 + 32) & ~v26;
  v28 = swift_allocObject(v23, v27 + *(_QWORD *)(v25 + 72), v26 | 7);
  *(_OWORD *)(v28 + 16) = xmmword_100065C90;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 104))(v28 + v27, enum case for Calendar.Component.hour(_:), v24);
  v29 = sub_10004C790(v28);
  static Date.now.getter();
  Calendar.dateComponents(_:from:to:)(v29, v37, v6);
  swift_bridgeObjectRelease(v29);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v6, v1);
  v31 = DateComponents.hour.getter(v30);
  if ((v32 & 1) != 0)
  {
    v34 = static os_log_type_t.error.getter(v31);
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, qword_1000886E0, "Unable to read hour component of date comparison", 48, 2, &_swiftEmptyArrayStorage);
    v33 = 0;
  }
  else
  {
    v33 = v31 < a1;
  }
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v11, v40);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v22, v38);
  return v33;
}

void sub_10004BBFC(void *a1)
{
  id v1;
  os_log_type_t v2;
  NSObject *v3;
  os_log_type_t v4;
  id v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;

  v1 = objc_msgSend(a1, "error");
  if (v1)
  {
    v14 = v1;
    v2 = static os_log_type_t.error.getter(v1);
    v3 = qword_1000886E0;
    v4 = v2;
    if (os_log_type_enabled((os_log_t)qword_1000886E0, v2))
    {
      v5 = v14;
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v15 = v5;
      v16 = v7;
      *(_DWORD *)v6 = 136315138;
      v8 = v5;
      v9 = sub_1000150C0(&qword_100085A00);
      v10 = String.init<A>(describing:)(&v15, v9);
      v12 = v11;
      sub_100010D40(v10, v11, &v16);
      v15 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v6 + 4);

      swift_bridgeObjectRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to subscribe for keybag events from Biome due to error: %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_10004BDA0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(_BYTE *, uint64_t);
  uint64_t v28;
  _BYTE v30[24];

  v4 = sub_1000150C0(&qword_100085590);
  v6 = __chkstk_darwin(v4, v5);
  v8 = &v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6, v9);
  v11 = &v30[-v10 - 8];
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = &v30[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v15, v18);
  v20 = &v30[-v19 - 8];
  v21 = objc_msgSend(a1, "eventBody");
  if (v21)
  {
    v22 = v21;
    if ((objc_msgSend(v21, "starting") & 1) != 0)
    {

    }
    else
    {
      v23 = Date.init(timeIntervalSinceReferenceDate:)(objc_msgSend(a1, "timestamp"));
      static Date.now.getter(v23);
      v24 = sub_10000EC00(&qword_1000872C0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v25 = dispatch thunk of static Comparable.< infix(_:_:)(v17, v20, v12, v24);

      v26 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
      v26(v17, v12);
      if ((v25 & 1) == 0)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v11, v20, v12);
        sub_100015664((uint64_t)v11, 0, 1, v12);
        sub_10004CA28((uint64_t)v11, (uint64_t)v8);
        v28 = a2 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate;
        swift_beginAccess(v28, v30, 33, 0);
        sub_10004CA70((uint64_t)v8, v28);
        swift_endAccess(v30);
        return 0;
      }
      v26(v20, v12);
    }
  }
  return 1;
}

uint64_t sub_10004BFB4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  LOBYTE(v4) = v4();
  swift_release(v3);

  return v4 & 1;
}

uint64_t sub_10004C004()
{
  uint64_t v0;

  sub_10004C23C(v0 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__registeredFirstUnlockHandlers));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10004C044()
{
  return type metadata accessor for LockStateManager(0);
}

uint64_t type metadata accessor for LockStateManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100087198;
  if (!qword_100087198)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LockStateManager);
  return result;
}

void sub_10004C084(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10004C108(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = &unk_100066C28;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_10004C108(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000871A8)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000871A8);
  }
}

uint64_t sub_10004C15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate;
  v2 = sub_100016490();
  v3 = sub_100015664(v1, 1, 1, v2);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__registeredFirstUnlockHandlers) = &_swiftEmptyArrayStorage;
  v4 = OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted;
  *(_BYTE *)(v0 + v4) = MKBDeviceUnlockedSinceBoot(v3) == 1;
  return v0;
}

uint64_t sub_10004C1C8()
{
  return sub_100017F38();
}

uint64_t sub_10004C1D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004C1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0(&qword_100085590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004C23C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000150C0(&qword_100085590);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004C27C(void *a1)
{
  uint64_t v1;

  return sub_10004BDA0(a1, v1);
}

void sub_10004C284(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_25;
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_26;
LABEL_3:
  sub_1000150C0(&qword_1000876C0);
  v4 = (_QWORD *)sub_100014578();
  if (v3)
  {
    while (1)
    {
      sub_10001661C();
      v3 = sub_100015600();
      sub_100014518();
      if (!v3)
        break;
LABEL_5:
      sub_10004CB04();
      v38 = v3;
      while (1)
      {
        if (v40)
        {
          sub_10004CBB0(v5, v6, v7, v8, v9, v10, v11, v12, v36, v37, v38, v39);
        }
        else
        {
          sub_10004CB8C();
          if (v21)
            goto LABEL_24;
          sub_10001191C(v13, v14, v15, v16, v17, v18, v19, v20, v36);
        }
        v22 = __OFADD__(v1++, 1);
        if (v22)
          break;
        v23 = sub_1000124BC();
        type metadata accessor for ControlChannelConnection(v23);
        v24 = sub_10000EC00(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
        sub_10004CB4C(v24);
        sub_100015E28();
        if (v26)
        {
LABEL_17:
          sub_10000E548(v25, v36, v37, v38, v39, v40, v41);
          if (v22)
            goto LABEL_23;
          v4[2] = v33;
        }
        else
        {
          v27 = sub_10000EC00(&qword_1000872C8, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
          while ((sub_100016308(v27, v28, v29, v30, v31, v32) & 1) == 0)
          {
            sub_10004CB30();
            if (v26)
            {
              v3 = v38;
              goto LABEL_17;
            }
          }
          v5 = swift_release(v41);
          v3 = v38;
        }
        if (v1 == v3)
        {
          v34 = v39;
          goto LABEL_29;
        }
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      sub_10001661C();
      v35 = sub_100015600();
      sub_100014518();
      if (v35)
        goto LABEL_3;
LABEL_26:
      v4 = &_swiftEmptySetSingleton;
      if (!v3)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_5;
  }
  v34 = a1;
LABEL_29:
  swift_bridgeObjectRelease(v34);
  sub_1000165B4();
}

void sub_10004C404(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_25;
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_26;
LABEL_3:
  sub_1000150C0(&qword_1000872D0);
  v4 = (_QWORD *)sub_100014578();
  if (v3)
  {
    while (1)
    {
      sub_10001661C();
      v3 = sub_100015600();
      sub_100014518();
      if (!v3)
        break;
LABEL_5:
      sub_10004CB04();
      v38 = v3;
      while (1)
      {
        if (v40)
        {
          sub_10004CBB0(v5, v6, v7, v8, v9, v10, v11, v12, v36, v37, v38, v39);
        }
        else
        {
          sub_10004CB8C();
          if (v21)
            goto LABEL_24;
          sub_10001191C(v13, v14, v15, v16, v17, v18, v19, v20, v36);
        }
        v22 = __OFADD__(v1++, 1);
        if (v22)
          break;
        v23 = sub_1000124BC();
        type metadata accessor for SystemXPCPeerConnection(v23);
        v24 = sub_10000EC00(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
        sub_10004CB4C(v24);
        sub_100015E28();
        if (v26)
        {
LABEL_17:
          sub_10000E548(v25, v36, v37, v38, v39, v40, v41);
          if (v22)
            goto LABEL_23;
          v4[2] = v33;
        }
        else
        {
          v27 = sub_10000EC00((unint64_t *)&unk_100087720, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
          while ((sub_100016308(v27, v28, v29, v30, v31, v32) & 1) == 0)
          {
            sub_10004CB30();
            if (v26)
            {
              v3 = v38;
              goto LABEL_17;
            }
          }
          v5 = swift_release(v41);
          v3 = v38;
        }
        if (v1 == v3)
        {
          v34 = v39;
          goto LABEL_29;
        }
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      sub_10001661C();
      v35 = sub_100015600();
      sub_100014518();
      if (v35)
        goto LABEL_3;
LABEL_26:
      v4 = &_swiftEmptySetSingleton;
      if (!v3)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_5;
  }
  v34 = a1;
LABEL_29:
  swift_bridgeObjectRelease(v34);
  sub_1000165B4();
}

void sub_10004C584(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[9];

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    sub_10004CB60();
    v5 = sub_100015600();
    sub_10000E4C8();
    if (v5)
    {
LABEL_3:
      sub_1000150C0(&qword_100087770);
      v3 = (_BYTE *)sub_100014578();
      if (!v2)
        goto LABEL_4;
LABEL_8:
      sub_10004CB60();
      v4 = sub_100015600();
      sub_10000E4C8();
      if (!v4)
      {
LABEL_25:
        sub_10000E4C8();
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = &_swiftEmptySetSingleton;
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    goto LABEL_25;
LABEL_9:
  v6 = 0;
  v25 = v4;
  v26 = v1 & 0xC000000000000001;
  v23 = v1 + 32;
  v24 = v1;
  while (1)
  {
    if (v26)
    {
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v1);
    }
    else
    {
      sub_10004CB8C();
      if (v8)
        goto LABEL_28;
      v7 = *(_QWORD *)(v23 + 8 * v6);
      swift_retain(v7);
    }
    v9 = __OFADD__(v6++, 1);
    if (v9)
      break;
    Hasher.init(_seed:)(v27);
    v10 = type metadata accessor for PairableHostsBrowseRegistration();
    v11 = sub_10000EC00(&qword_1000866A8, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066590);
    HashableByObjectIdentity.hash(into:)(v27, v10, v11);
    v12 = Hasher._finalize()();
    v13 = -1 << v3[32];
    v14 = v12 & ~v13;
    sub_10001645C();
    if ((v17 & v16) != 0)
    {
      v18 = sub_10004CB7C();
      sub_100016540(v18);
      sub_100015A94();
      if ((v27 & 1) != 0)
      {
LABEL_20:
        swift_release(v7);
        v1 = v24;
        goto LABEL_24;
      }
      v19 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v19;
        sub_10001645C();
        if ((v16 & v17) == 0)
          break;
        v20 = sub_10004CB7C();
        sub_100016540(v20);
        sub_100015A94();
        if ((v27 & 1) != 0)
          goto LABEL_20;
      }
      v1 = v24;
    }
    *(_QWORD *)&v3[8 * v15 + 56] = v17 | v16;
    *(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v14) = v7;
    v21 = *((_QWORD *)v3 + 2);
    v9 = __OFADD__(v21, 1);
    v22 = v21 + 1;
    if (v9)
      goto LABEL_27;
    *((_QWORD *)v3 + 2) = v22;
LABEL_24:
    if (v6 == v25)
      goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t sub_10004C790(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = type metadata accessor for Calendar.Component(0);
  v37 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2, v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  v9 = (char *)&v32 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v12 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  sub_1000150C0(&qword_1000872A8);
  result = static _SetStorage.allocate(capacity:)(v10);
  v12 = (_QWORD *)result;
  v34 = *(_QWORD *)(a1 + 16);
  if (!v34)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v12;
  }
  v13 = 0;
  v36 = result + 56;
  v14 = *(unsigned __int8 *)(v37 + 80);
  v32 = a1;
  v33 = a1 + ((v14 + 32) & ~v14);
  while (v13 < *(_QWORD *)(a1 + 16))
  {
    v15 = *(_QWORD *)(v37 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
    v16(v9, v33 + v15 * v13, v2);
    v17 = v12[5];
    v18 = sub_10000EC00(&qword_1000872B0, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
    v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v2, v18);
    v20 = -1 << *((_BYTE *)v12 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    v23 = *(_QWORD *)(v36 + 8 * (v21 >> 6));
    v24 = 1 << v21;
    if (((1 << v21) & v23) != 0)
    {
      v35 = v13;
      v25 = ~v20;
      while (1)
      {
        v16(v6, v12[6] + v21 * v15, v2);
        v26 = sub_10000EC00(&qword_1000872B8, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v9, v2, v26);
        v28 = *(void (**)(char *, uint64_t))(v37 + 8);
        v28(v6, v2);
        if ((v27 & 1) != 0)
          break;
        v21 = (v21 + 1) & v25;
        v22 = v21 >> 6;
        v23 = *(_QWORD *)(v36 + 8 * (v21 >> 6));
        v24 = 1 << v21;
        if ((v23 & (1 << v21)) == 0)
        {
          a1 = v32;
          v13 = v35;
          goto LABEL_10;
        }
      }
      result = ((uint64_t (*)(char *, uint64_t))v28)(v9, v2);
      a1 = v32;
      v13 = v35;
    }
    else
    {
LABEL_10:
      *(_QWORD *)(v36 + 8 * v22) = v24 | v23;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32))(v12[6] + v21 * v15, v9, v2);
      v29 = v12[2];
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (v30)
        goto LABEL_18;
      v12[2] = v31;
    }
    if (++v13 == v34)
      goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10004CA28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0(&qword_100085590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004CA70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000150C0(&qword_100085590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10004CAB8()
{
  uint64_t v0;

  sub_10003EBEC(v0);
}

void sub_10004CAC0()
{
  sub_10003CC34();
}

uint64_t sub_10004CAC8()
{
  return sub_10003561C();
}

uint64_t sub_10004CAD0()
{
  return sub_1000197DC();
}

uint64_t sub_10004CAF8()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_10004CB4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, a1);
}

uint64_t sub_10004CB60()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10004CB74(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10004CB7C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 8 * v1));
}

uint64_t sub_10004CB9C(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10004CBA8()
{
  return dispatch thunk of ControlChannelConnection.start()();
}

uint64_t sub_10004CBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a12);
}

uint64_t sub_10004CBBC()
{
  uint64_t v0;
  os_log_type_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t result;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = static os_log_type_t.default.getter();
  v2 = qword_1000886E0;
  v3 = v1;
  result = os_log_type_enabled((os_log_t)qword_1000886E0, v1);
  if ((_DWORD)result)
  {
    swift_retain(v0);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    swift_beginAccess(v0 + 16, v10, 0, 0);
    v6 = *(_QWORD *)(v0 + 16);
    v7 = swift_bridgeObjectRetain(v6);
    v8 = sub_100012A70(v7);
    swift_bridgeObjectRelease(v6);
    v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, v10, v5 + 4);
    swift_release(v0);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Network pairing peers updated. Total count: %ld", v5, 0xCu);
    return swift_slowDealloc(v5, -1, -1);
  }
  return result;
}

void sub_10004CCCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BYTE v22[24];

  sub_100011610();
  v2 = v0;
  v3 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  sub_1000157A0();
  v7 = v0 + 24;
  v6 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(unsigned __int8 *)(v7 + 24);
  if (*(_BYTE *)(v7 + 24))
  {
    if (v9 == 1)
    {
      sub_10000E49C();
      NWListener.cancel()();
      sub_1000118D4();
      v6 = *(_QWORD *)(v2 + 24);
      v8 = *(_QWORD *)(v2 + 40);
      LOBYTE(v9) = *(_BYTE *)(v2 + 48);
    }
    else
    {
      if (v6 | *(_QWORD *)(v2 + 32) | v8)
        v6 = 1;
      LOBYTE(v9) = 2;
    }
  }
  v10 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v2 + 48) = 2;
  sub_10004EDAC(v6, v10, v8, v9);
  v11 = (uint64_t *)(v2 + 16);
  v12 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
  while (1)
  {
    sub_100012518((uint64_t)v11, (uint64_t)v22);
    v13 = *v11;
    if ((*v11 & 0xC000000000000001) != 0)
    {
      if (v13 < 0)
        v14 = *v11;
      else
        v14 = v13 & 0xFFFFFFFFFFFFFF8;
      if (__CocoaSet.count.getter(v14))
      {
        v15 = __CocoaSet.startIndex.getter(v14);
        v17 = v16;
        v18 = 1;
LABEL_16:
        v21 = sub_10004F2A4(v15, v17, v18);
        sub_100026D90(v15, v17, v18);
        goto LABEL_18;
      }
    }
    else if (*(_QWORD *)(v13 + 16))
    {
      v15 = sub_10004F20C(v13);
      v17 = v19;
      v18 = v20 & 1;
      goto LABEL_16;
    }
    v21 = 0;
LABEL_18:
    swift_endAccess(v22);
    sub_10004CBBC();
    if (!v21)
      break;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v1, v12, v3);
    dispatch thunk of ControlChannelConnection.invalidate(for:)(v1);
    sub_100016234();
    sub_1000165FC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }
  sub_1000138B4();
}

void sub_10004CE78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  sub_100011610();
  v2 = type metadata accessor for String.Encoding(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v5 = sub_10001632C();
  type metadata accessor for UUID(v5);
  sub_10004F5CC();
  __chkstk_darwin(v6, v7);
  sub_100011928();
  v9 = static os_log_type_t.default.getter(v8);
  v10 = qword_1000886E0;
  v11 = sub_10001539C(v9, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Starting listening for network pairing", 38);
  if (*(unsigned __int8 *)(v0 + 48) < 2u)
  {
    v12 = static os_log_type_t.default.getter(v11);
    v13 = qword_1000886E0;
    v14 = "Network pairing service is already started";
    v15 = 42;
LABEL_5:
    sub_100015CE4(v12, (uint64_t)&_mh_execute_header, v13, (uint64_t)v14, v15, 2);
    return;
  }
  if (*(_QWORD *)(v0 + 40) | *(_QWORD *)(v0 + 24) | *(_QWORD *)(v0 + 32))
  {
    v12 = static os_log_type_t.default.getter(v11);
    v14 = "Network pairing service is already shut down";
    v13 = v10;
    v15 = 44;
    goto LABEL_5;
  }
  v16 = UUID.init()(v11);
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  v20 = sub_10004F5DC();
  v22 = v21(v20);
  static String.Encoding.utf8.getter(v22);
  v23 = String.data(using:allowLossyConversion:)(v1, 0, v17, v19);
  v25 = v24;
  sub_1000165FC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (v25 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 24);
    v27 = *(_QWORD *)(v0 + 32);
    v28 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 24) = v17;
    *(_QWORD *)(v0 + 32) = v19;
    *(_QWORD *)(v0 + 40) = 0;
    v29 = *(_BYTE *)(v0 + 48);
    *(_BYTE *)(v0 + 48) = 0;
    sub_10004EDAC(v26, v27, v28, v29);
    v30 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007CE00, 40);
    v30[2] = v0;
    v30[3] = v23;
    v30[4] = v25;
    sub_1000154D4();
    sub_1000154D4();
    v31 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007CE28, 48);
    v31[2] = v23;
    v31[3] = v25;
    v31[4] = sub_10004F1A8;
    v31[5] = v30;
    sub_10004F5E8();
    sub_1000154D4();
    sub_1000144D8();
    sub_10004F5E8();
    sub_1000144D8();
    sub_100016390();
    sub_1000166F4();
    v33 = v32;
    v34 = CUPairingIdentity.authTag(for:type:)(v23, v25, 1);
    v36 = v35;
    sub_10004D364();
    sub_10000EBB8(v34, v36, 0);
    sub_100016234();

    sub_100012400();
    sub_100015384();
    sub_100012400();
    swift_release(v0);
    sub_100015384();
    sub_100012400();
    sub_100012400();
    sub_1000138B4();
  }
}

void sub_10004D294()
{
  sub_10004D364();
}

uint64_t sub_10004D2D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(v0 + 48) == 1)
  {
    v1 = v0 + 32;
    v0 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 8));
  }
  else
  {
    v2 = type metadata accessor for RemotePairingError(0);
    v3 = sub_10000EC00((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    v4 = swift_allocError(v2, v3, 0, 0);
    v5 = static RemotePairingError.invalidOperation.getter(v4);
    swift_willThrow(v5);
  }
  return v0;
}

void sub_10004D364()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  _QWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *countAndFlagsBits;
  uint64_t v63;
  NSString v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_log_type_t v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSString v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  uint64_t v90;
  void *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  os_log_type_t v121;
  NSObject *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD v148[2];
  char v149;
  uint64_t v150;
  uint64_t v151;

  sub_100011610();
  v2 = v0;
  v143 = v3;
  v141 = v5;
  v142 = v4;
  v144 = v6;
  v145 = v7;
  v8 = type metadata accessor for BonjourService(0);
  v139 = *(_QWORD *)(v8 - 8);
  v140 = v8;
  __chkstk_darwin(v8, v9);
  sub_100011928();
  v138 = v11 - v10;
  v12 = sub_1000150C0(&qword_100087408);
  __chkstk_darwin(v12, v13);
  sub_100011928();
  v16 = v15 - v14;
  v17 = type metadata accessor for NWEndpoint.Port(0);
  __chkstk_darwin(v17, v18);
  sub_1000157A0();
  v19 = type metadata accessor for NWTXTRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v130 - v26;
  v28 = type metadata accessor for String.Encoding(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28, v30);
  sub_100011928();
  v34 = v33 - v32;
  v146 = v2;
  if (*((_BYTE *)v2 + 48))
  {
    v35 = static os_log_type_t.default.getter(v31);
    if (sub_1000155C8(v35))
    {
      v36 = v146;
      sub_1000165F4((uint64_t)v146);
      v37 = (_DWORD *)sub_1000123C4(12);
      v38 = sub_1000123C4(32);
      v150 = v38;
      *v37 = 136446210;
      v39 = v36[4];
      v40 = v36[5];
      v41 = *((_BYTE *)v36 + 48);
      v147 = (_QWORD *)v36[3];
      v148[0] = v39;
      v148[1] = v40;
      v149 = v41;
      sub_10004ED5C((uint64_t)v147, v39, v40, v41);
      v42 = String.init<A>(describing:)(&v147, &type metadata for NetworkPairingService.State);
      v44 = v43;
      sub_100010D40(v42, v43, &v150);
      v147 = (_QWORD *)v45;
      sub_100016158((uint64_t)&v147, (uint64_t)v148);
      sub_100015870((uint64_t)v36);
      swift_bridgeObjectRelease(v44);
      sub_100014588((void *)&_mh_execute_header, v46, v47, "NetworkPairingService finished auth tag generation, but current state (%{public}s) is not valid to use the data");
      sub_1000158B8();
      sub_100012398(v38);
      sub_100012398((uint64_t)v37);
    }
LABEL_18:
    sub_1000138B4();
    return;
  }
  v48 = v144;
  v131 = v1;
  v132 = v24;
  v133 = v16;
  v135 = v19;
  v136 = v27;
  v134 = v20;
  v49 = v145;
  v50 = v146[3];
  v51 = v146[4];
  v137 = v146[5];
  v52 = sub_10001534C();
  static String.Encoding.utf8.getter(v52);
  v53 = String.data(using:allowLossyConversion:)(v34, 0, v50, v51);
  v55 = v54;
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v34, v28);
  if (v55 >> 60 != 15)
  {
    v56 = static Data.== infix(_:_:)(v53, v55, v48, v142);
    sub_100013AB4(v53, v55);
    if ((v56 & 1) != 0)
    {
      if ((v143 & 1) != 0)
      {
        sub_100015978(v50);
        v71 = v49;
        v72 = sub_100013AE0();
        v73 = static os_log_type_t.error.getter(v72);
        if (sub_1000155C8(v73))
        {
          sub_100011A00();
          sub_100011A00();
          v74 = (_DWORD *)sub_1000123C4(12);
          v75 = sub_1000123C4(32);
          v147 = (_QWORD *)v75;
          *v74 = 136446210;
          v150 = v71;
          swift_errorRetain(v71);
          v76 = sub_1000150C0(&qword_100085A00);
          v77 = String.init<A>(describing:)(&v150, v76);
          sub_100010D40(v77, v78, (uint64_t *)&v147);
          v150 = v79;
          sub_100016158((uint64_t)&v150, (uint64_t)&v151);
          sub_10000E4C8();
          sub_100015B74();
          sub_100015B74();
          sub_100014588((void *)&_mh_execute_header, v80, v81, "Unable to start network pairing service. Failed to generate auth tag with error: %{public}s");
          sub_1000158B8();
          sub_100012398(v75);
          sub_100012398((uint64_t)v74);
        }
        sub_100015B74();
      }
      else
      {
        v57 = v141;
        sub_100015614(v49, v141);
        sub_100015614(v49, v57);
        v58 = sub_10004F01C((uint64_t)&_swiftEmptyArrayStorage);
        v59 = NWTXTRecord.init(_:)(v58);
        static NetworkPairingKeys.identifier.getter(v59);
        sub_10001534C();
        v60 = v50;
        v61 = sub_1000116A4();
        static NetworkPairingKeys.authTag.getter(v61);
        countAndFlagsBits = (void *)Data.base64EncodedString(options:)(0)._countAndFlagsBits;
        sub_10000EBB8(v49, v57, 0);
        v63 = sub_1000116A4();
        static NetworkPairingKeys.model.getter(v63);
        v64 = String._bridgeToObjectiveC()();
        v65 = sub_10004F604((uint64_t)v64);

        if (v65)
        {
          v150 = v65;
          sub_100013658(v66, v67, v68, (uint64_t)&type metadata for String);
        }
        v82 = sub_1000116A4();
        static NetworkPairingKeys.name.getter(v82);
        v83 = String._bridgeToObjectiveC()();
        v84 = sub_10004F604((uint64_t)v83);

        if (v84)
        {
          v150 = v84;
          sub_100013658(v85, v86, v87, (uint64_t)&type metadata for String);
        }
        sub_1000116A4();
        type metadata accessor for ControlChannelConnectionWireProtocolVersion(0);
        v88 = (void *)static ControlChannelConnectionWireProtocolVersion.current.getter();
        v89 = objc_msgSend(v88, "description");

        static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
        static NetworkPairingKeys.wireProtocolVersion.getter();
        v90 = sub_1000116A4();
        v91 = (void *)static ControlChannelConnectionWireProtocolVersion.minimumSupportedForWirelessPairing.getter(v90);
        v92 = objc_msgSend(v91, "description");

        static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
        static NetworkPairingKeys.minimumSupportedWireProtocolVersion.getter();
        sub_1000116A4();
        type metadata accessor for NWParameters(0);
        v93 = static NWParameters.tcp.getter();
        v94 = v131;
        static NWEndpoint.Port.any.getter();
        v95 = type metadata accessor for NWListener(0);
        v96 = *(unsigned int *)(v95 + 48);
        v97 = *(unsigned __int16 *)(v95 + 52);
        v144 = v95;
        swift_allocObject(v95, v96, v97);
        v98 = NWListener.init(using:on:)(v93, v94);
        v99 = v146;
        v100 = v146[3];
        v101 = v146[4];
        v102 = v146[5];
        v146[3] = v98;
        v99[4] = v60;
        v99[5] = v51;
        v103 = v98;
        LOBYTE(v94) = *((_BYTE *)v99 + 48);
        *((_BYTE *)v99 + 48) = 1;
        sub_10004ED5C(v60, v51, v137, 0);
        sub_1000159B8();
        sub_10004EDAC(v100, v101, v102, v94);
        v105 = v138;
        v104 = v139;
        v106 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v139 + 104))(v138, enum case for BonjourService.pairSetup(_:), v140);
        v107 = BonjourService.rawValue.getter(v106);
        v109 = v108;
        sub_1000165FC(v105, *(uint64_t (**)(uint64_t, uint64_t))(v104 + 8));
        v110 = v134;
        v111 = v132;
        (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v132, v136, v135);
        v112 = v133;
        NWListener.Service.init(name:type:domain:txtRecord:)(0, 0, v107, v109, 0, 0, v111);
        v113 = type metadata accessor for NWListener.Service(0);
        sub_100015664(v112, 0, 1, v113);
        NWListener.service.setter(v112);
        sub_1000394E4((uint64_t)sub_10004DD28, 0);
        NWListener.stateUpdateHandler.setter(sub_10004DD28, 0);
        v114 = sub_1000138D4((uint64_t)&unk_10007CD10, 24);
        sub_100015E04(v114);
        v115 = sub_1000138D4((uint64_t)&unk_10007CDB0, 24);
        swift_weakInit(v115 + 16, v103);
        v116 = sub_1000138D4((uint64_t)&unk_10007CDD8, 32);
        *(_QWORD *)(v116 + 16) = v114;
        *(_QWORD *)(v116 + 24) = v115;
        swift_retain(v114);
        swift_retain(v115);
        v117 = sub_10004F5DC();
        sub_1000394E4(v117, v118);
        v119 = sub_10004F5DC();
        NWListener.newConnectionHandler.setter(v119);
        swift_release(v114);
        swift_release(v115);
        sub_10000E4FC();
        v120 = NWListener.start(queue:)(v99[7]);
        v121 = static os_log_type_t.default.getter(v120);
        v122 = qword_1000886E0;
        if (sub_1000155C8(v121))
        {
          sub_1000159B8();
          sub_10004ED5C(v60, v51, v137, 0);
          sub_1000159B8();
          v123 = sub_1000123C4(22);
          v146 = (_QWORD *)sub_1000123C4(64);
          v147 = v146;
          *(_DWORD *)v123 = 136315394;
          v150 = v103;
          sub_1000159B8();
          v124 = String.init<A>(describing:)(&v150, v144);
          v126 = v125;
          sub_100010D40(v124, v125, (uint64_t *)&v147);
          v150 = v127;
          sub_100016554();
          sub_100015870(v103);
          swift_bridgeObjectRelease(v126);
          *(_WORD *)(v123 + 12) = 2080;
          sub_10001534C();
          sub_100010D40(v60, v51, (uint64_t *)&v147);
          v150 = v128;
          sub_100016554();
          sub_10004F5A8();
          sub_10004F5A8();
          sub_10000E4C8();
          _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v103, "Started listening for network pairing with listener %s, session ID: %s", (uint8_t *)v123, 0x16u);
          v129 = v146;
          swift_arrayDestroy(v146, 2);
          sub_100012398((uint64_t)v129);
          sub_100012398(v123);
          sub_10004F5BC();
          sub_10000E4FC();
          (*(void (**)(char *, uint64_t))(v134 + 8))(v136, v135);
        }
        else
        {
          swift_release(v103);
          sub_100015978(v60);
          sub_10004F5BC();
          (*(void (**)(char *, uint64_t))(v110 + 8))(v136, v135);
        }
      }
    }
    else
    {
      v69 = sub_100015978(v50);
      v70 = static os_log_type_t.default.getter(v69);
      sub_10001539C(v70, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"NetworkPairingService finished auth tag generation, but we now are awaiting auth tag generation for a different pairing session", 127);
    }
    goto LABEL_18;
  }
  __break(1u);
  swift_unexpectedError(v49, "remotepairingdeviced/NetworkPairingService.swift", 48, 1, 135);
  __break(1u);
}

uint64_t sub_10004DD28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for NWListener.State(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static os_log_type_t.default.getter(v5);
  v9 = qword_1000886E0;
  v10 = sub_1000150C0(&qword_100085570);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100065C90;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v7, a1, v2);
  v12 = String.init<A>(describing:)(v7, v2);
  v14 = v13;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_100016354();
  *(_QWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Manual pairing bonjour listener state changed: %{public}s", 57, 2, v11);
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_10004DE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    v7 = a3 + 16;
    swift_beginAccess(v7, &v12, 0, 0);
    Strong = swift_weakLoadStrong(v7);
    if (!Strong)
    {
      v9 = v6;
      return swift_release(v9);
    }
    v9 = Strong;
    if (*(_BYTE *)(v6 + 48) == 1)
    {
      v10 = swift_retain(*(_QWORD *)(v6 + 24));
      if (v9 == v10)
      {
        sub_10004E2AC();
        swift_release(v6);
        v6 = v9;
        goto LABEL_9;
      }
      Strong = swift_release(v10);
    }
    v11 = static os_log_type_t.error.getter(Strong);
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1000886E0, "Received connection from listener that has since been replaced", 62, 2, &_swiftEmptyArrayStorage);
LABEL_9:
    swift_release(v6);
    return swift_release(v9);
  }
  return result;
}

void sub_10004DF40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[8];

  sub_100011610();
  v3 = v0;
  v4 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
  sub_10004F5CC();
  __chkstk_darwin(v5, v6);
  sub_1000162B4();
  v8 = *(_QWORD *)(v0 + 24);
  v9 = (_QWORD *)(v3 + 32);
  v10 = *(_QWORD *)(v3 + 40);
  v11 = *(unsigned __int8 *)(v3 + 48);
  if (*(_BYTE *)(v3 + 48))
  {
    if (v11 == 1)
    {
      sub_10000E49C();
      NWListener.cancel()();
      sub_1000118D4();
      v8 = *(_QWORD *)(v3 + 24);
      v10 = *(_QWORD *)(v3 + 40);
      LOBYTE(v11) = *(_BYTE *)(v3 + 48);
    }
    else
    {
      if (v8 == 1 && (*v9 | v10) == 0)
      {
        v37 = static os_log_type_t.error.getter(v7);
        sub_100015CE4(v37, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"NetworkPairingService: Ignoring shutdown request as service is already shutting down", 84, 2);
        return;
      }
      LOBYTE(v11) = 2;
    }
  }
  v13 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 24) = 1;
  *v9 = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 2;
  sub_10004EDAC(v8, v13, v10, v11);
  sub_1000156AC(v3 + 16, (uint64_t)v42);
  v14 = *(_QWORD *)(v3 + 16);
  if ((v14 & 0xC000000000000001) != 0)
  {
    if (v14 < 0)
      v15 = v14;
    else
      v15 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    __CocoaSet.makeIterator()(v15);
    sub_1000135A4();
    sub_10000EC00(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    v16 = sub_10004F5DC();
    v19 = Set.Iterator.init(_cocoa:)(v16, v17, v18);
    v14 = v42[3];
    v39 = v42[4];
    v20 = v42[5];
    v21 = v42[6];
    v22 = v42[7];
  }
  else
  {
    v39 = v14 + 56;
    v20 = ~(-1 << *(_BYTE *)(v14 + 32));
    sub_1000139EC();
    v22 = v23 & v24;
    swift_bridgeObjectRetain(v14);
    v21 = 0;
  }
  v38 = (unint64_t)(v20 + 64) >> 6;
  v25 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
  if (v14 < 0)
    goto LABEL_18;
  while (1)
  {
    if (v22)
    {
      v26 = (v22 - 1) & v22;
      v27 = __clz(__rbit64(v22)) | (v21 << 6);
      v28 = v21;
      goto LABEL_35;
    }
    v33 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v33 >= v38)
      goto LABEL_38;
    v34 = *(_QWORD *)(v39 + 8 * v33);
    v28 = v21 + 1;
    if (!v34)
    {
      v28 = v21 + 2;
      if (v21 + 2 >= v38)
        goto LABEL_38;
      v34 = *(_QWORD *)(v39 + 8 * v28);
      if (!v34)
      {
        v28 = v21 + 3;
        if (v21 + 3 >= v38)
          goto LABEL_38;
        v34 = *(_QWORD *)(v39 + 8 * v28);
        if (!v34)
        {
          v28 = v21 + 4;
          if (v21 + 4 >= v38)
            goto LABEL_38;
          v34 = *(_QWORD *)(v39 + 8 * v28);
          if (!v34)
          {
            v35 = v21 + 5;
            while (v35 < v38)
            {
              v34 = *(_QWORD *)(v39 + 8 * v35++);
              if (v34)
              {
                v28 = v35 - 1;
                goto LABEL_34;
              }
            }
LABEL_38:
            sub_100018CD4(v14);
            sub_1000138B4();
            return;
          }
        }
      }
    }
LABEL_34:
    v26 = (v34 - 1) & v34;
    v27 = __clz(__rbit64(v34)) + (v28 << 6);
LABEL_35:
    v36 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v27);
    sub_10000E49C();
    if (!v36)
      goto LABEL_38;
    while (1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v1, v25, v4);
      dispatch thunk of ControlChannelConnection.invalidate(for:)(v1);
      sub_1000118D4();
      v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
      v21 = v28;
      v22 = v26;
      if ((v14 & 0x8000000000000000) == 0)
        break;
LABEL_18:
      v29 = __CocoaSet.Iterator.next()(v19);
      if (v29)
      {
        v30 = v29;
        v40 = v29;
        v31 = sub_1000135A4();
        swift_unknownObjectRetain(v30);
        swift_dynamicCast(&v41, &v40, (char *)&type metadata for Swift.AnyObject + 8, v31, 7);
        v32 = v41;
        swift_unknownObjectRelease(v30);
        v28 = v21;
        v26 = v22;
        if (v32)
          continue;
      }
      goto LABEL_38;
    }
  }
  __break(1u);
}

void sub_10004E2AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];
  __int128 v33;
  __int128 v34;
  void *v35;

  sub_100011610();
  v4 = v0;
  v5 = type metadata accessor for ControlChannelConnection.Options(0);
  sub_10004F5CC();
  __chkstk_darwin(v6, v7);
  v8 = sub_10001632C();
  v9 = type metadata accessor for ControlChannelConnection.Options.Device(v8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  sub_1000162B4();
  if (*(_BYTE *)(v0 + 48) == 1)
  {
    ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)(1, 0, 0, 0, 0);
    v13 = type metadata accessor for NWConnectionControlChannelTransport(0);
    v33 = 0u;
    v34 = 0u;
    v35 = 0;
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v14 = sub_10000E49C();
    v15 = NWConnectionControlChannelTransport.init(connection:endpoint:netLinkManager:)(v14, &v33, 0);
    *((_QWORD *)&v34 + 1) = v13;
    v35 = &protocol witness table for NWConnectionControlChannelTransport;
    *(_QWORD *)&v33 = v15;
    v31 = v15;
    v16 = *(void **)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v2, v1, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for ControlChannelConnection.Options.device(_:), v5);
    v17 = *(_QWORD *)(v0 + 104);
    v32[3] = type metadata accessor for SystemKeychainPairingManager();
    v32[4] = sub_10000EC00(&qword_100084F88, (uint64_t (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager, (uint64_t)&unk_100065DFC);
    v32[0] = v17;
    v18 = sub_1000135A4();
    swift_retain(v15);
    v19 = v16;
    v20 = sub_10000E49C();
    v21 = static ControlChannelConnection.defaultMaxReconnectionAttempts.getter(v20);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)(&v33, v19, v2, v21, v32, 0);
    sub_1000167AC(v4 + 64, (uint64_t)&v33);
    dispatch thunk of ControlChannelConnection.userInteractionProvider.setter(&v33);
    sub_100012518(v4 + 16, (uint64_t)&v33);
    sub_1000144D8();
    sub_100011708();
    swift_endAccess(&v33);
    sub_1000118D4();
    sub_10004CBBC();
    v22 = sub_1000138D4((uint64_t)&unk_10007CD10, 24);
    sub_100016450(v22);
    v23 = v9;
    v24 = sub_1000138D4((uint64_t)&unk_10007CD38, 24);
    sub_100015E04(v24);
    v25 = sub_1000138D4((uint64_t)&unk_10007CD60, 32);
    *(_QWORD *)(v25 + 16) = v22;
    *(_QWORD *)(v25 + 24) = v24;
    sub_1000159B8();
    swift_retain(v24);
    dispatch thunk of ControlChannelConnection.invalidationHandler.setter(sub_10004F160, v25);
    swift_release(v22);
    swift_release(v24);
    v26 = sub_1000138D4((uint64_t)&unk_10007CD10, 24);
    sub_100016450(v26);
    v27 = sub_1000138D4((uint64_t)&unk_10007CD38, 24);
    sub_100015E04(v27);
    v28 = sub_1000138D4((uint64_t)&unk_10007CD88, 32);
    *(_QWORD *)(v28 + 16) = v27;
    *(_QWORD *)(v28 + 24) = v26;
    swift_retain(v27);
    swift_retain(v26);
    dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter(sub_10004F16C, v28);
    sub_100016234();
    v29 = sub_10000E4FC();
    dispatch thunk of ControlChannelConnection.start()(v29);
    swift_release(v31);
    sub_100015384();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v23);
  }
  else
  {
    v30 = static os_log_type_t.error.getter(v12);
    sub_10001539C(v30, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Rejecting TCP control pairing channel connection as service is no longer enabled", 80);
    NWConnection.cancel()();
  }
  sub_1000138B4();
}

uint64_t sub_10004E5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE v12[24];
  _BYTE v13[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = a2 + 16;
    swift_beginAccess(v6, v12, 0, 0);
    Strong = swift_weakLoadStrong(v6);
    if (Strong)
    {
      v8 = Strong;
      swift_beginAccess(v5 + 16, v11, 33, 0);
      sub_1000121F8();
      v10 = v9;
      swift_endAccess(v11);
      swift_release(v10);
      sub_10004CBBC();
      swift_release(v8);
    }
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10004E6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  _BYTE v17[24];
  _BYTE v18[24];

  v4 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v18, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v10 = result;
    v11 = a2 + 16;
    swift_beginAccess(v11, v17, 0, 0);
    Strong = swift_weakLoadStrong(v11);
    if (Strong)
    {
      v13 = Strong;
      v14 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter();
      if (v14)
      {
        v15 = (void *)v14;
        sub_100053F50();
        if ((v16 & 1) == 0)
        {
          (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:), v4);
          dispatch thunk of ControlChannelConnection.invalidate(for:)(v8);

          swift_release(v13);
          swift_release(v10);
          return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
        }

      }
      swift_release(v13);
    }
    return swift_release(v10);
  }
  return result;
}

void sub_10004E804(NSObject *a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char v49[24];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[3];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;

  v2 = a1;
  v3 = static os_log_type_t.default.getter(a1);
  sub_1000165F4(v1);
  if (os_log_type_enabled(v2, v3))
  {
    sub_1000165F4(v1);
    v4 = sub_1000123C4(22);
    v5 = sub_1000123C4(32);
    v52[0] = v5;
    *(_DWORD *)v4 = 136446466;
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 40);
    v8 = *(_BYTE *)(v1 + 48);
    v53 = *(_QWORD *)(v1 + 24);
    v54 = v6;
    v55 = v7;
    LOBYTE(v56) = v8;
    sub_10004ED5C(v53, v6, v7, v8);
    v9 = String.init<A>(describing:)(&v53, &type metadata for NetworkPairingService.State);
    sub_100010D40(v9, v10, v52);
    v53 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v4 + 4);
    sub_100015870(v1);
    sub_10000E4C8();
    *(_WORD *)(v4 + 12) = 2048;
    sub_1000156AC(v1 + 16, (uint64_t)v49);
    v12 = sub_10001534C();
    v13 = sub_100012A70(v12);
    sub_1000118D4();
    sub_10000E4C8();
    v53 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v4 + 14);
    sub_1000118D4();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "State dump: NetworkPairingService state = %{public}s, connection count = %ld", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy(v5, 1);
    sub_100012398(v5);
    sub_100012398(v4);
  }
  else
  {
    sub_100015870(v1);
  }
  sub_1000156AC(v1 + 16, (uint64_t)v52);
  v14 = *(_QWORD *)(v1 + 16);
  if ((v14 & 0xC000000000000001) != 0)
  {
    if (v14 < 0)
      v15 = *(_QWORD *)(v1 + 16);
    else
      v15 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v16 = __CocoaSet.makeIterator()(v15);
    v17 = sub_1000135A4();
    v18 = sub_10000EC00(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    v19 = Set.Iterator.init(_cocoa:)(v16, v17, v18);
    v14 = v53;
    v48 = v54;
    v20 = v55;
    v21 = v56;
    v22 = v57;
  }
  else
  {
    v48 = v14 + 56;
    v20 = ~(-1 << *(_BYTE *)(v14 + 32));
    sub_1000139EC();
    v22 = v23 & v24;
    swift_bridgeObjectRetain(v14);
    v21 = 0;
  }
  v47 = (unint64_t)(v20 + 64) >> 6;
  if (v14 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v22)
    {
      v25 = (v22 - 1) & v22;
      v26 = __clz(__rbit64(v22)) | (v21 << 6);
      v27 = v21;
      goto LABEL_30;
    }
    v33 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v33 >= v47)
      goto LABEL_35;
    v34 = *(_QWORD *)(v48 + 8 * v33);
    v27 = v21 + 1;
    if (!v34)
    {
      v27 = v21 + 2;
      if (v21 + 2 >= v47)
        goto LABEL_35;
      v34 = *(_QWORD *)(v48 + 8 * v27);
      if (!v34)
      {
        v27 = v21 + 3;
        if (v21 + 3 >= v47)
          goto LABEL_35;
        v34 = *(_QWORD *)(v48 + 8 * v27);
        if (!v34)
        {
          v27 = v21 + 4;
          if (v21 + 4 >= v47)
            goto LABEL_35;
          v34 = *(_QWORD *)(v48 + 8 * v27);
          if (!v34)
          {
            v35 = v21 + 5;
            while (v35 < v47)
            {
              v34 = *(_QWORD *)(v48 + 8 * v35++);
              if (v34)
              {
                v27 = v35 - 1;
                goto LABEL_29;
              }
            }
LABEL_35:
            sub_100018CD4(v14);
            return;
          }
        }
      }
    }
LABEL_29:
    v25 = (v34 - 1) & v34;
    v26 = __clz(__rbit64(v34)) + (v27 << 6);
LABEL_30:
    v31 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v26);
    v32 = sub_1000144D8();
    if (!v31)
      goto LABEL_35;
    while (1)
    {
      v36 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v2, v36))
      {
        sub_1000165F4(v31);
        v37 = sub_1000123C4(12);
        v38 = sub_1000123C4(32);
        v50 = v31;
        v51 = v38;
        *(_DWORD *)v37 = 136446210;
        v39 = v2;
        v40 = v20;
        v41 = sub_1000135A4();
        sub_1000144D8();
        v42 = String.init<A>(describing:)(&v50, v41);
        v44 = v43;
        sub_100010D40(v42, v43, &v51);
        *(_QWORD *)(v37 + 4) = v45;
        sub_100015870(v31);
        v46 = v44;
        v20 = v40;
        v2 = v39;
        swift_bridgeObjectRelease(v46);
        _os_log_impl((void *)&_mh_execute_header, v39, v36, "State dump: NetworkPairingService control channel connection: %{public}s", (uint8_t *)v37, 0xCu);
        swift_arrayDestroy(v38, 1);
        sub_100012398(v38);
        sub_100012398(v37);
      }
      v19 = sub_100015384();
      v21 = v27;
      v22 = v25;
      if ((v14 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v28 = __CocoaSet.Iterator.next()(v19);
      if (v28)
      {
        v29 = v28;
        v50 = v28;
        v30 = sub_1000135A4();
        swift_unknownObjectRetain(v29);
        swift_dynamicCast(&v51, &v50, (char *)&type metadata for Swift.AnyObject + 8, v30, 7);
        v31 = v51;
        v32 = swift_unknownObjectRelease(v29);
        v27 = v21;
        v25 = v22;
        if (v31)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

uint64_t sub_10004ECD8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10004EDAC(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));

  sub_100010DFC((_QWORD *)(v0 + 64));
  swift_release();
  return v0;
}

uint64_t sub_10004ED1C()
{
  uint64_t v0;

  sub_10004ECD8();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for NetworkPairingService()
{
  return objc_opt_self(_TtC20remotepairingdeviced21NetworkPairingService);
}

uint64_t sub_10004ED5C(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    if (a4 != 1)
      return result;
    swift_retain(result);
    a2 = a3;
  }
  return swift_bridgeObjectRetain(a2);
}

uint64_t destroy for NetworkPairingService.State(uint64_t a1)
{
  return sub_10004EDAC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_10004EDAC(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    if (a4 != 1)
      return result;
    swift_release(result);
    a2 = a3;
  }
  return swift_bridgeObjectRelease(a2);
}

uint64_t initializeWithCopy for NetworkPairingService.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_10004ED5C(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for NetworkPairingService.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_10004ED5C(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_10004EDAC(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for NetworkPairingService.State(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NetworkPairingService.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_10004EDAC(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkPairingService.State(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkPairingService.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_10004EF98(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 1u)
    return *(unsigned __int8 *)(a1 + 24);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_10004EFB0(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    LOBYTE(a2) = 2;
    *(_QWORD *)result = v2;
  }
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NetworkPairingService.State()
{
  return &type metadata for NetworkPairingService.State;
}

void sub_10004EFDC()
{
  sub_10004DF40();
}

void sub_10004EFFC(NSObject *a1)
{
  sub_10004E804(a1);
}

unint64_t sub_10004F01C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000150C0(&qword_100087410);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100045450(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10004F138()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004F160()
{
  uint64_t v0;

  return sub_10004E5F4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10004F16C()
{
  uint64_t v0;

  return sub_10004E6BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10004F178(uint64_t a1)
{
  uint64_t v1;

  return sub_10004DE40(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10004F180()
{
  uint64_t v0;

  sub_1000135FC();
  sub_100015430(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10004F1A8()
{
  sub_10004D294();
}

uint64_t sub_10004F1B8()
{
  uint64_t v0;

  sub_100015430(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_release();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004F1E4()
{
  uint64_t v0;

  sub_1000135FC();
  swift_release();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10004F20C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 128;
  for (i = 10; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10004F2A4(uint64_t result, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = v3;
  v7 = result;
  v8 = *v4;
  if ((*v4 & 0xC000000000000001) == 0)
  {
    result = swift_isUniquelyReferenced_nonNull_native(*v4);
    v15 = result;
    v16 = *v4;
    if ((a3 & 1) == 0)
    {
      if ((v7 & 0x8000000000000000) != 0 || 1 << *(_BYTE *)(v16 + 32) <= (uint64_t)v7)
      {
        __break(1u);
      }
      else if (((*(_QWORD *)(v16 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v7) & 1) != 0)
      {
        if (*(_DWORD *)(v16 + 36) == (_DWORD)a2)
        {
LABEL_20:
          v28 = v16;
          *v4 = 0x8000000000000000;
          if (!v15)
          {
            sub_100057598();
            v16 = v28;
          }
          v13 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v7);
          sub_1000584D0(v7);
          v14 = *v4;
          *v4 = v28;
          goto LABEL_23;
        }
        __break(1u);
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_26;
    }
LABEL_13:
    result = __CocoaSet.Index.age.getter(v7, a2);
    if ((_DWORD)result == *(_DWORD *)(v16 + 36))
    {
      v17 = __CocoaSet.Index.element.getter(v7, a2);
      v26 = v17;
      v18 = type metadata accessor for ControlChannelConnection(0);
      swift_bridgeObjectRetain(v16);
      swift_unknownObjectRetain(v17);
      swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
      v19 = v27;
      swift_unknownObjectRelease(v17);
      v28 = v19;
      v20 = *(_QWORD *)(v16 + 40);
      v21 = sub_10000EC00(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
      v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v18, v21);
      v23 = -1 << *(_BYTE *)(v16 + 32);
      v7 = v22 & ~v23;
      if (((*(_QWORD *)(v16 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
      {
        v24 = ~v23;
        v25 = sub_10000EC00(&qword_1000872C8, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
        while (1)
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v7);
          if ((dispatch thunk of static Equatable.== infix(_:_:)(&v27, &v28, v18, v25) & 1) != 0)
            break;
          v7 = (v7 + 1) & v24;
          if (((*(_QWORD *)(v16 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        swift_release(v19);
        __break(1u);
      }
      swift_release(v19);
      swift_bridgeObjectRelease(v16);
      v16 = *v4;
      goto LABEL_20;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if ((a3 & 1) != 0)
  {
    if (v8 < 0)
      v9 = *v4;
    else
      v9 = v8 & 0xFFFFFFFFFFFFFF8;
    v10 = __CocoaSet.member(for:)(result, a2, v9);
    v27 = v10;
    v11 = type metadata accessor for ControlChannelConnection(0);
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRetain(v10);
    swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v11, 7);
    v12 = v28;
    swift_unknownObjectRelease(v10);
    v13 = sub_100057F58();
    swift_release(v12);
    v14 = v8;
LABEL_23:
    swift_bridgeObjectRelease(v14);
    return v13;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10004F5A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_10004EDAC(v2, v0, v1, 0);
}

uint64_t sub_10004F5BC()
{
  uint64_t v0;

  return sub_10000EBB8(*(_QWORD *)(v0 - 152), *(_QWORD *)(v0 - 184), 0);
}

uint64_t sub_10004F5DC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004F5E8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_10001E814(v1, v2);
  return swift_retain(v0);
}

uint64_t sub_10004F604(uint64_t a1)
{
  return MGCopyAnswer(a1, 0);
}

void sub_10004F610(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain(*(_QWORD *)(a1 + 40));
  v6 = a3;
  v5(a2, a3);
  sub_1000115DC();

}

uint64_t sub_10004F66C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v4 = sub_1000150C0(&qword_100085DD0);
  sub_1000115F0();
  __chkstk_darwin(v5, v6);
  sub_100011928();
  v9 = v8 - v7;
  result = sub_100052994(a1);
  if ((v12 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v11)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return sub_100015664(a2, 1, 1, v4);
  v13 = (uint64_t *)(v9 + *(int *)(v4 + 48));
  v14 = sub_100053178(v9, result, v11, 0, a1);
  v16 = v15;
  *v13 = v14;
  v13[1] = v15;
  v17 = sub_1000118FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a2, v9, v17);
  v18 = (uint64_t *)(a2 + *(int *)(v4 + 48));
  *v18 = v14;
  v18[1] = v16;
  swift_bridgeObjectRetain(v16);
  sub_10003F608(v9, &qword_100085DD0);
  return sub_100015664(a2, 0, 1, v4);
}

uint64_t sub_10004F7B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_1000150C0(&qword_100087548);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_100052994(a1);
  if ((v10 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v9)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return sub_100015664(a2, 1, 1, v4);
  v11 = *(int *)(v4 + 48);
  v12 = sub_100053230((uint64_t)v7, result, v9, 0, a1);
  *(_QWORD *)&v7[v11] = v12;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a2, v7, v13);
  *(_QWORD *)(a2 + *(int *)(v4 + 48)) = v12;
  swift_retain(v12);
  sub_10003F608((uint64_t)v7, &qword_100087548);
  return sub_100015664(a2, 0, 1, v4);
}

uint64_t sub_10004F8FC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t i;
  uint64_t v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_DWORD *)(a2 + 32) == (_DWORD)result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 9; ; ++i)
  {
    v5 = i - 7;
    if (__OFADD__(i - 8, 1))
      break;
    v6 = *(_DWORD *)(a2 + 4 * i) == (_DWORD)result;
    v3 = v6;
    v6 = v6 || v5 == v2;
    if (v6)
      return v3;
  }
  __break(1u);
  return result;
}

void sub_10004F95C(uint64_t a1, char *a2, uint64_t (*a3)(char *, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t);
  uint64_t v28;
  os_log_type_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint8_t *v44;
  uint64_t (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[12];
  uint64_t v49;

  v45 = a3;
  v5 = sub_1000150C0(&qword_1000850E8);
  sub_1000115F0();
  __chkstk_darwin(v6, v7);
  sub_100011928();
  v10 = v9 - v8;
  v11 = type metadata accessor for XPCDictionary(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v43 - v18;
  v20 = *(int *)(v5 + 48);
  v21 = v10 + v20;
  v22 = *(_QWORD *)a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v21, &a2[v20], v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v19, v21, v11);
  v23 = swift_retain(v22);
  v24 = static os_log_type_t.default.getter(v23);
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1000886E0, "Handling copy remote unlock key request", 39, 2);
  v25 = XPCDictionary.auditToken.getter(&v48[4]);
  XPCDictionary.entitlements.getter(v25);
  v26 = v46;
  sub_10005213C(a1);
  if (v26)
  {
    v46 = v22;
    v27 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
    v28 = v27(v16, v11);
    v29 = static os_log_type_t.error.getter(v28);
    v30 = qword_1000886E0;
    v31 = v29;
    v32 = os_log_type_enabled((os_log_t)qword_1000886E0, v29);
    if ((v32 & 1) != 0)
    {
      sub_1000123BC();
      sub_1000123BC();
      v33 = swift_slowAlloc(12, -1);
      v45 = v27;
      v34 = (uint8_t *)v33;
      v35 = swift_slowAlloc(32, -1);
      v49 = v35;
      *(_DWORD *)v34 = 136315138;
      v44 = v34 + 4;
      v47 = v26;
      sub_1000123BC();
      v36 = sub_1000150C0(&qword_100085A00);
      v37 = String.init<A>(describing:)(&v47, v36);
      v39 = v38;
      sub_100010D40(v37, v38, &v49);
      v47 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v44);
      swift_bridgeObjectRelease(v39);
      swift_errorRelease(v26);
      swift_errorRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Pairing deletion failed with error: %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1);
      sub_100012398(v35);
      v41 = (uint64_t)v34;
      v27 = v45;
      v32 = sub_100012398(v41);
    }
    swift_willThrow(v32);
    swift_release(v46);
    v27(v19, v11);
  }
  else
  {
    sub_100016234();
    v42 = *(void (**)(char *, uint64_t))(v12 + 8);
    v42(v16, v11);
    v42(v19, v11);
  }
  sub_1000123A4();
}

uint64_t sub_10004FC24()
{
  return dispatch thunk of XPCConnection.activate()();
}

void sub_10004FC48(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void (*a9)(char *, uint64_t), uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)();
  uint64_t v45;
  uint64_t is_darwinos;
  uint64_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  os_log_type_t v51;
  NSObject *v52;
  id v53;
  BOOL v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  os_log_type_t v103;
  NSObject *v104;
  uint8_t *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  void (**v128)();
  void (*v129)();
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  id v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  os_log_t v142;
  void (*v143)(char *, char *, uint64_t);
  id v144;
  _QWORD *v145;
  uint64_t v146;
  void (*v147)(char *, uint64_t);
  uint64_t v148;
  id v149;
  uint64_t v150;
  char *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  id v159;
  void (*v160)();
  uint64_t v161;
  void *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166[3];
  uint64_t v167;
  uint64_t v168;

  v164 = a7;
  v161 = a6;
  v162 = (void *)a5;
  v154 = a3;
  v155 = a4;
  v153 = a2;
  v152 = a1;
  v149 = (id)sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000115F0();
  __chkstk_darwin(v12, v13);
  sub_100011928();
  v148 = v15 - v14;
  type metadata accessor for RemotePairingError(0);
  sub_1000115F0();
  __chkstk_darwin(v16, v17);
  sub_100024CF0();
  v156 = sub_1000150C0(&qword_100086178);
  sub_1000115F0();
  __chkstk_darwin(v18, v19);
  sub_1000155D8();
  v20 = sub_1000118FC();
  v21 = *(_QWORD **)(v20 - 8);
  v22 = v21[8];
  v24 = __chkstk_darwin(v20, v23);
  v151 = (char *)&v140 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24, v25);
  sub_1000539AC(v26, v27, v28, v29, v30, v31, v32, v33, v140);
  v36 = __chkstk_darwin(v34, v35);
  v158 = (char *)&v140 - v37;
  v39 = __chkstk_darwin(v36, v38);
  v41 = (char *)&v140 - v40;
  __chkstk_darwin(v39, v42);
  v163 = (char *)&v140 - v43;
  v44 = (void (*)())swift_allocObject(&unk_10007D010, 40, 7);
  *((_QWORD *)v44 + 2) = a8;
  *((_QWORD *)v44 + 3) = a9;
  v160 = v44;
  *((_QWORD *)v44 + 4) = a10;
  v159 = a8;
  v45 = swift_retain(a10);
  if (remotePairingIsEnabled(v45))
  {
    is_darwinos = os_variant_is_darwinos("com.apple.RemotePairing");
    if ((is_darwinos & 1) != 0)
      goto LABEL_3;
    v147 = a9;
    v65 = sub_1000539C0();
    if ((*(_BYTE *)(*v65 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted) & 1) == 0)
    {
      v74 = static os_log_type_t.error.getter(v65);
      v75 = sub_10001539C(v74, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Rejecting tunnel connection as device hasn't unlocked since boot", 64);
      static RemotePairingError.unlockRequired.getter(v75);
      sub_100011640((unint64_t *)&unk_1000859D0, v76, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      sub_100015B84(v77);
      sub_100053A0C();
      sub_100011640((unint64_t *)&unk_1000853D0, v78, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      v79 = sub_100013B44();
      sub_100014478(v79, v80, v81);
      sub_10001459C();
      v82 = v159;
LABEL_13:
      sub_100036F4C();
      sub_10003F608(v10, &qword_100086178);

      swift_release();
LABEL_29:
      swift_release();
      sub_1000138B4();
      return;
    }
    sub_1000539C0();
    is_darwinos = sub_10004B120(24);
    if ((is_darwinos & 1) != 0)
    {
LABEL_3:
      v47 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter(is_darwinos);
      if (v47)
      {
        v48 = (void *)v47;
        v49 = v163;
        v50 = UUID.init()(v47);
        v51 = static os_log_type_t.default.getter(v50);
        v52 = qword_1000886E0;
        v143 = (void (*)(char *, char *, uint64_t))v21[2];
        v143(v41, v49, v20);
        v156 = (uint64_t)v48;
        v53 = v48;
        v54 = os_log_type_enabled(v52, v51);
        v146 = a10;
        v157 = v20;
        v145 = v21;
        v144 = v53;
        if (v54)
        {
          v142 = v52;
          sub_100024D78((uint64_t)v162);
          v55 = v53;
          v56 = sub_1000123C4(42);
          v57 = sub_1000123C4(128);
          v141 = v57;
          v166[0] = v57;
          *(_DWORD *)v56 = 136446978;
          v58 = UUID.uuidString.getter(v57);
          sub_100010D40(v58, v59, v166);
          v165 = v60;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v56 + 4);
          sub_100015524();
          v147 = (void (*)(char *, uint64_t))v21[1];
          v147(v41, v20);
          *(_WORD *)(v56 + 12) = 2080;
          v61 = objc_msgSend(v55, "identifier");
          if (v61)
          {
            v62 = v61;
            v63 = v148;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v61);

            v64 = 0;
          }
          else
          {
            v64 = 1;
            v63 = v148;
          }
          sub_100015664(v63, v64, 1, v157);
          v89 = String.init<A>(describing:)(v63, v149);
          sub_100010D40(v89, v90, v166);
          v165 = v91;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v56 + 14);

          sub_1000155B8();
          *(_WORD *)(v56 + 22) = 2080;
          v92 = sub_100039348(v55);
          if (v93)
          {
            v94 = v93;
          }
          else
          {
            v92 = 0x6E776F6E6B6E553CLL;
            v94 = 0xE90000000000003ELL;
          }
          sub_100010D40(v92, v94, v166);
          sub_100053998(v95);

          sub_100015524();
          *(_WORD *)(v56 + 32) = 2080;
          v87 = (uint64_t)v162;
          if (v162)
            v96 = v162;
          else
            v96 = &_swiftEmptyArrayStorage;
          v97 = type metadata accessor for PeerConnectionInfo(0);
          swift_bridgeObjectRetain(v87);
          v98 = Array.description.getter(v96, v97);
          v100 = v99;
          sub_100015524();
          sub_100010D40(v98, v100, v166);
          sub_100053998(v101);
          sub_100015A54(v87);
          swift_bridgeObjectRelease(v100);
          _os_log_impl((void *)&_mh_execute_header, v142, v51, "Creating tunnel %{public}s for host %s (%s) with peer info: %s", (uint8_t *)v56, 0x2Au);
          v102 = v141;
          swift_arrayDestroy(v141, 4);
          sub_100012398(v102);
          v88 = sub_100012398(v56);
        }
        else
        {
          v86 = (void (*)(char *, uint64_t))v21[1];
          v87 = (uint64_t)v162;
          sub_100024D78((uint64_t)v162);
          v147 = v86;
          v86(v41, v20);
          sub_100015A54(v87);

        }
        v103 = static os_log_type_t.default.getter(v88);
        v104 = powerLog.getter();
        if (os_log_type_enabled(v104, v103))
        {
          sub_100024D78(v87);
          v105 = (uint8_t *)sub_1000123C4(12);
          v106 = sub_1000123C4(32);
          *(_DWORD *)v105 = 136315138;
          v166[0] = v106;
          if (v87)
            v107 = (void *)v87;
          else
            v107 = &_swiftEmptyArrayStorage;
          v108 = type metadata accessor for PeerConnectionInfo(0);
          swift_bridgeObjectRetain(v162);
          v109 = Array.description.getter(v107, v108);
          v111 = v110;
          swift_bridgeObjectRelease(v107);
          sub_100010D40(v109, v111, v166);
          v165 = v112;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v105 + 4);
          sub_100015A54((uint64_t)v162);
          swift_bridgeObjectRelease(v111);
          _os_log_impl((void *)&_mh_execute_header, v104, v103, "Will create a tunnel with peer info: %s", v105, 0xCu);
          swift_arrayDestroy(v106, 1);
          sub_100012398(v106);
          sub_100012398((uint64_t)v105);
        }

        v113 = v163;
        v114 = v164;
        v115 = v157;
        v116 = (void (*)(uint64_t, char *, uint64_t))v143;
        v143(v158, v163, v157);
        v149 = *(id *)(v114 + 32);
        v117 = sub_100015378((uint64_t)&unk_10007CE80);
        swift_weakInit(v117 + 16, v114);
        v118 = v150;
        v116(v150, v113, v115);
        v119 = v145;
        v120 = *((unsigned __int8 *)v145 + 80);
        v121 = (v120 + 24) & ~v120;
        v122 = v121 + v22;
        v123 = v120 | 7;
        v124 = (v121 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
        v125 = swift_allocObject(&unk_10007D038, v124 + 16, v120 | 7);
        *(_QWORD *)(v125 + 16) = v117;
        v126 = (void (*)(uint64_t, uint64_t, uint64_t))v119[4];
        v127 = v157;
        v126(v125 + v121, v118, v157);
        v128 = (void (**)())(v125 + v124);
        v129 = v160;
        *v128 = sub_100053868;
        v128[1] = v129;
        v130 = sub_100015378((uint64_t)&unk_10007CE80);
        swift_weakInit(v130 + 16, v164);
        v131 = v151;
        v116((uint64_t)v151, v163, v127);
        v132 = swift_allocObject(&unk_10007D060, v122, v123);
        *(_QWORD *)(v132 + 16) = v130;
        v126(v132 + v121, (uint64_t)v131, v127);
        v133 = type metadata accessor for Tunnel(0);
        swift_allocObject(v133, *(unsigned int *)(v133 + 48), *(unsigned __int16 *)(v133 + 52));
        v134 = v144;
        v135 = v149;
        swift_retain(v129);
        v136 = sub_10005B59C();
        sub_1000123DC(v164 + 24, (uint64_t)v166, 33);
        swift_retain(v136);
        v137 = v163;
        sub_1000590F4();
        swift_endAccess(v166);
        OS_dispatch_queue.assertOnQueueHierarchy()();
        ControlChannelConnection.transport.getter(v166);
        v138 = v167;
        v139 = v168;
        sub_100016418(v166, v167);
        dispatch thunk of ControlChannelTransport.physicallyConnected.getter(v138, v139);
        sub_10005BD34();

        sub_1000115DC();
        v147(v137, v157);
        sub_100010DFC(v166);

        sub_100012494();
        goto LABEL_29;
      }
      static RemotePairingError.tunnelError.getter(0);
      sub_100011640((unint64_t *)&unk_1000859D0, v83, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      sub_100015B84(v84);
      sub_100053A0C();
      sub_100011640((unint64_t *)&unk_1000853D0, v85, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      v71 = sub_100013B44();
    }
    else
    {
      v66 = static os_log_type_t.error.getter(is_darwinos);
      v67 = sub_10001539C(v66, (uint64_t)&_mh_execute_header, qword_1000886E0, (uint64_t)"Rejecting tunnel connection as device hasn't unlocked recently", 62);
      static RemotePairingError.unlockRequired.getter(v67);
      sub_100011640((unint64_t *)&unk_1000859D0, v68, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      sub_100015B84(v69);
      sub_100053A0C();
      sub_100011640((unint64_t *)&unk_1000853D0, v70, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      v71 = sub_100013B44();
      v73 = 0xD000000000000029;
    }
    sub_100014478(v71, v73, v72);
    sub_10001459C();
    v82 = v159;
    goto LABEL_13;
  }
  swift_release();

  swift_release();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000004DLL, 0x800000010006ECD0, "remotepairingdeviced/DeviceTunnelManager.swift", 46, 2, 65, 0);
  __break(1u);
}

uint64_t sub_100050734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t Strong;
  _BYTE v14[24];
  _BYTE v15[24];

  v7 = sub_1000150C0(&qword_100086178);
  __chkstk_darwin(v7, v8);
  v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002D638(a1, (uint64_t)v10, &qword_100086178);
  if (swift_getEnumCaseMultiPayload(v10, v7) == 1)
  {
    v11 = a2 + 16;
    swift_errorRelease(*v10);
    swift_beginAccess(v11, v15, 0, 0);
    Strong = swift_weakLoadStrong(v11);
    if (Strong)
    {
      swift_beginAccess(Strong + 24, v14, 33, 0);
      sub_100058824();
      swift_endAccess(v14);
      OS_dispatch_queue.assertOnQueueHierarchy()();
      swift_release();
      swift_release();
    }
  }
  else
  {
    sub_10003F608((uint64_t)v10, &qword_100086178);
  }
  return a4(a1);
}

void sub_10005087C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t IsEnabled;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v1 = v0;
  sub_10002D894();
  v23[0] = 0xD000000000000028;
  v23[1] = 0x800000010006EC20;
  v2 = sub_100013A78();
  v3 = StringProtocol.contains<A>(_:)(v23, &type metadata for String, &type metadata for String, v2, v2);
  IsEnabled = sub_1000155B8();
  if ((v3 & 1) != 0)
  {
    IsEnabled = remotePairingIsEnabled(IsEnabled);
    v6 = IsEnabled;
  }
  else
  {
    v6 = 0;
  }
  v7 = static RemoteServiceNames.deviceComputeService.getter(IsEnabled, v5);
  v9 = v8;
  v10 = *(_QWORD *)(v1 + 32);
  v11 = sub_100015378((uint64_t)&unk_10007CE80);
  swift_weakInit(v11 + 16, v1);
  v12 = swift_allocObject(&unk_10007CEA8, 25, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_BYTE *)(v12 + 24) = v6;
  v13 = sub_100011904((uint64_t)sub_10005467C, (uint64_t)_NSConcreteStackBlock, 1107296256, v19, v21);
  swift_release();
  v14 = String.utf8CString.getter(v7, v9);
  sub_1000155B8();
  remote_service_listen_with_device(v14 + 32, v10, v13);
  swift_release();
  _Block_release(v13);
  v15 = sub_10000F4E0();
  if ((v15 & 1) != 0)
  {
    static RemoteServiceNames.deviceComputeService.getter(v15, v16);
    sub_100053A0C();
    v17 = sub_100011904((uint64_t)sub_10004F610, (uint64_t)_NSConcreteStackBlock, 1107296256, v20, v22);
    swift_retain(v1);
    swift_release();
    v18 = String.utf8CString.getter(v9, v13);
    swift_bridgeObjectRelease(v13);
    lockdown_checkin_xpc(v18 + 32, 0, v10, v17);
    sub_10001195C();
    _Block_release(v17);
  }
}

uint64_t sub_100050A68(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t type;
  int v33;
  uint64_t result;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  os_log_type_t v44;
  NSObject *v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, _QWORD *);
  uint64_t v57;
  os_log_type_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, char *, _QWORD *);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  id v85;
  char *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89[3];
  char v90[24];
  char v91[48];

  LODWORD(v85) = a4;
  v87 = a2;
  v84 = (_QWORD *)type metadata accessor for UUID(0);
  v82 = *(v84 - 1);
  v6 = *(_QWORD *)(v82 + 64);
  v8 = __chkstk_darwin(v84, v7);
  v81 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8, v9);
  v83 = (char *)&v77 - v11;
  v13 = __chkstk_darwin(v10, v12);
  v80 = (char *)&v77 - v14;
  __chkstk_darwin(v13, v15);
  v86 = (char *)&v77 - v16;
  v17 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v17, v18);
  v79 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v77 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a3 + 16;
  v30 = sub_1000150C0((uint64_t *)&unk_100087560);
  inited = swift_initStackObject(v30, v91);
  *(_OWORD *)(inited + 16) = xmmword_100065CC0;
  *(_DWORD *)(inited + 32) = static remote_device_type_t.ncmHost.getter();
  *(_DWORD *)(inited + 36) = static remote_device_type_t.ncmDevice.getter();
  type = remote_device_get_type(a1);
  v33 = sub_10004F8FC(type, inited);
  swift_setDeallocating(inited);
  swift_beginAccess(v29, v90, 0, 0);
  result = swift_weakLoadStrong(v29);
  if (result)
  {
    v35 = result;
    v36 = (char)v85;
    if ((v85 & v33 & 1) != 0)
    {
      sub_1000173F0(0, (unint64_t *)&qword_100086250, OS_dispatch_queue_ptr);
      static DispatchQoS.userInteractive.getter();
      (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v24, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v20);
      v89[0] = (uint64_t)&_swiftEmptyArrayStorage;
      sub_10000EC40((unint64_t *)&unk_100086210, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
      v38 = v37;
      v39 = sub_1000150C0(&qword_100085D80);
      sub_10000F4A4((unint64_t *)&unk_100086220, &qword_100085D80);
      v40 = v79;
      dispatch thunk of SetAlgebra.init<A>(_:)(v89, v39, v41, v17, v38);
      v85 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000023, 0x800000010006EC70, v28, v40, v24, 0);
      v42 = v86;
      v43 = UUID.init()(v85);
      v44 = static os_log_type_t.default.getter(v43);
      v45 = qword_1000886E0;
      v46 = v82;
      v47 = v80;
      v48 = v84;
      v79 = *(char **)(v82 + 16);
      ((void (*)(char *, char *, _QWORD *))v79)(v80, v42, v84);
      v49 = v44;
      if (os_log_type_enabled(v45, v44))
      {
        v50 = (uint8_t *)swift_slowAlloc(12, -1);
        v51 = swift_slowAlloc(32, -1);
        v78 = v51;
        v89[0] = v51;
        *(_DWORD *)v50 = 136446210;
        v52 = UUID.uuidString.getter(v51);
        v54 = v53;
        sub_100010D40(v52, v53, v89);
        v88 = v55;
        v48 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v50 + 4);
        swift_bridgeObjectRelease(v54);
        v56 = *(void (**)(char *, _QWORD *))(v46 + 8);
        v56(v47, v48);
        _os_log_impl((void *)&_mh_execute_header, v45, v49, "Received tunnel connection %{public}s through RSD for device compute connection", v50, 0xCu);
        v57 = v78;
        swift_arrayDestroy(v78, 1);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v50, -1, -1);
      }
      else
      {
        v56 = *(void (**)(char *, _QWORD *))(v46 + 8);
        v56(v47, v48);
      }
      v62 = v46;
      v63 = v86;
      v64 = (void (*)(char *, char *, _QWORD *))v79;
      ((void (*)(char *, char *, _QWORD *))v79)(v83, v86, v48);
      v84 = *(_QWORD **)(v35 + 32);
      v65 = swift_allocObject(&unk_10007CE80, 24, 7);
      swift_weakInit(v65 + 16, v35);
      v66 = v81;
      v64(v81, v63, v48);
      v67 = *(unsigned __int8 *)(v62 + 80);
      v68 = (v67 + 24) & ~v67;
      v69 = swift_allocObject(&unk_10007CF98, v68 + v6, v67 | 7);
      *(_QWORD *)(v69 + 16) = v65;
      (*(void (**)(uint64_t, char *, _QWORD *))(v62 + 32))(v69 + v68, v66, v48);
      v70 = type metadata accessor for Tunnel(0);
      swift_allocObject(v70, *(unsigned int *)(v70 + 48), *(unsigned __int16 *)(v70 + 52));
      v71 = v85;
      v72 = v84;
      v73 = sub_10005B59C();
      swift_beginAccess(v35 + 24, v89, 33, 0);
      swift_retain(v73);
      sub_1000590F4();
      swift_endAccess(v89);
      OS_dispatch_queue.assertOnQueueHierarchy()();
      v74 = type metadata accessor for SocketTunnelConnection(0);
      swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
      v75 = v71;
      v76 = SocketTunnelConnection.init(socket:queue:logPrefix:)(v87, v75, 0, 0);
      sub_100053334(v76, v73);

      swift_release();
      swift_release();
      v56(v63, v48);
    }
    else
    {
      v58 = static os_log_type_t.error.getter(result);
      v59 = qword_1000886E0;
      v60 = v58;
      if (os_log_type_enabled((os_log_t)qword_1000886E0, v58))
      {
        v61 = swift_slowAlloc(14, -1);
        *(_DWORD *)v61 = 67109376;
        LODWORD(v89[0]) = v36 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v89, (char *)v89 + 4, v61 + 4);
        *(_WORD *)(v61 + 8) = 1024;
        LODWORD(v89[0]) = v33 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v89, (char *)v89 + 4, v61 + 10);
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "RSD tunnel listener not accepting connection, enabled: %{BOOL}d, NCM: %{BOOL}d", (uint8_t *)v61, 0xEu);
        swift_slowDealloc(v61, -1, -1);
      }
      close(v87);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10005112C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  NSObject *v40;
  void (*v41)(char *, char *, id);
  _BOOL4 v42;
  uint8_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  id v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[3];

  v72 = a3;
  v4 = (_QWORD *)type metadata accessor for UUID(0);
  v74 = *(v4 - 1);
  v5 = *(_QWORD *)(v74 + 64);
  v7 = __chkstk_darwin(v4, v6);
  v70 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7, v8);
  v71 = (char *)&v65 - v10;
  v12 = __chkstk_darwin(v9, v11);
  v73 = (char *)&v65 - v13;
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v65 - v15;
  v17 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  result = __chkstk_darwin(v26, v27);
  v30 = (char *)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v68 = a1;
    sub_1000173F0(0, (unint64_t *)&qword_100086250, OS_dispatch_queue_ptr);
    static DispatchQoS.userInteractive.getter();
    (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v25, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v21);
    v76[0] = (uint64_t)&_swiftEmptyArrayStorage;
    sub_10000EC40((unint64_t *)&unk_100086210, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v32 = v31;
    v33 = sub_1000150C0(&qword_100085D80);
    v69 = v4;
    v34 = v33;
    sub_10000F4A4((unint64_t *)&unk_100086220, &qword_100085D80);
    v35 = v34;
    v36 = v69;
    dispatch thunk of SetAlgebra.init<A>(_:)(v76, v35, v37, v17, v32);
    v67 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000023, 0x800000010006EC70, v30, v20, v25, 0);
    v38 = UUID.init()(v67);
    v39 = static os_log_type_t.default.getter(v38);
    v40 = qword_1000886E0;
    v41 = *(void (**)(char *, char *, id))(v74 + 16);
    v41(v73, v16, v36);
    v42 = os_log_type_enabled(v40, v39);
    v66 = v5;
    if (v42)
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v76[0] = v44;
      *(_DWORD *)v43 = 136446210;
      v45 = v73;
      v46 = UUID.uuidString.getter(v44);
      v48 = v47;
      sub_100010D40(v46, v47, v76);
      v75 = v49;
      v36 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v43 + 4);
      swift_bridgeObjectRelease(v48);
      v73 = *(char **)(v74 + 8);
      ((void (*)(char *, id))v73)(v45, v36);
      _os_log_impl((void *)&_mh_execute_header, v40, v39, "Received tunnel connection %{public}s through lockdown", v43, 0xCu);
      swift_arrayDestroy(v44, 1);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      v50 = v73;
      v73 = *(char **)(v74 + 8);
      ((void (*)(char *, id))v73)(v50, v36);
    }
    v41(v71, v16, v36);
    v51 = v72;
    v69 = *(id *)(v72 + 32);
    v52 = swift_allocObject(&unk_10007CE80, 24, 7);
    swift_weakInit(v52 + 16, v51);
    v53 = v70;
    v41(v70, v16, v36);
    v54 = v74;
    v55 = *(unsigned __int8 *)(v74 + 80);
    v56 = v36;
    v57 = (v55 + 24) & ~v55;
    v58 = swift_allocObject(&unk_10007CF20, v57 + v66, v55 | 7);
    *(_QWORD *)(v58 + 16) = v52;
    (*(void (**)(uint64_t, char *, id))(v54 + 32))(v58 + v57, v53, v56);
    v59 = type metadata accessor for Tunnel(0);
    swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
    v60 = v67;
    v69;
    v61 = sub_10005B59C();
    swift_beginAccess(v51 + 24, v76, 33, 0);
    swift_retain(v61);
    sub_1000590F4();
    swift_endAccess(v76);
    OS_dispatch_queue.assertOnQueueHierarchy()();
    v62 = type metadata accessor for LockdownTunnelConnection(0);
    swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
    v63 = v60;
    v64 = sub_10001AFE8(v68, v63);
    sub_10005356C(v64, v61);

    swift_release();
    ((void (*)(char *, id))v73)(v16, v56);
    return swift_release();
  }
  return result;
}

uint64_t sub_100051684(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];
  _BYTE v5[24];

  v2 = a2 + 16;
  sub_1000123DC(a2 + 16, (uint64_t)v5, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_1000123DC(result + 24, (uint64_t)v4, 33);
    sub_100058824();
    swift_endAccess(v4);
    OS_dispatch_queue.assertOnQueueHierarchy()();
    sub_1000115DC();
    return sub_10001195C();
  }
  return result;
}

void sub_10005170C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];

  v2 = v1;
  v3 = static os_log_type_t.default.getter(a1);
  sub_1000173F0(0, (unint64_t *)&qword_100086990, OS_os_log_ptr);
  v4 = (void *)sub_1000539D4();
  sub_10001539C(v3, (uint64_t)&_mh_execute_header, (uint64_t)v4, (uint64_t)"Cancelling all control channel initiated tunnels", 48);

  sub_1000123DC(v2 + 24, (uint64_t)v21, 0);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = v5 + 64;
  sub_100015CFC();
  v9 = v8 & v7;
  v11 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(v5);
  v12 = 0;
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v12 << 6);
LABEL_20:
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
    if (*(_QWORD *)(v20 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator))
    {
      swift_retain(v20);
      sub_10005BFBC();
      sub_1000118D4();
    }
  }
  v15 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v15 >= v11)
    goto LABEL_22;
  ++v12;
  if (*(_QWORD *)(v6 + 8 * v15))
    goto LABEL_19;
  v12 = v15 + 1;
  if (v15 + 1 >= v11)
    goto LABEL_22;
  if (*(_QWORD *)(v6 + 8 * v12))
    goto LABEL_19;
  v12 = v15 + 2;
  if (v15 + 2 >= v11)
    goto LABEL_22;
  if (*(_QWORD *)(v6 + 8 * v12))
    goto LABEL_19;
  v12 = v15 + 3;
  if (v15 + 3 >= v11)
    goto LABEL_22;
  if (*(_QWORD *)(v6 + 8 * v12))
  {
LABEL_19:
    sub_100015354();
    v9 = v18 & v17;
    v14 = v19 + (v12 << 6);
    goto LABEL_20;
  }
  v16 = v15 + 4;
  if (v16 >= v11)
  {
LABEL_22:
    sub_10001195C();
    return;
  }
  if (*(_QWORD *)(v6 + 8 * v16))
  {
    v12 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    v12 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v12 >= v11)
      goto LABEL_22;
    ++v16;
    if (*(_QWORD *)(v6 + 8 * v12))
      goto LABEL_19;
  }
LABEL_24:
  __break(1u);
}

void sub_1000518CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];

  v3 = v1;
  sub_1000150C0(&qword_100087540);
  sub_1000115F0();
  __chkstk_darwin(v4, v5);
  sub_1000155D8();
  v6 = sub_1000150C0(&qword_100087548);
  sub_1000115F0();
  __chkstk_darwin(v7, v8);
  sub_100012460();
  v10 = static os_log_type_t.default.getter(v9);
  sub_1000173F0(0, (unint64_t *)&qword_100086990, OS_os_log_ptr);
  v11 = (void *)sub_1000539D4();
  sub_10001539C(v10, (uint64_t)&_mh_execute_header, (uint64_t)v11, (uint64_t)"Cancelling all tunnels", 22);

  v12 = (uint64_t *)(v3 + 24);
  while (1)
  {
    sub_1000123DC((uint64_t)v12, (uint64_t)v25, 33);
    if (*(_QWORD *)(*v12 + 16))
    {
      v13 = v0 + *(int *)(v6 + 48);
      v14 = sub_100052994(*v12);
      v16 = v15;
      v18 = v17 & 1;
      v19 = sub_1000150C0(&qword_100087558);
      Dictionary._Variant.remove(at:)(v0, v13, v14, v16, v18, v19);
      sub_100026D90(v14, v16, v18);
      v20 = 0;
    }
    else
    {
      v20 = 1;
    }
    sub_1000154E0(v0, v20);
    swift_endAccess(v25);
    OS_dispatch_queue.assertOnQueueHierarchy()();
    sub_1000153F4(v0);
    if (v21)
      break;
    v22 = *(int *)(v6 + 48);
    v23 = sub_1000118FC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v2, v0, v23);
    v24 = *(_QWORD *)(v0 + v22);
    *(_QWORD *)(v2 + v22) = v24;
    swift_retain(v24);
    sub_10005BFBC();
    sub_1000118D4();
    sub_10003F608(v2, &qword_100087548);
  }
  sub_10003F608(v0, &qword_100087540);
  sub_1000138B4();
}

void sub_100051A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  void (*v67)(uint64_t, uint64_t);
  os_log_type_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[2];
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94[3];
  char v95[32];

  v89 = a1;
  v3 = sub_1000118FC();
  v92 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  sub_1000156C4();
  v81 = v5;
  v8 = __chkstk_darwin(v6, v7);
  sub_1000539AC(v8, v9, v10, v11, v12, v13, v14, v15, v77[0]);
  v87 = sub_1000150C0(&qword_100086168);
  sub_1000115F0();
  __chkstk_darwin(v16, v17);
  sub_100012460();
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_1000115F0();
  __chkstk_darwin(v18, v19);
  sub_1000156C4();
  v83 = v20;
  v23 = __chkstk_darwin(v21, v22);
  v25 = (char *)v77 - v24;
  __chkstk_darwin(v23, v26);
  v28 = (char *)v77 - v27;
  v80 = v1 + 24;
  sub_1000123DC(v1 + 24, (uint64_t)v95, 0);
  v82 = v1;
  v86 = *(_QWORD *)(v1 + 24) + 64;
  sub_100015CFC();
  v31 = v30 & v29;
  v88 = (unint64_t)(v32 + 63) >> 6;
  v90 = v33;
  v34 = swift_bridgeObjectRetain(v33);
  v35 = 0;
  v34.n128_u64[0] = 136315138;
  v78 = v34;
  v77[1] = (uint64_t)&type metadata for Any + 8;
  v84 = v2;
  v85 = v25;
  while (v31)
  {
    v36 = __clz(__rbit64(v31));
    v31 &= v31 - 1;
    v37 = v36 | (v35 << 6);
LABEL_24:
    v53 = *(_QWORD *)(*(_QWORD *)(v90 + 56) + 8 * v37);
    v54 = *(void **)(v53 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator);
    if (v54)
    {
      swift_retain(v53);
      v55 = v54;
      v56 = objc_msgSend(v55, "identifier");
      v93 = v55;
      if (v56)
      {
        v57 = v56;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v56);

        v58 = 0;
      }
      else
      {
        v58 = 1;
      }
      sub_1000154E0((uint64_t)v28, v58);
      sub_1000539DC((uint64_t)v25);
      sub_1000154E0((uint64_t)v25, 0);
      v59 = v2 + *(int *)(v87 + 48);
      sub_1000539CC((uint64_t)v28, v2);
      sub_1000539CC((uint64_t)v25, v59);
      sub_1000153F4(v2);
      if (v62)
      {
        sub_100015988((uint64_t)v25);
        sub_100015988((uint64_t)v28);
        sub_1000153F4(v59);
        if (!v62)
          goto LABEL_36;
        sub_100015988(v2);
LABEL_38:
        v91 = v35;
        v68 = static os_log_type_t.default.getter(v60);
        sub_1000539DC(v81);
        sub_1000173F0(0, (unint64_t *)&qword_100086990, OS_os_log_ptr);
        v69 = sub_1000539D4();
        v70 = v68;
        if (os_log_type_enabled(v69, v68))
        {
          v71 = sub_1000123C4(12);
          v72 = sub_1000123C4(32);
          v94[0] = v72;
          *(_DWORD *)v71 = v78.n128_u32[0];
          sub_10000EC40(&qword_1000859C8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v74 = dispatch thunk of CustomStringConvertible.description.getter(v3, v73);
          sub_100010D40(v74, v75, v94);
          *(_QWORD *)(v71 + 4) = v76;
          sub_1000118F4();
          sub_100012418();
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "Cancelling tunnel associated with host %s", (uint8_t *)v71, 0xCu);
          swift_arrayDestroy(v72, 1);
          sub_100012398(v72);
          sub_100012398(v71);

        }
        else
        {

          sub_100012418();
        }
        sub_1000123DC(v80, (uint64_t)v94, 33);
        sub_100058824();
        swift_endAccess(v94);
        sub_1000118D4();
        OS_dispatch_queue.assertOnQueueHierarchy()();
        sub_10005BFBC();
        v2 = v84;
        v25 = v85;
        v35 = v91;
        goto LABEL_42;
      }
      v91 = v35;
      v61 = v83;
      sub_1000539CC(v2, v83);
      sub_1000153F4(v59);
      if (v62)
      {
        v25 = v85;
        sub_100015988((uint64_t)v85);
        sub_100015988((uint64_t)v28);
        sub_100012418();
        v35 = v91;
LABEL_36:
        sub_10003F608(v2, &qword_100086168);
        goto LABEL_42;
      }
      v63 = v92;
      v64 = v79;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32))(v79, v59, v3);
      sub_10000EC40(&qword_100086170, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v66 = dispatch thunk of static Equatable.== infix(_:_:)(v61, v64, v3, v65);
      v67 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
      v67(v64, v3);
      v25 = v85;
      sub_100015988((uint64_t)v85);
      sub_100015988((uint64_t)v28);
      v67(v61, v3);
      v2 = v84;
      sub_100015988(v84);
      v35 = v91;
      if ((v66 & 1) != 0)
        goto LABEL_38;
LABEL_42:

      sub_100012494();
    }
  }
  v38 = v35 + 1;
  if (__OFADD__(v35, 1))
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v38 >= v88)
    goto LABEL_43;
  ++v35;
  if (*(_QWORD *)(v86 + 8 * v38))
    goto LABEL_23;
  v35 = v38 + 1;
  sub_100053A00();
  if (v39 == v40)
    goto LABEL_43;
  sub_1000539F4();
  if (v42)
    goto LABEL_23;
  v35 = v41 + 2;
  sub_100053A00();
  if (v39 == v40)
    goto LABEL_43;
  sub_1000539F4();
  if (v44)
    goto LABEL_23;
  v35 = v43 + 3;
  sub_100053A00();
  if (v39 == v40)
    goto LABEL_43;
  sub_1000539F4();
  if (v46)
  {
LABEL_23:
    sub_100015354();
    v31 = v51 & v50;
    v37 = v52 + (v35 << 6);
    goto LABEL_24;
  }
  v47 = v45 + 4;
  if (v47 >= v88)
  {
LABEL_43:
    swift_release(v90);
    sub_1000138B4();
    return;
  }
  if (*(_QWORD *)(v86 + 8 * v47))
  {
    v35 = v47;
    goto LABEL_23;
  }
  while (1)
  {
    v35 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    sub_100053A00();
    if (v39 == v40)
      goto LABEL_43;
    sub_1000539F4();
    v47 = v48 + 1;
    if (v49)
      goto LABEL_23;
  }
LABEL_45:
  __break(1u);
}

uint64_t sub_100052034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for RemotePairingError(0);
  sub_1000115F0();
  __chkstk_darwin(v2, v3);
  sub_1000157A0();
  result = XPCDictionary.subscript.getter(0xD00000000000002BLL, 0x800000010006EB40);
  if ((result & 1) == 0)
  {
    sub_10000EC40((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    static Error<>.permissionDenied.getter(v1, v5);
    sub_10000EC40((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_1000157D4(v6);
    Error<>.init(_:_:)(v0, 0xD000000000000049, 0x800000010006EB70, v1);
    return sub_100015DD4();
  }
  return result;
}

void sub_10005213C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  unint64_t v36;
  unint64_t v37;
  _BYTE v38[24];

  v6 = type metadata accessor for RemotePairingError(0);
  sub_1000115F0();
  __chkstk_darwin(v7, v8);
  sub_1000157A0();
  sub_1000150C0(&qword_100087540);
  sub_1000115F0();
  __chkstk_darwin(v9, v10);
  sub_100024CF0();
  sub_100052034();
  if (!v2)
  {
    v11 = swift_beginAccess(v1 + 24, v38, 0, 0);
    v12 = *(_QWORD *)(v1 + 24);
    __chkstk_darwin(v11, v13);
    v35[2] = a1;
    swift_bridgeObjectRetain(v12);
    v14 = sub_100052A2C((uint64_t)sub_100052974, (uint64_t)v35, v12);
    swift_bridgeObjectRelease(v12);
    sub_10004F7B0(v14, v4);
    swift_release(v14);
    v15 = sub_1000150C0(&qword_100087548);
    if (sub_100015658(v4, 1, v15) == 1)
    {
      sub_10003F608(v4, &qword_100087540);
      static RemotePairingError.deviceNotFound.getter();
      v36 = 0;
      v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      v16 = swift_bridgeObjectRelease(v37);
      v36 = 0xD00000000000001ALL;
      v37 = 0x800000010006EAC0;
      v17._countAndFlagsBits = RemoteUnlockDeviceKeyForTunnelRequest.tunnelDeviceName.getter(v16);
      object = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object);
      v19 = v36;
      v20 = v37;
      sub_10000EC40((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      sub_1000157D4(v21);
      sub_10000EC40((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError, (uint64_t)&protocol conformance descriptor for RemotePairingError);
      Error<>.init(_:_:)(v3, v19, v20, v6);
      sub_100015DD4();
    }
    else
    {
      v22 = *(_QWORD *)(v4 + *(int *)(v15 + 48));
      v23 = type metadata accessor for UUID(0);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v4, v23);
      v25 = *(void **)(v22 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator);
      if (v25)
      {
        v26 = v25;
        v27 = CUPairedPeer.remoteUnlockKey.getter();
        if (v28 >> 60 == 15)
        {
          static RemotePairingError.pairingRecordMissingInfo.getter(v27);
          sub_100011640((unint64_t *)&unk_1000859D0, v29, (uint64_t)&protocol conformance descriptor for RemotePairingError);
          sub_1000157D4(v30);
          sub_100011640((unint64_t *)&unk_1000853D0, v31, (uint64_t)&protocol conformance descriptor for RemotePairingError);
          sub_1000139D0(0xD000000000000023, (uint64_t)"No remote unlock key for this host.");
          sub_100015DD4();
        }
        else
        {
          RemoteUnlockDeviceKeyForTunnelResponse.init(deviceKey:)(v27);
        }
        sub_100016234();

      }
      else
      {
        static RemotePairingError.invalidOperation.getter(v24);
        sub_100011640((unint64_t *)&unk_1000859D0, v32, (uint64_t)&protocol conformance descriptor for RemotePairingError);
        sub_1000157D4(v33);
        sub_100011640((unint64_t *)&unk_1000853D0, v34, (uint64_t)&protocol conformance descriptor for RemotePairingError);
        sub_1000139D0(0xD00000000000002CLL, (uint64_t)"Tunnel is not associated with a paired host.");
        sub_100015DD4();
        sub_100016234();
      }
    }
  }
  sub_1000123A4();
}

uint64_t sub_100052490(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v26;

  v4 = sub_1000150C0(&qword_100087548);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v26 - v10;
  v12 = *a2;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v15(v11, a1, v13);
  v16 = *(int *)(v4 + 48);
  *(_QWORD *)&v11[v16] = v12;
  v15(v8, (uint64_t)v11, v13);
  *(_QWORD *)&v8[v16] = v12;
  swift_retain(v12);
  v17 = sub_10005B4D8();
  v19 = v18;
  v20 = RemoteUnlockDeviceKeyForTunnelRequest.tunnelDeviceName.getter();
  v22 = v21;
  if (v19)
  {
    if (v17 == v20 && v19 == v21)
      v24 = 1;
    else
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v20, v21, 0);
    swift_bridgeObjectRelease(v22);
    sub_10003F608((uint64_t)v11, &qword_100087548);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    sub_10003F608((uint64_t)v11, &qword_100087548);
    swift_bridgeObjectRelease(v22);
    v24 = 0;
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v13);
  return v24 & 1;
}

void sub_100052624(NSObject *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  id v61;
  uint64_t v62;
  char v63[24];

  sub_1000123DC(v1 + 24, (uint64_t)v63, 0);
  v3 = *(_QWORD *)(v1 + 24);
  v59 = v3 + 64;
  sub_100015CFC();
  v6 = v5 & v4;
  v60 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(v3);
  v8 = 0;
  v57 = (char *)&type metadata for Any + 8;
  while (v6)
  {
    v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v10 = v9 | (v8 << 6);
LABEL_24:
    v26 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v10);
    v27 = swift_retain(v26);
    v28 = static os_log_type_t.default.getter(v27);
    swift_retain_n(v26, 4);
    v29 = v28;
    if (os_log_type_enabled(a1, v28))
    {
      swift_retain_n(v26, 2);
      v30 = sub_1000123C4(32);
      v31 = sub_1000123C4(96);
      v62 = v31;
      *(_DWORD *)v30 = 136446722;
      v32 = UUID.uuidString.getter();
      sub_1000539E8(v32, v33, v34, v35, v36, v37, v38, v39, v55, (uint64_t)v57);
      *(_QWORD *)(v30 + 4) = v40;
      sub_100016348();
      sub_1000118F4();
      *(_WORD *)(v30 + 12) = 2082;
      v61 = *(id *)(v26 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator);
      v41 = v61;
      v42 = String.init<A>(describing:)(&v61, &type metadata for Tunnel.Initiator);
      sub_1000539E8(v42, v43, v44, v45, v46, v47, v48, v49, v56, v58);
      *(_QWORD *)(v30 + 14) = v50;
      sub_100016348();
      sub_1000118F4();
      *(_WORD *)(v30 + 22) = 2082;
      v51 = sub_10005B4D8();
      if (v52)
      {
        v53 = v52;
      }
      else
      {
        v51 = 0x296C6C756E28;
        v53 = 0xE600000000000000;
      }
      sub_100010D40(v51, v53, &v62);
      *(_QWORD *)(v30 + 24) = v54;
      sub_100016348();
      sub_1000118F4();
      _os_log_impl((void *)&_mh_execute_header, a1, v29, "State dump: %{public}s initiated by %{public}s, RSD name %{public}s", (uint8_t *)v30, 0x20u);
      swift_arrayDestroy(v31, 3);
      sub_100012398(v31);
      sub_100012398(v30);
      sub_100012494();
    }
    else
    {
      swift_release_n(v26, 5);
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v11 >= v60)
    goto LABEL_30;
  ++v8;
  if (*(_QWORD *)(v59 + 8 * v11))
    goto LABEL_23;
  v8 = v11 + 1;
  sub_1000164DC();
  if (v12 == v13)
    goto LABEL_30;
  sub_100016164();
  if (v15)
    goto LABEL_23;
  v8 = v14 + 2;
  sub_1000164DC();
  if (v12 == v13)
    goto LABEL_30;
  sub_100016164();
  if (v17)
    goto LABEL_23;
  v8 = v16 + 3;
  sub_1000164DC();
  if (v12 == v13)
    goto LABEL_30;
  sub_100016164();
  if (v19)
  {
LABEL_23:
    sub_100015354();
    v6 = v24 & v23;
    v10 = v25 + (v8 << 6);
    goto LABEL_24;
  }
  v20 = v18 + 4;
  if (v20 >= v60)
  {
LABEL_30:
    sub_1000115DC();
    return;
  }
  if (*(_QWORD *)(v59 + 8 * v20))
  {
    v8 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    sub_1000164DC();
    if (v12 == v13)
      goto LABEL_30;
    sub_100016164();
    v20 = v21 + 1;
    if (v22)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_100052904()
{
  uint64_t v0;

  sub_1000135FC();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  sub_100010DFC((_QWORD *)(v0 + 40));
  return v0;
}

uint64_t sub_100052934()
{
  uint64_t v0;

  sub_100052904();
  return swift_deallocClassInstance(v0, 81, 7);
}

uint64_t type metadata accessor for DeviceTunnelManager()
{
  return objc_opt_self(_TtC20remotepairingdeviced19DeviceTunnelManager);
}

uint64_t sub_100052974(uint64_t a1, uint64_t *a2)
{
  return sub_100052490(a1, a2) & 1;
}

uint64_t sub_100052994(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 128;
  for (i = 11; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100052A2C(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(char *, uint64_t *);
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v16;

  v5 = a2;
  v6 = (uint64_t (*)(char *, uint64_t *))isStackAllocationSafe;
  v7 = *(_BYTE *)(a3 + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    v12 = (unint64_t *)((char *)&v16 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10005757C(0, v10, v12);
    v13 = sub_100052BA8(v12, v10, a3, v6);
    if (v3)
      swift_willThrow(v13);
    else
      return v13;
  }
  else
  {
    v14 = (unint64_t *)swift_slowAlloc(v11, -1);
    sub_10005757C(0, v10, v14);
    v5 = sub_100052BA8(v14, v10, a3, v6);
    swift_slowDealloc(v14, -1, -1);
  }
  return v5;
}

uint64_t sub_100052BA8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t *))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t *);
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v34 = a4;
  v27 = a2;
  v28 = a1;
  v35 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v35 - 8);
  result = __chkstk_darwin(v35, v5);
  v32 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = 0;
  v36 = (_QWORD *)a3;
  v9 = *(_QWORD *)(a3 + 64);
  v29 = 0;
  v30 = a3 + 64;
  v10 = 1 << *(_BYTE *)(a3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v31 = (unint64_t)(v10 + 63) >> 6;
  v13 = v32;
  v14 = v33;
  v15 = v35;
  while (v12)
  {
    v16 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v17 = v16 | (v8 << 6);
LABEL_17:
    v21 = v36;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v13, v36[6] + *(_QWORD *)(v14 + 72) * v17, v15);
    v22 = *(_QWORD *)(v21[7] + 8 * v17);
    v38 = v22;
    swift_retain(v22);
    v23 = v37;
    v24 = v34(v13, &v38);
    v37 = v23;
    if (v23)
    {
      swift_release(v22);
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v13, v15);
    }
    v25 = v24;
    swift_release(v22);
    result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v13, v15);
    if ((v25 & 1) != 0)
    {
      *(unint64_t *)((char *)v28 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = __OFADD__(v29++, 1);
      if (v18)
        goto LABEL_31;
    }
  }
  v18 = __OFADD__(v8++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v8 >= v31)
    return sub_100052E34(v28, v27, v29, v36);
  v19 = *(_QWORD *)(v30 + 8 * v8);
  if (v19)
  {
LABEL_16:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v8 << 6);
    goto LABEL_17;
  }
  v20 = v8 + 1;
  if (v8 + 1 >= v31)
    return sub_100052E34(v28, v27, v29, v36);
  v19 = *(_QWORD *)(v30 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v8 + 2;
  if (v8 + 2 >= v31)
    return sub_100052E34(v28, v27, v29, v36);
  v19 = *(_QWORD *)(v30 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v8 + 3;
  if (v8 + 3 >= v31)
    return sub_100052E34(v28, v27, v29, v36);
  v19 = *(_QWORD *)(v30 + 8 * v20);
  if (v19)
  {
LABEL_15:
    v8 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v31)
      return sub_100052E34(v28, v27, v29, v36);
    v19 = *(_QWORD *)(v30 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_16;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100052E34(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  v50 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v50 - 8);
  v9 = __chkstk_darwin(v50, v8);
  v49 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  v45 = (char *)&v41 - v12;
  if (!a3)
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (uint64_t)a4;
  }
  sub_1000150C0(&qword_100087550);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v14 = result;
  v42 = a1;
  v43 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *a1;
  v16 = 0;
  v17 = result + 64;
  v44 = a4;
  v18 = v50;
  while (1)
  {
    if (v15)
    {
      v47 = (v15 - 1) & v15;
      v48 = v16;
      v19 = __clz(__rbit64(v15)) | (v16 << 6);
    }
    else
    {
      v20 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_40;
      if (v20 >= v43)
        return v14;
      v21 = v42[v20];
      v22 = v16 + 1;
      if (!v21)
      {
        v22 = v16 + 2;
        if (v16 + 2 >= v43)
          return v14;
        v21 = v42[v22];
        if (!v21)
        {
          v22 = v16 + 3;
          if (v16 + 3 >= v43)
            return v14;
          v21 = v42[v22];
          if (!v21)
          {
            v23 = v16 + 4;
            if (v16 + 4 >= v43)
              return v14;
            v21 = v42[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v22 >= v43)
                  return v14;
                v21 = v42[v22];
                ++v23;
                if (v21)
                  goto LABEL_24;
              }
            }
            v22 = v16 + 4;
          }
        }
      }
LABEL_24:
      v47 = (v21 - 1) & v21;
      v48 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = v45;
    v25 = v46;
    v26 = *(_QWORD *)(v46 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v46 + 16))(v45, a4[6] + v26 * v19, v18);
    v27 = *(_QWORD *)(a4[7] + 8 * v19);
    v28 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v28(v49, v24, v18);
    v29 = *(_QWORD *)(v14 + 40);
    sub_10000EC40(&qword_100086300, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v31 = v30;
    swift_retain(v27);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v18, v31);
    v32 = -1 << *(_BYTE *)(v14 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) == 0)
      break;
    v35 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v17 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v28)(*(_QWORD *)(v14 + 48) + v35 * v26, v49, v50);
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v35) = v27;
    ++*(_QWORD *)(v14 + 16);
    if (__OFSUB__(a3--, 1))
      goto LABEL_39;
    a4 = v44;
    v15 = v47;
    v16 = v48;
    if (!a3)
      return v14;
  }
  v36 = 0;
  v37 = (unint64_t)(63 - v32) >> 6;
  while (++v34 != v37 || (v36 & 1) == 0)
  {
    v38 = v34 == v37;
    if (v34 == v37)
      v34 = 0;
    v36 |= v38;
    v39 = *(_QWORD *)(v17 + 8 * v34);
    if (v39 != -1)
    {
      v35 = __clz(__rbit64(~v39)) + (v34 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100053178(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v7 = result;
    v8 = *(_QWORD *)(a5 + 48);
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a2, v9);
    v10 = (uint64_t *)(*(_QWORD *)(a5 + 56) + 16 * a2);
    v11 = *v10;
    swift_bridgeObjectRetain(v10[1]);
    return v11;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100053230(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v7 = result;
    v8 = *(_QWORD *)(a5 + 48);
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a2, v9);
    return swift_retain(*(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * a2));
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000532D4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000532F8()
{
  uint64_t v0;

  sub_1000135FC();
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100053318(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  return sub_100050A68(a1, a2, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_100053324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10005112C(a1, a2, v2);
}

uint64_t sub_100053334(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  _QWORD aBlock[6];
  __int128 v25[2];
  _QWORD v26[5];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = type metadata accessor for SocketTunnelConnection(0);
  v26[4] = &protocol witness table for SocketTunnelConnection;
  v26[0] = a1;
  v22 = *(_QWORD *)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  sub_1000167AC((uint64_t)v26, (uint64_t)v25);
  v14 = swift_allocObject(&unk_10007CFC0, 64, 7);
  *(_QWORD *)(v14 + 16) = a2;
  sub_10002D6E4(v25, v14 + 24);
  aBlock[4] = sub_100053994;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E208;
  aBlock[3] = &unk_10007CFD8;
  v15 = _Block_copy(aBlock);
  swift_retain(a1);
  v16 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v16);
  v23 = &_swiftEmptyArrayStorage;
  sub_10000EC40((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = v17;
  v19 = sub_1000150C0(&qword_1000850F0);
  sub_10000F4A4((unint64_t *)&qword_1000853C0, &qword_1000850F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v4, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v8, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  swift_release();
  return sub_100010DFC(v26);
}

uint64_t sub_10005356C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void *v24;
  _QWORD aBlock[6];
  __int128 v26[2];
  _QWORD v27[5];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[3] = type metadata accessor for LockdownTunnelConnection(0);
  sub_10000EC40(&qword_100085398, type metadata accessor for LockdownTunnelConnection, (uint64_t)&unk_100065BA4);
  v27[4] = v14;
  v27[0] = a1;
  v23 = *(_QWORD *)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  sub_1000167AC((uint64_t)v27, (uint64_t)v26);
  v15 = swift_allocObject(&unk_10007CF48, 64, 7);
  *(_QWORD *)(v15 + 16) = a2;
  sub_10002D6E4(v26, v15 + 24);
  aBlock[4] = sub_1000537C0;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E208;
  aBlock[3] = &unk_10007CF60;
  v16 = _Block_copy(aBlock);
  swift_retain(a1);
  v17 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v17);
  v24 = &_swiftEmptyArrayStorage;
  sub_10000EC40((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = v18;
  v20 = sub_1000150C0(&qword_1000850F0);
  sub_10000F4A4((unint64_t *)&qword_1000853C0, &qword_1000850F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v20, v21, v4, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v8, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  swift_release();
  return sub_100010DFC(v27);
}

void sub_1000537C0()
{
  sub_10005BF9C();
}

uint64_t sub_1000537D0(uint64_t a1)
{
  uint64_t v1;

  sub_1000118FC();
  return sub_100051684(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100053814()
{
  uint64_t v0;

  sub_1000135FC();
  sub_100010DFC((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10005383C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100053868()
{
  sub_100036F4C();
}

uint64_t sub_100053874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_1000118FC();
  sub_1000159C0();
  v3 = v2 | 7;
  v5 = ((v4 + v1 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  sub_1000135FC();
  sub_10000E568();
  swift_release();
  return swift_deallocObject(v0, v5, v3);
}

uint64_t sub_1000538E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(sub_1000118FC() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100050734(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(uint64_t (**)(uint64_t))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100053938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000118FC();
  sub_1000159C0();
  v3 = v1 + v2;
  v5 = v4 | 7;
  sub_1000135FC();
  sub_10000E568();
  return swift_deallocObject(v0, v3, v5);
}

uint64_t sub_100053998(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 136, v1, v2);
}

void sub_1000539AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 256) = (char *)&a9 - v9;
}

_QWORD *sub_1000539C0()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_100016418(v0, *(_QWORD *)(v1 + 64));
}

void sub_1000539CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10002D638(a1, a2, v2);
}

uint64_t sub_1000539D4()
{
  return static OS_os_log.default.getter();
}

uint64_t sub_1000539DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, _QWORD, uint64_t);
  uint64_t v3;

  return v2(a1, *(_QWORD *)(v3 - 176), v1);
}

void sub_1000539E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_100010D40(a1, a2, (uint64_t *)va);
}

void sub_100053A18()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  char v17;
  os_log_type_t v18;
  NSObject *v19;
  id v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_100015A24();
  v2 = v1;
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_10005A800();
  __chkstk_darwin(v3, v4);
  sub_100012460();
  sub_10000E49C();
  sub_10005A918();
  if (v0)
  {
    v6 = sub_1000118D4();
    v7 = static os_log_type_t.error.getter(v6);
    if (sub_1000155C8(v7))
    {
      sub_100013AE0();
      sub_100013AE0();
      v8 = sub_1000123C4(12);
      v31 = sub_1000123C4(32);
      sub_10005A6B0(4.8149e-34);
      v9 = sub_1000150C0(&qword_100085A00);
      v10 = sub_10005A768(v9);
      sub_10005A7E0(v10, v11);
      sub_10005A650(v12);
      sub_100016504();
      sub_1000138CC();
      sub_1000138CC();
      sub_10005A668((void *)&_mh_execute_header, v13, v14, "Error encountered validating resolved peer for newly configured connection: %s");
      sub_10005A758();
      sub_100012398(v31);
      sub_100012398(v8);
    }
    sub_1000138CC();
    goto LABEL_26;
  }
  v15 = v5;
  sub_1000118D4();
  if (sub_100011A10())
  {
    sub_10005A784();
    sub_10005A888();
  }
  if (!sub_10005A894())
  {
    sub_10005A854();
    if (!(!v17 & v16))
      goto LABEL_17;
    goto LABEL_22;
  }
  sub_10005A784();
  sub_10005A87C();
  sub_10005A854();
  if (!v17 & v16)
  {
    sub_10005A848();
    if (!(!v17 & v16))
    {
LABEL_17:
      v27 = sub_10005A67C();
      goto LABEL_18;
    }
LABEL_22:
    sub_10000E49C();
    sub_10005ABD4();
    sub_1000118D4();
    sub_10005A6E8();
    goto LABEL_26;
  }
  sub_10005A848();
  if (!v17 & v16)
    goto LABEL_17;
  sub_10005A8DC();
  sub_10005A69C();
  v27 = sub_100015B98();
  if ((v15 & 1) != 0)
    goto LABEL_22;
LABEL_18:
  v18 = static os_log_type_t.default.getter(v27);
  v19 = qword_1000886E0;
  if (sub_100024E44(v18))
  {
    v20 = v2;
    v21 = (uint8_t *)sub_1000123C4(12);
    v22 = sub_1000123C4(32);
    *(_DWORD *)v21 = 136315138;
    if (sub_10005AB90(v22, "identifier"))
    {
      sub_10005A8B4();

      v23 = sub_1000118FC();
      v25 = v23;
      v26 = 0;
    }
    else
    {
      v23 = type metadata accessor for UUID(0);
      v25 = v23;
      v26 = 1;
    }
    v28 = sub_1000154EC(v23, v26, v24, v25);
    sub_10005A7E0(v28, v29);
    sub_1000116AC(v30);

    sub_100014518();
    sub_1000118DC((void *)&_mh_execute_header, v19, v18, "Newly configured connection's resolved peer %s no longer exists in the keychain", v21);
    sub_1000144B8();
    sub_100012398(v22);
    sub_100012398((uint64_t)v21);
  }
  sub_10005A6E8();
LABEL_26:
  sub_1000138B4();
}

void sub_100053CB4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  char v17;
  os_log_type_t v18;
  NSObject *v19;
  id v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_100015A24();
  v2 = v1;
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_10005A800();
  __chkstk_darwin(v3, v4);
  sub_100012460();
  sub_10000E49C();
  sub_10005A918();
  if (v0)
  {
    v6 = sub_1000118D4();
    v7 = static os_log_type_t.error.getter(v6);
    if (sub_1000155C8(v7))
    {
      sub_100013AE0();
      sub_100013AE0();
      v8 = sub_1000123C4(12);
      v31 = sub_1000123C4(32);
      sub_10005A6B0(4.8149e-34);
      v9 = sub_1000150C0(&qword_100085A00);
      v10 = sub_10005A768(v9);
      sub_10005A7E0(v10, v11);
      sub_10005A650(v12);
      sub_100016504();
      sub_1000138CC();
      sub_1000138CC();
      sub_10005A668((void *)&_mh_execute_header, v13, v14, "Error encountered validating resolved peer for newly configured connection: %s");
      sub_10005A758();
      sub_100012398(v31);
      sub_100012398(v8);
    }
    sub_1000138CC();
    goto LABEL_26;
  }
  v15 = v5;
  sub_1000118D4();
  if (sub_100011A10())
  {
    sub_10005A784();
    sub_10005A888();
  }
  if (!sub_10005A894())
  {
    sub_10005A854();
    if (!(!v17 & v16))
      goto LABEL_17;
    goto LABEL_22;
  }
  sub_10005A784();
  sub_10005A87C();
  sub_10005A854();
  if (!v17 & v16)
  {
    sub_10005A848();
    if (!(!v17 & v16))
    {
LABEL_17:
      v27 = sub_10005A67C();
      goto LABEL_18;
    }
LABEL_22:
    sub_10000E49C();
    sub_10005ABD4();
    sub_1000118D4();
    sub_10005A6E8();
    goto LABEL_26;
  }
  sub_10005A848();
  if (!v17 & v16)
    goto LABEL_17;
  sub_10005A8DC();
  sub_10005A69C();
  v27 = sub_100015B98();
  if ((v15 & 1) != 0)
    goto LABEL_22;
LABEL_18:
  v18 = static os_log_type_t.default.getter(v27);
  v19 = qword_1000886E0;
  if (sub_100024E44(v18))
  {
    v20 = v2;
    v21 = (uint8_t *)sub_1000123C4(12);
    v22 = sub_1000123C4(32);
    *(_DWORD *)v21 = 136315138;
    if (sub_10005AB90(v22, "identifier"))
    {
      sub_10005A8B4();

      v23 = sub_1000118FC();
      v25 = v23;
      v26 = 0;
    }
    else
    {
      v23 = type metadata accessor for UUID(0);
      v25 = v23;
      v26 = 1;
    }
    v28 = sub_1000154EC(v23, v26, v24, v25);
    sub_10005A7E0(v28, v29);
    sub_1000116AC(v30);

    sub_100014518();
    sub_1000118DC((void *)&_mh_execute_header, v19, v18, "Newly configured connection's resolved peer %s no longer exists in the keychain", v21);
    sub_1000144B8();
    sub_100012398(v22);
    sub_100012398((uint64_t)v21);
  }
  sub_10005A6E8();
LABEL_26:
  sub_1000138B4();
}

void sub_100053F50()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  char v17;
  os_log_type_t v18;
  NSObject *v19;
  id v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_100015A24();
  v2 = v1;
  sub_1000150C0((uint64_t *)&unk_100086150);
  sub_10005A800();
  __chkstk_darwin(v3, v4);
  sub_100012460();
  sub_10000E49C();
  sub_10005A918();
  if (v0)
  {
    v6 = sub_1000118D4();
    v7 = static os_log_type_t.error.getter(v6);
    if (sub_1000155C8(v7))
    {
      sub_100013AE0();
      sub_100013AE0();
      v8 = sub_1000123C4(12);
      v31 = sub_1000123C4(32);
      sub_10005A6B0(4.8149e-34);
      v9 = sub_1000150C0(&qword_100085A00);
      v10 = sub_10005A768(v9);
      sub_10005A7E0(v10, v11);
      sub_10005A650(v12);
      sub_100016504();
      sub_1000138CC();
      sub_1000138CC();
      sub_10005A668((void *)&_mh_execute_header, v13, v14, "Error encountered validating resolved peer for newly configured connection: %s");
      sub_10005A758();
      sub_100012398(v31);
      sub_100012398(v8);
    }
    sub_1000138CC();
    goto LABEL_26;
  }
  v15 = v5;
  sub_1000118D4();
  if (sub_100011A10())
  {
    sub_10005A784();
    sub_10005A888();
  }
  if (!sub_10005A894())
  {
    sub_10005A854();
    if (!(!v17 & v16))
      goto LABEL_17;
    goto LABEL_22;
  }
  sub_10005A784();
  sub_10005A87C();
  sub_10005A854();
  if (!v17 & v16)
  {
    sub_10005A848();
    if (!(!v17 & v16))
    {
LABEL_17:
      v27 = sub_10005A67C();
      goto LABEL_18;
    }
LABEL_22:
    sub_10000E49C();
    sub_10005ABD4();
    sub_1000118D4();
    sub_10005A6E8();
    goto LABEL_26;
  }
  sub_10005A848();
  if (!v17 & v16)
    goto LABEL_17;
  sub_10005A8DC();
  sub_10005A69C();
  v27 = sub_100015B98();
  if ((v15 & 1) != 0)
    goto LABEL_22;
LABEL_18:
  v18 = static os_log_type_t.default.getter(v27);
  v19 = qword_1000886E0;
  if (sub_100024E44(v18))
  {
    v20 = v2;
    v21 = (uint8_t *)sub_1000123C4(12);
    v22 = sub_1000123C4(32);
    *(_DWORD *)v21 = 136315138;
    if (sub_10005AB90(v22, "identifier"))
    {
      sub_10005A8B4();

      v23 = sub_1000118FC();
      v25 = v23;
      v26 = 0;
    }
    else
    {
      v23 = type metadata accessor for UUID(0);
      v25 = v23;
      v26 = 1;
    }
    v28 = sub_1000154EC(v23, v26, v24, v25);
    sub_10005A7E0(v28, v29);
    sub_1000116AC(v30);

    sub_100014518();
    sub_1000118DC((void *)&_mh_execute_header, v19, v18, "Newly configured connection's resolved peer %s no longer exists in the keychain", v21);
    sub_1000144B8();
    sub_100012398(v22);
    sub_100012398((uint64_t)v21);
  }
  sub_10005A6E8();
LABEL_26:
  sub_1000138B4();
}

uint64_t sub_1000541EC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  id v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38[2];

  v3 = sub_1000150C0((uint64_t *)&unk_100086150);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 184);
  swift_retain(v7);
  sub_1000210F4();
  v9 = v8;
  swift_release();
  v36 = v9;
  v10 = objc_msgSend(v9, "publicKey");
  if (v10)
  {
    v11 = v10;
    v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

  }
  else
  {
    v12 = 0;
    v14 = 0xF000000000000000;
  }
  v15 = objc_msgSend(a1, "publicKey");
  if (!v15)
  {
    if (v14 >> 60 != 15)
    {
      v17 = 0;
      v19 = 0xF000000000000000;
      goto LABEL_11;
    }
LABEL_16:
    swift_retain(v7);
    sub_100023C18((uint64_t)a1);
    swift_release();

    return 1;
  }
  v16 = v15;
  v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  if (v14 >> 60 == 15)
  {
    if (v19 >> 60 == 15)
      goto LABEL_16;
    goto LABEL_11;
  }
  if (v19 >> 60 != 15)
  {
    sub_100015614(v12, v14);
    v30 = static Data.== infix(_:_:)(v12, v14, v17, v19);
    sub_100013AB4(v17, v19);
    sub_100013AB4(v12, v14);
    v20 = sub_100013AB4(v12, v14);
    if ((v30 & 1) == 0)
      goto LABEL_12;
    goto LABEL_16;
  }
LABEL_11:
  sub_100013AB4(v12, v14);
  v20 = sub_100013AB4(v17, v19);
LABEL_12:
  v21 = static os_log_type_t.default.getter(v20);
  v22 = qword_1000886E0;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v21))
  {
    v23 = a1;
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v38[0] = v25;
    *(_DWORD *)v24 = 136315138;
    v26 = objc_msgSend(v23, "identifier");
    if (v26)
    {
      v27 = v26;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v28 = type metadata accessor for UUID(0);
      v29 = 0;
    }
    else
    {
      v28 = type metadata accessor for UUID(0);
      v29 = 1;
    }
    sub_100015664((uint64_t)v6, v29, 1, v28);
    v32 = String.init<A>(describing:)(v6, v3);
    v34 = v33;
    sub_100010D40(v32, v33, v38);
    v37 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v24 + 4);

    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v22, v21, "Newly configured connection's resolved peer %s no longer exists in the keychain", v24, 0xCu);
    swift_arrayDestroy(v25, 1);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }

  return 0;
}

void sub_10005467C(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  sub_1000124D0();
  v4 = a2;
  v3();
  sub_1000115DC();

}

uint64_t sub_1000546D0(uint64_t a1)
{
  uint64_t v1;
  os_log_type_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t result;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v2 = static os_log_type_t.default.getter(a1);
  v3 = qword_1000886E0;
  v4 = v2;
  result = os_log_type_enabled((os_log_t)qword_1000886E0, v2);
  if ((_DWORD)result)
  {
    swift_retain(v1);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    swift_beginAccess(v1 + 24, v11, 0, 0);
    v7 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain(v7);
    v9 = sub_100012A50(v8);
    swift_bridgeObjectRelease(v7);
    v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, v11, v6 + 4);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RSD Peers updated. Total count: %ld", v6, 0xCu);
    return swift_slowDealloc(v6, -1, -1);
  }
  return result;
}

double sub_1000547E0()
{
  uint64_t v0;
  double result;
  _BYTE v2[24];

  sub_1000156AC(v0 + 24, (uint64_t)v2);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24)).n128_u64[0];
  return result;
}

void sub_10005480C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  void *v52;
  void *v53;
  _QWORD *v54;
  _QWORD v55[5];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  sub_100015A24();
  v57 = v3;
  v58 = v4;
  v5 = v0;
  v7 = v6;
  v8 = type metadata accessor for ControlChannelConnection.Options(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  sub_10000E4A4();
  v11 = type metadata accessor for ControlChannelConnection.Options.Device(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  sub_1000162B4();
  if ((*(_BYTE *)(v5 + 176) & 1) != 0)
  {
    v15 = static os_log_type_t.error.getter(v14);
    v16 = os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1000886E0, "Rejecting remote XPC control pairing channel connection as service is shutting down", 83, 2, &_swiftEmptyArrayStorage);
LABEL_6:
    dispatch thunk of XPCConnection.cancel()(v16);
    goto LABEL_7;
  }
  v50 = v14;
  sub_1000156AC(v5 + 24, (uint64_t)&v56);
  v17 = sub_10002D7B0();
  v18 = sub_100012A50(v17);
  v19 = sub_100016504();
  if (v18 > 49)
  {
    v48 = static os_log_type_t.error.getter(v19);
    v16 = os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, qword_1000886E0, "Rejecting remote XPC control channel as we already have max number of concurrent RSD control channels", 101, 2, &_swiftEmptyArrayStorage);
    goto LABEL_6;
  }
  sub_100012518(v5 + 32, (uint64_t)v51);
  v20 = v7;
  sub_100059244((uint64_t)v20, (uint64_t)v20);
  swift_endAccess(v51);
  v49 = v1;
  ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)(1, 1, 1, 1, 1);
  v21 = type metadata accessor for RemoteXPCControlChannelTransport(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = sub_100026FE0();
  v23 = RemoteXPCControlChannelTransport.init(xpcConnection:to:)(v22, &protocol witness table for RemoteXPCPeerConnection, 0);
  v52 = (void *)v21;
  v53 = &protocol witness table for RemoteXPCControlChannelTransport;
  v51[0] = v23;
  v24 = v23;
  v25 = *(void **)(v5 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v2, v1, v50);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v2, enum case for ControlChannelConnection.Options.device(_:), v8);
  v26 = *(_QWORD *)(v5 + 184);
  v55[3] = type metadata accessor for SystemKeychainPairingManager();
  v55[4] = sub_10000EC00(&qword_100084F88, (uint64_t (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager, (uint64_t)&unk_100065DFC);
  v55[0] = v26;
  v27 = sub_1000135A4();
  v28 = v24;
  swift_retain(v24);
  v29 = v25;
  v30 = sub_10000E49C();
  v31 = static ControlChannelConnection.defaultMaxReconnectionAttempts.getter(v30);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v32 = ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)(v51, v29, v2, v31, v55, 0);
  v33 = *(_QWORD *)(v5 + 168);
  v52 = (void *)type metadata accessor for MetadataService(0);
  v53 = (void *)sub_10000EC00(&qword_100086960, type metadata accessor for MetadataService, (uint64_t)&unk_100066770);
  v51[0] = v33;
  sub_10000E49C();
  dispatch thunk of ControlChannelConnection.customDeviceMetadataProvider.setter(v51);
  v34 = sub_100015378((uint64_t)&unk_10007D0B8);
  sub_100016450(v34);
  v35 = sub_100015378((uint64_t)&unk_10007D108);
  swift_weakInit(v35 + 16, v28);
  v36 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007D130, 40);
  v36[2] = v20;
  v36[3] = v34;
  v36[4] = v35;
  v53 = sub_1000592E0;
  v54 = v36;
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 1107296256;
  v51[2] = sub_10003D8E0;
  v52 = &unk_10007D148;
  v37 = _Block_copy(v51);
  v38 = v20;
  sub_1000162AC();
  remote_device_set_disconnected_callback(v38, v29, v37);
  _Block_release(v37);
  sub_1000167AC(v5 + 48, (uint64_t)v51);
  dispatch thunk of ControlChannelConnection.userInteractionProvider.setter(v51);
  sub_1000167AC(v5 + 88, (uint64_t)v51);
  dispatch thunk of ControlChannelConnection.tunnelListenerCreator.setter(v51);
  sub_100012518(v5 + 24, (uint64_t)v51);
  sub_1000144D8();
  sub_100011708();
  swift_endAccess(v51);
  v39 = sub_1000118D4();
  sub_1000546D0(v39);
  v40 = sub_100015378((uint64_t)&unk_10007D0B8);
  sub_100016450(v40);
  v41 = sub_100015378((uint64_t)&unk_10007D180);
  sub_100015E04(v41);
  v42 = sub_100015378((uint64_t)&unk_10007D1A8);
  swift_unknownObjectWeakInit(v42 + 16, v38);
  v43 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007D1D0, 40);
  v43[2] = v40;
  v43[3] = v41;
  v43[4] = v42;
  swift_retain(v40);
  swift_retain(v41);
  sub_100026FE0();
  dispatch thunk of ControlChannelConnection.invalidationHandler.setter(sub_100059340, v43);
  swift_release();
  sub_1000162AC();
  swift_release();
  v44 = sub_100015378((uint64_t)&unk_10007D0B8);
  sub_100016450(v44);
  v45 = sub_100015378((uint64_t)&unk_10007D180);
  sub_100015E04(v45);
  v46 = sub_1000138D4((uint64_t)&unk_10007D1F8, 32);
  *(_QWORD *)(v46 + 16) = v45;
  *(_QWORD *)(v46 + 24) = v44;
  swift_retain(v45);
  sub_100026FE0();
  dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter(sub_100059374, v46);
  swift_release();
  swift_release();
  v47 = *sub_100016418((_QWORD *)(v5 + 128), *(_QWORD *)(v5 + 152));
  sub_1000144D8();
  sub_10004AEDC(0xD00000000000002ALL, 0x800000010006EFA0, v47, v32);
  sub_1000115DC();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v49, v50);
LABEL_7:
  sub_1000138B4();
}

uint64_t sub_100054D44(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  uint64_t result;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t name;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];
  _BYTE v32[24];

  v5 = a3 + 16;
  v6 = a4 + 16;
  remote_device_cancel(a2);
  swift_beginAccess(v5, v32, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    swift_beginAccess(Strong + 32, v31, 33, 0);
    v8 = (void *)sub_100058EC4((uint64_t)a2);
    swift_endAccess(v31);
    swift_release();

  }
  swift_beginAccess(v6, v31, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v10 = result;
    v11 = static os_log_type_t.default.getter(result);
    v12 = qword_1000886E0;
    v13 = v11;
    v14 = os_log_type_enabled((os_log_t)qword_1000886E0, v11);
    if ((_DWORD)v14)
    {
      v15 = a2;
      swift_retain_n(v10, 2);
      v16 = v15;
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(64, -1);
      v30 = v18;
      *(_DWORD *)v17 = 136446466;
      name = remote_device_get_name(v16);
      v20 = String.init(cString:)(name);
      v22 = v21;
      sub_100010D40(v20, v21, &v30);
      v29 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17 + 4);

      v24 = swift_bridgeObjectRelease(v22);
      *(_WORD *)(v17 + 12) = 2082;
      v25 = dispatch thunk of RemoteXPCControlChannelTransport.id.getter(v24);
      v27 = v26;
      sub_100010D40(v25, v26, &v30);
      v29 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17 + 14);
      swift_release_n(v10, 2);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "RSD device %{public}s associated with control channel %{public}s became disconnected. Invalidating control channel", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 2);
      swift_slowDealloc(v18, -1, -1);
      v14 = swift_slowDealloc(v17, -1, -1);
    }
    dispatch thunk of RemoteXPCControlChannelTransport.invalidate()(v14);
    return swift_release();
  }
  return result;
}

uint64_t sub_100054F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    v8 = a2 + 16;
    swift_beginAccess(v8, v13, 0, 0);
    if (swift_weakLoadStrong(v8))
    {
      swift_beginAccess(v7 + 24, v12, 33, 0);
      sub_1000121F8();
      swift_endAccess(v12);
      v9 = swift_release();
      sub_1000546D0(v9);
      swift_beginAccess(a3 + 16, v12, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(a3 + 16);
      if (Strong)
      {
        v11 = (void *)Strong;
        remote_device_cancel(Strong);

      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100055084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  void *v13;
  _BYTE v14[24];
  _BYTE v15[24];

  v4 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v15, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v10 = a2 + 16;
    swift_beginAccess(v10, v14, 0, 0);
    Strong = swift_weakLoadStrong(v10);
    if (Strong)
    {
      v12 = (void *)dispatch thunk of ControlChannelConnection.resolvedIdentity.getter(Strong);
      if (v12)
      {
        v13 = v12;
        if ((sub_1000541EC(v12) & 1) == 0)
        {
          (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:), v4);
          dispatch thunk of ControlChannelConnection.invalidate(for:)(v8);

          swift_release();
          swift_release();
          return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
        }

      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

void sub_1000551CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[6];

  v1 = static RemoteServiceNames.tunnelService.getter();
  v3 = v2;
  v4 = *(_QWORD *)(v0 + 40);
  v5 = sub_100015378((uint64_t)&unk_10007D0B8);
  swift_weakInit(v5 + 16, v0);
  v8[4] = sub_100056268;
  v8[5] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10005467C;
  v8[3] = &unk_10007D0D0;
  v6 = _Block_copy(v8);
  swift_release();
  v7 = String.utf8CString.getter(v1, v3);
  sub_1000155B8();
  remote_service_listen_with_device(v7 + 32, v4, v6);
  swift_release();
  _Block_release(v6);
}

uint64_t sub_1000552A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t xpc_remote_connection_version_flags;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v15, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    xpc_remote_connection_version_flags = remote_device_get_xpc_remote_connection_version_flags(a1);
    if (xpc_remote_connection_version_flags)
    {
      v11 = xpc_remote_connection_version_flags;
      if ((xpc_remote_connection_version_flags & 0x8000000000000000) == 0)
      {
LABEL_6:
        v12 = (void *)xpc_remote_connection_create_with_connected_fd(a2, *(_QWORD *)(v7 + 40), v11, 1);
        xpc_remote_connection_set_local_service_version(v12, __RSDControlChannelServiceVersion);
        v13 = type metadata accessor for RemoteXPCPeerConnection(0);
        v14 = static RemoteXPCConnection.unsafePeer(from:)(v12);
        swift_dynamicCastClassUnconditional(v14, v13, 0, 0, 0);
        swift_retain(v14);
        sub_10005480C();

        swift_release_n(v14, 2);
        return swift_release();
      }
      xpc_remote_connection_version_flags = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20);
      __break(1u);
    }
    result = _remotepairing_xpc_remote_connection_get_failsafe_version_flags(xpc_remote_connection_version_flags, v9, v10);
    v11 = result;
    if (result < 0)
    {
      __break(1u);
      return result;
    }
    goto LABEL_6;
  }
  return result;
}

void sub_1000553F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[8];
  uint64_t v38;
  uint64_t v39;

  sub_100015A24();
  v38 = v2;
  v39 = v3;
  v4 = type metadata accessor for ControlChannelConnection.InvalidationReason(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  sub_1000162B4();
  if ((*(_BYTE *)(v0 + 176) & 1) != 0)
  {
    v8 = static os_log_type_t.error.getter(v7);
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_1000886E0, "RSDService: Ignoring shutdown request as service is already shutting down", 73, 2, &_swiftEmptyArrayStorage);
    return;
  }
  *(_BYTE *)(v0 + 176) = 1;
  sub_1000156AC(v0 + 24, (uint64_t)v37);
  v9 = *(_QWORD *)(v0 + 24);
  if ((v9 & 0xC000000000000001) != 0)
  {
    if (v9 < 0)
      v10 = *(_QWORD *)(v0 + 24);
    else
      v10 = v9 & 0xFFFFFFFFFFFFFF8;
    sub_100016498();
    __CocoaSet.makeIterator()(v10);
    sub_1000135A4();
    sub_10000EC00(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    v11 = sub_10004F5DC();
    v14 = Set.Iterator.init(_cocoa:)(v11, v12, v13);
    v9 = v37[3];
    v34 = v37[4];
    v15 = v37[5];
    v16 = v37[6];
    v17 = v37[7];
  }
  else
  {
    sub_10005A924();
    v34 = v9 + 56;
    v15 = ~v18;
    sub_1000139EC();
    v17 = v19 & v20;
    v14 = sub_100016498();
    v16 = 0;
  }
  v33 = (unint64_t)(v15 + 64) >> 6;
  v21 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
  if (v9 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v17)
    {
      v22 = (v17 - 1) & v17;
      v23 = __clz(__rbit64(v17)) | (v16 << 6);
      v24 = v16;
      goto LABEL_29;
    }
    v29 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v29 >= v33)
      goto LABEL_32;
    v30 = *(_QWORD *)(v34 + 8 * v29);
    v24 = v16 + 1;
    if (!v30)
    {
      v24 = v16 + 2;
      if (v16 + 2 >= v33)
        goto LABEL_32;
      v30 = *(_QWORD *)(v34 + 8 * v24);
      if (!v30)
      {
        v24 = v16 + 3;
        if (v16 + 3 >= v33)
          goto LABEL_32;
        v30 = *(_QWORD *)(v34 + 8 * v24);
        if (!v30)
        {
          v24 = v16 + 4;
          if (v16 + 4 >= v33)
            goto LABEL_32;
          v30 = *(_QWORD *)(v34 + 8 * v24);
          if (!v30)
          {
            v31 = v16 + 5;
            while (v31 < v33)
            {
              v30 = *(_QWORD *)(v34 + 8 * v31++);
              if (v30)
              {
                v24 = v31 - 1;
                goto LABEL_28;
              }
            }
LABEL_32:
            sub_100018CD4(v9);
            sub_1000138B4();
            return;
          }
        }
      }
    }
LABEL_28:
    v22 = (v30 - 1) & v30;
    v23 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_29:
    v32 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v23);
    sub_10000E49C();
    if (!v32)
      goto LABEL_32;
    while (1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104))(v1, v21, v4);
      dispatch thunk of ControlChannelConnection.invalidate(for:)(v1);
      sub_1000118D4();
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
      v16 = v24;
      v17 = v22;
      if ((v9 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v25 = __CocoaSet.Iterator.next()(v14);
      if (v25)
      {
        v26 = v25;
        v35 = v25;
        v27 = sub_1000135A4();
        swift_unknownObjectRetain(v26);
        sub_10005A7D8((uint64_t)&v36, (uint64_t)&v35, (uint64_t)&type metadata for Swift.AnyObject + 8, v27);
        v28 = v36;
        swift_unknownObjectRelease(v26);
        v24 = v16;
        v22 = v17;
        if (v28)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t sub_100055710(NSObject *a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  char v44[24];
  uint64_t v45;
  uint64_t v46;
  char v47[24];
  uint64_t v48;
  _QWORD v49[5];

  v2 = a1;
  v3 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v2, v3))
  {
    sub_10000E49C();
    v4 = (uint8_t *)sub_1000123C4(12);
    *(_DWORD *)v4 = 134217984;
    sub_1000156AC(v1 + 24, (uint64_t)v44);
    v5 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain(v5);
    v7 = sub_100012A50(v6);
    swift_bridgeObjectRelease(v5);
    v48 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v4 + 4);
    sub_1000118D4();
    sub_1000118DC((void *)&_mh_execute_header, v2, v3, "State dump: NetworkPairingService connection count = %ld", v4);
    sub_100012398((uint64_t)v4);
  }
  sub_1000156AC(v1 + 24, (uint64_t)v47);
  v8 = *(_QWORD *)(v1 + 24);
  if ((v8 & 0xC000000000000001) != 0)
  {
    if (v8 < 0)
      v9 = *(_QWORD *)(v1 + 24);
    else
      v9 = v8 & 0xFFFFFFFFFFFFFF8;
    sub_10002D7B0();
    v10 = __CocoaSet.makeIterator()(v9);
    v11 = sub_1000135A4();
    v12 = sub_10000EC00(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    result = Set.Iterator.init(_cocoa:)(v10, v11, v12);
    v8 = v48;
    v43 = v49[0];
    v14 = v49[1];
    v15 = v49[2];
    v16 = v49[3];
  }
  else
  {
    sub_10005A924();
    v43 = v8 + 56;
    v14 = ~v17;
    sub_1000139EC();
    v16 = v18 & v19;
    result = sub_10002D7B0();
    v15 = 0;
  }
  v42 = (unint64_t)(v14 + 64) >> 6;
  if (v8 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v16)
    {
      v20 = (v16 - 1) & v16;
      v21 = __clz(__rbit64(v16)) | (v15 << 6);
      v22 = v15;
      goto LABEL_29;
    }
    v28 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v28 >= v42)
      return sub_100018CD4(v8);
    v29 = *(_QWORD *)(v43 + 8 * v28);
    v22 = v15 + 1;
    if (!v29)
    {
      v22 = v15 + 2;
      if (v15 + 2 >= v42)
        return sub_100018CD4(v8);
      v29 = *(_QWORD *)(v43 + 8 * v22);
      if (!v29)
      {
        v22 = v15 + 3;
        if (v15 + 3 >= v42)
          return sub_100018CD4(v8);
        v29 = *(_QWORD *)(v43 + 8 * v22);
        if (!v29)
        {
          v22 = v15 + 4;
          if (v15 + 4 >= v42)
            return sub_100018CD4(v8);
          v29 = *(_QWORD *)(v43 + 8 * v22);
          if (!v29)
          {
            v30 = v15 + 5;
            while (v30 < v42)
            {
              v29 = *(_QWORD *)(v43 + 8 * v30++);
              if (v29)
              {
                v22 = v30 - 1;
                goto LABEL_28;
              }
            }
            return sub_100018CD4(v8);
          }
        }
      }
    }
LABEL_28:
    v20 = (v29 - 1) & v29;
    v21 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_29:
    v26 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v21);
    v27 = sub_1000144D8();
    if (!v26)
      return sub_100018CD4(v8);
    while (1)
    {
      v31 = static os_log_type_t.default.getter(v27);
      if (os_log_type_enabled(v2, v31))
      {
        swift_retain_n(v26, 2);
        v32 = sub_1000123C4(12);
        v33 = sub_1000123C4(32);
        v45 = v26;
        v46 = v33;
        *(_DWORD *)v32 = 136446210;
        v34 = v2;
        v35 = v14;
        v36 = sub_1000135A4();
        sub_1000144D8();
        v37 = String.init<A>(describing:)(&v45, v36);
        v39 = v38;
        sub_100010D40(v37, v38, &v46);
        *(_QWORD *)(v32 + 4) = v40;
        swift_release_n(v26, 2);
        v41 = v39;
        v14 = v35;
        v2 = v34;
        swift_bridgeObjectRelease(v41);
        sub_1000118DC((void *)&_mh_execute_header, v34, v31, "State dump: RSDService control channel connection: %{public}s", (uint8_t *)v32);
        swift_arrayDestroy(v33, 1);
        sub_100012398(v33);
        sub_100012398(v32);
      }
      result = swift_release();
      v15 = v22;
      v16 = v20;
      if ((v8 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v23 = __CocoaSet.Iterator.next()(result);
      if (v23)
      {
        v24 = v23;
        v45 = v23;
        v25 = sub_1000135A4();
        swift_unknownObjectRetain(v24);
        sub_10005A7D8((uint64_t)&v46, (uint64_t)&v45, (uint64_t)&type metadata for Swift.AnyObject + 8, v25);
        v26 = v46;
        v27 = swift_unknownObjectRelease(v24);
        v22 = v15;
        v20 = v16;
        if (v26)
          continue;
      }
      return sub_100018CD4(v8);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100055B2C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  sub_100010DFC((_QWORD *)(v0 + 48));
  sub_100010DFC((_QWORD *)(v0 + 88));
  sub_100010DFC((_QWORD *)(v0 + 128));
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100055B80()
{
  uint64_t v0;

  sub_100055B2C();
  return swift_deallocClassInstance(v0, 192, 7);
}

uint64_t type metadata accessor for RSDService()
{
  return objc_opt_self(_TtC20remotepairingdeviced10RSDService);
}

double sub_100055BC0()
{
  return sub_1000547E0();
}

void sub_100055BE0()
{
  sub_1000551CC();
}

void sub_100055C00()
{
  sub_1000553F8();
}

uint64_t sub_100055C20(NSObject *a1)
{
  return sub_100055710(a1);
}

unint64_t sub_100055C40()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Int v2;

  sub_10005AB14();
  v2 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v0 + 40));
  return sub_100055E40(v1, v2);
}

void sub_100055C6C()
{
  uint64_t v0;

  sub_1000118FC();
  v0 = sub_10000EC00(&qword_100086300, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_10005AAA0(v0);
  sub_10005AA74();
  sub_1000123F0();
}

unint64_t sub_100055CDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = type metadata accessor for SystemXPCPeerConnection(0);
  v5 = sub_10000EC00(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
  v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v3, v4, v5);
  return sub_100055F04(a1, v6);
}

unint64_t sub_100055D6C(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v1 + 40), a1, 4);
  return sub_100055FE4(a1, v3);
}

void sub_100055DA0()
{
  uint64_t v0;

  sub_1000139B4();
  v0 = sub_10000EC00(&qword_1000876E0, (uint64_t (*)(uint64_t))&type metadata accessor for XPCEventPublisher.Token, (uint64_t)&protocol conformance descriptor for XPCEventPublisher.Token);
  sub_10005AAA0(v0);
  sub_10005AA74();
  sub_1000123F0();
}

unint64_t sub_100055E10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_1000561A8(a1, v3);
}

unint64_t sub_100055E40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10005A5EC(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100024B18((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100055F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = v2;
    v7 = ~v4;
    v8 = type metadata accessor for SystemXPCPeerConnection(0);
    v9 = sub_10000EC00((unint64_t *)&unk_100087720, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v5);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v11, &v12, v8, v9) & 1) != 0)
        break;
      v5 = (v5 + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_100055FE4(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_100056080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_100015A24();
  v27 = v1;
  v28 = v2;
  v25 = v3;
  v26 = v4;
  v5 = v0;
  v7 = v6;
  v23 = v8;
  v24 = v9;
  v10 = v9(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v23 - v13;
  sub_10005A924();
  v16 = v7 & ~v15;
  if (((*(_QWORD *)(v5 + 64 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v17 = ~v15;
    v18 = *(_QWORD *)(v11 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    do
    {
      v19(v14, *(_QWORD *)(v5 + 48) + v18 * v16, v10);
      v20 = sub_10000EC00(v25, v24, v26);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v23, v10, v20);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      if ((v21 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
  }
  return v16;
}

unint64_t sub_1000561A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_100056244()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100056268(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000552A8(a1, a2, v2);
}

uint64_t sub_100056270(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45[9];
  uint64_t v46;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    sub_100015868();
    v8 = sub_1000124D0();
    v9 = sub_10005ABAC(v8);
    sub_1000115DC();
    if (v9)
    {
      sub_1000135C8();
      sub_1000115DC();
      v46 = v9;
      sub_10005AC34();
      sub_10005A778();
      v10 = sub_10005A7D8((uint64_t)v45, (uint64_t)&v46, (uint64_t)&type metadata for Swift.AnyObject + 8, a2);
      sub_100015FF8(v10, v11, v12, v13, v14, v15, v16, v17, v42, v43, v45[0]);
      return 0;
    }
    result = sub_10005ABDC();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    sub_10005667C(v7, result + 1);
    sub_10005AAD0();
    if (!v35 & v34)
    {
      v40 = v32;
      sub_1000124D0();
    }
    else
    {
      v39 = v33 + 1;
      sub_1000124D0();
      sub_100056AB8(v39);
      v40 = v45[0];
    }
    sub_100057010(a2, v40);
    v41 = *v3;
    *v3 = v40;
    swift_bridgeObjectRelease(v41);
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)(v45);
    v18 = sub_10005AC34();
    v19 = sub_10000EC00(&qword_1000866A8, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066590);
    sub_100015868();
    HashableByObjectIdentity.hash(into:)(v45, v18, v19);
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = v20 & ~v21;
    sub_10005AB20();
    if ((v23 & 1) != 0)
    {
      v24 = sub_10005AA64();
      v25 = sub_10005A944(v24);
      sub_1000162AC();
      if ((v25 & 1) != 0)
      {
LABEL_12:
        sub_1000115DC();
        sub_1000135C8();
        v30 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v22);
        *a1 = v30;
        swift_retain(v30);
        return 0;
      }
      v26 = ~v21;
      while (1)
      {
        v22 = (v22 + 1) & v26;
        sub_10005AB20();
        if ((v27 & 1) == 0)
          break;
        v28 = sub_10005AA64();
        v29 = sub_10005A944(v28);
        sub_1000162AC();
        if ((v29 & 1) != 0)
          goto LABEL_12;
      }
    }
    sub_1000135C8();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v45[0] = *v3;
    *v3 = 0x8000000000000000;
    v37 = sub_1000124D0();
    sub_10005719C(v37, v22, isUniquelyReferenced_nonNull_native);
    v38 = *v3;
    *v3 = v45[0];
    swift_bridgeObjectRelease(v38);
    *a1 = a2;
  }
  return 1;
}

void sub_1000564B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  sub_10005A8C0();
  if (v3)
  {
    v15 = *(_QWORD *)(v2 + 40);
    sub_10002D708();
    sub_10000EC00(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
    sub_100015868();
    sub_10005A8A0();
    sub_10005A708();
    if ((v16 & 1) != 0)
    {
      v17 = sub_10000EC00((unint64_t *)&unk_100087720, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
      while ((sub_10005A6C4(v17, v18) & 1) == 0)
      {
        sub_10005A860();
        if ((v19 & 1) == 0)
          goto LABEL_11;
      }
      sub_10000E4FC();
      sub_1000135C8();
      sub_10005A814();
    }
    else
    {
LABEL_11:
      sub_1000135C8();
      v20 = sub_10005AAF8();
      v28 = sub_100015AA0(v20, v21, v22, v23, v24, v25, v26, v27, v40, v43, v45, v47);
      sub_100057384(v28, v15, v1);
      sub_10005A9EC(v29, v30, v31, v32, v33, v34, v35, v36, v42, v44, v46);
      *v0 = v2;
    }
    goto LABEL_19;
  }
  if (v2 < 0)
    v4 = v2;
  else
    v4 = v2 & 0xFFFFFFFFFFFFFF8;
  sub_100015868();
  v5 = sub_10001612C();
  v6 = sub_10005ABAC(v5);
  sub_10000E4FC();
  if (v6)
  {
    sub_1000135C8();
    sub_10000E4FC();
    sub_10002D708();
    sub_10005A778();
    v7 = sub_10005A7A0((uint64_t)&type metadata for Swift.AnyObject, v40);
    sub_100015FF8(v7, v8, v9, v10, v11, v12, v13, v14, v41, v6, v45);
LABEL_19:
    sub_100015784();
    return;
  }
  v37 = sub_10005ABDC();
  if (!__OFADD__(v37, 1))
  {
    sub_10005689C(v4, v37 + 1, &qword_1000872D0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, &qword_1000859E8, (uint64_t)&protocol conformance descriptor for XPCConnection);
    sub_10005AAD0();
    if (!v3 & v38)
    {
      sub_10001612C();
    }
    else
    {
      v39 = sub_10001612C();
      sub_10005AC54(v39, &qword_1000872D0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, &qword_1000859E8, (uint64_t)&protocol conformance descriptor for XPCConnection);
    }
    sub_10005AB5C();
    sub_10005A83C();
    *v0 = v1;
    goto LABEL_19;
  }
  __break(1u);
}

Swift::Int sub_10005667C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[9];
  uint64_t v23;
  uint64_t v24;

  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  sub_1000150C0(&qword_100087770);
  v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  v24 = v4;
  v5 = __CocoaSet.makeIterator()(a1);
  v6 = __CocoaSet.Iterator.next()(v5);
  if (!v6)
  {
LABEL_16:
    swift_release(v5);
    return v4;
  }
  v7 = v6;
  v8 = type metadata accessor for PairableHostsBrowseRegistration();
  while (1)
  {
    v22[0] = v7;
    swift_dynamicCast(&v23, v22, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
    v4 = v24;
    v9 = *(_QWORD *)(v24 + 16);
    if (*(_QWORD *)(v24 + 24) <= v9)
    {
      sub_100056AB8(v9 + 1);
      v4 = v24;
    }
    v10 = v23;
    Hasher.init(_seed:)(v22);
    v11 = sub_10000EC00(&qword_1000866A8, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066590);
    HashableByObjectIdentity.hash(into:)(v22, v8, v11);
    result = Hasher._finalize()();
    v13 = v4 + 56;
    v14 = -1 << *(_BYTE *)(v4 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6))) == 0)
      break;
    v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17) = v10;
    ++*(_QWORD *)(v4 + 16);
    v7 = __CocoaSet.Iterator.next()(result);
    if (!v7)
      goto LABEL_16;
  }
  v18 = 0;
  v19 = (unint64_t)(63 - v14) >> 6;
  while (++v16 != v19 || (v18 & 1) == 0)
  {
    v20 = v16 == v19;
    if (v16 == v19)
      v16 = 0;
    v18 |= v20;
    v21 = *(_QWORD *)(v13 + 8 * v16);
    if (v21 != -1)
    {
      v17 = __clz(__rbit64(~v21)) + (v16 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10005689C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  sub_1000150C0(a3);
  v12 = static _SetStorage.convert(_:capacity:)(a1, a2);
  v33 = v12;
  v30 = __CocoaSet.makeIterator()(a1);
  v13 = __CocoaSet.Iterator.next()();
  if (!v13)
  {
LABEL_16:
    swift_release(v30);
    return v12;
  }
  v14 = v13;
  v15 = a4(0);
  while (1)
  {
    v31 = v14;
    sub_10005A7D8((uint64_t)&v32, (uint64_t)&v31, (uint64_t)&type metadata for Swift.AnyObject + 8, v15);
    v12 = v33;
    v16 = *(_QWORD *)(v33 + 16);
    if (*(_QWORD *)(v33 + 24) <= v16)
    {
      sub_100056D9C(v16 + 1, a3, a4, a5, a6);
      v12 = v33;
    }
    v17 = v32;
    v31 = v32;
    v18 = *(_QWORD *)(v12 + 40);
    v19 = sub_10000EC00(a5, a4, a6);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v15, v19);
    v21 = v12 + 56;
    v22 = -1 << *(_BYTE *)(v12 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 56 + 8 * (v23 >> 6))) == 0)
      break;
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 56 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(_QWORD *)(v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v25) = v17;
    ++*(_QWORD *)(v12 + 16);
    v14 = __CocoaSet.Iterator.next()();
    if (!v14)
      goto LABEL_16;
  }
  v26 = 0;
  v27 = (unint64_t)(63 - v22) >> 6;
  while (++v24 != v27 || (v26 & 1) == 0)
  {
    v28 = v24 == v27;
    if (v24 == v27)
      v24 = 0;
    v26 |= v28;
    v29 = *(_QWORD *)(v21 + 8 * v24);
    if (v29 != -1)
    {
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_100056AB8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000150C0(&qword_100087770);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    if (!v10)
      goto LABEL_10;
LABEL_9:
    v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * i);
      Hasher.init(_seed:)(v32);
      v21 = type metadata accessor for PairableHostsBrowseRegistration();
      v22 = sub_10000EC00(&qword_1000866A8, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066590);
      HashableByObjectIdentity.hash(into:)(v32, v21, v22);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) == 0)
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v23) >> 6;
        while (++v25 != v28 || (v27 & 1) == 0)
        {
          v29 = v25 == v28;
          if (v25 == v28)
            v25 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v25);
          if (v30 != -1)
          {
            v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v26) = v20;
      ++*(_QWORD *)(v6 + 16);
      if (v10)
        goto LABEL_9;
LABEL_10:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_41;
      if (v17 >= v11)
        goto LABEL_35;
      v18 = v8[v17];
      ++v14;
      if (!v18)
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v11)
          goto LABEL_35;
        v18 = v8[v14];
        if (!v18)
        {
          v14 = v17 + 2;
          if (v17 + 2 >= v11)
            goto LABEL_35;
          v18 = v8[v14];
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v11)
            {
LABEL_35:
              swift_release(v3);
              v31 = 1 << *(_BYTE *)(v3 + 32);
              if (v31 > 63)
                sub_10005757C(0, (unint64_t)(v31 + 63) >> 6, (_QWORD *)(v3 + 56));
              else
                *v8 = -1 << v31;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v18 = v8[v19];
            if (!v18)
            {
              while (1)
              {
                v14 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_42;
                if (v14 >= v11)
                  goto LABEL_35;
                v18 = v8[v14];
                ++v19;
                if (v18)
                  goto LABEL_23;
              }
            }
            v14 = v19;
          }
        }
      }
LABEL_23:
      v10 = (v18 - 1) & v18;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_100056D9C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;

  v7 = v5;
  v8 = (_QWORD *)*v5;
  sub_10005AA90(a1, a2);
  v9 = (_QWORD *)static _SetStorage.resize(original:capacity:move:)(v8, v5, 1);
  if (v8[2])
  {
    sub_10005AA84();
    v39 = v8 + 7;
    sub_10005ABC0();
    v12 = v11 & v10;
    v38 = (unint64_t)(v13 + 63) >> 6;
    v14 = v9 + 7;
    sub_1000124D0();
    v15 = 0;
    if (!v12)
      goto LABEL_4;
LABEL_3:
    sub_10005AA4C();
    while (1)
    {
      v21 = v8;
      v22 = *(_QWORD *)(v8[6] + 8 * v16);
      v23 = v9[5];
      v24 = a3(0);
      v25 = sub_10000EC00(a4, a3, a5);
      dispatch thunk of Hashable._rawHashValue(seed:)(v23, v24, v25);
      sub_10005AB98();
      if (((v28 << v27) & ~v14[v26]) == 0)
      {
        sub_10005AB68();
        while (++v30 != v31 || (v29 & 1) == 0)
        {
          v32 = v30 == v31;
          if (v30 == v31)
            v30 = 0;
          v29 |= v32;
          if (v14[v30] != -1)
          {
            sub_10005AB48();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        return;
      }
      sub_10005AB7C();
LABEL_27:
      sub_10005AB34();
      *(_QWORD *)((char *)v14 + v33) |= v34;
      *(_QWORD *)(v9[6] + 8 * v35) = v22;
      ++v9[2];
      v8 = v21;
      if (v12)
        goto LABEL_3;
LABEL_4:
      if (__OFADD__(v15, 1))
        goto LABEL_35;
      if (v15 + 1 >= v38)
        goto LABEL_29;
      sub_10005ABB4();
      v15 = v17;
      if (!v18)
      {
        v15 = v17 + 1;
        if (v17 + 1 >= v38)
          goto LABEL_29;
        if (!v39[v15])
        {
          v15 = v17 + 2;
          if (v17 + 2 >= v38)
            goto LABEL_29;
          if (!v39[v15])
          {
            if (v17 + 3 >= v38)
            {
LABEL_29:
              sub_1000115DC();
              v7 = v5;
              sub_10005AA84();
              if (v36 > 63)
              {
                sub_10005757C(0, (unint64_t)(v36 + 63) >> 6, v39);
              }
              else
              {
                sub_10005A924();
                *v39 = v37;
              }
              v8[2] = 0;
              break;
            }
            sub_10005ABB4();
            if (!v20)
            {
              while (1)
              {
                v15 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_36;
                if (v15 >= v38)
                  goto LABEL_29;
                ++v19;
                if (v39[v15])
                  goto LABEL_17;
              }
            }
            v15 = v19;
          }
        }
      }
LABEL_17:
      sub_10005AA14();
    }
  }
  sub_1000115DC();
  *v7 = v9;
}

unint64_t sub_100057010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  unint64_t result;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v4 = type metadata accessor for PairableHostsBrowseRegistration();
  v5 = sub_10000EC00(&qword_1000866A8, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066590);
  HashableByObjectIdentity.hash(into:)(v8, v4, v5);
  v6 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v6 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1000570E0()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;

  sub_100015A24();
  sub_10005A9B8();
  v6 = *(_QWORD *)(v5 + 40);
  v8 = v7(0);
  v9 = sub_10000EC00(v1, v2, v0);
  dispatch thunk of Hashable._rawHashValue(seed:)(v6, v8, v9);
  sub_10005A924();
  result = _HashTable.nextHole(atOrAfter:)(v10 & ~v11, v3 + 56, ~v11);
  *(_QWORD *)(v3 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * result) = v4;
  ++*(_QWORD *)(v3 + 16);
  return result;
}

void sub_10005719C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100056AB8(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000575A4(&qword_100087770);
      goto LABEL_14;
    }
    sub_100057718(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v26);
  v11 = type metadata accessor for PairableHostsBrowseRegistration();
  v12 = sub_10000EC00(&qword_1000866A8, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066590);
  HashableByObjectIdentity.hash(into:)(v26, v11, v12);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v16 = swift_retain(v15);
    v17 = static HashableByObjectIdentity.== infix(_:_:)(v16, a1, v11, v12);
    swift_release(v15);
    if ((v17 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
      __break(1u);
    }
    else
    {
      v18 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v18;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v19 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v20 = swift_retain(v19);
        v21 = static HashableByObjectIdentity.== infix(_:_:)(v20, a1, v11, v12);
        swift_release(v19);
        if ((v21 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
}

void sub_100057384(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a1;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100056D9C(v9, &qword_1000872D0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, &qword_1000859E8, (uint64_t)&protocol conformance descriptor for XPCConnection);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000575A4(&qword_1000872D0);
      goto LABEL_12;
    }
    sub_1000579EC(v9, &qword_1000872D0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, &qword_1000859E8, (uint64_t)&protocol conformance descriptor for XPCConnection);
  }
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v4 = type metadata accessor for SystemXPCPeerConnection(0);
  v12 = sub_10000EC00(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = sub_10000EC00((unint64_t *)&unk_100087720, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v21, &v22, v4, v16) & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v17 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = a1;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (!v19)
  {
    *(_QWORD *)(v17 + 16) = v20;
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
}

uint64_t sub_10005757C(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_100057598()
{
  sub_1000575A4(&qword_1000876C0);
}

void sub_1000575A4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;

  v2 = v1;
  sub_1000150C0(a1);
  v3 = (_QWORD *)*v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  if (!v3[2])
  {
LABEL_28:
    sub_1000115DC();
    *v2 = v4;
    return;
  }
  sub_10005AA84();
  v6 = v3 + 7;
  v8 = (unint64_t)(v7 + 63) >> 6;
  if ((_QWORD *)v4 != v3 || v5 >= &v3[v8 + 7])
    memmove(v5, v3 + 7, 8 * v8);
  v10 = 0;
  *(_QWORD *)(v4 + 16) = v3[2];
  sub_10005AA84();
  v12 = v3[7];
  v13 = -1;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  v14 = v13 & v12;
  v15 = (unint64_t)(v11 + 63) >> 6;
  if ((v13 & v12) == 0)
    goto LABEL_12;
LABEL_11:
  sub_10005AA4C();
  while (1)
  {
    v19 = *(_QWORD *)(v3[6] + 8 * v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16) = v19;
    swift_retain(v19);
    if (v14)
      goto LABEL_11;
LABEL_12:
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v15)
      goto LABEL_28;
    ++v10;
    if (!v6[v17])
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v15)
        goto LABEL_28;
      if (!v6[v10])
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v15)
          goto LABEL_28;
        if (!v6[v10])
          break;
      }
    }
LABEL_25:
    sub_10005AA14();
  }
  v18 = v17 + 3;
  if (v18 >= v15)
    goto LABEL_28;
  if (v6[v18])
  {
    v10 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v10 >= v15)
      goto LABEL_28;
    ++v18;
    if (v6[v10])
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

Swift::Int sub_100057718(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000150C0(&qword_100087770);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_37:
    *v2 = v6;
    return result;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * i);
    Hasher.init(_seed:)(v32);
    v20 = type metadata accessor for PairableHostsBrowseRegistration();
    v21 = sub_10000EC00(&qword_1000866A8, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066590);
    swift_retain(v19);
    HashableByObjectIdentity.hash(into:)(v32, v20, v21);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v25) = v19;
    ++*(_QWORD *)(v6 + 16);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_39;
    if (v16 >= v31)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v31)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v31)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v10 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_35:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v31)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_1000579EC(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;

  v6 = v5;
  v7 = *v5;
  sub_10005AA90(a1, a2);
  v8 = (_QWORD *)static _SetStorage.resize(original:capacity:move:)(v7, v5, 0);
  if (!*(_QWORD *)(v7 + 16))
  {
    sub_100012494();
LABEL_31:
    *v6 = v8;
    return;
  }
  sub_10005AA84();
  v35 = v7 + 56;
  sub_10005ABC0();
  v11 = v10 & v9;
  v36 = (unint64_t)(v12 + 63) >> 6;
  v13 = v8 + 7;
  swift_retain(v7);
  v14 = 0;
  if (!v11)
    goto LABEL_4;
LABEL_3:
  v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    v20 = v7;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * i);
    v22 = v8[5];
    v23 = a3(0);
    v24 = sub_10000EC00(a4, a3, a5);
    swift_retain(v21);
    dispatch thunk of Hashable._rawHashValue(seed:)(v22, v23, v24);
    sub_10005AB98();
    if (((v27 << v26) & ~v13[v25]) == 0)
    {
      sub_10005AB68();
      while (++v29 != v30 || (v28 & 1) == 0)
      {
        v31 = v29 == v30;
        if (v29 == v30)
          v29 = 0;
        v28 |= v31;
        if (v13[v29] != -1)
        {
          sub_10005AB48();
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    sub_10005AB7C();
LABEL_27:
    sub_10005AB34();
    *(_QWORD *)((char *)v13 + v32) |= v33;
    *(_QWORD *)(v8[6] + 8 * v34) = v21;
    ++v8[2];
    v7 = v20;
    if (v11)
      goto LABEL_3;
LABEL_4:
    if (__OFADD__(v14, 1))
      goto LABEL_33;
    if (v14 + 1 >= v36)
      goto LABEL_29;
    sub_10005ABB4();
    v14 = v17;
    if (!v18)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v36)
        goto LABEL_29;
      v18 = *(_QWORD *)(v35 + 8 * v14);
      if (!v18)
      {
        v14 = v17 + 2;
        if (v17 + 2 >= v36)
          goto LABEL_29;
        v18 = *(_QWORD *)(v35 + 8 * v14);
        if (!v18)
          break;
      }
    }
LABEL_17:
    v11 = (v18 - 1) & v18;
  }
  if (v17 + 3 >= v36)
  {
LABEL_29:
    swift_release_n(v7, 2);
    v6 = v5;
    goto LABEL_31;
  }
  sub_10005ABB4();
  if (v18)
  {
    v14 = v19;
    goto LABEL_17;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v36)
      goto LABEL_29;
    v18 = *(_QWORD *)(v35 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_17;
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_100057C68()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34[9];

  v1 = v0;
  v2 = *v0;
  if ((*v0 & 0xC000000000000001) == 0)
  {
    Hasher.init(_seed:)(v34);
    v10 = sub_10005AC34();
    v11 = sub_10000EC00(&qword_1000866A8, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066590);
    sub_100011970();
    HashableByObjectIdentity.hash(into:)(v34, v10, v11);
    v12 = Hasher._finalize()();
    v13 = -1 << *(_BYTE *)(v2 + 32);
    v14 = v12 & ~v13;
    sub_10005AC08();
    if ((v15 & 1) != 0)
    {
      v16 = sub_10005A9A8();
      v17 = sub_10005A930(v16);
      sub_100012494();
      if ((v17 & 1) != 0)
      {
LABEL_12:
        sub_1000155B8();
        sub_100015E4C();
        v34[0] = *v1;
        sub_10005AC3C();
        if (!v23)
        {
          sub_1000575A4(&qword_100087770);
          v22 = v34[0];
        }
        v8 = *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * v14);
        v24 = sub_1000584EC(v14);
        v9 = sub_100015990(v24, v25, v26, v27, v28, v29, v30, v31, v33, v34[0]);
        goto LABEL_15;
      }
      v18 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v18;
        sub_10005AC08();
        if ((v19 & 1) == 0)
          break;
        v20 = sub_10005A9A8();
        v21 = sub_10005A930(v20);
        sub_100012494();
        if ((v21 & 1) != 0)
          goto LABEL_12;
      }
    }
LABEL_16:
    sub_1000155B8();
    return 0;
  }
  if (v2 < 0)
    v3 = *v0;
  else
    v3 = v2 & 0xFFFFFFFFFFFFFF8;
  sub_100011970();
  v4 = sub_10001612C();
  v5 = __CocoaSet.contains(_:)(v4, v3);
  sub_10000E4FC();
  if ((v5 & 1) == 0)
    goto LABEL_16;
  v6 = sub_10004F5DC();
  v8 = sub_100058104(v6, v7);
  v9 = v2;
LABEL_15:
  swift_bridgeObjectRelease(v9);
  return v8;
}

void sub_100057E04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  sub_100015A24();
  sub_10005AB00();
  if (v3)
  {
    sub_10002D708();
    sub_10000EC00(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
    sub_100011970();
    sub_10005A978();
    sub_10005A730();
    if ((v9 & 1) != 0)
    {
      v10 = sub_10000EC00((unint64_t *)&unk_100087720, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
      while ((sub_10000E578(v10, v11, v12, v13, v14, v15, v16, v17, v20, v22) & 1) == 0)
      {
        sub_10005A98C();
        if ((v18 & 1) == 0)
          goto LABEL_11;
      }
      sub_1000155B8();
      sub_100015E4C();
      v21 = *v0;
      sub_10005AC3C();
      if ((v19 & 1) == 0)
        sub_1000575A4(&qword_1000872D0);
      sub_10005AC28(v19, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, &qword_1000859E8, (uint64_t)&protocol conformance descriptor for XPCConnection);
      v8 = *v0;
      *v0 = v21;
      goto LABEL_15;
    }
  }
  else
  {
    v4 = v2;
    if (v1 < 0)
      v5 = v1;
    else
      v5 = v1 & 0xFFFFFFFFFFFFFF8;
    sub_100011970();
    v6 = sub_10000E49C();
    v7 = __CocoaSet.contains(_:)(v6, v5);
    sub_1000118D4();
    if ((v7 & 1) != 0)
    {
      sub_1000582E8(v5, v4);
      v8 = v1;
LABEL_15:
      swift_bridgeObjectRelease(v8);
      goto LABEL_16;
    }
  }
LABEL_11:
  sub_1000155B8();
LABEL_16:
  sub_100015734();
}

uint64_t sub_100057F58()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_10005AB14();
  v17 = v3;
  swift_bridgeObjectRelease(*v0);
  __CocoaSet.count.getter(v1);
  v4 = sub_10005A778();
  v5 = sub_10005689C(v4, v2, &qword_1000876C0, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, &qword_100086130, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
  v16 = v5;
  v6 = *(_QWORD *)(v5 + 40);
  v7 = sub_1000135A4();
  v8 = sub_10000EC00(&qword_100086130, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
  sub_10001612C();
  dispatch thunk of Hashable._rawHashValue(seed:)(v6, v7, v8);
  sub_10005A924();
  v11 = v10 & ~v9;
  if (((*(_QWORD *)(v5 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v9;
    sub_10000EC00(&qword_1000872C8, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v11);
      if ((sub_10005AA2C((uint64_t)&v15, (uint64_t)&v17) & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
      if (((*(_QWORD *)(v5 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
      {
        sub_10000E4FC();
        __break(1u);
        break;
      }
    }
    sub_10000E4FC();
    v13 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v11);
    v15 = v13;
    sub_100012534(v11, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, &qword_100086130, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    if ((sub_10005AA2C((uint64_t)&v17, (uint64_t)&v15) & 1) != 0)
    {
      *v0 = v16;
      return v13;
    }
    __break(1u);
  }
  result = sub_10000E4FC();
  __break(1u);
  return result;
}

uint64_t sub_100058104(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  _QWORD v22[9];
  Swift::Int v23;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_10005667C(v7, v6);
  v23 = v8;
  Hasher.init(_seed:)(v22);
  v9 = type metadata accessor for PairableHostsBrowseRegistration();
  v10 = sub_10000EC00(&qword_1000866A8, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066590);
  swift_retain(v8);
  HashableByObjectIdentity.hash(into:)(v22, v9, v10);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v8 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v13);
    v15 = swift_retain(v14);
    v16 = static HashableByObjectIdentity.== infix(_:_:)(v15, a2, v9, v10);
    swift_release(v14);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v13);
      sub_1000584EC(v13);
      if ((static HashableByObjectIdentity.== infix(_:_:)(a2, v8, v9, v10) & 1) != 0)
      {
        *v3 = v23;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v17;
        if (((*(_QWORD *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v18 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v13);
        v19 = swift_retain(v18);
        v20 = static HashableByObjectIdentity.== infix(_:_:)(v19, a2, v9, v10);
        swift_release(v18);
        if ((v20 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

uint64_t sub_1000582E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v19 = a2;
  swift_bridgeObjectRelease(*v3);
  v5 = __CocoaSet.count.getter(a1);
  v6 = swift_unknownObjectRetain(a1);
  v7 = sub_10005689C(v6, v5, &qword_1000872D0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, &qword_1000859E8, (uint64_t)&protocol conformance descriptor for XPCConnection);
  v18 = v7;
  v8 = *(_QWORD *)(v7 + 40);
  v9 = type metadata accessor for SystemXPCPeerConnection(0);
  v10 = sub_10000EC00(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
  swift_retain(v7);
  v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  v12 = -1 << *(_BYTE *)(v7 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = sub_10000EC00((unint64_t *)&unk_100087720, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
    while (1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v17, &v19, v9, v15) & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_release(v7);
        __break(1u);
        break;
      }
    }
    swift_release(v7);
    v7 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13);
    v17 = v7;
    sub_100012534(v13, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, &qword_1000859E8, (uint64_t)&protocol conformance descriptor for XPCConnection);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v19, &v17, v9, v15) & 1) != 0)
    {
      *v3 = v18;
      return v7;
    }
    __break(1u);
  }
  result = swift_release(v7);
  __break(1u);
  return result;
}

unint64_t sub_1000584D0(unint64_t a1)
{
  return sub_100012534(a1, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection, &qword_100086130, (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
}

unint64_t sub_1000584EC(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v24);
        v11 = type metadata accessor for PairableHostsBrowseRegistration();
        v12 = sub_10000EC00(&qword_1000866A8, (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration, (uint64_t)&unk_100066590);
        swift_retain(v10);
        HashableByObjectIdentity.hash(into:)(v24, v11, v12);
        v13 = Hasher._finalize()();
        swift_release(v10);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            v17 = *(_QWORD *)(v3 + 48);
            v18 = (_QWORD *)(v17 + 8 * v2);
            v19 = (_QWORD *)(v17 + 8 * v6);
            v20 = v2 != v6 || v18 >= v19 + 1;
            v2 = v6;
            if (v20)
            {
              *v18 = *v19;
              v2 = v6;
            }
          }
        }
        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

#error "100058730: call analysis failed (funcsize=38)"

#error "1000587CC: call analysis failed (funcsize=42)"

void sub_100058824()
{
  sub_1000588FC();
}

uint64_t sub_100058838()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  sub_10005A828();
  sub_100015364();
  sub_10005ABE4();
  sub_100013B58();
  if ((v0 & 1) == 0)
    return 2;
  sub_100015E4C();
  sub_1000161EC();
  v3 = sub_1000150C0(&qword_100087778);
  v11 = sub_100015D18(v3, v4, v5, v6, v7, v8, v9, v10, v22, v24);
  sub_10005AAB0(v11, v12, v13, v14, v15, v16, v17, v18, v23, v25);
  v19 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 56) + v1);
  v20 = sub_10002D708();
  sub_10000EC00(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
  _NativeDictionary._delete(at:)(v1, v2, v20);
  sub_10005AC48();
  return v19;
}

void sub_1000588E8()
{
  sub_1000588FC();
}

void sub_1000588FC()
{
  _QWORD *v0;
  void (*v1)(_QWORD);
  void (*v2)(_QWORD);
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_100015A24();
  v2 = v1;
  v4 = v3;
  sub_10005AB14();
  v5 = *v0;
  swift_bridgeObjectRetain(*v0);
  sub_100055C6C();
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease(v5);
  if ((v9 & 1) != 0)
  {
    v10 = sub_100015E4C();
    v18 = *v0;
    sub_10005AC3C();
    v12 = *(_QWORD *)(v11 + 24);
    sub_1000150C0(v4);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v12);
    v13 = *(_QWORD *)(v18 + 48);
    v14 = sub_1000118FC();
    sub_10005ABFC();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13 + v15 * v7, v14);
    v2(0);
    sub_10005AAF0(&qword_100086300, v17, (uint64_t)&protocol conformance descriptor for UUID);
    _NativeDictionary._delete(at:)(v7, v18, v14);
    sub_10005A958();
  }
  sub_100015734();
}

void sub_100058A04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  sub_100015A24();
  v2 = v0;
  v4 = v3;
  v5 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    sub_100016498();
    sub_10005ABE4();
    sub_100013B58();
    if ((v4 & 1) == 0)
    {
LABEL_12:
      sub_100015734();
      return;
    }
    sub_100015E4C();
    sub_1000161EC();
    v15 = sub_1000150C0(&qword_100087748);
    v23 = sub_100015D18(v15, v16, v17, v18, v19, v20, v21, v22, v31, v33);
    sub_10005AAB0(v23, v24, v25, v26, v27, v28, v29, v30, v32, v34);
    sub_10002D708();
    sub_1000150C0(&qword_100085A88);
    sub_10000EC00(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
    sub_10005AC1C(v1, v5);
    v14 = *v2;
    *v2 = v5;
LABEL_10:
    swift_bridgeObjectRelease(v14);
    goto LABEL_12;
  }
  if (v5 < 0)
    v6 = *v2;
  else
    v6 = v5 & 0xFFFFFFFFFFFFFF8;
  sub_100016498();
  v7 = sub_10000E49C();
  v8 = __CocoaDictionary.lookup(_:)(v7, v6);
  sub_1000118D4();
  if (!v8)
  {
    sub_100014518();
    goto LABEL_12;
  }
  swift_unknownObjectRelease(v8);
  v9 = __CocoaDictionary.count.getter(v6);
  v10 = sub_10005937C(v6, v9);
  swift_retain(v10);
  v11 = sub_100055CDC(v4);
  v13 = v12;
  sub_1000115DC();
  if ((v13 & 1) != 0)
  {
    swift_release(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v11));
    sub_10002D708();
    sub_1000150C0(&qword_100085A88);
    sub_10000EC00(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
    sub_10005AC1C(v11, v10);
    v14 = *v2;
    *v2 = v10;
    goto LABEL_10;
  }
  __break(1u);
}

void sub_100058BA4()
{
  char v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  sub_100015A24();
  sub_100015364();
  sub_100055C6C();
  sub_100013B58();
  if ((v0 & 1) != 0)
  {
    sub_100015E4C();
    sub_1000161EC();
    v1 = sub_1000150C0(&qword_100087740);
    sub_100015D18(v1, v2, v3, v4, v5, v6, v7, v8, v11, v12);
    v9 = sub_1000118FC();
    sub_10005A7E8(v9);
    sub_10005AAF0(&qword_100086300, v10, (uint64_t)&protocol conformance descriptor for UUID);
    sub_10005AA3C();
    sub_10005A958();
  }
  sub_10004F5DC();
  sub_100015734();
}

uint64_t sub_100058C54()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10005A828();
  v1 = v0;
  v3 = v2;
  sub_100015868();
  v4 = sub_10005A9D0();
  v6 = v5;
  sub_1000135C8();
  if ((v6 & 1) != 0)
  {
    sub_10005AAF8();
    v33 = *v1;
    *v1 = 0x8000000000000000;
    v7 = sub_1000150C0(&qword_1000876F0);
    v15 = sub_10001606C(v7, v8, v9, v10, v11, v12, v13, v14, v31, v33);
    sub_10005A964(v15, v16, v17, v18, v19, v20, v21, v22, v32, v34);
    v23 = *(_QWORD *)(v6 + 56);
    v24 = sub_1000139B4();
    sub_10005ABFC();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 32))(v3, v23 + v25 * v4, v24);
    _NativeDictionary._delete(at:)(v4, v6, &type metadata for String);
    sub_10005A83C();
    v27 = v3;
    v28 = 0;
    v29 = v24;
  }
  else
  {
    v29 = sub_1000139B4();
    v27 = v3;
    v28 = 1;
  }
  return sub_100015664(v27, v28, 1, v29);
}

void sub_100058D4C()
{
  char v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  sub_100015A24();
  sub_100015364();
  sub_100055DA0();
  sub_100013B58();
  if ((v0 & 1) != 0)
  {
    sub_100015E4C();
    sub_1000161EC();
    v1 = sub_1000150C0(&qword_1000876F8);
    sub_100015D18(v1, v2, v3, v4, v5, v6, v7, v8, v11, v12);
    v9 = sub_1000139B4();
    sub_10005A7E8(v9);
    sub_10005AAF0(&qword_1000876E0, v10, (uint64_t)&protocol conformance descriptor for XPCEventPublisher.Token);
    sub_10005AA3C();
    sub_10005A958();
  }
  sub_10004F5DC();
  sub_100015734();
}

uint64_t sub_100058DFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  sub_10005A828();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v6 = *v1;
  sub_100016498();
  sub_100015264(v5, v3);
  sub_100013B58();
  if ((v6 & 1) == 0)
    return 0;
  sub_100015E4C();
  sub_1000161EC();
  v7 = sub_1000150C0((uint64_t *)&unk_100087700);
  sub_100015D18(v7, v8, v9, v10, v11, v12, v13, v14, v17, v18);
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v19 + 48) + 16 * v5 + 8));
  v15 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v5);
  sub_1000150C0(&qword_100086E60);
  _NativeDictionary._delete(at:)(v5, v19, &type metadata for String);
  sub_10005AC48();
  return v15;
}

uint64_t sub_100058EC4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v3 = sub_100055E10(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v12 = *v1;
  v7 = *v1;
  *v1 = 0x8000000000000000;
  v8 = *(_QWORD *)(v7 + 24);
  sub_1000150C0((uint64_t *)&unk_1000876C8);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v5);
  sub_1000598DC();
  _NativeDictionary._delete(at:)(v5, v12, &type metadata for ObjectIdentifier);
  v10 = *v2;
  *v2 = v12;
  swift_bridgeObjectRelease(v10);
  return v9;
}

uint64_t sub_100058F94(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  char v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  sub_100016470();
  v3 = (_OWORD *)sub_10005A7B8();
  v5 = sub_100059918(v3, a2, v4);
  v13 = sub_100015990((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v15, v16);
  return sub_1000157E8(v13);
}

uint64_t sub_100058FD0(char a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  sub_100016470();
  sub_10005A9FC();
  v5 = sub_100059A3C(a1, a2, v4);
  v13 = sub_100015990(v5, v6, v7, v8, v9, v10, v11, v12, v15, v16);
  return sub_1000157E8(v13);
}

uint64_t sub_100059014()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = *v0;
  if ((*v0 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v2 < 0)
    v3 = *v0;
  else
    v3 = v2 & 0xFFFFFFFFFFFFFF8;
  result = __CocoaDictionary.count.getter(v3);
  if (!__OFADD__(result, 1))
  {
    v2 = sub_10005937C(v3, result + 1);
    *v1 = v2;
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native(v2);
    v18 = *v1;
    *v1 = 0x8000000000000000;
    v5 = sub_10005A9E0();
    v8 = sub_100059B48(v5, v6, v7);
    v16 = sub_100015990(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
    return sub_1000157E8(v16);
  }
  __break(1u);
  return result;
}

uint64_t sub_10005909C()
{
  return sub_100059194();
}

uint64_t sub_1000590B8(uint64_t a1, unsigned int a2)
{
  _OWORD *v3;
  char v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  sub_100016470();
  v3 = (_OWORD *)sub_10005A7B8();
  v5 = sub_100059C4C(v3, a2, v4);
  v13 = sub_100015990((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v15, v16);
  return sub_1000157E8(v13);
}

uint64_t sub_1000590F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_100016470();
  v12 = *v0;
  *v0 = 0x8000000000000000;
  sub_10005A9E0();
  sub_100059D50();
  v9 = sub_100015990(v1, v2, v3, v4, v5, v6, v7, v8, v11, v12);
  return sub_1000157E8(v9);
}

#error "10005916C: call analysis failed (funcsize=11)"

uint64_t sub_100059178()
{
  return sub_100059194();
}

uint64_t sub_100059194()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  sub_100015A24();
  sub_100016470();
  sub_10005A9FC();
  sub_100059F84();
  v1 = *v0;
  *v0 = v3;
  return swift_bridgeObjectRelease(v1);
}

#error "100059238: call analysis failed (funcsize=11)"

uint64_t sub_100059244(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  *v2 = 0x8000000000000000;
  sub_10005A1D0(a1, a2, isUniquelyReferenced_nonNull_native);
  v6 = *v2;
  *v2 = v8;
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1000592B0()
{
  uint64_t v0;

  sub_1000118EC();
  swift_release();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000592E0(uint64_t a1)
{
  uint64_t v1;

  return sub_100054D44(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000592EC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100059310()
{
  uint64_t v0;

  swift_release();
  sub_1000118EC();
  swift_release();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100059340()
{
  uint64_t *v0;

  return sub_100054F80(v0[2], v0[3], v0[4]);
}

uint64_t sub_10005934C()
{
  uint64_t v0;

  swift_release();
  sub_1000118EC();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100059374()
{
  uint64_t v0;

  return sub_100055084(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10005937C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000150C0((uint64_t *)&unk_100087750);
  v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
  v31 = v4;
  v5 = __CocoaDictionary.makeIterator()(a1);
  v6 = __CocoaDictionary.Iterator.next()();
  if (!v6)
  {
LABEL_16:
    swift_release(v5);
    return v4;
  }
  v8 = v6;
  v9 = v7;
  v10 = type metadata accessor for SystemXPCPeerConnection(0);
  while (1)
  {
    v29 = v8;
    swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
    v28 = v9;
    v11 = sub_1000150C0(&qword_100085A88);
    swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v11, 7);
    v4 = v31;
    v12 = *(_QWORD *)(v31 + 16);
    if (*(_QWORD *)(v31 + 24) <= v12)
    {
      sub_1000595C4(v12 + 1, 1);
      v4 = v31;
    }
    v13 = v29;
    v14 = v30;
    v28 = v30;
    v15 = *(_QWORD *)(v4 + 40);
    v16 = sub_10000EC00(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v10, v16);
    v18 = v4 + 64;
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v4 + 64 + 8 * (v20 >> 6))) == 0)
      break;
    v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v4 + 64 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v22) = v14;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22) = v13;
    ++*(_QWORD *)(v4 + 16);
    v8 = __CocoaDictionary.Iterator.next()();
    v9 = v27;
    if (!v8)
      goto LABEL_16;
  }
  v23 = 0;
  v24 = (unint64_t)(63 - v19) >> 6;
  while (++v21 != v24 || (v23 & 1) == 0)
  {
    v25 = v21 == v24;
    if (v21 == v24)
      v21 = 0;
    v23 |= v25;
    v26 = *(_QWORD *)(v18 + 8 * v21);
    if (v26 != -1)
    {
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000595C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000150C0((uint64_t *)&unk_100087750);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * i);
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * i);
    if ((v37 & 1) == 0)
    {
      swift_retain(v21);
      swift_unknownObjectRetain(v22);
    }
    v23 = *(_QWORD *)(v8 + 40);
    v24 = type metadata accessor for SystemXPCPeerConnection(0);
    v25 = sub_10000EC00(&qword_1000859E8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection, (uint64_t)&protocol conformance descriptor for XPCConnection);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v23, v24, v25);
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) == 0)
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v28);
        if (v33 != -1)
        {
          v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v29) = v21;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v29) = v22;
    ++*(_QWORD *)(v8 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_44;
    if (v17 >= v35)
    {
      swift_release(v5);
      v3 = v2;
      v18 = (_QWORD *)(v5 + 64);
      goto LABEL_37;
    }
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v36 + 8 * v17);
    ++v14;
    if (!v19)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v35)
        goto LABEL_35;
      v19 = *(_QWORD *)(v36 + 8 * v14);
      if (!v19)
        break;
    }
LABEL_21:
    v11 = (v19 - 1) & v19;
  }
  v20 = v17 + 2;
  if (v20 < v35)
  {
    v19 = *(_QWORD *)(v36 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        v14 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_45;
        if (v14 >= v35)
          goto LABEL_35;
        v19 = *(_QWORD *)(v36 + 8 * v14);
        ++v20;
        if (v19)
          goto LABEL_21;
      }
    }
    v14 = v20;
    goto LABEL_21;
  }
LABEL_35:
  swift_release(v5);
  v3 = v2;
LABEL_37:
  if ((v37 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v5 + 32);
    if (v34 >= 64)
      sub_10005757C(0, (unint64_t)(v34 + 63) >> 6, v18);
    else
      *v18 = -1 << v34;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_42:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

unint64_t sub_1000598DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086260;
  if (!qword_100086260)
  {
    v1 = objc_opt_self(OS_remote_device);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100086260);
  }
  return result;
}

_OWORD *sub_100059918(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_100055C40();
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_1000150C0((uint64_t *)&unk_100087730);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_100055C40();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = (_QWORD *)(v18[7] + 32 * v14);
    sub_100010DFC(v19);
    return sub_100015FB0(a1, v19);
  }
  else
  {
    sub_10005A5EC(a2, (uint64_t)v21);
    return sub_10005A2CC(v14, (uint64_t)v21, a1, v18);
  }
}

uint64_t sub_100059A3C(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  uint64_t result;
  char v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_100055CDC(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_1000150C0(&qword_100087778);
  result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13);
  if ((result & 1) == 0)
    goto LABEL_5;
  result = sub_100055CDC(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    v19 = type metadata accessor for SystemXPCPeerConnection(0);
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v19);
    __break(1u);
    return result;
  }
  v14 = result;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(v18[7] + v14) = a1 & 1;
  }
  else
  {
    sub_10005A344(v14, a2, a1 & 1, v18);
    return swift_retain(a2);
  }
  return result;
}

void sub_100059B3C()
{
  sub_100059D50();
}

uint64_t sub_100059B48(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_100055CDC(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_1000150C0(&qword_100087748);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_100055CDC(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    v21 = type metadata accessor for SystemXPCPeerConnection(0);
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = v18[7];
    result = swift_unknownObjectRelease(*(_QWORD *)(v19 + 8 * v14));
    *(_QWORD *)(v19 + 8 * v14) = a1;
  }
  else
  {
    sub_10005A388(v14, a2, a1, v18);
    return swift_retain(a2);
  }
  return result;
}

_OWORD *sub_100059C4C(_OWORD *a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_100055D6C(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_1000150C0((uint64_t *)&unk_100086E78);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_100055D6C(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) == 0)
    return sub_10005A3CC(v14, a2, a1, v18);
  v19 = (_QWORD *)(v18[7] + 32 * v14);
  sub_100010DFC(v19);
  return sub_100015FB0(a1, v19);
}

void sub_100059D50()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_100015A24();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v21 = v8;
  v9 = sub_1000118FC();
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  sub_10000E4A4();
  sub_100055C6C();
  sub_10005A78C();
  if (v14)
  {
    __break(1u);
    goto LABEL_10;
  }
  v15 = v12;
  v16 = v13;
  sub_1000150C0(v3);
  if (sub_10005ABF0(v5 & 1))
  {
    sub_100055C6C();
    if ((v16 & 1) == (v18 & 1))
    {
      v15 = v17;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return;
  }
LABEL_5:
  v19 = *v0;
  if ((v16 & 1) != 0)
  {
    v20 = *(_QWORD *)(v19 + 56);
    swift_release(*(_QWORD *)(v20 + 8 * v15));
    *(_QWORD *)(v20 + 8 * v15) = v21;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v1, v7, v9);
    sub_10005A430(v15, v1, v21, v19);
  }
  sub_1000138B4();
}

uint64_t sub_100059E5C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_100015264(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_1000150C0(&qword_1000876F0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_100015264(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];
    v22 = type metadata accessor for XPCEventPublisher.Token(0);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v16, a1, v22);
  }
  else
  {
    sub_10005A4A4(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }
}

void sub_100059F84()
{
  Swift::Int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  void (*v5)(uint64_t);
  void (*v6)(uint64_t);
  Swift::Int *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::Int v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_100015A24();
  v32 = v1;
  v33 = v2;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v9 = v8;
  v11 = v10;
  v30 = v12;
  v31 = v13;
  v29[1] = v14;
  v29[0] = v14(0);
  v15 = *(_QWORD *)(v29[0] - 8);
  __chkstk_darwin(v29[0], v16);
  v18 = (char *)v29 - v17;
  v19 = *v0;
  v6(v11);
  sub_10005A78C();
  if (v22)
  {
    __break(1u);
    goto LABEL_10;
  }
  v23 = v20;
  v24 = v21;
  sub_1000150C0(v4);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v9 & 1, v19))
  {
    v25 = ((uint64_t (*)(uint64_t))v6)(v11);
    if ((v24 & 1) == (v26 & 1))
    {
      v23 = v25;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v29[0]);
    __break(1u);
    return;
  }
LABEL_5:
  if ((v24 & 1) != 0)
  {
    v27 = (_QWORD *)(*(_QWORD *)(*v7 + 56) + 16 * v23);
    swift_bridgeObjectRelease(v27[1]);
    v28 = v31;
    *v27 = v30;
    v27[1] = v28;
  }
  else
  {
    (*(void (**)(char *, uint64_t, _QWORD))(v15 + 16))(v18, v11, v29[0]);
    sub_10005A534();
  }
  sub_1000138B4();
}

uint64_t sub_10005A0BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_100015264(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_1000150C0((uint64_t *)&unk_100087700);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_100015264(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];
    result = swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v16));
    *(_QWORD *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_10005A5A4(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

void sub_10005A1D0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_100055E10(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_1000150C0((uint64_t *)&unk_1000876C8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_100055E10(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
    __break(1u);
    return;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = v18[7];

    *(_QWORD *)(v19 + 8 * v14) = a1;
  }
  else
  {
    sub_10005A388(v14, a2, a1, v18);
  }
}

_OWORD *sub_10005A2CC(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_100015FB0(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t sub_10005A344(unint64_t result, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_BYTE *)(a4[7] + result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

unint64_t sub_10005A388(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

_OWORD *sub_10005A3CC(unint64_t a1, int a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_DWORD *)(a4[6] + 4 * a1) = a2;
  result = sub_100015FB0(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

void sub_10005A430(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  sub_10005A6F0(a1, a4 + 8 * (a1 >> 6));
  v9 = *(_QWORD *)(v8 + 48);
  sub_1000118FC();
  sub_10005ABFC();
  (*(void (**)(unint64_t, uint64_t))(v11 + 32))(v9 + v10 * a1, a2);
  *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * a1) = a3;
  v12 = *(_QWORD *)(a4 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a4 + 16) = v14;
    sub_1000123F0();
  }
}

uint64_t sub_10005A4A4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for XPCEventPublisher.Token(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

void sub_10005A534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  sub_10005A9B8();
  sub_10005A6F0(v6, v5 + 8 * (v6 >> 6));
  v8 = *(_QWORD *)(v7 + 48);
  v9(0);
  sub_10005ABFC();
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v8 + v10 * v4, v3);
  v12 = (_QWORD *)(*(_QWORD *)(v0 + 56) + 16 * v4);
  *v12 = v2;
  v12[1] = v1;
  v13 = *(_QWORD *)(v0 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 16) = v15;
    sub_1000123F0();
  }
}

unint64_t sub_10005A5A4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_10005A5EC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10005A638()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_10005A650(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 104, v2 + 8, v1);
}

void sub_10005A668(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_10005A67C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_100013AB4(v1, v0);
  return sub_100013AB4(v2, v3);
}

uint64_t sub_10005A69C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static Data.== infix(_:_:)(v1, v0, v2, v3);
}

uint64_t sub_10005A6B0(float a1)
{
  uint64_t v1;
  float *v2;

  *v2 = a1;
  return swift_errorRetain(v1);
}

uint64_t sub_10005A6C4(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v3);
  return dispatch thunk of static Equatable.== infix(_:_:)((uint64_t *)va, va1, v4, v5);
}

void sub_10005A6E8()
{
  uint64_t v0;

}

uint64_t sub_10005A6F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 64) |= 1 << result;
  return result;
}

uint64_t sub_10005A758()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_10005A768(uint64_t a1)
{
  uint64_t v1;

  return String.init<A>(describing:)(v1 - 104, a1);
}

uint64_t sub_10005A778()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10005A784()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10005A7A0@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  return swift_dynamicCast(va1, (uint64_t *)va, a1 + 8, v2, 7);
}

uint64_t sub_10005A7B8()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_10005A7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 7);
}

void sub_10005A7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010D40(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_10005A7E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1 + *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v2, v3);
}

uint64_t sub_10005A814()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 48) + 8 * v2);
  *v0 = v3;
  return swift_retain(v3);
}

uint64_t sub_10005A83C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = v0;
  return swift_bridgeObjectRelease(v2);
}

void sub_10005A87C()
{
  void *v0;

}

void sub_10005A888()
{
  void *v0;

}

id sub_10005A894()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 1480));
}

uint64_t sub_10005A8A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable._rawHashValue(seed:)(v0, v1, v2);
}

uint64_t sub_10005A8B4()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10005A8DC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100015614(v1, v0);
}

void sub_10005A8E8()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

void sub_10005A918()
{
  sub_1000210F4();
}

uint64_t sub_10005A930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static HashableByObjectIdentity.== infix(_:_:)(a1, v1, v2, v3);
}

uint64_t sub_10005A944(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static HashableByObjectIdentity.== infix(_:_:)(a1, v1, v2, v3);
}

uint64_t sub_10005A958()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10005A964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  return swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(a10 + 48) + 16 * v10 + 8));
}

uint64_t sub_10005A978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable._rawHashValue(seed:)(v0, v1, v2);
}

uint64_t sub_10005A9A8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 8 * v1));
}

unint64_t sub_10005A9D0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100015264(v1, v0);
}

uint64_t sub_10005A9E0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10005A9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v11;
  uint64_t v12;

  v12 = *v11;
  *v11 = a11;
  return swift_bridgeObjectRelease(v12);
}

void sub_10005A9FC()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_10005AA2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v2, v3);
}

uint64_t sub_10005AA3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return _NativeDictionary._delete(at:)(v0, v1, v2);
}

uint64_t sub_10005AA64()
{
  uint64_t v0;
  uint64_t v1;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 8 * v1));
}

unint64_t sub_10005AA74()
{
  return sub_100056080();
}

uint64_t sub_10005AA90(uint64_t a1, uint64_t *a2)
{
  return sub_1000150C0(a2);
}

uint64_t sub_10005AAA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, a1);
}

uint64_t sub_10005AAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  return swift_release(*(_QWORD *)(*(_QWORD *)(a10 + 48) + 8 * v10));
}

uint64_t sub_10005AAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return _NativeDictionary._delete(at:)(v4, v3, a3);
}

_OWORD *sub_10005AAE0()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;

  return sub_100015FB0((_OWORD *)(*(_QWORD *)(v0 + 56) + 32 * v2), v1);
}

uint64_t sub_10005AAF0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  return sub_10000EC00(a1, v3, a3);
}

uint64_t sub_10005AAF8()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

unint64_t sub_10005AB5C()
{
  return sub_1000570E0();
}

id sub_10005AB90(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10005ABAC(uint64_t a1)
{
  uint64_t v1;

  return __CocoaSet.member(for:)(a1, v1);
}

void sub_10005ABD4()
{
  uint64_t v0;

  sub_100023C18(v0);
}

uint64_t sub_10005ABDC()
{
  uint64_t v0;

  return __CocoaSet.count.getter(v0);
}

unint64_t sub_10005ABE4()
{
  uint64_t v0;

  return sub_100055CDC(v0);
}

BOOL sub_10005ABF0(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

uint64_t sub_10005AC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _NativeDictionary._delete(at:)(a1, a2, v2);
}

unint64_t sub_10005AC28(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  unint64_t v4;

  return sub_100012534(v4, a2, a3, a4);
}

uint64_t sub_10005AC34()
{
  return type metadata accessor for PairableHostsBrowseRegistration();
}

void sub_10005AC3C()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_10005AC48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

void sub_10005AC54(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;

  sub_100056D9C(v5, a2, a3, a4, a5);
}

uint64_t sub_10005AC60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  double v9;
  uint64_t v11;

  v2 = sub_1000150C0(&qword_100085590);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004C1F4(a1, (uint64_t)v5);
  v6 = type metadata accessor for Date(0);
  v7 = sub_100015658((uint64_t)v5, 1, v6);
  if (v7 == 1)
  {
    sub_100015670((uint64_t)v5, &qword_100085590);
    v8 = 0;
  }
  else
  {
    v9 = Date.timeIntervalSince1970.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    v8 = *(_QWORD *)&v9;
  }
  sub_10005B118(v8, v7 == 1);
  return sub_100015670(a1, &qword_100085590);
}

uint64_t sub_10005AD60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_10005AEC4();
  if ((v3 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    Date.init(timeIntervalSince1970:)(*(double *)&v2);
    v4 = 0;
  }
  v5 = type metadata accessor for Date(0);
  return sub_100015664(a1, v4, 1, v5);
}

void sub_10005ADB4()
{
  char v0;
  os_log_type_t v1;
  float *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (os_variant_allows_internal_security_policies("com.apple.RemotePairing"))
  {
    static Defaults.pairingRecordExpiryInterval.getter();
    if ((v0 & 1) == 0)
    {
      v1 = sub_100012454();
      if (sub_10001593C(v1))
      {
        v2 = (float *)sub_100015BC8();
        sub_100013928(v2, 3.852e-34, v3);
        sub_1000157F8((void *)&_mh_execute_header, v4, v5, "Using custom pairing record expiry interval based on default: %f");
        sub_100015D2C();
      }
    }
  }
  sub_100015594();
}

void sub_10005AE3C()
{
  char v0;
  os_log_type_t v1;
  float *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (os_variant_allows_internal_security_policies("com.apple.RemotePairing"))
  {
    static Defaults.pairingRecordLastUsedUpdateInterval.getter();
    if ((v0 & 1) == 0)
    {
      v1 = sub_100012454();
      if (sub_10001593C(v1))
      {
        v2 = (float *)sub_100015BC8();
        sub_100013928(v2, 3.852e-34, v3);
        sub_1000157F8((void *)&_mh_execute_header, v4, v5, "Using custom pairing record last used update interval based on default: %f");
        sub_100015D2C();
      }
    }
  }
  sub_100015594();
}

uint64_t sub_10005AEC4()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  _QWORD v24[2];
  _QWORD v25[5];
  __int128 v26;
  __int128 v27;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000150C0(&qword_100085590);
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)&v24[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v24[-1] - v13;
  sub_1000392E4(v1);
  if (!v15)
  {
    v26 = 0u;
    v27 = 0u;
    goto LABEL_6;
  }
  v16 = v15;
  v24[0] = 0xD000000000000016;
  v24[1] = 0x800000010006EFD0;
  AnyHashable.init<A>(_:)(v24, &type metadata for String, &protocol witness table for String);
  sub_100041C2C(v16, &v26);
  sub_100024B18((uint64_t)v25);
  swift_bridgeObjectRelease(v16);
  if (!*((_QWORD *)&v27 + 1))
  {
LABEL_6:
    sub_100015670((uint64_t)&v26, &qword_100085588);
    goto LABEL_7;
  }
  if ((swift_dynamicCast(v25, &v26, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
    return v25[0];
LABEL_7:
  v18 = objc_msgSend(v1, "dateModified");
  if (v18)
  {
    v19 = v18;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v20 = 0;
  }
  else
  {
    v20 = 1;
  }
  sub_100015664((uint64_t)v11, v20, 1, v2);
  sub_10004CA28((uint64_t)v11, (uint64_t)v14);
  if (sub_100015658((uint64_t)v14, 1, v2))
  {
    sub_100015670((uint64_t)v14, &qword_100085590);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v14, v2);
    v21 = sub_100015670((uint64_t)v14, &qword_100085590);
    v22 = Date.timeIntervalSince1970.getter(v21);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    return *(_QWORD *)&v22;
  }
}

void sub_10005B118(unint64_t a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  _BYTE v11[40];
  uint64_t v12;

  v3 = v2;
  sub_1000392E4(v3);
  if (!v6)
    v6 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v12 = v6;
  v7 = 0xD000000000000016;
  v8 = 0x800000010006EFD0;
  AnyHashable.init<A>(_:)(&v7, &type metadata for String, &protocol witness table for String);
  if ((a2 & 1) != 0)
  {
    a1 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v10 = &type metadata for Double;
  }
  v7 = a1;
  sub_100041964((uint64_t)&v7, (uint64_t)v11);
  sub_10005B1FC(v12, v3);
}

void sub_10005B1FC(uint64_t a1, void *a2)
{
  Class isa;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  objc_msgSend(a2, "setInfo:", isa);

}

id sub_10005B268()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
  qword_100087788 = (uint64_t)result;
  return result;
}

void sub_10005B298(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_10005B2EC
     + *((int *)qword_10005B410 + (sub_100016418(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_10005B2FC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  sub_100062BE0(v1);
  sub_100061F68(v2, v3 & 0xFFFFFFFFFFFFLL, BYTE6(v3), &v6);
  sub_100015430(v1, v0);
  v4 = v6;
  sub_100010DFC(&v7);
  return v4;
}

uint64_t sub_10005B420(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v10 = sub_1000150C0(&qword_100087910);
  sub_10003352C(&qword_100087918, &qword_100087910);
  v11 = v2;
  v9[0] = a1;
  v3 = sub_100016418(v9, v10);
  v4 = *v3 + 32;
  v5 = v4 + *(_QWORD *)(*v3 + 16);
  swift_bridgeObjectRetain(a1);
  sub_100061CF4(v4, v5, &v8);
  swift_bridgeObjectRelease(a1);
  v6 = v8;
  sub_100010DFC(v9);
  return v6;
}

uint64_t sub_10005B4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = sub_1000150C0(&qword_100085598);
  OS_dispatch_queue.sync<A>(execute:)(&v3, sub_100062A70, v0, v1);
  return v3;
}

uint64_t sub_10005B53C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = a1 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
  swift_beginAccess(a1 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 120);
  *a2 = *(_QWORD *)(v3 + 112);
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_10005B59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  sub_100011610();
  v67 = v1;
  v68 = v2;
  v3 = v0;
  v63 = v4;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v59 = v13;
  v61 = v14;
  v16 = v15;
  v55 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_1000123E4();
  __chkstk_darwin(v17, v18);
  sub_1000138DC();
  v56 = v19;
  v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v53 = *(_QWORD *)(v20 - 8);
  v54 = v20;
  sub_1000123E4();
  __chkstk_darwin(v21, v22);
  sub_100015410(v23, v52);
  sub_1000123E4();
  __chkstk_darwin(v24, v25);
  sub_1000138DC();
  v57 = v26;
  v27 = (_QWORD *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state);
  bzero((void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state), 0xA0uLL);
  if (v10)
  {
    v28 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007D580, 40);
    v28[2] = v12;
    v28[3] = v10;
    v28[4] = v8;
    sub_1000123DC((uint64_t)v27, (uint64_t)&v64, 1);
    v29 = v16;
    v31 = v27[16];
    v30 = v27[17];
    v27[16] = sub_100062AC8;
    v27[17] = v28;
    sub_1000394E4(v10, v8);
    v32 = v12;
    v33 = v31;
    v16 = v29;
    sub_1000392D4(v33, v30);
  }
  v62 = v10;
  v34 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007D558, 40);
  v34[2] = v12;
  v34[3] = v6;
  v34[4] = v63;
  sub_1000123DC((uint64_t)v27, (uint64_t)&v66, 1);
  v35 = v27[18];
  v36 = v27[19];
  v27[18] = sub_100062A8C;
  v27[19] = v34;
  v37 = v12;
  sub_1000124D0();
  sub_1000392D4(v35, v36);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator) = v59;
  v38 = v3 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_identifier;
  v39 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v39 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v38, v16, v39);
  if (v61)
  {
    v41 = v61;
    v42 = v59;
    sub_1000115DC();
    sub_1000392D4(v62, v8);

    v43 = (uint64_t)v41;
  }
  else
  {
    sub_100033380();
    v41 = v59;
    ((void (*)(void))static DispatchQoS.userInteractive.getter)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v53 + 104))(v58, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v54);
    v65 = &_swiftEmptyArrayStorage;
    sub_10000EC7C((unint64_t *)&unk_100086210, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    v45 = v44;
    v60 = v8;
    v46 = v16;
    v47 = sub_1000124A4();
    sub_100062C38((unint64_t *)&unk_100086220);
    v48 = v47;
    v16 = v46;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v48, v49, v55, v45);
    sub_1000153C4();
    v43 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, _QWORD))OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:))(0xD000000000000023, v50, v57, v56, 0);
    swift_release();
    sub_1000392D4(v62, v60);
  }

  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v16, v39);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue) = v43;
  return v3;
}

uint64_t sub_10005B8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD aBlock[6];

  v34 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v11 - 8);
  v32 = v11;
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000150C0(&qword_100086178);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15, v18);
  v19 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000393BC(a1, (uint64_t)v19, &qword_100086178);
  v20 = *(unsigned __int8 *)(v16 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(&unk_10007D5A8, v21 + v17, v20 | 7);
  *(_QWORD *)(v22 + 16) = a3;
  *(_QWORD *)(v22 + 24) = a4;
  sub_100039474((uint64_t)v19, v22 + v21, &qword_100086178);
  aBlock[4] = sub_100062B50;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E208;
  aBlock[3] = &unk_10007D5C0;
  v23 = _Block_copy(aBlock);
  v24 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v24);
  v35 = &_swiftEmptyArrayStorage;
  sub_10000EC7C((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v26 = v25;
  v27 = sub_1000150C0(&qword_1000850F0);
  sub_10003352C((unint64_t *)&qword_1000853C0, &qword_1000850F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v27, v28, v7, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
  return swift_release();
}

uint64_t sub_10005BB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  _QWORD aBlock[6];

  v25 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)swift_allocObject(&unk_10007D5F8, 40, 7);
  v17[2] = a3;
  v17[3] = a4;
  v17[4] = a1;
  aBlock[4] = sub_10001F250;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E208;
  aBlock[3] = &unk_10007D610;
  v18 = _Block_copy(aBlock);
  swift_retain(a4);
  v19 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v19);
  v26 = &_swiftEmptyArrayStorage;
  sub_10000EC7C((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v21 = v20;
  v22 = sub_1000150C0(&qword_1000850F0);
  sub_10003352C((unint64_t *)&qword_1000853C0, &qword_1000850F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v22, v23, v7, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v11, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  return swift_release();
}

void sub_10005BD34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[7];

  sub_100011610();
  v2 = v0;
  v41 = v3;
  v39 = v4;
  v40 = v5;
  v7 = v6;
  v38 = v8;
  v10 = v9;
  v12 = v11;
  v44 = type metadata accessor for DispatchWorkItemFlags(0);
  v47 = *(_QWORD *)(v44 - 8);
  sub_1000123E4();
  __chkstk_darwin(v13, v14);
  v16 = sub_100015410(v15, v38);
  v45 = *(_QWORD *)(v16 - 8);
  v46 = v16;
  sub_1000123E4();
  __chkstk_darwin(v17, v18);
  sub_100012460();
  v19 = sub_1000150C0(&qword_100087948);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19, v22);
  v23 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  sub_1000393BC(v7, (uint64_t)v23, &qword_100087948);
  v24 = *(unsigned __int8 *)(v20 + 80);
  v25 = (v24 + 48) & ~v24;
  v26 = v25 + v21;
  v27 = (v25 + v21 + 9) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_10007D508, v27 + 8, v24 | 7);
  *(_QWORD *)(v28 + 16) = v2;
  *(_BYTE *)(v28 + 24) = v12;
  *(_QWORD *)(v28 + 32) = v10;
  *(_QWORD *)(v28 + 40) = v38;
  sub_100039474((uint64_t)v23, v28 + v25, &qword_100087948);
  v29 = (_BYTE *)(v28 + v26);
  *v29 = v39;
  v29[1] = v40;
  v30 = v41;
  *(_QWORD *)(v28 + v27) = v41;
  v48[5] = sub_100062A10;
  v48[6] = v28;
  v48[1] = _NSConcreteStackBlock;
  v48[2] = 1107296256;
  v31 = sub_10000E4BC((uint64_t)sub_10000E208);
  swift_retain(v2);
  sub_100062BE0(v10);
  swift_bridgeObjectRetain(v30);
  static DispatchQoS.unspecified.getter(v32);
  v48[0] = &_swiftEmptyArrayStorage;
  sub_10000EC7C((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v34 = v33;
  v35 = sub_1000124A4();
  sub_100062C38((unint64_t *)&qword_1000853C0);
  v36 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)(v48, v35, v37, v44, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v1, v36, v31);
  _Block_release(v31);
  sub_100016570(*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8));
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v1, v46);
  swift_release();
  sub_1000138B4();
}

void sub_10005BF9C()
{
  sub_10005E734();
  sub_100014510();
}

void sub_10005BFBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[6];
  uint64_t v18;

  sub_100011610();
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  sub_100011928();
  v7 = v6 - v5;
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  sub_100012460();
  v17[5] = sub_100062964;
  v18 = v0;
  v17[1] = _NSConcreteStackBlock;
  v17[2] = 1107296256;
  v11 = sub_10000E4BC((uint64_t)sub_10000E208);
  v12 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v12);
  v17[0] = &_swiftEmptyArrayStorage;
  sub_10000EC7C((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v14 = v13;
  v15 = sub_1000124A4();
  sub_100062C38((unint64_t *)&qword_1000853C0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v17, v15, v16, v2, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v1, v7, v11);
  _Block_release(v11);
  sub_100016570(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v8);
  swift_release(v18);
  sub_1000138B4();
}

void sub_10005C14C()
{
  sub_100060E2C(0);
}

void sub_10005C170()
{
  _QWORD *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *bonjour_service;
  uint64_t v67;
  os_log_type_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  NSObject *v94;
  nw_listener_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  os_log_type_t v114;
  NSObject *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void **v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t);
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  os_log_type_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint64_t v140;
  uint8_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(uint64_t);
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void **v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(uint64_t, uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(char *, char *, uint64_t);
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  _QWORD *p_isa;
  uint64_t *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  NSObject *v214;
  void **v215;
  _QWORD v216[2];
  void *v217;
  uint64_t (*v218)();
  uint64_t v219;
  void *v220;
  _BYTE v221[24];
  uint64_t v222;

  sub_100011610();
  v187 = v1;
  v204 = v2;
  v4 = v3;
  v6 = v5;
  v202 = v7;
  v203 = *v0;
  v198 = type metadata accessor for DispatchTimeInterval(0);
  v196 = *(_QWORD *)(v198 - 8);
  sub_1000123E4();
  __chkstk_darwin(v8, v9);
  sub_1000138DC();
  v11 = sub_100016630(v10);
  v199 = type metadata accessor for DispatchTime(v11);
  v194 = *(_QWORD *)(v199 - 8);
  sub_1000123E4();
  __chkstk_darwin(v12, v13);
  sub_1000156C4();
  sub_1000139A4();
  __chkstk_darwin(v14, v15);
  sub_100062CA0();
  v17 = sub_100016630(v16);
  v191 = type metadata accessor for DispatchWorkItemFlags(v17);
  sub_1000123E4();
  __chkstk_darwin(v18, v19);
  sub_1000138DC();
  v21 = sub_100016630(v20);
  v201 = type metadata accessor for RemotePairingError(v21);
  v188 = *(_QWORD *)(v201 - 8);
  sub_1000123E4();
  __chkstk_darwin(v22, v23);
  sub_1000156C4();
  sub_1000139A4();
  __chkstk_darwin(v24, v25);
  sub_100062CA0();
  sub_100062C1C(v26);
  v205 = sub_1000150C0(&qword_100086178);
  sub_1000123E4();
  __chkstk_darwin(v27, v28);
  sub_1000138DC();
  v30 = sub_100016630(v29);
  v31 = type metadata accessor for BonjourService(v30);
  __chkstk_darwin(v31, v32);
  sub_100011928();
  v33 = type metadata accessor for NetworkParamsType(0);
  v209 = *(_QWORD *)(v33 - 8);
  v210 = v33;
  sub_1000123E4();
  __chkstk_darwin(v34, v35);
  sub_1000138DC();
  v207 = v36;
  v37 = sub_100062C7C();
  v211 = *(_QWORD *)(v37 - 8);
  v212 = v37;
  v38 = *(_QWORD *)(v211 + 64);
  __chkstk_darwin(v37, v39);
  sub_100062C1C((uint64_t)&v183 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = __chkstk_darwin(v40, v41);
  v44 = (char *)&v183 - v43;
  __chkstk_darwin(v42, v45);
  v47 = (char *)&v183 - v46;
  v214 = *(NSObject **)((char *)v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  v208 = v0;
  v48 = (uint64_t)v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
  sub_1000123DC((uint64_t)v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, (uint64_t)&v222, 1);
  v213 = v48;
  sub_1000393BC(v48, (uint64_t)&v215, &qword_1000878C0);
  v49 = v217;
  sub_10002D678((uint64_t)&v215, &qword_1000878C0);
  if (!v49)
  {
    sub_1000153C4();
    static CertificateUtilities.createTLSRawPublicKey(with:)();
    v185 = *(void (**)(char *, char *, uint64_t))(v211 + 32);
    v185(v47, v44, v212);
    v184 = Data.count.getter(v6, v4);
    v186 = v47;
    if (v184 == 32)
    {
      v55 = v207;
      *v207 = v6;
      v55[1] = v4;
      sub_100062BFC(32, enum case for NetworkParamsType.tcp(_:));
      v79 = sub_100062BE0(v6);
      v80 = UUID.uuidString.getter(v79);
      v82 = v81;
      v83 = sub_1000144C8(v80, enum case for BonjourService.tunnel(_:));
      v84 = BonjourService.rawValue.getter(v83);
      v86 = v85;
      sub_100016008();
      v87 = sub_100014548();
      v89 = String.utf8CString.getter(v87, v88);
      swift_bridgeObjectRelease(v82);
      v90 = String.utf8CString.getter(v84, v86);
      sub_1000135D0();
      bonjour_service = nw_advertise_descriptor_create_bonjour_service((const char *)(v89 + 32), (const char *)(v90 + 32), 0);
      sub_10001195C();
      v91 = sub_1000118D4();
      if (!bonjour_service)
      {
        v137 = static os_log_type_t.error.getter(v91);
        v138 = qword_1000886E0;
        v139 = v137;
        if (os_log_type_enabled((os_log_t)qword_1000886E0, v137))
        {
          v140 = (uint64_t)v208;
          sub_1000165F4((uint64_t)v208);
          v141 = (uint8_t *)sub_1000123C4(12);
          v142 = sub_1000123C4(32);
          v215 = (void **)v142;
          *(_DWORD *)v141 = 136446210;
          v143 = UUID.uuidString.getter(v142);
          sub_100062C5C(v143, v144);
          v220 = (void *)v145;
          sub_100015AC0(v145, (uint64_t)v221);
          sub_100015870(v140);
          sub_1000118F4();
          sub_1000118DC((void *)&_mh_execute_header, v138, v139, "%{public}s: Unable to create network listener service for Tunnel connection", v141);
          sub_1000135B4(v142);
          sub_100012398(v142);
          v78 = (uint64_t)v141;
          goto LABEL_16;
        }
LABEL_17:
        v146 = v213;
        v148 = (_QWORD *)(v213 + 128);
        v147 = *(void (**)(uint64_t))(v213 + 128);
        v149 = v186;
        if (v147)
        {
          sub_10000EC7C((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
          v151 = v150;
          sub_1000124D0();
          v152 = v200;
          v153 = v201;
          static Error<>.networkingError.getter(v201, v151);
          sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
          v155 = sub_1000156B8(v153, v154);
          Error<>.init(_:_:)(v152, 0xD00000000000003FLL, 0x800000010006F140, v153);
          v156 = (uint64_t)p_isa;
          *p_isa = v155;
          swift_storeEnumTagMultiPayload(v156, v205, 1);
          v147(v156);
          v157 = sub_100014548();
          sub_1000392D4(v157, v158);
          sub_10002D678(v156, &qword_100086178);
          v159 = *(_QWORD *)(v146 + 128);
        }
        else
        {
          v159 = 0;
        }
        v160 = *(_QWORD *)(v146 + 136);
        *v148 = 0;
        v148[1] = 0;
        sub_1000392D4(v159, v160);
        sub_100016478();
        (*(void (**)(uint64_t *, uint64_t))(v209 + 8))(v207, v210);
        (*(void (**)(char *, uint64_t))(v211 + 8))(v149, v212);
LABEL_27:
        sub_1000138B4();
        return;
      }
    }
    else
    {
      v50 = sub_100062BE0(v6);
      v51 = CertificateUtilities.RawTLSPublicKeyInfo.publicKeyDERData.getter(v50);
      v53 = v52;
      v54 = CertificateUtilities.RawTLSPublicKeyInfo.identity.getter();
      v55 = v207;
      *v207 = v6;
      v55[1] = v4;
      v55[2] = v51;
      v55[3] = v53;
      v55[4] = v54;
      v56 = sub_100062BFC(v54, enum case for NetworkParamsType.quic(_:));
      v57 = UUID.uuidString.getter(v56);
      v59 = v58;
      v60 = sub_1000144C8(v57, enum case for BonjourService.udpTunnel(_:));
      v61 = BonjourService.rawValue.getter(v60);
      v63 = v62;
      sub_100016008();
      v64 = String.utf8CString.getter(v57, v59);
      sub_1000135D0();
      v65 = String.utf8CString.getter(v61, v63);
      swift_bridgeObjectRelease(v63);
      bonjour_service = nw_advertise_descriptor_create_bonjour_service((const char *)(v64 + 32), (const char *)(v65 + 32), 0);
      sub_1000115DC();
      v67 = sub_1000118D4();
      if (!bonjour_service)
      {
        v68 = static os_log_type_t.error.getter(v67);
        v69 = qword_1000886E0;
        v70 = v68;
        if (os_log_type_enabled((os_log_t)qword_1000886E0, v68))
        {
          v71 = (uint64_t)v208;
          sub_1000165F4((uint64_t)v208);
          v72 = (uint8_t *)sub_1000123C4(12);
          v73 = sub_1000123C4(32);
          v215 = (void **)v73;
          *(_DWORD *)v72 = 136446210;
          v74 = UUID.uuidString.getter(v73);
          v76 = v75;
          sub_100062C5C(v74, v75);
          v220 = v77;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v221, v72 + 4);
          sub_100015870(v71);
          swift_bridgeObjectRelease(v76);
          sub_1000118DC((void *)&_mh_execute_header, v69, v70, "%{public}s: Unable to create network listener service for Tunnel connection", v72);
          sub_1000135B4(v73);
          sub_100012398(v73);
          v78 = (uint64_t)v72;
LABEL_16:
          sub_100012398(v78);
          goto LABEL_17;
        }
        goto LABEL_17;
      }
    }
    v92 = v204 & 1;
    v93 = sub_10005D198((uint64_t)v55, v202 & 1, v204 & 1);
    v94 = NWParameters.nw.getter(v93);
    sub_1000118D4();
    v95 = nw_listener_create(v94);
    swift_unknownObjectRelease(v94);
    if (v95)
    {
      v96 = v184 != 32;
      v97 = type metadata accessor for NWObjcListener();
      sub_1000138D4(v97, 41);
      v98 = sub_10003B1B0((uint64_t)v95, v96);
      v217 = (void *)v97;
      v218 = (uint64_t (*)())&off_10007BBF8;
      v215 = (void **)v98;
      v99 = v213;
      sub_1000123DC(v213, (uint64_t)&v220, 33);
      swift_unknownObjectRetain(v95);
      swift_retain(v98);
      sub_100062910((uint64_t)&v215, v99, &qword_1000878C0);
      swift_endAccess(&v220);
      v100 = v214;
      OS_dispatch_queue.assertOnQueueHierarchy()();
      v101 = *(NSObject **)(v98 + 32);
      p_isa = &bonjour_service->isa;
      nw_listener_set_advertise_descriptor(v101, bonjour_service);
      v102 = sub_1000138D4((uint64_t)&unk_10007D3C8, 24);
      v103 = (uint64_t)v208;
      swift_weakInit(v102 + 16, v208);
      v104 = sub_1000138D4((uint64_t)&unk_10007D3F0, 25);
      *(_QWORD *)(v104 + 16) = v102;
      *(_BYTE *)(v104 + 24) = v92;
      swift_retain(v102);
      sub_10003B1C4((uint64_t)v100, sub_1000625C0, v104);
      swift_release();
      v105 = v103;
      swift_release();
      v106 = sub_1000138D4((uint64_t)&unk_10007D3C8, 24);
      swift_weakInit(v106 + 16, v103);
      v107 = v211;
      v108 = v212;
      v109 = v190;
      (*(void (**)(char *, char *, uint64_t))(v211 + 16))(v190, v186, v212);
      v110 = *(unsigned __int8 *)(v107 + 80);
      v111 = (v110 + 32) & ~v110;
      v112 = swift_allocObject(&unk_10007D418, v111 + v38, v110 | 7);
      *(_QWORD *)(v112 + 16) = v106;
      *(_QWORD *)(v112 + 24) = v98;
      v185((char *)(v112 + v111), v109, v108);
      swift_retain(v98);
      sub_1000124D0();
      sub_10003B320(v100, (uint64_t)sub_100062634, v112);
      sub_1000115DC();
      v113 = swift_release();
      v114 = static os_log_type_t.default.getter(v113);
      v115 = powerLog.getter();
      if (os_log_type_enabled(v115, v114))
      {
        v116 = v187;
        swift_bridgeObjectRetain_n(v187, 2);
        sub_1000165F4(v105);
        v117 = sub_1000123C4(22);
        v118 = sub_1000123C4(64);
        v220 = (void *)v118;
        *(_DWORD *)v117 = 136446466;
        v119 = UUID.uuidString.getter(v118);
        sub_100010D40(v119, v120, (uint64_t *)&v220);
        v215 = v121;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, v216, v117 + 4);
        sub_100015870(v105);
        sub_1000118F4();
        *(_WORD *)(v117 + 12) = 2082;
        v122 = 0;
        if (v116)
        {
          v123 = type metadata accessor for PeerConnectionInfo(0);
          v122 = Array.description.getter(v116, v123);
        }
        else
        {
          v124 = 0;
        }
        v215 = (void **)v122;
        v216[0] = v124;
        v162 = sub_1000150C0(&qword_100085598);
        v163 = String.init<A>(describing:)(&v215, v162);
        sub_100010D40(v163, v164, (uint64_t *)&v220);
        v215 = v165;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, v216, v117 + 14);
        swift_bridgeObjectRelease_n(v116, 2);
        sub_1000135D0();
        sub_100062C50((void *)&_mh_execute_header, v115, v114, "%{public}s: Starting a tunnel listener due to a request from :%{public}s");
        sub_100062C28();
        sub_100012398(v118);
        sub_100012398(v117);

        v105 = (uint64_t)v208;
      }
      else
      {

      }
      v166 = sub_1000138D4((uint64_t)&unk_10007D3C8, 24);
      swift_weakInit(v166 + 16, v105);
      v218 = sub_100062670;
      v219 = v166;
      v215 = _NSConcreteStackBlock;
      v216[0] = 1107296256;
      v216[1] = sub_10000E208;
      v217 = &unk_10007D430;
      v167 = _Block_copy(&v215);
      v220 = &_swiftEmptyArrayStorage;
      sub_10000EC7C((unint64_t *)&unk_1000853B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      v169 = v168;
      sub_1000124D0();
      v170 = sub_1000124A4();
      sub_100062C38((unint64_t *)&qword_1000853C0);
      v171 = v192;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v220, v170, v172, v191, v169);
      v173 = type metadata accessor for DispatchWorkItem(0);
      sub_1000119A0(v173);
      v174 = DispatchWorkItem.init(flags:block:)(v171, v167);
      sub_1000115DC();
      sub_1000118D4();
      *(_QWORD *)(v213 + 96) = v174;
      sub_10001612C();
      sub_1000118D4();
      sub_100016478();
      v175 = v193;
      static DispatchTime.now()(v176);
      v177 = v195;
      *v195 = 15;
      v178 = v196;
      v179 = v198;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v196 + 104))(v177, enum case for DispatchTimeInterval.seconds(_:), v198);
      v180 = v197;
      + infix(_:_:)(v175, v177);
      (*(void (**)(_QWORD *, uint64_t))(v178 + 8))(v177, v179);
      v181 = *(void (**)(uint64_t, uint64_t))(v194 + 8);
      v182 = v199;
      v181(v175, v199);
      OS_dispatch_queue.asyncAfter(deadline:execute:)(v180, v174);
      swift_unknownObjectRelease(p_isa);
      swift_unknownObjectRelease(v95);
      sub_10001195C();
      sub_10000E4FC();
      v181(v180, v182);
      (*(void (**)(uint64_t *, uint64_t))(v209 + 8))(v207, v210);
    }
    else
    {
      sub_10000EC7C((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
      v125 = v200;
      v126 = v201;
      static Error<>.networkingError.getter(v201, v127);
      v128 = v189;
      Error<>.init(_:_:)(v125, 0xD000000000000020, 0x800000010006F180, v126);
      v129 = v213;
      v131 = (_QWORD *)(v213 + 128);
      v130 = *(void (**)(uint64_t))(v213 + 128);
      if (v130)
      {
        sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
        sub_1000156B8(v126, v132);
        v133 = v188;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v188 + 16))(v134, v128, v126);
        sub_1000116C8();
        sub_10000E49C();
        v130(v128);
        sub_100062C6C((uint64_t)v130);
        v135 = v128;
        v128 = v189;
        sub_10002D678(v135, &qword_100086178);
        v136 = *(_QWORD *)(v129 + 128);
      }
      else
      {
        v136 = 0;
        v133 = v188;
      }
      v161 = *(_QWORD *)(v129 + 136);
      *v131 = 0;
      v131[1] = 0;
      sub_1000392D4(v136, v161);
      sub_100016478();
      swift_unknownObjectRelease(bonjour_service);
      (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v128, v126);
      (*(void (**)(uint64_t *, uint64_t))(v209 + 8))(v55, v210);
    }
    (*(void (**)(char *, uint64_t))(v211 + 8))(v186, v212);
    goto LABEL_27;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000004BLL, 0x800000010006F1E0, "remotepairingdeviced/DeviceTunnel.swift", 39, 2, 116, 0);
  __break(1u);
}

uint64_t sub_10005D198(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class isa;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Class v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  __int128 v59;
  NSObject *v60;
  int v61;
  int v62;

  v61 = a2;
  v5 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v5, v6);
  v7 = type metadata accessor for NetworkParamsType(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v12 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 88))(v11, v7);
  v62 = a3;
  if (v12 != enum case for NetworkParamsType.quic(_:))
  {
    if (v12 == enum case for NetworkParamsType.tcp(_:))
    {
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 96))(v11, v7);
      v37 = v11[1];
      v38 = static os_log_type_t.default.getter(v36);
      os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, qword_1000886E0, "Creating a tunnel connection based on TCP", 41, 2, &_swiftEmptyArrayStorage);
      __asm { BR              X10 }
    }
    _diagnoseUnexpectedEnumCase<A>(type:)(v7, v7);
    __break(1u);
    JUMPOUT(0x10005D914);
  }
  v13 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 96))(v11, v7);
  v14 = *v11;
  v15 = v11[1];
  v16 = v11[2];
  v17 = v11[3];
  v60 = v11[4];
  v18 = v60;
  v19 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_1000886E0, "Creating a tunnel connection based on QUIC", 42, 2, &_swiftEmptyArrayStorage);
  type metadata accessor for NWProtocolQUIC.Options(0);
  v20 = NWProtocolQUIC.Options.__allocating_init(alpn:)(&off_10007A4A8);
  dispatch thunk of NWProtocolQUIC.Options.maxDatagramFrameSize.setter(1500);
  dispatch thunk of NWProtocolQUIC.Options.initialPacketSize.setter(1350);
  dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsUnidirectional.setter(0);
  v21 = dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsBidirectional.setter(128);
  v22 = dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter(v21);
  sec_protocol_options_set_local_identity(v22, v18);
  v23 = swift_unknownObjectRelease(v22);
  v24 = dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter(v23);
  v25 = sub_1000150C0(&qword_100087940);
  v26 = swift_allocObject(v25, 48, 7);
  v59 = xmmword_100065C90;
  *(_OWORD *)(v26 + 16) = xmmword_100065C90;
  *(_QWORD *)(v26 + 32) = v16;
  *(_QWORD *)(v26 + 40) = v17;
  sub_100015614(v16, v17);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v26);
  sec_protocol_options_set_server_raw_public_key_certificates(v24, isa);
  swift_unknownObjectRelease(v24);

  v29 = dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter(v28);
  v30 = swift_allocObject(v25, 48, 7);
  *(_OWORD *)(v30 + 16) = v59;
  *(_QWORD *)(v30 + 32) = v14;
  *(_QWORD *)(v30 + 40) = v15;
  sub_100015614(v14, v15);
  v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  sec_protocol_options_set_client_raw_public_key_certificates(v29, v31);
  swift_unknownObjectRelease(v29);

  v33 = dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter(v32);
  sec_protocol_options_set_peer_authentication_required(v33, 1);
  swift_unknownObjectRelease(v33);
  type metadata accessor for NWParameters(0);
  v34 = NWParameters.__allocating_init(quic:)(v20);
  sub_100015430(v16, v17);
  sub_100015430(v14, v15);
  v35 = swift_unknownObjectRelease(v60);
  v39 = v62;
  if ((v61 & 1) != 0)
  {
    v40 = static os_log_type_t.default.getter(v35);
    v41 = os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, qword_1000886E0, "Creating peer-to-peer tunnel listener", 37, 2, &_swiftEmptyArrayStorage);
    v42 = NWParameters.nw.getter(v41);
    nw_parameters_set_include_peer_to_peer(v42, 1);
    swift_unknownObjectRelease(v42);
  }
  v43 = sub_1000150C0(&qword_100087938);
  v44 = type metadata accessor for NWInterface.InterfaceType(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(_QWORD *)(v45 + 72);
  v47 = *(unsigned __int8 *)(v45 + 80);
  v48 = (v47 + 32) & ~v47;
  v49 = v47 | 7;
  v50 = swift_allocObject(v43, v48 + v46, v47 | 7);
  *(_OWORD *)(v50 + 16) = xmmword_100065C90;
  v51 = enum case for NWInterface.InterfaceType.cellular(_:);
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 104);
  v52(v50 + v48, enum case for NWInterface.InterfaceType.cellular(_:), v44);
  v53 = NWParameters.prohibitedInterfaceTypes.setter(v50);
  v54 = NWParameters.nw.getter(v53);
  nw_parameters_set_no_wake_from_sleep(v54, 1);
  v55 = swift_unknownObjectRelease(v54);
  if ((v39 & 1) != 0)
  {
    v56 = NWParameters.nw.getter(v55);
    nw_parameters_set_local_only(v56, 1);
    swift_unknownObjectRelease(v56);
  }
  else
  {
    v57 = swift_allocObject(v43, v48 + 2 * v46, v49);
    *(_OWORD *)(v57 + 16) = xmmword_100065CC0;
    v52(v57 + v48, v51, v44);
    v52(v57 + v48 + v46, enum case for NWInterface.InterfaceType.loopback(_:), v44);
    NWParameters.prohibitedInterfaceTypes.setter(v57);
  }
  return v34;
}

uint64_t sub_10005D934(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v16, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v9 = result;
    if ((a2 & 1) != 0)
    {
      v13 = type metadata accessor for NWQUICTunnelConnection(0);
      swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
      v14 = swift_unknownObjectRetain(a1);
      sub_100046ABC(v14, a4 & 1, 0);
      sub_1000627A8(v15, v9);
    }
    else
    {
      v10 = type metadata accessor for NWObjcTunnelConnectionWrapper(0);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      v11 = swift_unknownObjectRetain(a1);
      sub_1000458A0(v11, a4 & 1, 0);
      sub_100062678(v12, v9);
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10005DA1C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t port;
  uint64_t v13;
  void (*v14)(char *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31[3];
  uint64_t v32;
  _BYTE v33[24];

  v6 = sub_1000150C0(&qword_100086178);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v31[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v33, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v11 = result;
    if ((a1 & 1) != 0)
    {
      v20 = static os_log_type_t.error.getter(result);
      v21 = qword_1000886E0;
      v22 = v20;
      if (os_log_type_enabled((os_log_t)qword_1000886E0, v20))
      {
        swift_retain_n(v11, 2);
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v24 = swift_slowAlloc(32, -1);
        *(_DWORD *)v23 = 136446210;
        v31[0] = v24;
        v25 = UUID.uuidString.getter(v24);
        v27 = v26;
        sub_100010D40(v25, v26, v31);
        v32 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v23 + 4);
        swift_release_n(v11, 2);
        swift_bridgeObjectRelease(v27);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: Tunnel listener has stopped while starting", v23, 0xCu);
        swift_arrayDestroy(v24, 1);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);
      }
    }
    else
    {
      port = nw_listener_get_port(*(nw_listener_t *)(a3 + 32));
      v13 = v11 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
      swift_beginAccess(v11 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, v31, 1, 0);
      v14 = *(void (**)(char *))(v13 + 128);
      if (v14)
      {
        v15 = *(_QWORD *)(v13 + 136);
        v16 = swift_retain(v15);
        v17 = CertificateUtilities.RawTLSPublicKeyInfo.publicKeyDERData.getter(v16);
        ListenerStartedResponse.init(port:deviceRawPublicKey:)(port, v17, v18);
        swift_storeEnumTagMultiPayload(v9, v6, 0);
        v14(v9);
        sub_1000392D4((uint64_t)v14, v15);
        sub_10002D678((uint64_t)v9, &qword_100086178);
        v19 = *(_QWORD *)(v13 + 128);
      }
      else
      {
        v19 = 0;
      }
      v29 = *(_QWORD *)(v13 + 136);
      *(_QWORD *)(v13 + 128) = 0;
      *(_QWORD *)(v13 + 136) = 0;
      sub_1000392D4(v19, v29);
      OS_dispatch_queue.assertOnQueueHierarchy()();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10005DCB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];

  v2 = type metadata accessor for RemotePairingError(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v23, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v7 = result;
    v8 = static os_log_type_t.error.getter(result);
    v9 = qword_1000886E0;
    v10 = v8;
    v11 = os_log_type_enabled((os_log_t)qword_1000886E0, v8);
    if ((_DWORD)v11)
    {
      swift_retain_n(v7, 2);
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      *(_DWORD *)v12 = 136446210;
      v22 = v13;
      v14 = UUID.uuidString.getter(v13);
      v16 = v15;
      sub_100010D40(v14, v15, &v22);
      v21 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4);
      swift_release_n(v7, 2);
      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s: Tunnel tunnelListenerTimeout", v12, 0xCu);
      swift_arrayDestroy(v13, 1);
      swift_slowDealloc(v13, -1, -1);
      v11 = swift_slowDealloc(v12, -1, -1);
    }
    static RemotePairingError.tunnelError.getter(v11);
    sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
    v19 = swift_allocError(v2, v18, 0, 0);
    sub_10000EC7C((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
    Error<>.init(_:_:)(v5, 0xD000000000000038, 0x800000010006F230, v2);
    sub_100060E2C(v19);
    swift_errorRelease(v19);
    return swift_release();
  }
  return result;
}

uint64_t sub_10005DF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  _BOOL4 v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[16];
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _BYTE v74[120];
  _BYTE v75[24];
  _QWORD v76[5];
  _BYTE v77[32];

  v6 = type metadata accessor for TunnelConnectionState(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v77, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v12 = result;
    v13 = a3 + 16;
    swift_beginAccess(v13, v75, 0, 0);
    sub_1000393BC(v13, (uint64_t)&v71, &qword_100087928);
    if (!*((_QWORD *)&v72 + 1))
    {
      sub_10002D678((uint64_t)&v71, &qword_100087928);
      v73 = 0;
      v71 = 0u;
      v72 = 0u;
      swift_beginAccess(v13, v76, 1, 0);
      v29 = v13;
LABEL_23:
      sub_100062910((uint64_t)&v71, v29, &qword_100087928);
      return swift_release();
    }
    sub_10002D6E4(&v71, (uint64_t)v76);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
    v14 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
    if (v14 == enum case for TunnelConnectionState.ready(_:))
    {
      v15 = v12 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
      swift_beginAccess(v12 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, &v66, 1, 0);
      sub_100061C5C(v15, (uint64_t)&v71);
      sub_1000393BC((uint64_t)v74, (uint64_t)&v64, &qword_1000878C8);
      sub_100061C90(&v71);
      if (v65)
      {
        v16 = sub_10002D6E4(&v64, (uint64_t)&v67);
        v17 = static os_log_type_t.default.getter(v16);
        v18 = qword_1000886E0;
        v19 = v17;
        if (os_log_type_enabled((os_log_t)qword_1000886E0, v17))
        {
          swift_retain_n(v12, 2);
          v20 = (uint8_t *)swift_slowAlloc(12, -1);
          v21 = swift_slowAlloc(32, -1);
          *(_DWORD *)v20 = 136446210;
          *(_QWORD *)&v71 = v21;
          v22 = UUID.uuidString.getter(v21);
          v24 = v23;
          sub_100010D40(v22, v23, (uint64_t *)&v71);
          *(_QWORD *)&v64 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, (char *)&v64 + 8, v20 + 4);
          swift_release_n(v12, 2);
          swift_bridgeObjectRelease(v24);
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s: Additional connection completed setup. Injecting into tunnel", v20, 0xCu);
          swift_arrayDestroy(v21, 1);
          swift_slowDealloc(v21, -1, -1);
          swift_slowDealloc(v20, -1, -1);
        }
        v26 = v69;
        v27 = v70;
        sub_100016418(&v67, v69);
        dispatch thunk of AnyTunnelEndpoint.serverInjectAdditionalConnection(_:)(v76, v26, v27);
        sub_100010DFC(v76);
        v28 = &v67;
        goto LABEL_22;
      }
      sub_10002D678((uint64_t)&v64, &qword_1000878C8);
      v43 = static os_log_type_t.default.getter(v42);
      v44 = qword_1000886E0;
      v45 = v43;
      if (os_log_type_enabled((os_log_t)qword_1000886E0, v43))
      {
        swift_retain_n(v12, 2);
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        *(_DWORD *)v46 = 136446210;
        *(_QWORD *)&v71 = v47;
        v63 = v46 + 4;
        v48 = UUID.uuidString.getter(v47);
        v50 = v49;
        sub_100010D40(v48, v49, (uint64_t *)&v71);
        v67 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v63);
        swift_release_n(v12, 2);
        swift_bridgeObjectRelease(v50);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%{public}s: Initial connection completed setup. Proceeding to create tunnel", v46, 0xCu);
        swift_arrayDestroy(v47, 1);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v46, -1, -1);
      }
      sub_10005E734();
      if (*(_QWORD *)(v15 + 96))
      {
        v52 = swift_retain(*(_QWORD *)(v15 + 96));
        dispatch thunk of DispatchWorkItem.cancel()(v52);
        swift_release();
      }
      *(_QWORD *)(v15 + 96) = 0;
      swift_release();
      OS_dispatch_queue.assertOnQueueHierarchy()();
    }
    else
    {
      if (v14 != enum case for TunnelConnectionState.stopped(_:))
      {
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x206E776F6E6B6E55, 0xEC00000065736163, "remotepairingdeviced/DeviceTunnel.swift", 39, 2, 236, 0);
        __break(1u);
        return result;
      }
      v30 = v12 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
      swift_beginAccess(v12 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, &v64, 0, 0);
      sub_100061C5C(v30, (uint64_t)&v71);
      sub_1000393BC((uint64_t)v74, (uint64_t)&v67, &qword_1000878C8);
      sub_100061C90(&v71);
      v31 = v69;
      sub_10002D678((uint64_t)&v67, &qword_1000878C8);
      v33 = static os_log_type_t.default.getter(v32);
      v34 = qword_1000886E0;
      v35 = os_log_type_enabled((os_log_t)qword_1000886E0, v33);
      if (v31)
      {
        if (v35)
        {
          swift_retain_n(v12, 2);
          v36 = (uint8_t *)swift_slowAlloc(12, -1);
          v37 = swift_slowAlloc(32, -1);
          *(_DWORD *)v36 = 136446210;
          *(_QWORD *)&v71 = v37;
          v38 = UUID.uuidString.getter(v37);
          v40 = v39;
          sub_100010D40(v38, v39, (uint64_t *)&v71);
          v67 = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v36 + 4);
          swift_release_n(v12, 2);
          swift_bridgeObjectRelease(v40);
          _os_log_impl((void *)&_mh_execute_header, v34, v33, "%{public}s: Not tearing down tunnel on connection failure since endpoint is up and running and will handle failure", v36, 0xCu);
          swift_arrayDestroy(v37, 1);
          swift_slowDealloc(v37, -1, -1);
          swift_slowDealloc(v36, -1, -1);
        }
      }
      else
      {
        if (v35)
        {
          swift_retain_n(v12, 2);
          v53 = (uint8_t *)swift_slowAlloc(12, -1);
          v54 = swift_slowAlloc(32, -1);
          *(_DWORD *)v53 = 136446210;
          *(_QWORD *)&v71 = v54;
          v55 = UUID.uuidString.getter(v54);
          v57 = v56;
          sub_100010D40(v55, v56, (uint64_t *)&v71);
          v67 = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v53 + 4);
          swift_release_n(v12, 2);
          swift_bridgeObjectRelease(v57);
          _os_log_impl((void *)&_mh_execute_header, v34, v33, "%{public}s: Tearing down tunnel on connection failure since endpoint is nil", v53, 0xCu);
          swift_arrayDestroy(v54, 1);
          swift_slowDealloc(v54, -1, -1);
          swift_slowDealloc(v53, -1, -1);
        }
        v59 = type metadata accessor for RemotePairingError(0);
        sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
        v61 = swift_allocError(v59, v60, 0, 0);
        sub_10000EC7C((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
        static Error<>.networkingError.getter(v59, v62);
        sub_100060E2C(v61);
        swift_errorRelease(v61);
      }
    }
    v28 = v76;
LABEL_22:
    sub_100010DFC(v28);
    v73 = 0;
    v71 = 0u;
    v72 = 0u;
    swift_beginAccess(v13, v76, 1, 0);
    v29 = v13;
    goto LABEL_23;
  }
  return result;
}

void sub_10005E734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79[3];
  __int128 v80;
  uint64_t v81;
  _QWORD v82[5];
  uint64_t v83;

  sub_100011610();
  v2 = v1;
  v68 = type metadata accessor for TunnelInterfaceParameters(0);
  v67 = *(_QWORD *)(v68 - 8);
  sub_1000123E4();
  __chkstk_darwin(v3, v4);
  sub_1000138DC();
  sub_100062C1C(v5);
  sub_1000150C0(&qword_1000878D0);
  sub_1000123E4();
  __chkstk_darwin(v6, v7);
  sub_1000138DC();
  sub_100062C1C(v8);
  sub_1000150C0(&qword_1000878D8);
  sub_1000123E4();
  __chkstk_darwin(v9, v10);
  sub_1000156C4();
  sub_1000139A4();
  __chkstk_darwin(v11, v12);
  sub_100024E90();
  sub_1000139A4();
  __chkstk_darwin(v13, v14);
  sub_100062CA0();
  v16 = sub_100016630(v15);
  v78 = type metadata accessor for IPv6Address(v16);
  v77 = *(_QWORD *)(v78 - 8);
  sub_1000123E4();
  __chkstk_darwin(v17, v18);
  sub_1000156C4();
  sub_1000139A4();
  __chkstk_darwin(v19, v20);
  sub_100024E90();
  sub_1000139A4();
  __chkstk_darwin(v21, v22);
  sub_100024E90();
  sub_1000139A4();
  __chkstk_darwin(v23, v24);
  sub_100024E90();
  sub_1000139A4();
  __chkstk_darwin(v25, v26);
  sub_100062CA0();
  sub_100062C1C(v27);
  v28 = *(void **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  sub_100062C90();
  type metadata accessor for SystemXPCConnection(0);
  sub_1000153C4();
  v29 = (_QWORD *)static SystemXPCConnection.connectionToMachService(name:privilegedService:targetQueue:)();
  v31 = v30;
  v32 = v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
  sub_1000123DC(v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, (uint64_t)&v83, 1);
  *(_QWORD *)(v32 + 80) = v29;
  *(_QWORD *)(v32 + 88) = v31;
  swift_retain(v29);
  sub_10001195C();
  sub_100062C90();
  v33 = *v29;
  sub_10001612C();
  v64 = v31;
  dispatch thunk of XPCPeerConnection.setEventHandler(_:)(sub_100061CBC, v0, v33, v31);
  sub_10000E4FC();
  v34 = swift_retain(v29);
  dispatch thunk of XPCConnection.activate()(v34);
  v35 = v29;
  v36 = swift_release();
  LOBYTE(v31) = static Defaults.tunnelUseSkywalk.getter(v36);
  sub_100062C98();
  v65 = (_QWORD *)v2;
  sub_10002D498(v2, (uint64_t)v82);
  if ((v31 & 1) != 0)
  {
    v37 = &qword_1000878F0;
    v38 = sub_1000150C0(&qword_1000878F0);
    sub_1000119A0(v38);
    v39 = sub_10000E59C((uint64_t)v28);
    v40 = (unint64_t *)&unk_1000878F8;
  }
  else
  {
    v37 = &qword_1000878E0;
    v38 = sub_1000150C0(&qword_1000878E0);
    sub_1000119A0(v38);
    v39 = sub_10000E59C((uint64_t)v28);
    v40 = (unint64_t *)&unk_1000878E8;
  }
  sub_10003352C(v40, v37);
  v82[3] = v38;
  v82[4] = v41;
  v82[0] = v39;
  sub_100015608();
  sub_1000123DC(v32, (uint64_t)v79, 33);
  sub_100062910((uint64_t)&v80, v32 + 40, &qword_1000878C8);
  swift_endAccess(v79);
  sub_100062C90();
  sub_100015608();
  v42 = sub_1000138D4((uint64_t)&unk_10007D350, 64);
  *(_QWORD *)(v42 + 16) = v0;
  v43 = v42;
  sub_10002D6E4(&v80, v42 + 24);
  sub_10001612C();
  v44 = static Data.randomBytes(ofLength:)(5);
  v46 = v45;
  v47 = sub_10005B420((uint64_t)&off_10007A4D8);
  v49 = v48;
  *(_QWORD *)&v79[0] = v47;
  *((_QWORD *)&v79[0] + 1) = v48;
  sub_100015614(v47, v48);
  sub_100015614(v44, v46);
  sub_100062314(v44, v46);
  v63 = v44;
  sub_100015430(v44, v46);
  sub_100015430(v47, v49);
  v80 = v79[0];
  sub_100062314(0, 0x9000000000000);
  v50 = v80;
  sub_10005B420((uint64_t)&off_10007A500);
  sub_100016170();
  v51 = sub_100014548();
  sub_100062314(v51, v52);
  v53 = sub_100014548();
  sub_100015430(v53, v54);
  v55 = v80;
  type metadata accessor for NWInterface(0);
  sub_100062BE8();
  IPv6Address.init(_:_:)(v55, *((_QWORD *)&v55 + 1));
  if (sub_100015658(v72, 1, v78) == 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v76, v72, v78);
  v56 = sub_10005B420((uint64_t)&off_10007A528);
  v58 = v57;
  sub_100016170();
  sub_100062314(v56, v58);
  sub_100015430(v56, v58);
  v59 = v80;
  sub_100062BE8();
  IPv6Address.init(_:_:)(v59, *((_QWORD *)&v59 + 1));
  if (sub_100015658(v71, 1, v78) == 1)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  sub_100062C84(v75);
  sub_1000153C4();
  IPv6Address.init(_:)(0xD000000000000015);
  if (sub_100015658(v69, 1, v78) == 1)
    goto LABEL_12;
  sub_100062C84(v74);
  v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16);
  v60(v73, v76, v78);
  v60(v70, v74, v78);
  sub_100016418(v65, v65[3]);
  v61 = sub_100014548();
  if ((dispatch thunk of TunnelConnection.maxSupportedMTU.getter(v61) & 0x10000) != 0)
  {
    type metadata accessor for VirtualInterface(0);
    static VirtualInterface.defaultMTU.getter();
  }
  TunnelInterfaceParameters.init(address:netmask:mtu:)(v73);
  sub_100015608();
  sub_100016418(&v80, v81);
  sub_10002D498((uint64_t)v82, (uint64_t)v79);
  v62 = (_QWORD *)sub_1000138D4((uint64_t)&unk_10007D378, 96);
  v62[2] = v0;
  sub_10002D6E4(v79, (uint64_t)(v62 + 3));
  v62[8] = v35;
  v62[9] = v64;
  v62[10] = sub_100061CE8;
  v62[11] = v43;
  swift_retain(v35);
  swift_retain(v0);
  swift_retain(v43);
  dispatch thunk of AnyTunnelEndpoint.establishServerTunnel(localParameters:remoteAddress:completion:)(v66, v75, sub_1000624E8, v62);
  swift_release();
  sub_100015430(v50, *((unint64_t *)&v50 + 1));
  sub_100015430(v63, v46);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
  sub_100062C64(v74);
  sub_100062C64(v75);
  sub_100062C64(v76);
  sub_100010DFC(v82);
  sub_100010DFC(&v80);
  sub_1000138B4();
}

uint64_t sub_10005EE9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  os_log_type_t v30;
  NSObject *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  os_log_type_t v51;
  NSObject *v52;
  void (*v53)(char *, char *, uint64_t);
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  char *v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  char *v76;
  os_log_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v80 = a2;
  v3 = type metadata accessor for XPCDictionary(0);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = __chkstk_darwin(v3, v5);
  v77 = (os_log_t)((char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __chkstk_darwin(v6, v8);
  v78 = (char *)&v75 - v10;
  __chkstk_darwin(v9, v11);
  v79 = (char *)&v75 - v12;
  v13 = type metadata accessor for XPCError(0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v76 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16, v18);
  v21 = (char *)&v75 - v20;
  __chkstk_darwin(v19, v22);
  v24 = (char *)&v75 - v23;
  v25 = sub_1000150C0(&qword_100085A80);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000393BC(a1, (uint64_t)v28, &qword_100085A80);
  if (swift_getEnumCaseMultiPayload(v28, v25) == 1)
  {
    v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v24, v28, v13);
    v30 = static os_log_type_t.error.getter(v29);
    v31 = qword_1000886E0;
    v32 = *(char **)(v14 + 16);
    ((void (*)(char *, char *, uint64_t))v32)(v21, v24, v13);
    if (os_log_type_enabled(v31, v30))
    {
      v33 = v80;
      swift_retain_n(v80, 2);
      v34 = swift_slowAlloc(22, -1);
      v79 = v32;
      v35 = v34;
      v36 = swift_slowAlloc(64, -1);
      v78 = (char *)v36;
      v82 = v36;
      *(_DWORD *)v35 = 136446466;
      v77 = v31;
      v37 = UUID.uuidString.getter(v36);
      v39 = v38;
      sub_100010D40(v37, v38, &v82);
      v81 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v35 + 4);
      swift_release_n(v33, 2);
      swift_bridgeObjectRelease(v39);
      *(_WORD *)(v35 + 12) = 2082;
      v41 = v76;
      ((void (*)(char *, char *, uint64_t))v79)(v76, v21, v13);
      v42 = String.init<A>(describing:)(v41, v13);
      v44 = v43;
      sub_100010D40(v42, v43, &v82);
      v81 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v35 + 14);
      swift_bridgeObjectRelease(v44);
      v46 = *(void (**)(char *, uint64_t))(v14 + 8);
      v46(v21, v13);
      _os_log_impl((void *)&_mh_execute_header, v77, v30, "%{public}s: Tunnel recieved error on remoted XPC connection: %{public}s", (uint8_t *)v35, 0x16u);
      v47 = v78;
      swift_arrayDestroy(v78, 2);
      swift_slowDealloc(v47, -1, -1);
      v48 = v35;
      v32 = v79;
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      v46 = *(void (**)(char *, uint64_t))(v14 + 8);
      v46(v21, v13);
    }
    sub_10000EC7C(&qword_100087908, (uint64_t (*)(uint64_t))&type metadata accessor for XPCError);
    v72 = swift_allocError(v13, v71, 0, 0);
    ((void (*)(uint64_t, char *, uint64_t))v32)(v73, v24, v13);
    sub_100060E2C(v72);
    swift_errorRelease(v72);
    return ((uint64_t (*)(char *, uint64_t))v46)(v24, v13);
  }
  else
  {
    v49 = v79;
    v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v79, v28, v3);
    v51 = static os_log_type_t.error.getter(v50);
    v52 = qword_1000886E0;
    v53 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v53(v78, v49, v3);
    v54 = v51;
    if (os_log_type_enabled(v52, v51))
    {
      v55 = v80;
      swift_retain_n(v80, 2);
      v56 = swift_slowAlloc(22, -1);
      v57 = swift_slowAlloc(64, -1);
      v76 = (char *)v57;
      v82 = v57;
      *(_DWORD *)v56 = 136446466;
      v58 = UUID.uuidString.getter(v57);
      v60 = v59;
      sub_100010D40(v58, v59, &v82);
      v81 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v56 + 4);
      swift_release_n(v55, 2);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v56 + 12) = 2082;
      v62 = v77;
      v63 = v78;
      v53((char *)v77, v78, v3);
      v64 = String.init<A>(describing:)(v62, v3);
      v66 = v65;
      sub_100010D40(v64, v65, &v82);
      v81 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v56 + 14);
      swift_bridgeObjectRelease(v66);
      v68 = *(void (**)(char *, uint64_t))(v4 + 8);
      v68(v63, v3);
      _os_log_impl((void *)&_mh_execute_header, v52, v54, "%{public}s: Unexpected message on XPC connection: %{public}s", (uint8_t *)v56, 0x16u);
      v69 = v76;
      swift_arrayDestroy(v76, 2);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v56, -1, -1);
      return ((uint64_t (*)(char *, uint64_t))v68)(v79, v3);
    }
    else
    {
      v74 = *(void (**)(char *, uint64_t))(v4 + 8);
      v74(v78, v3);
      return ((uint64_t (*)(char *, uint64_t))v74)(v79, v3);
    }
  }
}

_QWORD *sub_10005F438(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  os_log_type_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  NSObject *v45;
  void (*v46)(char *, char *, uint64_t);
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void (*v81)(char *, char *, uint64_t);
  os_log_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[32];
  uint64_t v88;
  _QWORD v89[3];
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95[6];

  v6 = sub_1000150C0(&qword_1000878D8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for IPv6Address(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v13, v16);
  v19 = (char *)&v78 - v18;
  __chkstk_darwin(v17, v20);
  v22 = (char *)&v78 - v21;
  if (a1)
  {
    v23 = swift_errorRetain(a1);
    v24 = static os_log_type_t.error.getter(v23);
    v25 = qword_1000886E0;
    v26 = v24;
    if (os_log_type_enabled((os_log_t)qword_1000886E0, v24))
    {
      swift_errorRetain(a1);
      swift_retain(a2);
      swift_errorRetain(a1);
      swift_retain(a2);
      v27 = swift_slowAlloc(22, -1);
      v28 = swift_slowAlloc(64, -1);
      v95[0] = v28;
      *(_DWORD *)v27 = 136446466;
      v29 = UUID.uuidString.getter(v28);
      v31 = v30;
      sub_100010D40(v29, v30, v95);
      *(_QWORD *)&v92 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, (char *)&v92 + 8, v27 + 4);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v27 + 12) = 2082;
      *(_QWORD *)&v92 = a1;
      swift_errorRetain(a1);
      v33 = sub_1000150C0(&qword_100085A00);
      v34 = String.init<A>(describing:)(&v92, v33);
      v36 = v35;
      sub_100010D40(v34, v35, v95);
      *(_QWORD *)&v92 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, (char *)&v92 + 8, v27 + 14);
      swift_bridgeObjectRelease(v36);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s: Tunnel setup error: %{public}s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v28, 2);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    swift_errorRetain(a1);
    sub_100060E2C(a1);
    swift_errorRelease(a1);
    return (_QWORD *)swift_errorRelease(a1);
  }
  v85 = a2;
  v39 = a3[3];
  v40 = a3[4];
  sub_100016418(a3, v39);
  result = dispatch thunk of AnyTunnelEndpoint.localTunnelInterface.getter(&v92, v39, v40);
  if (!v93)
  {
    __break(1u);
    goto LABEL_13;
  }
  sub_10002D6E4(&v92, (uint64_t)v95);
  v41 = a3[3];
  v42 = a3[4];
  sub_100016418(a3, v41);
  dispatch thunk of AnyTunnelEndpoint.remoteAddress.getter(v41, v42);
  result = (_QWORD *)sub_100015658((uint64_t)v9, 1, v10);
  if ((_DWORD)result == 1)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v22, v9, v10);
  v44 = static os_log_type_t.default.getter(v43);
  v45 = qword_1000886E0;
  sub_10002D498((uint64_t)v95, (uint64_t)&v92);
  sub_10002D498((uint64_t)v95, (uint64_t)v89);
  v46 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v46(v19, v22, v10);
  v47 = os_log_type_enabled(v45, v44);
  v48 = v85;
  if (v47)
  {
    swift_retain_n(v85, 2);
    v49 = swift_slowAlloc(42, -1);
    v81 = v46;
    v50 = v49;
    v51 = swift_slowAlloc(128, -1);
    v84 = v51;
    v88 = v51;
    *(_DWORD *)v50 = 136446978;
    v83 = v44;
    v52 = UUID.uuidString.getter(v51);
    v54 = v53;
    sub_100010D40(v52, v53, &v88);
    v86 = v55;
    v82 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v50 + 4);
    swift_release_n(v85, 2);
    swift_bridgeObjectRelease(v54);
    *(_WORD *)(v50 + 12) = 2082;
    v79 = v50 + 14;
    v80 = v15;
    v57 = v93;
    v56 = v94;
    sub_100016418(&v92, v93);
    v58 = dispatch thunk of TunnelInterface.interfaceName.getter(v57, v56);
    v60 = v59;
    sub_100010D40(v58, v59, &v88);
    v86 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v79);
    swift_bridgeObjectRelease(v60);
    sub_100010DFC(&v92);
    *(_WORD *)(v50 + 22) = 2082;
    v62 = v90;
    v63 = v91;
    sub_100016418(v89, v90);
    dispatch thunk of TunnelInterface.address.getter(&v86, v62, v63);
    v64 = sub_1000150C0(&qword_100087920);
    v65 = String.init<A>(describing:)(&v86, v64);
    v67 = v66;
    sub_100010D40(v65, v66, &v88);
    v86 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v50 + 24);
    swift_bridgeObjectRelease(v67);
    sub_100010DFC(v89);
    *(_WORD *)(v50 + 32) = 2082;
    v69 = v80;
    v81(v80, v19, v10);
    v70 = String.init<A>(describing:)(v69, v10);
    v72 = v71;
    sub_100010D40(v70, v71, &v88);
    v86 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v50 + 34);
    swift_bridgeObjectRelease(v72);
    v74 = *(void (**)(char *, uint64_t))(v11 + 8);
    v74(v19, v10);
    _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v83, "%{public}s: Tunnel established: %{public}s, local %{public}s -> remote %{public}s", (uint8_t *)v50, 0x2Au);
    v75 = v84;
    swift_arrayDestroy(v84, 4);
    swift_slowDealloc(v75, -1, -1);
    v48 = v85;
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    sub_100010DFC(&v92);
    sub_100010DFC(v89);
    v74 = *(void (**)(char *, uint64_t))(v11 + 8);
    v74(v19, v10);
  }
  v76 = a3[3];
  v77 = a3[4];
  sub_100016418(a3, v76);
  swift_retain(v48);
  dispatch thunk of AnyTunnelEndpoint.startPacketTransfer(errorHandler:)(sub_100062574, v48, v76, v77);
  swift_release();
  v74(v22, v10);
  return (_QWORD *)sub_100010DFC(v95);
}

void sub_10005FAE8(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = static os_log_type_t.default.getter(a1);
  v5 = qword_1000886E0;
  v6 = v4;
  if (os_log_type_enabled((os_log_t)qword_1000886E0, v4))
  {
    swift_retain(a2);
    swift_errorRetain(a1);
    swift_retain(a2);
    swift_errorRetain(a1);
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v19 = v8;
    *(_DWORD *)v7 = 136446466;
    v9 = UUID.uuidString.getter(v8);
    v11 = v10;
    sub_100010D40(v9, v10, &v19);
    v18 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 4);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v7 + 12) = 2082;
    v18 = a1;
    swift_errorRetain(a1);
    v13 = sub_1000150C0(&qword_100085A00);
    v14 = String.init<A>(describing:)(&v18, v13);
    v16 = v15;
    sub_100010D40(v14, v15, &v19);
    v18 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 14);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s: Tunnel transfer error: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  sub_100060E2C(a1);
}

_QWORD *sub_10005FCC8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  os_log_type_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  os_log_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[3];
  uint64_t v82;
  uint64_t v83;

  v13 = type metadata accessor for XPCDictionary(0);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v21 = (char *)&v67 - v20;
  if (a1)
  {
    v22 = swift_errorRetain(a1);
    v23 = static os_log_type_t.error.getter(v22);
    v24 = qword_1000886E0;
    v25 = v23;
    if (os_log_type_enabled((os_log_t)qword_1000886E0, v23))
    {
      swift_errorRetain(a1);
      swift_retain(a2);
      swift_errorRetain(a1);
      swift_retain(a2);
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(64, -1);
      v81[0] = v27;
      *(_DWORD *)v26 = 136446466;
      v28 = UUID.uuidString.getter(v27);
      v30 = v29;
      sub_100010D40(v28, v29, v81);
      *(_QWORD *)&v78 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 8, v26 + 4);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v26 + 12) = 2082;
      *(_QWORD *)&v78 = a1;
      swift_errorRetain(a1);
      v32 = sub_1000150C0(&qword_100085A00);
      v33 = String.init<A>(describing:)(&v78, v32);
      v35 = v34;
      sub_100010D40(v33, v34, v81);
      *(_QWORD *)&v78 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 8, v26 + 14);
      swift_bridgeObjectRelease(v35);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s: Server tunnel setup error: %{public}s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 2);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    swift_errorRetain(a1);
    sub_100060E2C(a1);
    swift_errorRelease(a1);
    return (_QWORD *)swift_errorRelease(a1);
  }
  else
  {
    v73 = a6;
    v74 = a7;
    v75 = v19;
    v38 = a3[3];
    v39 = a3[4];
    sub_100016418(a3, v38);
    result = dispatch thunk of AnyTunnelEndpoint.localTunnelInterface.getter(&v78, v38, v39);
    if (v79)
    {
      v40 = sub_10002D6E4(&v78, (uint64_t)v81);
      v41 = static os_log_type_t.default.getter(v40);
      v42 = qword_1000886E0;
      sub_10002D498((uint64_t)v81, (uint64_t)&v78);
      if (os_log_type_enabled(v42, v41))
      {
        swift_retain_n(a2, 2);
        v43 = swift_slowAlloc(22, -1);
        v72 = a4;
        v44 = v43;
        v45 = swift_slowAlloc(64, -1);
        v71 = v45;
        v77 = v45;
        *(_DWORD *)v44 = 136446466;
        v70 = v41;
        v46 = UUID.uuidString.getter(v45);
        v48 = v47;
        sub_100010D40(v46, v47, &v77);
        v76 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v44 + 4);
        swift_release_n(a2, 2);
        swift_bridgeObjectRelease(v48);
        *(_WORD *)(v44 + 12) = 2082;
        v68 = v44 + 14;
        v69 = v42;
        v50 = v79;
        v51 = v80;
        sub_100016418(&v78, v79);
        v52 = dispatch thunk of TunnelInterface.interfaceName.getter(v50, v51);
        v54 = v53;
        sub_100010D40(v52, v53, &v77);
        v76 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v68);
        swift_bridgeObjectRelease(v54);
        sub_100010DFC(&v78);
        _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v70, "%{public}s: Server tunnel interface created: %{public}s, creating RSD listener...", (uint8_t *)v44, 0x16u);
        v56 = v71;
        swift_arrayDestroy(v71, 2);
        swift_slowDealloc(v56, -1, -1);
        v57 = swift_slowDealloc(v44, -1, -1);
      }
      else
      {
        v57 = sub_100010DFC(&v78);
      }
      XPCDictionary.init()(v57);
      XPCDictionary.subscript.setter(0xD000000000000013, 0x800000010006F100, 6581603, 0xE300000000000000);
      v58 = v82;
      v59 = v83;
      sub_100016418(v81, v82);
      v60 = dispatch thunk of TunnelInterface.interfaceName.getter(v58, v59);
      XPCDictionary.subscript.setter(v60, v61, 0x6361667265746E69, 0xEE00656D616E5F65);
      v62 = v75;
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v17, v21, v13);
      v63 = *(_QWORD *)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
      sub_10002D498((uint64_t)a3, (uint64_t)&v78);
      v64 = (_QWORD *)swift_allocObject(&unk_10007D3A0, 80, 7);
      v64[2] = a2;
      sub_10002D6E4(&v78, (uint64_t)(v64 + 3));
      v65 = v74;
      v64[8] = v73;
      v64[9] = v65;
      swift_retain(a2);
      swift_retain(v65);
      dispatch thunk of XPCConnection.send(message:replyQueue:replyHandler:)(v17, v63, sub_100062528, v64);
      swift_release();
      v66 = *(void (**)(char *, uint64_t))(v62 + 8);
      v66(v17, v13);
      v66(v21, v13);
      return (_QWORD *)sub_100010DFC(v81);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100060248(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  NSObject *v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t (*v64)(_QWORD, _QWORD);
  void (*v65)(NSObject *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v71;
  os_log_type_t v72;
  NSObject *v73;
  uint64_t (*v74)(_QWORD, _QWORD);
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t result;
  void (*v95)(NSObject *, uint64_t);
  os_log_t v96;
  uint64_t v97;
  os_log_type_t v98;
  NSObject *v99;
  char *v100;
  os_log_type_t v101;
  _BOOL4 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(os_log_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  os_log_type_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  os_log_t v152;
  uint64_t v153;
  uint64_t *v154;
  os_log_t v155;
  uint64_t v156;
  uint64_t (*v157)(_QWORD, _QWORD);
  char v158;
  unint64_t v159;
  uint64_t v160;

  v149 = a4;
  v150 = a5;
  v148 = a3;
  v156 = a2;
  v6 = type metadata accessor for XPCDictionary(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v146 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v151 = (char *)&v145 - v13;
  v15 = __chkstk_darwin(v12, v14);
  v155 = (os_log_t)((char *)&v145 - v16);
  __chkstk_darwin(v15, v17);
  v19 = ((char *)&v145 - v18);
  v20 = type metadata accessor for XPCError(0);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = __chkstk_darwin(v20, v22);
  v152 = (os_log_t)((char *)&v145 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = __chkstk_darwin(v23, v25);
  v28 = (char *)&v145 - v27;
  __chkstk_darwin(v26, v29);
  v31 = (char *)&v145 - v30;
  v32 = sub_1000150C0(&qword_100085A80);
  v34 = __chkstk_darwin(v32, v33);
  v147 = (uint64_t)&v145 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v34, v36);
  v154 = (uint64_t *)((char *)&v145 - v38);
  __chkstk_darwin(v37, v39);
  v41 = (char *)&v145 - v40;
  v153 = a1;
  v42 = a1;
  v44 = v43;
  sub_1000393BC(v42, (uint64_t)&v145 - v40, &qword_100085A80);
  if (swift_getEnumCaseMultiPayload(v41, v44) == 1)
  {
    v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(v31, v41, v20);
    v46 = static os_log_type_t.error.getter(v45);
    v47 = qword_1000886E0;
    v48 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    v48(v28, v31, v20);
    if (os_log_type_enabled(v47, v46))
    {
      v155 = v47;
      v49 = v156;
      swift_retain_n(v156, 2);
      v50 = swift_slowAlloc(22, -1);
      v51 = (uint64_t *)swift_slowAlloc(64, -1);
      v154 = v51;
      v157 = (uint64_t (*)(_QWORD, _QWORD))v51;
      *(_DWORD *)v50 = 136446466;
      v151 = (char *)(v50 + 4);
      LODWORD(v153) = v46;
      v52 = UUID.uuidString.getter(v51);
      v53 = v48;
      v55 = v54;
      sub_100010D40(v52, v54, (uint64_t *)&v157);
      v159 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v151);
      swift_release_n(v49, 2);
      v57 = v55;
      v48 = v53;
      swift_bridgeObjectRelease(v57);
      *(_WORD *)(v50 + 12) = 2082;
      v58 = v152;
      v48((char *)v152, v28, v20);
      v59 = String.init<A>(describing:)(v58, v20);
      v61 = v60;
      sub_100010D40(v59, v60, (uint64_t *)&v157);
      v159 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v50 + 14);
      swift_bridgeObjectRelease(v61);
      v63 = *(void (**)(char *, uint64_t))(v21 + 8);
      v63(v28, v20);
      _os_log_impl((void *)&_mh_execute_header, v155, (os_log_type_t)v153, "%{public}s: Server XPC reply error: %{public}s", (uint8_t *)v50, 0x16u);
      v64 = (uint64_t (*)(_QWORD, _QWORD))v154;
      swift_arrayDestroy(v154, 2);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v50, -1, -1);
    }
    else
    {
      v63 = *(void (**)(char *, uint64_t))(v21 + 8);
      v63(v28, v20);
    }
    sub_10000EC7C(&qword_100087908, (uint64_t (*)(uint64_t))&type metadata accessor for XPCError);
    v92 = swift_allocError(v20, v91, 0, 0);
    v48(v93, v31, v20);
    sub_100060E2C(v92);
    swift_errorRelease(v92);
    return ((uint64_t (*)(char *, uint64_t))v63)(v31, v20);
  }
  v65 = *(void (**)(NSObject *, char *, uint64_t))(v7 + 16);
  v65(v19, v41, v6);
  v66 = XPCDictionary.subscript.getter(0x746C75736572);
  v68 = v7;
  if (v67)
  {
    v69 = v67;
    if (v66 == 19279 && v67 == 0xE200000000000000)
    {
      swift_bridgeObjectRelease(v67);
    }
    else
    {
      v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v67, 19279, 0xE200000000000000, 0);
      v66 = swift_bridgeObjectRelease(v69);
      if ((v71 & 1) == 0)
        goto LABEL_10;
    }
    v95 = *(void (**)(NSObject *, uint64_t))(v7 + 8);
    v95(v19, v6);
    v96 = v155;
    v97 = (*(uint64_t (**)(os_log_t, char *, uint64_t))(v7 + 32))(v155, v41, v6);
    v98 = static os_log_type_t.debug.getter(v97);
    v99 = qword_1000886E0;
    v100 = v151;
    v65(v151, (char *)v96, v6);
    v101 = v98;
    v102 = os_log_type_enabled(v99, v98);
    v145 = v6;
    v154 = (uint64_t *)v95;
    if (v102)
    {
      v103 = v156;
      swift_retain_n(v156, 2);
      v104 = swift_slowAlloc(22, -1);
      v105 = swift_slowAlloc(64, -1);
      v153 = v105;
      v157 = (uint64_t (*)(_QWORD, _QWORD))v105;
      *(_DWORD *)v104 = 136446466;
      v106 = UUID.uuidString.getter(v105);
      v108 = v107;
      sub_100010D40(v106, v107, (uint64_t *)&v157);
      v159 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v104 + 4);
      swift_release_n(v103, 2);
      swift_bridgeObjectRelease(v108);
      *(_WORD *)(v104 + 12) = 2082;
      v110 = v146;
      v65(v146, v100, v6);
      v111 = String.init<A>(describing:)(v110, v6);
      v113 = v112;
      sub_100010D40(v111, v112, (uint64_t *)&v157);
      v159 = v114;
      v96 = v155;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v104 + 14);
      v115 = v113;
      v116 = (void (*)(char *, uint64_t))v154;
      swift_bridgeObjectRelease(v115);
      v116(v100, v6);
      _os_log_impl((void *)&_mh_execute_header, v99, v101, "%{public}s: Server XPC reply: %{public}s", (uint8_t *)v104, 0x16u);
      v117 = v153;
      swift_arrayDestroy(v153, 2);
      swift_slowDealloc(v117, -1, -1);
      swift_slowDealloc(v104, -1, -1);
    }
    else
    {
      v95(v100, v6);
      v103 = v156;
    }
    v123 = XPCDictionary.subscript.getter(0x6E5F656369766564);
    if (v124)
    {
      v125 = v123;
      v126 = v124;
      v127 = sub_100062538();
      v128 = XPCDictionary.subscript.getter(&v157, 0x72656E657473696CLL, 0xED000074726F705FLL, &type metadata for UInt, v127);
      if ((v158 & 1) == 0)
      {
        v129 = (unint64_t)v157;
        v130 = static os_log_type_t.default.getter(v128);
        v131 = qword_1000886E0;
        v132 = v130;
        if (os_log_type_enabled((os_log_t)qword_1000886E0, v130))
        {
          swift_retain_n(v103, 2);
          swift_bridgeObjectRetain_n(v126, 2);
          v133 = swift_slowAlloc(32, -1);
          v134 = swift_slowAlloc(64, -1);
          v157 = (uint64_t (*)(_QWORD, _QWORD))v134;
          *(_DWORD *)v133 = 136446722;
          v135 = UUID.uuidString.getter(v134);
          v137 = v136;
          sub_100010D40(v135, v136, (uint64_t *)&v157);
          v159 = v138;
          v103 = v156;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v133 + 4);
          swift_release_n(v103, 2);
          swift_bridgeObjectRelease(v137);
          *(_WORD *)(v133 + 12) = 2082;
          swift_bridgeObjectRetain(v126);
          sub_100010D40(v125, v126, (uint64_t *)&v157);
          v159 = v139;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v133 + 14);
          swift_bridgeObjectRelease_n(v126, 3);
          *(_WORD *)(v133 + 22) = 2048;
          v159 = v129;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v133 + 24);
          _os_log_impl((void *)&_mh_execute_header, v131, v132, "%{public}s: Created RSD server device name: %{public}s with listener on port: %lu", (uint8_t *)v133, 0x20u);
          swift_arrayDestroy(v134, 2);
          swift_slowDealloc(v134, -1, -1);
          v140 = v133;
          v96 = v155;
          swift_slowDealloc(v140, -1, -1);
        }
        v141 = v103 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
        swift_beginAccess(v103 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, &v157, 1, 0);
        v142 = *(_QWORD *)(v141 + 120);
        *(_QWORD *)(v141 + 112) = v125;
        *(_QWORD *)(v141 + 120) = v126;
        swift_bridgeObjectRelease(v142);
        OS_dispatch_queue.assertOnQueueHierarchy()();
        v143 = v148[3];
        v144 = v148[4];
        sub_100016418(v148, v143);
        if (v129 < 0x10000)
        {
          dispatch thunk of AnyTunnelEndpoint.finishEstablishingServerTunnel(serverRSDPort:completion:)(v129, v149, v150, v143, v144);
          return ((uint64_t (*)(os_log_t, uint64_t))v154)(v96, v145);
        }
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20);
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_10:
  v155 = v19;
  v72 = static os_log_type_t.error.getter(v66);
  v73 = qword_1000886E0;
  v74 = (uint64_t (*)(_QWORD, _QWORD))v154;
  sub_1000393BC(v153, (uint64_t)v154, &qword_100085A80);
  v75 = v72;
  if (os_log_type_enabled(v73, v72))
  {
    v152 = v73;
    v76 = v156;
    swift_retain_n(v156, 2);
    v77 = swift_slowAlloc(22, -1);
    v145 = v6;
    v78 = v77;
    v79 = swift_slowAlloc(64, -1);
    v151 = (char *)v79;
    v157 = (uint64_t (*)(_QWORD, _QWORD))v79;
    *(_DWORD *)v78 = 136446466;
    v80 = UUID.uuidString.getter(v79);
    v82 = v81;
    sub_100010D40(v80, v81, (uint64_t *)&v157);
    v159 = v83;
    v153 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v78 + 4);
    swift_release_n(v76, 2);
    swift_bridgeObjectRelease(v82);
    *(_WORD *)(v78 + 12) = 2082;
    v84 = v147;
    sub_1000393BC((uint64_t)v74, v147, &qword_100085A80);
    v85 = String.init<A>(describing:)(v84, v44);
    v87 = v86;
    sub_100010D40(v85, v86, (uint64_t *)&v157);
    v159 = v88;
    v68 = v153;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v78 + 14);
    swift_bridgeObjectRelease(v87);
    sub_10002D678((uint64_t)v74, &qword_100085A80);
    _os_log_impl((void *)&_mh_execute_header, v152, v75, "%{public}s: Server XPC result not successful: %{public}s", (uint8_t *)v78, 0x16u);
    v89 = v151;
    swift_arrayDestroy(v151, 2);
    swift_slowDealloc(v89, -1, -1);
    v90 = v78;
    v6 = v145;
    swift_slowDealloc(v90, -1, -1);
  }
  else
  {
    sub_10002D678((uint64_t)v74, &qword_100085A80);
  }
  v118 = type metadata accessor for RemotePairingError(0);
  sub_10000EC7C((unint64_t *)&unk_1000859D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
  v120 = swift_allocError(v118, v119, 0, 0);
  sub_10000EC7C((unint64_t *)&unk_1000853D0, (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
  static Error<>.dataCorrupted.getter(v118, v121);
  sub_100060E2C(v120);
  swift_errorRelease(v120);
  v122 = *(void (**)(os_log_t, uint64_t))(v68 + 8);
  v122(v155, v6);
  return ((uint64_t (*)(char *, uint64_t))v122)(v41, v6);
}

void sub_100060E2C(uint64_t a1)
{
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  NSObject *v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  void (*v71)(uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE v109[24];
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _QWORD v113[17];

  sub_1000165D0();
  if (a1)
  {
    v5 = sub_100013AE0();
    v6 = static os_log_type_t.error.getter(v5);
    v7 = qword_1000886E0;
    if (sub_100062C0C(v6))
    {
      sub_100013AE0();
      sub_10001612C();
      sub_100013AE0();
      sub_10001612C();
      v8 = sub_1000123C4(22);
      v9 = sub_1000123C4(64);
      *(_QWORD *)&v110 = v9;
      *(_DWORD *)v8 = 136446466;
      v10 = sub_100062C98();
      sub_100062C48(v10, v11, v12, v13, v14, v15, v16, v17, v105, v106);
      sub_10003B138();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, v19, v8 + 4);
      sub_100015870(v1);
      sub_1000118F4();
      *(_WORD *)(v8 + 12) = 2082;
      v105 = a1;
      sub_100013AE0();
      v20 = sub_1000150C0(&qword_100085A00);
      v21 = String.init<A>(describing:)(&v105, v20);
      v23 = v22;
      sub_100062C48(v21, v22, v24, v25, v26, v27, v28, v29, v105, v106);
      v105 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v8 + 14);
      swift_bridgeObjectRelease(v23);
      sub_1000138CC();
      sub_1000138CC();
      sub_100062C50((void *)&_mh_execute_header, v7, v2, "%{public}s: Cancelling tunnel with error: %{public}s");
      sub_100062C28();
      sub_100012398(v9);
      sub_100012398(v8);
    }
    sub_1000138CC();
  }
  else
  {
    v31 = static os_log_type_t.default.getter(v4);
    v32 = qword_1000886E0;
    if (sub_100062C0C(v31))
    {
      sub_1000165F4(v1);
      v33 = (uint8_t *)sub_1000123C4(12);
      v34 = sub_1000123C4(32);
      *(_DWORD *)v33 = 136446210;
      *(_QWORD *)&v110 = v34;
      v35 = sub_100062C98();
      sub_100062C48(v35, v36, v37, v38, v39, v40, v41, v42, v105, v106);
      sub_10003B138();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v43, v44, v33 + 4);
      sub_100015870(v1);
      sub_1000118F4();
      sub_1000118DC((void *)&_mh_execute_header, v32, v2, "%{public}s: Cancelling tunnel", v33);
      sub_1000135B4(v34);
      sub_100012398(v34);
      sub_100012398((uint64_t)v33);
    }
  }
  v45 = (_QWORD *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state);
  v46 = sub_1000123DC(v1 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, (uint64_t)v109, 1);
  v54 = sub_100062CAC(v46, v47, v48, v49, v50, v51, v52, v53);
  if (*((_QWORD *)&v111 + 1))
  {
    sub_10002D498((uint64_t)&v110, (uint64_t)&v105);
    sub_100062C40(v62, v63, v64, v65, v66, v67, v68, v69);
    v70 = sub_100016418(&v105, v107);
    nw_listener_cancel(*(nw_listener_t *)(*v70 + 32));
    sub_100010DFC(&v105);
  }
  else
  {
    sub_100062C40(v54, v55, v56, v57, v58, v59, v60, v61);
  }
  v112 = 0;
  v110 = 0u;
  v111 = 0u;
  sub_1000123DC((uint64_t)v45, (uint64_t)&v105, 33);
  sub_100062910((uint64_t)&v110, (uint64_t)v45, &qword_1000878C0);
  swift_endAccess(&v105);
  sub_1000165D0();
  v71 = (void (*)(uint64_t))v45[18];
  if (v71)
  {
    sub_10000E49C();
    v71(a1);
    sub_100062C6C((uint64_t)v71);
    v72 = v45[18];
  }
  else
  {
    v72 = 0;
  }
  v73 = v45[19];
  v45[18] = 0;
  v45[19] = 0;
  sub_1000392D4(v72, v73);
  sub_1000165D0();
  v82 = sub_100062CAC(v74, v75, v76, v77, v78, v79, v80, v81);
  if (v113[3])
  {
    sub_10002D498((uint64_t)v113, (uint64_t)&v105);
    sub_100062C40(v90, v91, v92, v93, v94, v95, v96, v97);
    v98 = v107;
    v99 = v108;
    sub_100016418(&v105, v107);
    dispatch thunk of AnyTunnelEndpoint.cancel()(v98, v99);
    sub_100010DFC(&v105);
  }
  else
  {
    sub_100062C40(v82, v83, v84, v85, v86, v87, v88, v89);
  }
  v112 = 0;
  v110 = 0u;
  v111 = 0u;
  sub_1000123DC((uint64_t)v45, (uint64_t)&v105, 33);
  sub_100062910((uint64_t)&v110, (uint64_t)(v45 + 5), &qword_1000878C8);
  swift_endAccess(&v105);
  sub_1000165D0();
  v100 = v45 + 10;
  if (v45[10])
  {
    v101 = sub_10000E49C();
    dispatch thunk of XPCConnection.cancel()(v101);
    sub_1000118D4();
    v102 = *v100;
  }
  else
  {
    v102 = 0;
  }
  *v100 = 0;
  v45[11] = 0;
  swift_release(v102);
  sub_1000165D0();
  if (v45[13])
  {
    v103 = sub_10000E49C();
    dispatch thunk of WiFiKeepAlive.cancel()(v103);
    sub_1000118D4();
    v104 = v45[13];
  }
  else
  {
    v104 = 0;
  }
  v45[13] = 0;
  swift_release(v104);
  sub_1000165D0();
}

void sub_100061234()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for UUID(0);
  sub_100013AF4(v1);

  sub_100061C90((_QWORD *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state));
  sub_100014510();
}

uint64_t sub_100061294()
{
  uint64_t v0;

  sub_100061234();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000612B8()
{
  return type metadata accessor for Tunnel(0);
}

uint64_t type metadata accessor for Tunnel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000877C8;
  if (!qword_1000877C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Tunnel);
  return result;
}

uint64_t sub_1000612F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = "\b";
    v4[3] = &unk_100066E18;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t destroy for Tunnel.MutableState(_QWORD *a1)
{
  uint64_t result;

  if (a1[3])
    sub_100010DFC(a1);
  if (a1[8])
    sub_100010DFC(a1 + 5);
  swift_release(a1[10]);
  swift_release(a1[12]);
  swift_release(a1[13]);
  result = swift_bridgeObjectRelease(a1[15]);
  if (a1[16])
    result = swift_release(a1[17]);
  if (a1[18])
    return swift_release(a1[19]);
  return result;
}

uint64_t initializeWithCopy for Tunnel.MutableState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v7 = (_OWORD *)(a1 + 40);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  v12 = *(_QWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v13;
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v15;
  v16 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v16;
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v15);
  swift_bridgeObjectRetain(v16);
  if (v12)
  {
    v17 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v12;
    *(_QWORD *)(a1 + 136) = v17;
    swift_retain(v17);
  }
  else
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  }
  v18 = *(_QWORD *)(a2 + 144);
  if (v18)
  {
    v19 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v18;
    *(_QWORD *)(a1 + 152) = v19;
    swift_retain(v19);
  }
  else
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  }
  return a1;
}

uint64_t assignWithCopy for Tunnel.MutableState(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      sub_100061748((_QWORD *)a1, a2);
      goto LABEL_8;
    }
    sub_100010DFC((_QWORD *)a1);
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
    goto LABEL_8;
  }
  v5 = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_8:
  v7 = *((_QWORD *)a2 + 8);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v7)
    {
      sub_100061748((_QWORD *)(a1 + 40), (_QWORD *)a2 + 5);
      goto LABEL_15;
    }
    sub_100010DFC((_QWORD *)(a1 + 40));
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, (uint64_t)a2 + 40);
    goto LABEL_15;
  }
  v8 = *(__int128 *)((char *)a2 + 40);
  v9 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 56) = v9;
LABEL_15:
  v10 = *((_QWORD *)a2 + 10);
  v11 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 80) = v10;
  swift_retain(v10);
  swift_release();
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 96) = v12;
  swift_retain(v12);
  swift_release();
  v13 = *((_QWORD *)a2 + 13);
  *(_QWORD *)(a1 + 104) = v13;
  swift_retain(v13);
  swift_release();
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  v14 = *((_QWORD *)a2 + 15);
  v15 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *((_QWORD *)a2 + 16);
  if (*(_QWORD *)(a1 + 128))
  {
    if (v16)
    {
      v17 = *((_QWORD *)a2 + 17);
      *(_QWORD *)(a1 + 128) = v16;
      *(_QWORD *)(a1 + 136) = v17;
      swift_retain(v17);
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v16)
  {
    v18 = *((_QWORD *)a2 + 17);
    *(_QWORD *)(a1 + 128) = v16;
    *(_QWORD *)(a1 + 136) = v18;
    swift_retain(v18);
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 128) = a2[8];
LABEL_22:
  v19 = *((_QWORD *)a2 + 18);
  if (!*(_QWORD *)(a1 + 144))
  {
    if (v19)
    {
      v21 = *((_QWORD *)a2 + 19);
      *(_QWORD *)(a1 + 144) = v19;
      *(_QWORD *)(a1 + 152) = v21;
      swift_retain(v21);
      return a1;
    }
LABEL_28:
    *(_OWORD *)(a1 + 144) = a2[9];
    return a1;
  }
  if (!v19)
  {
    swift_release();
    goto LABEL_28;
  }
  v20 = *((_QWORD *)a2 + 19);
  *(_QWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 152) = v20;
  swift_retain(v20);
  swift_release();
  return a1;
}

_QWORD *sub_100061748(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

void *initializeWithTake for Tunnel.MutableState(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA0uLL);
}

uint64_t assignWithTake for Tunnel.MutableState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 24))
    sub_100010DFC((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 64))
    sub_100010DFC((_QWORD *)(a1 + 40));
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
  v6 = *(_QWORD *)(a2 + 120);
  v7 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 128))
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v8;
      *(_QWORD *)(a1 + 136) = v9;
      swift_release();
      goto LABEL_12;
    }
    swift_release();
  }
  else if (v8)
  {
    v10 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v8;
    *(_QWORD *)(a1 + 136) = v10;
    goto LABEL_12;
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
LABEL_12:
  v11 = *(_QWORD *)(a2 + 144);
  if (!*(_QWORD *)(a1 + 144))
  {
    if (v11)
    {
      v13 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v11;
      *(_QWORD *)(a1 + 152) = v13;
      return a1;
    }
LABEL_18:
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    return a1;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_18;
  }
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v11;
  *(_QWORD *)(a1 + 152) = v12;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Tunnel.MutableState(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 160))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Tunnel.MutableState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Tunnel.MutableState()
{
  return &type metadata for Tunnel.MutableState;
}

void **initializeBufferWithCopyOfBuffer for Tunnel.Initiator(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for Tunnel.Initiator(id *a1)
{

}

void **assignWithCopy for Tunnel.Initiator(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  v5 = v3;

  return a1;
}

_QWORD *initializeWithTake for Tunnel.Initiator(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for Tunnel.Initiator(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for Tunnel.Initiator(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Tunnel.Initiator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *sub_100061C2C(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for Tunnel.Initiator()
{
  return &type metadata for Tunnel.Initiator;
}

uint64_t sub_100061C5C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Tunnel.MutableState(a2, a1);
  return a2;
}

_QWORD *sub_100061C90(_QWORD *a1)
{
  destroy for Tunnel.MutableState(a1);
  return a1;
}

uint64_t sub_100061CBC(uint64_t a1)
{
  uint64_t v1;

  return sub_10005EE9C(a1, v1);
}

uint64_t sub_100061CC4()
{
  uint64_t v0;

  sub_1000135FC();
  sub_100062C74();
  return swift_deallocObject(v0, 64, 7);
}

_QWORD *sub_100061CE8(uint64_t a1)
{
  uint64_t v1;

  return sub_10005F438(a1, *(_QWORD *)(v1 + 16), (_QWORD *)(v1 + 24));
}

uint64_t sub_100061CF4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = Data.InlineData.init(_:)();
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = Data.LargeSlice.init(_:)();
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = Data.InlineSlice.init(_:)();
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100061D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v7 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  v8 = __OFSUB__(a2, a1);
  v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  v10 = __DataStorage._length.getter();
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  v12 = v7 + v11;
  if (v7)
    v13 = v12;
  else
    v13 = 0;
  return sub_100061CF4(v7, v13, a3);
}

uint64_t sub_100061DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for DispatchData(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  sub_100012460();
  result = __DataStorage._bytes.getter();
  v9 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  v16 = DispatchData.init(bytes:)(v9, v15);
  v17 = DispatchData._bridgeToObjectiveC()(v16);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
  return v17;
}

uint64_t sub_100061ED8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  return Data._Representation.append(contentsOf:)(v5, v11);
}

uint64_t sub_100061F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v12 = a1;
  v13 = a2;
  v14 = BYTE2(a2);
  v15 = BYTE3(a2);
  v16 = BYTE4(a2);
  v17 = BYTE5(a2);
  if (a3)
  {
    if (a3 <= 14)
    {
      result = Data.InlineData.init(_:)(&v12, (char *)&v12 + a3);
      v9 = v10 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
      v7 = __DataStorage.init(bytes:length:)(&v12, a3);
      if ((unint64_t)a3 >= 0x7FFFFFFF)
      {
        v11 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v11, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = a3;
        v9 = v7 | 0x8000000000000000;
      }
      else
      {
        result = a3 << 32;
        v9 = v7 | 0x4000000000000000;
      }
    }
  }
  else
  {
    result = 0;
    v9 = 0xC000000000000000;
  }
  *a4 = result;
  a4[1] = v9;
  return result;
}

uint64_t sub_1000620C4(unint64_t a1, unint64_t a2, uint64_t a3)
{
  char v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE v27[14];

  v3 = a2;
  v4 = a1;
  v5 = a1 >> 8;
  v6 = a1 >> 16;
  v7 = a1 >> 24;
  v8 = HIDWORD(a1);
  v18 = a1 >> 40;
  v19 = HIWORD(a1);
  v20 = HIBYTE(a1);
  v21 = a2 >> 8;
  v22 = a2 >> 16;
  v23 = a2 >> 24;
  v24 = HIDWORD(a2);
  v25 = a2 >> 40;
  v9 = type metadata accessor for DispatchData(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  sub_100011928();
  v14 = v13 - v12;
  v27[0] = v4;
  v27[1] = v5;
  v27[2] = v6;
  v27[3] = v7;
  v27[4] = v8;
  v27[5] = v18;
  v27[6] = v19;
  v27[7] = v20;
  v27[8] = v3;
  v27[9] = v21;
  v27[10] = v22;
  v27[11] = v23;
  v27[12] = v24;
  v27[13] = v25;
  v15 = DispatchData.init(bytes:)(v27, &v27[a3]);
  v16 = DispatchData._bridgeToObjectiveC()(v15);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v9);
  return v16;
}

uint64_t sub_100062244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v4 = a1;
  v5 = a2;
  v6 = BYTE2(a2);
  v7 = BYTE3(a2);
  v8 = BYTE4(a2);
  v9 = BYTE5(a2);
  return Data._Representation.append(contentsOf:)(&v4, (char *)&v4 + a3);
}

void sub_100062314(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_100062368 + dword_1000624A4[sub_100016418(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_100062378()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_100015614(v2, v1);
  sub_100062244(v0, v3 & 0xFFFFFFFFFFFFLL, BYTE6(v3));
  return sub_100010DFC(&v5);
}

uint64_t sub_1000624B4()
{
  uint64_t v0;

  sub_1000135FC();
  sub_100062C74();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, 96, 7);
}

_QWORD *sub_1000624E8(uint64_t a1)
{
  uint64_t *v1;

  return sub_10005FCC8(a1, v1[2], v1 + 3, v1[8], v1[9], v1[10], v1[11]);
}

uint64_t sub_1000624FC()
{
  uint64_t v0;

  sub_1000135FC();
  sub_100062C74();
  swift_release();
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100062528(uint64_t a1)
{
  uint64_t *v1;

  return sub_100060248(a1, v1[2], v1 + 3, v1[8], v1[9]);
}

unint64_t sub_100062538()
{
  unint64_t result;

  result = qword_100087900;
  if (!qword_100087900)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_100087900);
  }
  return result;
}

void sub_100062574(uint64_t a1)
{
  uint64_t v1;

  sub_10005FAE8(a1, v1);
}

uint64_t sub_10006257C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000625A0()
{
  uint64_t v0;

  sub_1000135FC();
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000625C0(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10005D934(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
}

uint64_t sub_1000625D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100062C7C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  sub_1000135FC();
  sub_1000118EC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return sub_100013A48(v0, v5, v6);
}

uint64_t sub_100062634(char a1)
{
  uint64_t v1;
  char v2;

  v2 = a1 & 1;
  sub_100062C7C();
  return sub_10005DA1C(v2, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100062670()
{
  uint64_t v0;

  return sub_10005DCB4(v0);
}

uint64_t sub_100062678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = type metadata accessor for NWObjcTunnelConnectionWrapper(0);
  sub_10000EC7C((unint64_t *)&unk_100087098, type metadata accessor for NWObjcTunnelConnectionWrapper);
  v10[4] = v4;
  v10[0] = a1;
  v5 = *(NSObject **)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  swift_retain(a1);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  v6 = swift_allocObject(&unk_10007D468, 56, 7);
  sub_10002D498((uint64_t)v10, v6 + 16);
  v7 = swift_allocObject(&unk_10007D3C8, 24, 7);
  swift_weakInit(v7 + 16, a2);
  v8 = swift_allocObject(&unk_10007D490, 32, 7);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  swift_retain(v7);
  swift_retain(v6);
  sub_1000459DC(v5, (uint64_t)sub_100062908, v8);
  swift_release();
  swift_release();
  swift_release();
  return sub_100010DFC(v10);
}

uint64_t sub_1000627A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = type metadata accessor for NWQUICTunnelConnection(0);
  sub_10000EC7C(&qword_100087930, type metadata accessor for NWQUICTunnelConnection);
  v10[4] = v4;
  v10[0] = a1;
  v5 = *(void **)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  swift_retain(a1);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  v6 = swift_allocObject(&unk_10007D468, 56, 7);
  sub_10002D498((uint64_t)v10, v6 + 16);
  v7 = swift_allocObject(&unk_10007D3C8, 24, 7);
  swift_weakInit(v7 + 16, a2);
  v8 = swift_allocObject(&unk_10007D4B8, 32, 7);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  swift_retain(v7);
  swift_retain(v6);
  sub_1000479B8(v5, (uint64_t)sub_100062BDC, v8);
  swift_release();
  swift_release();
  swift_release();
  return sub_100010DFC(v10);
}

uint64_t sub_1000628D8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    sub_100010DFC((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100062908(uint64_t a1)
{
  uint64_t v1;

  return sub_10005DF10(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100062910(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1000154B0(a1, a2, a3);
  sub_100015334(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  sub_100014510();
}

uint64_t sub_100062940()
{
  uint64_t v0;

  sub_1000135FC();
  sub_1000118EC();
  return swift_deallocObject(v0, 32, 7);
}

void sub_100062964()
{
  sub_10005C14C();
}

uint64_t sub_10006296C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(sub_1000150C0(&qword_100087948) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  sub_1000135FC();
  sub_100015430(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  v5 = type metadata accessor for TransportProtocolType(0);
  if (!sub_100015658(v0 + v3, 1, v5))
  {
    v6 = sub_100014548();
    v7(v6);
  }
  v8 = (v4 + v3 + 9) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8));
  return sub_100013A48(v0, v9, v2 | 7);
}

void sub_100062A10()
{
  sub_1000150C0(&qword_100087948);
  sub_10005C170();
  sub_100014510();
}

uint64_t sub_100062A70@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10005B53C(v1, a1);
}

uint64_t sub_100062A8C(uint64_t a1)
{
  uint64_t *v1;

  return sub_10005BB38(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100062A9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100062AC8(uint64_t a1)
{
  uint64_t *v1;

  return sub_10005B8D8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100062AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(sub_1000150C0(&qword_100086178) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  sub_1000118EC();
  v5 = sub_100014548();
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    swift_errorRelease(*(_QWORD *)(v0 + v3));
  }
  else
  {
    v7 = type metadata accessor for ListenerStartedResponse(0);
    sub_100013AF4(v7);
  }
  return sub_100013A48(v0, v3 + v4, v2 | 7);
}

void sub_100062B50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000150C0(&qword_100086178) - 8) + 80);
  (*(void (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
  sub_100014510();
}

uint64_t sub_100062B90()
{
  uint64_t v0;

  sub_1000118EC();
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100062BE0(uint64_t a1)
{
  unint64_t v1;

  return sub_100015614(a1, v1);
}

uint64_t sub_100062BE8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100015664(v1, 1, 1, v0);
}

uint64_t sub_100062BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 240) + 104))(v2, a2, *(_QWORD *)(v3 - 232));
}

BOOL sub_100062C0C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_100062C1C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t sub_100062C28()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

void sub_100062C38(unint64_t *a1)
{
  uint64_t *v1;

  sub_10003352C(a1, v1);
}

_QWORD *sub_100062C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  return sub_100061C90((uint64_t *)va);
}

void sub_100062C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_100010D40(a1, a2, (uint64_t *)va);
}

void sub_100062C50(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

void sub_100062C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010D40(a1, a2, (uint64_t *)(v2 - 192));
}

uint64_t sub_100062C64(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_100062C6C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000392D4(a1, v1);
}

uint64_t sub_100062C74()
{
  uint64_t v0;

  return sub_100010DFC((_QWORD *)(v0 + 24));
}

uint64_t sub_100062C7C()
{
  return type metadata accessor for CertificateUtilities.RawTLSPublicKeyInfo(0);
}

uint64_t sub_100062C84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

void sub_100062C90()
{
  OS_dispatch_queue.assertOnQueueHierarchy()();
}

uint64_t sub_100062C98()
{
  return UUID.uuidString.getter();
}

uint64_t sub_100062CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  return sub_100061C5C(v8, (uint64_t)va);
}

void sub_100062CB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001575C();
  sub_100013894((void *)&_mh_execute_header, v0, v1, "Pairing is restricted by FindMy", v2, v3, v4, v5, v6);
  sub_10001388C();
}

void sub_100062CE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001575C();
  sub_10001574C((void *)&_mh_execute_header, v0, v1, "Unable to initialize FMDFMIPManager to check FindMy-managed restrictions", v2, v3, v4, v5, v6);
  sub_10001388C();
}

void sub_100062D10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001575C();
  sub_10001574C((void *)&_mh_execute_header, v0, v1, "Unable to initialize MCProfileConnection to check ManagedConfiguration-managed restrictions", v2, v3, v4, v5, v6);
  sub_10001388C();
}

void sub_100062D3C(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unrecognized response '%d' from ManagedConfiguration. Will allow pairing with prompt.", (uint8_t *)v2, 8u);
  sub_10001388C();
}

void sub_100062DAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001575C();
  sub_100013894((void *)&_mh_execute_header, v0, v1, "Pairing is restricted by ManagedConfiguration", v2, v3, v4, v5, v6);
  sub_10001388C();
}

void sub_100062DD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001575C();
  sub_100013894((void *)&_mh_execute_header, v0, v1, "Failed to create array.", v2, v3, v4, v5, v6);
  sub_10001388C();
}

void sub_100062E04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001575C();
  sub_100013894((void *)&_mh_execute_header, v0, v1, "Invalid argument.", v2, v3, v4, v5, v6);
  sub_10001388C();
}

void sub_100062E30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001575C();
  sub_100013894((void *)&_mh_execute_header, v0, v1, "Failed to create RSD browser.", v2, v3, v4, v5, v6);
  sub_10001388C();
}

void sub_100062E5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001575C();
  sub_100013894((void *)&_mh_execute_header, v0, v1, "Failed to restart RSD browser.", v2, v3, v4, v5, v6);
  sub_10001388C();
}

id objc_msgSend_active(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "active");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_browser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "browser");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_disconnectHandlers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectHandlers");
}

id objc_msgSend_hostMayPairWithOptions_challenge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hostMayPairWithOptions:challenge:");
}

id objc_msgSend_lockdownShouldDisableDevicePairing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockdownShouldDisableDevicePairing");
}

id objc_msgSend_log(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "log");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setBrowser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrowser:");
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedConnection");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_startOnQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOnQueue:");
}

